<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"
>
	
	<!-- General Definitions-->
	<bean id="requiedAnnotationEnabler" class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor">
		<description>Make @Required annotation enabled</description>
	</bean>



	<!--  DataSource and Transaction Definitions -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://127.0.0.1:3306/test2?useUnicode=true&amp;characterEncoding=UTF-8"/>
		<property name="username" value="tester"/>
		<property name="password" value="tester"/>

		<!-- 
		@Question Is it ok to toggle on defaultAutoCommt 
		          with declarative transaction management ? 
		@Answer Yes. It is ok. Transaction manager take the conrol 
		        of the auto commit mode.
		-->
		<property name="defaultAutoCommit" value="true"/>
		<property name="initialSize" value="3"/>
		<property name="maxActive" value="3"/>
		<property name="maxIdle" value="3"/>
		<property name="minIdle" value="0"/>
	</bean>
	
	<bean id="txAwareDataSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
		<description> 
		<!-- 
		IMPORTANT Explicit TransactionAwareDataSourceProxy bean in plain JDBC datasource based daos

		To use springframework transaction in plain JDBC based DAOs, JDBC datasource should be proxied by 
		TransactionAwareDataSourceProxy.
		Read javadoc or reference manual about this.
		-->
		</description>
		<property name="targetDataSource" ref="dataSource"/>
	</bean>
	
	<!--  Transaction Related Definitions -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
		<property name="defaultTimeout" value="120"/>
	</bean>

	<tx:annotation-driven 
		transaction-manager="txManager"
		mode="proxy"
	/>


	
	<!-- Data Access Objects -->
	<bean id="companyDao" class="thirdstage.exercise.spring.transaction.case2.daos.jdbc.CompanyJdbcDao">
		<property name="dataSource" ref="txAwareDataSource"/>
	</bean>
	
	<bean id="buildingDao" class="thirdstage.exercise.spring.transaction.case2.daos.jdbc.BuildingJdbcDao">
		<property name="dataSource" ref="txAwareDataSource"/>
	</bean>
	
	<bean id="factoryDao" class="thirdstage.exercise.spring.transaction.case2.daos.jdbc.FactoryJdbcDao">
		<property name="dataSource" ref="txAwareDataSource"/>
	</bean>
	
	<bean id="factoryDaoWithDefect" class="thirdstage.exercise.spring.transaction.case2.daos.jdbc.FactoryJdbcDaoWithDefect">
		<property name="dataSource" ref="txAwareDataSource"/>
	</bean>

	<bean id="factoryDaoWithDefect2" class="thirdstage.exercise.spring.transaction.case2.daos.jdbc.FactoryJdbcDaoWithDefect">
		<property name="dataSource" ref="txAwareDataSource"/>
	</bean>



	<!-- Service Objects -->
	<bean id="companyService" class="thirdstage.exercise.spring.transaction.case2.CompanyJdbcService">
		<property name="companyDao" ref="companyDao"/>
		<property name="buildingDao" ref="buildingDao"/>
		<property name="factoryDao" ref="factoryDao"/>
	</bean>
	
	<bean id="companyServiceWithDefect" class="thirdstage.exercise.spring.transaction.case2.CompanyJdbcService">
		<description>Temparay service object to check proper roll-back of transaction</description>
		<property name="companyDao" ref="companyDao"/>
		<property name="buildingDao" ref="buildingDao"/>
		<property name="factoryDao" ref="factoryDaoWithDefect"/>
	</bean>

	<bean id="companyServiceWithDefect2" class="thirdstage.exercise.spring.transaction.case2.CompanyJdbcService">
		<description>
		Temparay service object to check proper roll-back of transaction
		in case that the NOT_SUPPORTED method executed inside REQUIRED
		method thows run-time exception. 
		</description>
		<property name="companyDao" ref="companyDao"/>
		<property name="buildingDao" ref="buildingDao"/>
		<property name="factoryDao" ref="factoryDaoWithDefect2"/>
	</bean>
</beans>
