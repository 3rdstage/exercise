<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="2.4"
	xmlns="http://java.sun.com/xml/ns/j2ee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

	<display-name>Spring Pet-Store</display-name>

	<description>
		Sample pet-store application using spring framework, jsp, and
		hibernate
	</description>

	<context-param>
		<description>
		- Key of the system property that should specify the root directory of this web appl.
		- Applied by WebAppRootListener or Log4jConfigListener 
		</description>
		<param-name>webAppRootKey</param-name>
		<param-value>petstore.root</param-value>
	</context-param>

	<context-param>
		<description>
		- Location of the Log4j config file, for initialization and refresh checks.
		- Applied by Log4jConfigListner
		- Can be specified using resource syntax of springframework.
		- Refer javadoc of Log4jWebConfigurer for more information.
		</description>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:thirdstage/petstore1/conf/log4j-petstore.properties</param-value>
	</context-param>


	<context-param>
		<description>
		- Location of the XML file that defines the root application context
		- Applied by ContextLoaderServlet
		</description>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:thirdstage/petstore1/conf/spring-petstore-daos.xml
			classpath:thirdstage/petstore1/conf/spring-petstore-services.xml
		</param-value>
	</context-param>

	<listener>
		<description>
		- Conifgures Log4j for this web appl.
		- As this context specifies a context-param "log4jConfigLocation", its file path is used to load the Log4j configuraion, 
		   including periodic refresh check.
		- Would fall back to default Log4j initialization (non-refreshing), if no special context-param is given.
		- Leave the listener commented-out if using JBoss 
		</description>
		<listener-class>
			org.springframework.web.util.Log4jConfigListener
		</listener-class>
	</listener>


	<listener>
		<description>
		- Load the root application context of this web appl. at startup, by default from "/WEB-INF/applicationContext.xml"
		- Note that you need to fall back to Spring's ContextLoaderServlet for J2EE server that do not
		  follow the Servlet 2.4 initialization order.
		- Use WebApplicationContextUtils.getWebApplicationContext(servletContext) to access it
		  anywhere in the web appl., outside the framework.
		- The root context is the parent of all servlet-specific contexts,which means that its beans are
		  automatically available in these child contexts, both for getBean(name) calls and (external) bean references
		</description>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
		 
	<servlet>
		<description>
		- Spring web MVC servlet that dispatches requests to registered handers
		- Has its own application context, by default defined in "{servlet-name}-servlet.xml",
		  i.e. "spring-petstore-servlet.xml" in this case 
		- A web appl. can contain any number of such servlets.
		- Note that this web appl. has a shared root application
		</description>
		<display-name>PetStore Spring Servlet</display-name>
		<servlet-name>spring-petstore</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>
	
	<!-- Not yet implemented
	<servlet>
		<description>
		- Dispatcher servlet definition for HTTP remoting via Hessian, Burlap, and Spring's HTTP invoker.
		- See remoting-servlet.xml for the controllers
		</description>
		<display-name>PetStore Remoting Servlet</display-name>	
		<servlet-name>remoting-petstore</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>4</load-on-startup>
	</servlet>
	-->
	
	<!-- Not yet implemenented
	<servlet>
		<description>
		- Servlet definition for Web Services remoting via Apache Axis
		- See server-config.wsdd for Axis configuration
		</description>
		<display-name>PetStore Axis Servlet</display-name>
		<servlet-name>axis</servlet-name>
		<servlet-class>org.apache.axis.transport.http.AxisServlet</servlet-class>
		<load-on-startup>5</load-on-startup>
	</servlet>
	-->
	
	<!-- 
	- Dispacher servlet mapping for the main web user interface refering to "spring-petstore"
	 -->	
	<servlet-mapping>
		<servlet-name>spring-petstore</servlet-name>
		<url-pattern>*.do</url-pattern>		
	</servlet-mapping>

	<!-- 
		- Dispacher servlet mapping for HTTP remoting via Hessian, Burlap, and 
		  Spring's HTTP invoker
	-->
	<!-- Not yet implemented
	<servlet-mapping>
		<servlet-name>remoting-petstore</servlet-name>
		<url-pattern>/remoting/*</url-pattern>
	</servlet-mapping>
	 -->
	
	<!-- 
		- Servlet mapping for Web Services remoting via Apache Axis
	-->
	<!-- Not yet implemented
	<servlet-mapping>
		<servlet-name>axis</servlet-name>
		<url-pattern>/axis/*</url-pattern>
	</servlet-mapping>
	-->
		
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>

	
	<!-- 
	<resource-ref>
		<description>
		- Reference to main database
		- Only needed for JTA (dataAccessContext-jta.xml)
		</description>
		<res-ref-name>jdbc/petstore</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>	
	</resource-ref>
	-->

	<!--
	<resource-ref>
		<description>
		- Reference to order database
		- Only needed for JTA (dataAccessContext-jta.xml)
		</description>
		<res-ref-name>jdbc/petstore-order</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>
	-->

</web-app>

