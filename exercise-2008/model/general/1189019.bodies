class DefaultTableColumnModel
!!!9780891.java!!!	DefaultTableColumnModel()
	super();

	// Initialize local ivars to default
	tableColumns = new Vector<TableColumn>();
	setSelectionModel(createSelectionModel()); 
	setColumnMargin(1); 
	invalidateWidthCache(); 
	setColumnSelectionAllowed(false);
!!!9781019.java!!!	addColumn(inout aColumn : TableColumn) : void
	if (aColumn == null) {
	    throw new IllegalArgumentException("Object is null");
	}

	tableColumns.addElement(aColumn);
	aColumn.addPropertyChangeListener(this);
	invalidateWidthCache();

	// Post columnAdded event notification
	fireColumnAdded(new TableColumnModelEvent(this, 0,
						  getColumnCount() - 1));
!!!9781147.java!!!	removeColumn(inout column : TableColumn) : void
	int columnIndex = tableColumns.indexOf(column);

	if (columnIndex != -1) {
	    // Adjust for the selection
	    if (selectionModel != null) {
		selectionModel.removeIndexInterval(columnIndex,columnIndex);
	    }

	    column.removePropertyChangeListener(this);
	    tableColumns.removeElementAt(columnIndex);
	    invalidateWidthCache();

	    // Post columnAdded event notification.  (JTable and JTableHeader
	    // listens so they can adjust size and redraw)
	    fireColumnRemoved(new TableColumnModelEvent(this,
					   columnIndex, 0));
	}
!!!9781275.java!!!	moveColumn(in columnIndex : int, in newIndex : int) : void
	if ((columnIndex < 0) || (columnIndex >= getColumnCount()) ||
	    (newIndex < 0) || (newIndex >= getColumnCount()))
	    throw new IllegalArgumentException("moveColumn() - Index out of range");

	TableColumn aColumn;

	// If the column has not yet moved far enough to change positions 
	// post the event anyway, the "draggedDistance" property of the 
	// tableHeader will say how far the column has been dragged. 
	// Here we are really trying to get the best out of an 
	// API that could do with some rethinking. We preserve backward 
	// compatibility by slightly bending the meaning of these methods. 
	if (columnIndex == newIndex) { 
	    fireColumnMoved(new TableColumnModelEvent(this, columnIndex, newIndex));	    
	    return;
	}
	aColumn = (TableColumn)tableColumns.elementAt(columnIndex);

	tableColumns.removeElementAt(columnIndex);
	boolean selected = selectionModel.isSelectedIndex(columnIndex); 
	selectionModel.removeIndexInterval(columnIndex,columnIndex);

	tableColumns.insertElementAt(aColumn, newIndex);
	selectionModel.insertIndexInterval(newIndex, 1, true); 
	if (selected) { 
	    selectionModel.addSelectionInterval(newIndex, newIndex); 
	} 
	else { 
	    selectionModel.removeSelectionInterval(newIndex, newIndex); 
	}

	fireColumnMoved(new TableColumnModelEvent(this, columnIndex,
							       newIndex));
!!!9781403.java!!!	setColumnMargin(in newMargin : int) : void
	if (newMargin != columnMargin) {
	    columnMargin = newMargin;
	    // Post columnMarginChanged event notification.
	    fireColumnMarginChanged();
	}
!!!9781531.java!!!	getColumnCount() : int
	return tableColumns.size();
!!!9781659.java!!!	getColumns() : Enumeration
	return tableColumns.elements();
!!!9781787.java!!!	getColumnIndex(inout identifier : Object) : int
	if (identifier == null) {
	    throw new IllegalArgumentException("Identifier is null");
	}

	Enumeration enumeration = getColumns();
	TableColumn aColumn;
	int index = 0;

	while (enumeration.hasMoreElements()) {
	    aColumn = (TableColumn)enumeration.nextElement();
	    // Compare them this way in case the column's identifier is null.
	    if (identifier.equals(aColumn.getIdentifier()))
		return index;
	    index++;
	}
	throw new IllegalArgumentException("Identifier not found");
!!!9781915.java!!!	getColumn(in columnIndex : int) : TableColumn
	return (TableColumn)tableColumns.elementAt(columnIndex);
!!!9782043.java!!!	getColumnMargin() : int
	return columnMargin;
!!!9782171.java!!!	getColumnIndexAtX(in x : int) : int
	if (x < 0) { 
	    return -1; 
	}
	int cc = getColumnCount(); 
	for(int column = 0; column < cc; column++) { 
	    x = x - getColumn(column).getWidth(); 
	    if (x < 0) { 
		return column; 
	    }
	}
	return -1; 
!!!9782299.java!!!	getTotalColumnWidth() : int
 
	if (totalColumnWidth == -1) { 
	    recalcWidthCache(); 
	}
	return totalColumnWidth;
!!!9782427.java!!!	setSelectionModel(inout newModel : ListSelectionModel) : void
        if (newModel == null) {
            throw new IllegalArgumentException("Cannot set a null SelectionModel");
        }

	ListSelectionModel oldModel = selectionModel;

	if (newModel != oldModel) {
	    if (oldModel != null) {
		oldModel.removeListSelectionListener(this);
	    }

	    selectionModel= newModel;
            newModel.addListSelectionListener(this);
	}
!!!9782555.java!!!	getSelectionModel() : ListSelectionModel
	return selectionModel;
!!!9782683.java!!!	checkLeadAnchor() : void
        int lead = selectionModel.getLeadSelectionIndex();
        int count = tableColumns.size();
        if (count == 0) {
            if (lead != -1) {
                // no columns left, set the lead and anchor to -1
                selectionModel.setValueIsAdjusting(true);
                selectionModel.setAnchorSelectionIndex(-1);
                selectionModel.setLeadSelectionIndex(-1);
                selectionModel.setValueIsAdjusting(false);
            }
        } else {
            if (lead == -1) {
                // set the lead and anchor to the first column
                // (without changing the selection)
                if (selectionModel.isSelectedIndex(0)) {
                    selectionModel.addSelectionInterval(0, 0);
                } else {
                    selectionModel.removeSelectionInterval(0, 0);
                }
            }
        }
!!!9782811.java!!!	setColumnSelectionAllowed(inout flag : boolean) : void
	columnSelectionAllowed = flag;
!!!9782939.java!!!	getColumnSelectionAllowed() : boolean
	return columnSelectionAllowed;
!!!9783067.java!!!	getSelectedColumns() : int
	if (selectionModel != null) {
	    int iMin = selectionModel.getMinSelectionIndex();
	    int iMax = selectionModel.getMaxSelectionIndex();

	    if ((iMin == -1) || (iMax == -1)) {
		return new int[0];
	    }

	    int[] rvTmp = new int[1+ (iMax - iMin)];
	    int n = 0;
	    for(int i = iMin; i <= iMax; i++) {
		if (selectionModel.isSelectedIndex(i)) {
		    rvTmp[n++] = i;
		}
	    }
	    int[] rv = new int[n];
	    System.arraycopy(rvTmp, 0, rv, 0, n);
	    return rv;
	}
	return  new int[0];
!!!9783195.java!!!	getSelectedColumnCount() : int
	if (selectionModel != null) {
	    int iMin = selectionModel.getMinSelectionIndex();
	    int iMax = selectionModel.getMaxSelectionIndex();
	    int count = 0;

	    for(int i = iMin; i <= iMax; i++) {
		if (selectionModel.isSelectedIndex(i)) {
		    count++;
		}
	    }
	    return count;
	}
	return 0;
!!!9783323.java!!!	addColumnModelListener(inout x : TableColumnModelListener) : void
	listenerList.add(TableColumnModelListener.class, x);
!!!9783451.java!!!	removeColumnModelListener(inout x : TableColumnModelListener) : void
	listenerList.remove(TableColumnModelListener.class, x);
!!!9783579.java!!!	getColumnModelListeners() : TableColumnModelListener
        return (TableColumnModelListener[])listenerList.getListeners(
                TableColumnModelListener.class);
!!!9783707.java!!!	fireColumnAdded(inout e : TableColumnModelEvent) : void
	// Guaranteed to return a non-null array
	Object[] listeners = listenerList.getListenerList();
	// Process the listeners last to first, notifying
	// those that are interested in this event
	for (int i = listeners.length-2; i>=0; i-=2) {
	    if (listeners[i]==TableColumnModelListener.class) {
		// Lazily create the event:
		// if (e == null)
		//  e = new ChangeEvent(this);
		((TableColumnModelListener)listeners[i+1]).
		    columnAdded(e);
	    }
	}
!!!9783835.java!!!	fireColumnRemoved(inout e : TableColumnModelEvent) : void
	// Guaranteed to return a non-null array
	Object[] listeners = listenerList.getListenerList();
	// Process the listeners last to first, notifying
	// those that are interested in this event
	for (int i = listeners.length-2; i>=0; i-=2) {
	    if (listeners[i]==TableColumnModelListener.class) {
		// Lazily create the event:
		// if (e == null)
		//  e = new ChangeEvent(this);
		((TableColumnModelListener)listeners[i+1]).
		    columnRemoved(e);
	    }
	}
!!!9783963.java!!!	fireColumnMoved(inout e : TableColumnModelEvent) : void
	// Guaranteed to return a non-null array
	Object[] listeners = listenerList.getListenerList();
	// Process the listeners last to first, notifying
	// those that are interested in this event
	for (int i = listeners.length-2; i>=0; i-=2) {
	    if (listeners[i]==TableColumnModelListener.class) {
		// Lazily create the event:
		// if (e == null)
		//  e = new ChangeEvent(this);
		((TableColumnModelListener)listeners[i+1]).
		    columnMoved(e);
	    }
	}
!!!9784091.java!!!	fireColumnSelectionChanged(inout e : ListSelectionEvent) : void
	// Guaranteed to return a non-null array
	Object[] listeners = listenerList.getListenerList();
	// Process the listeners last to first, notifying
	// those that are interested in this event
	for (int i = listeners.length-2; i>=0; i-=2) {
	    if (listeners[i]==TableColumnModelListener.class) {
		// Lazily create the event:
		// if (e == null)
		//  e = new ChangeEvent(this);
		((TableColumnModelListener)listeners[i+1]).
		    columnSelectionChanged(e);
	    }
	}
!!!9784219.java!!!	fireColumnMarginChanged() : void
	// Guaranteed to return a non-null array
	Object[] listeners = listenerList.getListenerList();
	// Process the listeners last to first, notifying
	// those that are interested in this event
	for (int i = listeners.length-2; i>=0; i-=2) {
	    if (listeners[i]==TableColumnModelListener.class) {
		// Lazily create the event:
		if (changeEvent == null)
		    changeEvent = new ChangeEvent(this);
		((TableColumnModelListener)listeners[i+1]).
		    columnMarginChanged(changeEvent);
	    }
	}
!!!9784347.java!!!	getListeners(inout listenerType : Class) : T
 
	return listenerList.getListeners(listenerType); 
!!!9784475.java!!!	propertyChange(inout evt : PropertyChangeEvent) : void
	String name = evt.getPropertyName();

	if (name == "width" || name == "preferredWidth") {
	    invalidateWidthCache(); 
	    // This is a misnomer, we're using this method 
	    // simply to cause a relayout. 
	    fireColumnMarginChanged(); 
	}

!!!9784603.java!!!	valueChanged(inout e : ListSelectionEvent) : void
	fireColumnSelectionChanged(e);
!!!9784731.java!!!	createSelectionModel() : ListSelectionModel
        return new DefaultListSelectionModel();
!!!9784859.java!!!	recalcWidthCache() : void
	Enumeration enumeration = getColumns();
	totalColumnWidth = 0;
	while (enumeration.hasMoreElements()) {
	    totalColumnWidth += ((TableColumn)enumeration.nextElement()).getWidth();
	}
!!!9784987.java!!!	invalidateWidthCache() : void
 
	totalColumnWidth = -1; 
