class BinaryOpValueExp
!!!8225691.java!!!	BinaryOpValueExp()
 
!!!8225819.java!!!	BinaryOpValueExp(in o : int, inout v1 : ValueExp, inout v2 : ValueExp)
 
	op   = o;
	exp1 = v1;
	exp2 = v2;
!!!8225947.java!!!	getOperator() : int
 
	return op;
!!!8226075.java!!!	getLeftValue() : ValueExp
 
	return exp1;
!!!8226203.java!!!	getRightValue() : ValueExp
 
	return exp2;
!!!8226331.java!!!	apply(inout name : ObjectName) : ValueExp
 
	ValueExp val1 = exp1.apply(name);
	ValueExp val2 = exp2.apply(name);
	String sval1;
	String sval2;
	double dval1;
	double dval2;
	long   lval1;
	long   lval2;
	boolean numeric = val1 instanceof NumericValueExp;
	
	if (numeric) {
	    if (((NumericValueExp)val1).isLong()) {
		lval1 = ((NumericValueExp)val1).longValue();
		lval2 = ((NumericValueExp)val2).longValue();

		switch (op) {
		case Query.PLUS:
		    return Query.value(lval1 + lval2);
		case Query.TIMES:
		    return Query.value(lval1 * lval2);
		case Query.MINUS:
		    return Query.value(lval1 - lval2);
		case Query.DIV:
		    return Query.value(lval1 / lval2);
		}
		
	    } else {
		dval1 = ((NumericValueExp)val1).doubleValue();
		dval2 = ((NumericValueExp)val2).doubleValue();

		switch (op) {
		case Query.PLUS:
		    return Query.value(dval1 + dval2);
		case Query.TIMES:
		    return Query.value(dval1 * dval2);
		case Query.MINUS:
		    return Query.value(dval1 - dval2);
		case Query.DIV:
		    return Query.value(dval1 / dval2);
		}
	    }
	} else {
	    sval1 = ((StringValueExp)val1).getValue();
	    sval2 = ((StringValueExp)val2).getValue();

	    switch (op) {
	    case Query.PLUS:
		return new StringValueExp(sval1 + sval2);
	    default:
		throw new BadStringOperationException(opString());
	    }
	}
	
	throw new BadBinaryOpValueExpException(this);
!!!8226459.java!!!	toString() : String
 
	try {
	    return exp1 + " " + opString() + " " + exp2;
	} catch (BadBinaryOpValueExpException ex) {
	    return "invalid expression";
	}
!!!8226587.java!!!	opString() : String
	switch (op) {
	case Query.PLUS:
	    return "+";
	case Query.TIMES:
	    return "*";
	case Query.MINUS:
	    return "-";
	case Query.DIV:
	    return "/";
	}
	
	throw new BadBinaryOpValueExpException(this);
