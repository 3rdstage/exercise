format 66
"cert" // src::java::security::cert
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/security/cert"
  java_package "java.security.cert"
  classview 158107 "cert"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 528283 "Certificate"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>Abstract class for managing a variety of identity certificates.
An identity certificate is a binding of a principal to a public key which
is vouched for by another principal.  (A principal represents
an entity such as an individual user, a group, or a corporation.)
<p>
This class is an abstraction for certificates that have different
formats but important common uses.  For example, different types of
certificates, such as X.509 and PGP, share general certificate
functionality (like encoding and verifying) and
some types of information (like a public key).
<p>
X.509, PGP, and SDSI certificates can all be implemented by
subclassing the Certificate class, even though they contain different
sets of information, and they store and retrieve the information in
different ways.

@see X509Certificate
@see CertificateFactory

@author Hemma Prafullchandra
@version 1.24, 12/19/03"
      classrelation 1885083 // <realization>
	relation 1885083 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1885083 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2853147 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -3585440601605666277L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2853275 "type"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the certificate type"
      end

      operation 7630107 "Certificate"
	protected explicit_return_type ""
	nparams 1
	  param in name "type" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a certificate of the specified type.

@param type the standard name of the certificate type.
See Appendix A in the <a href=
\"../../../../guide/security/CryptoSpec.html#AppA\">
Java Cryptography Architecture API Specification &amp; Reference </a>
for information about standard certificate types."
      end

      operation 7630235 "getType"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of this certificate.

@return the type of this certificate."
      end

      operation 7630363 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this certificate for equality with the specified
object. If the <code>other</code> object is an
<code>instanceof</code> <code>Certificate</code>, then
its encoded form is retrieved and compared with the
encoded form of this certificate.

@param other the object to test for equality with this certificate.
@return true iff the encoded forms of the two certificates
match, false otherwise."
      end

      operation 7630491 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode value for this certificate from its
encoded form.

@return the hashcode value."
      end

      operation 7630619 "getEncoded"
	abstract public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 969883 // CertificateEncodingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the encoded form of this certificate. It is
assumed that each certificate type would have only a single
form of encoding; for example, X.509 certificates would
be encoded as ASN.1 DER.

@return the encoded form of this certificate

@exception CertificateEncodingException if an encoding error occurs."
      end

      operation 7630747 "verify"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 962075 // PublicKey
	nexceptions 5
	  exception class_ref 966683 // CertificateException
	  exception class_ref 959899 // NoSuchAlgorithmException
	  exception class_ref 963355 // InvalidKeyException
	  exception class_ref 960027 // NoSuchProviderException
	  exception class_ref 968859 // SignatureException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this certificate was signed using the
private key that corresponds to the specified public key.

@param key the PublicKey used to carry out the verification.

@exception NoSuchAlgorithmException on unsupported signature
algorithms.
@exception InvalidKeyException on incorrect key.
@exception NoSuchProviderException if there's no default provider.
@exception SignatureException on signature errors.
@exception CertificateException on encoding errors."
      end

      operation 7630875 "verify"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 962075 // PublicKey
	  param in name "sigProvider" explicit_type "String"
	nexceptions 5
	  exception class_ref 966683 // CertificateException
	  exception class_ref 959899 // NoSuchAlgorithmException
	  exception class_ref 963355 // InvalidKeyException
	  exception class_ref 960027 // NoSuchProviderException
	  exception class_ref 968859 // SignatureException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this certificate was signed using the
private key that corresponds to the specified public key.
This method uses the signature verification engine
supplied by the specified provider.

@param key the PublicKey used to carry out the verification.
@param sigProvider the name of the signature provider.

@exception NoSuchAlgorithmException on unsupported signature
algorithms.
@exception InvalidKeyException on incorrect key.
@exception NoSuchProviderException on incorrect provider.
@exception SignatureException on signature errors.
@exception CertificateException on encoding errors."
      end

      operation 7631003 "toString"
	abstract public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this certificate.

@return a string representation of this certificate."
      end

      operation 7631131 "getPublicKey"
	abstract public return_type class_ref 962075 // PublicKey
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the public key from this certificate.

@return the public key."
      end

      class 970011 "CertificateRep"
	visibility protected 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1885211 // <realization>
	  relation 1885211 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1885211 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 2853403 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  -8563758940495660020L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2853531 "type"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2853659 "data"
	  private explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7631259 "CertificateRep"
	  protected explicit_return_type ""
	  nparams 2
	    param in name "type" explicit_type "String"
	    param in name "data" explicit_type "byte"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct the alternate Certificate class with the Certificate
type and Certificate encoding bytes.

<p>

@param type the standard name of the Certificate type. <p>

@param data the Certificate data."
	end

	operation 7631387 "readResolve"
	  protected explicit_return_type "Object"
	  nparams 0
	  nexceptions 1
	    exception class_ref 289307 // ObjectStreamException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resolve the Certificate Object.

<p>

@return the resolved Certificate Object

@throws java.io.ObjectStreamException if the Certificate 
	could not be resolved"
	end
      end

      operation 7631515 "writeReplace"
	protected explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 289307 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replace the Certificate to be serialized.

@return the alternate Certificate object to be serialized

@throws java.io.ObjectStreamException if a new object representing 
this Certificate could not be created"
      end
    end

    class 843163 "CertificateFactory"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class defines the functionality of a certificate factory, which is
used to generate certificate, certification path (<code>CertPath</code>)
and certificate revocation list (CRL) objects from their encodings.

<p>For encodings consisting of multiple certificates, use
<code>generateCertificates</code> when you want to
parse a collection of possibly unrelated certificates. Otherwise,
use <code>generateCertPath</code> when you want to generate
a <code>CertPath</code> (a certificate chain) and subsequently
validate it with a <code>CertPathValidator</code>.

<p>A certificate factory for X.509 must return certificates that are an
instance of <code>java.security.cert.X509Certificate</code>, and CRLs
that are an instance of <code>java.security.cert.X509CRL</code>.

<p>The following example reads a file with Base64 encoded certificates,
which are each bounded at the beginning by -----BEGIN CERTIFICATE-----, and
bounded at the end by -----END CERTIFICATE-----. We convert the
<code>FileInputStream</code> (which does not support <code>mark</code>
and <code>reset</code>) to a <code>BufferedInputStream</code> (which
supports those methods), so that each call to
<code>generateCertificate</code> consumes only one certificate, and the
read position of the input stream is positioned to the next certificate in
the file:<p>

<pre>
FileInputStream fis = new FileInputStream(filename);
BufferedInputStream bis = new BufferedInputStream(fis);

CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");

while (bis.available() > 0) {
   Certificate cert = cf.generateCertificate(bis);
   System.out.println(cert.toString());
}
</pre>

<p>The following example parses a PKCS#7-formatted certificate reply stored
in a file and extracts all the certificates from it:<p>

<pre>
FileInputStream fis = new FileInputStream(filename);
CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");
Collection c = cf.generateCertificates(fis);
Iterator i = c.iterator();
while (i.hasNext()) {
   Certificate cert = (Certificate)i.next();
   System.out.println(cert);
}
</pre>

@author Hemma Prafullchandra
@author Jan Luehe
@author Sean Mullan

@version 1.28, 05/05/04

@see Certificate
@see X509Certificate
@see CertPath
@see CRL
@see X509CRL

@since 1.2"
      attribute 2854171 "type"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The certificate type"
      end

      classrelation 1885723 // provider (<unidirectional association>)
	relation 1885723 --->
	  a role_name "provider" private
	    comment " The provider
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1885723 // provider (<unidirectional association>)
	  b parent class_ref 959643 // Provider
      end

      classrelation 1885851 // certFacSpi (<unidirectional association>)
	relation 1885851 --->
	  a role_name "certFacSpi" private
	    comment " The provider implementation
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1885851 // certFacSpi (<unidirectional association>)
	  b parent class_ref 970267 // CertificateFactorySpi
      end

      operation 7632923 "CertificateFactory"
	protected explicit_return_type ""
	nparams 3
	  param inout name "certFacSpi" type class_ref 970267 // CertificateFactorySpi
	  param inout name "provider" type class_ref 959643 // Provider
	  param in name "type" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a CertificateFactory object of the given type, and encapsulates
the given provider implementation (SPI object) in it.

@param certFacSpi the provider implementation.
@param provider the provider.
@param type the certificate type."
      end

      operation 7633051 "getInstance"
	class_operation public return_type class_ref 843163 // CertificateFactory
	nparams 1
	  param in name "type" explicit_type "String"
	nexceptions 1
	  exception class_ref 966683 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a certificate factory object that implements the
specified certificate type. If the default provider package
provides an implementation of the requested certificate type,
an instance of certificate factory containing that
implementation is returned.
If the type is not available in the default
package, other packages are searched.

@param type the name of the requested certificate type.
See Appendix A in the <a href=
\"../../../../guide/security/CryptoSpec.html#AppA\">
Java Cryptography Architecture API Specification &amp; Reference </a>
for information about standard certificate types.

@return a certificate factory object for the specified type.

@exception CertificateException if the requested certificate type is
not available in the default provider package or any of the other
provider packages that were searched."
      end

      operation 7633179 "getInstance"
	class_operation public return_type class_ref 843163 // CertificateFactory
	nparams 2
	  param in name "type" explicit_type "String"
	  param in name "provider" explicit_type "String"
	nexceptions 2
	  exception class_ref 966683 // CertificateException
	  exception class_ref 960027 // NoSuchProviderException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a certificate factory object for the specified
certificate type from the specified provider.

@param type the certificate type
@param provider the name of the provider.

@return a certificate factory object for the specified type.

@exception CertificateException if the certificate type is
not available from the specified provider.

@exception NoSuchProviderException if the provider has not been
configured.

@see Provider"
      end

      operation 7633307 "getInstance"
	class_operation public return_type class_ref 843163 // CertificateFactory
	nparams 2
	  param in name "type" explicit_type "String"
	  param inout name "provider" type class_ref 959643 // Provider
	nexceptions 1
	  exception class_ref 966683 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a certificate factory object for the specified
certificate type from the specified provider.
Note: the <code>provider</code> doesn't have to be registered.

@param type the certificate type
@param provider the provider

@return a certificate factory object for the specified type.

@exception CertificateException if the certificate type is
not available from the specified provider.

@exception IllegalArgumentException if the <code>provider</code> is
null.

@see Provider

@since 1.4"
      end

      operation 7633435 "getProvider"
	public return_type class_ref 959643 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this certificate factory.

@return the provider of this certificate factory."
      end

      operation 7633563 "getType"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the certificate type associated with this
certificate factory.

@return the name of the certificate type associated with this
certificate factory."
      end

      operation 7633691 "generateCertificate"
	public return_type class_ref 528283 // Certificate
	nparams 1
	  param inout name "inStream" type class_ref 179099 // InputStream
	nexceptions 1
	  exception class_ref 966683 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a certificate object and initializes it with
the data read from the input stream <code>inStream</code>.

<p>In order to take advantage of the specialized certificate format
supported by this certificate factory,
the returned certificate object can be typecast to the corresponding
certificate class. For example, if this certificate
factory implements X.509 certificates, the returned certificate object
can be typecast to the <code>X509Certificate</code> class.

<p>In the case of a certificate factory for X.509 certificates, the
certificate provided in <code>inStream</code> must be DER-encoded and
may be supplied in binary or printable (Base64) encoding. If the
certificate is provided in Base64 encoding, it must be bounded at
the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at
the end by -----END CERTIFICATE-----.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream. Otherwise, each call to this 
method consumes one certificate and the read position of the
input stream is positioned to the next available byte after
the inherent end-of-certificate marker. If the data in the input stream
does not contain an inherent end-of-certificate marker (other
than EOF) and there is trailing data after the certificate is parsed, a 
<code>CertificateException</code> is thrown.

@param inStream an input stream with the certificate data.

@return a certificate object initialized with the data
from the input stream.

@exception CertificateException on parsing errors."
      end

      operation 7633819 "getCertPathEncodings"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration of the <code>CertPath</code> encodings supported 
by this certificate factory, with the default encoding first. See 
Appendix A in the 
<a href=\"../../../../guide/security/certpath/CertPathProgGuide.html#AppA\">
Java Certification Path API Programmer's Guide</a> for information about 
standard encoding names and their formats. 
<p>
Attempts to modify the returned <code>Iterator</code> via its 
<code>remove</code> method result in an 
<code>UnsupportedOperationException</code>.

@return an <code>Iterator</code> over the names of the supported
        <code>CertPath</code> encodings (as <code>String</code>s)
@since 1.4"
      end

      operation 7633947 "generateCertPath"
	public return_type class_ref 845339 // CertPath
	nparams 1
	  param inout name "inStream" type class_ref 179099 // InputStream
	nexceptions 1
	  exception class_ref 966683 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a <code>CertPath</code> object and initializes it with
the data read from the <code>InputStream</code> inStream. The data
is assumed to be in the default encoding. The name of the default
encoding is the first element of the <code>Iterator</code> returned by
the {@link #getCertPathEncodings getCertPathEncodings} method.

@param inStream an <code>InputStream</code> containing the data
@return a <code>CertPath</code> initialized with the data from the
  <code>InputStream</code>
@exception CertificateException if an exception occurs while decoding
@since 1.4"
      end

      operation 7634075 "generateCertPath"
	public return_type class_ref 845339 // CertPath
	nparams 2
	  param inout name "inStream" type class_ref 179099 // InputStream
	  param in name "encoding" explicit_type "String"
	nexceptions 1
	  exception class_ref 966683 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a <code>CertPath</code> object and initializes it with
the data read from the <code>InputStream</code> inStream. The data
is assumed to be in the specified encoding. See Appendix A in the 
<a href=\"../../../../guide/security/certpath/CertPathProgGuide.html#AppA\">
Java Certification Path API Programmer's Guide</a>
for information about standard encoding names and their formats.

@param inStream an <code>InputStream</code> containing the data
@param encoding the encoding used for the data
@return a <code>CertPath</code> initialized with the data from the
  <code>InputStream</code>
@exception CertificateException if an exception occurs while decoding or
  the encoding requested is not supported
@since 1.4"
      end

      operation 7634203 "generateCertPath"
	public return_type class_ref 845339 // CertPath
	nparams 1
	  param inout name "certificates" type class_ref 135579 // List
	nexceptions 1
	  exception class_ref 966683 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Certificate> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a <code>CertPath</code> object and initializes it with
a <code>List</code> of <code>Certificate</code>s.
<p>
The certificates supplied must be of a type supported by the
<code>CertificateFactory</code>. They will be copied out of the supplied
<code>List</code> object.

@param certificates a <code>List</code> of <code>Certificate</code>s
@return a <code>CertPath</code> initialized with the supplied list of
  certificates
@exception CertificateException if an exception occurs
@since 1.4"
      end

      operation 7634331 "generateCertificates"
	public return_type class_ref 135067 // Collection
	nparams 1
	  param inout name "inStream" type class_ref 179099 // InputStream
	nexceptions 1
	  exception class_ref 966683 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Certificate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a (possibly empty) collection view of the certificates read
from the given input stream <code>inStream</code>.

<p>In order to take advantage of the specialized certificate format
supported by this certificate factory, each element in
the returned collection view can be typecast to the corresponding
certificate class. For example, if this certificate
factory implements X.509 certificates, the elements in the returned
collection can be typecast to the <code>X509Certificate</code> class.

<p>In the case of a certificate factory for X.509 certificates,
<code>inStream</code> may contain a sequence of DER-encoded certificates
in the formats described for
{@link #generateCertificate(java.io.InputStream) generateCertificate}.
In addition, <code>inStream</code> may contain a PKCS#7 certificate
chain. This is a PKCS#7 <i>SignedData</i> object, with the only
significant field being <i>certificates</i>. In particular, the
signature and the contents are ignored. This format allows multiple
certificates to be downloaded at once. If no certificates are present,
an empty collection is returned.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream.

@param inStream the input stream with the certificates.

@return a (possibly empty) collection view of
java.security.cert.Certificate objects
initialized with the data from the input stream.

@exception CertificateException on parsing errors."
      end

      operation 7634459 "generateCRL"
	public return_type class_ref 970395 // CRL
	nparams 1
	  param inout name "inStream" type class_ref 179099 // InputStream
	nexceptions 1
	  exception class_ref 970523 // CRLException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a certificate revocation list (CRL) object and initializes it
with the data read from the input stream <code>inStream</code>.

<p>In order to take advantage of the specialized CRL format
supported by this certificate factory,
the returned CRL object can be typecast to the corresponding
CRL class. For example, if this certificate
factory implements X.509 CRLs, the returned CRL object
can be typecast to the <code>X509CRL</code> class.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream. Otherwise, each call to this 
method consumes one CRL and the read position of the input stream
is positioned to the next available byte after the the inherent 
end-of-CRL marker. If the data in the
input stream does not contain an inherent end-of-CRL marker (other
than EOF) and there is trailing data after the CRL is parsed, a 
<code>CRLException</code> is thrown.

@param inStream an input stream with the CRL data.

@return a CRL object initialized with the data
from the input stream.

@exception CRLException on parsing errors."
      end

      operation 7634587 "generateCRLs"
	public return_type class_ref 135067 // Collection
	nparams 1
	  param inout name "inStream" type class_ref 179099 // InputStream
	nexceptions 1
	  exception class_ref 970523 // CRLException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends CRL> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a (possibly empty) collection view of the CRLs read
from the given input stream <code>inStream</code>.

<p>In order to take advantage of the specialized CRL format
supported by this certificate factory, each element in
the returned collection view can be typecast to the corresponding
CRL class. For example, if this certificate
factory implements X.509 CRLs, the elements in the returned
collection can be typecast to the <code>X509CRL</code> class.

<p>In the case of a certificate factory for X.509 CRLs,
<code>inStream</code> may contain a sequence of DER-encoded CRLs.
In addition, <code>inStream</code> may contain a PKCS#7 CRL
set. This is a PKCS#7 <i>SignedData</i> object, with the only
significant field being <i>crls</i>. In particular, the
signature and the contents are ignored. This format allows multiple
CRLs to be downloaded at once. If no CRLs are present,
an empty collection is returned.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream.

@param inStream the input stream with the CRLs.

@return a (possibly empty) collection view of
java.security.cert.CRL objects initialized with the data from the input
stream.

@exception CRLException on parsing errors."
      end
    end

    class 845339 "CertPath"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An immutable sequence of certificates (a certification path).
<p>
This is an abstract class that defines the methods common to all
<code>CertPath</code>s. Subclasses can handle different kinds of
certificates (X.509, PGP, etc.).
<p>
All <code>CertPath</code> objects have a type, a list of 
<code>Certificate</code>s, and one or more supported encodings. Because the 
<code>CertPath</code> class is immutable, a <code>CertPath</code> cannot 
change in any externally visible way after being constructed. This 
stipulation applies to all public fields and methods of this class and any 
added or overridden by subclasses.
<p>
The type is a <code>String</code> that identifies the type of
<code>Certificate</code>s in the certification path. For each
certificate <code>cert</code> in a certification path <code>certPath</code>,
<code>cert.getType().equals(certPath.getType())</code> must be
<code>true</code>.
<p>
The list of <code>Certificate</code>s is an ordered <code>List</code> of
zero or more <code>Certificate</code>s. This <code>List</code> and all
of the <code>Certificate</code>s contained in it must be immutable.
<p>
Each <code>CertPath</code> object must support one or more encodings
so that the object can be translated into a byte array for storage or
transmission to other parties. Preferably, these encodings should be
well-documented standards (such as PKCS#7). One of the encodings supported
by a <code>CertPath</code> is considered the default encoding. This
encoding is used if no encoding is explicitly requested (for the
{@link #getEncoded() getEncoded()} method, for instance).
<p>
All <code>CertPath</code> objects are also <code>Serializable</code>. 
<code>CertPath</code> objects are resolved into an alternate 
{@link CertPathRep CertPathRep} object during serialization. This allows
a <code>CertPath</code> object to be serialized into an equivalent
representation regardless of its underlying implementation.
<p>
<code>CertPath</code> objects can be created with a
<code>CertificateFactory</code> or they can be returned by other classes,
such as a <code>CertPathBuilder</code>.
<p>
By convention, X.509 <code>CertPath</code>s (consisting of
<code>X509Certificate</code>s), are ordered starting with the target 
certificate and ending with a certificate issued by the trust anchor. That 
is, the issuer of one certificate is the subject of the following one. The 
certificate representing the {@link TrustAnchor TrustAnchor} should not be 
included in the certification path. Unvalidated X.509 <code>CertPath</code>s 
may not follow these conventions. PKIX <code>CertPathValidator</code>s will 
detect any departure from these conventions that cause the certification 
path to be invalid and throw a <code>CertPathValidatorException</code>.
<p>
<b>Concurrent Access</b>
<p>
All <code>CertPath</code> objects must be thread-safe. That is, multiple
threads may concurrently invoke the methods defined in this class on a
single <code>CertPath</code> object (or more than one) with no
ill effects. This is also true for the <code>List</code> returned by
<code>CertPath.getCertificates</code>.
<p>
Requiring <code>CertPath</code> objects to be immutable and thread-safe
allows them to be passed around to various pieces of code without worrying
about coordinating access.  Providing this thread-safety is
generally not difficult, since the <code>CertPath</code> and
<code>List</code> objects in question are immutable.

@see CertificateFactory
@see CertPathBuilder

@version 1.9 12/19/03
@author	Yassir Elley
@since	1.4"
      classrelation 1886235 // <realization>
	relation 1886235 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1886235 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2854555 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  6068470306649138683L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2854683 "type"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the type of certificates in this chain"
      end

      operation 7636507 "CertPath"
	protected explicit_return_type ""
	nparams 1
	  param in name "type" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertPath</code> of the specified type.
<p>
This constructor is protected because most users should use a
<code>CertificateFactory</code> to create <code>CertPath</code>s.

@param type the standard name of the type of
<code>Certificate</code>s in this path"
      end

      operation 7636635 "getType"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of <code>Certificate</code>s in this certification
path. This is the same string that would be returned by
{@link java.security.cert.Certificate#getType() cert.getType()}
for all <code>Certificate</code>s in the certification path.

@return the type of <code>Certificate</code>s in this certification
path (never null)"
      end

      operation 7636763 "getEncodings"
	abstract public return_type class_ref 135323 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration of the encodings supported by this certification 
path, with the default encoding first. Attempts to modify the returned
<code>Iterator</code> via its <code>remove</code> method result in an
<code>UnsupportedOperationException</code>.

@return an <code>Iterator</code> over the names of the supported
        encodings (as Strings)"
      end

      operation 7636891 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this certification path for equality with the specified
object. Two <code>CertPath</code>s are equal if and only if their
types are equal and their certificate <code>List</code>s (and by
implication the <code>Certificate</code>s in those <code>List</code>s)
are equal. A <code>CertPath</code> is never equal to an object that is
not a <code>CertPath</code>.
<p>
This algorithm is implemented by this method. If it is overridden,
the behavior specified here must be maintained.

@param other the object to test for equality with this certification path
@return true if the specified object is equal to this certification path,
false otherwise"
      end

      operation 7637019 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hashcode for this certification path. The hash code of
a certification path is defined to be the result of the following
calculation:
<pre><code>
 hashCode = path.getType().hashCode();
 hashCode = 31*hashCode + path.getCertificates().hashCode();
</code></pre>
This ensures that <code>path1.equals(path2)</code> implies that
<code>path1.hashCode()==path2.hashCode()</code> for any two certification
paths, <code>path1</code> and <code>path2</code>, as required by the
general contract of <code>Object.hashCode</code>.

@return the hashcode value for this certification path"
      end

      operation 7637147 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this certification path.
This calls the <code>toString</code> method on each of the
<code>Certificate</code>s in the path.

@return a string representation of this certification path"
      end

      operation 7637275 "getEncoded"
	abstract public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 969883 // CertificateEncodingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the encoded form of this certification path, using the default
encoding.

@return the encoded bytes
@exception CertificateEncodingException if an encoding error occurs"
      end

      operation 7637403 "getEncoded"
	abstract public explicit_return_type "byte"
	nparams 1
	  param in name "encoding" explicit_type "String"
	nexceptions 1
	  exception class_ref 969883 // CertificateEncodingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the encoded form of this certification path, using the
specified encoding.

@param encoding the name of the encoding to use
@return the encoded bytes
@exception CertificateEncodingException if an encoding error occurs or
  the encoding requested is not supported"
      end

      operation 7637531 "getCertificates"
	abstract public return_type class_ref 135579 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Certificate> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of certificates in this certification path.
The <code>List</code> returned must be immutable and thread-safe.

@return an immutable <code>List</code> of <code>Certificate</code>s
        (may be empty, but not null)"
      end

      operation 7637659 "writeReplace"
	protected explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 289307 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the <code>CertPath</code> to be serialized with a 
<code>CertPathRep</code> object.

@return the <code>CertPathRep</code> to be serialized

@throws ObjectStreamException if a <code>CertPathRep</code> object 
representing this certification path could not be created"
      end

      class 970907 "CertPathRep"
	visibility protected 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1886363 // <realization>
	  relation 1886363 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1886363 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 2854811 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  3015633072427920915L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2854939 "type"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " The Certificate type "
	end

	attribute 2855067 "data"
	  private explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " The encoded form of the cert path "
	end

	operation 7637787 "CertPathRep"
	  protected explicit_return_type ""
	  nparams 2
	    param in name "type" explicit_type "String"
	    param in name "data" explicit_type "byte"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a <code>CertPathRep</code> with the specified 
type and encoded form of a certification path.

@param type the standard name of a <code>CertPath</code> type
@param data the encoded form of the certification path"
	end

	operation 7637915 "readResolve"
	  protected explicit_return_type "Object"
	  nparams 0
	  nexceptions 1
	    exception class_ref 289307 // ObjectStreamException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a <code>CertPath</code> constructed from the type and data.

@return the resolved <code>CertPath</code> object

@throws ObjectStreamException if a <code>CertPath</code> could not
be constructed"
	end
      end
    end

    class 966683 "CertificateException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception indicates one of a variety of certificate problems.

@author Hemma Prafullchandra
@version 1.33
@see Certificate"
      classrelation 1885339 // <generalisation>
	relation 1885339 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1885339 // <generalisation>
	  b parent class_ref 842139 // GeneralSecurityException
      end

      attribute 2853787 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  3192535253797119798L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7631643 "CertificateException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a certificate exception with no detail message. A detail
message is a String that describes this particular exception. "
      end

      operation 7631771 "CertificateException"
	public explicit_return_type ""
	nparams 1
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a certificate exception with the given detail
message. A detail message is a String that describes this
particular exception.

@param msg the detail message.  "
      end

      operation 7631899 "CertificateException"
	public explicit_return_type ""
	nparams 2
	  param in name "message" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertificateException</code> with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A <tt>null</tt> value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5"
      end

      operation 7632027 "CertificateException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertificateException</code> with the specified cause
and a detail message of <tt>(cause==null ? null : cause.toString())</tt>
(which typically contains the class and detail message of
<tt>cause</tt>).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A <tt>null</tt> value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5"
      end
    end

    class 969883 "CertificateEncodingException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Certificate Encoding Exception. This is thrown whenever an error
occurs while attempting to encode a certificate.

@author Hemma Prafullchandra
1.12"
      classrelation 1885467 // <generalisation>
	relation 1885467 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1885467 // <generalisation>
	  b parent class_ref 966683 // CertificateException
      end

      attribute 2853915 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  6219492851589449162L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7632155 "CertificateEncodingException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateEncodingException with no detail message. A
detail message is a String that describes this particular
exception."
      end

      operation 7632283 "CertificateEncodingException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateEncodingException with the specified detail
message. A detail message is a String that describes this
particular exception.
  
@param message the detail message."
      end

      operation 7632411 "CertificateEncodingException"
	public explicit_return_type ""
	nparams 2
	  param in name "message" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertificateEncodingException</code> with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A <tt>null</tt> value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5"
      end

      operation 7632539 "CertificateEncodingException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertificateEncodingException</code>
with the specified cause and a detail message of
<tt>(cause==null ? null : cause.toString())</tt>
(which typically contains the class and detail message of
<tt>cause</tt>).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A <tt>null</tt> value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5"
      end
    end

    class 970139 "CertificateExpiredException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Certificate Expired Exception. This is thrown whenever the current
<code>Date</code> or the specified <code>Date</code> is after the
<code>notAfter</code> date/time specified in the validity period
of the certificate.

@author Hemma Prafullchandra
1.10"
      classrelation 1885595 // <generalisation>
	relation 1885595 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1885595 // <generalisation>
	  b parent class_ref 966683 // CertificateException
      end

      attribute 2854043 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  9071001339691533771L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7632667 "CertificateExpiredException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateExpiredException with no detail message. A
detail message is a String that describes this particular
exception."
      end

      operation 7632795 "CertificateExpiredException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateExpiredException with the specified detail
message. A detail message is a String that describes this
particular exception.
  
@param message the detail message."
      end
    end

    class 970267 "CertificateFactorySpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
for the <code>CertificateFactory</code> class.
All the abstract methods in this class must be implemented by each
cryptographic service provider who wishes to supply the implementation
of a certificate factory for a particular certificate type, e.g., X.509.

<p>Certificate factories are used to generate certificate, certification path
(<code>CertPath</code>) and certificate revocation list (CRL) objects from 
their encodings.

<p>A certificate factory for X.509 must return certificates that are an
instance of <code>java.security.cert.X509Certificate</code>, and CRLs
that are an instance of <code>java.security.cert.X509CRL</code>.

@author Hemma Prafullchandra
@author Jan Luehe
@author Sean Mullan

@version 1.19, 05/05/04

@see CertificateFactory
@see Certificate
@see X509Certificate
@see CertPath
@see CRL
@see X509CRL

@since 1.2"
      operation 7634715 "engineGenerateCertificate"
	abstract public return_type class_ref 528283 // Certificate
	nparams 1
	  param inout name "inStream" type class_ref 179099 // InputStream
	nexceptions 1
	  exception class_ref 966683 // CertificateException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a certificate object and initializes it with
the data read from the input stream <code>inStream</code>.

<p>In order to take advantage of the specialized certificate format
supported by this certificate factory,
the returned certificate object can be typecast to the corresponding
certificate class. For example, if this certificate
factory implements X.509 certificates, the returned certificate object
can be typecast to the <code>X509Certificate</code> class.

<p>In the case of a certificate factory for X.509 certificates, the
certificate provided in <code>inStream</code> must be DER-encoded and
may be supplied in binary or printable (Base64) encoding. If the
certificate is provided in Base64 encoding, it must be bounded at
the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at
the end by -----END CERTIFICATE-----.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream. Otherwise, each call to this
method consumes one certificate and the read position of the input stream
is positioned to the next available byte after the the inherent
end-of-certificate marker. If the data in the
input stream does not contain an inherent end-of-certificate marker (other
than EOF) and there is trailing data after the certificate is parsed, a
<code>CertificateException</code> is thrown.

@param inStream an input stream with the certificate data.

@return a certificate object initialized with the data
from the input stream.

@exception CertificateException on parsing errors."
      end

      operation 7634843 "engineGenerateCertPath"
	public return_type class_ref 845339 // CertPath
	nparams 1
	  param inout name "inStream" type class_ref 179099 // InputStream
	nexceptions 1
	  exception class_ref 966683 // CertificateException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a <code>CertPath</code> object and initializes it with
the data read from the <code>InputStream</code> inStream. The data
is assumed to be in the default encoding.

<p> This method was added to version 1.4 of the Java 2 Platform
Standard Edition. In order to maintain backwards compatibility with
existing service providers, this method cannot be <code>abstract</code>
and by default throws an <code>UnsupportedOperationException</code>.

@param inStream an <code>InputStream</code> containing the data
@return a <code>CertPath</code> initialized with the data from the
  <code>InputStream</code>
@exception CertificateException if an exception occurs while decoding
@exception UnsupportedOperationException if the method is not supported
@since 1.4"
      end

      operation 7634971 "engineGenerateCertPath"
	public return_type class_ref 845339 // CertPath
	nparams 2
	  param inout name "inStream" type class_ref 179099 // InputStream
	  param in name "encoding" explicit_type "String"
	nexceptions 1
	  exception class_ref 966683 // CertificateException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a <code>CertPath</code> object and initializes it with
the data read from the <code>InputStream</code> inStream. The data
is assumed to be in the specified encoding.

<p> This method was added to version 1.4 of the Java 2 Platform
Standard Edition. In order to maintain backwards compatibility with
existing service providers, this method cannot be <code>abstract</code>
and by default throws an <code>UnsupportedOperationException</code>.

@param inStream an <code>InputStream</code> containing the data
@param encoding the encoding used for the data
@return a <code>CertPath</code> initialized with the data from the
  <code>InputStream</code>
@exception CertificateException if an exception occurs while decoding or
  the encoding requested is not supported
@exception UnsupportedOperationException if the method is not supported
@since 1.4"
      end

      operation 7635099 "engineGenerateCertPath"
	public return_type class_ref 845339 // CertPath
	nparams 1
	  param inout name "certificates" type class_ref 135579 // List
	nexceptions 1
	  exception class_ref 966683 // CertificateException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Certificate> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a <code>CertPath</code> object and initializes it with
a <code>List</code> of <code>Certificate</code>s.
<p>
The certificates supplied must be of a type supported by the
<code>CertificateFactory</code>. They will be copied out of the supplied
<code>List</code> object.

<p> This method was added to version 1.4 of the Java 2 Platform
Standard Edition. In order to maintain backwards compatibility with
existing service providers, this method cannot be <code>abstract</code>
and by default throws an <code>UnsupportedOperationException</code>.

@param certificates a <code>List</code> of <code>Certificate</code>s
@return a <code>CertPath</code> initialized with the supplied list of
  certificates
@exception CertificateException if an exception occurs
@exception UnsupportedOperationException if the method is not supported
@since 1.4"
      end

      operation 7635227 "engineGetCertPathEncodings"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration of the <code>CertPath</code> encodings supported 
by this certificate factory, with the default encoding first. See 
Appendix A in the 
<a href=\"../../../../guide/security/certpath/CertPathProgGuide.html#AppA\">
Java Certification Path API Programmer's Guide</a>
for information about standard encoding names.
<p>
Attempts to modify the returned <code>Iterator</code> via its
<code>remove</code> method result in an
<code>UnsupportedOperationException</code>.

<p> This method was added to version 1.4 of the Java 2 Platform
Standard Edition. In order to maintain backwards compatibility with
existing service providers, this method cannot be <code>abstract</code>
and by default throws an <code>UnsupportedOperationException</code>.

@return an <code>Iterator</code> over the names of the supported
        <code>CertPath</code> encodings (as <code>String</code>s)
@exception UnsupportedOperationException if the method is not supported
@since 1.4"
      end

      operation 7635355 "engineGenerateCertificates"
	abstract public return_type class_ref 135067 // Collection
	nparams 1
	  param inout name "inStream" type class_ref 179099 // InputStream
	nexceptions 1
	  exception class_ref 966683 // CertificateException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Certificate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a (possibly empty) collection view of the certificates read
from the given input stream <code>inStream</code>.

<p>In order to take advantage of the specialized certificate format
supported by this certificate factory, each element in
the returned collection view can be typecast to the corresponding
certificate class. For example, if this certificate
factory implements X.509 certificates, the elements in the returned
collection can be typecast to the <code>X509Certificate</code> class.

<p>In the case of a certificate factory for X.509 certificates,
<code>inStream</code> may contain a single DER-encoded certificate
in the formats described for 
{@link CertificateFactory#generateCertificate(java.io.InputStream) 
generateCertificate}.
In addition, <code>inStream</code> may contain a PKCS#7 certificate
chain. This is a PKCS#7 <i>SignedData</i> object, with the only
significant field being <i>certificates</i>. In particular, the
signature and the contents are ignored. This format allows multiple
certificates to be downloaded at once. If no certificates are present,
an empty collection is returned.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream.

@param inStream the input stream with the certificates.

@return a (possibly empty) collection view of
java.security.cert.Certificate objects
initialized with the data from the input stream.

@exception CertificateException on parsing errors."
      end

      operation 7635483 "engineGenerateCRL"
	abstract public return_type class_ref 970395 // CRL
	nparams 1
	  param inout name "inStream" type class_ref 179099 // InputStream
	nexceptions 1
	  exception class_ref 970523 // CRLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a certificate revocation list (CRL) object and initializes it
with the data read from the input stream <code>inStream</code>.

<p>In order to take advantage of the specialized CRL format
supported by this certificate factory,
the returned CRL object can be typecast to the corresponding
CRL class. For example, if this certificate
factory implements X.509 CRLs, the returned CRL object
can be typecast to the <code>X509CRL</code> class.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream. Otherwise, each call to this
method consumes one CRL and the read position of the input stream
is positioned to the next available byte after the the inherent
end-of-CRL marker. If the data in the
input stream does not contain an inherent end-of-CRL marker (other
than EOF) and there is trailing data after the CRL is parsed, a
<code>CRLException</code> is thrown.

@param inStream an input stream with the CRL data.

@return a CRL object initialized with the data
from the input stream.

@exception CRLException on parsing errors."
      end

      operation 7635611 "engineGenerateCRLs"
	abstract public return_type class_ref 135067 // Collection
	nparams 1
	  param inout name "inStream" type class_ref 179099 // InputStream
	nexceptions 1
	  exception class_ref 970523 // CRLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends CRL> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a (possibly empty) collection view of the CRLs read
from the given input stream <code>inStream</code>.

<p>In order to take advantage of the specialized CRL format
supported by this certificate factory, each element in
the returned collection view can be typecast to the corresponding
CRL class. For example, if this certificate
factory implements X.509 CRLs, the elements in the returned
collection can be typecast to the <code>X509CRL</code> class.

<p>In the case of a certificate factory for X.509 CRLs,
<code>inStream</code> may contain a single DER-encoded CRL.
In addition, <code>inStream</code> may contain a PKCS#7 CRL
set. This is a PKCS#7 <i>SignedData</i> object, with the only
significant field being <i>crls</i>. In particular, the
signature and the contents are ignored. This format allows multiple
CRLs to be downloaded at once. If no CRLs are present,
an empty collection is returned.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream.

@param inStream the input stream with the CRLs.

@return a (possibly empty) collection view of
java.security.cert.CRL objects initialized with the data from the input
stream.

@exception CRLException on parsing errors."
      end
    end

    class 970395 "CRL"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is an abstraction of certificate revocation lists (CRLs) that
have different formats but important common uses. For example, all CRLs
share the functionality of listing revoked certificates, and can be queried
on whether or not they list a given certificate.
<p>
Specialized CRL types can be defined by subclassing off of this abstract
class.

@author Hemma Prafullchandra

@version 1.12, 12/19/03

@see X509CRL
@see CertificateFactory

@since 1.2"
      attribute 2856731 "type"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the CRL type"
      end

      operation 7647131 "CRL"
	protected explicit_return_type ""
	nparams 1
	  param in name "type" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a CRL of the specified type.

@param type the standard name of the CRL type.
See Appendix A in the <a href=
\"../../../../guide/security/CryptoSpec.html#AppA\">
Java Cryptography Architecture API Specification &amp; Reference </a>
for information about standard CRL types."
      end

      operation 7647259 "getType"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of this CRL.

@return the type of this CRL."
      end

      operation 7647387 "toString"
	abstract public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this CRL.

@return a string representation of this CRL."
      end

      operation 7647515 "isRevoked"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "cert" type class_ref 528283 // Certificate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether the given certificate is on this CRL.

@param cert the certificate to check for.
@return true if the given certificate is on this CRL,
false otherwise."
      end
    end

    class 970523 "CRLException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "CRL (Certificate Revocation List) Exception.

@author Hemma Prafullchandra
1.12"
      classrelation 1888923 // <generalisation>
	relation 1888923 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1888923 // <generalisation>
	  b parent class_ref 842139 // GeneralSecurityException
      end

      attribute 2856859 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -6694728944094197147L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7647643 "CRLException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CRLException with no detail message. A
detail message is a String that describes this particular
exception."
      end

      operation 7647771 "CRLException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CRLException with the specified detail
message. A detail message is a String that describes this
particular exception. 

@param message the detail message."
      end

      operation 7647899 "CRLException"
	public explicit_return_type ""
	nparams 2
	  param in name "message" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CRLException</code> with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A <tt>null</tt> value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5"
      end

      operation 7648027 "CRLException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CRLException</code> with the specified cause
and a detail message of <tt>(cause==null ? null : cause.toString())</tt>
(which typically contains the class and detail message of
<tt>cause</tt>).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A <tt>null</tt> value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5"
      end
    end

    class 970651 "CertificateNotYetValidException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Certificate is not yet valid exception. This is thrown whenever
the current <code>Date</code> or the specified <code>Date</code>
is before the <code>notBefore</code> date/time in the Certificate
validity period.

@author Hemma Prafullchandra
1.10"
      classrelation 1885979 // <generalisation>
	relation 1885979 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1885979 // <generalisation>
	  b parent class_ref 966683 // CertificateException
      end

      attribute 2854299 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  4355919900041064702L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7635739 "CertificateNotYetValidException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateNotYetValidException with no detail message. A
detail message is a String that describes this particular
exception."
      end

      operation 7635867 "CertificateNotYetValidException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateNotYetValidException with the specified detail
message. A detail message is a String that describes this
particular exception.
  
@param message the detail message."
      end
    end

    class 970779 "CertificateParsingException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Certificate Parsing Exception. This is thrown whenever an
invalid DER-encoded certificate is parsed or unsupported DER features
are found in the Certificate.

@author Hemma Prafullchandra
1.12"
      classrelation 1886107 // <generalisation>
	relation 1886107 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1886107 // <generalisation>
	  b parent class_ref 966683 // CertificateException
      end

      attribute 2854427 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -7989222416793322029L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7635995 "CertificateParsingException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateParsingException with no detail message. A
detail message is a String that describes this particular
exception."
      end

      operation 7636123 "CertificateParsingException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateParsingException with the specified detail
message. A detail message is a String that describes this
particular exception.
  
@param message the detail message."
      end

      operation 7636251 "CertificateParsingException"
	public explicit_return_type ""
	nparams 2
	  param in name "message" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertificateParsingException</code> with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A <tt>null</tt> value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5"
      end

      operation 7636379 "CertificateParsingException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertificateParsingException</code> with the
specified cause and a detail message of
<tt>(cause==null ? null : cause.toString())</tt>
(which typically contains the class and detail message of
<tt>cause</tt>).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A <tt>null</tt> value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5"
      end
    end

    class 971035 "CertPathBuilder"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class for building certification paths (also known as certificate chains).
<p>
This class uses a provider-based architecture, as described in the Java 
Cryptography Architecture. To create a <code>CertPathBuilder</code>, call 
one of the static <code>getInstance</code> methods, passing in the 
algorithm name of the <code>CertPathBuilder</code> desired and optionally 
the name of the provider desired.
<p>
Once a <code>CertPathBuilder</code> object has been created, certification 
paths can be constructed by calling the {@link #build build} method and 
passing it an algorithm-specific set of parameters. If successful, the 
result (including the <code>CertPath</code> that was built) is returned 
in an object that implements the <code>CertPathBuilderResult</code> 
interface.
<p>
<b>Concurrent Access</b>
<p>
The static methods of this class are guaranteed to be thread-safe.
Multiple threads may concurrently invoke the static methods defined in
this class with no ill effects.
<p>
However, this is not true for the non-static methods defined by this class.
Unless otherwise documented by a specific provider, threads that need to
access a single <code>CertPathBuilder</code> instance concurrently should
synchronize amongst themselves and provide the necessary locking. Multiple
threads each manipulating a different <code>CertPathBuilder</code> instance
need not synchronize.

@see CertPath

@version 	1.9 06/28/04
@since	1.4
@author	Sean Mullan
@author	Yassir Elley"
      attribute 2855195 "CPB_TYPE"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"certpathbuilder.type\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant to lookup in the Security properties file to determine
the default certpathbuilder type. In the Security properties file,
the default certpathbuilder type is given as:
<pre>
certpathbuilder.type=PKIX
</pre>
"
      end

      attribute 2855323 "debug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value "=  Debug.getInstance(\"certpath\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1886491 // builderSpi (<unidirectional association>)
	relation 1886491 --->
	  a role_name "builderSpi" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1886491 // builderSpi (<unidirectional association>)
	  b parent class_ref 971163 // CertPathBuilderSpi
      end

      classrelation 1886619 // provider (<unidirectional association>)
	relation 1886619 --->
	  a role_name "provider" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1886619 // provider (<unidirectional association>)
	  b parent class_ref 959643 // Provider
      end

      attribute 2855451 "algorithm"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7638043 "CertPathBuilder"
	protected explicit_return_type ""
	nparams 3
	  param inout name "builderSpi" type class_ref 971163 // CertPathBuilderSpi
	  param inout name "provider" type class_ref 959643 // Provider
	  param in name "algorithm" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertPathBuilder</code> object of the given algorithm, 
and encapsulates the given provider implementation (SPI object) in it.

@param builderSpi the provider implementation
@param provider the provider
@param algorithm the algorithm name"
      end

      operation 7638171 "getInstance"
	class_operation public return_type class_ref 971035 // CertPathBuilder
	nparams 1
	  param in name "algorithm" explicit_type "String"
	nexceptions 1
	  exception class_ref 959899 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>CertPathBuilder</code> object that implements the
specified algorithm.
<p>
If the default provider package provides an implementation of the
specified <code>CertPathBuilder</code> algorithm, an instance of 
<code>CertPathBuilder</code> containing that implementation is returned.
If the requested algorithm is not available in the default package, 
other packages are searched.

@param algorithm the name of the requested <code>CertPathBuilder</code> 
algorithm
@return a <code>CertPathBuilder</code> object that implements the
specified algorithm
@throws NoSuchAlgorithmException if the requested algorithm is
not available in the default provider package or any of the other
provider packages that were searched"
      end

      operation 7638299 "getInstance"
	class_operation public return_type class_ref 971035 // CertPathBuilder
	nparams 2
	  param in name "algorithm" explicit_type "String"
	  param in name "provider" explicit_type "String"
	nexceptions 2
	  exception class_ref 959899 // NoSuchAlgorithmException
	  exception class_ref 960027 // NoSuchProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>CertPathBuilder</code> object that implements the
specified algorithm, as supplied by the specified provider.

@param algorithm the name of the requested <code>CertPathBuilder</code> 
algorithm
@param provider the name of the provider
@return a <code>CertPathBuilder</code> object that implements the 
specified algorithm, as supplied by the specified provider
@throws NoSuchAlgorithmException if the requested algorithm is
not available from the specified provider
@throws NoSuchProviderException if the provider has not been configured
@exception IllegalArgumentException if the <code>provider</code> is
null"
      end

      operation 7638427 "getInstance"
	class_operation public return_type class_ref 971035 // CertPathBuilder
	nparams 2
	  param in name "algorithm" explicit_type "String"
	  param inout name "provider" type class_ref 959643 // Provider
	nexceptions 1
	  exception class_ref 959899 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>CertPathBuilder</code> object that implements the
specified algorithm, as supplied by the specified provider.
Note: the <code>provider</code> doesn't have to be registered.

@param algorithm the name of the requested <code>CertPathBuilder</code> 
algorithm
@param provider the provider
@return a <code>CertPathBuilder</code> object that implements the 
specified algorithm, as supplied by the specified provider
@exception NoSuchAlgorithmException if the requested algorithm is
not available from the specified provider
@exception IllegalArgumentException if the <code>provider</code> is
null."
      end

      operation 7638555 "getProvider"
	public return_type class_ref 959643 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this <code>CertPathBuilder</code>.

@return the provider of this <code>CertPathBuilder</code>"
      end

      operation 7638683 "getAlgorithm"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the algorithm of this <code>CertPathBuilder</code>.

@return the name of the algorithm of this <code>CertPathBuilder</code>"
      end

      operation 7638811 "build"
	public return_type class_ref 971291 // CertPathBuilderResult
	nparams 1
	  param inout name "params" type class_ref 971419 // CertPathParameters
	nexceptions 2
	  exception class_ref 971547 // CertPathBuilderException
	  exception class_ref 960411 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to build a certification path using the specified algorithm
parameter set.

@param params the algorithm parameters
@return the result of the build algorithm
@throws CertPathBuilderException if the builder is unable to construct 
 a certification path that satisfies the specified parameters
@throws InvalidAlgorithmParameterException if the specified parameters 
are inappropriate for this <code>CertPathBuilder</code>"
      end

      operation 7638939 "getDefaultType"
	class_operation public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default <code>CertPathBuilder</code> type as specified in
the Java security properties file, or the string &quot;PKIX&quot;
if no such property exists. The Java security properties file is
located in the file named &lt;JAVA_HOME&gt;/lib/security/java.security,
where &lt;JAVA_HOME&gt; refers to the directory where the JDK was
installed.

<p>The default <code>CertPathBuilder</code> type can be used by
applications that do not want to use a hard-coded type when calling one
of the <code>getInstance</code> methods, and want to provide a default
type in case a user does not specify its own.

<p>The default <code>CertPathBuilder</code> type can be changed by
setting the value of the \"certpathbuilder.type\" security property
(in the Java security properties file) to the desired type.

@return the default <code>CertPathBuilder</code> type as specified
in the Java security properties file, or the string &quot;PKIX&quot;
if no such property exists."
      end
    end

    class 971163 "CertPathBuilderSpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <i>Service Provider Interface</i> (<b>SPI</b>) 
for the {@link CertPathBuilder CertPathBuilder} class. All 
<code>CertPathBuilder</code> implementations must include a class (the 
SPI class) that extends this class (<code>CertPathBuilderSpi</code>) and 
implements all of its methods. In general, instances of this class should 
only be accessed through the <code>CertPathBuilder</code> class. For 
details, see the Java Cryptography Architecture. 
<p>
<b>Concurrent Access</b>
<p>
Instances of this class need not be protected against concurrent
access from multiple threads. Threads that need to access a single
<code>CertPathBuilderSpi</code> instance concurrently should synchronize
amongst themselves and provide the necessary locking before calling the
wrapping <code>CertPathBuilder</code> object.
<p>
However, implementations of <code>CertPathBuilderSpi</code> may still
encounter concurrency issues, since multiple threads each
manipulating a different <code>CertPathBuilderSpi</code> instance need not
synchronize.

@version 	1.5 12/19/03
@since	1.4
@author	Sean Mullan"
      operation 7639835 "CertPathBuilderSpi"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default constructor."
      end

      operation 7639963 "engineBuild"
	abstract public return_type class_ref 971291 // CertPathBuilderResult
	nparams 1
	  param inout name "params" type class_ref 971419 // CertPathParameters
	nexceptions 2
	  exception class_ref 971547 // CertPathBuilderException
	  exception class_ref 960411 // InvalidAlgorithmParameterException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to build a certification path using the specified 
algorithm parameter set.

@param params the algorithm parameters
@return the result of the build algorithm
@throws CertPathBuilderException if the builder is unable to construct 
a certification path that satisfies the specified parameters
@throws InvalidAlgorithmParameterException if the specified parameters 
are inappropriate for this <code>CertPathBuilder</code>"
      end
    end

    class 971291 "CertPathBuilderResult"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specification of the result of a certification path builder algorithm. 
All results returned by the {@link CertPathBuilder#build 
CertPathBuilder.build} method must implement this interface.
<p>
At a minimum, a <code>CertPathBuilderResult</code> contains the 
<code>CertPath</code> built by the <code>CertPathBuilder</code> instance. 
Implementations of this interface may add methods to return implementation 
or algorithm specific information, such as debugging information or 
certification path validation results.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this interface are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertPathBuilder

@version 	1.6 12/19/03
@since	1.4
@author	Sean Mullan"
      classrelation 1886875 // <generalisation>
	relation 1886875 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1886875 // <generalisation>
	  b parent class_ref 339867 // Cloneable
      end

      operation 7639579 "getCertPath"
	public return_type class_ref 845339 // CertPath
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the built certification path.

@return the certification path (never <code>null</code>)"
      end

      operation 7639707 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of this <code>CertPathBuilderResult</code>. Changes to the
copy will not affect the original and vice versa.

@return a copy of this <code>CertPathBuilderResult</code>"
      end
    end

    class 971419 "CertPathParameters"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specification of certification path algorithm parameters.
The purpose of this interface is to group (and provide type safety for) 
all <code>CertPath</code> parameter specifications. All 
<code>CertPath</code> parameter specifications must implement this 
interface.  

@version 	1.5 12/19/03
@author	Yassir Elley
@see 	CertPathValidator#validate(CertPath, CertPathParameters)
@see 	CertPathBuilder#build(CertPathParameters)
@since	1.4"
      classrelation 1887131 // <generalisation>
	relation 1887131 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1887131 // <generalisation>
	  b parent class_ref 339867 // Cloneable
      end

      operation 7641371 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of this <code>CertPathParameters</code>. Changes to the
copy will not affect the original and vice versa.

@return a copy of this <code>CertPathParameters</code>"
      end
    end

    class 971547 "CertPathBuilderException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception indicating one of a variety of problems encountered when
building a certification path with a <code>CertPathBuilder</code>.
<p>
A <code>CertPathBuilderException</code> provides support for wrapping 
exceptions. The {@link #getCause getCause} method returns the throwable, 
if any, that caused this exception to be thrown. 
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertPathBuilder

@version 	1.7 12/19/03
@since	1.4
@author 	Sean Mullan"
      classrelation 1886747 // <generalisation>
	relation 1886747 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1886747 // <generalisation>
	  b parent class_ref 842139 // GeneralSecurityException
      end

      attribute 2855579 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  5316471420178794402L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7639067 "CertPathBuilderException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertPathBuilderException</code> with <code>null</code>
as its detail message."
      end

      operation 7639195 "CertPathBuilderException"
	public explicit_return_type ""
	nparams 1
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertPathBuilderException</code> with the given
detail message. The detail message is a <code>String</code> that 
describes this particular exception in more detail.

@param msg the detail message"
      end

      operation 7639323 "CertPathBuilderException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertPathBuilderException</code> that wraps the specified
throwable. This allows any exception to be converted into a 
<code>CertPathBuilderException</code>, while retaining information 
about the wrapped exception, which may be useful for debugging. The 
detail message is set to (<code>cause==null ? null : cause.toString()
</code>) (which typically contains the class and detail message of 
cause).

@param cause the cause (which is saved for later retrieval by the 
{@link #getCause getCause()} method). (A <code>null</code> value is 
permitted, and indicates that the cause is nonexistent or unknown.)"
      end

      operation 7639451 "CertPathBuilderException"
	public explicit_return_type ""
	nparams 2
	  param in name "msg" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertPathBuilderException</code> with the specified
detail message and cause.

@param msg the detail message
@param  cause the cause (which is saved for later retrieval by the 
{@link #getCause getCause()} method). (A <code>null</code> value is 
permitted, and indicates that the cause is nonexistent or unknown.)"
      end
    end

    class 971675 "CertPathHelperImpl"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Helper class that allows the Sun CertPath provider to access
implementation dependent APIs in CertPath framework.

@author Andreas Sterbenz
@version 1.4, 12/19/03"
      operation 7640091 "CertPathHelperImpl"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7640219 "initialize"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize the helper framework. This method must be called from 
the static initializer of each class that is the target of one of 
the methods in this class. This ensures that the helper if initialized
prior to a tunneled call from the Sun provider."
      end

      operation 7640347 "implSetSubject"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "sel" type class_ref 971931 // X509CertSelector
	  param inout name "subject" type class_ref 845211 // X500Principal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7640475 "implGetSubject"
	protected return_type class_ref 845211 // X500Principal
	nparams 1
	  param inout name "sel" type class_ref 971931 // X509CertSelector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7640603 "implSetIssuer"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "sel" type class_ref 971931 // X509CertSelector
	  param inout name "issuer" type class_ref 845211 // X500Principal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7640731 "implGetIssuer"
	protected return_type class_ref 845211 // X500Principal
	nparams 1
	  param inout name "sel" type class_ref 971931 // X509CertSelector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7640859 "implGetCA"
	protected return_type class_ref 845211 // X500Principal
	nparams 1
	  param inout name "anchor" type class_ref 972059 // TrustAnchor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7640987 "implSetPathToNames"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "sel" type class_ref 971931 // X509CertSelector
	  param inout name "names" type class_ref 136731 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<GeneralNameInterface> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7641115 "implAddIssuer"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "sel" type class_ref 972187 // X509CRLSelector
	  param inout name "name" type class_ref 845211 // X500Principal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7641243 "implGetIssuers"
	protected return_type class_ref 135067 // Collection
	nparams 1
	  param inout name "sel" type class_ref 972187 // X509CRLSelector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<X500Principal> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 971931 "X509CertSelector"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>CertSelector</code> that selects <code>X509Certificates</code> that
match all specified criteria. This class is particularly useful when
selecting certificates from a <code>CertStore</code> to build a
PKIX-compliant certification path.
<p>
When first constructed, an <code>X509CertSelector</code> has no criteria
enabled and each of the <code>get</code> methods return a default value
(<code>null</code>, or <code>-1</code> for the {@link #getBasicConstraints
getBasicConstraints} method). Therefore, the {@link #match match} 
method would return <code>true</code> for any <code>X509Certificate</code>. 
Typically, several criteria are enabled (by calling 
{@link #setIssuer setIssuer} or
{@link #setKeyUsage setKeyUsage}, for instance) and then the
<code>X509CertSelector</code> is passed to
{@link CertStore#getCertificates CertStore.getCertificates} or some similar
method.
<p>
Several criteria can be enabled (by calling {@link #setIssuer setIssuer}
and {@link #setSerialNumber setSerialNumber},
for example) such that the <code>match</code> method 
usually uniquely matches a single <code>X509Certificate</code>. We say
usually, since it is possible for two issuing CAs to have the same
distinguished name and each issue a certificate with the same serial
number. Other unique combinations include the issuer, subject, 
subjectKeyIdentifier and/or the subjectPublicKey criteria.
<p>
Please refer to RFC 2459 for definitions of the X.509 certificate
extensions mentioned below.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertSelector
@see X509Certificate

@version 	1.20, 06/08/04
@since	1.4
@author	Steve Hanna"
      classrelation 1892251 // <realization>
	relation 1892251 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1892251 // <realization>
	  b parent class_ref 972827 // CertSelector
      end

      attribute 2859291 "debug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value "=  Debug.getInstance(\"certpath\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2859419 "ANY_EXTENDED_KEY_USAGE"
	class_attribute const_attribute private explicit_type "ObjectIdentifier"
	init_value "=  
	ObjectIdentifier.newInternal(new int[] {2, 5, 29, 37, 0})"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 165275 "initialization"
	
	cpp "" ""
	java "  static {
	CertPathHelperImpl.initialize();
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 1892379 // serialNumber (<unidirectional association>)
	relation 1892379 --->
	  a role_name "serialNumber" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1892379 // serialNumber (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      classrelation 1892507 // issuer (<unidirectional association>)
	relation 1892507 --->
	  a role_name "issuer" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1892507 // issuer (<unidirectional association>)
	  b parent class_ref 845211 // X500Principal
      end

      classrelation 1892635 // subject (<unidirectional association>)
	relation 1892635 --->
	  a role_name "subject" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1892635 // subject (<unidirectional association>)
	  b parent class_ref 845211 // X500Principal
      end

      attribute 2859547 "subjectKeyID"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2859675 "authorityKeyID"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1892763 // certificateValid (<unidirectional association>)
	relation 1892763 --->
	  a role_name "certificateValid" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1892763 // certificateValid (<unidirectional association>)
	  b parent class_ref 139163 // Date
      end

      classrelation 1892891 // privateKeyValid (<unidirectional association>)
	relation 1892891 --->
	  a role_name "privateKeyValid" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1892891 // privateKeyValid (<unidirectional association>)
	  b parent class_ref 139163 // Date
      end

      attribute 2859803 "subjectPublicKeyAlgID"
	private explicit_type "ObjectIdentifier"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1893019 // subjectPublicKey (<unidirectional association>)
	relation 1893019 --->
	  a role_name "subjectPublicKey" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1893019 // subjectPublicKey (<unidirectional association>)
	  b parent class_ref 962075 // PublicKey
      end

      attribute 2859931 "subjectPublicKeyBytes"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2860059 "keyUsage"
	private explicit_type "boolean"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1893147 // keyPurposeSet (<unidirectional association>)
	relation 1893147 --->
	  a role_name "keyPurposeSet" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 1893147 // keyPurposeSet (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      classrelation 1893275 // keyPurposeOIDSet (<unidirectional association>)
	relation 1893275 --->
	  a role_name "keyPurposeOIDSet" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectIdentifier> ${name}${value};
"
	    classrelation_ref 1893275 // keyPurposeOIDSet (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      classrelation 1893403 // subjectAlternativeNames (<unidirectional association>)
	relation 1893403 --->
	  a role_name "subjectAlternativeNames" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<List<?>> ${name}${value};
"
	    classrelation_ref 1893403 // subjectAlternativeNames (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      classrelation 1893531 // subjectAlternativeGeneralNames (<unidirectional association>)
	relation 1893531 --->
	  a role_name "subjectAlternativeGeneralNames" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<GeneralNameInterface> ${name}${value};
"
	    classrelation_ref 1893531 // subjectAlternativeGeneralNames (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      attribute 2860187 "policy"
	private explicit_type "CertificatePolicySet"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1893659 // policySet (<unidirectional association>)
	relation 1893659 --->
	  a role_name "policySet" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 1893659 // policySet (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      classrelation 1893787 // pathToNames (<unidirectional association>)
	relation 1893787 --->
	  a role_name "pathToNames" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<List<?>> ${name}${value};
"
	    classrelation_ref 1893787 // pathToNames (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      classrelation 1893915 // pathToGeneralNames (<unidirectional association>)
	relation 1893915 --->
	  a role_name "pathToGeneralNames" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<GeneralNameInterface> ${name}${value};
"
	    classrelation_ref 1893915 // pathToGeneralNames (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      attribute 2860315 "nc"
	private explicit_type "NameConstraintsExtension"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2860443 "ncBytes"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2860571 "basicConstraints"
	private explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1894043 // x509Cert (<unidirectional association>)
	relation 1894043 --->
	  a role_name "x509Cert" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1894043 // x509Cert (<unidirectional association>)
	  b parent class_ref 974747 // X509Certificate
      end

      attribute 2860699 "matchAllSubjectAltNames"
	private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1894171 // FALSE (<unidirectional association>)
	relation 1894171 --->
	  a role_name "FALSE" init_value "=  Boolean.FALSE" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1894171 // FALSE (<unidirectional association>)
	  b parent class_ref 392091 // Boolean
      end

      attribute 2860827 "PRIVATE_KEY_USAGE_ID"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2860955 "SUBJECT_ALT_NAME_ID"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2861083 "NAME_CONSTRAINTS_ID"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2861211 "CERT_POLICIES_ID"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2861339 "EXTENDED_KEY_USAGE_ID"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2861467 "NUM_OF_EXTENSIONS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2861595 "EXTENSION_OIDS"
	class_attribute const_attribute private explicit_type "String"
	multiplicity "[]"
	init_value "=  new String[NUM_OF_EXTENSIONS]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 165403 "initialization"
	
	cpp "" ""
	java "  static {
	EXTENSION_OIDS[PRIVATE_KEY_USAGE_ID]  = \"2.5.29.16\";
	EXTENSION_OIDS[SUBJECT_ALT_NAME_ID]   = \"2.5.29.17\";
	EXTENSION_OIDS[NAME_CONSTRAINTS_ID]   = \"2.5.29.30\";
	EXTENSION_OIDS[CERT_POLICIES_ID]      = \"2.5.29.32\";
	EXTENSION_OIDS[EXTENDED_KEY_USAGE_ID] = \"2.5.29.37\";
    }"
	php ""
	python ""
	idl ""
      end

      attribute 2861723 "NAME_ANY"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Constants representing the GeneralName types "
      end

      attribute 2861851 "NAME_RFC822"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2861979 "NAME_DNS"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2862107 "NAME_X400"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2862235 "NAME_DIRECTORY"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2862363 "NAME_EDI"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2862491 "NAME_URI"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2862619 "NAME_IP"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2862747 "NAME_OID"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7661979 "X509CertSelector"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an <code>X509CertSelector</code>. Initially, no criteria are set
so any <code>X509Certificate</code> will match."
      end

      operation 7662107 "setCertificate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cert" type class_ref 974747 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the certificateEquals criterion. The specified 
<code>X509Certificate</code> must be equal to the 
<code>X509Certificate</code> passed to the <code>match</code> method.
If <code>null</code>, then this check is not applied.

<p>This method is particularly useful when it is necessary to
match a single certificate. Although other criteria can be specified 
in conjunction with the certificateEquals criterion, it is usually not 
practical or necessary.

@param cert the <code>X509Certificate</code> to match (or 
<code>null</code>)
@see #getCertificate"
      end

      operation 7662235 "setSerialNumber"
	public explicit_return_type "void"
	nparams 1
	  param inout name "serial" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the serialNumber criterion. The specified serial number
must match the certificate serial number in the
<code>X509Certificate</code>. If <code>null</code>, any certificate 
serial number will do.

@param serial the certificate serial number to match 
       (or <code>null</code>)
@see #getSerialNumber"
      end

      operation 7662363 "setIssuer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "issuer" type class_ref 845211 // X500Principal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the issuer criterion. The specified distinguished name
must match the issuer distinguished name in the
<code>X509Certificate</code>. If <code>null</code>, any issuer
distinguished name will do.

@param issuer a distinguished name as X500Principal
                (or <code>null</code>)
@since 1.5"
      end

      operation 7662491 "setIssuer"
	public explicit_return_type "void"
	nparams 1
	  param in name "issuerDN" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, use {@linkplain #setIssuer(X500Principal)} 
or {@linkplain #setIssuer(byte[])} instead. This method should not be 
relied on as it can fail to match some certificates because of a loss of 
encoding information in the RFC 2253 String form of some distinguished
names.
<p>
Sets the issuer criterion. The specified distinguished name
must match the issuer distinguished name in the
<code>X509Certificate</code>. If <code>null</code>, any issuer
distinguished name will do.
<p>
If <code>issuerDN</code> is not <code>null</code>, it should contain a
distinguished name, in RFC 2253 format.

@param issuerDN a distinguished name in RFC 2253 format
                (or <code>null</code>)
@throws IOException if a parsing error occurs (incorrect form for DN)"
      end

      operation 7662619 "setIssuer"
	public explicit_return_type "void"
	nparams 1
	  param in name "issuerDN" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the issuer criterion. The specified distinguished name
must match the issuer distinguished name in the
<code>X509Certificate</code>. If <code>null</code> is specified,
the issuer criterion is disabled and any issuer distinguished name will
do.
<p>
If <code>issuerDN</code> is not <code>null</code>, it should contain a
single DER encoded distinguished name, as defined in X.501. The ASN.1
notation for this structure is as follows.
<pre><code>
Name ::= CHOICE {
  RDNSequence }

RDNSequence ::= SEQUENCE OF RelativeDistinguishedName

RelativeDistinguishedName ::=
  SET SIZE (1 .. MAX) OF AttributeTypeAndValue

AttributeTypeAndValue ::= SEQUENCE {
  type     AttributeType,
  value    AttributeValue }

AttributeType ::= OBJECT IDENTIFIER

AttributeValue ::= ANY DEFINED BY AttributeType
....
DirectoryString ::= CHOICE {
      teletexString           TeletexString (SIZE (1..MAX)),
      printableString         PrintableString (SIZE (1..MAX)),
      universalString         UniversalString (SIZE (1..MAX)),
      utf8String              UTF8String (SIZE (1.. MAX)),
      bmpString               BMPString (SIZE (1..MAX)) }
</code></pre>
<p>
Note that the byte array specified here is cloned to protect against
subsequent modifications.

@param issuerDN a byte array containing the distinguished name
                in ASN.1 DER encoded form (or <code>null</code>)
@throws IOException if an encoding error occurs (incorrect form for DN)"
      end

      operation 7662747 "setSubject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "subject" type class_ref 845211 // X500Principal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subject criterion. The specified distinguished name
must match the subject distinguished name in the
<code>X509Certificate</code>. If <code>null</code>, any subject
distinguished name will do.

@param subject a distinguished name as X500Principal
                 (or <code>null</code>)
@since 1.5"
      end

      operation 7662875 "setSubject"
	public explicit_return_type "void"
	nparams 1
	  param in name "subjectDN" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, use {@linkplain #setSubject(X500Principal)} 
or {@linkplain #setSubject(byte[])} instead. This method should not be 
relied on as it can fail to match some certificates because of a loss of 
encoding information in the RFC 2253 String form of some distinguished
names.
<p>
Sets the subject criterion. The specified distinguished name
must match the subject distinguished name in the
<code>X509Certificate</code>. If <code>null</code>, any subject
distinguished name will do.
<p>
If <code>subjectDN</code> is not <code>null</code>, it should contain a
distinguished name, in RFC 2253 format.

@param subjectDN a distinguished name in RFC 2253 format
                 (or <code>null</code>)
@throws IOException if a parsing error occurs (incorrect form for DN)"
      end

      operation 7663003 "setSubject"
	public explicit_return_type "void"
	nparams 1
	  param in name "subjectDN" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subject criterion. The specified distinguished name
must match the subject distinguished name in the
<code>X509Certificate</code>. If <code>null</code>, any subject
distinguished name will do.
<p>
If <code>subjectDN</code> is not <code>null</code>, it should contain a
single DER encoded distinguished name, as defined in X.501. For the ASN.1
notation for this structure, see
{@link #setIssuer(byte [] issuerDN) setIssuer(byte [] issuerDN)}.

@param subjectDN a byte array containing the distinguished name in
                 ASN.1 DER format (or <code>null</code>)
@throws IOException if an encoding error occurs (incorrect form for DN)"
      end

      operation 7663131 "setSubjectKeyIdentifier"
	public explicit_return_type "void"
	nparams 1
	  param in name "subjectKeyID" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subjectKeyIdentifier criterion. The
<code>X509Certificate</code> must contain a SubjectKeyIdentifier
extension for which the contents of the extension
matches the specified criterion value.
If the criterion value is <code>null</code>, no
subjectKeyIdentifier check will be done.
<p>
If <code>subjectKeyID</code> is not <code>null</code>, it
should contain a single DER encoded value corresponding to the contents
of the extension value (not including the object identifier,
criticality setting, and encapsulating OCTET STRING)
for a SubjectKeyIdentifier extension.
The ASN.1 notation for this structure follows.
<p>
<pre><code>
SubjectKeyIdentifier ::= KeyIdentifier

KeyIdentifier ::= OCTET STRING
</code></pre>
<p>
Since the format of subject key identifiers is not mandated by
any standard, subject key identifiers are not parsed by the
<code>X509CertSelector</code>. Instead, the values are compared using
a byte-by-byte comparison.
<p>
Note that the byte array supplied here is cloned to protect against
subsequent modifications.

@param subjectKeyID the subject key identifier (or <code>null</code>)
@see #getSubjectKeyIdentifier"
      end

      operation 7663259 "setAuthorityKeyIdentifier"
	public explicit_return_type "void"
	nparams 1
	  param in name "authorityKeyID" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the authorityKeyIdentifier criterion. The
<code>X509Certificate</code> must contain an
AuthorityKeyIdentifier extension for which the contents of the
extension value matches the specified criterion value.
If the criterion value is <code>null</code>, no
authorityKeyIdentifier check will be done.
<p>
If <code>authorityKeyID</code> is not <code>null</code>, it
should contain a single DER encoded value corresponding to the contents
of the extension value (not including the object identifier,
criticality setting, and encapsulating OCTET STRING)
for an AuthorityKeyIdentifier extension.
The ASN.1 notation for this structure follows.
<p>
<pre><code>
AuthorityKeyIdentifier ::= SEQUENCE {
   keyIdentifier             [0] KeyIdentifier           OPTIONAL,
   authorityCertIssuer       [1] GeneralNames            OPTIONAL,
   authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }

KeyIdentifier ::= OCTET STRING
</code></pre>
<p>
Authority key identifiers are not parsed by the
<code>X509CertSelector</code>.  Instead, the values are
compared using a byte-by-byte comparison.
<p>
When the <code>keyIdentifier</code> field of
<code>AuthorityKeyIdentifier</code> is populated, the value is
usually taken from the <code>SubjectKeyIdentifier</code> extension
in the issuer's certificate.  Note, however, that the result of
<code>X509Certificate.getExtensionValue(&lt;SubjectKeyIdentifier Object 
Identifier&gt;)</code> on the issuer's certificate may NOT be used 
directly as the input to <code>setAuthorityKeyIdentifier</code>.
This is because the SubjectKeyIdentifier contains
only a KeyIdentifier OCTET STRING, and not a SEQUENCE of
KeyIdentifier, GeneralNames, and CertificateSerialNumber.
In order to use the extension value of the issuer certificate's
<code>SubjectKeyIdentifier</code>
extension, it will be necessary to extract the value of the embedded
<code>KeyIdentifier</code> OCTET STRING, then DER encode this OCTET
STRING inside a SEQUENCE.
For more details on SubjectKeyIdentifier, see
{@link #setSubjectKeyIdentifier(byte[] subjectKeyID)}.
<p>
Note also that the byte array supplied here is cloned to protect against
subsequent modifications.

@param authorityKeyID the authority key identifier 
       (or <code>null</code>) 
@see #getAuthorityKeyIdentifier"
      end

      operation 7663387 "setCertificateValid"
	public explicit_return_type "void"
	nparams 1
	  param inout name "certValid" type class_ref 139163 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the certificateValid criterion. The specified date must fall
within the certificate validity period for the
<code>X509Certificate</code>. If <code>null</code>, no certificateValid
check will be done.
<p>
Note that the <code>Date</code> supplied here is cloned to protect 
against subsequent modifications.

@param certValid the <code>Date</code> to check (or <code>null</code>)
@see #getCertificateValid"
      end

      operation 7663515 "setPrivateKeyValid"
	public explicit_return_type "void"
	nparams 1
	  param inout name "privateKeyValid" type class_ref 139163 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the privateKeyValid criterion. The specified date must fall
within the private key validity period for the
<code>X509Certificate</code>. If <code>null</code>, no privateKeyValid
check will be done.
<p>
Note that the <code>Date</code> supplied here is cloned to protect 
against subsequent modifications.

@param privateKeyValid the <code>Date</code> to check (or
                       <code>null</code>)
@see #getPrivateKeyValid"
      end

      operation 7663643 "setSubjectPublicKeyAlgID"
	public explicit_return_type "void"
	nparams 1
	  param in name "oid" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subjectPublicKeyAlgID criterion. The
<code>X509Certificate</code> must contain a subject public key
with the specified algorithm. If <code>null</code>, no
subjectPublicKeyAlgID check will be done.

@param oid The object identifier (OID) of the algorithm to check
           for (or <code>null</code>). An OID is represented by a
           set of nonnegative integers separated by periods.
@throws IOException if the OID is invalid, such as
the first component being not 0, 1 or 2 or the second component
being greater than 39.

@see #getSubjectPublicKeyAlgID"
      end

      operation 7663771 "setSubjectPublicKey"
	public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 962075 // PublicKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subjectPublicKey criterion. The
<code>X509Certificate</code> must contain the specified subject public
key. If <code>null</code>, no subjectPublicKey check will be done.

@param key the subject public key to check for (or <code>null</code>)
@see #getSubjectPublicKey"
      end

      operation 7663899 "setSubjectPublicKey"
	public explicit_return_type "void"
	nparams 1
	  param in name "key" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subjectPublicKey criterion. The <code>X509Certificate</code>
must contain the specified subject public key. If <code>null</code>,
no subjectPublicKey check will be done.
<p>
Because this method allows the public key to be specified as a byte
array, it may be used for unknown key types.
<p>
If <code>key</code> is not <code>null</code>, it should contain a
single DER encoded SubjectPublicKeyInfo structure, as defined in X.509.
The ASN.1 notation for this structure is as follows.
<pre><code>
SubjectPublicKeyInfo  ::=  SEQUENCE  {
  algorithm            AlgorithmIdentifier,
  subjectPublicKey     BIT STRING  }

AlgorithmIdentifier  ::=  SEQUENCE  {
  algorithm               OBJECT IDENTIFIER,
  parameters              ANY DEFINED BY algorithm OPTIONAL  }
                             -- contains a value of the type
                             -- registered for use with the
                             -- algorithm object identifier value
</code></pre>
<p>
Note that the byte array supplied here is cloned to protect against
subsequent modifications.

@param key a byte array containing the subject public key in ASN.1 DER
           form (or <code>null</code>)
@throws IOException if an encoding error occurs (incorrect form for 
subject public key)
@see #getSubjectPublicKey"
      end

      operation 7664027 "setKeyUsage"
	public explicit_return_type "void"
	nparams 1
	  param inout name "keyUsage" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the keyUsage criterion. The <code>X509Certificate</code>
must allow the specified keyUsage values. If <code>null</code>, no
keyUsage check will be done. Note that an <code>X509Certificate</code> 
that has no keyUsage extension implicitly allows all keyUsage values.
<p>
Note that the boolean array supplied here is cloned to protect against
subsequent modifications.

@param keyUsage a boolean array in the same format as the boolean
                array returned by
{@link X509Certificate#getKeyUsage() X509Certificate.getKeyUsage()}.
                Or <code>null</code>.
@see #getKeyUsage"
      end

      operation 7664155 "setExtendedKeyUsage"
	public explicit_return_type "void"
	nparams 1
	  param inout name "keyPurposeSet" type class_ref 136731 // Set
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the extendedKeyUsage criterion. The <code>X509Certificate</code>
must allow the specified key purposes in its extended key usage
extension. If <code>keyPurposeSet</code> is empty or <code>null</code>, 
no extendedKeyUsage check will be done. Note that an 
<code>X509Certificate</code> that has no extendedKeyUsage extension 
implicitly allows all key purposes.
<p>
Note that the <code>Set</code> is cloned to protect against
subsequent modifications.

@param keyPurposeSet a <code>Set</code> of key purpose OIDs in string 
format (or <code>null</code>). Each OID is represented by a set of 
nonnegative integers separated by periods.
@throws IOException if the OID is invalid, such as
the first component being not 0, 1 or 2 or the second component
being greater than 39.
@see #getExtendedKeyUsage"
      end

      operation 7664283 "setMatchAllSubjectAltNames"
	public explicit_return_type "void"
	nparams 1
	  param inout name "matchAllNames" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables/disables matching all of the subjectAlternativeNames 
specified in the {@link #setSubjectAlternativeNames
setSubjectAlternativeNames} or {@link #addSubjectAlternativeName
addSubjectAlternativeName} methods. If enabled, 
the <code>X509Certificate</code> must contain all of the 
specified subject alternative names. If disabled, the 
<code>X509Certificate</code> must contain at least one of the 
specified subject alternative names.

<p>The matchAllNames flag is <code>true</code> by default.

@param matchAllNames if <code>true</code>, the flag is enabled;
if <code>false</code>, the flag is disabled.
@see #getMatchAllSubjectAltNames"
      end

      operation 7664411 "setSubjectAlternativeNames"
	public explicit_return_type "void"
	nparams 1
	  param inout name "names" type class_ref 135067 // Collection
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<List<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subjectAlternativeNames criterion. The
<code>X509Certificate</code> must contain all or at least one of the 
specified subjectAlternativeNames, depending on the value of
the matchAllNames flag (see {@link #setMatchAllSubjectAltNames
setMatchAllSubjectAltNames}).
<p>
This method allows the caller to specify, with a single method call,
the complete set of subject alternative names for the
subjectAlternativeNames criterion. The specified value replaces
the previous value for the subjectAlternativeNames criterion.
<p>
The <code>names</code> parameter (if not <code>null</code>) is a
<code>Collection</code> with one
entry for each name to be included in the subject alternative name
criterion. Each entry is a <code>List</code> whose first entry is an
<code>Integer</code> (the name type, 0-8) and whose second
entry is a <code>String</code> or a byte array (the name, in
string or ASN.1 DER encoded form, respectively).
There can be multiple names of the same type. If <code>null</code>
is supplied as the value for this argument, no
subjectAlternativeNames check will be performed.
<p>
Each subject alternative name in the <code>Collection</code>
may be specified either as a <code>String</code> or as an ASN.1 encoded
byte array. For more details about the formats used, see
{@link #addSubjectAlternativeName(int type, String name) 
addSubjectAlternativeName(int type, String name)} and
{@link #addSubjectAlternativeName(int type, byte [] name) 
addSubjectAlternativeName(int type, byte [] name)}.
<p>
<strong>Note:</strong> for distinguished names, specify the byte
array form instead of the String form. See the note in 
{@link #addSubjectAlternativeName(int, String)} for more information. 
<p>
Note that the <code>names</code> parameter can contain duplicate
names (same name and name type), but they may be removed from the
<code>Collection</code> of names returned by the
{@link #getSubjectAlternativeNames getSubjectAlternativeNames} method.
<p>
Note that a deep copy is performed on the <code>Collection</code> to
protect against subsequent modifications.

@param names a <code>Collection</code> of names (or <code>null</code>)
@throws IOException if a parsing error occurs
@see #getSubjectAlternativeNames"
      end

      operation 7664539 "addSubjectAlternativeName"
	public explicit_return_type "void"
	nparams 2
	  param in name "type" explicit_type "int"
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a name to the subjectAlternativeNames criterion. The
<code>X509Certificate</code> must contain all or at least one
of the specified subjectAlternativeNames, depending on the value of
the matchAllNames flag (see {@link #setMatchAllSubjectAltNames
setMatchAllSubjectAltNames}).
<p>
This method allows the caller to add a name to the set of subject
alternative names. 
The specified name is added to any previous value for the
subjectAlternativeNames criterion. If the specified name is a 
duplicate, it may be ignored.
<p>
The name is provided in string format. RFC 822, DNS, and URI names
use the well-established string formats for those types (subject to
the restrictions included in RFC 2459). IPv4 address names are
supplied using dotted quad notation. OID address names are represented
as a series of nonnegative integers separated by periods. And
directory names (distinguished names) are supplied in RFC 2253 format.
No standard string format is defined for otherNames, X.400 names,
EDI party names, IPv6 address names, or any other type of names. They
should be specified using the 
{@link #addSubjectAlternativeName(int type, byte [] name) 
addSubjectAlternativeName(int type, byte [] name)}
method.
<p>
<strong>Note:</strong> for distinguished names, use 
{@linkplain #addSubjectAlternativeName(int, byte[])} instead. 
This method should not be relied on as it can fail to match some 
certificates because of a loss of encoding information in the RFC 2253 
String form of some distinguished names.

@param type the name type (0-8, as specified in
            RFC 2459, section 4.2.1.7)
@param name the name in string form (not <code>null</code>)
@throws IOException if a parsing error occurs"
      end

      operation 7664667 "addSubjectAlternativeName"
	public explicit_return_type "void"
	nparams 2
	  param in name "type" explicit_type "int"
	  param in name "name" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a name to the subjectAlternativeNames criterion. The
<code>X509Certificate</code> must contain all or at least one
of the specified subjectAlternativeNames, depending on the value of
the matchAllNames flag (see {@link #setMatchAllSubjectAltNames
setMatchAllSubjectAltNames}).
<p>
This method allows the caller to add a name to the set of subject
alternative names.
The specified name is added to any previous value for the
subjectAlternativeNames criterion. If the specified name is a 
duplicate, it may be ignored.
<p>
The name is provided as a byte array. This byte array should contain
the DER encoded name, as it would appear in the GeneralName structure
defined in RFC 2459 and X.509. The encoded byte array should only contain
the encoded value of the name, and should not include the tag associated 
with the name in the GeneralName structure. The ASN.1 definition of this 
structure appears below.
<pre><code>
 GeneralName ::= CHOICE {
      otherName                       [0]     OtherName,
      rfc822Name                      [1]     IA5String,
      dNSName                         [2]     IA5String,
      x400Address                     [3]     ORAddress,
      directoryName                   [4]     Name,
      ediPartyName                    [5]     EDIPartyName,
      uniformResourceIdentifier       [6]     IA5String,
      iPAddress                       [7]     OCTET STRING,
      registeredID                    [8]     OBJECT IDENTIFIER}
</code></pre>
<p>
Note that the byte array supplied here is cloned to protect against
subsequent modifications.

@param type the name type (0-8, as listed above)
@param name a byte array containing the name in ASN.1 DER encoded form
@throws IOException if a parsing error occurs"
      end

      operation 7664795 "addSubjectAlternativeNameInternal"
	private explicit_return_type "void"
	nparams 2
	  param in name "type" explicit_type "int"
	  param inout name "name" explicit_type "Object"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A private method that adds a name (String or byte array) to the
subjectAlternativeNames criterion. The <code>X509Certificate</code>
must contain the specified subjectAlternativeName.

@param type the name type (0-8, as specified in
            RFC 2459, section 4.2.1.7)
@param name the name in string or byte array form
@throws IOException if a parsing error occurs"
      end

      operation 7664923 "parseNames"
	class_operation private return_type class_ref 136731 // Set
	nparams 1
	  param inout name "names" type class_ref 135067 // Collection
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<GeneralNameInterface> ${name}${(}${t0}<List<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse an argument of the form passed to setSubjectAlternativeNames,
returning a <code>Collection</code> of 
<code>GeneralNameInterface</code>s.
Throw an IllegalArgumentException or a ClassCastException
if the argument is malformed.

@param names a Collection with one entry per name.
             Each entry is a <code>List</code> whose first entry
             is an Integer (the name type, 0-8) and whose second
             entry is a String or a byte array (the name, in
             string or ASN.1 DER encoded form, respectively).
             There can be multiple names of the same type. Null is
             not an acceptable value.
@return a Set of <code>GeneralNameInterface</code>s
@throws IOException if a parsing error occurs"
      end

      operation 7665051 "equalNames"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param inout name "object1" type class_ref 135067 // Collection
	  param inout name "object2" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare for equality two objects of the form passed to
setSubjectAlternativeNames (or X509CRLSelector.setIssuerNames).
Throw an <code>IllegalArgumentException</code> or a
<code>ClassCastException</code> if one of the objects is malformed.

@param object1 a Collection containing the first object to compare
@param object2 a Collection containing the second object to compare
@return true if the objects are equal, false otherwise"
      end

      operation 7665179 "makeGeneralNameInterface"
	class_operation package explicit_return_type "GeneralNameInterface"
	nparams 2
	  param in name "type" explicit_type "int"
	  param inout name "name" explicit_type "Object"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a <code>GeneralNameInterface</code> out of a name type (0-8) and an
Object that may be a byte array holding the ASN.1 DER encoded
name or a String form of the name.  Except for X.509
Distinguished Names, the String form of the name must not be the
result from calling toString on an existing GeneralNameInterface
implementing class.  The output of toString is not compatible
with the String constructors for names other than Distinguished
Names.

@param type name type (0-8)
@param name name as ASN.1 Der-encoded byte array or String
@return a GeneralNameInterface name
@throws IOException if a parsing error occurs"
      end

      operation 7665307 "setNameConstraints"
	public explicit_return_type "void"
	nparams 1
	  param in name "bytes" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name constraints criterion. The <code>X509Certificate</code>
must have subject and subject alternative names that
meet the specified name constraints.
<p>
The name constraints are specified as a byte array. This byte array
should contain the DER encoded form of the name constraints, as they
would appear in the NameConstraints structure defined in RFC 2459
and X.509. The ASN.1 definition of this structure appears below.

<pre><code>
 NameConstraints ::= SEQUENCE {
      permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
      excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }

 GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree

 GeneralSubtree ::= SEQUENCE {
      base                    GeneralName,
      minimum         [0]     BaseDistance DEFAULT 0,
      maximum         [1]     BaseDistance OPTIONAL }

 BaseDistance ::= INTEGER (0..MAX)

 GeneralName ::= CHOICE {
      otherName                       [0]     OtherName,
      rfc822Name                      [1]     IA5String,
      dNSName                         [2]     IA5String,
      x400Address                     [3]     ORAddress,
      directoryName                   [4]     Name,
      ediPartyName                    [5]     EDIPartyName,
      uniformResourceIdentifier       [6]     IA5String,
      iPAddress                       [7]     OCTET STRING,
      registeredID                    [8]     OBJECT IDENTIFIER}
</code></pre>
<p>
Note that the byte array supplied here is cloned to protect against
subsequent modifications.

@param bytes a byte array containing the ASN.1 DER encoding of
             a NameConstraints extension to be used for checking
             name constraints. Only the value of the extension is
             included, not the OID or criticality flag. Can be
             <code>null</code>,
             in which case no name constraints check will be performed.
@throws IOException if a parsing error occurs
@see #getNameConstraints"
      end

      operation 7665435 "setBasicConstraints"
	public explicit_return_type "void"
	nparams 1
	  param in name "minMaxPathLen" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the basic constraints constraint. If the value is greater than or
equal to zero, <code>X509Certificates</code> must include a 
basicConstraints extension with
a pathLen of at least this value. If the value is -2, only end-entity
certificates are accepted. If the value is -1, no check is done.
<p>
This constraint is useful when building a certification path forward 
(from the target toward the trust anchor. If a partial path has been 
built, any candidate certificate must have a maxPathLen value greater 
than or equal to the number of certificates in the partial path.

@param minMaxPathLen the value for the basic constraints constraint
@throws IllegalArgumentException if the value is less than -2
@see #getBasicConstraints"
      end

      operation 7665563 "setPolicy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "certPolicySet" type class_ref 136731 // Set
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the policy constraint. The <code>X509Certificate</code> must
include at least one of the specified policies in its certificate 
policies extension. If <code>certPolicySet</code> is empty, then the 
<code>X509Certificate</code> must include at least some specified policy
in its certificate policies extension. If <code>certPolicySet</code> is
<code>null</code>, no policy check will be performed.
<p>
Note that the <code>Set</code> is cloned to protect against
subsequent modifications.

@param certPolicySet a <code>Set</code> of certificate policy OIDs in
                     string format (or <code>null</code>). Each OID is 
                     represented by a set of nonnegative integers 
			  separated by periods.
@throws IOException if a parsing error occurs on the OID such as
the first component is not 0, 1 or 2 or the second component is
greater than 39.
@see #getPolicy"
      end

      operation 7665691 "setPathToNames"
	public explicit_return_type "void"
	nparams 1
	  param inout name "names" type class_ref 135067 // Collection
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<List<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the pathToNames criterion. The <code>X509Certificate</code> must
not include name constraints that would prohibit building a
path to the specified names.
<p>
This method allows the caller to specify, with a single method call,
the complete set of names which the <code>X509Certificates</code>'s
name constraints must permit. The specified value replaces
the previous value for the pathToNames criterion.
<p>
This constraint is useful when building a certification path forward 
(from the target toward the trust anchor. If a partial path has been 
built, any candidate certificate must not include name constraints that
would prohibit building a path to any of the names in the partial path.
<p>
The <code>names</code> parameter (if not <code>null</code>) is a
<code>Collection</code> with one
entry for each name to be included in the pathToNames
criterion. Each entry is a <code>List</code> whose first entry is an
<code>Integer</code> (the name type, 0-8) and whose second
entry is a <code>String</code> or a byte array (the name, in
string or ASN.1 DER encoded form, respectively).
There can be multiple names of the same type. If <code>null</code>
is supplied as the value for this argument, no
pathToNames check will be performed.
<p>
Each name in the <code>Collection</code>
may be specified either as a <code>String</code> or as an ASN.1 encoded
byte array. For more details about the formats used, see
{@link #addPathToName(int type, String name) 
addPathToName(int type, String name)} and
{@link #addPathToName(int type, byte [] name) 
addPathToName(int type, byte [] name)}.
<p>
<strong>Note:</strong> for distinguished names, specify the byte
array form instead of the String form. See the note in
{@link #addPathToName(int, String)} for more information. 
<p>
Note that the <code>names</code> parameter can contain duplicate
names (same name and name type), but they may be removed from the
<code>Collection</code> of names returned by the
{@link #getPathToNames getPathToNames} method.
<p>
Note that a deep copy is performed on the <code>Collection</code> to
protect against subsequent modifications.

@param names a <code>Collection</code> with one entry per name
             (or <code>null</code>)
@throws IOException if a parsing error occurs
@see #getPathToNames"
      end

      operation 7665819 "setPathToNamesInternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "names" type class_ref 136731 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<GeneralNameInterface> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " called from CertPathHelper"
      end

      operation 7665947 "addPathToName"
	public explicit_return_type "void"
	nparams 2
	  param in name "type" explicit_type "int"
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a name to the pathToNames criterion. The <code>X509Certificate</code>
must not include name constraints that would prohibit building a
path to the specified name.
<p>
This method allows the caller to add a name to the set of names which
the <code>X509Certificates</code>'s name constraints must permit.
The specified name is added to any previous value for the
pathToNames criterion.  If the name is a duplicate, it may be ignored.
<p>
The name is provided in string format. RFC 822, DNS, and URI names
use the well-established string formats for those types (subject to
the restrictions included in RFC 2459). IPv4 address names are
supplied using dotted quad notation. OID address names are represented
as a series of nonnegative integers separated by periods. And
directory names (distinguished names) are supplied in RFC 2253 format.
No standard string format is defined for otherNames, X.400 names,
EDI party names, IPv6 address names, or any other type of names. They
should be specified using the 
{@link #addPathToName(int type, byte [] name) 
addPathToName(int type, byte [] name)} method.
<p>
<strong>Note:</strong> for distinguished names, use 
{@linkplain #addPathToName(int, byte[])} instead. 
This method should not be relied on as it can fail to match some 
certificates because of a loss of encoding information in the RFC 2253 
String form of some distinguished names.

@param type the name type (0-8, as specified in
            RFC 2459, section 4.2.1.7)
@param name the name in string form
@throws IOException if a parsing error occurs"
      end

      operation 7666075 "addPathToName"
	public explicit_return_type "void"
	nparams 2
	  param in name "type" explicit_type "int"
	  param in name "name" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a name to the pathToNames criterion. The <code>X509Certificate</code>
must not include name constraints that would prohibit building a
path to the specified name.
<p>
This method allows the caller to add a name to the set of names which
the <code>X509Certificates</code>'s name constraints must permit.
The specified name is added to any previous value for the
pathToNames criterion. If the name is a duplicate, it may be ignored.
<p>
The name is provided as a byte array. This byte array should contain
the DER encoded name, as it would appear in the GeneralName structure
defined in RFC 2459 and X.509. The ASN.1 definition of this structure
appears in the documentation for
{@link #addSubjectAlternativeName(int type, byte [] name) 
addSubjectAlternativeName(int type, byte [] name)}.
<p>
Note that the byte array supplied here is cloned to protect against
subsequent modifications.

@param type the name type (0-8, as specified in
            RFC 2459, section 4.2.1.7)
@param name a byte array containing the name in ASN.1 DER encoded form
@throws IOException if a parsing error occurs"
      end

      operation 7666203 "addPathToNameInternal"
	private explicit_return_type "void"
	nparams 2
	  param in name "type" explicit_type "int"
	  param inout name "name" explicit_type "Object"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A private method that adds a name (String or byte array) to the
pathToNames criterion. The <code>X509Certificate</code> must contain
the specified pathToName.

@param type the name type (0-8, as specified in
            RFC 2459, section 4.2.1.7)
@param name the name in string or byte array form
@throws IOException if an encoding error occurs (incorrect form for DN)"
      end

      operation 7666331 "getCertificate"
	public return_type class_ref 974747 // X509Certificate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the certificateEquals criterion. The specified
<code>X509Certificate</code> must be equal to the 
<code>X509Certificate</code> passed to the <code>match</code> method.
If <code>null</code>, this check is not applied.

@return the <code>X509Certificate</code> to match (or <code>null</code>)
@see #setCertificate"
      end

      operation 7666459 "getSerialNumber"
	public return_type class_ref 775835 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the serialNumber criterion. The specified serial number
must match the certificate serial number in the
<code>X509Certificate</code>. If <code>null</code>, any certificate
serial number will do.

@return the certificate serial number to match
               (or <code>null</code>)
@see #setSerialNumber"
      end

      operation 7666587 "getIssuer"
	public return_type class_ref 845211 // X500Principal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the issuer criterion as an <code>X500Principal</code>. This
distinguished name must match the issuer distinguished name in the
<code>X509Certificate</code>. If <code>null</code>, the issuer criterion
is disabled and any issuer distinguished name will do.

@return the required issuer distinguished name as X500Principal
        (or <code>null</code>)
@since 1.5"
      end

      operation 7666715 "getIssuerAsString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, use {@linkplain #getIssuer()} or 
{@linkplain #getIssuerAsBytes()} instead. This method should not be 
relied on as it can fail to match some certificates because of a loss of 
encoding information in the RFC 2253 String form of some distinguished
names.
<p>
Returns the issuer criterion as a <code>String</code>. This
distinguished name must match the issuer distinguished name in the
<code>X509Certificate</code>. If <code>null</code>, the issuer criterion
is disabled and any issuer distinguished name will do.
<p>
If the value returned is not <code>null</code>, it is a
distinguished name, in RFC 2253 format.

@return the required issuer distinguished name in RFC 2253 format
        (or <code>null</code>)"
      end

      operation 7666843 "getIssuerAsBytes"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the issuer criterion as a byte array. This distinguished name
must match the issuer distinguished name in the
<code>X509Certificate</code>. If <code>null</code>, the issuer criterion
is disabled and any issuer distinguished name will do.
<p>
If the value returned is not <code>null</code>, it is a byte
array containing a single DER encoded distinguished name, as defined in
X.501. The ASN.1 notation for this structure is supplied in the
documentation for
{@link #setIssuer(byte [] issuerDN) setIssuer(byte [] issuerDN)}.
<p>
Note that the byte array returned is cloned to protect against
subsequent modifications.

@return a byte array containing the required issuer distinguished name
        in ASN.1 DER format (or <code>null</code>)
@throws IOException if an encoding error occurs"
      end

      operation 7666971 "getSubject"
	public return_type class_ref 845211 // X500Principal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the subject criterion as an <code>X500Principal</code>. This
distinguished name must match the subject distinguished name in the
<code>X509Certificate</code>. If <code>null</code>, the subject criterion
is disabled and any subject distinguished name will do.

@return the required subject distinguished name as X500Principal
        (or <code>null</code>)
@since 1.5"
      end

      operation 7667099 "getSubjectAsString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, use {@linkplain #getSubject()} or 
{@linkplain #getSubjectAsBytes()} instead. This method should not be 
relied on as it can fail to match some certificates because of a loss of 
encoding information in the RFC 2253 String form of some distinguished
names.
<p>
Returns the subject criterion as a <code>String</code>. This
distinguished name must match the subject distinguished name in the
<code>X509Certificate</code>. If <code>null</code>, the subject criterion
is disabled and any subject distinguished name will do.
<p>
If the value returned is not <code>null</code>, it is a
distinguished name, in RFC 2253 format.

@return the required subject distinguished name in RFC 2253 format
        (or <code>null</code>)"
      end

      operation 7667227 "getSubjectAsBytes"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the subject criterion as a byte array. This distinguished name
must match the subject distinguished name in the
<code>X509Certificate</code>. If <code>null</code>, the subject criterion
is disabled and any subject distinguished name will do.
<p>
If the value returned is not <code>null</code>, it is a byte
array containing a single DER encoded distinguished name, as defined in
X.501. The ASN.1 notation for this structure is supplied in the
documentation for
{@link #setSubject(byte [] subjectDN) setSubject(byte [] subjectDN)}.
<p>
Note that the byte array returned is cloned to protect against
subsequent modifications.

@return a byte array containing the required subject distinguished name
        in ASN.1 DER format (or <code>null</code>)
@throws IOException if an encoding error occurs"
      end

      operation 7667355 "getSubjectKeyIdentifier"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the subjectKeyIdentifier criterion. The
<code>X509Certificate</code> must contain a SubjectKeyIdentifier
extension with the specified value. If <code>null</code>, no
subjectKeyIdentifier check will be done.
<p>
Note that the byte array returned is cloned to protect against
subsequent modifications.

@return the key identifier (or <code>null</code>)
@see #setSubjectKeyIdentifier"
      end

      operation 7667483 "getAuthorityKeyIdentifier"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the authorityKeyIdentifier criterion. The
<code>X509Certificate</code> must contain a AuthorityKeyIdentifier
extension with the specified value. If <code>null</code>, no
authorityKeyIdentifier check will be done.
<p>
Note that the byte array returned is cloned to protect against
subsequent modifications.

@return the key identifier (or <code>null</code>)
@see #setAuthorityKeyIdentifier"
      end

      operation 7667611 "getCertificateValid"
	public return_type class_ref 139163 // Date
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the certificateValid criterion. The specified date must fall
within the certificate validity period for the
<code>X509Certificate</code>. If <code>null</code>, no certificateValid
check will be done.
<p>
Note that the <code>Date</code> returned is cloned to protect against
subsequent modifications.

@return the <code>Date</code> to check (or <code>null</code>)
@see #setCertificateValid"
      end

      operation 7667739 "getPrivateKeyValid"
	public return_type class_ref 139163 // Date
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the privateKeyValid criterion. The specified date must fall
within the private key validity period for the
<code>X509Certificate</code>. If <code>null</code>, no privateKeyValid
check will be done.
<p>
Note that the <code>Date</code> returned is cloned to protect against
subsequent modifications.

@return the <code>Date</code> to check (or <code>null</code>)
@see #setPrivateKeyValid"
      end

      operation 7667867 "getSubjectPublicKeyAlgID"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the subjectPublicKeyAlgID criterion. The
<code>X509Certificate</code> must contain a subject public key
with the specified algorithm. If <code>null</code>, no
subjectPublicKeyAlgID check will be done.

@return the object identifier (OID) of the signature algorithm to check
        for (or <code>null</code>). An OID is represented by a set of
        nonnegative integers separated by periods.
@see #setSubjectPublicKeyAlgID"
      end

      operation 7667995 "getSubjectPublicKey"
	public return_type class_ref 962075 // PublicKey
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the subjectPublicKey criterion. The
<code>X509Certificate</code> must contain the specified subject
public key. If <code>null</code>, no subjectPublicKey check will be done.

@return the subject public key to check for (or <code>null</code>)
@see #setSubjectPublicKey"
      end

      operation 7668123 "getKeyUsage"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the keyUsage criterion. The <code>X509Certificate</code>
must allow the specified keyUsage values. If null, no keyUsage
check will be done.
<p>
Note that the boolean array returned is cloned to protect against
subsequent modifications.

@return a boolean array in the same format as the boolean
                array returned by
{@link X509Certificate#getKeyUsage() X509Certificate.getKeyUsage()}.
                Or <code>null</code>.
@see #setKeyUsage"
      end

      operation 7668251 "getExtendedKeyUsage"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the extendedKeyUsage criterion. The <code>X509Certificate</code>
must allow the specified key purposes in its extended key usage
extension. If the <code>keyPurposeSet</code> returned is empty or
<code>null</code>, no extendedKeyUsage check will be done. Note that an 
<code>X509Certificate</code> that has no extendedKeyUsage extension 
implicitly allows all key purposes.

@return an immutable <code>Set</code> of key purpose OIDs in string
format (or <code>null</code>)
@see #setExtendedKeyUsage"
      end

      operation 7668379 "getMatchAllSubjectAltNames"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if the <code>X509Certificate</code> must contain all
or at least one of the subjectAlternativeNames 
specified in the {@link #setSubjectAlternativeNames
setSubjectAlternativeNames} or {@link #addSubjectAlternativeName
addSubjectAlternativeName} methods. If <code>true</code>, 
the <code>X509Certificate</code> must contain all of the 
specified subject alternative names. If <code>false</code>, the 
<code>X509Certificate</code> must contain at least one of the 
specified subject alternative names.

@return <code>true</code> if the flag is enabled;
<code>false</code> if the flag is disabled. The flag is
<code>true</code> by default.
@see #setMatchAllSubjectAltNames"
      end

      operation 7668507 "getSubjectAlternativeNames"
	public return_type class_ref 135067 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<List<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the subjectAlternativeNames criterion.
The <code>X509Certificate</code> must contain all or at least one
of the specified subjectAlternativeNames, depending on the value
of the matchAllNames flag (see {@link #getMatchAllSubjectAltNames
getMatchAllSubjectAltNames}). If the value returned is 
<code>null</code>, no subjectAlternativeNames check will be performed.
<p>
If the value returned is not <code>null</code>, it is a
<code>Collection</code> with
one entry for each name to be included in the subject alternative name
criterion. Each entry is a <code>List</code> whose first entry is an
<code>Integer</code> (the name type, 0-8) and whose second
entry is a <code>String</code> or a byte array (the name, in
string or ASN.1 DER encoded form, respectively).
There can be multiple names of the same type.  Note that the
<code>Collection</code> returned may contain duplicate names (same name
and name type).
<p>
Each subject alternative name in the <code>Collection</code>
may be specified either as a <code>String</code> or as an ASN.1 encoded
byte array. For more details about the formats used, see
{@link #addSubjectAlternativeName(int type, String name) 
addSubjectAlternativeName(int type, String name)} and
{@link #addSubjectAlternativeName(int type, byte [] name) 
addSubjectAlternativeName(int type, byte [] name)}.
<p>
Note that a deep copy is performed on the <code>Collection</code> to
protect against subsequent modifications.

@return a <code>Collection</code> of names (or <code>null</code>)
@see #setSubjectAlternativeNames"
      end

      operation 7668635 "cloneNames"
	class_operation private return_type class_ref 136731 // Set
	nparams 1
	  param inout name "names" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<List<?>> ${name}${(}${t0}<List<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clone an object of the form passed to
setSubjectAlternativeNames and setPathToNames.
Throw a <code>RuntimeException</code> if the argument is malformed.
<p>
This method wraps cloneAndCheckNames, changing any
<code>IOException</code> into a <code>RuntimeException</code>. This
method should be used when the object being
cloned has already been checked, so there should never be any exceptions.

@param names a <code>Collection</code> with one entry per name.
             Each entry is a <code>List</code> whose first entry
             is an Integer (the name type, 0-8) and whose second
             entry is a String or a byte array (the name, in
             string or ASN.1 DER encoded form, respectively).
             There can be multiple names of the same type. Null
             is not an acceptable value.
@return a deep copy of the specified <code>Collection</code>
@throws RuntimeException if a parsing error occurs"
      end

      operation 7668763 "cloneAndCheckNames"
	class_operation private return_type class_ref 136731 // Set
	nparams 1
	  param inout name "names" type class_ref 135067 // Collection
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<List<?>> ${name}${(}${t0}<List<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clone and check an argument of the form passed to
setSubjectAlternativeNames and setPathToNames.
Throw an <code>IOException</code> if the argument is malformed.

@param names a <code>Collection</code> with one entry per name.
             Each entry is a <code>List</code> whose first entry
             is an Integer (the name type, 0-8) and whose second
             entry is a String or a byte array (the name, in
             string or ASN.1 DER encoded form, respectively).
             There can be multiple names of the same type.
             <code>null</code> is not an acceptable value.
@return a deep copy of the specified <code>Collection</code>
@throws IOException if a parsing error occurs"
      end

      operation 7668891 "getNameConstraints"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name constraints criterion. The <code>X509Certificate</code>
must have subject and subject alternative names that
meet the specified name constraints.
<p>
The name constraints are returned as a byte array. This byte array
contains the DER encoded form of the name constraints, as they
would appear in the NameConstraints structure defined in RFC 2459
and X.509. The ASN.1 notation for this structure is supplied in the
documentation for
{@link #setNameConstraints(byte [] bytes) setNameConstraints(byte [] bytes)}.
<p>
Note that the byte array returned is cloned to protect against
subsequent modifications.

@return a byte array containing the ASN.1 DER encoding of
        a NameConstraints extension used for checking name constraints.
        <code>null</code> if no name constraints check will be performed.
@see #setNameConstraints"
      end

      operation 7669019 "getBasicConstraints"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the basic constraints constraint. If the value is greater than
or equal to zero, the <code>X509Certificates</code> must include a
basicConstraints extension with a pathLen of at least this value.
If the value is -2, only end-entity certificates are accepted. If
the value is -1, no basicConstraints check is done.

@return the value for the basic constraints constraint
@see #setBasicConstraints"
      end

      operation 7669147 "getPolicy"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the policy criterion. The <code>X509Certificate</code> must
include at least one of the specified policies in its certificate policies
extension. If the <code>Set</code> returned is empty, then the 
<code>X509Certificate</code> must include at least some specified policy
in its certificate policies extension. If the <code>Set</code> returned is
<code>null</code>, no policy check will be performed.

@return an immutable <code>Set</code> of certificate policy OIDs in
        string format (or <code>null</code>)
@see #setPolicy"
      end

      operation 7669275 "getPathToNames"
	public return_type class_ref 135067 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<List<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the pathToNames criterion. The
<code>X509Certificate</code> must not include name constraints that would
prohibit building a path to the specified names. If the value
returned is <code>null</code>, no pathToNames check will be performed.
<p>
If the value returned is not <code>null</code>, it is a
<code>Collection</code> with one
entry for each name to be included in the pathToNames
criterion. Each entry is a <code>List</code> whose first entry is an
<code>Integer</code> (the name type, 0-8) and whose second
entry is a <code>String</code> or a byte array (the name, in
string or ASN.1 DER encoded form, respectively).
There can be multiple names of the same type. Note that the
<code>Collection</code> returned may contain duplicate names (same
name and name type).
<p>
Each name in the <code>Collection</code>
may be specified either as a <code>String</code> or as an ASN.1 encoded
byte array. For more details about the formats used, see
{@link #addPathToName(int type, String name) 
addPathToName(int type, String name)} and
{@link #addPathToName(int type, byte [] name) 
addPathToName(int type, byte [] name)}.
<p>
Note that a deep copy is performed on the <code>Collection</code> to
protect against subsequent modifications.

@return a <code>Collection</code> of names (or <code>null</code>)
@see #setPathToNames"
      end

      operation 7669403 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a printable representation of the <code>CertSelector</code>.

@return a <code>String</code> describing the contents of the
        <code>CertSelector</code>"
      end

      operation 7669531 "keyUsageToString"
	class_operation private explicit_return_type "String"
	nparams 1
	  param inout name "k" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Copied from sun.security.x509.KeyUsageExtension
 (without calling the superclass)

Returns a printable representation of the KeyUsage."
      end

      operation 7669659 "getExtensionObject"
	class_operation private explicit_return_type "Extension"
	nparams 2
	  param inout name "cert" type class_ref 974747 // X509Certificate
	  param in name "extId" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an Extension object given any X509Certificate and extension oid.
Throw an <code>IOException</code> if the extension byte value is 
malformed.

@param cert a <code>X509Certificate</code> 
@param extId an <code>integer</code> which specifies the extension index. 
Currently, the supported extensions are as follows:
index 0 - PrivateKeyUsageExtension
index 1 - SubjectAlternativeNameExtension
index 2 - NameConstraintsExtension   
index 3 - CertificatePoliciesExtension
index 4 - ExtendedKeyUsageExtension
@return an <code>Extension</code> object whose real type is as specified
by the extension oid.
@throws IOException if cannot construct the <code>Extension</code> 
object with the extension encoding retrieved from the passed in 
<code>X509Certificate</code>."
      end

      operation 7669787 "match"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "cert" type class_ref 528283 // Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decides whether a <code>Certificate</code> should be selected.

@param cert the <code>Certificate</code> to be checked
@return <code>true</code> if the <code>Certificate</code> should be
        selected, <code>false</code> otherwise"
      end

      operation 7669915 "matchSubjectKeyID"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 974747 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on subject key identifier extension value "
      end

      operation 7670043 "matchAuthorityKeyID"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 974747 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on authority key identifier extension value "
      end

      operation 7670171 "matchPrivateKeyValid"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 974747 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on private key usage range "
      end

      operation 7670299 "matchSubjectPublicKeyAlgID"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 974747 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on subject public key algorithm OID "
      end

      operation 7670427 "matchKeyUsage"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 974747 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on key usage extension value "
      end

      operation 7670555 "matchExtendedKeyUsage"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 974747 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on extended key usage purpose OIDs "
      end

      operation 7670683 "matchSubjectAlternativeNames"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 974747 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on subject alternative name extension names "
      end

      operation 7670811 "matchNameConstraints"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 974747 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on name constraints "
      end

      operation 7670939 "matchPolicy"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 974747 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on policy OIDs "
      end

      operation 7671067 "matchPathToNames"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 974747 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on pathToNames "
      end

      operation 7671195 "matchExcluded"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "excluded" explicit_type "GeneralSubtrees"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7671323 "matchPermitted"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "permitted" explicit_type "GeneralSubtrees"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7671451 "matchBasicConstraints"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 974747 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on basic constraints "
      end

      operation 7671579 "cloneSet"
	class_operation private return_type class_ref 136731 // Set
	nparams 1
	  param inout name "set" type class_ref 136731 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7671707 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this object.

@return the copy"
      end
    end

    class 972059 "TrustAnchor"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A trust anchor or most-trusted Certification Authority (CA).
<p>
This class represents a \"most-trusted CA\", which is used as a trust anchor
for validating X.509 certification paths. A most-trusted CA includes the 
public key of the CA, the CA's name, and any constraints upon the set of 
paths which may be validated using this key. These parameters can be
specified in the form of a trusted <code>X509Certificate</code> or as
individual parameters.
<p>
<b>Concurrent Access</b>
<p>
<p>All <code>TrustAnchor</code> objects must be immutable and
thread-safe. That is, multiple threads may concurrently invoke the
methods defined in this class on a single <code>TrustAnchor</code>
object (or more than one) with no ill effects. Requiring
<code>TrustAnchor</code> objects to be immutable and thread-safe
allows them to be passed around to various pieces of code without
worrying about coordinating access. This stipulation applies to all 
public fields and methods of this class and any added or overridden
by subclasses. 

@see PKIXParameters#PKIXParameters(Set)
@see PKIXBuilderParameters#PKIXBuilderParameters(Set, CertSelector)

@version     1.10 12/19/03
@since       1.4
@author      Sean Mullan"
      extra_member 165147 "initialization"
	
	cpp "" ""
	java "  static {
	CertPathHelperImpl.initialize();
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 1891355 // pubKey (<unidirectional association>)
	relation 1891355 --->
	  a role_name "pubKey" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1891355 // pubKey (<unidirectional association>)
	  b parent class_ref 962075 // PublicKey
      end

      attribute 2858779 "caName"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1891483 // caPrincipal (<unidirectional association>)
	relation 1891483 --->
	  a role_name "caPrincipal" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1891483 // caPrincipal (<unidirectional association>)
	  b parent class_ref 845211 // X500Principal
      end

      classrelation 1891611 // trustedCert (<unidirectional association>)
	relation 1891611 --->
	  a role_name "trustedCert" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1891611 // trustedCert (<unidirectional association>)
	  b parent class_ref 974747 // X509Certificate
      end

      attribute 2858907 "ncBytes"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2859035 "nc"
	private explicit_type "NameConstraintsExtension"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7657243 "TrustAnchor"
	public explicit_return_type ""
	nparams 2
	  param inout name "trustedCert" type class_ref 974747 // X509Certificate
	  param in name "nameConstraints" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of <code>TrustAnchor</code> with the specified
<code>X509Certificate</code> and optional name constraints, which
are intended to be used as additional constraints when validating 
an X.509 certification path.
<p>
The name constraints are specified as a byte array. This byte array
should contain the DER encoded form of the name constraints, as they
would appear in the NameConstraints structure defined in RFC 2459
and X.509. The ASN.1 definition of this structure appears below.

<pre><code>
 NameConstraints ::= SEQUENCE {
      permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
      excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }

 GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree

 GeneralSubtree ::= SEQUENCE {
      base                    GeneralName,
      minimum         [0]     BaseDistance DEFAULT 0,
      maximum         [1]     BaseDistance OPTIONAL }

 BaseDistance ::= INTEGER (0..MAX)

 GeneralName ::= CHOICE {
      otherName                       [0]     OtherName,
      rfc822Name                      [1]     IA5String,
      dNSName                         [2]     IA5String,
      x400Address                     [3]     ORAddress,
      directoryName                   [4]     Name,
      ediPartyName                    [5]     EDIPartyName,
      uniformResourceIdentifier       [6]     IA5String,
      iPAddress                       [7]     OCTET STRING,
      registeredID                    [8]     OBJECT IDENTIFIER}
</code></pre>
<p>
Note that the name constraints byte array supplied is cloned to protect 
against subsequent modifications.

@param trustedCert a trusted <code>X509Certificate</code>
@param nameConstraints a byte array containing the ASN.1 DER encoding of
a NameConstraints extension to be used for checking name constraints. 
Only the value of the extension is included, not the OID or criticality 
flag. Specify <code>null</code> to omit the parameter.
@throws IllegalArgumentException if the name constraints cannot be 
decoded
@throws NullPointerException if the specified 
<code>X509Certificate</code> is <code>null</code>"
      end

      operation 7657371 "TrustAnchor"
	public explicit_return_type ""
	nparams 3
	  param inout name "caPrincipal" type class_ref 845211 // X500Principal
	  param inout name "pubKey" type class_ref 962075 // PublicKey
	  param in name "nameConstraints" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of <code>TrustAnchor</code> where the
most-trusted CA is specified as an X500Principal and public key.
Name constraints are an optional parameter, and are intended to be used
as additional constraints when validating an X.509 certification path.
<p>
The name constraints are specified as a byte array. This byte array
contains the DER encoded form of the name constraints, as they
would appear in the NameConstraints structure defined in RFC 2459
and X.509. The ASN.1 notation for this structure is supplied in the
documentation for
{@link #TrustAnchor(X509Certificate, byte[])
TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) }.
<p>
Note that the name constraints byte array supplied here is cloned to
protect against subsequent modifications.

@param caPrincipal the name of the most-trusted CA as X500Principal
@param pubKey the public key of the most-trusted CA
@param nameConstraints a byte array containing the ASN.1 DER encoding of
a NameConstraints extension to be used for checking name constraints.
Only the value of the extension is included, not the OID or criticality
flag. Specify <code>null</code> to omit the parameter.
@throws NullPointerException if the specified <code>caPrincipal</code> or
<code>pubKey</code> parameter is <code>null</code>
@since 1.5"
      end

      operation 7657499 "TrustAnchor"
	public explicit_return_type ""
	nparams 3
	  param in name "caName" explicit_type "String"
	  param inout name "pubKey" type class_ref 962075 // PublicKey
	  param in name "nameConstraints" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of <code>TrustAnchor</code> where the
most-trusted CA is specified as a distinguished name and public key.
Name constraints are an optional parameter, and are intended to be used 
as additional constraints when validating an X.509 certification path.
<p>
The name constraints are specified as a byte array. This byte array
contains the DER encoded form of the name constraints, as they
would appear in the NameConstraints structure defined in RFC 2459
and X.509. The ASN.1 notation for this structure is supplied in the
documentation for
{@link #TrustAnchor(X509Certificate, byte[]) 
TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) }.
<p>
Note that the name constraints byte array supplied here is cloned to 
protect against subsequent modifications.

@param caName the X.500 distinguished name of the most-trusted CA in
RFC 2253 <code>String</code> format
@param pubKey the public key of the most-trusted CA
@param nameConstraints a byte array containing the ASN.1 DER encoding of
a NameConstraints extension to be used for checking name constraints. 
Only the value of the extension is included, not the OID or criticality 
flag. Specify <code>null</code> to omit the parameter.
@throws IllegalArgumentException if the specified <code>
caName</code> parameter is empty <code>(caName.length() == 0)</code>
or incorrectly formatted or the name constraints cannot be decoded
@throws NullPointerException if the specified <code>caName</code> or
<code>pubKey</code> parameter is <code>null</code>"
      end

      operation 7657627 "getTrustedCert"
	public return_type class_ref 974747 // X509Certificate
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the most-trusted CA certificate.

@return a trusted <code>X509Certificate</code> or <code>null</code> 
if the trust anchor was not specified as a trusted certificate"
      end

      operation 7657755 "getCA"
	public return_type class_ref 845211 // X500Principal
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the most-trusted CA as an X500Principal.

@return the X.500 distinguished name of the most-trusted CA, or
<code>null</code> if the trust anchor was not specified as a trusted
public key and name or X500Principal pair
@since 1.5"
      end

      operation 7657883 "getCAName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the most-trusted CA in RFC 2253 <code>String</code>
format.

@return the X.500 distinguished name of the most-trusted CA, or
<code>null</code> if the trust anchor was not specified as a trusted
public key and name or X500Principal pair"
      end

      operation 7658011 "getCAPublicKey"
	public return_type class_ref 962075 // PublicKey
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the public key of the most-trusted CA.

@return the public key of the most-trusted CA, or <code>null</code>
if the trust anchor was not specified as a trusted public key and name
or X500Principal pair"
      end

      operation 7658139 "setNameConstraints"
	private explicit_return_type "void"
	nparams 1
	  param in name "bytes" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decode the name constraints and clone them if not null."
      end

      operation 7658267 "getNameConstraints"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name constraints parameter. The specified name constraints
are associated with this trust anchor and are intended to be used 
as additional constraints when validating an X.509 certification path. 
<p>
The name constraints are returned as a byte array. This byte array
contains the DER encoded form of the name constraints, as they
would appear in the NameConstraints structure defined in RFC 2459
and X.509. The ASN.1 notation for this structure is supplied in the
documentation for
{@link #TrustAnchor(X509Certificate, byte[]) 
TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) }.
<p>
Note that the byte array returned is cloned to protect against
subsequent modifications.

@return a byte array containing the ASN.1 DER encoding of
        a NameConstraints extension used for checking name constraints, 
        or <code>null</code> if not set. "
      end

      operation 7658395 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string describing the <code>TrustAnchor</code>.

@return a formatted string describing the <code>TrustAnchor</code>"
      end
    end

    class 972187 "X509CRLSelector"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>CRLSelector</code> that selects <code>X509CRLs</code> that
match all specified criteria. This class is particularly useful when
selecting CRLs from a <code>CertStore</code> to check revocation status
of a particular certificate.
<p>
When first constructed, an <code>X509CRLSelector</code> has no criteria
enabled and each of the <code>get</code> methods return a default
value (<code>null</code>). Therefore, the {@link #match match} method 
would return <code>true</code> for any <code>X509CRL</code>. Typically, 
several criteria are enabled (by calling {@link #setIssuers setIssuers} 
or {@link #setDateAndTime setDateAndTime}, for instance) and then the
<code>X509CRLSelector</code> is passed to
{@link CertStore#getCRLs CertStore.getCRLs} or some similar
method.
<p>
Please refer to RFC 2459 for definitions of the X.509 CRL fields and
extensions mentioned below.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CRLSelector
@see X509CRL

@version 	1.16 07/16/04
@since	1.4
@author	Steve Hanna"
      classrelation 1894811 // <realization>
	relation 1894811 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1894811 // <realization>
	  b parent class_ref 973467 // CRLSelector
      end

      extra_member 165531 "initialization"
	
	cpp "" ""
	java "  static {
	CertPathHelperImpl.initialize();
    }"
	php ""
	python ""
	idl ""
      end

      attribute 2862875 "debug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value "=  Debug.getInstance(\"certpath\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1894939 // issuerNames (<unidirectional association>)
	relation 1894939 --->
	  a role_name "issuerNames" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 1894939 // issuerNames (<unidirectional association>)
	  b parent class_ref 149659 // HashSet
      end

      classrelation 1895067 // issuerX500Principals (<unidirectional association>)
	relation 1895067 --->
	  a role_name "issuerX500Principals" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<X500Principal> ${name}${value};
"
	    classrelation_ref 1895067 // issuerX500Principals (<unidirectional association>)
	  b parent class_ref 149659 // HashSet
      end

      classrelation 1895195 // minCRL (<unidirectional association>)
	relation 1895195 --->
	  a role_name "minCRL" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1895195 // minCRL (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      classrelation 1895323 // maxCRL (<unidirectional association>)
	relation 1895323 --->
	  a role_name "maxCRL" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1895323 // maxCRL (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      classrelation 1895451 // dateAndTime (<unidirectional association>)
	relation 1895451 --->
	  a role_name "dateAndTime" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1895451 // dateAndTime (<unidirectional association>)
	  b parent class_ref 139163 // Date
      end

      classrelation 1895579 // certChecking (<unidirectional association>)
	relation 1895579 --->
	  a role_name "certChecking" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1895579 // certChecking (<unidirectional association>)
	  b parent class_ref 974747 // X509Certificate
      end

      operation 7675291 "X509CRLSelector"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an <code>X509CRLSelector</code>. Initially, no criteria are set
so any <code>X509CRL</code> will match."
      end

      operation 7675419 "setIssuers"
	public explicit_return_type "void"
	nparams 1
	  param inout name "issuers" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<X500Principal> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the issuerNames criterion. The issuer distinguished name in the
<code>X509CRL</code> must match at least one of the specified
distinguished names. If <code>null</code>, any issuer distinguished name
will do.
<p>
This method allows the caller to specify, with a single method call,
the complete set of issuer names which <code>X509CRLs</code> may contain.
The specified value replaces the previous value for the issuerNames
criterion.
<p>
The <code>names</code> parameter (if not <code>null</code>) is a
<code>Collection</code> of <code>X500Principal</code>s.
<p>
Note that the <code>names</code> parameter can contain duplicate
distinguished names, but they may be removed from the 
<code>Collection</code> of names returned by the
{@link #getIssuers getIssuers} method.
<p>
Note that a copy is performed on the <code>Collection</code> to
protect against subsequent modifications.

@param issuers a <code>Collection</code> of X500Principals 
  (or <code>null</code>)
@see #getIssuers
@since 1.5"
      end

      operation 7675547 "setIssuerNames"
	public explicit_return_type "void"
	nparams 1
	  param inout name "names" type class_ref 135067 // Collection
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Note:</strong> use {@linkplain #setIssuers(Collection)} instead
or only specify the byte array form of distinguished names when using
this method. See {@link #addIssuerName(String)} for more information.
<p>
Sets the issuerNames criterion. The issuer distinguished name in the
<code>X509CRL</code> must match at least one of the specified
distinguished names. If <code>null</code>, any issuer distinguished name
will do.
<p>
This method allows the caller to specify, with a single method call,
the complete set of issuer names which <code>X509CRLs</code> may contain.
The specified value replaces the previous value for the issuerNames
criterion.
<p>
The <code>names</code> parameter (if not <code>null</code>) is a
<code>Collection</code> of names. Each name is a <code>String</code>
or a byte array representing a distinguished name (in RFC 2253 or
ASN.1 DER encoded form, respectively). If <code>null</code> is supplied
as the value for this argument, no issuerNames check will be performed.
<p>
Note that the <code>names</code> parameter can contain duplicate
distinguished names, but they may be removed from the 
<code>Collection</code> of names returned by the
{@link #getIssuerNames getIssuerNames} method.
<p>
If a name is specified as a byte array, it should contain a single DER
encoded distinguished name, as defined in X.501. The ASN.1 notation for
this structure is as follows.
<pre><code>
Name ::= CHOICE {
  RDNSequence }

RDNSequence ::= SEQUENCE OF RelativeDistinguishedName

RelativeDistinguishedName ::=
  SET SIZE (1 .. MAX) OF AttributeTypeAndValue

AttributeTypeAndValue ::= SEQUENCE {
  type     AttributeType,
  value    AttributeValue }

AttributeType ::= OBJECT IDENTIFIER

AttributeValue ::= ANY DEFINED BY AttributeType
....
DirectoryString ::= CHOICE {
      teletexString           TeletexString (SIZE (1..MAX)),
      printableString         PrintableString (SIZE (1..MAX)),
      universalString         UniversalString (SIZE (1..MAX)),
      utf8String              UTF8String (SIZE (1.. MAX)),
      bmpString               BMPString (SIZE (1..MAX)) }
</code></pre>
<p>
Note that a deep copy is performed on the <code>Collection</code> to
protect against subsequent modifications.

@param names a <code>Collection</code> of names (or <code>null</code>)
@throws IOException if a parsing error occurs
@see #getIssuerNames"
      end

      operation 7675675 "addIssuer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "issuer" type class_ref 845211 // X500Principal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a name to the issuerNames criterion. The issuer distinguished
name in the <code>X509CRL</code> must match at least one of the specified
distinguished names.
<p>
This method allows the caller to add a name to the set of issuer names
which <code>X509CRLs</code> may contain. The specified name is added to
any previous value for the issuerNames criterion.
If the specified name is a duplicate, it may be ignored.

@param issuer the issuer as X500Principal
@since 1.5"
      end

      operation 7675803 "addIssuerName"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, use 
{@linkplain #addIssuer(X500Principal)} or 
{@linkplain #addIssuerName(byte[])} instead. This method should not be 
relied on as it can fail to match some CRLs because of a loss of 
encoding information in the RFC 2253 String form of some distinguished 
names.
<p>
Adds a name to the issuerNames criterion. The issuer distinguished
name in the <code>X509CRL</code> must match at least one of the specified
distinguished names.
<p>
This method allows the caller to add a name to the set of issuer names
which <code>X509CRLs</code> may contain. The specified name is added to
any previous value for the issuerNames criterion.
If the specified name is a duplicate, it may be ignored.

@param name the name in RFC 2253 form
@throws IOException if a parsing error occurs"
      end

      operation 7675931 "addIssuerName"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a name to the issuerNames criterion. The issuer distinguished
name in the <code>X509CRL</code> must match at least one of the specified
distinguished names.
<p>
This method allows the caller to add a name to the set of issuer names
which <code>X509CRLs</code> may contain. The specified name is added to
any previous value for the issuerNames criterion. If the specified name
is a duplicate, it may be ignored.
If a name is specified as a byte array, it should contain a single DER
encoded distinguished name, as defined in X.501. The ASN.1 notation for
this structure is as follows.
<p>
The name is provided as a byte array. This byte array should contain
a single DER encoded distinguished name, as defined in X.501. The ASN.1
notation for this structure appears in the documentation for
{@link #setIssuerNames setIssuerNames(Collection names)}.
<p>
Note that the byte array supplied here is cloned to protect against
subsequent modifications.

@param name a byte array containing the name in ASN.1 DER encoded form
@throws IOException if a parsing error occurs"
      end

      operation 7676059 "addIssuerNameInternal"
	private explicit_return_type "void"
	nparams 2
	  param inout name "name" explicit_type "Object"
	  param inout name "principal" type class_ref 845211 // X500Principal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A private method that adds a name (String or byte array) to the
issuerNames criterion. The issuer distinguished
name in the <code>X509CRL</code> must match at least one of the specified
distinguished names.

@param name the name in string or byte array form
@param principal the name in X500Principal form
@throws IOException if a parsing error occurs"
      end

      operation 7676187 "cloneAndCheckIssuerNames"
	class_operation private return_type class_ref 149659 // HashSet
	nparams 1
	  param inout name "names" type class_ref 135067 // Collection
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clone and check an argument of the form passed to
setIssuerNames. Throw an IOException if the argument is malformed.

@param names a <code>Collection</code> of names. Each entry is a
             String or a byte array (the name, in string or ASN.1
             DER encoded form, respectively). <code>null</code> is
             not an acceptable value.
@return a deep copy of the specified <code>Collection</code>
@throws IOException if a parsing error occurs"
      end

      operation 7676315 "cloneIssuerNames"
	class_operation private return_type class_ref 149659 // HashSet
	nparams 1
	  param inout name "names" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${t0}<Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clone an argument of the form passed to setIssuerNames.
Throw a RuntimeException if the argument is malformed.
<p>
This method wraps cloneAndCheckIssuerNames, changing any IOException 
into a RuntimeException. This method should be used when the object being
cloned has already been checked, so there should never be any exceptions.

@param names a <code>Collection</code> of names. Each entry is a
             String or a byte array (the name, in string or ASN.1
             DER encoded form, respectively). <code>null</code> is
             not an acceptable value.
@return a deep copy of the specified <code>Collection</code>
@throws RuntimeException if a parsing error occurs"
      end

      operation 7676443 "parseIssuerNames"
	class_operation private return_type class_ref 149659 // HashSet
	nparams 1
	  param inout name "names" type class_ref 135067 // Collection
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<X500Principal> ${name}${(}${t0}<Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse an argument of the form passed to setIssuerNames,
returning a Collection of issuerX500Principals.
Throw an IOException if the argument is malformed.

@param names a <code>Collection</code> of names. Each entry is a
             String or a byte array (the name, in string or ASN.1
             DER encoded form, respectively). <Code>Null</Code> is
             not an acceptable value.
@return a HashSet of issuerX500Principals
@throws IOException if a parsing error occurs"
      end

      operation 7676571 "setMinCRLNumber"
	public explicit_return_type "void"
	nparams 1
	  param inout name "minCRL" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the minCRLNumber criterion. The <code>X509CRL</code> must have a
CRL number extension whose value is greater than or equal to the
specified value. If <code>null</code>, no minCRLNumber check will be 
done.

@param minCRL the minimum CRL number accepted (or <code>null</code>)"
      end

      operation 7676699 "setMaxCRLNumber"
	public explicit_return_type "void"
	nparams 1
	  param inout name "maxCRL" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maxCRLNumber criterion. The <code>X509CRL</code> must have a
CRL number extension whose value is less than or equal to the
specified value. If <code>null</code>, no maxCRLNumber check will be 
done.

@param maxCRL the maximum CRL number accepted (or <code>null</code>)"
      end

      operation 7676827 "setDateAndTime"
	public explicit_return_type "void"
	nparams 1
	  param inout name "dateAndTime" type class_ref 139163 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the dateAndTime criterion. The specified date must be
equal to or later than the value of the thisUpdate component
of the <code>X509CRL</code> and earlier than the value of the
nextUpdate component. There is no match if the <code>X509CRL</code>
does not contain a nextUpdate component.
If <code>null</code>, no dateAndTime check will be done.
<p>
Note that the <code>Date</code> supplied here is cloned to protect 
against subsequent modifications.

@param dateAndTime the <code>Date</code> to match against
                   (or <code>null</code>)
@see #getDateAndTime"
      end

      operation 7676955 "setCertificateChecking"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cert" type class_ref 974747 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the certificate being checked. This is not a criterion. Rather,
it is optional information that may help a <code>CertStore</code>
find CRLs that would be relevant when checking revocation for the
specified certificate. If <code>null</code> is specified, then no
such optional information is provided.

@param cert the <code>X509Certificate</code> being checked
            (or <code>null</code>)
@see #getCertificateChecking"
      end

      operation 7677083 "getIssuers"
	public return_type class_ref 135067 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<X500Principal> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the issuerNames criterion. The issuer distinguished
name in the <code>X509CRL</code> must match at least one of the specified
distinguished names. If the value returned is <code>null</code>, any
issuer distinguished name will do.
<p>
If the value returned is not <code>null</code>, it is a
unmodifiable <code>Collection</code> of <code>X500Principal</code>s.

@return an unmodifiable <code>Collection</code> of names 
  (or <code>null</code>)
@see #setIssuers
@since 1.5"
      end

      operation 7677211 "getIssuerNames"
	public return_type class_ref 135067 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the issuerNames criterion. The issuer distinguished
name in the <code>X509CRL</code> must match at least one of the specified
distinguished names. If the value returned is <code>null</code>, any
issuer distinguished name will do.
<p>
If the value returned is not <code>null</code>, it is a
<code>Collection</code> of names. Each name is a <code>String</code>
or a byte array representing a distinguished name (in RFC 2253 or
ASN.1 DER encoded form, respectively).  Note that the 
<code>Collection</code> returned may contain duplicate names.
<p>
If a name is specified as a byte array, it should contain a single DER
encoded distinguished name, as defined in X.501. The ASN.1 notation for
this structure is given in the documentation for
{@link #setIssuerNames setIssuerNames(Collection names)}.
<p>
Note that a deep copy is performed on the <code>Collection</code> to
protect against subsequent modifications.

@return a <code>Collection</code> of names (or <code>null</code>)
@see #setIssuerNames"
      end

      operation 7677339 "getMinCRL"
	public return_type class_ref 775835 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minCRLNumber criterion. The <code>X509CRL</code> must have a
CRL number extension whose value is greater than or equal to the
specified value. If <code>null</code>, no minCRLNumber check will be done.

@return the minimum CRL number accepted (or <code>null</code>)"
      end

      operation 7677467 "getMaxCRL"
	public return_type class_ref 775835 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maxCRLNumber criterion. The <code>X509CRL</code> must have a
CRL number extension whose value is less than or equal to the
specified value. If <code>null</code>, no maxCRLNumber check will be 
done.

@return the maximum CRL number accepted (or <code>null</code>)"
      end

      operation 7677595 "getDateAndTime"
	public return_type class_ref 139163 // Date
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the dateAndTime criterion. The specified date must be
equal to or later than the value of the thisUpdate component
of the <code>X509CRL</code> and earlier than the value of the
nextUpdate component. There is no match if the
<code>X509CRL</code> does not contain a nextUpdate component.
If <code>null</code>, no dateAndTime check will be done.
<p>
Note that the <code>Date</code> returned is cloned to protect against
subsequent modifications.

@return the <code>Date</code> to match against (or <code>null</code>)
@see #setDateAndTime"
      end

      operation 7677723 "getCertificateChecking"
	public return_type class_ref 974747 // X509Certificate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the certificate being checked. This is not a criterion. Rather,
it is optional information that may help a <code>CertStore</code>
find CRLs that would be relevant when checking revocation for the
specified certificate. If the value returned is <code>null</code>, then 
no such optional information is provided.

@return the certificate being checked (or <code>null</code>)
@see #setCertificateChecking"
      end

      operation 7677851 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a printable representation of the <code>X509CRLSelector</code>.

@return a <code>String</code> describing the contents of the
        <code>X509CRLSelector</code>."
      end

      operation 7677979 "match"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "crl" type class_ref 970395 // CRL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decides whether a <code>CRL</code> should be selected.

@param crl the <code>CRL</code> to be checked
@return <code>true</code> if the <code>CRL</code> should be selected,
        <code>false</code> otherwise"
      end

      operation 7678107 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this object.

@return the copy"
      end
    end

    class 972315 "CertPathValidator"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class for validating certification paths (also known as certificate 
chains).
<p>
This class uses a provider-based architecture, as described in the Java 
Cryptography Architecture. To create a <code>CertPathValidator</code>, 
call one of the static <code>getInstance</code> methods, passing in the 
algorithm name of the <code>CertPathValidator</code> desired and 
optionally the name of the provider desired. 
<p>
Once a <code>CertPathValidator</code> object has been created, it can
be used to validate certification paths by calling the {@link #validate
validate} method and passing it the <code>CertPath</code> to be validated
and an algorithm-specific set of parameters. If successful, the result is
returned in an object that implements the 
<code>CertPathValidatorResult</code> interface.
<p>
<b>Concurrent Access</b>
<p>
The static methods of this class are guaranteed to be thread-safe.
Multiple threads may concurrently invoke the static methods defined in
this class with no ill effects.
<p>
However, this is not true for the non-static methods defined by this class.
Unless otherwise documented by a specific provider, threads that need to
access a single <code>CertPathValidator</code> instance concurrently should
synchronize amongst themselves and provide the necessary locking. Multiple
threads each manipulating a different <code>CertPathValidator</code>
instance need not synchronize.

@see CertPath

@version 	1.9 06/28/04
@since	1.4
@author	Yassir Elley"
      attribute 2855707 "CPV_TYPE"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"certpathvalidator.type\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant to lookup in the Security properties file to determine
the default certpathvalidator type. In the Security properties file, 
the default certpathvalidator type is given as:
<pre>
certpathvalidator.type=PKIX
</pre>
"
      end

      attribute 2855835 "debug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value "=  Debug.getInstance(\"certpath\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1887259 // validatorSpi (<unidirectional association>)
	relation 1887259 --->
	  a role_name "validatorSpi" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1887259 // validatorSpi (<unidirectional association>)
	  b parent class_ref 972443 // CertPathValidatorSpi
      end

      classrelation 1887387 // provider (<unidirectional association>)
	relation 1887387 --->
	  a role_name "provider" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1887387 // provider (<unidirectional association>)
	  b parent class_ref 959643 // Provider
      end

      attribute 2855963 "algorithm"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7641499 "CertPathValidator"
	protected explicit_return_type ""
	nparams 3
	  param inout name "validatorSpi" type class_ref 972443 // CertPathValidatorSpi
	  param inout name "provider" type class_ref 959643 // Provider
	  param in name "algorithm" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertPathValidator</code> object of the given algorithm, 
and encapsulates the given provider implementation (SPI object) in it.

@param validatorSpi the provider implementation
@param provider the provider
@param algorithm the algorithm name"
      end

      operation 7641627 "getInstance"
	class_operation public return_type class_ref 972315 // CertPathValidator
	nparams 1
	  param in name "algorithm" explicit_type "String"
	nexceptions 1
	  exception class_ref 959899 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>CertPathValidator</code> object that implements the 
specified algorithm.

<p> If the default provider package provides an implementation of the
specified <code>CertPathValidator</code> algorithm, an instance of 
<code>CertPathValidator</code> containing that implementation is 
returned. If the requested algorithm is not available in the default 
package, other packages are searched.

@param algorithm the name of the requested <code>CertPathValidator</code>
algorithm
@return a <code>CertPathValidator</code> object that implements the
specified algorithm
@exception NoSuchAlgorithmException if the requested algorithm
is not available in the default provider package or any of the other
provider packages that were searched"
      end

      operation 7641755 "getInstance"
	class_operation public return_type class_ref 972315 // CertPathValidator
	nparams 2
	  param in name "algorithm" explicit_type "String"
	  param in name "provider" explicit_type "String"
	nexceptions 2
	  exception class_ref 959899 // NoSuchAlgorithmException
	  exception class_ref 960027 // NoSuchProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>CertPathValidator</code> object that implements the
specified algorithm, as supplied by the specified provider.

@param algorithm the name of the requested <code>CertPathValidator</code>
algorithm
@param provider the name of the provider
@return a <code>CertPathValidator</code> object that implements the
specified algorithm, as supplied by the specified provider
@exception NoSuchAlgorithmException if the requested algorithm
is not available from the specified provider
@exception NoSuchProviderException if the provider has not been
configured
@exception IllegalArgumentException if the <code>provider</code> is
null"
      end

      operation 7641883 "getInstance"
	class_operation public return_type class_ref 972315 // CertPathValidator
	nparams 2
	  param in name "algorithm" explicit_type "String"
	  param inout name "provider" type class_ref 959643 // Provider
	nexceptions 1
	  exception class_ref 959899 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>CertPathValidator</code> object that implements the
specified algorithm, as supplied by the specified provider.
Note: the <code>provider</code> doesn't have to be registered.

@param algorithm the name of the requested 
<code>CertPathValidator</code> algorithm
@param provider the provider
@return a <code>CertPathValidator</code> object that implements the
specified algorithm, as supplied by the specified provider
@exception NoSuchAlgorithmException if the requested algorithm
is not available from the specified provider
@exception IllegalArgumentException if the <code>provider</code> is
null"
      end

      operation 7642011 "getProvider"
	public return_type class_ref 959643 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Provider</code> of this
<code>CertPathValidator</code>.

@return the <code>Provider</code> of this <code>CertPathValidator</code>"
      end

      operation 7642139 "getAlgorithm"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the algorithm name of this <code>CertPathValidator</code>.

@return the algorithm name of this <code>CertPathValidator</code>"
      end

      operation 7642267 "validate"
	public return_type class_ref 972571 // CertPathValidatorResult
	nparams 2
	  param inout name "certPath" type class_ref 845339 // CertPath
	  param inout name "params" type class_ref 971419 // CertPathParameters
	nexceptions 2
	  exception class_ref 972699 // CertPathValidatorException
	  exception class_ref 960411 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates the specified certification path using the specified 
algorithm parameter set. 
<p>
The <code>CertPath</code> specified must be of a type that is 
supported by the validation algorithm, otherwise an
<code>InvalidAlgorithmParameterException</code> will be thrown. For 
example, a <code>CertPathValidator</code> that implements the PKIX
algorithm validates <code>CertPath</code> objects of type X.509.

@param certPath the <code>CertPath</code> to be validated
@param params the algorithm parameters
@return the result of the validation algorithm
@exception CertPathValidatorException if the <code>CertPath</code>
does not validate
@exception InvalidAlgorithmParameterException if the specified 
parameters or the type of the specified <code>CertPath</code> are 
inappropriate for this <code>CertPathValidator</code>"
      end

      operation 7642395 "getDefaultType"
	class_operation public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default <code>CertPathValidator</code> type as specified in 
the Java security properties file, or the string &quot;PKIX&quot;
if no such property exists. The Java security properties file is 
located in the file named &lt;JAVA_HOME&gt;/lib/security/java.security, 
where &lt;JAVA_HOME&gt; refers to the directory where the JDK was 
installed.

<p>The default <code>CertPathValidator</code> type can be used by 
applications that do not want to use a hard-coded type when calling one 
of the <code>getInstance</code> methods, and want to provide a default 
type in case a user does not specify its own.

<p>The default <code>CertPathValidator</code> type can be changed by 
setting the value of the \"certpathvalidator.type\" security property 
(in the Java security properties file) to the desired type.

@return the default <code>CertPathValidator</code> type as specified 
in the Java security properties file, or the string &quot;PKIX&quot;
if no such property exists."
      end
    end

    class 972443 "CertPathValidatorSpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
The <i>Service Provider Interface</i> (<b>SPI</b>) 
for the {@link CertPathValidator CertPathValidator} class. All 
<code>CertPathValidator</code> implementations must include a class (the
SPI class) that extends this class (<code>CertPathValidatorSpi</code>) 
and implements all of its methods. In general, instances of this class 
should only be accessed through the <code>CertPathValidator</code> class. 
For details, see the Java Cryptography Architecture.
<p>
<b>Concurrent Access</b>
<p>
Instances of this class need not be protected against concurrent
access from multiple threads. Threads that need to access a single
<code>CertPathValidatorSpi</code> instance concurrently should synchronize
amongst themselves and provide the necessary locking before calling the
wrapping <code>CertPathValidator</code> object.
<p>
However, implementations of <code>CertPathValidatorSpi</code> may still
encounter concurrency issues, since multiple threads each
manipulating a different <code>CertPathValidatorSpi</code> instance need not
synchronize.

@version 	1.5 12/19/03
@since	1.4
@author	Yassir Elley"
      operation 7643547 "CertPathValidatorSpi"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default constructor."
      end

      operation 7643675 "engineValidate"
	abstract public return_type class_ref 972571 // CertPathValidatorResult
	nparams 2
	  param inout name "certPath" type class_ref 845339 // CertPath
	  param inout name "params" type class_ref 971419 // CertPathParameters
	nexceptions 2
	  exception class_ref 972699 // CertPathValidatorException
	  exception class_ref 960411 // InvalidAlgorithmParameterException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates the specified certification path using the specified 
algorithm parameter set.
<p>
The <code>CertPath</code> specified must be of a type that is 
supported by the validation algorithm, otherwise an 
<code>InvalidAlgorithmParameterException</code> will be thrown. For 
example, a <code>CertPathValidator</code> that implements the PKIX 
algorithm validates <code>CertPath</code> objects of type X.509.

@param certPath the <code>CertPath</code> to be validated
@param params the algorithm parameters
@return the result of the validation algorithm
@exception CertPathValidatorException if the <code>CertPath</code> 
does not validate
@exception InvalidAlgorithmParameterException if the specified 
parameters or the type of the specified <code>CertPath</code> are 
inappropriate for this <code>CertPathValidator</code>"
      end
    end

    class 972571 "CertPathValidatorResult"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specification of the result of a certification path validator algorithm.
<p>
The purpose of this interface is to group (and provide type safety 
for) all certification path validator results. All results returned 
by the {@link CertPathValidator#validate CertPathValidator.validate}
method must implement this interface.  

@see CertPathValidator

@version 	1.5 12/19/03
@since	1.4
@author	Yassir Elley"
      classrelation 1887771 // <generalisation>
	relation 1887771 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1887771 // <generalisation>
	  b parent class_ref 339867 // Cloneable
      end

      operation 7643419 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of this <code>CertPathValidatorResult</code>. Changes to the
copy will not affect the original and vice versa.

@return a copy of this <code>CertPathValidatorResult</code>"
      end
    end

    class 972699 "CertPathValidatorException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception indicating one of a variety of problems encountered when 
validating a certification path. 
<p>
A <code>CertPathValidatorException</code> provides support for wrapping
exceptions. The {@link #getCause getCause} method returns the throwable, 
if any, that caused this exception to be thrown. 
<p>
A <code>CertPathValidatorException</code> may also include the 
certification path that was being validated when the exception was thrown 
and the index of the certificate in the certification path that caused the 
exception to be thrown. Use the {@link #getCertPath getCertPath} and
{@link #getIndex getIndex} methods to retrieve this information.

<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertPathValidator

@version 	1.10 12/19/03
@since	1.4
@author 	Yassir Elley"
      classrelation 1887515 // <generalisation>
	relation 1887515 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1887515 // <generalisation>
	  b parent class_ref 842139 // GeneralSecurityException
      end

      attribute 2856091 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -3083180014971893139L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2856219 "index"
	private explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial the index of the certificate in the certification path  
that caused the exception to be thrown
"
      end

      classrelation 1887643 // certPath (<unidirectional association>)
	relation 1887643 --->
	  a role_name "certPath" private
	    comment "
@serial the <code>CertPath</code> that was being validated when 
the exception was thrown

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1887643 // certPath (<unidirectional association>)
	  b parent class_ref 845339 // CertPath
      end

      operation 7642523 "CertPathValidatorException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertPathValidatorException</code> with 
no detail message. "
      end

      operation 7642651 "CertPathValidatorException"
	public explicit_return_type ""
	nparams 1
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertPathValidatorException</code> with the given
detail message. A detail message is a <code>String</code> that 
describes this particular exception.

@param msg the detail message"
      end

      operation 7642779 "CertPathValidatorException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertPathValidatorException</code> that wraps the 
specified throwable. This allows any exception to be converted into a 
<code>CertPathValidatorException</code>, while retaining information 
about the wrapped exception, which may be useful for debugging. The 
detail message is set to (<code>cause==null ? null : cause.toString()
</code>) (which typically contains the class and detail message of 
cause).

@param cause the cause (which is saved for later retrieval by the 
{@link #getCause getCause()} method). (A <code>null</code> value is 
permitted, and indicates that the cause is nonexistent or unknown.)"
      end

      operation 7642907 "CertPathValidatorException"
	public explicit_return_type ""
	nparams 2
	  param in name "msg" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertPathValidatorException</code> with the specified
detail message and cause.

@param msg the detail message 
@param cause the cause (which is saved for later retrieval by the 
{@link #getCause getCause()} method). (A <code>null</code> value is 
permitted, and indicates that the cause is nonexistent or unknown.)"
      end

      operation 7643035 "CertPathValidatorException"
	public explicit_return_type ""
	nparams 4
	  param in name "msg" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	  param inout name "certPath" type class_ref 845339 // CertPath
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertPathValidatorException</code> with the specified
detail message, cause, certification path, and index.

@param msg the detail message (or <code>null</code> if none)
@param cause the cause (or <code>null</code> if none)
@param certPath the certification path that was in the process of
being validated when the error was encountered
@param index the index of the certificate in the certification path
that caused the error (or -1 if not applicable). Note that 
the list of certificates in a <code>CertPath</code> is zero based.
@throws IndexOutofBoundsException if the index is out of range
<code>(index < -1 || (certPath != null && index >=
certPath.getCertificates().size())</code>
@throws IllegalArgumentException if <code>certPath</code> is 
<code>null</code> and <code>index</code> is not -1"
      end

      operation 7643163 "getCertPath"
	public return_type class_ref 845339 // CertPath
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the certification path that was being validated when
the exception was thrown.

@return the <code>CertPath</code> that was being validated when
the exception was thrown (or <code>null</code> if not specified)"
      end

      operation 7643291 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the certificate in the certification path 
that caused the exception to be thrown. Note that the list of
certificates in a <code>CertPath</code> is zero based. If no 
index has been set, -1 is returned.

@return the index that has been set, or -1 if none has been set"
      end
    end

    class 972827 "CertSelector"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A selector that defines a set of criteria for selecting
<code>Certificate</code>s. Classes that implement this interface
are often used to specify which <code>Certificate</code>s should
be retrieved from a <code>CertStore</code>.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this interface are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see Certificate
@see CertStore
@see CertStore#getCertificates

@version 	1.5 12/19/03
@author	Steve Hanna
@since	1.4"
      classrelation 1887899 // <generalisation>
	relation 1887899 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1887899 // <generalisation>
	  b parent class_ref 339867 // Cloneable
      end

      operation 7643803 "match"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "cert" type class_ref 528283 // Certificate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decides whether a <code>Certificate</code> should be selected.

@param	cert	the <code>Certificate</code> to be checked
@return	<code>true</code> if the <code>Certificate</code> 
should be selected, <code>false</code> otherwise"
      end

      operation 7643931 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of this <code>CertSelector</code>. Changes to the 
copy will not affect the original and vice versa.

@return a copy of this <code>CertSelector</code>"
      end
    end

    class 972955 "CertStore"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class for retrieving <code>Certificate</code>s and <code>CRL</code>s
from a repository.
<p>
This class uses a provider-based architecture, as described in the
Java Cryptography Architecture.
To create a <code>CertStore</code>, call one of the static
<code>getInstance</code> methods, passing in the type of
<code>CertStore</code> desired, any applicable initialization parameters 
and optionally the name of the provider desired. 
<p>
Once the <code>CertStore</code> has been created, it can be used to 
retrieve <code>Certificate</code>s and <code>CRL</code>s by calling its
{@link #getCertificates(CertSelector selector) getCertificates} and
{@link #getCRLs(CRLSelector selector) getCRLs} methods.
<p>
Unlike a {@link java.security.KeyStore KeyStore}, which provides access
to a cache of private keys and trusted certificates, a 
<code>CertStore</code> is designed to provide access to a potentially
vast repository of untrusted certificates and CRLs. For example, an LDAP 
implementation of <code>CertStore</code> provides access to certificates
and CRLs stored in one or more directories using the LDAP protocol and the
schema as defined in the RFC service attribute. See Appendix A in the
<a href= \"../../../../guide/security/certpath/CertPathProgGuide.html#AppA\"> 
Java Certification Path API Programmer's Guide</a> for more information about
standard <code>CertStore</code> types.
<p>
<b>Concurrent Access</b>
<p>
All public methods of <code>CertStore</code> objects must be thread-safe. 
That is, multiple threads may concurrently invoke these methods on a
single <code>CertStore</code> object (or more than one) with no
ill effects. This allows a <code>CertPathBuilder</code> to search for a
CRL while simultaneously searching for further certificates, for instance.
<p>
The static methods of this class are also guaranteed to be thread-safe.
Multiple threads may concurrently invoke the static methods defined in
this class with no ill effects.

@version 	1.13 06/28/04
@since	1.4
@author	Sean Mullan, Steve Hanna"
      attribute 2856347 "CERTSTORE_TYPE"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"certstore.type\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant to lookup in the Security properties file to determine
the default certstore type. In the Security properties file, the 
default certstore type is given as:
<pre>
certstore.type=LDAP
</pre>
"
      end

      classrelation 1888027 // storeSpi (<unidirectional association>)
	relation 1888027 --->
	  a role_name "storeSpi" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1888027 // storeSpi (<unidirectional association>)
	  b parent class_ref 973083 // CertStoreSpi
      end

      classrelation 1888155 // provider (<unidirectional association>)
	relation 1888155 --->
	  a role_name "provider" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1888155 // provider (<unidirectional association>)
	  b parent class_ref 959643 // Provider
      end

      attribute 2856475 "type"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1888283 // params (<unidirectional association>)
	relation 1888283 --->
	  a role_name "params" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1888283 // params (<unidirectional association>)
	  b parent class_ref 973211 // CertStoreParameters
      end

      operation 7644059 "CertStore"
	protected explicit_return_type ""
	nparams 4
	  param inout name "storeSpi" type class_ref 973083 // CertStoreSpi
	  param inout name "provider" type class_ref 959643 // Provider
	  param in name "type" explicit_type "String"
	  param inout name "params" type class_ref 973211 // CertStoreParameters
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertStore</code> object of the given type, and
encapsulates the given provider implementation (SPI object) in it.

@param storeSpi the provider implementation
@param provider the provider
@param type the type
@param params the initialization parameters (may be <code>null</code>)"
      end

      operation 7644187 "getCertificates"
	public return_type class_ref 135067 // Collection
	nparams 1
	  param inout name "selector" type class_ref 972827 // CertSelector
	nexceptions 1
	  exception class_ref 973339 // CertStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Certificate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Collection</code> of <code>Certificate</code>s that
match the specified selector. If no <code>Certificate</code>s
match the selector, an empty <code>Collection</code> will be returned.
<p>
For some <code>CertStore</code> types, the resulting
<code>Collection</code> may not contain <b>all</b> of the
<code>Certificate</code>s that match the selector. For instance,
an LDAP <code>CertStore</code> may not search all entries in the
directory. Instead, it may just search entries that are likely to
contain the <code>Certificate</code>s it is looking for. 
<p>
Some <code>CertStore</code> implementations (especially LDAP 
<code>CertStore</code>s) may throw a <code>CertStoreException</code> 
unless a non-null <code>CertSelector</code> is provided that 
includes specific criteria that can be used to find the certificates.
Issuer and/or subject names are especially useful criteria.

@param selector A <code>CertSelector</code> used to select which
 <code>Certificate</code>s should be returned. Specify <code>null</code>
 to return all <code>Certificate</code>s (if supported).
@return A <code>Collection</code> of <code>Certificate</code>s that
        match the specified selector (never <code>null</code>)
@throws CertStoreException if an exception occurs "
      end

      operation 7644315 "getCRLs"
	public return_type class_ref 135067 // Collection
	nparams 1
	  param inout name "selector" type class_ref 973467 // CRLSelector
	nexceptions 1
	  exception class_ref 973339 // CertStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends CRL> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Collection</code> of <code>CRL</code>s that
match the specified selector. If no <code>CRL</code>s
match the selector, an empty <code>Collection</code> will be returned.
<p>
For some <code>CertStore</code> types, the resulting
<code>Collection</code> may not contain <b>all</b> of the
<code>CRL</code>s that match the selector. For instance,
an LDAP <code>CertStore</code> may not search all entries in the
directory. Instead, it may just search entries that are likely to
contain the <code>CRL</code>s it is looking for. 
<p>
Some <code>CertStore</code> implementations (especially LDAP 
<code>CertStore</code>s) may throw a <code>CertStoreException</code> 
unless a non-null <code>CRLSelector</code> is provided that 
includes specific criteria that can be used to find the CRLs.
Issuer names and/or the certificate to be checked are especially useful.

@param selector A <code>CRLSelector</code> used to select which
 <code>CRL</code>s should be returned. Specify <code>null</code>
 to return all <code>CRL</code>s (if supported).
@return A <code>Collection</code> of <code>CRL</code>s that
        match the specified selector (never <code>null</code>)
@throws CertStoreException if an exception occurs "
      end

      operation 7644443 "getInstance"
	class_operation public return_type class_ref 972955 // CertStore
	nparams 2
	  param in name "type" explicit_type "String"
	  param inout name "params" type class_ref 973211 // CertStoreParameters
	nexceptions 2
	  exception class_ref 960411 // InvalidAlgorithmParameterException
	  exception class_ref 959899 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>CertStore</code> object that implements the specified
<code>CertStore</code> type and is initialized with the specified
parameters.

<p>If the default provider package provides an implementation
of the specified <code>CertStore</code> type, an instance of
<code>CertStore</code> containing that implementation is returned.
If the requested type is not available in the default package, other
packages are searched.

<p>The <code>CertStore</code> that is returned is initialized with the 
specified <code>CertStoreParameters</code>. The type of parameters 
needed may vary between different types of <code>CertStore</code>s.
Note that the specified <code>CertStoreParameters</code> object is 
cloned.

@param type the name of the requested <code>CertStore</code> type
@param params the initialization parameters (may be <code>null</code>)
@return a <code>CertStore</code> object that implements the specified
 <code>CertStore</code> type
@throws NoSuchAlgorithmException if the requested type is not
 available in the default provider package or any of the other provider
 packages that were searched
@throws InvalidAlgorithmParameterException if the specified
initialization parameters are inappropriate for this 
<code>CertStore</code>"
      end

      operation 7644571 "handleException"
	class_operation private return_type class_ref 972955 // CertStore
	nparams 1
	  param inout name "e" type class_ref 959899 // NoSuchAlgorithmException
	nexceptions 2
	  exception class_ref 959899 // NoSuchAlgorithmException
	  exception class_ref 960411 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7644699 "getInstance"
	class_operation public return_type class_ref 972955 // CertStore
	nparams 3
	  param in name "type" explicit_type "String"
	  param inout name "params" type class_ref 973211 // CertStoreParameters
	  param in name "provider" explicit_type "String"
	nexceptions 3
	  exception class_ref 960411 // InvalidAlgorithmParameterException
	  exception class_ref 959899 // NoSuchAlgorithmException
	  exception class_ref 960027 // NoSuchProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>CertStore</code> object that implements the specified
<code>CertStore</code> type, as supplied by the specified provider
and initialized with the specified parameters.

<p>The <code>CertStore</code> that is returned is initialized with the 
specified <code>CertStoreParameters</code>. The type of parameters 
needed may vary between different types of <code>CertStore</code>s.
Note that the specified <code>CertStoreParameters</code> object is 
cloned.

@param type the requested <code>CertStore</code> type
@param params the initialization parameters (may be <code>null</code>)
@param provider the name of the provider
@return a <code>CertStore</code> object that implements the
specified type, as supplied by the specified provider
@throws NoSuchAlgorithmException if the requested type is not
 available from the specified provider
@throws InvalidAlgorithmParameterException if the specified
initialization parameters are inappropriate for this 
<code>CertStore</code>
@throws NoSuchProviderException if the provider has not been configured
@exception IllegalArgumentException if the <code>provider</code> is
null"
      end

      operation 7644827 "getInstance"
	class_operation public return_type class_ref 972955 // CertStore
	nparams 3
	  param in name "type" explicit_type "String"
	  param inout name "params" type class_ref 973211 // CertStoreParameters
	  param inout name "provider" type class_ref 959643 // Provider
	nexceptions 2
	  exception class_ref 959899 // NoSuchAlgorithmException
	  exception class_ref 960411 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>CertStore</code> object that implements the specified
<code>CertStore</code> type, as supplied by the specified provider and
initialized with the specified parameters.
Note: the <code>provider</code> doesn't have to be registered.

<p>The <code>CertStore</code> that is returned is initialized with the 
specified <code>CertStoreParameters</code>. The type of parameters 
needed may vary between different types of <code>CertStore</code>s.
Note that the specified <code>CertStoreParameters</code> object is 
cloned.

@param type the requested <code>CertStore</code> type
@param params the initialization parameters (may be <code>null</code>)
@param provider the provider
@return a <code>CertStore</code> object that implements the
specified type, as supplied by the specified provider
@exception NoSuchAlgorithmException if the requested type is not
 available from the specified provider
@throws InvalidAlgorithmParameterException if the specified
initialization parameters are inappropriate for this 
<code>CertStore</code>
@exception IllegalArgumentException if the <code>provider</code> is
null "
      end

      operation 7644955 "getCertStoreParameters"
	public return_type class_ref 973211 // CertStoreParameters
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parameters used to initialize this <code>CertStore</code>.
Note that the <code>CertStoreParameters</code> object is cloned before 
it is returned.

@return the parameters used to initialize this <code>CertStore</code>
(may be <code>null</code>)"
      end

      operation 7645083 "getType"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of this <code>CertStore</code>.

@return the type of this <code>CertStore</code>"
      end

      operation 7645211 "getProvider"
	public return_type class_ref 959643 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this <code>CertStore</code>.

@return the provider of this <code>CertStore</code>"
      end

      operation 7645339 "getDefaultType"
	class_operation public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default <code>CertStore</code> type as specified in the 
Java security properties file, or the string &quot;LDAP&quot; if no 
such property exists. The Java security properties file is located in 
the file named &lt;JAVA_HOME&gt;/lib/security/java.security, where 
&lt;JAVA_HOME&gt; refers to the directory where the JDK was installed.

<p>The default <code>CertStore</code> type can be used by applications 
that do not want to use a hard-coded type when calling one of the
<code>getInstance</code> methods, and want to provide a default 
<code>CertStore</code> type in case a user does not specify its own.

<p>The default <code>CertStore</code> type can be changed by setting 
the value of the \"certstore.type\" security property (in the Java 
security properties file) to the desired type.

@return the default <code>CertStore</code> type as specified in the
Java security properties file, or the string &quot;LDAP&quot;
if no such property exists."
      end
    end

    class 973083 "CertStoreSpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <i>Service Provider Interface</i> (<b>SPI</b>)
for the {@link CertStore CertStore} class. All <code>CertStore</code>
implementations must include a class (the SPI class) that extends
this class (<code>CertStoreSpi</code>), provides a constructor with
a single argument of type <code>CertStoreParameters</code>, and implements 
all of its methods. In general, instances of this class should only be
accessed through the <code>CertStore</code> class. 
For details, see the Java Cryptography Architecture.
<p>
<b>Concurrent Access</b>
<p>
The public methods of all <code>CertStoreSpi</code> objects must be 
thread-safe. That is, multiple threads may concurrently invoke these 
methods on a single <code>CertStoreSpi</code> object (or more than one) 
with no ill effects. This allows a <code>CertPathBuilder</code> to search 
for a CRL while simultaneously searching for further certificates, for 
instance.
<p>
Simple <code>CertStoreSpi</code> implementations will probably ensure
thread safety by adding a <code>synchronized</code> keyword to their
<code>engineGetCertificates</code> and <code>engineGetCRLs</code> methods.
More sophisticated ones may allow truly concurrent access.

@version 	1.7 12/19/03
@since	1.4
@author	Steve Hanna"
      operation 7646107 "CertStoreSpi"
	public explicit_return_type ""
	nparams 1
	  param inout name "params" type class_ref 973211 // CertStoreParameters
	nexceptions 1
	  exception class_ref 960411 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The sole constructor.

@param params the initialization parameters (may be <code>null</code>)
@throws InvalidAlgorithmParameterException if the initialization
parameters are inappropriate for this <code>CertStoreSpi</code>"
      end

      operation 7646235 "engineGetCertificates"
	abstract public return_type class_ref 135067 // Collection
	nparams 1
	  param inout name "selector" type class_ref 972827 // CertSelector
	nexceptions 1
	  exception class_ref 973339 // CertStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Certificate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Collection</code> of <code>Certificate</code>s that
match the specified selector. If no <code>Certificate</code>s
match the selector, an empty <code>Collection</code> will be returned.
<p>
For some <code>CertStore</code> types, the resulting
<code>Collection</code> may not contain <b>all</b> of the
<code>Certificate</code>s that match the selector. For instance,
an LDAP <code>CertStore</code> may not search all entries in the
directory. Instead, it may just search entries that are likely to
contain the <code>Certificate</code>s it is looking for. 
<p>
Some <code>CertStore</code> implementations (especially LDAP
<code>CertStore</code>s) may throw a <code>CertStoreException</code>
unless a non-null <code>CertSelector</code> is provided that includes
specific criteria that can be used to find the certificates. Issuer
and/or subject names are especially useful criteria.

@param selector A <code>CertSelector</code> used to select which
 <code>Certificate</code>s should be returned. Specify <code>null</code>
 to return all <code>Certificate</code>s (if supported).
@return A <code>Collection</code> of <code>Certificate</code>s that
        match the specified selector (never <code>null</code>)
@throws CertStoreException if an exception occurs "
      end

      operation 7646363 "engineGetCRLs"
	abstract public return_type class_ref 135067 // Collection
	nparams 1
	  param inout name "selector" type class_ref 973467 // CRLSelector
	nexceptions 1
	  exception class_ref 973339 // CertStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends CRL> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Collection</code> of <code>CRL</code>s that
match the specified selector. If no <code>CRL</code>s
match the selector, an empty <code>Collection</code> will be returned.
<p>
For some <code>CertStore</code> types, the resulting
<code>Collection</code> may not contain <b>all</b> of the
<code>CRL</code>s that match the selector. For instance,
an LDAP <code>CertStore</code> may not search all entries in the
directory. Instead, it may just search entries that are likely to
contain the <code>CRL</code>s it is looking for. 
<p>
Some <code>CertStore</code> implementations (especially LDAP 
<code>CertStore</code>s) may throw a <code>CertStoreException</code> 
unless a non-null <code>CRLSelector</code> is provided that includes 
specific criteria that can be used to find the CRLs. Issuer names 
and/or the certificate to be checked are especially useful.

@param selector A <code>CRLSelector</code> used to select which
 <code>CRL</code>s should be returned. Specify <code>null</code>
 to return all <code>CRL</code>s (if supported).
@return A <code>Collection</code> of <code>CRL</code>s that
        match the specified selector (never <code>null</code>)
@throws CertStoreException if an exception occurs "
      end
    end

    class 973211 "CertStoreParameters"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specification of <code>CertStore</code> parameters.
<p>
The purpose of this interface is to group (and provide type safety for) 
all <code>CertStore</code> parameter specifications. All 
<code>CertStore</code> parameter specifications must implement this 
interface.  
<p>
Typically, a <code>CertStoreParameters</code> object is passed as a parameter
to one of the {@link CertStore#getInstance CertStore.getInstance} methods. 
The <code>getInstance</code> method returns a <code>CertStore</code> that
is used for retrieving <code>Certificate</code>s and <code>CRL</code>s. The 
<code>CertStore</code> that is returned is initialized with the specified 
parameters. The type of parameters needed may vary between different types 
of <code>CertStore</code>s.

@see CertStore#getInstance

@version 	1.5 12/19/03
@since	1.4
@author	Steve Hanna"
      classrelation 1888539 // <generalisation>
	relation 1888539 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1888539 // <generalisation>
	  b parent class_ref 339867 // Cloneable
      end

      operation 7645979 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of this <code>CertStoreParameters</code>.
<p>
The precise meaning of \"copy\" may depend on the class of 
the <code>CertStoreParameters</code> object. A typical implementation 
performs a \"deep copy\" of this object, but this is not an absolute 
requirement. Some implementations may perform a \"shallow copy\" of some 
or all of the fields of this object. 
<p>
Note that the <code>CertStore.getInstance</code> methods make a copy
of the specified <code>CertStoreParameters</code>. A deep copy
implementation of <code>clone</code> is safer and more robust, as it 
prevents the caller from corrupting a shared <code>CertStore</code> by
subsequently modifying the contents of its initialization parameters. 
However, a shallow copy implementation of <code>clone</code> is more 
appropriate for applications that need to hold a reference to a
parameter contained in the <code>CertStoreParameters</code>. For example,
a shallow copy clone allows an application to release the resources of 
a particular <code>CertStore</code> initialization parameter immediately,
rather than waiting for the garbage collection mechanism. This should 
be done with the utmost care, since the <code>CertStore</code> may still 
be in use by other threads. 
<p>
Each subclass should state the precise behavior of this method so
that users and developers know what to expect.

@return a copy of this <code>CertStoreParameters</code>"
      end
    end

    class 973339 "CertStoreException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception indicating one of a variety of problems retrieving
certificates and CRLs from a <code>CertStore</code>.
<p>
A <code>CertStoreException</code> provides support for wrapping
exceptions. The {@link #getCause getCause} method returns the throwable, 
if any, that caused this exception to be thrown.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertStore

@version 	1.7 12/19/03
@since	1.4
@author	Sean Mullan"
      classrelation 1888411 // <generalisation>
	relation 1888411 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1888411 // <generalisation>
	  b parent class_ref 842139 // GeneralSecurityException
      end

      attribute 2856603 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  2395296107471573245L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7645467 "CertStoreException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertStoreException</code> with <code>null</code> as
its detail message. "
      end

      operation 7645595 "CertStoreException"
	public explicit_return_type ""
	nparams 1
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertStoreException</code> with the given detail
message. A detail message is a <code>String</code> that describes this
particular exception.

@param msg the detail message"
      end

      operation 7645723 "CertStoreException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertStoreException</code> that wraps the specified
throwable. This allows any exception to be converted into a
<code>CertStoreException</code>, while retaining information about the
cause, which may be useful for debugging. The detail message is
set to (<code>cause==null ? null : cause.toString()</code>) (which 
typically contains the class and detail message of cause).

@param cause the cause (which is saved for later retrieval by the 
{@link #getCause getCause()} method). (A <code>null</code> value is 
permitted, and indicates that the cause is nonexistent or unknown.)"
      end

      operation 7645851 "CertStoreException"
	public explicit_return_type ""
	nparams 2
	  param in name "msg" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CertStoreException</code> with the specified detail
message and cause.

@param msg the detail message
@param cause the cause (which is saved for later retrieval by the 
{@link #getCause getCause()} method). (A <code>null</code> value is 
permitted, and indicates that the cause is nonexistent or unknown.)"
      end
    end

    class 973467 "CRLSelector"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A selector that defines a set of criteria for selecting <code>CRL</code>s.
Classes that implement this interface are often used to specify
which <code>CRL</code>s should be retrieved from a <code>CertStore</code>.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this interface are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CRL
@see CertStore
@see CertStore#getCRLs

@version 	1.5 12/19/03
@author	Steve Hanna
@since	1.4"
      classrelation 1889051 // <generalisation>
	relation 1889051 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1889051 // <generalisation>
	  b parent class_ref 339867 // Cloneable
      end

      operation 7648155 "match"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "crl" type class_ref 970395 // CRL
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decides whether a <code>CRL</code> should be selected.

@param	crl     the <code>CRL</code> to be checked
@return	<code>true</code> if the <code>CRL</code> should be selected, 
<code>false</code> otherwise"
      end

      operation 7648283 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of this <code>CRLSelector</code>. Changes to the 
copy will not affect the original and vice versa.

@return a copy of this <code>CRLSelector</code>"
      end
    end

    class 973595 "CollectionCertStoreParameters"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Parameters used as input for the Collection <code>CertStore</code>
algorithm.
<p>
This class is used to provide necessary configuration parameters
to implementations of the Collection <code>CertStore</code>
algorithm. The only parameter included in this class is the
<code>Collection</code> from which the <code>CertStore</code> will
retrieve certificates and CRLs.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@version 	1.8 05/05/04
@since	1.4
@author	Steve Hanna
@see         java.util.Collection
@see         CertStore"
      classrelation 1888667 // <realization>
	relation 1888667 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1888667 // <realization>
	  b parent class_ref 973211 // CertStoreParameters
      end

      classrelation 1888795 // coll (<unidirectional association>)
	relation 1888795 --->
	  a role_name "coll" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1888795 // coll (<unidirectional association>)
	  b parent class_ref 135067 // Collection
      end

      operation 7646491 "CollectionCertStoreParameters"
	public explicit_return_type ""
	nparams 1
	  param inout name "collection" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of <code>CollectionCertStoreParameters</code>
which will allow certificates and CRLs to be retrieved from the
specified <code>Collection</code>. If the specified
<code>Collection</code> contains an object that is not a
<code>Certificate</code> or <code>CRL</code>, that object will be
ignored by the Collection <code>CertStore</code>.
<p>
The <code>Collection</code> is <b>not</b> copied. Instead, a
reference is used. This allows the caller to subsequently add or
remove <code>Certificates</code> or <code>CRL</code>s from the
<code>Collection</code>, thus changing the set of
<code>Certificates</code> or <code>CRL</code>s available to the
Collection <code>CertStore</code>. The Collection <code>CertStore</code>
will not modify the contents of the <code>Collection</code>.
<p>
If the <code>Collection</code> will be modified by one thread while
another thread is calling a method of a Collection <code>CertStore</code>
that has been initialized with this <code>Collection</code>, the
<code>Collection</code> must have fail-fast iterators.

@param collection a <code>Collection</code> of
       <code>Certificate</code>s and <code>CRL</code>s
@exception NullPointerException if <code>collection</code> is
<code>null</code>"
      end

      operation 7646619 "CollectionCertStoreParameters"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of <code>CollectionCertStoreParameters</code> with 
the default parameter values (an empty and immutable 
<code>Collection</code>)."
      end

      operation 7646747 "getCollection"
	public return_type class_ref 135067 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Collection</code> from which <code>Certificate</code>s
and <code>CRL</code>s are retrieved. This is <b>not</b> a copy of the
<code>Collection</code>, it is a reference. This allows the caller to
subsequently add or remove <code>Certificates</code> or
<code>CRL</code>s from the <code>Collection</code>.

@return the <code>Collection</code> (never null)"
      end

      operation 7646875 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this object. Note that only a reference to the
<code>Collection</code> is copied, and not the contents.

@return the copy"
      end

      operation 7647003 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string describing the parameters.

@return a formatted string describing the parameters"
      end
    end

    class 973723 "LDAPCertStoreParameters"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Parameters used as input for the LDAP <code>CertStore</code> algorithm.
<p>
This class is used to provide necessary configuration parameters (server
name and port number) to implementations of the LDAP <code>CertStore</code>
algorithm.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@version 	1.8 12/19/03
@since	1.4
@author	Steve Hanna
@see         CertStore"
      classrelation 1889179 // <realization>
	relation 1889179 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1889179 // <realization>
	  b parent class_ref 973211 // CertStoreParameters
      end

      attribute 2856987 "LDAP_DEFAULT_PORT"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  389"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2857115 "port"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "the port number of the LDAP server
"
      end

      attribute 2857243 "serverName"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "the DNS name of the LDAP server
"
      end

      operation 7648411 "LDAPCertStoreParameters"
	public explicit_return_type ""
	nparams 2
	  param in name "serverName" explicit_type "String"
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of <code>LDAPCertStoreParameters</code> with the
specified parameter values.

@param serverName the DNS name of the LDAP server
@param port the port number of the LDAP server
@exception NullPointerException if <code>serverName</code> is
<code>null</code>"
      end

      operation 7648539 "LDAPCertStoreParameters"
	public explicit_return_type ""
	nparams 1
	  param in name "serverName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of <code>LDAPCertStoreParameters</code> with the
specified server name and a default port of 389.

@param serverName the DNS name of the LDAP server
@exception NullPointerException if <code>serverName</code> is
<code>null</code>"
      end

      operation 7648667 "LDAPCertStoreParameters"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of <code>LDAPCertStoreParameters</code> with the
default parameter values (server name \"localhost\", port 389)."
      end

      operation 7648795 "getServerName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the DNS name of the LDAP server.

@return the name (not <code>null</code>)"
      end

      operation 7648923 "getPort"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the port number of the LDAP server.

@return the port number"
      end

      operation 7649051 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this object. Changes to the copy will not affect
the original and vice versa.
<p>
Note: this method currently performs a shallow copy of the object
(simply calls <code>Object.clone()</code>). This may be changed in a 
future revision to perform a deep copy if new parameters are added 
that should not be shared.

@return the copy"
      end

      operation 7649179 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string describing the parameters.

@return a formatted string describing the parameters"
      end
    end

    class 973851 "PKIXBuilderParameters"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Parameters used as input for the PKIX <code>CertPathBuilder</code> 
algorithm.
<p>
A PKIX <code>CertPathBuilder</code> uses these parameters to {@link 
CertPathBuilder#build build} a <code>CertPath</code> which has been 
validated according to the PKIX certification path validation algorithm.

<p>To instantiate a <code>PKIXBuilderParameters</code> object, an
application must specify one or more <i>most-trusted CAs</i> as defined by
the PKIX certification path validation algorithm. The most-trusted CA 
can be specified using one of two constructors. An application 
can call {@link #PKIXBuilderParameters(Set, CertSelector) 
PKIXBuilderParameters(Set, CertSelector)}, specifying a 
<code>Set</code> of <code>TrustAnchor</code> objects, each of which 
identifies a most-trusted CA. Alternatively, an application can call 
{@link #PKIXBuilderParameters(KeyStore, CertSelector)
PKIXBuilderParameters(KeyStore, CertSelector)}, specifying a 
<code>KeyStore</code> instance containing trusted certificate entries, each 
of which will be considered as a most-trusted CA.

<p>In addition, an application must specify constraints on the target 
certificate that the <code>CertPathBuilder</code> will attempt 
to build a path to. The constraints are specified as a 
<code>CertSelector</code> object. These constraints should provide the 
<code>CertPathBuilder</code> with enough search criteria to find the target 
certificate. Minimal criteria for an <code>X509Certificate</code> usually 
include the subject name and/or one or more subject alternative names.
If enough criteria is not specified, the <code>CertPathBuilder</code> 
may throw a <code>CertPathBuilderException</code>.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertPathBuilder

@version 	1.15 12/19/03
@since 	1.4
@author	Sean Mullan"
      classrelation 1890203 // <generalisation>
	relation 1890203 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1890203 // <generalisation>
	  b parent class_ref 973979 // PKIXParameters
      end

      attribute 2858139 "maxPathLength"
	private explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7653147 "PKIXBuilderParameters"
	public explicit_return_type ""
	nparams 2
	  param inout name "trustAnchors" type class_ref 136731 // Set
	  param inout name "targetConstraints" type class_ref 972827 // CertSelector
	nexceptions 1
	  exception class_ref 960411 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<TrustAnchor> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of <code>PKIXBuilderParameters</code> with
the specified <code>Set</code> of most-trusted CAs. 
Each element of the set is a {@link TrustAnchor TrustAnchor}.

<p>Note that the <code>Set</code> is copied to protect against
subsequent modifications.

@param trustAnchors a <code>Set</code> of <code>TrustAnchor</code>s
@param targetConstraints a <code>CertSelector</code> specifying the 
constraints on the target certificate 
@throws InvalidAlgorithmParameterException if <code>trustAnchors</code> 
is empty <code>(trustAnchors.isEmpty() == true)</code>
@throws NullPointerException if <code>trustAnchors</code> is 
<code>null</code>
@throws ClassCastException if any of the elements of
<code>trustAnchors</code> are not of type 
<code>java.security.cert.TrustAnchor</code>"
      end

      operation 7653275 "PKIXBuilderParameters"
	public explicit_return_type ""
	nparams 2
	  param inout name "keystore" type class_ref 840859 // KeyStore
	  param inout name "targetConstraints" type class_ref 972827 // CertSelector
	nexceptions 2
	  exception class_ref 966427 // KeyStoreException
	  exception class_ref 960411 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of <code>PKIXBuilderParameters</code> that
populates the set of most-trusted CAs from the trusted
certificate entries contained in the specified <code>KeyStore</code>.
Only keystore entries that contain trusted <code>X509Certificate</code>s
are considered; all other certificate types are ignored.

@param keystore a <code>KeyStore</code> from which the set of 
most-trusted CAs will be populated
@param targetConstraints a <code>CertSelector</code> specifying the 
constraints on the target certificate 
@throws KeyStoreException if <code>keystore</code> has not been 
initialized
@throws InvalidAlgorithmParameterException if <code>keystore</code> does
not contain at least one trusted certificate entry
@throws NullPointerException if <code>keystore</code> is 
<code>null</code>"
      end

      operation 7653403 "setMaxPathLength"
	public explicit_return_type "void"
	nparams 1
	  param in name "maxPathLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the maximum number of non-self-issued intermediate
certificates that may exist in a certification path. A certificate
is self-issued if the DNs that appear in the subject and issuer
fields are identical and are not empty. Note that the last certificate
in a certification path is not an intermediate certificate, and is not
included in this limit. Usually the last certificate is an end entity
certificate, but it can be a CA certificate. A PKIX 
<code>CertPathBuilder</code> instance must not build 
paths longer than the length specified.

<p> A value of 0 implies that the path can only contain
a single certificate. A value of -1 implies that the
path length is unconstrained (i.e. there is no maximum).
The default maximum path length, if not specified, is 5.
Setting a value less than -1 will cause an exception to be thrown.

<p> If any of the CA certificates contain the 
<code>BasicConstraintsExtension</code>, the value of the
<code>pathLenConstraint</code> field of the extension overrides
the maximum path length parameter whenever the result is a
certification path of smaller length.

@param maxPathLength the maximum number of non-self-issued intermediate
 certificates that may exist in a certification path
@throws InvalidParameterException if <code>maxPathLength</code> is set 
 to a value less than -1

@see #getMaxPathLength"
      end

      operation 7653531 "getMaxPathLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the maximum number of intermediate non-self-issued
certificates that may exist in a certification path. See
the {@link #setMaxPathLength} method for more details.

@return the maximum number of non-self-issued intermediate certificates 
 that may exist in a certification path, or -1 if there is no limit

@see #setMaxPathLength"
      end

      operation 7653659 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string describing the parameters.

@return a formatted string describing the parameters"
      end
    end

    class 973979 "PKIXParameters"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Parameters used as input for the PKIX <code>CertPathValidator</code>
algorithm. 
<p>
A PKIX <code>CertPathValidator</code> uses these parameters to
validate a <code>CertPath</code> according to the PKIX certification path 
validation algorithm.

<p>To instantiate a <code>PKIXParameters</code> object, an
application must specify one or more <i>most-trusted CAs</i> as defined by
the PKIX certification path validation algorithm. The most-trusted CAs
can be specified using one of two constructors. An application
can call {@link #PKIXParameters(Set) PKIXParameters(Set)}, 
specifying a <code>Set</code> of <code>TrustAnchor</code> objects, each
of which identify a most-trusted CA. Alternatively, an application can call 
{@link #PKIXParameters(KeyStore) PKIXParameters(KeyStore)}, specifying a 
<code>KeyStore</code> instance containing trusted certificate entries, each 
of which will be considered as a most-trusted CA.
<p>
Once a <code>PKIXParameters</code> object has been created, other parameters
can be specified (by calling {@link #setInitialPolicies setInitialPolicies} 
or {@link #setDate setDate}, for instance) and then the 
<code>PKIXParameters</code> is passed along with the <code>CertPath</code> 
to be validated to {@link CertPathValidator#validate 
CertPathValidator.validate}. 
<p>
Any parameter that is not set (or is set to <code>null</code>) will 
be set to the default value for that parameter. The default value for the 
<code>date</code> parameter is <code>null</code>, which indicates 
the current time when the path is validated. The default for the 
remaining parameters is the least constrained.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertPathValidator

@version 	1.17 12/19/03
@since	1.4
@author	Sean Mullan
@author	Yassir Elley"
      classrelation 1889307 // <realization>
	relation 1889307 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1889307 // <realization>
	  b parent class_ref 971419 // CertPathParameters
      end

      classrelation 1889435 // unmodTrustAnchors (<unidirectional association>)
	relation 1889435 --->
	  a role_name "unmodTrustAnchors" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TrustAnchor> ${name}${value};
"
	    classrelation_ref 1889435 // unmodTrustAnchors (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      classrelation 1889563 // date (<unidirectional association>)
	relation 1889563 --->
	  a role_name "date" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1889563 // date (<unidirectional association>)
	  b parent class_ref 139163 // Date
      end

      classrelation 1889691 // certPathCheckers (<unidirectional association>)
	relation 1889691 --->
	  a role_name "certPathCheckers" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<PKIXCertPathChecker> ${name}${value};
"
	    classrelation_ref 1889691 // certPathCheckers (<unidirectional association>)
	  b parent class_ref 135579 // List
      end

      attribute 2857371 "sigProvider"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2857499 "revocationEnabled"
	private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1889819 // unmodInitialPolicies (<unidirectional association>)
	relation 1889819 --->
	  a role_name "unmodInitialPolicies" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 1889819 // unmodInitialPolicies (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      attribute 2857627 "explicitPolicyRequired"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2857755 "policyMappingInhibited"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2857883 "anyPolicyInhibited"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2858011 "policyQualifiersRejected"
	private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1889947 // certStores (<unidirectional association>)
	relation 1889947 --->
	  a role_name "certStores" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<CertStore> ${name}${value};
"
	    classrelation_ref 1889947 // certStores (<unidirectional association>)
	  b parent class_ref 135579 // List
      end

      classrelation 1890075 // certSelector (<unidirectional association>)
	relation 1890075 --->
	  a role_name "certSelector" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1890075 // certSelector (<unidirectional association>)
	  b parent class_ref 972827 // CertSelector
      end

      operation 7649307 "PKIXParameters"
	public explicit_return_type ""
	nparams 1
	  param inout name "trustAnchors" type class_ref 136731 // Set
	nexceptions 1
	  exception class_ref 960411 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<TrustAnchor> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of <code>PKIXParameters</code> with the specified
<code>Set</code> of most-trusted CAs. Each element of the 
set is a {@link TrustAnchor TrustAnchor}.
<p>
Note that the <code>Set</code> is copied to protect against
subsequent modifications.

@param trustAnchors a <code>Set</code> of <code>TrustAnchor</code>s
@throws InvalidAlgorithmParameterException if the specified 
<code>Set</code> is empty <code>(trustAnchors.isEmpty() == true)</code>
@throws NullPointerException if the specified <code>Set</code> is
<code>null</code>
@throws ClassCastException if any of the elements in the <code>Set</code>
are not of type <code>java.security.cert.TrustAnchor</code>"
      end

      operation 7649435 "PKIXParameters"
	public explicit_return_type ""
	nparams 1
	  param inout name "keystore" type class_ref 840859 // KeyStore
	nexceptions 2
	  exception class_ref 966427 // KeyStoreException
	  exception class_ref 960411 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of <code>PKIXParameters</code> that 
populates the set of most-trusted CAs from the trusted 
certificate entries contained in the specified <code>KeyStore</code>.
Only keystore entries that contain trusted <code>X509Certificates</code>
are considered; all other certificate types are ignored.

@param keystore a <code>KeyStore</code> from which the set of 
most-trusted CAs will be populated
@throws KeyStoreException if the keystore has not been initialized
@throws InvalidAlgorithmParameterException if the keystore does
not contain at least one trusted certificate entry
@throws NullPointerException if the keystore is <code>null</code>"
      end

      operation 7649563 "getTrustAnchors"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<TrustAnchor> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable <code>Set</code> of the most-trusted 
CAs.

@return an immutable <code>Set</code> of <code>TrustAnchor</code>s 
(never <code>null</code>)

@see #setTrustAnchors"
      end

      operation 7649691 "setTrustAnchors"
	public explicit_return_type "void"
	nparams 1
	  param inout name "trustAnchors" type class_ref 136731 // Set
	nexceptions 1
	  exception class_ref 960411 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TrustAnchor> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>Set</code> of most-trusted CAs. 
<p>
Note that the <code>Set</code> is copied to protect against
subsequent modifications.

@param trustAnchors a <code>Set</code> of <code>TrustAnchor</code>s
@throws InvalidAlgorithmParameterException if the specified 
<code>Set</code> is empty <code>(trustAnchors.isEmpty() == true)</code>
@throws NullPointerException if the specified <code>Set</code> is
<code>null</code>
@throws ClassCastException if any of the elements in the set
are not of type <code>java.security.cert.TrustAnchor</code>

@see #getTrustAnchors"
      end

      operation 7649819 "getInitialPolicies"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable <code>Set</code> of initial
policy identifiers (OID strings), indicating that any one of these
policies would be acceptable to the certificate user for the purposes of
certification path processing. The default return value is an empty 
<code>Set</code>, which is interpreted as meaning that any policy would 
be acceptable.

@return an immutable <code>Set</code> of initial policy OIDs in
<code>String</code> format, or an empty <code>Set</code> (implying any 
policy is acceptable). Never returns <code>null</code>.

@see #setInitialPolicies"
      end

      operation 7649947 "setInitialPolicies"
	public explicit_return_type "void"
	nparams 1
	  param inout name "initialPolicies" type class_ref 136731 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>Set</code> of initial policy identifiers 
(OID strings), indicating that any one of these
policies would be acceptable to the certificate user for the purposes of
certification path processing. By default, any policy is acceptable 
(i.e. all policies), so a user that wants to allow any policy as
acceptable does not need to call this method, or can call it
with an empty <code>Set</code> (or <code>null</code>).
<p>
Note that the <code>Set</code> is copied to protect against
subsequent modifications.

@param initialPolicies a <code>Set</code> of initial policy 
OIDs in <code>String</code> format (or <code>null</code>)
@throws ClassCastException if any of the elements in the set are
not of type <code>String</code>

@see #getInitialPolicies"
      end

      operation 7650075 "setCertStores"
	public explicit_return_type "void"
	nparams 1
	  param inout name "stores" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<CertStore> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the list of <code>CertStore</code>s to be used in finding
certificates and CRLs. May be <code>null</code>, in which case
no <code>CertStore</code>s will be used. The first
<code>CertStore</code>s in the list may be preferred to those that
appear later. 
<p>
Note that the <code>List</code> is copied to protect against 
subsequent modifications.

@param stores a <code>List</code> of <code>CertStore</code>s (or 
<code>null</code>)
@throws ClassCastException if any of the elements in the list are
not of type <code>java.security.cert.CertStore</code>

@see #getCertStores"
      end

      operation 7650203 "addCertStore"
	public explicit_return_type "void"
	nparams 1
	  param inout name "store" type class_ref 972955 // CertStore
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a <code>CertStore</code> to the end of the list of 
<code>CertStore</code>s used in finding certificates and CRLs.

@param store the <code>CertStore</code> to add. If <code>null</code>,
the store is ignored (not added to list)."
      end

      operation 7650331 "getCertStores"
	public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<CertStore> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable <code>List</code> of <code>CertStore</code>s that
are used to find certificates and CRLs.

@return an immutable <code>List</code> of <code>CertStore</code>s 
(may be empty, but never <code>null</code>)

@see #setCertStores"
      end

      operation 7650459 "setRevocationEnabled"
	public explicit_return_type "void"
	nparams 1
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the RevocationEnabled flag. If this flag is true, the default
revocation checking mechanism of the underlying PKIX service provider 
will be used. If this flag is false, the default revocation checking 
mechanism will be disabled (not used). 
<p>
When a <code>PKIXParameters</code> object is created, this flag is set
to true. This setting reflects the most common strategy for checking
revocation, since each service provider must support revocation 
checking to be PKIX compliant. Sophisticated applications should set
this flag to false when it is not practical to use a PKIX service 
provider's default revocation checking mechanism or when an alternative 
revocation checking mechanism is to be substituted (by also calling the 
{@link #addCertPathChecker addCertPathChecker} or {@link 
#setCertPathCheckers setCertPathCheckers} methods).

@param val the new value of the RevocationEnabled flag"
      end

      operation 7650587 "isRevocationEnabled"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks the RevocationEnabled flag. If this flag is true, the default
revocation checking mechanism of the underlying PKIX service provider 
will be used. If this flag is false, the default revocation checking 
mechanism will be disabled (not used). See the {@link 
#setRevocationEnabled setRevocationEnabled} method for more details on 
setting the value of this flag.

@return the current value of the RevocationEnabled flag"
      end

      operation 7650715 "setExplicitPolicyRequired"
	public explicit_return_type "void"
	nparams 1
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the ExplicitPolicyRequired flag. If this flag is true, an 
acceptable policy needs to be explicitly identified in every certificate.
By default, the ExplicitPolicyRequired flag is false.

@param val <code>true</code> if explicit policy is to be required, 
<code>false</code> otherwise"
      end

      operation 7650843 "isExplicitPolicyRequired"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if explicit policy is required. If this flag is true, an 
acceptable policy needs to be explicitly identified in every certificate.
By default, the ExplicitPolicyRequired flag is false.

@return <code>true</code> if explicit policy is required, 
<code>false</code> otherwise"
      end

      operation 7650971 "setPolicyMappingInhibited"
	public explicit_return_type "void"
	nparams 1
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the PolicyMappingInhibited flag. If this flag is true, policy 
mapping is inhibited. By default, policy mapping is not inhibited (the
flag is false).

@param val <code>true</code> if policy mapping is to be inhibited, 
<code>false</code> otherwise"
      end

      operation 7651099 "isPolicyMappingInhibited"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if policy mapping is inhibited. If this flag is true, policy 
mapping is inhibited. By default, policy mapping is not inhibited (the
flag is false).

@return true if policy mapping is inhibited, false otherwise"
      end

      operation 7651227 "setAnyPolicyInhibited"
	public explicit_return_type "void"
	nparams 1
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets state to determine if the any policy OID should be processed
if it is included in a certificate. By default, the any policy OID 
is not inhibited ({@link #isAnyPolicyInhibited isAnyPolicyInhibited()} 
returns <code>false</code>).

@param val <code>true</code> if the any policy OID is to be 
inhibited, <code>false</code> otherwise"
      end

      operation 7651355 "isAnyPolicyInhibited"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether the any policy OID should be processed if it
is included in a certificate.

@return <code>true</code> if the any policy OID is inhibited, 
<code>false</code> otherwise"
      end

      operation 7651483 "setPolicyQualifiersRejected"
	public explicit_return_type "void"
	nparams 1
	  param inout name "qualifiersRejected" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the PolicyQualifiersRejected flag. If this flag is true,
certificates that include policy qualifiers in a certificate
policies extension that is marked critical are rejected.
If the flag is false, certificates are not rejected on this basis.

<p> When a <code>PKIXParameters</code> object is created, this flag is 
set to true. This setting reflects the most common (and simplest) 
strategy for processing policy qualifiers. Applications that want to use
a more sophisticated policy must set this flag to false.
<p>
Note that the PKIX certification path validation algorithm specifies
that any policy qualifier in a certificate policies extension that is 
marked critical must be processed and validated. Otherwise the 
certification path must be rejected. If the policyQualifiersRejected flag
is set to false, it is up to the application to validate all policy 
qualifiers in this manner in order to be PKIX compliant.

@param qualifiersRejected the new value of the PolicyQualifiersRejected 
flag
@see #getPolicyQualifiersRejected
@see PolicyQualifierInfo"
      end

      operation 7651611 "getPolicyQualifiersRejected"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the PolicyQualifiersRejected flag. If this flag is true,
certificates that include policy qualifiers in a certificate policies
extension that is marked critical are rejected.
If the flag is false, certificates are not rejected on this basis.

<p> When a <code>PKIXParameters</code> object is created, this flag is 
set to true. This setting reflects the most common (and simplest) 
strategy for processing policy qualifiers. Applications that want to use
a more sophisticated policy must set this flag to false.

@return the current value of the PolicyQualifiersRejected flag
@see #setPolicyQualifiersRejected"
      end

      operation 7651739 "getDate"
	public return_type class_ref 139163 // Date
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the time for which the validity of the certification path
should be determined. If <code>null</code>, the current time is used.
<p>
Note that the <code>Date</code> returned is copied to protect against 
subsequent modifications. 

@return the <code>Date</code>, or <code>null</code> if not set
@see #setDate"
      end

      operation 7651867 "setDate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "date" type class_ref 139163 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time for which the validity of the certification path
should be determined. If <code>null</code>, the current time is used.
<p>
Note that the <code>Date</code> supplied here is copied to protect 
against subsequent modifications. 

@param date the <code>Date</code>, or <code>null</code> for the 
current time
@see #getDate"
      end

      operation 7651995 "setCertPathCheckers"
	public explicit_return_type "void"
	nparams 1
	  param inout name "checkers" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<PKIXCertPathChecker> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a <code>List</code> of additional certification path checkers. If 
the specified <code>List</code> contains an object that is not a
<code>PKIXCertPathChecker</code>, it is ignored.
<p>
Each <code>PKIXCertPathChecker</code> specified implements
additional checks on a certificate. Typically, these are checks to 
process and verify private extensions contained in certificates. 
Each <code>PKIXCertPathChecker</code> should be instantiated with any 
initialization parameters needed to execute the check.
<p>
This method allows sophisticated applications to extend a PKIX 
<code>CertPathValidator</code> or <code>CertPathBuilder</code>.
Each of the specified <code>PKIXCertPathChecker</code>s will be called, 
in turn, by a PKIX <code>CertPathValidator</code> or 
<code>CertPathBuilder</code> for each certificate processed or 
validated. 
<p>
Regardless of whether these additional <code>PKIXCertPathChecker</code>s 
are set, a PKIX <code>CertPathValidator</code> or 
<code>CertPathBuilder</code> must perform all of the required PKIX 
checks on each certificate. The one exception to this rule is if the 
RevocationEnabled flag is set to false (see the {@link 
#setRevocationEnabled setRevocationEnabled} method). 
<p>
Note that the <code>List</code> supplied here is copied and each 
<code>PKIXCertPathChecker</code> in the list is cloned to protect
against subsequent modifications.

@param checkers a <code>List</code> of <code>PKIXCertPathChecker</code>s.
May be <code>null</code>, in which case no additional checkers will be
used.
@throws ClassCastException if any of the elements in the list
are not of type <code>java.security.cert.PKIXCertPathChecker</code>
@see #getCertPathCheckers"
      end

      operation 7652123 "getCertPathCheckers"
	public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<PKIXCertPathChecker> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>List</code> of certification path checkers. 
The returned <code>List</code> is immutable, and each 
<code>PKIXCertPathChecker</code> in the <code>List</code> is cloned 
to protect against subsequent modifications.

@return an immutable <code>List</code> of 
<code>PKIXCertPathChecker</code>s (may be empty, but not 
<code>null</code>)
@see #setCertPathCheckers"
      end

      operation 7652251 "addCertPathChecker"
	public explicit_return_type "void"
	nparams 1
	  param inout name "checker" type class_ref 974107 // PKIXCertPathChecker
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a <code>PKIXCertPathChecker</code> to the list of certification 
path checkers. See the {@link #setCertPathCheckers setCertPathCheckers}
method for more details.
<p>
Note that the <code>PKIXCertPathChecker</code> is cloned to protect
against subsequent modifications.

@param checker a <code>PKIXCertPathChecker</code> to add to the list of 
checks. If <code>null</code>, the checker is ignored (not added to list)."
      end

      operation 7652379 "getSigProvider"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signature provider's name, or <code>null</code> 
if not set.

@return the signature provider's name (or <code>null</code>)
@see #setSigProvider"
      end

      operation 7652507 "setSigProvider"
	public explicit_return_type "void"
	nparams 1
	  param in name "sigProvider" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the signature provider's name. The specified provider will be 
preferred when creating {@link java.security.Signature Signature} 
objects. If <code>null</code> or not set, the first provider found 
supporting the algorithm will be used.

@param sigProvider the signature provider's name (or <code>null</code>)
@see #getSigProvider"
      end

      operation 7652635 "getTargetCertConstraints"
	public return_type class_ref 972827 // CertSelector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the required constraints on the target certificate. 
The constraints are returned as an instance of <code>CertSelector</code>.
If <code>null</code>, no constraints are defined.

<p>Note that the <code>CertSelector</code> returned is cloned
to protect against subsequent modifications.

@return a <code>CertSelector</code> specifying the constraints 
on the target certificate (or <code>null</code>)
@see #setTargetCertConstraints"
      end

      operation 7652763 "setTargetCertConstraints"
	public explicit_return_type "void"
	nparams 1
	  param inout name "selector" type class_ref 972827 // CertSelector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the required constraints on the target certificate.
The constraints are specified as an instance of 
<code>CertSelector</code>. If <code>null</code>, no constraints are 
defined.

<p>Note that the <code>CertSelector</code> specified is cloned
to protect against subsequent modifications.

@param selector a <code>CertSelector</code> specifying the constraints 
on the target certificate (or <code>null</code>)
@see #getTargetCertConstraints"
      end

      operation 7652891 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of this <code>PKIXParameters</code> object. Changes
to the copy will not affect the original and vice versa.

@return a copy of this <code>PKIXParameters</code> object"
      end

      operation 7653019 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string describing the parameters.

@return a formatted string describing the parameters."
      end
    end

    class 974107 "PKIXCertPathChecker"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An abstract class that performs one or more checks on an 
<code>X509Certificate</code>. 

<p>A concrete implementation of the <code>PKIXCertPathChecker</code> class 
can be created to extend the PKIX certification path validation algorithm.
For example, an implementation may check for and process a critical private
extension of each certificate in a certification path.

<p>Instances of <code>PKIXCertPathChecker</code> are passed as parameters
using the {@link PKIXParameters#setCertPathCheckers setCertPathCheckers}
or {@link PKIXParameters#addCertPathChecker addCertPathChecker} methods 
of the <code>PKIXParameters</code> and <code>PKIXBuilderParameters</code>
class. Each of the <code>PKIXCertPathChecker</code>s {@link #check check}
methods will be called, in turn, for each certificate processed by a PKIX 
<code>CertPathValidator</code> or <code>CertPathBuilder</code> 
implementation.

<p>A <code>PKIXCertPathChecker</code> may be called multiple times on 
successive certificates in a certification path. Concrete subclasses
are expected to maintain any internal state that may be necessary to 
check successive certificates. The {@link #init init} method is used 
to initialize the internal state of the checker so that the certificates 
of a new certification path may be checked. A stateful implementation
<b>must</b> override the {@link #clone clone} method if necessary in 
order to allow a PKIX <code>CertPathBuilder</code> to efficiently 
backtrack and try other paths. In these situations, the 
<code>CertPathBuilder</code> is able to restore prior path validation 
states by restoring the cloned <code>PKIXCertPathChecker</code>s.

<p>The order in which the certificates are presented to the 
<code>PKIXCertPathChecker</code> may be either in the forward direction 
(from target to most-trusted CA) or in the reverse direction (from 
most-trusted CA to target). A <code>PKIXCertPathChecker</code> implementation
<b>must</b> support reverse checking (the ability to perform its checks when
it is presented with certificates in the reverse direction) and <b>may</b> 
support forward checking (the ability to perform its checks when it is 
presented with certificates in the forward direction). The 
{@link #isForwardCheckingSupported isForwardCheckingSupported} method 
indicates whether forward checking is supported.
<p>
Additional input parameters required for executing the check may be 
specified through constructors of concrete implementations of this class.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see PKIXParameters 
@see PKIXBuilderParameters

@version 	1.7 12/19/03
@since	1.4
@author	Yassir Elley
@author	Sean Mullan"
      classrelation 1891227 // <realization>
	relation 1891227 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1891227 // <realization>
	  b parent class_ref 339867 // Cloneable
      end

      operation 7654939 "PKIXCertPathChecker"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor."
      end

      operation 7655067 "init"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "forward" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 972699 // CertPathValidatorException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the internal state of this <code>PKIXCertPathChecker</code>.
<p> 
The <code>forward</code> flag specifies the order that
certificates will be passed to the {@link #check check} method
(forward or reverse). A <code>PKIXCertPathChecker</code> <b>must</b> 
support reverse checking and <b>may</b> support forward checking. 

@param forward the order that certificates are presented to
the <code>check</code> method. If <code>true</code>, certificates 
are presented from target to most-trusted CA (forward); if 
<code>false</code>, from most-trusted CA to target (reverse).
@throws CertPathValidatorException if this 
<code>PKIXCertPathChecker</code> is unable to check certificates in 
the specified order; it should never be thrown if the forward flag 
is false since reverse checking must be supported"
      end

      operation 7655195 "isForwardCheckingSupported"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if forward checking is supported. Forward checking refers
to the ability of the <code>PKIXCertPathChecker</code> to perform 
its checks when certificates are presented to the <code>check</code>
method in the forward direction (from target to most-trusted CA).

@return <code>true</code> if forward checking is supported, 
<code>false</code> otherwise"
      end

      operation 7655323 "getSupportedExtensions"
	abstract public return_type class_ref 136731 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable <code>Set</code> of X.509 certificate extensions 
that this <code>PKIXCertPathChecker</code> supports (i.e. recognizes, is 
able to process), or <code>null</code> if no extensions are supported. 
<p>
Each element of the set is a <code>String</code> representing the
Object Identifier (OID) of the X.509 extension that is supported.
The OID is represented by a set of nonnegative integers separated by
periods.
<p>
All X.509 certificate extensions that a <code>PKIXCertPathChecker</code>
might possibly be able to process should be included in the set.

@return an immutable <code>Set</code> of X.509 extension OIDs (in
<code>String</code> format) supported by this 
<code>PKIXCertPathChecker</code>, or <code>null</code> if no 
extensions are supported"
      end

      operation 7655451 "check"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "cert" type class_ref 528283 // Certificate
	  param inout name "unresolvedCritExts" type class_ref 135067 // Collection
	nexceptions 1
	  exception class_ref 972699 // CertPathValidatorException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the check(s) on the specified certificate using its internal 
state and removes any critical extensions that it processes from the 
specified collection of OID strings that represent the unresolved 
critical extensions. The certificates are presented in the order 
specified by the <code>init</code> method.

@param cert the <code>Certificate</code> to be checked
@param unresolvedCritExts a <code>Collection</code> of OID strings 
representing the current set of unresolved critical extensions
@exception CertPathValidatorException if the specified certificate does 
not pass the check"
      end

      operation 7655579 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a clone of this object. Calls the <code>Object.clone()</code>
method.
All subclasses which maintain state must support and
override this method, if necessary.

@return a copy of this <code>PKIXCertPathChecker</code>"
      end
    end

    class 974235 "PKIXCertPathBuilderResult"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents the successful result of the PKIX certification 
path builder algorithm. All certification paths that are built and
returned using this algorithm are also validated according to the PKIX
certification path validation algorithm.

<p>Instances of <code>PKIXCertPathBuilderResult</code> are returned by 
the <code>build</code> method of <code>CertPathBuilder</code>
objects implementing the PKIX algorithm.

<p>All <code>PKIXCertPathBuilderResult</code> objects contain the 
certification path constructed by the build algorithm, the
valid policy tree and subject public key resulting from the build 
algorithm, and a <code>TrustAnchor</code> describing the certification 
authority (CA) that served as a trust anchor for the certification path.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertPathBuilderResult

@version	1.9 12/19/03
@since	1.4
@author	Anne Anderson"
      classrelation 1890843 // <generalisation>
	relation 1890843 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1890843 // <generalisation>
	  b parent class_ref 974363 // PKIXCertPathValidatorResult
      end

      classrelation 1890971 // <realization>
	relation 1890971 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1890971 // <realization>
	  b parent class_ref 971291 // CertPathBuilderResult
      end

      classrelation 1891099 // certPath (<unidirectional association>)
	relation 1891099 --->
	  a role_name "certPath" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1891099 // certPath (<unidirectional association>)
	  b parent class_ref 845339 // CertPath
      end

      operation 7654555 "PKIXCertPathBuilderResult"
	public explicit_return_type ""
	nparams 4
	  param inout name "certPath" type class_ref 845339 // CertPath
	  param inout name "trustAnchor" type class_ref 972059 // TrustAnchor
	  param inout name "policyTree" type class_ref 974491 // PolicyNode
	  param inout name "subjectPublicKey" type class_ref 962075 // PublicKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of <code>PKIXCertPathBuilderResult</code>
containing the specified parameters.

@param certPath the validated <code>CertPath</code>
@param trustAnchor a <code>TrustAnchor</code> describing the CA that
served as a trust anchor for the certification path
@param policyTree the immutable valid policy tree, or <code>null</code>
if there are no valid policies
@param subjectPublicKey the public key of the subject
@throws NullPointerException if the <code>certPath</code>, 
<code>trustAnchor</code> or <code>subjectPublicKey</code> parameters 
are <code>null</code>"
      end

      operation 7654683 "getCertPath"
	public return_type class_ref 845339 // CertPath
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the built and validated certification path. The 
<code>CertPath</code> object does not include the trust anchor.
Instead, use the {@link #getTrustAnchor() getTrustAnchor()} method to 
obtain the <code>TrustAnchor</code> that served as the trust anchor
for the certification path.

@return the built and validated <code>CertPath</code> (never 
<code>null</code>)"
      end

      operation 7654811 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a printable representation of this 
<code>PKIXCertPathBuilderResult</code>.

@return a <code>String</code> describing the contents of this
        <code>PKIXCertPathBuilderResult</code>"
      end
    end

    class 974363 "PKIXCertPathValidatorResult"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents the successful result of the PKIX certification 
path validation algorithm. 

<p>Instances of <code>PKIXCertPathValidatorResult</code> are returned by the 
{@link CertPathValidator#validate validate} method of 
<code>CertPathValidator</code> objects implementing the PKIX algorithm.

<p> All <code>PKIXCertPathValidatorResult</code> objects contain the 
valid policy tree and subject public key resulting from the 
validation algorithm, as well as a <code>TrustAnchor</code> describing
the certification authority (CA) that served as a trust anchor for the 
certification path.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertPathValidatorResult

@version 	1.9 12/19/03
@since	1.4
@author	Yassir Elley
@author	Sean Mullan"
      classrelation 1890331 // <realization>
	relation 1890331 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1890331 // <realization>
	  b parent class_ref 972571 // CertPathValidatorResult
      end

      classrelation 1890459 // trustAnchor (<unidirectional association>)
	relation 1890459 --->
	  a role_name "trustAnchor" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1890459 // trustAnchor (<unidirectional association>)
	  b parent class_ref 972059 // TrustAnchor
      end

      classrelation 1890587 // policyTree (<unidirectional association>)
	relation 1890587 --->
	  a role_name "policyTree" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1890587 // policyTree (<unidirectional association>)
	  b parent class_ref 974491 // PolicyNode
      end

      classrelation 1890715 // subjectPublicKey (<unidirectional association>)
	relation 1890715 --->
	  a role_name "subjectPublicKey" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1890715 // subjectPublicKey (<unidirectional association>)
	  b parent class_ref 962075 // PublicKey
      end

      operation 7653787 "PKIXCertPathValidatorResult"
	public explicit_return_type ""
	nparams 3
	  param inout name "trustAnchor" type class_ref 972059 // TrustAnchor
	  param inout name "policyTree" type class_ref 974491 // PolicyNode
	  param inout name "subjectPublicKey" type class_ref 962075 // PublicKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of <code>PKIXCertPathValidatorResult</code>
containing the specified parameters. 

@param trustAnchor a <code>TrustAnchor</code> describing the CA that 
served as a trust anchor for the certification path
@param policyTree the immutable valid policy tree, or <code>null</code> 
if there are no valid policies
@param subjectPublicKey the public key of the subject
@throws NullPointerException if the <code>subjectPublicKey</code> or
<code>trustAnchor</code> parameters are <code>null</code>"
      end

      operation 7653915 "getTrustAnchor"
	public return_type class_ref 972059 // TrustAnchor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>TrustAnchor</code> describing the CA that served
as a trust anchor for the certification path.

@return the <code>TrustAnchor</code> (never <code>null</code>)"
      end

      operation 7654043 "getPolicyTree"
	public return_type class_ref 974491 // PolicyNode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root node of the valid policy tree resulting from the 
PKIX certification path validation algorithm. The 
<code>PolicyNode</code> object that is returned and any objects that 
it returns through public methods are immutable.

<p>Most applications will not need to examine the valid policy tree.
They can achieve their policy processing goals by setting the
policy-related parameters in <code>PKIXParameters</code>. However, more
sophisticated applications, especially those that process policy
qualifiers, may need to traverse the valid policy tree using the
{@link PolicyNode#getParent PolicyNode.getParent} and 
{@link PolicyNode#getChildren PolicyNode.getChildren} methods.

@return the root node of the valid policy tree, or <code>null</code> 
if there are no valid policies"
      end

      operation 7654171 "getPublicKey"
	public return_type class_ref 962075 // PublicKey
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the public key of the subject (target) of the certification
path, including any inherited public key parameters if applicable. 

@return the public key of the subject (never <code>null</code>)"
      end

      operation 7654299 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this object.

@return the copy"
      end

      operation 7654427 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a printable representation of this 
<code>PKIXCertPathValidatorResult</code>.

@return a <code>String</code> describing the contents of this
        <code>PKIXCertPathValidatorResult</code>"
      end
    end

    class 974491 "PolicyNode"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An immutable valid policy tree node as defined by the PKIX certification 
path validation algorithm.

<p>One of the outputs of the PKIX certification path validation 
algorithm is a valid policy tree, which includes the policies that
were determined to be valid, how this determination was reached,
and any policy qualifiers encountered. This tree is of depth
<i>n</i>, where <i>n</i> is the length of the certification
path that has been validated.

<p>Most applications will not need to examine the valid policy tree.
They can achieve their policy processing goals by setting the 
policy-related parameters in <code>PKIXParameters</code>. However,
the valid policy tree is available for more sophisticated applications,
especially those that process policy qualifiers.

<p>{@link PKIXCertPathValidatorResult#getPolicyTree() 
PKIXCertPathValidatorResult.getPolicyTree} returns the root node of the
valid policy tree. The tree can be traversed using the 
{@link #getChildren getChildren} and {@link #getParent getParent} methods. 
Data about a particular node can be retrieved using other methods of 
<code>PolicyNode</code>.

<p><b>Concurrent Access</b>
<p>All <code>PolicyNode</code> objects must be immutable and 
thread-safe. Multiple threads may concurrently invoke the methods defined 
in this class on a single <code>PolicyNode</code> object (or more than one) 
with no ill effects. This stipulation applies to all public fields and 
methods of this class and any added or overridden by subclasses. 

@version     1.9 12/19/03
@since       1.4
@author      Sean Mullan"
      operation 7655707 "getParent"
	public return_type class_ref 974491 // PolicyNode
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parent of this node, or <code>null</code> if this is the 
root node.

@return the parent of this node, or <code>null</code> if this is the 
root node"
      end

      operation 7655835 "getChildren"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends PolicyNode> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the children of this node. Any attempts to 
modify the children of this node through the 
<code>Iterator</code>'s remove method must throw an
<code>UnsupportedOperationException</code>.

@return an iterator over the children of this node"
      end

      operation 7655963 "getDepth"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the depth of this node in the valid policy tree.

@return the depth of this node (0 for the root node, 1 for its
children, and so on)"
      end

      operation 7656091 "getValidPolicy"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the valid policy represented by this node.

@return the <code>String</code> OID of the valid policy
represented by this node, or the special value \"any-policy\". For 
the root node, this method always returns the special value \"any-policy\"."
      end

      operation 7656219 "getPolicyQualifiers"
	public return_type class_ref 136731 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends PolicyQualifierInfo> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of policy qualifiers associated with the
valid policy represented by this node.

@return an immutable <code>Set</code> of 
<code>PolicyQualifierInfo</code>s. For the root node, this
is always an empty <code>Set</code>."
      end

      operation 7656347 "getExpectedPolicies"
	public return_type class_ref 136731 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of expected policies that would satisfy this
node's valid policy in the next certificate to be processed.

@return an immutable <code>Set</code> of expected policy 
<code>String</code> OIDs, or an immutable <code>Set</code> with
the single special value \"any-policy\". For the root node, this method 
always returns a <code>Set</code> with the single value \"any-policy\"."
      end

      operation 7656475 "isCritical"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the criticality indicator of the certificate policy extension
in the most recently processed certificate.

@return <code>true</code> if extension marked critical, 
<code>false</code> otherwise. For the root node, <code>false</code>
is always returned."
      end
    end

    class 974619 "PolicyQualifierInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An immutable policy qualifier represented by the ASN.1 PolicyQualifierInfo 
structure.

<p>The ASN.1 definition is as follows:
<p><pre>
  PolicyQualifierInfo ::= SEQUENCE {
       policyQualifierId       PolicyQualifierId,
       qualifier               ANY DEFINED BY policyQualifierId }
</pre>
<p>
A certificate policies extension, if present in an X.509 version 3 
certificate, contains a sequence of one or more policy information terms,
each of which consists of an object identifier (OID) and optional
qualifiers. In an end-entity certificate, these policy information terms
indicate the policy under which the certificate has been issued and the 
purposes for which the certificate may be used. In a CA certificate, these 
policy information terms limit the set of policies for certification paths 
which include this certificate.
<p>
A <code>Set</code> of <code>PolicyQualifierInfo</code> objects are returned 
by the {@link PolicyNode#getPolicyQualifiers PolicyNode.getPolicyQualifiers} 
method. This allows applications with specific policy requirements to 
process and validate each policy qualifier. Applications that need to 
process policy qualifiers should explicitly set the 
<code>policyQualifiersRejected</code> flag to false (by calling the 
{@link PKIXParameters#setPolicyQualifiersRejected 
PKIXParameters.setPolicyQualifiersRejected} method) before validating 
a certification path.

<p>Note that the PKIX certification path validation algorithm specifies
that any policy qualifier in a certificate policies extension that is 
marked critical must be processed and validated. Otherwise the 
certification path must be rejected. If the 
<code>policyQualifiersRejected</code> flag is set to false, it is up to 
the application to validate all policy qualifiers in this manner in order 
to be PKIX compliant.

<p><b>Concurrent Access</b>

<p>All <code>PolicyQualifierInfo</code> objects must be immutable and
thread-safe. That is, multiple threads may concurrently invoke the
methods defined in this class on a single <code>PolicyQualifierInfo</code> 
object (or more than one) with no ill effects. Requiring 
<code>PolicyQualifierInfo</code> objects to be immutable and thread-safe 
allows them to be passed around to various pieces of code without 
worrying about coordinating access.

@author 	seth proctor
@author 	Sean Mullan
@version 	1.11 12/19/03
@since 	1.4"
      attribute 2858267 "mEncoded"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2858395 "mId"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2858523 "mData"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2858651 "pqiString"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7656603 "PolicyQualifierInfo"
	public explicit_return_type ""
	nparams 1
	  param in name "encoded" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of <code>PolicyQualifierInfo</code> from the
encoded bytes. The encoded byte array is copied on construction.

@param encoded a byte array containing the qualifier in DER encoding
@exception IOException thrown if the byte array does not represent a
valid and parsable policy qualifier"
      end

      operation 7656731 "getPolicyQualifierId"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>policyQualifierId</code> field of this 
<code>PolicyQualifierInfo</code>. The <code>policyQualifierId</code>
is an Object Identifier (OID) represented by a set of nonnegative 
integers separated by periods.

@return the OID (never <code>null</code>)"
      end

      operation 7656859 "getEncoded"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ASN.1 DER encoded form of this 
<code>PolicyQualifierInfo</code>.

@return the ASN.1 DER encoded bytes (never <code>null</code>).
Note that a copy is returned, so the data is cloned each time 
this method is called."
      end

      operation 7656987 "getPolicyQualifier"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ASN.1 DER encoded form of the <code>qualifier</code> 
field of this <code>PolicyQualifierInfo</code>.

@return the ASN.1 DER encoded bytes of the <code>qualifier</code>
field. Note that a copy is returned, so the data is cloned each 
time this method is called."
      end

      operation 7657115 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a printable representation of this 
<code>PolicyQualifierInfo</code>.

@return a <code>String</code> describing the contents of this
        <code>PolicyQualifierInfo</code>"
      end
    end

    class 974747 "X509Certificate"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>
Abstract class for X.509 certificates. This provides a standard
way to access all the attributes of an X.509 certificate.
<p>
In June of 1996, the basic X.509 v3 format was completed by
ISO/IEC and ANSI X9, which is described below in ASN.1:
<pre>
Certificate  ::=  SEQUENCE  {
    tbsCertificate       TBSCertificate,
    signatureAlgorithm   AlgorithmIdentifier,
    signature            BIT STRING  }
</pre>
<p>
These certificates are widely used to support authentication and
other functionality in Internet security systems. Common applications
include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL),
code signing for trusted software distribution, and Secure Electronic
Transactions (SET).
<p>
These certificates are managed and vouched for by <em>Certificate
Authorities</em> (CAs). CAs are services which create certificates by
placing data in the X.509 standard format and then digitally signing
that data. CAs act as trusted third parties, making introductions
between principals who have no direct knowledge of each other.
CA certificates are either signed by themselves, or by some other
CA such as a \"root\" CA.
<p>
More information can be found in RFC 2459,
\"Internet X.509 Public Key Infrastructure Certificate and CRL
Profile\" at <A HREF=\"http://www.ietf.org/rfc/rfc2459.txt\"> 
http://www.ietf.org/rfc/rfc2459.txt </A>.
<p>
The ASN.1 definition of <code>tbsCertificate</code> is:
<pre>
TBSCertificate  ::=  SEQUENCE  {
    version         [0]  EXPLICIT Version DEFAULT v1,
    serialNumber         CertificateSerialNumber,
    signature            AlgorithmIdentifier,
    issuer               Name,
    validity             Validity,
    subject              Name,
    subjectPublicKeyInfo SubjectPublicKeyInfo,
    issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
                         -- If present, version must be v2 or v3
    subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
                         -- If present, version must be v2 or v3
    extensions      [3]  EXPLICIT Extensions OPTIONAL
                         -- If present, version must be v3
    }
</pre>
<p>
Certificates are instantiated using a certificate factory. The following is
an example of how to instantiate an X.509 certificate:
<pre> 
InputStream inStream = new FileInputStream(\"fileName-of-cert\");
CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");
X509Certificate cert = (X509Certificate)cf.generateCertificate(inStream);
inStream.close();
</pre>

@author Hemma Prafullchandra

@version 1.39

@see Certificate
@see CertificateFactory
@see X509Extension"
      classrelation 1891739 // <generalisation>
	relation 1891739 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1891739 // <generalisation>
	  b parent class_ref 528283 // Certificate
      end

      classrelation 1891867 // <realization>
	relation 1891867 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1891867 // <realization>
	  b parent class_ref 974875 // X509Extension
      end

      attribute 2859163 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -2491127588187038216L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1891995 // subjectX500Principal (<unidirectional association>)
	relation 1891995 --->
	  a role_name "subjectX500Principal" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1891995 // subjectX500Principal (<unidirectional association>)
	  b parent class_ref 845211 // X500Principal
      end

      classrelation 1892123 // issuerX500Principal (<unidirectional association>)
	relation 1892123 --->
	  a role_name "issuerX500Principal" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1892123 // issuerX500Principal (<unidirectional association>)
	  b parent class_ref 845211 // X500Principal
      end

      operation 7659035 "X509Certificate"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for X.509 certificates."
      end

      operation 7659163 "checkValidity"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 2
	  exception class_ref 970139 // CertificateExpiredException
	  exception class_ref 970651 // CertificateNotYetValidException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks that the certificate is currently valid. It is if
the current date and time are within the validity period given in the
certificate.
<p>
The validity period consists of two date/time values: 
the first and last dates (and times) on which the certificate 
is valid. It is defined in
ASN.1 as:
<pre>
validity             Validity<p>
Validity ::= SEQUENCE {
    notBefore      CertificateValidityDate,
    notAfter       CertificateValidityDate }<p>
CertificateValidityDate ::= CHOICE {
    utcTime        UTCTime,
    generalTime    GeneralizedTime }
</pre>

@exception CertificateExpiredException if the certificate has expired.
@exception CertificateNotYetValidException if the certificate is not
yet valid."
      end

      operation 7659291 "checkValidity"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "date" type class_ref 139163 // Date
	nexceptions 2
	  exception class_ref 970139 // CertificateExpiredException
	  exception class_ref 970651 // CertificateNotYetValidException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks that the given date is within the certificate's
validity period. In other words, this determines whether the 
certificate would be valid at the given date/time.

@param date the Date to check against to see if this certificate
       is valid at that date/time.

@exception CertificateExpiredException if the certificate has expired
with respect to the <code>date</code> supplied.
@exception CertificateNotYetValidException if the certificate is not
yet valid with respect to the <code>date</code> supplied.

@see #checkValidity()"
      end

      operation 7659419 "getVersion"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>version</code> (version number) value from the
certificate.
The ASN.1 definition for this is:
<pre>
version  [0] EXPLICIT Version DEFAULT v1<p>
Version ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
</pre>
@return the version number, i.e. 1, 2 or 3."
      end

      operation 7659547 "getSerialNumber"
	abstract public return_type class_ref 775835 // BigInteger
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>serialNumber</code> value from the certificate.
The serial number is an integer assigned by the certification
authority to each certificate. It must be unique for each
certificate issued by a given CA (i.e., the issuer name and
serial number identify a unique certificate).
The ASN.1 definition for this is:
<pre>
serialNumber     CertificateSerialNumber<p>

CertificateSerialNumber  ::=  INTEGER
</pre>

@return the serial number."
      end

      operation 7659675 "getIssuerDN"
	abstract public return_type class_ref 527131 // Principal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, replaced by {@linkplain
#getIssuerX500Principal()}. This method returns the <code>issuer</code>
as an implementation specific Principal object, which should not be
relied upon by portable code.

<p>
Gets the <code>issuer</code> (issuer distinguished name) value from 
the certificate. The issuer name identifies the entity that signed (and
issued) the certificate. 

<p>The issuer name field contains an
X.500 distinguished name (DN).
The ASN.1 definition for this is:
<pre>
issuer    Name<p>

Name ::= CHOICE { RDNSequence }
RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
RelativeDistinguishedName ::=
    SET OF AttributeValueAssertion

AttributeValueAssertion ::= SEQUENCE {
                              AttributeType,
                              AttributeValue }
AttributeType ::= OBJECT IDENTIFIER
AttributeValue ::= ANY
</pre>
The <code>Name</code> describes a hierarchical name composed of
attributes,
such as country name, and corresponding values, such as US.
The type of the <code>AttributeValue</code> component is determined by
the <code>AttributeType</code>; in general it will be a 
<code>directoryString</code>. A <code>directoryString</code> is usually 
one of <code>PrintableString</code>,
<code>TeletexString</code> or <code>UniversalString</code>.

@return a Principal whose name is the issuer distinguished name."
      end

      operation 7659803 "getIssuerX500Principal"
	public return_type class_ref 845211 // X500Principal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the issuer (issuer distinguished name) value from the
certificate as an <code>X500Principal</code>. 
<p>
It is recommended that subclasses override this method.

@return an <code>X500Principal</code> representing the issuer
		distinguished name
@since 1.4"
      end

      operation 7659931 "getSubjectDN"
	abstract public return_type class_ref 527131 // Principal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, replaced by {@linkplain
#getSubjectX500Principal()}. This method returns the <code>subject</code>
as an implementation specific Principal object, which should not be
relied upon by portable code.

<p>
Gets the <code>subject</code> (subject distinguished name) value 
from the certificate.  If the <code>subject</code> value is empty,
then the <code>getName()</code> method of the returned
<code>Principal</code> object returns an empty string (\"\").

<p> The ASN.1 definition for this is:
<pre>
subject    Name
</pre>

<p>See {@link #getIssuerDN() getIssuerDN} for <code>Name</code> 
and other relevant definitions.

@return a Principal whose name is the subject name."
      end

      operation 7660059 "getSubjectX500Principal"
	public return_type class_ref 845211 // X500Principal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the subject (subject distinguished name) value from the
certificate as an <code>X500Principal</code>.  If the subject value
is empty, then the <code>getName()</code> method of the returned
<code>X500Principal</code> object returns an empty string (\"\").
<p>
It is recommended that subclasses override this method.

@return an <code>X500Principal</code> representing the subject
		distinguished name
@since 1.4"
      end

      operation 7660187 "getNotBefore"
	abstract public return_type class_ref 139163 // Date
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>notBefore</code> date from the validity period of 
the certificate.
The relevant ASN.1 definitions are:
<pre>
validity             Validity<p>

Validity ::= SEQUENCE {
    notBefore      CertificateValidityDate,
    notAfter       CertificateValidityDate }<p>
CertificateValidityDate ::= CHOICE {
    utcTime        UTCTime,
    generalTime    GeneralizedTime }
</pre>

@return the start date of the validity period.
@see #checkValidity"
      end

      operation 7660315 "getNotAfter"
	abstract public return_type class_ref 139163 // Date
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>notAfter</code> date from the validity period of 
the certificate. See {@link #getNotBefore() getNotBefore}
for relevant ASN.1 definitions.

@return the end date of the validity period.
@see #checkValidity"
      end

      operation 7660443 "getTBSCertificate"
	abstract public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 969883 // CertificateEncodingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the DER-encoded certificate information, the
<code>tbsCertificate</code> from this certificate.
This can be used to verify the signature independently.

@return the DER-encoded certificate information.
@exception CertificateEncodingException if an encoding error occurs."
      end

      operation 7660571 "getSignature"
	abstract public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>signature</code> value (the raw signature bits) from 
the certificate.
The ASN.1 definition for this is:
<pre>
signature     BIT STRING  
</pre>

@return the signature."
      end

      operation 7660699 "getSigAlgName"
	abstract public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the signature algorithm name for the certificate
signature algorithm. An example is the string \"SHA-1/DSA\".
The ASN.1 definition for this is:
<pre>
signatureAlgorithm   AlgorithmIdentifier<p>
AlgorithmIdentifier  ::=  SEQUENCE  {
    algorithm               OBJECT IDENTIFIER,
    parameters              ANY DEFINED BY algorithm OPTIONAL  }
                            -- contains a value of the type
                            -- registered for use with the
                            -- algorithm object identifier value
</pre>

<p>The algorithm name is determined from the <code>algorithm</code>
OID string.

@return the signature algorithm name."
      end

      operation 7660827 "getSigAlgOID"
	abstract public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the signature algorithm OID string from the certificate.
An OID is represented by a set of nonnegative whole numbers separated
by periods.
For example, the string \"1.2.840.10040.4.3\" identifies the SHA-1
with DSA signature algorithm, as per RFC 2459.

<p>See {@link #getSigAlgName() getSigAlgName} for 
relevant ASN.1 definitions.

@return the signature algorithm OID string."
      end

      operation 7660955 "getSigAlgParams"
	abstract public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the DER-encoded signature algorithm parameters from this
certificate's signature algorithm. In most cases, the signature
algorithm parameters are null; the parameters are usually
supplied with the certificate's public key.
If access to individual parameter values is needed then use
{@link java.security.AlgorithmParameters AlgorithmParameters}
and instantiate with the name returned by
{@link #getSigAlgName() getSigAlgName}.

<p>See {@link #getSigAlgName() getSigAlgName} for 
relevant ASN.1 definitions.

@return the DER-encoded signature algorithm parameters, or
        null if no parameters are present."
      end

      operation 7661083 "getIssuerUniqueID"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>issuerUniqueID</code> value from the certificate.
The issuer unique identifier is present in the certificate
to handle the possibility of reuse of issuer names over time.
RFC 2459 recommends that names not be reused and that
conforming certificates not make use of unique identifiers.
Applications conforming to that profile should be capable of
parsing unique identifiers and making comparisons.

<p>The ASN.1 definition for this is:
<pre>
issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL<p>
UniqueIdentifier  ::=  BIT STRING
</pre>

@return the issuer unique identifier or null if it is not
present in the certificate."
      end

      operation 7661211 "getSubjectUniqueID"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>subjectUniqueID</code> value from the certificate.

<p>The ASN.1 definition for this is:
<pre>
subjectUniqueID  [2]  IMPLICIT UniqueIdentifier OPTIONAL<p>
UniqueIdentifier  ::=  BIT STRING
</pre>

@return the subject unique identifier or null if it is not
present in the certificate."
      end

      operation 7661339 "getKeyUsage"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a boolean array representing bits of
the <code>KeyUsage</code> extension, (OID = 2.5.29.15).
The key usage extension defines the purpose (e.g., encipherment,
signature, certificate signing) of the key contained in the
certificate.
The ASN.1 definition for this is:
<pre>
KeyUsage ::= BIT STRING {
    digitalSignature        (0),
    nonRepudiation          (1),
    keyEncipherment         (2),
    dataEncipherment        (3),
    keyAgreement            (4),
    keyCertSign             (5),
    cRLSign                 (6),
    encipherOnly            (7),
    decipherOnly            (8) }
</pre>
RFC 2459 recommends that when used, this be marked
as a critical extension.

@return the KeyUsage extension of this certificate, represented as
an array of booleans. The order of KeyUsage values in the array is
the same as in the above ASN.1 definition. The array will contain a
value for each KeyUsage defined above. If the KeyUsage list encoded
in the certificate is longer than the above list, it will not be
truncated. Returns null if this certificate does not
contain a KeyUsage extension."
      end

      operation 7661467 "getExtendedKeyUsage"
	public return_type class_ref 135579 // List
	nparams 0
	nexceptions 1
	  exception class_ref 970779 // CertificateParsingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an unmodifiable list of Strings representing the OBJECT
IDENTIFIERs of the <code>ExtKeyUsageSyntax</code> field of the
extended key usage extension, (OID = 2.5.29.37).  It indicates
one or more purposes for which the certified public key may be
used, in addition to or in place of the basic purposes
indicated in the key usage extension field.  The ASN.1
definition for this is:
<pre>
ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId<p>

KeyPurposeId ::= OBJECT IDENTIFIER<p>
</pre>

Key purposes may be defined by any organization with a
need. Object identifiers used to identify key purposes shall be
assigned in accordance with IANA or ITU-T Rec. X.660 |
ISO/IEC/ITU 9834-1.
<p>
This method was added to version 1.4 of the Java 2 Platform Standard 
Edition. In order to maintain backwards compatibility with existing 
service providers, this method is not <code>abstract</code>
and it provides a default implementation. Subclasses
should override this method with a correct implementation.

@return the ExtendedKeyUsage extension of this certificate,
        as an unmodifiable list of object identifiers represented
        as Strings. Returns null if this certificate does not
        contain an ExtendedKeyUsage extension.
@throws CertificateParsingException if the extension cannot be decoded
@since 1.4"
      end

      operation 7661595 "getBasicConstraints"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the certificate constraints path length from the
critical <code>BasicConstraints</code> extension, (OID = 2.5.29.19).
<p>
The basic constraints extension identifies whether the subject
of the certificate is a Certificate Authority (CA) and 
how deep a certification path may exist through that CA. The 
<code>pathLenConstraint</code> field (see below) is meaningful
only if <code>cA</code> is set to TRUE. In this case, it gives the
maximum number of CA certificates that may follow this certificate in a
certification path. A value of zero indicates that only an end-entity
certificate may follow in the path.
<p>
Note that for RFC 2459 this extension is always marked
critical if <code>cA</code> is TRUE, meaning this certificate belongs
to a Certificate Authority.
<p>
The ASN.1 definition for this is:
<pre>
BasicConstraints ::= SEQUENCE {
    cA                  BOOLEAN DEFAULT FALSE,
    pathLenConstraint   INTEGER (0..MAX) OPTIONAL }
</pre>

@return the value of <code>pathLenConstraint</code> if the
BasicConstraints extension is present in the certificate and the
subject of the certificate is a CA, otherwise -1.
If the subject of the certificate is a CA and
<code>pathLenConstraint</code> does not appear,
<code>Integer.MAX_VALUE</code> is returned to indicate that there is no
limit to the allowed length of the certification path."
      end

      operation 7661723 "getSubjectAlternativeNames"
	public return_type class_ref 135067 // Collection
	nparams 0
	nexceptions 1
	  exception class_ref 970779 // CertificateParsingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<List<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an immutable collection of subject alternative names from the
<code>SubjectAltName</code> extension, (OID = 2.5.29.17).
<p>
The ASN.1 definition of the <code>SubjectAltName</code> extension is:
<pre>
SubjectAltName ::= GeneralNames

GeneralNames :: = SEQUENCE SIZE (1..MAX) OF GeneralName

GeneralName ::= CHOICE {
     otherName                       [0]     OtherName,
     rfc822Name                      [1]     IA5String,
     dNSName                         [2]     IA5String,
     x400Address                     [3]     ORAddress,
     directoryName                   [4]     Name,
     ediPartyName                    [5]     EDIPartyName,
     uniformResourceIdentifier       [6]     IA5String,
     iPAddress                       [7]     OCTET STRING,
     registeredID                    [8]     OBJECT IDENTIFIER}
</pre>
<p>
If this certificate does not contain a <code>SubjectAltName</code>
extension, <code>null</code> is returned. Otherwise, a 
<code>Collection</code> is returned with an entry representing each 
<code>GeneralName</code> included in the extension. Each entry is a 
<code>List</code> whose first entry is an <code>Integer</code> 
(the name type, 0-8) and whose second entry is a <code>String</code> 
or a byte array (the name, in string or ASN.1 DER encoded form, 
respectively).
<p>
RFC 822, DNS, and URI names are returned as <code>String</code>s, 
using the well-established string formats for those types (subject to
the restrictions included in RFC 2459). IPv4 address names are 
returned using dotted quad notation. IPv6 address names are returned
in the form \"a1:a2:...:a8\", where a1-a8 are hexadecimal values 
representing the eight 16-bit pieces of the address. OID names are 
returned as <code>String</code>s represented as a series of nonnegative 
integers separated by periods. And directory names (distinguished names) 
are returned in RFC 2253 string format. No standard string format is 
defined for otherNames, X.400 names, EDI party names, or any 
other type of names. They are returned as byte arrays 
containing the ASN.1 DER encoded form of the name.
<p>
Note that the <code>Collection</code> returned may contain more
than one name of the same type. Also, note that the returned
<code>Collection</code> is immutable and any entries containing byte 
arrays are cloned to protect against subsequent modifications.
<p>
This method was added to version 1.4 of the Java 2 Platform Standard 
Edition. In order to maintain backwards compatibility with existing 
service providers, this method is not <code>abstract</code>
and it provides a default implementation. Subclasses
should override this method with a correct implementation.

@return an immutable <code>Collection</code> of subject alternative 
names (or <code>null</code>)
@throws CertificateParsingException if the extension cannot be decoded
@since 1.4"
      end

      operation 7661851 "getIssuerAlternativeNames"
	public return_type class_ref 135067 // Collection
	nparams 0
	nexceptions 1
	  exception class_ref 970779 // CertificateParsingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<List<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an immutable collection of issuer alternative names from the
<code>IssuerAltName</code> extension, (OID = 2.5.29.18).
<p>
The ASN.1 definition of the <code>IssuerAltName</code> extension is:
<pre>
IssuerAltName ::= GeneralNames
</pre>
The ASN.1 definition of <code>GeneralNames</code> is defined
in {@link #getSubjectAlternativeNames getSubjectAlternativeNames}.
<p>
If this certificate does not contain an <code>IssuerAltName</code>
extension, <code>null</code> is returned. Otherwise, a 
<code>Collection</code> is returned with an entry representing each 
<code>GeneralName</code> included in the extension. Each entry is a 
<code>List</code> whose first entry is an <code>Integer</code> 
(the name type, 0-8) and whose second entry is a <code>String</code> 
or a byte array (the name, in string or ASN.1 DER encoded form, 
respectively). For more details about the formats used for each
name type, see the <code>getSubjectAlternativeNames</code> method.
<p>
Note that the <code>Collection</code> returned may contain more
than one name of the same type. Also, note that the returned
<code>Collection</code> is immutable and any entries containing byte 
arrays are cloned to protect against subsequent modifications.
<p>
This method was added to version 1.4 of the Java 2 Platform Standard 
Edition. In order to maintain backwards compatibility with existing 
service providers, this method is not <code>abstract</code>
and it provides a default implementation. Subclasses
should override this method with a correct implementation.

@return an immutable <code>Collection</code> of issuer alternative 
names (or <code>null</code>)
@throws CertificateParsingException if the extension cannot be decoded
@since 1.4"
      end
    end

    class 974875 "X509Extension"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Interface for an X.509 extension.

<p>The extensions defined for X.509 v3
{@link X509Certificate Certificates} and v2
{@link X509CRL CRLs} (Certificate Revocation
Lists) provide methods
for associating additional attributes with users or public keys,
for managing the certification hierarchy, and for managing CRL
distribution. The X.509 extensions format also allows communities
to define private extensions to carry information unique to those
communities.

<p>Each extension in a certificate/CRL may be designated as
critical or non-critical.  A certificate/CRL-using system (an application
validating a certificate/CRL) must reject the certificate/CRL if it
encounters a critical extension it does not recognize.  A non-critical
extension may be ignored if it is not recognized.
<p>
The ASN.1 definition for this is:
<pre>
Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension

Extension  ::=  SEQUENCE  {
    extnId        OBJECT IDENTIFIER,
    critical      BOOLEAN DEFAULT FALSE,
    extnValue     OCTET STRING
                  -- contains a DER encoding of a value
                  -- of the type registered for use with
                  -- the extnId object identifier value
}
</pre>
Since not all extensions are known, the <code>getExtensionValue</code>
method returns the DER-encoded OCTET STRING of the
extension value (i.e., the <code>extnValue</code>). This can then
be handled by a <em>Class</em> that understands the extension.

@author Hemma Prafullchandra
@version 1.22 03/12/19"
      operation 7658523 "hasUnsupportedCriticalExtension"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if there is a critical extension that is not supported.

@return <tt>true</tt> if a critical extension is found that is
not supported, otherwise <tt>false</tt>."
      end

      operation 7658651 "getCriticalExtensionOIDs"
	public return_type class_ref 136731 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a Set of the OID strings for the extension(s) marked
CRITICAL in the certificate/CRL managed by the object
implementing this interface.

Here is sample code to get a Set of critical extensions from an
X509Certificate and print the OIDs:
<pre><code>
InputStream inStrm = new FileInputStream(\"DER-encoded-Cert\");
CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");
X509Certificate cert = (X509Certificate)cf.generateCertificate(inStrm);
inStrm.close();<p>

Set critSet = cert.getCriticalExtensionOIDs();
if (critSet != null && !critSet.isEmpty()) {
    System.out.println(\"Set of critical extensions:\");
    for (Iterator i = critSet.iterator(); i.hasNext();) {
        String oid = (String)i.next();
        System.out.println(oid);
    }
}
</code></pre>
@return a Set (or an empty Set if none are marked critical) of
the extension OID strings for extensions that are marked critical.
If there are no extensions present at all, then this method returns
null."
      end

      operation 7658779 "getNonCriticalExtensionOIDs"
	public return_type class_ref 136731 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a Set of the OID strings for the extension(s) marked
NON-CRITICAL in the certificate/CRL managed by the object
implementing this interface.

Here is sample code to get a Set of non-critical extensions from an
X509CRL revoked certificate entry and print the OIDs:
<pre><code>
InputStream inStrm = new FileInputStream(\"DER-encoded-CRL\");
CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");
X509CRL crl = (X509CRL)cf.generateCRL(inStrm);
inStrm.close();<p>

byte[] certData = &lt;DER-encoded certificate data&gt;
ByteArrayInputStream bais = new ByteArrayInputStream(certData);
X509Certificate cert = (X509Certificate)cf.generateCertificate(bais);
bais.close();
X509CRLEntry badCert =
             crl.getRevokedCertificate(cert.getSerialNumber());<p>

if (badCert != null) {
    Set nonCritSet = badCert.getNonCriticalExtensionOIDs();<p>
    if (nonCritSet != null)
        for (Iterator i = nonCritSet.iterator(); i.hasNext();) {
            String oid = (String)i.next();
            System.out.println(oid);
        }
}
</code></pre>

@return a Set (or an empty Set if none are marked non-critical) of
the extension OID strings for extensions that are marked non-critical.
If there are no extensions present at all, then this method returns
null."
      end

      operation 7658907 "getExtensionValue"
	public explicit_return_type "byte"
	nparams 1
	  param in name "oid" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the DER-encoded OCTET string for the extension value
(<em>extnValue</em>) identified by the passed-in <code>oid</code>
String.
The <code>oid</code> string is
represented by a set of nonnegative whole numbers separated
by periods.

<p>For example:<br>
<table border=groove summary=\"Examples of OIDs and extension names\">
<tr>
<th>OID <em>(Object Identifier)</em></th>
<th>Extension Name</th></tr>
<tr><td>2.5.29.14</td>
<td>SubjectKeyIdentifier</td></tr>
<tr><td>2.5.29.15</td>
<td>KeyUsage</td></tr>
<tr><td>2.5.29.16</td>
<td>PrivateKeyUsage</td></tr>
<tr><td>2.5.29.17</td>
<td>SubjectAlternativeName</td></tr>
<tr><td>2.5.29.18</td>
<td>IssuerAlternativeName</td></tr>
<tr><td>2.5.29.19</td>
<td>BasicConstraints</td></tr>
<tr><td>2.5.29.30</td>
<td>NameConstraints</td></tr>
<tr><td>2.5.29.33</td>
<td>PolicyMappings</td></tr>
<tr><td>2.5.29.35</td>
<td>AuthorityKeyIdentifier</td></tr>
<tr><td>2.5.29.36</td>
<td>PolicyConstraints</td></tr>
</table>

@param oid the Object Identifier value for the extension.
@return the DER-encoded octet string of the extension value or
null if it is not present."
      end
    end

    class 975003 "X509CRL"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>
Abstract class for an X.509 Certificate Revocation List (CRL).
A CRL is a time-stamped list identifying revoked certificates.
It is signed by a Certificate Authority (CA) and made freely
available in a public repository.  

<p>Each revoked certificate is
identified in a CRL by its certificate serial number. When a
certificate-using system uses a certificate (e.g., for verifying a
remote user's digital signature), that system not only checks the
certificate signature and validity but also acquires a suitably-
recent CRL and checks that the certificate serial number is not on
that CRL.  The meaning of \"suitably-recent\" may vary with local
policy, but it usually means the most recently-issued CRL.  A CA
issues a new CRL on a regular periodic basis (e.g., hourly, daily, or
weekly).  Entries are added to CRLs as revocations occur, and an
entry may be removed when the certificate expiration date is reached.
<p>
The X.509 v2 CRL format is described below in ASN.1:
<pre>
CertificateList  ::=  SEQUENCE  {
    tbsCertList          TBSCertList,
    signatureAlgorithm   AlgorithmIdentifier,
    signature            BIT STRING  }
</pre>
<p>
More information can be found in RFC 2459,
\"Internet X.509 Public Key Infrastructure Certificate and CRL
Profile\" at <A HREF=\"http://www.ietf.org/rfc/rfc2459.txt\">
http://www.ietf.org/rfc/rfc2459.txt </A>.    
<p>
The ASN.1 definition of <code>tbsCertList</code> is:
<pre>
TBSCertList  ::=  SEQUENCE  {
    version                 Version OPTIONAL,
                            -- if present, must be v2
    signature               AlgorithmIdentifier,
    issuer                  Name,
    thisUpdate              ChoiceOfTime,
    nextUpdate              ChoiceOfTime OPTIONAL,
    revokedCertificates     SEQUENCE OF SEQUENCE  {
        userCertificate         CertificateSerialNumber,
        revocationDate          ChoiceOfTime,
        crlEntryExtensions      Extensions OPTIONAL
                                -- if present, must be v2
        }  OPTIONAL,
    crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
                                 -- if present, must be v2
    }
</pre>
<p>
CRLs are instantiated using a certificate factory. The following is an
example of how to instantiate an X.509 CRL:
<pre><code> 
InputStream inStream = new FileInputStream(\"fileName-of-crl\");
CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");
X509CRL crl = (X509CRL)cf.generateCRL(inStream);
inStream.close();
</code></pre>

@author Hemma Prafullchandra

@version 1.29, 12/19/03

@see CRL
@see CertificateFactory
@see X509Extension"
      classrelation 1894299 // <generalisation>
	relation 1894299 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1894299 // <generalisation>
	  b parent class_ref 970395 // CRL
      end

      classrelation 1894427 // <realization>
	relation 1894427 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1894427 // <realization>
	  b parent class_ref 974875 // X509Extension
      end

      classrelation 1894555 // issuerPrincipal (<unidirectional association>)
	relation 1894555 --->
	  a role_name "issuerPrincipal" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1894555 // issuerPrincipal (<unidirectional association>)
	  b parent class_ref 845211 // X500Principal
      end

      operation 7671835 "X509CRL"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for X.509 CRLs."
      end

      operation 7671963 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this CRL for equality with the given 
object. If the <code>other</code> object is an 
<code>instanceof</code> <code>X509CRL</code>, then
its encoded form is retrieved and compared with the
encoded form of this CRL.

@param other the object to test for equality with this CRL.

@return true iff the encoded forms of the two CRLs
match, false otherwise."
      end

      operation 7672091 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode value for this CRL from its
encoded form.

@return the hashcode value."
      end

      operation 7672219 "getEncoded"
	abstract public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 970523 // CRLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ASN.1 DER-encoded form of this CRL.

@return the encoded form of this certificate
@exception CRLException if an encoding error occurs."
      end

      operation 7672347 "verify"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 962075 // PublicKey
	nexceptions 5
	  exception class_ref 970523 // CRLException
	  exception class_ref 959899 // NoSuchAlgorithmException
	  exception class_ref 963355 // InvalidKeyException
	  exception class_ref 960027 // NoSuchProviderException
	  exception class_ref 968859 // SignatureException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this CRL was signed using the 
private key that corresponds to the given public key.

@param key the PublicKey used to carry out the verification.

@exception NoSuchAlgorithmException on unsupported signature
algorithms.
@exception InvalidKeyException on incorrect key.
@exception NoSuchProviderException if there's no default provider.
@exception SignatureException on signature errors.
@exception CRLException on encoding errors."
      end

      operation 7672475 "verify"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 962075 // PublicKey
	  param in name "sigProvider" explicit_type "String"
	nexceptions 5
	  exception class_ref 970523 // CRLException
	  exception class_ref 959899 // NoSuchAlgorithmException
	  exception class_ref 963355 // InvalidKeyException
	  exception class_ref 960027 // NoSuchProviderException
	  exception class_ref 968859 // SignatureException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this CRL was signed using the 
private key that corresponds to the given public key.
This method uses the signature verification engine
supplied by the given provider.

@param key the PublicKey used to carry out the verification.
@param sigProvider the name of the signature provider.

@exception NoSuchAlgorithmException on unsupported signature
algorithms.
@exception InvalidKeyException on incorrect key.
@exception NoSuchProviderException on incorrect provider.
@exception SignatureException on signature errors.
@exception CRLException on encoding errors."
      end

      operation 7672603 "getVersion"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>version</code> (version number) value from the CRL.
The ASN.1 definition for this is:
<pre>
version    Version OPTIONAL,
            -- if present, must be v2<p>
Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
            -- v3 does not apply to CRLs but appears for consistency
            -- with definition of Version for certs
</pre>

@return the version number, i.e. 1 or 2."
      end

      operation 7672731 "getIssuerDN"
	abstract public return_type class_ref 527131 // Principal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, replaced by {@linkplain
#getIssuerX500Principal()}. This method returns the <code>issuer</code>
as an implementation specific Principal object, which should not be
relied upon by portable code.

<p>
Gets the <code>issuer</code> (issuer distinguished name) value from 
the CRL. The issuer name identifies the entity that signed (and
issued) the CRL. 

<p>The issuer name field contains an
X.500 distinguished name (DN).
The ASN.1 definition for this is:
<pre>
issuer    Name

Name ::= CHOICE { RDNSequence }
RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
RelativeDistinguishedName ::=
    SET OF AttributeValueAssertion

AttributeValueAssertion ::= SEQUENCE {
                              AttributeType,
                              AttributeValue }
AttributeType ::= OBJECT IDENTIFIER
AttributeValue ::= ANY
</pre>
The <code>Name</code> describes a hierarchical name composed of
attributes,
such as country name, and corresponding values, such as US.
The type of the <code>AttributeValue</code> component is determined by
the <code>AttributeType</code>; in general it will be a 
<code>directoryString</code>. A <code>directoryString</code> is usually 
one of <code>PrintableString</code>,
<code>TeletexString</code> or <code>UniversalString</code>.

@return a Principal whose name is the issuer distinguished name."
      end

      operation 7672859 "getIssuerX500Principal"
	public return_type class_ref 845211 // X500Principal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the issuer (issuer distinguished name) value from the
CRL as an <code>X500Principal</code>.
<p>
It is recommended that subclasses override this method.

@return an <code>X500Principal</code> representing the issuer
		distinguished name
@since 1.4"
      end

      operation 7672987 "getThisUpdate"
	abstract public return_type class_ref 139163 // Date
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>thisUpdate</code> date from the CRL.
The ASN.1 definition for this is:
<pre>
thisUpdate   ChoiceOfTime
ChoiceOfTime ::= CHOICE {
    utcTime        UTCTime,
    generalTime    GeneralizedTime }
</pre>

@return the <code>thisUpdate</code> date from the CRL."
      end

      operation 7673115 "getNextUpdate"
	abstract public return_type class_ref 139163 // Date
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>nextUpdate</code> date from the CRL.

@return the <code>nextUpdate</code> date from the CRL, or null if
not present."
      end

      operation 7673243 "getRevokedCertificate"
	abstract public return_type class_ref 975131 // X509CRLEntry
	nparams 1
	  param inout name "serialNumber" type class_ref 775835 // BigInteger
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the CRL entry, if any, with the given certificate serialNumber.

@param serialNumber the serial number of the certificate for which a CRL entry
is to be looked up
@return the entry with the given serial number, or null if no such entry
exists in this CRL.
@see X509CRLEntry"
      end

      operation 7673371 "getRevokedCertificate"
	public return_type class_ref 975131 // X509CRLEntry
	nparams 1
	  param inout name "certificate" type class_ref 974747 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the CRL entry, if any, for the given certificate.

<p>This method can be used to lookup CRL entries in indirect CRLs,
that means CRLs that contain entries from issuers other than the CRL
issuer. The default implementation will only return entries for
certificates issued by the CRL issuer. Subclasses that wish to
support indirect CRLs should override this method.

@param certificate the certificate for which a CRL entry is to be looked 
  up
@return the entry for the given certificate, or null if no such entry
  exists in this CRL.
@exception NullPointerException if certificate is null

@since 1.5"
      end

      operation 7673499 "getRevokedCertificates"
	abstract public return_type class_ref 136731 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends X509CRLEntry> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets all the entries from this CRL.
This returns a Set of X509CRLEntry objects.

@return all the entries or null if there are none present.
@see X509CRLEntry"
      end

      operation 7673627 "getTBSCertList"
	abstract public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 970523 // CRLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the DER-encoded CRL information, the
<code>tbsCertList</code> from this CRL.
This can be used to verify the signature independently.

@return the DER-encoded CRL information.
@exception CRLException if an encoding error occurs."
      end

      operation 7673755 "getSignature"
	abstract public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>signature</code> value (the raw signature bits) from 
the CRL.
The ASN.1 definition for this is:
<pre>
signature     BIT STRING  
</pre>

@return the signature."
      end

      operation 7673883 "getSigAlgName"
	abstract public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the signature algorithm name for the CRL
signature algorithm. An example is the string \"SHA-1/DSA\".
The ASN.1 definition for this is:
<pre>
signatureAlgorithm   AlgorithmIdentifier<p>
AlgorithmIdentifier  ::=  SEQUENCE  {
    algorithm               OBJECT IDENTIFIER,
    parameters              ANY DEFINED BY algorithm OPTIONAL  }
                            -- contains a value of the type
                            -- registered for use with the
                            -- algorithm object identifier value
</pre>

<p>The algorithm name is determined from the <code>algorithm</code>
OID string.

@return the signature algorithm name."
      end

      operation 7674011 "getSigAlgOID"
	abstract public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the signature algorithm OID string from the CRL.
An OID is represented by a set of nonnegative whole numbers separated
by periods.
For example, the string \"1.2.840.10040.4.3\" identifies the SHA-1
with DSA signature algorithm, as per RFC 2459.

<p>See {@link #getSigAlgName() getSigAlgName} for 
relevant ASN.1 definitions.

@return the signature algorithm OID string."
      end

      operation 7674139 "getSigAlgParams"
	abstract public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the DER-encoded signature algorithm parameters from this
CRL's signature algorithm. In most cases, the signature
algorithm parameters are null; the parameters are usually
supplied with the public key.
If access to individual parameter values is needed then use
{@link java.security.AlgorithmParameters AlgorithmParameters}
and instantiate with the name returned by
{@link #getSigAlgName() getSigAlgName}.

<p>See {@link #getSigAlgName() getSigAlgName} for 
relevant ASN.1 definitions.

@return the DER-encoded signature algorithm parameters, or
        null if no parameters are present."
      end
    end

    class 975131 "X509CRLEntry"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>Abstract class for a revoked certificate in a CRL (Certificate
Revocation List).

The ASN.1 definition for <em>revokedCertificates</em> is:
<pre>
revokedCertificates    SEQUENCE OF SEQUENCE  {
    userCertificate    CertificateSerialNumber,
    revocationDate     ChoiceOfTime,
    crlEntryExtensions Extensions OPTIONAL
                       -- if present, must be v2
}  OPTIONAL
<p>
CertificateSerialNumber  ::=  INTEGER
<p>
Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
<p>
Extension  ::=  SEQUENCE  {
    extnId        OBJECT IDENTIFIER,
    critical      BOOLEAN DEFAULT FALSE,
    extnValue     OCTET STRING
                  -- contains a DER encoding of a value
                  -- of the type registered for use with
                  -- the extnId object identifier value
}
</pre>

@see X509CRL
@see X509Extension

@author Hemma Prafullchandra
@version 1.16 03/12/19"
      classrelation 1894683 // <realization>
	relation 1894683 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1894683 // <realization>
	  b parent class_ref 974875 // X509Extension
      end

      operation 7674267 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this CRL entry for equality with the given
object. If the <code>other</code> object is an
<code>instanceof</code> <code>X509CRLEntry</code>, then
its encoded form (the inner SEQUENCE) is retrieved and compared
with the encoded form of this CRL entry.

@param other the object to test for equality with this CRL entry.
@return true iff the encoded forms of the two CRL entries
match, false otherwise."
      end

      operation 7674395 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode value for this CRL entry from its
encoded form.

@return the hashcode value."
      end

      operation 7674523 "getEncoded"
	abstract public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 970523 // CRLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ASN.1 DER-encoded form of this CRL Entry,
that is the inner SEQUENCE.

@return the encoded form of this certificate
@exception CRLException if an encoding error occurs."
      end

      operation 7674651 "getSerialNumber"
	abstract public return_type class_ref 775835 // BigInteger
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the serial number from this X509CRLEntry,
the <em>userCertificate</em>.

@return the serial number."
      end

      operation 7674779 "getCertificateIssuer"
	public return_type class_ref 845211 // X500Principal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the issuer of the X509Certificate described by this entry. If
the certificate issuer is also the CRL issuer, this method returns
null.

<p>This method is used with indirect CRLs. The default implementation
always returns null. Subclasses that wish to support indirect CRLs
should override it.

@return the issuer of the X509Certificate described by this entry
or null if it is issued by the CRL issuer.

@since 1.5"
      end

      operation 7674907 "getRevocationDate"
	abstract public return_type class_ref 139163 // Date
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the revocation date from this X509CRLEntry,
the <em>revocationDate</em>.

@return the revocation date."
      end

      operation 7675035 "hasExtensions"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this CRL entry has extensions.

@return true if this entry has extensions, false otherwise."
      end

      operation 7675163 "toString"
	abstract public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this CRL entry.

@return a string representation of this CRL entry."
      end
    end
  end

  deploymentview 168347 "cert"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 738715 "Certificate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import java.security.PublicKey;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.SignatureException;
import sun.security.x509.X509CertImpl;
${definition}"
      associated_classes
	class_ref 528283 // Certificate
      end
      comment "@(#)Certificate.java	1.24 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 738843 "CertificateException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.GeneralSecurityException;
${definition}"
      associated_classes
	class_ref 966683 // CertificateException
      end
      comment "@(#)CertificateException.java	1.33 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 738971 "CertificateEncodingException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 969883 // CertificateEncodingException
      end
      comment "@(#)CertificateEncodingException.java	1.12 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 739099 "CertificateExpiredException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 970139 // CertificateExpiredException
      end
      comment "@(#)CertificateExpiredException.java	1.10 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 739227 "CertificateFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.security.Provider;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import sun.security.jca.*;
import sun.security.jca.GetInstance.Instance;
${definition}"
      associated_classes
	class_ref 843163 // CertificateFactory
      end
      comment "@(#)CertificateFactory.java	1.28 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 739355 "CertificateFactorySpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.security.Provider;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
${definition}"
      associated_classes
	class_ref 970267 // CertificateFactorySpi
      end
      comment "@(#)CertificateFactorySpi.java	1.19 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 739483 "CertificateNotYetValidException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 970651 // CertificateNotYetValidException
      end
      comment "@(#)CertificateNotYetValidException.java	1.10 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 739611 "CertificateParsingException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 970779 // CertificateParsingException
      end
      comment "@(#)CertificateParsingException.java	1.12 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 739739 "CertPath"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ByteArrayInputStream;
import java.io.NotSerializableException;
import java.io.ObjectStreamException;
import java.io.Serializable;
import java.util.Iterator;
import java.util.List;
${definition}"
      associated_classes
	class_ref 845339 // CertPath
      end
      comment "@(#)CertPath.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 739867 "CertPathBuilder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import java.security.InvalidAlgorithmParameterException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivilegedAction;
import java.security.Provider;
import java.security.Security;
import sun.security.util.Debug;
import sun.security.jca.*;
import sun.security.jca.GetInstance.Instance;
${definition}"
      associated_classes
	class_ref 971035 // CertPathBuilder
      end
      comment "@(#)CertPathBuilder.java	1.9 04/06/28

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 739995 "CertPathBuilderException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.GeneralSecurityException;
${definition}"
      associated_classes
	class_ref 971547 // CertPathBuilderException
      end
      comment "@(#)CertPathBuilderException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 740123 "CertPathBuilderResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 971291 // CertPathBuilderResult
      end
      comment "@(#)CertPathBuilderResult.java	1.6 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 740251 "CertPathBuilderSpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.InvalidAlgorithmParameterException;
${definition}"
      associated_classes
	class_ref 971163 // CertPathBuilderSpi
      end
      comment "@(#)CertPathBuilderSpi.java	1.5 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 740379 "CertPathHelperImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import javax.security.auth.x500.X500Principal;
import sun.security.provider.certpath.CertPathHelper;
import sun.security.x509.GeneralNameInterface;
${definition}"
      associated_classes
	class_ref 971675 // CertPathHelperImpl
      end
      comment "@(#)CertPathHelperImpl.java	1.4 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 740507 "CertPathParameters"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 971419 // CertPathParameters
      end
      comment "@(#)CertPathParameters.java	1.5 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 740635 "CertPathValidator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import java.security.InvalidAlgorithmParameterException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivilegedAction;
import java.security.Provider;
import java.security.Security;
import sun.security.util.Debug;
import sun.security.jca.*;
import sun.security.jca.GetInstance.Instance;
${definition}"
      associated_classes
	class_ref 972315 // CertPathValidator
      end
      comment "@(#)CertPathValidator.java	1.9 04/06/28

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 740763 "CertPathValidatorException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.GeneralSecurityException;
${definition}"
      associated_classes
	class_ref 972699 // CertPathValidatorException
      end
      comment "@(#)CertPathValidatorException.java	1.10 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 740891 "CertPathValidatorResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 972571 // CertPathValidatorResult
      end
      comment "@(#)CertPathValidatorResult.java	1.5 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 741019 "CertPathValidatorSpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.InvalidAlgorithmParameterException;
${definition}"
      associated_classes
	class_ref 972443 // CertPathValidatorSpi
      end
      comment "@(#)CertPathValidatorSpi.java	1.5 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 741147 "CertSelector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 972827 // CertSelector
      end
      comment "@(#)CertSelector.java	1.5 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 741275 "CertStore"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import java.security.InvalidAlgorithmParameterException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivilegedAction;
import java.security.Provider;
import java.security.Security;
import java.util.Collection;
import sun.security.jca.*;
import sun.security.jca.GetInstance.Instance;
${definition}"
      associated_classes
	class_ref 972955 // CertStore
      end
      comment "@(#)CertStore.java	1.13 04/06/28

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 741403 "CertStoreException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.GeneralSecurityException;
${definition}"
      associated_classes
	class_ref 973339 // CertStoreException
      end
      comment "@(#)CertStoreException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 741531 "CertStoreParameters"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 973211 // CertStoreParameters
      end
      comment "@(#)CertStoreParameters.java	1.5 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 741659 "CertStoreSpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.InvalidAlgorithmParameterException;
import java.util.Collection;
${definition}"
      associated_classes
	class_ref 973083 // CertStoreSpi
      end
      comment "@(#)CertStoreSpi.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 741787 "CollectionCertStoreParameters"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
${definition}"
      associated_classes
	class_ref 973595 // CollectionCertStoreParameters
      end
      comment "@(#)CollectionCertStoreParameters.java	1.8 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 741915 "CRL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 970395 // CRL
      end
      comment "@(#)CRL.java	1.12 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 742043 "CRLException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.GeneralSecurityException;
${definition}"
      associated_classes
	class_ref 970523 // CRLException
      end
      comment "@(#)CRLException.java	1.12 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 742171 "CRLSelector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 973467 // CRLSelector
      end
      comment "@(#)CRLSelector.java	1.5 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 742299 "LDAPCertStoreParameters"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 973723 // LDAPCertStoreParameters
      end
      comment "@(#)LDAPCertStoreParameters.java	1.8 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 742427 "PKIXParameters"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.InvalidAlgorithmParameterException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
${definition}"
      associated_classes
	class_ref 973979 // PKIXParameters
      end
      comment "@(#)PKIXParameters.java	1.17 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 742555 "PKIXBuilderParameters"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidParameterException;
import java.util.Set;
${definition}"
      associated_classes
	class_ref 973851 // PKIXBuilderParameters
      end
      comment "@(#)PKIXBuilderParameters.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 742683 "PKIXCertPathValidatorResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.PublicKey;
${definition}"
      associated_classes
	class_ref 974363 // PKIXCertPathValidatorResult
      end
      comment "@(#)PKIXCertPathValidatorResult.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 742811 "PKIXCertPathBuilderResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.PublicKey;
${definition}"
      associated_classes
	class_ref 974235 // PKIXCertPathBuilderResult
      end
      comment "@(#)PKIXCertPathBuilderResult.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 742939 "PKIXCertPathChecker"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collection;
import java.util.Set;
${definition}"
      associated_classes
	class_ref 974107 // PKIXCertPathChecker
      end
      comment "@(#)PKIXCertPathChecker.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 743067 "PolicyNode"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import java.util.Set;
${definition}"
      associated_classes
	class_ref 974491 // PolicyNode
      end
      comment "@(#)PolicyNode.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 743195 "PolicyQualifierInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import sun.misc.HexDumpEncoder;
import sun.security.util.DerValue;
${definition}"
      associated_classes
	class_ref 974619 // PolicyQualifierInfo
      end
      comment "@(#)PolicyQualifierInfo.java	1.11 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 743323 "TrustAnchor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.security.PublicKey;
import javax.security.auth.x500.X500Principal;
import sun.security.x509.NameConstraintsExtension;
import sun.security.x509.X500Name;
${definition}"
      associated_classes
	class_ref 972059 // TrustAnchor
      end
      comment "@(#)TrustAnchor.java	1.10 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 743451 "X509Extension"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Set;
${definition}"
      associated_classes
	class_ref 974875 // X509Extension
      end
      comment "@(#)X509Extension.java	1.22 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 743579 "X509Certificate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.math.BigInteger;
import java.security.Principal;
import java.security.PublicKey;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import javax.security.auth.x500.X500Principal;
import sun.security.x509.X509CertImpl;
${definition}"
      associated_classes
	class_ref 974747 // X509Certificate
      end
      comment "@(#)X509Certificate.java	1.39 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 743707 "X509CertSelector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.math.BigInteger;
import java.security.PublicKey;
import java.util.*;
import javax.security.auth.x500.X500Principal;
import sun.misc.HexDumpEncoder;
import sun.security.util.Debug;
import sun.security.util.DerInputStream;
import sun.security.util.DerValue;
import sun.security.util.ObjectIdentifier;
import sun.security.x509.*;
${definition}"
      associated_classes
	class_ref 971931 // X509CertSelector
      end
      comment "@(#)X509CertSelector.java	1.20 04/06/08

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 743835 "X509CRL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.SignatureException;
import java.security.Principal;
import java.security.PublicKey;
import javax.security.auth.x500.X500Principal;
import java.math.BigInteger;
import java.util.Date;
import java.util.Set;
import java.util.Arrays;
import sun.security.x509.X509CRLImpl;
${definition}"
      associated_classes
	class_ref 975003 // X509CRL
      end
      comment "@(#)X509CRL.java	1.29 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 743963 "X509CRLEntry"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.math.BigInteger;
import java.util.Date;
import java.util.Set;
import javax.security.auth.x500.X500Principal;
${definition}"
      associated_classes
	class_ref 975131 // X509CRLEntry
      end
      comment "@(#)X509CRLEntry.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 744091 "X509CRLSelector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.math.BigInteger;
import java.util.*;
import javax.security.auth.x500.X500Principal;
import sun.security.util.Debug;
import sun.security.util.DerInputStream;
import sun.security.x509.CRLNumberExtension;
import sun.security.x509.X500Name;
${definition}"
      associated_classes
	class_ref 972187 // X509CRLSelector
      end
      comment "@(#)X509CRLSelector.java	1.16 04/07/16

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
