class BaseMetaDataImpl
!!!3168411.java!!!	BaseMetaDataImpl()

	// ------------------------------ 
	// ------------------------------ 
!!!3169307.java!!!	preRegisterInvoker(inout moi : Object, inout name : ObjectName, inout mbs : MBeanServer) : ObjectName
   
	if (!(moi instanceof MBeanRegistration)) return name;

        final ObjectName newName;
      
        try {
            newName=(ObjectName)
		((MBeanRegistration)moi).preRegister(mbs, name);
        } catch (RuntimeException e) {
                throw new RuntimeMBeanException((RuntimeException)e, 
			   "RuntimeException thrown in preRegister method");       
	} catch (Error er) {      
                throw new RuntimeErrorException((Error) er, 
                           "Error thrown in preRegister method");
	} catch (MBeanRegistrationException r) {
	    throw (MBeanRegistrationException)r;
	} catch (Exception ex) {
	    throw new MBeanRegistrationException((Exception) ex, 
			  "Exception thrown in preRegister method");
	}      
        
	if (newName != null) return newName;
	else return name;
!!!3169435.java!!!	postRegisterInvoker(inout moi : Object, inout registrationDone : boolean) : void
	if (!(moi instanceof MBeanRegistration)) return;

        try {
            ((MBeanRegistration)moi).
		postRegister(new Boolean(registrationDone));
        } catch (RuntimeException e) {
	    throw new RuntimeMBeanException((RuntimeException)e,  
		      "RuntimeException thrown in postRegister method");   
	} catch (Error er) {
	    throw new RuntimeErrorException((Error) er,  
		      "Error thrown in postRegister method");       
	}
!!!3169563.java!!!	preDeregisterInvoker(inout moi : Object) : void
	if (!(moi instanceof MBeanRegistration)) return;

	try {
            ((MBeanRegistration)moi).preDeregister();
        } catch (RuntimeException e) {
	    throw new RuntimeMBeanException((RuntimeException) e,  
                         "RuntimeException thrown in preDeregister method");
	} catch (Error er) {         
	    throw new RuntimeErrorException((Error) er,  
                         "Error thrown in preDeregister method");     
	} catch (MBeanRegistrationException t) {
	    throw (MBeanRegistrationException)t;   
	} catch (Exception ex) {
	    throw new MBeanRegistrationException((Exception)ex,  
                         "Exception thrown in preDeregister method"); 
	}
!!!3169691.java!!!	postDeregisterInvoker(inout moi : Object) : void
	if (!(moi instanceof MBeanRegistration)) return;

        try {
            ((MBeanRegistration)moi).postDeregister();
        } catch (RuntimeException e) {
	    throw new RuntimeMBeanException((RuntimeException)e, 
                         "RuntimeException thrown in postDeregister method"); 
	} catch (Error er) {
	    throw new RuntimeErrorException((Error) er, 
                         "Error thrown in postDeregister method"); 
	} 
!!!3169819.java!!!	getMBeanClassName(inout moi : Object) : String

	final MBeanInfo mbi;
	try {
	    // Ask the MBeanInfo for the class name
	    mbi = getMBeanInfo(moi);
	} catch (SecurityException x) {
	    throw x;
	} catch (IntrospectionException x) {
	    throw x;
	} catch (Exception x) {
	    throw new NotCompliantMBeanException("Can't obtain MBeanInfo " +
						 "from DynamicMBean: " + x);
	}

	if (mbi == null) {
	    throw new 
		NotCompliantMBeanException("The MBeanInfo returned is null");
	}
	
	final String className = mbi.getClassName();
		
	if (className == null) {
	    throw new 
		IntrospectionException("The class Name returned is null");
	}

	return className;
!!!3169947.java!!!	isInstanceOf(inout instance : Object, in className : String) : boolean

	try {
	    final String cn = getMBeanClassName(instance);
	    if (cn.equals(className))
		return true; 	    
	    try {
		final ClassLoader cl = instance.getClass().getClassLoader();
		
		final Class classNameClass = findClass(className,cl);
		if (classNameClass == null) return false;
		if (classNameClass.isInstance(instance)) return true;
		
		final Class instanceClass = findClass(cn,cl);
		if (instanceClass == null) return false;
		return classNameClass.isAssignableFrom(instanceClass);
	    } catch (Exception x) {
		/* Could be SecurityException or ClassNotFoundException */
		debugX("isInstanceOf",x);
		return false;
	    }
	} catch (IntrospectionException x) {
	    debugX("isInstanceOf",x);
	    throw new ReflectionException(x,x.getMessage());
	} catch (NotCompliantMBeanException x) {
	    debugX("isInstanceOf",x);
	    throw new ReflectionException(x,x.getMessage());
	}
!!!3170075.java!!!	findClass(in className : String, inout loader : ClassLoader) : Class
	try {
	    if (loader == null) 
		return Class.forName(className);
	    else 
		return loader.loadClass(className);
	} catch (ClassNotFoundException x) {
	    throw new ReflectionException(x,x.getMessage());
	}
!!!3170203.java!!!	isTraceOn() : boolean
        return Trace.isSelected(Trace.LEVEL_TRACE, Trace.INFO_MBEANSERVER);
!!!3170331.java!!!	trace(in clz : String, in func : String, in info : String) : void
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_MBEANSERVER, clz, func, info);
!!!3170459.java!!!	trace(in func : String, in info : String) : void
        trace(dbgTag, func, info);
!!!3170587.java!!!	isDebugOn() : boolean
        return Trace.isSelected(Trace.LEVEL_DEBUG, Trace.INFO_MBEANSERVER);
!!!3170715.java!!!	debug(in clz : String, in func : String, in info : String) : void
        Trace.send(Trace.LEVEL_DEBUG, Trace.INFO_MBEANSERVER, clz, func, info);
!!!3170843.java!!!	debug(in func : String, in info : String) : void
        debug(dbgTag, func, info);
!!!3170971.java!!!	debugX(in func : String, inout e : Throwable) : void
	if (isDebugOn()) {
	    final StringWriter s = new StringWriter();
	    e.printStackTrace(new PrintWriter(s));
	    final String stack = s.toString();
	    
	    debug(dbgTag,func,"Exception caught in "+ func+"(): "+e);
	    debug(dbgTag,func,stack);
	    // java.lang.System.err.println("**** Exception caught in "+
	    //			     func+"(): "+e);
	    // java.lang.System.err.println(stack);
	}
