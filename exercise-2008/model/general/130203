format 66
"io" // src::java::io
  revision 4
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/io"
  java_package "java.io"
  classview 130971 "io"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 137883 "Serializable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Serializability of a class is enabled by the class implementing the
java.io.Serializable interface. Classes that do not implement this
interface will not have any of their state serialized or
deserialized.  All subtypes of a serializable class are themselves
serializable.  The serialization interface has no methods or fields
and serves only to identify the semantics of being serializable. <p>

To allow subtypes of non-serializable classes to be serialized, the
subtype may assume responsibility for saving and restoring the
state of the supertype's public, protected, and (if accessible)
package fields.  The subtype may assume this responsibility only if
the class it extends has an accessible no-arg constructor to
initialize the class's state.  It is an error to declare a class
Serializable if this is not the case.  The error will be detected at runtime. <p>

During deserialization, the fields of non-serializable classes will
be initialized using the public or protected no-arg constructor of
the class.  A no-arg constructor must be accessible to the subclass
that is serializable.  The fields of serializable subclasses will
be restored from the stream. <p>

When traversing a graph, an object may be encountered that does not
support the Serializable interface. In this case the
NotSerializableException will be thrown and will identify the class
of the non-serializable object. <p>

Classes that require special handling during the serialization and
deserialization process must implement special methods with these exact
signatures: <p>

<PRE>
private void writeObject(java.io.ObjectOutputStream out)
    throws IOException
private void readObject(java.io.ObjectInputStream in)
    throws IOException, ClassNotFoundException;
</PRE><p>

The writeObject method is responsible for writing the state of the
object for its particular class so that the corresponding
readObject method can restore it.  The default mechanism for saving
the Object's fields can be invoked by calling
out.defaultWriteObject. The method does not need to concern
itself with the state belonging to its superclasses or subclasses.
State is saved by writing the individual fields to the
ObjectOutputStream using the writeObject method or by using the
methods for primitive data types supported by DataOutput. <p>

The readObject method is responsible for reading from the stream and
restoring the classes fields. It may call in.defaultReadObject to invoke
the default mechanism for restoring the object's non-static and non-transient
fields.  The defaultReadObject method uses information in the stream to
assign the fields of the object saved in the stream with the correspondingly
named fields in the current object.  This handles the case when the class
has evolved to add new fields. The method does not need to concern
itself with the state belonging to its superclasses or subclasses.
State is saved by writing the individual fields to the
ObjectOutputStream using the writeObject method or by using the
methods for primitive data types supported by DataOutput. <p>

Serializable classes that need to designate an alternative object to be
used when writing an object to the stream should implement this
special method with the exact signature: <p>

<PRE>
ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException;
</PRE><p>

This writeReplace method is invoked by serialization if the method
exists and it would be accessible from a method defined within the
class of the object being serialized. Thus, the method can have private,
protected and package-private access. Subclass access to this method
follows java accessibility rules. <p>

Classes that need to designate a replacement when an instance of it
is read from the stream should implement this special method with the
exact signature.<p>

<PRE>
ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException;
</PRE><p>

This readResolve method follows the same invocation rules and
accessibility rules as writeReplace.<p>

The serialization runtime associates with each serializable class a version
number, called a serialVersionUID, which is used during deserialization to
verify that the sender and receiver of a serialized object have loaded
classes for that object that are compatible with respect to serialization.
If the receiver has loaded a class for the object that has a different
serialVersionUID than that of the corresponding sender's class, then
deserialization will result in an {@link InvalidClassException}.  A
serializable class can declare its own serialVersionUID explicitly by
declaring a field named <code>\"serialVersionUID\"</code> that must be static,
final, and of type <code>long</code>:<p>

<PRE>
ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L;
</PRE>

If a serializable class does not explicitly declare a serialVersionUID, then
the serialization runtime will calculate a default serialVersionUID value
for that class based on various aspects of the class, as described in the
Java(TM) Object Serialization Specification.  However, it is <em>strongly
recommended</em> that all serializable classes explicitly declare
serialVersionUID values, since the default serialVersionUID computation is
highly sensitive to class details that may vary depending on compiler
implementations, and can thus result in unexpected
<code>InvalidClassException</code>s during deserialization.  Therefore, to
guarantee a consistent serialVersionUID value across different java compiler
implementations, a serializable class must declare an explicit
serialVersionUID value.  It is also strongly advised that explicit
serialVersionUID declarations use the <code>private</code> modifier where
possible, since such declarations apply only to the immediately declaring
class--serialVersionUID fields are not useful as inherited members.

@author  unascribed
@version 1.22, 12/19/03
@see java.io.ObjectOutputStream
@see java.io.ObjectInputStream
@see java.io.ObjectOutput
@see java.io.ObjectInput
@see java.io.Externalizable
@since   JDK1.1"
    end

    class 162843 "PrintStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>PrintStream</code> adds functionality to another output stream,
namely the ability to print representations of various data values
conveniently.  Two other features are provided as well.  Unlike other output
streams, a <code>PrintStream</code> never throws an
<code>IOException</code>; instead, exceptional situations merely set an
internal flag that can be tested via the <code>checkError</code> method.
Optionally, a <code>PrintStream</code> can be created so as to flush
automatically; this means that the <code>flush</code> method is
automatically invoked after a byte array is written, one of the
<code>println</code> methods is invoked, or a newline character or byte
(<code>'\\n'</code>) is written.

<p> All characters printed by a <code>PrintStream</code> are converted into
bytes using the platform's default character encoding.  The <code>{@link
PrintWriter}</code> class should be used in situations that require writing
characters rather than bytes.

@version    1.32, 04/07/16
@author     Frank Yellin
@author     Mark Reinhold
@since      JDK1.0"
      classrelation 1766555 // <generalisation>
	relation 1766555 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1766555 // <generalisation>
	  b parent class_ref 903195 // FilterOutputStream
      end

      classrelation 1766683 // <realization>
	relation 1766683 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1766683 // <realization>
	  b parent class_ref 573851 // Appendable
      end

      classrelation 1766811 // <realization>
	relation 1766811 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1766811 // <realization>
	  b parent class_ref 179227 // Closeable
      end

      attribute 2712731 "autoFlush"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2712859 "trouble"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1766939 // formatter (<unidirectional association>)
	relation 1766939 --->
	  a role_name "formatter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1766939 // formatter (<unidirectional association>)
	  b parent class_ref 147739 // Formatter
      end

      classrelation 1767067 // textOut (<unidirectional association>)
	relation 1767067 --->
	  a role_name "textOut" private
	    comment "
Track both the text- and character-output streams, so that their buffers
can be flushed without flushing the entire stream.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1767067 // textOut (<unidirectional association>)
	  b parent class_ref 903323 // BufferedWriter
      end

      classrelation 1767195 // charOut (<unidirectional association>)
	relation 1767195 --->
	  a role_name "charOut" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1767195 // charOut (<unidirectional association>)
	  b parent class_ref 905627 // OutputStreamWriter
      end

      operation 6885403 "PrintStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 183835 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new print stream.  This stream will not flush automatically.

@param  out        The output stream to which values and objects will be
                   printed

@see java.io.PrintWriter#PrintWriter(java.io.OutputStream)"
      end

      operation 6885531 "PrintStream"
	private explicit_return_type ""
	nparams 2
	  param inout name "autoFlush" explicit_type "boolean"
	  param inout name "out" type class_ref 183835 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialization is factored into a private constructor (note the swapped
parameters so that this one isn't confused with the public one) and a
separate init method so that the following two public constructors can
share code.  We use a separate init method so that the constructor that
takes an encoding will throw an NPE for a null stream before it throws
an UnsupportedEncodingException for an unsupported encoding."
      end

      operation 6885659 "init"
	private explicit_return_type "void"
	nparams 1
	  param inout name "osw" type class_ref 905627 // OutputStreamWriter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6885787 "PrintStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 183835 // OutputStream
	  param inout name "autoFlush" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new print stream.

@param  out        The output stream to which values and objects will be
                   printed
@param  autoFlush  A boolean; if true, the output buffer will be flushed
                   whenever a byte array is written, one of the
                   <code>println</code> methods is invoked, or a newline
                   character or byte (<code>'\\n'</code>) is written

@see java.io.PrintWriter#PrintWriter(java.io.OutputStream, boolean)"
      end

      operation 6885915 "PrintStream"
	public explicit_return_type ""
	nparams 3
	  param inout name "out" type class_ref 183835 // OutputStream
	  param inout name "autoFlush" explicit_type "boolean"
	  param in name "encoding" explicit_type "String"
	nexceptions 1
	  exception class_ref 205723 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new print stream.

@param  out        The output stream to which values and objects will be
                   printed
@param  autoFlush  A boolean; if true, the output buffer will be flushed
                   whenever a byte array is written, one of the
                   <code>println</code> methods is invoked, or a newline
                   character or byte (<code>'\\n'</code>) is written
@param  encoding   The name of a supported
                   <a href=\"../lang/package-summary.html#charenc\">
                   character encoding</a>

@exception  UnsupportedEncodingException
            If the named encoding is not supported"
      end

      operation 6886043 "PrintStream"
	public explicit_return_type ""
	nparams 1
	  param in name "fileName" explicit_type "String"
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new print stream, without automatic line flushing, with the
specified file name.  This convenience constructor creates
the necessary intermediate {@link java.io.OutputStreamWriter
OutputStreamWriter}, which will encode characters using the
{@linkplain java.nio.charset.Charset#defaultCharset default charset}
for this instance of the Java virtual machine.

@param  fileName
        The name of the file to use as the destination of this print
        stream.  If the file exists, then it will be truncated to
        zero size; otherwise, a new file will be created.  The output
        will be written to the file and is buffered.

@throws  FileNotFoundException
         If the given file object does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(fileName)} denies write
         access to the file

@since  1.5"
      end

      operation 6886171 "PrintStream"
	public explicit_return_type ""
	nparams 2
	  param in name "fileName" explicit_type "String"
	  param in name "csn" explicit_type "String"
	nexceptions 2
	  exception class_ref 509851 // FileNotFoundException
	  exception class_ref 205723 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new print stream, without automatic line flushing, with the
specified file name and charset.  This convenience constructor creates
the necessary intermediate {@link java.io.OutputStreamWriter
OutputStreamWriter}, which will encode characters using the provided
charset.

@param  fileName
        The name of the file to use as the destination of this print
        stream.  If the file exists, then it will be truncated to
        zero size; otherwise, a new file will be created.  The output
        will be written to the file and is buffered.

@param  csn
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@throws  FileNotFoundException
         If the given file object does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(fileName)} denies write
         access to the file

@throws  UnsupportedEncodingException
         If the named charset is not supported

@since  1.5"
      end

      operation 6886299 "PrintStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 165147 // File
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new print stream, without automatic line flushing, with the
specified file.  This convenience constructor creates the necessary
intermediate {@link java.io.OutputStreamWriter OutputStreamWriter},
which will encode characters using the {@linkplain
java.nio.charset.Charset#defaultCharset default charset} for this
instance of the Java virtual machine.

@param  file
        The file to use as the destination of this print stream.  If the
        file exists, then it will be truncated to zero size; otherwise,
        a new file will be created.  The output will be written to the
        file and is buffered.

@throws  FileNotFoundException
         If the given file object does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(file.getPath())}
         denies write access to the file

@since  1.5"
      end

      operation 6886427 "PrintStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" type class_ref 165147 // File
	  param in name "csn" explicit_type "String"
	nexceptions 2
	  exception class_ref 509851 // FileNotFoundException
	  exception class_ref 205723 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new print stream, without automatic line flushing, with the
specified file and charset.  This convenience constructor creates
the necessary intermediate {@link java.io.OutputStreamWriter
OutputStreamWriter}, which will encode characters using the provided
charset.

@param  file
        The file to use as the destination of this print stream.  If the
        file exists, then it will be truncated to zero size; otherwise,
        a new file will be created.  The output will be written to the
        file and is buffered.

@param  csn
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@throws  FileNotFoundException
         If the given file object does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is presentand {@link
         SecurityManager#checkWrite checkWrite(file.getPath())}
         denies write access to the file

@throws  UnsupportedEncodingException
         If the named charset is not supported

@since  1.5"
      end

      operation 6886555 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check to make sure that the stream has not been closed "
      end

      operation 6886683 "flush"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush the stream.  This is done by writing any buffered output bytes to
the underlying output stream and then flushing that stream.

@see        java.io.OutputStream#flush()"
      end

      attribute 2712987 "closing"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " To avoid recursive closing "
      end

      operation 6886811 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the stream.  This is done by flushing the stream and then closing
the underlying output stream.

@see        java.io.OutputStream#close()"
      end

      operation 6886939 "checkError"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush the stream and check its error state.  The internal error state
is set to <code>true</code> when the underlying output stream throws an
<code>IOException</code> other than <code>InterruptedIOException</code>,
and when the <code>setError</code> method is invoked.  If an operation
on the underlying output stream throws an
<code>InterruptedIOException</code>, then the <code>PrintStream</code>
converts the exception back into an interrupt by doing:
<pre>
    Thread.currentThread().interrupt();
</pre>
or the equivalent.

@return True if and only if this stream has encountered an
        <code>IOException</code> other than
        <code>InterruptedIOException</code>, or the
        <code>setError</code> method has been invoked"
      end

      operation 6887067 "setError"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the error state of the stream to <code>true</code>.

@since JDK1.1"
      end

      operation 6887195 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exception-catching, synchronized output operations,
which also implement the write() methods of OutputStream


Write the specified byte to this stream.  If the byte is a newline and
automatic flushing is enabled then the <code>flush</code> method will be
invoked.

<p> Note that the byte is written as given; to write a character that
will be translated according to the platform's default character
encoding, use the <code>print(char)</code> or <code>println(char)</code>
methods.

@param  b  The byte to be written
@see #print(char)
@see #println(char)"
      end

      operation 6887323 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "buf" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write <code>len</code> bytes from the specified byte array starting at
offset <code>off</code> to this stream.  If automatic flushing is
enabled then the <code>flush</code> method will be invoked.

<p> Note that the bytes will be written as given; to write characters
that will be translated according to the platform's default character
encoding, use the <code>print(char)</code> or <code>println(char)</code>
methods.

@param  buf   A byte array
@param  off   Offset from which to start taking bytes
@param  len   Number of bytes to write"
      end

      operation 6887451 "write"
	private explicit_return_type "void"
	nparams 1
	  param in name "buf" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The following private methods on the text- and character-output streams
always flush the stream buffers, so that writes to the underlying byte
stream occur as promptly as with the original PrintStream."
      end

      operation 6887579 "write"
	private explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6887707 "newLine"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6887835 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Methods that do not terminate lines 

Print a boolean value.  The string produced by <code>{@link
java.lang.String#valueOf(boolean)}</code> is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      b   The <code>boolean</code> to be printed"
      end

      operation 6887963 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a character.  The character is translated into one or more bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      c   The <code>char</code> to be printed"
      end

      operation 6888091 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print an integer.  The string produced by <code>{@link
java.lang.String#valueOf(int)}</code> is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      i   The <code>int</code> to be printed
@see        java.lang.Integer#toString(int)"
      end

      operation 6888219 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "l" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a long integer.  The string produced by <code>{@link
java.lang.String#valueOf(long)}</code> is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      l   The <code>long</code> to be printed
@see        java.lang.Long#toString(long)"
      end

      operation 6888347 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a floating-point number.  The string produced by <code>{@link
java.lang.String#valueOf(float)}</code> is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      f   The <code>float</code> to be printed
@see        java.lang.Float#toString(float)"
      end

      operation 6888475 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a double-precision floating-point number.  The string produced by
<code>{@link java.lang.String#valueOf(double)}</code> is translated into
bytes according to the platform's default character encoding, and these
bytes are written in exactly the manner of the <code>{@link
#write(int)}</code> method.

@param      d   The <code>double</code> to be printed
@see        java.lang.Double#toString(double)"
      end

      operation 6888603 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print an array of characters.  The characters are converted into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      s   The array of chars to be printed

@throws  NullPointerException  If <code>s</code> is <code>null</code>"
      end

      operation 6888731 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a string.  If the argument is <code>null</code> then the string
<code>\"null\"</code> is printed.  Otherwise, the string's characters are
converted into bytes according to the platform's default character
encoding, and these bytes are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      s   The <code>String</code> to be printed"
      end

      operation 6888859 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print an object.  The string produced by the <code>{@link
java.lang.String#valueOf(Object)}</code> method is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      obj   The <code>Object</code> to be printed
@see        java.lang.Object#toString()"
      end

      operation 6888987 "println"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Methods that do terminate lines 

Terminate the current line by writing the line separator string.  The
line separator string is defined by the system property
<code>line.separator</code>, and is not necessarily a single newline
character (<code>'\\n'</code>)."
      end

      operation 6889115 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a boolean and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(boolean)}</code> and then
<code>{@link #println()}</code>.

@param x  The <code>boolean</code> to be printed"
      end

      operation 6889243 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a character and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(char)}</code> and then
<code>{@link #println()}</code>.

@param x  The <code>char</code> to be printed."
      end

      operation 6889371 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print an integer and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(int)}</code> and then
<code>{@link #println()}</code>.

@param x  The <code>int</code> to be printed."
      end

      operation 6889499 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a long and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(long)}</code> and then
<code>{@link #println()}</code>.

@param x  a The <code>long</code> to be printed."
      end

      operation 6889627 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a float and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(float)}</code> and then
<code>{@link #println()}</code>.

@param x  The <code>float</code> to be printed."
      end

      operation 6889755 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a double and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(double)}</code> and then
<code>{@link #println()}</code>.

@param x  The <code>double</code> to be printed."
      end

      operation 6889883 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print an array of characters and then terminate the line.  This method
behaves as though it invokes <code>{@link #print(char[])}</code> and
then <code>{@link #println()}</code>.

@param x  an array of chars to print."
      end

      operation 6890011 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a String and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(String)}</code> and then
<code>{@link #println()}</code>.

@param x  The <code>String</code> to be printed."
      end

      operation 6890139 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print an Object and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(Object)}</code> and then
<code>{@link #println()}</code>.

@param x  The <code>Object</code> to be printed."
      end

      operation 6890267 "printf"
	public return_type class_ref 162843 // PrintStream
	nparams 2
	  param in name "format" explicit_type "String"
	  param inout name "args" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to write a formatted string to this output stream
using the specified format string and arguments.

<p> An invocation of this method of the form <tt>out.printf(format,
args)</tt> behaves in exactly the same way as the invocation

<pre>
    out.format(format, args) </pre>

@param  format
        A format string as described in <a
        href=\"../util//Formatter.html#syntax\">Format string syntax</a>

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        the <a href=\"http://java.sun.com/docs/books/vmspec/\">Java
        Virtual Machine Specification</a>.  The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This output stream

@since  1.5"
      end

      operation 6890395 "printf"
	public return_type class_ref 162843 // PrintStream
	nparams 3
	  param inout name "l" type class_ref 138907 // Locale
	  param in name "format" explicit_type "String"
	  param inout name "args" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to write a formatted string to this output stream
using the specified format string and arguments.

<p> An invocation of this method of the form <tt>out.printf(l, format,
args)</tt> behaves in exactly the same way as the invocation

<pre>
    out.format(l, format, args) </pre>

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied.

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        the <a href=\"http://java.sun.com/docs/books/vmspec/\">Java
        Virtual Machine Specification</a>.  The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This output stream

@since  1.5"
      end

      operation 6890523 "format"
	public return_type class_ref 162843 // PrintStream
	nparams 2
	  param in name "format" explicit_type "String"
	  param inout name "args" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a formatted string to this output stream using the specified
format string and arguments.

<p> The locale always used is the one returned by {@link
java.util.Locale#getDefault() Locale.getDefault()}, regardless of any
previous invocations of other formatting methods on this object.

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        the <a href=\"http://java.sun.com/docs/books/vmspec/\">Java
        Virtual Machine Specification</a>.  The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This output stream

@since  1.5"
      end

      operation 6890651 "format"
	public return_type class_ref 162843 // PrintStream
	nparams 3
	  param inout name "l" type class_ref 138907 // Locale
	  param in name "format" explicit_type "String"
	  param inout name "args" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a formatted string to this output stream using the specified
format string and arguments.

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied.

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        the <a href=\"http://java.sun.com/docs/books/vmspec/\">Java
        Virtual Machine Specification</a>.  The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This output stream

@since  1.5"
      end

      operation 6890779 "append"
	public return_type class_ref 162843 // PrintStream
	nparams 1
	  param inout name "csq" type class_ref 393755 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character sequence to this output stream.

<p> An invocation of this method of the form <tt>out.append(csq)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.print(csq.toString()) </pre>

<p> Depending on the specification of <tt>toString</tt> for the
character sequence <tt>csq</tt>, the entire sequence may not be
appended.  appended.  For instance, invoking then <tt>toString</tt>
method of a character buffer will return a subsequence whose content
depends upon the buffer's position and limit.

@param  csq
        The character sequence to append.  If <tt>csq</tt> is
        <tt>null</tt>, then the four characters <tt>\"null\"</tt> are
        appended to this output stream.

@return  This character stream

@since  1.5"
      end

      operation 6890907 "append"
	public return_type class_ref 162843 // PrintStream
	nparams 3
	  param inout name "csq" type class_ref 393755 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a subsequence of the specified character sequence to this output
stream. 

<p> An invocation of this method of the form <tt>out.append(csq, start,
end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in
exactly the same way as the invocation

<pre>
    out.print(csq.subSequence(start, end).toString()) </pre>

@param  csq
        The character sequence from which a subsequence will be
        appended.  If <tt>csq</tt> is <tt>null</tt>, then characters
        will be appended as if <tt>csq</tt> contained the four
        characters <tt>\"null\"</tt>.

@param  start
        The index of the first character in the subsequence

@param  end
        The index of the character following the last character in the
        subsequence

@return  This character stream

@throws  IndexOutOfBoundsException
         If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>
         is greater than <tt>end</tt>, or <tt>end</tt> is greater than
         <tt>csq.length()</tt>

@since  1.5"
      end

      operation 6891035 "append"
	public return_type class_ref 162843 // PrintStream
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character to this output stream.

<p> An invocation of this method of the form <tt>out.append(c)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.print(c) </pre>

@param  c
        The 16-bit character to append

@return  This output stream

@since 1.5"
      end
    end

    class 165147 "File"
      visibility public 
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 value class_ref 165147 // File
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An abstract representation of file and directory pathnames.

<p> User interfaces and operating systems use system-dependent <em>pathname
strings</em> to name files and directories.  This class presents an
abstract, system-independent view of hierarchical pathnames.  An
<em>abstract pathname</em> has two components:

<ol>
<li> An optional system-dependent <em>prefix</em> string,
     such as a disk-drive specifier, <code>\"/\"</code>&nbsp;for the UNIX root
     directory, or <code>\"\\\\\\\\\"</code>&nbsp;for a Microsoft Windows UNC pathname, and
<li> A sequence of zero or more string <em>names</em>.
</ol>

Each name in an abstract pathname except for the last denotes a directory;
the last name may denote either a directory or a file.  The <em>empty</em>
abstract pathname has no prefix and an empty name sequence.

<p> The conversion of a pathname string to or from an abstract pathname is
inherently system-dependent.  When an abstract pathname is converted into a
pathname string, each name is separated from the next by a single copy of
the default <em>separator character</em>.  The default name-separator
character is defined by the system property <code>file.separator</code>, and
is made available in the public static fields <code>{@link
#separator}</code> and <code>{@link #separatorChar}</code> of this class.
When a pathname string is converted into an abstract pathname, the names
within it may be separated by the default name-separator character or by any
other name-separator character that is supported by the underlying system.

<p> A pathname, whether abstract or in string form, may be either
<em>absolute</em> or <em>relative</em>.  An absolute pathname is complete in
that no other information is required in order to locate the file that it
denotes.  A relative pathname, in contrast, must be interpreted in terms of
information taken from some other pathname.  By default the classes in the
<code>java.io</code> package always resolve relative pathnames against the
current user directory.  This directory is named by the system property
<code>user.dir</code>, and is typically the directory in which the Java
virtual machine was invoked.

<p> The prefix concept is used to handle root directories on UNIX platforms,
and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms,
as follows:

<ul>

<li> For UNIX platforms, the prefix of an absolute pathname is always
<code>\"/\"</code>.  Relative pathnames have no prefix.  The abstract pathname
denoting the root directory has the prefix <code>\"/\"</code> and an empty
name sequence.

<li> For Microsoft Windows platforms, the prefix of a pathname that contains a drive
specifier consists of the drive letter followed by <code>\":\"</code> and
possibly followed by <code>\"\\\\\"</code> if the pathname is absolute.  The
prefix of a UNC pathname is <code>\"\\\\\\\\\"</code>; the hostname and the share
name are the first two names in the name sequence.  A relative pathname that
does not specify a drive has no prefix.

</ul>

<p> Instances of the <code>File</code> class are immutable; that is, once
created, the abstract pathname represented by a <code>File</code> object
will never change.

@version 1.122, 05/05/04
@author  unascribed
@since   JDK1.0"
      classrelation 1756827 // <realization>
	relation 1756827 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1756827 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 1756955 // <realization>
	relation 1756955 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1756955 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      classrelation 1757083 // fs (<unidirectional association>)
	relation 1757083 --->
	  a role_name "fs" init_value "=  FileSystem.getFileSystem()" class_relation private
	    comment "
The FileSystem object representing the platform's local file system.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1757083 // fs (<unidirectional association>)
	  b parent class_ref 903963 // FileSystem
      end

      attribute 2700699 "path"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This abstract pathname's normalized pathname string.  A normalized
pathname string uses the default name-separator character and does not
contain any duplicate or redundant separators.

@serial
"
      end

      attribute 2700827 "prefixLength"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The length of this abstract pathname's prefix, or zero if it has no
prefix.
"
      end

      operation 6840987 "getPrefixLength"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of this abstract pathname's prefix.
For use by FileSystem classes."
      end

      attribute 2700955 "separatorChar"
	class_attribute const_attribute public explicit_type "char"
	init_value "=  fs.getSeparator()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The system-dependent default name-separator character.  This field is
initialized to contain the first character of the value of the system
property <code>file.separator</code>.  On UNIX systems the value of this
field is <code>'/'</code>; on Microsoft Windows systems it is <code>'\\\\'</code>.

@see     java.lang.System#getProperty(java.lang.String)
"
      end

      attribute 2701083 "separator"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  \"\" + separatorChar"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The system-dependent default name-separator character, represented as a
string for convenience.  This string contains a single character, namely
<code>{@link #separatorChar}</code>.
"
      end

      attribute 2701211 "pathSeparatorChar"
	class_attribute const_attribute public explicit_type "char"
	init_value "=  fs.getPathSeparator()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The system-dependent path-separator character.  This field is
initialized to contain the first character of the value of the system
property <code>path.separator</code>.  This character is used to
separate filenames in a sequence of files given as a <em>path list</em>.
On UNIX systems, this character is <code>':'</code>; on Microsoft Windows systems it
is <code>';'</code>.

@see     java.lang.System#getProperty(java.lang.String)
"
      end

      attribute 2701339 "pathSeparator"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  \"\" + pathSeparatorChar"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The system-dependent path-separator character, represented as a string
for convenience.  This string contains a single character, namely
<code>{@link #pathSeparatorChar}</code>.
"
      end

      operation 6841115 "File"
	private explicit_return_type ""
	nparams 2
	  param in name "pathname" explicit_type "String"
	  param in name "prefixLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Constructors -- 

Internal constructor for already-normalized pathname strings."
      end

      operation 6841243 "File"
	private explicit_return_type ""
	nparams 2
	  param in name "child" explicit_type "String"
	  param inout name "parent" type class_ref 165147 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal constructor for already-normalized pathname strings.
The parameter order is used to disambiguate this method from the
public(File, String) constructor."
      end

      operation 6841371 "File"
	public explicit_return_type ""
	nparams 1
	  param in name "pathname" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>File</code> instance by converting the given
pathname string into an abstract pathname.  If the given string is
the empty string, then the result is the empty abstract pathname.

@param   pathname  A pathname string
@throws  NullPointerException
         If the <code>pathname</code> argument is <code>null</code>"
      end

      operation 6841499 "File"
	public explicit_return_type ""
	nparams 2
	  param in name "parent" explicit_type "String"
	  param in name "child" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Note: The two-argument File constructors do not interpret an empty
parent abstract pathname as the current user directory.  An empty parent
instead causes the child to be resolved against the system-dependent
directory defined by the FileSystem.getDefaultParent method.  On Unix
this default is \"/\", while on Microsoft Windows it is \"\\\\\".  This is required for
compatibility with the original behavior of this class. 

Creates a new <code>File</code> instance from a parent pathname string
and a child pathname string.

<p> If <code>parent</code> is <code>null</code> then the new
<code>File</code> instance is created as if by invoking the
single-argument <code>File</code> constructor on the given
<code>child</code> pathname string.

<p> Otherwise the <code>parent</code> pathname string is taken to denote
a directory, and the <code>child</code> pathname string is taken to
denote either a directory or a file.  If the <code>child</code> pathname
string is absolute then it is converted into a relative pathname in a
system-dependent way.  If <code>parent</code> is the empty string then
the new <code>File</code> instance is created by converting
<code>child</code> into an abstract pathname and resolving the result
against a system-dependent default directory.  Otherwise each pathname
string is converted into an abstract pathname and the child abstract
pathname is resolved against the parent.

@param   parent  The parent pathname string
@param   child   The child pathname string
@throws  NullPointerException
         If <code>child</code> is <code>null</code>"
      end

      operation 6841627 "File"
	public explicit_return_type ""
	nparams 2
	  param inout name "parent" type class_ref 165147 // File
	  param in name "child" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>File</code> instance from a parent abstract
pathname and a child pathname string.

<p> If <code>parent</code> is <code>null</code> then the new
<code>File</code> instance is created as if by invoking the
single-argument <code>File</code> constructor on the given
<code>child</code> pathname string.

<p> Otherwise the <code>parent</code> abstract pathname is taken to
denote a directory, and the <code>child</code> pathname string is taken
to denote either a directory or a file.  If the <code>child</code>
pathname string is absolute then it is converted into a relative
pathname in a system-dependent way.  If <code>parent</code> is the empty
abstract pathname then the new <code>File</code> instance is created by
converting <code>child</code> into an abstract pathname and resolving
the result against a system-dependent default directory.  Otherwise each
pathname string is converted into an abstract pathname and the child
abstract pathname is resolved against the parent.

@param   parent  The parent abstract pathname
@param   child   The child pathname string
@throws  NullPointerException
         If <code>child</code> is <code>null</code>"
      end

      operation 6841755 "File"
	public explicit_return_type ""
	nparams 1
	  param inout name "uri" type class_ref 904091 // URI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>File</tt> instance by converting the given
<tt>file:</tt> URI into an abstract pathname.

<p> The exact form of a <tt>file:</tt> URI is system-dependent, hence
the transformation performed by this constructor is also
system-dependent.

<p> For a given abstract pathname <i>f</i> it is guaranteed that

<blockquote><tt>
new File(</tt><i>&nbsp;f</i><tt>.{@link #toURI() toURI}()).equals(</tt><i>&nbsp;f</i><tt>.{@link #getAbsoluteFile() getAbsoluteFile}())
</tt></blockquote>

so long as the original abstract pathname, the URI, and the new abstract
pathname are all created in (possibly different invocations of) the same
Java virtual machine.  This relationship typically does not hold,
however, when a <tt>file:</tt> URI that is created in a virtual machine
on one operating system is converted into an abstract pathname in a
virtual machine on a different operating system.

@param  uri
        An absolute, hierarchical URI with a scheme equal to
        <tt>\"file\"</tt>, a non-empty path component, and undefined
        authority, query, and fragment components

@throws  NullPointerException
         If <tt>uri</tt> is <tt>null</tt>

@throws  IllegalArgumentException
         If the preconditions on the parameter do not hold

@see #toURI()
@see java.net.URI
@since 1.4"
      end

      operation 6841883 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Path-component accessors -- 

Returns the name of the file or directory denoted by this abstract
pathname.  This is just the last name in the pathname's name
sequence.  If the pathname's name sequence is empty, then the empty
string is returned.

@return  The name of the file or directory denoted by this abstract
         pathname, or the empty string if this pathname's name sequence
         is empty"
      end

      operation 6842011 "getParent"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pathname string of this abstract pathname's parent, or
<code>null</code> if this pathname does not name a parent directory.

<p> The <em>parent</em> of an abstract pathname consists of the
pathname's prefix, if any, and each name in the pathname's name
sequence except for the last.  If the name sequence is empty then
the pathname does not name a parent directory.

@return  The pathname string of the parent directory named by this
         abstract pathname, or <code>null</code> if this pathname
         does not name a parent"
      end

      operation 6842139 "getParentFile"
	public return_type class_ref 165147 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the abstract pathname of this abstract pathname's parent,
or <code>null</code> if this pathname does not name a parent
directory.

<p> The <em>parent</em> of an abstract pathname consists of the
pathname's prefix, if any, and each name in the pathname's name
sequence except for the last.  If the name sequence is empty then
the pathname does not name a parent directory.

@return  The abstract pathname of the parent directory named by this
         abstract pathname, or <code>null</code> if this pathname
         does not name a parent

@since 1.2"
      end

      operation 6842267 "getPath"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this abstract pathname into a pathname string.  The resulting
string uses the {@link #separator default name-separator character} to
separate the names in the name sequence.

@return  The string form of this abstract pathname"
      end

      operation 6842395 "isAbsolute"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Path operations -- 

Tests whether this abstract pathname is absolute.  The definition of
absolute pathname is system dependent.  On UNIX systems, a pathname is
absolute if its prefix is <code>\"/\"</code>.  On Microsoft Windows systems, a
pathname is absolute if its prefix is a drive specifier followed by
<code>\"\\\\\"</code>, or if its prefix is <code>\"\\\\\\\\\"</code>.

@return  <code>true</code> if this abstract pathname is absolute,
         <code>false</code> otherwise"
      end

      operation 6842523 "getAbsolutePath"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute pathname string of this abstract pathname.

<p> If this abstract pathname is already absolute, then the pathname
string is simply returned as if by the <code>{@link #getPath}</code>
method.  If this abstract pathname is the empty abstract pathname then
the pathname string of the current user directory, which is named by the
system property <code>user.dir</code>, is returned.  Otherwise this
pathname is resolved in a system-dependent way.  On UNIX systems, a
relative pathname is made absolute by resolving it against the current
user directory.  On Microsoft Windows systems, a relative pathname is made absolute
by resolving it against the current directory of the drive named by the
pathname, if any; if not, it is resolved against the current user
directory.

@return  The absolute pathname string denoting the same file or
         directory as this abstract pathname

@throws  SecurityException
         If a required system property value cannot be accessed.

@see     java.io.File#isAbsolute()"
      end

      operation 6842651 "getAbsoluteFile"
	public return_type class_ref 165147 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute form of this abstract pathname.  Equivalent to
<code>new&nbsp;File(this.{@link #getAbsolutePath}())</code>.

@return  The absolute abstract pathname denoting the same file or
         directory as this abstract pathname

@throws  SecurityException
         If a required system property value cannot be accessed.

@since 1.2"
      end

      operation 6842779 "getCanonicalPath"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the canonical pathname string of this abstract pathname.

<p> A canonical pathname is both absolute and unique.  The precise
definition of canonical form is system-dependent.  This method first
converts this pathname to absolute form if necessary, as if by invoking the
{@link #getAbsolutePath} method, and then maps it to its unique form in a
system-dependent way.  This typically involves removing redundant names
such as <tt>\".\"</tt> and <tt>\"..\"</tt> from the pathname, resolving
symbolic links (on UNIX platforms), and converting drive letters to a
standard case (on Microsoft Windows platforms).

<p> Every pathname that denotes an existing file or directory has a
unique canonical form.  Every pathname that denotes a nonexistent file
or directory also has a unique canonical form.  The canonical form of
the pathname of a nonexistent file or directory may be different from
the canonical form of the same pathname after the file or directory is
created.  Similarly, the canonical form of the pathname of an existing
file or directory may be different from the canonical form of the same
pathname after the file or directory is deleted.

@return  The canonical pathname string denoting the same file or
         directory as this abstract pathname

@throws  IOException
         If an I/O error occurs, which is possible because the
         construction of the canonical pathname may require
         filesystem queries

@throws  SecurityException
         If a required system property value cannot be accessed, or
         if a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead}</code> method denies
         read access to the file

@since   JDK1.1"
      end

      operation 6842907 "getCanonicalFile"
	public return_type class_ref 165147 // File
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the canonical form of this abstract pathname.  Equivalent to
<code>new&nbsp;File(this.{@link #getCanonicalPath}())</code>.

@return  The canonical pathname string denoting the same file or
         directory as this abstract pathname

@throws  IOException
         If an I/O error occurs, which is possible because the
         construction of the canonical pathname may require
         filesystem queries

@throws  SecurityException
         If a required system property value cannot be accessed, or
         if a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead}</code> method denies
         read access to the file

@since 1.2"
      end

      operation 6843035 "slashify"
	class_operation private explicit_return_type "String"
	nparams 2
	  param in name "path" explicit_type "String"
	  param inout name "isDirectory" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6843163 "toURL"
	public return_type class_ref 269467 // URL
	nparams 0
	nexceptions 1
	  exception class_ref 280091 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this abstract pathname into a <code>file:</code> URL.  The
exact form of the URL is system-dependent.  If it can be determined that
the file denoted by this abstract pathname is a directory, then the
resulting URL will end with a slash.

<p> <b>Usage note:</b> This method does not automatically escape
characters that are illegal in URLs.  It is recommended that new code
convert an abstract pathname into a URL by first converting it into a
URI, via the {@link #toURI() toURI} method, and then converting the URI
into a URL via the {@link java.net.URI#toURL() URI.toURL} method.

@return  A URL object representing the equivalent file URL

@throws  MalformedURLException
         If the path cannot be parsed as a URL

@see     #toURI()
@see     java.net.URI
@see     java.net.URI#toURL()
@see     java.net.URL
@since   1.2"
      end

      operation 6843291 "toURI"
	public return_type class_ref 904091 // URI
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>file:</tt> URI that represents this abstract pathname.

<p> The exact form of the URI is system-dependent.  If it can be
determined that the file denoted by this abstract pathname is a
directory, then the resulting URI will end with a slash.

<p> For a given abstract pathname <i>f</i>, it is guaranteed that

<blockquote><tt>
new {@link #File(java.net.URI) File}(</tt><i>&nbsp;f</i><tt>.toURI()).equals(</tt><i>&nbsp;f</i><tt>.{@link #getAbsoluteFile() getAbsoluteFile}())
</tt></blockquote>

so long as the original abstract pathname, the URI, and the new abstract
pathname are all created in (possibly different invocations of) the same
Java virtual machine.  Due to the system-dependent nature of abstract
pathnames, however, this relationship typically does not hold when a
<tt>file:</tt> URI that is created in a virtual machine on one operating
system is converted into an abstract pathname in a virtual machine on a
different operating system.

@return  An absolute, hierarchical URI with a scheme equal to
         <tt>\"file\"</tt>, a path representing this abstract pathname,
         and undefined authority, query, and fragment components

@see #File(java.net.URI)
@see java.net.URI
@see java.net.URI#toURL()
@since 1.4"
      end

      operation 6843419 "canRead"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Attribute accessors -- 

Tests whether the application can read the file denoted by this
abstract pathname.

@return  <code>true</code> if and only if the file specified by this
         abstract pathname exists <em>and</em> can be read by the
         application; <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the file"
      end

      operation 6843547 "canWrite"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the application can modify the file denoted by this
abstract pathname.

@return  <code>true</code> if and only if the file system actually
         contains a file denoted by this abstract pathname <em>and</em>
         the application is allowed to write to the file;
         <code>false</code> otherwise.

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to the file"
      end

      operation 6843675 "exists"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the file or directory denoted by this abstract pathname
exists.

@return  <code>true</code> if and only if the file or directory denoted
         by this abstract pathname exists; <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the file or directory"
      end

      operation 6843803 "isDirectory"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the file denoted by this abstract pathname is a
directory.

@return <code>true</code> if and only if the file denoted by this
         abstract pathname exists <em>and</em> is a directory;
         <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the file"
      end

      operation 6843931 "isFile"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the file denoted by this abstract pathname is a normal
file.  A file is <em>normal</em> if it is not a directory and, in
addition, satisfies other system-dependent criteria.  Any non-directory
file created by a Java application is guaranteed to be a normal file.

@return  <code>true</code> if and only if the file denoted by this
         abstract pathname exists <em>and</em> is a normal file;
         <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the file"
      end

      operation 6844059 "isHidden"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the file named by this abstract pathname is a hidden
file.  The exact definition of <em>hidden</em> is system-dependent.  On
UNIX systems, a file is considered to be hidden if its name begins with
a period character (<code>'.'</code>).  On Microsoft Windows systems, a file is
considered to be hidden if it has been marked as such in the filesystem.

@return  <code>true</code> if and only if the file denoted by this
         abstract pathname is hidden according to the conventions of the
         underlying platform

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the file

@since 1.2"
      end

      operation 6844187 "lastModified"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the time that the file denoted by this abstract pathname was
last modified.

@return  A <code>long</code> value representing the time the file was
         last modified, measured in milliseconds since the epoch
         (00:00:00 GMT, January 1, 1970), or <code>0L</code> if the
         file does not exist or if an I/O error occurs

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the file"
      end

      operation 6844315 "length"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the file denoted by this abstract pathname.
The return value is unspecified if this pathname denotes a directory.

@return  The length, in bytes, of the file denoted by this abstract
         pathname, or <code>0L</code> if the file does not exist

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the file"
      end

      operation 6844443 "createNewFile"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- File operations -- 

Atomically creates a new, empty file named by this abstract pathname if
and only if a file with this name does not yet exist.  The check for the
existence of the file and the creation of the file if it does not exist
are a single operation that is atomic with respect to all other
filesystem activities that might affect the file.
<P>
Note: this method should <i>not</i> be used for file-locking, as
the resulting protocol cannot be made to work reliably. The 
{@link java.nio.channels.FileLock FileLock}
facility should be used instead. 

@return  <code>true</code> if the named file does not exist and was
         successfully created; <code>false</code> if the named file
         already exists

@throws  IOException
         If an I/O error occurred

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to the file

@since 1.2"
      end

      operation 6844571 "delete"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes the file or directory denoted by this abstract pathname.  If
this pathname denotes a directory, then the directory must be empty in
order to be deleted.

@return  <code>true</code> if and only if the file or directory is
         successfully deleted; <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkDelete}</code> method denies
         delete access to the file"
      end

      operation 6844699 "deleteOnExit"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests that the file or directory denoted by this abstract 
pathname be deleted when the virtual machine terminates.  
Deletion will be attempted only for normal termination of the 
virtual machine, as defined by the Java Language Specification. 

<p> Once deletion has been requested, it is not possible to cancel the
request.  This method should therefore be used with care.

<P>
Note: this method should <i>not</i> be used for file-locking, as 
the resulting protocol cannot be made to work reliably. The 
{@link java.nio.channels.FileLock FileLock}
facility should be used instead.

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkDelete}</code> method denies
         delete access to the file

@see #delete

@since 1.2"
      end

      operation 6844827 "list"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of strings naming the files and directories in the
directory denoted by this abstract pathname.

<p> If this abstract pathname does not denote a directory, then this
method returns <code>null</code>.  Otherwise an array of strings is
returned, one for each file or directory in the directory.  Names
denoting the directory itself and the directory's parent directory are
not included in the result.  Each string is a file name rather than a
complete path.

<p> There is no guarantee that the name strings in the resulting array
will appear in any specific order; they are not, in particular,
guaranteed to appear in alphabetical order.

@return  An array of strings naming the files and directories in the
         directory denoted by this abstract pathname.  The array will be
         empty if the directory is empty.  Returns <code>null</code> if
         this abstract pathname does not denote a directory, or if an
         I/O error occurs.

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the directory"
      end

      operation 6844955 "list"
	public explicit_return_type "String"
	nparams 1
	  param inout name "filter" type class_ref 856859 // FilenameFilter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of strings naming the files and directories in the
directory denoted by this abstract pathname that satisfy the specified
filter.  The behavior of this method is the same as that of the
<code>{@link #list()}</code> method, except that the strings in the
returned array must satisfy the filter.  If the given
<code>filter</code> is <code>null</code> then all names are accepted.
Otherwise, a name satisfies the filter if and only if the value
<code>true</code> results when the <code>{@link
FilenameFilter#accept}</code> method of the filter is invoked on this
abstract pathname and the name of a file or directory in the directory
that it denotes.

@param  filter  A filename filter

@return  An array of strings naming the files and directories in the
         directory denoted by this abstract pathname that were accepted
         by the given <code>filter</code>.  The array will be empty if
         the directory is empty or if no names were accepted by the
         filter.  Returns <code>null</code> if this abstract pathname
         does not denote a directory, or if an I/O error occurs.

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the directory"
      end

      operation 6845083 "listFiles"
	public return_type class_ref 165147 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of abstract pathnames denoting the files in the
directory denoted by this abstract pathname.

<p> If this abstract pathname does not denote a directory, then this
method returns <code>null</code>.  Otherwise an array of
<code>File</code> objects is returned, one for each file or directory in
the directory.  Pathnames denoting the directory itself and the
directory's parent directory are not included in the result.  Each
resulting abstract pathname is constructed from this abstract pathname
using the <code>{@link #File(java.io.File, java.lang.String)
File(File,&nbsp;String)}</code> constructor.  Therefore if this pathname
is absolute then each resulting pathname is absolute; if this pathname
is relative then each resulting pathname will be relative to the same
directory.

<p> There is no guarantee that the name strings in the resulting array
will appear in any specific order; they are not, in particular,
guaranteed to appear in alphabetical order.

@return  An array of abstract pathnames denoting the files and
         directories in the directory denoted by this abstract
         pathname.  The array will be empty if the directory is
         empty.  Returns <code>null</code> if this abstract pathname
         does not denote a directory, or if an I/O error occurs.

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the directory

@since 1.2"
      end

      operation 6845211 "listFiles"
	public return_type class_ref 165147 // File
	nparams 1
	  param inout name "filter" type class_ref 856859 // FilenameFilter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of abstract pathnames denoting the files and
directories in the directory denoted by this abstract pathname that
satisfy the specified filter.  The behavior of this method is the
same as that of the <code>{@link #listFiles()}</code> method, except
that the pathnames in the returned array must satisfy the filter.
If the given <code>filter</code> is <code>null</code> then all
pathnames are accepted.  Otherwise, a pathname satisfies the filter
if and only if the value <code>true</code> results when the
<code>{@link FilenameFilter#accept}</code> method of the filter is
invoked on this abstract pathname and the name of a file or
directory in the directory that it denotes.

@param  filter  A filename filter

@return  An array of abstract pathnames denoting the files and
         directories in the directory denoted by this abstract
         pathname.  The array will be empty if the directory is
         empty.  Returns <code>null</code> if this abstract pathname
         does not denote a directory, or if an I/O error occurs.
         
@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the directory

@since 1.2"
      end

      operation 6845339 "listFiles"
	public return_type class_ref 165147 // File
	nparams 1
	  param inout name "filter" type class_ref 904219 // FileFilter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of abstract pathnames denoting the files and
directories in the directory denoted by this abstract pathname that
satisfy the specified filter.  The behavior of this method is the
same as that of the <code>{@link #listFiles()}</code> method, except
that the pathnames in the returned array must satisfy the filter.
If the given <code>filter</code> is <code>null</code> then all
pathnames are accepted.  Otherwise, a pathname satisfies the filter
if and only if the value <code>true</code> results when the
<code>{@link FileFilter#accept(java.io.File)}</code> method of
the filter is invoked on the pathname.

@param  filter  A file filter

@return  An array of abstract pathnames denoting the files and
         directories in the directory denoted by this abstract
         pathname.  The array will be empty if the directory is
         empty.  Returns <code>null</code> if this abstract pathname
         does not denote a directory, or if an I/O error occurs.
         
@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the directory

@since 1.2"
      end

      operation 6845467 "mkdir"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates the directory named by this abstract pathname.

@return  <code>true</code> if and only if the directory was
         created; <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method does not permit the named directory to be created"
      end

      operation 6845595 "mkdirs"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates the directory named by this abstract pathname, including any
necessary but nonexistent parent directories.  Note that if this
operation fails it may have succeeded in creating some of the necessary
parent directories.

@return  <code>true</code> if and only if the directory was created,
         along with all necessary parent directories; <code>false</code>
         otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method does not permit verification of the existence of the 
         named directory and all necessary parent directories; or if
         the <code>{@link 
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method does not permit the named directory and all necessary
         parent directories to be created"
      end

      operation 6845723 "renameTo"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "dest" type class_ref 165147 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Renames the file denoted by this abstract pathname.

<p> Many aspects of the behavior of this method are inherently
platform-dependent: The rename operation might not be able to move a
file from one filesystem to another, it might not be atomic, and it
might not succeed if a file with the destination abstract pathname
already exists.  The return value should always be checked to make sure
that the rename operation was successful.

@param  dest  The new abstract pathname for the named file

@return  <code>true</code> if and only if the renaming succeeded;
         <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to either the old or new pathnames

@throws  NullPointerException  
         If parameter <code>dest</code> is <code>null</code>"
      end

      operation 6845851 "setLastModified"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "time" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the last-modified time of the file or directory named by this
abstract pathname.

<p> All platforms support file-modification times to the nearest second,
but some provide more precision.  The argument will be truncated to fit
the supported precision.  If the operation succeeds and no intervening
operations on the file take place, then the next invocation of the
<code>{@link #lastModified}</code> method will return the (possibly
truncated) <code>time</code> argument that was passed to this method.

@param  time  The new last-modified time, measured in milliseconds since
              the epoch (00:00:00 GMT, January 1, 1970)

@return <code>true</code> if and only if the operation succeeded;
         <code>false</code> otherwise

@throws  IllegalArgumentException  If the argument is negative

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to the named file

@since 1.2"
      end

      operation 6845979 "setReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the file or directory named by this abstract pathname so that
only read operations are allowed.  After invoking this method the file
or directory is guaranteed not to change until it is either deleted or
marked to allow write access.  Whether or not a read-only file or
directory may be deleted depends upon the underlying system.

@return <code>true</code> if and only if the operation succeeded;
         <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to the named file

@since 1.2"
      end

      operation 6846107 "listRoots"
	class_operation public return_type class_ref 165147 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Filesystem interface -- 

List the available filesystem roots.

<p> A particular Java platform may support zero or more
hierarchically-organized file systems.  Each file system has a
<code>root</code> directory from which all other files in that file
system can be reached.  Windows platforms, for example, have a root
directory for each active drive; UNIX platforms have a single root
directory, namely <code>\"/\"</code>.  The set of available filesystem
roots is affected by various system-level operations such as the insertion
or ejection of removable media and the disconnecting or unmounting of
physical or virtual disk drives.

<p> This method returns an array of <code>File</code> objects that
denote the root directories of the available filesystem roots.  It is
guaranteed that the canonical pathname of any file physically present on
the local machine will begin with one of the roots returned by this
method.

<p> The canonical pathname of a file that resides on some other machine
and is accessed via a remote-filesystem protocol such as SMB or NFS may
or may not begin with one of the roots returned by this method.  If the
pathname of a remote file is syntactically indistinguishable from the
pathname of a local file then it will begin with one of the roots
returned by this method.  Thus, for example, <code>File</code> objects
denoting the root directories of the mapped network drives of a Windows
platform will be returned by this method, while <code>File</code>
objects containing UNC pathnames will not be returned by this method.

<p> Unlike most methods in this class, this method does not throw
security exceptions.  If a security manager exists and its <code>{@link
java.lang.SecurityManager#checkRead(java.lang.String)}</code> method
denies read access to a particular root directory, then that directory
will not appear in the result.

@return  An array of <code>File</code> objects denoting the available
         filesystem roots, or <code>null</code> if the set of roots
         could not be determined.  The array will be empty if there are
         no filesystem roots.

@since 1.2"
      end

      attribute 2701467 "tmpFileLock"
	class_attribute const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " -- Temporary files -- "
      end

      attribute 2701595 "counter"
	class_attribute private explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Protected by tmpFileLock "
      end

      operation 6846235 "generateFile"
	class_operation private return_type class_ref 165147 // File
	nparams 3
	  param in name "prefix" explicit_type "String"
	  param in name "suffix" explicit_type "String"
	  param inout name "dir" type class_ref 165147 // File
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2701723 "tmpdir"
	class_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Protected by tmpFileLock "
      end

      operation 6846363 "getTempDir"
	class_operation private explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6846491 "checkAndCreate"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "filename" explicit_type "String"
	  param inout name "sm" type class_ref 904347 // SecurityManager
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6846619 "createTempFile"
	class_operation public return_type class_ref 165147 // File
	nparams 3
	  param in name "prefix" explicit_type "String"
	  param in name "suffix" explicit_type "String"
	  param inout name "directory" type class_ref 165147 // File
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p> Creates a new empty file in the specified directory, using the
given prefix and suffix strings to generate its name.  If this method
returns successfully then it is guaranteed that:

<ol>
<li> The file denoted by the returned abstract pathname did not exist
     before this method was invoked, and
<li> Neither this method nor any of its variants will return the same
     abstract pathname again in the current invocation of the virtual
     machine.
</ol>

This method provides only part of a temporary-file facility.  To arrange
for a file created by this method to be deleted automatically, use the
<code>{@link #deleteOnExit}</code> method.

<p> The <code>prefix</code> argument must be at least three characters
long.  It is recommended that the prefix be a short, meaningful string
such as <code>\"hjb\"</code> or <code>\"mail\"</code>.  The
<code>suffix</code> argument may be <code>null</code>, in which case the
suffix <code>\".tmp\"</code> will be used.

<p> To create the new file, the prefix and the suffix may first be
adjusted to fit the limitations of the underlying platform.  If the
prefix is too long then it will be truncated, but its first three
characters will always be preserved.  If the suffix is too long then it
too will be truncated, but if it begins with a period character
(<code>'.'</code>) then the period and the first three characters
following it will always be preserved.  Once these adjustments have been
made the name of the new file will be generated by concatenating the
prefix, five or more internally-generated characters, and the suffix.

<p> If the <code>directory</code> argument is <code>null</code> then the
system-dependent default temporary-file directory will be used.  The
default temporary-file directory is specified by the system property
<code>java.io.tmpdir</code>.  On UNIX systems the default value of this
property is typically <code>\"/tmp\"</code> or <code>\"/var/tmp\"</code>; on
Microsoft Windows systems it is typically <code>\"C:\\\\WINNT\\\\TEMP\"</code>.  A different
value may be given to this system property when the Java virtual machine
is invoked, but programmatic changes to this property are not guaranteed
to have any effect upon the temporary directory used by this method.

@param  prefix     The prefix string to be used in generating the file's
                   name; must be at least three characters long

@param  suffix     The suffix string to be used in generating the file's
                   name; may be <code>null</code>, in which case the
                   suffix <code>\".tmp\"</code> will be used

@param  directory  The directory in which the file is to be created, or
                   <code>null</code> if the default temporary-file
                   directory is to be used

@return  An abstract pathname denoting a newly-created empty file

@throws  IllegalArgumentException
         If the <code>prefix</code> argument contains fewer than three
         characters

@throws  IOException  If a file could not be created

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method does not allow a file to be created

@since 1.2"
      end

      operation 6846747 "createTempFile"
	class_operation public return_type class_ref 165147 // File
	nparams 2
	  param in name "prefix" explicit_type "String"
	  param in name "suffix" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty file in the default temporary-file directory, using
the given prefix and suffix to generate its name.  Invoking this method
is equivalent to invoking <code>{@link #createTempFile(java.lang.String,
java.lang.String, java.io.File)
createTempFile(prefix,&nbsp;suffix,&nbsp;null)}</code>.

@param  prefix     The prefix string to be used in generating the file's
                   name; must be at least three characters long

@param  suffix     The suffix string to be used in generating the file's
                   name; may be <code>null</code>, in which case the
                   suffix <code>\".tmp\"</code> will be used

@return  An abstract pathname denoting a newly-created empty file

@throws  IllegalArgumentException
         If the <code>prefix</code> argument contains fewer than three
         characters

@throws  IOException  If a file could not be created

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method does not allow a file to be created

@since 1.2"
      end

      operation 6846875 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "pathname" type class_ref 165147 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Basic infrastructure -- 

Compares two abstract pathnames lexicographically.  The ordering
defined by this method depends upon the underlying system.  On UNIX
systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows
systems it is not.

@param   pathname  The abstract pathname to be compared to this abstract
                   pathname

@return  Zero if the argument is equal to this abstract pathname, a
		value less than zero if this abstract pathname is
		lexicographically less than the argument, or a value greater
		than zero if this abstract pathname is lexicographically
		greater than the argument

@since   1.2"
      end

      operation 6847003 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests this abstract pathname for equality with the given object.
Returns <code>true</code> if and only if the argument is not
<code>null</code> and is an abstract pathname that denotes the same file
or directory as this abstract pathname.  Whether or not two abstract
pathnames are equal depends upon the underlying system.  On UNIX
systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows
systems it is not.

@param   obj   The object to be compared with this abstract pathname

@return  <code>true</code> if and only if the objects are the same;
         <code>false</code> otherwise"
      end

      operation 6847131 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes a hash code for this abstract pathname.  Because equality of
abstract pathnames is inherently system-dependent, so is the computation
of their hash codes.  On UNIX systems, the hash code of an abstract
pathname is equal to the exclusive <em>or</em> of the hash code
of its pathname string and the decimal value
<code>1234321</code>.  On Microsoft Windows systems, the hash
code is equal to the exclusive <em>or</em> of the hash code of
its pathname string converted to lower case and the decimal
value <code>1234321</code>.

@return  A hash code for this abstract pathname"
      end

      operation 6847259 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pathname string of this abstract pathname.  This is just the
string returned by the <code>{@link #getPath}</code> method.

@return  The string form of this abstract pathname"
      end

      operation 6847387 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "WriteObject is called to save this filename.
The separator character is saved also so it can be replaced
in case the path is reconstituted on a different host type."
      end

      operation 6847515 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "readObject is called to restore this filename.
The original separator character is read.  If it is different
than the separator character on this system, then the old separator
is replaced by the local separator."
      end

      attribute 2701851 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  301077366599181567L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.0.2 for interoperability "
      end
    end

    class 174107 "BufferedReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Read text from a character-input stream, buffering characters so as to
provide for the efficient reading of characters, arrays, and lines.

<p> The buffer size may be specified, or the default size may be used.  The
default is large enough for most purposes.

<p> In general, each read request made of a Reader causes a corresponding
read request to be made of the underlying character or byte stream.  It is
therefore advisable to wrap a BufferedReader around any Reader whose read()
operations may be costly, such as FileReaders and InputStreamReaders.  For
example,

<pre>
BufferedReader in
  = new BufferedReader(new FileReader(\"foo.in\"));
</pre>

will buffer the input from the specified file.  Without buffering, each
invocation of read() or readLine() could cause bytes to be read from the
file, converted into characters, and then returned, which can be very
inefficient. 

<p> Programs that use DataInputStreams for textual input can be localized by
replacing each DataInputStream with an appropriate BufferedReader.

@see FileReader
@see InputStreamReader

@version 	1.33, 04/01/12
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 1755547 // <generalisation>
	relation 1755547 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1755547 // <generalisation>
	  b parent class_ref 364827 // Reader
      end

      classrelation 1755675 // in (<unidirectional association>)
	relation 1755675 --->
	  a role_name "in" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1755675 // in (<unidirectional association>)
	  b parent class_ref 364827 // Reader
      end

      attribute 2696731 "cb"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2696859 "nChars"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2696987 "nextChar"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2697115 "INVALIDATED"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2697243 "UNMARKED"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2697371 "markedChar"
	private explicit_type "int"
	init_value "=  UNMARKED"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2697499 "readAheadLimit"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Valid only when markedChar > 0 "
      end

      attribute 2697627 "skipLF"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " If the next character is a line feed, skip it "
      end

      attribute 2697755 "markedSkipLF"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The skipLF flag when the mark was set "
      end

      attribute 2697883 "defaultCharBufferSize"
	class_attribute private explicit_type "int"
	init_value "=  8192"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2698011 "defaultExpectedLineLength"
	class_attribute private explicit_type "int"
	init_value "=  80"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6830235 "BufferedReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 364827 // Reader
	  param in name "sz" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a buffering character-input stream that uses an input buffer of
the specified size.

@param  in   A Reader
@param  sz   Input-buffer size

@exception  IllegalArgumentException  If sz is <= 0"
      end

      operation 6830363 "BufferedReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 364827 // Reader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a buffering character-input stream that uses a default-sized
input buffer.

@param  in   A Reader"
      end

      operation 6830491 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check to make sure that the stream has not been closed "
      end

      operation 6830619 "fill"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fill the input buffer, taking the mark into account if it is valid."
      end

      operation 6830747 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a single character.

@return The character read, as an integer in the range
        0 to 65535 (<tt>0x00-0xffff</tt>), or -1 if the
        end of the stream has been reached
@exception  IOException  If an I/O error occurs"
      end

      operation 6830875 "read1"
	private explicit_return_type "int"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read characters into a portion of an array, reading from the underlying
stream if necessary."
      end

      operation 6831003 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read characters into a portion of an array.

<p> This method implements the general contract of the corresponding
<code>{@link Reader#read(char[], int, int) read}</code> method of the
<code>{@link Reader}</code> class.  As an additional convenience, it
attempts to read as many characters as possible by repeatedly invoking
the <code>read</code> method of the underlying stream.  This iterated
<code>read</code> continues until one of the following conditions becomes
true: <ul>

  <li> The specified number of characters have been read,

  <li> The <code>read</code> method of the underlying stream returns
  <code>-1</code>, indicating end-of-file, or

  <li> The <code>ready</code> method of the underlying stream
  returns <code>false</code>, indicating that further input requests
  would block.

</ul> If the first <code>read</code> on the underlying stream returns
<code>-1</code> to indicate end-of-file then this method returns
<code>-1</code>.  Otherwise this method returns the number of characters
actually read.

<p> Subclasses of this class are encouraged, but not required, to
attempt to read as many characters as possible in the same fashion.

<p> Ordinarily this method takes characters from this stream's character
buffer, filling it from the underlying stream as necessary.  If,
however, the buffer is empty, the mark is not valid, and the requested
length is at least as large as the buffer, then this method will read
characters directly from the underlying stream into the given array.
Thus redundant <code>BufferedReader</code>s will not copy data
unnecessarily.

@param      cbuf  Destination buffer
@param      off   Offset at which to start storing characters
@param      len   Maximum number of characters to read

@return     The number of characters read, or -1 if the end of the
            stream has been reached

@exception  IOException  If an I/O error occurs"
      end

      operation 6831131 "readLine"
	package explicit_return_type "String"
	nparams 1
	  param inout name "ignoreLF" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a line of text.  A line is considered to be terminated by any one
of a line feed ('\\n'), a carriage return ('\\r'), or a carriage return
followed immediately by a linefeed.

@param      ignoreLF  If true, the next '\\n' will be skipped

@return     A String containing the contents of the line, not including
            any line-termination characters, or null if the end of the
            stream has been reached

@see        java.io.LineNumberReader#readLine()

@exception  IOException  If an I/O error occurs"
      end

      operation 6831259 "readLine"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a line of text.  A line is considered to be terminated by any one
of a line feed ('\\n'), a carriage return ('\\r'), or a carriage return
followed immediately by a linefeed.

@return     A String containing the contents of the line, not including
            any line-termination characters, or null if the end of the
            stream has been reached

@exception  IOException  If an I/O error occurs"
      end

      operation 6831387 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skip characters.

@param  n  The number of characters to skip

@return    The number of characters actually skipped

@exception  IllegalArgumentException  If <code>n</code> is negative.
@exception  IOException  If an I/O error occurs"
      end

      operation 6831515 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether this stream is ready to be read.  A buffered character
stream is ready if the buffer is not empty, or if the underlying
character stream is ready.

@exception  IOException  If an I/O error occurs"
      end

      operation 6831643 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether this stream supports the mark() operation, which it does."
      end

      operation 6831771 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark the present position in the stream.  Subsequent calls to reset()
will attempt to reposition the stream to this point.

@param readAheadLimit   Limit on the number of characters that may be
                        read while still preserving the mark.  After
                        reading this many characters, attempting to
                        reset the stream may fail.  A limit value larger
                        than the size of the input buffer will cause a
                        new buffer to be allocated whose size is no
                        smaller than limit.  Therefore large values
                        should be used with care.

@exception  IllegalArgumentException  If readAheadLimit is < 0
@exception  IOException  If an I/O error occurs"
      end

      operation 6831899 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the stream to the most recent mark.

@exception  IOException  If the stream has never been marked,
                         or if the mark has been invalidated"
      end

      operation 6832027 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the stream.

@exception  IOException  If an I/O error occurs"
      end
    end

    class 179099 "InputStream"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This abstract class is the superclass of all classes representing
an input stream of bytes.

<p> Applications that need to define a subclass of <code>InputStream</code>
must always provide a method that returns the next byte of input.

@author  Arthur van Hoff
@version 1.45, 02/19/04
@see     java.io.BufferedInputStream
@see     java.io.ByteArrayInputStream
@see     java.io.DataInputStream
@see     java.io.FilterInputStream
@see     java.io.InputStream#read()
@see     java.io.OutputStream
@see     java.io.PushbackInputStream
@since   JDK1.0"
      classrelation 195739 // <realization>
	relation 195739 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 195739 // <realization>
	  b parent class_ref 179227 // Closeable
      end

      attribute 221211 "SKIP_BUFFER_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  2048"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " SKIP_BUFFER_SIZE is used to determine the size of skipBuffer"
      end

      attribute 221339 "skipBuffer"
	class_attribute private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " skipBuffer is initialized in skip(long), if needed."
      end

      operation 443035 "read"
	abstract public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from the input stream. The value byte is
returned as an <code>int</code> in the range <code>0</code> to
<code>255</code>. If no byte is available because the end of the stream
has been reached, the value <code>-1</code> is returned. This method
blocks until input data is available, the end of the stream is detected,
or an exception is thrown.

<p> A subclass must provide an implementation of this method.

@return     the next byte of data, or <code>-1</code> if the end of the
            stream is reached.
@exception  IOException  if an I/O error occurs."
      end

      operation 443163 "read"
	public explicit_return_type "int"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads some number of bytes from the input stream and stores them into
the buffer array <code>b</code>. The number of bytes actually read is
returned as an integer.  This method blocks until input data is
available, end of file is detected, or an exception is thrown.

<p> If <code>b</code> is <code>null</code>, a
<code>NullPointerException</code> is thrown.  If the length of
<code>b</code> is zero, then no bytes are read and <code>0</code> is
returned; otherwise, there is an attempt to read at least one byte. If
no byte is available because the stream is at end of file, the value
<code>-1</code> is returned; otherwise, at least one byte is read and
stored into <code>b</code>.

<p> The first byte read is stored into element <code>b[0]</code>, the
next one into <code>b[1]</code>, and so on. The number of bytes read is,
at most, equal to the length of <code>b</code>. Let <i>k</i> be the
number of bytes actually read; these bytes will be stored in elements
<code>b[0]</code> through <code>b[</code><i>k</i><code>-1]</code>,
leaving elements <code>b[</code><i>k</i><code>]</code> through
<code>b[b.length-1]</code> unaffected.

<p> If the first byte cannot be read for any reason other than end of
file, then an <code>IOException</code> is thrown. In particular, an
<code>IOException</code> is thrown if the input stream has been closed.

<p> The <code>read(b)</code> method for class <code>InputStream</code>
has the same effect as: <pre><code> read(b, 0, b.length) </code></pre>

@param      b   the buffer into which the data is read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> is there is no more data because the end of
            the stream has been reached.
@exception  IOException  if an I/O error occurs.
@exception  NullPointerException  if <code>b</code> is <code>null</code>.
@see        java.io.InputStream#read(byte[], int, int)"
      end

      operation 443291 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from the input stream into
an array of bytes.  An attempt is made to read as many as
<code>len</code> bytes, but a smaller number may be read.
The number of bytes actually read is returned as an integer.

<p> This method blocks until input data is available, end of file is
detected, or an exception is thrown.

<p> If <code>b</code> is <code>null</code>, a
<code>NullPointerException</code> is thrown.

<p> If <code>off</code> is negative, or <code>len</code> is negative, or
<code>off+len</code> is greater than the length of the array
<code>b</code>, then an <code>IndexOutOfBoundsException</code> is
thrown.

<p> If <code>len</code> is zero, then no bytes are read and
<code>0</code> is returned; otherwise, there is an attempt to read at
least one byte. If no byte is available because the stream is at end of
file, the value <code>-1</code> is returned; otherwise, at least one
byte is read and stored into <code>b</code>.

<p> The first byte read is stored into element <code>b[off]</code>, the
next one into <code>b[off+1]</code>, and so on. The number of bytes read
is, at most, equal to <code>len</code>. Let <i>k</i> be the number of
bytes actually read; these bytes will be stored in elements
<code>b[off]</code> through <code>b[off+</code><i>k</i><code>-1]</code>,
leaving elements <code>b[off+</code><i>k</i><code>]</code> through
<code>b[off+len-1]</code> unaffected.

<p> In every case, elements <code>b[0]</code> through
<code>b[off]</code> and elements <code>b[off+len]</code> through
<code>b[b.length-1]</code> are unaffected.

<p> If the first byte cannot be read for any reason other than end of
file, then an <code>IOException</code> is thrown. In particular, an
<code>IOException</code> is thrown if the input stream has been closed.

<p> The <code>read(b,</code> <code>off,</code> <code>len)</code> method
for class <code>InputStream</code> simply calls the method
<code>read()</code> repeatedly. If the first such call results in an
<code>IOException</code>, that exception is returned from the call to
the <code>read(b,</code> <code>off,</code> <code>len)</code> method.  If
any subsequent call to <code>read()</code> results in a
<code>IOException</code>, the exception is caught and treated as if it
were end of file; the bytes read up to that point are stored into
<code>b</code> and the number of bytes read before the exception
occurred is returned.  Subclasses are encouraged to provide a more
efficient implementation of this method.

@param      b     the buffer into which the data is read.
@param      off   the start offset in array <code>b</code>
                  at which the data is written.
@param      len   the maximum number of bytes to read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the stream has been reached.
@exception  IOException  if an I/O error occurs.
@exception  NullPointerException  if <code>b</code> is <code>null</code>.
@see        java.io.InputStream#read()"
      end

      operation 443419 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips over and discards <code>n</code> bytes of data from this input
stream. The <code>skip</code> method may, for a variety of reasons, end
up skipping over some smaller number of bytes, possibly <code>0</code>.
This may result from any of a number of conditions; reaching end of file
before <code>n</code> bytes have been skipped is only one possibility.
The actual number of bytes skipped is returned.  If <code>n</code> is
negative, no bytes are skipped.

<p> The <code>skip</code> method of <code>InputStream</code> creates a
byte array and then repeatedly reads into it until <code>n</code> bytes
have been read or the end of the stream has been reached. Subclasses are
encouraged to provide a more efficient implementation of this method.

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped.
@exception  IOException  if an I/O error occurs."
      end

      operation 443547 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read (or skipped over) from
this input stream without blocking by the next caller of a method for
this input stream.  The next caller might be the same thread or
another thread.

<p> The <code>available</code> method for class <code>InputStream</code>
always returns <code>0</code>.

<p> This method should be overridden by subclasses.

@return     the number of bytes that can be read from this input stream
            without blocking.
@exception  IOException  if an I/O error occurs."
      end

      operation 443675 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this input stream and releases any system resources associated
with the stream.

<p> The <code>close</code> method of <code>InputStream</code> does
nothing.

@exception  IOException  if an I/O error occurs."
      end

      operation 443803 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the current position in this input stream. A subsequent call to
the <code>reset</code> method repositions this stream at the last marked
position so that subsequent reads re-read the same bytes.

<p> The <code>readlimit</code> arguments tells this input stream to
allow that many bytes to be read before the mark position gets
invalidated.

<p> The general contract of <code>mark</code> is that, if the method
<code>markSupported</code> returns <code>true</code>, the stream somehow
remembers all the bytes read after the call to <code>mark</code> and
stands ready to supply those same bytes again if and whenever the method
<code>reset</code> is called.  However, the stream is not required to
remember any data at all if more than <code>readlimit</code> bytes are
read from the stream before <code>reset</code> is called.

<p> The <code>mark</code> method of <code>InputStream</code> does
nothing.

@param   readlimit   the maximum limit of bytes that can be read before
                     the mark position becomes invalid.
@see     java.io.InputStream#reset()"
      end

      operation 443931 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Repositions this stream to the position at the time the
<code>mark</code> method was last called on this input stream.

<p> The general contract of <code>reset</code> is:

<p><ul>

<li> If the method <code>markSupported</code> returns
<code>true</code>, then:

    <ul><li> If the method <code>mark</code> has not been called since
    the stream was created, or the number of bytes read from the stream
    since <code>mark</code> was last called is larger than the argument
    to <code>mark</code> at that last call, then an
    <code>IOException</code> might be thrown.

    <li> If such an <code>IOException</code> is not thrown, then the
    stream is reset to a state such that all the bytes read since the
    most recent call to <code>mark</code> (or since the start of the
    file, if <code>mark</code> has not been called) will be resupplied
    to subsequent callers of the <code>read</code> method, followed by
    any bytes that otherwise would have been the next input data as of
    the time of the call to <code>reset</code>. </ul>

<li> If the method <code>markSupported</code> returns
<code>false</code>, then:

    <ul><li> The call to <code>reset</code> may throw an
    <code>IOException</code>.

    <li> If an <code>IOException</code> is not thrown, then the stream
    is reset to a fixed state that depends on the particular type of the
    input stream and how it was created. The bytes that will be supplied
    to subsequent callers of the <code>read</code> method depend on the
    particular type of the input stream. </ul></ul>

<p>The method <code>reset</code> for class <code>InputStream</code>
does nothing except throw an <code>IOException</code>.

@exception  IOException  if this stream has not been marked or if the
              mark has been invalidated.
@see     java.io.InputStream#mark(int)
@see     java.io.IOException"
      end

      operation 444059 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this input stream supports the <code>mark</code> and
<code>reset</code> methods. Whether or not <code>mark</code> and
<code>reset</code> are supported is an invariant property of a
particular input stream instance. The <code>markSupported</code> method
of <code>InputStream</code> returns <code>false</code>.

@return  <code>true</code> if this stream instance supports the mark
         and reset methods; <code>false</code> otherwise.
@see     java.io.InputStream#mark(int)
@see     java.io.InputStream#reset()"
      end
    end

    class 179227 "Closeable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <tt>Closeable</tt> is a source or destination of data that can be closed. 
The close method is invoked to release resources that the object is 
holding (such as open files).

@version 1.4 03/12/19
@since 1.5"
      operation 442907 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this stream and releases any system resources associated
with it. If the stream is already closed then invoking this 
method has no effect. 

@throws IOException if an I/O error occurs"
      end
    end

    class 179355 "IOException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that an I/O exception of some sort has occurred. This
class is the general class of exceptions produced by failed or
interrupted I/O operations.

@author  unascribed
@version 1.22, 12/19/03
@see     java.io.InputStream
@see     java.io.OutputStream
@since   JDK1.0"
      classrelation 270363 // <generalisation>
	relation 270363 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 270363 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      operation 831771 "IOException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IOException</code> with <code>null</code>
as its error detail message."
      end

      operation 831899 "IOException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IOException</code> with the specified detail
message. The error message string <code>s</code> can later be
retrieved by the <code>{@link java.lang.Throwable#getMessage}</code>
method of class <code>java.lang.Throwable</code>.

@param   s   the detail message."
      end
    end

    class 183835 "OutputStream"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This abstract class is the superclass of all classes representing 
an output stream of bytes. An output stream accepts output bytes 
and sends them to some sink.
<p>
Applications that need to define a subclass of 
<code>OutputStream</code> must always provide at least a method 
that writes one byte of output.

@author  Arthur van Hoff
@version 1.29, 04/21/04
@see     java.io.BufferedOutputStream
@see     java.io.ByteArrayOutputStream
@see     java.io.DataOutputStream
@see     java.io.FilterOutputStream
@see     java.io.InputStream
@see     java.io.OutputStream#write(int)
@since   JDK1.0"
      classrelation 197531 // <realization>
	relation 197531 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 197531 // <realization>
	  b parent class_ref 179227 // Closeable
      end

      classrelation 197659 // <realization>
	relation 197659 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 197659 // <realization>
	  b parent class_ref 183963 // Flushable
      end

      operation 472859 "write"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified byte to this output stream. The general 
contract for <code>write</code> is that one byte is written 
to the output stream. The byte to be written is the eight 
low-order bits of the argument <code>b</code>. The 24 
high-order bits of <code>b</code> are ignored.
<p>
Subclasses of <code>OutputStream</code> must provide an 
implementation for this method. 

@param      b   the <code>byte</code>.
@exception  IOException  if an I/O error occurs. In particular, 
            an <code>IOException</code> may be thrown if the 
            output stream has been closed."
      end

      operation 472987 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>b.length</code> bytes from the specified byte array 
to this output stream. The general contract for <code>write(b)</code> 
is that it should have exactly the same effect as the call 
<code>write(b, 0, b.length)</code>.

@param      b   the data.
@exception  IOException  if an I/O error occurs.
@see        java.io.OutputStream#write(byte[], int, int)"
      end

      operation 473115 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified byte array 
starting at offset <code>off</code> to this output stream. 
The general contract for <code>write(b, off, len)</code> is that 
some of the bytes in the array <code>b</code> are written to the 
output stream in order; element <code>b[off]</code> is the first 
byte written and <code>b[off+len-1]</code> is the last byte written 
by this operation.
<p>
The <code>write</code> method of <code>OutputStream</code> calls 
the write method of one argument on each of the bytes to be 
written out. Subclasses are encouraged to override this method and 
provide a more efficient implementation. 
<p>
If <code>b</code> is <code>null</code>, a 
<code>NullPointerException</code> is thrown.
<p>
If <code>off</code> is negative, or <code>len</code> is negative, or 
<code>off+len</code> is greater than the length of the array 
<code>b</code>, then an <tt>IndexOutOfBoundsException</tt> is thrown.

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@exception  IOException  if an I/O error occurs. In particular, 
            an <code>IOException</code> is thrown if the output 
            stream is closed."
      end

      operation 473243 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this output stream and forces any buffered output bytes 
to be written out. The general contract of <code>flush</code> is 
that calling it is an indication that, if any bytes previously 
written have been buffered by the implementation of the output 
stream, such bytes should immediately be written to their 
intended destination.
<p>
If the intended destination of this stream is an abstraction provided by
the underlying operating system, for example a file, then flushing the
stream guarantees only that bytes previously written to the stream are
passed to the operating system for writing; it does not guarantee that
they are actually written to a physical device such as a disk drive.
<p>
The <code>flush</code> method of <code>OutputStream</code> does nothing.

@exception  IOException  if an I/O error occurs."
      end

      operation 473371 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this output stream and releases any system resources 
associated with this stream. The general contract of <code>close</code> 
is that it closes the output stream. A closed stream cannot perform 
output operations and cannot be reopened.
<p>
The <code>close</code> method of <code>OutputStream</code> does nothing.

@exception  IOException  if an I/O error occurs."
      end
    end

    class 183963 "Flushable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <tt>Flushable</tt> is a destination of data that can be flushed.  The
flush method is invoked to write any buffered output to the underlying
stream.

@version 1.1 04/04/21
@since 1.5"
      operation 472731 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this stream by writing any buffered output to the underlying
stream.

@throws IOException If an I/O error occurs"
      end
    end

    class 201115 "ObjectInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An ObjectInputStream deserializes primitive data and objects previously
written using an ObjectOutputStream.

<p>ObjectOutputStream and ObjectInputStream can provide an application with
persistent storage for graphs of objects when used with a FileOutputStream
and FileInputStream respectively.  ObjectInputStream is used to recover
those objects previously serialized. Other uses include passing objects
between hosts using a socket stream or for marshaling and unmarshaling
arguments and parameters in a remote communication system.

<p>ObjectInputStream ensures that the types of all objects in the graph
created from the stream match the classes present in the Java Virtual
Machine.  Classes are loaded as required using the standard mechanisms.

<p>Only objects that support the java.io.Serializable or
java.io.Externalizable interface can be read from streams.

<p>The method <code>readObject</code> is used to read an object from the
stream.  Java's safe casting should be used to get the desired type.  In
Java, strings and arrays are objects and are treated as objects during
serialization. When read they need to be cast to the expected type.

<p>Primitive data types can be read from the stream using the appropriate
method on DataInput.

<p>The default deserialization mechanism for objects restores the contents
of each field to the value and type it had when it was written.  Fields
declared as transient or static are ignored by the deserialization process.
References to other objects cause those objects to be read from the stream
as necessary.  Graphs of objects are restored correctly using a reference
sharing mechanism.  New objects are always allocated when deserializing,
which prevents existing objects from being overwritten.

<p>Reading an object is analogous to running the constructors of a new
object.  Memory is allocated for the object and initialized to zero (NULL).
No-arg constructors are invoked for the non-serializable classes and then
the fields of the serializable classes are restored from the stream starting
with the serializable class closest to java.lang.object and finishing with
the object's most specific class.

<p>For example to read from a stream as written by the example in
ObjectOutputStream:
<br>
<pre>
	FileInputStream fis = new FileInputStream(\"t.tmp\");
	ObjectInputStream ois = new ObjectInputStream(fis);

	int i = ois.readInt();
	String today = (String) ois.readObject();
	Date date = (Date) ois.readObject();

	ois.close();
</pre>

<p>Classes control how they are serialized by implementing either the
java.io.Serializable or java.io.Externalizable interfaces.

<p>Implementing the Serializable interface allows object serialization to
save and restore the entire state of the object and it allows classes to
evolve between the time the stream is written and the time it is read.  It
automatically traverses references between objects, saving and restoring
entire graphs.

<p>Serializable classes that require special handling during the
serialization and deserialization process should implement the following
methods:<p>

<pre>
private void writeObject(java.io.ObjectOutputStream stream)
    throws IOException;
private void readObject(java.io.ObjectInputStream stream)
    throws IOException, ClassNotFoundException; 
private void readObjectNoData() 
    throws ObjectStreamException;
</pre>

<p>The readObject method is responsible for reading and restoring the state
of the object for its particular class using data written to the stream by
the corresponding writeObject method.  The method does not need to concern
itself with the state belonging to its superclasses or subclasses.  State is
restored by reading data from the ObjectInputStream for the individual
fields and making assignments to the appropriate fields of the object.
Reading primitive data types is supported by DataInput.

<p>Any attempt to read object data which exceeds the boundaries of the
custom data written by the corresponding writeObject method will cause an
OptionalDataException to be thrown with an eof field value of true.
Non-object reads which exceed the end of the allotted data will reflect the
end of data in the same way that they would indicate the end of the stream:
bytewise reads will return -1 as the byte read or number of bytes read, and
primitive reads will throw EOFExceptions.  If there is no corresponding
writeObject method, then the end of default serialized data marks the end of
the allotted data.

<p>Primitive and object read calls issued from within a readExternal method
behave in the same manner--if the stream is already positioned at the end of
data written by the corresponding writeExternal method, object reads will
throw OptionalDataExceptions with eof set to true, bytewise reads will
return -1, and primitive reads will throw EOFExceptions.  Note that this
behavior does not hold for streams written with the old
<code>ObjectStreamConstants.PROTOCOL_VERSION_1</code> protocol, in which the
end of data written by writeExternal methods is not demarcated, and hence
cannot be detected.

<p>The readObjectNoData method is responsible for initializing the state of
the object for its particular class in the event that the serialization
stream does not list the given class as a superclass of the object being
deserialized.  This may occur in cases where the receiving party uses a
different version of the deserialized instance's class than the sending
party, and the receiver's version extends classes that are not extended by
the sender's version.  This may also occur if the serialization stream has
been tampered; hence, readObjectNoData is useful for initializing
deserialized objects properly despite a \"hostile\" or incomplete source
stream.

<p>Serialization does not read or assign values to the fields of any object
that does not implement the java.io.Serializable interface.  Subclasses of
Objects that are not serializable can be serializable. In this case the
non-serializable class must have a no-arg constructor to allow its fields to
be initialized.  In this case it is the responsibility of the subclass to
save and restore the state of the non-serializable class. It is frequently
the case that the fields of that class are accessible (public, package, or
protected) or that there are get and set methods that can be used to restore
the state.

<p>Any exception that occurs while deserializing an object will be caught by
the ObjectInputStream and abort the reading process.

<p>Implementing the Externalizable interface allows the object to assume
complete control over the contents and format of the object's serialized
form.  The methods of the Externalizable interface, writeExternal and
readExternal, are called to save and restore the objects state.  When
implemented by a class they can write and read their own state using all of
the methods of ObjectOutput and ObjectInput.  It is the responsibility of
the objects to handle any versioning that occurs.

<p>Enum constants are deserialized differently than ordinary serializable or
externalizable objects.  The serialized form of an enum constant consists
solely of its name; field values of the constant are not transmitted.  To
deserialize an enum constant, ObjectInputStream reads the constant name from
the stream; the deserialized constant is then obtained by calling the static
method <code>Enum.valueOf(Class, String)</code> with the enum constant's
base type and the received constant name as arguments.  Like other
serializable or externalizable objects, enum constants can function as the
targets of back references appearing subsequently in the serialization
stream.  The process by which enum constants are deserialized cannot be
customized: any class-specific readObject, readObjectNoData, and readResolve
methods defined by enum types are ignored during deserialization.
Similarly, any serialPersistentFields or serialVersionUID field declarations
are also ignored--all enum types have a fixed serialVersionUID of 0L.

@author	Mike Warres
@author	Roger Riggs
@version 1.157, 06/04/05
@see java.io.DataInput
@see java.io.ObjectOutputStream
@see java.io.Serializable
@see <a href=\"../../../guide/serialization/spec/input.doc.html\"> Object Serialization Specification, Section 3, Object Input Classes</a>
@since   JDK1.1"
      classrelation 231835 // <generalisation>
	relation 231835 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 231835 // <generalisation>
	  b parent class_ref 179099 // InputStream
      end

      classrelation 232091 // <realization>
	relation 232091 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 232091 // <realization>
	  b parent class_ref 201627 // ObjectInput
      end

      classrelation 232475 // <realization>
	relation 232475 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 232475 // <realization>
	  b parent class_ref 202011 // ObjectStreamConstants
      end

      attribute 245787 "NULL_HANDLE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " handle value representing null "
      end

      attribute 245915 "unsharedMarker"
	class_attribute const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " marker for unshared objects in internal handle table "
      end

      classrelation 232603 // primClasses (<unidirectional association>)
	relation 232603 --->
	  a role_name "primClasses" init_value "=  new HashMap(8, 1.0F)" class_relation const_relation private
	    comment " table mapping primitive type names to corresponding class objects 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 232603 // primClasses (<unidirectional association>)
	  b parent class_ref 144923 // HashMap
      end

      extra_member 131355 "initialization"
	
	cpp "" ""
	java "  static {
	primClasses.put(\"boolean\", boolean.class);
	primClasses.put(\"byte\", byte.class);
	primClasses.put(\"char\", char.class);
	primClasses.put(\"short\", short.class);
	primClasses.put(\"int\", int.class);
	primClasses.put(\"long\", long.class);
	primClasses.put(\"float\", float.class);
	primClasses.put(\"double\", double.class);
	primClasses.put(\"void\", void.class);
    }"
	php ""
	python ""
	idl ""
      end

      class 202267 "Caches"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 232731 // subclassAudits (<unidirectional association>)
	  relation 232731 --->
	    a role_name "subclassAudits" init_value "=  
	    new ConcurrentHashMap<WeakClassKey,Boolean>()" class_relation const_relation package
	      comment " cache of subclass security audit results 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<WeakClassKey,Boolean> ${name}${value};
"
	      classrelation_ref 232731 // subclassAudits (<unidirectional association>)
	    b parent class_ref 202651 // ConcurrentMap
	end

	classrelation 232859 // subclassAuditsQueue (<unidirectional association>)
	  relation 232859 --->
	    a role_name "subclassAuditsQueue" init_value "=  
	    new ReferenceQueue<Class<?>>()" class_relation const_relation package
	      comment " queue for WeakReferences to audited subclasses 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>> ${name}${value};
"
	      classrelation_ref 232859 // subclassAuditsQueue (<unidirectional association>)
	    b parent class_ref 202779 // ReferenceQueue
	end
      end

      class 202907 "BlockDataInputStream"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 234395 // <generalisation>
	  relation 234395 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 234395 // <generalisation>
	    b parent class_ref 179099 // InputStream
	end

	classrelation 234523 // <realization>
	  relation 234523 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 234523 // <realization>
	    b parent class_ref 201755 // DataInput
	end

	attribute 247579 "MAX_BLOCK_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value "=  1024"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " maximum data block length "
	end

	attribute 247707 "MAX_HEADER_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value "=  5"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " maximum data block header length "
	end

	attribute 247835 "CHAR_BUF_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value "=  256"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (tunable) length of char buffer (for reading strings) "
	end

	attribute 247963 "HEADER_BLOCKED"
	  class_attribute const_attribute private explicit_type "int"
	  init_value "=  -2"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " readBlockHeader() return value indicating header read may block "
	end

	attribute 248091 "buf"
	  const_attribute private explicit_type "byte"
	  multiplicity "[]"
	  init_value "=  new byte[MAX_BLOCK_SIZE]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " buffer for reading general/block data "
	end

	attribute 248219 "hbuf"
	  const_attribute private explicit_type "byte"
	  multiplicity "[]"
	  init_value "=  new byte[MAX_HEADER_SIZE]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " buffer for reading block data headers "
	end

	attribute 248347 "cbuf"
	  const_attribute private explicit_type "char"
	  multiplicity "[]"
	  init_value "=  new char[CHAR_BUF_SIZE]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " char buffer for fast string reads "
	end

	attribute 248475 "blkmode"
	  private explicit_type "boolean"
	  init_value "=  false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " block data mode "
	end

	attribute 248603 "pos"
	  private explicit_type "int"
	  init_value "=  0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " block data state fields; values meaningful only when blkmode true
 current offset into buf "
	end

	attribute 248731 "end"
	  private explicit_type "int"
	  init_value "=  -1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " end offset of valid data in buf, or -1 if no more block data "
	end

	attribute 248859 "unread"
	  private explicit_type "int"
	  init_value "=  0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " number of bytes in current block yet to be read from stream "
	end

	classrelation 234651 // in (<unidirectional association>)
	  relation 234651 --->
	    a role_name "in" const_relation private
	      comment " underlying stream (wrapped in peekable filter stream) 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 234651 // in (<unidirectional association>)
	    b parent class_ref 204699 // PeekInputStream
	end

	classrelation 234779 // din (<unidirectional association>)
	  relation 234779 --->
	    a role_name "din" const_relation private
	      comment " loopback stream (for data reads that span data blocks) 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 234779 // din (<unidirectional association>)
	    b parent class_ref 204827 // DataInputStream
	end

	operation 682267 "BlockDataInputStream"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "in" type class_ref 179099 // InputStream
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates new BlockDataInputStream on top of given underlying stream.
Block data mode is turned off by default."
	end

	operation 682395 "setBlockDataMode"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "newmode" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets block data mode to the given mode (true == on, false == off)
and returns the previous mode value.  If the new mode is the same as
the old mode, no action is taken.  Throws IllegalStateException if
block data mode is being switched from on to off while unconsumed
block data is still present in the stream."
	end

	operation 682523 "getBlockDataMode"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the stream is currently in block data mode, false
otherwise."
	end

	operation 682651 "skipBlockData"
	  package explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "If in block data mode, skips to the end of the current group of data
blocks (but does not unset block data mode).  If not in block data
mode, throws an IllegalStateException."
	end

	operation 682779 "readBlockHeader"
	  private explicit_return_type "int"
	  nparams 1
	    param inout name "canBlock" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Attempts to read in the next block data header (if any).  If
canBlock is false and a full header cannot be read without possibly
blocking, returns HEADER_BLOCKED, else if the next element in the
stream is a block data header, returns the block data length
specified by the header, else returns -1."
	end

	operation 682907 "refill"
	  private explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Refills internal buffer buf with block data.  Any data in buf at the
time of the call is considered consumed.  Sets the pos, end, and
unread fields to reflect the new amount of available block data; if
the next element in the stream is not a data block, sets pos and
unread to 0 and end to -1."
	end

	operation 683035 "currentBlockRemaining"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "If in block data mode, returns the number of unconsumed bytes
remaining in the current data block.  If not in block data mode,
throws an IllegalStateException."
	end

	operation 683163 "peek"
	  package explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Peeks at (but does not consume) and returns the next byte value in
the stream, or -1 if the end of the stream/block data (if in block
data mode) has been reached."
	end

	operation 683291 "peekByte"
	  package explicit_return_type "byte"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Peeks at (but does not consume) and returns the next byte value in
the stream, or throws EOFException if end of stream/block data has
been reached."
	end

	operation 683419 "read"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------- generic input stream methods ------------------ 

The following methods are equivalent to their counterparts in
InputStream, except that they interpret data block boundaries and
read the requested data from within data blocks when in block data
mode."
	end

	operation 683547 "read"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "b" explicit_type "byte"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 683675 "skip"
	  public explicit_return_type "long"
	  nparams 1
	    param in name "len" explicit_type "long"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 683803 "available"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 683931 "close"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 684059 "read"
	  package explicit_return_type "int"
	  nparams 4
	    param in name "b" explicit_type "byte"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	    param inout name "copy" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Attempts to read len bytes into byte array b at offset off.  Returns
the number of bytes read, or -1 if the end of stream/block data has
been reached.  If copy is true, reads values into an intermediate
buffer before copying them to b (to avoid exposing a reference to
b)."
	end

	operation 684187 "readFully"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "b" explicit_type "byte"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------- primitive data input methods ------------------ 

The following methods are equivalent to their counterparts in
DataInputStream, except that they interpret data block boundaries
and read the requested data from within data blocks when in block
data mode."
	end

	operation 684315 "readFully"
	  public explicit_return_type "void"
	  nparams 3
	    param in name "b" explicit_type "byte"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 684443 "readFully"
	  public explicit_return_type "void"
	  nparams 4
	    param in name "b" explicit_type "byte"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	    param inout name "copy" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 684571 "skipBytes"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "n" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 684699 "readBoolean"
	  public explicit_return_type "boolean"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 684827 "readByte"
	  public explicit_return_type "byte"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 684955 "readUnsignedByte"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 685083 "readChar"
	  public explicit_return_type "char"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 685211 "readShort"
	  public explicit_return_type "short"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 685339 "readUnsignedShort"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 685467 "readInt"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 685595 "readFloat"
	  public explicit_return_type "float"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 685723 "readLong"
	  public explicit_return_type "long"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 685851 "readDouble"
	  public explicit_return_type "double"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 685979 "readUTF"
	  public explicit_return_type "String"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 686107 "readLine"
	  public explicit_return_type "String"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 686235 "readBooleans"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "boolean"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " -------------- primitive data array input methods --------------- 

The following methods read in spans of primitive data values.
Though equivalent to calling the corresponding primitive read
methods repeatedly, these methods are optimized for reading groups
of primitive data values more efficiently."
	end

	operation 686363 "readChars"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "v" explicit_type "char"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 686491 "readShorts"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "v" explicit_type "short"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 686619 "readInts"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "v" explicit_type "int"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 686747 "readFloats"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "v" explicit_type "float"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 686875 "readLongs"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "v" explicit_type "long"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 687003 "readDoubles"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "v" explicit_type "double"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 687131 "readLongUTF"
	  package explicit_return_type "String"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reads in string written in \"long\" UTF format.  \"Long\" UTF format is
identical to standard UTF, except that it uses an 8 byte header
(instead of the standard 2 bytes) to convey the UTF encoding length."
	end

	operation 687259 "readUTFBody"
	  private explicit_return_type "String"
	  nparams 1
	    param in name "utflen" explicit_type "long"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reads in the \"body\" (i.e., the UTF representation minus the 2-byte
or 8-byte length header) of a UTF encoding, which occupies the next
utflen bytes."
	end

	operation 687387 "readUTFSpan"
	  private explicit_return_type "long"
	  nparams 2
	    param inout name "sbuf" type class_ref 198171 // StringBuffer
	    param in name "utflen" explicit_type "long"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reads span of UTF-encoded characters out of internal buffer
(starting at offset pos and ending at or before offset end),
consuming no more than utflen bytes.  Appends read characters to
sbuf.  Returns the number of bytes consumed."
	end

	operation 687515 "readUTFChar"
	  private explicit_return_type "int"
	  nparams 2
	    param inout name "sbuf" type class_ref 198171 // StringBuffer
	    param in name "utflen" explicit_type "long"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reads in single UTF-encoded character one byte at a time, appends
the character to sbuf, and returns the number of bytes consumed.
This method is used when reading in UTF strings written in block
data mode to handle UTF-encoded characters which (potentially)
straddle block-data boundaries."
	end
      end

      classrelation 232987 // bin (<unidirectional association>)
	relation 232987 --->
	  a role_name "bin" const_relation private
	    comment " filter stream for handling block data conversion 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 232987 // bin (<unidirectional association>)
	  b parent class_ref 202907 // BlockDataInputStream
      end

      class 203035 "ValidationList"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	class 204571 "Callback"
	  visibility private 
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 233755 // obj (<unidirectional association>)
	    relation 233755 --->
	      a role_name "obj" const_relation package
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 233755 // obj (<unidirectional association>)
	      b parent class_ref 203675 // ObjectInputValidation
	  end

	  attribute 247323 "priority"
	    const_attribute package explicit_type "int"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  classrelation 233883 // next (<unidirectional association>)
	    relation 233883 --->
	      a role_name "next" package
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 233883 // next (<unidirectional association>)
	      b parent class_ref 204571 // Callback
	  end

	  operation 680603 "Callback"
	    package explicit_return_type ""
	    nparams 3
	      param inout name "obj" type class_ref 203675 // ObjectInputValidation
	      param in name "priority" explicit_type "int"
	      param inout name "next" type class_ref 204571 // Callback
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	classrelation 234011 // list (<unidirectional association>)
	  relation 234011 --->
	    a role_name "list" private
	      comment " linked list of callbacks 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 234011 // list (<unidirectional association>)
	    b parent class_ref 204571 // Callback
	end

	operation 680731 "ValidationList"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates new (empty) ValidationList."
	end

	operation 680859 "register"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "obj" type class_ref 203675 // ObjectInputValidation
	    param in name "priority" explicit_type "int"
	  nexceptions 1
	    exception class_ref 203931 // InvalidObjectException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Registers callback.  Throws InvalidObjectException if callback
object is null."
	end

	operation 680987 "doCallbacks"
	  package explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 203931 // InvalidObjectException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Invokes all registered callbacks and clears the callback list.
Callbacks with higher priorities are called first; those with equal
priorities may be called in any order.  If any of the callbacks
throws an InvalidObjectException, the callback process is terminated
and the exception propagated upwards."
	end

	operation 681115 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resets the callback list to its initial (empty) state."
	end
      end

      classrelation 233115 // vlist (<unidirectional association>)
	relation 233115 --->
	  a role_name "vlist" const_relation private
	    comment " validation callback list 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 233115 // vlist (<unidirectional association>)
	  b parent class_ref 203035 // ValidationList
      end

      attribute 246043 "depth"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " recursion depth "
      end

      attribute 246171 "closed"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " whether stream is closed "
      end

      class 203163 "HandleTable"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 248987 "STATUS_OK"
	  class_attribute const_attribute private explicit_type "byte"
	  init_value "=  1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " status codes indicating whether object has associated exception "
	end

	attribute 249115 "STATUS_UNKNOWN"
	  class_attribute const_attribute private explicit_type "byte"
	  init_value "=  2"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 249243 "STATUS_EXCEPTION"
	  class_attribute const_attribute private explicit_type "byte"
	  init_value "=  3"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 249371 "status"
	  package explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " array mapping handle -> object status "
	end

	attribute 249499 "entries"
	  package explicit_type "Object"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " array mapping handle -> object/exception (depending on status) "
	end

	class 204955 "HandleList"
	  visibility private 
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  attribute 249883 "list"
	    private explicit_type "int"
	    multiplicity "[]"
	    init_value "=  new int[4]"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  attribute 250011 "size"
	    private explicit_type "int"
	    init_value "=  0"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  operation 689051 "HandleList"
	    public explicit_return_type ""
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 689179 "add"
	    public explicit_return_type "void"
	    nparams 1
	      param in name "handle" explicit_type "int"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 689307 "get"
	    public explicit_return_type "int"
	    nparams 1
	      param in name "index" explicit_type "int"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 689435 "size"
	    public explicit_return_type "int"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	classrelation 234907 // deps (<unidirectional association>)
	  relation 234907 --->
	    a role_name "deps" multiplicity "[]" package
	      comment " array mapping handle -> list of dependent handles (if any) 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 234907 // deps (<unidirectional association>)
	    b parent class_ref 204955 // HandleList
	end

	attribute 249627 "lowDep"
	  package explicit_type "int"
	  init_value "=  -1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " lowest unresolved dependency "
	end

	attribute 249755 "size"
	  package explicit_type "int"
	  init_value "=  0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " number of handles in table "
	end

	operation 687643 "HandleTable"
	  package explicit_return_type ""
	  nparams 1
	    param in name "initialCapacity" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates handle table with the given initial capacity."
	end

	operation 687771 "assign"
	  package explicit_return_type "int"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Assigns next available handle to given object, and returns assigned
handle.  Once object has been completely deserialized (and all
dependencies on other objects identified), the handle should be
\"closed\" by passing it to finish()."
	end

	operation 687899 "markDependency"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "dependent" explicit_type "int"
	    param in name "target" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Registers a dependency (in exception status) of one handle on
another.  The dependent handle must be \"open\" (i.e., assigned, but
not finished yet).  No action is taken if either dependent or target
handle is NULL_HANDLE."
	end

	operation 688027 "markException"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "handle" explicit_type "int"
	    param inout name "ex" type class_ref 201883 // ClassNotFoundException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Associates a ClassNotFoundException (if one not already associated)
with the currently active handle and propagates it to other
referencing objects as appropriate.  The specified handle must be
\"open\" (i.e., assigned, but not finished yet)."
	end

	operation 688155 "finish"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "handle" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Marks given handle as finished, meaning that no new dependencies
will be marked for handle.  Calls to the assign and finish methods
must occur in LIFO order."
	end

	operation 688283 "setObject"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "handle" explicit_type "int"
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Assigns a new object to the given handle.  The object previously
associated with the handle is forgotten.  This method has no effect
if the given handle already has an exception associated with it.
This method may be called at any time after the handle is assigned."
	end

	operation 688411 "lookupObject"
	  package explicit_return_type "Object"
	  nparams 1
	    param in name "handle" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Looks up and returns object associated with the given handle.
Returns null if the given handle is NULL_HANDLE, or if it has an
associated ClassNotFoundException."
	end

	operation 688539 "lookupException"
	  package return_type class_ref 201883 // ClassNotFoundException
	  nparams 1
	    param in name "handle" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Looks up and returns ClassNotFoundException associated with the
given handle.  Returns null if the given handle is NULL_HANDLE, or
if there is no ClassNotFoundException associated with the handle."
	end

	operation 688667 "clear"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resets table to its initial state."
	end

	operation 688795 "size"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns number of handles registered in table."
	end

	operation 688923 "grow"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Expands capacity of internal arrays."
	end
      end

      classrelation 233243 // handles (<unidirectional association>)
	relation 233243 --->
	  a role_name "handles" const_relation private
	    comment " wire handle -> obj/exception map 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 233243 // handles (<unidirectional association>)
	  b parent class_ref 203163 // HandleTable
      end

      attribute 246299 "passHandle"
	private explicit_type "int"
	init_value "=  NULL_HANDLE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " scratch field for passing handle values up/down call stack "
      end

      attribute 246427 "defaultDataEnd"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " flag set when at end of field value block with no TC_ENDBLOCKDATA "
      end

      attribute 246555 "primVals"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " buffer for reading primitive field values "
      end

      attribute 246683 "enableOverride"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " if true, invoke readObjectOverride() instead of readObject() "
      end

      attribute 246811 "enableResolve"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " if true, invoke resolveObject() "
      end

      class 203291 "CallbackContext"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 250139 "obj"
	  const_attribute private explicit_type "Object"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 235035 // desc (<unidirectional association>)
	  relation 235035 --->
	    a role_name "desc" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 235035 // desc (<unidirectional association>)
	    b parent class_ref 202395 // ObjectStreamClass
	end

	classrelation 235163 // used (<unidirectional association>)
	  relation 235163 --->
	    a role_name "used" init_value "=  new AtomicBoolean()" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 235163 // used (<unidirectional association>)
	    b parent class_ref 205083 // AtomicBoolean
	end

	operation 689563 "CallbackContext"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "obj" explicit_type "Object"
	    param inout name "desc" type class_ref 202395 // ObjectStreamClass
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 689691 "getObj"
	  public explicit_return_type "Object"
	  nparams 0
	  nexceptions 1
	    exception class_ref 203803 // NotActiveException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 689819 "getDesc"
	  public return_type class_ref 202395 // ObjectStreamClass
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 689947 "checkAndSetUsed"
	  private explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 203803 // NotActiveException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 690075 "setUsed"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 233371 // curContext (<unidirectional association>)
	relation 233371 --->
	  a role_name "curContext" private
	    comment "
Context during upcalls to class-defined readObject methods; holds 
object currently being deserialized and descriptor for current class.
Null when not during readObject upcall.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 233371 // curContext (<unidirectional association>)
	  b parent class_ref 203291 // CallbackContext
      end

      operation 669979 "ObjectInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 179099 // InputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ObjectInputStream that reads from the specified InputStream.
A serialization stream header is read from the stream and verified.
This constructor will block until the corresponding ObjectOutputStream
has written and flushed the header.

<p>If a security manager is installed, this constructor will check for
the \"enableSubclassImplementation\" SerializablePermission when invoked
directly or indirectly by the constructor of a subclass which overrides
the ObjectInputStream.readFields or ObjectInputStream.readUnshared
methods.

@param	in input stream to read from
@throws	StreamCorruptedException if the stream header is incorrect
@throws	IOException if an I/O error occurs while reading stream header
@throws	SecurityException if untrusted subclass illegally overrides
		security-sensitive methods
@throws	NullPointerException if <code>in</code> is <code>null</code>
@see	ObjectInputStream#ObjectInputStream()
@see	ObjectInputStream#readFields()
@see	ObjectOutputStream#ObjectOutputStream(OutputStream)"
      end

      operation 670107 "ObjectInputStream"
	protected explicit_return_type ""
	nparams 0
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provide a way for subclasses that are completely reimplementing
ObjectInputStream to not have to allocate private data just used by this
implementation of ObjectInputStream.

<p>If there is a security manager installed, this method first calls the
security manager's <code>checkPermission</code> method with the
<code>SerializablePermission(\"enableSubclassImplementation\")</code>
permission to ensure it's ok to enable subclassing.

@throws	SecurityException if a security manager exists and its
		<code>checkPermission</code> method denies enabling
		subclassing.
@see SecurityManager#checkPermission
@see java.io.SerializablePermission"
      end

      operation 670235 "readObject"
	public explicit_return_type "Object"
	nparams 0
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read an object from the ObjectInputStream.  The class of the object, the
signature of the class, and the values of the non-transient and
non-static fields of the class and all of its supertypes are read.
Default deserializing for a class can be overriden using the writeObject
and readObject methods.  Objects referenced by this object are read
transitively so that a complete equivalent graph of objects is
reconstructed by readObject.

<p>The root object is completely restored when all of its fields and the
objects it references are completely restored.  At this point the object
validation callbacks are executed in order based on their registered
priorities. The callbacks are registered by objects (in the readObject
special methods) as they are individually restored.

<p>Exceptions are thrown for problems with the InputStream and for
classes that should not be deserialized.  All exceptions are fatal to
the InputStream and leave it in an indeterminate state; it is up to the
caller to ignore or recover the stream state.

@throws	ClassNotFoundException Class of a serialized object cannot be
		found.
@throws	InvalidClassException Something is wrong with a class used by
		serialization.
@throws	StreamCorruptedException Control information in the
		stream is inconsistent.
@throws	OptionalDataException Primitive data was found in the 
		stream instead of objects.
@throws	IOException Any of the usual Input/Output related exceptions."
      end

      operation 670363 "readObjectOverride"
	protected explicit_return_type "Object"
	nparams 0
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by trusted subclasses of ObjectOutputStream that
constructed ObjectOutputStream using the protected no-arg constructor.
The subclass is expected to provide an override method with the modifier
\"final\".

@return	the Object read from the stream.
@throws	ClassNotFoundException Class definition of a serialized object
		cannot be found.
@throws	OptionalDataException Primitive data was found in the stream
		instead of objects.
@throws	IOException if I/O errors occurred while reading from the
		underlying stream
@see #ObjectInputStream()
@see #readObject()
@since 1.2"
      end

      operation 670491 "readUnshared"
	public explicit_return_type "Object"
	nparams 0
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an \"unshared\" object from the ObjectInputStream.  This method is
identical to readObject, except that it prevents subsequent calls to
readObject and readUnshared from returning additional references to the
deserialized instance obtained via this call.  Specifically:
<ul>
  <li>If readUnshared is called to deserialize a back-reference (the
      stream representation of an object which has been written
      previously to the stream), an ObjectStreamException will be
      thrown.

  <li>If readUnshared returns successfully, then any subsequent attempts
      to deserialize back-references to the stream handle deserialized
      by readUnshared will cause an ObjectStreamException to be thrown.
</ul>
Deserializing an object via readUnshared invalidates the stream handle
associated with the returned object.  Note that this in itself does not
always guarantee that the reference returned by readUnshared is unique;
the deserialized object may define a readResolve method which returns an
object visible to other parties, or readUnshared may return a Class
object or enum constant obtainable elsewhere in the stream or through
external means.

<p>However, for objects which are not enum constants or instances of
java.lang.Class and do not define readResolve methods, readUnshared
guarantees that the returned object reference is unique and cannot be
obtained a second time from the ObjectInputStream that created it, even
if the underlying data stream has been manipulated.  This guarantee
applies only to the base-level object returned by readUnshared, and not
to any transitively referenced sub-objects in the returned object graph.

<p>ObjectInputStream subclasses which override this method can only be
constructed in security contexts possessing the
\"enableSubclassImplementation\" SerializablePermission; any attempt to
instantiate such a subclass without this permission will cause a
SecurityException to be thrown.

@return  reference to deserialized object
@throws  ClassNotFoundException if class of an object to deserialize
         cannot be found
@throws  StreamCorruptedException if control information in the stream
         is inconsistent
@throws  ObjectStreamException if object to deserialize has already
         appeared in stream
@throws  OptionalDataException if primitive data is next in stream
@throws  IOException if an I/O error occurs during deserialization"
      end

      operation 670619 "defaultReadObject"
	public explicit_return_type "void"
	nparams 0
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read the non-static and non-transient fields of the current class from
this stream.  This may only be called from the readObject method of the
class being deserialized. It will throw the NotActiveException if it is
called otherwise.

@throws	ClassNotFoundException if the class of a serialized object
		could not be found.
@throws	IOException if an I/O error occurs.
@throws	NotActiveException if the stream is not currently reading
		objects."
      end

      class 203547 "GetField"
	abstract visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 674203 "getObjectStreamClass"
	  abstract public return_type class_ref 202395 // ObjectStreamClass
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the ObjectStreamClass that describes the fields in the stream.

@return  the descriptor class that describes the serializable fields"
	end

	operation 674331 "defaulted"
	  abstract public explicit_return_type "boolean"
	  nparams 1
	    param in name "name" explicit_type "String"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return true if the named field is defaulted and has no value in this
stream.

@param  name the name of the field
@return true, if and only if the named field is defaulted
@throws IOException if there are I/O errors while reading from
	   the underlying <code>InputStream</code>
@throws IllegalArgumentException if <code>name</code> does not
	   correspond to a serializable field"
	end

	operation 674459 "get"
	  abstract public explicit_return_type "boolean"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param inout name "val" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named boolean field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
	   have a value
@return the value of the named <code>boolean</code> field
@throws IOException if there are I/O errors while reading from the
	   underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
	   not serializable or if the field type is incorrect"
	end

	operation 674587 "get"
	  abstract public explicit_return_type "byte"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "byte"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named byte field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
	   have a value
@return the value of the named <code>byte</code> field
@throws IOException if there are I/O errors while reading from the
	   underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
	   not serializable or if the field type is incorrect"
	end

	operation 674715 "get"
	  abstract public explicit_return_type "char"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "char"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named char field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
	   have a value
@return the value of the named <code>char</code> field
@throws IOException if there are I/O errors while reading from the
	   underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
	   not serializable or if the field type is incorrect"
	end

	operation 674843 "get"
	  abstract public explicit_return_type "short"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "short"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named short field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
	   have a value
@return the value of the named <code>short</code> field
@throws IOException if there are I/O errors while reading from the
	   underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
	   not serializable or if the field type is incorrect"
	end

	operation 674971 "get"
	  abstract public explicit_return_type "int"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named int field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
	   have a value
@return the value of the named <code>int</code> field
@throws IOException if there are I/O errors while reading from the
	   underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
	   not serializable or if the field type is incorrect"
	end

	operation 675099 "get"
	  abstract public explicit_return_type "long"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "long"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named long field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
	   have a value
@return the value of the named <code>long</code> field
@throws IOException if there are I/O errors while reading from the
	   underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
	   not serializable or if the field type is incorrect"
	end

	operation 675227 "get"
	  abstract public explicit_return_type "float"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "float"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named float field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
	   have a value
@return the value of the named <code>float</code> field
@throws IOException if there are I/O errors while reading from the
	   underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
	   not serializable or if the field type is incorrect"
	end

	operation 675355 "get"
	  abstract public explicit_return_type "double"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "double"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named double field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
	   have a value
@return the value of the named <code>double</code> field
@throws IOException if there are I/O errors while reading from the
	   underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
	   not serializable or if the field type is incorrect"
	end

	operation 675483 "get"
	  abstract public explicit_return_type "Object"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param inout name "val" explicit_type "Object"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named Object field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
	   have a value
@return the value of the named <code>Object</code> field
@throws IOException if there are I/O errors while reading from the
	   underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
	   not serializable or if the field type is incorrect"
	end
      end

      operation 670747 "readFields"
	public return_type class_ref 203547 // GetField
	nparams 0
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the persistent fields from the stream and makes them available by
name.

@return	the <code>GetField</code> object representing the persistent
		fields of the object being deserialized
@throws	ClassNotFoundException if the class of a serialized object
		could not be found.
@throws	IOException if an I/O error occurs.
@throws	NotActiveException if the stream is not currently reading
		objects.
@since 1.2"
      end

      operation 670875 "registerValidation"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 203675 // ObjectInputValidation
	  param in name "prio" explicit_type "int"
	nexceptions 2
	  exception class_ref 203803 // NotActiveException
	  exception class_ref 203931 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register an object to be validated before the graph is returned.  While
similar to resolveObject these validations are called after the entire
graph has been reconstituted.  Typically, a readObject method will
register the object with the stream so that when all of the objects are
restored a final set of validations can be performed.

@param	obj the object to receive the validation callback.
@param	prio controls the order of callbacks;zero is a good default.
		Use higher numbers to be called back earlier, lower numbers for
		later callbacks. Within a priority, callbacks are processed in
		no particular order.
@throws	NotActiveException The stream is not currently reading objects
		so it is invalid to register a callback.
@throws	InvalidObjectException The validation object is null."
      end

      operation 671003 "resolveClass"
	protected return_type class_ref 164635 // Class
	nparams 1
	  param inout name "desc" type class_ref 202395 // ObjectStreamClass
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load the local class equivalent of the specified stream class
description.  Subclasses may implement this method to allow classes to
be fetched from an alternate source. 

<p>The corresponding method in <code>ObjectOutputStream</code> is
<code>annotateClass</code>.  This method will be invoked only once for
each unique class in the stream.  This method can be implemented by
subclasses to use an alternate loading mechanism but must return a
<code>Class</code> object.  Once returned, the serialVersionUID of the
class is compared to the serialVersionUID of the serialized class.  If
there is a mismatch, the deserialization fails and an exception is
raised.

<p>By default the class name is resolved relative to the class that
called <code>readObject</code>.

@param	desc an instance of class <code>ObjectStreamClass</code>
@return	a <code>Class</code> object corresponding to <code>desc</code>
@throws	IOException any of the usual input/output exceptions
@throws	ClassNotFoundException if class of a serialized object cannot
		be found"
      end

      operation 671131 "resolveProxyClass"
	protected return_type class_ref 164635 // Class
	nparams 1
	  param in name "interfaces" explicit_type "String"
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a proxy class that implements the interfaces named in a proxy
class descriptor; subclasses may implement this method to read custom
data from the stream along with the descriptors for dynamic proxy
classes, allowing them to use an alternate loading mechanism for the
interfaces and the proxy class.

<p>This method is called exactly once for each unique proxy class
descriptor in the stream.

<p>The corresponding method in <code>ObjectOutputStream</code> is
<code>annotateProxyClass</code>.  For a given subclass of
<code>ObjectInputStream</code> that overrides this method, the
<code>annotateProxyClass</code> method in the corresponding subclass of
<code>ObjectOutputStream</code> must write any data or objects read by
this method.

<p>The default implementation of this method in
<code>ObjectInputStream</code> returns the result of calling
<code>Proxy.getProxyClass</code> with the list of <code>Class</code>
objects for the interfaces that are named in the <code>interfaces</code>
parameter.  The <code>Class</code> object for each interface name
<code>i</code> is the value returned by calling
<pre>
    Class.forName(i, false, loader)
</pre>
where <code>loader</code> is that of the first non-<code>null</code>
class loader up the execution stack, or <code>null</code> if no
non-<code>null</code> class loaders are on the stack (the same class
loader choice used by the <code>resolveClass</code> method).  Unless any
of the resolved interfaces are non-public, this same value of
<code>loader</code> is also the class loader passed to
<code>Proxy.getProxyClass</code>; if non-public interfaces are present,
their class loader is passed instead (if more than one non-public
interface class loader is encountered, an
<code>IllegalAccessError</code> is thrown).  
If <code>Proxy.getProxyClass</code> throws an
<code>IllegalArgumentException</code>, <code>resolveProxyClass</code>
will throw a <code>ClassNotFoundException</code> containing the
<code>IllegalArgumentException</code>.

@param	interfaces the list of interface names that were
		deserialized in the proxy class descriptor
@return  a proxy class for the specified interfaces
@throws	IOException any exception thrown by the underlying
		<code>InputStream</code>
@throws	ClassNotFoundException if the proxy class or any of the
		named interfaces could not be found
@see ObjectOutputStream#annotateProxyClass(Class)
@since	1.3"
      end

      operation 671259 "resolveObject"
	protected explicit_return_type "Object"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method will allow trusted subclasses of ObjectInputStream to
substitute one object for another during deserialization. Replacing
objects is disabled until enableResolveObject is called. The
enableResolveObject method checks that the stream requesting to resolve
object can be trusted. Every reference to serializable objects is passed
to resolveObject.  To insure that the private state of objects is not
unintentionally exposed only trusted streams may use resolveObject.

<p>This method is called after an object has been read but before it is
returned from readObject.  The default resolveObject method just returns
the same object.

<p>When a subclass is replacing objects it must insure that the
substituted object is compatible with every field where the reference
will be stored.  Objects whose type is not a subclass of the type of the
field or array element abort the serialization by raising an exception
and the object is not be stored.

<p>This method is called only once when each object is first
encountered.  All subsequent references to the object will be redirected
to the new object.

@param	obj object to be substituted
@return	the substituted object
@throws	IOException Any of the usual Input/Output exceptions."
      end

      operation 671387 "enableResolveObject"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable the stream to allow objects read from the stream to be replaced.
When enabled, the resolveObject method is called for every object being
deserialized.

<p>If <i>enable</i> is true, and there is a security manager installed,
this method first calls the security manager's
<code>checkPermission</code> method with the
<code>SerializablePermission(\"enableSubstitution\")</code> permission to
ensure it's ok to enable the stream to allow objects read from the
stream to be replaced.

@param	enable true for enabling use of <code>resolveObject</code> for
		every object being deserialized
@return	the previous setting before this method was invoked
@throws	SecurityException if a security manager exists and its
		<code>checkPermission</code> method denies enabling the stream
		to allow objects read from the stream to be replaced.
@see SecurityManager#checkPermission
@see java.io.SerializablePermission"
      end

      operation 671515 "readStreamHeader"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 204059 // StreamCorruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The readStreamHeader method is provided to allow subclasses to read and
verify their own stream headers. It reads and verifies the magic number
and version number.

@throws	IOException if there are I/O errors while reading from the
		underlying <code>InputStream</code> 
@throws	StreamCorruptedException if control information in the stream
		is inconsistent"
      end

      operation 671643 "readClassDescriptor"
	protected return_type class_ref 202395 // ObjectStreamClass
	nparams 0
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a class descriptor from the serialization stream.  This method is
called when the ObjectInputStream expects a class descriptor as the next
item in the serialization stream.  Subclasses of ObjectInputStream may
override this method to read in class descriptors that have been written
in non-standard formats (by subclasses of ObjectOutputStream which have
overridden the <code>writeClassDescriptor</code> method).  By default,
this method reads class descriptors according to the format defined in
the Object Serialization specification.

@return	the class descriptor read
@throws	IOException If an I/O error has occurred.
@throws	ClassNotFoundException If the Class of a serialized object used
		in the class descriptor representation cannot be found
@see java.io.ObjectOutputStream#writeClassDescriptor(java.io.ObjectStreamClass)
@since 1.3"
      end

      operation 671771 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a byte of data. This method will block if no input is available.

@return	the byte read, or -1 if the end of the stream is reached.
@throws	IOException If an I/O error has occurred."
      end

      operation 671899 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "buf" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads into an array of bytes.  This method will block until some input
is available. Consider using java.io.DataInputStream.readFully to read
exactly 'length' bytes.

@param	buf the buffer into which the data is read
@param	off the start offset of the data
@param	len the maximum number of bytes read
@return	the actual number of bytes read, -1 is returned when the end of
		the stream is reached.
@throws	IOException If an I/O error has occurred.
@see java.io.DataInputStream#readFully(byte[],int,int)"
      end

      operation 672027 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read without blocking.

@return	the number of available bytes.
@throws	IOException if there are I/O errors while reading from the
		underlying <code>InputStream</code>"
      end

      operation 672155 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the input stream. Must be called to release any resources
associated with the stream.

@throws	IOException If an I/O error has occurred."
      end

      operation 672283 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a boolean.

@return	the boolean read.
@throws	EOFException If end of file is reached.
@throws	IOException If other I/O error has occurred."
      end

      operation 672411 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an 8 bit byte.

@return	the 8 bit byte read.
@throws	EOFException If end of file is reached.
@throws	IOException If other I/O error has occurred."
      end

      operation 672539 "readUnsignedByte"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an unsigned 8 bit byte.

@return	the 8 bit byte read.
@throws	EOFException If end of file is reached.
@throws	IOException If other I/O error has occurred."
      end

      operation 672667 "readChar"
	public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a 16 bit char.

@return	the 16 bit char read. 
@throws	EOFException If end of file is reached.
@throws	IOException If other I/O error has occurred."
      end

      operation 672795 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a 16 bit short.

@return	the 16 bit short read.
@throws	EOFException If end of file is reached.
@throws	IOException If other I/O error has occurred."
      end

      operation 672923 "readUnsignedShort"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an unsigned 16 bit short.

@return	the 16 bit short read.
@throws	EOFException If end of file is reached.
@throws	IOException If other I/O error has occurred."
      end

      operation 673051 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a 32 bit int.

@return	the 32 bit integer read.
@throws	EOFException If end of file is reached.
@throws	IOException If other I/O error has occurred."
      end

      operation 673179 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a 64 bit long.

@return	the read 64 bit long.
@throws	EOFException If end of file is reached.
@throws	IOException If other I/O error has occurred."
      end

      operation 673307 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a 32 bit float.

@return	the 32 bit float read.
@throws	EOFException If end of file is reached.
@throws	IOException If other I/O error has occurred."
      end

      operation 673435 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a 64 bit double.

@return	the 64 bit double read.
@throws	EOFException If end of file is reached.
@throws	IOException If other I/O error has occurred."
      end

      operation 673563 "readFully"
	public explicit_return_type "void"
	nparams 1
	  param in name "buf" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes, blocking until all bytes are read.

@param	buf the buffer into which the data is read
@throws	EOFException If end of file is reached.
@throws	IOException If other I/O error has occurred."
      end

      operation 673691 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param in name "buf" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes, blocking until all bytes are read.

@param	buf the buffer into which the data is read
@param	off the start offset of the data
@param	len the maximum number of bytes to read
@throws	EOFException If end of file is reached.
@throws	IOException If other I/O error has occurred."
      end

      operation 673819 "skipBytes"
	public explicit_return_type "int"
	nparams 1
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips bytes, block until all bytes are skipped.

@param	len the number of bytes to be skipped
@return	the actual number of bytes skipped.
@throws	EOFException If end of file is reached.
@throws	IOException If other I/O error has occurred."
      end

      operation 673947 "readLine"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Reads in a line that has been terminated by a \\n, \\r, \\r\\n or EOF.

@return	a String copy of the line.
@throws	IOException if there are I/O errors while reading from the
		underlying <code>InputStream</code>
@deprecated This method does not properly convert bytes to characters.
		see DataInputStream for the details and alternatives."
      end

      operation 674075 "readUTF"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a String in
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
format.

@return	the String.
@throws	IOException if there are I/O errors while reading from the
		underlying <code>InputStream</code>
@throws	UTFDataFormatException if read bytes do not represent a valid
		modified UTF-8 encoding of a string"
      end

      operation 675611 "verifySubclass"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this (possibly subclass) instance can be constructed
without violating security constraints: the subclass must not override
security-sensitive non-final methods, or else the
\"enableSubclassImplementation\" SerializablePermission is checked."
      end

      operation 675739 "auditSubclass"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "subcl" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs reflective checks on given subclass to verify that it doesn't
override security-sensitive non-final methods.  Returns true if subclass
is \"safe\", false otherwise."
      end

      operation 675867 "clear"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears internal data structures."
      end

      operation 675995 "readObject0"
	private explicit_return_type "Object"
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Underlying readObject implementation."
      end

      operation 676123 "checkResolve"
	private explicit_return_type "Object"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If resolveObject has been enabled and given object does not have an
exception associated with it, calls resolveObject to determine
replacement for object, and updates handle table accordingly.  Returns
replacement object, or echoes provided object if no replacement
occurred.  Expects that passHandle is set to given object's handle prior
to calling this method."
      end

      operation 676251 "readTypeString"
	package explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads string without allowing it to be replaced in stream.  Called from
within ObjectStreamClass.read()."
      end

      operation 676379 "readNull"
	private explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in null code, sets passHandle to NULL_HANDLE and returns null."
      end

      operation 676507 "readHandle"
	private explicit_return_type "Object"
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in object handle, sets passHandle to the read handle, and returns
object associated with the handle."
      end

      operation 676635 "readClass"
	private return_type class_ref 164635 // Class
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns class object.  Sets passHandle to class object's
assigned handle.  Returns null if class is unresolvable (in which case a
ClassNotFoundException will be associated with the class' handle in the
handle table)."
      end

      operation 676763 "readClassDesc"
	private return_type class_ref 202395 // ObjectStreamClass
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns (possibly null) class descriptor.  Sets passHandle
to class descriptor's assigned handle.  If class descriptor cannot be
resolved to a class in the local VM, a ClassNotFoundException is
associated with the class descriptor's handle."
      end

      operation 676891 "readProxyDesc"
	private return_type class_ref 202395 // ObjectStreamClass
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns class descriptor for a dynamic proxy class.  Sets
passHandle to proxy class descriptor's assigned handle.  If proxy class
descriptor cannot be resolved to a class in the local VM, a
ClassNotFoundException is associated with the descriptor's handle."
      end

      operation 677019 "readNonProxyDesc"
	private return_type class_ref 202395 // ObjectStreamClass
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns class descriptor for a class that is not a dynamic
proxy class.  Sets passHandle to class descriptor's assigned handle.  If
class descriptor cannot be resolved to a class in the local VM, a
ClassNotFoundException is associated with the descriptor's handle."
      end

      operation 677147 "readString"
	private explicit_return_type "String"
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns new string.  Sets passHandle to new string's
assigned handle."
      end

      operation 677275 "readArray"
	private explicit_return_type "Object"
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns array object, or null if array class is
unresolvable.  Sets passHandle to array's assigned handle."
      end

      operation 677403 "readEnum"
	private return_type class_ref 204187 // Enum
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns enum constant, or null if enum type is
unresolvable.  Sets passHandle to enum constant's assigned handle."
      end

      operation 677531 "readOrdinaryObject"
	private explicit_return_type "Object"
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads and returns \"ordinary\" (i.e., not a String, Class,
ObjectStreamClass, array, or enum constant) object, or null if object's
class is unresolvable (in which case a ClassNotFoundException will be
associated with object's handle).  Sets passHandle to object's assigned
handle."
      end

      operation 677659 "readExternalData"
	private explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 204315 // Externalizable
	  param inout name "desc" type class_ref 202395 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If obj is non-null, reads externalizable data by invoking readExternal()
method of obj; otherwise, attempts to skip over externalizable data.
Expects that passHandle is set to obj's handle before this method is
called."
      end

      operation 677787 "readSerialData"
	private explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param inout name "desc" type class_ref 202395 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads (or attempts to skip, if obj is null or is tagged with a
ClassNotFoundException) instance data for each serializable class of
object in stream, from superclass to subclass.  Expects that passHandle
is set to obj's handle before this method is called."
      end

      operation 677915 "skipCustomData"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips over all block data and objects until TC_ENDBLOCKDATA is
encountered."
      end

      operation 678043 "defaultReadFields"
	private explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param inout name "desc" type class_ref 202395 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in values of serializable fields declared by given class
descriptor.  If obj is non-null, sets field values in obj.  Expects that
passHandle is set to obj's handle before this method is called."
      end

      operation 678171 "readFatalException"
	private return_type class_ref 179355 // IOException
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns IOException that caused serialization to abort.
All stream state is discarded prior to reading in fatal exception.  Sets
passHandle to fatal exception's handle."
      end

      operation 678299 "handleReset"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 204059 // StreamCorruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If recursion depth is 0, clears internal data structures; otherwise,
throws a StreamCorruptedException.  This method is called when a
TC_RESET typecode is encountered."
      end

      operation 678427 "bytesToFloats"
	class_operation private explicit_return_type "void"
	nparams 5
	  param in name "src" explicit_type "byte"
	  param in name "srcpos" explicit_type "int"
	  param in name "dst" explicit_type "float"
	  param in name "dstpos" explicit_type "int"
	  param in name "nfloats" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts specified span of bytes into float values.

 REMIND: remove once hotspot inlines Float.intBitsToFloat"
      end

      operation 678555 "bytesToDoubles"
	class_operation private explicit_return_type "void"
	nparams 5
	  param in name "src" explicit_type "byte"
	  param in name "srcpos" explicit_type "int"
	  param in name "dst" explicit_type "double"
	  param in name "dstpos" explicit_type "int"
	  param in name "ndoubles" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts specified span of bytes into double values.

 REMIND: remove once hotspot inlines Double.longBitsToDouble"
      end

      operation 678683 "latestUserDefinedLoader"
	class_operation private return_type class_ref 163611 // ClassLoader
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first non-null class loader (not counting class loaders of
generated reflection implementation classes) up the execution stack, or
null if only code from the null class loader is on the stack.  This
method is also called via reflection by the following RMI-IIOP class:

    com.sun.corba.se.internal.util.JDKClassLoader
    
This method should not be removed or its signature changed without
corresponding modifications to the above class.

 REMIND: change name to something more accurate?"
      end

      class 204443 "GetFieldImpl"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 233499 // <generalisation>
	  relation 233499 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 233499 // <generalisation>
	    b parent class_ref 203547 // GetField
	end

	classrelation 233627 // desc (<unidirectional association>)
	  relation 233627 --->
	    a role_name "desc" const_relation private
	      comment " class descriptor describing serializable fields 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 233627 // desc (<unidirectional association>)
	    b parent class_ref 202395 // ObjectStreamClass
	end

	attribute 246939 "primVals"
	  const_attribute private explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " primitive field values "
	end

	attribute 247067 "objVals"
	  const_attribute private explicit_type "Object"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " object field values "
	end

	attribute 247195 "objHandles"
	  const_attribute private explicit_type "int"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " object field value handles "
	end

	operation 678811 "GetFieldImpl"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "desc" type class_ref 202395 // ObjectStreamClass
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates GetFieldImpl object for reading fields defined in given
class descriptor."
	end

	operation 678939 "getObjectStreamClass"
	  public return_type class_ref 202395 // ObjectStreamClass
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 679067 "defaulted"
	  public explicit_return_type "boolean"
	  nparams 1
	    param in name "name" explicit_type "String"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 679195 "get"
	  public explicit_return_type "boolean"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param inout name "val" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 679323 "get"
	  public explicit_return_type "byte"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "byte"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 679451 "get"
	  public explicit_return_type "char"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "char"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 679579 "get"
	  public explicit_return_type "short"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "short"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 679707 "get"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 679835 "get"
	  public explicit_return_type "float"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "float"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 679963 "get"
	  public explicit_return_type "long"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "long"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 680091 "get"
	  public explicit_return_type "double"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "double"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 680219 "get"
	  public explicit_return_type "Object"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param inout name "val" explicit_type "Object"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 680347 "readFields"
	  package explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reads primitive and object field values from stream."
	end

	operation 680475 "getFieldOffset"
	  private explicit_return_type "int"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param inout name "type" type class_ref 164635 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns offset of field with given name and type.  A specified type
of null matches all types, Object.class matches all non-primitive
types, and any other non-null type matches assignable types only.
If no matching field is found in the (incoming) class
descriptor but a matching field is present in the associated local
class descriptor, returns -1.  Throws IllegalArgumentException if
neither incoming nor local class descriptor contains a match."
	end
      end

      class 204699 "PeekInputStream"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 234139 // <generalisation>
	  relation 234139 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 234139 // <generalisation>
	    b parent class_ref 179099 // InputStream
	end

	classrelation 234267 // in (<unidirectional association>)
	  relation 234267 --->
	    a role_name "in" const_relation private
	      comment " underlying stream 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 234267 // in (<unidirectional association>)
	    b parent class_ref 179099 // InputStream
	end

	attribute 247451 "peekb"
	  private explicit_type "int"
	  init_value "=  -1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " peeked byte "
	end

	operation 681243 "PeekInputStream"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "in" type class_ref 179099 // InputStream
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates new PeekInputStream on top of given underlying stream."
	end

	operation 681371 "peek"
	  package explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Peeks at next byte value in stream.  Similar to read(), except
that it does not consume the read value."
	end

	operation 681499 "read"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 681627 "read"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "b" explicit_type "byte"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 681755 "readFully"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "b" explicit_type "byte"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 681883 "skip"
	  public explicit_return_type "long"
	  nparams 1
	    param in name "n" explicit_type "long"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 682011 "available"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 682139 "close"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 201371 "ByteArrayInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>ByteArrayInputStream</code> contains
an internal buffer that contains bytes that
may be read from the stream. An internal
counter keeps track of the next byte to
be supplied by the <code>read</code> method.
<p>
Closing a <tt>ByteArrayInputStream</tt> has no effect. The methods in
this class can be called after the stream has been closed without
generating an <tt>IOException</tt>.

@author  Arthur van Hoff
@version 1.44, 12/19/03
@see     java.io.StringBufferInputStream
@since   JDK1.0"
      classrelation 231579 // <generalisation>
	relation 231579 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 231579 // <generalisation>
	  b parent class_ref 179099 // InputStream
      end

      attribute 241819 "buf"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "An array of bytes that was provided
by the creator of the stream. Elements <code>buf[0]</code>
through <code>buf[count-1]</code> are the
only bytes that can ever be read from the
stream;  element <code>buf[pos]</code> is
the next byte to be read.
"
      end

      attribute 241947 "pos"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index of the next character to read from the input stream buffer.
This value should always be nonnegative
and not larger than the value of <code>count</code>.
The next byte to be read from the input stream buffer 
will be <code>buf[pos]</code>.
"
      end

      attribute 242075 "mark"
	protected explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The currently marked position in the stream.
ByteArrayInputStream objects are marked at position zero by
default when constructed.  They may be marked at another
position within the buffer by the <code>mark()</code> method.
The current buffer position is set to this point by the
<code>reset()</code> method.
<p>
If no mark has been set, then the value of mark is the offset
passed to the constructor (or 0 if the offset was not supplied).

@since   JDK1.1
"
      end

      attribute 242203 "count"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index one greater than the last valid character in the input 
stream buffer. 
This value should always be nonnegative
and not larger than the length of <code>buf</code>.
It  is one greater than the position of
the last byte within <code>buf</code> that
can ever be read  from the input stream buffer.
"
      end

      operation 665499 "ByteArrayInputStream"
	public explicit_return_type ""
	nparams 1
	  param in name "buf" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>ByteArrayInputStream</code>
so that it  uses <code>buf</code> as its
buffer array. 
The buffer array is not copied. 
The initial value of <code>pos</code>
is <code>0</code> and the initial value
of  <code>count</code> is the length of
<code>buf</code>.

@param   buf   the input buffer."
      end

      operation 665627 "ByteArrayInputStream"
	public explicit_return_type ""
	nparams 3
	  param in name "buf" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates <code>ByteArrayInputStream</code>
that uses <code>buf</code> as its
buffer array. The initial value of <code>pos</code>
is <code>offset</code> and the initial value
of <code>count</code> is the minimum of <code>offset+length</code>
and <code>buf.length</code>.
The buffer array is not copied. The buffer's mark is
set to the specified offset.

@param   buf      the input buffer.
@param   offset   the offset in the buffer of the first byte to read.
@param   length   the maximum number of bytes to read from the buffer."
      end

      operation 665755 "read"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from this input stream. The value 
byte is returned as an <code>int</code> in the range 
<code>0</code> to <code>255</code>. If no byte is available 
because the end of the stream has been reached, the value 
<code>-1</code> is returned. 
<p>
This <code>read</code> method 
cannot block. 

@return  the next byte of data, or <code>-1</code> if the end of the
         stream has been reached."
      end

      operation 665883 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data into an array of bytes 
from this input stream. 
If <code>pos</code> equals <code>count</code>,
then <code>-1</code> is returned to indicate
end of file. Otherwise, the  number <code>k</code>
of bytes read is equal to the smaller of
<code>len</code> and <code>count-pos</code>.
If <code>k</code> is positive, then bytes
<code>buf[pos]</code> through <code>buf[pos+k-1]</code>
are copied into <code>b[off]</code>  through
<code>b[off+k-1]</code> in the manner performed
by <code>System.arraycopy</code>. The
value <code>k</code> is added into <code>pos</code>
and <code>k</code> is returned.
<p>
This <code>read</code> method cannot block. 

@param   b     the buffer into which the data is read.
@param   off   the start offset of the data.
@param   len   the maximum number of bytes read.
@return  the total number of bytes read into the buffer, or
         <code>-1</code> if there is no more data because the end of
         the stream has been reached."
      end

      operation 666011 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips <code>n</code> bytes of input from this input stream. Fewer 
bytes might be skipped if the end of the input stream is reached. 
The actual number <code>k</code>
of bytes to be skipped is equal to the smaller
of <code>n</code> and  <code>count-pos</code>.
The value <code>k</code> is added into <code>pos</code>
and <code>k</code> is returned.

@param   n   the number of bytes to be skipped.
@return  the actual number of bytes skipped."
      end

      operation 666139 "available"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read from this input 
stream without blocking. 
The value returned is
<code>count&nbsp;- pos</code>, 
which is the number of bytes remaining to be read from the input buffer.

@return  the number of bytes that can be read from the input stream
         without blocking."
      end

      operation 666267 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this <code>InputStream</code> supports mark/reset. The
<code>markSupported</code> method of <code>ByteArrayInputStream</code>
always returns <code>true</code>.

@since   JDK1.1"
      end

      operation 666395 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the current marked position in the stream.
ByteArrayInputStream objects are marked at position zero by
default when constructed.  They may be marked at another
position within the buffer by this method.
<p>
If no mark has been set, then the value of the mark is the
offset passed to the constructor (or 0 if the offset was not
supplied).

<p> Note: The <code>readAheadLimit</code> for this class
 has no meaning.

@since   JDK1.1"
      end

      operation 666523 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the buffer to the marked position.  The marked position
is 0 unless another position was marked or an offset was specified
in the constructor."
      end

      operation 666651 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closing a <tt>ByteArrayInputStream</tt> has no effect. The methods in
this class can be called after the stream has been closed without
generating an <tt>IOException</tt>.
<p>"
      end
    end

    class 201627 "ObjectInput"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "ObjectInput extends the DataInput interface to include the reading of
objects. DataInput includes methods for the input of primitive types,
ObjectInput extends that interface to include objects, arrays, and Strings.

@author  unascribed
@version 1.19, 12/19/03
@see java.io.InputStream
@see java.io.ObjectOutputStream
@see java.io.ObjectInputStream
@since   JDK1.1"
      classrelation 231963 // <generalisation>
	relation 231963 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 231963 // <generalisation>
	  b parent class_ref 201755 // DataInput
      end

      operation 669083 "readObject"
	public explicit_return_type "Object"
	nparams 0
	nexceptions 2
	  exception class_ref 201883 // ClassNotFoundException
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read and return an object. The class that implements this interface
defines where the object is \"read\" from.

@return the object read from the stream
@exception java.lang.ClassNotFoundException If the class of a serialized
     object cannot be found.
@exception IOException If any of the usual Input/Output
related exceptions occur."
      end

      operation 669211 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a byte of data. This method will block if no input is
available.
@return 	the byte read, or -1 if the end of the
		stream is reached.
@exception IOException If an I/O error has occurred."
      end

      operation 669339 "read"
	public explicit_return_type "int"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads into an array of bytes.  This method will
block until some input is available.
@param b	the buffer into which the data is read
@return  the actual number of bytes read, -1 is
		returned when the end of the stream is reached.
@exception IOException If an I/O error has occurred."
      end

      operation 669467 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads into an array of bytes.  This method will
block until some input is available.
@param b	the buffer into which the data is read
@param off the start offset of the data
@param len the maximum number of bytes read
@return  the actual number of bytes read, -1 is
		returned when the end of the stream is reached.
@exception IOException If an I/O error has occurred."
      end

      operation 669595 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips n bytes of input.
@param n the number of bytes to be skipped
@return	the actual number of bytes skipped.
@exception IOException If an I/O error has occurred."
      end

      operation 669723 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read
without blocking.
@return the number of available bytes.
@exception IOException If an I/O error has occurred."
      end

      operation 669851 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the input stream. Must be called
to release any resources associated with
the stream.
@exception IOException If an I/O error has occurred."
      end
    end

    class 201755 "DataInput"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>DataInput</code> interface provides
for reading bytes from a binary stream and
reconstructing from them data in any of
the Java primitive types. There is also
a
facility for reconstructing a <code>String</code>
from data in
<a href=\"#modified-utf-8\">modified UTF-8</a>
format.
<p>
It is generally true of all the reading
routines in this interface that if end of
file is reached before the desired number
of bytes has been read, an <code>EOFException</code>
(which is a kind of <code>IOException</code>)
is thrown. If any byte cannot be read for
any reason other than end of file, an <code>IOException</code>
other than <code>EOFException</code> is
thrown. In particular, an <code>IOException</code>
may be thrown if the input stream has been
closed.

<h4><a name=\"modified-utf-8\">Modified UTF-8</a></h4>
<p>
Implementations of the DataInput and DataOutput interfaces represent
Unicode strings in a format that is a slight modification of UTF-8.
(For information regarding the standard UTF-8 format, see section
<i>3.9 Unicode Encoding Forms</i> of <i>The Unicode Standard, Version
4.0</i>).
Note that in the following tables, the most significant bit appears in the
far left-hand column.
<p>
All characters in the range <code>'&#92;u0001'</code> to
<code>'&#92;u007F'</code> are represented by a single byte:

<blockquote>
  <table border=\"1\" cellspacing=\"0\" cellpadding=\"8\" width=\"50%\"
         summary=\"Bit values and bytes\">
    <tr>
      <td></td>
      <th id=\"bit\">Bit Values</th>
    </tr>
    <tr>
      <th id=\"byte1\">Byte 1</th>
      <td>
        <table border=\"1\" cellspacing=\"0\" width=\"100%\">
          <tr>
            <td width=\"12%\"><center>0</center>
            <td colspan=\"7\"><center>bits 6-0</center>
          </tr>
        </table>
      </td>
    </tr>
  </table>
</blockquote>

<p>
The null character <code>'&#92;u0000'</code> and characters in the
range <code>'&#92;u0080'</code> to <code>'&#92;u07FF'</code> are
represented by a pair of bytes:

<blockquote>
  <table border=\"1\" cellspacing=\"0\" cellpadding=\"8\" width=\"50%\"
         summary=\"Bit values and bytes\">
    <tr>
      <td></td>
      <th id=\"bit\">Bit Values</th>
    </tr>
    <tr>
      <th id=\"byte1\">Byte 1</th>
      <td>
        <table border=\"1\" cellspacing=\"0\" width=\"100%\">
          <tr>
            <td width=\"12%\"><center>1</center>
            <td width=\"13%\"><center>1</center>
            <td width=\"12%\"><center>0</center>
            <td colspan=\"5\"><center>bits 10-6</center>
          </tr>
        </table>
      </td>
    </tr>
    <tr>
      <th id=\"byte2\">Byte 2</th>
      <td>
        <table border=\"1\" cellspacing=\"0\" width=\"100%\">
          <tr>
            <td width=\"12%\"><center>1</center>
            <td width=\"13%\"><center>0</center>
            <td colspan=\"6\"><center>bits 5-0</center>
          </tr>
        </table>
      </td>
    </tr>
  </table>
 </blockquote>

<br>
<code>char</code> values in the range <code>'&#92;u0800'</code> to
<code>'&#92;uFFFF'</code> are represented by three bytes:

<blockquote>
  <table border=\"1\" cellspacing=\"0\" cellpadding=\"8\" width=\"50%\"
         summary=\"Bit values and bytes\">
    <tr>
      <td></td>
      <th id=\"bit\">Bit Values</th>
    </tr>
    <tr>
      <th id=\"byte1\">Byte 1</th>
      <td>
        <table border=\"1\" cellspacing=\"0\" width=\"100%\">
          <tr>
            <td width=\"12%\"><center>1</center>
            <td width=\"13%\"><center>1</center>
            <td width=\"12%\"><center>1</center>
            <td width=\"13%\"><center>0</center>
            <td colspan=\"4\"><center>bits 15-12</center>
          </tr>
        </table>
      </td>
    </tr>
    <tr>
      <th id=\"byte2\">Byte 2</th>
      <td>
        <table border=\"1\" cellspacing=\"0\" width=\"100%\">
          <tr>
            <td width=\"12%\"><center>1</center>
            <td width=\"13%\"><center>0</center>
            <td colspan=\"6\"><center>bits 11-6</center>
          </tr>
        </table>
      </td>
    </tr>
    <tr>
      <th id=\"byte3\">Byte 3</th>
      <td>
        <table border=\"1\" cellspacing=\"0\" width=\"100%\">
          <tr>
            <td width=\"12%\"><center>1</center>
            <td width=\"13%\"><center>0</center>
            <td colspan=\"6\"><center>bits 5-0</center>
          </tr>
        </table>
      </td>
    </tr>
  </table>
 </blockquote>

<p>
The differences between this format and the
standard UTF-8 format are the following:
<ul>
<li>The null byte <code>'&#92;u0000'</code> is encoded in 2-byte format
    rather than 1-byte, so that the encoded strings never have
    embedded nulls.
<li>Only the 1-byte, 2-byte, and 3-byte formats are used.
<li><a href=\"../lang/Character.html#unicode\">Supplementary characters</a>
    are represented in the form of surrogate pairs.
</ul>
@author  Frank Yellin
@version 1.23, 06/03/04
@see     java.io.DataInputStream
@see     java.io.DataOutput
@since   JDK1.0"
      operation 667163 "readFully"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads some bytes from an input
stream and stores them into the buffer
array <code>b</code>. The number of bytes
read is equal
to the length of <code>b</code>.
<p>
This method blocks until one of the
following conditions occurs:<p>
<ul>
<li><code>b.length</code>
bytes of input data are available, in which
case a normal return is made.

<li>End of
file is detected, in which case an <code>EOFException</code>
is thrown.

<li>An I/O error occurs, in
which case an <code>IOException</code> other
than <code>EOFException</code> is thrown.
</ul>
<p>
If <code>b</code> is <code>null</code>,
a <code>NullPointerException</code> is thrown.
If <code>b.length</code> is zero, then
no bytes are read. Otherwise, the first
byte read is stored into element <code>b[0]</code>,
the next one into <code>b[1]</code>, and
so on.
If an exception is thrown from
this method, then it may be that some but
not all bytes of <code>b</code> have been
updated with data from the input stream.

@param     b   the buffer into which the data is read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 667291 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Reads <code>len</code>
bytes from
an input stream.
<p>
This method
blocks until one of the following conditions
occurs:<p>
<ul>
<li><code>len</code> bytes
of input data are available, in which case
a normal return is made.

<li>End of file
is detected, in which case an <code>EOFException</code>
is thrown.

<li>An I/O error occurs, in
which case an <code>IOException</code> other
than <code>EOFException</code> is thrown.
</ul>
<p>
If <code>b</code> is <code>null</code>,
a <code>NullPointerException</code> is thrown.
If <code>off</code> is negative, or <code>len</code>
is negative, or <code>off+len</code> is
greater than the length of the array <code>b</code>,
then an <code>IndexOutOfBoundsException</code>
is thrown.
If <code>len</code> is zero,
then no bytes are read. Otherwise, the first
byte read is stored into element <code>b[off]</code>,
the next one into <code>b[off+1]</code>,
and so on. The number of bytes read is,
at most, equal to <code>len</code>.

@param     b   the buffer into which the data is read.
@param off  an int specifying the offset into the data.
@param len  an int specifying the number of bytes to read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 667419 "skipBytes"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes an attempt to skip over
<code>n</code> bytes
of data from the input
stream, discarding the skipped bytes. However,
it may skip
over some smaller number of
bytes, possibly zero. This may result from
any of a
number of conditions; reaching
end of file before <code>n</code> bytes
have been skipped is
only one possibility.
This method never throws an <code>EOFException</code>.
The actual
number of bytes skipped is returned.

@param      n   the number of bytes to be skipped.
@return     the number of bytes actually skipped.
@exception  IOException   if an I/O error occurs."
      end

      operation 667547 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads one input byte and returns
<code>true</code> if that byte is nonzero,
<code>false</code> if that byte is zero.
This method is suitable for reading
the byte written by the <code>writeBoolean</code>
method of interface <code>DataOutput</code>.

@return     the <code>boolean</code> value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 667675 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads and returns one input byte.
The byte is treated as a signed value in
the range <code>-128</code> through <code>127</code>,
inclusive.
This method is suitable for
reading the byte written by the <code>writeByte</code>
method of interface <code>DataOutput</code>.

@return     the 8-bit value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 667803 "readUnsignedByte"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads one input byte, zero-extends
it to type <code>int</code>, and returns
the result, which is therefore in the range
<code>0</code>
through <code>255</code>.
This method is suitable for reading
the byte written by the <code>writeByte</code>
method of interface <code>DataOutput</code>
if the argument to <code>writeByte</code>
was intended to be a value in the range
<code>0</code> through <code>255</code>.

@return     the unsigned 8-bit value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 667931 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads two input bytes and returns
a <code>short</code> value. Let <code>a</code>
be the first byte read and <code>b</code>
be the second byte. The value
returned
is:
<p><pre><code>(short)((a &lt;&lt; 8) | (b &amp; 0xff))
</code></pre>
This method
is suitable for reading the bytes written
by the <code>writeShort</code> method of
interface <code>DataOutput</code>.

@return     the 16-bit value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 668059 "readUnsignedShort"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads two input bytes and returns
an <code>int</code> value in the range <code>0</code>
through <code>65535</code>. Let <code>a</code>
be the first byte read and
<code>b</code>
be the second byte. The value returned is:
<p><pre><code>(((a &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))
</code></pre>
This method is suitable for reading the bytes
written by the <code>writeShort</code> method
of interface <code>DataOutput</code>  if
the argument to <code>writeShort</code>
was intended to be a value in the range
<code>0</code> through <code>65535</code>.

@return     the unsigned 16-bit value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 668187 "readChar"
	public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an input <code>char</code> and returns the <code>char</code> value.
A Unicode <code>char</code> is made up of two bytes.
Let <code>a</code>
be the first byte read and <code>b</code>
be the second byte. The value
returned is:
<p><pre><code>(char)((a &lt;&lt; 8) | (b &amp; 0xff))
</code></pre>
This method
is suitable for reading bytes written by
the <code>writeChar</code> method of interface
<code>DataOutput</code>.

@return     the Unicode <code>char</code> read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 668315 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads four input bytes and returns an
<code>int</code> value. Let <code>a</code>
be the first byte read, <code>b</code> be
the second byte, <code>c</code> be the third
byte,
and <code>d</code> be the fourth
byte. The value returned is:
<p><pre>
<code>
(((a &amp; 0xff) &lt;&lt; 24) | ((b &amp; 0xff) &lt;&lt; 16) |
&#32;((c &amp; 0xff) &lt;&lt; 8) | (d &amp; 0xff))
</code></pre>
This method is suitable
for reading bytes written by the <code>writeInt</code>
method of interface <code>DataOutput</code>.

@return     the <code>int</code> value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 668443 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads eight input bytes and returns
a <code>long</code> value. Let <code>a</code>
be the first byte read, <code>b</code> be
the second byte, <code>c</code> be the third
byte, <code>d</code>
be the fourth byte,
<code>e</code> be the fifth byte, <code>f</code>
be the sixth byte, <code>g</code> be the
seventh byte,
and <code>h</code> be the
eighth byte. The value returned is:
<p><pre> <code>
(((long)(a &amp; 0xff) &lt;&lt; 56) |
 ((long)(b &amp; 0xff) &lt;&lt; 48) |
 ((long)(c &amp; 0xff) &lt;&lt; 40) |
 ((long)(d &amp; 0xff) &lt;&lt; 32) |
 ((long)(e &amp; 0xff) &lt;&lt; 24) |
 ((long)(f &amp; 0xff) &lt;&lt; 16) |
 ((long)(g &amp; 0xff) &lt;&lt;  8) |
 ((long)(h &amp; 0xff)))
</code></pre>
<p>
This method is suitable
for reading bytes written by the <code>writeLong</code>
method of interface <code>DataOutput</code>.

@return     the <code>long</code> value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 668571 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads four input bytes and returns
a <code>float</code> value. It does this
by first constructing an <code>int</code>
value in exactly the manner
of the <code>readInt</code>
method, then converting this <code>int</code>
value to a <code>float</code> in
exactly the manner of the method <code>Float.intBitsToFloat</code>.
This method is suitable for reading
bytes written by the <code>writeFloat</code>
method of interface <code>DataOutput</code>.

@return     the <code>float</code> value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 668699 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads eight input bytes and returns
a <code>double</code> value. It does this
by first constructing a <code>long</code>
value in exactly the manner
of the <code>readlong</code>
method, then converting this <code>long</code>
value to a <code>double</code> in exactly
the manner of the method <code>Double.longBitsToDouble</code>.
This method is suitable for reading
bytes written by the <code>writeDouble</code>
method of interface <code>DataOutput</code>.

@return     the <code>double</code> value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 668827 "readLine"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next line of text from the input stream.
It reads successive bytes, converting
each byte separately into a character,
until it encounters a line terminator or
end of
file; the characters read are then
returned as a <code>String</code>. Note
that because this
method processes bytes,
it does not support input of the full Unicode
character set.
<p>
If end of file is encountered
before even one byte can be read, then <code>null</code>
is returned. Otherwise, each byte that is
read is converted to type <code>char</code>
by zero-extension. If the character <code>'\\n'</code>
is encountered, it is discarded and reading
ceases. If the character <code>'\\r'</code>
is encountered, it is discarded and, if
the following byte converts &#32;to the
character <code>'\\n'</code>, then that is
discarded also; reading then ceases. If
end of file is encountered before either
of the characters <code>'\\n'</code> and
<code>'\\r'</code> is encountered, reading
ceases. Once reading has ceased, a <code>String</code>
is returned that contains all the characters
read and not discarded, taken in order.
Note that every character in this string
will have a value less than <code>&#92;u0100</code>,
that is, <code>(char)256</code>.

@return the next line of text from the input stream,
        or <CODE>null</CODE> if the end of file is
        encountered before a byte can be read. 
@exception  IOException  if an I/O error occurs."
      end

      operation 668955 "readUTF"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a string that has been encoded using a
<a href=\"#modified-utf-8\">modified UTF-8</a>
format.
The general contract of <code>readUTF</code>
is that it reads a representation of a Unicode
character string encoded in modified
UTF-8 format; this string of characters
is then returned as a <code>String</code>.
<p>
First, two bytes are read and used to
construct an unsigned 16-bit integer in
exactly the manner of the <code>readUnsignedShort</code>
method . This integer value is called the
<i>UTF length</i> and specifies the number
of additional bytes to be read. These bytes
are then converted to characters by considering
them in groups. The length of each group
is computed from the value of the first
byte of the group. The byte following a
group, if any, is the first byte of the
next group.
<p>
If the first byte of a group
matches the bit pattern <code>0xxxxxxx</code>
(where <code>x</code> means \"may be <code>0</code>
or <code>1</code>\"), then the group consists
of just that byte. The byte is zero-extended
to form a character.
<p>
If the first byte
of a group matches the bit pattern <code>110xxxxx</code>,
then the group consists of that byte <code>a</code>
and a second byte <code>b</code>. If there
is no byte <code>b</code> (because byte
<code>a</code> was the last of the bytes
to be read), or if byte <code>b</code> does
not match the bit pattern <code>10xxxxxx</code>,
then a <code>UTFDataFormatException</code>
is thrown. Otherwise, the group is converted
to the character:<p>
<pre><code>(char)(((a&amp; 0x1F) &lt;&lt; 6) | (b &amp; 0x3F))
</code></pre>
If the first byte of a group
matches the bit pattern <code>1110xxxx</code>,
then the group consists of that byte <code>a</code>
and two more bytes <code>b</code> and <code>c</code>.
If there is no byte <code>c</code> (because
byte <code>a</code> was one of the last
two of the bytes to be read), or either
byte <code>b</code> or byte <code>c</code>
does not match the bit pattern <code>10xxxxxx</code>,
then a <code>UTFDataFormatException</code>
is thrown. Otherwise, the group is converted
to the character:<p>
<pre><code>
(char)(((a &amp; 0x0F) &lt;&lt; 12) | ((b &amp; 0x3F) &lt;&lt; 6) | (c &amp; 0x3F))
</code></pre>
If the first byte of a group matches the
pattern <code>1111xxxx</code> or the pattern
<code>10xxxxxx</code>, then a <code>UTFDataFormatException</code>
is thrown.
<p>
If end of file is encountered
at any time during this entire process,
then an <code>EOFException</code> is thrown.
<p>
After every group has been converted to
a character by this process, the characters
are gathered, in the same order in which
their corresponding groups were read from
the input stream, to form a <code>String</code>,
which is returned.
<p>
The <code>writeUTF</code>
method of interface <code>DataOutput</code>
may be used to write data that is suitable
for reading by this method.
@return     a Unicode string.
@exception  EOFException            if this stream reaches the end
              before reading all the bytes.
@exception  IOException             if an I/O error occurs.
@exception  UTFDataFormatException  if the bytes do not represent a
              valid modified UTF-8 encoding of a string."
      end
    end

    class 202011 "ObjectStreamConstants"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Constants written into the Object Serialization Stream. 

@author  unascribed
@version 1.34, 01/12/04
@since JDK 1.1"
      attribute 242331 "STREAM_MAGIC"
	class_attribute const_attribute public explicit_type "short"
	init_value "=  (short)0xaced"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Magic number that is written to the stream header.
"
      end

      attribute 242459 "STREAM_VERSION"
	class_attribute const_attribute public explicit_type "short"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Version number that is written to the stream header.
"
      end

      attribute 242587 "TC_BASE"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  0x70"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Each item in the stream is preceded by a tag

 
First tag value.
"
      end

      attribute 242715 "TC_NULL"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  	(byte)0x70"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Null object reference.
"
      end

      attribute 242843 "TC_REFERENCE"
	class_attribute const_attribute public explicit_type "byte"
	init_value "= 	(byte)0x71"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Reference to an object already written into the stream.
"
      end

      attribute 242971 "TC_CLASSDESC"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  	(byte)0x72"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "new Class Descriptor.
"
      end

      attribute 243099 "TC_OBJECT"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  	(byte)0x73"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "new Object.
"
      end

      attribute 243227 "TC_STRING"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  	(byte)0x74"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "new String.
"
      end

      attribute 243355 "TC_ARRAY"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  	(byte)0x75"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "new Array.
"
      end

      attribute 243483 "TC_CLASS"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  	(byte)0x76"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Reference to Class.
"
      end

      attribute 243611 "TC_BLOCKDATA"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  	(byte)0x77"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Block of optional data. Byte following tag indicates number
of bytes in this block data.
"
      end

      attribute 243739 "TC_ENDBLOCKDATA"
	class_attribute const_attribute public explicit_type "byte"
	init_value "= 	(byte)0x78"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "End of optional block data blocks for an object.
"
      end

      attribute 243867 "TC_RESET"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  	(byte)0x79"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Reset stream context. All handles written into stream are reset.
"
      end

      attribute 243995 "TC_BLOCKDATALONG"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  (byte)0x7A"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "long Block data. The long following the tag indicates the
number of bytes in this block data.
"
      end

      attribute 244123 "TC_EXCEPTION"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  	(byte)0x7B"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Exception during write. 
"
      end

      attribute 244251 "TC_LONGSTRING"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  	(byte)0x7C"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Long string.
"
      end

      attribute 244379 "TC_PROXYCLASSDESC"
	class_attribute const_attribute public explicit_type "byte"
	init_value "= 	(byte)0x7D"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "new Proxy Class Descriptor.
"
      end

      attribute 244507 "TC_ENUM"
	class_attribute const_attribute public explicit_type "byte"
	init_value "= 		(byte)0x7E"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "new Enum constant.
"
      end

      attribute 244635 "TC_MAX"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  		(byte)0x7E"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Last tag value.
"
      end

      attribute 244763 "baseWireHandle"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x7e0000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "First wire handle to be assigned. 
"
      end

      attribute 244891 "SC_WRITE_METHOD"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  0x01"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bit masks for ObjectStreamClass flag.
 
Bit mask for ObjectStreamClass flag. Indicates a Serializable class 
defines its own writeObject method.
"
      end

      attribute 245019 "SC_BLOCK_DATA"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  0x08"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit mask for ObjectStreamClass flag. Indicates Externalizable data 
written in Block Data mode.
Added for PROTOCOL_VERSION_2.

@see #PROTOCOL_VERSION_2
@since 1.2
"
      end

      attribute 245147 "SC_SERIALIZABLE"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  0x02"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit mask for ObjectStreamClass flag. Indicates class is Serializable.
"
      end

      attribute 245275 "SC_EXTERNALIZABLE"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  0x04"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit mask for ObjectStreamClass flag. Indicates class is Externalizable.
"
      end

      attribute 245403 "SC_ENUM"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  0x10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit mask for ObjectStreamClass flag. Indicates class is an enum type.
"
      end

      classrelation 232219 // SUBSTITUTION_PERMISSION (<unidirectional association>)
	relation 232219 --->
	  a role_name "SUBSTITUTION_PERMISSION" init_value "= 
                           new SerializablePermission(\"enableSubstitution\")" class_relation const_relation public
	    comment " ******************************************************************
 Security permissions 

Enable substitution of one object for another during 
serialization/deserialization.

@see java.io.ObjectOutputStream#enableReplaceObject(boolean)
@see java.io.ObjectInputStream#enableResolveObject(boolean)
@since 1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 232219 // SUBSTITUTION_PERMISSION (<unidirectional association>)
	  b parent class_ref 202139 // SerializablePermission
      end

      classrelation 232347 // SUBCLASS_IMPLEMENTATION_PERMISSION (<unidirectional association>)
	relation 232347 --->
	  a role_name "SUBCLASS_IMPLEMENTATION_PERMISSION" init_value "= 
                    new SerializablePermission(\"enableSubclassImplementation\")" class_relation const_relation public
	    comment "
Enable overriding of readObject and writeObject.

@see java.io.ObjectOutputStream#writeObjectOverride(Object)
@see java.io.ObjectInputStream#readObjectOverride()
@since 1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 232347 // SUBCLASS_IMPLEMENTATION_PERMISSION (<unidirectional association>)
	  b parent class_ref 202139 // SerializablePermission
      end

      attribute 245531 "PROTOCOL_VERSION_1"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A Stream Protocol Version. <p>

All externalizable data is written in JDK 1.1 external data 
format after calling this method. This version is needed to write 
streams containing Externalizable data that can be read by 
pre-JDK 1.1.6 JVMs.

@see java.io.ObjectOutputStream#useProtocolVersion(int)
@since 1.2
"
      end

      attribute 245659 "PROTOCOL_VERSION_2"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A Stream Protocol Version. <p>

This protocol is written by JVM 1.2.

Externalizable data is written in block data mode and is 
terminated with TC_ENDBLOCKDATA. Externalizable classdescriptor
flags has SC_BLOCK_DATA enabled. JVM 1.1.6 and greater can 
read this format change.

Enables writing a nonSerializable class descriptor into the
stream. The serialVersionUID of a nonSerializable class is 
set to 0L. 

@see java.io.ObjectOutputStream#useProtocolVersion(int)
@see #SC_BLOCK_DATA
@since 1.2
"
      end
    end

    class 202139 "SerializablePermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is for Serializable permissions. A SerializablePermission
contains a name (also referred to as a \"target name\") but
no actions list; you either have the named permission
or you don't.

<P>
The target name is the name of the Serializable permission (see below).

<P>
The following table lists all the possible SerializablePermission target names,
and for each provides a description of what the permission allows
and a discussion of the risks of granting code the permission.
<P>

<table border=1 cellpadding=5 summary=\"Permission target name, what the permission allows, and associated risks\">
<tr>
<th>Permission Target Name</th>
<th>What the Permission Allows</th>
<th>Risks of Allowing this Permission</th>
</tr>

<tr>
  <td>enableSubclassImplementation</td>
  <td>Subclass implementation of ObjectOutputStream or ObjectInputStream
to override the default serialization or deserialization, respectively,
of objects</td>
  <td>Code can use this to serialize or
deserialize classes in a purposefully malfeasant manner. For example,
during serialization, malicious code can use this to
purposefully store confidential private field data in a way easily accessible
to attackers. Or, during deserialization it could, for example, deserialize
a class with all its private fields zeroed out.</td>
</tr>

<tr>
  <td>enableSubstitution</td>
  <td>Substitution of one object for another during
serialization or deserialization</td>
  <td>This is dangerous because malicious code
can replace the actual object with one which has incorrect or
malignant data.</td>
</tr>

</table>

@see java.security.BasicPermission
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager

@version 1.19, 01/12/04

@author Joe Fialli
@since 1.2

 code was borrowed originally from java.lang.RuntimePermission. "
      classrelation 1768987 // <generalisation>
	relation 1768987 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1768987 // <generalisation>
	  b parent class_ref 285083 // BasicPermission
      end

      attribute 2714651 "actions"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
"
      end

      operation 6907291 "SerializablePermission"
	public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new SerializablePermission with the specified name.
The name is the symbolic name of the SerializablePermission, such as
\"enableSubstitution\", etc.

@param name the name of the SerializablePermission."
      end

      operation 6907419 "SerializablePermission"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "actions" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new SerializablePermission object with the specified name.
The name is the symbolic name of the SerializablePermission, and the
actions String is currently unused and should be null.

@param name the name of the SerializablePermission.
@param actions currently unused and must be set to null"
      end
    end

    class 202395 "ObjectStreamClass"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Serialization's descriptor for classes.  It contains the name and
serialVersionUID of the class.  The ObjectStreamClass for a specific class
loaded in this Java VM can be found/created using the lookup method.

<p>The algorithm to compute the SerialVersionUID is described in 
<a href=\"../../../guide/serialization/spec/class.doc4.html\">Object
Serialization Specification, Section 4.4, Stream Unique Identifiers</a>.

@author	Mike Warres
@author	Roger Riggs
@version 1.98 02/02/00
@see ObjectStreamField
@see <a href=\"../../../guide/serialization/spec/class.doc.html\">Object Serialization Specification, Section 4, Class Descriptors</a>
@since   JDK1.1"
      class 202523 "WeakClassKey"
	visibility package 
	nactuals 3
	actual class class_ref 392347 // WeakReference
	  rank 0 explicit_value "Class<?>"
	actual class class_ref 392347 // WeakReference
	  rank 1 explicit_value ""
	actual class class_ref 392347 // WeakReference
	  rank 2 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1764635 // <realization>
	  relation 1764635 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1764635 // <realization>
	    b parent class_ref 392347 // WeakReference
	end

	attribute 2709915 "hash"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "saved value of the referent's identity hash code, to maintain
a consistent hash code after the referent has been cleared
"
	end

	operation 6878107 "WeakClassKey"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "cl" type class_ref 164635 // Class
	    param inout name "refQueue" type class_ref 202779 // ReferenceQueue
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}<Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Create a new WeakClassKey to the given object, registered 
with a queue."
	end

	operation 6878235 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the identity hash code of the original referent."
	end

	operation 6878363 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the given object is this identical 
WeakClassKey instance, or, if this object's referent has not 
been cleared, if the given object is another WeakClassKey 
instance with the identical non-null referent as this one."
	end
      end

      classrelation 1760795 // <realization>
	relation 1760795 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1760795 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 1760923 // NO_FIELDS (<unidirectional association>)
	relation 1760923 --->
	  a role_name "NO_FIELDS" multiplicity "[]" init_value "=  
	new ObjectStreamField[0]" class_relation const_relation public
	    comment " serialPersistentFields value indicating no serializable fields 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1760923 // NO_FIELDS (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 2706843 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -6120832682080437368L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1761051 // serialPersistentFields (<unidirectional association>)
	relation 1761051 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value "= 
	NO_FIELDS" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1761051 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 2706971 "reflFactory"
	class_attribute const_attribute private explicit_type "ReflectionFactory"
	init_value "=  (ReflectionFactory)
	AccessController.doPrivileged(
	    new ReflectionFactory.GetReflectionFactoryAction())"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " reflection factory for obtaining serialization constructors "
      end

      class 906267 "Caches"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1761179 // localDescs (<unidirectional association>)
	  relation 1761179 --->
	    a role_name "localDescs" init_value "= 
	    new ConcurrentHashMap<WeakClassKey,Reference<?>>()" class_relation const_relation package
	      comment " cache mapping local classes -> descriptors 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<WeakClassKey,Reference<?>> ${name}${value};
"
	      classrelation_ref 1761179 // localDescs (<unidirectional association>)
	    b parent class_ref 202651 // ConcurrentMap
	end

	classrelation 1761307 // reflectors (<unidirectional association>)
	  relation 1761307 --->
	    a role_name "reflectors" init_value "= 
	    new ConcurrentHashMap<FieldReflectorKey,Reference<?>>()" class_relation const_relation package
	      comment " cache mapping field group/local desc pairs -> field reflectors 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<FieldReflectorKey,Reference<?>> ${name}${value};
"
	      classrelation_ref 1761307 // reflectors (<unidirectional association>)
	    b parent class_ref 202651 // ConcurrentMap
	end

	classrelation 1761435 // localDescsQueue (<unidirectional association>)
	  relation 1761435 --->
	    a role_name "localDescsQueue" init_value "=  
	    new ReferenceQueue<Class<?>>()" class_relation const_relation private
	      comment " queue for WeakReferences to local classes 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>> ${name}${value};
"
	      classrelation_ref 1761435 // localDescsQueue (<unidirectional association>)
	    b parent class_ref 202779 // ReferenceQueue
	end

	classrelation 1761563 // reflectorsQueue (<unidirectional association>)
	  relation 1761563 --->
	    a role_name "reflectorsQueue" init_value "=  
	    new ReferenceQueue<Class<?>>()" class_relation const_relation private
	      comment " queue for WeakReferences to field reflectors keys 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>> ${name}${value};
"
	      classrelation_ref 1761563 // reflectorsQueue (<unidirectional association>)
	    b parent class_ref 202779 // ReferenceQueue
	end
      end

      class 906395 "FieldReflectorKey"
	visibility private 
	nactuals 3
	actual class class_ref 392347 // WeakReference
	  rank 0 explicit_value "Class<?>"
	actual class class_ref 392347 // WeakReference
	  rank 1 explicit_value ""
	actual class class_ref 392347 // WeakReference
	  rank 2 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1764507 // <realization>
	  relation 1764507 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1764507 // <realization>
	    b parent class_ref 392347 // WeakReference
	end

	attribute 2709531 "sigs"
	  const_attribute private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2709659 "hash"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2709787 "nullClass"
	  const_attribute private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 6877467 "FieldReflectorKey"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "cl" type class_ref 164635 // Class
	    param inout name "fields" type class_ref 285723 // ObjectStreamField
	    param inout name "queue" type class_ref 202779 // ReferenceQueue
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}, ${t2}<Class<?>> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6877595 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6877723 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1761691 // cl (<unidirectional association>)
	relation 1761691 --->
	  a role_name "cl" private
	    comment " class associated with this descriptor (if any) 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1761691 // cl (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      attribute 2707099 "name"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " name of class represented by this descriptor "
      end

      classrelation 1761819 // suid (<unidirectional association>)
	relation 1761819 --->
	  a role_name "suid" volatile private
	    comment " serialVersionUID of represented class (null if not computed yet) 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1761819 // suid (<unidirectional association>)
	  b parent class_ref 277915 // Long
      end

      attribute 2707227 "isProxy"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " true if represents dynamic proxy class "
      end

      attribute 2707355 "isEnum"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " true if represents enum type "
      end

      attribute 2707483 "serializable"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " true if represented class implements Serializable "
      end

      attribute 2707611 "externalizable"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " true if represented class implements Externalizable "
      end

      attribute 2707739 "hasWriteObjectData"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " true if desc has data written by class-defined writeObject method "
      end

      attribute 2707867 "hasBlockExternalData"
	private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "true if desc has externalizable data written in block data format; this
must be true by default to accommodate ObjectInputStream subclasses which
override readClassDescriptor() to return class descriptors obtained from
ObjectStreamClass.lookup() (see 4461737)
"
      end

      classrelation 1761947 // resolveEx (<unidirectional association>)
	relation 1761947 --->
	  a role_name "resolveEx" private
	    comment " exception (if any) thrown while attempting to resolve class 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1761947 // resolveEx (<unidirectional association>)
	  b parent class_ref 201883 // ClassNotFoundException
      end

      classrelation 1762075 // deserializeEx (<unidirectional association>)
	relation 1762075 --->
	  a role_name "deserializeEx" private
	    comment " exception (if any) to throw if non-enum deserialization attempted 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1762075 // deserializeEx (<unidirectional association>)
	  b parent class_ref 216987 // InvalidClassException
      end

      classrelation 1762203 // serializeEx (<unidirectional association>)
	relation 1762203 --->
	  a role_name "serializeEx" private
	    comment " exception (if any) to throw if non-enum serialization attempted 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1762203 // serializeEx (<unidirectional association>)
	  b parent class_ref 216987 // InvalidClassException
      end

      classrelation 1762331 // defaultSerializeEx (<unidirectional association>)
	relation 1762331 --->
	  a role_name "defaultSerializeEx" private
	    comment " exception (if any) to throw if default serialization attempted 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1762331 // defaultSerializeEx (<unidirectional association>)
	  b parent class_ref 216987 // InvalidClassException
      end

      classrelation 1762459 // fields (<unidirectional association>)
	relation 1762459 --->
	  a role_name "fields" multiplicity "[]" private
	    comment " serializable fields 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1762459 // fields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 2707995 "primDataSize"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " aggregate marshalled size of primitive fields "
      end

      attribute 2708123 "numObjFields"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " number of non-primitive fields "
      end

      class 906523 "FieldReflector"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2708891 "unsafe"
	  class_attribute const_attribute private explicit_type "Unsafe"
	  init_value "=  Unsafe.getUnsafe()"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " handle for performing unsafe operations "
	end

	classrelation 1764251 // fields (<unidirectional association>)
	  relation 1764251 --->
	    a role_name "fields" multiplicity "[]" const_relation private
	      comment " fields to operate on 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1764251 // fields (<unidirectional association>)
	    b parent class_ref 285723 // ObjectStreamField
	end

	attribute 2709019 "numPrimFields"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " number of primitive fields "
	end

	attribute 2709147 "keys"
	  const_attribute private explicit_type "long"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " unsafe field keys "
	end

	attribute 2709275 "offsets"
	  const_attribute private explicit_type "int"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " field data offsets "
	end

	attribute 2709403 "typeCodes"
	  const_attribute private explicit_type "char"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " field type codes "
	end

	classrelation 1764379 // types (<unidirectional association>)
	  relation 1764379 --->
	    a role_name "types" multiplicity "[]" const_relation private
	      comment " field types 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1764379 // types (<unidirectional association>)
	    b parent class_ref 164635 // Class
	end

	operation 6876571 "FieldReflector"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "fields" type class_ref 285723 // ObjectStreamField
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs FieldReflector capable of setting/getting values from the
subset of fields whose ObjectStreamFields contain non-null
reflective Field objects.  ObjectStreamFields with null Fields are
treated as filler, for which get operations return default values
and set operations discard given values."
	end

	operation 6876699 "getFields"
	  package return_type class_ref 285723 // ObjectStreamField
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns list of ObjectStreamFields representing fields operated on
by this reflector.  The shared/unshared values and Field objects
contained by ObjectStreamFields in the list reflect their bindings
to locally defined serializable fields."
	end

	operation 6876827 "getPrimFieldValues"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "Object"
	    param in name "buf" explicit_type "byte"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Fetches the serializable primitive field values of object obj and
marshals them into byte array buf starting at offset 0.  The caller
is responsible for ensuring that obj is of the proper type."
	end

	operation 6876955 "setPrimFieldValues"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "Object"
	    param in name "buf" explicit_type "byte"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the serializable primitive fields of object obj using values
unmarshalled from byte array buf starting at offset 0.  The caller
is responsible for ensuring that obj is of the proper type."
	end

	operation 6877083 "getObjFieldValues"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "Object"
	    param inout name "vals" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Fetches the serializable object field values of object obj and
stores them in array vals starting at offset 0.  The caller is
responsible for ensuring that obj is of the proper type."
	end

	operation 6877211 "setObjFieldValues"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "Object"
	    param inout name "vals" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the serializable object fields of object obj using values from
array vals starting at offset 0.  The caller is responsible for
ensuring that obj is of the proper type; however, attempts to set a
field with a value of the wrong type will trigger an appropriate
ClassCastException."
	end
      end

      classrelation 1762587 // fieldRefl (<unidirectional association>)
	relation 1762587 --->
	  a role_name "fieldRefl" private
	    comment " reflector for setting/getting serializable field values 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1762587 // fieldRefl (<unidirectional association>)
	  b parent class_ref 906523 // FieldReflector
      end

      class 906651 "ClassDataSlot"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1763995 // desc (<unidirectional association>)
	  relation 1763995 --->
	    a role_name "desc" const_relation package
	      comment " class descriptor \"occupying\" this slot 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1763995 // desc (<unidirectional association>)
	    b parent class_ref 202395 // ObjectStreamClass
	end

	attribute 2708507 "hasData"
	  const_attribute package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " true if serialized form includes data for this slot's descriptor "
	end

	operation 6872731 "ClassDataSlot"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "desc" type class_ref 202395 // ObjectStreamClass
	    param inout name "hasData" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1762715 // dataLayout (<unidirectional association>)
	relation 1762715 --->
	  a role_name "dataLayout" multiplicity "[]" volatile private
	    comment " data layout of serialized objects described by this class desc 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1762715 // dataLayout (<unidirectional association>)
	  b parent class_ref 906651 // ClassDataSlot
      end

      classrelation 1762843 // cons (<unidirectional association>)
	relation 1762843 --->
	  a role_name "cons" private
	    comment " serialization-appropriate constructor, or null if none 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1762843 // cons (<unidirectional association>)
	  b parent class_ref 218395 // Constructor
      end

      classrelation 1762971 // writeObjectMethod (<unidirectional association>)
	relation 1762971 --->
	  a role_name "writeObjectMethod" private
	    comment " class-defined writeObject method, or null if none 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1762971 // writeObjectMethod (<unidirectional association>)
	  b parent class_ref 170651 // Method
      end

      classrelation 1763099 // readObjectMethod (<unidirectional association>)
	relation 1763099 --->
	  a role_name "readObjectMethod" private
	    comment " class-defined readObject method, or null if none 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1763099 // readObjectMethod (<unidirectional association>)
	  b parent class_ref 170651 // Method
      end

      classrelation 1763227 // readObjectNoDataMethod (<unidirectional association>)
	relation 1763227 --->
	  a role_name "readObjectNoDataMethod" private
	    comment " class-defined readObjectNoData method, or null if none 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1763227 // readObjectNoDataMethod (<unidirectional association>)
	  b parent class_ref 170651 // Method
      end

      classrelation 1763355 // writeReplaceMethod (<unidirectional association>)
	relation 1763355 --->
	  a role_name "writeReplaceMethod" private
	    comment " class-defined writeReplace method, or null if none 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1763355 // writeReplaceMethod (<unidirectional association>)
	  b parent class_ref 170651 // Method
      end

      classrelation 1763483 // readResolveMethod (<unidirectional association>)
	relation 1763483 --->
	  a role_name "readResolveMethod" private
	    comment " class-defined readResolve method, or null if none 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1763483 // readResolveMethod (<unidirectional association>)
	  b parent class_ref 170651 // Method
      end

      classrelation 1763611 // localDesc (<unidirectional association>)
	relation 1763611 --->
	  a role_name "localDesc" private
	    comment " local class descriptor for represented class (may point to self) 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1763611 // localDesc (<unidirectional association>)
	  b parent class_ref 202395 // ObjectStreamClass
      end

      classrelation 1763739 // superDesc (<unidirectional association>)
	relation 1763739 --->
	  a role_name "superDesc" private
	    comment " superclass descriptor appearing in stream 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1763739 // superDesc (<unidirectional association>)
	  b parent class_ref 202395 // ObjectStreamClass
      end

      operation 6867099 "initNative"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes native code."
      end

      extra_member 160155 "initialization"
	
	cpp "" ""
	java "  static {
	initNative();
    }"
	php ""
	python ""
	idl ""
      end

      operation 6867227 "lookup"
	class_operation public return_type class_ref 202395 // ObjectStreamClass
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find the descriptor for a class that can be serialized.  Creates an
ObjectStreamClass instance if one does not exist yet for class. Null is
returned if the specified class does not implement java.io.Serializable
or java.io.Externalizable.

@param	cl class for which to get the descriptor
@return	the class descriptor for the specified class"
      end

      operation 6867355 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The name of the class described by this descriptor.

@return	a <code>String</code> representing the fully qualified name of
		the class"
      end

      operation 6867483 "getSerialVersionUID"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the serialVersionUID for this class.  The serialVersionUID
defines a set of classes all with the same name that have evolved from a
common root class and agree to be serialized and deserialized using a
common format.  NonSerializable classes have a serialVersionUID of 0L.

@return	the SUID of the class described by this descriptor"
      end

      operation 6867611 "forClass"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the class in the local VM that this version is mapped to.  Null
is returned if there is no corresponding local class.

@return	the <code>Class</code> instance that this descriptor represents"
      end

      operation 6867739 "getFields"
	public return_type class_ref 285723 // ObjectStreamField
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an array of the fields of this serializable class.

@return	an array containing an element for each persistent field of
		this class. Returns an array of length zero if there are no
		fields.
@since 1.2"
      end

      operation 6867867 "getField"
	public return_type class_ref 285723 // ObjectStreamField
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the field of this class by name.

@param	name the name of the data field to look for
@return	The ObjectStreamField object of the named field or null if
		there is no such named field."
      end

      operation 6867995 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string describing this ObjectStreamClass."
      end

      operation 6868123 "lookup"
	class_operation package return_type class_ref 202395 // ObjectStreamClass
	nparams 2
	  param inout name "cl" type class_ref 164635 // Class
	  param inout name "all" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Looks up and returns class descriptor for given class, or null if class
is non-serializable and \"all\" is set to false.

@param	cl class to look up
@param	all if true, return descriptors for all classes; if false, only
		return descriptors for serializable classes"
      end

      class 906779 "EntryFuture"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2708251 "unset"
	  class_attribute const_attribute private explicit_type "Object"
	  init_value "=  new Object()"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1763867 // owner (<unidirectional association>)
	  relation 1763867 --->
	    a role_name "owner" init_value "=  Thread.currentThread()" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1763867 // owner (<unidirectional association>)
	    b parent class_ref 163227 // Thread
	end

	attribute 2708379 "entry"
	  private explicit_type "Object"
	  init_value "=  unset"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 6868251 "set"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "entry" explicit_type "Object"
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Attempts to set the value contained by this EntryFuture.  If the
EntryFuture's value has not been set already, then the value is
saved, any callers blocked in the get() method are notified, and
true is returned.  If the value has already been set, then no saving
or notification occurs, and false is returned."
	end

	operation 6868379 "get"
	  package explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the value contained by this EntryFuture, blocking if
necessary until a value is set."
	end

	operation 6868507 "getOwner"
	  package return_type class_ref 163227 // Thread
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the thread that created this EntryFuture."
	end
      end

      operation 6868635 "ObjectStreamClass"
	private explicit_return_type ""
	nparams 1
	  param in name "cl" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates local class descriptor representing given class."
      end

      operation 6868763 "ObjectStreamClass"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates blank class descriptor which should be initialized via a
subsequent call to initProxy(), initNonProxy() or readNonProxy()."
      end

      operation 6868891 "initProxy"
	package explicit_return_type "void"
	nparams 3
	  param inout name "cl" type class_ref 164635 // Class
	  param inout name "resolveEx" type class_ref 201883 // ClassNotFoundException
	  param inout name "superDesc" type class_ref 202395 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 216987 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes class descriptor representing a proxy class."
      end

      operation 6869019 "initNonProxy"
	package explicit_return_type "void"
	nparams 4
	  param inout name "model" type class_ref 202395 // ObjectStreamClass
	  param inout name "cl" type class_ref 164635 // Class
	  param inout name "resolveEx" type class_ref 201883 // ClassNotFoundException
	  param inout name "superDesc" type class_ref 202395 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 216987 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes class descriptor representing a non-proxy class."
      end

      operation 6869147 "readNonProxy"
	package explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads non-proxy class descriptor information from given input stream.
The resulting class descriptor is not fully functional; it can only be
used as input to the ObjectInputStream.resolveClass() and
ObjectStreamClass.initNonProxy() methods."
      end

      operation 6869275 "writeNonProxy"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes non-proxy class descriptor information to given output stream."
      end

      operation 6869403 "getResolveException"
	package return_type class_ref 201883 // ClassNotFoundException
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns ClassNotFoundException (if any) thrown while attempting to
resolve local class corresponding to this class descriptor."
      end

      operation 6869531 "checkDeserialize"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 216987 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws an InvalidClassException if object instances referencing this
class descriptor should not be allowed to deserialize.  This method does
not apply to deserialization of enum constants."
      end

      operation 6869659 "checkSerialize"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 216987 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws an InvalidClassException if objects whose class is represented by
this descriptor should not be allowed to serialize.  This method does
not apply to serialization of enum constants."
      end

      operation 6869787 "checkDefaultSerialize"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 216987 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws an InvalidClassException if objects whose class is represented by
this descriptor should not be permitted to use default serialization
(e.g., if the class declares serializable fields that do not correspond
to actual fields, and hence must use the GetField API).  This method
does not apply to deserialization of enum constants."
      end

      operation 6869915 "getSuperDesc"
	package return_type class_ref 202395 // ObjectStreamClass
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns superclass descriptor.  Note that on the receiving side, the
superclass descriptor may be bound to a class that is not a superclass
of the subclass descriptor's bound class."
      end

      operation 6870043 "getLocalDesc"
	package return_type class_ref 202395 // ObjectStreamClass
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the \"local\" class descriptor for the class associated with this
class descriptor (i.e., the result of
ObjectStreamClass.lookup(this.forClass())) or null if there is no class
associated with this descriptor."
      end

      operation 6870171 "getFields"
	package return_type class_ref 285723 // ObjectStreamField
	nparams 1
	  param inout name "copy" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns arrays of ObjectStreamFields representing the serializable
fields of the represented class.  If copy is true, a clone of this class
descriptor's field array is returned, otherwise the array itself is
returned."
      end

      operation 6870299 "getField"
	package return_type class_ref 285723 // ObjectStreamField
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "type" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Looks up a serializable field of the represented class by name and type.
A specified type of null matches all types, Object.class matches all
non-primitive types, and any other non-null type matches assignable
types only.  Returns matching field, or null if no match found."
      end

      operation 6870427 "isProxy"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if class descriptor represents a dynamic proxy class, false
otherwise."
      end

      operation 6870555 "isEnum"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if class descriptor represents an enum type, false
otherwise."
      end

      operation 6870683 "isExternalizable"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class implements Externalizable, false
otherwise."
      end

      operation 6870811 "isSerializable"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class implements Serializable, false
otherwise."
      end

      operation 6870939 "hasBlockExternalData"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if class descriptor represents externalizable class that
has written its data in 1.2 (block data) format, false otherwise."
      end

      operation 6871067 "hasWriteObjectData"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if class descriptor represents serializable (but not
externalizable) class which has written its data via a custom
writeObject() method, false otherwise."
      end

      operation 6871195 "isInstantiable"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class is serializable/externalizable and can
be instantiated by the serialization runtime--i.e., if it is
externalizable and defines a public no-arg constructor, or if it is
non-externalizable and its first non-serializable superclass defines an
accessible no-arg constructor.  Otherwise, returns false."
      end

      operation 6871323 "hasWriteObjectMethod"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class is serializable (but not
externalizable) and defines a conformant writeObject method.  Otherwise,
returns false."
      end

      operation 6871451 "hasReadObjectMethod"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class is serializable (but not
externalizable) and defines a conformant readObject method.  Otherwise,
returns false."
      end

      operation 6871579 "hasReadObjectNoDataMethod"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class is serializable (but not
externalizable) and defines a conformant readObjectNoData method.
Otherwise, returns false."
      end

      operation 6871707 "hasWriteReplaceMethod"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class is serializable or externalizable and
defines a conformant writeReplace method.  Otherwise, returns false."
      end

      operation 6871835 "hasReadResolveMethod"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class is serializable or externalizable and
defines a conformant readResolve method.  Otherwise, returns false."
      end

      operation 6871963 "newInstance"
	package explicit_return_type "Object"
	nparams 0
	nexceptions 3
	  exception class_ref 220059 // InstantiationException
	  exception class_ref 220187 // InvocationTargetException
	  exception class_ref 220315 // UnsupportedOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of the represented class.  If the class is
externalizable, invokes its public no-arg constructor; otherwise, if the
class is serializable, invokes the no-arg constructor of the first
non-serializable superclass.  Throws UnsupportedOperationException if
this class descriptor is not associated with a class, if the associated
class is non-serializable or if the appropriate no-arg constructor is
inaccessible/unavailable."
      end

      operation 6872091 "invokeWriteObject"
	package explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 220315 // UnsupportedOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes the writeObject method of the represented serializable class.
Throws UnsupportedOperationException if this class descriptor is not
associated with a class, or if the class is externalizable,
non-serializable or does not define writeObject."
      end

      operation 6872219 "invokeReadObject"
	package explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 3
	  exception class_ref 201883 // ClassNotFoundException
	  exception class_ref 179355 // IOException
	  exception class_ref 220315 // UnsupportedOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes the readObject method of the represented serializable class.
Throws UnsupportedOperationException if this class descriptor is not
associated with a class, or if the class is externalizable,
non-serializable or does not define readObject."
      end

      operation 6872347 "invokeReadObjectNoData"
	package explicit_return_type "void"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 220315 // UnsupportedOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes the readObjectNoData method of the represented serializable
class.  Throws UnsupportedOperationException if this class descriptor is
not associated with a class, or if the class is externalizable,
non-serializable or does not define readObjectNoData."
      end

      operation 6872475 "invokeWriteReplace"
	package explicit_return_type "Object"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 220315 // UnsupportedOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes the writeReplace method of the represented serializable class and
returns the result.  Throws UnsupportedOperationException if this class
descriptor is not associated with a class, or if the class is
non-serializable or does not define writeReplace."
      end

      operation 6872603 "invokeReadResolve"
	package explicit_return_type "Object"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 220315 // UnsupportedOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes the readResolve method of the represented serializable class and
returns the result.  Throws UnsupportedOperationException if this class
descriptor is not associated with a class, or if the class is
non-serializable or does not define readResolve."
      end

      operation 6872859 "getClassDataLayout"
	package return_type class_ref 906651 // ClassDataSlot
	nparams 0
	nexceptions 1
	  exception class_ref 216987 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns array of ClassDataSlot instances representing the data layout
(including superclass data) for serialized objects described by this
class descriptor.  ClassDataSlots are ordered by inheritance with those
containing \"higher\" superclasses appearing first.  The final
ClassDataSlot contains a reference to this descriptor."
      end

      operation 6872987 "getClassDataLayout0"
	private return_type class_ref 906651 // ClassDataSlot
	nparams 0
	nexceptions 1
	  exception class_ref 216987 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6873115 "getPrimDataSize"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns aggregate size (in bytes) of marshalled primitive field values
for represented class."
      end

      operation 6873243 "getNumObjFields"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns number of non-primitive serializable fields of represented
class."
      end

      operation 6873371 "getPrimFieldValues"
	package explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param in name "buf" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fetches the serializable primitive field values of object obj and
marshals them into byte array buf starting at offset 0.  It is the
responsibility of the caller to ensure that obj is of the proper type if
non-null."
      end

      operation 6873499 "setPrimFieldValues"
	package explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param in name "buf" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the serializable primitive fields of object obj using values
unmarshalled from byte array buf starting at offset 0.  It is the
responsibility of the caller to ensure that obj is of the proper type if
non-null."
      end

      operation 6873627 "getObjFieldValues"
	package explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param inout name "vals" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fetches the serializable object field values of object obj and stores
them in array vals starting at offset 0.  It is the responsibility of
the caller to ensure that obj is of the proper type if non-null."
      end

      operation 6873755 "setObjFieldValues"
	package explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param inout name "vals" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the serializable object fields of object obj using values from
array vals starting at offset 0.  It is the responsibility of the caller
to ensure that obj is of the proper type if non-null."
      end

      operation 6873883 "computeFieldOffsets"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 216987 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates and sets serializable field offsets, as well as primitive
data size and object field count totals.  Throws InvalidClassException
if fields are illegally ordered."
      end

      operation 6874011 "getVariantFor"
	private return_type class_ref 202395 // ObjectStreamClass
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	nexceptions 1
	  exception class_ref 216987 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If given class is the same as the class associated with this class
descriptor, returns reference to this class descriptor.  Otherwise,
returns variant of this class descriptor bound to given class."
      end

      operation 6874139 "getExternalizableConstructor"
	class_operation private return_type class_ref 218395 // Constructor
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns public no-arg constructor of given class, or null if none found.
Access checks are disabled on the returned constructor (if any), since
the defining class may still be non-public."
      end

      operation 6874267 "getSerializableConstructor"
	class_operation private return_type class_ref 218395 // Constructor
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns subclass-accessible no-arg constructor of first non-serializable
superclass, or null if none found.  Access checks are disabled on the
returned constructor (if any)."
      end

      operation 6874395 "getInheritableMethod"
	class_operation private return_type class_ref 170651 // Method
	nparams 4
	  param inout name "cl" type class_ref 164635 // Class
	  param in name "name" explicit_type "String"
	  param inout name "argTypes" type class_ref 164635 // Class
	  param inout name "returnType" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns non-static, non-abstract method with given signature provided it
is defined by or accessible (via inheritance) by the given class, or
null if no match found.  Access checks are disabled on the returned
method (if any)."
      end

      operation 6874523 "getPrivateMethod"
	class_operation private return_type class_ref 170651 // Method
	nparams 4
	  param inout name "cl" type class_ref 164635 // Class
	  param in name "name" explicit_type "String"
	  param inout name "argTypes" type class_ref 164635 // Class
	  param inout name "returnType" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns non-static private method with given signature defined by given
class, or null if none found.  Access checks are disabled on the
returned method (if any)."
      end

      operation 6874651 "packageEquals"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "cl1" type class_ref 164635 // Class
	  param inout name "cl2" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if classes are defined in the same runtime package, false
otherwise."
      end

      operation 6874779 "getPackageName"
	class_operation private explicit_return_type "String"
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns package name of given class."
      end

      operation 6874907 "classNamesEqual"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "name1" explicit_type "String"
	  param in name "name2" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares class names for equality, ignoring package names.  Returns true
if class names equal, false otherwise."
      end

      operation 6875035 "getClassSignature"
	class_operation package explicit_return_type "String"
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns JVM type signature for given class."
      end

      operation 6875163 "getMethodSignature"
	class_operation private explicit_return_type "String"
	nparams 2
	  param inout name "paramTypes" type class_ref 164635 // Class
	  param inout name "retType" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns JVM type signature for given list of parameters and return type."
      end

      operation 6875291 "throwMiscException"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "th" type class_ref 164251 // Throwable
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method for throwing an exception that is either a
RuntimeException, Error, or of some unexpected type (in which case it is
wrapped inside an IOException)."
      end

      operation 6875419 "getSerialFields"
	class_operation private return_type class_ref 285723 // ObjectStreamField
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	nexceptions 1
	  exception class_ref 216987 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns ObjectStreamField array describing the serializable fields of
the given class.  Serializable fields backed by an actual field of the
class are represented by ObjectStreamFields with corresponding non-null
Field objects.  Throws InvalidClassException if the (explicitly
declared) serializable fields are invalid."
      end

      operation 6875547 "getDeclaredSerialFields"
	class_operation private return_type class_ref 285723 // ObjectStreamField
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	nexceptions 1
	  exception class_ref 216987 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns serializable fields of given class as defined explicitly by a
\"serialPersistentFields\" field, or null if no appropriate
\"serialPersistentFields\" field is defined.  Serializable fields backed
by an actual field of the class are represented by ObjectStreamFields
with corresponding non-null Field objects.  For compatibility with past
releases, a \"serialPersistentFields\" field with a null value is
considered equivalent to not declaring \"serialPersistentFields\".  Throws
InvalidClassException if the declared serializable fields are
invalid--e.g., if multiple fields share the same name."
      end

      operation 6875675 "getDefaultSerialFields"
	class_operation private return_type class_ref 285723 // ObjectStreamField
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns array of ObjectStreamFields corresponding to all non-static
non-transient fields declared by given class.  Each ObjectStreamField
contains a Field object for the field it represents.  If no default
serializable fields exist, NO_FIELDS is returned."
      end

      operation 6875803 "getDeclaredSUID"
	class_operation private return_type class_ref 277915 // Long
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns explicit serial version UID value declared by given class, or
null if none."
      end

      operation 6875931 "computeDefaultSUID"
	class_operation private explicit_return_type "long"
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the default serial version UID value for the given class."
      end

      operation 6876059 "hasStaticInitializer"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the given class defines a static initializer method,
false otherwise."
      end

      class 906907 "MemberSignature"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1764123 // member (<unidirectional association>)
	  relation 1764123 --->
	    a role_name "member" const_relation public
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1764123 // member (<unidirectional association>)
	    b parent class_ref 221211 // Member
	end

	attribute 2708635 "name"
	  const_attribute public explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2708763 "signature"
	  const_attribute public explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 6876187 "MemberSignature"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "field" type class_ref 220443 // Field
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6876315 "MemberSignature"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "cons" type class_ref 218395 // Constructor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6876443 "MemberSignature"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "meth" type class_ref 170651 // Method
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 6877339 "getReflector"
	class_operation private return_type class_ref 906523 // FieldReflector
	nparams 2
	  param inout name "fields" type class_ref 285723 // ObjectStreamField
	  param inout name "localDesc" type class_ref 202395 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 216987 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Matches given set of serializable fields with serializable fields
described by the given local class descriptor, and returns a
FieldReflector instance capable of setting/getting values from the
subset of fields that match (non-matching fields are treated as filler,
for which get operations return default values and set operations
discard given values).  Throws InvalidClassException if unresolvable
type conflicts exist between the two sets of fields."
      end

      operation 6877851 "matchFields"
	class_operation private return_type class_ref 285723 // ObjectStreamField
	nparams 2
	  param inout name "fields" type class_ref 285723 // ObjectStreamField
	  param inout name "localDesc" type class_ref 202395 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 216987 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Matches given set of serializable fields with serializable fields
obtained from the given local class descriptor (which contain bindings
to reflective Field objects).  Returns list of ObjectStreamFields in
which each ObjectStreamField whose signature matches that of a local
field contains a Field object for that field; unmatched
ObjectStreamFields contain null Field objects.  Shared/unshared settings
of the returned ObjectStreamFields also reflect those of matched local
ObjectStreamFields.  Throws InvalidClassException if unresolvable type
conflicts exist between the two sets of fields."
      end

      operation 6877979 "processQueue"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "queue" type class_ref 202779 // ReferenceQueue
	  param inout name "map" type class_ref 202651 // ConcurrentMap
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Class<?>> ${p0}, ${t1}<? extends 
			     WeakReference<Class<?>>, ?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from the specified map any keys that have been enqueued
on the specified reference queue."
      end
    end

    class 203675 "ObjectInputValidation"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Callback interface to allow validation of objects within a graph.
Allows an object to be called when a complete graph of objects has
been deserialized.

@author  unascribed
@version 1.18, 12/19/03
@see     ObjectInputStream
@see     ObjectInputStream#registerValidation(java.io.ObjectInputValidation, int)
@since   JDK1.1"
      operation 6866971 "validateObject"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 203931 // InvalidObjectException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates the object.

@exception InvalidObjectException If the object cannot validate itself."
      end
    end

    class 203803 "NotActiveException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when serialization or deserialization is not active.

@author  unascribed
@version 1.15, 12/19/03
@since   JDK1.1"
      classrelation 1760539 // <generalisation>
	relation 1760539 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1760539 // <generalisation>
	  b parent class_ref 289307 // ObjectStreamException
      end

      operation 6866459 "NotActiveException"
	public explicit_return_type ""
	nparams 1
	  param in name "reason" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor to create a new NotActiveException with the reason given.

@param reason  a String describing the reason for the exception."
      end

      operation 6866587 "NotActiveException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor to create a new NotActiveException without a reason."
      end
    end

    class 203931 "InvalidObjectException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Indicates that one or more deserialized objects failed validation
tests.  The argument should provide the reason for the failure.

@see ObjectInputValidation
@since JDK1.1

@author  unascribed
@version 1.16, 01/12/04
@since   JDK1.1"
      classrelation 1760155 // <generalisation>
	relation 1760155 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1760155 // <generalisation>
	  b parent class_ref 289307 // ObjectStreamException
      end

      operation 6863899 "InvalidObjectException"
	public explicit_return_type ""
	nparams 1
	  param in name "reason" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InvalidObjectException</code>.
@param reason Detailed message explaining the reason for the failure.

@see ObjectInputValidation"
      end
    end

    class 204059 "StreamCorruptedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when control information that was read from an object stream
violates internal consistency checks.

@author  unascribed
@version 1.14, 12/19/03
@since   JDK1.1"
      classrelation 1769115 // <generalisation>
	relation 1769115 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1769115 // <generalisation>
	  b parent class_ref 289307 // ObjectStreamException
      end

      operation 6907547 "StreamCorruptedException"
	public explicit_return_type ""
	nparams 1
	  param in name "reason" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a StreamCorruptedException and list a reason why thrown.

@param reason  String describing the reason for the exception."
      end

      operation 6907675 "StreamCorruptedException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a StreamCorruptedException and list no reason why thrown."
      end
    end

    class 204315 "Externalizable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Only the identity of the class of an Externalizable instance is
written in the serialization stream and it is the responsibility
of the class to save and restore the contents of its instances.

The writeExternal and readExternal methods of the Externalizable
interface are implemented by a class to give the class complete
control over the format and contents of the stream for an object
and its supertypes. These methods must explicitly
coordinate with the supertype to save its state. These methods supersede
customized implementations of writeObject and readObject methods.<br>

Object Serialization uses the Serializable and Externalizable
interfaces.  Object persistence mechanisms can use them as well.  Each
object to be stored is tested for the Externalizable interface. If
the object supports Externalizable, the writeExternal method is called. If the
object does not support Externalizable and does implement
Serializable, the object is saved using
ObjectOutputStream. <br> When an Externalizable object is
reconstructed, an instance is created using the public no-arg
constructor, then the readExternal method called.  Serializable
objects are restored by reading them from an ObjectInputStream.<br>

An Externalizable instance can designate a substitution object via
the writeReplace and readResolve methods documented in the Serializable
interface.<br>

@author  unascribed
@version 1.19, 01/12/04
@see java.io.ObjectOutputStream
@see java.io.ObjectInputStream
@see java.io.ObjectOutput
@see java.io.ObjectInput
@see java.io.Serializable
@since   JDK1.1"
      classrelation 885019 // <generalisation>
	relation 885019 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 885019 // <generalisation>
	  b parent class_ref 137883 // Serializable
      end

      operation 3237915 "writeExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205979 // ObjectOutput
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The object implements the writeExternal method to save its contents
by calling the methods of DataOutput for its primitive values or
calling the writeObject method of ObjectOutput for objects, strings,
and arrays.

@serialData Overriding methods should use this tag to describe
            the data layout of this Externalizable object.
            List the sequence of element types and, if possible,
            relate the element to a public/protected field and/or
            method of this Externalizable class.

@param out the stream to write the object to
@exception IOException Includes any I/O exceptions that may occur"
      end

      operation 3238043 "readExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201627 // ObjectInput
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The object implements the readExternal method to restore its
contents by calling the methods of DataInput for primitive
types and readObject for objects, strings and arrays.  The
readExternal method must read the values in the same sequence
and with the same types as were written by writeExternal.

@param in the stream to read data from in order to restore the object
@exception IOException if I/O errors occur
@exception ClassNotFoundException If the class for an object being
             restored cannot be found."
      end
    end

    class 204827 "DataInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A data input stream lets an application read primitive Java data
types from an underlying input stream in a machine-independent
way. An application uses a data output stream to write data that
can later be read by a data input stream.

@author  Arthur van Hoff
@version 1.71, 05/28/04
@see     java.io.DataOutputStream
@since   JDK1.0"
      classrelation 1043355 // <generalisation>
	relation 1043355 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1043355 // <generalisation>
	  b parent class_ref 602651 // FilterInputStream
      end

      classrelation 1043483 // <realization>
	relation 1043483 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1043483 // <realization>
	  b parent class_ref 201755 // DataInput
      end

      operation 3862683 "DataInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 179099 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DataInputStream that uses the specified
underlying InputStream.

@param  in   the specified input stream"
      end

      attribute 1079835 "bytearr"
	private explicit_type "byte"
	multiplicity "[]"
	init_value "=  new byte[80]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "working arrays initialized on demand by readUTF
"
      end

      attribute 1079963 "chararr"
	private explicit_type "char"
	multiplicity "[]"
	init_value "=  new char[80]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 3862811 "read"
	public explicit_return_type "int"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads some number of bytes from the contained input stream and 
stores them into the buffer array <code>b</code>. The number of 
bytes actually read is returned as an integer. This method blocks 
until input data is available, end of file is detected, or an 
exception is thrown. 

<p>If <code>b</code> is null, a <code>NullPointerException</code> is 
thrown. If the length of <code>b</code> is zero, then no bytes are 
read and <code>0</code> is returned; otherwise, there is an attempt 
to read at least one byte. If no byte is available because the 
stream is at end of file, the value <code>-1</code> is returned;
otherwise, at least one byte is read and stored into <code>b</code>. 

<p>The first byte read is stored into element <code>b[0]</code>, the 
next one into <code>b[1]</code>, and so on. The number of bytes read 
is, at most, equal to the length of <code>b</code>. Let <code>k</code> 
be the number of bytes actually read; these bytes will be stored in 
elements <code>b[0]</code> through <code>b[k-1]</code>, leaving 
elements <code>b[k]</code> through <code>b[b.length-1]</code> 
unaffected. 

<p>If the first byte cannot be read for any reason other than end of 
file, then an <code>IOException</code> is thrown. In particular, an 
<code>IOException</code> is thrown if the input stream has been closed. 

<p>The <code>read(b)</code> method has the same effect as: 
<blockquote><pre>
read(b, 0, b.length) 
</pre></blockquote>

@param      b   the buffer into which the data is read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end
            of the stream has been reached.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in
@see        java.io.InputStream#read(byte[], int, int)"
      end

      operation 3862939 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from the contained 
input stream into an array of bytes.  An attempt is made to read 
as many as <code>len</code> bytes, but a smaller number may be read, 
possibly zero. The number of bytes actually read is returned as an 
integer.

<p> This method blocks until input data is available, end of file is
detected, or an exception is thrown.

<p> If <code>b</code> is <code>null</code>, a
<code>NullPointerException</code> is thrown.

<p> If <code>off</code> is negative, or <code>len</code> is negative, or
<code>off+len</code> is greater than the length of the array
<code>b</code>, then an <code>IndexOutOfBoundsException</code> is
thrown.

<p> If <code>len</code> is zero, then no bytes are read and
<code>0</code> is returned; otherwise, there is an attempt to read at
least one byte. If no byte is available because the stream is at end of
file, the value <code>-1</code> is returned; otherwise, at least one
byte is read and stored into <code>b</code>.

<p> The first byte read is stored into element <code>b[off]</code>, the
next one into <code>b[off+1]</code>, and so on. The number of bytes read
is, at most, equal to <code>len</code>. Let <i>k</i> be the number of
bytes actually read; these bytes will be stored in elements
<code>b[off]</code> through <code>b[off+</code><i>k</i><code>-1]</code>,
leaving elements <code>b[off+</code><i>k</i><code>]</code> through
<code>b[off+len-1]</code> unaffected.

<p> In every case, elements <code>b[0]</code> through
<code>b[off]</code> and elements <code>b[off+len]</code> through
<code>b[b.length-1]</code> are unaffected.

<p> If the first byte cannot be read for any reason other than end of
file, then an <code>IOException</code> is thrown. In particular, an
<code>IOException</code> is thrown if the input stream has been closed.

@param      b     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end
            of the stream has been reached.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in
@see        java.io.InputStream#read(byte[], int, int)"
      end

      operation 3863067 "readFully"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readFully</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@param      b   the buffer into which the data is read.
@exception  EOFException  if this input stream reaches the end before
              reading all the bytes.
@exception  IOException   if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 3863195 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readFully</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@param      b     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the number of bytes to read.
@exception  EOFException  if this input stream reaches the end before
              reading all the bytes.
@exception  IOException   if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 3863323 "skipBytes"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>skipBytes</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped.
@exception  IOException   if an I/O error occurs."
      end

      operation 3863451 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readBoolean</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the <code>boolean</code> value read.
@exception  EOFException  if this input stream has reached the end.
@exception  IOException   if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 3863579 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readByte</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next byte of this input stream as a signed 8-bit
            <code>byte</code>.
@exception  EOFException  if this input stream has reached the end.
@exception  IOException   if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 3863707 "readUnsignedByte"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readUnsignedByte</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next byte of this input stream, interpreted as an
            unsigned 8-bit number.
@exception  EOFException  if this input stream has reached the end.
@exception  IOException   if an I/O error occurs.
@see         java.io.FilterInputStream#in"
      end

      operation 3863835 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readShort</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next two bytes of this input stream, interpreted as a
            signed 16-bit number.
@exception  EOFException  if this input stream reaches the end before
              reading two bytes.
@exception  IOException   if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 3863963 "readUnsignedShort"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readUnsignedShort</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next two bytes of this input stream, interpreted as an
            unsigned 16-bit integer.
@exception  EOFException  if this input stream reaches the end before
              reading two bytes.
@exception  IOException   if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 3864091 "readChar"
	public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readChar</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next two bytes of this input stream as a Unicode
            character.
@exception  EOFException  if this input stream reaches the end before
              reading two bytes.
@exception  IOException   if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 3864219 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readInt</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next four bytes of this input stream, interpreted as an
            <code>int</code>.
@exception  EOFException  if this input stream reaches the end before
              reading four bytes.
@exception  IOException   if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      attribute 1080091 "readBuffer"
	private explicit_type "byte"
	multiplicity "[]"
	init_value "=  new byte[8]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 3864347 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readLong</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next eight bytes of this input stream, interpreted as a
            <code>long</code>.
@exception  EOFException  if this input stream reaches the end before
              reading eight bytes.
@exception  IOException   if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 3864475 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readFloat</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next four bytes of this input stream, interpreted as a
            <code>float</code>.
@exception  EOFException  if this input stream reaches the end before
              reading four bytes.
@exception  IOException   if an I/O error occurs.
@see        java.io.DataInputStream#readInt()
@see        java.lang.Float#intBitsToFloat(int)"
      end

      operation 3864603 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readDouble</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next eight bytes of this input stream, interpreted as a
            <code>double</code>.
@exception  EOFException  if this input stream reaches the end before
              reading eight bytes.
@exception  IOException   if an I/O error occurs.
@see        java.io.DataInputStream#readLong()
@see        java.lang.Double#longBitsToDouble(long)"
      end

      attribute 1080219 "lineBuffer"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 3864731 "readLine"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "See the general contract of the <code>readLine</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@deprecated This method does not properly convert bytes to characters.
As of JDK&nbsp;1.1, the preferred way to read lines of text is via the
<code>BufferedReader.readLine()</code> method.  Programs that use the
<code>DataInputStream</code> class to read lines can be converted to use
the <code>BufferedReader</code> class by replacing code of the form:
<blockquote><pre>
    DataInputStream d =&nbsp;new&nbsp;DataInputStream(in);
</pre></blockquote>
with:
<blockquote><pre>
    BufferedReader d
         =&nbsp;new&nbsp;BufferedReader(new&nbsp;InputStreamReader(in));
</pre></blockquote>

@return     the next line of text from this input stream.
@exception  IOException  if an I/O error occurs.
@see        java.io.BufferedReader#readLine()
@see        java.io.FilterInputStream#in"
      end

      operation 3864859 "readUTF"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readUTF</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     a Unicode string.
@exception  EOFException  if this input stream reaches the end before
              reading all the bytes.
@exception  IOException   if an I/O error occurs.
@exception  UTFDataFormatException if the bytes do not represent a valid
            modified UTF-8 encoding of a string.
@see        java.io.DataInputStream#readUTF(java.io.DataInput)"
      end

      operation 3864987 "readUTF"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "in" type class_ref 201755 // DataInput
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads from the
stream <code>in</code> a representation
of a Unicode  character string encoded in
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a> format;
this string of characters is then returned as a <code>String</code>.
The details of the modified UTF-8 representation
are  exactly the same as for the <code>readUTF</code>
method of <code>DataInput</code>.

@param      in   a data input stream.
@return     a Unicode string.
@exception  EOFException            if the input stream reaches the end
              before all the bytes.
@exception  IOException             if an I/O error occurs.
@exception  UTFDataFormatException  if the bytes do not represent a
              valid modified UTF-8 encoding of a Unicode string.
@see        java.io.DataInputStream#readUnsignedShort()"
      end
    end

    class 205339 "ObjectOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An ObjectOutputStream writes primitive data types and graphs of Java objects
to an OutputStream.  The objects can be read (reconstituted) using an
ObjectInputStream.  Persistent storage of objects can be accomplished by
using a file for the stream.  If the stream is a network socket stream, the
objects can be reconstituted on another host or in another process.

<p>Only objects that support the java.io.Serializable interface can be
written to streams.  The class of each serializable object is encoded
including the class name and signature of the class, the values of the
object's fields and arrays, and the closure of any other objects referenced
from the initial objects.

<p>The method writeObject is used to write an object to the stream.  Any
object, including Strings and arrays, is written with writeObject. Multiple
objects or primitives can be written to the stream.  The objects must be
read back from the corresponding ObjectInputstream with the same types and
in the same order as they were written.

<p>Primitive data types can also be written to the stream using the
appropriate methods from DataOutput. Strings can also be written using the
writeUTF method.

<p>The default serialization mechanism for an object writes the class of the
object, the class signature, and the values of all non-transient and
non-static fields.  References to other objects (except in transient or
static fields) cause those objects to be written also. Multiple references
to a single object are encoded using a reference sharing mechanism so that
graphs of objects can be restored to the same shape as when the original was
written.

<p>For example to write an object that can be read by the example in
ObjectInputStream:
<br>
<pre>
	FileOutputStream fos = new FileOutputStream(\"t.tmp\");
	ObjectOutputStream oos = new ObjectOutputStream(fos);

	oos.writeInt(12345);
	oos.writeObject(\"Today\");
	oos.writeObject(new Date());

	oos.close();
</pre>

<p>Classes that require special handling during the serialization and
deserialization process must implement special methods with these exact
signatures:
<br>
<pre>
private void readObject(java.io.ObjectInputStream stream)
    throws IOException, ClassNotFoundException;
private void writeObject(java.io.ObjectOutputStream stream)
    throws IOException
</pre>

<p>The writeObject method is responsible for writing the state of the object
for its particular class so that the corresponding readObject method can
restore it.  The method does not need to concern itself with the state
belonging to the object's superclasses or subclasses.  State is saved by
writing the individual fields to the ObjectOutputStream using the
writeObject method or by using the methods for primitive data types
supported by DataOutput.

<p>Serialization does not write out the fields of any object that does not
implement the java.io.Serializable interface.  Subclasses of Objects that
are not serializable can be serializable. In this case the non-serializable
class must have a no-arg constructor to allow its fields to be initialized.
In this case it is the responsibility of the subclass to save and restore
the state of the non-serializable class. It is frequently the case that the
fields of that class are accessible (public, package, or protected) or that
there are get and set methods that can be used to restore the state.

<p>Serialization of an object can be prevented by implementing writeObject
and readObject methods that throw the NotSerializableException.  The
exception will be caught by the ObjectOutputStream and abort the
serialization process.

<p>Implementing the Externalizable interface allows the object to assume
complete control over the contents and format of the object's serialized
form.  The methods of the Externalizable interface, writeExternal and
readExternal, are called to save and restore the objects state.  When
implemented by a class they can write and read their own state using all of
the methods of ObjectOutput and ObjectInput.  It is the responsibility of
the objects to handle any versioning that occurs.

<p>Enum constants are serialized differently than ordinary serializable or
externalizable objects.  The serialized form of an enum constant consists
solely of its name; field values of the constant are not transmitted.  To
serialize an enum constant, ObjectOutputStream writes the string returned by
the constant's name method.  Like other serializable or externalizable
objects, enum constants can function as the targets of back references
appearing subsequently in the serialization stream.  The process by which
enum constants are serialized cannot be customized; any class-specific
writeObject and writeReplace methods defined by enum types are ignored
during serialization.  Similarly, any serialPersistentFields or
serialVersionUID field declarations are also ignored--all enum types have a
fixed serialVersionUID of 0L.

<p>Primitive data, excluding serializable fields and externalizable data, is
written to the ObjectOutputStream in block-data records. A block data record
is composed of a header and data. The block data header consists of a marker
and the number of bytes to follow the header.  Consecutive primitive data
writes are merged into one block-data record.  The blocking factor used for
a block-data record will be 1024 bytes.  Each block-data record will be
filled up to 1024 bytes, or be written whenever there is a termination of
block-data mode.  Calls to the ObjectOutputStream methods writeObject,
defaultWriteObject and writeFields initially terminate any existing
block-data record.

@author	Mike Warres
@author	Roger Riggs
@version     1.147, 06/07/26
@see java.io.DataOutput
@see java.io.ObjectInputStream
@see java.io.Serializable
@see java.io.Externalizable
@see <a href=\"../../../guide/serialization/spec/output.doc.html\">Object Serialization Specification, Section 2, Object Output Classes</a>
@since       JDK1.1"
      classrelation 236571 // <generalisation>
	relation 236571 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 236571 // <generalisation>
	  b parent class_ref 183835 // OutputStream
      end

      classrelation 236827 // <realization>
	relation 236827 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 236827 // <realization>
	  b parent class_ref 205979 // ObjectOutput
      end

      classrelation 236955 // <realization>
	relation 236955 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 236955 // <realization>
	  b parent class_ref 202011 // ObjectStreamConstants
      end

      class 206235 "Caches"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 237083 // subclassAudits (<unidirectional association>)
	  relation 237083 --->
	    a role_name "subclassAudits" init_value "=  
	    new ConcurrentHashMap<WeakClassKey,Boolean>()" class_relation const_relation package
	      comment " cache of subclass security audit results 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<WeakClassKey,Boolean> ${name}${value};
"
	      classrelation_ref 237083 // subclassAudits (<unidirectional association>)
	    b parent class_ref 202651 // ConcurrentMap
	end

	classrelation 237211 // subclassAuditsQueue (<unidirectional association>)
	  relation 237211 --->
	    a role_name "subclassAuditsQueue" init_value "=  
	    new ReferenceQueue<Class<?>>()" class_relation const_relation package
	      comment " queue for WeakReferences to audited subclasses 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>> ${name}${value};
"
	      classrelation_ref 237211 // subclassAuditsQueue (<unidirectional association>)
	    b parent class_ref 202779 // ReferenceQueue
	end
      end

      class 206363 "BlockDataOutputStream"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 238235 // <generalisation>
	  relation 238235 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 238235 // <generalisation>
	    b parent class_ref 183835 // OutputStream
	end

	classrelation 238363 // <realization>
	  relation 238363 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 238363 // <realization>
	    b parent class_ref 206107 // DataOutput
	end

	attribute 251803 "MAX_BLOCK_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value "=  1024"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " maximum data block length "
	end

	attribute 251931 "MAX_HEADER_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value "=  5"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " maximum data block header length "
	end

	attribute 252059 "CHAR_BUF_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value "=  256"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (tunable) length of char buffer (for writing strings) "
	end

	attribute 252187 "buf"
	  const_attribute private explicit_type "byte"
	  multiplicity "[]"
	  init_value "=  new byte[MAX_BLOCK_SIZE]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " buffer for writing general/block data "
	end

	attribute 252315 "hbuf"
	  const_attribute private explicit_type "byte"
	  multiplicity "[]"
	  init_value "=  new byte[MAX_HEADER_SIZE]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " buffer for writing block data headers "
	end

	attribute 252443 "cbuf"
	  const_attribute private explicit_type "char"
	  multiplicity "[]"
	  init_value "=  new char[CHAR_BUF_SIZE]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " char buffer for fast string writes "
	end

	attribute 252571 "blkmode"
	  private explicit_type "boolean"
	  init_value "=  false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " block data mode "
	end

	attribute 252699 "pos"
	  private explicit_type "int"
	  init_value "=  0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " current offset into buf "
	end

	classrelation 238491 // out (<unidirectional association>)
	  relation 238491 --->
	    a role_name "out" const_relation private
	      comment " underlying output stream 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 238491 // out (<unidirectional association>)
	    b parent class_ref 183835 // OutputStream
	end

	classrelation 238619 // dout (<unidirectional association>)
	  relation 238619 --->
	    a role_name "dout" const_relation private
	      comment " loopback stream (for data writes that span data blocks) 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 238619 // dout (<unidirectional association>)
	    b parent class_ref 207003 // DataOutputStream
	end

	operation 716187 "BlockDataOutputStream"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "out" type class_ref 183835 // OutputStream
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates new BlockDataOutputStream on top of given underlying stream.
Block data mode is turned off by default."
	end

	operation 716315 "setBlockDataMode"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "mode" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets block data mode to the given mode (true == on, false == off)
and returns the previous mode value.  If the new mode is the same as
the old mode, no action is taken.  If the new mode differs from the
old mode, any buffered data is flushed before switching to the new
mode."
	end

	operation 716443 "getBlockDataMode"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the stream is currently in block data mode, false
otherwise."
	end

	operation 716571 "write"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "b" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------- generic output stream methods ----------------- 

The following methods are equivalent to their counterparts in
OutputStream, except that they partition written data into data
blocks when in block data mode."
	end

	operation 716699 "write"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "b" explicit_type "byte"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 716827 "write"
	  public explicit_return_type "void"
	  nparams 3
	    param in name "b" explicit_type "byte"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 716955 "flush"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 717083 "close"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 717211 "write"
	  package explicit_return_type "void"
	  nparams 4
	    param in name "b" explicit_type "byte"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	    param inout name "copy" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes specified span of byte values from given array.  If copy is
true, copies the values to an intermediate buffer before writing
them to underlying stream (to avoid exposing a reference to the
original byte array)."
	end

	operation 717339 "drain"
	  package explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes all buffered data from this stream to the underlying stream,
but does not flush underlying stream."
	end

	operation 717467 "writeBlockHeader"
	  private explicit_return_type "void"
	  nparams 1
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes block data header.  Data blocks shorter than 256 bytes are
prefixed with a 2-byte header; all others start with a 5-byte
header."
	end

	operation 717595 "writeBoolean"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "v" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------- primitive data output methods ----------------- 

The following methods are equivalent to their counterparts in
DataOutputStream, except that they partition written data into data
blocks when in block data mode."
	end

	operation 717723 "writeByte"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "v" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 717851 "writeChar"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "v" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 717979 "writeShort"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "v" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 718107 "writeInt"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "v" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 718235 "writeFloat"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "v" explicit_type "float"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 718363 "writeLong"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "v" explicit_type "long"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 718491 "writeDouble"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "v" explicit_type "double"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 718619 "writeBytes"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "s" explicit_type "String"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 718747 "writeChars"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "s" explicit_type "String"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 718875 "writeUTF"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "s" explicit_type "String"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 719003 "writeBooleans"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "boolean"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " -------------- primitive data array output methods -------------- 

The following methods write out spans of primitive data values.
Though equivalent to calling the corresponding primitive write
methods repeatedly, these methods are optimized for writing groups
of primitive data values more efficiently."
	end

	operation 719131 "writeChars"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "v" explicit_type "char"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 719259 "writeShorts"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "v" explicit_type "short"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 719387 "writeInts"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "v" explicit_type "int"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 719515 "writeFloats"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "v" explicit_type "float"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 719643 "writeLongs"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "v" explicit_type "long"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 719771 "writeDoubles"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "v" explicit_type "double"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 719899 "getUTFLength"
	  package explicit_return_type "long"
	  nparams 1
	    param in name "s" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the length in bytes of the UTF encoding of the given string."
	end

	operation 720027 "writeUTF"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "s" explicit_type "String"
	    param in name "utflen" explicit_type "long"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes the given string in UTF format.  This method is used in
situations where the UTF encoding length of the string is already
known; specifying it explicitly avoids a prescan of the string to
determine its UTF length."
	end

	operation 720155 "writeLongUTF"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "s" explicit_type "String"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes given string in \"long\" UTF format.  \"Long\" UTF format is
identical to standard UTF, except that it uses an 8 byte header
(instead of the standard 2 bytes) to convey the UTF encoding length."
	end

	operation 720283 "writeLongUTF"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "s" explicit_type "String"
	    param in name "utflen" explicit_type "long"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes given string in \"long\" UTF format, where the UTF encoding
length of the string is already known."
	end

	operation 720411 "writeUTFBody"
	  private explicit_return_type "void"
	  nparams 1
	    param in name "s" explicit_type "String"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes the \"body\" (i.e., the UTF representation minus the 2-byte or
8-byte length header) of the UTF encoding for the given string."
	end
      end

      classrelation 237339 // bout (<unidirectional association>)
	relation 237339 --->
	  a role_name "bout" const_relation private
	    comment " filter stream for handling block data conversion 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 237339 // bout (<unidirectional association>)
	  b parent class_ref 206363 // BlockDataOutputStream
      end

      class 206491 "HandleTable"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 252827 "size"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " number of mappings in table/next available handle "
	end

	attribute 252955 "threshold"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " size threshold determining when to expand hash spine "
	end

	attribute 253083 "loadFactor"
	  const_attribute private explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " factor for computing size threshold "
	end

	attribute 253211 "spine"
	  private explicit_type "int"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " maps hash value -> candidate handle value "
	end

	attribute 253339 "next"
	  private explicit_type "int"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " maps handle value -> next candidate handle value "
	end

	attribute 253467 "objs"
	  private explicit_type "Object"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " maps handle value -> associated object "
	end

	operation 720539 "HandleTable"
	  package explicit_return_type ""
	  nparams 2
	    param in name "initialCapacity" explicit_type "int"
	    param in name "loadFactor" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates new HandleTable with given capacity and load factor."
	end

	operation 720667 "assign"
	  package explicit_return_type "int"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Assigns next available handle to given object, and returns handle
value.  Handles are assigned in ascending order starting at 0."
	end

	operation 720795 "lookup"
	  package explicit_return_type "int"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Looks up and returns handle associated with given object, or -1 if
no mapping found."
	end

	operation 720923 "clear"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resets table to its initial (empty) state."
	end

	operation 721051 "size"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the number of mappings currently in table."
	end

	operation 721179 "insert"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "Object"
	    param in name "handle" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Inserts mapping object -> handle mapping into table.  Assumes table
is large enough to accommodate new mapping."
	end

	operation 721307 "growSpine"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Expands the hash \"spine\" -- equivalent to increasing the number of
buckets in a conventional hash table."
	end

	operation 721435 "growEntries"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Increases hash table capacity by lengthening entry arrays."
	end

	operation 721563 "hash"
	  private explicit_return_type "int"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns hash value for given object."
	end
      end

      classrelation 237467 // handles (<unidirectional association>)
	relation 237467 --->
	  a role_name "handles" const_relation private
	    comment " obj -> wire handle map 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 237467 // handles (<unidirectional association>)
	  b parent class_ref 206491 // HandleTable
      end

      class 206619 "ReplaceTable"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 238747 // htab (<unidirectional association>)
	  relation 238747 --->
	    a role_name "htab" const_relation private
	      comment " maps object -> index 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 238747 // htab (<unidirectional association>)
	    b parent class_ref 206491 // HandleTable
	end

	attribute 253595 "reps"
	  private explicit_type "Object"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " maps index -> replacement object "
	end

	operation 721691 "ReplaceTable"
	  package explicit_return_type ""
	  nparams 2
	    param in name "initialCapacity" explicit_type "int"
	    param in name "loadFactor" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates new ReplaceTable with given capacity and load factor."
	end

	operation 721819 "assign"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "Object"
	    param inout name "rep" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Enters mapping from object to replacement object."
	end

	operation 721947 "lookup"
	  package explicit_return_type "Object"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Looks up and returns replacement for given object.  If no
replacement is found, returns the lookup object itself."
	end

	operation 722075 "clear"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resets table to its initial (empty) state."
	end

	operation 722203 "size"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the number of mappings currently in table."
	end

	operation 722331 "grow"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Increases table capacity."
	end
      end

      classrelation 237595 // subs (<unidirectional association>)
	relation 237595 --->
	  a role_name "subs" const_relation private
	    comment " obj -> replacement obj map 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 237595 // subs (<unidirectional association>)
	  b parent class_ref 206619 // ReplaceTable
      end

      attribute 250779 "protocol"
	private explicit_type "int"
	init_value "=  PROTOCOL_VERSION_2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " stream protocol version "
      end

      attribute 250907 "depth"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " recursion depth "
      end

      attribute 251035 "primVals"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " buffer for writing primitive field values "
      end

      attribute 251163 "enableOverride"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " if true, invoke writeObjectOverride() instead of writeObject() "
      end

      attribute 251291 "enableReplace"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " if true, invoke replaceObject() "
      end

      attribute 251419 "curObj"
	private explicit_type "Object"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " values below valid only during upcalls to writeObject()/writeExternal()
 object currently being serialized "
      end

      classrelation 237723 // curDesc (<unidirectional association>)
	relation 237723 --->
	  a role_name "curDesc" private
	    comment " descriptor for current class (null if in writeExternal()) 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 237723 // curDesc (<unidirectional association>)
	  b parent class_ref 202395 // ObjectStreamClass
      end

      class 206747 "PutFieldImpl"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 237979 // <generalisation>
	  relation 237979 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 237979 // <generalisation>
	    b parent class_ref 206875 // PutField
	end

	classrelation 238107 // desc (<unidirectional association>)
	  relation 238107 --->
	    a role_name "desc" const_relation private
	      comment " class descriptor describing serializable fields 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 238107 // desc (<unidirectional association>)
	    b parent class_ref 202395 // ObjectStreamClass
	end

	attribute 251547 "primVals"
	  const_attribute private explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " primitive field values "
	end

	attribute 251675 "objVals"
	  const_attribute private explicit_type "Object"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " object field values "
	end

	operation 714523 "PutFieldImpl"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "desc" type class_ref 202395 // ObjectStreamClass
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates PutFieldImpl object for writing fields defined in given
class descriptor."
	end

	operation 714651 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param inout name "val" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 714779 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "byte"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 714907 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 715035 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "short"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 715163 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 715291 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 715419 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 715547 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 715675 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param inout name "val" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 715803 "write"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "out" type class_ref 205979 // ObjectOutput
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " deprecated in ObjectOutputStream.PutField"
	end

	operation 715931 "writeFields"
	  package explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes buffered primitive data and object fields to stream."
	end

	operation 716059 "getFieldOffset"
	  private explicit_return_type "int"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param inout name "type" type class_ref 164635 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns offset of field with given name and type.  A specified type
of null matches all types, Object.class matches all non-primitive
types, and any other non-null type matches assignable types only.
Throws IllegalArgumentException if no matching field found."
	end
      end

      classrelation 237851 // curPut (<unidirectional association>)
	relation 237851 --->
	  a role_name "curPut" private
	    comment " current PutField object 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 237851 // curPut (<unidirectional association>)
	  b parent class_ref 206747 // PutFieldImpl
      end

      operation 706203 "ObjectOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 183835 // OutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ObjectOutputStream that writes to the specified OutputStream.
This constructor writes the serialization stream header to the
underlying stream; callers may wish to flush the stream immediately to
ensure that constructors for receiving ObjectInputStreams will not block
when reading the header.

<p>If a security manager is installed, this constructor will check for
the \"enableSubclassImplementation\" SerializablePermission when invoked
directly or indirectly by the constructor of a subclass which overrides
the ObjectOutputStream.putFields or ObjectOutputStream.writeUnshared
methods.

@param	out output stream to write to
@throws	IOException if an I/O error occurs while writing stream header
@throws	SecurityException if untrusted subclass illegally overrides
		security-sensitive methods
@throws	NullPointerException if <code>out</code> is <code>null</code>
@see	ObjectOutputStream#ObjectOutputStream()
@see	ObjectOutputStream#putFields()
@see	ObjectInputStream#ObjectInputStream(InputStream)"
      end

      operation 706331 "ObjectOutputStream"
	protected explicit_return_type ""
	nparams 0
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provide a way for subclasses that are completely reimplementing
ObjectOutputStream to not have to allocate private data just used by
this implementation of ObjectOutputStream.

<p>If there is a security manager installed, this method first calls the
security manager's <code>checkPermission</code> method with a
<code>SerializablePermission(\"enableSubclassImplementation\")</code>
permission to ensure it's ok to enable subclassing.

@throws	SecurityException if a security manager exists and its
		<code>checkPermission</code> method denies enabling
		subclassing.
@see SecurityManager#checkPermission
@see java.io.SerializablePermission"
      end

      operation 706459 "useProtocolVersion"
	public explicit_return_type "void"
	nparams 1
	  param in name "version" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specify stream protocol version to use when writing the stream.

<p>This routine provides a hook to enable the current version of
Serialization to write in a format that is backwards compatible to a
previous version of the stream format.

<p>Every effort will be made to avoid introducing additional
backwards incompatibilities; however, sometimes there is no
other alternative.

@param	version use ProtocolVersion from java.io.ObjectStreamConstants.
@throws	IllegalStateException if called after any objects
		have been serialized.
@throws	IllegalArgumentException if invalid version is passed in.
@throws	IOException if I/O errors occur
@see java.io.ObjectStreamConstants#PROTOCOL_VERSION_1
@see java.io.ObjectStreamConstants#PROTOCOL_VERSION_2
@since	1.2"
      end

      operation 706587 "writeObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write the specified object to the ObjectOutputStream.  The class of the
object, the signature of the class, and the values of the non-transient
and non-static fields of the class and all of its supertypes are
written.  Default serialization for a class can be overridden using the
writeObject and the readObject methods.  Objects referenced by this
object are written transitively so that a complete equivalent graph of
objects can be reconstructed by an ObjectInputStream.

<p>Exceptions are thrown for problems with the OutputStream and for
classes that should not be serialized.  All exceptions are fatal to the
OutputStream, which is left in an indeterminate state, and it is up to
the caller to ignore or recover the stream state.

@throws	InvalidClassException Something is wrong with a class used by
		serialization.
@throws	NotSerializableException Some object to be serialized does not
		implement the java.io.Serializable interface.
@throws	IOException Any exception thrown by the underlying
		OutputStream."
      end

      operation 706715 "writeObjectOverride"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method used by subclasses to override the default writeObject method.
This method is called by trusted subclasses of ObjectInputStream that
constructed ObjectInputStream using the protected no-arg constructor.
The subclass is expected to provide an override method with the modifier
\"final\".

@param	obj object to be written to the underlying stream
@throws	IOException if there are I/O errors while writing to the
		underlying stream
@see #ObjectOutputStream()
@see #writeObject(Object)
@since 1.2"
      end

      operation 706843 "writeUnshared"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an \"unshared\" object to the ObjectOutputStream.  This method is
identical to writeObject, except that it always writes the given object
as a new, unique object in the stream (as opposed to a back-reference
pointing to a previously serialized instance).  Specifically:
<ul>
  <li>An object written via writeUnshared is always serialized in the
      same manner as a newly appearing object (an object that has not
      been written to the stream yet), regardless of whether or not the
      object has been written previously.

  <li>If writeObject is used to write an object that has been previously
      written with writeUnshared, the previous writeUnshared operation
      is treated as if it were a write of a separate object.  In other
      words, ObjectOutputStream will never generate back-references to
      object data written by calls to writeUnshared.
</ul>
While writing an object via writeUnshared does not in itself guarantee a
unique reference to the object when it is deserialized, it allows a
single object to be defined multiple times in a stream, so that multiple
calls to readUnshared by the receiver will not conflict.  Note that the
rules described above only apply to the base-level object written with
writeUnshared, and not to any transitively referenced sub-objects in the
object graph to be serialized.

<p>ObjectOutputStream subclasses which override this method can only be
constructed in security contexts possessing the
\"enableSubclassImplementation\" SerializablePermission; any attempt to
instantiate such a subclass without this permission will cause a
SecurityException to be thrown.

@param   obj object to write to stream
@throws  NotSerializableException if an object in the graph to be
         serialized does not implement the Serializable interface
@throws  InvalidClassException if a problem exists with the class of an
         object to be serialized
@throws  IOException if an I/O error occurs during serialization"
      end

      operation 706971 "defaultWriteObject"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write the non-static and non-transient fields of the current class to
this stream.  This may only be called from the writeObject method of the
class being serialized. It will throw the NotActiveException if it is
called otherwise.

@throws	IOException if I/O errors occur while writing to the underlying
		<code>OutputStream</code>"
      end

      class 206875 "PutField"
	abstract visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 710427 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param inout name "val" explicit_type "boolean"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named boolean field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field"
	end

	operation 710555 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "byte"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named byte field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field"
	end

	operation 710683 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "char"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named char field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field"
	end

	operation 710811 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "short"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named short field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field"
	end

	operation 710939 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "int"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named int field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field"
	end

	operation 711067 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "long"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named long field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field"
	end

	operation 711195 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "float"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named float field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field"
	end

	operation 711323 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "val" explicit_type "double"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named double field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field"
	end

	operation 711451 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param in name "name" explicit_type "String"
	    param inout name "val" explicit_type "Object"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named Object field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field"
	end

	operation 711579 "write"
	  abstract public explicit_return_type "void"
	  nparams 1
	    param inout name "out" type class_ref 205979 // ObjectOutput
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Deprecated
"
	  
	  
	  
	  comment "Write the data and fields to the specified ObjectOutput stream.

@param  out the stream to write the data and fields to
@throws IOException if I/O errors occur while writing to the
	   underlying stream
@deprecated This method does not write the values contained by this
	   <code>PutField</code> object in a proper format, and may
	   result in corruption of the serialization stream.  The
	   correct way to write <code>PutField</code> data is by
	   calling the {@link java.io.ObjectOutputStream#writeFields()}
	   method."
	end
      end

      operation 707099 "putFields"
	public return_type class_ref 206875 // PutField
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the object used to buffer persistent fields to be written to
the stream.  The fields will be written to the stream when writeFields
method is called.

@return	an instance of the class Putfield that holds the serializable
		fields
@throws	IOException if I/O errors occur
@since 1.2"
      end

      operation 707227 "writeFields"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write the buffered fields to the stream.

@throws	IOException if I/O errors occur while writing to the underlying
		stream
@throws	NotActiveException Called when a classes writeObject method was
		not called to write the state of the object.
@since 1.2"
      end

      operation 707355 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset will disregard the state of any objects already written to the
stream.  The state is reset to be the same as a new ObjectOutputStream.
The current point in the stream is marked as reset so the corresponding
ObjectInputStream will be reset at the same point.  Objects previously
written to the stream will not be refered to as already being in the
stream.  They will be written to the stream again.

@throws	IOException if reset() is invoked while serializing an object."
      end

      operation 707483 "annotateClass"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subclasses may implement this method to allow class data to be stored in
the stream. By default this method does nothing.  The corresponding
method in ObjectInputStream is resolveClass.  This method is called
exactly once for each unique class in the stream.  The class name and
signature will have already been written to the stream.  This method may
make free use of the ObjectOutputStream to save any representation of
the class it deems suitable (for example, the bytes of the class file).
The resolveClass method in the corresponding subclass of
ObjectInputStream must read and use any data or objects written by
annotateClass.

@param	cl the class to annotate custom data for
@throws	IOException Any exception thrown by the underlying
		OutputStream."
      end

      operation 707611 "annotateProxyClass"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subclasses may implement this method to store custom data in the stream
along with descriptors for dynamic proxy classes.

<p>This method is called exactly once for each unique proxy class
descriptor in the stream.  The default implementation of this method in
<code>ObjectOutputStream</code> does nothing.

<p>The corresponding method in <code>ObjectInputStream</code> is
<code>resolveProxyClass</code>.  For a given subclass of
<code>ObjectOutputStream</code> that overrides this method, the
<code>resolveProxyClass</code> method in the corresponding subclass of
<code>ObjectInputStream</code> must read any data or objects written by
<code>annotateProxyClass</code>.

@param	cl the proxy class to annotate custom data for
@throws	IOException any exception thrown by the underlying
		<code>OutputStream</code>
@see ObjectInputStream#resolveProxyClass(String[])
@since	1.3"
      end

      operation 707739 "replaceObject"
	protected explicit_return_type "Object"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method will allow trusted subclasses of ObjectOutputStream to
substitute one object for another during serialization. Replacing
objects is disabled until enableReplaceObject is called. The
enableReplaceObject method checks that the stream requesting to do
replacement can be trusted.  The first occurrence of each object written
into the serialization stream is passed to replaceObject.  Subsequent
references to the object are replaced by the object returned by the
original call to replaceObject.  To ensure that the private state of
objects is not unintentionally exposed, only trusted streams may use
replaceObject.

<p>The ObjectOutputStream.writeObject method takes a parameter of type
Object (as opposed to type Serializable) to allow for cases where
non-serializable objects are replaced by serializable ones.

<p>When a subclass is replacing objects it must insure that either a
complementary substitution must be made during deserialization or that
the substituted object is compatible with every field where the
reference will be stored.  Objects whose type is not a subclass of the
type of the field or array element abort the serialization by raising an
exception and the object is not be stored.

<p>This method is called only once when each object is first
encountered.  All subsequent references to the object will be redirected
to the new object. This method should return the object to be
substituted or the original object.

<p>Null can be returned as the object to be substituted, but may cause
NullReferenceException in classes that contain references to the
original object since they may be expecting an object instead of
null.

@param	obj the object to be replaced
@return	the alternate object that replaced the specified one
@throws	IOException Any exception thrown by the underlying
		OutputStream."
      end

      operation 707867 "enableReplaceObject"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable the stream to do replacement of objects in the stream.  When
enabled, the replaceObject method is called for every object being
serialized.

<p>If <code>enable</code> is true, and there is a security manager
installed, this method first calls the security manager's
<code>checkPermission</code> method with a
<code>SerializablePermission(\"enableSubstitution\")</code> permission to
ensure it's ok to enable the stream to do replacement of objects in the
stream.

@param	enable boolean parameter to enable replacement of objects
@return	the previous setting before this method was invoked
@throws	SecurityException if a security manager exists and its
		<code>checkPermission</code> method denies enabling the stream
		to do replacement of objects in the stream.
@see SecurityManager#checkPermission
@see java.io.SerializablePermission"
      end

      operation 707995 "writeStreamHeader"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The writeStreamHeader method is provided so subclasses can append or
prepend their own header to the stream.  It writes the magic number and
version to the stream.

@throws	IOException if I/O errors occur while writing to the underlying
		stream"
      end

      operation 708123 "writeClassDescriptor"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "desc" type class_ref 202395 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write the specified class descriptor to the ObjectOutputStream.  Class
descriptors are used to identify the classes of objects written to the
stream.  Subclasses of ObjectOutputStream may override this method to
customize the way in which class descriptors are written to the
serialization stream.  The corresponding method in ObjectInputStream,
<code>readClassDescriptor</code>, should then be overridden to
reconstitute the class descriptor from its custom stream representation.
By default, this method writes class descriptors according to the format
defined in the Object Serialization specification.

<p>Note that this method will only be called if the ObjectOutputStream
is not using the old serialization stream format (set by calling
ObjectOutputStream's <code>useProtocolVersion</code> method).  If this
serialization stream is using the old format
(<code>PROTOCOL_VERSION_1</code>), the class descriptor will be written
internally in a manner that cannot be overridden or customized.

@param	desc class descriptor to write to the stream
@throws	IOException If an I/O error has occurred.
@see java.io.ObjectInputStream#readClassDescriptor()
@see #useProtocolVersion(int)
@see java.io.ObjectStreamConstants#PROTOCOL_VERSION_1
@since 1.3"
      end

      operation 708251 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a byte. This method will block until the byte is actually
written.

@param	val the byte to be written to the stream
@throws	IOException If an I/O error has occurred."
      end

      operation 708379 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "buf" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an array of bytes. This method will block until the bytes are
actually written.

@param	buf the data to be written
@throws	IOException If an I/O error has occurred."
      end

      operation 708507 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "buf" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sub array of bytes.

@param	buf the data to be written
@param	off the start offset in the data
@param	len the number of bytes that are written
@throws	IOException If an I/O error has occurred."
      end

      operation 708635 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the stream. This will write any buffered output bytes and flush
through to the underlying stream.

@throws	IOException If an I/O error has occurred."
      end

      operation 708763 "drain"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Drain any buffered data in ObjectOutputStream.  Similar to flush but
does not propagate the flush to the underlying stream.

@throws	IOException if I/O errors occur while writing to the underlying
		stream"
      end

      operation 708891 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the stream. This method must be called to release any resources
associated with the stream.

@throws	IOException If an I/O error has occurred."
      end

      operation 709019 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "val" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a boolean.

@param	val the boolean to be written
@throws	IOException if I/O errors occur while writing to the underlying
		stream"
      end

      operation 709147 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an 8 bit byte.

@param	val the byte value to be written
@throws	IOException if I/O errors occur while writing to the underlying
		stream"
      end

      operation 709275 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a 16 bit short.

@param	val the short value to be written
@throws	IOException if I/O errors occur while writing to the underlying
		stream"
      end

      operation 709403 "writeChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a 16 bit char.

@param	val the char value to be written
@throws	IOException if I/O errors occur while writing to the underlying
		stream"
      end

      operation 709531 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a 32 bit int.

@param	val the integer value to be written
@throws	IOException if I/O errors occur while writing to the underlying
		stream"
      end

      operation 709659 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a 64 bit long.

@param	val the long value to be written
@throws	IOException if I/O errors occur while writing to the underlying
		stream"
      end

      operation 709787 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "float"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a 32 bit float.

@param	val the float value to be written
@throws	IOException if I/O errors occur while writing to the underlying
		stream"
      end

      operation 709915 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a 64 bit double.

@param	val the double value to be written
@throws	IOException if I/O errors occur while writing to the underlying
		stream"
      end

      operation 710043 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a String as a sequence of bytes.

@param	str the String of bytes to be written
@throws	IOException if I/O errors occur while writing to the underlying
		stream"
      end

      operation 710171 "writeChars"
	public explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a String as a sequence of chars.

@param	str the String of chars to be written
@throws	IOException if I/O errors occur while writing to the underlying
		stream"
      end

      operation 710299 "writeUTF"
	public explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Primitive data write of this String in 
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
format.  Note that there is a
significant difference between writing a String into the stream as
primitive data or as an Object. A String instance written by writeObject
is written into the stream as a String initially. Future writeObject()
calls write references to the string into the stream.

@param	str the String to be written
@throws	IOException if I/O errors occur while writing to the underlying
		stream"
      end

      operation 711707 "getProtocolVersion"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns protocol version in use."
      end

      operation 711835 "writeTypeString"
	package explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes string without allowing it to be replaced in stream.  Used by
ObjectStreamClass to write class descriptor type strings."
      end

      operation 711963 "verifySubclass"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this (possibly subclass) instance can be constructed
without violating security constraints: the subclass must not override
security-sensitive non-final methods, or else the
\"enableSubclassImplementation\" SerializablePermission is checked."
      end

      operation 712091 "auditSubclass"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "subcl" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs reflective checks on given subclass to verify that it doesn't
override security-sensitive non-final methods.  Returns true if subclass
is \"safe\", false otherwise."
      end

      operation 712219 "clear"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears internal data structures."
      end

      operation 712347 "writeObject0"
	private explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Underlying writeObject/writeUnshared implementation."
      end

      operation 712475 "writeNull"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes null code to stream."
      end

      operation 712603 "writeHandle"
	private explicit_return_type "void"
	nparams 1
	  param in name "handle" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes given object handle to stream."
      end

      operation 712731 "writeClass"
	private explicit_return_type "void"
	nparams 2
	  param inout name "cl" type class_ref 164635 // Class
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes representation of given class to stream."
      end

      operation 712859 "writeClassDesc"
	private explicit_return_type "void"
	nparams 2
	  param inout name "desc" type class_ref 202395 // ObjectStreamClass
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes representation of given class descriptor to stream."
      end

      operation 712987 "writeProxyDesc"
	private explicit_return_type "void"
	nparams 2
	  param inout name "desc" type class_ref 202395 // ObjectStreamClass
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes class descriptor representing a dynamic proxy class to stream."
      end

      operation 713115 "writeNonProxyDesc"
	private explicit_return_type "void"
	nparams 2
	  param inout name "desc" type class_ref 202395 // ObjectStreamClass
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes class descriptor representing a standard (i.e., not a dynamic
proxy) class to stream."
      end

      operation 713243 "writeString"
	private explicit_return_type "void"
	nparams 2
	  param in name "str" explicit_type "String"
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes given string to stream, using standard or long UTF format
depending on string length."
      end

      operation 713371 "writeArray"
	private explicit_return_type "void"
	nparams 3
	  param inout name "array" explicit_type "Object"
	  param inout name "desc" type class_ref 202395 // ObjectStreamClass
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes given array object to stream."
      end

      operation 713499 "writeEnum"
	private explicit_return_type "void"
	nparams 3
	  param inout name "en" type class_ref 204187 // Enum
	  param inout name "desc" type class_ref 202395 // ObjectStreamClass
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes given enum constant to stream."
      end

      operation 713627 "writeOrdinaryObject"
	private explicit_return_type "void"
	nparams 3
	  param inout name "obj" explicit_type "Object"
	  param inout name "desc" type class_ref 202395 // ObjectStreamClass
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes representation of a \"ordinary\" (i.e., not a String, Class,
ObjectStreamClass, array, or enum constant) serializable object to the
stream."
      end

      operation 713755 "writeExternalData"
	private explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 204315 // Externalizable
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes externalizable data of given object by invoking its
writeExternal() method."
      end

      operation 713883 "writeSerialData"
	private explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param inout name "desc" type class_ref 202395 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes instance data for each serializable class of given object, from
superclass to subclass."
      end

      operation 714011 "defaultWriteFields"
	private explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param inout name "desc" type class_ref 202395 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fetches and writes values of serializable fields of given object to
stream.  The given class descriptor specifies which field values to
write, and in which order they should be written."
      end

      operation 714139 "writeFatalException"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ex" type class_ref 179355 // IOException
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to write to stream fatal IOException that has caused
serialization to abort."
      end

      operation 714267 "floatsToBytes"
	class_operation private explicit_return_type "void"
	nparams 5
	  param in name "src" explicit_type "float"
	  param in name "srcpos" explicit_type "int"
	  param in name "dst" explicit_type "byte"
	  param in name "dstpos" explicit_type "int"
	  param in name "nfloats" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts specified span of float values into byte values.

 REMIND: remove once hotspot inlines Float.floatToIntBits"
      end

      operation 714395 "doublesToBytes"
	class_operation private explicit_return_type "void"
	nparams 5
	  param in name "src" explicit_type "double"
	  param in name "srcpos" explicit_type "int"
	  param in name "dst" explicit_type "byte"
	  param in name "dstpos" explicit_type "int"
	  param in name "ndoubles" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts specified span of double values into byte values.

 REMIND: remove once hotspot inlines Double.doubleToLongBits"
      end
    end

    class 205595 "ByteArrayOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class implements an output stream in which the data is 
written into a byte array. The buffer automatically grows as data 
is written to it. 
The data can be retrieved using <code>toByteArray()</code> and
<code>toString()</code>.
<p>
Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in
this class can be called after the stream has been closed without
generating an <tt>IOException</tt>.

@author  Arthur van Hoff
@version 1.49, 05/18/04
@since   JDK1.0"
      classrelation 236315 // <generalisation>
	relation 236315 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 236315 // <generalisation>
	  b parent class_ref 183835 // OutputStream
      end

      attribute 250523 "buf"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The buffer where data is stored. 
"
      end

      attribute 250651 "count"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of valid bytes in the buffer. 
"
      end

      operation 701851 "ByteArrayOutputStream"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new byte array output stream. The buffer capacity is 
initially 32 bytes, though its size increases if necessary. "
      end

      operation 701979 "ByteArrayOutputStream"
	public explicit_return_type ""
	nparams 1
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new byte array output stream, with a buffer capacity of 
the specified size, in bytes. 

@param   size   the initial size.
@exception  IllegalArgumentException if size is negative."
      end

      operation 702107 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified byte to this byte array output stream. 

@param   b   the byte to be written."
      end

      operation 702235 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified byte array 
starting at offset <code>off</code> to this byte array output stream.

@param   b     the data.
@param   off   the start offset in the data.
@param   len   the number of bytes to write."
      end

      operation 702363 "writeTo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 183835 // OutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the complete contents of this byte array output stream to 
the specified output stream argument, as if by calling the output 
stream's write method using <code>out.write(buf, 0, count)</code>.

@param      out   the output stream to which to write the data.
@exception  IOException  if an I/O error occurs."
      end

      operation 702491 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the <code>count</code> field of this byte array output 
stream to zero, so that all currently accumulated output in the 
output stream is discarded. The output stream can be used again, 
reusing the already allocated buffer space. 

@see     java.io.ByteArrayInputStream#count"
      end

      operation 702619 "toByteArray"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a newly allocated byte array. Its size is the current 
size of this output stream and the valid contents of the buffer 
have been copied into it. 

@return  the current contents of this output stream, as a byte array.
@see     java.io.ByteArrayOutputStream#size()"
      end

      operation 702747 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current size of the buffer.

@return  the value of the <code>count</code> field, which is the number
         of valid bytes in this output stream.
@see     java.io.ByteArrayOutputStream#count"
      end

      operation 702875 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the buffer's contents into a string, translating bytes into
characters according to the platform's default character encoding.

@return String translated from the buffer's contents.
@since   JDK1.1"
      end

      operation 703003 "toString"
	public explicit_return_type "String"
	nparams 1
	  param in name "enc" explicit_type "String"
	nexceptions 1
	  exception class_ref 205723 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the buffer's contents into a string, translating bytes into
characters according to the specified character encoding.

@param   enc  a character-encoding name.
@return String translated from the buffer's contents.
@throws UnsupportedEncodingException
        If the named encoding is not supported.
@since   JDK1.1"
      end

      operation 703131 "toString"
	public explicit_return_type "String"
	nparams 1
	  param in name "hibyte" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Creates a newly allocated string. Its size is the current size of 
the output stream and the valid contents of the buffer have been 
copied into it. Each character <i>c</i> in the resulting string is 
constructed from the corresponding element <i>b</i> in the byte 
array such that:
<blockquote><pre>
    c == (char)(((hibyte &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))
</pre></blockquote>

@deprecated This method does not properly convert bytes into characters.
As of JDK&nbsp;1.1, the preferred way to do this is via the
<code>toString(String enc)</code> method, which takes an encoding-name
argument, or the <code>toString()</code> method, which uses the
platform's default character encoding.

@param      hibyte    the high byte of each resulting Unicode character.
@return     the current contents of the output stream, as a string.
@see        java.io.ByteArrayOutputStream#size()
@see        java.io.ByteArrayOutputStream#toString(String)
@see        java.io.ByteArrayOutputStream#toString()"
      end

      operation 703259 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in
this class can be called after the stream has been closed without
generating an <tt>IOException</tt>.
<p>
"
      end
    end

    class 205723 "UnsupportedEncodingException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The Character Encoding is not supported.

@author  Asmus Freytag
@version 1.16, 12/19/03
@since   JDK1.1"
      classrelation 1770139 // <generalisation>
	relation 1770139 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1770139 // <generalisation>
	  b parent class_ref 179355 // IOException
      end

      operation 6914203 "UnsupportedEncodingException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an UnsupportedEncodingException without a detail message."
      end

      operation 6914331 "UnsupportedEncodingException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an UnsupportedEncodingException with a detail message.
@param s Describes the reason for the exception."
      end
    end

    class 205979 "ObjectOutput"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "ObjectOutput extends the DataOutput interface to include writing of objects.
DataOutput includes methods for output of primitive types, ObjectOutput
extends that interface to include objects, arrays, and Strings.

@author  unascribed
@version 1.16, 12/19/03
@see java.io.InputStream
@see java.io.ObjectOutputStream
@see java.io.ObjectInputStream
@since   JDK1.1"
      classrelation 236699 // <generalisation>
	relation 236699 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 236699 // <generalisation>
	  b parent class_ref 206107 // DataOutput
      end

      operation 705435 "writeObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write an object to the underlying storage or stream.  The
class that implements this interface defines how the object is
written.

@param obj the object to be written
@exception IOException Any of the usual Input/Output related exceptions."
      end

      operation 705563 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a byte. This method will block until the byte is actually
written.
@param b	the byte
@exception IOException If an I/O error has occurred."
      end

      operation 705691 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an array of bytes. This method will block until the bytes
are actually written.
@param b	the data to be written
@exception IOException If an I/O error has occurred."
      end

      operation 705819 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sub array of bytes.
@param b	the data to be written
@param off	the start offset in the data
@param len	the number of bytes that are written
@exception IOException If an I/O error has occurred."
      end

      operation 705947 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the stream. This will write any buffered
output bytes.
@exception IOException If an I/O error has occurred."
      end

      operation 706075 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the stream. This method must be called
to release any resources associated with the
stream.
@exception IOException If an I/O error has occurred."
      end
    end

    class 206107 "DataOutput"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>DataOutput</code> interface provides
for converting data from any of the Java
primitive types to a series of bytes and
writing these bytes to a binary stream.
There is  also a facility for converting
a <code>String</code> into
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
format and writing the resulting series
of bytes.
<p>
For all the methods in this interface that
write bytes, it is generally true that if
a byte cannot be written for any reason,
an <code>IOException</code> is thrown.

@author  Frank Yellin
@version 1.21, 05/13/04
@see     java.io.DataInput
@see     java.io.DataOutputStream
@since   JDK1.0"
      operation 703643 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes to the output stream the eight
low-order bits of the argument <code>b</code>.
The 24 high-order  bits of <code>b</code>
are ignored.

@param      b   the byte to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 703771 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes to the output stream all the bytes in array <code>b</code>.
If <code>b</code> is <code>null</code>,
a <code>NullPointerException</code> is thrown.
If <code>b.length</code> is zero, then
no bytes are written. Otherwise, the byte
<code>b[0]</code> is written first, then
<code>b[1]</code>, and so on; the last byte
written is <code>b[b.length-1]</code>.

@param      b   the data.
@exception  IOException  if an I/O error occurs."
      end

      operation 703899 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from array
<code>b</code>, in order,  to
the output stream.  If <code>b</code>
is <code>null</code>, a <code>NullPointerException</code>
is thrown.  If <code>off</code> is negative,
or <code>len</code> is negative, or <code>off+len</code>
is greater than the length of the array
<code>b</code>, then an <code>IndexOutOfBoundsException</code>
is thrown.  If <code>len</code> is zero,
then no bytes are written. Otherwise, the
byte <code>b[off]</code> is written first,
then <code>b[off+1]</code>, and so on; the
last byte written is <code>b[off+len-1]</code>.

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@exception  IOException  if an I/O error occurs."
      end

      operation 704027 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>boolean</code> value to this output stream.
If the argument <code>v</code>
is <code>true</code>, the value <code>(byte)1</code>
is written; if <code>v</code> is <code>false</code>,
the  value <code>(byte)0</code> is written.
The byte written by this method may
be read by the <code>readBoolean</code>
method of interface <code>DataInput</code>,
which will then return a <code>boolean</code>
equal to <code>v</code>.

@param      v   the boolean to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 704155 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes to the output stream the eight low-
order bits of the argument <code>v</code>.
The 24 high-order bits of <code>v</code>
are ignored. (This means  that <code>writeByte</code>
does exactly the same thing as <code>write</code>
for an integer argument.) The byte written
by this method may be read by the <code>readByte</code>
method of interface <code>DataInput</code>,
which will then return a <code>byte</code>
equal to <code>(byte)v</code>.

@param      v   the byte value to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 704283 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes two bytes to the output
stream to represent the value of the argument.
The byte values to be written, in the  order
shown, are: <p>
<pre><code>
(byte)(0xff &amp; (v &gt;&gt; 8))
(byte)(0xff &amp; v)
</code> </pre> <p>
The bytes written by this method may be
read by the <code>readShort</code> method
of interface <code>DataInput</code> , which
will then return a <code>short</code> equal
to <code>(short)v</code>.

@param      v   the <code>short</code> value to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 704411 "writeChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>char</code> value, which
is comprised of two bytes, to the
output stream.
The byte values to be written, in the  order
shown, are:
<p><pre><code>
(byte)(0xff &amp; (v &gt;&gt; 8))
(byte)(0xff &amp; v)
</code></pre><p>
The bytes written by this method may be
read by the <code>readChar</code> method
of interface <code>DataInput</code> , which
will then return a <code>char</code> equal
to <code>(char)v</code>.

@param      v   the <code>char</code> value to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 704539 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an <code>int</code> value, which is
comprised of four bytes, to the output stream.
The byte values to be written, in the  order
shown, are:
<p><pre><code>
(byte)(0xff &amp; (v &gt;&gt; 24))
(byte)(0xff &amp; (v &gt;&gt; 16))
(byte)(0xff &amp; (v &gt;&gt; &#32; &#32;8))
(byte)(0xff &amp; v)
</code></pre><p>
The bytes written by this method may be read
by the <code>readInt</code> method of interface
<code>DataInput</code> , which will then
return an <code>int</code> equal to <code>v</code>.

@param      v   the <code>int</code> value to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 704667 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>long</code> value, which is
comprised of eight bytes, to the output stream.
The byte values to be written, in the  order
shown, are:
<p><pre><code>
(byte)(0xff &amp; (v &gt;&gt; 56))
(byte)(0xff &amp; (v &gt;&gt; 48))
(byte)(0xff &amp; (v &gt;&gt; 40))
(byte)(0xff &amp; (v &gt;&gt; 32))
(byte)(0xff &amp; (v &gt;&gt; 24))
(byte)(0xff &amp; (v &gt;&gt; 16))
(byte)(0xff &amp; (v &gt;&gt;  8))
(byte)(0xff &amp; v)
</code></pre><p>
The bytes written by this method may be
read by the <code>readLong</code> method
of interface <code>DataInput</code> , which
will then return a <code>long</code> equal
to <code>v</code>.

@param      v   the <code>long</code> value to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 704795 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "float"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>float</code> value,
which is comprised of four bytes, to the output stream.
It does this as if it first converts this
<code>float</code> value to an <code>int</code>
in exactly the manner of the <code>Float.floatToIntBits</code>
method  and then writes the <code>int</code>
value in exactly the manner of the  <code>writeInt</code>
method.  The bytes written by this method
may be read by the <code>readFloat</code>
method of interface <code>DataInput</code>,
which will then return a <code>float</code>
equal to <code>v</code>.

@param      v   the <code>float</code> value to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 704923 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "double"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>double</code> value,
which is comprised of eight bytes, to the output stream.
It does this as if it first converts this
<code>double</code> value to a <code>long</code>
in exactly the manner of the <code>Double.doubleToLongBits</code>
method  and then writes the <code>long</code>
value in exactly the manner of the  <code>writeLong</code>
method. The bytes written by this method
may be read by the <code>readDouble</code>
method of interface <code>DataInput</code>,
which will then return a <code>double</code>
equal to <code>v</code>.

@param      v   the <code>double</code> value to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 705051 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string to the output stream.
For every character in the string
<code>s</code>,  taken in order, one byte
is written to the output stream.  If
<code>s</code> is <code>null</code>, a <code>NullPointerException</code>
is thrown.<p>  If <code>s.length</code>
is zero, then no bytes are written. Otherwise,
the character <code>s[0]</code> is written
first, then <code>s[1]</code>, and so on;
the last character written is <code>s[s.length-1]</code>.
For each character, one byte is written,
the low-order byte, in exactly the manner
of the <code>writeByte</code> method . The
high-order eight bits of each character
in the string are ignored.

@param      s   the string of bytes to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 705179 "writeChars"
	public explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes every character in the string <code>s</code>,
to the output stream, in order,
two bytes per character. If <code>s</code>
is <code>null</code>, a <code>NullPointerException</code>
is thrown.  If <code>s.length</code>
is zero, then no characters are written.
Otherwise, the character <code>s[0]</code>
is written first, then <code>s[1]</code>,
and so on; the last character written is
<code>s[s.length-1]</code>. For each character,
two bytes are actually written, high-order
byte first, in exactly the manner of the
<code>writeChar</code> method.

@param      s   the string value to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 705307 "writeUTF"
	public explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes two bytes of length information
to the output stream, followed
by the
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
representation
of  every character in the string <code>s</code>.
If <code>s</code> is <code>null</code>,
a <code>NullPointerException</code> is thrown.
Each character in the string <code>s</code>
is converted to a group of one, two, or
three bytes, depending on the value of the
character.<p>
If a character <code>c</code>
is in the range <code>&#92;u0001</code> through
<code>&#92;u007f</code>, it is represented
by one byte:<p>
<pre>(byte)c </pre>  <p>
If a character <code>c</code> is <code>&#92;u0000</code>
or is in the range <code>&#92;u0080</code>
through <code>&#92;u07ff</code>, then it is
represented by two bytes, to be written
in the order shown:<p> <pre><code>
(byte)(0xc0 | (0x1f &amp; (c &gt;&gt; 6)))
(byte)(0x80 | (0x3f &amp; c))
 </code></pre>  <p> If a character
<code>c</code> is in the range <code>&#92;u0800</code>
through <code>uffff</code>, then it is
represented by three bytes, to be written
in the order shown:<p> <pre><code>
(byte)(0xe0 | (0x0f &amp; (c &gt;&gt; 12)))
(byte)(0x80 | (0x3f &amp; (c &gt;&gt;  6)))
(byte)(0x80 | (0x3f &amp; c))
 </code></pre>  <p> First,
the total number of bytes needed to represent
all the characters of <code>s</code> is
calculated. If this number is larger than
<code>65535</code>, then a <code>UTFDataFormatException</code>
is thrown. Otherwise, this length is written
to the output stream in exactly the manner
of the <code>writeShort</code> method;
after this, the one-, two-, or three-byte
representation of each character in the
string <code>s</code> is written.<p>  The
bytes written by this method may be read
by the <code>readUTF</code> method of interface
<code>DataInput</code> , which will then
return a <code>String</code> equal to <code>s</code>.

@param      str   the string value to be written.
@exception  IOException  if an I/O error occurs."
      end
    end

    class 207003 "DataOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A data output stream lets an application write primitive Java data 
types to an output stream in a portable way. An application can 
then use a data input stream to read the data back in. 

@author  unascribed
@version 1.43, 05/13/04
@see     java.io.DataInputStream
@since   JDK1.0"
      classrelation 1756315 // <generalisation>
	relation 1756315 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1756315 // <generalisation>
	  b parent class_ref 903195 // FilterOutputStream
      end

      classrelation 1756443 // <realization>
	relation 1756443 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1756443 // <realization>
	  b parent class_ref 206107 // DataOutput
      end

      attribute 2699547 "written"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of bytes written to the data output stream so far. 
If this counter overflows, it will be wrapped to Integer.MAX_VALUE.
"
      end

      attribute 2699675 "bytearr"
	private explicit_type "byte"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "bytearr is initialized on demand by writeUTF
"
      end

      operation 6836891 "DataOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 183835 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new data output stream to write data to the specified 
underlying output stream. The counter <code>written</code> is 
set to zero.

@param   out   the underlying output stream, to be saved for later 
               use.
@see     java.io.FilterOutputStream#out"
      end

      operation 6837019 "incCount"
	private explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increases the written counter by the specified value
until it reaches Integer.MAX_VALUE."
      end

      operation 6837147 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified byte (the low eight bits of the argument 
<code>b</code>) to the underlying output stream. If no exception 
is thrown, the counter <code>written</code> is incremented by 
<code>1</code>.
<p>
Implements the <code>write</code> method of <code>OutputStream</code>.

@param      b   the <code>byte</code> to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out"
      end

      operation 6837275 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified byte array 
starting at offset <code>off</code> to the underlying output stream. 
If no exception is thrown, the counter <code>written</code> is 
incremented by <code>len</code>.

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out"
      end

      operation 6837403 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this data output stream. This forces any buffered output 
bytes to be written out to the stream. 
<p>
The <code>flush</code> method of <code>DataOutputStream</code>
calls the <code>flush</code> method of its underlying output stream.

@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
@see        java.io.OutputStream#flush()"
      end

      operation 6837531 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>boolean</code> to the underlying output stream as 
a 1-byte value. The value <code>true</code> is written out as the 
value <code>(byte)1</code>; the value <code>false</code> is 
written out as the value <code>(byte)0</code>. If no exception is 
thrown, the counter <code>written</code> is incremented by 
<code>1</code>.

@param      v   a <code>boolean</code> value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out"
      end

      operation 6837659 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes out a <code>byte</code> to the underlying output stream as 
a 1-byte value. If no exception is thrown, the counter 
<code>written</code> is incremented by <code>1</code>.

@param      v   a <code>byte</code> value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out"
      end

      operation 6837787 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>short</code> to the underlying output stream as two
bytes, high byte first. If no exception is thrown, the counter 
<code>written</code> is incremented by <code>2</code>.

@param      v   a <code>short</code> to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out"
      end

      operation 6837915 "writeChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>char</code> to the underlying output stream as a 
2-byte value, high byte first. If no exception is thrown, the 
counter <code>written</code> is incremented by <code>2</code>.

@param      v   a <code>char</code> value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out"
      end

      operation 6838043 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an <code>int</code> to the underlying output stream as four
bytes, high byte first. If no exception is thrown, the counter 
<code>written</code> is incremented by <code>4</code>.

@param      v   an <code>int</code> to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out"
      end

      attribute 2699803 "writeBuffer"
	private explicit_type "byte"
	multiplicity "[]"
	init_value "=  new byte[8]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6838171 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>long</code> to the underlying output stream as eight
bytes, high byte first. In no exception is thrown, the counter 
<code>written</code> is incremented by <code>8</code>.

@param      v   a <code>long</code> to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out"
      end

      operation 6838299 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "float"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the float argument to an <code>int</code> using the 
<code>floatToIntBits</code> method in class <code>Float</code>, 
and then writes that <code>int</code> value to the underlying 
output stream as a 4-byte quantity, high byte first. If no 
exception is thrown, the counter <code>written</code> is 
incremented by <code>4</code>.

@param      v   a <code>float</code> value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
@see        java.lang.Float#floatToIntBits(float)"
      end

      operation 6838427 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "double"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the double argument to a <code>long</code> using the 
<code>doubleToLongBits</code> method in class <code>Double</code>, 
and then writes that <code>long</code> value to the underlying 
output stream as an 8-byte quantity, high byte first. If no 
exception is thrown, the counter <code>written</code> is 
incremented by <code>8</code>.

@param      v   a <code>double</code> value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
@see        java.lang.Double#doubleToLongBits(double)"
      end

      operation 6838555 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes out the string to the underlying output stream as a 
sequence of bytes. Each character in the string is written out, in 
sequence, by discarding its high eight bits. If no exception is 
thrown, the counter <code>written</code> is incremented by the 
length of <code>s</code>.

@param      s   a string of bytes to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out"
      end

      operation 6838683 "writeChars"
	public explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string to the underlying output stream as a sequence of 
characters. Each character is written to the data output stream as 
if by the <code>writeChar</code> method. If no exception is 
thrown, the counter <code>written</code> is incremented by twice 
the length of <code>s</code>.

@param      s   a <code>String</code> value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.DataOutputStream#writeChar(int)
@see        java.io.FilterOutputStream#out"
      end

      operation 6838811 "writeUTF"
	public explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string to the underlying output stream using
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
encoding in a machine-independent manner. 
<p>
First, two bytes are written to the output stream as if by the 
<code>writeShort</code> method giving the number of bytes to 
follow. This value is the number of bytes actually written out, 
not the length of the string. Following the length, each character 
of the string is output, in sequence, using the modified UTF-8 encoding
for the character. If no exception is thrown, the counter 
<code>written</code> is incremented by the total number of 
bytes written to the output stream. This will be at least two 
plus the length of <code>str</code>, and at most two plus 
thrice the length of <code>str</code>.

@param      str   a string to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 6838939 "writeUTF"
	class_operation package explicit_return_type "int"
	nparams 2
	  param in name "str" explicit_type "String"
	  param inout name "out" type class_ref 206107 // DataOutput
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string to the specified DataOutput using
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
encoding in a machine-independent manner. 
<p>
First, two bytes are written to out as if by the <code>writeShort</code>
method giving the number of bytes to follow. This value is the number of
bytes actually written out, not the length of the string. Following the
length, each character of the string is output, in sequence, using the
modified UTF-8 encoding for the character. If no exception is thrown, the
counter <code>written</code> is incremented by the total number of 
bytes written to the output stream. This will be at least two 
plus the length of <code>str</code>, and at most two plus 
thrice the length of <code>str</code>.

@param      str   a string to be written.
@param      out   destination to write to
@return     The number of bytes written out.
@exception  IOException  if an I/O error occurs."
      end

      operation 6839067 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the counter <code>written</code>, 
the number of bytes written to this data output stream so far.
If the counter overflows, it will be wrapped to Integer.MAX_VALUE.

@return  the value of the <code>written</code> field.
@see     java.io.DataOutputStream#written"
      end
    end

    class 216987 "InvalidClassException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when the Serialization runtime detects one of the following
problems with a Class.
<UL>
<LI> The serial version of the class does not match that of the class
     descriptor read from the stream
<LI> The class contains unknown datatypes
<LI> The class does not have an accessible no-arg constructor
</UL>

@author  unascribed
@version 1.20, 12/19/03
@since   JDK1.1"
      classrelation 1760027 // <generalisation>
	relation 1760027 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1760027 // <generalisation>
	  b parent class_ref 289307 // ObjectStreamException
      end

      attribute 2705435 "classname"
	public explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Name of the invalid class.

@serial Name of the invalid class.
"
      end

      operation 6863515 "InvalidClassException"
	public explicit_return_type ""
	nparams 1
	  param in name "reason" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report a InvalidClassException for the reason specified.

@param reason  String describing the reason for the exception."
      end

      operation 6863643 "InvalidClassException"
	public explicit_return_type ""
	nparams 2
	  param in name "cname" explicit_type "String"
	  param in name "reason" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an InvalidClassException object.

@param cname   a String naming the invalid class.
@param reason  a String describing the reason for the exception."
      end

      operation 6863771 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce the message and include the classname, if present."
      end
    end

    class 221595 "PrintWriter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Print formatted representations of objects to a text-output stream.  This
class implements all of the <tt>print</tt> methods found in {@link
PrintStream}.  It does not contain methods for writing raw bytes, for which
a program should use unencoded byte streams.

<p> Unlike the {@link PrintStream} class, if automatic flushing is enabled
it will be done only when one of the <tt>println</tt>, <tt>printf</tt>, or
<tt>format</tt> methods is invoked, rather than whenever a newline character
happens to be output.  These methods use the platform's own notion of line
separator rather than the newline character.

<p> Methods in this class never throw I/O exceptions, although some of its
constructors may.  The client may inquire as to whether any errors have
occurred by invoking {@link #checkError checkError()}.

@version 	1.37, 07/16/04
@author	Frank Yellin
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 1767323 // <generalisation>
	relation 1767323 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1767323 // <generalisation>
	  b parent class_ref 446619 // Writer
      end

      classrelation 1767451 // out (<unidirectional association>)
	relation 1767451 --->
	  a role_name "out" protected
	    comment "
The underlying character-output stream of this
<code>PrintWriter</code>.

@since 1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1767451 // out (<unidirectional association>)
	  b parent class_ref 446619 // Writer
      end

      attribute 2713115 "autoFlush"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2713243 "trouble"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1767579 // formatter (<unidirectional association>)
	relation 1767579 --->
	  a role_name "formatter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1767579 // formatter (<unidirectional association>)
	  b parent class_ref 147739 // Formatter
      end

      attribute 2713371 "lineSeparator"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Line separator string.  This is the value of the line.separator
property at the moment that the stream was created.
"
      end

      operation 6891163 "PrintWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 446619 // Writer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new PrintWriter, without automatic line flushing.

@param  out        A character-output stream"
      end

      operation 6891291 "PrintWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 446619 // Writer
	  param inout name "autoFlush" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new PrintWriter.

@param  out        A character-output stream
@param  autoFlush  A boolean; if true, the <tt>println</tt>,
                   <tt>printf</tt>, or <tt>format</tt> methods will
                   flush the output buffer"
      end

      operation 6891419 "PrintWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 183835 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new PrintWriter, without automatic line flushing, from an
existing OutputStream.  This convenience constructor creates the
necessary intermediate OutputStreamWriter, which will convert characters
into bytes using the default character encoding.

@param  out        An output stream

@see java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)"
      end

      operation 6891547 "PrintWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 183835 // OutputStream
	  param inout name "autoFlush" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new PrintWriter from an existing OutputStream.  This
convenience constructor creates the necessary intermediate
OutputStreamWriter, which will convert characters into bytes using the
default character encoding.

@param  out        An output stream
@param  autoFlush  A boolean; if true, the <tt>println</tt>,
                   <tt>printf</tt>, or <tt>format</tt> methods will
                   flush the output buffer

@see java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)"
      end

      operation 6891675 "PrintWriter"
	public explicit_return_type ""
	nparams 1
	  param in name "fileName" explicit_type "String"
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PrintWriter, without automatic line flushing, with the
specified file name.  This convenience constructor creates the necessary
intermediate {@link java.io.OutputStreamWriter OutputStreamWriter},
which will encode characters using the {@linkplain
java.nio.charset.Charset#defaultCharset default charset} for this
instance of the Java virtual machine.

@param  fileName
        The name of the file to use as the destination of this writer.
        If the file exists then it will be truncated to zero size;
        otherwise, a new file will be created.  The output will be
        written to the file and is buffered.

@throws  FileNotFoundException
         If the given string does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(fileName)} denies write
         access to the file

@since  1.5"
      end

      operation 6891803 "PrintWriter"
	public explicit_return_type ""
	nparams 2
	  param in name "fileName" explicit_type "String"
	  param in name "csn" explicit_type "String"
	nexceptions 2
	  exception class_ref 509851 // FileNotFoundException
	  exception class_ref 205723 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PrintWriter, without automatic line flushing, with the
specified file name and charset.  This convenience constructor creates
the necessary intermediate {@link java.io.OutputStreamWriter
OutputStreamWriter}, which will encode characters using the provided
charset.

@param  fileName
        The name of the file to use as the destination of this writer.
        If the file exists then it will be truncated to zero size;
        otherwise, a new file will be created.  The output will be
        written to the file and is buffered.

@param  csn
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@throws  FileNotFoundException
         If the given string does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(fileName)} denies write
         access to the file

@throws  UnsupportedEncodingException
         If the named charset is not supported

@since  1.5"
      end

      operation 6891931 "PrintWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 165147 // File
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PrintWriter, without automatic line flushing, with the
specified file.  This convenience constructor creates the necessary
intermediate {@link java.io.OutputStreamWriter OutputStreamWriter},
which will encode characters using the {@linkplain
java.nio.charset.Charset#defaultCharset default charset} for this
instance of the Java virtual machine.

@param  file
        The file to use as the destination of this writer.  If the file
        exists then it will be truncated to zero size; otherwise, a new
        file will be created.  The output will be written to the file
        and is buffered.

@throws  FileNotFoundException
         If the given file object does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(file.getPath())}
         denies write access to the file

@since  1.5"
      end

      operation 6892059 "PrintWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" type class_ref 165147 // File
	  param in name "csn" explicit_type "String"
	nexceptions 2
	  exception class_ref 509851 // FileNotFoundException
	  exception class_ref 205723 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PrintWriter, without automatic line flushing, with the
specified file and charset.  This convenience constructor creates the
necessary intermediate {@link java.io.OutputStreamWriter
OutputStreamWriter}, which will encode characters using the provided
charset.

@param  file
        The file to use as the destination of this writer.  If the file
        exists then it will be truncated to zero size; otherwise, a new
        file will be created.  The output will be written to the file
        and is buffered.

@param  csn
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@throws  FileNotFoundException
         If the given file object does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(file.getPath())}
         denies write access to the file

@throws  UnsupportedEncodingException
         If the named charset is not supported

@since  1.5"
      end

      operation 6892187 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check to make sure that the stream has not been closed "
      end

      operation 6892315 "flush"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush the stream.
@see #checkError()"
      end

      operation 6892443 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the stream.
@see #checkError()"
      end

      operation 6892571 "checkError"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush the stream if it's not closed and check its error state.
Errors are cumulative; once the stream encounters an error, this
routine will return true on all successive calls.

@return True if the print stream has encountered an error, either on the
underlying output stream or during a format conversion."
      end

      operation 6892699 "setError"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Indicate that an error has occurred. "
      end

      operation 6892827 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exception-catching, synchronized output operations,
which also implement the write() methods of Writer


Write a single character.
@param c int specifying a character to be written."
      end

      operation 6892955 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "buf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write A Portion of an array of characters.
@param buf Array of characters
@param off Offset from which to start writing characters
@param len Number of characters to write"
      end

      operation 6893083 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "buf" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write an array of characters.  This method cannot be inherited from the
Writer class because it must suppress I/O exceptions.
@param buf Array of characters to be written"
      end

      operation 6893211 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "s" explicit_type "String"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a portion of a string.
@param s A String
@param off Offset from which to start writing characters
@param len Number of characters to write"
      end

      operation 6893339 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a string.  This method cannot be inherited from the Writer class
because it must suppress I/O exceptions.
@param s String to be written"
      end

      operation 6893467 "newLine"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6893595 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Methods that do not terminate lines 

Print a boolean value.  The string produced by <code>{@link
java.lang.String#valueOf(boolean)}</code> is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the <code>{@link
#write(int)}</code> method.

@param      b   The <code>boolean</code> to be printed"
      end

      operation 6893723 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a character.  The character is translated into one or more bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the <code>{@link
#write(int)}</code> method.

@param      c   The <code>char</code> to be printed"
      end

      operation 6893851 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print an integer.  The string produced by <code>{@link
java.lang.String#valueOf(int)}</code> is translated into bytes according
to the platform's default character encoding, and these bytes are
written in exactly the manner of the <code>{@link #write(int)}</code>
method.

@param      i   The <code>int</code> to be printed
@see        java.lang.Integer#toString(int)"
      end

      operation 6893979 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "l" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a long integer.  The string produced by <code>{@link
java.lang.String#valueOf(long)}</code> is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the <code>{@link #write(int)}</code>
method.

@param      l   The <code>long</code> to be printed
@see        java.lang.Long#toString(long)"
      end

      operation 6894107 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a floating-point number.  The string produced by <code>{@link
java.lang.String#valueOf(float)}</code> is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the <code>{@link #write(int)}</code>
method.

@param      f   The <code>float</code> to be printed
@see        java.lang.Float#toString(float)"
      end

      operation 6894235 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a double-precision floating-point number.  The string produced by
<code>{@link java.lang.String#valueOf(double)}</code> is translated into
bytes according to the platform's default character encoding, and these
bytes are written in exactly the manner of the <code>{@link
#write(int)}</code> method.

@param      d   The <code>double</code> to be printed
@see        java.lang.Double#toString(double)"
      end

      operation 6894363 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print an array of characters.  The characters are converted into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the <code>{@link #write(int)}</code>
method.

@param      s   The array of chars to be printed

@throws  NullPointerException  If <code>s</code> is <code>null</code>"
      end

      operation 6894491 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a string.  If the argument is <code>null</code> then the string
<code>\"null\"</code> is printed.  Otherwise, the string's characters are
converted into bytes according to the platform's default character
encoding, and these bytes are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      s   The <code>String</code> to be printed"
      end

      operation 6894619 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print an object.  The string produced by the <code>{@link
java.lang.String#valueOf(Object)}</code> method is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the <code>{@link #write(int)}</code>
method.

@param      obj   The <code>Object</code> to be printed
@see        java.lang.Object#toString()"
      end

      operation 6894747 "println"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Methods that do terminate lines 

Terminate the current line by writing the line separator string.  The
line separator string is defined by the system property
<code>line.separator</code>, and is not necessarily a single newline
character (<code>'\\n'</code>)."
      end

      operation 6894875 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a boolean value and then terminate the line.  This method behaves
as though it invokes <code>{@link #print(boolean)}</code> and then
<code>{@link #println()}</code>.

@param x the <code>boolean</code> value to be printed"
      end

      operation 6895003 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a character and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(char)}</code> and then <code>{@link
#println()}</code>.

@param x the <code>char</code> value to be printed"
      end

      operation 6895131 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print an integer and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(int)}</code> and then <code>{@link
#println()}</code>.

@param x the <code>int</code> value to be printed"
      end

      operation 6895259 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a long integer and then terminate the line.  This method behaves
as though it invokes <code>{@link #print(long)}</code> and then
<code>{@link #println()}</code>.

@param x the <code>long</code> value to be printed"
      end

      operation 6895387 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a floating-point number and then terminate the line.  This method
behaves as though it invokes <code>{@link #print(float)}</code> and then
<code>{@link #println()}</code>.

@param x the <code>float</code> value to be printed"
      end

      operation 6895515 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a double-precision floating-point number and then terminate the
line.  This method behaves as though it invokes <code>{@link
#print(double)}</code> and then <code>{@link #println()}</code>.

@param x the <code>double</code> value to be printed"
      end

      operation 6895643 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print an array of characters and then terminate the line.  This method
behaves as though it invokes <code>{@link #print(char[])}</code> and then
<code>{@link #println()}</code>.

@param x the array of <code>char</code> values to be printed"
      end

      operation 6895771 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a String and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(String)}</code> and then
<code>{@link #println()}</code>.

@param x the <code>String</code> value to be printed"
      end

      operation 6895899 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print an Object and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(Object)}</code> and then
<code>{@link #println()}</code>.

@param x the <code>Object</code> value to be printed"
      end

      operation 6896027 "printf"
	public return_type class_ref 221595 // PrintWriter
	nparams 2
	  param in name "format" explicit_type "String"
	  param inout name "args" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to write a formatted string to this writer using
the specified format string and arguments.  If automatic flushing is
enabled, calls to this method will flush the output buffer.

<p> An invocation of this method of the form <tt>out.printf(format,
args)</tt> behaves in exactly the same way as the invocation

<pre>
    out.format(format, args) </pre>

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>.

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        the <a href=\"http://java.sun.com/docs/books/vmspec/\">Java
        Virtual Machine Specification</a>.  The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This writer

@since  1.5"
      end

      operation 6896155 "printf"
	public return_type class_ref 221595 // PrintWriter
	nparams 3
	  param inout name "l" type class_ref 138907 // Locale
	  param in name "format" explicit_type "String"
	  param inout name "args" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to write a formatted string to this writer using
the specified format string and arguments.  If automatic flushing is
enabled, calls to this method will flush the output buffer.

<p> An invocation of this method of the form <tt>out.printf(l, format,
args)</tt> behaves in exactly the same way as the invocation

<pre>
    out.format(l, format, args) </pre>

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied.

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>.

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        the <a href=\"http://java.sun.com/docs/books/vmspec/\">Java
        Virtual Machine Specification</a>.  The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This writer

@since  1.5"
      end

      operation 6896283 "format"
	public return_type class_ref 221595 // PrintWriter
	nparams 2
	  param in name "format" explicit_type "String"
	  param inout name "args" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a formatted string to this writer using the specified format
string and arguments.  If automatic flushing is enabled, calls to this
method will flush the output buffer.

<p> The locale always used is the one returned by {@link
java.util.Locale#getDefault() Locale.getDefault()}, regardless of any
previous invocations of other formatting methods on this object.

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>.

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        the <a href=\"http://java.sun.com/docs/books/vmspec/\">Java
        Virtual Machine Specification</a>.  The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         Formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This writer

@since  1.5"
      end

      operation 6896411 "format"
	public return_type class_ref 221595 // PrintWriter
	nparams 3
	  param inout name "l" type class_ref 138907 // Locale
	  param in name "format" explicit_type "String"
	  param inout name "args" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a formatted string to this writer using the specified format
string and arguments.  If automatic flushing is enabled, calls to this
method will flush the output buffer.

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied.

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>.

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        the <a href=\"http://java.sun.com/docs/books/vmspec/\">Java
        Virtual Machine Specification</a>.  The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This writer

@since  1.5"
      end

      operation 6896539 "append"
	public return_type class_ref 221595 // PrintWriter
	nparams 1
	  param inout name "csq" type class_ref 393755 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character sequence to this writer.

<p> An invocation of this method of the form <tt>out.append(csq)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(csq.toString()) </pre>

<p> Depending on the specification of <tt>toString</tt> for the
character sequence <tt>csq</tt>, the entire sequence may not be
appended. For instance, invoking the <tt>toString</tt> method of a
character buffer will return a subsequence whose content depends upon
the buffer's position and limit.

@param  csq
        The character sequence to append.  If <tt>csq</tt> is
        <tt>null</tt>, then the four characters <tt>\"null\"</tt> are
        appended to this writer.

@return  This writer

@since  1.5"
      end

      operation 6896667 "append"
	public return_type class_ref 221595 // PrintWriter
	nparams 3
	  param inout name "csq" type class_ref 393755 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a subsequence of the specified character sequence to this writer.

<p> An invocation of this method of the form <tt>out.append(csq, start,
end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in
exactly the same way as the invocation

<pre>
    out.write(csq.subSequence(start, end).toString()) </pre>

@param  csq
        The character sequence from which a subsequence will be
        appended.  If <tt>csq</tt> is <tt>null</tt>, then characters
        will be appended as if <tt>csq</tt> contained the four
        characters <tt>\"null\"</tt>.

@param  start
        The index of the first character in the subsequence

@param  end
        The index of the character following the last character in the
        subsequence

@return  This writer

@throws  IndexOutOfBoundsException
         If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>
         is greater than <tt>end</tt>, or <tt>end</tt> is greater than
         <tt>csq.length()</tt>

@since  1.5"
      end

      operation 6896795 "append"
	public return_type class_ref 221595 // PrintWriter
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character to this writer.

<p> An invocation of this method of the form <tt>out.append(c)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(c) </pre>

@param  c
        The 16-bit character to append

@return  This writer

@since 1.5"
      end
    end

    class 275995 "StringWriter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A character stream that collects its output in a string buffer, which can
then be used to construct a string.
<p>
Closing a <tt>StringWriter</tt> has no effect. The methods in this class
can be called after the stream has been closed without generating an
<tt>IOException</tt>.

@version 	1.24, 04/07/16
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 1769755 // <generalisation>
	relation 1769755 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1769755 // <generalisation>
	  b parent class_ref 446619 // Writer
      end

      classrelation 1769883 // buf (<unidirectional association>)
	relation 1769883 --->
	  a role_name "buf" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1769883 // buf (<unidirectional association>)
	  b parent class_ref 198171 // StringBuffer
      end

      operation 6912411 "StringWriter"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new string writer, using the default initial string-buffer
size."
      end

      operation 6912539 "StringWriter"
	public explicit_return_type ""
	nparams 1
	  param in name "initialSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new string writer, using the specified initial string-buffer
size.

@param initialSize  an int specifying the initial size of the buffer."
      end

      operation 6912667 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a single character."
      end

      operation 6912795 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a portion of an array of characters.

@param  cbuf  Array of characters
@param  off   Offset from which to start writing characters
@param  len   Number of characters to write"
      end

      operation 6912923 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a string."
      end

      operation 6913051 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "str" explicit_type "String"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a portion of a string.

@param  str  String to be written
@param  off  Offset from which to start writing characters
@param  len  Number of characters to write"
      end

      operation 6913179 "append"
	public return_type class_ref 275995 // StringWriter
	nparams 1
	  param inout name "csq" type class_ref 393755 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character sequence to this writer.

<p> An invocation of this method of the form <tt>out.append(csq)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(csq.toString()) </pre>

<p> Depending on the specification of <tt>toString</tt> for the
character sequence <tt>csq</tt>, the entire sequence may not be
appended. For instance, invoking the <tt>toString</tt> method of a
character buffer will return a subsequence whose content depends upon
the buffer's position and limit.

@param  csq
        The character sequence to append.  If <tt>csq</tt> is
        <tt>null</tt>, then the four characters <tt>\"null\"</tt> are
        appended to this writer.

@return  This writer

@since  1.5"
      end

      operation 6913307 "append"
	public return_type class_ref 275995 // StringWriter
	nparams 3
	  param inout name "csq" type class_ref 393755 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a subsequence of the specified character sequence to this writer.

<p> An invocation of this method of the form <tt>out.append(csq, start,
end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in
exactly the same way as the invocation

<pre>
    out.write(csq.subSequence(start, end).toString()) </pre>

@param  csq
        The character sequence from which a subsequence will be
        appended.  If <tt>csq</tt> is <tt>null</tt>, then characters
        will be appended as if <tt>csq</tt> contained the four
        characters <tt>\"null\"</tt>.

@param  start
        The index of the first character in the subsequence

@param  end
        The index of the character following the last character in the
        subsequence

@return  This writer

@throws  IndexOutOfBoundsException
         If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>
         is greater than <tt>end</tt>, or <tt>end</tt> is greater than
         <tt>csq.length()</tt>

@since  1.5"
      end

      operation 6913435 "append"
	public return_type class_ref 275995 // StringWriter
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character to this writer. 

<p> An invocation of this method of the form <tt>out.append(c)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(c) </pre>

@param  c
        The 16-bit character to append

@return  This writer

@since 1.5"
      end

      operation 6913563 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the buffer's current value as a string."
      end

      operation 6913691 "getBuffer"
	public return_type class_ref 198171 // StringBuffer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the string buffer itself.

@return StringBuffer holding the current buffer value."
      end

      operation 6913819 "flush"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush the stream."
      end

      operation 6913947 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closing a <tt>StringWriter</tt> has no effect. The methods in this
class can be called after the stream has been closed without generating
an <tt>IOException</tt>."
      end
    end

    class 285723 "ObjectStreamField"
      visibility public 
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 explicit_value "any"
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A description of a Serializable field from a Serializable class.  An array
of ObjectStreamFields is used to declare the Serializable fields of a class.

@author	Mike Warres
@author	Roger Riggs
@version 1.45, 04/05/05
@see ObjectStreamClass
@since 1.2"
      classrelation 1764763 // <realization>
	relation 1764763 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1764763 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      attribute 2710043 "name"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " field name "
      end

      attribute 2710171 "signature"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " canonical JVM signature of field type "
      end

      classrelation 1764891 // type (<unidirectional association>)
	relation 1764891 --->
	  a role_name "type" const_relation private
	    comment " field type (Object.class if unknown non-primitive type) 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1764891 // type (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      attribute 2710299 "unshared"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " whether or not to (de)serialize field values as unshared "
      end

      classrelation 1765019 // field (<unidirectional association>)
	relation 1765019 --->
	  a role_name "field" const_relation private
	    comment " corresponding reflective field object, if any 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1765019 // field (<unidirectional association>)
	  b parent class_ref 220443 // Field
      end

      attribute 2710427 "offset"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " offset of field value in enclosing field group "
      end

      operation 6878491 "ObjectStreamField"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "type" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a Serializable field with the specified type.  This field should
be documented with a <code>serialField</code> tag. 

@param	name the name of the serializable field
@param	type the <code>Class</code> object of the serializable field"
      end

      operation 6878619 "ObjectStreamField"
	public explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "String"
	  param inout name "type" type class_ref 164635 // Class
	  param inout name "unshared" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ObjectStreamField representing a serializable field with the
given name and type.  If unshared is false, values of the represented
field are serialized and deserialized in the default manner--if the
field is non-primitive, object values are serialized and deserialized as
if they had been written and read by calls to writeObject and
readObject.  If unshared is true, values of the represented field are
serialized and deserialized as if they had been written and read by
calls to writeUnshared and readUnshared.

@param   name field name
@param   type field type
@param   unshared if false, write/read field values in the same manner
         as writeObject/readObject; if true, write/read in the same
         manner as writeUnshared/readUnshared"
      end

      operation 6878747 "ObjectStreamField"
	package explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "String"
	  param in name "signature" explicit_type "String"
	  param inout name "unshared" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ObjectStreamField representing a field with the given name,
signature and unshared setting."
      end

      operation 6878875 "ObjectStreamField"
	package explicit_return_type ""
	nparams 3
	  param inout name "field" type class_ref 220443 // Field
	  param inout name "unshared" explicit_type "boolean"
	  param inout name "showType" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ObjectStreamField representing the given field with the
specified unshared setting.  For compatibility with the behavior of
earlier serialization implementations, a \"showType\" parameter is
necessary to govern whether or not a getType() call on this
ObjectStreamField (if non-primitive) will return Object.class (as
opposed to a more specific reference type)."
      end

      operation 6879003 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the name of this field.

@return	a <code>String</code> representing the name of the serializable
		field "
      end

      operation 6879131 "getType"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the type of the field.  If the type is non-primitive and this
<code>ObjectStreamField</code> was obtained from a deserialized {@link
ObjectStreamClass} instance, then <code>Object.class</code> is returned.
Otherwise, the <code>Class</code> object for the type of the field is
returned.

@return	a <code>Class</code> object representing the type of the
		serializable field"
      end

      operation 6879259 "getTypeCode"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns character encoding of field type.  The encoding is as follows:
<blockquote><pre>
B            byte
C            char
D            double
F            float
I            int
J            long
L            class or interface
S            short
Z            boolean
[            array
</pre></blockquote>

@return	the typecode of the serializable field

 REMIND: deprecate?"
      end

      operation 6879387 "getTypeString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the JVM type signature.

@return	null if this field has a primitive type.

 REMIND: deprecate?"
      end

      operation 6879515 "getOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Offset of field within instance data.

@return	the offset of this field
@see #setOffset

 REMIND: deprecate?"
      end

      operation 6879643 "setOffset"
	protected explicit_return_type "void"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Offset within instance data.

@param	offset the offset of the field
@see #getOffset

 REMIND: deprecate?"
      end

      operation 6879771 "isPrimitive"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if this field has a primitive type.

@return	true if and only if this field corresponds to a primitive type

 REMIND: deprecate?"
      end

      operation 6879899 "isUnshared"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns boolean value indicating whether or not the serializable field
represented by this ObjectStreamField instance is unshared."
      end

      operation 6880027 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare this field with another <code>ObjectStreamField</code>.  Return
-1 if this is smaller, 0 if equal, 1 if greater.  Types that are
primitives are \"smaller\" than object types.  If equal, the field names
are compared.

 REMIND: deprecate?"
      end

      operation 6880155 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string that describes this field."
      end

      operation 6880283 "getField"
	package return_type class_ref 220443 // Field
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns field represented by this ObjectStreamField, or null if
ObjectStreamField is not associated with an actual field."
      end

      operation 6880411 "getSignature"
	package explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns JVM type signature of field (similar to getTypeString, except
that signature strings are returned for primitive fields as well)."
      end
    end

    class 289307 "ObjectStreamException"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Superclass of all exceptions specific to Object Stream classes.

@author  unascribed
@version 1.13, 12/19/03
@since   JDK1.1"
      classrelation 1759899 // <generalisation>
	relation 1759899 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1759899 // <generalisation>
	  b parent class_ref 179355 // IOException
      end

      operation 6863259 "ObjectStreamException"
	protected explicit_return_type ""
	nparams 1
	  param in name "classname" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an ObjectStreamException with the specified argument.

@param classname the detailed message for the exception"
      end

      operation 6863387 "ObjectStreamException"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an ObjectStreamException."
      end
    end

    class 364827 "Reader"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Abstract class for reading character streams.  The only methods that a
subclass must implement are read(char[], int, int) and close().  Most
subclasses, however, will override some of the methods defined here in order
to provide higher efficiency, additional functionality, or both.


@see BufferedReader
@see   LineNumberReader
@see CharArrayReader
@see InputStreamReader
@see   FileReader
@see FilterReader
@see   PushbackReader
@see PipedReader
@see StringReader
@see Writer

@version 	1.27, 03/12/19
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 973083 // <realization>
	relation 973083 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 973083 // <realization>
	  b parent class_ref 573339 // Readable
      end

      classrelation 973211 // <realization>
	relation 973211 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 973211 // <realization>
	  b parent class_ref 179227 // Closeable
      end

      attribute 1070491 "lock"
	protected explicit_type "Object"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The object used to synchronize operations on this stream.  For
efficiency, a character-stream object may use an object other than
itself to protect critical sections.  A subclass should therefore use
the object in this field rather than <tt>this</tt> or a synchronized
method.
"
      end

      operation 3673755 "Reader"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new character-stream reader whose critical sections will
synchronize on the reader itself."
      end

      operation 3673883 "Reader"
	protected explicit_return_type ""
	nparams 1
	  param inout name "lock" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new character-stream reader whose critical sections will
synchronize on the given object.

@param lock  The Object to synchronize on."
      end

      operation 3674011 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "target" type class_ref 573467 // CharBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to read characters into the specified character buffer.
The buffer is used as a repository of characters as-is: the only
changes made are the results of a put operation. No flipping or
rewinding of the buffer is performed.

@param target the buffer to read characters into
@return The number of characters added to the buffer, or 
        -1 if this source of characters is at its end
@throws IOException if an I/O error occurs
@throws NullPointerException if target is null
@throws ReadOnlyBufferException if target is a read only buffer"
      end

      operation 3674139 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a single character.  This method will block until a character is
available, an I/O error occurs, or the end of the stream is reached.

<p> Subclasses that intend to support efficient single-character input
should override this method.

@return     The character read, as an integer in the range 0 to 65535
            (<tt>0x00-0xffff</tt>), or -1 if the end of the stream has
            been reached

@exception  IOException  If an I/O error occurs"
      end

      operation 3674267 "read"
	public explicit_return_type "int"
	nparams 1
	  param in name "cbuf" explicit_type "char"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read characters into an array.  This method will block until some input
is available, an I/O error occurs, or the end of the stream is reached.

@param       cbuf  Destination buffer

@return      The number of characters read, or -1 
             if the end of the stream
             has been reached

@exception   IOException  If an I/O error occurs"
      end

      operation 3674395 "read"
	abstract public explicit_return_type "int"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read characters into a portion of an array.  This method will block
until some input is available, an I/O error occurs, or the end of the
stream is reached.

@param      cbuf  Destination buffer
@param      off   Offset at which to start storing characters
@param      len   Maximum number of characters to read

@return     The number of characters read, or -1 if the end of the
            stream has been reached

@exception  IOException  If an I/O error occurs"
      end

      attribute 1070619 "maxSkipBufferSize"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  8192"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Maximum skip-buffer size "
      end

      attribute 1070747 "skipBuffer"
	private explicit_type "char"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Skip buffer, null until allocated "
      end

      operation 3674523 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skip characters.  This method will block until some characters are
available, an I/O error occurs, or the end of the stream is reached.

@param  n  The number of characters to skip

@return    The number of characters actually skipped

@exception  IllegalArgumentException  If <code>n</code> is negative.
@exception  IOException  If an I/O error occurs"
      end

      operation 3674651 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether this stream is ready to be read.

@return True if the next read() is guaranteed not to block for input,
false otherwise.  Note that returning false does not guarantee that the
next read will block.

@exception  IOException  If an I/O error occurs"
      end

      operation 3674779 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether this stream supports the mark() operation. The default
implementation always returns false. Subclasses should override this
method.

@return true if and only if this stream supports the mark operation."
      end

      operation 3674907 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark the present position in the stream.  Subsequent calls to reset()
will attempt to reposition the stream to this point.  Not all
character-input streams support the mark() operation.

@param  readAheadLimit  Limit on the number of characters that may be
                        read while still preserving the mark.  After
                        reading this many characters, attempting to
                        reset the stream may fail.

@exception  IOException  If the stream does not support mark(),
                         or if some other I/O error occurs"
      end

      operation 3675035 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the stream.  If the stream has been marked, then attempt to
reposition it at the mark.  If the stream has not been marked, then
attempt to reset it in some way appropriate to the particular stream,
for example by repositioning it to its starting point.  Not all
character-input streams support the reset() operation, and some support
reset() without supporting mark().

@exception  IOException  If the stream has not been marked,
                         or if the mark has been invalidated,
                         or if the stream does not support reset(),
                         or if some other I/O error occurs"
      end

      operation 3675163 "close"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the stream.  Once a stream has been closed, further read(),
ready(), mark(), or reset() invocations will throw an IOException.
Closing a previously-closed stream, however, has no effect.

@exception  IOException  If an I/O error occurs"
      end
    end

    class 446619 "Writer"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Abstract class for writing to character streams.  The only methods that a
subclass must implement are write(char[], int, int), flush(), and close().
Most subclasses, however, will override some of the methods defined here in
order to provide higher efficiency, additional functionality, or both.

@see Writer
@see   BufferedWriter
@see   CharArrayWriter
@see   FilterWriter
@see   OutputStreamWriter
@see     FileWriter
@see   PipedWriter
@see   PrintWriter
@see   StringWriter
@see Reader

@version 	1.26, 04/07/16
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 973723 // <realization>
	relation 973723 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 973723 // <realization>
	  b parent class_ref 573851 // Appendable
      end

      classrelation 973851 // <realization>
	relation 973851 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 973851 // <realization>
	  b parent class_ref 179227 // Closeable
      end

      classrelation 973979 // <realization>
	relation 973979 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 973979 // <realization>
	  b parent class_ref 183963 // Flushable
      end

      attribute 1070875 "writeBuffer"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Temporary buffer used to hold writes of strings and single characters
"
      end

      attribute 1071003 "writeBufferSize"
	const_attribute private explicit_type "int"
	init_value "=  1024"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Size of writeBuffer, must be >= 1
"
      end

      attribute 1071131 "lock"
	protected explicit_type "Object"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The object used to synchronize operations on this stream.  For
efficiency, a character-stream object may use an object other than
itself to protect critical sections.  A subclass should therefore use
the object in this field rather than <tt>this</tt> or a synchronized
method.
"
      end

      operation 3677211 "Writer"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new character-stream writer whose critical sections will
synchronize on the writer itself."
      end

      operation 3677339 "Writer"
	protected explicit_return_type ""
	nparams 1
	  param inout name "lock" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new character-stream writer whose critical sections will
synchronize on the given object.

@param lock  Object to synchronize on."
      end

      operation 3677467 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a single character.  The character to be written is contained in
the 16 low-order bits of the given integer value; the 16 high-order bits
are ignored.

<p> Subclasses that intend to support efficient single-character output
should override this method.

@param c  int specifying a character to be written.
@exception  IOException  If an I/O error occurs"
      end

      operation 3677595 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "cbuf" explicit_type "char"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write an array of characters.

@param  cbuf  Array of characters to be written

@exception  IOException  If an I/O error occurs"
      end

      operation 3677723 "write"
	abstract public explicit_return_type "void"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a portion of an array of characters.

@param  cbuf  Array of characters
@param  off   Offset from which to start writing characters
@param  len   Number of characters to write

@exception  IOException  If an I/O error occurs"
      end

      operation 3677851 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a string.

@param  str  String to be written

@exception  IOException  If an I/O error occurs"
      end

      operation 3677979 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "str" explicit_type "String"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a portion of a string.

@param  str  A String
@param  off  Offset from which to start writing characters
@param  len  Number of characters to write

@exception  IOException  If an I/O error occurs"
      end

      operation 3678107 "append"
	public return_type class_ref 446619 // Writer
	nparams 1
	  param inout name "csq" type class_ref 393755 // CharSequence
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character sequence to this writer.

<p> An invocation of this method of the form <tt>out.append(csq)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(csq.toString()) </pre>

<p> Depending on the specification of <tt>toString</tt> for the
character sequence <tt>csq</tt>, the entire sequence may not be
appended. For instance, invoking the <tt>toString</tt> method of a
character buffer will return a subsequence whose content depends upon
the buffer's position and limit.

@param  csq
        The character sequence to append.  If <tt>csq</tt> is
        <tt>null</tt>, then the four characters <tt>\"null\"</tt> are
        appended to this writer.

@return  This writer

@throws  IOException
         If an I/O error occurs

@since  1.5"
      end

      operation 3678235 "append"
	public return_type class_ref 446619 // Writer
	nparams 3
	  param inout name "csq" type class_ref 393755 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a subsequence of the specified character sequence to this writer.
<tt>Appendable</tt>.

<p> An invocation of this method of the form <tt>out.append(csq, start,
end)</tt> when <tt>csq</tt> is not <tt>null</tt> behaves in exactly the
same way as the invocation

<pre>
    out.write(csq.subSequence(start, end).toString()) </pre>

@param  csq
        The character sequence from which a subsequence will be
        appended.  If <tt>csq</tt> is <tt>null</tt>, then characters
        will be appended as if <tt>csq</tt> contained the four
        characters <tt>\"null\"</tt>.

@param  start
        The index of the first character in the subsequence

@param  end
        The index of the character following the last character in the
        subsequence

@return  This writer

@throws  IndexOutOfBoundsException
         If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>
         is greater than <tt>end</tt>, or <tt>end</tt> is greater than
         <tt>csq.length()</tt>

@throws  IOException
         If an I/O error occurs

@since  1.5"
      end

      operation 3678363 "append"
	public return_type class_ref 446619 // Writer
	nparams 1
	  param in name "c" explicit_type "char"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character to this writer.

<p> An invocation of this method of the form <tt>out.append(c)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(c) </pre>

@param  c
        The 16-bit character to append

@return  This writer

@throws  IOException
         If an I/O error occurs

@since 1.5"
      end

      operation 3678491 "flush"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush the stream.  If the stream has saved any characters from the
various write() methods in a buffer, write them immediately to their
intended destination.  Then, if that destination is another character or
byte stream, flush it.  Thus one flush() invocation will flush all the
buffers in a chain of Writers and OutputStreams.
<p>
If the intended destination of this stream is an abstraction provided by
the underlying operating system, for example a file, then flushing the
stream guarantees only that bytes previously written to the stream are
passed to the operating system for writing; it does not guarantee that
they are actually written to a physical device such as a disk drive.

@exception  IOException  If an I/O error occurs"
      end

      operation 3678619 "close"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the stream, flushing it first.  Once a stream has been closed,
further write() or flush() invocations will cause an IOException to be
thrown.  Closing a previously-closed stream, however, has no effect.

@exception  IOException  If an I/O error occurs"
      end
    end

    class 501659 "BufferedInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>BufferedInputStream</code> adds
functionality to another input stream-namely,
the ability to buffer the input and to
support the <code>mark</code> and <code>reset</code>
methods. When  the <code>BufferedInputStream</code>
is created, an internal buffer array is
created. As bytes  from the stream are read
or skipped, the internal buffer is refilled
as necessary  from the contained input stream,
many bytes at a time. The <code>mark</code>
operation  remembers a point in the input
stream and the <code>reset</code> operation
causes all the  bytes read since the most
recent <code>mark</code> operation to be
reread before new bytes are  taken from
the contained input stream.

@author  Arthur van Hoff
@version 1.50, 05/03/04
@since   JDK1.0"
      classrelation 1754907 // <generalisation>
	relation 1754907 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1754907 // <generalisation>
	  b parent class_ref 602651 // FilterInputStream
      end

      attribute 2695707 "defaultBufferSize"
	class_attribute private explicit_type "int"
	init_value "=  8192"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2695835 "buf"
	volatile protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The internal buffer array where the data is stored. When necessary,
it may be replaced by another array of
a different size.
"
      end

      classrelation 1755035 // bufUpdater (<unidirectional association>)
	relation 1755035 --->
	  a role_name "bufUpdater" init_value "=  
        AtomicReferenceFieldUpdater.newUpdater
        (BufferedInputStream.class,  byte[].class, \"buf\")" class_relation const_relation private
	    comment "
Atomic updater to provide compareAndSet for buf. This is
necessary because closes can be asynchronous. We use nullness
of buf[] as primary indicator that this stream is closed. (The
\"in\" field is also nulled out on close.)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<BufferedInputStream, byte[]> ${name}${value};
"
	    classrelation_ref 1755035 // bufUpdater (<unidirectional association>)
	  b parent class_ref 902939 // AtomicReferenceFieldUpdater
      end

      attribute 2695963 "count"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index one greater than the index of the last valid byte in 
the buffer. 
This value is always
in the range <code>0</code> through <code>buf.length</code>;
elements <code>buf[0]</code>  through <code>buf[count-1]
</code>contain buffered input data obtained
from the underlying  input stream.
"
      end

      attribute 2696091 "pos"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current position in the buffer. This is the index of the next 
character to be read from the <code>buf</code> array. 
<p>
This value is always in the range <code>0</code>
through <code>count</code>. If it is less
than <code>count</code>, then  <code>buf[pos]</code>
is the next byte to be supplied as input;
if it is equal to <code>count</code>, then
the  next <code>read</code> or <code>skip</code>
operation will require more bytes to be
read from the contained  input stream.

@see     java.io.BufferedInputStream#buf
"
      end

      attribute 2696219 "markpos"
	protected explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The value of the <code>pos</code> field at the time the last 
<code>mark</code> method was called.
<p>
This value is always
in the range <code>-1</code> through <code>pos</code>.
If there is no marked position in  the input
stream, this field is <code>-1</code>. If
there is a marked position in the input
stream,  then <code>buf[markpos]</code>
is the first byte to be supplied as input
after a <code>reset</code> operation. If
<code>markpos</code> is not <code>-1</code>,
then all bytes from positions <code>buf[markpos]</code>
through  <code>buf[pos-1]</code> must remain
in the buffer array (though they may be
moved to  another place in the buffer array,
with suitable adjustments to the values
of <code>count</code>,  <code>pos</code>,
and <code>markpos</code>); they may not
be discarded unless and until the difference
between <code>pos</code> and <code>markpos</code>
exceeds <code>marklimit</code>.

@see     java.io.BufferedInputStream#mark(int)
@see     java.io.BufferedInputStream#pos
"
      end

      attribute 2696347 "marklimit"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum read ahead allowed after a call to the 
<code>mark</code> method before subsequent calls to the 
<code>reset</code> method fail. 
Whenever the difference between <code>pos</code>
and <code>markpos</code> exceeds <code>marklimit</code>,
then the  mark may be dropped by setting
<code>markpos</code> to <code>-1</code>.

@see     java.io.BufferedInputStream#mark(int)
@see     java.io.BufferedInputStream#reset()
"
      end

      operation 6826907 "getInIfOpen"
	private return_type class_ref 179099 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check to make sure that underlying input stream has not been
nulled out due to close; if not return it;"
      end

      operation 6827035 "getBufIfOpen"
	private explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check to make sure that buffer has not been nulled out due to
close; if not return it;"
      end

      operation 6827163 "BufferedInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 179099 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>BufferedInputStream</code>
and saves its  argument, the input stream
<code>in</code>, for later use. An internal
buffer array is created and  stored in <code>buf</code>.

@param   in   the underlying input stream."
      end

      operation 6827291 "BufferedInputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 179099 // InputStream
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>BufferedInputStream</code>
with the specified buffer size,
and saves its  argument, the input stream
<code>in</code>, for later use.  An internal
buffer array of length  <code>size</code>
is created and stored in <code>buf</code>.

@param   in     the underlying input stream.
@param   size   the buffer size.
@exception IllegalArgumentException if size <= 0."
      end

      operation 6827419 "fill"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fills the buffer with more data, taking into account
shuffling and other tricks for dealing with marks.
Assumes that it is being called by a synchronized method.
This method also assumes that all data has already been read in,
hence pos > count."
      end

      operation 6827547 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See
the general contract of the <code>read</code>
method of <code>InputStream</code>.

@return     the next byte of data, or <code>-1</code> if the end of the
            stream is reached.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 6827675 "read1"
	private explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read characters into a portion of an array, reading from the underlying
stream at most once if necessary."
      end

      operation 6827803 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes from this byte-input stream into the specified byte array,
starting at the given offset.

<p> This method implements the general contract of the corresponding
<code>{@link InputStream#read(byte[], int, int) read}</code> method of
the <code>{@link InputStream}</code> class.  As an additional
convenience, it attempts to read as many bytes as possible by repeatedly
invoking the <code>read</code> method of the underlying stream.  This
iterated <code>read</code> continues until one of the following
conditions becomes true: <ul>

  <li> The specified number of bytes have been read,

  <li> The <code>read</code> method of the underlying stream returns
  <code>-1</code>, indicating end-of-file, or

  <li> The <code>available</code> method of the underlying stream
  returns zero, indicating that further input requests would block.

</ul> If the first <code>read</code> on the underlying stream returns
<code>-1</code> to indicate end-of-file then this method returns
<code>-1</code>.  Otherwise this method returns the number of bytes
actually read.

<p> Subclasses of this class are encouraged, but not required, to
attempt to read as many bytes as possible in the same fashion.

@param      b     destination buffer.
@param      off   offset at which to start storing bytes.
@param      len   maximum number of bytes to read.
@return     the number of bytes read, or <code>-1</code> if the end of
            the stream has been reached.
@exception  IOException  if an I/O error occurs."
      end

      operation 6827931 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>skip</code>
method of <code>InputStream</code>.

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped.
@exception  IOException  if an I/O error occurs."
      end

      operation 6828059 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read from this input 
stream without blocking. 
<p>
The <code>available</code> method of 
<code>BufferedInputStream</code> returns the sum of the number
of bytes remaining to be read in the buffer 
(<code>count&nbsp;- pos</code>) 
and the result of calling the <code>available</code> method of the 
underlying input stream. 

@return     the number of bytes that can be read from this input
            stream without blocking.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 6828187 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>mark</code>
method of <code>InputStream</code>.

@param   readlimit   the maximum limit of bytes that can be read before
                     the mark position becomes invalid.
@see     java.io.BufferedInputStream#reset()"
      end

      operation 6828315 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>reset</code>
method of <code>InputStream</code>.
<p>
If <code>markpos</code> is <code>-1</code>
(no mark has been set or the mark has been
invalidated), an <code>IOException</code>
is thrown. Otherwise, <code>pos</code> is
set equal to <code>markpos</code>.

@exception  IOException  if this stream has not been marked or
              if the mark has been invalidated.
@see        java.io.BufferedInputStream#mark(int)"
      end

      operation 6828443 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this input stream supports the <code>mark</code> 
and <code>reset</code> methods. The <code>markSupported</code> 
method of <code>BufferedInputStream</code> returns 
<code>true</code>. 

@return  a <code>boolean</code> indicating if this stream type supports
         the <code>mark</code> and <code>reset</code> methods.
@see     java.io.InputStream#mark(int)
@see     java.io.InputStream#reset()"
      end

      operation 6828571 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this input stream and releases any system resources 
associated with the stream. 

@exception  IOException  if an I/O error occurs."
      end
    end

    class 509851 "FileNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that an attempt to open the file denoted by a specified pathname
has failed.

<p> This exception will be thrown by the {@link FileInputStream}, {@link
FileOutputStream}, and {@link RandomAccessFile} constructors when a file
with the specified pathname does not exist.  It will also be thrown by these
constructors if the file does exist but for some reason is inaccessible, for
example when an attempt is made to open a read-only file for writing.

@author  unascribed
@version 1.23, 12/19/03
@since   JDK1.0"
      classrelation 1757979 // <generalisation>
	relation 1757979 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1757979 // <generalisation>
	  b parent class_ref 179355 // IOException
      end

      operation 6850843 "FileNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FileNotFoundException</code> with
<code>null</code> as its error detail message."
      end

      operation 6850971 "FileNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FileNotFoundException</code> with the
specified detail message. The string <code>s</code> can be
retrieved later by the
<code>{@link java.lang.Throwable#getMessage}</code>
method of class <code>java.lang.Throwable</code>.

@param   s   the detail message."
      end

      operation 6851099 "FileNotFoundException"
	private explicit_return_type ""
	nparams 2
	  param in name "path" explicit_type "String"
	  param in name "reason" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FileNotFoundException</code> with a detail message
consisting of the given pathname string followed by the given reason
string.  If the <code>reason</code> argument is <code>null</code> then
it will be omitted.  This private constructor is invoked only by native
I/O methods.

@since 1.2"
      end
    end

    class 573211 "FilterReader"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Abstract class for reading filtered character streams.
The abstract class <code>FilterReader</code> itself
provides default methods that pass all requests to 
the contained stream. Subclasses of <code>FilterReader</code>
should override some of these methods and may also provide
additional methods and fields.

@version 	1.17, 03/12/19
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 973339 // <generalisation>
	relation 973339 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 973339 // <generalisation>
	  b parent class_ref 364827 // Reader
      end

      classrelation 973467 // in (<unidirectional association>)
	relation 973467 --->
	  a role_name "in" protected
	    comment "
The underlying character-input stream.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 973467 // in (<unidirectional association>)
	  b parent class_ref 364827 // Reader
      end

      operation 3675291 "FilterReader"
	protected explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 364827 // Reader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new filtered reader.

@param in  a Reader object providing the underlying stream.
@throws NullPointerException if <code>in</code> is <code>null</code>"
      end

      operation 3675419 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a single character.

@exception  IOException  If an I/O error occurs"
      end

      operation 3675547 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read characters into a portion of an array.

@exception  IOException  If an I/O error occurs"
      end

      operation 3675675 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skip characters.

@exception  IOException  If an I/O error occurs"
      end

      operation 3675803 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether this stream is ready to be read.

@exception  IOException  If an I/O error occurs"
      end

      operation 3675931 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether this stream supports the mark() operation."
      end

      operation 3676059 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark the present position in the stream.

@exception  IOException  If an I/O error occurs"
      end

      operation 3676187 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the stream.

@exception  IOException  If an I/O error occurs"
      end

      operation 3676315 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the stream.

@exception  IOException  If an I/O error occurs"
      end
    end

    class 573723 "FilterWriter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Abstract class for writing filtered character streams.
The abstract class <code>FilterWriter</code> itself
provides default methods that pass all requests to the
contained stream. Subclasses of <code>FilterWriter</code>
should override some of these methods and may also 
provide additional methods and fields.

@version 	1.16, 03/12/19
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 974107 // <generalisation>
	relation 974107 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 974107 // <generalisation>
	  b parent class_ref 446619 // Writer
      end

      classrelation 974235 // out (<unidirectional association>)
	relation 974235 --->
	  a role_name "out" protected
	    comment "
The underlying character-output stream.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 974235 // out (<unidirectional association>)
	  b parent class_ref 446619 // Writer
      end

      operation 3678747 "FilterWriter"
	protected explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 446619 // Writer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new filtered writer.

@param out  a Writer object to provide the underlying stream.
@throws NullPointerException if <code>out</code> is <code>null</code>"
      end

      operation 3678875 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a single character.

@exception  IOException  If an I/O error occurs"
      end

      operation 3679003 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a portion of an array of characters.

@param  cbuf  Buffer of characters to be written
@param  off   Offset from which to start reading characters
@param  len   Number of characters to be written

@exception  IOException  If an I/O error occurs"
      end

      operation 3679131 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "str" explicit_type "String"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a portion of a string.

@param  str  String to be written
@param  off  Offset from which to start reading characters
@param  len  Number of characters to be written

@exception  IOException  If an I/O error occurs"
      end

      operation 3679259 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush the stream.

@exception  IOException  If an I/O error occurs"
      end

      operation 3679387 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the stream.

@exception  IOException  If an I/O error occurs"
      end
    end

    class 602651 "FilterInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>FilterInputStream</code> contains
some other input stream, which it uses as
its  basic source of data, possibly transforming
the data along the way or providing  additional
functionality. The class <code>FilterInputStream</code>
itself simply overrides all  methods of
<code>InputStream</code> with versions that
pass all requests to the contained  input
stream. Subclasses of <code>FilterInputStream</code>
may further override some of  these methods
and may also provide additional methods
and fields.

@author  Jonathan Payne
@version 1.28, 12/19/03
@since   JDK1.0"
      classrelation 1043099 // <generalisation>
	relation 1043099 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1043099 // <generalisation>
	  b parent class_ref 179099 // InputStream
      end

      classrelation 1043227 // in (<unidirectional association>)
	relation 1043227 --->
	  a role_name "in" volatile protected
	    comment "
The input stream to be filtered. 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1043227 // in (<unidirectional association>)
	  b parent class_ref 179099 // InputStream
      end

      operation 3861403 "FilterInputStream"
	protected explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 179099 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>FilterInputStream</code>
by assigning the  argument <code>in</code>
to the field <code>this.in</code> so as
to remember it for later use.

@param   in   the underlying input stream, or <code>null</code> if 
         this instance is to be created without an underlying stream."
      end

      operation 3861531 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from this input stream. The value 
byte is returned as an <code>int</code> in the range 
<code>0</code> to <code>255</code>. If no byte is available 
because the end of the stream has been reached, the value 
<code>-1</code> is returned. This method blocks until input data 
is available, the end of the stream is detected, or an exception 
is thrown. 
<p>
This method
simply performs <code>in.read()</code> and returns the result.

@return     the next byte of data, or <code>-1</code> if the end of the
            stream is reached.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 3861659 "read"
	public explicit_return_type "int"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>byte.length</code> bytes of data from this 
input stream into an array of bytes. This method blocks until some 
input is available. 
<p>
This method simply performs the call
<code>read(b, 0, b.length)</code> and returns
the  result. It is important that it does
<i>not</i> do <code>in.read(b)</code> instead;
certain subclasses of  <code>FilterInputStream</code>
depend on the implementation strategy actually
used.

@param      b   the buffer into which the data is read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the stream has been reached.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#read(byte[], int, int)"
      end

      operation 3861787 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from this input stream 
into an array of bytes. This method blocks until some input is 
available. 
<p>
This method simply performs <code>in.read(b, off, len)</code> 
and returns the result.

@param      b     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the stream has been reached.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 3861915 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips over and discards <code>n</code> bytes of data from the 
input stream. The <code>skip</code> method may, for a variety of 
reasons, end up skipping over some smaller number of bytes, 
possibly <code>0</code>. The actual number of bytes skipped is 
returned. 
<p>
This method
simply performs <code>in.skip(n)</code>.

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped.
@exception  IOException  if an I/O error occurs."
      end

      operation 3862043 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read from this input 
stream without blocking. 
<p>
This method
simply performs <code>in.available()</code> and
returns the result.

@return     the number of bytes that can be read from the input stream
            without blocking.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 3862171 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this input stream and releases any system resources 
associated with the stream. 
This
method simply performs <code>in.close()</code>.

@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 3862299 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the current position in this input stream. A subsequent 
call to the <code>reset</code> method repositions this stream at 
the last marked position so that subsequent reads re-read the same bytes.
<p>
The <code>readlimit</code> argument tells this input stream to 
allow that many bytes to be read before the mark position gets 
invalidated. 
<p>
This method simply performs <code>in.mark(readlimit)</code>.

@param   readlimit   the maximum limit of bytes that can be read before
                     the mark position becomes invalid.
@see     java.io.FilterInputStream#in
@see     java.io.FilterInputStream#reset()"
      end

      operation 3862427 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Repositions this stream to the position at the time the 
<code>mark</code> method was last called on this input stream. 
<p>
This method
simply performs <code>in.reset()</code>.
<p>
Stream marks are intended to be used in
situations where you need to read ahead a little to see what's in
the stream. Often this is most easily done by invoking some
general parser. If the stream is of the type handled by the
parse, it just chugs along happily. If the stream is not of
that type, the parser should toss an exception when it fails.
If this happens within readlimit bytes, it allows the outer
code to reset the stream and try another parser.

@exception  IOException  if the stream has not been marked or if the
              mark has been invalidated.
@see        java.io.FilterInputStream#in
@see        java.io.FilterInputStream#mark(int)"
      end

      operation 3862555 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this input stream supports the <code>mark</code> 
and <code>reset</code> methods. 
This method
simply performs <code>in.markSupported()</code>.

@return  <code>true</code> if this stream type supports the
         <code>mark</code> and <code>reset</code> method;
         <code>false</code> otherwise.
@see     java.io.FilterInputStream#in
@see     java.io.InputStream#mark(int)
@see     java.io.InputStream#reset()"
      end
    end

    class 635547 "FileInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>FileInputStream</code> obtains input bytes
from a file in a file system. What files
are  available depends on the host environment.

<p><code>FileInputStream</code> is meant for reading streams of raw bytes
such as image data. For reading streams of characters, consider using
<code>FileReader</code>.

@author  Arthur van Hoff
@version 1.63, 12/19/03
@see     java.io.File
@see     java.io.FileDescriptor
@see	    java.io.FileOutputStream
@since   JDK1.0"
      classrelation 1757595 // <generalisation>
	relation 1757595 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1757595 // <generalisation>
	  b parent class_ref 179099 // InputStream
      end

      classrelation 1757723 // fd (<unidirectional association>)
	relation 1757723 --->
	  a role_name "fd" private
	    comment " File Descriptor - handle to the open file 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1757723 // fd (<unidirectional association>)
	  b parent class_ref 904475 // FileDescriptor
      end

      classrelation 1757851 // channel (<unidirectional association>)
	relation 1757851 --->
	  a role_name "channel" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1757851 // channel (<unidirectional association>)
	  b parent class_ref 904731 // FileChannel
      end

      operation 6848667 "FileInputStream"
	public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>FileInputStream</code> by
opening a connection to an actual file,
the file named by the path name <code>name</code>
in the file system.  A new <code>FileDescriptor</code>
object is created to represent this file
connection.
<p>
First, if there is a security
manager, its <code>checkRead</code> method
is called with the <code>name</code> argument
as its argument.
<p>
If the named file does not exist, is a directory rather than a regular
file, or for some other reason cannot be opened for reading then a
<code>FileNotFoundException</code> is thrown.

@param      name   the system-dependent file name.
@exception  FileNotFoundException  if the file does not exist,
                  is a directory rather than a regular file,
                  or for some other reason cannot be opened for
                  reading.
@exception  SecurityException      if a security manager exists and its
              <code>checkRead</code> method denies read access
              to the file.
@see        java.lang.SecurityManager#checkRead(java.lang.String)"
      end

      operation 6848795 "FileInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 165147 // File
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>FileInputStream</code> by
opening a connection to an actual file,
the file named by the <code>File</code>
object <code>file</code> in the file system.
A new <code>FileDescriptor</code> object
is created to represent this file connection.
<p>
First, if there is a security manager,
its <code>checkRead</code> method  is called
with the path represented by the <code>file</code>
argument as its argument.
<p>
If the named file does not exist, is a directory rather than a regular
file, or for some other reason cannot be opened for reading then a
<code>FileNotFoundException</code> is thrown.

@param      file   the file to be opened for reading.
@exception  FileNotFoundException  if the file does not exist,
                  is a directory rather than a regular file,
                  or for some other reason cannot be opened for
                  reading.
@exception  SecurityException      if a security manager exists and its
              <code>checkRead</code> method denies read access to the file.
@see        java.io.File#getPath()
@see        java.lang.SecurityManager#checkRead(java.lang.String)"
      end

      operation 6848923 "FileInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "fdObj" type class_ref 904475 // FileDescriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>FileInputStream</code> by using the file descriptor
<code>fdObj</code>, which represents an existing connection to an
actual file in the file system.
<p>
If there is a security manager, its <code>checkRead</code> method is
called with the file descriptor <code>fdObj</code> as its argument to
see if it's ok to read the file descriptor. If read access is denied
to the file descriptor a <code>SecurityException</code> is thrown.
<p>
If <code>fdObj</code> is null then a <code>NullPointerException</code>
is thrown.

@param      fdObj   the file descriptor to be opened for reading.
@throws     SecurityException      if a security manager exists and its
                <code>checkRead</code> method denies read access to the
                file descriptor.
@see        SecurityManager#checkRead(java.io.FileDescriptor)"
      end

      operation 6849051 "open"
	private explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens the specified file for reading.
@param name the name of the file"
      end

      operation 6849179 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a byte of data from this input stream. This method blocks
if no input is yet available.

@return     the next byte of data, or <code>-1</code> if the end of the
            file is reached.
@exception  IOException  if an I/O error occurs."
      end

      operation 6849307 "readBytes"
	private explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a subarray as a sequence of bytes.
@param b the data to be written
@param off the start offset in the data
@param len the number of bytes that are written
@exception IOException If an I/O error has occurred."
      end

      operation 6849435 "read"
	public explicit_return_type "int"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>b.length</code> bytes of data from this input
stream into an array of bytes. This method blocks until some input
is available.

@param      b   the buffer into which the data is read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the file has been reached.
@exception  IOException  if an I/O error occurs."
      end

      operation 6849563 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from this input stream
into an array of bytes. This method blocks until some input is
available.

@param      b     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the file has been reached.
@exception  IOException  if an I/O error occurs."
      end

      operation 6849691 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips over and discards <code>n</code> bytes of data from the
input stream.

<p>The <code>skip</code> method may, for a variety of
reasons, end up skipping over some smaller number of bytes,
possibly <code>0</code>. If <code>n</code> is negative, an
<code>IOException</code> is thrown, even though the <code>skip</code>
method of the {@link InputStream} superclass does nothing in this case.
The actual number of bytes skipped is returned.

<p>This method may skip more bytes than are remaining in the backing
file. This produces no exception and the number of bytes skipped
may include some number of bytes that were beyond the EOF of the
backing file. Attempting to read from the stream after skipping past
the end will result in -1 indicating the end of the file.

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped.
@exception  IOException  if n is negative, or if an I/O error occurs."
      end

      operation 6849819 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read from this file input
stream without blocking.

@return     the number of bytes that can be read from this file input
            stream without blocking.
@exception  IOException  if an I/O error occurs."
      end

      operation 6849947 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this file input stream and releases any system resources
associated with the stream.

<p> If this stream has an associated channel then the channel is closed
as well.

@exception  IOException  if an I/O error occurs.

@revised 1.4
@spec JSR-51"
      end

      operation 6850075 "getFD"
	public return_type class_ref 904475 // FileDescriptor
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>FileDescriptor</code>
object  that represents the connection to
the actual file in the file system being
used by this <code>FileInputStream</code>.

@return     the file descriptor object associated with this stream.
@exception  IOException  if an I/O error occurs.
@see        java.io.FileDescriptor"
      end

      operation 6850203 "getChannel"
	public return_type class_ref 904731 // FileChannel
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unique {@link java.nio.channels.FileChannel FileChannel}
object associated with this file input stream.

<p> The initial {@link java.nio.channels.FileChannel#position()
</code>position<code>} of the returned channel will be equal to the
number of bytes read from the file so far.  Reading bytes from this
stream will increment the channel's position.  Changing the channel's
position, either explicitly or by reading, will change this stream's
file position.

@return  the file channel associated with this file input stream

@since 1.4
@spec JSR-51"
      end

      operation 6850331 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6850459 "close0"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 159771 "initialization"
	
	cpp "" ""
	java "  static {
	initIDs();
    }"
	php ""
	python ""
	idl ""
      end

      operation 6850587 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that the <code>close</code> method of this file input stream is
called when there are no more references to it.

@exception  IOException  if an I/O error occurs.
@see        java.io.FileInputStream#close()"
      end
    end

    class 727579 "EOFException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that an end of file or end of stream has been reached
unexpectedly during input.
<p>
This exception is mainly used by data input streams to signal end of
stream. Note that many other input operations return a special value on
end of stream rather than throwing an exception.
<p>

@author  Frank Yellin
@version 1.13, 12/19/03
@see     java.io.DataInputStream
@see     java.io.IOException
@since   JDK1.0"
      classrelation 1756571 // <generalisation>
	relation 1756571 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1756571 // <generalisation>
	  b parent class_ref 179355 // IOException
      end

      operation 6839195 "EOFException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>EOFException</code> with <code>null</code>
as its error detail message."
      end

      operation 6839323 "EOFException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>EOFException</code> with the specified detail
message. The string <code>s</code> may later be retrieved by the
<code>{@link java.lang.Throwable#getMessage}</code> method of class
<code>java.lang.Throwable</code>.

@param   s   the detail message."
      end
    end

    class 746395 "CharConversionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Base class for character conversion exceptions.

@author      Asmus Freytag
@version 	1.15, 12/19/03
@since       JDK1.1"
      classrelation 1324571 // <generalisation>
	relation 1324571 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1324571 // <generalisation>
	  b parent class_ref 179355 // IOException
      end

      operation 5097755 "CharConversionException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This provides no detailed message."
      end

      operation 5097883 "CharConversionException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This provides a detailed message.

@param s the detailed message associated with the exception."
      end
    end

    class 841755 "StreamTokenizer"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>StreamTokenizer</code> class takes an input stream and
parses it into \"tokens\", allowing the tokens to be
read one at a time. The parsing process is controlled by a table
and a number of flags that can be set to various states. The
stream tokenizer can recognize identifiers, numbers, quoted
strings, and various comment styles.
<p>
Each byte read from the input stream is regarded as a character
in the range <code>'&#92;u0000'</code> through <code>'&#92;u00FF'</code>.
The character value is used to look up five possible attributes of
the character: <i>white space</i>, <i>alphabetic</i>,
<i>numeric</i>, <i>string quote</i>, and <i>comment character</i>.
Each character can have zero or more of these attributes.
<p>
In addition, an instance has four flags. These flags indicate:
<ul>
<li>Whether line terminators are to be returned as tokens or treated
    as white space that merely separates tokens.
<li>Whether C-style comments are to be recognized and skipped.
<li>Whether C++-style comments are to be recognized and skipped.
<li>Whether the characters of identifiers are converted to lowercase.
</ul>
<p>
A typical application first constructs an instance of this class,
sets up the syntax tables, and then repeatedly loops calling the
<code>nextToken</code> method in each iteration of the loop until
it returns the value <code>TT_EOF</code>.

@author  James Gosling
@version 1.44, 05/18/04
@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#TT_EOF
@since   JDK1.0"
      classrelation 1769243 // reader (<unidirectional association>)
	relation 1769243 --->
	  a role_name "reader" init_value "=  null" private
	    comment " Only one of these will be non-null 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1769243 // reader (<unidirectional association>)
	  b parent class_ref 364827 // Reader
      end

      classrelation 1769371 // input (<unidirectional association>)
	relation 1769371 --->
	  a role_name "input" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1769371 // input (<unidirectional association>)
	  b parent class_ref 179099 // InputStream
      end

      attribute 2714779 "buf"
	private explicit_type "char"
	multiplicity "[]"
	init_value "=  new char[20]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2714907 "peekc"
	private explicit_type "int"
	init_value "=  NEED_CHAR"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The next character to be considered by the nextToken method.  May also
be NEED_CHAR to indicate that a new character should be read, or SKIP_LF
to indicate that a new character should be read and, if it is a '\\n'
character, it should be discarded and a second new character should be
read.
"
      end

      attribute 2715035 "NEED_CHAR"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  Integer.MAX_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2715163 "SKIP_LF"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  Integer.MAX_VALUE - 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2715291 "pushedBack"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2715419 "forceLower"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2715547 "LINENO"
	private explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The line number of the last token read "
      end

      attribute 2715675 "eolIsSignificantP"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2715803 "slashSlashCommentsP"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2715931 "slashStarCommentsP"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2716059 "ctype"
	private explicit_type "byte"
	multiplicity "[]"
	init_value "=  new byte[256]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2716187 "CT_WHITESPACE"
	class_attribute const_attribute private explicit_type "byte"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2716315 "CT_DIGIT"
	class_attribute const_attribute private explicit_type "byte"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2716443 "CT_ALPHA"
	class_attribute const_attribute private explicit_type "byte"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2716571 "CT_QUOTE"
	class_attribute const_attribute private explicit_type "byte"
	init_value "=  8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2716699 "CT_COMMENT"
	class_attribute const_attribute private explicit_type "byte"
	init_value "=  16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2716827 "ttype"
	public explicit_type "int"
	init_value "=  TT_NOTHING"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "After a call to the <code>nextToken</code> method, this field
contains the type of the token just read. For a single character
token, its value is the single character, converted to an integer.
For a quoted string token (see , its value is the quote character.
Otherwise, its value is one of the following:
<ul>
<li><code>TT_WORD</code> indicates that the token is a word.
<li><code>TT_NUMBER</code> indicates that the token is a number.
<li><code>TT_EOL</code> indicates that the end of line has been read.
    The field can only have this value if the
    <code>eolIsSignificant</code> method has been called with the
    argument <code>true</code>.
<li><code>TT_EOF</code> indicates that the end of the input stream
    has been reached.
</ul>
<p>
The initial value of this field is -4.

@see     java.io.StreamTokenizer#eolIsSignificant(boolean)
@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#quoteChar(int)
@see     java.io.StreamTokenizer#TT_EOF
@see     java.io.StreamTokenizer#TT_EOL
@see     java.io.StreamTokenizer#TT_NUMBER
@see     java.io.StreamTokenizer#TT_WORD
"
      end

      attribute 2716955 "TT_EOF"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant indicating that the end of the stream has been read.
"
      end

      attribute 2717083 "TT_EOL"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  '\\n'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant indicating that the end of the line has been read.
"
      end

      attribute 2717211 "TT_NUMBER"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant indicating that a number token has been read.
"
      end

      attribute 2717339 "TT_WORD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  -3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant indicating that a word token has been read.
"
      end

      attribute 2717467 "TT_NOTHING"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  -4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " A constant indicating that no token has been read, used for
initializing ttype.  FIXME This could be made public and
made available as the part of the API in a future release.
"
      end

      attribute 2717595 "sval"
	public explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If the current token is a word token, this field contains a
string giving the characters of the word token. When the current
token is a quoted string token, this field contains the body of
the string.
<p>
The current token is a word when the value of the
<code>ttype</code> field is <code>TT_WORD</code>. The current token is
a quoted string token when the value of the <code>ttype</code> field is
a quote character.
<p>
The initial value of this field is null.

@see     java.io.StreamTokenizer#quoteChar(int)
@see     java.io.StreamTokenizer#TT_WORD
@see     java.io.StreamTokenizer#ttype
"
      end

      attribute 2717723 "nval"
	public explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If the current token is a number, this field contains the value
of that number. The current token is a number when the value of
the <code>ttype</code> field is <code>TT_NUMBER</code>.
<p>
The initial value of this field is 0.0.

@see     java.io.StreamTokenizer#TT_NUMBER
@see     java.io.StreamTokenizer#ttype
"
      end

      operation 6907803 "StreamTokenizer"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private constructor that initializes everything except the streams. "
      end

      operation 6907931 "StreamTokenizer"
	public explicit_return_type ""
	nparams 1
	  param inout name "is" type class_ref 179099 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Creates a stream tokenizer that parses the specified input
stream. The stream tokenizer is initialized to the following
default state:
<ul>
<li>All byte values <code>'A'</code> through <code>'Z'</code>,
    <code>'a'</code> through <code>'z'</code>, and
    <code>'&#92;u00A0'</code> through <code>'&#92;u00FF'</code> are
    considered to be alphabetic.
<li>All byte values <code>'&#92;u0000'</code> through
    <code>'&#92;u0020'</code> are considered to be white space.
<li><code>'/'</code> is a comment character.
<li>Single quote <code>'&#92;''</code> and double quote <code>'\"'</code>
    are string quote characters.
<li>Numbers are parsed.
<li>Ends of lines are treated as white space, not as separate tokens.
<li>C-style and C++-style comments are not recognized.
</ul>

@deprecated As of JDK version 1.1, the preferred way to tokenize an
input stream is to convert it into a character stream, for example:
<blockquote><pre>
  Reader r = new BufferedReader(new InputStreamReader(is));
  StreamTokenizer st = new StreamTokenizer(r);
</pre></blockquote>

@param      is        an input stream.
@see        java.io.BufferedReader
@see        java.io.InputStreamReader
@see        java.io.StreamTokenizer#StreamTokenizer(java.io.Reader)"
      end

      operation 6908059 "StreamTokenizer"
	public explicit_return_type ""
	nparams 1
	  param inout name "r" type class_ref 364827 // Reader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a tokenizer that parses the given character stream.

@param r  a Reader object providing the input stream.
@since   JDK1.1"
      end

      operation 6908187 "resetSyntax"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this tokenizer's syntax table so that all characters are
\"ordinary.\" See the <code>ordinaryChar</code> method
for more information on a character being ordinary.

@see     java.io.StreamTokenizer#ordinaryChar(int)"
      end

      operation 6908315 "wordChars"
	public explicit_return_type "void"
	nparams 2
	  param in name "low" explicit_type "int"
	  param in name "hi" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that all characters <i>c</i> in the range
<code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>
are word constituents. A word token consists of a word constituent
followed by zero or more word constituents or number constituents.

@param   low   the low end of the range.
@param   hi    the high end of the range."
      end

      operation 6908443 "whitespaceChars"
	public explicit_return_type "void"
	nparams 2
	  param in name "low" explicit_type "int"
	  param in name "hi" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that all characters <i>c</i> in the range
<code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>
are white space characters. White space characters serve only to
separate tokens in the input stream.

<p>Any other attribute settings for the characters in the specified
range are cleared.

@param   low   the low end of the range.
@param   hi    the high end of the range."
      end

      operation 6908571 "ordinaryChars"
	public explicit_return_type "void"
	nparams 2
	  param in name "low" explicit_type "int"
	  param in name "hi" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that all characters <i>c</i> in the range
<code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>
are \"ordinary\" in this tokenizer. See the
<code>ordinaryChar</code> method for more information on a
character being ordinary.

@param   low   the low end of the range.
@param   hi    the high end of the range.
@see     java.io.StreamTokenizer#ordinaryChar(int)"
      end

      operation 6908699 "ordinaryChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that the character argument is \"ordinary\"
in this tokenizer. It removes any special significance the
character has as a comment character, word component, string
delimiter, white space, or number character. When such a character
is encountered by the parser, the parser treats it as a
single-character token and sets <code>ttype</code> field to the
character value.

<p>Making a line terminator character \"ordinary\" may interfere
with the ability of a <code>StreamTokenizer</code> to count
lines. The <code>lineno</code> method may no longer reflect
the presence of such terminator characters in its line count.

@param   ch   the character.
@see     java.io.StreamTokenizer#ttype"
      end

      operation 6908827 "commentChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specified that the character argument starts a single-line
comment. All characters from the comment character to the end of
the line are ignored by this stream tokenizer.

<p>Any other attribute settings for the specified character are cleared.

@param   ch   the character."
      end

      operation 6908955 "quoteChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that matching pairs of this character delimit string
constants in this tokenizer.
<p>
When the <code>nextToken</code> method encounters a string
constant, the <code>ttype</code> field is set to the string
delimiter and the <code>sval</code> field is set to the body of
the string.
<p>
If a string quote character is encountered, then a string is
recognized, consisting of all characters after (but not including)
the string quote character, up to (but not including) the next
occurrence of that same string quote character, or a line
terminator, or end of file. The usual escape sequences such as
<code>\"&#92;n\"</code> and <code>\"&#92;t\"</code> are recognized and
converted to single characters as the string is parsed.

<p>Any other attribute settings for the specified character are cleared.

@param   ch   the character.
@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#sval
@see     java.io.StreamTokenizer#ttype"
      end

      operation 6909083 "parseNumbers"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that numbers should be parsed by this tokenizer. The
syntax table of this tokenizer is modified so that each of the twelve
characters:
<blockquote><pre>
     0 1 2 3 4 5 6 7 8 9 . -
</pre></blockquote>
<p>
has the \"numeric\" attribute.
<p>
When the parser encounters a word token that has the format of a
double precision floating-point number, it treats the token as a
number rather than a word, by setting the <code>ttype</code>
field to the value <code>TT_NUMBER</code> and putting the numeric
value of the token into the <code>nval</code> field.

@see     java.io.StreamTokenizer#nval
@see     java.io.StreamTokenizer#TT_NUMBER
@see     java.io.StreamTokenizer#ttype"
      end

      operation 6909211 "eolIsSignificant"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not ends of line are treated as tokens.
If the flag argument is true, this tokenizer treats end of lines
as tokens; the <code>nextToken</code> method returns
<code>TT_EOL</code> and also sets the <code>ttype</code> field to
this value when an end of line is read.
<p>
A line is a sequence of characters ending with either a
carriage-return character (<code>'&#92;r'</code>) or a newline
character (<code>'&#92;n'</code>). In addition, a carriage-return
character followed immediately by a newline character is treated
as a single end-of-line token.
<p>
If the <code>flag</code> is false, end-of-line characters are
treated as white space and serve only to separate tokens.

@param   flag   <code>true</code> indicates that end-of-line characters
                are separate tokens; <code>false</code> indicates that
                end-of-line characters are white space.
@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#ttype
@see     java.io.StreamTokenizer#TT_EOL"
      end

      operation 6909339 "slashStarComments"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the tokenizer recognizes C-style comments.
If the flag argument is <code>true</code>, this stream tokenizer
recognizes C-style comments. All text between successive
occurrences of <code>/*</code> and <code>*&#47;</code> are discarded.
<p>
If the flag argument is <code>false</code>, then C-style comments
are not treated specially.

@param   flag   <code>true</code> indicates to recognize and ignore
                C-style comments."
      end

      operation 6909467 "slashSlashComments"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the tokenizer recognizes C++-style comments.
If the flag argument is <code>true</code>, this stream tokenizer
recognizes C++-style comments. Any occurrence of two consecutive
slash characters (<code>'/'</code>) is treated as the beginning of
a comment that extends to the end of the line.
<p>
If the flag argument is <code>false</code>, then C++-style
comments are not treated specially.

@param   flag   <code>true</code> indicates to recognize and ignore
                C++-style comments."
      end

      operation 6909595 "lowerCaseMode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "fl" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not word token are automatically lowercased.
If the flag argument is <code>true</code>, then the value in the
<code>sval</code> field is lowercased whenever a word token is
returned (the <code>ttype</code> field has the
value <code>TT_WORD</code> by the <code>nextToken</code> method
of this tokenizer.
<p>
If the flag argument is <code>false</code>, then the
<code>sval</code> field is not modified.

@param   fl   <code>true</code> indicates that all word tokens should
              be lowercased.
@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#ttype
@see     java.io.StreamTokenizer#TT_WORD"
      end

      operation 6909723 "read"
	private explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Read the next character "
      end

      operation 6909851 "nextToken"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the next token from the input stream of this tokenizer.
The type of the next token is returned in the <code>ttype</code>
field. Additional information about the token may be in the
<code>nval</code> field or the <code>sval</code> field of this
tokenizer.
<p>
Typical clients of this
class first set up the syntax tables and then sit in a loop
calling nextToken to parse successive tokens until TT_EOF
is returned.

@return     the value of the <code>ttype</code> field.
@exception  IOException  if an I/O error occurs.
@see        java.io.StreamTokenizer#nval
@see        java.io.StreamTokenizer#sval
@see        java.io.StreamTokenizer#ttype"
      end

      operation 6909979 "pushBack"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes the next call to the <code>nextToken</code> method of this
tokenizer to return the current value in the <code>ttype</code>
field, and not to modify the value in the <code>nval</code> or
<code>sval</code> field.

@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#nval
@see     java.io.StreamTokenizer#sval
@see     java.io.StreamTokenizer#ttype"
      end

      operation 6910107 "lineno"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the current line number.

@return  the current line number of this stream tokenizer."
      end

      operation 6910235 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the current stream token and
the line number it occurs on.

<p>The precise string returned is unspecified, although the following
example can be considered typical:

<blockquote><pre>Token['a'], line 10</pre></blockquote>

@return  a string representation of the token
@see     java.io.StreamTokenizer#nval
@see     java.io.StreamTokenizer#sval
@see     java.io.StreamTokenizer#ttype"
      end
    end

    class 856859 "FilenameFilter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Instances of classes that implement this interface are used to
filter filenames. These instances are used to filter directory
listings in the <code>list</code> method of class
<code>File</code>, and by the Abstract Window Toolkit's file
dialog component.

@author  Arthur van Hoff
@author  Jonathan Payne
@version 1.23, 12/19/03
@see     java.awt.FileDialog#setFilenameFilter(java.io.FilenameFilter)
@see     java.io.File
@see     java.io.File#list(java.io.FilenameFilter)
@since   JDK1.0"
      operation 6850715 "accept"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "dir" type class_ref 165147 // File
	  param in name "name" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if a specified file should be included in a file list.

@param   dir    the directory in which the file was found.
@param   name   the name of the file.
@return  <code>true</code> if and only if the name should be
included in the file list; <code>false</code> otherwise."
      end
    end

    class 902811 "Bits"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Utility methods for packing/unpacking primitive values in/out of byte arrays
using big-endian byte ordering."
      operation 6825115 "getBoolean"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Methods for unpacking primitive values from byte arrays starting at
given offsets."
      end

      operation 6825243 "getChar"
	class_operation package explicit_return_type "char"
	nparams 2
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6825371 "getShort"
	class_operation package explicit_return_type "short"
	nparams 2
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6825499 "getInt"
	class_operation package explicit_return_type "int"
	nparams 2
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6825627 "getFloat"
	class_operation package explicit_return_type "float"
	nparams 2
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6825755 "getLong"
	class_operation package explicit_return_type "long"
	nparams 2
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6825883 "getDouble"
	class_operation package explicit_return_type "double"
	nparams 2
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6826011 "putBoolean"
	class_operation package explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Methods for packing primitive values into byte arrays starting at given
offsets."
      end

      operation 6826139 "putChar"
	class_operation package explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "val" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6826267 "putShort"
	class_operation package explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "val" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6826395 "putInt"
	class_operation package explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6826523 "putFloat"
	class_operation package explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "val" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6826651 "putLong"
	class_operation package explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6826779 "putDouble"
	class_operation package explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 903067 "BufferedOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The class implements a buffered output stream. By setting up such 
an output stream, an application can write bytes to the underlying 
output stream without necessarily causing a call to the underlying 
system for each byte written.

@author  Arthur van Hoff
@version 1.33, 12/19/03
@since   JDK1.0"
      classrelation 1755419 // <generalisation>
	relation 1755419 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1755419 // <generalisation>
	  b parent class_ref 903195 // FilterOutputStream
      end

      attribute 2696475 "buf"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The internal buffer where data is stored. 
"
      end

      attribute 2696603 "count"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of valid bytes in the buffer. This value is always 
in the range <tt>0</tt> through <tt>buf.length</tt>; elements 
<tt>buf[0]</tt> through <tt>buf[count-1]</tt> contain valid 
byte data.
"
      end

      operation 6829467 "BufferedOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 183835 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new buffered output stream to write data to the
specified underlying output stream.

@param   out   the underlying output stream."
      end

      operation 6829595 "BufferedOutputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 183835 // OutputStream
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new buffered output stream to write data to the 
specified underlying output stream with the specified buffer 
size. 

@param   out    the underlying output stream.
@param   size   the buffer size.
@exception IllegalArgumentException if size &lt;= 0."
      end

      operation 6829723 "flushBuffer"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Flush the internal buffer "
      end

      operation 6829851 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified byte to this buffered output stream. 

@param      b   the byte to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 6829979 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified byte array 
starting at offset <code>off</code> to this buffered output stream.

<p> Ordinarily this method stores bytes from the given array into this
stream's buffer, flushing the buffer to the underlying output stream as
needed.  If the requested length is at least as large as this stream's
buffer, however, then this method will flush the buffer and write the
bytes directly to the underlying output stream.  Thus redundant
<code>BufferedOutputStream</code>s will not copy data unnecessarily.

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@exception  IOException  if an I/O error occurs."
      end

      operation 6830107 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this buffered output stream. This forces any buffered 
output bytes to be written out to the underlying output stream. 

@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out"
      end
    end

    class 903195 "FilterOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is the superclass of all classes that filter output 
streams. These streams sit on top of an already existing output 
stream (the <i>underlying</i> output stream) which it uses as its 
basic sink of data, but possibly transforming the data along the 
way or providing additional functionality. 
<p>
The class <code>FilterOutputStream</code> itself simply overrides 
all methods of <code>OutputStream</code> with versions that pass 
all requests to the underlying output stream. Subclasses of 
<code>FilterOutputStream</code> may further override some of these 
methods as well as provide additional methods and fields. 

@author  Jonathan Payne
@version 1.31, 12/19/03
@since   JDK1.0"
      classrelation 1755163 // <generalisation>
	relation 1755163 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1755163 // <generalisation>
	  b parent class_ref 183835 // OutputStream
      end

      classrelation 1755291 // out (<unidirectional association>)
	relation 1755291 --->
	  a role_name "out" protected
	    comment "
The underlying output stream to be filtered. 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1755291 // out (<unidirectional association>)
	  b parent class_ref 183835 // OutputStream
      end

      operation 6828699 "FilterOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 183835 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an output stream filter built on top of the specified 
underlying output stream. 

@param   out   the underlying output stream to be assigned to 
               the field <tt>this.out</tt> for later use, or 
               <code>null</code> if this instance is to be 
               created without an underlying stream."
      end

      operation 6828827 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified <code>byte</code> to this output stream. 
<p>
The <code>write</code> method of <code>FilterOutputStream</code> 
calls the <code>write</code> method of its underlying output stream, 
that is, it performs <tt>out.write(b)</tt>.
<p>
Implements the abstract <tt>write</tt> method of <tt>OutputStream</tt>. 

@param      b   the <code>byte</code>.
@exception  IOException  if an I/O error occurs."
      end

      operation 6828955 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>b.length</code> bytes to this output stream. 
<p>
The <code>write</code> method of <code>FilterOutputStream</code> 
calls its <code>write</code> method of three arguments with the 
arguments <code>b</code>, <code>0</code>, and 
<code>b.length</code>. 
<p>
Note that this method does not call the one-argument 
<code>write</code> method of its underlying stream with the single 
argument <code>b</code>. 

@param      b   the data to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#write(byte[], int, int)"
      end

      operation 6829083 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified 
<code>byte</code> array starting at offset <code>off</code> to 
this output stream. 
<p>
The <code>write</code> method of <code>FilterOutputStream</code> 
calls the <code>write</code> method of one argument on each 
<code>byte</code> to output. 
<p>
Note that this method does not call the <code>write</code> method 
of its underlying input stream with the same arguments. Subclasses 
of <code>FilterOutputStream</code> should provide a more efficient 
implementation of this method. 

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#write(int)"
      end

      operation 6829211 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this output stream and forces any buffered output bytes 
to be written out to the stream. 
<p>
The <code>flush</code> method of <code>FilterOutputStream</code> 
calls the <code>flush</code> method of its underlying output stream. 

@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out"
      end

      operation 6829339 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this output stream and releases any system resources 
associated with the stream. 
<p>
The <code>close</code> method of <code>FilterOutputStream</code> 
calls its <code>flush</code> method, and then calls the 
<code>close</code> method of its underlying output stream. 

@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#flush()
@see        java.io.FilterOutputStream#out"
      end
    end

    class 903323 "BufferedWriter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Write text to a character-output stream, buffering characters so as to
provide for the efficient writing of single characters, arrays, and strings.

<p> The buffer size may be specified, or the default size may be accepted.
The default is large enough for most purposes.

<p> A newLine() method is provided, which uses the platform's own notion of
line separator as defined by the system property <tt>line.separator</tt>.
Not all platforms use the newline character ('\\n') to terminate lines.
Calling this method to terminate each output line is therefore preferred to
writing a newline character directly.

<p> In general, a Writer sends its output immediately to the underlying
character or byte stream.  Unless prompt output is required, it is advisable
to wrap a BufferedWriter around any Writer whose write() operations may be
costly, such as FileWriters and OutputStreamWriters.  For example,

<pre>
PrintWriter out
  = new PrintWriter(new BufferedWriter(new FileWriter(\"foo.out\")));
</pre>

will buffer the PrintWriter's output to the file.  Without buffering, each
invocation of a print() method would cause characters to be converted into
bytes that would then be written immediately to the file, which can be very
inefficient.

@see PrintWriter
@see FileWriter
@see OutputStreamWriter

@version 	1.26, 03/12/19
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 1755803 // <generalisation>
	relation 1755803 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1755803 // <generalisation>
	  b parent class_ref 446619 // Writer
      end

      classrelation 1755931 // out (<unidirectional association>)
	relation 1755931 --->
	  a role_name "out" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1755931 // out (<unidirectional association>)
	  b parent class_ref 446619 // Writer
      end

      attribute 2698139 "cb"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2698267 "nChars"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2698395 "nextChar"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2698523 "defaultCharBufferSize"
	class_attribute private explicit_type "int"
	init_value "=  8192"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2698651 "lineSeparator"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Line separator string.  This is the value of the line.separator
property at the moment that the stream was created.
"
      end

      operation 6832155 "BufferedWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 446619 // Writer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a buffered character-output stream that uses a default-sized
output buffer.

@param  out  A Writer"
      end

      operation 6832283 "BufferedWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 446619 // Writer
	  param in name "sz" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new buffered character-output stream that uses an output
buffer of the given size.

@param  out  A Writer
@param  sz   Output-buffer size, a positive integer

@exception  IllegalArgumentException  If sz is <= 0"
      end

      operation 6832411 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check to make sure that the stream has not been closed "
      end

      operation 6832539 "flushBuffer"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush the output buffer to the underlying character stream, without
flushing the stream itself.  This method is non-private only so that it
may be invoked by PrintStream."
      end

      operation 6832667 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a single character.

@exception  IOException  If an I/O error occurs"
      end

      operation 6832795 "min"
	private explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Our own little min method, to avoid loading java.lang.Math if we've run
out of file descriptors and we're trying to print a stack trace."
      end

      operation 6832923 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a portion of an array of characters.

<p> Ordinarily this method stores characters from the given array into
this stream's buffer, flushing the buffer to the underlying stream as
needed.  If the requested length is at least as large as the buffer,
however, then this method will flush the buffer and write the characters
directly to the underlying stream.  Thus redundant
<code>BufferedWriter</code>s will not copy data unnecessarily.

@param  cbuf  A character array
@param  off   Offset from which to start reading characters
@param  len   Number of characters to write

@exception  IOException  If an I/O error occurs"
      end

      operation 6833051 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "s" explicit_type "String"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a portion of a String.

<p> If the value of the <tt>len</tt> parameter is negative then no
characters are written.  This is contrary to the specification of this
method in the {@linkplain java.io.Writer#write(java.lang.String,int,int)
superclass}, which requires that an {@link IndexOutOfBoundsException} be
thrown.

@param  s     String to be written
@param  off   Offset from which to start reading characters
@param  len   Number of characters to be written

@exception  IOException  If an I/O error occurs"
      end

      operation 6833179 "newLine"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a line separator.  The line separator string is defined by the
system property <tt>line.separator</tt>, and is not necessarily a single
newline ('\\n') character.

@exception  IOException  If an I/O error occurs"
      end

      operation 6833307 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush the stream.

@exception  IOException  If an I/O error occurs"
      end

      operation 6833435 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the stream.

@exception  IOException  If an I/O error occurs"
      end
    end

    class 903451 "CharArrayReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class implements a character buffer that can be used as a
character-input stream.

@author	Herb Jellinek
@version 	1.22, 02/19/04
@since       JDK1.1"
      classrelation 1756059 // <generalisation>
	relation 1756059 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1756059 // <generalisation>
	  b parent class_ref 364827 // Reader
      end

      attribute 2698779 "buf"
	protected explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The character buffer. "
      end

      attribute 2698907 "pos"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The current buffer position. "
      end

      attribute 2699035 "markedPos"
	protected explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The position of mark in buffer. "
      end

      attribute 2699163 "count"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The index of the end of this buffer.  There is not valid
 data at or beyond this index.
"
      end

      operation 6833563 "CharArrayReader"
	public explicit_return_type ""
	nparams 1
	  param in name "buf" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an CharArrayReader from the specified array of chars.
@param buf	Input buffer (not copied)"
      end

      operation 6833691 "CharArrayReader"
	public explicit_return_type ""
	nparams 3
	  param in name "buf" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an CharArrayReader from the specified array of chars.

<p> The resulting reader will start reading at the given
<tt>offset</tt>.  The total number of <tt>char</tt> values that can be
read from this reader will be either <tt>length</tt> or
<tt>buf.length-offset<tt>, whichever is smaller.

@throws IllegalArgumentException
        If <tt>offset</tt> is negative or greater than
        <tt>buf.length</tt>, or if <tt>length</tt> is negative, or if
        the sum of these two values is negative.

@param buf	Input buffer (not copied)
@param offset    Offset of the first char to read
@param length	Number of chars to read"
      end

      operation 6833819 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check to make sure that the stream has not been closed "
      end

      operation 6833947 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a single character.

@exception   IOException  If an I/O error occurs"
      end

      operation 6834075 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read characters into a portion of an array.
@param b	 Destination buffer
@param off  Offset at which to start storing characters
@param len   Maximum number of characters to read
@return  The actual number of characters read, or -1 if
		the end of the stream has been reached

@exception   IOException  If an I/O error occurs"
      end

      operation 6834203 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skip characters.  Returns the number of characters that were skipped.

<p>The <code>n</code> parameter may be negative, even though the
<code>skip</code> method of the {@link Reader} superclass throws
an exception in this case. If <code>n</code> is negative, then
this method does nothing and returns <code>0</code>.

@param n The number of characters to skip
@return       The number of characters actually skipped
@exception  IOException If the stream is closed, or an I/O error occurs"
      end

      operation 6834331 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether this stream is ready to be read.  Character-array readers
are always ready to be read.

@exception  IOException  If an I/O error occurs"
      end

      operation 6834459 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether this stream supports the mark() operation, which it does."
      end

      operation 6834587 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark the present position in the stream.  Subsequent calls to reset()
will reposition the stream to this point.

@param  readAheadLimit  Limit on the number of characters that may be
                        read while still preserving the mark.  Because
                        the stream's input comes from a character array,
                        there is no actual limit; hence this argument is
                        ignored.

@exception  IOException  If an I/O error occurs"
      end

      operation 6834715 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the stream to the most recent mark, or to the beginning if it has
never been marked.

@exception  IOException  If an I/O error occurs"
      end

      operation 6834843 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the stream."
      end
    end

    class 903579 "CharArrayWriter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class implements a character buffer that can be used as an Writer.
The buffer automatically grows when data is written to the stream.  The data
can be retrieved using toCharArray() and toString().
<P>
Note: Invoking close() on this class has no effect, and methods
of this class can be called after the stream has closed
without generating an IOException.

@author	Herb Jellinek
@version 	1.23, 07/16/04
@since       JDK1.1"
      classrelation 1756187 // <generalisation>
	relation 1756187 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1756187 // <generalisation>
	  b parent class_ref 446619 // Writer
      end

      attribute 2699291 "buf"
	protected explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The buffer where data is stored.
"
      end

      attribute 2699419 "count"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of chars in the buffer.
"
      end

      operation 6834971 "CharArrayWriter"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new CharArrayWriter."
      end

      operation 6835099 "CharArrayWriter"
	public explicit_return_type ""
	nparams 1
	  param in name "initialSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new CharArrayWriter with the specified initial size.

@param initialSize  an int specifying the initial buffer size.
@exception IllegalArgumentException if initialSize is negative"
      end

      operation 6835227 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a character to the buffer."
      end

      operation 6835355 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "c" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes characters to the buffer.
@param c	the data to be written
@param off	the start offset in the data
@param len	the number of chars that are written"
      end

      operation 6835483 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "str" explicit_type "String"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a portion of a string to the buffer.
@param  str  String to be written from
@param  off  Offset from which to start reading characters
@param  len  Number of characters to be written"
      end

      operation 6835611 "writeTo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 446619 // Writer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the contents of the buffer to another character stream.

@param out	the output stream to write to
@throws IOException If an I/O error occurs."
      end

      operation 6835739 "append"
	public return_type class_ref 903579 // CharArrayWriter
	nparams 1
	  param inout name "csq" type class_ref 393755 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character sequence to this writer.

<p> An invocation of this method of the form <tt>out.append(csq)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(csq.toString()) </pre>

<p> Depending on the specification of <tt>toString</tt> for the
character sequence <tt>csq</tt>, the entire sequence may not be
appended. For instance, invoking the <tt>toString</tt> method of a
character buffer will return a subsequence whose content depends upon
the buffer's position and limit.

@param  csq
        The character sequence to append.  If <tt>csq</tt> is
        <tt>null</tt>, then the four characters <tt>\"null\"</tt> are
        appended to this writer.

@return  This writer

@since  1.5"
      end

      operation 6835867 "append"
	public return_type class_ref 903579 // CharArrayWriter
	nparams 3
	  param inout name "csq" type class_ref 393755 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a subsequence of the specified character sequence to this writer.

<p> An invocation of this method of the form <tt>out.append(csq, start,
end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in
exactly the same way as the invocation

<pre>
    out.write(csq.subSequence(start, end).toString()) </pre>

@param  csq
        The character sequence from which a subsequence will be
        appended.  If <tt>csq</tt> is <tt>null</tt>, then characters
        will be appended as if <tt>csq</tt> contained the four
        characters <tt>\"null\"</tt>.

@param  start
        The index of the first character in the subsequence

@param  end
        The index of the character following the last character in the
        subsequence

@return  This writer

@throws  IndexOutOfBoundsException
         If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>
         is greater than <tt>end</tt>, or <tt>end</tt> is greater than
         <tt>csq.length()</tt>

@since  1.5"
      end

      operation 6835995 "append"
	public return_type class_ref 903579 // CharArrayWriter
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character to this writer.

<p> An invocation of this method of the form <tt>out.append(c)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(c) </pre>

@param  c
        The 16-bit character to append

@return  This writer

@since 1.5"
      end

      operation 6836123 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the buffer so that you can use it again without
throwing away the already allocated buffer."
      end

      operation 6836251 "toCharArray"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the input data.

@return an array of chars copied from the input data."
      end

      operation 6836379 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current size of the buffer.

@return an int representing the current size of the buffer."
      end

      operation 6836507 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts input data to a string.
@return the string."
      end

      operation 6836635 "flush"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush the stream."
      end

      operation 6836763 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the stream.  This method does not release the buffer, since its
contents might still be required. Note: Invoking this method in this class
will have no effect."
      end
    end

    class 903707 "ExpiringCache"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 2699931 "millisUntilExpiration"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1756699 // map (<unidirectional association>)
	relation 1756699 --->
	  a role_name "map" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1756699 // map (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      attribute 2700059 "queryCount"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Clear out old entries every few queries"
      end

      attribute 2700187 "queryOverflow"
	private explicit_type "int"
	init_value "=  300"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2700315 "MAX_ENTRIES"
	private explicit_type "int"
	init_value "=  200"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 903835 "Entry"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2700443 "timestamp"
	  private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2700571 "val"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 6839451 "Entry"
	  package explicit_return_type ""
	  nparams 2
	    param in name "timestamp" explicit_type "long"
	    param in name "val" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6839579 "timestamp"
	  package explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6839707 "setTimestamp"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "timestamp" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6839835 "val"
	  package explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6839963 "setVal"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "val" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 6840091 "ExpiringCache"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6840219 "ExpiringCache"
	package explicit_return_type ""
	nparams 1
	  param in name "millisUntilExpiration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6840347 "get"
	package explicit_return_type "String"
	nparams 1
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6840475 "put"
	package explicit_return_type "void"
	nparams 2
	  param in name "key" explicit_type "String"
	  param in name "val" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6840603 "clear"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6840731 "entryFor"
	private return_type class_ref 903835 // Entry
	nparams 1
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6840859 "cleanup"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 903963 "FileSystem"
      abstract visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Package-private abstract class for the local filesystem abstraction."
      operation 6857499 "getFileSystem"
	class_operation public return_type class_ref 903963 // FileSystem
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the FileSystem object representing this platform's local
filesystem."
      end

      operation 6857627 "getSeparator"
	abstract public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Normalization and construction -- 

Return the local filesystem's name-separator character."
      end

      operation 6857755 "getPathSeparator"
	abstract public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the local filesystem's path-separator character."
      end

      operation 6857883 "normalize"
	abstract public explicit_return_type "String"
	nparams 1
	  param in name "path" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert the given pathname string to normal form.  If the string is
already in normal form then it is simply returned."
      end

      operation 6858011 "prefixLength"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "path" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compute the length of this pathname string's prefix.  The pathname
string must be in normal form."
      end

      operation 6858139 "resolve"
	abstract public explicit_return_type "String"
	nparams 2
	  param in name "parent" explicit_type "String"
	  param in name "child" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolve the child pathname string against the parent.
Both strings must be in normal form, and the result
will be in normal form."
      end

      operation 6858267 "getDefaultParent"
	abstract public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the parent pathname string to be used when the parent-directory
argument in one of the two-argument File constructors is the empty
pathname."
      end

      operation 6858395 "fromURIPath"
	abstract public explicit_return_type "String"
	nparams 1
	  param in name "path" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Post-process the given URI path string if necessary.  This is used on
win32, e.g., to transform \"/c:/foo\" into \"c:/foo\".  The path string
still has slash separators; code in the File class will translate them
after this method returns."
      end

      operation 6858523 "isAbsolute"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Path operations -- 

Tell whether or not the given abstract pathname is absolute."
      end

      operation 6858651 "resolve"
	abstract public explicit_return_type "String"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolve the given abstract pathname into absolute form.  Invoked by the
getAbsolutePath and getCanonicalPath methods in the File class."
      end

      operation 6858779 "canonicalize"
	abstract public explicit_return_type "String"
	nparams 1
	  param in name "path" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2704411 "BA_EXISTS"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x01"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " -- Attribute accessors -- 
 Constants for simple boolean attributes "
      end

      attribute 2704539 "BA_REGULAR"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x02"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2704667 "BA_DIRECTORY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x04"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2704795 "BA_HIDDEN"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x08"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6858907 "getBooleanAttributes"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the simple boolean attributes for the file or directory denoted
by the given abstract pathname, or zero if it does not exist or some
other I/O error occurs."
      end

      operation 6859035 "checkAccess"
	abstract public explicit_return_type "boolean"
	nparams 2
	  param inout name "f" type class_ref 165147 // File
	  param inout name "write" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check whether the file or directory denoted by the given abstract
pathname may be accessed by this process.  If the second argument is
<code>false</code>, then a check for read access is made; if the second
argument is <code>true</code>, then a check for write (not read-write)
access is made.  Return false if access is denied or an I/O error
occurs."
      end

      operation 6859163 "getLastModifiedTime"
	abstract public explicit_return_type "long"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the time at which the file or directory denoted by the given
abstract pathname was last modified, or zero if it does not exist or
some other I/O error occurs."
      end

      operation 6859291 "getLength"
	abstract public explicit_return_type "long"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the length in bytes of the file denoted by the given abstract
pathname, or zero if it does not exist, is a directory, or some other
I/O error occurs."
      end

      operation 6859419 "createFileExclusively"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param in name "pathname" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- File operations -- 

Create a new empty file with the given pathname.  Return
<code>true</code> if the file was created and <code>false</code> if a
file or directory with the given pathname already exists.  Throw an
IOException if an I/O error occurs."
      end

      operation 6859547 "delete"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Delete the file or directory denoted by the given abstract pathname,
returning <code>true</code> if and only if the operation succeeds."
      end

      operation 6859675 "deleteOnExit"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Arrange for the file or directory denoted by the given abstract
pathname to be deleted when the VM exits, returning <code>true</code> if
and only if the operation succeeds."
      end

      operation 6859803 "list"
	abstract public explicit_return_type "String"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "List the elements of the directory denoted by the given abstract
pathname.  Return an array of strings naming the elements of the
directory if successful; otherwise, return <code>null</code>."
      end

      operation 6859931 "createDirectory"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new directory denoted by the given abstract pathname,
returning <code>true</code> if and only if the operation succeeds."
      end

      operation 6860059 "rename"
	abstract public explicit_return_type "boolean"
	nparams 2
	  param inout name "f1" type class_ref 165147 // File
	  param inout name "f2" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Rename the file or directory denoted by the first abstract pathname to
the second abstract pathname, returning <code>true</code> if and only if
the operation succeeds."
      end

      operation 6860187 "setLastModifiedTime"
	abstract public explicit_return_type "boolean"
	nparams 2
	  param inout name "f" type class_ref 165147 // File
	  param in name "time" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the last-modified time of the file or directory denoted by the
given abstract pathname, returning <code>true</code> if and only if the
operation succeeds."
      end

      operation 6860315 "setReadOnly"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark the file or directory denoted by the given abstract pathname as
read-only, returning <code>true</code> if and only if the operation
succeeds."
      end

      operation 6860443 "listRoots"
	abstract public return_type class_ref 165147 // File
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Filesystem interface -- 

List the available filesystem roots."
      end

      operation 6860571 "compare"
	abstract public explicit_return_type "int"
	nparams 2
	  param inout name "f1" type class_ref 165147 // File
	  param inout name "f2" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Basic infrastructure -- 

Compare two abstract pathnames lexicographically."
      end

      operation 6860699 "hashCode"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compute the hash code of an abstract pathname."
      end

      attribute 2704923 "useCanonCaches"
	class_attribute package explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Flags for enabling/disabling performance optimizations for file
 name canonicalization"
      end

      attribute 2705051 "useCanonPrefixCache"
	class_attribute package explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6860827 "getBooleanProperty"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "prop" explicit_type "String"
	  param inout name "defaultVal" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 160027 "initialization"
	
	cpp "" ""
	java "  static {
        useCanonCaches      = getBooleanProperty(\"sun.io.useCanonCaches\",
                                                 useCanonCaches);
        useCanonPrefixCache = getBooleanProperty(\"sun.io.useCanonPrefixCache\",
                                                 useCanonPrefixCache);
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 904219 "FileFilter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A filter for abstract pathnames.

<p> Instances of this interface may be passed to the <code>{@link
File#listFiles(java.io.FileFilter) listFiles(FileFilter)}</code> method
of the <code>{@link java.io.File}</code> class.

@since 1.2"
      operation 6848539 "accept"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "pathname" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether or not the specified abstract pathname should be
included in a pathname list.

@param  pathname  The abstract pathname to be tested
@return  <code>true</code> if and only if <code>pathname</code>
         should be included"
      end
    end

    class 904475 "FileDescriptor"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Instances of the file descriptor class serve as an opaque handle
to the underlying machine-specific structure representing an open
file, an open socket, or another source or sink of bytes. The
main practical use for a file descriptor is to create a
<code>FileInputStream</code> or <code>FileOutputStream</code> to
contain it.
<p>
Applications should not create their own file descriptors.

@author  Pavani Diwanji
@version 1.3, 12/19/03
@see	    java.io.FileInputStream
@see	    java.io.FileOutputStream
@since   JDK1.0"
      attribute 2701979 "fd"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2702107 "handle"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6847643 "FileDescriptor"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an (invalid) FileDescriptor
object."
      end

      operation 6847771 "FileDescriptor"
	private explicit_return_type ""
	nparams 1
	  param in name "fd" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 159643 "initialization"
	
	cpp "" ""
	java "  static {
        initIDs();
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 1757211 // in (<unidirectional association>)
	relation 1757211 --->
	  a role_name "in" init_value "=  standardStream(0)" class_relation const_relation public
	    comment "
A handle to the standard input stream. Usually, this file
descriptor is not used directly, but rather via the input stream
known as <code>System.in</code>.

@see     java.lang.System#in

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1757211 // in (<unidirectional association>)
	  b parent class_ref 904475 // FileDescriptor
      end

      classrelation 1757339 // out (<unidirectional association>)
	relation 1757339 --->
	  a role_name "out" init_value "=  standardStream(1)" class_relation const_relation public
	    comment "
A handle to the standard output stream. Usually, this file
descriptor is not used directly, but rather via the output stream
known as <code>System.out</code>.
@see     java.lang.System#out

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1757339 // out (<unidirectional association>)
	  b parent class_ref 904475 // FileDescriptor
      end

      classrelation 1757467 // err (<unidirectional association>)
	relation 1757467 --->
	  a role_name "err" init_value "=  standardStream(2)" class_relation const_relation public
	    comment "
A handle to the standard error stream. Usually, this file
descriptor is not used directly, but rather via the output stream
known as <code>System.err</code>.

@see     java.lang.System#err

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1757467 // err (<unidirectional association>)
	  b parent class_ref 904475 // FileDescriptor
      end

      operation 6847899 "valid"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this file descriptor object is valid.

@return  <code>true</code> if the file descriptor object represents a
         valid, open file, socket, or other active I/O connection;
         <code>false</code> otherwise."
      end

      operation 6848027 "sync"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 904603 // SyncFailedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Force all system buffers to synchronize with the underlying
device.  This method returns after all modified data and
attributes of this FileDescriptor have been written to the
relevant device(s).  In particular, if this FileDescriptor
refers to a physical storage medium, such as a file in a file
system, sync will not return until all in-memory modified copies
of buffers associated with this FileDesecriptor have been
written to the physical medium.

sync is meant to be used by code that requires physical
storage (such as a file) to be in a known state  For
example, a class that provided a simple transaction facility
might use sync to ensure that all changes to a file caused
by a given transaction were recorded on a storage medium.

sync only affects buffers downstream of this FileDescriptor.  If
any in-memory buffering is being done by the application (for
example, by a BufferedOutputStream object), those buffers must
be flushed into the FileDescriptor (for example, by invoking
OutputStream.flush) before that data will be affected by sync.

@exception SyncFailedException
	      Thrown when the buffers cannot be flushed,
	      or because the system cannot guarantee that all the
	      buffers have been synchronized with physical media.
@since     JDK1.1"
      end

      operation 6848155 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This routine initializes JNI field offsets for the class "
      end

      operation 6848283 "set"
	class_operation private explicit_return_type "long"
	nparams 1
	  param in name "d" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6848411 "standardStream"
	class_operation private return_type class_ref 904475 // FileDescriptor
	nparams 1
	  param in name "fd" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 904603 "SyncFailedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that a sync operation has failed.

@author  Ken Arnold
@version 1.15, 12/19/03
@see     java.io.FileDescriptor#sync
@see	    java.io.IOException
@since   JDK1.1"
      classrelation 1770011 // <generalisation>
	relation 1770011 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1770011 // <generalisation>
	  b parent class_ref 179355 // IOException
      end

      operation 6914075 "SyncFailedException"
	public explicit_return_type ""
	nparams 1
	  param in name "desc" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an SyncFailedException with a detail message.
A detail message is a String that describes this particular exception.

@param desc  a String describing the exception."
      end
    end

    class 904859 "FileOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A file output stream is an output stream for writing data to a 
<code>File</code> or to a <code>FileDescriptor</code>. Whether or not
a file is available or may be created depends upon the underlying
platform.  Some platforms, in particular, allow a file to be opened
for writing by only one <tt>FileOutputStream</tt> (or other
file-writing object) at a time.  In such situations the constructors in
this class will fail if the file involved is already open.

<p><code>FileOutputStream</code> is meant for writing streams of raw bytes
such as image data. For writing streams of characters, consider using
<code>FileWriter</code>.

@author  Arthur van Hoff
@version 1.57, 12/19/03
@see     java.io.File
@see     java.io.FileDescriptor
@see     java.io.FileInputStream
@since   JDK1.0"
      classrelation 1758107 // <generalisation>
	relation 1758107 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1758107 // <generalisation>
	  b parent class_ref 183835 // OutputStream
      end

      classrelation 1758235 // fd (<unidirectional association>)
	relation 1758235 --->
	  a role_name "fd" private
	    comment "
The system dependent file descriptor. The value is
1 more than actual file descriptor. This means that
the default value 0 indicates that the file is not open.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1758235 // fd (<unidirectional association>)
	  b parent class_ref 904475 // FileDescriptor
      end

      classrelation 1758363 // channel (<unidirectional association>)
	relation 1758363 --->
	  a role_name "channel" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1758363 // channel (<unidirectional association>)
	  b parent class_ref 904731 // FileChannel
      end

      attribute 2702235 "append"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6851227 "FileOutputStream"
	public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an output file stream to write to the file with the 
specified name. A new <code>FileDescriptor</code> object is 
created to represent this file connection.
<p>
First, if there is a security manager, its <code>checkWrite</code> 
method is called with <code>name</code> as its argument.
<p>
If the file exists but is a directory rather than a regular file, does
not exist but cannot be created, or cannot be opened for any other
reason then a <code>FileNotFoundException</code> is thrown.

@param      name   the system-dependent filename
@exception  FileNotFoundException  if the file exists but is a directory
                  rather than a regular file, does not exist but cannot
                  be created, or cannot be opened for any other reason
@exception  SecurityException  if a security manager exists and its
              <code>checkWrite</code> method denies write access
              to the file.
@see        java.lang.SecurityManager#checkWrite(java.lang.String)"
      end

      operation 6851355 "FileOutputStream"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an output file stream to write to the file with the specified
<code>name</code>.  If the second argument is <code>true</code>, then
bytes will be written to the end of the file rather than the beginning.
A new <code>FileDescriptor</code> object is created to represent this
file connection.
<p>
First, if there is a security manager, its <code>checkWrite</code> 
method is called with <code>name</code> as its argument.
<p>
If the file exists but is a directory rather than a regular file, does
not exist but cannot be created, or cannot be opened for any other
reason then a <code>FileNotFoundException</code> is thrown.

@param     name        the system-dependent file name
@param     append      if <code>true</code>, then bytes will be written
                  to the end of the file rather than the beginning
@exception  FileNotFoundException  if the file exists but is a directory
                  rather than a regular file, does not exist but cannot
                  be created, or cannot be opened for any other reason.
@exception  SecurityException  if a security manager exists and its
              <code>checkWrite</code> method denies write access
              to the file.
@see        java.lang.SecurityManager#checkWrite(java.lang.String)
@since     JDK1.1"
      end

      operation 6851483 "FileOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 165147 // File
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a file output stream to write to the file represented by 
the specified <code>File</code> object. A new 
<code>FileDescriptor</code> object is created to represent this 
file connection.
<p>
First, if there is a security manager, its <code>checkWrite</code> 
method is called with the path represented by the <code>file</code> 
argument as its argument.
<p>
If the file exists but is a directory rather than a regular file, does
not exist but cannot be created, or cannot be opened for any other
reason then a <code>FileNotFoundException</code> is thrown.

@param      file               the file to be opened for writing.
@exception  FileNotFoundException  if the file exists but is a directory
                  rather than a regular file, does not exist but cannot
                  be created, or cannot be opened for any other reason
@exception  SecurityException  if a security manager exists and its
              <code>checkWrite</code> method denies write access
              to the file.
@see        java.io.File#getPath()
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkWrite(java.lang.String)"
      end

      operation 6851611 "FileOutputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" type class_ref 165147 // File
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a file output stream to write to the file represented by 
the specified <code>File</code> object. If the second argument is
<code>true</code>, then bytes will be written to the end of the file
rather than the beginning. A new <code>FileDescriptor</code> object is
created to represent this file connection.
<p>
First, if there is a security manager, its <code>checkWrite</code> 
method is called with the path represented by the <code>file</code> 
argument as its argument.
<p>
If the file exists but is a directory rather than a regular file, does
not exist but cannot be created, or cannot be opened for any other
reason then a <code>FileNotFoundException</code> is thrown.

@param      file               the file to be opened for writing.
@param     append      if <code>true</code>, then bytes will be written
                  to the end of the file rather than the beginning
@exception  FileNotFoundException  if the file exists but is a directory
                  rather than a regular file, does not exist but cannot
                  be created, or cannot be opened for any other reason
@exception  SecurityException  if a security manager exists and its
              <code>checkWrite</code> method denies write access
              to the file.
@see        java.io.File#getPath()
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkWrite(java.lang.String)
@since 1.4"
      end

      operation 6851739 "FileOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "fdObj" type class_ref 904475 // FileDescriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an output file stream to write to the specified file 
descriptor, which represents an existing connection to an actual 
file in the file system.
<p>
First, if there is a security manager, its <code>checkWrite</code> 
method is called with the file descriptor <code>fdObj</code> 
argument as its argument.

@param      fdObj   the file descriptor to be opened for writing
@exception  SecurityException  if a security manager exists and its
              <code>checkWrite</code> method denies
              write access to the file descriptor
@see        java.lang.SecurityManager#checkWrite(java.io.FileDescriptor)"
      end

      operation 6851867 "open"
	private explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a file, with the specified name, for writing.
@param name name of file to be opened"
      end

      operation 6851995 "openAppend"
	private explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a file, with the specified name, for appending.
@param name name of file to be opened"
      end

      operation 6852123 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified byte to this file output stream. Implements 
the <code>write</code> method of <code>OutputStream</code>.

@param      b   the byte to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 6852251 "writeBytes"
	private explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sub array as a sequence of bytes.
@param b the data to be written
@param off the start offset in the data
@param len the number of bytes that are written
@exception IOException If an I/O error has occurred."
      end

      operation 6852379 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>b.length</code> bytes from the specified byte array 
to this file output stream. 

@param      b   the data.
@exception  IOException  if an I/O error occurs."
      end

      operation 6852507 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified byte array 
starting at offset <code>off</code> to this file output stream. 

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@exception  IOException  if an I/O error occurs."
      end

      operation 6852635 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this file output stream and releases any system resources 
associated with this stream. This file output stream may no longer 
be used for writing bytes. 

<p> If this stream has an associated channel then the channel is closed
as well.

@exception  IOException  if an I/O error occurs.

@revised 1.4
@spec JSR-51"
      end

      operation 6852763 "getFD"
	public return_type class_ref 904475 // FileDescriptor
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the file descriptor associated with this stream.

@return  the <code>FileDescriptor</code> object that represents 
         the connection to the file in the file system being used 
         by this <code>FileOutputStream</code> object. 

@exception  IOException  if an I/O error occurs.
@see        java.io.FileDescriptor"
      end

      operation 6852891 "getChannel"
	public return_type class_ref 904731 // FileChannel
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unique {@link java.nio.channels.FileChannel FileChannel}
object associated with this file output stream. </p>

<p> The initial {@link java.nio.channels.FileChannel#position()
</code>position<code>} of the returned channel will be equal to the
number of bytes written to the file so far unless this stream is in
append mode, in which case it will be equal to the size of the file.
Writing bytes to this stream will increment the channel's position
accordingly.  Changing the channel's position, either explicitly or by
writing, will change this stream's file position.

@return  the file channel associated with this file output stream

@since 1.4
@spec JSR-51"
      end

      operation 6853019 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cleans up the connection to the file, and ensures that the 
<code>close</code> method of this file output stream is
called when there are no more references to this stream. 

@exception  IOException  if an I/O error occurs.
@see        java.io.FileInputStream#close()"
      end

      operation 6853147 "close0"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6853275 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 159899 "initialization"
	
	cpp "" ""
	java "  static {
	initIDs();
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 904987 "FilePermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents access to a file or directory.  A FilePermission consists
of a pathname and a set of actions valid for that pathname.
<P>
Pathname is the pathname of the file or directory granted the specified
actions. A pathname that ends in \"/*\" (where \"/\" is
the file separator character, <code>File.separatorChar</code>) indicates
all the files and directories contained in that directory. A pathname
that ends with \"/-\" indicates (recursively) all files
and subdirectories contained in that directory. A pathname consisting of
the special token \"&lt;&lt;ALL FILES&gt;&gt;\" matches <b>any</b> file.
<P>
Note: A pathname consisting of a single \"*\" indicates all the files
in the current directory, while a pathname consisting of a single \"-\" 
indicates all the files in the current directory and
(recursively) all files and subdirectories contained in the current 
directory.
<P>
The actions to be granted are passed to the constructor in a string containing 
a list of one or more comma-separated keywords. The possible keywords are
\"read\", \"write\", \"execute\", and \"delete\". Their meaning is defined as follows:
<P>
<DL> 
   <DT> read <DD> read permission
   <DT> write <DD> write permission
   <DT> execute 
   <DD> execute permission. Allows <code>Runtime.exec</code> to
        be called. Corresponds to <code>SecurityManager.checkExec</code>.
   <DT> delete
   <DD> delete permission. Allows <code>File.delete</code> to
        be called. Corresponds to <code>SecurityManager.checkDelete</code>.
</DL>
<P>
The actions string is converted to lowercase before processing.
<P>
Be careful when granting FilePermissions. Think about the implications 
of granting read and especially write access to various files and 
directories. The \"&lt;&lt;ALL FILES>>\" permission with write action is 
especially dangerous. This grants permission to write to the entire 
file system. One thing this effectively allows is replacement of the 
system binary, including the JVM runtime environment.

<p>Please note: Code can always read a file from the same
directory it's in (or a subdirectory of that directory); it does not
need explicit permission to do so.

@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection

@version 1.76 04/01/12

@author Marianne Mueller
@author Roland Schemers
@since 1.2

@serial exclude"
      classrelation 1758491 // <generalisation>
	relation 1758491 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1758491 // <generalisation>
	  b parent class_ref 285211 // Permission
      end

      classrelation 1758619 // <realization>
	relation 1758619 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1758619 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2702363 "EXECUTE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Execute action.
"
      end

      attribute 2702491 "WRITE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Write action.
"
      end

      attribute 2702619 "READ"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Read action.
"
      end

      attribute 2702747 "DELETE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Delete action.
"
      end

      attribute 2702875 "ALL"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  READ|WRITE|EXECUTE|DELETE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "All actions (read,write,execute,delete)
"
      end

      attribute 2703003 "NONE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "No actions.
"
      end

      attribute 2703131 "mask"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the actions mask"
      end

      attribute 2703259 "directory"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " does path indicate a directory? (wildcard or recursive)"
      end

      attribute 2703387 "recursive"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " is it a recursive directory specification?"
      end

      attribute 2703515 "actions"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "the actions string. 

@serial

 Left null as long as possible, then"
      end

      attribute 2703643 "cpath"
	private explicit_type "String"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " created and re-used in the getAction function.
 canonicalized dir path. In the case of
 directories, it is the name \"/blah/*\" or \"/blah/-\" without
 the last character (the \"*\" or \"-\")."
      end

      attribute 2703771 "RECURSIVE_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  '-'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " static Strings used by init(int mask)"
      end

      attribute 2703899 "WILD_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  '*'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2704027 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7930732926638008763L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "public String toString()
{
StringBuffer sb = new StringBuffer();
sb.append(\"***\\n\");
sb.append(\"cpath = \"+cpath+\"\\n\");
sb.append(\"mask = \"+mask+\"\\n\");
sb.append(\"actions = \"+getActions()+\"\\n\");
sb.append(\"directory = \"+directory+\"\\n\");
sb.append(\"recursive = \"+recursive+\"\\n\");
sb.append(\"***\\n\");
return sb.toString();
}
"
      end

      operation 6853403 "init"
	private explicit_return_type "void"
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "initialize a FilePermission object. Common to all constructors.
Also called during de-serialization.

@param mask the actions mask to use.
"
      end

      operation 6853531 "FilePermission"
	public explicit_return_type ""
	nparams 2
	  param in name "path" explicit_type "String"
	  param in name "actions" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new FilePermission object with the specified actions.
<i>path</i> is the pathname of a
file or directory, and <i>actions</i> contains a comma-separated list of the
desired actions granted on the file or directory. Possible actions are
\"read\", \"write\", \"execute\", and \"delete\". 

<p>A pathname that ends in \"/*\" (where \"/\" is
the file separator character, <code>File.separatorChar</code>) indicates
a directory and all the files contained in that directory. A pathname
that ends with \"/-\" indicates a directory and (recursively) all files
and subdirectories contained in that directory. The special pathname
\"&lt;&lt;ALL FILES&gt;&gt;\" matches all files.

<p>A pathname consisting of a single \"*\" indicates all the files
in the current directory, while a pathname consisting of a single \"-\" 
indicates all the files in the current directory and
(recursively) all files and subdirectories contained in the current 
directory.

@param path the pathname of the file/directory.
@param actions the action string."
      end

      operation 6853659 "FilePermission"
	package explicit_return_type ""
	nparams 2
	  param in name "path" explicit_type "String"
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new FilePermission object using an action mask.
More efficient than the FilePermission(String, String) constructor.
Can be used from within
code that needs to create a FilePermission object to pass into the 
<code>implies</code> method. 

@param path the pathname of the file/directory.
@param mask the action mask to use.

 package private for use by the FilePermissionCollection add method"
      end

      operation 6853787 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 285211 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this FilePermission object \"implies\" the specified permission.
<P>
More specifically, this method returns true if:<p>
<ul>
<li> <i>p</i> is an instanceof FilePermission,<p>
<li> <i>p</i>'s actions are a proper subset of this
object's actions, and <p>
<li> <i>p</i>'s pathname is implied by this object's
     pathname. For example, \"/tmp/*\" implies \"/tmp/foo\", since
     \"/tmp/*\" encompasses the \"/tmp\" directory and all files in that
     directory, including the one named \"foo\".
</ul>
@param p the permission to check against.

@return true if the specified permission is implied by this object,
false if not.  "
      end

      operation 6853915 "impliesIgnoreMask"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 904987 // FilePermission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the Permission's actions are a proper subset of the
this object's actions. Returns the effective mask iff the
this FilePermission's path also implies that FilePermission's path.

@param that the FilePermission to check against.
@param exact return immediately if the masks are not equal
@return the effective mask"
      end

      operation 6854043 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks two FilePermission objects for equality. Checks that <i>obj</i> is
a FilePermission, and has the same pathname and actions as this object.
<P>
@param obj the object we are testing for equality with this object.
@return true if obj is a FilePermission, and has the same pathname and
actions as this FilePermission object."
      end

      operation 6854171 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this object.

@return a hash code value for this object."
      end

      operation 6854299 "getMask"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "actions" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts an actions String to an actions mask.

@param action the action string.
@return the actions mask."
      end

      operation 6854427 "getMask"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the current action mask. Used by the FilePermissionCollection.

@return the actions mask."
      end

      operation 6854555 "getActions"
	class_operation private explicit_return_type "String"
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the canonical string representation of the actions.
Always returns present actions in the following order: 
read, write, execute, delete.

@return the canonical string representation of the actions."
      end

      operation 6854683 "getActions"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the \"canonical string representation\" of the actions.
That is, this method always returns present actions in the following order: 
read, write, execute, delete. For example, if this FilePermission object
allows both write and read actions, a call to <code>getActions</code>
will return the string \"read,write\".

@return the canonical string representation of the actions."
      end

      operation 6854811 "newPermissionCollection"
	public return_type class_ref 285467 // PermissionCollection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new PermissionCollection object for storing FilePermission 
objects.
<p>
FilePermission objects must be stored in a manner that allows them 
to be inserted into the collection in any order, but that also enables the 
PermissionCollection <code>implies</code>
method to be implemented in an efficient (and consistent) manner.

<p>For example, if you have two FilePermissions:
<OL>
<LI>  <code>\"/tmp/-\", \"read\"</code>
<LI>  <code>\"/tmp/scratch/foo\", \"write\"</code>
</OL>

<p>and you are calling the <code>implies</code> method with the FilePermission: 

<pre>
  \"/tmp/scratch/foo\", \"read,write\", 
</pre>

then the <code>implies</code> function must
take into account both the \"/tmp/-\" and \"/tmp/scratch/foo\"
permissions, so the effective permission is \"read,write\",
and <code>implies</code> returns true. The \"implies\" semantics for 
FilePermissions are handled properly by the PermissionCollection object
returned by this <code>newPermissionCollection</code> method.

@return a new PermissionCollection object suitable for storing 
FilePermissions."
      end

      operation 6854939 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "WriteObject is called to save the state of the FilePermission 
to a stream. The actions are serialized, and the superclass
takes care of the name."
      end

      operation 6855067 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "readObject is called to restore the state of the FilePermission from
a stream."
      end
    end

    class 905115 "FilePermissionCollection"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A FilePermissionCollection stores a set of FilePermission permissions. 
FilePermission objects
must be stored in a manner that allows them to be inserted in any
order, but enable the implies function to evaluate the implies
method.
For example, if you have two FilePermissions:
<OL>
<LI> \"/tmp/-\", \"read\"
<LI> \"/tmp/scratch/foo\", \"write\"
</OL>
And you are calling the implies function with the FilePermission: 
\"/tmp/scratch/foo\", \"read,write\", then the implies function must
take into account both the /tmp/- and /tmp/scratch/foo
permissions, so the effective permission is \"read,write\".

@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection

@version 1.76 01/12/04

@author Marianne Mueller
@author Roland Schemers

@serial include
"
      classrelation 1758747 // <generalisation>
	relation 1758747 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1758747 // <generalisation>
	  b parent class_ref 285467 // PermissionCollection
      end

      classrelation 1758875 // <realization>
	relation 1758875 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1758875 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 1759003 // perms (<unidirectional association>)
	relation 1759003 --->
	  a role_name "perms" private
	    comment " Not serialized; see serialization section at end of class
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1759003 // perms (<unidirectional association>)
	  b parent class_ref 135579 // List
      end

      operation 6855195 "FilePermissionCollection"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an empty FilePermissions object.
"
      end

      operation 6855323 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "permission" type class_ref 285211 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a permission to the FilePermissions. The key for the hash is
permission.path.

@param permission the Permission object to add.

@exception IllegalArgumentException - if the permission is not a
                                      FilePermission 

@exception SecurityException - if this FilePermissionCollection object
                               has been marked readonly"
      end

      operation 6855451 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 285211 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check and see if this set of permissions implies the permissions 
expressed in \"permission\".

@param p the Permission object to compare

@return true if \"permission\" is a proper subset of a permission in 
the set, false if not."
      end

      operation 6855579 "elements"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of all the FilePermission objects in the 
container.

@return an enumeration of all the FilePermission objects."
      end

      attribute 2704155 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  2202956749081564585L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1759131 // serialPersistentFields (<unidirectional association>)
	relation 1759131 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value "=  {
        new ObjectStreamField(\"permissions\", Vector.class),
    }" class_relation const_relation private
	    comment " Need to maintain serialization interoperability with earlier releases,
 which had the serializable field:
    private Vector permissions;

@serialField permissions java.util.Vector
    A list of FilePermission objects.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1759131 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      operation 6855707 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@serialData \"permissions\" field (a Vector containing the FilePermissions).


Writes the contents of the perms field out as a Vector for
serialization compatibility with earlier releases."
      end

      operation 6855835 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a Vector of FilePermissions and saves them in the perms field."
      end
    end

    class 905243 "FileReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Convenience class for reading character files.  The constructors of this
class assume that the default character encoding and the default byte-buffer
size are appropriate.  To specify these values yourself, construct an
InputStreamReader on a FileInputStream.

<p><code>FileReader</code> is meant for reading streams of characters.
For reading streams of raw bytes, consider using a
<code>FileInputStream</code>.

@see InputStreamReader
@see FileInputStream

@version 	1.15, 03/12/19
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 1759387 // <generalisation>
	relation 1759387 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1759387 // <generalisation>
	  b parent class_ref 905371 // InputStreamReader
      end

      operation 6857115 "FileReader"
	public explicit_return_type ""
	nparams 1
	  param in name "fileName" explicit_type "String"
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>FileReader</tt>, given the name of the
file to read from.

@param fileName the name of the file to read from
@exception  FileNotFoundException  if the named file does not exist,
                  is a directory rather than a regular file,
                  or for some other reason cannot be opened for
                  reading."
      end

      operation 6857243 "FileReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 165147 // File
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>FileReader</tt>, given the <tt>File</tt> 
to read from.

@param file the <tt>File</tt> to read from
@exception  FileNotFoundException  if the file does not exist,
                  is a directory rather than a regular file,
                  or for some other reason cannot be opened for
                  reading."
      end

      operation 6857371 "FileReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "fd" type class_ref 904475 // FileDescriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>FileReader</tt>, given the 
<tt>FileDescriptor</tt> to read from.

@param fd the FileDescriptor to read from"
      end
    end

    class 905371 "InputStreamReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An InputStreamReader is a bridge from byte streams to character streams: It
reads bytes and decodes them into characters using a specified {@link
java.nio.charset.Charset <code>charset</code>}.  The charset that it uses
may be specified by name or may be given explicitly, or the platform's
default charset may be accepted.

<p> Each invocation of one of an InputStreamReader's read() methods may
cause one or more bytes to be read from the underlying byte-input stream.
To enable the efficient conversion of bytes to characters, more bytes may
be read ahead from the underlying stream than are necessary to satisfy the
current read operation.

<p> For top efficiency, consider wrapping an InputStreamReader within a
BufferedReader.  For example:

<pre>
BufferedReader in
  = new BufferedReader(new InputStreamReader(System.in));
</pre>

@see BufferedReader
@see InputStream
@see java.nio.charset.Charset

@version     1.44, 03/12/19
@author      Mark Reinhold
@since       JDK1.1"
      classrelation 1759259 // <generalisation>
	relation 1759259 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1759259 // <generalisation>
	  b parent class_ref 364827 // Reader
      end

      attribute 2704283 "sd"
	const_attribute private explicit_type "StreamDecoder"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6855963 "InputStreamReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 179099 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an InputStreamReader that uses the default charset.

@param  in   An InputStream"
      end

      operation 6856091 "InputStreamReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 179099 // InputStream
	  param in name "charsetName" explicit_type "String"
	nexceptions 1
	  exception class_ref 205723 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an InputStreamReader that uses the named charset.

@param  in
        An InputStream

@param  charsetName
        The name of a supported
        {@link java.nio.charset.Charset </code>charset<code>}

@exception  UnsupportedEncodingException
            If the named charset is not supported"
      end

      operation 6856219 "InputStreamReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 179099 // InputStream
	  param inout name "cs" type class_ref 798619 // Charset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an InputStreamReader that uses the given charset. </p>

@param  in       An InputStream
@param  cs       A charset

@since 1.4
@spec JSR-51"
      end

      operation 6856347 "InputStreamReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 179099 // InputStream
	  param inout name "dec" type class_ref 199707 // CharsetDecoder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an InputStreamReader that uses the given charset decoder.  </p>

@param  in       An InputStream
@param  dec      A charset decoder

@since 1.4
@spec JSR-51"
      end

      operation 6856475 "getEncoding"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the name of the character encoding being used by this stream.

<p> If the encoding has an historical name then that name is returned;
otherwise the encoding's canonical name is returned.

<p> If this instance was created with the {@link
#InputStreamReader(InputStream, String)} constructor then the returned
name, being unique for the encoding, may differ from the name passed to
the constructor.  This method may return <code>null</code> if the stream
has been closed. </p>

@return The historical name of this encoding, or possibly
        <code>null</code> if the stream has been closed

@see java.nio.charset.Charset

@revised 1.4
@spec JSR-51"
      end

      operation 6856603 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a single character.

@return The character read, or -1 if the end of the stream has been
        reached

@exception  IOException  If an I/O error occurs"
      end

      operation 6856731 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read characters into a portion of an array.

@param      cbuf     Destination buffer
@param      offset   Offset at which to start storing characters
@param      length   Maximum number of characters to read

@return     The number of characters read, or -1 if the end of the 
            stream has been reached

@exception  IOException  If an I/O error occurs"
      end

      operation 6856859 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether this stream is ready to be read.  An InputStreamReader is
ready if its input buffer is not empty, or if bytes are available to be
read from the underlying byte stream.

@exception  IOException  If an I/O error occurs"
      end

      operation 6856987 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the stream.

@exception  IOException  If an I/O error occurs"
      end
    end

    class 905499 "FileWriter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Convenience class for writing character files.  The constructors of this
class assume that the default character encoding and the default byte-buffer
size are acceptable.  To specify these values yourself, construct an
OutputStreamWriter on a FileOutputStream.

<p>Whether or not a file is available or may be created depends upon the
underlying platform.  Some platforms, in particular, allow a file to be
opened for writing by only one <tt>FileWriter</tt> (or other file-writing
object) at a time.  In such situations the constructors in this class
will fail if the file involved is already open.

<p><code>FileWriter</code> is meant for writing streams of characters.
For writing streams of raw bytes, consider using a
<code>FileOutputStream</code>.

@see OutputStreamWriter
@see FileOutputStream

@version 	1.18, 03/12/19
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 1759643 // <generalisation>
	relation 1759643 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1759643 // <generalisation>
	  b parent class_ref 905627 // OutputStreamWriter
      end

      operation 6862363 "FileWriter"
	public explicit_return_type ""
	nparams 1
	  param in name "fileName" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a FileWriter object given a file name.

@param fileName  String The system-dependent filename.
@throws IOException  if the named file exists but is a directory rather
                 than a regular file, does not exist but cannot be
                 created, or cannot be opened for any other reason"
      end

      operation 6862491 "FileWriter"
	public explicit_return_type ""
	nparams 2
	  param in name "fileName" explicit_type "String"
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a FileWriter object given a file name with a boolean
indicating whether or not to append the data written.

@param fileName  String The system-dependent filename.
@param append    boolean if <code>true</code>, then data will be written
                 to the end of the file rather than the beginning.
@throws IOException  if the named file exists but is a directory rather
                 than a regular file, does not exist but cannot be
                 created, or cannot be opened for any other reason"
      end

      operation 6862619 "FileWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 165147 // File
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a FileWriter object given a File object.

@param file  a File object to write to.
@throws IOException  if the file exists but is a directory rather than
                 a regular file, does not exist but cannot be created,
                 or cannot be opened for any other reason"
      end

      operation 6862747 "FileWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" type class_ref 165147 // File
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a FileWriter object given a File object. If the second
argument is <code>true</code>, then bytes will be written to the end
of the file rather than the beginning.

@param file  a File object to write to
@param     append    if <code>true</code>, then bytes will be written
                     to the end of the file rather than the beginning
@throws IOException  if the file exists but is a directory rather than
                 a regular file, does not exist but cannot be created,
                 or cannot be opened for any other reason
@since 1.4"
      end

      operation 6862875 "FileWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "fd" type class_ref 904475 // FileDescriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a FileWriter object associated with a file descriptor.

@param fd  FileDescriptor object to write to."
      end
    end

    class 905627 "OutputStreamWriter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An OutputStreamWriter is a bridge from character streams to byte streams:
Characters written to it are encoded into bytes using a specified {@link
java.nio.charset.Charset <code>charset</code>}.  The charset that it uses
may be specified by name or may be given explicitly, or the platform's
default charset may be accepted.

<p> Each invocation of a write() method causes the encoding converter to be
invoked on the given character(s).  The resulting bytes are accumulated in a
buffer before being written to the underlying output stream.  The size of
this buffer may be specified, but by default it is large enough for most
purposes.  Note that the characters passed to the write() methods are not
buffered.

<p> For top efficiency, consider wrapping an OutputStreamWriter within a
BufferedWriter so as to avoid frequent converter invocations.  For example:

<pre>
Writer out
  = new BufferedWriter(new OutputStreamWriter(System.out));
</pre>

<p> A <i>surrogate pair</i> is a character represented by a sequence of two
<tt>char</tt> values: A <i>high</i> surrogate in the range '&#92;uD800' to
'&#92;uDBFF' followed by a <i>low</i> surrogate in the range '&#92;uDC00' to
'&#92;uDFFF'.  If the character represented by a surrogate pair cannot be
encoded by a given charset then a charset-dependent <i>substitution
sequence</i> is written to the output stream.

<p> A <i>malformed surrogate element</i> is a high surrogate that is not
followed by a low surrogate or a low surrogate that is not preceded by a
high surrogate.  It is illegal to attempt to write a character stream
containing malformed surrogate elements.  The behavior of an instance of
this class when a malformed surrogate element is written is not specified.

@see BufferedWriter
@see OutputStream
@see java.nio.charset.Charset

@version 	1.47, 04/01/12
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 1759515 // <generalisation>
	relation 1759515 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1759515 // <generalisation>
	  b parent class_ref 446619 // Writer
      end

      attribute 2705179 "se"
	const_attribute private explicit_type "StreamEncoder"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6860955 "OutputStreamWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 183835 // OutputStream
	  param in name "charsetName" explicit_type "String"
	nexceptions 1
	  exception class_ref 205723 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an OutputStreamWriter that uses the named charset.

@param  out
        An OutputStream

@param  charsetName
        The name of a supported
        {@link java.nio.charset.Charset </code>charset<code>}

@exception  UnsupportedEncodingException
            If the named encoding is not supported"
      end

      operation 6861083 "OutputStreamWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 183835 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an OutputStreamWriter that uses the default character encoding.

@param  out  An OutputStream"
      end

      operation 6861211 "OutputStreamWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 183835 // OutputStream
	  param inout name "cs" type class_ref 798619 // Charset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an OutputStreamWriter that uses the given charset. </p>

@param  out
        An OutputStream

@param  cs
        A charset

@since 1.4
@spec JSR-51"
      end

      operation 6861339 "OutputStreamWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 183835 // OutputStream
	  param inout name "enc" type class_ref 199835 // CharsetEncoder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an OutputStreamWriter that uses the given charset encoder.  </p>

@param  out
        An OutputStream

@param  enc
        A charset encoder

@since 1.4
@spec JSR-51"
      end

      operation 6861467 "getEncoding"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the name of the character encoding being used by this stream.

<p> If the encoding has an historical name then that name is returned;
otherwise the encoding's canonical name is returned.

<p> If this instance was created with the {@link
#OutputStreamWriter(OutputStream, String)} constructor then the returned
name, being unique for the encoding, may differ from the name passed to
the constructor.  This method may return <tt>null</tt> if the stream has
been closed. </p>

@return The historical name of this encoding, or possibly
        <code>null</code> if the stream has been closed

@see java.nio.charset.Charset

@revised 1.4
@spec JSR-51"
      end

      operation 6861595 "flushBuffer"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush the output buffer to the underlying byte stream, without flushing
the byte stream itself.  This method is non-private only so that it may
be invoked by PrintStream."
      end

      operation 6861723 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a single character.

@exception  IOException  If an I/O error occurs"
      end

      operation 6861851 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a portion of an array of characters.

@param  cbuf  Buffer of characters
@param  off   Offset from which to start writing characters
@param  len   Number of characters to write

@exception  IOException  If an I/O error occurs"
      end

      operation 6861979 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "str" explicit_type "String"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a portion of a string.

@param  str  A String
@param  off  Offset from which to start writing characters
@param  len  Number of characters to write

@exception  IOException  If an I/O error occurs"
      end

      operation 6862107 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush the stream.

@exception  IOException  If an I/O error occurs"
      end

      operation 6862235 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the stream.

@exception  IOException  If an I/O error occurs"
      end
    end

    class 905755 "InterruptedIOException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that an I/O operation has been interrupted. An
<code>InterruptedIOException</code> is thrown to indicate that an
input or output transfer has been terminated because the thread
performing it was interrupted. The field {@link #bytesTransferred}
indicates how many bytes were successfully transferred before
the interruption occurred.

@author  unascribed
@version 1.19, 12/19/03
@see     java.io.InputStream
@see     java.io.OutputStream
@see     java.lang.Thread#interrupt()
@since   JDK1.0"
      classrelation 1759771 // <generalisation>
	relation 1759771 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1759771 // <generalisation>
	  b parent class_ref 179355 // IOException
      end

      operation 6863003 "InterruptedIOException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InterruptedIOException</code> with
<code>null</code> as its error detail message."
      end

      operation 6863131 "InterruptedIOException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InterruptedIOException</code> with the
specified detail message. The string <code>s</code> can be
retrieved later by the
<code>{@link java.lang.Throwable#getMessage}</code>
method of class <code>java.lang.Throwable</code>.

@param   s   the detail message."
      end

      attribute 2705307 "bytesTransferred"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Reports how many bytes had been transferred as part of the I/O
operation before it was interrupted.

@serial
"
      end
    end

    class 905883 "LineNumberInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is an input stream filter that provides the added 
functionality of keeping track of the current line number. 
<p>
A line is a sequence of bytes ending with a carriage return 
character (<code>'&#92;r'</code>), a newline character 
(<code>'&#92;n'</code>), or a carriage return character followed 
immediately by a linefeed character. In all three cases, the line 
terminating character(s) are returned as a single newline character.
<p>
The line number begins at <code>0</code>, and is incremented by 
<code>1</code> when a <code>read</code> returns a newline character.

@author     Arthur van Hoff
@version    1.27, 05/18/04
@see        java.io.LineNumberReader
@since      JDK1.0
@deprecated This class incorrectly assumes that bytes adequately represent
            characters.  As of JDK&nbsp;1.1, the preferred way to operate on
            character streams is via the new character-stream classes, which
            include a class for counting line numbers."
      classrelation 1760283 // <generalisation>
	relation 1760283 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1760283 // <generalisation>
	  b parent class_ref 602651 // FilterInputStream
      end

      attribute 2705563 "pushBack"
	package explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2705691 "lineNumber"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2705819 "markLineNumber"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2705947 "markPushBack"
	package explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6864027 "LineNumberInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 179099 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newline number input stream that reads its input 
from the specified input stream. 

@param      in   the underlying input stream."
      end

      operation 6864155 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from this input stream. The value 
byte is returned as an <code>int</code> in the range 
<code>0</code> to <code>255</code>. If no byte is available 
because the end of the stream has been reached, the value 
<code>-1</code> is returned. This method blocks until input data 
is available, the end of the stream is detected, or an exception 
is thrown. 
<p>
The <code>read</code> method of 
<code>LineNumberInputStream</code> calls the <code>read</code> 
method of the underlying input stream. It checks for carriage 
returns and newline characters in the input, and modifies the 
current line number as appropriate. A carriage-return character or 
a carriage return followed by a newline character are both 
converted into a single newline character. 

@return     the next byte of data, or <code>-1</code> if the end of this
            stream is reached.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in
@see        java.io.LineNumberInputStream#getLineNumber()"
      end

      operation 6864283 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from this input stream 
into an array of bytes. This method blocks until some input is available.
<p>
The <code>read</code> method of 
<code>LineNumberInputStream</code> repeatedly calls the 
<code>read</code> method of zero arguments to fill in the byte array.

@param      b     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            this stream has been reached.
@exception  IOException  if an I/O error occurs.
@see        java.io.LineNumberInputStream#read()"
      end

      operation 6864411 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips over and discards <code>n</code> bytes of data from this 
input stream. The <code>skip</code> method may, for a variety of 
reasons, end up skipping over some smaller number of bytes, 
possibly <code>0</code>. The actual number of bytes skipped is 
returned.  If <code>n</code> is negative, no bytes are skipped.
<p>
The <code>skip</code> method of <code>LineNumberInputStream</code> creates 
a byte array and then repeatedly reads into it until 
<code>n</code> bytes have been read or the end of the stream has 
been reached. 

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 6864539 "setLineNumber"
	public explicit_return_type "void"
	nparams 1
	  param in name "lineNumber" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the line number to the specified argument. 

@param      lineNumber   the new line number.
@see #getLineNumber"
      end

      operation 6864667 "getLineNumber"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current line number.

@return     the current line number.
@see #setLineNumber"
      end

      operation 6864795 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read from this input 
stream without blocking. 
<p>
Note that if the underlying input stream is able to supply 
<i>k</i> input characters without blocking, the 
<code>LineNumberInputStream</code> can guarantee only to provide 
<i>k</i>/2 characters without blocking, because the 
<i>k</i> characters from the underlying input stream might
consist of <i>k</i>/2 pairs of <code>'&#92;r'</code> and 
<code>'&#92;n'</code>, which are converted to just 
<i>k</i>/2 <code>'&#92;n'</code> characters. 

@return     the number of bytes that can be read from this input stream
            without blocking.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in"
      end

      operation 6864923 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the current position in this input stream. A subsequent 
call to the <code>reset</code> method repositions this stream at 
the last marked position so that subsequent reads re-read the same bytes.
<p>
The <code>mark</code> method of 
<code>LineNumberInputStream</code> remembers the current line 
number in a private variable, and then calls the <code>mark</code> 
method of the underlying input stream. 

@param   readlimit   the maximum limit of bytes that can be read before
                     the mark position becomes invalid.
@see     java.io.FilterInputStream#in
@see     java.io.LineNumberInputStream#reset()"
      end

      operation 6865051 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Repositions this stream to the position at the time the 
<code>mark</code> method was last called on this input stream. 
<p>
The <code>reset</code> method of 
<code>LineNumberInputStream</code> resets the line number to be 
the line number at the time the <code>mark</code> method was 
called, and then calls the <code>reset</code> method of the 
underlying input stream. 
<p>
Stream marks are intended to be used in
situations where you need to read ahead a little to see what's in
the stream. Often this is most easily done by invoking some
general parser. If the stream is of the type handled by the
parser, it just chugs along happily. If the stream is not of
that type, the parser should toss an exception when it fails,
which, if it happens within readlimit bytes, allows the outer
code to reset the stream and try another parser.

@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in
@see        java.io.LineNumberInputStream#mark(int)"
      end
    end

    class 906011 "LineNumberReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A buffered character-input stream that keeps track of line numbers. 
This class defines methods <CODE>void setLineNumber(int)</CODE> and 
<CODE>int getLineNumber()</CODE> for setting and getting the current 
line number respectively. 
<P>
By default, line numbering begins at 0. This number increments as data is
read, and can be changed with a call to <CODE>setLineNumber(int)</CODE>. 
Note however, that <CODE>setLineNumber(int)</CODE> does not actually change the current
position in the stream; it only changes the value that will be returned
by <CODE>getLineNumber()</CODE>. 
<P>
A line is considered to be terminated by any one of a line feed ('\\n'), a carriage
return ('\\r'), or a carriage return followed immediately by a linefeed.

@version 	1.20, 03/12/19
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 1760411 // <generalisation>
	relation 1760411 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1760411 // <generalisation>
	  b parent class_ref 174107 // BufferedReader
      end

      attribute 2706075 "lineNumber"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The current line number "
      end

      attribute 2706203 "markedLineNumber"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The line number of the mark, if any 
 Defaults to 0"
      end

      attribute 2706331 "skipLF"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " If the next character is a line feed, skip it "
      end

      attribute 2706459 "markedSkipLF"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The skipLF flag when the mark was set "
      end

      operation 6865179 "LineNumberReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 364827 // Reader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new line-numbering reader, using the default input-buffer
size.

@param in  a Reader object to provide the underlying stream."
      end

      operation 6865307 "LineNumberReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 364827 // Reader
	  param in name "sz" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new line-numbering reader, reading characters into a buffer of
the given size.

@param in  a Reader object to provide the underlying stream.
@param sz  an int specifying the size of the buffer."
      end

      operation 6865435 "setLineNumber"
	public explicit_return_type "void"
	nparams 1
	  param in name "lineNumber" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the current line number.

@param lineNumber  an int specifying the line number.
@see #getLineNumber"
      end

      operation 6865563 "getLineNumber"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current line number.

@return The current line number.
@see #setLineNumber"
      end

      operation 6865691 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a single character.  Line terminators are compressed into single
newline ('\\n') characters.

@return     The character read, or -1 if the end of the stream has been
            reached

@exception  IOException  If an I/O error occurs"
      end

      operation 6865819 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read characters into a portion of an array.

@param      cbuf  Destination buffer
@param      off   Offset at which to start storing characters
@param      len   Maximum number of characters to read

@return     The number of bytes read, or -1 if the end of the stream has
            already been reached

@exception  IOException  If an I/O error occurs"
      end

      operation 6865947 "readLine"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a line of text.  A line is considered to be terminated by any one
of a line feed ('\\n'), a carriage return ('\\r'), or a carriage return
followed immediately by a linefeed.

@return     A String containing the contents of the line, not including
            any line-termination characters, or null if the end of the
            stream has been reached

@exception  IOException  If an I/O error occurs"
      end

      attribute 2706587 "maxSkipBufferSize"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  8192"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Maximum skip-buffer size "
      end

      attribute 2706715 "skipBuffer"
	private explicit_type "char"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Skip buffer, null until allocated "
      end

      operation 6866075 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skip characters.

@param  n  The number of characters to skip

@return    The number of characters actually skipped

@exception  IOException  If an I/O error occurs
@exception  IllegalArgumentException if <CODE>n</CODE>
            is negative"
      end

      operation 6866203 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark the present position in the stream.  Subsequent calls to reset()
will attempt to reposition the stream to this point, and will also reset
the line number appropriately.

@param  readAheadLimit  Limit on the number of characters that may be
                        read while still preserving the mark.  After
                        reading this many characters, attempting to
                        reset the stream may fail.

@exception  IOException  If an I/O error occurs"
      end

      operation 6866331 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the stream to the most recent mark.

@exception  IOException  If the stream has not been marked,
                         or if the mark has been invalidated"
      end
    end

    class 906139 "NotSerializableException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when an instance is required to have a Serializable interface.
The serialization runtime or the class of the instance can throw
this exception. The argument should be the name of the class.

@author  unascribed
@version 1.14, 12/19/03
@since   JDK1.1"
      classrelation 1760667 // <generalisation>
	relation 1760667 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1760667 // <generalisation>
	  b parent class_ref 289307 // ObjectStreamException
      end

      operation 6866715 "NotSerializableException"
	public explicit_return_type ""
	nparams 1
	  param in name "classname" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a NotSerializableException object with message string. 

@param classname Class of the instance being serialized/deserialized."
      end

      operation 6866843 "NotSerializableException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a NotSerializableException object."
      end
    end

    class 907035 "OptionalDataException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Exception indicating the failure of an object read operation due to
unread primitive data, or the end of data belonging to a serialized
object in the stream.  This exception may be thrown in two cases:

<ul>
  <li>An attempt was made to read an object when the next element in the
      stream is primitive data.  In this case, the OptionalDataException's
      length field is set to the number of bytes of primitive data
      immediately readable from the stream, and the eof field is set to
      false.

  <li>An attempt was made to read past the end of data consumable by a
      class-defined readObject or readExternal method.  In this case, the
      OptionalDataException's eof field is set to true, and the length field
      is set to 0.
</ul>

@author  unascribed
@version 1.18, 01/12/04
@since   JDK1.1"
      classrelation 1765147 // <generalisation>
	relation 1765147 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1765147 // <generalisation>
	  b parent class_ref 289307 // ObjectStreamException
      end

      operation 6880539 "OptionalDataException"
	package explicit_return_type ""
	nparams 1
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an <code>OptionalDataException</code> with a length."
      end

      operation 6880667 "OptionalDataException"
	package explicit_return_type ""
	nparams 1
	  param inout name "end" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an <code>OptionalDataException</code> signifying no
more primitive data is available."
      end

      attribute 2710555 "length"
	public explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of bytes of primitive data available to be read
in the current buffer.

@serial
"
      end

      attribute 2710683 "eof"
	public explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True if there is no more data in the buffered part of the stream.

@serial
"
      end
    end

    class 907163 "PipedInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A piped input stream should be connected
to a piped output stream; the piped  input
stream then provides whatever data bytes
are written to the piped output  stream.
Typically, data is read from a <code>PipedInputStream</code>
object by one thread  and data is written
to the corresponding <code>PipedOutputStream</code>
by some  other thread. Attempting to use
both objects from a single thread is not
recommended, as it may deadlock the thread.
The piped input stream contains a buffer,
decoupling read operations from write operations,
within limits.

@author  James Gosling
@version 1.35, 12/19/03
@see     java.io.PipedOutputStream
@since   JDK1.0"
      classrelation 1765275 // <generalisation>
	relation 1765275 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1765275 // <generalisation>
	  b parent class_ref 179099 // InputStream
      end

      attribute 2710811 "closedByWriter"
	package explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2710939 "closedByReader"
	volatile package explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2711067 "connected"
	package explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1765403 // readSide (<unidirectional association>)
	relation 1765403 --->
	  a role_name "readSide" package
	    comment " REMIND: identification of the read and write sides needs to be
more sophisticated.  Either using thread groups (but what about
pipes within a thread?) or using finalization (but it may be a
long time until the next GC). 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1765403 // readSide (<unidirectional association>)
	  b parent class_ref 163227 // Thread
      end

      classrelation 1765531 // writeSide (<unidirectional association>)
	relation 1765531 --->
	  a role_name "writeSide" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1765531 // writeSide (<unidirectional association>)
	  b parent class_ref 163227 // Thread
      end

      attribute 2711195 "PIPE_SIZE"
	class_attribute const_attribute protected explicit_type "int"
	init_value "=  1024"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The size of the pipe's circular input buffer.
@since   JDK1.1
"
      end

      attribute 2711323 "buffer"
	protected explicit_type "byte"
	multiplicity "[]"
	init_value "=  new byte[PIPE_SIZE]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The circular buffer into which incoming data is placed.
@since   JDK1.1
"
      end

      attribute 2711451 "in"
	protected explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index of the position in the circular buffer at which the
next byte of data will be stored when received from the connected
piped output stream. <code>in&lt;0</code> implies the buffer is empty,
<code>in==out</code> implies the buffer is full
@since   JDK1.1
"
      end

      attribute 2711579 "out"
	protected explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index of the position in the circular buffer at which the next
byte of data will be read by this piped input stream.
@since   JDK1.1
"
      end

      operation 6880795 "PipedInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "src" type class_ref 907291 // PipedOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PipedInputStream</code> so
that it is connected to the piped output
stream <code>src</code>. Data bytes written
to <code>src</code> will then be  available
as input from this stream.

@param      src   the stream to connect to.
@exception  IOException  if an I/O error occurs."
      end

      operation 6880923 "PipedInputStream"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PipedInputStream</code> so
that it is not  yet connected. It must be
connected to a <code>PipedOutputStream</code>
before being used.

@see     java.io.PipedInputStream#connect(java.io.PipedOutputStream)
@see     java.io.PipedOutputStream#connect(java.io.PipedInputStream)"
      end

      operation 6881051 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "src" type class_ref 907291 // PipedOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes this piped input stream to be connected
to the piped  output stream <code>src</code>.
If this object is already connected to some
other piped output  stream, an <code>IOException</code>
is thrown.
<p>
If <code>src</code> is an
unconnected piped output stream and <code>snk</code>
is an unconnected piped input stream, they
may be connected by either the call:
<p>
<pre><code>snk.connect(src)</code> </pre>
<p>
or the call:
<p>
<pre><code>src.connect(snk)</code> </pre>
<p>
The two
calls have the same effect.

@param      src   The piped output stream to connect to.
@exception  IOException  if an I/O error occurs."
      end

      operation 6881179 "receive"
	protected explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receives a byte of data.  This method will block if no input is
available.
@param b the byte being received
@exception IOException If the pipe is broken.
@since     JDK1.1"
      end

      operation 6881307 "receive"
	package explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receives data into an array of bytes.  This method will
block until some input is available.
@param b the buffer into which the data is received
@param off the start offset of the data
@param len the maximum number of bytes received
@exception IOException If an I/O error has occurred."
      end

      operation 6881435 "checkStateForReceive"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6881563 "awaitSpace"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6881691 "receivedLast"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies all waiting threads that the last byte of data has been
received."
      end

      operation 6881819 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from this piped input stream. The
value byte is returned as an <code>int</code> in the range
<code>0</code> to <code>255</code>. If no byte is available
because the end of the stream has been reached, the value
<code>-1</code> is returned. This method blocks until input data
is available, the end of the stream is detected, or an exception
is thrown.
If a thread was providing data bytes
to the connected piped output stream, but
the  thread is no longer alive, then an
<code>IOException</code> is thrown.

@return     the next byte of data, or <code>-1</code> if the end of the
            stream is reached.
@exception  IOException  if the pipe is broken."
      end

      operation 6881947 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from this piped input
stream into an array of bytes. Less than <code>len</code> bytes
will be read if the end of the data stream is reached. This method
blocks until at least one byte of input is available.
If a thread was providing data bytes
to the connected piped output stream, but
the  thread is no longer alive, then an
<code>IOException</code> is thrown.

@param      b     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the stream has been reached.
@exception  IOException  if an I/O error occurs."
      end

      operation 6882075 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read from this input
stream without blocking. This method overrides the <code>available</code>
method of the parent class.

@return     the number of bytes that can be read from this input stream
            without blocking.
@exception  IOException  if an I/O error occurs.
@since   JDK1.0.2"
      end

      operation 6882203 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this piped input stream and releases any system resources
associated with the stream.

@exception  IOException  if an I/O error occurs."
      end
    end

    class 907291 "PipedOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A piped output stream can be connected to a piped input stream 
to create a communications pipe. The piped output stream is the 
sending end of the pipe. Typically, data is written to a 
<code>PipedOutputStream</code> object by one thread and data is 
read from the connected <code>PipedInputStream</code> by some 
other thread. Attempting to use both objects from a single thread 
is not recommended as it may deadlock the thread.

@author  James Gosling
@version 1.26, 12/19/03
@see     java.io.PipedInputStream
@since   JDK1.0"
      classrelation 1765659 // <generalisation>
	relation 1765659 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1765659 // <generalisation>
	  b parent class_ref 183835 // OutputStream
      end

      classrelation 1765787 // sink (<unidirectional association>)
	relation 1765787 --->
	  a role_name "sink" private
	    comment " REMIND: identification of the read and write sides needs to be
more sophisticated.  Either using thread groups (but what about
pipes within a thread?) or using finalization (but it may be a
long time until the next GC). 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1765787 // sink (<unidirectional association>)
	  b parent class_ref 907163 // PipedInputStream
      end

      operation 6882331 "PipedOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "snk" type class_ref 907163 // PipedInputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a piped output stream connected to the specified piped 
input stream. Data bytes written to this stream will then be 
available as input from <code>snk</code>.

@param      snk   The piped input stream to connect to.
@exception  IOException  if an I/O error occurs."
      end

      operation 6882459 "PipedOutputStream"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a piped output stream that is not yet connected to a 
piped input stream. It must be connected to a piped input stream, 
either by the receiver or the sender, before being used. 

@see     java.io.PipedInputStream#connect(java.io.PipedOutputStream)
@see     java.io.PipedOutputStream#connect(java.io.PipedInputStream)"
      end

      operation 6882587 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "snk" type class_ref 907163 // PipedInputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this piped output stream to a receiver. If this object
is already connected to some other piped input stream, an 
<code>IOException</code> is thrown.
<p>
If <code>snk</code> is an unconnected piped input stream and 
<code>src</code> is an unconnected piped output stream, they may 
be connected by either the call:
<blockquote><pre>
src.connect(snk)</pre></blockquote>
or the call:
<blockquote><pre>
snk.connect(src)</pre></blockquote>
The two calls have the same effect.

@param      snk   the piped input stream to connect to.
@exception  IOException  if an I/O error occurs."
      end

      operation 6882715 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified <code>byte</code> to the piped output stream. 
If a thread was reading data bytes from the connected piped input 
stream, but the thread is no longer alive, then an 
<code>IOException</code> is thrown.
<p>
Implements the <code>write</code> method of <code>OutputStream</code>.

@param      b   the <code>byte</code> to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 6882843 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified byte array 
starting at offset <code>off</code> to this piped output stream. 
If a thread was reading data bytes from the connected piped input 
stream, but the thread is no longer alive, then an 
<code>IOException</code> is thrown.

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@exception  IOException  if an I/O error occurs."
      end

      operation 6882971 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this output stream and forces any buffered output bytes 
to be written out. 
This will notify any readers that bytes are waiting in the pipe.

@exception IOException if an I/O error occurs."
      end

      operation 6883099 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this piped output stream and releases any system resources 
associated with this stream. This stream may no longer be used for 
writing bytes.

@exception  IOException  if an I/O error occurs."
      end
    end

    class 907419 "PipedReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Piped character-input streams.

@version 	1.15, 03/12/19
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 1765915 // <generalisation>
	relation 1765915 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1765915 // <generalisation>
	  b parent class_ref 364827 // Reader
      end

      attribute 2711707 "closedByWriter"
	package explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2711835 "closedByReader"
	package explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2711963 "connected"
	package explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1766043 // readSide (<unidirectional association>)
	relation 1766043 --->
	  a role_name "readSide" package
	    comment " REMIND: identification of the read and write sides needs to be
more sophisticated.  Either using thread groups (but what about
pipes within a thread?) or using finalization (but it may be a
long time until the next GC). 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1766043 // readSide (<unidirectional association>)
	  b parent class_ref 163227 // Thread
      end

      classrelation 1766171 // writeSide (<unidirectional association>)
	relation 1766171 --->
	  a role_name "writeSide" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1766171 // writeSide (<unidirectional association>)
	  b parent class_ref 163227 // Thread
      end

      attribute 2712091 "PIPE_SIZE"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  1024"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The size of the pipe's circular input buffer.
"
      end

      attribute 2712219 "buffer"
	package explicit_type "char"
	multiplicity "[]"
	init_value "=  new char[PIPE_SIZE]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The circular buffer into which incoming data is placed.
"
      end

      attribute 2712347 "in"
	package explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index of the position in the circular buffer at which the 
next character of data will be stored when received from the connected 
piped writer. <code>in&lt;0</code> implies the buffer is empty, 
<code>in==out</code> implies the buffer is full
"
      end

      attribute 2712475 "out"
	package explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index of the position in the circular buffer at which the next 
character of data will be read by this piped reader.
"
      end

      operation 6883227 "PipedReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "src" type class_ref 907547 // PipedWriter
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PipedReader</code> so
that it is connected to the piped writer
<code>src</code>. Data written to <code>src</code> 
will then be  available as input from this stream.

@param      src   the stream to connect to.
@exception  IOException  if an I/O error occurs."
      end

      operation 6883355 "PipedReader"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PipedReader</code> so
that it is not  yet connected. It must be
connected to a <code>PipedWriter</code>
before being used.

@see     java.io.PipedReader#connect(java.io.PipedWriter)
@see     java.io.PipedWriter#connect(java.io.PipedReader)"
      end

      operation 6883483 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "src" type class_ref 907547 // PipedWriter
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes this piped reader to be connected
to the piped  writer <code>src</code>.
If this object is already connected to some
other piped writer, an <code>IOException</code>
is thrown.
<p>
If <code>src</code> is an
unconnected piped writer and <code>snk</code>
is an unconnected piped reader, they
may be connected by either the call:
<p>
<pre><code>snk.connect(src)</code> </pre> 
<p>
or the call:
<p>
<pre><code>src.connect(snk)</code> </pre> 
<p>
The two
calls have the same effect.

@param      src   The piped writer to connect to.
@exception  IOException  if an I/O error occurs."
      end

      operation 6883611 "receive"
	package explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receives a char of data.  This method will block if no input is
available."
      end

      operation 6883739 "receive"
	package explicit_return_type "void"
	nparams 3
	  param in name "c" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receives data into an array of characters.  This method will
block until some input is available. "
      end

      operation 6883867 "receivedLast"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies all waiting threads that the last character of data has been
received."
      end

      operation 6883995 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next character of data from this piped stream.
If no character is available because the end of the stream 
has been reached, the value <code>-1</code> is returned. 
This method blocks until input data is available, the end of
the stream is detected, or an exception is thrown. 

If a thread was providing data characters
to the connected piped writer, but
the  thread is no longer alive, then an
<code>IOException</code> is thrown.

@return     the next character of data, or <code>-1</code> if the end of the
            stream is reached.
@exception  IOException  if the pipe is broken."
      end

      operation 6884123 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> characters of data from this piped
stream into an array of characters. Less than <code>len</code> characters
will be read if the end of the data stream is reached. This method 
blocks until at least one character of input is available. 
If a thread was providing data characters to the connected piped output, 
but the thread is no longer alive, then an <code>IOException</code> 
is thrown.

@param      cbuf     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the maximum number of characters read.
@return     the total number of characters read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the stream has been reached.
@exception  IOException  if an I/O error occurs."
      end

      operation 6884251 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether this stream is ready to be read.  A piped character
stream is ready if the circular buffer is not empty.

@exception  IOException  If an I/O error occurs"
      end

      operation 6884379 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this piped stream and releases any system resources 
associated with the stream. 

@exception  IOException  if an I/O error occurs."
      end
    end

    class 907547 "PipedWriter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Piped character-output streams.

@version 	1.16, 03/12/19
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 1766299 // <generalisation>
	relation 1766299 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1766299 // <generalisation>
	  b parent class_ref 446619 // Writer
      end

      classrelation 1766427 // sink (<unidirectional association>)
	relation 1766427 --->
	  a role_name "sink" private
	    comment " REMIND: identification of the read and write sides needs to be
more sophisticated.  Either using thread groups (but what about
pipes within a thread?) or using finalization (but it may be a
long time until the next GC). 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1766427 // sink (<unidirectional association>)
	  b parent class_ref 907419 // PipedReader
      end

      attribute 2712603 "closed"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " This flag records the open status of this particular writer. It
is independent of the status flags defined in PipedReader. It is
used to do a sanity check on connect.
"
      end

      operation 6884507 "PipedWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "snk" type class_ref 907419 // PipedReader
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a piped writer connected to the specified piped 
reader. Data characters written to this stream will then be 
available as input from <code>snk</code>.

@param      snk   The piped reader to connect to.
@exception  IOException  if an I/O error occurs."
      end

      operation 6884635 "PipedWriter"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a piped writer that is not yet connected to a 
piped reader. It must be connected to a piped reader, 
either by the receiver or the sender, before being used. 

@see     java.io.PipedReader#connect(java.io.PipedWriter)
@see     java.io.PipedWriter#connect(java.io.PipedReader)"
      end

      operation 6884763 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "snk" type class_ref 907419 // PipedReader
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this piped writer to a receiver. If this object
is already connected to some other piped reader, an 
<code>IOException</code> is thrown.
<p>
If <code>snk</code> is an unconnected piped reader and 
<code>src</code> is an unconnected piped writer, they may 
be connected by either the call:
<blockquote><pre>
src.connect(snk)</pre></blockquote>
or the call:
<blockquote><pre>
snk.connect(src)</pre></blockquote>
The two calls have the same effect.

@param      snk   the piped reader to connect to.
@exception  IOException  if an I/O error occurs."
      end

      operation 6884891 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified <code>char</code> to the piped output stream. 
If a thread was reading data characters from the connected piped input 
stream, but the thread is no longer alive, then an 
<code>IOException</code> is thrown.
<p>
Implements the <code>write</code> method of <code>Writer</code>.

@param      c   the <code>char</code> to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 6885019 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> characters from the specified character array 
starting at offset <code>off</code> to this piped output stream. 
If a thread was reading data characters from the connected piped input 
stream, but the thread is no longer alive, then an 
<code>IOException</code> is thrown.

@param      cbuf  the data.
@param      off   the start offset in the data.
@param      len   the number of characters to write.
@exception  IOException  if an I/O error occurs."
      end

      operation 6885147 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this output stream and forces any buffered output characters 
to be written out. 
This will notify any readers that characters are waiting in the pipe.

@exception IOException if an I/O error occurs."
      end

      operation 6885275 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this piped output stream and releases any system resources 
associated with this stream. This stream may no longer be used for 
writing characters.

@exception  IOException  if an I/O error occurs."
      end
    end

    class 907675 "PushbackInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>PushbackInputStream</code> adds
functionality to another input stream, namely
the  ability to \"push back\" or \"unread\"
one byte. This is useful in situations where
it is  convenient for a fragment of code
to read an indefinite number of data bytes
that  are delimited by a particular byte
value; after reading the terminating byte,
the  code fragment can \"unread\" it, so that
the next read operation on the input stream
will reread the byte that was pushed back.
For example, bytes representing the  characters
constituting an identifier might be terminated
by a byte representing an  operator character;
a method whose job is to read just an identifier
can read until it  sees the operator and
then push the operator back to be re-read.

@author  David Connelly
@author  Jonathan Payne
@version 1.36, 02/19/04
@since   JDK1.0"
      classrelation 1767707 // <generalisation>
	relation 1767707 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1767707 // <generalisation>
	  b parent class_ref 602651 // FilterInputStream
      end

      attribute 2713499 "buf"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The pushback buffer.
@since   JDK1.1
"
      end

      attribute 2713627 "pos"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The position within the pushback buffer from which the next byte will
be read.  When the buffer is empty, <code>pos</code> is equal to
<code>buf.length</code>; when the buffer is full, <code>pos</code> is
equal to zero.

@since   JDK1.1
"
      end

      operation 6896923 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check to make sure that this stream has not been closed"
      end

      operation 6897051 "PushbackInputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 179099 // InputStream
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PushbackInputStream</code>
with a pushback buffer of the specified <code>size</code>,
and saves its  argument, the input stream
<code>in</code>, for later use. Initially,
there is no pushed-back byte  (the field
<code>pushBack</code> is initialized to
<code>-1</code>).

@param  in    the input stream from which bytes will be read.
@param  size  the size of the pushback buffer.
@exception IllegalArgumentException if size is <= 0
@since  JDK1.1"
      end

      operation 6897179 "PushbackInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 179099 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PushbackInputStream</code>
and saves its  argument, the input stream
<code>in</code>, for later use. Initially,
there is no pushed-back byte  (the field
<code>pushBack</code> is initialized to
<code>-1</code>).

@param   in   the input stream from which bytes will be read."
      end

      operation 6897307 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from this input stream. The value 
byte is returned as an <code>int</code> in the range 
<code>0</code> to <code>255</code>. If no byte is available 
because the end of the stream has been reached, the value 
<code>-1</code> is returned. This method blocks until input data 
is available, the end of the stream is detected, or an exception 
is thrown. 

<p> This method returns the most recently pushed-back byte, if there is
one, and otherwise calls the <code>read</code> method of its underlying
input stream and returns whatever value that method returns.

@return     the next byte of data, or <code>-1</code> if the end of the
            stream has been reached.
@exception  IOException  if an I/O error occurs.
@see        java.io.InputStream#read()"
      end

      operation 6897435 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from this input stream into
an array of bytes.  This method first reads any pushed-back bytes; after
that, if fewer than <code>len</code> bytes have been read then it
reads from the underlying input stream.  This method blocks until at
least 1 byte of input is available.

@param      b     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the stream has been reached.
@exception  IOException  if an I/O error occurs.
@see        java.io.InputStream#read(byte[], int, int)"
      end

      operation 6897563 "unread"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes back a byte by copying it to the front of the pushback buffer.
After this method returns, the next byte to be read will have the value
<code>(byte)b</code>.

@param      b   the <code>int</code> value whose low-order 
			byte is to be pushed back.
@exception IOException If there is not enough room in the pushback
			      buffer for the byte."
      end

      operation 6897691 "unread"
	public explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes back a portion of an array of bytes by copying it to the front
of the pushback buffer.  After this method returns, the next byte to be
read will have the value <code>b[off]</code>, the byte after that will
have the value <code>b[off+1]</code>, and so forth.

@param b the byte array to push back.
@param off the start offset of the data.
@param len the number of bytes to push back.
@exception IOException If there is not enough room in the pushback
			      buffer for the specified number of bytes.
@since     JDK1.1"
      end

      operation 6897819 "unread"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes back an array of bytes by copying it to the front of the
pushback buffer.  After this method returns, the next byte to be read
will have the value <code>b[0]</code>, the byte after that will have the
value <code>b[1]</code>, and so forth.

@param b the byte array to push back
@exception IOException If there is not enough room in the pushback
			      buffer for the specified number of bytes.
@since     JDK1.1"
      end

      operation 6897947 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read from this input stream
without blocking.  This method calls the <code>available</code> method
of the underlying input stream; it returns that value plus the number of
bytes that have been pushed back.

@return     the number of bytes that can be read from the input stream
            without blocking.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in
@see        java.io.InputStream#available()"
      end

      operation 6898075 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips over and discards <code>n</code> bytes of data from this 
input stream. The <code>skip</code> method may, for a variety of 
reasons, end up skipping over some smaller number of bytes, 
possibly zero.  If <code>n</code> is negative, no bytes are skipped.

<p> The <code>skip</code> method of <code>PushbackInputStream</code>
first skips over the bytes in the pushback buffer, if any.  It then
calls the <code>skip</code> method of the underlying input stream if
more bytes need to be skipped.  The actual number of bytes skipped
is returned.

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in
@see        java.io.InputStream#skip(long n)
@since      1.2"
      end

      operation 6898203 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this input stream supports the <code>mark</code> and
<code>reset</code> methods, which it does not.

@return   <code>false</code>, since this class does not support the
          <code>mark</code> and <code>reset</code> methods.
@see     java.io.InputStream#mark(int)
@see     java.io.InputStream#reset()"
      end

      operation 6898331 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the current position in this input stream.

<p> The <code>mark</code> method of <code>PushbackInputStream</code>
does nothing.

@param   readlimit   the maximum limit of bytes that can be read before
                     the mark position becomes invalid.
@see     java.io.InputStream#reset()"
      end

      operation 6898459 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Repositions this stream to the position at the time the
<code>mark</code> method was last called on this input stream.

<p> The method <code>reset</code> for class
<code>PushbackInputStream</code> does nothing except throw an
<code>IOException</code>.

@exception  IOException  if this method is invoked.
@see     java.io.InputStream#mark(int)
@see     java.io.IOException"
      end

      operation 6898587 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this input stream and releases any system resources 
associated with the stream. 

@exception  IOException  if an I/O error occurs."
      end
    end

    class 907803 "PushbackReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A character-stream reader that allows characters to be pushed back into the
stream.

@version 	1.18, 03/12/19
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 1767835 // <generalisation>
	relation 1767835 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1767835 // <generalisation>
	  b parent class_ref 573211 // FilterReader
      end

      attribute 2713755 "buf"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Pushback buffer "
      end

      attribute 2713883 "pos"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Current position in buffer "
      end

      operation 6898715 "PushbackReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 364827 // Reader
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new pushback reader with a pushback buffer of the given size.

@param   in   The reader from which characters will be read
@param	size The size of the pushback buffer
@exception IllegalArgumentException if size is <= 0"
      end

      operation 6898843 "PushbackReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 364827 // Reader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new pushback reader with a one-character pushback buffer.

@param   in  The reader from which characters will be read"
      end

      operation 6898971 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check to make sure that the stream has not been closed. "
      end

      operation 6899099 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a single character.

@return     The character read, or -1 if the end of the stream has been
            reached

@exception  IOException  If an I/O error occurs"
      end

      operation 6899227 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read characters into a portion of an array.

@param      cbuf  Destination buffer
@param      off   Offset at which to start writing characters
@param      len   Maximum number of characters to read

@return     The number of characters read, or -1 if the end of the
            stream has been reached

@exception  IOException  If an I/O error occurs"
      end

      operation 6899355 "unread"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Push back a single character.

@param  c  The character to push back

@exception  IOException  If the pushback buffer is full,
                         or if some other I/O error occurs"
      end

      operation 6899483 "unread"
	public explicit_return_type "void"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Push back a portion of an array of characters by copying it to the
front of the pushback buffer.  After this method returns, the next
character to be read will have the value <code>cbuf[off]</code>, the
character after that will have the value <code>cbuf[off+1]</code>, and
so forth.

@param  cbuf  Character array
@param  off   Offset of first character to push back
@param  len   Number of characters to push back

@exception  IOException  If there is insufficient room in the pushback
                         buffer, or if some other I/O error occurs"
      end

      operation 6899611 "unread"
	public explicit_return_type "void"
	nparams 1
	  param in name "cbuf" explicit_type "char"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Push back an array of characters by copying it to the front of the
pushback buffer.  After this method returns, the next character to be
read will have the value <code>cbuf[0]</code>, the character after that
will have the value <code>cbuf[1]</code>, and so forth.

@param  cbuf  Character array to push back

@exception  IOException  If there is insufficient room in the pushback
                         buffer, or if some other I/O error occurs"
      end

      operation 6899739 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether this stream is ready to be read.

@exception  IOException  If an I/O error occurs"
      end

      operation 6899867 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark the present position in the stream. The <code>mark</code>
for class <code>PushbackReader</code> always throws an exception.

@exception  IOException  Always, since mark is not supported"
      end

      operation 6899995 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the stream. The <code>reset</code> method of 
<code>PushbackReader</code> always throws an exception.

@exception  IOException  Always, since reset is not supported"
      end

      operation 6900123 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether this stream supports the mark() operation, which it does
not."
      end

      operation 6900251 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the stream.

@exception  IOException  If an I/O error occurs"
      end

      operation 6900379 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skip characters.  This method will block until some characters are
available, an I/O error occurs, or the end of the stream is reached.

@param  n  The number of characters to skip

@return    The number of characters actually skipped

@exception  IllegalArgumentException  If <code>n</code> is negative.
@exception  IOException  If an I/O error occurs"
      end
    end

    class 907931 "RandomAccessFile"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Instances of this class support both reading and writing to a 
random access file. A random access file behaves like a large 
array of bytes stored in the file system. There is a kind of cursor, 
or index into the implied array, called the <em>file pointer</em>; 
input operations read bytes starting at the file pointer and advance 
the file pointer past the bytes read. If the random access file is 
created in read/write mode, then output operations are also available; 
output operations write bytes starting at the file pointer and advance 
the file pointer past the bytes written. Output operations that write 
past the current end of the implied array cause the array to be 
extended. The file pointer can be read by the 
<code>getFilePointer</code> method and set by the <code>seek</code> 
method. 
<p>
It is generally true of all the reading routines in this class that 
if end-of-file is reached before the desired number of bytes has been 
read, an <code>EOFException</code> (which is a kind of 
<code>IOException</code>) is thrown. If any byte cannot be read for 
any reason other than end-of-file, an <code>IOException</code> other 
than <code>EOFException</code> is thrown. In particular, an 
<code>IOException</code> may be thrown if the stream has been closed.

@author  unascribed
@version 1.78, 05/13/04
@since   JDK1.0"
      classrelation 1767963 // <realization>
	relation 1767963 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1767963 // <realization>
	  b parent class_ref 206107 // DataOutput
      end

      classrelation 1768091 // <realization>
	relation 1768091 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1768091 // <realization>
	  b parent class_ref 201755 // DataInput
      end

      classrelation 1768219 // <realization>
	relation 1768219 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1768219 // <realization>
	  b parent class_ref 179227 // Closeable
      end

      classrelation 1768347 // fd (<unidirectional association>)
	relation 1768347 --->
	  a role_name "fd" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1768347 // fd (<unidirectional association>)
	  b parent class_ref 904475 // FileDescriptor
      end

      classrelation 1768475 // channel (<unidirectional association>)
	relation 1768475 --->
	  a role_name "channel" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1768475 // channel (<unidirectional association>)
	  b parent class_ref 904731 // FileChannel
      end

      attribute 2714011 "rw"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2714139 "O_RDONLY"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2714267 "O_RDWR"
	class_attribute const_attribute private explicit_type "int"
	init_value "=    2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2714395 "O_SYNC"
	class_attribute const_attribute private explicit_type "int"
	init_value "=    4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2714523 "O_DSYNC"
	class_attribute const_attribute private explicit_type "int"
	init_value "=   8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6900507 "RandomAccessFile"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "mode" explicit_type "String"
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a random access file stream to read from, and optionally 
to write to, a file with the specified name. A new 
{@link FileDescriptor} object is created to represent the 
connection to the file.

<p> The <tt>mode</tt> argument specifies the access mode with which the
file is to be opened.  The permitted values and their meanings are as
specified for the <a
href=\"#mode\"><tt>RandomAccessFile(File,String)</tt></a> constructor.

<p>
If there is a security manager, its <code>checkRead</code> method
is called with the <code>name</code> argument
as its argument to see if read access to the file is allowed.
If the mode allows writing, the security manager's
<code>checkWrite</code> method
is also called with the <code>name</code> argument
as its argument to see if write access to the file is allowed.

@param      name   the system-dependent filename
@param      mode   the access <a href=\"#mode\">mode</a>
@exception  IllegalArgumentException  if the mode argument is not equal
              to one of <tt>\"r\"</tt>, <tt>\"rw\"</tt>, <tt>\"rws\"</tt>, or
              <tt>\"rwd\"</tt>
@exception FileNotFoundException
           if the mode is <tt>\"r\"</tt> but the given string does not
           denote an existing regular file, or if the mode begins with
           <tt>\"rw\"</tt> but the given string does not denote an
           existing, writable regular file and a new regular file of
           that name cannot be created, or if some other error occurs
           while opening or creating the file
@exception  SecurityException         if a security manager exists and its
              <code>checkRead</code> method denies read access to the file
              or the mode is \"rw\" and the security manager's
              <code>checkWrite</code> method denies write access to the file
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkRead(java.lang.String)
@see        java.lang.SecurityManager#checkWrite(java.lang.String)
@revised 1.4
@spec JSR-51"
      end

      operation 6900635 "RandomAccessFile"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" type class_ref 165147 // File
	  param in name "mode" explicit_type "String"
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a random access file stream to read from, and optionally to
write to, the file specified by the {@link File} argument.  A new {@link
FileDescriptor} object is created to represent this file connection.

<a name=\"mode\"><p> The <tt>mode</tt> argument specifies the access mode
in which the file is to be opened.  The permitted values and their
meanings are:

<blockquote><table summary=\"Access mode permitted values and meanings\">
<tr><th><p align=\"left\">Value</p></th><th><p align=\"left\">Meaning</p></th></tr>
<tr><td valign=\"top\"><tt>\"r\"</tt></td>
    <td> Open for reading only.  Invoking any of the <tt>write</tt>
    methods of the resulting object will cause an {@link
    java.io.IOException} to be thrown. </td></tr>
<tr><td valign=\"top\"><tt>\"rw\"</tt></td>
    <td> Open for reading and writing.  If the file does not already
    exist then an attempt will be made to create it. </td></tr>
<tr><td valign=\"top\"><tt>\"rws\"</tt></td>
    <td> Open for reading and writing, as with <tt>\"rw\"</tt>, and also
    require that every update to the file's content or metadata be
    written synchronously to the underlying storage device.  </td></tr>
<tr><td valign=\"top\"><tt>\"rwd\"&nbsp;&nbsp;</tt></td>
    <td> Open for reading and writing, as with <tt>\"rw\"</tt>, and also
    require that every update to the file's content be written
    synchronously to the underlying storage device. </td></tr>
</table></blockquote>

The <tt>\"rws\"</tt> and <tt>\"rwd\"</tt> modes work much like the {@link
java.nio.channels.FileChannel#force(boolean) force(boolean)} method of
the {@link java.nio.channels.FileChannel} class, passing arguments of
<tt>true</tt> and <tt>false</tt>, respectively, except that they always
apply to every I/O operation and are therefore often more efficient.  If
the file resides on a local storage device then when an invocation of a
method of this class returns it is guaranteed that all changes made to
the file by that invocation will have been written to that device.  This
is useful for ensuring that critical information is not lost in the
event of a system crash.  If the file does not reside on a local device
then no such guarantee is made.

<p> The <tt>\"rwd\"</tt> mode can be used to reduce the number of I/O
operations performed.  Using <tt>\"rwd\"</tt> only requires updates to the
file's content to be written to storage; using <tt>\"rws\"</tt> requires
updates to both the file's content and its metadata to be written, which
generally requires at least one more low-level I/O operation.

<p> If there is a security manager, its <code>checkRead</code> method is
called with the pathname of the <code>file</code> argument as its
argument to see if read access to the file is allowed.  If the mode
allows writing, the security manager's <code>checkWrite</code> method is
also called with the path argument to see if write access to the file is
allowed.

@param      file   the file object
@param      mode   the access mode, as described
                   <a href=\"#mode\">above</a>
@exception  IllegalArgumentException  if the mode argument is not equal
              to one of <tt>\"r\"</tt>, <tt>\"rw\"</tt>, <tt>\"rws\"</tt>, or
              <tt>\"rwd\"</tt>
@exception FileNotFoundException
           if the mode is <tt>\"r\"</tt> but the given file object does
           not denote an existing regular file, or if the mode begins
           with <tt>\"rw\"</tt> but the given file object does not denote
           an existing, writable regular file and a new regular file of
           that name cannot be created, or if some other error occurs
           while opening or creating the file
@exception  SecurityException         if a security manager exists and its
              <code>checkRead</code> method denies read access to the file
              or the mode is \"rw\" and the security manager's
              <code>checkWrite</code> method denies write access to the file
@see        java.lang.SecurityManager#checkRead(java.lang.String)
@see        java.lang.SecurityManager#checkWrite(java.lang.String)
@see        java.nio.channels.FileChannel#force(boolean)
@revised 1.4
@spec JSR-51"
      end

      operation 6900763 "getFD"
	public return_type class_ref 904475 // FileDescriptor
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the opaque file descriptor object associated with this
stream. </p>

@return     the file descriptor object associated with this stream.
@exception  IOException  if an I/O error occurs.
@see        java.io.FileDescriptor"
      end

      operation 6900891 "getChannel"
	public return_type class_ref 904731 // FileChannel
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unique {@link java.nio.channels.FileChannel FileChannel}
object associated with this file.

<p> The {@link java.nio.channels.FileChannel#position()
</code>position<code>} of the returned channel will always be equal to
this object's file-pointer offset as returned by the {@link
#getFilePointer getFilePointer} method.  Changing this object's
file-pointer offset, whether explicitly or by reading or writing bytes,
will change the position of the channel, and vice versa.  Changing the
file's length via this object will change the length seen via the file
channel, and vice versa.

@return  the file channel associated with this file

@since 1.4
@spec JSR-51"
      end

      operation 6901019 "open"
	private explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "mode" explicit_type "int"
	nexceptions 1
	  exception class_ref 509851 // FileNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a file and returns the file descriptor.  The file is
opened in read-write mode if the O_RDWR bit in <code>mode</code>
is true, else the file is opened as read-only.
If the <code>name</code> refers to a directory, an IOException
is thrown.

@param name the name of the file
@param mode the mode flags, a combination of the O_ constants
            defined above"
      end

      operation 6901147 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " 'Read' primitives

Reads a byte of data from this file. The byte is returned as an 
integer in the range 0 to 255 (<code>0x00-0x0ff</code>). This 
method blocks if no input is yet available. 
<p>
Although <code>RandomAccessFile</code> is not a subclass of 
<code>InputStream</code>, this method behaves in exactly the same 
way as the {@link InputStream#read()} method of 
<code>InputStream</code>.

@return     the next byte of data, or <code>-1</code> if the end of the
            file has been reached.
@exception  IOException  if an I/O error occurs. Not thrown if  
                         end-of-file has been reached."
      end

      operation 6901275 "readBytes"
	private explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a sub array as a sequence of bytes. 
@param b the buffer into which the data is read.
@param off the start offset of the data.
@param len the number of bytes to read.
@exception IOException If an I/O error has occurred."
      end

      operation 6901403 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from this file into an 
array of bytes. This method blocks until at least one byte of input 
is available. 
<p>
Although <code>RandomAccessFile</code> is not a subclass of 
<code>InputStream</code>, this method behaves in exactly the 
same way as the {@link InputStream#read(byte[], int, int)} method of 
<code>InputStream</code>.

@param      b     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the file has been reached.
@exception  IOException  if an I/O error occurs."
      end

      operation 6901531 "read"
	public explicit_return_type "int"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>b.length</code> bytes of data from this file 
into an array of bytes. This method blocks until at least one byte 
of input is available. 
<p>
Although <code>RandomAccessFile</code> is not a subclass of 
<code>InputStream</code>, this method behaves in exactly the 
same way as the {@link InputStream#read(byte[])} method of 
<code>InputStream</code>.

@param      b   the buffer into which the data is read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            this file has been reached.
@exception  IOException  if an I/O error occurs."
      end

      operation 6901659 "readFully"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads <code>b.length</code> bytes from this file into the byte 
array, starting at the current file pointer. This method reads 
repeatedly from the file until the requested number of bytes are 
read. This method blocks until the requested number of bytes are 
read, the end of the stream is detected, or an exception is thrown. 

@param      b   the buffer into which the data is read.
@exception  EOFException  if this file reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs.       "
      end

      operation 6901787 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads exactly <code>len</code> bytes from this file into the byte 
array, starting at the current file pointer. This method reads 
repeatedly from the file until the requested number of bytes are 
read. This method blocks until the requested number of bytes are 
read, the end of the stream is detected, or an exception is thrown. 

@param      b     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the number of bytes to read.
@exception  EOFException  if this file reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 6901915 "skipBytes"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to skip over <code>n</code> bytes of input discarding the 
skipped bytes. 
<p>

This method may skip over some smaller number of bytes, possibly zero. 
This may result from any of a number of conditions; reaching end of 
file before <code>n</code> bytes have been skipped is only one 
possibility. This method never throws an <code>EOFException</code>. 
The actual number of bytes skipped is returned.  If <code>n</code> 
is negative, no bytes are skipped.

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped.
@exception  IOException  if an I/O error occurs."
      end

      operation 6902043 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " 'Write' primitives

Writes the specified byte to this file. The write starts at 
the current file pointer.

@param      b   the <code>byte</code> to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 6902171 "writeBytes"
	private explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sub array as a sequence of bytes. 
@param b the data to be written

@param off the start offset in the data
@param len the number of bytes that are written
@exception IOException If an I/O error has occurred."
      end

      operation 6902299 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>b.length</code> bytes from the specified byte array 
to this file, starting at the current file pointer. 

@param      b   the data.
@exception  IOException  if an I/O error occurs."
      end

      operation 6902427 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified byte array 
starting at offset <code>off</code> to this file. 

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@exception  IOException  if an I/O error occurs."
      end

      operation 6902555 "getFilePointer"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " 'Random access' stuff

Returns the current offset in this file. 

@return     the offset from the beginning of the file, in bytes,
            at which the next read or write occurs.
@exception  IOException  if an I/O error occurs."
      end

      operation 6902683 "seek"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the file-pointer offset, measured from the beginning of this 
file, at which the next read or write occurs.  The offset may be 
set beyond the end of the file. Setting the offset beyond the end 
of the file does not change the file length.  The file length will 
change only by writing after the offset has been set beyond the end 
of the file. 

@param      pos   the offset position, measured in bytes from the 
                  beginning of the file, at which to set the file 
                  pointer.
@exception  IOException  if <code>pos</code> is less than 
                         <code>0</code> or if an I/O error occurs."
      end

      operation 6902811 "length"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of this file.

@return     the length of this file, measured in bytes.
@exception  IOException  if an I/O error occurs."
      end

      operation 6902939 "setLength"
	public explicit_return_type "void"
	nparams 1
	  param in name "newLength" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the length of this file.

<p> If the present length of the file as returned by the
<code>length</code> method is greater than the <code>newLength</code>
argument then the file will be truncated.  In this case, if the file
offset as returned by the <code>getFilePointer</code> method is greater
than <code>newLength</code> then after this method returns the offset
will be equal to <code>newLength</code>.

<p> If the present length of the file as returned by the
<code>length</code> method is smaller than the <code>newLength</code>
argument then the file will be extended.  In this case, the contents of
the extended portion of the file are not defined.

@param      newLength    The desired length of the file
@exception  IOException  If an I/O error occurs
@since      1.2"
      end

      operation 6903067 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this random access file stream and releases any system 
resources associated with the stream. A closed random access 
file cannot perform input or output operations and cannot be 
reopened.

<p> If this file has an associated channel then the channel is closed
as well.

@exception  IOException  if an I/O error occurs.

@revised 1.4
@spec JSR-51"
      end

      operation 6903195 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Some \"reading/writing Java data types\" methods stolen from
  DataInputStream and DataOutputStream.


Reads a <code>boolean</code> from this file. This method reads a 
single byte from the file, starting at the current file pointer. 
A value of <code>0</code> represents 
<code>false</code>. Any other value represents <code>true</code>. 
This method blocks until the byte is read, the end of the stream 
is detected, or an exception is thrown. 

@return     the <code>boolean</code> value read.
@exception  EOFException  if this file has reached the end.
@exception  IOException   if an I/O error occurs."
      end

      operation 6903323 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a signed eight-bit value from this file. This method reads a 
byte from the file, starting from the current file pointer. 
If the byte read is <code>b</code>, where 
<code>0&nbsp;&lt;=&nbsp;b&nbsp;&lt;=&nbsp;255</code>, 
then the result is:
<blockquote><pre>
    (byte)(b)
</pre></blockquote>
<p>
This method blocks until the byte is read, the end of the stream 
is detected, or an exception is thrown. 

@return     the next byte of this file as a signed eight-bit
            <code>byte</code>.
@exception  EOFException  if this file has reached the end.
@exception  IOException   if an I/O error occurs."
      end

      operation 6903451 "readUnsignedByte"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an unsigned eight-bit number from this file. This method reads 
a byte from this file, starting at the current file pointer, 
and returns that byte. 
<p>
This method blocks until the byte is read, the end of the stream 
is detected, or an exception is thrown. 

@return     the next byte of this file, interpreted as an unsigned
            eight-bit number.
@exception  EOFException  if this file has reached the end.
@exception  IOException   if an I/O error occurs."
      end

      operation 6903579 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a signed 16-bit number from this file. The method reads two 
bytes from this file, starting at the current file pointer. 
If the two bytes read, in order, are 
<code>b1</code> and <code>b2</code>, where each of the two values is 
between <code>0</code> and <code>255</code>, inclusive, then the 
result is equal to:
<blockquote><pre>
    (short)((b1 &lt;&lt; 8) | b2)
</pre></blockquote>
<p>
This method blocks until the two bytes are read, the end of the 
stream is detected, or an exception is thrown. 

@return     the next two bytes of this file, interpreted as a signed
            16-bit number.
@exception  EOFException  if this file reaches the end before reading
              two bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 6903707 "readUnsignedShort"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an unsigned 16-bit number from this file. This method reads 
two bytes from the file, starting at the current file pointer. 
If the bytes read, in order, are 
<code>b1</code> and <code>b2</code>, where 
<code>0&nbsp;&lt;=&nbsp;b1, b2&nbsp;&lt;=&nbsp;255</code>, 
then the result is equal to:
<blockquote><pre>
    (b1 &lt;&lt; 8) | b2
</pre></blockquote>
<p>
This method blocks until the two bytes are read, the end of the 
stream is detected, or an exception is thrown. 

@return     the next two bytes of this file, interpreted as an unsigned
            16-bit integer.
@exception  EOFException  if this file reaches the end before reading
              two bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 6903835 "readChar"
	public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a Unicode character from this file. This method reads two
bytes from the file, starting at the current file pointer. 
If the bytes read, in order, are 
<code>b1</code> and <code>b2</code>, where 
<code>0&nbsp;&lt;=&nbsp;b1,&nbsp;b2&nbsp;&lt;=&nbsp;255</code>, 
then the result is equal to:
<blockquote><pre>
    (char)((b1 &lt;&lt; 8) | b2)
</pre></blockquote>
<p>
This method blocks until the two bytes are read, the end of the 
stream is detected, or an exception is thrown. 

@return     the next two bytes of this file as a Unicode character.
@exception  EOFException  if this file reaches the end before reading
              two bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 6903963 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a signed 32-bit integer from this file. This method reads 4 
bytes from the file, starting at the current file pointer. 
If the bytes read, in order, are <code>b1</code>,
<code>b2</code>, <code>b3</code>, and <code>b4</code>, where 
<code>0&nbsp;&lt;=&nbsp;b1, b2, b3, b4&nbsp;&lt;=&nbsp;255</code>, 
then the result is equal to:
<blockquote><pre>
    (b1 &lt;&lt; 24) | (b2 &lt;&lt; 16) + (b3 &lt;&lt; 8) + b4
</pre></blockquote>
<p>
This method blocks until the four bytes are read, the end of the 
stream is detected, or an exception is thrown. 

@return     the next four bytes of this file, interpreted as an
            <code>int</code>.
@exception  EOFException  if this file reaches the end before reading
              four bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 6904091 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a signed 64-bit integer from this file. This method reads eight
bytes from the file, starting at the current file pointer. 
If the bytes read, in order, are 
<code>b1</code>, <code>b2</code>, <code>b3</code>, 
<code>b4</code>, <code>b5</code>, <code>b6</code>, 
<code>b7</code>, and <code>b8,</code> where:
<blockquote><pre>
    0 &lt;= b1, b2, b3, b4, b5, b6, b7, b8 &lt;=255,
</pre></blockquote>
<p>
then the result is equal to:
<p><blockquote><pre>
    ((long)b1 &lt;&lt; 56) + ((long)b2 &lt;&lt; 48)
    + ((long)b3 &lt;&lt; 40) + ((long)b4 &lt;&lt; 32)
    + ((long)b5 &lt;&lt; 24) + ((long)b6 &lt;&lt; 16)
    + ((long)b7 &lt;&lt; 8) + b8
</pre></blockquote>
<p>
This method blocks until the eight bytes are read, the end of the 
stream is detected, or an exception is thrown. 

@return     the next eight bytes of this file, interpreted as a
            <code>long</code>.
@exception  EOFException  if this file reaches the end before reading
              eight bytes.
@exception  IOException   if an I/O error occurs."
      end

      operation 6904219 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a <code>float</code> from this file. This method reads an 
<code>int</code> value, starting at the current file pointer, 
as if by the <code>readInt</code> method 
and then converts that <code>int</code> to a <code>float</code> 
using the <code>intBitsToFloat</code> method in class 
<code>Float</code>. 
<p>
This method blocks until the four bytes are read, the end of the 
stream is detected, or an exception is thrown. 

@return     the next four bytes of this file, interpreted as a
            <code>float</code>.
@exception  EOFException  if this file reaches the end before reading
            four bytes.
@exception  IOException   if an I/O error occurs.
@see        java.io.RandomAccessFile#readInt()
@see        java.lang.Float#intBitsToFloat(int)"
      end

      operation 6904347 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a <code>double</code> from this file. This method reads a 
<code>long</code> value, starting at the current file pointer, 
as if by the <code>readLong</code> method 
and then converts that <code>long</code> to a <code>double</code> 
using the <code>longBitsToDouble</code> method in 
class <code>Double</code>.
<p>
This method blocks until the eight bytes are read, the end of the 
stream is detected, or an exception is thrown. 

@return     the next eight bytes of this file, interpreted as a
            <code>double</code>.
@exception  EOFException  if this file reaches the end before reading
            eight bytes.
@exception  IOException   if an I/O error occurs.
@see        java.io.RandomAccessFile#readLong()
@see        java.lang.Double#longBitsToDouble(long)"
      end

      operation 6904475 "readLine"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next line of text from this file.  This method successively
reads bytes from the file, starting at the current file pointer, 
until it reaches a line terminator or the end
of the file.  Each byte is converted into a character by taking the
byte's value for the lower eight bits of the character and setting the
high eight bits of the character to zero.  This method does not,
therefore, support the full Unicode character set.

<p> A line of text is terminated by a carriage-return character
(<code>'&#92;r'</code>), a newline character (<code>'&#92;n'</code>), a
carriage-return character immediately followed by a newline character,
or the end of the file.  Line-terminating characters are discarded and
are not included as part of the string returned.

<p> This method blocks until a newline character is read, a carriage
return and the byte following it are read (to see if it is a newline),
the end of the file is reached, or an exception is thrown.

@return     the next line of text from this file, or null if end
            of file is encountered before even one byte is read.
@exception  IOException  if an I/O error occurs."
      end

      operation 6904603 "readUTF"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a string from this file. The string has been encoded 
using a
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
format. 
<p>
The first two bytes are read, starting from the current file 
pointer, as if by 
<code>readUnsignedShort</code>. This value gives the number of 
following bytes that are in the encoded string, not
the length of the resulting string. The following bytes are then 
interpreted as bytes encoding characters in the modified UTF-8 format 
and are converted into characters. 
<p>
This method blocks until all the bytes are read, the end of the 
stream is detected, or an exception is thrown. 

@return     a Unicode string.
@exception  EOFException            if this file reaches the end before
              reading all the bytes.
@exception  IOException             if an I/O error occurs.
@exception  UTFDataFormatException  if the bytes do not represent 
              valid modified UTF-8 encoding of a Unicode string.
@see        java.io.RandomAccessFile#readUnsignedShort()"
      end

      operation 6904731 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>boolean</code> to the file as a one-byte value. The 
value <code>true</code> is written out as the value 
<code>(byte)1</code>; the value <code>false</code> is written out 
as the value <code>(byte)0</code>. The write starts at 
the current position of the file pointer.

@param      v   a <code>boolean</code> value to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 6904859 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>byte</code> to the file as a one-byte value. The 
write starts at the current position of the file pointer.

@param      v   a <code>byte</code> value to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 6904987 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>short</code> to the file as two bytes, high byte first. 
The write starts at the current position of the file pointer.

@param      v   a <code>short</code> to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 6905115 "writeChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>char</code> to the file as a two-byte value, high
byte first. The write starts at the current position of the 
file pointer.

@param      v   a <code>char</code> value to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 6905243 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an <code>int</code> to the file as four bytes, high byte first. 
The write starts at the current position of the file pointer.

@param      v   an <code>int</code> to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 6905371 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>long</code> to the file as eight bytes, high byte first. 
The write starts at the current position of the file pointer.

@param      v   a <code>long</code> to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 6905499 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "float"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the float argument to an <code>int</code> using the 
<code>floatToIntBits</code> method in class <code>Float</code>, 
and then writes that <code>int</code> value to the file as a 
four-byte quantity, high byte first. The write starts at the 
current position of the file pointer.

@param      v   a <code>float</code> value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.lang.Float#floatToIntBits(float)"
      end

      operation 6905627 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "double"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the double argument to a <code>long</code> using the 
<code>doubleToLongBits</code> method in class <code>Double</code>, 
and then writes that <code>long</code> value to the file as an 
eight-byte quantity, high byte first. The write starts at the current 
position of the file pointer.

@param      v   a <code>double</code> value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.lang.Double#doubleToLongBits(double)"
      end

      operation 6905755 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the string to the file as a sequence of bytes. Each 
character in the string is written out, in sequence, by discarding 
its high eight bits. The write starts at the current position of 
the file pointer.

@param      s   a string of bytes to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 6905883 "writeChars"
	public explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string to the file as a sequence of characters. Each 
character is written to the data output stream as if by the 
<code>writeChar</code> method. The write starts at the current 
position of the file pointer.

@param      s   a <code>String</code> value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.RandomAccessFile#writeChar(int)"
      end

      operation 6906011 "writeUTF"
	public explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string to the file using
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
encoding in a machine-independent manner. 
<p>
First, two bytes are written to the file, starting at the 
current file pointer, as if by the 
<code>writeShort</code> method giving the number of bytes to 
follow. This value is the number of bytes actually written out, 
not the length of the string. Following the length, each character 
of the string is output, in sequence, using the modified UTF-8 encoding 
for each character. 

@param      str   a string to be written.
@exception  IOException  if an I/O error occurs."
      end

      operation 6906139 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6906267 "close0"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 160283 "initialization"
	
	cpp "" ""
	java "  static {
	initIDs();
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 908059 "SequenceInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>SequenceInputStream</code> represents
the logical concatenation of other input
streams. It starts out with an ordered
collection of input streams and reads from
the first one until end of file is reached,
whereupon it reads from the second one,
and so on, until end of file is reached
on the last of the contained input streams.

@author  Author van Hoff
@version 1.28, 05/12/04
@since   JDK1.0"
      classrelation 1768603 // <generalisation>
	relation 1768603 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1768603 // <generalisation>
	  b parent class_ref 179099 // InputStream
      end

      classrelation 1768731 // e (<unidirectional association>)
	relation 1768731 --->
	  a role_name "e" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1768731 // e (<unidirectional association>)
	  b parent class_ref 144411 // Enumeration
      end

      classrelation 1768859 // in (<unidirectional association>)
	relation 1768859 --->
	  a role_name "in" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1768859 // in (<unidirectional association>)
	  b parent class_ref 179099 // InputStream
      end

      operation 6906395 "SequenceInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 144411 // Enumeration
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends InputStream> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a newly created <code>SequenceInputStream</code>
by remembering the argument, which must
be an <code>Enumeration</code>  that produces
objects whose run-time type is <code>InputStream</code>.
The input streams that are  produced by
the enumeration will be read, in order,
to provide the bytes to be read  from this
<code>SequenceInputStream</code>. After
each input stream from the enumeration
is exhausted, it is closed by calling its
<code>close</code> method.

@param   e   an enumeration of input streams.
@see     java.util.Enumeration"
      end

      operation 6906523 "SequenceInputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "s1" type class_ref 179099 // InputStream
	  param inout name "s2" type class_ref 179099 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a newly
created <code>SequenceInputStream</code>
by remembering the two arguments, which
will be read in order, first <code>s1</code>
and then <code>s2</code>, to provide the
bytes to be read from this <code>SequenceInputStream</code>.

@param   s1   the first input stream to read.
@param   s2   the second input stream to read."
      end

      operation 6906651 "nextStream"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Continues reading in the next stream if an EOF is reached."
      end

      operation 6906779 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes available on the current stream.

@since   JDK1.1"
      end

      operation 6906907 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from this input stream. The byte is
returned as an <code>int</code> in the range <code>0</code> to
<code>255</code>. If no byte is available because the end of the
stream has been reached, the value <code>-1</code> is returned.
This method blocks until input data is available, the end of the
stream is detected, or an exception is thrown.
<p>
This method
tries to read one character from the current substream. If it
reaches the end of the stream, it calls the <code>close</code>
method of the current substream and begins reading from the next
substream.

@return     the next byte of data, or <code>-1</code> if the end of the
            stream is reached.
@exception  IOException  if an I/O error occurs."
      end

      operation 6907035 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from this input stream
into an array of bytes. This method blocks until at least 1 byte
of input is available. If the first argument is <code>null</code>,
up to <code>len</code> bytes are read and discarded.
<p>
The <code>read</code> method of <code>SequenceInputStream</code>
tries to read the data from the current substream. If it fails to
read any characters because the substream has reached the end of
the stream, it calls the <code>close</code> method of the current
substream and begins reading from the next substream.

@param      b     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the maximum number of bytes read.
@return     int   the number of bytes read.
@exception  IOException  if an I/O error occurs."
      end

      operation 6907163 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this input stream and releases any system resources
associated with the stream.
A closed <code>SequenceInputStream</code>
cannot  perform input operations and cannot
be reopened.
<p>
If this stream was created
from an enumeration, all remaining elements
are requested from the enumeration and closed
before the <code>close</code> method returns.
of <code>InputStream</code> .

@exception  IOException  if an I/O error occurs."
      end
    end

    class 908187 "StringBufferInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class allows an application to create an input stream in
which the bytes read are supplied by the contents of a string.
Applications can also read bytes from a byte array by using a
<code>ByteArrayInputStream</code>.
<p>
Only the low eight bits of each character in the string are used by
this class.

@author     Arthur van Hoff
@version    1.26, 05/18/04
@see        java.io.ByteArrayInputStream
@see        java.io.StringReader
@since      JDK1.0
@deprecated This class does not properly convert characters into bytes.  As
            of JDK&nbsp;1.1, the preferred way to create a stream from a
            string is via the <code>StringReader</code> class."
      classrelation 1769499 // <generalisation>
	relation 1769499 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1769499 // <generalisation>
	  b parent class_ref 179099 // InputStream
      end

      attribute 2717851 "buffer"
	protected explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The string from which bytes are read.
"
      end

      attribute 2717979 "pos"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index of the next character to read from the input stream buffer.

@see        java.io.StringBufferInputStream#buffer
"
      end

      attribute 2718107 "count"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of valid characters in the input stream buffer.

@see        java.io.StringBufferInputStream#buffer
"
      end

      operation 6910363 "StringBufferInputStream"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a string input stream to read data from the specified string.

@param      s   the underlying input buffer."
      end

      operation 6910491 "read"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from this input stream. The value
byte is returned as an <code>int</code> in the range
<code>0</code> to <code>255</code>. If no byte is available
because the end of the stream has been reached, the value
<code>-1</code> is returned.
<p>
The <code>read</code> method of
<code>StringBufferInputStream</code> cannot block. It returns the
low eight bits of the next character in this input stream's buffer.

@return     the next byte of data, or <code>-1</code> if the end of the
            stream is reached."
      end

      operation 6910619 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from this input stream
into an array of bytes.
<p>
The <code>read</code> method of
<code>StringBufferInputStream</code> cannot block. It copies the
low eight bits from the characters in this input stream's buffer into
the byte array argument.

@param      b     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the stream has been reached."
      end

      operation 6910747 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips <code>n</code> bytes of input from this input stream. Fewer
bytes might be skipped if the end of the input stream is reached.

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped."
      end

      operation 6910875 "available"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read from the input
stream without blocking.

@return     the value of <code>count&nbsp;-&nbsp;pos</code>, which is the
            number of bytes remaining to be read from the input buffer."
      end

      operation 6911003 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the input stream to begin reading from the first character
of this input stream's underlying buffer."
      end
    end

    class 908315 "StringReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A character stream whose source is a string.

@version 	1.24, 04/02/19
@author	Mark Reinhold
@since	JDK1.1"
      classrelation 1769627 // <generalisation>
	relation 1769627 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1769627 // <generalisation>
	  b parent class_ref 364827 // Reader
      end

      attribute 2718235 "str"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2718363 "length"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2718491 "next"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2718619 "mark"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6911131 "StringReader"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new string reader.

@param s  String providing the character stream."
      end

      operation 6911259 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check to make sure that the stream has not been closed "
      end

      operation 6911387 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a single character.

@return     The character read, or -1 if the end of the stream has been
            reached

@exception  IOException  If an I/O error occurs"
      end

      operation 6911515 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "cbuf" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read characters into a portion of an array.

@param      cbuf  Destination buffer
@param      off   Offset at which to start writing characters
@param      len   Maximum number of characters to read

@return     The number of characters read, or -1 if the end of the
            stream has been reached

@exception  IOException  If an I/O error occurs"
      end

      operation 6911643 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "ns" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips the specified number of characters in the stream. Returns
the number of characters that were skipped.

<p>The <code>ns</code> parameter may be negative, even though the
<code>skip</code> method of the {@link Reader} superclass throws
an exception in this case. Negative values of <code>ns</code> cause the
stream to skip backwards. Negative return values indicate a skip
backwards. It is not possible to skip backwards past the beginning of
the string.

<p>If the entire string has been read or skipped, then this method has
no effect and always returns 0.

@exception  IOException  If an I/O error occurs"
      end

      operation 6911771 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether this stream is ready to be read.

@return True if the next read() is guaranteed not to block for input

@exception  IOException  If the stream is closed"
      end

      operation 6911899 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether this stream supports the mark() operation, which it does."
      end

      operation 6912027 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark the present position in the stream.  Subsequent calls to reset()
will reposition the stream to this point.

@param  readAheadLimit  Limit on the number of characters that may be
                        read while still preserving the mark.  Because
                        the stream's input comes from a string, there
                        is no actual limit, so this argument must not
                        be negative, but is otherwise ignored.

@exception  IllegalArgumentException  If readAheadLimit is < 0
@exception  IOException  If an I/O error occurs"
      end

      operation 6912155 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the stream to the most recent mark, or to the beginning of the
string if it has never been marked.

@exception  IOException  If an I/O error occurs"
      end

      operation 6912283 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the stream."
      end
    end

    class 908443 "UTFDataFormatException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that a malformed string in
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
format has been read in a data
input stream or by any class that implements the data input
interface.
See the
<a href=\"DataInput.html#modified-utf-8\"><code>DataInput</code></a>
class description for the format in
which modified UTF-8 strings are read and written.

@author  Frank Yellin
@version 1.13, 05/13/04
@see     java.io.DataInput
@see     java.io.DataInputStream#readUTF(java.io.DataInput)
@see     java.io.IOException
@since   JDK1.0"
      classrelation 1770267 // <generalisation>
	relation 1770267 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1770267 // <generalisation>
	  b parent class_ref 179355 // IOException
      end

      operation 6914459 "UTFDataFormatException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>UTFDataFormatException</code> with
<code>null</code> as its error detail message."
      end

      operation 6914587 "UTFDataFormatException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>UTFDataFormatException</code> with the
specified detail message. The string <code>s</code> can be
retrieved later by the
<code>{@link java.lang.Throwable#getMessage}</code>
method of class <code>java.lang.Throwable</code>.

@param   s   the detail message."
      end
    end

    class 908571 "Win32FileSystem"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1770395 // <generalisation>
	relation 1770395 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1770395 // <generalisation>
	  b parent class_ref 903963 // FileSystem
      end

      attribute 2718747 "slash"
	const_attribute private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2718875 "altSlash"
	const_attribute private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2719003 "semicolon"
	const_attribute private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6914715 "Win32FileSystem"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6914843 "isSlash"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6914971 "isLetter"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6915099 "slashify"
	private explicit_return_type "String"
	nparams 1
	  param in name "p" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6915227 "getSeparator"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Normalization and construction -- "
      end

      operation 6915355 "getPathSeparator"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6915483 "normalizePrefix"
	private explicit_return_type "int"
	nparams 3
	  param in name "path" explicit_type "String"
	  param in name "len" explicit_type "int"
	  param inout name "sb" type class_ref 198171 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A normal Win32 pathname contains no duplicate slashes, except possibly
for a UNC prefix, and does not end with a slash.  It may be the empty
string.  Normalized Win32 pathnames have the convenient property that
the length of the prefix almost uniquely identifies the type of the path
and whether it is absolute or relative:

0  relative to both drive and directory
1  drive-relative (begins with '\\\\')
2  absolute UNC (if first char is '\\\\'),
else directory-relative (has form \"z:foo\")
3  absolute local pathname (begins with \"z:\\\\\")"
      end

      operation 6915611 "normalize"
	private explicit_return_type "String"
	nparams 3
	  param in name "path" explicit_type "String"
	  param in name "len" explicit_type "int"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Normalize the given pathname, whose length is len, starting at the given
offset; everything before this offset is already normal. "
      end

      operation 6915739 "normalize"
	public explicit_return_type "String"
	nparams 1
	  param in name "path" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check that the given pathname is normal.  If not, invoke the real
normalizer on the part of the pathname that requires normalization.
This way we iterate through the whole pathname string only once. "
      end

      operation 6915867 "prefixLength"
	public explicit_return_type "int"
	nparams 1
	  param in name "path" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6915995 "resolve"
	public explicit_return_type "String"
	nparams 2
	  param in name "parent" explicit_type "String"
	  param in name "child" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6916123 "getDefaultParent"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6916251 "fromURIPath"
	public explicit_return_type "String"
	nparams 1
	  param in name "path" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6916379 "isAbsolute"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Path operations -- "
      end

      operation 6916507 "getDriveDirectory"
	protected explicit_return_type "String"
	nparams 1
	  param in name "drive" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2719131 "driveDirCache"
	class_attribute private explicit_type "String"
	multiplicity "[]"
	init_value "=  new String[26]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6916635 "driveIndex"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "d" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6916763 "getDriveDirectory"
	private explicit_return_type "String"
	nparams 1
	  param in name "drive" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6916891 "getUserPath"
	private explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6917019 "getDrive"
	private explicit_return_type "String"
	nparams 1
	  param in name "path" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6917147 "resolve"
	public explicit_return_type "String"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1770523 // cache (<unidirectional association>)
	relation 1770523 --->
	  a role_name "cache" init_value "=  new ExpiringCache()" private
	    comment " Caches for canonicalization results to improve startup performance.
 The first cache handles repeated canonicalizations of the same path
 name. The prefix cache handles repeated canonicalizations within the
 same directory, and must not create results differing from the true
 canonicalization algorithm in canonicalize_md.c. For this reason the
 prefix cache is conservative and is not used for complex path names.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1770523 // cache (<unidirectional association>)
	  b parent class_ref 903707 // ExpiringCache
      end

      classrelation 1770651 // prefixCache (<unidirectional association>)
	relation 1770651 --->
	  a role_name "prefixCache" init_value "=  new ExpiringCache()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1770651 // prefixCache (<unidirectional association>)
	  b parent class_ref 903707 // ExpiringCache
      end

      operation 6917275 "canonicalize"
	public explicit_return_type "String"
	nparams 1
	  param in name "path" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6917403 "canonicalize0"
	protected explicit_return_type "String"
	nparams 1
	  param in name "path" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6917531 "canonicalizeWithPrefix"
	protected explicit_return_type "String"
	nparams 2
	  param in name "canonicalPrefix" explicit_type "String"
	  param in name "filename" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6917659 "canonicalizeWithPrefix0"
	protected explicit_return_type "String"
	nparams 2
	  param in name "canonicalPrefix" explicit_type "String"
	  param in name "pathWithCanonicalPrefix" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Run the canonicalization operation assuming that the prefix
 (everything up to the last filename) is canonical; just gets
 the canonical name of the last element of the path"
      end

      operation 6917787 "parentOrNull"
	class_operation package explicit_return_type "String"
	nparams 1
	  param in name "path" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Best-effort attempt to get parent of this path; used for
 optimization of filename canonicalization. This must return null for
 any cases where the code in canonicalize_md.c would throw an
 exception or otherwise deal with non-simple pathnames like handling
 of \".\" and \"..\". It may conservatively return null in other
 situations as well. Returning null will cause the underlying
 (expensive) canonicalization routine to be called."
      end

      operation 6917915 "getBooleanAttributes"
	public explicit_return_type "int"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Attribute accessors -- "
      end

      operation 6918043 "checkAccess"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "f" type class_ref 165147 // File
	  param inout name "write" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6918171 "getLastModifiedTime"
	public explicit_return_type "long"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6918299 "getLength"
	public explicit_return_type "long"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6918427 "createFileExclusively"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "path" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- File operations -- "
      end

      operation 6918555 "delete"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6918683 "delete0"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6918811 "deleteOnExit"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6918939 "list"
	public explicit_return_type "String"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6919067 "createDirectory"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6919195 "rename"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "f1" type class_ref 165147 // File
	  param inout name "f2" type class_ref 165147 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6919323 "rename0"
	protected explicit_return_type "boolean"
	nparams 2
	  param inout name "f1" type class_ref 165147 // File
	  param inout name "f2" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6919451 "setLastModifiedTime"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "f" type class_ref 165147 // File
	  param in name "time" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6919579 "setReadOnly"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6919707 "access"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "path" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Filesystem interface -- "
      end

      operation 6919835 "listRoots0"
	class_operation private explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6919963 "listRoots"
	public return_type class_ref 165147 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6920091 "compare"
	public explicit_return_type "int"
	nparams 2
	  param inout name "f1" type class_ref 165147 // File
	  param inout name "f2" type class_ref 165147 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Basic infrastructure -- "
      end

      operation 6920219 "hashCode"
	public explicit_return_type "int"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6920347 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 160411 "initialization"
	
	cpp "" ""
	java "  static {
	initIDs();
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 908699 "WinNTFileSystem"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unicode-aware FileSystem for Windows NT/2000.

@author Konstantin Kladko
@version 1.9, 04/03/20
@since 1.4"
      classrelation 1770779 // <generalisation>
	relation 1770779 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1770779 // <generalisation>
	  b parent class_ref 908571 // Win32FileSystem
      end

      operation 6920475 "canonicalize0"
	protected explicit_return_type "String"
	nparams 1
	  param in name "path" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6920603 "canonicalizeWithPrefix0"
	protected explicit_return_type "String"
	nparams 2
	  param in name "canonicalPrefix" explicit_type "String"
	  param in name "pathWithCanonicalPrefix" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6920731 "getBooleanAttributes"
	public explicit_return_type "int"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Attribute accessors -- "
      end

      operation 6920859 "checkAccess"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "f" type class_ref 165147 // File
	  param inout name "write" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6920987 "getLastModifiedTime"
	public explicit_return_type "long"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6921115 "getLength"
	public explicit_return_type "long"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6921243 "createFileExclusively"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "path" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- File operations -- "
      end

      operation 6921371 "delete0"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6921499 "deleteOnExit"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6921627 "list"
	public explicit_return_type "String"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6921755 "createDirectory"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6921883 "rename0"
	protected explicit_return_type "boolean"
	nparams 2
	  param inout name "f1" type class_ref 165147 // File
	  param inout name "f2" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6922011 "setLastModifiedTime"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "f" type class_ref 165147 // File
	  param in name "time" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6922139 "setReadOnly"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 165147 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6922267 "getDriveDirectory"
	protected explicit_return_type "String"
	nparams 1
	  param in name "drive" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6922395 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 160539 "initialization"
	
	cpp "" ""
	java "  static {
	    initIDs();
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 908827 "WriteAbortedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that one of the ObjectStreamExceptions was thrown during a
write operation.  Thrown during a read operation when one of the
ObjectStreamExceptions was thrown during a write operation.  The 
exception that terminated the write can be found in the detail
field. The stream is reset to it's initial state and all references
to objects already deserialized are discarded.

<p>As of release 1.4, this exception has been retrofitted to conform to
the general purpose exception-chaining mechanism.  The \"exception causing
the abort\" that is provided at construction time and
accessed via the public {@link #detail} field is now known as the
<i>cause</i>, and may be accessed via the {@link Throwable#getCause()}
method, as well as the aforementioned \"legacy field.\"

@author  unascribed
@version 1.18, 12/19/03
@since   JDK1.1"
      classrelation 1770907 // <generalisation>
	relation 1770907 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1770907 // <generalisation>
	  b parent class_ref 289307 // ObjectStreamException
      end

      attribute 2719259 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -3326426625597282442L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1771035 // detail (<unidirectional association>)
	relation 1771035 --->
	  a role_name "detail" public
	    comment "
Exception that was caught while writing the ObjectStream.

<p>This field predates the general-purpose exception chaining facility.
The {@link Throwable#getCause()} method is now the preferred means of
obtaining this information.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1771035 // detail (<unidirectional association>)
	  b parent class_ref 165403 // Exception
      end

      operation 6922523 "WriteAbortedException"
	public explicit_return_type ""
	nparams 2
	  param in name "s" explicit_type "String"
	  param inout name "ex" type class_ref 165403 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a WriteAbortedException with a string describing
the exception and the exception causing the abort.
@param s   String describing the exception.
@param ex  Exception causing the abort."
      end

      operation 6922651 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce the message and include the message from the nested
exception, if there is one."
      end

      operation 6922779 "getCause"
	public return_type class_ref 164251 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exception that terminated the operation (the <i>cause</i>).

@return  the exception that terminated the operation (the <i>cause</i>),
         which may be null.
@since   1.4"
      end
    end
  end

  deploymentview 131099 "io"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 144539 "Serializable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 137883 // Serializable
      end
      comment "@(#)Serializable.java	1.22 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 148251 "Closeable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 179227 // Closeable
      end
      comment "@(#)Closeable.java	1.4 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 148379 "InputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 179099 // InputStream
      end
      comment "@(#)InputStream.java	1.45 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 149531 "Flushable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 183963 // Flushable
      end
      comment "@(#)Flushable.java	1.1 04/04/21

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 149659 "OutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 183835 // OutputStream
      end
      comment "@(#)OutputStream.java	1.29 04/04/21

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 162971 "ByteArrayInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 201371 // ByteArrayInputStream
      end
      comment "@(#)ByteArrayInputStream.java	1.44 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 163099 "DataInput"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 201755 // DataInput
      end
      comment "@(#)DataInput.java	1.23 04/06/03

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 163227 "ObjectInput"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 201627 // ObjectInput
      end
      comment "@(#)ObjectInput.java	1.19 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 163355 "ObjectStreamConstants"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 202011 // ObjectStreamConstants
      end
      comment "@(#)ObjectStreamConstants.java	1.34 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 163483 "ObjectInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ObjectStreamClass.WeakClassKey;
import java.lang.ref.ReferenceQueue;
import java.lang.reflect.Array;
import java.lang.reflect.Modifier;
import java.lang.reflect.Proxy;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.HashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.atomic.AtomicBoolean;
${definition}"
      associated_classes
	class_ref 201115 // ObjectInputStream
      end
      comment "@(#)ObjectInputStream.java	1.157 06/04/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 163739 "ByteArrayOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 205595 // ByteArrayOutputStream
      end
      comment "@(#)ByteArrayOutputStream.java	1.49 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 163867 "DataOutput"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 206107 // DataOutput
      end
      comment "@(#)DataOutput.java	1.21 04/05/13

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 163995 "ObjectOutput"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 205979 // ObjectOutput
      end
      comment "@(#)ObjectOutput.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 164123 "ObjectOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ObjectStreamClass.WeakClassKey;
import java.lang.ref.ReferenceQueue;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
${definition}"
      associated_classes
	class_ref 205339 // ObjectOutputStream
      end
      comment "@(#)ObjectOutputStream.java	1.147 06/07/26

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 171035 "IOException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 179355 // IOException
      end
      comment "@(#)IOException.java	1.22 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 348315 "Externalizable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ObjectOutput;
import java.io.ObjectInput;
${definition}"
      associated_classes
	class_ref 204315 // Externalizable
      end
      comment "@(#)Externalizable.java	1.19 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 391579 "Reader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 364827 // Reader
      end
      comment "@(#)Reader.java	1.27 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 391707 "FilterReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 573211 // FilterReader
      end
      comment "@(#)FilterReader.java	1.17 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 391963 "Writer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 446619 // Writer
      end
      comment "@(#)Writer.java	1.26 04/07/16

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 392091 "FilterWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 573723 // FilterWriter
      end
      comment "@(#)FilterWriter.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 419995 "FilterInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 602651 // FilterInputStream
      end
      comment "@(#)FilterInputStream.java	1.28 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 420123 "DataInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 204827 // DataInputStream
      end
      comment "@(#)DataInputStream.java	1.71 04/05/28

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 535323 "CharConversionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 746395 // CharConversionException
      end
      comment "@(#)CharConversionException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 670363 "Bits"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 902811 // Bits
      end
      comment "@(#)Bits.java	1.4 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 670491 "BufferedInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
${definition}"
      associated_classes
	class_ref 501659 // BufferedInputStream
      end
      comment "@(#)BufferedInputStream.java	1.50 04/05/03

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 670619 "FilterOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 903195 // FilterOutputStream
      end
      comment "@(#)FilterOutputStream.java	1.31 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 670747 "BufferedOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 903067 // BufferedOutputStream
      end
      comment "@(#)BufferedOutputStream.java	1.33 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 670875 "BufferedReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 174107 // BufferedReader
      end
      comment "@(#)BufferedReader.java	1.33 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 671003 "BufferedWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 903323 // BufferedWriter
      end
      comment "@(#)BufferedWriter.java	1.26 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 671131 "CharArrayReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 903451 // CharArrayReader
      end
      comment "@(#)CharArrayReader.java	1.22 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 671259 "CharArrayWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 903579 // CharArrayWriter
      end
      comment "@(#)CharArrayWriter.java	1.23 04/07/16

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 671387 "DataOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 207003 // DataOutputStream
      end
      comment "@(#)DataOutputStream.java	1.43 04/05/13

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 671515 "EOFException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 727579 // EOFException
      end
      comment "@(#)EOFException.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 671643 "ExpiringCache"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import java.util.Map;
import java.util.LinkedHashMap;
import java.util.Set;
${definition}"
      associated_classes
	class_ref 903707 // ExpiringCache
      end
      comment "Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


@(#)ExpiringCache.java	1.5 04/02/13"
    end

    artifact 671771 "File"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.URI;
import java.net.URL;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Map;
import java.util.Hashtable;
import java.util.Random;
import java.security.AccessController;
import java.security.AccessControlException;
import sun.security.action.GetPropertyAction;
${definition}"
      associated_classes
	class_ref 165147 // File
      end
      comment "@(#)File.java	1.122 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 671899 "FileDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 904475 // FileDescriptor
      end
      comment "@(#)FileDescriptor.java	1.3 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 672027 "FileFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 904219 // FileFilter
      end
      comment "@(#)FileFilter.java	1.11 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 672155 "FileInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.channels.FileChannel;
import sun.nio.ch.FileChannelImpl;
${definition}"
      associated_classes
	class_ref 635547 // FileInputStream
      end
      comment "@(#)FileInputStream.java	1.63 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 672283 "FilenameFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 856859 // FilenameFilter
      end
      comment "@(#)FilenameFilter.java	1.23 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 672411 "FileNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 509851 // FileNotFoundException
      end
      comment "@(#)FileNotFoundException.java	1.23 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 672539 "FileOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.channels.FileChannel;
import sun.nio.ch.FileChannelImpl;
${definition}"
      associated_classes
	class_ref 904859 // FileOutputStream
      end
      comment "@(#)FileOutputStream.java	1.57 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 672667 "FilePermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
import java.util.Enumeration;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.Collections;
import java.io.ObjectStreamField;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import sun.security.util.SecurityConstants;
${definition}"
      associated_classes
	class_ref 904987 // FilePermission
	class_ref 905115 // FilePermissionCollection
      end
      comment "@(#)FilePermission.java	1.76 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 672795 "InputStreamReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import sun.nio.cs.StreamDecoder;
${definition}"
      associated_classes
	class_ref 905371 // InputStreamReader
      end
      comment "@(#)InputStreamReader.java	1.44 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 672923 "FileReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 905243 // FileReader
      end
      comment "@(#)FileReader.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 673051 "FileSystem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 903963 // FileSystem
      end
      comment "@(#)FileSystem.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 673179 "OutputStreamWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import sun.nio.cs.StreamEncoder;
${definition}"
      associated_classes
	class_ref 905627 // OutputStreamWriter
      end
      comment "@(#)OutputStreamWriter.java	1.47 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 673307 "FileWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 905499 // FileWriter
      end
      comment "@(#)FileWriter.java	1.18 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 673435 "InterruptedIOException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 905755 // InterruptedIOException
      end
      comment "@(#)InterruptedIOException.java	1.19 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 673563 "ObjectStreamException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 289307 // ObjectStreamException
      end
      comment "@(#)ObjectStreamException.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 673691 "InvalidClassException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 216987 // InvalidClassException
      end
      comment "@(#)InvalidClassException.java	1.20 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 673819 "InvalidObjectException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 203931 // InvalidObjectException
      end
      comment "@(#)InvalidObjectException.java	1.16 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 673947 "LineNumberInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 905883 // LineNumberInputStream
      end
      comment "@(#)LineNumberInputStream.java	1.27 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 674075 "LineNumberReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 906011 // LineNumberReader
      end
      comment "@(#)LineNumberReader.java	1.20 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 674203 "NotActiveException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 203803 // NotActiveException
      end
      comment "@(#)NotActiveException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 674331 "NotSerializableException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 906139 // NotSerializableException
      end
      comment "@(#)NotSerializableException.java	1.14 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 674459 "ObjectInputValidation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 203675 // ObjectInputValidation
      end
      comment "@(#)ObjectInputValidation.java	1.18 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 674587 "ObjectStreamClass"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.Reference;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.lang.ref.WeakReference;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Proxy;
import java.security.AccessController;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import sun.misc.Unsafe;
import sun.reflect.ReflectionFactory;
${definition}"
      associated_classes
	class_ref 202395 // ObjectStreamClass
      end
      comment "@(#)ObjectStreamClass.java	1.138 05/12/01

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 674715 "ObjectStreamField"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Field;
${definition}"
      associated_classes
	class_ref 285723 // ObjectStreamField
      end
      comment "@(#)ObjectStreamField.java	1.45 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 674843 "OptionalDataException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 907035 // OptionalDataException
      end
      comment "@(#)OptionalDataException.java	1.18 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 674971 "PipedInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 907163 // PipedInputStream
      end
      comment "@(#)PipedInputStream.java	1.35 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 675099 "PipedOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_classes
	class_ref 907291 // PipedOutputStream
      end
      comment "@(#)PipedOutputStream.java	1.26 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 675227 "PipedReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 907419 // PipedReader
      end
      comment "@(#)PipedReader.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 675355 "PipedWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 907547 // PipedWriter
      end
      comment "@(#)PipedWriter.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 675483 "PrintStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Formatter;
import java.util.Locale;
${definition}"
      associated_classes
	class_ref 162843 // PrintStream
      end
      comment "@(#)PrintStream.java	1.32 04/07/16

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 675611 "PrintWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Formatter;
import java.util.Locale;
${definition}"
      associated_classes
	class_ref 221595 // PrintWriter
      end
      comment "@(#)PrintWriter.java	1.37 04/07/16

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 675739 "PushbackInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 907675 // PushbackInputStream
      end
      comment "@(#)PushbackInputStream.java	1.36 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 675867 "PushbackReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 907803 // PushbackReader
      end
      comment "@(#)PushbackReader.java	1.18 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 675995 "RandomAccessFile"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.channels.FileChannel;
import sun.nio.ch.FileChannelImpl;
${definition}"
      associated_classes
	class_ref 907931 // RandomAccessFile
      end
      comment "@(#)RandomAccessFile.java	1.78 04/05/13

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 676123 "SequenceInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.util.Enumeration;
import java.util.Vector;
${definition}"
      associated_classes
	class_ref 908059 // SequenceInputStream
      end
      comment "@(#)SequenceInputStream.java	1.28 04/05/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 676251 "SerializablePermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.StringTokenizer;
${definition}"
      associated_classes
	class_ref 202139 // SerializablePermission
      end
      comment "@(#)SerializablePermission.java	1.19 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 676379 "StreamCorruptedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 204059 // StreamCorruptedException
      end
      comment "@(#)StreamCorruptedException.java	1.14 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 676507 "StreamTokenizer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 841755 // StreamTokenizer
      end
      comment "@(#)StreamTokenizer.java	1.44 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 676635 "StringBufferInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 908187 // StringBufferInputStream
      end
      comment "@(#)StringBufferInputStream.java	1.26 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 676763 "StringReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 908315 // StringReader
      end
      comment "@(#)StringReader.java	1.24 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 676891 "StringWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 275995 // StringWriter
      end
      comment "@(#)StringWriter.java	1.24 04/07/16

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 677019 "SyncFailedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 904603 // SyncFailedException
      end
      comment "@(#)SyncFailedException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 677147 "UnsupportedEncodingException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 205723 // UnsupportedEncodingException
      end
      comment "@(#)UnsupportedEncodingException.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 677275 "UTFDataFormatException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 908443 // UTFDataFormatException
      end
      comment "@(#)UTFDataFormatException.java	1.13 04/05/13

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 677403 "Win32FileSystem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import sun.security.action.GetPropertyAction;
${definition}"
      associated_classes
	class_ref 908571 // Win32FileSystem
      end
      comment "@(#)Win32FileSystem.java	1.15 02/10/01

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 677531 "WinNTFileSystem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 908699 // WinNTFileSystem
      end
      comment "Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


@(#)WinNTFileSystem.java	1.9 04/03/20"
    end

    artifact 677659 "WriteAbortedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 908827 // WriteAbortedException
      end
      comment "@(#)WriteAbortedException.java	1.18 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
