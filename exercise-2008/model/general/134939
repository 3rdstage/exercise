format 66
"math" // src::java::math
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/math"
  java_package "java.math"
  classview 135835 "math"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 178459 "BigDecimal"
      visibility public 
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 value class_ref 178459 // BigDecimal
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Immutable, arbitrary-precision signed decimal numbers.  A
<tt>BigDecimal</tt> consists of an arbitrary precision integer
<i>unscaled value</i> and a 32-bit integer <i>scale</i>.  If zero
or positive, the scale is the number of digits to the right of the
decimal point.  If negative, the unscaled value of the number is
multiplied by ten to the power of the negation of the scale.  The
value of the number represented by the <tt>BigDecimal</tt> is
therefore <tt>(unscaledValue &times; 10<sup>-scale</sup>)</tt>.

<p>The <tt>BigDecimal</tt> class provides operations for
arithmetic, scale manipulation, rounding, comparison, hashing, and
format conversion.  The {@link #toString} method provides a
canonical representation of a <tt>BigDecimal</tt>.

<p>The <tt>BigDecimal</tt> class gives its user complete control
over rounding behavior.  If no rounding mode is specified and the
exact result cannot be represented, an exception is thrown;
otherwise, calculations can be carried out to a chosen precision
and rounding mode by supplying an appropriate {@link MathContext}
object to the operation.  In either case, eight <em>rounding
modes</em> are provided for the control of rounding.  Using the
integer fields in this class (such as {@link #ROUND_HALF_UP}) to
represent rounding mode is largely obsolete; the enumeration values
of the <tt>RoundingMode</tt> <tt>enum</tt>, (such as {@link
RoundingMode#HALF_UP}) should be used instead.

<p>When a <tt>MathContext</tt> object is supplied with a precision
setting of 0 (for example, {@link MathContext#UNLIMITED}),
arithmetic operations are exact, as are the arithmetic methods
which take no <tt>MathContext</tt> object.  (This is the only
behavior that was supported in releases prior to 5.)  As a
corollary of computing the exact result, the rounding mode setting
of a <tt>MathContext</tt> object with a precision setting of 0 is
not used and thus irrelevant.  In the case of divide, the exact
quotient could have an infinitely long decimal expansion; for
example, 1 divided by 3.  If the quotient has a nonterminating
decimal expansion and the operation is specified to return an exact
result, an <tt>ArithmeticException</tt> is thrown.  Otherwise, the
exact result of the division is returned, as done for other
operations.

<p>When the precision setting is not 0, the rules of
<tt>BigDecimal</tt> arithmetic are broadly compatible with selected
modes of operation of the arithmetic defined in ANSI X3.274-1996
and ANSI X3.274-1996/AM 1-2000 (section 7.4).  Unlike those
standards, <tt>BigDecimal</tt> includes many rounding modes, which
were mandatory for division in <tt>BigDecimal</tt> releases prior
to 5.  Any conflicts between these ANSI standards and the
<tt>BigDecimal</tt> specification are resolved in favor of
<tt>BigDecimal</tt>.  

<p>Since the same numerical value can have different
representations (with different scales), the rules of arithmetic
and rounding must specify both the numerical result and the scale
used in the result's representation.


<p>In general the rounding modes and precision setting determine
how operations return results with a limited number of digits when
the exact result has more digits (perhaps infinitely many in the
case of division) than the number of digits returned.

First, the
total number of digits to return is specified by the
<tt>MathContext</tt>'s <tt>precision</tt> setting; this determines
the result's <i>precision</i>.  The digit count starts from the
leftmost nonzero digit of the exact result.  The rounding mode
determines how any discarded trailing digits affect the returned
result.

<p>For all arithmetic operators , the operation is carried out as
though an exact intermediate result were first calculated and then
rounded to the number of digits specified by the precision setting
(if necessary), using the selected rounding mode.  If the exact
result is not returned, some digit positions of the exact result
are discarded.  When rounding increases the magnitude of the
returned result, it is possible for a new digit position to be
created by a carry propagating to a leading &quot;9&quot; digit.
For example, rounding the value 999.9 to three digits rounding up
would be numerically equal to one thousand, represented as
100&times;10<sup>1</sup>.  In such cases, the new &quot;1&quot; is
the leading digit position of the returned result.

<p>Besides a logical exact result, each arithmetic operation has a
preferred scale for representing a result.  The preferred
scale for each operation is listed in the table below.

<table border>
<caption top><h3>Preferred Scales for Results of Arithmetic Operations
</h3></caption>
<tr><th>Operation</th><th>Preferred Scale of Result</th></tr>
<tr><td>Add</td><td>max(addend.scale(), augend.scale())</td>
<tr><td>Subtract</td><td>max(minuend.scale(), subtrahend.scale())</td>
<tr><td>Multiply</td><td>multiplier.scale() + multiplicand.scale()</td>
<tr><td>Divide</td><td>dividend.scale() - divisor.scale()</td>
</table>

These scales are the ones used by the methods which return exact
arithmetic results; except that an exact divide may have to use a
larger scale since the exact result may have more digits.  For
example, <tt>1/32</tt> is <tt>0.03125</tt>.

<p>Before rounding, the scale of the logical exact intermediate
result is the preferred scale for that operation.  If the exact
numerical result cannot be represented in <code>precision</code>
digits, rounding selects the set of digits to return and the scale
of the result is reduced from the scale of the intermediate result
to the least scale which can represent the <code>precision</code>
digits actually returned.  If the exact result can be represented
with at most <code>precision</code> digits, the representation
of the result with the scale closest to the preferred scale is
returned.  In particular, an exactly representable quotient may be
represented in fewer than <code>precision</code> digits by removing
trailing zeros and decreasing the scale.  For example, rounding to
three digits using the {@linkplain RoundingMode#FLOOR floor}
rounding mode, <br>

<code>19/100 = 0.19   // integer=19,  scale=2</code> <br>

but<br>

<code>21/110 = 0.190  // integer=190, scale=3</code> <br>

<p>Note that for add, subtract, and multiply, the reduction in
scale will equal the number of digit positions of the exact result
which are discarded. If the rounding causes a carry propagation to
create a new high-order digit position, an additional digit of the
result is discarded than when no new digit position is created.

<p>Other methods may have slightly different rounding semantics.
For example, the result of the <tt>pow</tt> method using the
{@linkplain #pow(int, MathContext) specified algorithm} can
occasionally differ from the rounded mathematical result by more
than one unit in the last place, one <i>{@linkplain #ulp() ulp}</i>.

<p>Two types of operations are provided for manipulating the scale
of a <tt>BigDecimal</tt>: scaling/rounding operations and decimal
point motion operations.  Scaling/rounding operations ({@link
#setScale setScale} and {@link #round round}) return a
<tt>BigDecimal</tt> whose value is approximately (or exactly) equal
to that of the operand, but whose scale or precision is the
specified value; that is, they increase or decrease the precision
of the stored number with minimal effect on its value.  Decimal
point motion operations ({@link #movePointLeft movePointLeft} and
{@link #movePointRight movePointRight}) return a
<tt>BigDecimal</tt> created from the operand by moving the decimal
point a specified distance in the specified direction.

<p>For the sake of brevity and clarity, pseudo-code is used
throughout the descriptions of <tt>BigDecimal</tt> methods.  The
pseudo-code expression <tt>(i + j)</tt> is shorthand for &quot;a
<tt>BigDecimal</tt> whose value is that of the <tt>BigDecimal</tt>
<tt>i</tt> added to that of the <tt>BigDecimal</tt>
<tt>j</tt>.&quot; The pseudo-code expression <tt>(i == j)</tt> is
shorthand for &quot;<tt>true</tt> if and only if the
<tt>BigDecimal</tt> <tt>i</tt> represents the same value as the
<tt>BigDecimal</tt> <tt>j</tt>.&quot; Other pseudo-code expressions
are interpreted similarly.  Square brackets are used to represent
the particular <tt>BigInteger</tt> and scale pair defining a
<tt>BigDecimal</tt> value; for example [19, 2] is the
<tt>BigDecimal</tt> numerically equal to 0.19 having a scale of 2.

<p>Note: care should be exercised if <tt>BigDecimal</tt> objects
are used as keys in a {@link java.util.SortedMap SortedMap} or
elements in a {@link java.util.SortedSet SortedSet} since
<tt>BigDecimal</tt>'s <i>natural ordering</i> is <i>inconsistent
with equals</i>.  See {@link Comparable}, {@link
java.util.SortedMap} or {@link java.util.SortedSet} for more
information.

<p>All methods and constructors for this class throw
<tt>NullPointerException</tt> when passed a <tt>null</tt> object
reference for any input parameter.

@see     BigInteger
@see     MathContext
@see     RoundingMode
@see     java.util.SortedMap
@see     java.util.SortedSet
@author  Josh Bloch
@author  Mike Cowlishaw
@author  Joseph D. Darcy"
      classrelation 1804059 // <generalisation>
	relation 1804059 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1804059 // <generalisation>
	  b parent class_ref 413979 // Number
      end

      classrelation 1804187 // <realization>
	relation 1804187 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1804187 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      classrelation 1804315 // intVal (<unidirectional association>)
	relation 1804315 --->
	  a role_name "intVal" volatile private
	    comment "
The unscaled value of this BigDecimal, as returned by {@link
#unscaledValue}.

@serial
@see #unscaledValue

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1804315 // intVal (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      attribute 2755227 "scale"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The scale of this BigDecimal, as returned by {@link #scale}.

@serial
@see #scale

 Note: this may have any value, so"
      end

      attribute 2755355 "precision"
	volatile private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " calculations must be done in longs

The number of decimal digits in this BigDecimal, or 0 if the
number of digits are not known (lookaside information).  If
nonzero, the value is guaranteed correct.  Use the precision()
method to obtain and set the value if it might be 0.  This
field is mutable until set nonzero.

@since  1.5
"
      end

      attribute 2755483 "stringCache"
	volatile private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Used to store the canonical string representation, if computed.
"
      end

      attribute 2755611 "INFLATED"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  Long.MIN_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Sentinel value for {@link #intCompact} indicating the
significand information is only available from {@code intVal}.
"
      end

      attribute 2755739 "intCompact"
	private explicit_type "long"
	init_value "=  INFLATED"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If the absolute value of the significand of this BigDecimal is
less than or equal to {@code Long.MAX_VALUE}, the value can be
compactly stored in this field and used in computations.
"
      end

      attribute 2755867 "MAX_COMPACT_DIGITS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  18"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " All 18-digit base ten strings fit into a long; not all 19-digit
 strings will"
      end

      attribute 2755995 "MAX_BIGINT_BITS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  62"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2756123 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  6108874887143696463L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Appease the serialization gods "
      end

      classrelation 1804443 // zeroThroughTen (<unidirectional association>)
	relation 1804443 --->
	  a role_name "zeroThroughTen" multiplicity "[]" init_value "=  {
	new BigDecimal(BigInteger.ZERO,		0,  0),
        new BigDecimal(BigInteger.ONE,		1,  0),
        new BigDecimal(BigInteger.valueOf(2),	2,  0),
        new BigDecimal(BigInteger.valueOf(3),	3,  0),
        new BigDecimal(BigInteger.valueOf(4),	4,  0),
        new BigDecimal(BigInteger.valueOf(5),	5,  0),
        new BigDecimal(BigInteger.valueOf(6),	6,  0),
        new BigDecimal(BigInteger.valueOf(7),	7,  0),
        new BigDecimal(BigInteger.valueOf(8),	8,  0),
        new BigDecimal(BigInteger.valueOf(9),	9,  0),
        new BigDecimal(BigInteger.TEN,		10, 0),
    }" class_relation const_relation private
	    comment " Cache of common small BigDecimal values.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1804443 // zeroThroughTen (<unidirectional association>)
	  b parent class_ref 178459 // BigDecimal
      end

      classrelation 1804571 // ZERO (<unidirectional association>)
	relation 1804571 --->
	  a role_name "ZERO" init_value "= 
        zeroThroughTen[0]" class_relation const_relation public
	    comment " Constants

The value 0, with a scale of 0.

@since  1.5

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1804571 // ZERO (<unidirectional association>)
	  b parent class_ref 178459 // BigDecimal
      end

      classrelation 1804699 // ONE (<unidirectional association>)
	relation 1804699 --->
	  a role_name "ONE" init_value "= 
        zeroThroughTen[1]" class_relation const_relation public
	    comment "
The value 1, with a scale of 0.

@since  1.5

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1804699 // ONE (<unidirectional association>)
	  b parent class_ref 178459 // BigDecimal
      end

      classrelation 1804827 // TEN (<unidirectional association>)
	relation 1804827 --->
	  a role_name "TEN" init_value "= 
	zeroThroughTen[10]" class_relation const_relation public
	    comment "
The value 10, with a scale of 0.

@since  1.5

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1804827 // TEN (<unidirectional association>)
	  b parent class_ref 178459 // BigDecimal
      end

      operation 7139227 "BigDecimal"
	public explicit_return_type ""
	nparams 3
	  param in name "in" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors

Translates a character array representation of a
<tt>BigDecimal</tt> into a <tt>BigDecimal</tt>, accepting the
same sequence of characters as the {@link #BigDecimal(String)}
constructor, while allowing a sub-array to be specified.

<p>Note that if the sequence of characters is already available
within a character array, using this constructor is faster than
converting the <tt>char</tt> array to string and using the
<tt>BigDecimal(String)</tt> constructor .

@param  in <tt>char</tt> array that is the source of characters.
@param  offset first character in the array to inspect.
@param  len number of characters to consider.
@throws NumberFormatException if <tt>in</tt> is not a valid
        representation of a <tt>BigDecimal</tt> or the defined subarray
        is not wholly within <tt>in</tt>.
@since  1.5"
      end

      operation 7139355 "BigDecimal"
	public explicit_return_type ""
	nparams 4
	  param in name "in" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a character array representation of a
<tt>BigDecimal</tt> into a <tt>BigDecimal</tt>, accepting the
same sequence of characters as the {@link #BigDecimal(String)}
constructor, while allowing a sub-array to be specified and
with rounding according to the context settings.

<p>Note that if the sequence of characters is already available
within a character array, using this constructor is faster than
converting the <tt>char</tt> array to string and using the
<tt>BigDecimal(String)</tt> constructor .

@param  in <tt>char</tt> array that is the source of characters.
@param  offset first character in the array to inspect.
@param  len number of characters to consider..
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>.
@throws NumberFormatException if <tt>in</tt> is not a valid
        representation of a <tt>BigDecimal</tt> or the defined subarray
        is not wholly within <tt>in</tt>.
@since  1.5"
      end

      operation 7139483 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param in name "in" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a character array representation of a
<tt>BigDecimal</tt> into a <tt>BigDecimal</tt>, accepting the
same sequence of characters as the {@link #BigDecimal(String)}
constructor.

<p>Note that if the sequence of characters is already available
as a character array, using this constructor is faster than
converting the <tt>char</tt> array to string and using the
<tt>BigDecimal(String)</tt> constructor .

@param in <tt>char</tt> array that is the source of characters.
@throws NumberFormatException if <tt>in</tt> is not a valid
        representation of a <tt>BigDecimal</tt>.
@since  1.5"
      end

      operation 7139611 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param in name "in" explicit_type "char"
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a character array representation of a
<tt>BigDecimal</tt> into a <tt>BigDecimal</tt>, accepting the
same sequence of characters as the {@link #BigDecimal(String)}
constructor and with rounding according to the context
settings.

<p>Note that if the sequence of characters is already available
as a character array, using this constructor is faster than
converting the <tt>char</tt> array to string and using the
<tt>BigDecimal(String)</tt> constructor .

@param  in <tt>char</tt> array that is the source of characters.
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>.
@throws NumberFormatException if <tt>in</tt> is not a valid
        representation of a <tt>BigDecimal</tt>.
@since  1.5"
      end

      operation 7139739 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the string representation of a <tt>BigDecimal</tt>
into a <tt>BigDecimal</tt>.  The string representation consists
of an optional sign, <tt>'+'</tt> (<tt>'&#92;u002B'</tt>) or
<tt>'-'</tt> (<tt>'&#92;u002D'</tt>), followed by a sequence of
zero or more decimal digits (\"the integer\"), optionally
followed by a fraction, optionally followed by an exponent.

<p>The fraction consists of a decimal point followed by zero
or more decimal digits.  The string must contain at least one
digit in either the integer or the fraction.  The number formed
by the sign, the integer and the fraction is referred to as the
<i>significand</i>.

<p>The exponent consists of the character <tt>'e'</tt>
(<tt>'&#92;u0075'</tt>) or <tt>'E'</tt> (<tt>'&#92;u0045'</tt>)
followed by one or more decimal digits.  The value of the
exponent must lie between -{@link Integer#MAX_VALUE} ({@link
Integer#MIN_VALUE}+1) and {@link Integer#MAX_VALUE}, inclusive.

<p>More formally, the strings this constructor accepts are
described by the following grammar:
<blockquote>
<dl>
<dt><i>BigDecimalString:</i>
<dd><i>Sign<sub>opt</sub> Significand Exponent<sub>opt</sub></i>
<p>
<dt><i>Sign:</i>
<dd><tt>+</tt>
<dd><tt>-</tt>
<p>
<dt><i>Significand:</i>
<dd><i>IntegerPart</i> <tt>.</tt> <i>FractionPart<sub>opt</sub></i>
<dd><tt>.</tt> <i>FractionPart</i>
<dd><i>IntegerPart</i>
<p>
<dt><i>IntegerPart:
<dd>Digits</i>
<p>
<dt><i>FractionPart:
<dd>Digits</i>
<p>
<dt><i>Exponent:
<dd>ExponentIndicator SignedInteger</i>
<p>
<dt><i>ExponentIndicator:</i>
<dd><tt>e</tt>
<dd><tt>E</tt>
<p>
<dt><i>SignedInteger:
<dd>Sign<sub>opt</sub> Digits</i>
<p>
<dt><i>Digits:
<dd>Digit
<dd>Digits Digit</i>
<p>
<dt><i>Digit:</i>
<dd>any character for which {@link Character#isDigit}
returns <tt>true</tt>, including 0, 1, 2 ...
</dl>
</blockquote>

<p>The scale of the returned <tt>BigDecimal</tt> will be the
number of digits in the fraction, or zero if the string
contains no decimal point, subject to adjustment for any
exponent; if the string contains an exponent, the exponent is
subtracted from the scale.  The value of the resulting scale
must lie between <tt>Integer.MIN_VALUE</tt> and
<tt>Integer.MAX_VALUE</tt>, inclusive.

<p>The character-to-digit mapping is provided by {@link
java.lang.Character#digit} set to convert to radix 10.  The
String may not contain any extraneous characters (whitespace,
for example).

<p><b>Examples:</b><br>
The value of the returned <tt>BigDecimal</tt> is equal to
<i>significand</i> &times; 10<sup>&nbsp;<i>exponent</i></sup>.  
For each string on the left, the resulting representation
[<tt>BigInteger</tt>, <tt>scale</tt>] is shown on the right.
<pre>
\"0\"            [0,0]
\"0.00\"         [0,2]
\"123\"          [123,0]
\"-123\"         [-123,0]
\"1.23E3\"       [123,-1]
\"1.23E+3\"      [123,-1]
\"12.3E+7\"      [123,-6]
\"12.0\"         [120,1]
\"12.3\"         [123,1]
\"0.00123\"      [123,5]
\"-1.23E-12\"    [-123,14]
\"1234.5E-4\"    [12345,5]
\"0E+7\"         [0,-7]
\"-0\"           [0,0]
</pre>

<p>Note: For values other than <tt>float</tt> and
<tt>double</tt> NaN and &plusmn;Infinity, this constructor is
compatible with the values returned by {@link Float#toString}
and {@link Double#toString}.  This is generally the preferred
way to convert a <tt>float</tt> or <tt>double</tt> into a
BigDecimal, as it doesn't suffer from the unpredictability of
the {@link #BigDecimal(double)} constructor.

@param val String representation of <tt>BigDecimal</tt>.

@throws NumberFormatException if <tt>val</tt> is not a valid 
	       representation of a <tt>BigDecimal</tt>."
      end

      operation 7139867 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param in name "val" explicit_type "String"
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the string representation of a <tt>BigDecimal</tt>
into a <tt>BigDecimal</tt>, accepting the same strings as the
{@link #BigDecimal(String)} constructor, with rounding
according to the context settings.

@param  val string representation of a <tt>BigDecimal</tt>.
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>.
@throws NumberFormatException if <tt>val</tt> is not a valid
        representation of a BigDecimal.
@since  1.5"
      end

      operation 7139995 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a <tt>double</tt> into a <tt>BigDecimal</tt> which
is the exact decimal representation of the <tt>double</tt>'s
binary floating-point value.  The scale of the returned
<tt>BigDecimal</tt> is the smallest value such that
<tt>(10<sup>scale</sup> &times; val)</tt> is an integer.
<p>
<b>Notes:</b>
<ol>
<li>
The results of this constructor can be somewhat unpredictable.
One might assume that writing <tt>new BigDecimal(0.1)</tt> in
Java creates a <tt>BigDecimal</tt> which is exactly equal to
0.1 (an unscaled value of 1, with a scale of 1), but it is
actually equal to
0.1000000000000000055511151231257827021181583404541015625.
This is because 0.1 cannot be represented exactly as a
<tt>double</tt> (or, for that matter, as a binary fraction of
any finite length).  Thus, the value that is being passed
<i>in</i> to the constructor is not exactly equal to 0.1,
appearances notwithstanding.

<li>
The <tt>String</tt> constructor, on the other hand, is
perfectly predictable: writing <tt>new BigDecimal(\"0.1\")</tt>
creates a <tt>BigDecimal</tt> which is <i>exactly</i> equal to
0.1, as one would expect.  Therefore, it is generally
recommended that the {@linkplain #BigDecimal(String)
<tt>String</tt> constructor} be used in preference to this one.

<li>
When a <tt>double</tt> must be used as a source for a
<tt>BigDecimal</tt>, note that this constructor provides an
exact conversion; it does not give the same result as
converting the <tt>double</tt> to a <tt>String</tt> using the
{@link Double#toString(double)} method and then using the
{@link #BigDecimal(String)} constructor.  To get that result,
use the <tt>static</tt> {@link #valueOf(double)} method.
</ol>

@param val <tt>double</tt> value to be converted to 
       <tt>BigDecimal</tt>.
@throws NumberFormatException if <tt>val</tt> is infinite or NaN."
      end

      operation 7140123 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param in name "val" explicit_type "double"
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a <tt>double</tt> into a <tt>BigDecimal</tt>, with
rounding according to the context settings.  The scale of the
<tt>BigDecimal</tt> is the smallest value such that
<tt>(10<sup>scale</sup> &times; val)</tt> is an integer.

<p>The results of this constructor can be somewhat unpredictable
and its use is generally not recommended; see the notes under
the {@link #BigDecimal(double)} constructor.

@param  val <tt>double</tt> value to be converted to 
        <tt>BigDecimal</tt>.
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        RoundingMode is UNNECESSARY.
@throws NumberFormatException if <tt>val</tt> is infinite or NaN.
@since  1.5"
      end

      operation 7140251 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a <tt>BigInteger</tt> into a <tt>BigDecimal</tt>.
The scale of the <tt>BigDecimal</tt> is zero.

@param val <tt>BigInteger</tt> value to be converted to
           <tt>BigDecimal</tt>."
      end

      operation 7140379 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param inout name "val" type class_ref 775835 // BigInteger
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a <tt>BigInteger</tt> into a <tt>BigDecimal</tt>
rounding according to the context settings.  The scale of the
<tt>BigDecimal</tt> is zero.

@param val <tt>BigInteger</tt> value to be converted to
           <tt>BigDecimal</tt>.
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>.
@since  1.5"
      end

      operation 7140507 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param inout name "unscaledVal" type class_ref 775835 // BigInteger
	  param in name "scale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a <tt>BigInteger</tt> unscaled value and an
<tt>int</tt> scale into a <tt>BigDecimal</tt>.  The value of
the <tt>BigDecimal</tt> is
<tt>(unscaledVal &times; 10<sup>-scale</sup>)</tt>.

@param unscaledVal unscaled value of the <tt>BigDecimal</tt>.
@param scale scale of the <tt>BigDecimal</tt>."
      end

      operation 7140635 "BigDecimal"
	public explicit_return_type ""
	nparams 3
	  param inout name "unscaledVal" type class_ref 775835 // BigInteger
	  param in name "scale" explicit_type "int"
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a <tt>BigInteger</tt> unscaled value and an
<tt>int</tt> scale into a <tt>BigDecimal</tt>, with rounding
according to the context settings.  The value of the
<tt>BigDecimal</tt> is <tt>(unscaledVal &times;
10<sup>-scale</sup>)</tt>, rounded according to the
<tt>precision</tt> and rounding mode settings.

@param  unscaledVal unscaled value of the <tt>BigDecimal</tt>.
@param  scale scale of the <tt>BigDecimal</tt>.
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>.
@since  1.5"
      end

      operation 7140763 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates an <tt>int</tt> into a <tt>BigDecimal</tt>.  The
scale of the <tt>BigDecimal</tt> is zero.

@param val <tt>int</tt> value to be converted to
           <tt>BigDecimal</tt>.
@since  1.5"
      end

      operation 7140891 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param in name "val" explicit_type "int"
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates an <tt>int</tt> into a <tt>BigDecimal</tt>, with
rounding according to the context settings.  The scale of the
<tt>BigDecimal</tt>, before any rounding, is zero.

@param  val <tt>int</tt> value to be converted to <tt>BigDecimal</tt>.
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>.
@since  1.5"
      end

      operation 7141019 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a <tt>long</tt> into a <tt>BigDecimal</tt>.  The
scale of the <tt>BigDecimal</tt> is zero.

@param val <tt>long</tt> value to be converted to <tt>BigDecimal</tt>.
@since  1.5"
      end

      operation 7141147 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param in name "val" explicit_type "long"
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a <tt>long</tt> into a <tt>BigDecimal</tt>, with
rounding according to the context settings.  The scale of the
<tt>BigDecimal</tt>, before any rounding, is zero.

@param  val <tt>long</tt> value to be converted to <tt>BigDecimal</tt>.
@param  mc the context to use.
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>.
@since  1.5"
      end

      operation 7141275 "BigDecimal"
	private explicit_return_type ""
	nparams 2
	  param in name "val" explicit_type "long"
	  param in name "scale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Trusted internal constructor"
      end

      operation 7141403 "BigDecimal"
	private explicit_return_type ""
	nparams 3
	  param inout name "intVal" type class_ref 775835 // BigInteger
	  param in name "val" explicit_type "long"
	  param in name "scale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Trusted internal constructor"
      end

      operation 7141531 "valueOf"
	class_operation public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param in name "unscaledVal" explicit_type "long"
	  param in name "scale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Static Factory Methods

Translates a <tt>long</tt> unscaled value and an
<tt>int</tt> scale into a <tt>BigDecimal</tt>.  This
&quot;static factory method&quot; is provided in preference to
a (<tt>long</tt>, <tt>int</tt>) constructor because it
allows for reuse of frequently used <tt>BigDecimal</tt> values..

@param unscaledVal unscaled value of the <tt>BigDecimal</tt>.
@param scale scale of the <tt>BigDecimal</tt>.
@return a <tt>BigDecimal</tt> whose value is
	       <tt>(unscaledVal &times; 10<sup>-scale</sup>)</tt>."
      end

      operation 7141659 "valueOf"
	class_operation public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a <tt>long</tt> value into a <tt>BigDecimal</tt>
with a scale of zero.  This &quot;static factory method&quot;
is provided in preference to a (<tt>long</tt>) constructor
because it allows for reuse of frequently used
<tt>BigDecimal</tt> values.

@param val value of the <tt>BigDecimal</tt>.
@return a <tt>BigDecimal</tt> whose value is <tt>val</tt>."
      end

      operation 7141787 "valueOf"
	class_operation public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a <tt>double</tt> into a <tt>BigDecimal</tt>, using
the <tt>double</tt>'s canonical string representation provided
by the {@link Double#toString(double)} method.

<p><b>Note:</b> This is generally the preferred way to convert
a <tt>double</tt> (or <tt>float</tt>) into a
<tt>BigDecimal</tt>, as the value returned is equal to that
resulting from constructing a <tt>BigDecimal</tt> from the
result of using {@link Double#toString(double)}.

@param  val <tt>double</tt> to convert to a <tt>BigDecimal</tt>.
@return a <tt>BigDecimal</tt> whose value is equal to or approximately
        equal to the value of <tt>val</tt>.
@throws NumberFormatException if <tt>val</tt> is infinite or NaN.
@since  1.5"
      end

      operation 7141915 "add"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param inout name "augend" type class_ref 178459 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Arithmetic Operations

Returns a <tt>BigDecimal</tt> whose value is <tt>(this +
augend)</tt>, and whose scale is <tt>max(this.scale(),
augend.scale())</tt>.

@param  augend value to be added to this <tt>BigDecimal</tt>.
@return <tt>this + augend</tt>"
      end

      operation 7142043 "add"
	public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param inout name "augend" type class_ref 178459 // BigDecimal
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(this + augend)</tt>,
with rounding according to the context settings.

If either number is zero and the precision setting is nonzero then
the other number, rounded if necessary, is used as the result.

@param  augend value to be added to this <tt>BigDecimal</tt>.
@param  mc the context to use.
@return <tt>this + augend</tt>, rounded as necessary.
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>.
@since  1.5"
      end

      operation 7142171 "preAlign"
	private return_type class_ref 178459 // BigDecimal
	nparams 4
	  param inout name "lhs" type class_ref 178459 // BigDecimal
	  param inout name "augend" type class_ref 178459 // BigDecimal
	  param in name "padding" explicit_type "long"
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of length two, the sum of whose entries is
equal to the rounded sum of the {@code BigDecimal} arguments.

<p>If the digit positions of the arguments have a sufficient
gap between them, the value smaller in magnitude can be
condensed into a &quot;sticky bit&quot; and the end result will
round the same way <em>if</em> the precision of the final
result does not include the high order digit of the small
magnitude operand.

<p>Note that while strictly speaking this is an optimization,
it makes a much wider range of additions practical.

<p>This corresponds to a pre-shift operation in a fixed
precision floating-point adder; this method is complicated by
variable precision of the result as determined by the
MathContext.  A more nuanced operation could implement a
&quot;right shift&quot; on the smaller magnitude operand so
that the number of digits of the smaller operand could be
reduced even though the significands partially overlapped."
      end

      operation 7142299 "subtract"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param inout name "subtrahend" type class_ref 178459 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(this -
subtrahend)</tt>, and whose scale is <tt>max(this.scale(),
subtrahend.scale())</tt>.

@param  subtrahend value to be subtracted from this <tt>BigDecimal</tt>.
@return <tt>this - subtrahend</tt>"
      end

      operation 7142427 "subtract"
	public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param inout name "subtrahend" type class_ref 178459 // BigDecimal
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(this - subtrahend)</tt>,
with rounding according to the context settings.

If <tt>subtrahend</tt> is zero then this, rounded if necessary, is used as the
result.  If this is zero then the result is <tt>subtrahend.negate(mc)</tt>.

@param  subtrahend value to be subtracted from this <tt>BigDecimal</tt>.
@param  mc the context to use.
@return <tt>this - subtrahend</tt>, rounded as necessary.
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>.
@since  1.5"
      end

      operation 7142555 "multiply"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param inout name "multiplicand" type class_ref 178459 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(this &times;
multiplicand)</tt>, and whose scale is <tt>(this.scale() +
multiplicand.scale())</tt>.

@param  multiplicand value to be multiplied by this <tt>BigDecimal</tt>.
@return <tt>this * multiplicand</tt>"
      end

      operation 7142683 "multiply"
	public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param inout name "multiplicand" type class_ref 178459 // BigDecimal
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(this &times;
multiplicand)</tt>, with rounding according to the context settings.

@param  multiplicand value to be multiplied by this <tt>BigDecimal</tt>.
@param  mc the context to use.
@return <tt>this * multiplicand</tt>, rounded as necessary.
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>.
@since  1.5"
      end

      operation 7142811 "divide"
	public return_type class_ref 178459 // BigDecimal
	nparams 3
	  param inout name "divisor" type class_ref 178459 // BigDecimal
	  param in name "scale" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(this /
divisor)</tt>, and whose scale is as specified.  If rounding must
be performed to generate a result with the specified scale, the
specified rounding mode is applied.

<p>The new {@link #divide(BigDecimal, int, RoundingMode)} method
should be used in preference to this legacy method.

@param  divisor value by which this <tt>BigDecimal</tt> is to be divided.
@param  scale scale of the <tt>BigDecimal</tt> quotient to be returned.
@param  roundingMode rounding mode to apply.
@return <tt>this / divisor</tt>
@throws ArithmeticException if <tt>divisor</tt> is zero,
        <tt>roundingMode==ROUND_UNNECESSARY</tt> and
        the specified scale is insufficient to represent the result
        of the division exactly.
@throws IllegalArgumentException if <tt>roundingMode</tt> does not
        represent a valid rounding mode.
@see    #ROUND_UP
@see    #ROUND_DOWN
@see    #ROUND_CEILING
@see    #ROUND_FLOOR
@see    #ROUND_HALF_UP
@see    #ROUND_HALF_DOWN
@see    #ROUND_HALF_EVEN
@see    #ROUND_UNNECESSARY"
      end

      operation 7142939 "divide"
	public return_type class_ref 178459 // BigDecimal
	nparams 3
	  param inout name "divisor" type class_ref 178459 // BigDecimal
	  param in name "scale" explicit_type "int"
	  param inout name "roundingMode" type class_ref 925595 // RoundingMode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(this /
divisor)</tt>, and whose scale is as specified.  If rounding must
be performed to generate a result with the specified scale, the
specified rounding mode is applied.

@param  divisor value by which this <tt>BigDecimal</tt> is to be divided.
@param  scale scale of the <tt>BigDecimal</tt> quotient to be returned.
@param  roundingMode rounding mode to apply.
@return <tt>this / divisor</tt>
@throws ArithmeticException if <tt>divisor</tt> is zero,
        <tt>roundingMode==RoundingMode.UNNECESSARY</tt> and
        the specified scale is insufficient to represent the result
        of the division exactly.
@since 1.5"
      end

      operation 7143067 "divide"
	public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 178459 // BigDecimal
	  param in name "roundingMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(this /
divisor)</tt>, and whose scale is <tt>this.scale()</tt>.  If
rounding must be performed to generate a result with the given
scale, the specified rounding mode is applied.

<p>The new {@link #divide(BigDecimal, RoundingMode)} method
should be used in preference to this legacy method.

@param  divisor value by which this <tt>BigDecimal</tt> is to be divided.
@param  roundingMode rounding mode to apply.
@return <tt>this / divisor</tt>
@throws ArithmeticException if <tt>divisor==0</tt>, or
        <tt>roundingMode==ROUND_UNNECESSARY</tt> and
        <tt>this.scale()</tt> is insufficient to represent the result
        of the division exactly.
@throws IllegalArgumentException if <tt>roundingMode</tt> does not
        represent a valid rounding mode.
@see    #ROUND_UP
@see    #ROUND_DOWN
@see    #ROUND_CEILING
@see    #ROUND_FLOOR
@see    #ROUND_HALF_UP
@see    #ROUND_HALF_DOWN
@see    #ROUND_HALF_EVEN
@see    #ROUND_UNNECESSARY"
      end

      operation 7143195 "divide"
	public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 178459 // BigDecimal
	  param inout name "roundingMode" type class_ref 925595 // RoundingMode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(this /
divisor)</tt>, and whose scale is <tt>this.scale()</tt>.  If
rounding must be performed to generate a result with the given
scale, the specified rounding mode is applied.

@param  divisor value by which this <tt>BigDecimal</tt> is to be divided.
@param  roundingMode rounding mode to apply.
@return <tt>this / divisor</tt>
@throws ArithmeticException if <tt>divisor==0</tt>, or
        <tt>roundingMode==RoundingMode.UNNECESSARY</tt> and
        <tt>this.scale()</tt> is insufficient to represent the result
        of the division exactly."
      end

      operation 7143323 "divide"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param inout name "divisor" type class_ref 178459 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(this /
divisor)</tt>, and whose preferred scale is <tt>(this.scale() -
divisor.scale())</tt>; if the exact quotient cannot be
represented (because it has a non-terminating decimal
expansion) an <tt>ArithmeticException</tt> is thrown.

@param  divisor value by which this <tt>BigDecimal</tt> is to be divided.
@throws ArithmeticException if the exact quotient does not have a
        terminating decimal expansion
@return <tt>this / divisor</tt>
@since 1.5
@author Joseph D. Darcy"
      end

      operation 7143451 "divide"
	public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 178459 // BigDecimal
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(this /
divisor)</tt>, with rounding according to the context settings.

@param  divisor value by which this <tt>BigDecimal</tt> is to be divided.
@param  mc the context to use.
@return <tt>this / divisor</tt>, rounded as necessary.
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt> or 
        <tt>mc.precision == 0</tt> and the quotient has a 
        non-terminating decimal expansion.
@since  1.5"
      end

      operation 7143579 "divideToIntegralValue"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param inout name "divisor" type class_ref 178459 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is the integer part
of the quotient <tt>(this / divisor)</tt> rounded down.  The
preferred scale of the result is <code>(this.scale() -
divisor.scale())</code>.

@param  divisor value by which this <tt>BigDecimal</tt> is to be divided.
@return The integer part of <tt>this / divisor</tt>.
@throws ArithmeticException if <tt>divisor==0</tt>
@since  1.5"
      end

      operation 7143707 "divideToIntegralValue"
	public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 178459 // BigDecimal
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is the integer part
of <tt>(this / divisor)</tt>.  Since the integer part of the
exact quotient does not depend on the rounding mode, the
rounding mode does not affect the values returned by this
method.  The preferred scale of the result is
<code>(this.scale() - divisor.scale())</code>.  An
<tt>ArithmeticException</tt> is thrown if the integer part of
the exact quotient needs more than <tt>mc.precision</tt>
digits.

@param  divisor value by which this <tt>BigDecimal</tt> is to be divided.
@param  mc the context to use.
@return The integer part of <tt>this / divisor</tt>.
@throws ArithmeticException if <tt>divisor==0</tt>
@throws ArithmeticException if <tt>mc.precision</tt> &gt; 0 and the result
        requires a precision of more than <tt>mc.precision</tt> digits.
@since  1.5
@author Joseph D. Darcy"
      end

      operation 7143835 "remainder"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param inout name "divisor" type class_ref 178459 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(this % divisor)</tt>.

<p>The remainder is given by
<tt>this.subtract(this.divideToIntegralValue(divisor).multiply(divisor))</tt>.
Note that this is not the modulo operation (the result can be
negative).

@param  divisor value by which this <tt>BigDecimal</tt> is to be divided.
@return <tt>this % divisor</tt>.
@throws ArithmeticException if <tt>divisor==0</tt>
@since  1.5"
      end

      operation 7143963 "remainder"
	public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 178459 // BigDecimal
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(this %
divisor)</tt>, with rounding according to the context settings.
The <tt>MathContext</tt> settings affect the implicit divide
used to compute the remainder.  The remainder computation
itself is by definition exact.  Therefore, the remainder may
contain more than <tt>mc.getPrecision()</tt> digits.

<p>The remainder is given by
<tt>this.subtract(this.divideToIntegralValue(divisor,
mc).multiply(divisor))</tt>.  Note that this is not the modulo
operation (the result can be negative).

@param  divisor value by which this <tt>BigDecimal</tt> is to be divided.
@param  mc the context to use.
@return <tt>this % divisor</tt>, rounded as necessary.
@throws ArithmeticException if <tt>divisor==0</tt>
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>, or <tt>mc.precision</tt> 
        &gt; 0 and the result of <tt>this.divideToIntgralValue(divisor)</tt> would 
        require a precision of more than <tt>mc.precision</tt> digits.
@see    #divideToIntegralValue(java.math.BigDecimal, java.math.MathContext)
@since  1.5"
      end

      operation 7144091 "divideAndRemainder"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param inout name "divisor" type class_ref 178459 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a two-element <tt>BigDecimal</tt> array containing the
result of <tt>divideToIntegralValue</tt> followed by the result of
<tt>remainder</tt> on the two operands.

<p>Note that if both the integer quotient and remainder are
needed, this method is faster than using the
<tt>divideToIntegralValue</tt> and <tt>remainder</tt> methods
separately because the division need only be carried out once.

@param  divisor value by which this <tt>BigDecimal</tt> is to be divided, 
        and the remainder computed.
@return a two element <tt>BigDecimal</tt> array: the quotient 
        (the result of <tt>divideToIntegralValue</tt>) is the initial element 
        and the remainder is the final element.
@throws ArithmeticException if <tt>divisor==0</tt>
@see    #divideToIntegralValue(java.math.BigDecimal, java.math.MathContext)
@see    #remainder(java.math.BigDecimal, java.math.MathContext)
@since  1.5"
      end

      operation 7144219 "divideAndRemainder"
	public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 178459 // BigDecimal
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a two-element <tt>BigDecimal</tt> array containing the
result of <tt>divideToIntegralValue</tt> followed by the result of
<tt>remainder</tt> on the two operands calculated with rounding
according to the context settings.

<p>Note that if both the integer quotient and remainder are
needed, this method is faster than using the
<tt>divideToIntegralValue</tt> and <tt>remainder</tt> methods
separately because the division need only be carried out once.

@param  divisor value by which this <tt>BigDecimal</tt> is to be divided, 
        and the remainder computed.
@param  mc the context to use.
@return a two element <tt>BigDecimal</tt> array: the quotient 
        (the result of <tt>divideToIntegralValue</tt>) is the 
        initial element and the remainder is the final element.
@throws ArithmeticException if <tt>divisor==0</tt>
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>, or <tt>mc.precision</tt> 
        &gt; 0 and the result of <tt>this.divideToIntgralValue(divisor)</tt> would 
        require a precision of more than <tt>mc.precision</tt> digits.
@see    #divideToIntegralValue(java.math.BigDecimal, java.math.MathContext)
@see    #remainder(java.math.BigDecimal, java.math.MathContext)
@since  1.5"
      end

      operation 7144347 "pow"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is
<tt>(this<sup>n</sup>)</tt>, The power is computed exactly, to
unlimited precision.

<p>The parameter <tt>n</tt> must be in the range 0 through
999999999, inclusive.  <tt>ZERO.pow(0)</tt> returns {@link
#ONE}.

Note that future releases may expand the allowable exponent
range of this method.

@param  n power to raise this <tt>BigDecimal</tt> to.
@return <tt>this<sup>n</sup></tt>
@throws ArithmeticException if <tt>n</tt> is out of range.
@since  1.5"
      end

      operation 7144475 "pow"
	public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param in name "n" explicit_type "int"
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is
<tt>(this<sup>n</sup>)</tt>.  The current implementation uses
the core algorithm defined in ANSI standard X3.274-1996 with
rounding according to the context settings.  In general, the
returned numerical value is within two ulps of the exact
numerical value for the chosen precision.  Note that future
releases may use a different algorithm with a decreased
allowable error bound and increased allowable exponent range.

<p>The X3.274-1996 algorithm is:

<ul>
<li> An <tt>ArithmeticException</tt> exception is thrown if
 <ul>
   <li><tt>abs(n) &gt; 999999999</tt>
   <li><tt>mc.precision == 0</tt> and <tt>n &lt; 0</tt>
   <li><tt>mc.precision &gt; 0</tt> and <tt>n</tt> has more than
   <tt>mc.precision</tt> decimal digits
 </ul>

<li> if <tt>n</tt> is zero, {@link #ONE} is returned even if
<tt>this</tt> is zero, otherwise
<ul>
  <li> if <tt>n</tt> is positive, the result is calculated via
  the repeated squaring technique into a single accumulator.
  The individual multiplications with the accumulator use the
  same math context settings as in <tt>mc</tt> except for a
  precision increased to <tt>mc.precision + elength + 1</tt>
  where <tt>elength</tt> is the number of decimal digits in
  <tt>n</tt>.

  <li> if <tt>n</tt> is negative, the result is calculated as if
  <tt>n</tt> were positive; this value is then divided into one
  using the working precision specified above.

  <li> The final value from either the positive or negative case
  is then rounded to the destination precision.
  </ul>
</ul>

@param  n power to raise this <tt>BigDecimal</tt> to.
@param  mc the context to use.
@return <tt>this<sup>n</sup></tt> using the ANSI standard X3.274-1996
        algorithm
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>, or <tt>n</tt> is out 
        of range.
@since  1.5"
      end

      operation 7144603 "abs"
	public return_type class_ref 178459 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is the absolute value
of this <tt>BigDecimal</tt>, and whose scale is
<tt>this.scale()</tt>.

@return <tt>abs(this)</tt>"
      end

      operation 7144731 "abs"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is the absolute value
of this <tt>BigDecimal</tt>, with rounding according to the
context settings.

@param mc the context to use.
@return <tt>abs(this)</tt>, rounded as necessary.
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>."
      end

      operation 7144859 "negate"
	public return_type class_ref 178459 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(-this)</tt>,
and whose scale is <tt>this.scale()</tt>.

@return <tt>-this</tt>."
      end

      operation 7144987 "negate"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(-this)</tt>,
with rounding according to the context settings.

@param mc the context to use.
@return <tt>-this</tt>, rounded as necessary.
@throws ArithmeticException if or the result is inexact but the 
        rounding mode is <tt>UNNECESSARY</tt>.
@since  1.5"
      end

      operation 7145115 "plus"
	public return_type class_ref 178459 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(+this)</tt>, and whose
scale is <tt>this.scale()</tt>.

<p>This method, which simply returns this <tt>BigDecimal</tt>
is included for symmetry with the unary minus method {@link
#negate()}.

@return <tt>this</tt>.
@see #negate()
@since  1.5"
      end

      operation 7145243 "plus"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose value is <tt>(+this)</tt>,
with rounding according to the context settings.

<p>The effect of this method is identical to that of the {@link
#round(MathContext)} method.

@param mc the context to use.
@return <tt>this</tt>, rounded as necessary.  A zero result will
        have a scale of 0.
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>.
@see    #round(MathContext)
@since  1.5"
      end

      operation 7145371 "signum"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signum function of this <tt>BigDecimal</tt>.

@return -1, 0, or 1 as the value of this <tt>BigDecimal</tt> 
        is negative, zero, or positive."
      end

      operation 7145499 "scale"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <i>scale</i> of this <tt>BigDecimal</tt>.  If zero
or positive, the scale is the number of digits to the right of
the decimal point.  If negative, the unscaled value of the
number is multiplied by ten to the power of the negation of the
scale.  For example, a scale of <tt>-3</tt> means the unscaled
value is multiplied by 1000.

@return the scale of this <tt>BigDecimal</tt>."
      end

      operation 7145627 "precision"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <i>precision</i> of this <tt>BigDecimal</tt>.  (The
precision is the number of digits in the unscaled value.)

<p>The precision of a zero value is 1.

@return the precision of this <tt>BigDecimal</tt>.
@since  1.5"
      end

      operation 7145755 "unscaledValue"
	public return_type class_ref 775835 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigInteger</tt> whose value is the <i>unscaled
value</i> of this <tt>BigDecimal</tt>.  (Computes <tt>(this *
10<sup>this.scale()</sup>)</tt>.)

@return the unscaled value of this <tt>BigDecimal</tt>.
@since  1.2"
      end

      attribute 2756251 "ROUND_UP"
	class_attribute const_attribute public explicit_type "int"
	init_value "=            0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Rounding Modes

Rounding mode to round away from zero.  Always increments the
digit prior to a nonzero discarded fraction.  Note that this rounding
mode never decreases the magnitude of the calculated value.
"
      end

      attribute 2756379 "ROUND_DOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value "=          1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards zero.  Never increments the digit
prior to a discarded fraction (i.e., truncates).  Note that this
rounding mode never increases the magnitude of the calculated value.
"
      end

      attribute 2756507 "ROUND_CEILING"
	class_attribute const_attribute public explicit_type "int"
	init_value "=       2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards positive infinity.  If the
<tt>BigDecimal</tt> is positive, behaves as for
<tt>ROUND_UP</tt>; if negative, behaves as for
<tt>ROUND_DOWN</tt>.  Note that this rounding mode never
decreases the calculated value.
"
      end

      attribute 2756635 "ROUND_FLOOR"
	class_attribute const_attribute public explicit_type "int"
	init_value "=         3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards negative infinity.  If the
<tt>BigDecimal</tt> is positive, behave as for
<tt>ROUND_DOWN</tt>; if negative, behave as for
<tt>ROUND_UP</tt>.  Note that this rounding mode never
increases the calculated value.
"
      end

      attribute 2756763 "ROUND_HALF_UP"
	class_attribute const_attribute public explicit_type "int"
	init_value "=       4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards &quot;nearest neighbor&quot;
unless both neighbors are equidistant, in which case round up.
Behaves as for <tt>ROUND_UP</tt> if the discarded fraction is
&gt;= 0.5; otherwise, behaves as for <tt>ROUND_DOWN</tt>.  Note
that this is the rounding mode that most of us were taught in
grade school.
"
      end

      attribute 2756891 "ROUND_HALF_DOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value "=     5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards &quot;nearest neighbor&quot;
unless both neighbors are equidistant, in which case round
down.  Behaves as for <tt>ROUND_UP</tt> if the discarded
fraction is &gt; 0.5; otherwise, behaves as for
<tt>ROUND_DOWN</tt>.
"
      end

      attribute 2757019 "ROUND_HALF_EVEN"
	class_attribute const_attribute public explicit_type "int"
	init_value "=     6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards the &quot;nearest neighbor&quot;
unless both neighbors are equidistant, in which case, round
towards the even neighbor.  Behaves as for
<tt>ROUND_HALF_UP</tt> if the digit to the left of the
discarded fraction is odd; behaves as for
<tt>ROUND_HALF_DOWN</tt> if it's even.  Note that this is the
rounding mode that minimizes cumulative error when applied
repeatedly over a sequence of calculations.
"
      end

      attribute 2757147 "ROUND_UNNECESSARY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=   7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to assert that the requested operation has an exact
result, hence no rounding is necessary.  If this rounding mode is
specified on an operation that yields an inexact result, an
<tt>ArithmeticException</tt> is thrown.
"
      end

      operation 7145883 "round"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Scaling/Rounding Operations

Returns a <tt>BigDecimal</tt> rounded according to the
<tt>MathContext</tt> settings.  If the precision setting is 0 then
no rounding takes place.

<p>The effect of this method is identical to that of the
{@link #plus(MathContext)} method.

@param mc the context to use.
@return a <tt>BigDecimal</tt> rounded according to the 
        <tt>MathContext</tt> settings.
@throws ArithmeticException if the rounding mode is
        <tt>UNNECESSARY</tt> and the
        <tt>BigDecimal</tt>  operation would require rounding.
@see    #plus(MathContext)
@since  1.5"
      end

      operation 7146011 "setScale"
	public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param in name "newScale" explicit_type "int"
	  param inout name "roundingMode" type class_ref 925595 // RoundingMode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose scale is the specified
value, and whose unscaled value is determined by multiplying or
dividing this <tt>BigDecimal</tt>'s unscaled value by the
appropriate power of ten to maintain its overall value.  If the
scale is reduced by the operation, the unscaled value must be
divided (rather than multiplied), and the value may be changed;
in this case, the specified rounding mode is applied to the
division.

@param  newScale scale of the <tt>BigDecimal</tt> value to be returned.
@param  roundingMode The rounding mode to apply.
@return a <tt>BigDecimal</tt> whose scale is the specified value, 
        and whose unscaled value is determined by multiplying or 
        dividing this <tt>BigDecimal</tt>'s unscaled value by the 
        appropriate power of ten to maintain its overall value.
@throws ArithmeticException if <tt>roundingMode==UNNECESSARY</tt>
        and the specified scaling operation would require
        rounding.
@see    RoundingMode
@since  1.5"
      end

      operation 7146139 "setScale"
	public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param in name "newScale" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose scale is the specified
value, and whose unscaled value is determined by multiplying or
dividing this <tt>BigDecimal</tt>'s unscaled value by the
appropriate power of ten to maintain its overall value.  If the
scale is reduced by the operation, the unscaled value must be
divided (rather than multiplied), and the value may be changed;
in this case, the specified rounding mode is applied to the
division.

<p>Note that since BigDecimal objects are immutable, calls of
this method do <i>not</i> result in the original object being
modified, contrary to the usual convention of having methods
named <tt>set<i>X</i></tt> mutate field <tt><i>X</i></tt>.
Instead, <tt>setScale</tt> returns an object with the proper
scale; the returned object may or may not be newly allocated.

<p>The new {@link #setScale(int, RoundingMode)} method should
be used in preference to this legacy method.

@param  newScale scale of the <tt>BigDecimal</tt> value to be returned.
@param  roundingMode The rounding mode to apply.
@return a <tt>BigDecimal</tt> whose scale is the specified value, 
        and whose unscaled value is determined by multiplying or 
        dividing this <tt>BigDecimal</tt>'s unscaled value by the 
        appropriate power of ten to maintain its overall value.
@throws ArithmeticException if <tt>roundingMode==ROUND_UNNECESSARY</tt>
        and the specified scaling operation would require
        rounding.
@throws IllegalArgumentException if <tt>roundingMode</tt> does not
        represent a valid rounding mode.
@see    #ROUND_UP
@see    #ROUND_DOWN
@see    #ROUND_CEILING
@see    #ROUND_FLOOR
@see    #ROUND_HALF_UP
@see    #ROUND_HALF_DOWN
@see    #ROUND_HALF_EVEN
@see    #ROUND_UNNECESSARY"
      end

      operation 7146267 "setScale"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param in name "newScale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> whose scale is the specified
value, and whose value is numerically equal to this
<tt>BigDecimal</tt>'s.  Throws an <tt>ArithmeticException</tt>
if this is not possible.

<p>This call is typically used to increase the scale, in which
case it is guaranteed that there exists a <tt>BigDecimal</tt>
of the specified scale and the correct value.  The call can
also be used to reduce the scale if the caller knows that the
<tt>BigDecimal</tt> has sufficiently many zeros at the end of
its fractional part (i.e., factors of ten in its integer value)
to allow for the rescaling without changing its value.

<p>This method returns the same result as the two-argument
versions of <tt>setScale</tt>, but saves the caller the trouble
of specifying a rounding mode in cases where it is irrelevant.

<p>Note that since <tt>BigDecimal</tt> objects are immutable,
calls of this method do <i>not</i> result in the original
object being modified, contrary to the usual convention of
having methods named <tt>set<i>X</i></tt> mutate field
<tt><i>X</i></tt>.  Instead, <tt>setScale</tt> returns an
object with the proper scale; the returned object may or may
not be newly allocated.

@param  newScale scale of the <tt>BigDecimal</tt> value to be returned.
@return a <tt>BigDecimal</tt> whose scale is the specified value, and 
        whose unscaled value is determined by multiplying or dividing 
        this <tt>BigDecimal</tt>'s unscaled value by the appropriate 
        power of ten to maintain its overall value.
@throws ArithmeticException if the specified scaling operation would
        require rounding.
@see    #setScale(int, int)
@see    #setScale(int, RoundingMode)"
      end

      operation 7146395 "movePointLeft"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Decimal Point Motion Operations

Returns a <tt>BigDecimal</tt> which is equivalent to this one
with the decimal point moved <tt>n</tt> places to the left.  If
<tt>n</tt> is non-negative, the call merely adds <tt>n</tt> to
the scale.  If <tt>n</tt> is negative, the call is equivalent
to <tt>movePointRight(-n)</tt>.  The <tt>BigDecimal</tt>
returned by this call has value <tt>(this &times;
10<sup>-n</sup>)</tt> and scale <tt>max(this.scale()+n,
0)</tt>.

@param  n number of places to move the decimal point to the left.
@return a <tt>BigDecimal</tt> which is equivalent to this one with the 
        decimal point moved <tt>n</tt> places to the left.
@throws ArithmeticException if scale overflows."
      end

      operation 7146523 "movePointRight"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> which is equivalent to this one
with the decimal point moved <tt>n</tt> places to the right.
If <tt>n</tt> is non-negative, the call merely subtracts
<tt>n</tt> from the scale.  If <tt>n</tt> is negative, the call
is equivalent to <tt>movePointLeft(-n)</tt>.  The
<tt>BigDecimal</tt> returned by this call has value <tt>(this
&times; 10<sup>n</sup>)</tt> and scale <tt>max(this.scale()-n,
0)</tt>.

@param  n number of places to move the decimal point to the right.
@return a <tt>BigDecimal</tt> which is equivalent to this one
        with the decimal point moved <tt>n</tt> places to the right.
@throws ArithmeticException if scale overflows."
      end

      operation 7146651 "scaleByPowerOfTen"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigDecimal whose numerical value is equal to
(<tt>this</tt> * 10<sup>n</sup>).  The scale of
the result is <tt>(this.scale() - n)</tt>.

@throws ArithmeticException if the scale would be
        outside the range of a 32-bit integer.

@since 1.5"
      end

      operation 7146779 "stripTrailingZeros"
	public return_type class_ref 178459 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> which is numerically equal to
this one but with any trailing zeros removed from the
representation.  For example, stripping the trailing zeros from
the <tt>BigDecimal</tt> value <tt>600.0</tt>, which has
[<tt>BigInteger</tt>, <tt>scale</tt>] components equals to
[6000, 1], yields <tt>6E2</tt> with [<tt>BigInteger</tt>,
<tt>scale</tt>] components equals to [6, -2]

@return a numerically equal <tt>BigDecimal</tt> with any
trailing zeros removed."
      end

      operation 7146907 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "val" type class_ref 178459 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison Operations

Compares this <tt>BigDecimal</tt> with the specified
<tt>BigDecimal</tt>.  Two <tt>BigDecimal</tt> objects that are
equal in value but have a different scale (like 2.0 and 2.00)
are considered equal by this method.  This method is provided
in preference to individual methods for each of the six boolean
comparison operators (&lt;, ==, &gt;, &gt;=, !=, &lt;=).  The
suggested idiom for performing these comparisons is:
<tt>(x.compareTo(y)</tt> &lt;<i>op</i>&gt; <tt>0)</tt>, where
&lt;<i>op</i>&gt; is one of the six comparison operators.

@param  val <tt>BigDecimal</tt> to which this <tt>BigDecimal</tt> is 
        to be compared.
@return -1, 0, or 1 as this <tt>BigDecimal</tt> is numerically 
         less than, equal to, or greater than <tt>val</tt>."
      end

      operation 7147035 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "x" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <tt>BigDecimal</tt> with the specified
<tt>Object</tt> for equality.  Unlike {@link
#compareTo(BigDecimal) compareTo}, this method considers two
<tt>BigDecimal</tt> objects equal only if they are equal in
value and scale (thus 2.0 is not equal to 2.00 when compared by
this method).

@param  x <tt>Object</tt> to which this <tt>BigDecimal</tt> is 
        to be compared.
@return <tt>true</tt> if and only if the specified <tt>Object</tt> is a
        <tt>BigDecimal</tt> whose value and scale are equal to this 
        <tt>BigDecimal</tt>'s.
@see    #compareTo(java.math.BigDecimal)
@see    #hashCode"
      end

      operation 7147163 "min"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param inout name "val" type class_ref 178459 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum of this <tt>BigDecimal</tt> and
<tt>val</tt>.

@param  val value with which the minimum is to be computed.
@return the <tt>BigDecimal</tt> whose value is the lesser of this 
        <tt>BigDecimal</tt> and <tt>val</tt>.  If they are equal, 
        as defined by the {@link #compareTo(BigDecimal) compareTo}  
        method, <tt>this</tt> is returned.
@see    #compareTo(java.math.BigDecimal)"
      end

      operation 7147291 "max"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param inout name "val" type class_ref 178459 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum of this <tt>BigDecimal</tt> and <tt>val</tt>.

@param  val value with which the maximum is to be computed.
@return the <tt>BigDecimal</tt> whose value is the greater of this 
        <tt>BigDecimal</tt> and <tt>val</tt>.  If they are equal, 
        as defined by the {@link #compareTo(BigDecimal) compareTo} 
        method, <tt>this</tt> is returned.
@see    #compareTo(java.math.BigDecimal)"
      end

      operation 7147419 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Hash Function

Returns the hash code for this <tt>BigDecimal</tt>.  Note that
two <tt>BigDecimal</tt> objects that are numerically equal but
differ in scale (like 2.0 and 2.00) will generally <i>not</i>
have the same hash code.

@return hash code for this <tt>BigDecimal</tt>.
@see #equals(Object)"
      end

      operation 7147547 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Format Converters

Returns the string representation of this <tt>BigDecimal</tt>,
using scientific notation if an exponent is needed.

<p>A standard canonical string form of the <tt>BigDecimal</tt>
is created as though by the following steps: first, the
absolute value of the unscaled value of the <tt>BigDecimal</tt>
is converted to a string in base ten using the characters
<tt>'0'</tt> through <tt>'9'</tt> with no leading zeros (except
if its value is zero, in which case a single <tt>'0'</tt>
character is used).

<p>Next, an <i>adjusted exponent</i> is calculated; this is the
negated scale, plus the number of characters in the converted
unscaled value, less one.  That is,
<tt>-scale+(ulength-1)</tt>, where <tt>ulength</tt> is the
length of the absolute value of the unscaled value in decimal
digits (its <i>precision</i>).

<p>If the scale is greater than or equal to zero and the
adjusted exponent is greater than or equal to <tt>-6</tt>, the
number will be converted to a character form without using
exponential notation.  In this case, if the scale is zero then
no decimal point is added and if the scale is positive a
decimal point will be inserted with the scale specifying the
number of characters to the right of the decimal point.
<tt>'0'</tt> characters are added to the left of the converted
unscaled value as necessary.  If no character precedes the
decimal point after this insertion then a conventional
<tt>'0'</tt> character is prefixed.

<p>Otherwise (that is, if the scale is negative, or the
adjusted exponent is less than <tt>-6</tt>), the number will be
converted to a character form using exponential notation.  In
this case, if the converted <tt>BigInteger</tt> has more than
one digit a decimal point is inserted after the first digit.
An exponent in character form is then suffixed to the converted
unscaled value (perhaps with inserted decimal point); this
comprises the letter <tt>'E'</tt> followed immediately by the
adjusted exponent converted to a character form.  The latter is
in base ten, using the characters <tt>'0'</tt> through
<tt>'9'</tt> with no leading zeros, and is always prefixed by a
sign character <tt>'-'</tt> (<tt>'&#92;u002D'</tt>) if the
adjusted exponent is negative, <tt>'+'</tt>
(<tt>'&#92;u002B'</tt>) otherwise).

<p>Finally, the entire string is prefixed by a minus sign
character <tt>'-'</tt> (<tt>'&#92;u002D'</tt>) if the unscaled
value is less than zero.  No sign character is prefixed if the
unscaled value is zero or positive.

<p><b>Examples:</b>
<p>For each representation [<i>unscaled value</i>, <i>scale</i>]
on the left, the resulting string is shown on the right.
<pre>
[123,0]      &quot;123&quot;
[-123,0]     &quot;-123&quot;
[123,-1]     &quot;1.23E+3&quot;
[123,-3]     &quot;1.23E+5&quot;
[123,1]      &quot;12.3&quot;
[123,5]      &quot;0.00123&quot;
[123,10]     &quot;1.23E-8&quot;
[-123,12]    &quot;-1.23E-10&quot;
</pre>

<b>Notes:</b>
<ol>

<li>There is a one-to-one mapping between the distinguishable
<tt>BigDecimal</tt> values and the result of this conversion.
That is, every distinguishable <tt>BigDecimal</tt> value
(unscaled value and scale) has a unique string representation
as a result of using <tt>toString</tt>.  If that string
representation is converted back to a <tt>BigDecimal</tt> using
the {@link #BigDecimal(String)} constructor, then the original
value will be recovered.

<li>The string produced for a given number is always the same;
it is not affected by locale.  This means that it can be used
as a canonical string representation for exchanging decimal
data, or as a key for a Hashtable, etc.  Locale-sensitive
number formatting and parsing is handled by the {@link
java.text.NumberFormat} class and its subclasses.

<li>The {@link #toEngineeringString} method may be used for
presenting numbers with exponents in engineering notation, and the
{@link #setScale(int,RoundingMode) setScale} method may be used for
rounding a <tt>BigDecimal</tt> so it has a known number of digits after
the decimal point.

<li>The digit-to-character mapping provided by
<tt>Character.forDigit</tt> is used.

</ol>

@return string representation of this <tt>BigDecimal</tt>.
@see    Character#forDigit
@see    #BigDecimal(java.lang.String)"
      end

      operation 7147675 "toEngineeringString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <tt>BigDecimal</tt>,
using engineering notation if an exponent is needed.

<p>Returns a string that represents the <tt>BigDecimal</tt> as
described in the {@link #toString()} method, except that if
exponential notation is used, the power of ten is adjusted to
be a multiple of three (engineering notation) such that the
integer part of nonzero values will be in the range 1 through
999.  If exponential notation is used for zero values, a
decimal point and one or two fractional zero digits are used so
that the scale of the zero value is preserved.  Note that
unlike the output of {@link #toString()}, the output of this
method is <em>not</em> guaranteed to recover the same [integer,
scale] pair of this <tt>BigDecimal</tt> if the output string is
converting back to a <tt>BigDecimal</tt> using the {@linkplain
#BigDecimal(String) string constructor}.  The result of this method meets
the weaker constraint of always producing a numerically equal
result from applying the string constructor to the method's output.

@return string representation of this <tt>BigDecimal</tt>, using
        engineering notation if an exponent is needed.
@since  1.5"
      end

      operation 7147803 "toPlainString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <tt>BigDecimal</tt>
without an exponent field.  For values with a positive scale,
the number of digits to the right of the decimal point is used
to indicate scale.  For values with a zero or negative scale,
the resulting string is generated as if the value were
converted to a numerically equal value with zero scale and as
if all the trailing zeros of the zero scale value were present
in the result.

The entire string is prefixed by a minus sign character '-'
(<tt>'&#92;u002D'</tt>) if the unscaled value is less than
zero. No sign character is prefixed if the unscaled value is
zero or positive.

Note that if the result of this method is passed to the
{@linkplain #BigDecimal(String) string constructor}, only the
numerical value of this <tt>BigDecimal</tt> will necessarily be
recovered; the representation of the new <tt>BigDecimal</tt>
may have a different scale.  In particular, if this
<tt>BigDecimal</tt> has a positive scale, the string resulting
from this method will have a scale of zero when processed by
the string constructor.

(This method behaves analogously to the <tt>toString</tt>
method in 1.4 and earlier releases.)

@return a string representation of this <tt>BigDecimal</tt>
without an exponent field.
@since 1.5
@see #toString()
@see #toEngineeringString()"
      end

      operation 7147931 "getValueString"
	private explicit_return_type "String"
	nparams 3
	  param in name "signum" explicit_type "int"
	  param in name "intString" explicit_type "String"
	  param in name "scale" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a digit.digit string "
      end

      operation 7148059 "toBigInteger"
	public return_type class_ref 775835 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this <tt>BigDecimal</tt> to a <tt>BigInteger</tt>.
This conversion is analogous to a <a
href=\"http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363\"><i>narrowing
primitive conversion</i></a> from <tt>double</tt> to
<tt>long</tt> as defined in the <a
href=\"http://java.sun.com/docs/books/jls/html/\">Java Language
Specification</a>: any fractional part of this
<tt>BigDecimal</tt> will be discarded.  Note that this
conversion can lose information about the precision of the
<tt>BigDecimal</tt> value.
<p>
To have an exception thrown if the conversion is inexact (in
other words if a nonzero fractional part is discarded), use the
{@link #toBigIntegerExact()} method.

@return this <tt>BigDecimal</tt> converted to a <tt>BigInteger</tt>."
      end

      operation 7148187 "toBigIntegerExact"
	public return_type class_ref 775835 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this <tt>BigDecimal</tt> to a <tt>BigInteger</tt>,
checking for lost information.  An exception is thrown if this
<tt>BigDecimal</tt> has a nonzero fractional part.

@return this <tt>BigDecimal</tt> converted to a <tt>BigInteger</tt>.
@throws ArithmeticException if <tt>this</tt> has a nonzero
        fractional part.
@since  1.5"
      end

      operation 7148315 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this <tt>BigDecimal</tt> to a <tt>long</tt>.  This
conversion is analogous to a <a
href=\"http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363\"><i>narrowing
primitive conversion</i></a> from <tt>double</tt> to
<tt>short</tt> as defined in the <a
href=\"http://java.sun.com/docs/books/jls/html/\">Java Language
Specification</a>: any fractional part of this
<tt>BigDecimal</tt> will be discarded, and if the resulting
&quot;<tt>BigInteger</tt>&quot; is too big to fit in a
<tt>long</tt>, only the low-order 64 bits are returned.
Note that this conversion can lose information about the
overall magnitude and precision of this <tt>BigDecimal</tt> value as well
as return a result with the opposite sign.

@return this <tt>BigDecimal</tt> converted to a <tt>long</tt>."
      end

      operation 7148443 "longValueExact"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this <tt>BigDecimal</tt> to a <tt>long</tt>, checking
for lost information.  If this <tt>BigDecimal</tt> has a
nonzero fractional part or is out of the possible range for a
<tt>long</tt> result then an <tt>ArithmeticException</tt> is
thrown.

@return this <tt>BigDecimal</tt> converted to a <tt>long</tt>.
@throws ArithmeticException if <tt>this</tt> has a nonzero
        fractional part, or will not fit in a <tt>long</tt>.
@since  1.5"
      end

      classrelation 1804955 // LONGMIN (<unidirectional association>)
	relation 1804955 --->
	  a role_name "LONGMIN" init_value "=  null" class_relation private
	    comment " These constants are only initialized if needed
 BigInteger equal to Long.MIN_VALUE. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1804955 // LONGMIN (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      classrelation 1805083 // LONGMAX (<unidirectional association>)
	relation 1805083 --->
	  a role_name "LONGMAX" init_value "=  null" class_relation private
	    comment " BigInteger equal to Long.MAX_VALUE. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1805083 // LONGMAX (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      operation 7148571 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this <tt>BigDecimal</tt> to an <tt>int</tt>.  This
conversion is analogous to a <a
href=\"http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363\"><i>narrowing
primitive conversion</i></a> from <tt>double</tt> to
<tt>short</tt> as defined in the <a
href=\"http://java.sun.com/docs/books/jls/html/\">Java Language
Specification</a>: any fractional part of this
<tt>BigDecimal</tt> will be discarded, and if the resulting
&quot;<tt>BigInteger</tt>&quot; is too big to fit in an
<tt>int</tt>, only the low-order 32 bits are returned.
Note that this conversion can lose information about the
overall magnitude and precision of this <tt>BigDecimal</tt>
value as well as return a result with the opposite sign.

@return this <tt>BigDecimal</tt> converted to an <tt>int</tt>."
      end

      operation 7148699 "intValueExact"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this <tt>BigDecimal</tt> to an <tt>int</tt>, checking
for lost information.  If this <tt>BigDecimal</tt> has a
nonzero fractional part or is out of the possible range for an
<tt>int</tt> result then an <tt>ArithmeticException</tt> is
thrown.

@return this <tt>BigDecimal</tt> converted to an <tt>int</tt>.
@throws ArithmeticException if <tt>this</tt> has a nonzero
        fractional part, or will not fit in an <tt>int</tt>.
@since  1.5"
      end

      operation 7148827 "shortValueExact"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this <tt>BigDecimal</tt> to a <tt>short</tt>, checking
for lost information.  If this <tt>BigDecimal</tt> has a
nonzero fractional part or is out of the possible range for a
<tt>short</tt> result then an <tt>ArithmeticException</tt> is
thrown.

@return this <tt>BigDecimal</tt> converted to a <tt>short</tt>.
@throws ArithmeticException if <tt>this</tt> has a nonzero
        fractional part, or will not fit in a <tt>short</tt>.
@since  1.5"
      end

      operation 7148955 "byteValueExact"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this <tt>BigDecimal</tt> to a <tt>byte</tt>, checking
for lost information.  If this <tt>BigDecimal</tt> has a
nonzero fractional part or is out of the possible range for a
<tt>byte</tt> result then an <tt>ArithmeticException</tt> is
thrown.

@return this <tt>BigDecimal</tt> converted to a <tt>byte</tt>.
@throws ArithmeticException if <tt>this</tt> has a nonzero
        fractional part, or will not fit in a <tt>byte</tt>.
@since  1.5"
      end

      operation 7149083 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this <tt>BigDecimal</tt> to a <tt>float</tt>.
This conversion is similar to the <a
href=\"http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363\"><i>narrowing
primitive conversion</i></a> from <tt>double</tt> to
<tt>float</tt> defined in the <a
href=\"http://java.sun.com/docs/books/jls/html/\">Java Language
Specification</a>: if this <tt>BigDecimal</tt> has too great a
magnitude to represent as a <tt>float</tt>, it will be
converted to {@link Float#NEGATIVE_INFINITY} or {@link
Float#POSITIVE_INFINITY} as appropriate.  Note that even when
the return value is finite, this conversion can lose
information about the precision of the <tt>BigDecimal</tt>
value.

@return this <tt>BigDecimal</tt> converted to a <tt>float</tt>."
      end

      operation 7149211 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this <tt>BigDecimal</tt> to a <tt>double</tt>.
This conversion is similar to the <a
href=\"http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363\"><i>narrowing
primitive conversion</i></a> from <tt>double</tt> to
<tt>float</tt> as defined in the <a
href=\"http://java.sun.com/docs/books/jls/html/\">Java Language
Specification</a>: if this <tt>BigDecimal</tt> has too great a
magnitude represent as a <tt>double</tt>, it will be
converted to {@link Double#NEGATIVE_INFINITY} or {@link
Double#POSITIVE_INFINITY} as appropriate.  Note that even when
the return value is finite, this conversion can lose
information about the precision of the <tt>BigDecimal</tt>
value.

@return this <tt>BigDecimal</tt> converted to a <tt>double</tt>."
      end

      operation 7149339 "ulp"
	public return_type class_ref 178459 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of an ulp, a unit in the last place, of this
<tt>BigDecimal</tt>.  An ulp of a nonzero <tt>BigDecimal</tt>
value is the positive distance between this value and the
<tt>BigDecimal</tt> value next larger in magnitude with the
same number of digits.  An ulp of a zero value is numerically
equal to 1 with the scale of <tt>this</tt>.  The result is
stored with the same scale as <code>this</code> so the result
for zero and nonzero values is equal to <code>[1,
this.scale()]</code>.

@return the size of an ulp of <tt>this</tt>
@since 1.5"
      end

      operation 7149467 "layoutChars"
	private explicit_return_type "String"
	nparams 1
	  param inout name "sci" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private \"Helper\" Methods

Lay out this <tt>BigDecimal</tt> into a <tt>char[]</tt> array.
The Java 1.2 equivalent to this was called <tt>getValueString</tt>.

@param  sci <tt>true</tt> for Scientific exponential notation;
         <tt>false</tt> for Engineering
@return string with canonical string representation of this
        <tt>BigDecimal</tt>"
      end

      operation 7149595 "tenToThe"
	class_operation private return_type class_ref 775835 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return 10 to the power n, as a <tt>BigInteger</tt>.

@param  n the power of ten to be returned (>=0)
@return a <tt>BigInteger</tt> with the value (10<sup>n</sup>)"
      end

      classrelation 1805211 // TENPOWERS (<unidirectional association>)
	relation 1805211 --->
	  a role_name "TENPOWERS" multiplicity "[]" init_value "=  {BigInteger.ONE,
        BigInteger.valueOf(10),       BigInteger.valueOf(100),
        BigInteger.valueOf(1000),     BigInteger.valueOf(10000),
        BigInteger.valueOf(100000),   BigInteger.valueOf(1000000),
        BigInteger.valueOf(10000000), BigInteger.valueOf(100000000),
        BigInteger.valueOf(1000000000)}" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1805211 // TENPOWERS (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      operation 7149723 "longTenToThe"
	class_operation private explicit_return_type "long"
	nparams 2
	  param in name "val" explicit_type "long"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compute val * 10 ^ n; return this product if it is
representable as a long, INFLATED otherwise."
      end

      attribute 2757275 "thresholds"
	class_attribute private explicit_type "long"
	multiplicity "[][]"
	init_value "=  {
	{Long.MAX_VALUE, 			1L},		// 0
	{Long.MAX_VALUE/10L, 			10L},		// 1
	{Long.MAX_VALUE/100L, 			100L},		// 2
	{Long.MAX_VALUE/1000L, 			1000L},		// 3
	{Long.MAX_VALUE/10000L, 		10000L},	// 4
	{Long.MAX_VALUE/100000L, 		100000L},	// 5
	{Long.MAX_VALUE/1000000L, 		1000000L},	// 6
	{Long.MAX_VALUE/10000000L, 		10000000L},	// 7
	{Long.MAX_VALUE/100000000L, 		100000000L},	// 8
	{Long.MAX_VALUE/1000000000L, 		1000000000L},	// 9
	{Long.MAX_VALUE/10000000000L, 		10000000000L},	// 10
	{Long.MAX_VALUE/100000000000L, 		100000000000L},	// 11
	{Long.MAX_VALUE/1000000000000L, 	1000000000000L},// 12
	{Long.MAX_VALUE/100000000000000L,	10000000000000L},// 13
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7149851 "compactLong"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7149979 "inflate"
	private return_type class_ref 178459 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assign appropriate BigInteger to intVal field if intVal is
null, i.e. the compact representation is in use."
      end

      operation 7150107 "matchScale"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "val" type class_ref 178459 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Match the scales of two <tt>BigDecimal<tt>s to align their
least significant digits.

<p>If the scales of val[0] and val[1] differ, rescale
(non-destructively) the lower-scaled <tt>BigDecimal</tt> so
they match.  That is, the lower-scaled reference will be
replaced by a reference to a new object with the same scale as
the other <tt>BigDecimal</tt>.

@param  val array of two elements referring to the two
        <tt>BigDecimal</tt>s to be aligned."
      end

      operation 7150235 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the <tt>BigDecimal</tt> instance from a stream (that is,
deserialize it).

@param s the stream being read."
      end

      operation 7150363 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serialize this <tt>BigDecimal</tt> to the stream in question

@param s the stream to serialize to."
      end

      operation 7150491 "digitLength"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of this <tt>BigDecimal</tt>, in decimal digits.

Notes:
<ul>
<li> This is performance-critical; most operations where a
     context is supplied will need at least one call to this
     method.

<li> This should be a method on BigInteger; the call to this
     method in precision() can then be replaced with the
     term: intVal.digitLength().  It could also be called
     precision() in BigInteger.

     Better still -- the precision lookaside could be moved to
     BigInteger, too.

<li> This could/should use MutableBigIntegers directly for the
     reduction loop.
<ul>
@return the length of the unscaled value, in decimal digits"
      end

      attribute 2757403 "ilogTable"
	class_attribute private explicit_type "int"
	multiplicity "[]"
	init_value "=  {
	0,
	9,
	99,
	999,
	9999,
	99999,
	999999,
	9999999, 
	99999999, 
	999999999, 
	Integer.MAX_VALUE}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7150619 "intLength"
	private explicit_return_type "int"
	nparams 1
	  param in name "x" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of an unsigned <tt>int</tt>, in decimal digits.
@param i the <tt>int</tt> (treated as unsigned)
@return the length of the unscaled value, in decimal digits"
      end

      operation 7150747 "stripZerosToMatchScale"
	private return_type class_ref 178459 // BigDecimal
	nparams 1
	  param in name "preferredScale" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove insignificant trailing zeros from this
<tt>BigDecimal</tt> until the preferred scale is reached or no
more zeros can be removed.  If the preferred scale is less than
Integer.MIN_VALUE, all the trailing zeros will be removed.

<tt>BigInteger</tt> assistance could help, here?

<p>WARNING: This method should only be called on new objects as
it mutates the value fields.

@return this <tt>BigDecimal</tt> with a scale possibly reduced
to be closed to the preferred scale."
      end

      operation 7150875 "checkScale"
	private explicit_return_type "int"
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check a scale for Underflow or Overflow.  If this BigDecimal is
uninitialized or initialized and nonzero, throw an exception if
the scale is out of range.  If this is zero, saturate the scale
to the extreme value of the right sign if the scale is out of
range.

@param val The new scale.
@throws ArithmeticException (overflow or underflow) if the new
        scale is out of range.
@return validated scale as an int."
      end

      operation 7151003 "roundOp"
	private return_type class_ref 178459 // BigDecimal
	nparams 1
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Round an operand; used only if digits &gt; 0.  Does not change
<tt>this</tt>; if rounding is needed a new <tt>BigDecimal</tt>
is created and returned.

@param mc the context to use.
@throws ArithmeticException if the result is inexact but the
        rounding mode is <tt>UNNECESSARY</tt>."
      end

      operation 7151131 "roundThis"
	private explicit_return_type "void"
	nparams 1
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Round this BigDecimal according to the MathContext settings;
 used only if precision &gt; 0.

<p>WARNING: This method should only be called on new objects as
it mutates the value fields.

@param mc the context to use.
@throws ArithmeticException if the rounding mode is
        <tt>RoundingMode.UNNECESSARY</tt> and the
        <tt>BigDecimal</tt> operation would require rounding."
      end

      operation 7151259 "doRound"
	private return_type class_ref 178459 // BigDecimal
	nparams 1
	  param inout name "mc" type class_ref 925467 // MathContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>BigDecimal</tt> rounded according to the
MathContext settings; used only if <tt>mc.precision&gt;0</tt>.
Does not change <tt>this</tt>; if rounding is needed a new
<tt>BigDecimal</tt> is created and returned.

@param mc the context to use.
@return a <tt>BigDecimal</tt> rounded according to the MathContext
        settings.  May return this, if no rounding needed.
@throws ArithmeticException if the rounding mode is
        <tt>RoundingMode.UNNECESSARY</tt> and the
        result is inexact."
      end

      operation 7151387 "dropDigits"
	private return_type class_ref 178459 // BigDecimal
	nparams 2
	  param inout name "mc" type class_ref 925467 // MathContext
	  param in name "drop" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes digits from the significand of a <tt>BigDecimal</tt>,
rounding according to the MathContext settings.  Does not
change <tt>this</tt>; a new <tt>BigDecimal</tt> is always
created and returned.

<p>Actual rounding is carried out, as before, by the divide
method, as this minimized code changes.  It might be more
efficient in most cases to move rounding to here, so we can do
a round-to-length rather than round-to-scale.

@param mc the context to use.
@param drop the number of digits to drop, must be &gt; 0
@return a <tt>BigDecimal</tt> rounded according to the MathContext
        settings.  May return <tt>this</tt>, if no rounding needed.
@throws ArithmeticException if the rounding mode is
        <tt>RoundingMode.UNNECESSARY</tt> and the
        result is inexact."
      end

      operation 7151515 "longCompareTo"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "x" explicit_type "long"
	  param in name "y" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7151643 "print"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "bd" type class_ref 178459 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal printing routine"
      end

      operation 7151771 "audit"
	private return_type class_ref 178459 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check internal invariants of this BigDecimal.  These invariants
include:

<ul>

<li>The object must be initialized; either intCompact must not be
INFLATED or intVal is non-null.  Both of these conditions may
be true.

<li>If both intCompact and intVal and set, their values must be
consistent.

<li>If precision is nonzero, it must have the right value.
</ul>"
      end
    end

    class 775835 "BigInteger"
      visibility public 
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 value class_ref 775835 // BigInteger
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Immutable arbitrary-precision integers.  All operations behave as if
BigIntegers were represented in two's-complement notation (like Java's
primitive integer types).  BigInteger provides analogues to all of Java's
primitive integer operators, and all relevant methods from java.lang.Math.
Additionally, BigInteger provides operations for modular arithmetic, GCD
calculation, primality testing, prime generation, bit manipulation,
and a few other miscellaneous operations.
<p>
Semantics of arithmetic operations exactly mimic those of Java's integer
arithmetic operators, as defined in <i>The Java Language Specification</i>.
For example, division by zero throws an <tt>ArithmeticException</tt>, and
division of a negative by a positive yields a negative (or zero) remainder.
All of the details in the Spec concerning overflow are ignored, as
BigIntegers are made as large as necessary to accommodate the results of an
operation.
<p>
Semantics of shift operations extend those of Java's shift operators
to allow for negative shift distances.  A right-shift with a negative
shift distance results in a left shift, and vice-versa.  The unsigned
right shift operator (&gt;&gt;&gt;) is omitted, as this operation makes
little sense in combination with the \"infinite word size\" abstraction
provided by this class.
<p>
Semantics of bitwise logical operations exactly mimic those of Java's
bitwise integer operators.  The binary operators (<tt>and</tt>,
<tt>or</tt>, <tt>xor</tt>) implicitly perform sign extension on the shorter
of the two operands prior to performing the operation.
<p>
Comparison operations perform signed integer comparisons, analogous to
those performed by Java's relational and equality operators.
<p>
Modular arithmetic operations are provided to compute residues, perform
exponentiation, and compute multiplicative inverses.  These methods always
return a non-negative result, between <tt>0</tt> and <tt>(modulus - 1)</tt>,
inclusive.
<p>
Bit operations operate on a single bit of the two's-complement
representation of their operand.  If necessary, the operand is sign-
extended so that it contains the designated bit.  None of the single-bit
operations can produce a BigInteger with a different sign from the
BigInteger being operated on, as they affect only a single bit, and the
\"infinite word size\" abstraction provided by this class ensures that there
are infinitely many \"virtual sign bits\" preceding each BigInteger.
<p>
For the sake of brevity and clarity, pseudo-code is used throughout the
descriptions of BigInteger methods.  The pseudo-code expression
<tt>(i + j)</tt> is shorthand for \"a BigInteger whose value is
that of the BigInteger <tt>i</tt> plus that of the BigInteger <tt>j</tt>.\"
The pseudo-code expression <tt>(i == j)</tt> is shorthand for
\"<tt>true</tt> if and only if the BigInteger <tt>i</tt> represents the same
value as the BigInteger <tt>j</tt>.\"  Other pseudo-code expressions are
interpreted similarly.
<p>
All methods and constructors in this class throw
<CODE>NullPointerException</CODE> when passed
a null object reference for any input parameter.

@see     BigDecimal
@version 1.70, 08/09/05
@author  Josh Bloch
@author  Michael McCloskey
@since JDK1.1"
      classrelation 1805339 // <generalisation>
	relation 1805339 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1805339 // <generalisation>
	  b parent class_ref 413979 // Number
      end

      classrelation 1805467 // <realization>
	relation 1805467 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1805467 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      attribute 2757531 "signum"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The signum of this BigInteger: -1 for negative, 0 for zero, or
1 for positive.  Note that the BigInteger zero <i>must</i> have
a signum of 0.  This is necessary to ensures that there is exactly one
representation for each BigInteger value.

@serial
"
      end

      attribute 2757659 "mag"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The magnitude of this BigInteger, in <i>big-endian</i> order: the
zeroth element of this array is the most-significant int of the
magnitude.  The magnitude must be \"minimal\" in that the most-significant
int (<tt>mag[0]</tt>) must be non-zero.  This is necessary to
ensure that there is exactly one representation for each BigInteger
value.  Note that this implies that the BigInteger zero has a
zero-length mag array.
"
      end

      attribute 2757787 "bitCount"
	private explicit_type "int"
	init_value "=   -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " These \"redundant fields\" are initialized with recognizable nonsense
 values, and cached the first time they are needed (or never, if they
 aren't needed).

The bitCount of this BigInteger, as returned by bitCount(), or -1
(either value is acceptable).

@serial
@see #bitCount
"
      end

      attribute 2757915 "bitLength"
	private explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The bitLength of this BigInteger, as returned by bitLength(), or -1
(either value is acceptable).

@serial
@see #bitLength
"
      end

      attribute 2758043 "lowestSetBit"
	private explicit_type "int"
	init_value "=  -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The lowest set bit of this BigInteger, as returned by getLowestSetBit(),
or -2 (either value is acceptable).

@serial
@see #getLowestSetBit
"
      end

      attribute 2758171 "firstNonzeroByteNum"
	private explicit_type "int"
	init_value "=  -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index of the lowest-order byte in the magnitude of this BigInteger
that contains a nonzero byte, or -2 (either value is acceptable).  The
least significant byte has int-number 0, the next byte in order of
increasing significance has byte-number 1, and so forth.

@serial
"
      end

      attribute 2758299 "firstNonzeroIntNum"
	private explicit_type "int"
	init_value "=  -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index of the lowest-order int in the magnitude of this BigInteger
that contains a nonzero int, or -2 (either value is acceptable).  The
least significant int has int-number 0, the next int in order of
increasing significance has int-number 1, and so forth.
"
      end

      attribute 2758427 "LONG_MASK"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  0xffffffffL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This mask is used to obtain the value of an int as if it were unsigned.
"
      end

      operation 7151899 "BigInteger"
	public explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructors

Translates a byte array containing the two's-complement binary
representation of a BigInteger into a BigInteger.  The input array is
assumed to be in <i>big-endian</i> byte-order: the most significant
byte is in the zeroth element.

@param  val big-endian two's-complement binary representation of
	       BigInteger.
@throws NumberFormatException <tt>val</tt> is zero bytes long."
      end

      operation 7152027 "BigInteger"
	private explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This private constructor translates an int array containing the
two's-complement binary representation of a BigInteger into a
BigInteger. The input array is assumed to be in <i>big-endian</i>
int-order: the most significant int is in the zeroth element."
      end

      operation 7152155 "BigInteger"
	public explicit_return_type ""
	nparams 2
	  param in name "signum" explicit_type "int"
	  param in name "magnitude" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the sign-magnitude representation of a BigInteger into a
BigInteger.  The sign is represented as an integer signum value: -1 for
negative, 0 for zero, or 1 for positive.  The magnitude is a byte array
in <i>big-endian</i> byte-order: the most significant byte is in the
zeroth element.  A zero-length magnitude array is permissible, and will
result inin a BigInteger value of 0, whether signum is -1, 0 or 1.

@param  signum signum of the number (-1 for negative, 0 for zero, 1
	       for positive).
@param  magnitude big-endian binary representation of the magnitude of
	       the number.
@throws NumberFormatException <tt>signum</tt> is not one of the three
	       legal values (-1, 0, and 1), or <tt>signum</tt> is 0 and
	       <tt>magnitude</tt> contains one or more non-zero bytes."
      end

      operation 7152283 "BigInteger"
	private explicit_return_type ""
	nparams 2
	  param in name "signum" explicit_type "int"
	  param in name "magnitude" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A constructor for internal use that translates the sign-magnitude
representation of a BigInteger into a BigInteger. It checks the
arguments and copies the magnitude so this constructor would be
safe for external use."
      end

      operation 7152411 "BigInteger"
	public explicit_return_type ""
	nparams 2
	  param in name "val" explicit_type "String"
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the String representation of a BigInteger in the specified
radix into a BigInteger.  The String representation consists of an
optional minus sign followed by a sequence of one or more digits in the
specified radix.  The character-to-digit mapping is provided by
<tt>Character.digit</tt>.  The String may not contain any extraneous
characters (whitespace, for example).

@param val String representation of BigInteger.
@param radix radix to be used in interpreting <tt>val</tt>.
@throws NumberFormatException <tt>val</tt> is not a valid representation
	       of a BigInteger in the specified radix, or <tt>radix</tt> is
	       outside the range from {@link Character#MIN_RADIX} to
	       {@link Character#MAX_RADIX}, inclusive.
@see    Character#digit"
      end

      operation 7152539 "BigInteger"
	package explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a new BigInteger using a char array with radix=10"
      end

      operation 7152667 "parseInt"
	private explicit_return_type "int"
	nparams 3
	  param in name "source" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create an integer with the digits between the two indexes
 Assumes start < end. The result may be negative, but it
 is to be treated as an unsigned value."
      end

      attribute 2758555 "bitsPerDigit"
	class_attribute private explicit_type "long"
	multiplicity "[]"
	init_value "=  { 0, 0,
        1024, 1624, 2048, 2378, 2648, 2875, 3072, 3247, 3402, 3543, 3672,
        3790, 3899, 4001, 4096, 4186, 4271, 4350, 4426, 4498, 4567, 4633,
        4696, 4756, 4814, 4870, 4923, 4975, 5025, 5074, 5120, 5166, 5210,
                                           5253, 5295}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " bitsPerDigit in the given radix times 1024
 Rounded up to avoid underallocation."
      end

      operation 7152795 "destructiveMulAdd"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "z" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Multiply x array times word y in place, and add word z"
      end

      operation 7152923 "BigInteger"
	public explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the decimal String representation of a BigInteger into a
BigInteger.  The String representation consists of an optional minus
sign followed by a sequence of one or more decimal digits.  The
character-to-digit mapping is provided by <tt>Character.digit</tt>.
The String may not contain any extraneous characters (whitespace, for
example).

@param val decimal String representation of BigInteger.
@throws NumberFormatException <tt>val</tt> is not a valid representation
	       of a BigInteger.
@see    Character#digit"
      end

      operation 7153051 "BigInteger"
	public explicit_return_type ""
	nparams 2
	  param in name "numBits" explicit_type "int"
	  param inout name "rnd" type class_ref 139547 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a randomly generated BigInteger, uniformly distributed over
the range <tt>0</tt> to <tt>(2<sup>numBits</sup> - 1)</tt>, inclusive.
The uniformity of the distribution assumes that a fair source of random
bits is provided in <tt>rnd</tt>.  Note that this constructor always
constructs a non-negative BigInteger.

@param  numBits maximum bitLength of the new BigInteger.
@param  rnd source of randomness to be used in computing the new
	       BigInteger.
@throws IllegalArgumentException <tt>numBits</tt> is negative.
@see #bitLength"
      end

      operation 7153179 "randomBits"
	class_operation private explicit_return_type "byte"
	nparams 2
	  param in name "numBits" explicit_type "int"
	  param inout name "rnd" type class_ref 139547 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7153307 "BigInteger"
	public explicit_return_type ""
	nparams 3
	  param in name "bitLength" explicit_type "int"
	  param in name "certainty" explicit_type "int"
	  param inout name "rnd" type class_ref 139547 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a randomly generated positive BigInteger that is probably
prime, with the specified bitLength.<p>

It is recommended that the {@link #probablePrime probablePrime}
method be used in preference to this constructor unless there
is a compelling need to specify a certainty.

@param  bitLength bitLength of the returned BigInteger.
@param  certainty a measure of the uncertainty that the caller is
        willing to tolerate.  The probability that the new BigInteger
	       represents a prime number will exceed
	       <tt>(1 - 1/2<sup>certainty</sup></tt>).  The execution time of
	       this constructor is proportional to the value of this parameter.
@param  rnd source of random bits used to select candidates to be
	       tested for primality.
@throws ArithmeticException <tt>bitLength &lt; 2</tt>.
@see    #bitLength"
      end

      attribute 2758683 "SMALL_PRIME_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  95"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Minimum size in bits that the requested prime number has
 before we use the large prime number generating algorithms"
      end

      attribute 2758811 "DEFAULT_PRIME_CERTAINTY"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Certainty required to meet the spec of probablePrime"
      end

      operation 7153435 "probablePrime"
	class_operation public return_type class_ref 775835 // BigInteger
	nparams 2
	  param in name "bitLength" explicit_type "int"
	  param inout name "rnd" type class_ref 139547 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a positive BigInteger that is probably prime, with the
specified bitLength. The probability that a BigInteger returned
by this method is composite does not exceed 2<sup>-100</sup>.

@param  bitLength bitLength of the returned BigInteger.
@param  rnd source of random bits used to select candidates to be
	       tested for primality.
@return a BigInteger of <tt>bitLength</tt> bits that is probably prime
@throws ArithmeticException <tt>bitLength &lt; 2</tt>.
@see    #bitLength"
      end

      operation 7153563 "smallPrime"
	class_operation private return_type class_ref 775835 // BigInteger
	nparams 3
	  param in name "bitLength" explicit_type "int"
	  param in name "certainty" explicit_type "int"
	  param inout name "rnd" type class_ref 139547 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find a random number of the specified bitLength that is probably prime.
This method is used for smaller primes, its performance degrades on
larger bitlengths.

This method assumes bitLength > 1."
      end

      classrelation 1805595 // SMALL_PRIME_PRODUCT (<unidirectional association>)
	relation 1805595 --->
	  a role_name "SMALL_PRIME_PRODUCT" init_value "=  valueOf(3L*5*7*11*13*17*19*23*29*31*37*41)" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1805595 // SMALL_PRIME_PRODUCT (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      operation 7153691 "largePrime"
	class_operation private return_type class_ref 775835 // BigInteger
	nparams 3
	  param in name "bitLength" explicit_type "int"
	  param in name "certainty" explicit_type "int"
	  param inout name "rnd" type class_ref 139547 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find a random number of the specified bitLength that is probably prime.
This method is more appropriate for larger bitlengths since it uses
a sieve to eliminate most composites before using a more expensive
test."
      end

      operation 7153819 "nextProbablePrime"
	public return_type class_ref 775835 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first integer greater than this <code>BigInteger</code> that
is probably prime.  The probability that the number returned by this
method is composite does not exceed 2<sup>-100</sup>. This method will
never skip over a prime when searching: if it returns <tt>p</tt>, there
is no prime <tt>q</tt> such that <tt>this &lt; q &lt; p</tt>.

@return the first integer greater than this <code>BigInteger</code> that
        is probably prime.
@throws ArithmeticException <tt>this &lt; 0</tt>.
@since 1.5"
      end

      operation 7153947 "primeToCertainty"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "certainty" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this BigInteger is probably prime,
<tt>false</tt> if it's definitely composite.

This method assumes bitLength > 2.

@param  certainty a measure of the uncertainty that the caller is
	       willing to tolerate: if the call returns <tt>true</tt>
	       the probability that this BigInteger is prime exceeds
	       <tt>(1 - 1/2<sup>certainty</sup>)</tt>.  The execution time of
	       this method is proportional to the value of this parameter.
@return <tt>true</tt> if this BigInteger is probably prime,
	       <tt>false</tt> if it's definitely composite."
      end

      operation 7154075 "passesLucasLehmer"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true iff this BigInteger is a Lucas-Lehmer probable prime.

The following assumptions are made:
This BigInteger is a positive, odd number."
      end

      operation 7154203 "jacobiSymbol"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "p" explicit_type "int"
	  param inout name "n" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes Jacobi(p,n).
Assumes n positive, odd, n>=3."
      end

      operation 7154331 "lucasLehmerSequence"
	class_operation private return_type class_ref 775835 // BigInteger
	nparams 3
	  param in name "z" explicit_type "int"
	  param inout name "k" type class_ref 775835 // BigInteger
	  param inout name "n" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7154459 "passesMillerRabin"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "iterations" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true iff this BigInteger passes the specified number of
Miller-Rabin tests. This test is taken from the DSA spec (NIST FIPS
186-2).

The following assumptions are made:
This BigInteger is a positive, odd number greater than 2.
iterations<=50."
      end

      operation 7154587 "BigInteger"
	private explicit_return_type ""
	nparams 2
	  param in name "magnitude" explicit_type "int"
	  param in name "signum" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This private constructor differs from its public cousin
with the arguments reversed in two ways: it assumes that its
arguments are correct, and it doesn't copy the magnitude array."
      end

      operation 7154715 "BigInteger"
	private explicit_return_type ""
	nparams 2
	  param in name "magnitude" explicit_type "byte"
	  param in name "signum" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This private constructor is for internal use and assumes that its
arguments are correct."
      end

      operation 7154843 "BigInteger"
	package explicit_return_type ""
	nparams 2
	  param inout name "val" type class_ref 925723 // MutableBigInteger
	  param in name "sign" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This private constructor is for internal use in converting
from a MutableBigInteger object into a BigInteger."
      end

      operation 7154971 "valueOf"
	class_operation public return_type class_ref 775835 // BigInteger
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Static Factory Methods

Returns a BigInteger whose value is equal to that of the
specified <code>long</code>.  This \"static factory method\" is
provided in preference to a (<code>long</code>) constructor
because it allows for reuse of frequently used BigIntegers.

@param  val value of the BigInteger to return.
@return a BigInteger with the specified value."
      end

      operation 7155099 "BigInteger"
	private explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a BigInteger with the specified value, which may not be zero."
      end

      operation 7155227 "valueOf"
	class_operation private return_type class_ref 775835 // BigInteger
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger with the given two's complement representation.
Assumes that the input array will not be modified (the returned
BigInteger will reference the input array if feasible)."
      end

      attribute 2758939 "MAX_CONSTANT"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Constants

Initialize static constant array when class is loaded.
"
      end

      classrelation 1805723 // posConst (<unidirectional association>)
	relation 1805723 --->
	  a role_name "posConst" multiplicity "[]" init_value "=  new BigInteger[MAX_CONSTANT+1]" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1805723 // posConst (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      classrelation 1805851 // negConst (<unidirectional association>)
	relation 1805851 --->
	  a role_name "negConst" multiplicity "[]" init_value "=  new BigInteger[MAX_CONSTANT+1]" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1805851 // negConst (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      extra_member 162715 "initialization"
	
	cpp "" ""
	java "  static {
	for (int i = 1; i <= MAX_CONSTANT; i++) {
	    int[] magnitude = new int[1];
	    magnitude[0] = (int) i;
	    posConst[i] = new BigInteger(magnitude,  1);
	    negConst[i] = new BigInteger(magnitude, -1);
	}
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 1805979 // ZERO (<unidirectional association>)
	relation 1805979 --->
	  a role_name "ZERO" init_value "=  new BigInteger(new int[0], 0)" class_relation const_relation public
	    comment "
The BigInteger constant zero.

@since   1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1805979 // ZERO (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      classrelation 1806107 // ONE (<unidirectional association>)
	relation 1806107 --->
	  a role_name "ONE" init_value "=  valueOf(1)" class_relation const_relation public
	    comment "
The BigInteger constant one.

@since   1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1806107 // ONE (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      classrelation 1806235 // TWO (<unidirectional association>)
	relation 1806235 --->
	  a role_name "TWO" init_value "=  valueOf(2)" class_relation const_relation private
	    comment "
The BigInteger constant two.  (Not exported.)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1806235 // TWO (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      classrelation 1806363 // TEN (<unidirectional association>)
	relation 1806363 --->
	  a role_name "TEN" init_value "=  valueOf(10)" class_relation const_relation public
	    comment "
The BigInteger constant ten.

@since   1.5

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1806363 // TEN (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      operation 7155355 "add"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Arithmetic Operations

Returns a BigInteger whose value is <tt>(this + val)</tt>.

@param  val value to be added to this BigInteger.
@return <tt>this + val</tt>"
      end

      operation 7155483 "add"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the contents of the int arrays x and y. This method allocates
a new int array to hold the answer and returns a reference to that
array."
      end

      operation 7155611 "subtract"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is <tt>(this - val)</tt>.

@param  val value to be subtracted from this BigInteger.
@return <tt>this - val</tt>"
      end

      operation 7155739 "subtract"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "big" explicit_type "int"
	  param in name "little" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subtracts the contents of the second int arrays (little) from the
first (big).  The first int array (big) must represent a larger number
than the second.  This method allocates the space necessary to hold the
answer."
      end

      operation 7155867 "multiply"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is <tt>(this * val)</tt>.

@param  val value to be multiplied by this BigInteger.
@return <tt>this * val</tt>"
      end

      operation 7155995 "multiplyToLen"
	private explicit_return_type "int"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "xlen" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "ylen" explicit_type "int"
	  param in name "z" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Multiplies int arrays x and y to the specified lengths and places
the result into z."
      end

      operation 7156123 "square"
	private return_type class_ref 775835 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is <tt>(this<sup>2</sup>)</tt>.

@return <tt>this<sup>2</sup></tt>"
      end

      operation 7156251 "squareToLen"
	class_operation private explicit_return_type "int"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "z" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Squares the contents of the int array x. The result is placed into the
int array z.  The contents of x are not changed."
      end

      operation 7156379 "divide"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is <tt>(this / val)</tt>.

@param  val value by which this BigInteger is to be divided.
@return <tt>this / val</tt>
@throws ArithmeticException <tt>val==0</tt>"
      end

      operation 7156507 "divideAndRemainder"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of two BigIntegers containing <tt>(this / val)</tt>
followed by <tt>(this % val)</tt>.

@param  val value by which this BigInteger is to be divided, and the
	       remainder computed.
@return an array of two BigIntegers: the quotient <tt>(this / val)</tt>
	       is the initial element, and the remainder <tt>(this % val)</tt>
	       is the final element.
@throws ArithmeticException <tt>val==0</tt>"
      end

      operation 7156635 "remainder"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is <tt>(this % val)</tt>.

@param  val value by which this BigInteger is to be divided, and the
	       remainder computed.
@return <tt>this % val</tt>
@throws ArithmeticException <tt>val==0</tt>"
      end

      operation 7156763 "pow"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param in name "exponent" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is <tt>(this<sup>exponent</sup>)</tt>.
Note that <tt>exponent</tt> is an integer rather than a BigInteger.

@param  exponent exponent to which this BigInteger is to be raised.
@return <tt>this<sup>exponent</sup></tt>
@throws ArithmeticException <tt>exponent</tt> is negative.  (This would
	       cause the operation to yield a non-integer value.)"
      end

      operation 7156891 "gcd"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is the greatest common divisor of
<tt>abs(this)</tt> and <tt>abs(val)</tt>.  Returns 0 if
<tt>this==0 &amp;&amp; val==0</tt>.

@param  val value with which the GCD is to be computed.
@return <tt>GCD(abs(this), abs(val))</tt>"
      end

      operation 7157019 "leftShift"
	class_operation private explicit_return_type "int"
	nparams 3
	  param in name "a" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Left shift int array a up to len by n bits. Returns the array that
results from the shift since space may have to be reallocated."
      end

      operation 7157147 "primitiveRightShift"
	class_operation package explicit_return_type "void"
	nparams 3
	  param in name "a" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " shifts a up to len right n bits assumes no leading zeros, 0<n<32"
      end

      operation 7157275 "primitiveLeftShift"
	class_operation package explicit_return_type "void"
	nparams 3
	  param in name "a" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " shifts a up to len left n bits assumes no leading zeros, 0<=n<32"
      end

      operation 7157403 "bitLength"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "val" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate bitlength of contents of the first len elements an int array,
assuming there are no leading zero ints."
      end

      operation 7157531 "abs"
	public return_type class_ref 775835 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is the absolute value of this
BigInteger. 

@return <tt>abs(this)</tt>"
      end

      operation 7157659 "negate"
	public return_type class_ref 775835 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is <tt>(-this)</tt>.

@return <tt>-this</tt>"
      end

      operation 7157787 "signum"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signum function of this BigInteger.

@return -1, 0 or 1 as the value of this BigInteger is negative, zero or
	       positive."
      end

      operation 7157915 "mod"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param inout name "m" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modular Arithmetic Operations

Returns a BigInteger whose value is <tt>(this mod m</tt>).  This method
differs from <tt>remainder</tt> in that it always returns a
<i>non-negative</i> BigInteger.

@param  m the modulus.
@return <tt>this mod m</tt>
@throws ArithmeticException <tt>m &lt;= 0</tt>
@see    #remainder"
      end

      operation 7158043 "modPow"
	public return_type class_ref 775835 // BigInteger
	nparams 2
	  param inout name "exponent" type class_ref 775835 // BigInteger
	  param inout name "m" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is
<tt>(this<sup>exponent</sup> mod m)</tt>.  (Unlike <tt>pow</tt>, this
method permits negative exponents.)

@param  exponent the exponent.
@param  m the modulus.
@return <tt>this<sup>exponent</sup> mod m</tt>
@throws ArithmeticException <tt>m &lt;= 0</tt>
@see    #modInverse"
      end

      attribute 2759067 "bnExpModThreshTable"
	class_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  {7, 25, 81, 241, 673, 1793,
                                                Integer.MAX_VALUE}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Sentinel"
      end

      operation 7158171 "oddModPow"
	private return_type class_ref 775835 // BigInteger
	nparams 2
	  param inout name "y" type class_ref 775835 // BigInteger
	  param inout name "z" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is x to the power of y mod z.
Assumes: z is odd && x < z."
      end

      operation 7158299 "montReduce"
	class_operation private explicit_return_type "int"
	nparams 4
	  param in name "n" explicit_type "int"
	  param in name "mod" explicit_type "int"
	  param in name "mlen" explicit_type "int"
	  param in name "inv" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Montgomery reduce n, modulo mod.  This reduces modulo mod and divides
by 2^(32*mlen). Adapted from Colin Plumb's C library."
      end

      operation 7158427 "intArrayCmpToLen"
	class_operation private explicit_return_type "int"
	nparams 3
	  param in name "arg1" explicit_type "int"
	  param in name "arg2" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns -1, 0 or +1 as big-endian unsigned int array arg1 is less than,
equal to, or greater than arg2 up to length len."
      end

      operation 7158555 "subN"
	class_operation private explicit_return_type "int"
	nparams 3
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subtracts two numbers of same length, returning borrow."
      end

      operation 7158683 "mulAdd"
	class_operation package explicit_return_type "int"
	nparams 5
	  param in name "out" explicit_type "int"
	  param in name "in" explicit_type "int"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Multiply an array by one word k and add to result, return the carry"
      end

      operation 7158811 "addOne"
	class_operation package explicit_return_type "int"
	nparams 4
	  param in name "a" explicit_type "int"
	  param in name "offset" explicit_type "int"
	  param in name "mlen" explicit_type "int"
	  param in name "carry" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add one word to the number a mlen words into a. Return the resulting
carry."
      end

      operation 7158939 "modPow2"
	private return_type class_ref 775835 // BigInteger
	nparams 2
	  param inout name "exponent" type class_ref 775835 // BigInteger
	  param in name "p" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is (this ** exponent) mod (2**p)"
      end

      operation 7159067 "mod2"
	private return_type class_ref 775835 // BigInteger
	nparams 1
	  param in name "p" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is this mod(2**p).
Assumes that this BigInteger &gt;= 0 and p &gt; 0."
      end

      operation 7159195 "modInverse"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param inout name "m" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is <tt>(this<sup>-1</sup> mod m)</tt>.

@param  m the modulus.
@return <tt>this<sup>-1</sup> mod m</tt>.
@throws ArithmeticException <tt> m &lt;= 0</tt>, or this BigInteger
	       has no multiplicative inverse mod m (that is, this BigInteger
	       is not <i>relatively prime</i> to m)."
      end

      operation 7159323 "shiftLeft"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Shift Operations

Returns a BigInteger whose value is <tt>(this &lt;&lt; n)</tt>.
The shift distance, <tt>n</tt>, may be negative, in which case
this method performs a right shift.
(Computes <tt>floor(this * 2<sup>n</sup>)</tt>.)

@param  n shift distance, in bits.
@return <tt>this &lt;&lt; n</tt>
@see #shiftRight"
      end

      operation 7159451 "shiftRight"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is <tt>(this &gt;&gt; n)</tt>.  Sign
extension is performed.  The shift distance, <tt>n</tt>, may be
negative, in which case this method performs a left shift.
(Computes <tt>floor(this / 2<sup>n</sup>)</tt>.) 

@param  n shift distance, in bits.
@return <tt>this &gt;&gt; n</tt>
@see #shiftLeft"
      end

      operation 7159579 "javaIncrement"
	package explicit_return_type "int"
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7159707 "and"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bitwise Operations

Returns a BigInteger whose value is <tt>(this &amp; val)</tt>.  (This
method returns a negative BigInteger if and only if this and val are
both negative.)

@param val value to be AND'ed with this BigInteger.
@return <tt>this &amp; val</tt>"
      end

      operation 7159835 "or"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is <tt>(this | val)</tt>.  (This method
returns a negative BigInteger if and only if either this or val is
negative.) 

@param val value to be OR'ed with this BigInteger.
@return <tt>this | val</tt>"
      end

      operation 7159963 "xor"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is <tt>(this ^ val)</tt>.  (This method
returns a negative BigInteger if and only if exactly one of this and
val are negative.)

@param val value to be XOR'ed with this BigInteger.
@return <tt>this ^ val</tt>"
      end

      operation 7160091 "not"
	public return_type class_ref 775835 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is <tt>(~this)</tt>.  (This method
returns a negative value if and only if this BigInteger is
non-negative.)

@return <tt>~this</tt>"
      end

      operation 7160219 "andNot"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is <tt>(this &amp; ~val)</tt>.  This
method, which is equivalent to <tt>and(val.not())</tt>, is provided as
a convenience for masking operations.  (This method returns a negative
BigInteger if and only if <tt>this</tt> is negative and <tt>val</tt> is
positive.)

@param val value to be complemented and AND'ed with this BigInteger.
@return <tt>this &amp; ~val</tt>"
      end

      operation 7160347 "testBit"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Single Bit Operations

Returns <tt>true</tt> if and only if the designated bit is set.
(Computes <tt>((this &amp; (1&lt;&lt;n)) != 0)</tt>.)

@param  n index of bit to test.
@return <tt>true</tt> if and only if the designated bit is set.
@throws ArithmeticException <tt>n</tt> is negative."
      end

      operation 7160475 "setBit"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is equivalent to this BigInteger
with the designated bit set.  (Computes <tt>(this | (1&lt;&lt;n))</tt>.)

@param  n index of bit to set.
@return <tt>this | (1&lt;&lt;n)</tt>
@throws ArithmeticException <tt>n</tt> is negative."
      end

      operation 7160603 "clearBit"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is equivalent to this BigInteger
with the designated bit cleared.
(Computes <tt>(this &amp; ~(1&lt;&lt;n))</tt>.)

@param  n index of bit to clear.
@return <tt>this & ~(1&lt;&lt;n)</tt>
@throws ArithmeticException <tt>n</tt> is negative."
      end

      operation 7160731 "flipBit"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a BigInteger whose value is equivalent to this BigInteger
with the designated bit flipped.
(Computes <tt>(this ^ (1&lt;&lt;n))</tt>.)

@param  n index of bit to flip.
@return <tt>this ^ (1&lt;&lt;n)</tt>
@throws ArithmeticException <tt>n</tt> is negative."
      end

      operation 7160859 "getLowestSetBit"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the rightmost (lowest-order) one bit in this
BigInteger (the number of zero bits to the right of the rightmost
one bit).  Returns -1 if this BigInteger contains no one bits.
(Computes <tt>(this==0? -1 : log<sub>2</sub>(this &amp; -this))</tt>.)

@return index of the rightmost one bit in this BigInteger."
      end

      operation 7160987 "bitLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Miscellaneous Bit Operations

Returns the number of bits in the minimal two's-complement
representation of this BigInteger, <i>excluding</i> a sign bit.
For positive BigIntegers, this is equivalent to the number of bits in
the ordinary binary representation.  (Computes
<tt>(ceil(log<sub>2</sub>(this &lt; 0 ? -this : this+1)))</tt>.)

@return number of bits in the minimal two's-complement
        representation of this BigInteger, <i>excluding</i> a sign bit."
      end

      operation 7161115 "bitLen"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "w" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "bitLen(val) is the number of bits in val."
      end

      attribute 2759195 "trailingZeroTable"
	class_attribute const_attribute package explicit_type "byte"
	multiplicity "[]"
	init_value "=  {
      -25, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "trailingZeroTable[i] is the number of trailing zero bits in the binary
representation of i.
"
      end

      operation 7161243 "bitCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bits in the two's complement representation
of this BigInteger that differ from its sign bit.  This method is
useful when implementing bit-vector style sets atop BigIntegers.

@return number of bits in the two's complement representation
        of this BigInteger that differ from its sign bit."
      end

      operation 7161371 "bitCnt"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7161499 "trailingZeroCnt"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7161627 "isProbablePrime"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "certainty" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Primality Testing

Returns <tt>true</tt> if this BigInteger is probably prime,
<tt>false</tt> if it's definitely composite.  If
<tt>certainty</tt> is <tt> &lt;= 0</tt>, <tt>true</tt> is
returned.

@param  certainty a measure of the uncertainty that the caller is
	       willing to tolerate: if the call returns <tt>true</tt>
	       the probability that this BigInteger is prime exceeds
	       <tt>(1 - 1/2<sup>certainty</sup>)</tt>.  The execution time of
	       this method is proportional to the value of this parameter.
@return <tt>true</tt> if this BigInteger is probably prime,
	       <tt>false</tt> if it's definitely composite."
      end

      operation 7161755 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "val" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison Operations

Compares this BigInteger with the specified BigInteger.  This method is
provided in preference to individual methods for each of the six
boolean comparison operators (&lt;, ==, &gt;, &gt;=, !=, &lt;=).  The
suggested idiom for performing these comparisons is:
<tt>(x.compareTo(y)</tt> &lt;<i>op</i>&gt; <tt>0)</tt>,
where &lt;<i>op</i>&gt; is one of the six comparison operators.

@param  val BigInteger to which this BigInteger is to be compared.
@return -1, 0 or 1 as this BigInteger is numerically less than, equal
        to, or greater than <tt>val</tt>."
      end

      operation 7161883 "intArrayCmp"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "arg1" explicit_type "int"
	  param in name "arg2" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns -1, 0 or +1 as big-endian unsigned int array arg1 is
less than, equal to, or greater than arg2."
      end

      operation 7162011 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "x" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this BigInteger with the specified Object for equality.

@param  x Object to which this BigInteger is to be compared.
@return <tt>true</tt> if and only if the specified Object is a
	       BigInteger whose value is numerically equal to this BigInteger."
      end

      operation 7162139 "min"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum of this BigInteger and <tt>val</tt>.

@param  val value with which the minimum is to be computed.
@return the BigInteger whose value is the lesser of this BigInteger and 
	       <tt>val</tt>.  If they are equal, either may be returned."
      end

      operation 7162267 "max"
	public return_type class_ref 775835 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum of this BigInteger and <tt>val</tt>.

@param  val value with which the maximum is to be computed.
@return the BigInteger whose value is the greater of this and
        <tt>val</tt>.  If they are equal, either may be returned."
      end

      operation 7162395 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Hash Function

Returns the hash code for this BigInteger.

@return hash code for this BigInteger."
      end

      operation 7162523 "toString"
	public explicit_return_type "String"
	nparams 1
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of this BigInteger in the
given radix.  If the radix is outside the range from {@link
Character#MIN_RADIX} to {@link Character#MAX_RADIX} inclusive,
it will default to 10 (as is the case for
<tt>Integer.toString</tt>).  The digit-to-character mapping
provided by <tt>Character.forDigit</tt> is used, and a minus
sign is prepended if appropriate.  (This representation is
compatible with the {@link #BigInteger(String, int) (String,
<code>int</code>)} constructor.)

@param  radix  radix of the String representation.
@return String representation of this BigInteger in the given radix.
@see    Integer#toString
@see    Character#forDigit
@see    #BigInteger(java.lang.String, int)"
      end

      attribute 2759323 "zeros"
	class_attribute private explicit_type "String"
	multiplicity "[]"
	init_value "=  new String[64]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " zero[i] is a string of i consecutive zeros. "
      end

      extra_member 162843 "initialization"
	
	cpp "" ""
	java "  static {
	zeros[63] =
	    \"000000000000000000000000000000000000000000000000000000000000000\";
	for (int i=0; i<63; i++)
	    zeros[i] = zeros[63].substring(0, i);
    }"
	php ""
	python ""
	idl ""
      end

      operation 7162651 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the decimal String representation of this BigInteger.
The digit-to-character mapping provided by
<tt>Character.forDigit</tt> is used, and a minus sign is
prepended if appropriate.  (This representation is compatible
with the {@link #BigInteger(String) (String)} constructor, and
allows for String concatenation with Java's + operator.)

@return decimal String representation of this BigInteger.
@see    Character#forDigit
@see    #BigInteger(java.lang.String)"
      end

      operation 7162779 "toByteArray"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a byte array containing the two's-complement
representation of this BigInteger.  The byte array will be in
<i>big-endian</i> byte-order: the most significant byte is in
the zeroth element.  The array will contain the minimum number
of bytes required to represent this BigInteger, including at
least one sign bit, which is <tt>(ceil((this.bitLength() +
1)/8))</tt>.  (This representation is compatible with the
{@link #BigInteger(byte[]) (byte[])} constructor.)

@return a byte array containing the two's-complement representation of
	       this BigInteger.
@see    #BigInteger(byte[])"
      end

      operation 7162907 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this BigInteger to an <code>int</code>.  This
conversion is analogous to a <a
href=\"http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363\"><i>narrowing
primitive conversion</i></a> from <code>long</code> to
<code>int</code> as defined in the <a
href=\"http://java.sun.com/docs/books/jls/html/\">Java Language
Specification</a>: if this BigInteger is too big to fit in an
<code>int</code>, only the low-order 32 bits are returned.
Note that this conversion can lose information about the
overall magnitude of the BigInteger value as well as return a
result with the opposite sign.

@return this BigInteger converted to an <code>int</code>."
      end

      operation 7163035 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this BigInteger to a <code>long</code>.  This
conversion is analogous to a <a
href=\"http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363\"><i>narrowing
primitive conversion</i></a> from <code>long</code> to
<code>int</code> as defined in the <a
href=\"http://java.sun.com/docs/books/jls/html/\">Java Language
Specification</a>: if this BigInteger is too big to fit in a
<code>long</code>, only the low-order 64 bits are returned.
Note that this conversion can lose information about the
overall magnitude of the BigInteger value as well as return a
result with the opposite sign.

@return this BigInteger converted to a <code>long</code>."
      end

      operation 7163163 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this BigInteger to a <code>float</code>.  This
conversion is similar to the <a
href=\"http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363\"><i>narrowing
primitive conversion</i></a> from <code>double</code> to
<code>float</code> defined in the <a
href=\"http://java.sun.com/docs/books/jls/html/\">Java Language
Specification</a>: if this BigInteger has too great a magnitude
to represent as a <code>float</code>, it will be converted to
{@link Float#NEGATIVE_INFINITY} or {@link
Float#POSITIVE_INFINITY} as appropriate.  Note that even when
the return value is finite, this conversion can lose
information about the precision of the BigInteger value.

@return this BigInteger converted to a <code>float</code>."
      end

      operation 7163291 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this BigInteger to a <code>double</code>.  This
conversion is similar to the <a
href=\"http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363\"><i>narrowing
primitive conversion</i></a> from <code>double</code> to
<code>float</code> defined in the <a
href=\"http://java.sun.com/docs/books/jls/html/\">Java Language
Specification</a>: if this BigInteger has too great a magnitude
to represent as a <code>double</code>, it will be converted to
{@link Double#NEGATIVE_INFINITY} or {@link
Double#POSITIVE_INFINITY} as appropriate.  Note that even when
the return value is finite, this conversion can lose
information about the precision of the BigInteger value.

@return this BigInteger converted to a <code>double</code>."
      end

      operation 7163419 "stripLeadingZeroInts"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the input array stripped of any leading zero bytes."
      end

      operation 7163547 "trustedStripLeadingZeroInts"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the input array stripped of any leading zero bytes.
Since the source is trusted the copying may be skipped."
      end

      operation 7163675 "stripLeadingZeroBytes"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the input array stripped of any leading zero bytes."
      end

      operation 7163803 "makePositive"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Takes an array a representing a negative 2's-complement number and
returns the minimal (no leading zero bytes) unsigned whose value is -a."
      end

      operation 7163931 "makePositive"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Takes an array a representing a negative 2's-complement number and
returns the minimal (no leading zero ints) unsigned whose value is -a."
      end

      attribute 2759451 "digitsPerLong"
	class_attribute private explicit_type "int"
	multiplicity "[]"
	init_value "=  {0, 0,
	62, 39, 31, 27, 24, 22, 20, 19, 18, 18, 17, 17, 16, 16, 15, 15, 15, 14,
	14, 14, 14, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The following two arrays are used for fast String conversions.  Both
are indexed by radix.  The first is the number of digits of the given
radix that can fit in a Java long without \"going negative\", i.e., the
highest integer n such that radix**n < 2**63.  The second is the
\"long radix\" that tears each number into \"long digits\", each of which
consists of the number of digits in the corresponding element in
digitsPerLong (longRadix[i] = i**digitPerLong[i]).  Both arrays have
nonsense values in their 0 and 1 elements, as radixes 0 and 1 are not
used.
"
      end

      classrelation 1806491 // longRadix (<unidirectional association>)
	relation 1806491 --->
	  a role_name "longRadix" multiplicity "[]" init_value "=  {null, null,
        valueOf(0x4000000000000000L), valueOf(0x383d9170b85ff80bL),
	valueOf(0x4000000000000000L), valueOf(0x6765c793fa10079dL),
	valueOf(0x41c21cb8e1000000L), valueOf(0x3642798750226111L),
        valueOf(0x1000000000000000L), valueOf(0x12bf307ae81ffd59L),
	valueOf( 0xde0b6b3a7640000L), valueOf(0x4d28cb56c33fa539L),
	valueOf(0x1eca170c00000000L), valueOf(0x780c7372621bd74dL),
	valueOf(0x1e39a5057d810000L), valueOf(0x5b27ac993df97701L),
	valueOf(0x1000000000000000L), valueOf(0x27b95e997e21d9f1L),
	valueOf(0x5da0e1e53c5c8000L), valueOf( 0xb16a458ef403f19L),
	valueOf(0x16bcc41e90000000L), valueOf(0x2d04b7fdd9c0ef49L),
	valueOf(0x5658597bcaa24000L), valueOf( 0x6feb266931a75b7L),
	valueOf( 0xc29e98000000000L), valueOf(0x14adf4b7320334b9L),
	valueOf(0x226ed36478bfa000L), valueOf(0x383d9170b85ff80bL),
	valueOf(0x5a3c23e39c000000L), valueOf( 0x4e900abb53e6b71L),
	valueOf( 0x7600ec618141000L), valueOf( 0xaee5720ee830681L),
	valueOf(0x1000000000000000L), valueOf(0x172588ad4f5f0981L),
	valueOf(0x211e44f7d02c1000L), valueOf(0x2ee56725f06e5c71L),
	valueOf(0x41c21cb8e1000000L)}" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1806491 // longRadix (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      attribute 2759579 "digitsPerInt"
	class_attribute private explicit_type "int"
	multiplicity "[]"
	init_value "=  {0, 0, 30, 19, 15, 13, 11,
        11, 10, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "These two arrays are the integer analogue of above.
"
      end

      attribute 2759707 "intRadix"
	class_attribute private explicit_type "int"
	multiplicity "[]"
	init_value "=  {0, 0,
        0x40000000, 0x4546b3db, 0x40000000, 0x48c27395, 0x159fd800,
        0x75db9c97, 0x40000000, 0x17179149, 0x3b9aca00, 0xcc6db61,
        0x19a10000, 0x309f1021, 0x57f6c100, 0xa2f1b6f,  0x10000000,
        0x18754571, 0x247dbc80, 0x3547667b, 0x4c4b4000, 0x6b5a6e1d,
        0x6c20a40,  0x8d2d931,  0xb640000,  0xe8d4a51,  0x1269ae40,
        0x17179149, 0x1cb91000, 0x23744899, 0x2b73a840, 0x34e63b41,
        0x40000000, 0x4cfa3cc1, 0x5c13d840, 0x6d91b519, 0x39aa400
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7164059 "intLength"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "These routines provide access to the two's complement representation
of BigIntegers.


Returns the length of the two's complement representation in ints,
including space for at least one sign bit."
      end

      operation 7164187 "signBit"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns sign bit "
      end

      operation 7164315 "signInt"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns an int of sign bits "
      end

      operation 7164443 "getInt"
	private explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the specified int of the little-endian two's complement
representation (int 0 is the least significant).  The int number can
be arbitrarily high (values are logically preceded by infinitely many
sign ints)."
      end

      operation 7164571 "firstNonzeroIntNum"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the int that contains the first nonzero int in the
little-endian binary representation of the magnitude (int 0 is the
least significant). If the magnitude is zero, return value is undefined."
      end

      attribute 2759835 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -8287574255936472291L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.1. for interoperability "
      end

      classrelation 1806619 // serialPersistentFields (<unidirectional association>)
	relation 1806619 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value "=  { 
        new ObjectStreamField(\"signum\", Integer.TYPE), 
        new ObjectStreamField(\"magnitude\", byte[].class),
        new ObjectStreamField(\"bitCount\", Integer.TYPE),
        new ObjectStreamField(\"bitLength\", Integer.TYPE),
        new ObjectStreamField(\"firstNonzeroByteNum\", Integer.TYPE),
        new ObjectStreamField(\"lowestSetBit\", Integer.TYPE)
        }" class_relation const_relation private
	    comment "
Serializable fields for BigInteger.

@serialField signum  int
             signum of this BigInteger.
@serialField magnitude int[]
             magnitude array of this BigInteger.
@serialField bitCount  int
             number of bits in this BigInteger
@serialField bitLength int
             the number of bits in the minimal two's-complement
             representation of this BigInteger
@serialField lowestSetBit int
             lowest set bit in the twos complement representation

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1806619 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      operation 7164699 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the <tt>BigInteger</tt> instance from a stream (that is,
deserialize it). The magnitude is read in as an array of bytes
for historical reasons, but it is converted to an array of ints
and the byte array is discarded."
      end

      operation 7164827 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the <tt>BigInteger</tt> instance to a stream.
The magnitude of a BigInteger is serialized as a byte array for
historical reasons.

@serialData two necessary fields are written as well as obsolete
            fields for compatibility with older versions."
      end

      operation 7164955 "magSerializedForm"
	private explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the mag array as an array of bytes."
      end
    end

    class 925467 "MathContext"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Immutable objects which encapsulate the context settings which
describe certain rules for numerical operators, such as those
implemented by the {@link BigDecimal} class.

<p>The base-independent settings are:
<ol>
<li><tt>precision</tt>:
the number of digits to be used for an operation; results are
rounded to this precision

<li><tt>roundingMode</tt>:
a {@link RoundingMode} object which specifies the algorithm to be
used for rounding.
</ol>

@see     BigDecimal
@see     RoundingMode
@author  Mike Cowlishaw
@author  Joseph D. Darcy"
      classrelation 1806875 // <realization>
	relation 1806875 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1806875 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2760219 "DEFAULT_DIGITS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ----- Constants ----- 
 defaults for constructors"
      end

      classrelation 1807003 // DEFAULT_ROUNDINGMODE (<unidirectional association>)
	relation 1807003 --->
	  a role_name "DEFAULT_ROUNDINGMODE" init_value "=  RoundingMode.HALF_UP" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1807003 // DEFAULT_ROUNDINGMODE (<unidirectional association>)
	  b parent class_ref 925595 // RoundingMode
      end

      attribute 2760347 "MIN_DIGITS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Smallest values for digits (Maximum is Integer.MAX_VALUE)"
      end

      attribute 2760475 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  5579720004786848255L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization version"
      end

      classrelation 1807131 // UNLIMITED (<unidirectional association>)
	relation 1807131 --->
	  a role_name "UNLIMITED" init_value "= 
        new MathContext(0, RoundingMode.HALF_UP)" class_relation const_relation public
	    comment " ----- Public Properties ----- 

 A <tt>MathContext</tt> object whose settings have the values
 required for unlimited precision arithmetic.
 The values of the settings are:
 <code>
 precision=0 roundingMode=HALF_UP
 </code>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1807131 // UNLIMITED (<unidirectional association>)
	  b parent class_ref 925467 // MathContext
      end

      classrelation 1807259 // DECIMAL32 (<unidirectional association>)
	relation 1807259 --->
	  a role_name "DECIMAL32" init_value "= 
        new MathContext(7, RoundingMode.HALF_EVEN)" class_relation const_relation public
	    comment "
 A <tt>MathContext</tt> object with a precision setting
 matching the IEEE 754R Decimal32 format, 7 digits, and a
 rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}, the
 IEEE 754R default.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1807259 // DECIMAL32 (<unidirectional association>)
	  b parent class_ref 925467 // MathContext
      end

      classrelation 1807387 // DECIMAL64 (<unidirectional association>)
	relation 1807387 --->
	  a role_name "DECIMAL64" init_value "= 
        new MathContext(16, RoundingMode.HALF_EVEN)" class_relation const_relation public
	    comment "
 A <tt>MathContext</tt> object with a precision setting
 matching the IEEE 754R Decimal64 format, 16 digits, and a
 rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}, the
 IEEE 754R default.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1807387 // DECIMAL64 (<unidirectional association>)
	  b parent class_ref 925467 // MathContext
      end

      classrelation 1807515 // DECIMAL128 (<unidirectional association>)
	relation 1807515 --->
	  a role_name "DECIMAL128" init_value "= 
        new MathContext(34, RoundingMode.HALF_EVEN)" class_relation const_relation public
	    comment "
 A <tt>MathContext</tt> object with a precision setting
 matching the IEEE 754R Decimal128 format, 34 digits, and a
 rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}, the
 IEEE 754R default.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1807515 // DECIMAL128 (<unidirectional association>)
	  b parent class_ref 925467 // MathContext
      end

      attribute 2760603 "precision"
	const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ----- Shared Properties ----- 

The number of digits to be used for an operation.  A value of 0
indicates that unlimited precision (as many digits as are
required) will be used.  Note that leading zeros (in the
coefficient of a number) are never significant.

<p><tt>precision</tt> will always be non-negative.

@serial
"
      end

      classrelation 1807643 // roundingMode (<unidirectional association>)
	relation 1807643 --->
	  a role_name "roundingMode" const_relation package
	    comment "
The rounding algorithm to be used for an operation.

@see RoundingMode
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1807643 // roundingMode (<unidirectional association>)
	  b parent class_ref 925595 // RoundingMode
      end

      classrelation 1807771 // roundingMax (<unidirectional association>)
	relation 1807771 --->
	  a role_name "roundingMax" init_value "=  null" package
	    comment "
 Lookaside for the rounding points (the numbers which determine
 whether the coefficient of a number will require rounding).
 These will be present if precision&gt;0 and
 precision&lt;=MAX_LOOKASIDE.  In this case they will share the
 <tt>BigInteger int[]</tt> array.  Note that the transients
 cannot be <tt>final</tt> because they are reconstructed on
 deserialization.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1807771 // roundingMax (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      classrelation 1807899 // roundingMin (<unidirectional association>)
	relation 1807899 --->
	  a role_name "roundingMin" init_value "=  null" package
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1807899 // roundingMin (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      attribute 2760731 "MAX_LOOKASIDE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7166235 "MathContext"
	public explicit_return_type ""
	nparams 1
	  param in name "setPrecision" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ----- Constructors ----- 

Constructs a new <tt>MathContext</tt> with the specified
precision and the {@link RoundingMode#HALF_UP HALF_UP} rounding
mode.

@param setPrecision The non-negative <tt>int</tt> precision setting.
@throws IllegalArgumentException <tt>setPrecision</tt> parameter less 
        than zero."
      end

      operation 7166363 "MathContext"
	public explicit_return_type ""
	nparams 2
	  param in name "setPrecision" explicit_type "int"
	  param inout name "setRoundingMode" type class_ref 925595 // RoundingMode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <tt>MathContext</tt> with a specified
precision and rounding mode.

@param setPrecision The non-negative <tt>int</tt> precision setting.
@param setRoundingMode The rounding mode to use.
@throws IllegalArgumentException <tt>setPrecision</tt> parameter less 
        than zero."
      end

      operation 7166491 "MathContext"
	public explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <tt>MathContext</tt> from a string.

The string must be in the same format as that produced by the
{@link #toString} method.

<p>An <tt>IllegalArgumentException</tt> is thrown if the precision
section of the string is out of range (&lt; 0) or the string is
not in the format created by the {@link #toString} method.

@param val The string to be parsed
@throws IllegalArgumentException precision parameter out of range
or incorrect format"
      end

      operation 7166619 "getPrecision"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <tt>precision</tt> setting.
This value is always non-negative.

@return an <tt>int</tt> which is the value of the <tt>precision</tt>
        setting"
      end

      operation 7166747 "getRoundingMode"
	public return_type class_ref 925595 // RoundingMode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the roundingMode setting.
This will be one of
{@link  RoundingMode#CEILING},
{@link  RoundingMode#DOWN},
{@link  RoundingMode#FLOOR},
{@link  RoundingMode#HALF_DOWN},
{@link  RoundingMode#HALF_EVEN},
{@link  RoundingMode#HALF_UP},
{@link  RoundingMode#UNNECESSARY}, or
{@link  RoundingMode#UP}.

@return a <tt>RoundingMode</tt> object which is the value of the
        <tt>roundingMode</tt> setting"
      end

      operation 7166875 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "x" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <tt>MathContext</tt> with the specified
<tt>Object</tt> for equality.

@param  x <tt>Object</tt> to which this <tt>MathContext</tt> is to 
        be compared.
@return <tt>true</tt> if and only if the specified <tt>Object</tt> is
        a <tt>MathContext</tt> object which has exactly the same 
        settings as this object."
      end

      operation 7167003 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code for this <tt>MathContext</tt>.

@return hash code for this <tt>MathContext</tt>"
      end

      operation 7167131 "toString"
	public return_type class_ref 179611 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of this <tt>MathContext</tt>.
The <tt>String</tt> returned represents the settings of the
<tt>MathContext</tt> object as two space-delimited words
(separated by a single space character, <tt>'&#92;u0020'</tt>,
and with no leading or trailing white space), as follows:
<ol>
<li>
The string <tt>&quot;precision=&quot;</tt>, immediately followed
by the value of the precision setting as a numeric string as if
generated by the {@link Integer#toString(int) Integer.toString}
method.

<li>
The string <tt>&quot;roundingMode=&quot;</tt>, immediately
followed by the value of the <tt>roundingMode</tt> setting as a
word.  This word will be the same as the name of the
corresponding public constant in the {@link RoundingMode}
enum.
</ol>
<p>
For example:
<pre>
precision=9 roundingMode=HALF_UP
</pre>

Additional words may be appended to the result of
<tt>toString</tt> in the future if more properties are added to
this class.

@return a <tt>String</tt> representing the context settings."
      end

      operation 7167259 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private methods

Reconstitute the <tt>MathContext</tt> instance from a stream (that is,
deserialize it).

@param s the stream being read."
      end
    end

    class 925595 "RoundingMode"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Specifies a <i>rounding behavior</i> for numerical operations
capable of discarding precision. Each rounding mode indicates how
the least significant returned digit of a rounded result is to be
calculated.  If fewer digits are returned than the digits needed to
represent the exact numerical result, the discarded digits will be
referred to as the <i>discarded fraction</i> regardless the digits'
contribution to the value of the number.  In other words,
considered as a numerical value, the discarded fraction could have
an absolute value greater than one.

<p>Each rounding mode description includes a table listing how
different two-digit decimal values would round to a one digit
decimal value under the rounding mode in question.  The result
column in the tables could be gotten by creating a
<tt>BigDecimal</tt> number with the specified value, forming a
{@link MathContext} object with the proper settings
(<tt>precision</tt> set to <tt>1</tt>, and the
<tt>roundingMode</tt> set to the rounding mode in question), and
calling {@link BigDecimal#round round} on this number with the
proper <tt>MathContext</tt>.  A summary table showing the results
of these rounding operations for all rounding modes appears below.

<p>
<table border>
<caption top><h3>Summary of Rounding Operations Under Different Rounding Modes</h3></caption>
<tr><th></th><th colspan=8>Result of rounding input to one digit with the given 
                          rounding mode</th>
<tr valign=top>
<th>Input Number</th>	 <th><tt>UP</tt></th> 
                                          <th><tt>DOWN</tt></th> 
                                                       <th><tt>CEILING</tt></th>
                                                                      <th><tt>FLOOR</tt></th>
                                                                                   <th><tt>HALF_UP</tt></th>
                                                                                                  <th><tt>HALF_DOWN</tt></th>
                                                                                                                   <th><tt>HALF_EVEN</tt></th>
                                                                                                                                    <th><tt>UNNECESSARY</tt></th>
   
<tr align=right><td>5.5</td>	 <td>6</td>  <td>5</td>    <td>6</td>    <td>5</td>  <td>6</td>      <td>5</td>       <td>6</td>       <td>throw <tt>ArithmeticException</tt></td>
<tr align=right><td>2.5</td>	 <td>3</td>  <td>2</td>    <td>3</td>    <td>2</td>  <td>3</td>      <td>2</td>       <td>2</td>       <td>throw <tt>ArithmeticException</tt></td>
<tr align=right><td>1.6</td>	 <td>2</td>  <td>1</td>    <td>2</td> 	 <td>1</td>  <td>2</td>      <td>2</td>       <td>2</td>       <td>throw <tt>ArithmeticException</tt></td>
<tr align=right><td>1.1</td>	 <td>2</td>  <td>1</td>    <td>2</td> 	 <td>1</td>  <td>1</td>      <td>1</td>       <td>1</td>       <td>throw <tt>ArithmeticException</tt></td>
<tr align=right><td>1.0</td>	 <td>1</td>  <td>1</td>    <td>1</td> 	 <td>1</td>  <td>1</td>      <td>1</td>       <td>1</td>       <td>1</td>                                
<tr align=right><td>-1.0</td> <td>-1</td> <td>-1</td>   <td>-1</td>	 <td>-1</td> <td>-1</td>     <td>-1</td>      <td>-1</td>      <td>-1</td>                               
<tr align=right><td>-1.1</td> <td>-2</td> <td>-1</td>   <td>-1</td>	 <td>-2</td> <td>-1</td>     <td>-1</td>      <td>-1</td>      <td>throw <tt>ArithmeticException</tt></td>
<tr align=right><td>-1.6</td> <td>-2</td> <td>-1</td>   <td>-1</td>	 <td>-2</td> <td>-2</td>     <td>-2</td>      <td>-2</td>      <td>throw <tt>ArithmeticException</tt></td>
<tr align=right><td>-2.5</td> <td>-3</td> <td>-2</td>   <td>-2</td>	 <td>-3</td> <td>-3</td>     <td>-2</td>      <td>-2</td>      <td>throw <tt>ArithmeticException</tt></td>
<tr align=right><td>-5.5</td> <td>-6</td> <td>-5</td>   <td>-5</td>	 <td>-6</td> <td>-6</td>     <td>-5</td>      <td>-6</td>      <td>throw <tt>ArithmeticException</tt></td>
</table>


<p>This <tt>enum</tt> is intended to replace the integer-based
enumeration of rounding mode constants in {@link BigDecimal}
({@link BigDecimal#ROUND_UP}, {@link BigDecimal#ROUND_DOWN},
etc. ).

@see     BigDecimal
@see     MathContext
@version 1.x 01/xx/xx
@author  Josh Bloch
@author  Mike Cowlishaw
@author  Joseph D. Darcy"
      attribute 2761371 "UP"
	public type class_ref 925595 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_UP),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round away from zero.  Always increments the
digit prior to a non-zero discarded fraction.  Note that this
rounding mode never decreases the magnitude of the calculated
value.

<p>Example:
<table border>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with <tt>UP</tt> rounding
<tr align=right><td>5.5</td>	<td>6</td>
<tr align=right><td>2.5</td>	<td>3</td>
<tr align=right><td>1.6</td>	<td>2</td>
<tr align=right><td>1.1</td>	<td>2</td>
<tr align=right><td>1.0</td>	<td>1</td>
<tr align=right><td>-1.0</td>	<td>-1</td>
<tr align=right><td>-1.1</td>	<td>-2</td>
<tr align=right><td>-1.6</td>	<td>-2</td>
<tr align=right><td>-2.5</td>	<td>-3</td>
<tr align=right><td>-5.5</td>	<td>-6</td>
</table>"
      end

      attribute 2761499 "DOWN"
	public type class_ref 925595 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_DOWN),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards zero.  Never increments the digit
prior to a discarded fraction (i.e., truncates).  Note that this
rounding mode never increases the magnitude of the calculated value.

<p>Example:
<table border>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with <tt>DOWN</tt> rounding
<tr align=right><td>5.5</td>	<td>5</td>
<tr align=right><td>2.5</td>	<td>2</td>
<tr align=right><td>1.6</td>	<td>1</td>
<tr align=right><td>1.1</td>	<td>1</td>
<tr align=right><td>1.0</td>	<td>1</td>
<tr align=right><td>-1.0</td>	<td>-1</td>
<tr align=right><td>-1.1</td>	<td>-1</td>
<tr align=right><td>-1.6</td>	<td>-1</td>
<tr align=right><td>-2.5</td>	<td>-2</td>
<tr align=right><td>-5.5</td>	<td>-5</td>
</table>"
      end

      attribute 2761627 "CEILING"
	public type class_ref 925595 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_CEILING),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards positive infinity.  If the
result is positive, behaves as for <tt>RoundingMode.UP</tt>;
if negative, behaves as for <tt>RoundingMode.DOWN</tt>.  Note
that this rounding mode never decreases the calculated value.

<p>Example:
<table border>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with <tt>CEILING</tt> rounding
<tr align=right><td>5.5</td>	<td>6</td>
<tr align=right><td>2.5</td>	<td>3</td>
<tr align=right><td>1.6</td>	<td>2</td>
<tr align=right><td>1.1</td>	<td>2</td>
<tr align=right><td>1.0</td>	<td>1</td>
<tr align=right><td>-1.0</td>	<td>-1</td>
<tr align=right><td>-1.1</td>	<td>-1</td>
<tr align=right><td>-1.6</td>	<td>-1</td>
<tr align=right><td>-2.5</td>	<td>-2</td>
<tr align=right><td>-5.5</td>	<td>-5</td>
</table>"
      end

      attribute 2761755 "FLOOR"
	public type class_ref 925595 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_FLOOR),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards negative infinity.  If the
result is positive, behave as for <tt>RoundingMode.DOWN</tt>;
if negative, behave as for <tt>RoundingMode.UP</tt>.  Note that
this rounding mode never increases the calculated value.

<p>Example:
<table border>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with <tt>FLOOR</tt> rounding
<tr align=right><td>5.5</td>	<td>5</td>
<tr align=right><td>2.5</td>	<td>2</td>
<tr align=right><td>1.6</td>	<td>1</td>
<tr align=right><td>1.1</td>	<td>1</td>
<tr align=right><td>1.0</td>	<td>1</td>
<tr align=right><td>-1.0</td>	<td>-1</td>
<tr align=right><td>-1.1</td>	<td>-2</td>
<tr align=right><td>-1.6</td>	<td>-2</td>
<tr align=right><td>-2.5</td>	<td>-3</td>
<tr align=right><td>-5.5</td>	<td>-6</td>
</table>"
      end

      attribute 2761883 "HALF_UP"
	public type class_ref 925595 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_HALF_UP),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards &quot;nearest neighbor&quot;
unless both neighbors are equidistant, in which case round up.
Behaves as for <tt>RoundingMode.UP</tt> if the discarded
fraction is &gt;= 0.5; otherwise, behaves as for
<tt>RoundingMode.DOWN</tt>.  Note that this is the rounding
mode commonly taught at school.

<p>Example:
<table border>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with <tt>HALF_UP</tt> rounding
<tr align=right><td>5.5</td>	<td>6</td>
<tr align=right><td>2.5</td>	<td>3</td>
<tr align=right><td>1.6</td>	<td>2</td>
<tr align=right><td>1.1</td>	<td>1</td>
<tr align=right><td>1.0</td>	<td>1</td>
<tr align=right><td>-1.0</td>	<td>-1</td>
<tr align=right><td>-1.1</td>	<td>-1</td>
<tr align=right><td>-1.6</td>	<td>-2</td>
<tr align=right><td>-2.5</td>	<td>-3</td>
<tr align=right><td>-5.5</td>	<td>-6</td>
</table>"
      end

      attribute 2762011 "HALF_DOWN"
	public type class_ref 925595 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_HALF_DOWN),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards &quot;nearest neighbor&quot;
unless both neighbors are equidistant, in which case round
down.  Behaves as for <tt>RoundingMode.UP</tt> if the discarded
fraction is &gt; 0.5; otherwise, behaves as for
<tt>RoundingMode.DOWN</tt>.

<p>Example:
<table border>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with <tt>HALF_DOWN</tt> rounding
<tr align=right><td>5.5</td>	<td>5</td>
<tr align=right><td>2.5</td>	<td>2</td>
<tr align=right><td>1.6</td>	<td>2</td>
<tr align=right><td>1.1</td>	<td>1</td>
<tr align=right><td>1.0</td>	<td>1</td>
<tr align=right><td>-1.0</td>	<td>-1</td>
<tr align=right><td>-1.1</td>	<td>-1</td>
<tr align=right><td>-1.6</td>	<td>-2</td>
<tr align=right><td>-2.5</td>	<td>-2</td>
<tr align=right><td>-5.5</td>	<td>-5</td>
</table>"
      end

      attribute 2762139 "HALF_EVEN"
	public type class_ref 925595 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_HALF_EVEN),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards the &quot;nearest neighbor&quot;
unless both neighbors are equidistant, in which case, round
towards the even neighbor.  Behaves as for
<tt>RoundingMode.HALF_UP</tt> if the digit to the left of the
discarded fraction is odd; behaves as for
<tt>RoundingMode.HALF_DOWN</tt> if it's even.  Note that this
is the rounding mode that statistically minimizes cumulative
error when applied repeatedly over a sequence of calculations.
It is sometimes known as &quot;Banker's rounding,&quot; and is
chiefly used in the USA.  This rounding mode is analogous to
the rounding policy used for <tt>float</tt> and <tt>double</tt>
arithmetic in Java.

<p>Example:
<table border>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with <tt>HALF_EVEN</tt> rounding
<tr align=right><td>5.5</td>	<td>6</td>
<tr align=right><td>2.5</td>	<td>2</td>
<tr align=right><td>1.6</td>	<td>2</td>
<tr align=right><td>1.1</td>	<td>1</td>
<tr align=right><td>1.0</td>	<td>1</td>
<tr align=right><td>-1.0</td>	<td>-1</td>
<tr align=right><td>-1.1</td>	<td>-1</td>
<tr align=right><td>-1.6</td>	<td>-2</td>
<tr align=right><td>-2.5</td>	<td>-2</td>
<tr align=right><td>-5.5</td>	<td>-6</td>
</table>"
      end

      attribute 2762267 "UNNECESSARY"
	public type class_ref 925595 // RoundingMode
	cpp_decl ""
	java_decl "  ${@}${name}(BigDecimal.ROUND_UNNECESSARY),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to assert that the requested operation has an exact
result, hence no rounding is necessary.  If this rounding mode is
specified on an operation that yields an inexact result, an
<tt>ArithmeticException</tt> is thrown.
<p>Example:
<table border>
<tr valign=top><th>Input Number</th>
   <th>Input rounded to one digit<br> with <tt>UNNECESSARY</tt> rounding
<tr align=right><td>5.5</td>	<td>throw <tt>ArithmeticException</tt></td>
<tr align=right><td>2.5</td>	<td>throw <tt>ArithmeticException</tt></td>
<tr align=right><td>1.6</td>	<td>throw <tt>ArithmeticException</tt></td>
<tr align=right><td>1.1</td>	<td>throw <tt>ArithmeticException</tt></td>
<tr align=right><td>1.0</td>	<td>1</td>
<tr align=right><td>-1.0</td>	<td>-1</td>
<tr align=right><td>-1.1</td>	<td>throw <tt>ArithmeticException</tt></td>
<tr align=right><td>-1.6</td>	<td>throw <tt>ArithmeticException</tt></td>
<tr align=right><td>-2.5</td>	<td>throw <tt>ArithmeticException</tt></td>
<tr align=right><td>-5.5</td>	<td>throw <tt>ArithmeticException</tt></td>	
</table>"
      end

      attribute 2762395 "oldMode"
	const_attribute package explicit_type "int"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Corresponding BigDecimal rounding constant"
      end

      operation 7173787 "RoundingMode"
	private explicit_return_type ""
	nparams 1
	  param in name "oldMode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor

@param oldMode The <tt>BigDecimal</tt> constant corresponding to 
       this mode"
      end

      operation 7173915 "valueOf"
	class_operation public return_type class_ref 925595 // RoundingMode
	nparams 1
	  param in name "rm" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <tt>RoundingMode</tt> object corresponding to a
legacy integer rounding mode constant in {@link BigDecimal}.

@param  rm legacy integer rounding mode to convert
@return <tt>RoundingMode</tt> corresponding to the given integer.
@throws IllegalArgumentException integer is out of range"
      end
    end

    class 925723 "MutableBigInteger"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class used to represent multiprecision integers that makes efficient
use of allocated space by allowing a number to occupy only part of
an array so that the arrays do not have to be reallocated as often.
When performing an operation with many iterations the array used to
hold a number is only reallocated when necessary and does not have to
be the same size as the number it represents. A mutable number allows
calculations to occur on the same number without having to create
a new number for every step of the calculation as occurs with
BigIntegers.

@see     BigInteger
@version 1.12, 12/19/03
@author  Michael McCloskey
@since   1.3"
      attribute 2760859 "value"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Holds the magnitude of this MutableBigInteger in big endian order.
The magnitude may start at an offset into the value array, and it may
end before the length of the value array.
"
      end

      attribute 2760987 "intLen"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of ints of the value array that are currently used
to hold the magnitude of this MutableBigInteger. The magnitude starts
at an offset and offset + intLen may be less than value.length.
"
      end

      attribute 2761115 "offset"
	package explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The offset into the value array where the magnitude of this
MutableBigInteger begins.
"
      end

      attribute 2761243 "LONG_MASK"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  0xffffffffL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This mask is used to obtain the value of an int as if it were unsigned.
"
      end

      operation 7167387 "MutableBigInteger"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors

The default constructor. An empty MutableBigInteger is created with
a one word capacity."
      end

      operation 7167515 "MutableBigInteger"
	package explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new MutableBigInteger with a magnitude specified by
the int val."
      end

      operation 7167643 "MutableBigInteger"
	package explicit_return_type ""
	nparams 2
	  param in name "val" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new MutableBigInteger with the specified value array
up to the specified length."
      end

      operation 7167771 "MutableBigInteger"
	package explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new MutableBigInteger with the specified value array
up to the length of the array supplied."
      end

      operation 7167899 "MutableBigInteger"
	package explicit_return_type ""
	nparams 1
	  param inout name "b" type class_ref 775835 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new MutableBigInteger with a magnitude equal to the
specified BigInteger."
      end

      operation 7168027 "MutableBigInteger"
	package explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new MutableBigInteger with a magnitude equal to the
specified MutableBigInteger."
      end

      operation 7168155 "clear"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clear out a MutableBigInteger for reuse."
      end

      operation 7168283 "reset"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a MutableBigInteger to zero, removing its offset."
      end

      operation 7168411 "compare"
	package explicit_return_type "int"
	nparams 1
	  param inout name "b" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare the magnitude of two MutableBigIntegers. Returns -1, 0 or 1
as this MutableBigInteger is numerically less than, equal to, or
greater than <tt>b</tt>. "
      end

      operation 7168539 "getLowestSetBit"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the index of the lowest set bit in this MutableBigInteger. If the
magnitude of this MutableBigInteger is zero, -1 is returned."
      end

      operation 7168667 "getInt"
	private explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the int in use in this MutableBigInteger at the specified
index. This method is not used because it is not inlined on all
platforms."
      end

      operation 7168795 "getLong"
	private explicit_return_type "long"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a long which is equal to the unsigned value of the int in
use in this MutableBigInteger at the specified index. This method is
not used because it is not inlined on all platforms."
      end

      operation 7168923 "normalize"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensure that the MutableBigInteger is in normal form, specifically
making sure that there are no leading zeros, and that if the
magnitude is zero, then intLen is zero."
      end

      operation 7169051 "ensureCapacity"
	private explicit_return_type "void"
	nparams 1
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If this MutableBigInteger cannot hold len words, increase the size
of the value array to len words."
      end

      operation 7169179 "toIntArray"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert this MutableBigInteger into an int array with no leading
zeros, of a length that is equal to this MutableBigInteger's intLen."
      end

      operation 7169307 "setInt"
	package explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the int at index+offset in this MutableBigInteger to val.
This does not get inlined on all platforms so it is not used
as often as originally intended."
      end

      operation 7169435 "setValue"
	package explicit_return_type "void"
	nparams 2
	  param in name "val" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this MutableBigInteger's value array to the specified array.
The intLen is set to the specified length."
      end

      operation 7169563 "copyValue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "val" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this MutableBigInteger's value array to a copy of the specified
array. The intLen is set to the length of the new array."
      end

      operation 7169691 "copyValue"
	package explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this MutableBigInteger's value array to a copy of the specified
array. The intLen is set to the length of the specified array."
      end

      operation 7169819 "isOne"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true iff this MutableBigInteger has a value of one."
      end

      operation 7169947 "isZero"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true iff this MutableBigInteger has a value of zero."
      end

      operation 7170075 "isEven"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true iff this MutableBigInteger is even."
      end

      operation 7170203 "isOdd"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true iff this MutableBigInteger is odd."
      end

      operation 7170331 "isNormal"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true iff this MutableBigInteger is in normal form. A
MutableBigInteger is in normal form if it has no leading zeros
after the offset, and intLen + offset <= value.length."
      end

      operation 7170459 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String representation of this MutableBigInteger in radix 10."
      end

      operation 7170587 "rightShift"
	package explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Right shift this MutableBigInteger n bits. The MutableBigInteger is left
in normal form."
      end

      operation 7170715 "leftShift"
	package explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Left shift this MutableBigInteger n bits. "
      end

      operation 7170843 "divadd"
	private explicit_return_type "int"
	nparams 3
	  param in name "a" explicit_type "int"
	  param in name "result" explicit_type "int"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A primitive used for division. This method adds in one multiple of the
divisor a back to the dividend result at a specified offset. It is used
when qhat was estimated too large, and must be adjusted."
      end

      operation 7170971 "mulsub"
	private explicit_return_type "int"
	nparams 5
	  param in name "q" explicit_type "int"
	  param in name "a" explicit_type "int"
	  param in name "x" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is used for division. It multiplies an n word input a by one
word input x, and subtracts the n word product from q. This is needed
when subtracting qhat*divisor from dividend."
      end

      operation 7171099 "primitiveRightShift"
	private explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Right shift this MutableBigInteger n bits, where n is
less than 32.
Assumes that intLen > 0, n > 0 for speed"
      end

      operation 7171227 "primitiveLeftShift"
	private explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Left shift this MutableBigInteger n bits, where n is
less than 32.
Assumes that intLen > 0, n > 0 for speed"
      end

      operation 7171355 "add"
	package explicit_return_type "void"
	nparams 1
	  param inout name "addend" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the contents of two MutableBigInteger objects.The result
is placed within this MutableBigInteger.
The contents of the addend are not changed."
      end

      operation 7171483 "subtract"
	package explicit_return_type "int"
	nparams 1
	  param inout name "b" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subtracts the smaller of this and b from the larger and places the
result into this MutableBigInteger."
      end

      operation 7171611 "difference"
	private explicit_return_type "int"
	nparams 1
	  param inout name "b" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subtracts the smaller of a and b from the larger and places the result
into the larger. Returns 1 if the answer is in a, -1 if in b, 0 if no
operation was performed."
      end

      operation 7171739 "multiply"
	package explicit_return_type "void"
	nparams 2
	  param inout name "y" type class_ref 925723 // MutableBigInteger
	  param inout name "z" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Multiply the contents of two MutableBigInteger objects. The result is
placed into MutableBigInteger z. The contents of y are not changed."
      end

      operation 7171867 "mul"
	package explicit_return_type "void"
	nparams 2
	  param in name "y" explicit_type "int"
	  param inout name "z" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Multiply the contents of this MutableBigInteger by the word y. The
result is placed into z."
      end

      operation 7171995 "divideOneWord"
	package explicit_return_type "void"
	nparams 2
	  param in name "divisor" explicit_type "int"
	  param inout name "quotient" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is used for division of an n word dividend by a one word
divisor. The quotient is placed into quotient. The one word divisor is
specified by divisor. The value of this MutableBigInteger is the
dividend at invocation but is replaced by the remainder.

NOTE: The value of this MutableBigInteger is modified by this method."
      end

      operation 7172123 "divide"
	package explicit_return_type "void"
	nparams 3
	  param inout name "b" type class_ref 925723 // MutableBigInteger
	  param inout name "quotient" type class_ref 925723 // MutableBigInteger
	  param inout name "rem" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the quotient and remainder of this div b and places them
in the MutableBigInteger objects provided.

Uses Algorithm D in Knuth section 4.3.1.
Many optimizations to that algorithm have been adapted from the Colin
Plumb C library.
It special cases one word divisors for speed.
The contents of a and b are not changed.
"
      end

      operation 7172251 "unsignedLongCompare"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "one" explicit_type "long"
	  param in name "two" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare two longs as if they were unsigned.
Returns true iff one is bigger than two."
      end

      operation 7172379 "divWord"
	private explicit_return_type "void"
	nparams 3
	  param in name "result" explicit_type "int"
	  param in name "n" explicit_type "long"
	  param in name "d" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method divides a long quantity by an int to estimate
qhat for two multi precision numbers. It is used when 
the signed value of n is less than zero."
      end

      operation 7172507 "hybridGCD"
	package return_type class_ref 925723 // MutableBigInteger
	nparams 1
	  param inout name "b" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate GCD of this and b. This and b are changed by the computation."
      end

      operation 7172635 "binaryGCD"
	private return_type class_ref 925723 // MutableBigInteger
	nparams 1
	  param inout name "v" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate GCD of this and v.
Assumes that this and v are not zero."
      end

      operation 7172763 "binaryGcd"
	class_operation package explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate GCD of a and b interpreted as unsigned integers."
      end

      operation 7172891 "mutableModInverse"
	package return_type class_ref 925723 // MutableBigInteger
	nparams 1
	  param inout name "p" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the modInverse of this mod p. This and p are not affected by
the operation."
      end

      operation 7173019 "modInverseMP2"
	package return_type class_ref 925723 // MutableBigInteger
	nparams 1
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate the multiplicative inverse of this mod 2^k."
      end

      operation 7173147 "inverseMod32"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the multiplicative inverse of val mod 2^32.  Assumes val is odd."
      end

      operation 7173275 "modInverseBP2"
	class_operation package return_type class_ref 925723 // MutableBigInteger
	nparams 2
	  param inout name "mod" type class_ref 925723 // MutableBigInteger
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate the multiplicative inverse of 2^k mod mod, where mod is odd."
      end

      operation 7173403 "modInverse"
	private return_type class_ref 925723 // MutableBigInteger
	nparams 1
	  param inout name "mod" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate the multiplicative inverse of this mod mod, where mod is odd.
This and mod are not changed by the calculation.

This method implements an algorithm due to Richard Schroeppel, that uses
the same intermediate representation as Montgomery Reduction
(\"Montgomery Form\").  The algorithm is described in an unpublished
manuscript entitled \"Fast Modular Reciprocals.\""
      end

      operation 7173531 "fixup"
	class_operation package return_type class_ref 925723 // MutableBigInteger
	nparams 3
	  param inout name "c" type class_ref 925723 // MutableBigInteger
	  param inout name "p" type class_ref 925723 // MutableBigInteger
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The Fixup Algorithm
Calculates X such that X = C * 2^(-k) (mod P)
Assumes C<P and P is odd."
      end

      operation 7173659 "euclidModInverse"
	package return_type class_ref 925723 // MutableBigInteger
	nparams 1
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Uses the extended Euclidean algorithm to compute the modInverse of base
mod a modulus that is a power of 2. The modulus is 2^k."
      end
    end

    class 925851 "BitSieve"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A simple bit sieve used for finding prime number candidates. Allows setting
and clearing of bits in a storage array. The size of the sieve is assumed to
be constant to reduce overhead. All the bits of a new bitSieve are zero, and
bits are removed from it by setting them.

To reduce storage space and increase efficiency, no even numbers are
represented in the sieve (each bit in the sieve represents an odd number).
The relationship between the index of a bit and the number it represents is
given by
N = offset + (2*index + 1);
Where N is the integer represented by a bit in the sieve, offset is some
even integer offset indicating where the sieve begins, and index is the
index of a bit in the sieve array.

@see     BigInteger
@version 1.10, 12/19/03
@author  Michael McCloskey
@since   1.3"
      attribute 2759963 "bits"
	private explicit_type "long"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Stores the bits in this bitSieve.
"
      end

      attribute 2760091 "length"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Length is how many bits this sieve holds.
"
      end

      classrelation 1806747 // smallSieve (<unidirectional association>)
	relation 1806747 --->
	  a role_name "smallSieve" init_value "=  new BitSieve()" class_relation private
	    comment "
A small sieve used to filter out multiples of small primes in a search
sieve.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1806747 // smallSieve (<unidirectional association>)
	  b parent class_ref 925851 // BitSieve
      end

      operation 7165083 "BitSieve"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a \"small sieve\" with a base of 0.  This constructor is 
used internally to generate the set of \"small primes\" whose multiples
are excluded from sieves generated by the main (package private)
constructor, BitSieve(BigInteger base, int searchLen).  The length
of the sieve generated by this constructor was chosen for performance;
it controls a tradeoff between how much time is spent constructing
other sieves, and how much time is wasted testing composite candidates
for primality.  The length was chosen experimentally to yield good
performance."
      end

      operation 7165211 "BitSieve"
	package explicit_return_type ""
	nparams 2
	  param inout name "base" type class_ref 775835 // BigInteger
	  param in name "searchLen" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a bit sieve of searchLen bits used for finding prime number
candidates. The new sieve begins at the specified base, which must
be even."
      end

      operation 7165339 "unitIndex"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "bitIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a bit index return unit index containing it."
      end

      operation 7165467 "bit"
	class_operation private explicit_return_type "long"
	nparams 1
	  param in name "bitIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a unit that masks the specified bit in its unit."
      end

      operation 7165595 "get"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "bitIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the value of the bit at the specified index."
      end

      operation 7165723 "set"
	private explicit_return_type "void"
	nparams 1
	  param in name "bitIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the bit at the specified index."
      end

      operation 7165851 "sieveSearch"
	private explicit_return_type "int"
	nparams 2
	  param in name "limit" explicit_type "int"
	  param in name "start" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method returns the index of the first clear bit in the search
array that occurs at or after start. It will not search past the
specified limit. It returns -1 if there is no such clear bit."
      end

      operation 7165979 "sieveSingle"
	private explicit_return_type "void"
	nparams 3
	  param in name "limit" explicit_type "int"
	  param in name "start" explicit_type "int"
	  param in name "step" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sieve a single set of multiples out of the sieve. Begin to remove
multiples of the specified step starting at the specified start index,
up to the specified limit."
      end

      operation 7166107 "retrieve"
	package return_type class_ref 775835 // BigInteger
	nparams 2
	  param inout name "initValue" type class_ref 775835 // BigInteger
	  param in name "certainty" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test probable primes in the sieve and return successful candidates."
      end
    end

    class 925979 "SignedMutableBigInteger"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class used to represent multiprecision integers that makes efficient
use of allocated space by allowing a number to occupy only part of
an array so that the arrays do not have to be reallocated as often.
When performing an operation with many iterations the array used to
hold a number is only increased when necessary and does not have to
be the same size as the number it represents. A mutable number allows
calculations to occur on the same number without having to create
a new number for every step of the calculation as occurs with
BigIntegers.

Note that SignedMutableBigIntegers only support signed addition and
subtraction. All other operations occur as with MutableBigIntegers.

@see     BigInteger
@version 1.9, 12/19/03
@author  Michael McCloskey
@since   1.3"
      classrelation 1808027 // <generalisation>
	relation 1808027 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1808027 // <generalisation>
	  b parent class_ref 925723 // MutableBigInteger
      end

      attribute 2762523 "sign"
	package explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The sign of this MutableBigInteger.
"
      end

      operation 7174043 "SignedMutableBigInteger"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors

The default constructor. An empty MutableBigInteger is created with
a one word capacity."
      end

      operation 7174171 "SignedMutableBigInteger"
	package explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new MutableBigInteger with a magnitude specified by
the int val."
      end

      operation 7174299 "SignedMutableBigInteger"
	package explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new MutableBigInteger with a magnitude equal to the
specified MutableBigInteger."
      end

      operation 7174427 "signedAdd"
	package explicit_return_type "void"
	nparams 1
	  param inout name "addend" type class_ref 925979 // SignedMutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Arithmetic Operations

Signed addition built upon unsigned add and subtract."
      end

      operation 7174555 "signedAdd"
	package explicit_return_type "void"
	nparams 1
	  param inout name "addend" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Signed addition built upon unsigned add and subtract."
      end

      operation 7174683 "signedSubtract"
	package explicit_return_type "void"
	nparams 1
	  param inout name "addend" type class_ref 925979 // SignedMutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Signed subtraction built upon unsigned add and subtract."
      end

      operation 7174811 "signedSubtract"
	package explicit_return_type "void"
	nparams 1
	  param inout name "addend" type class_ref 925723 // MutableBigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Signed subtraction built upon unsigned add and subtract."
      end

      operation 7174939 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print out the first intLen ints of this MutableBigInteger's value
array starting at offset."
      end
    end
  end

  deploymentview 166939 "math"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 696603 "BigDecimal"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 178459 // BigDecimal
      end
      comment "@(#)BigDecimal.java	1.56 06/02/08

Copyright 2006 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


@(#)BigDecimal.java  1.x 01/xx/xx

Copyright 1996-2001 Sun Microsystems, Inc. All Rights Reserved.
Portions Copyright IBM Corporation, 2001. All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.
"
    end

    artifact 696731 "BigInteger"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Random;
import java.io.*;
${definition}"
      associated_classes
	class_ref 775835 // BigInteger
      end
      comment "Copyright 2005 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


@(#)BigInteger.java	1.70 05/08/09"
    end

    artifact 696859 "BitSieve"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 925851 // BitSieve
      end
      comment "Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


@(#)BitSieve.java	1.10 03/12/19"
    end

    artifact 696987 "MathContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_classes
	class_ref 925467 // MathContext
      end
      comment "@(#)MathContext.java	1.2 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


@(#)MathContext.java  1.x 01/xx/xx

Copyright IBM Corporation, 1997, 2001. All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.
and IBM Corporation.  Use is subject to license terms.
"
    end

    artifact 697115 "MutableBigInteger"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 925723 // MutableBigInteger
      end
      comment "Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


@(#)MutableBigInteger.java	1.12 03/12/19"
    end

    artifact 697243 "RoundingMode"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 925595 // RoundingMode
      end
      comment "@(#)RoundingMode.java	1.3 04/06/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


@(#)RoundingMode.java  1.x 01/xx/xx

Copyright 2001 Sun Microsystems, Inc. All Rights Reserved.
Portions Copyright IBM Corporation, 2001. All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.
"
    end

    artifact 697371 "SignedMutableBigInteger"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 925979 // SignedMutableBigInteger
      end
      comment "Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


@(#)SignedMutableBigInteger.java	1.9 03/12/19"
    end
  end
end
