class StringReader
!!!6911131.java!!!	StringReader(in s : String)
	this.str = s;
	this.length = s.length();
!!!6911259.java!!!	ensureOpen() : void
	if (str == null)
	    throw new IOException("Stream closed");
!!!6911387.java!!!	read() : int
	synchronized (lock) {
	    ensureOpen();
	    if (next >= length)
		return -1;
	    return str.charAt(next++);
	}
!!!6911515.java!!!	read(in cbuf : char, in off : int, in len : int) : int
	synchronized (lock) {
	    ensureOpen();
            if ((off < 0) || (off > cbuf.length) || (len < 0) ||
                ((off + len) > cbuf.length) || ((off + len) < 0)) {
                throw new IndexOutOfBoundsException();
            } else if (len == 0) {
                return 0;
            }
	    if (next >= length)
		return -1;
	    int n = Math.min(length - next, len);
	    str.getChars(next, next + n, cbuf, off);
	    next += n;
	    return n;
	}
!!!6911643.java!!!	skip(in ns : long) : long
	synchronized (lock) {
            ensureOpen();
            if (next >= length)
                return 0;
            // Bound skip by beginning and end of the source
            long n = Math.min(length - next, ns);
            n = Math.max(-next, n);
            next += n;
            return n;
        }
!!!6911771.java!!!	ready() : boolean
        synchronized (lock) {
        ensureOpen();
        return true;
        }
!!!6911899.java!!!	markSupported() : boolean
	return true;
!!!6912027.java!!!	mark(in readAheadLimit : int) : void
	if (readAheadLimit < 0){
	    throw new IllegalArgumentException("Read-ahead limit < 0");
	}
	synchronized (lock) {
	    ensureOpen();
	    mark = next;
	}
!!!6912155.java!!!	reset() : void
	synchronized (lock) {
	    ensureOpen();
	    next = mark;
	}
!!!6912283.java!!!	close() : void
	str = null;
