class LinkedHashMap
!!!311067.java!!!	LinkedHashMap(in initialCapacity : int, in loadFactor : float)
        super(initialCapacity, loadFactor);
        accessOrder = false;
!!!311195.java!!!	LinkedHashMap(in initialCapacity : int)
	super(initialCapacity);
        accessOrder = false;
!!!311323.java!!!	LinkedHashMap()
	super();
        accessOrder = false;
!!!311451.java!!!	LinkedHashMap(inout m : Map)
        super(m);
        accessOrder = false;
!!!311579.java!!!	LinkedHashMap(in initialCapacity : int, in loadFactor : float, inout accessOrder : boolean)
        super(initialCapacity, loadFactor);
        this.accessOrder = accessOrder;
!!!311707.java!!!	init() : void
        header = new Entry<K,V>(-1, null, null, null);
        header.before = header.after = header;
!!!311835.java!!!	transfer(inout newTable : Entry) : void
        int newCapacity = newTable.length;
        for (Entry<K,V> e = header.after; e != header; e = e.after) {
            int index = indexFor(e.hash, newCapacity);
            e.next = newTable[index];
            newTable[index] = e;
        }
!!!311963.java!!!	containsValue(inout value : Object) : boolean
        // Overridden to take advantage of faster iterator
        if (value==null) {
            for (Entry e = header.after; e != header; e = e.after)
                if (e.value==null)
                    return true;
        } else {
            for (Entry e = header.after; e != header; e = e.after)
                if (value.equals(e.value))
                    return true;
        }
        return false;
!!!312091.java!!!	get(inout key : Object) : V
        Entry<K,V> e = (Entry<K,V>)getEntry(key);
        if (e == null)
            return null;
        e.recordAccess(this);
        return e.value;
!!!312219.java!!!	clear() : void
        super.clear();
        header.before = header.after = header;
