class RuleBasedBreakIterator
!!!7837979.java!!!	RuleBasedBreakIterator(in datafile : String)
        readTables(datafile);
!!!7838107.java!!!	readTables(in datafile : String) : void

        byte[] buffer = readFile(datafile);

        /* Read header_info. */
        int stateTableLength = BreakIterator.getInt(buffer, 0);
        int backwardsStateTableLength = BreakIterator.getInt(buffer, 4);
        int endStatesLength = BreakIterator.getInt(buffer, 8);
        int lookaheadStatesLength = BreakIterator.getInt(buffer, 12);
        int BMPdataLength = BreakIterator.getInt(buffer, 16);
        int nonBMPdataLength = BreakIterator.getInt(buffer, 20);
        int additionalDataLength = BreakIterator.getInt(buffer, 24);
        checksum = BreakIterator.getLong(buffer, 28);

        /* Read stateTable[numCategories * numRows] */
        stateTable = new short[stateTableLength];
        int offset = HEADER_LENGTH;
        for (int i = 0; i < stateTableLength; i++, offset+=2) {
           stateTable[i] = BreakIterator.getShort(buffer, offset);
        }

        /* Read backwardsStateTable[numCategories * numRows] */
        backwardsStateTable = new short[backwardsStateTableLength];
        for (int i = 0; i < backwardsStateTableLength; i++, offset+=2) {
           backwardsStateTable[i] = BreakIterator.getShort(buffer, offset);
        }

        /* Read endStates[numRows] */
        endStates = new boolean[endStatesLength];
        for (int i = 0; i < endStatesLength; i++, offset++) {
           endStates[i] = buffer[offset] == 1; 
        }

        /* Read lookaheadStates[numRows] */
        lookaheadStates = new boolean[lookaheadStatesLength];
        for (int i = 0; i < lookaheadStatesLength; i++, offset++) {
           lookaheadStates[i] = buffer[offset] == 1; 
        }

        /* Read a category table and indices for BMP characters. */
        short[] temp1 = new short[BMP_INDICES_LENGTH];  // BMPindices
        for (int i = 0; i < BMP_INDICES_LENGTH; i++, offset+=2) {
            temp1[i] = BreakIterator.getShort(buffer, offset);
        }
        byte[] temp2 = new byte[BMPdataLength];  // BMPdata
        System.arraycopy(buffer, offset, temp2, 0, BMPdataLength);
        offset += BMPdataLength;
        charCategoryTable = new CompactByteArray(temp1, temp2);

        /* Read a category table for non-BMP characters. */
        int[] temp3 = new int[nonBMPdataLength];
        for (int i = 0; i < nonBMPdataLength; i++, offset+=4) {
            temp3[i] = BreakIterator.getInt(buffer, offset);
        }
        supplementaryCharCategoryTable = new SupplementaryCharacterData(temp3);

        /* Read additional data */ 
        if (additionalDataLength > 0) {
            additionalData = new byte[additionalDataLength];
            System.arraycopy(buffer, offset, additionalData, 0, additionalDataLength);
        }

        /* Set numCategories */
        numCategories = stateTable.length / endStates.length;
!!!7838235.java!!!	readFile(in datafile : String) : byte

        BufferedInputStream is;
        try {
            is = (BufferedInputStream)AccessController.doPrivileged(
                new PrivilegedExceptionAction() {
                    public Object run() throws Exception {
                        return new BufferedInputStream(getClass().getResourceAsStream("/sun/text/resources/" + datafile));
                    }
                }
            );
        }                
        catch (PrivilegedActionException e) {
            throw new InternalError(e.toString());
        }

        int offset = 0;

        /* First, read magic, version, and header_info. */
        int len = LABEL_LENGTH + 5;
        byte[] buf = new byte[len];
        if (is.read(buf) != len) {
            throw new MissingResourceException("Wrong header length",
                                               datafile, "");
        }

        /* Validate the magic number. */
        for (int i = 0; i < LABEL_LENGTH; i++, offset++) {
            if (buf[offset] != LABEL[offset]) {
                throw new MissingResourceException("Wrong magic number",
                                                   datafile, "");
            }
        }

        /* Validate the version number. */
        if (buf[offset] != supportedVersion) {
            throw new MissingResourceException("Unsupported version(" + buf[offset] + ")",
                                               datafile, "");
        }

        /* Read data: totalDataSize + 8(for checksum) */
        len = BreakIterator.getInt(buf, ++offset);
        buf = new byte[len];
        if (is.read(buf) != len) {
            throw new MissingResourceException("Wrong data length",
                                               datafile, "");
        }

        is.close();

        return buf;
!!!7838363.java!!!	getAdditionalData() : byte
        return additionalData;
!!!7838491.java!!!	setAdditionalData(in b : byte) : void
        additionalData = b;
!!!7838619.java!!!	clone() : Object
        RuleBasedBreakIterator result = (RuleBasedBreakIterator) super.clone();
        if (text != null) {
            result.text = (CharacterIterator) text.clone();
        }
        return result;
!!!7838747.java!!!	equals(inout that : Object) : boolean
        try {
            if (that == null) {
                return false;
            }

            RuleBasedBreakIterator other = (RuleBasedBreakIterator) that;
            if (checksum != other.checksum) {
                return false;
            }
            if (text == null) {
                return other.text == null;
            } else {
                return text.equals(other.text);
            }
        }
        catch(ClassCastException e) {
            return false;
        }
!!!7838875.java!!!	toString() : String
        StringBuffer sb = new StringBuffer();
        sb.append('[');
        sb.append("checksum=0x" + Long.toHexString(checksum));
        sb.append(']');
        return sb.toString();
!!!7839003.java!!!	hashCode() : int
        return (int)checksum;
!!!7839131.java!!!	first() : int
        CharacterIterator t = getText();

        t.first();
        return t.getIndex();
!!!7839259.java!!!	last() : int
        CharacterIterator t = getText();

        // I'm not sure why, but t.last() returns the offset of the last character,
        // rather than the past-the-end offset
        t.setIndex(t.getEndIndex());
        return t.getIndex();
!!!7839387.java!!!	next(in n : int) : int
        int result = current();
        while (n > 0) {
            result = handleNext();
            --n;
        }
        while (n < 0) {
            result = previous();
            ++n;
        }
        return result;
!!!7839515.java!!!	next() : int
        return handleNext();
!!!7839643.java!!!	previous() : int
        // if we're already sitting at the beginning of the text, return DONE
        CharacterIterator text = getText();
        if (current() == text.getBeginIndex()) {
            return BreakIterator.DONE;
        }

        // set things up.  handlePrevious() will back us up to some valid
        // break position before the current position (we back our internal
        // iterator up one step to prevent handlePrevious() from returning
        // the current position), but not necessarily the last one before
        // where we started
        int start = current();
        getPrevious();
        int lastResult = handlePrevious();
        int result = lastResult;

        // iterate forward from the known break position until we pass our
        // starting point.  The last break position before the starting
        // point is our return value
        while (result != BreakIterator.DONE && result < start) {
            lastResult = result;
            result = handleNext();
        }

        // set the current iteration position to be the last break position
        // before where we started, and then return that value
        text.setIndex(lastResult);
        return lastResult;
!!!7839771.java!!!	getPrevious() : int
        char c2 = text.previous();
        if (Character.isLowSurrogate(c2) &&
            text.getIndex() > text.getBeginIndex()) {
            char c1 = text.previous();
            if (Character.isHighSurrogate(c1)) {
                return Character.toCodePoint(c1, c2);
            } else {
                text.next();
            }
        }
        return (int)c2;
!!!7839899.java!!!	getCurrent() : int
        char c1 = text.current();
        if (Character.isHighSurrogate(c1) &&
            text.getIndex() < text.getEndIndex()) {
            char c2 = text.next();
            text.previous();
            if (Character.isLowSurrogate(c2)) {
                return Character.toCodePoint(c1, c2);
            }
        }
        return (int)c1;
!!!7840027.java!!!	getCurrentCodePointCount() : int
        char c1 = text.current();
        if (Character.isHighSurrogate(c1) &&
            text.getIndex() < text.getEndIndex()) {
            char c2 = text.next();
            text.previous();
            if (Character.isLowSurrogate(c2)) {
                return 2;
            }
        }
        return 1;
!!!7840155.java!!!	getNext() : int
        int index = text.getIndex();
        int endIndex = text.getEndIndex();
        if (index == endIndex ||
            (index = index + getCurrentCodePointCount()) >= endIndex) {
            return CharacterIterator.DONE;
        }
        text.setIndex(index);
        return getCurrent();
!!!7840283.java!!!	getNextIndex() : int
        int index = text.getIndex() + getCurrentCodePointCount();
        int endIndex = text.getEndIndex();
        if (index > endIndex) {
            return endIndex;
        } else {
            return index;
        }
!!!7840411.java!!!	checkOffset(in offset : int, inout text : CharacterIterator) : void
        if (offset < text.getBeginIndex() || offset >= text.getEndIndex()) {
            throw new IllegalArgumentException("offset out of bounds");
        }
!!!7840539.java!!!	following(in offset : int) : int

        CharacterIterator text = getText();
        checkOffset(offset, text);

        // Set our internal iteration position (temporarily)
        // to the position passed in.  If this is the _beginning_ position,
        // then we can just use next() to get our return value
        text.setIndex(offset);
        if (offset == text.getBeginIndex()) {
            return handleNext();
        }

        // otherwise, we have to sync up first.  Use handlePrevious() to back
        // us up to a known break position before the specified position (if
        // we can determine that the specified position is a break position,
        // we don't back up at all).  This may or may not be the last break
        // position at or before our starting position.  Advance forward
        // from here until we've passed the starting position.  The position
        // we stop on will be the first break position after the specified one.
        int result = handlePrevious();
        while (result != BreakIterator.DONE && result <= offset) {
            result = handleNext();
        }
        return result;
!!!7840667.java!!!	preceding(in offset : int) : int
        // if we start by updating the current iteration position to the
        // position specified by the caller, we can just use previous()
        // to carry out this operation
        CharacterIterator text = getText();
        checkOffset(offset, text);
        text.setIndex(offset);
        return previous();
!!!7840795.java!!!	isBoundary(in offset : int) : boolean
        CharacterIterator text = getText();
        checkOffset(offset, text);
        if (offset == text.getBeginIndex()) {
            return true;
        }

        // to check whether this is a boundary, we can use following() on the
        // position before the specified one and return true if the position we
        // get back is the one the user specified
        else {
            return following(offset - 1) == offset;
        }
!!!7840923.java!!!	current() : int
        return getText().getIndex();
!!!7841051.java!!!	getText() : CharacterIterator
        // The iterator is initialized pointing to no text at all, so if this
        // function is called while we're in that state, we have to fudge an
        // iterator to return.
        if (text == null) {
            text = new StringCharacterIterator("");
        }
        return text;
!!!7841179.java!!!	setText(inout newText : CharacterIterator) : void
        // Test iterator to see if we need to wrap it in a SafeCharIterator.
        // The correct behavior for CharacterIterators is to allow the
        // position to be set to the endpoint of the iterator.  Many
        // CharacterIterators do not uphold this, so this is a workaround
        // to permit them to use this class.
        int end = newText.getEndIndex();
        boolean goodIterator;
        try {
            newText.setIndex(end);  // some buggy iterators throw an exception here
            goodIterator = newText.getIndex() == end;
        }
        catch(IllegalArgumentException e) {
            goodIterator = false;
        }

        if (goodIterator) {
            text = newText;
        }
        else {
            text = new SafeCharIterator(newText);
        }
        text.first();
!!!7841307.java!!!	handleNext() : int
        // if we're already at the end of the text, return DONE.
        CharacterIterator text = getText();
        if (text.getIndex() == text.getEndIndex()) {
            return BreakIterator.DONE;
        }

        // no matter what, we always advance at least one character forward
        int result = getNextIndex();
        int lookaheadResult = 0;

        // begin in state 1
        int state = START_STATE;
        int category;
        int c = getCurrent();

        // loop until we reach the end of the text or transition to state 0
        while (c != CharacterIterator.DONE && state != STOP_STATE) {

            // look up the current character's character category (which tells us
            // which column in the state table to look at)
            category = lookupCategory(c);

            // if the character isn't an ignore character, look up a state
            // transition in the state table
            if (category != IGNORE) {
                state = lookupState(state, category);
            }

            // if the state we've just transitioned to is a lookahead state,
            // (but not also an end state), save its position.  If it's
            // both a lookahead state and an end state, update the break position
            // to the last saved lookup-state position
            if (lookaheadStates[state]) {
                if (endStates[state]) {
                    result = lookaheadResult;
                }
                else {
                    lookaheadResult = getNextIndex();
                }
            }

            // otherwise, if the state we've just transitioned to is an accepting
            // state, update the break position to be the current iteration position
            else {
                if (endStates[state]) {
                    result = getNextIndex();
                }
            }

            c = getNext();
        }

        // if we've run off the end of the text, and the very last character took us into
        // a lookahead state, advance the break position to the lookahead position
        // (the theory here is that if there are no characters at all after the lookahead
        // position, that always matches the lookahead criteria)
        if (c == CharacterIterator.DONE && lookaheadResult == text.getEndIndex()) {
            result = lookaheadResult;
        }

        text.setIndex(result);
        return result;
!!!7841435.java!!!	handlePrevious() : int
        CharacterIterator text = getText();
        int state = START_STATE;
        int category = 0;
        int lastCategory = 0;
        int c = getCurrent();

        // loop until we reach the beginning of the text or transition to state 0
        while (c != CharacterIterator.DONE && state != STOP_STATE) {

            // save the last character's category and look up the current
            // character's category
            lastCategory = category;
            category = lookupCategory(c);

            // if the current character isn't an ignore character, look up a
            // state transition in the backwards state table
            if (category != IGNORE) {
                state = lookupBackwardState(state, category);
            }

            // then advance one character backwards
            c = getPrevious();
        }

        // if we didn't march off the beginning of the text, we're either one or two
        // positions away from the real break position.  (One because of the call to
        // previous() at the end of the loop above, and another because the character
        // that takes us into the stop state will always be the character BEFORE
        // the break position.)
        if (c != CharacterIterator.DONE) {
            if (lastCategory != IGNORE) {
                getNext();
                getNext();
            }
            else {
                getNext();
            }
        }
        return text.getIndex();
!!!7841563.java!!!	lookupCategory(in c : int) : int
        if (c < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
            return charCategoryTable.elementAt((char)c);
        } else {
            return supplementaryCharCategoryTable.getValue(c);
        }
!!!7841691.java!!!	lookupState(in state : int, in category : int) : int
        return stateTable[state * numCategories + category];
!!!7841819.java!!!	lookupBackwardState(in state : int, in category : int) : int
        return backwardsStateTable[state * numCategories + category];
