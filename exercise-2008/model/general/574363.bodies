class ConstantPoolGen
!!!3712283.java!!!	ConstantPoolGen(inout cs : Constant)
    if(cs.length > size) {
      size      = cs.length;
      constants = new Constant[size];
    }

    System.arraycopy(cs, 0, constants, 0, cs.length);

    if(cs.length > 0)
      index = cs.length;

    for(int i=1; i < index; i++) {
      Constant c = constants[i];

      if(c instanceof ConstantString) {
	ConstantString s  = (ConstantString)c;
	ConstantUtf8   u8 = (ConstantUtf8)constants[s.getStringIndex()];

	string_table.put(u8.getBytes(), new Index(i));
      } else if(c instanceof ConstantClass) {
	ConstantClass s  = (ConstantClass)c;
	ConstantUtf8  u8 = (ConstantUtf8)constants[s.getNameIndex()];

	class_table.put(u8.getBytes(), new Index(i));
      } else if(c instanceof ConstantNameAndType) {
	ConstantNameAndType n    = (ConstantNameAndType)c;
	ConstantUtf8        u8   = (ConstantUtf8)constants[n.getNameIndex()];
	ConstantUtf8        u8_2 = (ConstantUtf8)constants[n.getSignatureIndex()];

	n_a_t_table.put(u8.getBytes() + NAT_DELIM + u8_2.getBytes(), new Index(i));
       } else if(c instanceof ConstantUtf8) {
         ConstantUtf8 u = (ConstantUtf8)c;
         
         utf8_table.put(u.getBytes(), new Index(i));
      } else if(c instanceof ConstantCP) {
	ConstantCP          m     = (ConstantCP)c;
	ConstantClass       clazz = (ConstantClass)constants[m.getClassIndex()];
	ConstantNameAndType n     = (ConstantNameAndType)constants[m.getNameAndTypeIndex()];
	
        ConstantUtf8 u8         = (ConstantUtf8)constants[clazz.getNameIndex()];
        String       class_name = u8.getBytes().replace('/', '.');

	u8 = (ConstantUtf8)constants[n.getNameIndex()];
	String method_name = u8.getBytes();

	u8 = (ConstantUtf8)constants[n.getSignatureIndex()];
	String signature = u8.getBytes();

	String delim = METHODREF_DELIM;

	if(c instanceof ConstantInterfaceMethodref)
	  delim = IMETHODREF_DELIM;
	else if(c instanceof ConstantFieldref)
	  delim = FIELDREF_DELIM;

	cp_table.put(class_name + delim + method_name + delim + signature, new Index(i));
      }
    }
!!!3712411.java!!!	ConstantPoolGen(inout cp : ConstantPool)
    this(cp.getConstantPool());
!!!3712667.java!!!	adjustSize() : void
    if(index + 3 >= size) {
      Constant[] cs = constants;

      size      *= 2;
      constants  = new Constant[size];
      System.arraycopy(cs, 0, constants, 0, index);
    }
!!!3712795.java!!!	lookupString(in str : String) : int
    Index index = (Index)string_table.get(str);
    return (index != null)? index.index : -1;
!!!3712923.java!!!	addString(in str : String) : int
    int ret;
    
    if((ret = lookupString(str)) != -1)
      return ret; // Already in CP

    adjustSize();

    ConstantUtf8   u8 = new ConstantUtf8(str);
    ConstantString s  = new ConstantString(index);
       
    constants[index++] = u8;
    ret = index;
    constants[index++] = s;

    string_table.put(str, new Index(ret));

    return ret;
!!!3713051.java!!!	lookupClass(in str : String) : int
    Index index = (Index)class_table.get(str.replace('.', '/'));
    return (index != null)? index.index : -1;
!!!3713179.java!!!	addClass_(in clazz : String) : int
    int    ret;

    if((ret = lookupClass(clazz)) != -1)
      return ret; // Already in CP

    adjustSize();

    ConstantClass c = new ConstantClass(addUtf8(clazz));

    ret = index;
    constants[index++] = c;

    class_table.put(clazz, new Index(ret));

    return ret;
!!!3713307.java!!!	addClass(in str : String) : int
    return addClass_(str.replace('.', '/'));
!!!3713435.java!!!	addClass(inout type : ObjectType) : int
    return addClass(type.getClassName());
!!!3713563.java!!!	addArrayClass(inout type : ArrayType) : int
    return addClass_(type.getSignature());
!!!3713691.java!!!	lookupInteger(in n : int) : int
    for(int i=1; i < index; i++) {
      if(constants[i] instanceof ConstantInteger) {
	ConstantInteger c = (ConstantInteger)constants[i];

	if(c.getBytes() == n)
	  return i;
      }
    }

    return -1;
!!!3713819.java!!!	addInteger(in n : int) : int
    int  ret;

    if((ret = lookupInteger(n)) != -1)
      return ret; // Already in CP

    adjustSize();

    ret = index;
    constants[index++] = new ConstantInteger(n);

    return ret;
!!!3713947.java!!!	lookupFloat(in n : float) : int
    for(int i=1; i < index; i++) {
      if(constants[i] instanceof ConstantFloat) {
	ConstantFloat c = (ConstantFloat)constants[i];

	if(c.getBytes() == n)
	  return i;
      }
    }

    return -1;
!!!3714075.java!!!	addFloat(in n : float) : int
    int  ret;

    if((ret = lookupFloat(n)) != -1)
      return ret; // Already in CP

    adjustSize();

    ret = index;
    constants[index++] = new ConstantFloat(n);

    return ret;
!!!3714203.java!!!	lookupUtf8(in n : String) : int
    Index index = (Index)utf8_table.get(n);

    return (index != null)? index.index : -1;
!!!3714331.java!!!	addUtf8(in n : String) : int
    int  ret;

    if((ret = lookupUtf8(n)) != -1)
      return ret; // Already in CP

    adjustSize();

    ret = index;
    constants[index++] = new ConstantUtf8(n);

    utf8_table.put(n, new Index(ret));

    return ret;
!!!3714459.java!!!	lookupLong(in n : long) : int
    for(int i=1; i < index; i++) {
      if(constants[i] instanceof ConstantLong) {
	ConstantLong c = (ConstantLong)constants[i];

	if(c.getBytes() == n)
	  return i;
      }
    }

    return -1;
!!!3714587.java!!!	addLong(in n : long) : int
    int  ret;

    if((ret = lookupLong(n)) != -1)
      return ret; // Already in CP

    adjustSize();

    ret = index;
    constants[index] = new ConstantLong(n);
    index += 2;   // Wastes one entry according to spec

    return ret;
!!!3714715.java!!!	lookupDouble(in n : double) : int
    for(int i=1; i < index; i++) {
      if(constants[i] instanceof ConstantDouble) {
	ConstantDouble c = (ConstantDouble)constants[i];

	if(c.getBytes() == n)
	  return i;
      }
    }

    return -1;
!!!3714843.java!!!	addDouble(in n : double) : int
    int  ret;

    if((ret = lookupDouble(n)) != -1)
      return ret; // Already in CP

    adjustSize();

    ret = index;
    constants[index] = new ConstantDouble(n);
    index += 2;   // Wastes one entry according to spec

    return ret;
!!!3714971.java!!!	lookupNameAndType(in name : String, in signature : String) : int
    Index index = (Index)n_a_t_table.get(name + NAT_DELIM + signature);
    return (index != null)? index.index : -1;
!!!3715099.java!!!	addNameAndType(in name : String, in signature : String) : int
    int  ret;
    int  name_index, signature_index;

    if((ret = lookupNameAndType(name, signature)) != -1)
      return ret; // Already in CP

    adjustSize();

    name_index      = addUtf8(name);
    signature_index = addUtf8(signature);
    ret = index;
    constants[index++] = new ConstantNameAndType(name_index, signature_index);

    n_a_t_table.put(name + NAT_DELIM + signature, new Index(ret));
    return ret;
!!!3715227.java!!!	lookupMethodref(in class_name : String, in method_name : String, in signature : String) : int
    Index index = (Index)cp_table.get(class_name + METHODREF_DELIM + method_name +
				      METHODREF_DELIM + signature);
    return (index != null)? index.index : -1;
!!!3715355.java!!!	lookupMethodref(inout method : MethodGen) : int
    return lookupMethodref(method.getClassName(), method.getName(),
			  method.getSignature());
!!!3715483.java!!!	addMethodref(in class_name : String, in method_name : String, in signature : String) : int
    int  ret, class_index, name_and_type_index;

    if((ret = lookupMethodref(class_name, method_name, signature)) != -1)
      return ret; // Already in CP

    adjustSize();

    name_and_type_index = addNameAndType(method_name, signature);
    class_index         = addClass(class_name);
    ret = index;
    constants[index++] = new ConstantMethodref(class_index, name_and_type_index);

    cp_table.put(class_name + METHODREF_DELIM + method_name +
		 METHODREF_DELIM + signature, new Index(ret));

    return ret;
!!!3715611.java!!!	addMethodref(inout method : MethodGen) : int
    return addMethodref(method.getClassName(), method.getName(),
			method.getSignature());
!!!3715739.java!!!	lookupInterfaceMethodref(in class_name : String, in method_name : String, in signature : String) : int
    Index index = (Index)cp_table.get(class_name + IMETHODREF_DELIM + method_name +
				      IMETHODREF_DELIM + signature);
    return (index != null)? index.index : -1;
!!!3715867.java!!!	lookupInterfaceMethodref(inout method : MethodGen) : int
    return lookupInterfaceMethodref(method.getClassName(), method.getName(),
				    method.getSignature());
!!!3715995.java!!!	addInterfaceMethodref(in class_name : String, in method_name : String, in signature : String) : int
    int ret, class_index, name_and_type_index;

    if((ret = lookupInterfaceMethodref(class_name, method_name, signature)) != -1)
      return ret; // Already in CP

    adjustSize();

    class_index         = addClass(class_name);
    name_and_type_index = addNameAndType(method_name, signature);
    ret = index;
    constants[index++] = new ConstantInterfaceMethodref(class_index, name_and_type_index);

    cp_table.put(class_name + IMETHODREF_DELIM + method_name +
		 IMETHODREF_DELIM + signature, new Index(ret));

    return ret;
!!!3716123.java!!!	addInterfaceMethodref(inout method : MethodGen) : int
    return addInterfaceMethodref(method.getClassName(), method.getName(),
				 method.getSignature());
!!!3716251.java!!!	lookupFieldref(in class_name : String, in field_name : String, in signature : String) : int
    Index index = (Index)cp_table.get(class_name + FIELDREF_DELIM + field_name +
				      FIELDREF_DELIM + signature);
    return (index != null)? index.index : -1;
!!!3716379.java!!!	addFieldref(in class_name : String, in field_name : String, in signature : String) : int
    int  ret;
    int  class_index, name_and_type_index;

    if((ret = lookupFieldref(class_name, field_name, signature)) != -1)
      return ret; // Already in CP

    adjustSize();

    class_index         = addClass(class_name);
    name_and_type_index = addNameAndType(field_name, signature);
    ret = index;
    constants[index++] = new ConstantFieldref(class_index, name_and_type_index);

    cp_table.put(class_name + FIELDREF_DELIM + field_name + FIELDREF_DELIM + signature, new Index(ret));

    return ret;
!!!3716507.java!!!	getConstant(in i : int) : Constant
 return constants[i];
!!!3716635.java!!!	setConstant(in i : int, inout c : Constant) : void
 constants[i] = c;
!!!3716763.java!!!	getConstantPool() : ConstantPool
    return new ConstantPool(constants);
!!!3716891.java!!!	getSize() : int
    return index;
!!!3717019.java!!!	getFinalConstantPool() : ConstantPool
 
    Constant[] cs = new Constant[index];
    
    System.arraycopy(constants, 0, cs, 0, index);

    return new ConstantPool(cs); 
!!!3717147.java!!!	toString() : String
    StringBuffer buf = new StringBuffer();

    for(int i=1; i < index; i++)
      buf.append(i + ")" + constants[i] + "\n");

    return buf.toString();
!!!3717275.java!!!	addConstant(inout c : Constant, inout cp : ConstantPoolGen) : int
    Constant[] constants = cp.getConstantPool().getConstantPool();

    switch(c.getTag()) {
    case Constants.CONSTANT_String: {
      ConstantString s  = (ConstantString)c;
      ConstantUtf8   u8 = (ConstantUtf8)constants[s.getStringIndex()];

      return addString(u8.getBytes());
    }

    case Constants.CONSTANT_Class: {
      ConstantClass s  = (ConstantClass)c;
      ConstantUtf8  u8 = (ConstantUtf8)constants[s.getNameIndex()];

      return addClass(u8.getBytes());
    }

    case Constants.CONSTANT_NameAndType: {
      ConstantNameAndType n    = (ConstantNameAndType)c;
      ConstantUtf8        u8   = (ConstantUtf8)constants[n.getNameIndex()];
      ConstantUtf8        u8_2 = (ConstantUtf8)constants[n.getSignatureIndex()];

      return addNameAndType(u8.getBytes(), u8_2.getBytes());
    }

    case Constants.CONSTANT_Utf8:
      return addUtf8(((ConstantUtf8)c).getBytes());

    case Constants.CONSTANT_Double:
      return addDouble(((ConstantDouble)c).getBytes());

    case Constants.CONSTANT_Float:
      return addFloat(((ConstantFloat)c).getBytes());

    case Constants.CONSTANT_Long:
      return addLong(((ConstantLong)c).getBytes());

    case Constants.CONSTANT_Integer:
      return addInteger(((ConstantInteger)c).getBytes());

    case Constants.CONSTANT_InterfaceMethodref: case Constants.CONSTANT_Methodref:
    case Constants.CONSTANT_Fieldref: {
      ConstantCP          m     = (ConstantCP)c;
      ConstantClass       clazz = (ConstantClass)constants[m.getClassIndex()];
      ConstantNameAndType n     = (ConstantNameAndType)constants[m.getNameAndTypeIndex()];
      ConstantUtf8 u8           = (ConstantUtf8)constants[clazz.getNameIndex()];
      String       class_name   = u8.getBytes().replace('/', '.');

      u8 = (ConstantUtf8)constants[n.getNameIndex()];
      String name = u8.getBytes();

      u8 = (ConstantUtf8)constants[n.getSignatureIndex()];
      String signature = u8.getBytes();

      switch(c.getTag()) {
      case Constants.CONSTANT_InterfaceMethodref:
	return addInterfaceMethodref(class_name, name, signature);

      case Constants.CONSTANT_Methodref:
	return addMethodref(class_name, name, signature);

      case Constants.CONSTANT_Fieldref:
	return addFieldref(class_name, name, signature);

      default: // Never reached
	throw new RuntimeException("Unknown constant type " + c);
      }
    }

    default: // Never reached
      throw new RuntimeException("Unknown constant type " + c);
    }
