class SpinnerNumberModel
!!!9267611.java!!!	SpinnerNumberModel(inout value : Number, inout minimum : Comparable, inout maximum : Comparable, inout stepSize : Number)
	if ((value == null) || (stepSize == null)) {
	    throw new IllegalArgumentException("value and stepSize must be non-null");
	}
	if (!(((minimum == null) || (minimum.compareTo(value) <= 0)) && 
	      ((maximum == null) || (maximum.compareTo(value) >= 0)))) {
	    throw new IllegalArgumentException("(minimum <= value <= maximum) is false");
	}
	this.value = value;
	this.minimum = minimum;
	this.maximum = maximum;
	this.stepSize = stepSize;
!!!9267739.java!!!	SpinnerNumberModel(in value : int, in minimum : int, in maximum : int, in stepSize : int)
	this(new Integer(value), new Integer(minimum), new Integer(maximum), new Integer(stepSize));
!!!9267867.java!!!	SpinnerNumberModel(in value : double, in minimum : double, in maximum : double, in stepSize : double)
	this(new Double(value), new Double(minimum), new Double(maximum), new Double(stepSize));
!!!9267995.java!!!	SpinnerNumberModel()
	this(new Integer(0), null, null, new Integer(1));
!!!9268123.java!!!	setMinimum(inout minimum : Comparable) : void
	if ((minimum == null) ? (this.minimum != null) : !minimum.equals(this.minimum)) {
	    this.minimum = minimum;
	    fireStateChanged();
	}
!!!9268251.java!!!	getMinimum() : Comparable
	return minimum;
!!!9268379.java!!!	setMaximum(inout maximum : Comparable) : void
	if ((maximum == null) ? (this.maximum != null) : !maximum.equals(this.maximum)) {
	    this.maximum = maximum;
	    fireStateChanged();
	}
!!!9268507.java!!!	getMaximum() : Comparable
	return maximum;
!!!9268635.java!!!	setStepSize(inout stepSize : Number) : void
	if (stepSize == null) {
	    throw new IllegalArgumentException("null stepSize");
	}
	if (!stepSize.equals(this.stepSize)) {
	    this.stepSize = stepSize;
	    fireStateChanged();
	}
!!!9268763.java!!!	getStepSize() : Number
	return stepSize;
!!!9268891.java!!!	incrValue(in dir : int) : Number
	Number newValue;
	if ((value instanceof Float) || (value instanceof Double)) {
	    double v = value.doubleValue() + (stepSize.doubleValue() * (double)dir);
	    if (value instanceof Double) {
		newValue = new Double(v);
	    }
	    else {
		newValue = new Float(v);
	    }
	}
	else {
	    long v = value.longValue() + (stepSize.longValue() * (long)dir);

	    if (value instanceof Long) {
		newValue = new Long(v);
	    }
	    else if (value instanceof Integer) {
		newValue = new Integer((int)v);
	    }
	    else if (value instanceof Short) {
		newValue = new Short((short)v);
	    }
	    else {
		newValue = new Byte((byte)v);
	    }
	}

	if ((maximum != null) && (maximum.compareTo(newValue) < 0)) {
	    return null;
	}
	if ((minimum != null) && (minimum.compareTo(newValue) > 0)) {
	    return null;
	}
	else {
	    return newValue;
	}
!!!9269019.java!!!	getNextValue() : Object
	return incrValue(+1);
!!!9269147.java!!!	getPreviousValue() : Object
	return incrValue(-1);
!!!9269275.java!!!	getNumber() : Number
	return value;
!!!9269403.java!!!	getValue() : Object
	return value;
!!!9269531.java!!!	setValue(inout value : Object) : void
	if ((value == null) || !(value instanceof Number)) {
	    throw new IllegalArgumentException("illegal value");
	}
	if (!value.equals(this.value)) {
	    this.value = (Number)value;
	    fireStateChanged();
	}
