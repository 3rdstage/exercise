class VerticalPageAction
!!!8946203.java!!!	VerticalPageAction(in nm : String, in direction : int, inout select : boolean)
	    super(nm);
	    this.select = select;
            this.direction = direction;
!!!8946331.java!!!	actionPerformed(inout e : ActionEvent) : void
	    JTextComponent target = getTextComponent(e);
	    if (target != null) {
		Rectangle visible = target.getVisibleRect();
                Rectangle newVis = new Rectangle(visible);
                int selectedIndex = target.getCaretPosition();
                int scrollAmount = target.getScrollableBlockIncrement(
                                  visible, SwingConstants.VERTICAL, direction); 
                int initialY = visible.y;
                Caret caret = target.getCaret();
                Point magicPosition = caret.getMagicCaretPosition();
                int yOffset;   

                if (selectedIndex != -1) {
                    try {
                        Rectangle dotBounds = target.modelToView(
                                                     selectedIndex);
                        int x = (magicPosition != null) ? magicPosition.x :
                                                          dotBounds.x;
                        // fix for 4697612 
                        int h = dotBounds.height;
                        yOffset = direction *
                                  (int)Math.ceil(scrollAmount / (double)h) * h; 
                        newVis.y = constrainY(target, initialY + yOffset, yOffset);                        

                        int newIndex;

                        if (visible.contains(dotBounds.x, dotBounds.y)) {
                            // Dot is currently visible, base the new
                            // location off the old, or
                            newIndex = target.viewToModel(
                                new Point(x, constrainY(target,
                                          dotBounds.y + yOffset, 0)));
                        }
                        else {
                            // Dot isn't visible, choose the top or the bottom
                            // for the new location.
                            if (direction == -1) {
                                newIndex = target.viewToModel(new Point(
                                    x, newVis.y));
                            }
                            else {
                                newIndex = target.viewToModel(new Point(
                                    x, newVis.y + visible.height));
                            }
                        }
                        newIndex = constrainOffset(target, newIndex);
                        if (newIndex != selectedIndex) {
                            // Make sure the new visible location contains
                            // the location of dot, otherwise Caret will
                            // cause an additional scroll.
                            adjustScrollIfNecessary(target, newVis, initialY,
                                                    newIndex);
                            if (select) {
                                target.moveCaretPosition(newIndex);
                            }
                            else {
                                target.setCaretPosition(newIndex);
                            }
                        }
                    } catch (BadLocationException ble) { }
                } else {
                    yOffset = direction * scrollAmount;
                    newVis.y = constrainY(target, initialY + yOffset, yOffset);
                }
                if (magicPosition != null) {
                    caret.setMagicCaretPosition(magicPosition);
                }
		target.scrollRectToVisible(newVis);
	    }
!!!8946459.java!!!	constrainY(inout target : JTextComponent, in y : int, in vis : int) : int
            if (y < 0) {
                y = 0;
            }
            else if (y + vis > target.getHeight()) {
                y = Math.max(0, target.getHeight() - vis);
            }
            return y;
!!!8946587.java!!!	constrainOffset(inout text : JTextComponent, in offset : int) : int
            Document doc = text.getDocument();

            if ((offset != 0) && (offset > doc.getLength())) {
                offset = doc.getLength();
            }
            if (offset  < 0) {
                offset = 0;
            }
            return offset;
!!!8946715.java!!!	adjustScrollIfNecessary(inout text : JTextComponent, inout visible : Rectangle, in initialY : int, in index : int) : void
            try {
                Rectangle dotBounds = text.modelToView(index);

                if (dotBounds.y < visible.y ||
                       (dotBounds.y > (visible.y + visible.height)) ||
                       (dotBounds.y + dotBounds.height) >
                       (visible.y + visible.height)) {
                    int y;

                    if (dotBounds.y < visible.y) {
                        y = dotBounds.y;
                    }
                    else {
                        y = dotBounds.y + dotBounds.height - visible.height;
                    }
                    if ((direction == -1 && y < initialY) ||
                                        (direction == 1 && y > initialY)) {
                        // Only adjust if won't cause scrolling upward.
                        visible.y = y;
                    }
                }
            } catch (BadLocationException ble) {}
