class CoreDOMImplementationImpl
!!!4080155.java!!!	getDOMImplementation() : DOMImplementation
		return singleton;
!!!4080283.java!!!	hasFeature(in feature : String, in version : String) : boolean

        boolean anyVersion = version == null || version.length() == 0;
		if (feature.startsWith("+")) {
			feature = feature.substring(1);
		}
        // check if Xalan implementation is around and if yes report true for supporting
        // XPath API
        if ((feature.equalsIgnoreCase("XPath")
            || feature.equalsIgnoreCase("+XPath"))
            && (anyVersion || version.equals("3.0"))) {
            try {
                Class xpathClass =
                    ObjectFactory.findProviderClass(
                        "com.sun.org.apache.xpath.internal.domapi.XPathEvaluatorImpl",
                        ObjectFactory.findClassLoader(),
                        true);
            } catch (Exception e) {
                return false;
            }
            return true;
        }
        return (
            feature.equalsIgnoreCase("Core")
                && (anyVersion
                    || version.equals("1.0")
                    || version.equals("2.0")
                    || version.equals("3.0")))
            || (feature.equalsIgnoreCase("XML")
                && (anyVersion
                    || version.equals("1.0")
                    || version.equals("2.0")
                    || version.equals("3.0")))
            || (feature.equalsIgnoreCase("LS")
                && (anyVersion || version.equals("3.0")));
!!!4080411.java!!!	createDocumentType(in qualifiedName : String, in publicID : String, in systemID : String) : DocumentType
		// REVISIT: this might allow creation of invalid name for DOCTYPE
		//          xmlns prefix.
		//          also there is no way for a user to turn off error checking.
		checkQName(qualifiedName);
		return new DocumentTypeImpl(null, qualifiedName, publicID, systemID);
!!!4080539.java!!!	checkQName(in qname : String) : void
        int index = qname.indexOf(':');
        int lastIndex = qname.lastIndexOf(':');
        int length = qname.length();

        // it is an error for NCName to have more than one ':'
        // check if it is valid QName [Namespace in XML production 6]
        if (index == 0 || index == length - 1 || lastIndex != index) {
            String msg =
                DOMMessageFormatter.formatMessage(
                    DOMMessageFormatter.DOM_DOMAIN,
                    "NAMESPACE_ERR",
                    null);
            throw new DOMException(DOMException.NAMESPACE_ERR, msg);
        }
        int start = 0;
        // Namespace in XML production [6]
        if (index > 0) {
            // check that prefix is NCName
            if (!XMLChar.isNCNameStart(qname.charAt(start))) {
                String msg =
                    DOMMessageFormatter.formatMessage(
                        DOMMessageFormatter.DOM_DOMAIN,
                        "INVALID_CHARACTER_ERR",
                        null);
                throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
            }
            for (int i = 1; i < index; i++) {
                if (!XMLChar.isNCName(qname.charAt(i))) {
                    String msg =
                        DOMMessageFormatter.formatMessage(
                            DOMMessageFormatter.DOM_DOMAIN,
                            "INVALID_CHARACTER_ERR",
                            null);
                    throw new DOMException(
                        DOMException.INVALID_CHARACTER_ERR,
                        msg);
                }
            }
            start = index + 1;
        }

        // check local part
        if (!XMLChar.isNCNameStart(qname.charAt(start))) {
            // REVISIT: add qname parameter to the message
            String msg =
                DOMMessageFormatter.formatMessage(
                    DOMMessageFormatter.DOM_DOMAIN,
                    "INVALID_CHARACTER_ERR",
                    null);
            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
        }
        for (int i = start + 1; i < length; i++) {
            if (!XMLChar.isNCName(qname.charAt(i))) {
                String msg =
                    DOMMessageFormatter.formatMessage(
                        DOMMessageFormatter.DOM_DOMAIN,
                        "INVALID_CHARACTER_ERR",
                        null);
                throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
            }
        }
!!!4080667.java!!!	createDocument(in namespaceURI : String, in qualifiedName : String, inout doctype : DocumentType) : Document
		if (doctype != null && doctype.getOwnerDocument() != null) {
			String msg =
				DOMMessageFormatter.formatMessage(
					DOMMessageFormatter.DOM_DOMAIN,
					"WRONG_DOCUMENT_ERR",
					null);
			throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
		}
		CoreDocumentImpl doc = new CoreDocumentImpl(doctype);
		Element e = doc.createElementNS(namespaceURI, qualifiedName);
		doc.appendChild(e);
		return doc;
!!!4080795.java!!!	getFeature(in feature : String, in version : String) : Object
		if (singleton.hasFeature(feature, version)){
			return singleton;
		}
		return null;

!!!4080923.java!!!	createLSParser(in mode : short, in schemaType : String) : LSParser
		if (mode != DOMImplementationLS.MODE_SYNCHRONOUS || (schemaType !=null &&
		   !"http://www.w3.org/2001/XMLSchema".equals(schemaType) &&
			!"http://www.w3.org/TR/REC-xml".equals(schemaType))) {
			String msg =
				DOMMessageFormatter.formatMessage(
					DOMMessageFormatter.DOM_DOMAIN,
					"NOT_SUPPORTED_ERR",
					null);
			throw new DOMException(DOMException.NOT_SUPPORTED_ERR, msg);
		}
		if (schemaType != null
			&& schemaType.equals("http://www.w3.org/TR/REC-xml")) {
			return new DOMParserImpl(
				"com.sun.org.apache.xerces.internal.parsers.XML11Configuration",
				schemaType);
		}
		else {
			// create default parser configuration validating against XMLSchemas
			return new DOMParserImpl(
				"com.sun.org.apache.xerces.internal.parsers.XML11Configuration",
				schemaType);
		}
!!!4081051.java!!!	createLSSerializer() : LSSerializer
		return new DOMSerializerImpl();
!!!4081179.java!!!	createLSInput() : LSInput
		return new DOMInputImpl();
!!!4081307.java!!!	getDTDValidator() : Object
	 return ObjectFactory.newInstance( "com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDValidator", ObjectFactory.findClassLoader(), true); 
!!!4081435.java!!!	getValidator(in schemaType : String) : RevalidationHandler
		// REVISIT: implement retrieving DTD validator
        if (freeValidatorIndex < 0) {
            // create new validator - we should not attempt
            // to restrict the number of validation handlers being
            // requested
            return (RevalidationHandler) (ObjectFactory .newInstance( "com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator", ObjectFactory.findClassLoader(), true));

        }
        // return first available validator
        RevalidationHandler val = validators[freeValidatorIndex];
        validators[freeValidatorIndex--] = null;
        return val;
!!!4081563.java!!!	releaseValidator(in schemaType : String, inout validator : RevalidationHandler) : void
       // REVISIT: implement support for DTD validators as well
       ++freeValidatorIndex;
       if (validators.length == freeValidatorIndex ){
            // resize size of the validators
            currentSize+=SIZE;
            RevalidationHandler newarray[] =  new RevalidationHandler[currentSize];
            System.arraycopy(validators, 0, newarray, 0, validators.length);
            validators = newarray;
       }
       validators[freeValidatorIndex]=validator;
!!!4081691.java!!!	assignDocumentNumber() : int
            return ++docAndDoctypeCounter;
!!!4081819.java!!!	assignDocTypeNumber() : int
            return ++docAndDoctypeCounter;
!!!4081947.java!!!	createLSOutput() : LSOutput
           return new DOMOutputImpl();
