class CubicCurve2D
!!!6535835.java!!!	setCurve(in coords : double, in offset : int) : void
	setCurve(coords[offset + 0], coords[offset + 1],
		 coords[offset + 2], coords[offset + 3],
		 coords[offset + 4], coords[offset + 5],
		 coords[offset + 6], coords[offset + 7]);
!!!6535963.java!!!	setCurve(inout p1 : Point2D, inout cp1 : Point2D, inout cp2 : Point2D, inout p2 : Point2D) : void
	setCurve(p1.getX(), p1.getY(), cp1.getX(), cp1.getY(),
		 cp2.getX(), cp2.getY(), p2.getX(), p2.getY());
!!!6536091.java!!!	setCurve(inout pts : Point2D, in offset : int) : void
	setCurve(pts[offset + 0].getX(), pts[offset + 0].getY(),
		 pts[offset + 1].getX(), pts[offset + 1].getY(),
		 pts[offset + 2].getX(), pts[offset + 2].getY(),
		 pts[offset + 3].getX(), pts[offset + 3].getY());
!!!6536219.java!!!	setCurve(inout c : CubicCurve2D) : void
	setCurve(c.getX1(), c.getY1(), c.getCtrlX1(), c.getCtrlY1(),
		 c.getCtrlX2(), c.getCtrlY2(), c.getX2(), c.getY2());
!!!6536347.java!!!	getFlatnessSq(in x1 : double, in y1 : double, in ctrlx1 : double, in ctrly1 : double, in ctrlx2 : double, in ctrly2 : double, in x2 : double, in y2 : double) : double
	return Math.max(Line2D.ptSegDistSq(x1, y1, x2, y2, ctrlx1, ctrly1),
			Line2D.ptSegDistSq(x1, y1, x2, y2, ctrlx2, ctrly2));
			
!!!6536475.java!!!	getFlatness(in x1 : double, in y1 : double, in ctrlx1 : double, in ctrly1 : double, in ctrlx2 : double, in ctrly2 : double, in x2 : double, in y2 : double) : double
	return Math.sqrt(getFlatnessSq(x1, y1, ctrlx1, ctrly1,
				       ctrlx2, ctrly2, x2, y2));
!!!6536603.java!!!	getFlatnessSq(in coords : double, in offset : int) : double
	return getFlatnessSq(coords[offset + 0], coords[offset + 1],
			     coords[offset + 2], coords[offset + 3],
			     coords[offset + 4], coords[offset + 5],
			     coords[offset + 6], coords[offset + 7]);
!!!6536731.java!!!	getFlatness(in coords : double, in offset : int) : double
	return getFlatness(coords[offset + 0], coords[offset + 1],
			   coords[offset + 2], coords[offset + 3],
			   coords[offset + 4], coords[offset + 5],
			   coords[offset + 6], coords[offset + 7]);
!!!6536859.java!!!	getFlatnessSq() : double
	return getFlatnessSq(getX1(), getY1(), getCtrlX1(), getCtrlY1(),
			     getCtrlX2(), getCtrlY2(), getX2(), getY2());
!!!6536987.java!!!	getFlatness() : double
	return getFlatness(getX1(), getY1(), getCtrlX1(), getCtrlY1(),
			   getCtrlX2(), getCtrlY2(), getX2(), getY2());
!!!6537115.java!!!	subdivide(inout left : CubicCurve2D, inout right : CubicCurve2D) : void
	subdivide(this, left, right);
!!!6537243.java!!!	subdivide(inout src : CubicCurve2D, inout left : CubicCurve2D, inout right : CubicCurve2D) : void
	double x1 = src.getX1();
	double y1 = src.getY1();
	double ctrlx1 = src.getCtrlX1();
	double ctrly1 = src.getCtrlY1();
	double ctrlx2 = src.getCtrlX2();
	double ctrly2 = src.getCtrlY2();
	double x2 = src.getX2();
	double y2 = src.getY2();
	double centerx = (ctrlx1 + ctrlx2) / 2.0;
	double centery = (ctrly1 + ctrly2) / 2.0;
	ctrlx1 = (x1 + ctrlx1) / 2.0;
	ctrly1 = (y1 + ctrly1) / 2.0;
	ctrlx2 = (x2 + ctrlx2) / 2.0;
	ctrly2 = (y2 + ctrly2) / 2.0;
	double ctrlx12 = (ctrlx1 + centerx) / 2.0;
	double ctrly12 = (ctrly1 + centery) / 2.0;
	double ctrlx21 = (ctrlx2 + centerx) / 2.0;
	double ctrly21 = (ctrly2 + centery) / 2.0;
	centerx = (ctrlx12 + ctrlx21) / 2.0;
	centery = (ctrly12 + ctrly21) / 2.0;
	if (left != null) {
	    left.setCurve(x1, y1, ctrlx1, ctrly1,
			  ctrlx12, ctrly12, centerx, centery);
	}
	if (right != null) {
	    right.setCurve(centerx, centery, ctrlx21, ctrly21,
			   ctrlx2, ctrly2, x2, y2);
	}
!!!6537371.java!!!	subdivide(in src : double, in srcoff : int, in left : double, in leftoff : int, in right : double, in rightoff : int) : void
	double x1 = src[srcoff + 0];
	double y1 = src[srcoff + 1];
	double ctrlx1 = src[srcoff + 2];
	double ctrly1 = src[srcoff + 3];
	double ctrlx2 = src[srcoff + 4];
	double ctrly2 = src[srcoff + 5];
	double x2 = src[srcoff + 6];
	double y2 = src[srcoff + 7];
	if (left != null) {
	    left[leftoff + 0] = x1;
	    left[leftoff + 1] = y1;
	}
	if (right != null) {
	    right[rightoff + 6] = x2;
	    right[rightoff + 7] = y2;
	}
	x1 = (x1 + ctrlx1) / 2.0;
	y1 = (y1 + ctrly1) / 2.0;
	x2 = (x2 + ctrlx2) / 2.0;
	y2 = (y2 + ctrly2) / 2.0;
	double centerx = (ctrlx1 + ctrlx2) / 2.0;
	double centery = (ctrly1 + ctrly2) / 2.0;
	ctrlx1 = (x1 + centerx) / 2.0;
	ctrly1 = (y1 + centery) / 2.0;
	ctrlx2 = (x2 + centerx) / 2.0;
	ctrly2 = (y2 + centery) / 2.0;
	centerx = (ctrlx1 + ctrlx2) / 2.0;
	centery = (ctrly1 + ctrly2) / 2.0;
	if (left != null) {
	    left[leftoff + 2] = x1;
	    left[leftoff + 3] = y1;
	    left[leftoff + 4] = ctrlx1;
	    left[leftoff + 5] = ctrly1;
	    left[leftoff + 6] = centerx;
	    left[leftoff + 7] = centery;
	}
	if (right != null) {
	    right[rightoff + 0] = centerx;
	    right[rightoff + 1] = centery;
	    right[rightoff + 2] = ctrlx2;
	    right[rightoff + 3] = ctrly2;
	    right[rightoff + 4] = x2;
	    right[rightoff + 5] = y2;
	}
!!!6537499.java!!!	solveCubic(in eqn : double) : int
	return solveCubic(eqn, eqn);
!!!6537627.java!!!	solveCubic(in eqn : double, in res : double) : int
	// From Numerical Recipes, 5.6, Quadratic and Cubic Equations
	double d = eqn[3];
	if (d == 0.0) {
	    // The cubic has degenerated to quadratic (or line or ...).
	    return QuadCurve2D.solveQuadratic(eqn, res);
	}
	double a = eqn[2] / d;
	double b = eqn[1] / d;
	double c = eqn[0] / d;
	int roots = 0;
	double Q = (a * a - 3.0 * b) / 9.0;
	double R = (2.0 * a * a * a - 9.0 * a * b + 27.0 * c) / 54.0;
	double R2 = R * R;
	double Q3 = Q * Q * Q;
	a = a / 3.0;
	if (R2 < Q3) {
	    double theta = Math.acos(R / Math.sqrt(Q3));
	    Q = -2.0 * Math.sqrt(Q);
	    if (res == eqn) {
		// Copy the eqn so that we don't clobber it with the
		// roots.  This is needed so that fixRoots can do its
		// work with the original equation.
		eqn = new double[4];
		System.arraycopy(res, 0, eqn, 0, 4);
	    }
	    res[roots++] = Q * Math.cos(theta / 3.0) - a;
	    res[roots++] = Q * Math.cos((theta + Math.PI * 2.0)/ 3.0) - a;
	    res[roots++] = Q * Math.cos((theta - Math.PI * 2.0)/ 3.0) - a;
	    fixRoots(res, eqn);
	} else {
	    boolean neg = (R < 0.0);
	    double S = Math.sqrt(R2 - Q3);
	    if (neg) {
		R = -R;
	    }
	    double A = Math.pow(R + S, 1.0 / 3.0);
	    if (!neg) {
		A = -A;
	    }
	    double B = (A == 0.0) ? 0.0 : (Q / A);
	    res[roots++] = (A + B) - a;
	}
	return roots;
!!!6537755.java!!!	fixRoots(in res : double, in eqn : double) : void
	final double EPSILON = 1E-5;
	for (int i = 0; i < 3; i++) {
	    double t = res[i];
	    if (Math.abs(t) < EPSILON) {
		res[i] = findZero(t, 0, eqn);
	    } else if (Math.abs(t - 1) < EPSILON) {
		res[i] = findZero(t, 1, eqn);
	    }
	}
!!!6537883.java!!!	solveEqn(in eqn : double, in order : int, in t : double) : double
	double v = eqn[order];
	while (--order >= 0) {
	    v = v * t + eqn[order];
	}
	return v;
!!!6538011.java!!!	findZero(in t : double, in target : double, in eqn : double) : double
	double slopeqn[] = {eqn[1], 2*eqn[2], 3*eqn[3]};
	double slope;
	double origdelta = 0;
	double origt = t;
	while (true) {
	    slope = solveEqn(slopeqn, 2, t);
	    if (slope == 0) {
		// At a local minima - must return
		return t;
	    }
	    double y = solveEqn(eqn, 3, t);
	    if (y == 0) {
		// Found it! - return it
		return t;
	    }
	    // assert(slope != 0 && y != 0);
	    double delta = - (y / slope);
	    // assert(delta != 0);
	    if (origdelta == 0) {
		origdelta = delta;
	    }
	    if (t < target) {
		if (delta < 0) return t;
	    } else if (t > target) {
		if (delta > 0) return t;
	    } else { /* t == target */
		return (delta > 0
			? (target + java.lang.Double.MIN_VALUE)
			: (target - java.lang.Double.MIN_VALUE));
	    }
	    double newt = t + delta;
	    if (t == newt) {
		// The deltas are so small that we aren't moving...
		return t;
	    }
	    if (delta * origdelta < 0) {
		// We have reversed our path.
		int tag = (origt < t
			   ? getTag(target, origt, t)
			   : getTag(target, t, origt));
		if (tag != INSIDE) {
		    // Local minima found away from target - return the middle
		    return (origt + t) / 2;
		}
		// Local minima somewhere near target - move to target
		// and let the slope determine the resulting t.
		t = target;
	    } else {
		t = newt;
	    }
	}
!!!6538139.java!!!	contains(in x : double, in y : double) : boolean
	// We count the "Y" crossings to determine if the point is
	// inside the curve bounded by its closing line.
	int crossings = 0;
	double x1 = getX1();
	double y1 = getY1();
	double x2 = getX2();
	double y2 = getY2();
	// First check for a crossing of the line connecting the endpoints
	double dy = y2 - y1;
	if ((dy > 0.0 && y >= y1 && y <= y2) ||
	    (dy < 0.0 && y <= y1 && y >= y2))
	{
	    if (x < x1 + (y - y1) * (x2 - x1) / dy) {
		crossings++;
	    }
	}
	// Solve the Y parametric equation for intersections with y
	double ctrlx1 = getCtrlX1();
	double ctrly1 = getCtrlY1();
	double ctrlx2 = getCtrlX2();
	double ctrly2 = getCtrlY2();
	boolean include0 = ((y2 - y1) * (ctrly1 - y1) >= 0);
	boolean include1 = ((y1 - y2) * (ctrly2 - y2) >= 0);
	double eqn[] = new double[4];
	double res[] = new double[4];
	fillEqn(eqn, y, y1, ctrly1, ctrly2, y2);
	int roots = solveCubic(eqn, res);
	roots = evalCubic(res, roots,
			  include0, include1, eqn,
			  x1, ctrlx1, ctrlx2, x2);
	while (--roots >= 0) {
	    if (x < res[roots]) {
		crossings++;
	    }
	}
	return ((crossings & 1) == 1);
!!!6538267.java!!!	contains(inout p : Point2D) : boolean
	return contains(p.getX(), p.getY());
!!!6538395.java!!!	fillEqn(in eqn : double, in val : double, in c1 : double, in cp1 : double, in cp2 : double, in c2 : double) : void
	eqn[0] = c1 - val;
	eqn[1] = (cp1 - c1) * 3.0;
	eqn[2] = (cp2 - cp1 - cp1 + c1) * 3.0;
	eqn[3] = c2 + (cp1 - cp2) * 3.0 - c1;
	return;
!!!6538523.java!!!	evalCubic(in vals : double, in num : int, inout include0 : boolean, inout include1 : boolean, in inflect : double, in c1 : double, in cp1 : double, in cp2 : double, in c2 : double) : int
	int j = 0;
	for (int i = 0; i < num; i++) {
	    double t = vals[i];
	    if ((include0 ? t >= 0 : t > 0) &&
		(include1 ? t <= 1 : t < 1) &&
		(inflect == null ||
		 inflect[1] + (2*inflect[2] + 3*inflect[3]*t)*t != 0))
	    {
		double u = 1 - t;
		vals[j++] = c1*u*u*u + 3*cp1*t*u*u + 3*cp2*t*t*u + c2*t*t*t;
	    }
	}
	return j;
!!!6538651.java!!!	getTag(in coord : double, in low : double, in high : double) : int
	if (coord <= low) {
	    return (coord < low ? BELOW : LOWEDGE);
	}
	if (coord >= high) {
	    return (coord > high ? ABOVE : HIGHEDGE);
	}
	return INSIDE;
!!!6538779.java!!!	inwards(in pttag : int, in opt1tag : int, in opt2tag : int) : boolean
	switch (pttag) {
	case BELOW:
	case ABOVE:
	default:
	    return false;
	case LOWEDGE:
	    return (opt1tag >= INSIDE || opt2tag >= INSIDE);
	case INSIDE:
	    return true;
	case HIGHEDGE:
	    return (opt1tag <= INSIDE || opt2tag <= INSIDE);
	}
!!!6538907.java!!!	intersects(in x : double, in y : double, in w : double, in h : double) : boolean
	// Trivially reject non-existant rectangles
	if (w < 0 || h < 0) {
	    return false;
	}

	// Trivially accept if either endpoint is inside the rectangle
	// (not on its border since it may end there and not go inside)
	// Record where they lie with respect to the rectangle.
	//     -1 => left, 0 => inside, 1 => right
	double x1 = getX1();
	double y1 = getY1();
	int x1tag = getTag(x1, x, x+w);
	int y1tag = getTag(y1, y, y+h);
	if (x1tag == INSIDE && y1tag == INSIDE) {
	    return true;
	}
	double x2 = getX2();
	double y2 = getY2();
	int x2tag = getTag(x2, x, x+w);
	int y2tag = getTag(y2, y, y+h);
	if (x2tag == INSIDE && y2tag == INSIDE) {
	    return true;
	}

	double ctrlx1 = getCtrlX1();
	double ctrly1 = getCtrlY1();
	double ctrlx2 = getCtrlX2();
	double ctrly2 = getCtrlY2();
	int ctrlx1tag = getTag(ctrlx1, x, x+w);
	int ctrly1tag = getTag(ctrly1, y, y+h);
	int ctrlx2tag = getTag(ctrlx2, x, x+w);
	int ctrly2tag = getTag(ctrly2, y, y+h);

	// Trivially reject if all points are entirely to one side of
	// the rectangle.
	if (x1tag < INSIDE && x2tag < INSIDE &&
	    ctrlx1tag < INSIDE && ctrlx2tag < INSIDE)
	{
	    return false;	// All points left
	}
	if (y1tag < INSIDE && y2tag < INSIDE &&
	    ctrly1tag < INSIDE && ctrly2tag < INSIDE)
	{
	    return false;	// All points above
	}
	if (x1tag > INSIDE && x2tag > INSIDE &&
	    ctrlx1tag > INSIDE && ctrlx2tag > INSIDE)
	{
	    return false;	// All points right
	}
	if (y1tag > INSIDE && y2tag > INSIDE &&
	    ctrly1tag > INSIDE && ctrly2tag > INSIDE)
	{
	    return false;	// All points below
	}

	// Test for endpoints on the edge where either the segment
	// or the curve is headed "inwards" from them
	// Note: These tests are a superset of the fast endpoint tests
	//       above and thus repeat those tests, but take more time
	//       and cover more cases
	if (inwards(x1tag, x2tag, ctrlx1tag) &&
	    inwards(y1tag, y2tag, ctrly1tag))
	{
	    // First endpoint on border with either edge moving inside
	    return true;
	}
	if (inwards(x2tag, x1tag, ctrlx2tag) &&
	    inwards(y2tag, y1tag, ctrly2tag))
	{
	    // Second endpoint on border with either edge moving inside
	    return true;
	}

	// Trivially accept if endpoints span directly across the rectangle
	boolean xoverlap = (x1tag * x2tag <= 0);
	boolean yoverlap = (y1tag * y2tag <= 0);
	if (x1tag == INSIDE && x2tag == INSIDE && yoverlap) {
	    return true;
	}
	if (y1tag == INSIDE && y2tag == INSIDE && xoverlap) {
	    return true;
	}

	// We now know that both endpoints are outside the rectangle
	// but the 4 points are not all on one side of the rectangle.
	// Therefore the curve cannot be contained inside the rectangle,
	// but the rectangle might be contained inside the curve, or
	// the curve might intersect the boundary of the rectangle.

	double[] eqn = new double[4];
	double[] res = new double[4];
	if (!yoverlap) {
	    // Both y coordinates for the closing segment are above or
	    // below the rectangle which means that we can only intersect
	    // if the curve crosses the top (or bottom) of the rectangle
	    // in more than one place and if those crossing locations
	    // span the horizontal range of the rectangle.
	    fillEqn(eqn, (y1tag < INSIDE ? y : y+h), y1, ctrly1, ctrly2, y2);
	    int num = solveCubic(eqn, res);
	    num = evalCubic(res, num, true, true, null,
			    x1, ctrlx1, ctrlx2, x2);
	    // odd counts imply the crossing was out of [0,1] bounds
	    // otherwise there is no way for that part of the curve to
	    // "return" to meet its endpoint
	    return (num == 2 &&
		    getTag(res[0], x, x+w) * getTag(res[1], x, x+w) <= 0);
	}

	// Y ranges overlap.  Now we examine the X ranges
	if (!xoverlap) {
	    // Both x coordinates for the closing segment are left of
	    // or right of the rectangle which means that we can only
	    // intersect if the curve crosses the left (or right) edge
	    // of the rectangle in more than one place and if those
	    // crossing locations span the vertical range of the rectangle.
	    fillEqn(eqn, (x1tag < INSIDE ? x : x+w), x1, ctrlx1, ctrlx2, x2);
	    int num = solveCubic(eqn, res);
	    num = evalCubic(res, num, true, true, null,
			    y1, ctrly1, ctrly2, y2);
	    // odd counts imply the crossing was out of [0,1] bounds
	    // otherwise there is no way for that part of the curve to
	    // "return" to meet its endpoint
	    return (num == 2 &&
		    getTag(res[0], y, y+h) * getTag(res[1], y, y+h) <= 0);
	}

	// The X and Y ranges of the endpoints overlap the X and Y
	// ranges of the rectangle, now find out how the endpoint
	// line segment intersects the Y range of the rectangle
	double dx = x2 - x1;
	double dy = y2 - y1;
	double k = y2 * x1 - x2 * y1;
	int c1tag, c2tag;
	if (y1tag == INSIDE) {
	    c1tag = x1tag;
	} else {
	    c1tag = getTag((k + dx * (y1tag < INSIDE ? y : y+h)) / dy, x, x+w);
	}
	if (y2tag == INSIDE) {
	    c2tag = x2tag;
	} else {
	    c2tag = getTag((k + dx * (y2tag < INSIDE ? y : y+h)) / dy, x, x+w);
	}
	// If the part of the line segment that intersects the Y range
	// of the rectangle crosses it horizontally - trivially accept
	if (c1tag * c2tag <= 0) {
	    return true;
	}

	// Now we know that both the X and Y ranges intersect and that
	// the endpoint line segment does not directly cross the rectangle.
	//
	// We can almost treat this case like one of the cases above
	// where both endpoints are to one side, except that we may
	// get one or three intersections of the curve with the vertical
	// side of the rectangle.  This is because the endpoint segment
	// accounts for the other intersection in an even pairing.  Thus,
	// with the endpoint crossing we end up with 2 or 4 total crossings.
	//
	// (Remember there is overlap in both the X and Y ranges which
	//  means that the segment itself must cross at least one vertical
	//  edge of the rectangle - in particular, the "near vertical side"
	//  - leaving an odd number of intersections for the curve.)
	//
	// Now we calculate the y tags of all the intersections on the
	// "near vertical side" of the rectangle.  We will have one with
	// the endpoint segment, and one or three with the curve.  If
	// any pair of those vertical intersections overlap the Y range
	// of the rectangle, we have an intersection.  Otherwise, we don't.

	// c1tag = vertical intersection class of the endpoint segment
	//
	// Choose the y tag of the endpoint that was not on the same
	// side of the rectangle as the subsegment calculated above.
	// Note that we can "steal" the existing Y tag of that endpoint
	// since it will be provably the same as the vertical intersection.
	c1tag = ((c1tag * x1tag <= 0) ? y1tag : y2tag);

	// Now we have to calculate an array of solutions of the curve
	// with the "near vertical side" of the rectangle.  Then we
	// need to sort the tags and do a pairwise range test to see
	// if either of the pairs of crossings spans the Y range of
	// the rectangle.
	//
	// Note that the c2tag can still tell us which vertical edge
	// to test against.
	fillEqn(eqn, (c2tag < INSIDE ? x : x+w), x1, ctrlx1, ctrlx2, x2);
	int num = solveCubic(eqn, res);
	num = evalCubic(res, num, true, true, null, y1, ctrly1, ctrly2, y2);

	// Now put all of the tags into a bucket and sort them.  There
	// is an intersection iff one of the pairs of tags "spans" the
	// Y range of the rectangle.
	int tags[] = new int[num+1];
	for (int i = 0; i < num; i++) {
	    tags[i] = getTag(res[i], y, y+h);
	}
	tags[num] = c1tag;
	Arrays.sort(tags);
	return ((num >= 1 && tags[0] * tags[1] <= 0) ||
		(num >= 3 && tags[2] * tags[3] <= 0));
!!!6539035.java!!!	intersects(inout r : Rectangle2D) : boolean
	return intersects(r.getX(), r.getY(), r.getWidth(), r.getHeight());
!!!6539163.java!!!	contains(in x : double, in y : double, in w : double, in h : double) : boolean
	// Assertion: Cubic curves closed by connecting their
	// endpoints form either one or two convex halves with
	// the closing line segment as an edge of both sides.
	if (!(contains(x, y) &&
	      contains(x + w, y) &&
	      contains(x + w, y + h) &&
	      contains(x, y + h))) {
	    return false;
	}
	// Either the rectangle is entirely inside one of the convex
	// halves or it crosses from one to the other, in which case
	// it must intersect the closing line segment.
	Rectangle2D rect = new Rectangle2D.Double(x, y, w, h);
	return !rect.intersectsLine(getX1(), getY1(), getX2(), getY2());
!!!6539291.java!!!	contains(inout r : Rectangle2D) : boolean
	return contains(r.getX(), r.getY(), r.getWidth(), r.getHeight());
!!!6539419.java!!!	getBounds() : Rectangle
	return getBounds2D().getBounds();
!!!6539547.java!!!	getPathIterator(inout at : AffineTransform) : PathIterator
	return new CubicIterator(this, at);
!!!6539675.java!!!	getPathIterator(inout at : AffineTransform, in flatness : double) : PathIterator
	return new FlatteningPathIterator(getPathIterator(at), flatness);
!!!6539803.java!!!	clone() : Object
	try {
	    return super.clone();
	} catch (CloneNotSupportedException e) {
	    // this shouldn't happen, since we are Cloneable
	    throw new InternalError();
	}
