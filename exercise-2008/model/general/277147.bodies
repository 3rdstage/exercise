class ObjectStreamField
!!!1463067.java!!!	ObjectStreamField(in n : String, inout clazz : Class)
    	name = n;
    	this.clazz = clazz;

	// Compute the typecode for easy switching
	if (clazz.isPrimitive()) {
	    if (clazz == Integer.TYPE) {
		type = 'I';
	    } else if (clazz == Byte.TYPE) {
		type = 'B';
	    } else if (clazz == Long.TYPE) {
		type = 'J';
	    } else if (clazz == Float.TYPE) {
		type = 'F';
	    } else if (clazz == Double.TYPE) {
		type = 'D';
	    } else if (clazz == Short.TYPE) {
		type = 'S';
	    } else if (clazz == Character.TYPE) {
		type = 'C';
	    } else if (clazz == Boolean.TYPE) {
		type = 'Z';
	    }
	} else if (clazz.isArray()) {
	    type = '[';
	    typeString = ObjectStreamClass_1_3_1.getSignature(clazz);
	} else {
	    type = 'L';
	    typeString = ObjectStreamClass_1_3_1.getSignature(clazz);
	}

	if (typeString != null)
	    signature = typeString;
	else
	    signature = String.valueOf(type);

!!!1463195.java!!!	ObjectStreamField(inout field : Field)
	this(field.getName(), field.getType());
	this.field = field;
!!!1463323.java!!!	ObjectStreamField(in n : String, in t : char, inout f : Field, in ts : String)
	name = n;
	type = t;
	field = f;
	typeString = ts;

	if (typeString != null)
	    signature = typeString;
	else
	    signature = String.valueOf(type);
	
!!!1463451.java!!!	getName() : String
    	return name;
!!!1463579.java!!!	getType() : Class
    	if (clazz != null)
    	    return clazz;
	switch (type) {
	case 'B': clazz = Byte.TYPE;
	    break;
	case 'C': clazz = Character.TYPE;
	    break;
	case 'S': clazz = Short.TYPE;
	    break;
	case 'I': clazz = Integer.TYPE;
	    break;
	case 'J': clazz = Long.TYPE;
	    break;
	case 'F': clazz = Float.TYPE;
	    break;
	case 'D': clazz = Double.TYPE;
	    break;
	case 'Z': clazz = Boolean.TYPE;
	    break;
	case '[':
	case 'L':
	    clazz = Object.class;
	    break;
	}

    	return clazz;
!!!1463707.java!!!	getTypeCode() : char
	return type;
!!!1463835.java!!!	getTypeString() : String
	return typeString;
!!!1463963.java!!!	getField() : Field
 	return field;
!!!1464091.java!!!	setField(inout field : Field) : void
 	this.field = field;
 	this.fieldID = -1;
!!!1464347.java!!!	isPrimitive() : boolean
	return (type != '[' && type != 'L');
!!!1464475.java!!!	compareTo(inout o : Object) : int
	ObjectStreamField f2 = (ObjectStreamField)o;
	boolean thisprim = (this.typeString == null);
	boolean otherprim = (f2.typeString == null);

	if (thisprim != otherprim) {
	    return (thisprim ? -1 : 1);
	}
	return this.name.compareTo(f2.name);
!!!1464603.java!!!	typeEquals(inout other : ObjectStreamField) : boolean
	if (other == null || type != other.type)
	    return false;

	/* Return true if the primitive types matched */
	if (typeString == null && other.typeString == null)
	    return true;

	return ObjectStreamClass_1_3_1.compareClassNames(typeString,
                                                         other.typeString,
                                                         '/');
!!!1464731.java!!!	getSignature() : String

	return signature;

!!!1464859.java!!!	toString() : String
	if (typeString != null)
	    return typeString + " " + name;
	else
	    return type + " " + name;
!!!1464987.java!!!	getClazz() : Class
        return clazz;
