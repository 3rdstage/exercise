class URL
!!!7275547.java!!!	URL(in protocol : String, in host : String, in port : int, in file : String)
	this(protocol, host, port, file, null);
!!!7275675.java!!!	URL(in protocol : String, in host : String, in file : String)
	this(protocol, host, -1, file);
!!!7275803.java!!!	URL(in protocol : String, in host : String, in port : int, in file : String, inout handler : URLStreamHandler)
	if (handler != null) {
            SecurityManager sm = System.getSecurityManager();
            if (sm != null) {
                // check for permission to specify a handler
                checkSpecifyHandler(sm);
            }
        }

	protocol = protocol.toLowerCase();
        this.protocol = protocol;
 	if (host != null) {

            /**
	     * if host is a literal IPv6 address,
             * we will make it conform to RFC 2732
	     */
            if (host != null && host.indexOf(':') >= 0
                    && !host.startsWith("[")) {
                host = "["+host+"]";
            }
            this.host = host;

	    if (port < -1) {
		throw new MalformedURLException("Invalid port number :" +
                                                    port);
	    }
            this.port = port;
	    authority = (port == -1) ? host : host + ":" + port;
	}

	Parts parts = new Parts(file);
        path = parts.getPath();
        query = parts.getQuery();

        if (query != null) {
            this.file = path + "?" + query;
        } else {
            this.file = path;
        }
	ref = parts.getRef();	

	// Note: we don't do validation of the URL here. Too risky to change
        // right now, but worth considering for future reference. -br
        if (handler == null &&
            (handler = getURLStreamHandler(protocol)) == null) {
            throw new MalformedURLException("unknown protocol: " + protocol);
        }
        this.handler = handler;
!!!7275931.java!!!	URL(in spec : String)
	this(null, spec);
!!!7276059.java!!!	URL(inout context : URL, in spec : String)
	this(context, spec, null);
!!!7276187.java!!!	URL(inout context : URL, in spec : String, inout handler : URLStreamHandler)
	String original = spec;
	int i, limit, c;
	int start = 0;
	String newProtocol = null;
	boolean aRef=false;
	boolean isRelative = false;

	// Check for permission to specify a handler
	if (handler != null) {
	    SecurityManager sm = System.getSecurityManager();
	    if (sm != null) {
		checkSpecifyHandler(sm);
	    }
	}

	try {
	    limit = spec.length();
	    while ((limit > 0) && (spec.charAt(limit - 1) <= ' ')) {
		limit--;	//eliminate trailing whitespace
	    }
	    while ((start < limit) && (spec.charAt(start) <= ' ')) {
		start++;	// eliminate leading whitespace
	    }

	    if (spec.regionMatches(true, start, "url:", 0, 4)) {
		start += 4;
	    }
	    if (start < spec.length() && spec.charAt(start) == '#') {
		/* we're assuming this is a ref relative to the context URL.
		 * This means protocols cannot start w/ '#', but we must parse
		 * ref URL's like: "hello:there" w/ a ':' in them.
		 */
		aRef=true;
	    }
	    for (i = start ; !aRef && (i < limit) &&
		     ((c = spec.charAt(i)) != '/') ; i++) {
		if (c == ':') {

		    String s = spec.substring(start, i).toLowerCase();
		    if (isValidProtocol(s)) {
			newProtocol = s;
			start = i + 1;
		    }
		    break;
		}
	    }

	    // Only use our context if the protocols match.
	    protocol = newProtocol;
	    if ((context != null) && ((newProtocol == null) ||
			    newProtocol.equalsIgnoreCase(context.protocol))) {
                // inherit the protocol handler from the context
		// if not specified to the contructor
		if (handler == null) {
		    handler = context.handler;
		}

                // If the context is a hierarchical URL scheme and the spec
		// contains a matching scheme then maintain backwards
		// compatibility and treat it as if the spec didn't contain
		// the scheme; see 5.2.3 of RFC2396
		if (context.path != null && context.path.startsWith("/"))
		    newProtocol = null;

                if (newProtocol == null) {
                    protocol = context.protocol;
		    authority = context.authority;
		    userInfo = context.userInfo;
                    host = context.host;
                    port = context.port;
                    file = context.file;
		    path = context.path;
		    isRelative = true;
                }
	    }

	    if (protocol == null) {
		throw new MalformedURLException("no protocol: "+original);
	    }

	    // Get the protocol handler if not specified or the protocol
	    // of the context could not be used
	    if (handler == null &&
	        (handler = getURLStreamHandler(protocol)) == null) {
		throw new MalformedURLException("unknown protocol: "+protocol);
	    }

	    this.handler = handler;

	    i = spec.indexOf('#', start);
	    if (i >= 0) {
		ref = spec.substring(i + 1, limit);
		limit = i;
	    }
	    
	    /*
	     * Handle special case inheritance of query and fragment
	     * implied by RFC2396 section 5.2.2.
	     */
	    if (isRelative && start == limit) {
		query = context.query;
		if (ref == null) {
		    ref = context.ref;
		}
	    }

	    handler.parseURL(this, spec, start, limit);

	} catch(MalformedURLException e) {
	    throw e;
	} catch(Exception e) {
	    throw new MalformedURLException(e.getMessage());
	}
!!!7276315.java!!!	isValidProtocol(in protocol : String) : boolean
	int len = protocol.length();
        if (len < 1)
            return false;
        char c = protocol.charAt(0);
        if (!Character.isLetter(c))
            return false;
	for (int i = 1; i < len; i++) {
	    c = protocol.charAt(i);
	    if (!Character.isLetterOrDigit(c) && c != '.' && c != '+' &&
		c != '-') {
		return false;
	    }
	}
	return true;
!!!7276443.java!!!	checkSpecifyHandler(inout sm : SecurityManager) : void
	sm.checkPermission(SecurityConstants.SPECIFY_HANDLER_PERMISSION);
!!!7276571.java!!!	set(in protocol : String, in host : String, in port : int, in file : String, in ref : String) : void
	synchronized (this) {
	    this.protocol = protocol;
	    this.host = host;
            authority = port == -1 ? host : host + ":" + port;
	    this.port = port;
	    this.file = file;
	    this.ref = ref;
	    /* This is very important. We must recompute this after the
	     * URL has been changed. */
	    hashCode = -1;
            hostAddress = null;
            int q = file.lastIndexOf('?');
            if (q != -1) {
                query = file.substring(q+1);
                path = file.substring(0, q);
            } else
                path = file;
	}
!!!7276699.java!!!	set(in protocol : String, in host : String, in port : int, in authority : String, in userInfo : String, in path : String, in query : String, in ref : String) : void
	synchronized (this) {
	    this.protocol = protocol;
	    this.host = host;
	    this.port = port;
	    this.file = query == null ? path : path + "?" + query;
            this.userInfo = userInfo;
            this.path = path;
	    this.ref = ref;
	    /* This is very important. We must recompute this after the
	     * URL has been changed. */
	    hashCode = -1;
            hostAddress = null;
            this.query = query;
            this.authority = authority;
	}
!!!7276827.java!!!	getQuery() : String
	return query;
!!!7276955.java!!!	getPath() : String
	return path;
!!!7277083.java!!!	getUserInfo() : String
	return userInfo;
!!!7277211.java!!!	getAuthority() : String
	return authority;
!!!7277339.java!!!	getPort() : int
	return port;
!!!7277467.java!!!	getDefaultPort() : int
	return handler.getDefaultPort();
!!!7277595.java!!!	getProtocol() : String
	return protocol;
!!!7277723.java!!!	getHost() : String
	return host;
!!!7277851.java!!!	getFile() : String
	return file;
!!!7277979.java!!!	getRef() : String
	return ref;
!!!7278107.java!!!	equals(inout obj : Object) : boolean
        if (!(obj instanceof URL))
            return false;
	URL u2 = (URL)obj;

        return handler.equals(this, u2);
!!!7278235.java!!!	hashCode() : int
	if (hashCode != -1)
            return hashCode;

        hashCode = handler.hashCode(this);
	return hashCode;
!!!7278363.java!!!	sameFile(inout other : URL) : boolean
        return handler.sameFile(this, other);
!!!7278491.java!!!	toString() : String
	return toExternalForm();
!!!7278619.java!!!	toExternalForm() : String
	return handler.toExternalForm(this);
!!!7278747.java!!!	toURI() : URI
	return new URI (toString());
!!!7278875.java!!!	openConnection() : URLConnection
	return handler.openConnection(this);
!!!7279003.java!!!	openConnection(inout proxy : Proxy) : URLConnection
	if (proxy == null) {
	    throw new IllegalArgumentException("proxy can not be null");
	}
	
	SecurityManager sm = System.getSecurityManager();
	if (proxy.type() != Proxy.Type.DIRECT && sm != null) {
	    InetSocketAddress epoint = (InetSocketAddress) proxy.address();
	    if (epoint.isUnresolved())
		sm.checkConnect(epoint.getHostName(), epoint.getPort());
	    else
		sm.checkConnect(epoint.getAddress().getHostAddress(),
				epoint.getPort());
	}
	return handler.openConnection(this, proxy);
!!!7279131.java!!!	openStream() : InputStream
	return openConnection().getInputStream();
!!!7279259.java!!!	getContent() : Object
	return openConnection().getContent();
!!!7279387.java!!!	getContent(inout classes : Class) : Object
	return openConnection().getContent(classes);
!!!7279515.java!!!	setURLStreamHandlerFactory(inout fac : URLStreamHandlerFactory) : void
	synchronized (streamHandlerLock) {
	    if (factory != null) {
		throw new Error("factory already defined");
	    }
	    SecurityManager security = System.getSecurityManager();
	    if (security != null) {
		security.checkSetFactory();
	    }
	    handlers.clear();
	    factory = fac;
	}
!!!7279643.java!!!	getURLStreamHandler(in protocol : String) : URLStreamHandler

	URLStreamHandler handler = (URLStreamHandler)handlers.get(protocol);
	if (handler == null) {

	    boolean checkedWithFactory = false;

	    // Use the factory (if any)
	    if (factory != null) {
		handler = factory.createURLStreamHandler(protocol);
		checkedWithFactory = true;
	    }

	    // Try java protocol handler
	    if (handler == null) {
		String packagePrefixList = null;

		packagePrefixList
		    = (String) java.security.AccessController.doPrivileged(
                    new sun.security.action.GetPropertyAction(
		        protocolPathProp,""));
		if (packagePrefixList != "") {
		    packagePrefixList += "|";
		}

		// REMIND: decide whether to allow the "null" class prefix
		// or not.
		packagePrefixList += "sun.net.www.protocol";

		StringTokenizer packagePrefixIter =
		    new StringTokenizer(packagePrefixList, "|");

		while (handler == null &&
		       packagePrefixIter.hasMoreTokens()) {

		    String packagePrefix =
		      packagePrefixIter.nextToken().trim();
		    try {
		        String clsName = packagePrefix + "." + protocol +
			  ".Handler";
			Class cls = null;
			try {
                            cls = Class.forName(clsName);
                        } catch (ClassNotFoundException e) {
			    ClassLoader cl = ClassLoader.getSystemClassLoader();
			    if (cl != null) {
			        cls = cl.loadClass(clsName);
			    }
			}
			if (cls != null) {
			    handler  =
			      (URLStreamHandler)cls.newInstance();
			}
		    } catch (Exception e) {
			// any number of exceptions can get thrown here
		    }
		}
	    }

	    synchronized (streamHandlerLock) {

		URLStreamHandler handler2 = null;

		// Check again with hashtable just in case another
		// thread created a handler since we last checked
		handler2 = (URLStreamHandler)handlers.get(protocol);

		if (handler2 != null) {
		    return handler2;
		}

		// Check with factory if another thread set a
		// factory since our last check
		if (!checkedWithFactory && factory != null) {
		    handler2 = factory.createURLStreamHandler(protocol);
		}

		if (handler2 != null) {
		    // The handler from the factory must be given more
		    // importance. Discard the default handler that
		    // this thread created.
		    handler = handler2;
		}

		// Insert this handler into the hashtable
		if (handler != null) {
		    handlers.put(protocol, handler);
		}

	    }
	}

	return handler;

!!!7279771.java!!!	writeObject(inout s : ObjectOutputStream) : void
	s.defaultWriteObject();	// write the fields
!!!7279899.java!!!	readObject(inout s : ObjectInputStream) : void
	s.defaultReadObject();	// read the fields
	if ((handler = getURLStreamHandler(protocol)) == null) {
	    throw new IOException("unknown protocol: " + protocol);
	}

        // Construct authority part
        if (authority == null &&
	    ((host != null && host.length() > 0) || port != -1)) {
	    if (host == null)
		host = "";
            authority = (port == -1) ? host : host + ":" + port;

            // Handle hosts with userInfo in them
            int at = host.lastIndexOf('@');
            if (at != -1) {
                userInfo = host.substring(0, at);
                host = host.substring(at+1);
	    }
        } else if (authority != null) {
            // Construct user info part
            int ind = authority.indexOf('@');
            if (ind != -1)
                userInfo = authority.substring(0, ind);
	}

        // Construct path and query part
        path = null;
        query = null;
        if (file != null) {
	    // Fix: only do this if hierarchical?
            int q = file.lastIndexOf('?');
            if (q != -1) {
                query = file.substring(q+1);
                path = file.substring(0, q);
            } else
                path = file;
        }
