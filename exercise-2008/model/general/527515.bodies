class MBeanServerAccessController
!!!3250075.java!!!	getMBeanServer() : MBeanServer
	return mbs;
!!!3250203.java!!!	setMBeanServer(inout mbs : MBeanServer) : void
	if (mbs == null)
	    throw new IllegalArgumentException("Null MBeanServer");
	if (this.mbs != null)
	    throw new IllegalArgumentException("MBeanServer object already " +
					       "initialized");
	this.mbs = mbs;
!!!3250587.java!!!	addNotificationListener(inout name : ObjectName, inout listener : NotificationListener, inout filter : NotificationFilter, inout handback : Object) : void
	checkRead();
	getMBeanServer().addNotificationListener(name, listener,
						 filter, handback);
!!!3250715.java!!!	addNotificationListener(inout name : ObjectName, inout listener : ObjectName, inout filter : NotificationFilter, inout handback : Object) : void
	checkRead();
	getMBeanServer().addNotificationListener(name, listener,
						 filter, handback);
!!!3250843.java!!!	createMBean(in className : String, inout name : ObjectName) : ObjectInstance
	checkWrite();
	SecurityManager sm = System.getSecurityManager();
	if (sm == null) {
	    Object object = getMBeanServer().instantiate(className);
	    checkClassLoader(object);
	    return getMBeanServer().registerMBean(object, name);
	} else {
	    return getMBeanServer().createMBean(className, name);
	}
!!!3250971.java!!!	createMBean(in className : String, inout name : ObjectName, inout params : Object, in signature : String) : ObjectInstance
	checkWrite();
	SecurityManager sm = System.getSecurityManager();
	if (sm == null) {
	    Object object = getMBeanServer().instantiate(className,
							 params,
							 signature);
	    checkClassLoader(object);
	    return getMBeanServer().registerMBean(object, name);
	} else {
	    return getMBeanServer().createMBean(className, name,
						params, signature);
	}
!!!3251099.java!!!	createMBean(in className : String, inout name : ObjectName, inout loaderName : ObjectName) : ObjectInstance
	checkWrite();
	SecurityManager sm = System.getSecurityManager();
	if (sm == null) {
	    Object object = getMBeanServer().instantiate(className,
							 loaderName);
	    checkClassLoader(object);
	    return getMBeanServer().registerMBean(object, name);
	} else {
	    return getMBeanServer().createMBean(className, name, loaderName);
	}
!!!3251227.java!!!	createMBean(in className : String, inout name : ObjectName, inout loaderName : ObjectName, inout params : Object, in signature : String) : ObjectInstance
	checkWrite();
	SecurityManager sm = System.getSecurityManager();
	if (sm == null) {
	    Object object = getMBeanServer().instantiate(className,
							 loaderName,
							 params,
							 signature);
	    checkClassLoader(object);
	    return getMBeanServer().registerMBean(object, name);
	} else {
	    return getMBeanServer().createMBean(className, name, loaderName,
						params, signature);
	}
!!!3251355.java!!!	deserialize(inout name : ObjectName, in data : byte) : ObjectInputStream
	checkRead();
	return getMBeanServer().deserialize(name, data);
!!!3251483.java!!!	deserialize(in className : String, in data : byte) : ObjectInputStream
	checkRead();
	return getMBeanServer().deserialize(className, data);
!!!3251611.java!!!	deserialize(in className : String, inout loaderName : ObjectName, in data : byte) : ObjectInputStream
	checkRead();
	return getMBeanServer().deserialize(className, loaderName, data);
!!!3251739.java!!!	getAttribute(inout name : ObjectName, in attribute : String) : Object
	checkRead();
	return getMBeanServer().getAttribute(name, attribute);
!!!3251867.java!!!	getAttributes(inout name : ObjectName, in attributes : String) : AttributeList
	checkRead();
	return getMBeanServer().getAttributes(name, attributes);
!!!3251995.java!!!	getClassLoader(inout loaderName : ObjectName) : ClassLoader
	checkRead();
	return getMBeanServer().getClassLoader(loaderName);
!!!3252123.java!!!	getClassLoaderFor(inout mbeanName : ObjectName) : ClassLoader
	checkRead();
	return getMBeanServer().getClassLoaderFor(mbeanName);
!!!3252251.java!!!	getClassLoaderRepository() : ClassLoaderRepository
	checkRead();
	return getMBeanServer().getClassLoaderRepository();
!!!3252379.java!!!	getDefaultDomain() : String
	checkRead();
	return getMBeanServer().getDefaultDomain();
!!!3252507.java!!!	getDomains() : String
	checkRead();
	return getMBeanServer().getDomains();
!!!3252635.java!!!	getMBeanCount() : Integer
	checkRead();
	return getMBeanServer().getMBeanCount();
!!!3252763.java!!!	getMBeanInfo(inout name : ObjectName) : MBeanInfo
	checkRead();
	return getMBeanServer().getMBeanInfo(name);
!!!3252891.java!!!	getObjectInstance(inout name : ObjectName) : ObjectInstance
	checkRead();
	return getMBeanServer().getObjectInstance(name);
!!!3253019.java!!!	instantiate(in className : String) : Object
	checkWrite();
	return getMBeanServer().instantiate(className);
!!!3253147.java!!!	instantiate(in className : String, inout params : Object, in signature : String) : Object
	checkWrite();
	return getMBeanServer().instantiate(className, params, signature);
!!!3253275.java!!!	instantiate(in className : String, inout loaderName : ObjectName) : Object
	checkWrite();
	return getMBeanServer().instantiate(className, loaderName);
!!!3253403.java!!!	instantiate(in className : String, inout loaderName : ObjectName, inout params : Object, in signature : String) : Object
	checkWrite();
	return getMBeanServer().instantiate(className, loaderName,
					    params, signature);
!!!3253531.java!!!	invoke(inout name : ObjectName, in operationName : String, inout params : Object, in signature : String) : Object
	checkWrite();
        checkMLetMethods(name, operationName);
	return getMBeanServer().invoke(name, operationName, params, signature);
!!!3253659.java!!!	isInstanceOf(inout name : ObjectName, in className : String) : boolean
	checkRead();
	return getMBeanServer().isInstanceOf(name, className);
!!!3253787.java!!!	isRegistered(inout name : ObjectName) : boolean
	checkRead();
	return getMBeanServer().isRegistered(name);
!!!3253915.java!!!	queryMBeans(inout name : ObjectName, inout query : QueryExp) : Set
	checkRead();
	return getMBeanServer().queryMBeans(name, query);
!!!3254043.java!!!	queryNames(inout name : ObjectName, inout query : QueryExp) : Set
	checkRead();
	return getMBeanServer().queryNames(name, query);
!!!3254171.java!!!	registerMBean(inout object : Object, inout name : ObjectName) : ObjectInstance
	checkWrite();
	return getMBeanServer().registerMBean(object, name);
!!!3254299.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : NotificationListener) : void
	checkRead();
	getMBeanServer().removeNotificationListener(name, listener);
!!!3254427.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : NotificationListener, inout filter : NotificationFilter, inout handback : Object) : void
	checkRead();
	getMBeanServer().removeNotificationListener(name, listener,
						    filter, handback);
!!!3254555.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : ObjectName) : void
	checkRead();
	getMBeanServer().removeNotificationListener(name, listener);
!!!3254683.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : ObjectName, inout filter : NotificationFilter, inout handback : Object) : void
	checkRead();
	getMBeanServer().removeNotificationListener(name, listener,
						    filter, handback);
!!!3254811.java!!!	setAttribute(inout name : ObjectName, inout attribute : Attribute) : void
	checkWrite();
	getMBeanServer().setAttribute(name, attribute);
!!!3254939.java!!!	setAttributes(inout name : ObjectName, inout attributes : AttributeList) : AttributeList
	checkWrite();
	return getMBeanServer().setAttributes(name, attributes);
!!!3255067.java!!!	unregisterMBean(inout name : ObjectName) : void
	checkWrite();
	getMBeanServer().unregisterMBean(name);
!!!3255195.java!!!	checkClassLoader(inout object : Object) : void
	if (object instanceof ClassLoader)
	    throw new SecurityException("Access denied! Creating an " +
					"MBean that is a ClassLoader " +
					"is forbidden unless a security " +
					"manager is installed.");
!!!3255323.java!!!	checkMLetMethods(inout name : ObjectName, in operation : String) : void
        // Check if security manager installed
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            return;
        }
        // Check for addURL and getMBeansFromURL methods
        if (!operation.equals("addURL") &&
                !operation.equals("getMBeansFromURL")) {
            return;
        }
        // Check if MBean is instance of MLet
        if (!getMBeanServer().isInstanceOf(name,
                "javax.management.loading.MLet")) {
            return;
        }
        // Throw security exception
        if (operation.equals("addURL")) { // addURL
            throw new SecurityException("Access denied! MLet method addURL " +
                    "cannot be invoked unless a security manager is installed.");
        } else { // getMBeansFromURL
            // Whether or not calling getMBeansFromURL is allowed is controlled
            // by the value of the "jmx.remote.x.mlet.allow.getMBeansFromURL"
            // system property. If the value of this property is true, calling
            // the MLet's getMBeansFromURL method is allowed. The default value
            // for this property is false.
            final String propName = "jmx.remote.x.mlet.allow.getMBeansFromURL";
            GetPropertyAction propAction = new GetPropertyAction(propName);
            String propValue = (String) AccessController.doPrivileged(propAction);
            boolean allowGetMBeansFromURL = "true".equalsIgnoreCase(propValue);
            if (!allowGetMBeansFromURL) {
                throw new SecurityException("Access denied! MLet method " +
                        "getMBeansFromURL cannot be invoked unless a " +
                        "security manager is installed or the system property " +
                        "-Djmx.remote.x.mlet.allow.getMBeansFromURL=true " +
                        "is specified.");
            }
        }
