class EventHandler
!!!6753179.java!!!	EventHandler(inout target : Object, in action : String, in eventPropertyName : String, in listenerMethodName : String)
	this.acc = AccessController.getContext();
        this.target = target;
        this.action = action;
        this.eventPropertyName = eventPropertyName;
        this.listenerMethodName = listenerMethodName;
!!!6753307.java!!!	getTarget() : Object
        return target;
!!!6753435.java!!!	getAction() : String
        return action;
!!!6753563.java!!!	getEventPropertyName() : String
        return eventPropertyName;
!!!6753691.java!!!	getListenerMethodName() : String
        return listenerMethodName;
!!!6753819.java!!!	applyGetters(inout target : Object, in getters : String) : Object
 
        if (getters == null || getters.equals("")) { 
            return target; 
        }
        int firstDot = getters.indexOf('.'); 
        if (firstDot == -1) { 
            firstDot = getters.length(); 
        }
        String first = getters.substring(0, firstDot); 
        String rest = getters.substring(Math.min(firstDot + 1, getters.length())); 
        
        try { 
            Method getter = ReflectionUtils.getMethod(target.getClass(), 
				      "get" + NameGenerator.capitalize(first),
				      new Class[]{});
            if (getter == null) { 
                getter = ReflectionUtils.getMethod(target.getClass(), 
				   "is" + NameGenerator.capitalize(first), 
				   new Class[]{});
            } 
            if (getter == null) { 
                getter = ReflectionUtils.getMethod(target.getClass(), first, new Class[]{});
            } 
            if (getter == null) { 
		throw new RuntimeException("No method called: " + first + 
					   " defined on " + target); 
            } 
            Object newTarget = MethodUtil.invoke(getter, target, new Object[]{}); 
            return applyGetters(newTarget, rest); 
        } 
        catch (Throwable e) { 
            throw new RuntimeException("Failed to call method: " + first + 
				       " on " + target, e); 
        }
!!!6753947.java!!!	invoke(in proxy : Object, in method : Method, in arguments : Object) : Object
	return AccessController.doPrivileged(new PrivilegedAction() {
	    public Object run() {
	        return invokeInternal(proxy, method, arguments);
	    }
	}, acc);
!!!6754075.java!!!	invokeInternal(inout proxy : Object, inout method : Method, inout arguments : Object) : Object
        String methodName = method.getName();
        if (method.getDeclaringClass() == Object.class)  {
            // Handle the Object public methods.
            if (methodName.equals("hashCode"))  {
                return new Integer(System.identityHashCode(proxy));   
            } else if (methodName.equals("equals")) {
                return (proxy == arguments[0] ? Boolean.TRUE : Boolean.FALSE);
            } else if (methodName.equals("toString")) {
                return proxy.getClass().getName() + '@' + Integer.toHexString(proxy.hashCode());
            }
        }

        if (listenerMethodName == null || listenerMethodName.equals(methodName)) {
            Class[] argTypes = null; 
            Object[] newArgs = null; 

            if (eventPropertyName == null) {     // Nullary method. 
                newArgs = new Object[]{}; 
                argTypes = new Class[]{}; 
            }
            else { 
                Object input = applyGetters(arguments[0], getEventPropertyName()); 
                newArgs = new Object[]{input}; 
                argTypes = new Class[]{input.getClass()}; 
            }
            try {
                if (targetMethod == null) { 
                    targetMethod = ReflectionUtils.getMethod(target.getClass(), 
							     action, argTypes);
                }
                if (targetMethod == null) { 
                    targetMethod = ReflectionUtils.getMethod(target.getClass(), 
			     "set" + NameGenerator.capitalize(action), argTypes);
                }
                if (targetMethod == null) { 
		    throw new RuntimeException("No method called: " + 
					       action + " on class " + 
					       target.getClass() + " with argument "
					       + argTypes[0]); 
                }
                return MethodUtil.invoke(targetMethod, target, newArgs);
            } 
            catch (IllegalAccessException ex) {
                throw new RuntimeException(ex);
            }
            catch (InvocationTargetException ex) {
                throw new RuntimeException(ex.getTargetException());
	    }
        }
        return null;
!!!6754203.java!!!	create(inout listenerInterface : Class, inout target : Object, in action : String) : T
        return create(listenerInterface, target, action, null, null); 
!!!6754331.java!!!	create(inout listenerInterface : Class, inout target : Object, in action : String, in eventPropertyName : String) : T
        return create(listenerInterface, target, action, eventPropertyName, null); 
!!!6754459.java!!!	create(inout listenerInterface : Class, inout target : Object, in action : String, in eventPropertyName : String, in listenerMethodName : String) : T
        return (T)Proxy.newProxyInstance(target.getClass().getClassLoader(),
					 new Class[] {listenerInterface},
					 new EventHandler(target, action,
							  eventPropertyName,
							  listenerMethodName));
