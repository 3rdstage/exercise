class SocketFactoryConnectionImpl
!!!935323.java!!!	SocketFactoryConnectionImpl(inout orb : ORB, inout contactInfo : CorbaContactInfo, inout useSelectThreadToWait : boolean, inout useWorkerThread : boolean)
	super(orb, useSelectThreadToWait, useWorkerThread);

	// REVISIT - probably need a contact info for both
	// client and server for removing connections from cache?
	this.contactInfo = contactInfo;

	boolean isBlocking = !useSelectThreadToWait;
	SocketInfo socketInfo = 
	    // REVISIT - case - needs interface method
	    ((SocketFactoryContactInfoImpl)contactInfo).socketInfo;
	try {
	    socket = 
		orb.getORBData().getLegacySocketFactory().createSocket(socketInfo);
	    socketChannel = socket.getChannel();
	    if (socketChannel != null) {
		socketChannel.configureBlocking(isBlocking);
	    } else {
		// IMPORTANT: non-channel-backed sockets must use
		// dedicated reader threads.
		setUseSelectThreadToWait(false);
	    }
	    if (orb.transportDebugFlag) {
		dprint(".initialize: connection created: " + socket);
	    }
	} catch (GetEndPointInfoAgainException ex) {
	    throw wrapper.connectFailure(
                ex, socketInfo.getType(), socketInfo.getHost(),
		Integer.toString(socketInfo.getPort())) ;
	} catch (Exception ex) {
	    throw wrapper.connectFailure(
                ex, socketInfo.getType(), socketInfo.getHost(),
		Integer.toString(socketInfo.getPort())) ;
	}
	state = OPENING;
!!!935451.java!!!	toString() : String
        synchronized ( stateEvent ){
            return 
		"SocketFactoryConnectionImpl[" + " "
		+ (socketChannel == null ?
		   socket.toString() : socketChannel.toString()) + " "
		+ getStateString( state ) + " "
		+ shouldUseSelectThreadToWait() + " "
		+ shouldUseWorkerThreadForEvent()
		+ "]" ;
        }
!!!935579.java!!!	dprint(in msg : String) : void
	ORBUtility.dprint("SocketFactoryConnectionImpl", msg);
