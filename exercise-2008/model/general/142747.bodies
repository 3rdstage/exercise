class CheckedEntrySet
!!!231067.java!!!	CheckedEntrySet(inout s : Set, inout valueType : Class<V>)
                this.s = s;
                this.valueType = valueType;
!!!231195.java!!!	size() : int
 return s.size();
!!!231323.java!!!	isEmpty() : boolean
 return s.isEmpty();
!!!231451.java!!!	toString() : String
 return s.toString();
!!!231579.java!!!	hashCode() : int
 return s.hashCode();
!!!231707.java!!!	remove(inout o : Object) : boolean
 return s.remove(o);
!!!231835.java!!!	removeAll(inout coll : Collection) : boolean
                return s.removeAll(coll);
!!!231963.java!!!	retainAll(inout coll : Collection) : boolean
                return s.retainAll(coll);
!!!232091.java!!!	clear() : void
                s.clear();
!!!232219.java!!!	add(inout o : Entry) : boolean
                throw new UnsupportedOperationException();
!!!232347.java!!!	addAll(inout coll : Collection) : boolean
                throw new UnsupportedOperationException();
!!!232475.java!!!	iterator() : Iterator
                return new Iterator<Map.Entry<K,V>>() {
                    Iterator<Map.Entry<K, V>> i = s.iterator();

                    public boolean hasNext() { return i.hasNext(); }
                    public void remove()     { i.remove(); }

                    public Map.Entry<K,V> next() {
                        return new CheckedEntry<K,V>(i.next(), valueType);
                    }
                };
!!!232603.java!!!	toArray() : Object
                Object[] source = s.toArray();

                /*
                 * Ensure that we don't get an ArrayStoreException even if
                 * s.toArray returns an array of something other than Object
                 */
                Object[] dest = (CheckedEntry.class.isInstance(
                    source.getClass().getComponentType()) ? source :
                                 new Object[source.length]);

                for (int i = 0; i < source.length; i++)
                    dest[i] = new CheckedEntry<K,V>((Map.Entry<K,V>)source[i],
                                                    valueType);
                return dest;
!!!232731.java!!!	toArray(inout a : T) : T
                // We don't pass a to s.toArray, to avoid window of
                // vulnerability wherein an unscrupulous multithreaded client
                // could get his hands on raw (unwrapped) Entries from s.
                Object[] arr = s.toArray(a.length==0 ? a :
                   (T[])Array.newInstance(a.getClass().getComponentType(), 0));

                for (int i=0; i<arr.length; i++)
                    arr[i] = new CheckedEntry<K,V>((Map.Entry<K,V>)arr[i],
                                                   valueType);
                if (arr.length > a.length)
                    return (T[])arr;

                System.arraycopy(arr, 0, a, 0, arr.length);
                if (a.length > arr.length)
                    a[arr.length] = null;
                return a;
!!!232859.java!!!	contains(inout o : Object) : boolean
                if (!(o instanceof Map.Entry))
                    return false;
                return s.contains(
                    new CheckedEntry<K,V>((Map.Entry<K,V>) o, valueType));
!!!232987.java!!!	containsAll(inout coll : Collection) : boolean
                Iterator<?> e = coll.iterator();
                while (e.hasNext())
                    if (!contains(e.next())) // Invokes safe contains() above
                        return false;
                return true;
!!!233115.java!!!	equals(inout o : Object) : boolean
                if (o == this)
                    return true;
                if (!(o instanceof Set))
                    return false;
                Set<?> that = (Set<?>) o;
                if (that.size() != s.size())
                    return false;
                return containsAll(that); // Invokes safe containsAll() above
