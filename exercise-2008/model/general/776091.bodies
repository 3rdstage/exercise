class DurationImpl
!!!5394587.java!!!	getSign() : int
		
		return signum;
!!!5394715.java!!!	calcSignum(inout isPositive : boolean) : int
        if ((years == null || years.signum() == 0)
            && (months == null || months.signum() == 0)
            && (days == null || days.signum() == 0)
            && (hours == null || hours.signum() == 0)
            && (minutes == null || minutes.signum() == 0)
            && (seconds == null || seconds.signum() == 0)) {
            return 0;
            }

            if (isPositive) {
                return 1;
            } else {
                return -1;
            }

!!!5394843.java!!!	DurationImpl(inout isPositive : boolean, inout years : BigInteger, inout months : BigInteger, inout days : BigInteger, inout hours : BigInteger, inout minutes : BigInteger, inout seconds : BigDecimal)
            
        this.years = years;
        this.months = months;
        this.days = days;
        this.hours = hours;
        this.minutes = minutes;
        this.seconds = seconds;

        this.signum = calcSignum(isPositive);

        // sanity check
        if (years == null
            && months == null
            && days == null
            && hours == null
            && minutes == null
            && seconds == null) {
            throw new IllegalArgumentException(
            //"all the fields are null"
            DatatypeMessageFormatter.formatMessage(null, "AllFieldsNull", null)
            );
        }
        testNonNegative(years, DatatypeConstants.YEARS);
        testNonNegative(months, DatatypeConstants.MONTHS);
        testNonNegative(days, DatatypeConstants.DAYS);
        testNonNegative(hours, DatatypeConstants.HOURS);
        testNonNegative(minutes, DatatypeConstants.MINUTES);
        testNonNegative(seconds, DatatypeConstants.SECONDS);
!!!5394971.java!!!	testNonNegative(inout n : BigInteger, inout f : Field) : void
        if (n != null && n.signum() < 0) {
            throw new IllegalArgumentException(             
                DatatypeMessageFormatter.formatMessage(null, "NegativeField", new Object[]{f.toString()})
            );
        }
!!!5395099.java!!!	testNonNegative(inout n : BigDecimal, inout f : Field) : void
        if (n != null && n.signum() < 0) {
            
            throw new IllegalArgumentException(
                DatatypeMessageFormatter.formatMessage(null, "NegativeField", new Object[]{f.toString()})            
            );
        }
!!!5395227.java!!!	DurationImpl(in isPositive : boolean, in years : int, in months : int, in days : int, in hours : int, in minutes : int, in seconds : int)
        this(
            isPositive,
            wrap(years),
            wrap(months),
            wrap(days),
            wrap(hours),
            wrap(minutes),
            seconds != 0 ? new BigDecimal(String.valueOf(seconds)) : null);
!!!5395355.java!!!	wrap(in i : int) : BigInteger
    	
    	// field may not be set
    	if (i == DatatypeConstants.FIELD_UNDEFINED) {
    		return null;
    	}
    	
    	// int -> BigInteger
        return new BigInteger(String.valueOf(i));
!!!5395483.java!!!	DurationImpl(in durationInMilliSeconds : long)
        
        boolean is0x8000000000000000L = false;
        long l = durationInMilliSeconds;
        
        if (l > 0) {
            signum = 1;
        } else if (l < 0) {
            signum = -1;
            if (l == 0x8000000000000000L) {
                // negating 0x8000000000000000L causes an overflow
                l++;
                is0x8000000000000000L = true;
            }
            l *= -1;
        } else {
            signum = 0;
        }
        
        this.years = null;
        this.months = null;
        
        this.seconds =
            BigDecimal.valueOf((l % 60000L) + (is0x8000000000000000L ? 1 : 0), 3);
        
        l /= 60000L;
        this.minutes = (l == 0) ? null : BigInteger.valueOf(l % 60L);

        l /= 60L;
        this.hours = (l == 0) ? null : BigInteger.valueOf(l % 24L);
        
        l /= 24L;
        this.days = (l == 0) ? null : BigInteger.valueOf(l);
!!!5395611.java!!!	DurationImpl(in lexicalRepresentation : String)
        // only if I could use the JDK1.4 regular expression ....
        
        final String s = lexicalRepresentation;
        boolean positive;
        int[] idx = new int[1];
	int length = s.length();
	boolean timeRequired = false;

	if (lexicalRepresentation == null) {
	    throw new NullPointerException();
	}
        
	idx[0] = 0;
	if (length != idx[0] && s.charAt(idx[0]) == '-') {
	    idx[0]++;
	    positive = false;
	} else {
	    positive = true;
	}
        
	if (length != idx[0] && s.charAt(idx[0]++) != 'P') {
	    throw new IllegalArgumentException(s); //,idx[0]-1);
	}

        
        // phase 1: chop the string into chunks
        // (where a chunk is '<number><a symbol>'
        //--------------------------------------
        int dateLen = 0;
        String[] dateParts = new String[3];
        int[] datePartsIndex = new int[3];
        while (length != idx[0]
            && isDigit(s.charAt(idx[0]))
            && dateLen < 3) {
            datePartsIndex[dateLen] = idx[0];
            dateParts[dateLen++] = parsePiece(s, idx);
        }
        
	if (length != idx[0]) {
	    if (s.charAt(idx[0]++) == 'T') {
		timeRequired = true;
	    } else {
		throw new IllegalArgumentException(s); // ,idx[0]-1);
	    }
	}
        
        int timeLen = 0;
        String[] timeParts = new String[3];
        int[] timePartsIndex = new int[3];
        while (length != idx[0]
            && isDigitOrPeriod(s.charAt(idx[0]))
            && timeLen < 3) {
            timePartsIndex[timeLen] = idx[0];
            timeParts[timeLen++] = parsePiece(s, idx);
        }
        
	if (timeRequired && timeLen == 0) {
            throw new IllegalArgumentException(s); // ,idx[0]);
	}

        if (length != idx[0]) {
            throw new IllegalArgumentException(s); // ,idx[0]);
        }
        if (dateLen == 0 && timeLen == 0) {
            throw new IllegalArgumentException(s); // ,idx[0]);
        }
        
        // phase 2: check the ordering of chunks
        //--------------------------------------
        organizeParts(s, dateParts, datePartsIndex, dateLen, "YMD");
        organizeParts(s, timeParts, timePartsIndex, timeLen, "HMS");
        
        // parse into numbers
        years = parseBigInteger(s, dateParts[0], datePartsIndex[0]);
        months = parseBigInteger(s, dateParts[1], datePartsIndex[1]);
        days = parseBigInteger(s, dateParts[2], datePartsIndex[2]);
        hours = parseBigInteger(s, timeParts[0], timePartsIndex[0]);
        minutes = parseBigInteger(s, timeParts[1], timePartsIndex[1]);
        seconds = parseBigDecimal(s, timeParts[2], timePartsIndex[2]);
        signum = calcSignum(positive);
!!!5395739.java!!!	isDigit(in ch : char) : boolean
        return '0' <= ch && ch <= '9';
!!!5395867.java!!!	isDigitOrPeriod(in ch : char) : boolean
        return isDigit(ch) || ch == '.';
!!!5395995.java!!!	parsePiece(in whole : String, in idx : int) : String
        int start = idx[0];
        while (idx[0] < whole.length()
            && isDigitOrPeriod(whole.charAt(idx[0]))) {
            idx[0]++;
            }
        if (idx[0] == whole.length()) {
            throw new IllegalArgumentException(whole); // ,idx[0]);
        }

        idx[0]++;

        return whole.substring(start, idx[0]);
!!!5396123.java!!!	organizeParts(in whole : String, in parts : String, in partsIndex : int, in len : int, in tokens : String) : void

        int idx = tokens.length();
        for (int i = len - 1; i >= 0; i--) {
            int nidx =
                tokens.lastIndexOf(
                    parts[i].charAt(parts[i].length() - 1),
                    idx - 1);
            if (nidx == -1) {
                throw new IllegalArgumentException(whole);
                // ,partsIndex[i]+parts[i].length()-1);
            }

            for (int j = nidx + 1; j < idx; j++) {
                parts[j] = null;
            }
            idx = nidx;
            parts[idx] = parts[i];
            partsIndex[idx] = partsIndex[i];
        }
        for (idx--; idx >= 0; idx--) {
            parts[idx] = null;
        }
!!!5396251.java!!!	parseBigInteger(in whole : String, in part : String, in index : int) : BigInteger
        if (part == null) {
            return null;
        }
        part = part.substring(0, part.length() - 1);
        //        try {
        return new BigInteger(part);
        //        } catch( NumberFormatException e ) {
        //            throw new ParseException( whole, index );
        //        }
!!!5396379.java!!!	parseBigDecimal(in whole : String, in part : String, in index : int) : BigDecimal
        if (part == null) {
            return null;
        }
        part = part.substring(0, part.length() - 1);
        // NumberFormatException is IllegalArgumentException
        //        try {
        return new BigDecimal(part);
        //        } catch( NumberFormatException e ) {
        //            throw new ParseException( whole, index );
        //        }
!!!5396507.java!!!	compare(inout rhs : Duration) : int
    	
    	BigInteger maxintAsBigInteger = BigInteger.valueOf((long) Integer.MAX_VALUE);
    	BigInteger minintAsBigInteger = BigInteger.valueOf((long) Integer.MIN_VALUE);

    	// check for fields that are too large in this Duration
    	if (years != null && years.compareTo(maxintAsBigInteger) == 1) {    		
            throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge", 
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.YEARS.toString(), years.toString()})
    					//this.getClass().getName() + "#compare(Duration duration)"
						//+ " years too large to be supported by this implementation "
						//+ years.toString()
					);
    	}
    	if (months != null && months.compareTo(maxintAsBigInteger) == 1) {
    		throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge", 
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.MONTHS.toString(), months.toString()})
            
    					//this.getClass().getName() + "#compare(Duration duration)"
						//+ " months too large to be supported by this implementation "
						//+ months.toString()
					);
    	}
    	if (days != null && days.compareTo(maxintAsBigInteger) == 1) {
    		throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge", 
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.DAYS.toString(), days.toString()})
            
    					//this.getClass().getName() + "#compare(Duration duration)"
						//+ " days too large to be supported by this implementation "
						//+ days.toString()
					);
    	}
    	if (hours != null && hours.compareTo(maxintAsBigInteger) == 1) {
    		throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge", 
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.HOURS.toString(), hours.toString()})
            
    					//this.getClass().getName() + "#compare(Duration duration)"
						//+ " hours too large to be supported by this implementation "
						//+ hours.toString()
					);
    	}
    	if (minutes != null && minutes.compareTo(maxintAsBigInteger) == 1) {
    		throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge", 
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.MINUTES.toString(), minutes.toString()})
            
    					//this.getClass().getName() + "#compare(Duration duration)"
						//+ " minutes too large to be supported by this implementation "
						//+ minutes.toString()
					);
    	}
    	if (seconds != null && seconds.toBigInteger().compareTo(maxintAsBigInteger) == 1) {
    		throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge", 
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.SECONDS.toString(), seconds.toString()})
            
    					//this.getClass().getName() + "#compare(Duration duration)"
						//+ " seconds too large to be supported by this implementation "
						//+ seconds.toString()
					);
    	}
    	
    	// check for fields that are too large in rhs Duration
    	BigInteger rhsYears = (BigInteger) rhs.getField(DatatypeConstants.YEARS);
    	if (rhsYears != null && rhsYears.compareTo(maxintAsBigInteger) == 1) {
    		throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge", 
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.YEARS.toString(), rhsYears.toString()})
            
    					//this.getClass().getName() + "#compare(Duration duration)"
						//+ " years too large to be supported by this implementation "
						//+ rhsYears.toString()
					);
    	}
    	BigInteger rhsMonths = (BigInteger) rhs.getField(DatatypeConstants.MONTHS);
    	if (rhsMonths != null && rhsMonths.compareTo(maxintAsBigInteger) == 1) {
    		throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge", 
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.MONTHS.toString(), rhsMonths.toString()})
            
    					//this.getClass().getName() + "#compare(Duration duration)"
						//+ " months too large to be supported by this implementation "
						//+ rhsMonths.toString()
					);
    	}
    	BigInteger rhsDays = (BigInteger) rhs.getField(DatatypeConstants.DAYS);
    	if (rhsDays != null && rhsDays.compareTo(maxintAsBigInteger) == 1) {
    		throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge", 
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.DAYS.toString(), rhsDays.toString()})
            
    					//this.getClass().getName() + "#compare(Duration duration)"
						//+ " days too large to be supported by this implementation "
						//+ rhsDays.toString()
					);
    	}
    	BigInteger rhsHours = (BigInteger) rhs.getField(DatatypeConstants.HOURS);
    	if (rhsHours != null && rhsHours.compareTo(maxintAsBigInteger) == 1) {
    		throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge", 
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.HOURS.toString(), rhsHours.toString()})
            
    					//this.getClass().getName() + "#compare(Duration duration)"
						//+ " hours too large to be supported by this implementation "
						//+ rhsHours.toString()
					);
    	}
    	BigInteger rhsMinutes = (BigInteger) rhs.getField(DatatypeConstants.MINUTES);
    	if (rhsMinutes != null && rhsMinutes.compareTo(maxintAsBigInteger) == 1) {
    		throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge", 
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.MINUTES.toString(), rhsMinutes.toString()})
            
    					//this.getClass().getName() + "#compare(Duration duration)"
						//+ " minutes too large to be supported by this implementation "
						//+ rhsMinutes.toString()
					);
    	}
    	BigDecimal rhsSecondsAsBigDecimal = (BigDecimal) rhs.getField(DatatypeConstants.SECONDS);
    	BigInteger rhsSeconds = null;
        if ( rhsSecondsAsBigDecimal != null ) {
                rhsSeconds =  rhsSecondsAsBigDecimal.toBigInteger();
        }
    	if (rhsSeconds != null && rhsSeconds.compareTo(maxintAsBigInteger) == 1) {
    		throw new UnsupportedOperationException(
                        DatatypeMessageFormatter.formatMessage(null, "TooLarge", 
                            new Object[]{this.getClass().getName() + "#compare(Duration duration)" + DatatypeConstants.SECONDS.toString(), rhsSeconds.toString()})
            
    					//this.getClass().getName() + "#compare(Duration duration)"
						//+ " seconds too large to be supported by this implementation "
						//+ rhsSeconds.toString()
					);
    	}

    	// turn this Duration into a GregorianCalendar
    	GregorianCalendar lhsCalendar = new GregorianCalendar(
    			1970,
				1,
				1,
				0,
				0,
				0);
   		lhsCalendar.add(GregorianCalendar.YEAR, getYears() * getSign());
   		lhsCalendar.add(GregorianCalendar.MONTH, getMonths() * getSign());
   		lhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, getDays() * getSign());
   		lhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, getHours() * getSign());
   		lhsCalendar.add(GregorianCalendar.MINUTE, getMinutes() * getSign());
   		lhsCalendar.add(GregorianCalendar.SECOND, getSeconds() * getSign());
   		
   		// turn compare Duration into a GregorianCalendar
    	GregorianCalendar rhsCalendar = new GregorianCalendar(
				1970,
				1,
				1,
				0,
				0,
				0);
   		rhsCalendar.add(GregorianCalendar.YEAR, rhs.getYears() * rhs.getSign());
   		rhsCalendar.add(GregorianCalendar.MONTH, rhs.getMonths() * rhs.getSign());
   		rhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, rhs.getDays() * rhs.getSign());
   		rhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, rhs.getHours() * rhs.getSign());
   		rhsCalendar.add(GregorianCalendar.MINUTE, rhs.getMinutes() * rhs.getSign());
   		rhsCalendar.add(GregorianCalendar.SECOND, rhs.getSeconds() * rhs.getSign());
   		
   		if (lhsCalendar.before(rhsCalendar)) {
   			return DatatypeConstants.LESSER;
   		}
    	
   		if (lhsCalendar.after(rhsCalendar)) {
   			return DatatypeConstants.GREATER;
   		}
   		
   		if (lhsCalendar.equals(rhsCalendar)) {
   			return DatatypeConstants.EQUAL;
   		}

   		return DatatypeConstants.INDETERMINATE;
!!!5396635.java!!!	hashCode() : int
        // component wise hash is not correct because 1day = 24hours
	Calendar cal = TEST_POINTS[0].toGregorianCalendar();
	this.addTo(cal);
	return (int) getCalendarTimeInMillis(cal);
!!!5396763.java!!!	toString() : String
        StringBuffer buf = new StringBuffer();
        if (signum < 0) {
            buf.append('-');
        }
        buf.append('P');
        
        if (years != null) {
            buf.append(years + "Y");
        }
        if (months != null) {
            buf.append(months + "M");
        }
        if (days != null) {
            buf.append(days + "D");
        }

        if (hours != null || minutes != null || seconds != null) {
            buf.append('T');
            if (hours != null) {
                buf.append(hours + "H");
            }
            if (minutes != null) {
                buf.append(minutes + "M");
            }
            if (seconds != null) {
                buf.append(toString(seconds) + "S");
            }
        }
        
        return buf.toString();
!!!5396891.java!!!	toString(inout bd : BigDecimal) : String
        String intString = bd.unscaledValue().toString();
        int scale = bd.scale();

        if (scale == 0) {
            return intString;
        }

        /* Insert decimal point */
        StringBuffer buf;
        int insertionPoint = intString.length() - scale;
        if (insertionPoint == 0) { /* Point goes right before intVal */
            return "0." + intString;
        } else if (insertionPoint > 0) { /* Point goes inside intVal */
            buf = new StringBuffer(intString);
            buf.insert(insertionPoint, '.');
        } else { /* We must insert zeros between point and intVal */
            buf = new StringBuffer(3 - insertionPoint + intString.length());
            buf.append("0.");
            for (int i = 0; i < -insertionPoint; i++) {
                buf.append('0');
            }
            buf.append(intString);
        }
        return buf.toString();
!!!5397019.java!!!	isSet(inout field : Field) : boolean
    	
    	if (field == null) {
            String methodName = "javax.xml.datatype.Duration" + "#isSet(DatatypeConstants.Field field)" ;
    		throw new NullPointerException(                
                //"cannot be called with field == null"
                DatatypeMessageFormatter.formatMessage(null, "FieldCannotBeNull", new Object[]{methodName})                
    		);
    	}
    	
    	if (field == DatatypeConstants.YEARS) {
			return years != null;
    	}

		if (field == DatatypeConstants.MONTHS) {
			return months != null;
		}

		if (field == DatatypeConstants.DAYS) {
			return days != null;
		}

		if (field == DatatypeConstants.HOURS) {
			return hours != null;
		}

		if (field == DatatypeConstants.MINUTES) {
			return minutes != null;
		}
		
		if (field == DatatypeConstants.SECONDS) {
			return seconds != null;
		}
        String methodName = "javax.xml.datatype.Duration" + "#isSet(DatatypeConstants.Field field)";
        
        throw new IllegalArgumentException(
            DatatypeMessageFormatter.formatMessage(null,"UnknownField", new Object[]{methodName, field.toString()})			
		);
		
!!!5397147.java!!!	getField(inout field : Field) : Number

		if (field == null) {
            String methodName = "javax.xml.datatype.Duration" + "#isSet(DatatypeConstants.Field field) " ;
            
			throw new NullPointerException(				
                DatatypeMessageFormatter.formatMessage(null,"FieldCannotBeNull", new Object[]{methodName})
                );
		}
    	
		if (field == DatatypeConstants.YEARS) {
			return years;
		}

		if (field == DatatypeConstants.MONTHS) {
			return months;
		}

		if (field == DatatypeConstants.DAYS) {
			return days;
		}

		if (field == DatatypeConstants.HOURS) {
			return hours;
		}

		if (field == DatatypeConstants.MINUTES) {
			return minutes;
		}
		
		if (field == DatatypeConstants.SECONDS) {
			return seconds;
		}
		/**
		throw new IllegalArgumentException(
			"javax.xml.datatype.Duration"
			+ "#(getSet(DatatypeConstants.Field field) called with an unknown field: "
			+ field.toString()
		);
        */
        String methodName = "javax.xml.datatype.Duration" + "#(getSet(DatatypeConstants.Field field)";
        
        throw new IllegalArgumentException(
            DatatypeMessageFormatter.formatMessage(null,"UnknownField", new Object[]{methodName, field.toString()})			
		);
        
!!!5397275.java!!!	getYears() : int
        return getInt(DatatypeConstants.YEARS);
!!!5397403.java!!!	getMonths() : int
        return getInt(DatatypeConstants.MONTHS);
!!!5397531.java!!!	getDays() : int
        return getInt(DatatypeConstants.DAYS);
!!!5397659.java!!!	getHours() : int
        return getInt(DatatypeConstants.HOURS);
!!!5397787.java!!!	getMinutes() : int
        return getInt(DatatypeConstants.MINUTES);
!!!5397915.java!!!	getSeconds() : int
        return getInt(DatatypeConstants.SECONDS);
!!!5398043.java!!!	getInt(inout field : Field) : int
        Number n = getField(field);
        if (n == null) {
            return 0;
        } else {
            return n.intValue();
        }
!!!5398171.java!!!	getTimeInMillis(in startInstant : Calendar) : long
        Calendar cal = (Calendar) startInstant.clone();
        addTo(cal);
        return getCalendarTimeInMillis(cal)
                    - getCalendarTimeInMillis(startInstant);
!!!5398299.java!!!	getTimeInMillis(in startInstant : Date) : long
        Calendar cal = new GregorianCalendar();
        cal.setTime(startInstant);
        this.addTo(cal);
        return getCalendarTimeInMillis(cal) - startInstant.getTime();
!!!5398427.java!!!	normalizeWith(inout startTimeInstant : Calendar) : Duration
        
        Calendar c = (Calendar) startTimeInstant.clone();
        
        // using int may cause overflow, but 
        // Calendar internally treats value as int anyways.
	c.add(Calendar.YEAR, getYears() * signum);
        c.add(Calendar.MONTH, getMonths() * signum);
        c.add(Calendar.DAY_OF_MONTH, getDays() * signum);
        
        // obtain the difference in terms of days
        long diff = getCalendarTimeInMillis(c) - getCalendarTimeInMillis(startTimeInstant);
        int days = (int) (diff / (1000L * 60L * 60L * 24L));
        
        return new DurationImpl(
            days >= 0,
            null,
            null,
            wrap(Math.abs(days)),
            (BigInteger) getField(DatatypeConstants.HOURS),
            (BigInteger) getField(DatatypeConstants.MINUTES),
            (BigDecimal) getField(DatatypeConstants.SECONDS));
!!!5398555.java!!!	multiply(in factor : int) : Duration
        return multiply(BigDecimal.valueOf(factor));
!!!5398683.java!!!	multiply(inout factor : BigDecimal) : Duration
        BigDecimal carry = ZERO;
        int factorSign = factor.signum();
        factor = factor.abs();
        
        BigDecimal[] buf = new BigDecimal[6];
        
        for (int i = 0; i < 5; i++) {
            BigDecimal bd = getFieldAsBigDecimal(FIELDS[i]);
            bd = bd.multiply(factor).add(carry);
            
            buf[i] = bd.setScale(0, BigDecimal.ROUND_DOWN);
            
            bd = bd.subtract(buf[i]);
            if (i == 1) {
                if (bd.signum() != 0) {
                    throw new IllegalStateException(); // illegal carry-down
                } else {
                    carry = ZERO;
                }
            } else {
                carry = bd.multiply(FACTORS[i]);
            }
        }
        
        if (seconds != null) {
            buf[5] = seconds.multiply(factor).add(carry);
        } else {
            buf[5] = carry;
        }
                
        return new DurationImpl(
            this.signum * factorSign >= 0,
            toBigInteger(buf[0], null == years),
            toBigInteger(buf[1], null == months),
            toBigInteger(buf[2], null == days),
            toBigInteger(buf[3], null == hours),
            toBigInteger(buf[4], null == minutes),
            (buf[5].signum() == 0 && seconds == null) ? null : buf[5]);
!!!5398811.java!!!	getFieldAsBigDecimal(inout f : Field) : BigDecimal
        if (f == DatatypeConstants.SECONDS) {
            if (seconds != null) {
                return seconds;
            } else {
                return ZERO;
            }
        } else {
            BigInteger bi = (BigInteger) getField(f);
            if (bi == null) {
                return ZERO;
            } else {
                return new BigDecimal(bi);
            }
        }
!!!5398939.java!!!	toBigInteger(inout value : BigDecimal, inout canBeNull : boolean) : BigInteger
        if (canBeNull && value.signum() == 0) {
            return null;
        } else {
            return value.unscaledValue();
        }
!!!5399067.java!!!	add(in rhs : Duration) : Duration
        Duration lhs = this;
        BigDecimal[] buf = new BigDecimal[6];
        
        buf[0] = sanitize((BigInteger) lhs.getField(DatatypeConstants.YEARS),
        	lhs.getSign()).add(sanitize((BigInteger) rhs.getField(DatatypeConstants.YEARS),  rhs.getSign()));
        buf[1] = sanitize((BigInteger) lhs.getField(DatatypeConstants.MONTHS),
        	lhs.getSign()).add(sanitize((BigInteger) rhs.getField(DatatypeConstants.MONTHS), rhs.getSign()));
        buf[2] = sanitize((BigInteger) lhs.getField(DatatypeConstants.DAYS),
        	lhs.getSign()).add(sanitize((BigInteger) rhs.getField(DatatypeConstants.DAYS),   rhs.getSign()));
        buf[3] = sanitize((BigInteger) lhs.getField(DatatypeConstants.HOURS),
        	lhs.getSign()).add(sanitize((BigInteger) rhs.getField(DatatypeConstants.HOURS),  rhs.getSign()));
        buf[4] = sanitize((BigInteger) lhs.getField(DatatypeConstants.MINUTES),
        	lhs.getSign()).add(sanitize((BigInteger) rhs.getField(DatatypeConstants.MINUTES), rhs.getSign()));
        buf[5] = sanitize((BigDecimal) lhs.getField(DatatypeConstants.SECONDS),
        	lhs.getSign()).add(sanitize((BigDecimal) rhs.getField(DatatypeConstants.SECONDS), rhs.getSign()));
        
        // align sign
        alignSigns(buf, 0, 2); // Y,M
        alignSigns(buf, 2, 6); // D,h,m,s
        
        // make sure that the sign bit is consistent across all 6 fields.
        int s = 0;
        for (int i = 0; i < 6; i++) {
            if (s * buf[i].signum() < 0) {
                throw new IllegalStateException();
            }
            if (s == 0) {
                s = buf[i].signum();
            }
        }
        
        return new DurationImpl(
            s >= 0,
            toBigInteger(sanitize(buf[0], s),
            	lhs.getField(DatatypeConstants.YEARS) == null && rhs.getField(DatatypeConstants.YEARS) == null),
            toBigInteger(sanitize(buf[1], s),
            	lhs.getField(DatatypeConstants.MONTHS) == null && rhs.getField(DatatypeConstants.MONTHS) == null),
            toBigInteger(sanitize(buf[2], s),
            	lhs.getField(DatatypeConstants.DAYS) == null && rhs.getField(DatatypeConstants.DAYS) == null),
            toBigInteger(sanitize(buf[3], s),
            	lhs.getField(DatatypeConstants.HOURS) == null && rhs.getField(DatatypeConstants.HOURS) == null),
            toBigInteger(sanitize(buf[4], s),
            	lhs.getField(DatatypeConstants.MINUTES) == null && rhs.getField(DatatypeConstants.MINUTES) == null),
             (buf[5].signum() == 0
             && lhs.getField(DatatypeConstants.SECONDS) == null
             && rhs.getField(DatatypeConstants.SECONDS) == null) ? null : sanitize(buf[5], s));
!!!5399195.java!!!	alignSigns(inout buf : BigDecimal, in start : int, in end : int) : void
        // align sign
        boolean touched;
        
        do { // repeat until all the sign bits become consistent
            touched = false;
            int s = 0; // sign of the left fields

            for (int i = start; i < end; i++) {
                if (s * buf[i].signum() < 0) {
                    // this field has different sign than its left field.
                    touched = true;

                    // compute the number of unit that needs to be borrowed.
                    BigDecimal borrow =
                        buf[i].abs().divide(
                            FACTORS[i - 1],
                            BigDecimal.ROUND_UP);
                    if (buf[i].signum() > 0) {
                        borrow = borrow.negate();
                    }

                    // update values
                    buf[i - 1] = buf[i - 1].subtract(borrow);
                    buf[i] = buf[i].add(borrow.multiply(FACTORS[i - 1]));
                }
                if (buf[i].signum() != 0) {
                    s = buf[i].signum();
                }
            }
        } while (touched);
!!!5399323.java!!!	sanitize(inout value : BigInteger, in signum : int) : BigDecimal
        if (signum == 0 || value == null) {
            return ZERO;
        }
        if (signum > 0) {
            return new BigDecimal(value);
        }
        return new BigDecimal(value.negate());
!!!5399451.java!!!	sanitize(inout value : BigDecimal, in signum : int) : BigDecimal
        if (signum == 0 || value == null) {
            return ZERO;
        }
        if (signum > 0) {
            return value;
        }
        return value.negate();
!!!5399579.java!!!	subtract(in rhs : Duration) : Duration
        return add(rhs.negate());
!!!5399707.java!!!	negate() : Duration
        return new DurationImpl(
            signum <= 0,
            years,
            months,
            days,
            hours,
            minutes,
            seconds);
!!!5399835.java!!!	signum() : int
        return signum;
!!!5399963.java!!!	addTo(inout calendar : Calendar) : void
        calendar.add(Calendar.YEAR, getYears() * signum);
        calendar.add(Calendar.MONTH, getMonths() * signum);
        calendar.add(Calendar.DAY_OF_MONTH, getDays() * signum);
        calendar.add(Calendar.HOUR, getHours() * signum);
        calendar.add(Calendar.MINUTE, getMinutes() * signum);
        calendar.add(Calendar.SECOND, getSeconds() * signum);

        if (seconds != null) {
            BigDecimal fraction =
                seconds.subtract(seconds.setScale(0, BigDecimal.ROUND_DOWN));
            int millisec = fraction.movePointRight(3).intValue();
            calendar.add(Calendar.MILLISECOND, millisec * signum);
        }
!!!5400091.java!!!	addTo(inout date : Date) : void
        Calendar cal = new GregorianCalendar();
        cal.setTime(date); // this will throw NPE if date==null
        this.addTo(cal);
        date.setTime(getCalendarTimeInMillis(cal));
!!!5400219.java!!!	writeReplace() : Object
        return new DurationStream(this.toString());
!!!5400603.java!!!	getCalendarTimeInMillis(inout cal : Calendar) : long
        return cal.getTime().getTime();
