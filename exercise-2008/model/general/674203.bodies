class UnresolvedRef
!!!4461723.java!!!	UnresolvedRef(inout name : QName)
	super();
	_variableName = name;
!!!4461851.java!!!	getName() : QName
	return(_variableName);
!!!4461979.java!!!	reportError() : ErrorMsg
	ErrorMsg err = new ErrorMsg(ErrorMsg.VARIABLE_UNDEF_ERR,
				    _variableName, this);
	getParser().reportError(Constants.ERROR, err);
	return(err);
!!!4462107.java!!!	resolve(inout parser : Parser, inout stable : SymbolTable) : VariableRefBase
	// At this point the AST is already built and we should be able to
	// find any declared global variable or parameter
	VariableBase ref = parser.lookupVariable(_variableName);
	if (ref == null) {
	    ref = (VariableBase)stable.lookupName(_variableName);
	}
	if (ref == null) {
	    reportError();
	    return null;
	}

	// If in a top-level element, create dependency to the referenced var
	_variable = ref;
	addParentDependency();

	if (ref instanceof Variable) {
	    return new VariableRef((Variable) ref);
	}
	else if (ref instanceof Param) {
	    return new ParameterRef((Param)ref);
	}
	return null;
!!!4462235.java!!!	typeCheck(inout stable : SymbolTable) : Type
	if (_ref != null) {
	    final String name = _variableName.toString();
	    ErrorMsg err = new ErrorMsg(ErrorMsg.CIRCULAR_VARIABLE_ERR,
					name, this);
	}
	if ((_ref = resolve(getParser(), stable)) != null) {
	    return (_type = _ref.typeCheck(stable));
	}
	throw new TypeCheckError(reportError());
!!!4462363.java!!!	translate(inout classGen : ClassGenerator, inout methodGen : MethodGenerator) : void
	if (_ref != null)
	    _ref.translate(classGen, methodGen);
	else
	    reportError();
!!!4462491.java!!!	toString() : String
	return "unresolved-ref()";
