format 66
"concurrent" // src::java::util::concurrent
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/util/concurrent"
  java_package "java.util.concurrent"
  classview 138395 "concurrent"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 202651 "ConcurrentMap"
      visibility public stereotype "interface"
      nformals 6
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 8
      actual class class_ref 136603 // Map
        rank 0 explicit_value "K"
      actual class class_ref 136603 // Map
        rank 1 explicit_value "V"
      actual class class_ref 136603 // Map
        rank 2 explicit_value ""
      actual class class_ref 136603 // Map
        rank 3 explicit_value ""
      actual class class_ref 136603 // Map
        rank 4 explicit_value ""
      actual class class_ref 136603 // Map
        rank 5 explicit_value ""
      actual class class_ref 136603 // Map
        rank 6 explicit_value ""
      actual class class_ref 136603 // Map
        rank 7 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@link java.util.Map} providing additional atomic
<tt>putIfAbsent</tt>, <tt>remove</tt>, and <tt>replace</tt> methods.

<p>This interface is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.
 
@since 1.5
@author Doug Lea
@param <K> the type of keys maintained by this map
@param <V> the type of mapped values "
      classrelation 1922715 // <realization>
	relation 1922715 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1922715 // <realization>
	  b parent class_ref 136603 // Map
      end

      operation 7878939 "putIfAbsent"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the specified key is not already associated
with a value, associate it with the given value.
This is equivalent to
<pre>
  if (!map.containsKey(key)) 
     return map.put(key, value);
  else
     return map.get(key);
</pre>
Except that the action is performed atomically.
@param key key with which the specified value is to be associated.
@param value value to be associated with the specified key.
@return previous value associated with specified key, or <tt>null</tt>
        if there was no mapping for key.  A <tt>null</tt> return can
        also indicate that the map previously associated <tt>null</tt>
        with the specified key, if the implementation supports
        <tt>null</tt> values.

@throws UnsupportedOperationException if the <tt>put</tt> operation is
           not supported by this map.
@throws ClassCastException if the class of the specified key or value
           prevents it from being stored in this map.
@throws IllegalArgumentException if some aspect of this key or value
           prevents it from being stored in this map.
@throws NullPointerException if this map does not permit <tt>null</tt>
           keys or values, and the specified key or value is
           <tt>null</tt>.
"
      end

      operation 7879067 "remove"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "key" explicit_type "Object"
	  param inout name "value" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove entry for key only if currently mapped to given value.
Acts as
<pre> 
 if ((map.containsKey(key) && map.get(key).equals(value)) {
    map.remove(key);
    return true;
} else return false;
</pre>
except that the action is performed atomically.
@param key key with which the specified value is associated.
@param value value associated with the specified key.
@return true if the value was removed, false otherwise
@throws UnsupportedOperationException if the <tt>remove</tt> operation is
           not supported by this map.
@throws NullPointerException if this map does not permit <tt>null</tt>
           keys or values, and the specified key or value is
           <tt>null</tt>."
      end

      operation 7879195 "replace"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "key" explicit_type "K"
	  param inout name "oldValue" explicit_type "V"
	  param inout name "newValue" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replace entry for key only if currently mapped to given value.
Acts as
<pre> 
 if ((map.containsKey(key) && map.get(key).equals(oldValue)) {
    map.put(key, newValue);
    return true;
} else return false;
</pre>
except that the action is performed atomically.
@param key key with which the specified value is associated.
@param oldValue value expected to be associated with the specified key.
@param newValue value to be associated with the specified key.
@return true if the value was replaced
@throws UnsupportedOperationException if the <tt>put</tt> operation is
           not supported by this map.
@throws NullPointerException if this map does not permit <tt>null</tt>
           keys or values, and the specified key or value is
           <tt>null</tt>."
      end

      operation 7879323 "replace"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replace entry for key only if currently mapped to some value.
Acts as
<pre> 
 if ((map.containsKey(key)) {
    return map.put(key, value);
} else return null;
</pre>
except that the action is performed atomically.
@param key key with which the specified value is associated.
@param value value to be associated with the specified key.
@return previous value associated with specified key, or <tt>null</tt>
        if there was no mapping for key.  A <tt>null</tt> return can
        also indicate that the map previously associated <tt>null</tt>
        with the specified key, if the implementation supports
        <tt>null</tt> values.
@throws UnsupportedOperationException if the <tt>put</tt> operation is
           not supported by this map.
@throws NullPointerException if this map does not permit <tt>null</tt>
           keys or values, and the specified key or value is
           <tt>null</tt>."
      end
    end

    class 521371 "Executor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that executes submitted {@link Runnable} tasks. This
interface provides a way of decoupling task submission from the
mechanics of how each task will be run, including details of thread
use, scheduling, etc.  An <tt>Executor</tt> is normally used
instead of explicitly creating threads. For example, rather than
invoking <tt>new Thread(new(RunnableTask())).start()</tt> for each
of a set of tasks, you might use:

<pre>
Executor executor = <em>anExecutor</em>;
executor.execute(new RunnableTask1());
executor.execute(new RunnableTask2());
...
</pre>

However, the <tt>Executor</tt> interface does not strictly
require that execution be asynchronous. In the simplest case, an
executor can run the submitted task immediately in the caller's
thread:

<pre>
class DirectExecutor implements Executor {
    public void execute(Runnable r) {
        r.run();
    }
}</pre>

More typically, tasks are executed in some thread other
than the caller's thread.  The executor below spawns a new thread
for each task.

<pre>
class ThreadPerTaskExecutor implements Executor {
    public void execute(Runnable r) {
        new Thread(r).start();
    }
}</pre>

Many <tt>Executor</tt> implementations impose some sort of
limitation on how and when tasks are scheduled.  The executor below
serializes the submission of tasks to a second executor,
illustrating a composite executor.

<pre>
class SerialExecutor implements Executor {
    final Queue&lt;Runnable&gt; tasks = new LinkedBlockingQueue&lt;Runnable&gt;();
    final Executor executor;
    Runnable active;

    SerialExecutor(Executor executor) {
        this.executor = executor;
    }

    public synchronized void execute(final Runnable r) {
        tasks.offer(new Runnable() {
            public void run() {
                try {
                    r.run();
                } finally {
                    scheduleNext();
                }
            }
        });
        if (active == null) {
            scheduleNext();
        }
    }

    protected synchronized void scheduleNext() {
        if ((active = tasks.poll()) != null) {
            executor.execute(active);
        }
    }
}</pre>

The <tt>Executor</tt> implementations provided in this package
implement {@link ExecutorService}, which is a more extensive
interface.  The {@link ThreadPoolExecutor} class provides an
extensible thread pool implementation. The {@link Executors} class
provides convenient factory methods for these Executors.

@since 1.5
@author Doug Lea"
      operation 3229211 "execute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "command" type class_ref 163355 // Runnable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given command at some time in the future.  The command
may execute in a new thread, in a pooled thread, or in the calling
thread, at the discretion of the <tt>Executor</tt> implementation.

@param command the runnable task
@throws RejectedExecutionException if this task cannot be
accepted for execution.
@throws NullPointerException if command is null"
      end
    end

    class 988059 "AbstractExecutorService"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Provides default implementation of {@link ExecutorService}
execution methods. This class implements the <tt>submit</tt>,
<tt>invokeAny</tt> and <tt>invokeAll</tt> methods using the default
{@link FutureTask} class provided in this package.  For example,
the implementation of <tt>submit(Runnable)</tt> creates an
associated <tt>FutureTask</tt> that is executed and
returned. Subclasses overriding these methods to use different
{@link Future} implementations should do so consistently for each
of these methods.

@since 1.5
@author Doug Lea"
      classrelation 1921179 // <realization>
	relation 1921179 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1921179 // <realization>
	  b parent class_ref 988187 // ExecutorService
      end

      operation 7871643 "submit"
	public return_type class_ref 988443 // Future
	nparams 1
	  param inout name "task" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7871771 "submit"
	public return_type class_ref 988443 // Future
	nparams 2
	  param inout name "task" type class_ref 163355 // Runnable
	  param inout name "result" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7871899 "submit"
	public return_type class_ref 988443 // Future
	nparams 1
	  param inout name "task" type class_ref 988571 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7872027 "doInvokeAny"
	private explicit_return_type "T"
	nparams 3
	  param inout name "tasks" type class_ref 135067 // Collection
	  param inout name "timed" explicit_type "boolean"
	  param in name "nanos" explicit_type "long"
	nexceptions 3
	  exception class_ref 164123 // InterruptedException
	  exception class_ref 988699 // ExecutionException
	  exception class_ref 988827 // TimeoutException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "the main mechanics of invokeAny."
      end

      operation 7872155 "invokeAny"
	public explicit_return_type "T"
	nparams 1
	  param inout name "tasks" type class_ref 135067 // Collection
	nexceptions 2
	  exception class_ref 164123 // InterruptedException
	  exception class_ref 988699 // ExecutionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7872283 "invokeAny"
	public explicit_return_type "T"
	nparams 3
	  param inout name "tasks" type class_ref 135067 // Collection
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 3
	  exception class_ref 164123 // InterruptedException
	  exception class_ref 988699 // ExecutionException
	  exception class_ref 988827 // TimeoutException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7872411 "invokeAll"
	public return_type class_ref 135579 // List
	nparams 1
	  param inout name "tasks" type class_ref 135067 // Collection
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7872539 "invokeAll"
	public return_type class_ref 135579 // List
	nparams 3
	  param inout name "tasks" type class_ref 135067 // Collection
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 988187 "ExecutorService"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@link Executor} that provides methods to manage termination and
methods that can produce a {@link Future} for tracking progress of
one or more asynchronous tasks.

<p>
An <tt>ExecutorService</tt> can be shut down, which will cause it
to stop accepting new tasks.  After being shut down, the executor
will eventually terminate, at which point no tasks are actively
executing, no tasks are awaiting execution, and no new tasks can be
submitted.

<p> Method <tt>submit</tt> extends base method {@link
Executor#execute} by creating and returning a {@link Future} that
can be used to cancel execution and/or wait for completion.
Methods <tt>invokeAny</tt> and <tt>invokeAll</tt> perform the most
commonly useful forms of bulk execution, executing a collection of
tasks and then waiting for at least one, or all, to
complete. (Class {@link ExecutorCompletionService} can be used to
write customized variants of these methods.)

<p>The {@link Executors} class provides factory methods for the
executor services provided in this package.

<h3>Usage Example</h3>

Here is a sketch of a network service in which threads in a thread
pool service incoming requests. It uses the preconfigured {@link
Executors#newFixedThreadPool} factory method:

<pre>
class NetworkService {
   private final ServerSocket serverSocket;
   private final ExecutorService pool;

   public NetworkService(int port, int poolSize) throws IOException {
     serverSocket = new ServerSocket(port);
     pool = Executors.newFixedThreadPool(poolSize);
   }

   public void serve() {
     try {
       for (;;) {
         pool.execute(new Handler(serverSocket.accept()));
       }
     } catch (IOException ex) {
       pool.shutdown();
     }
   }
 }

 class Handler implements Runnable {
   private final Socket socket;
   Handler(Socket socket) { this.socket = socket; }
   public void run() {
     // read and service request
   }
}
</pre>
@since 1.5
@author Doug Lea"
      classrelation 1921051 // <generalisation>
	relation 1921051 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1921051 // <generalisation>
	  b parent class_ref 521371 // Executor
      end

      operation 7870107 "shutdown"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initiates an orderly shutdown in which previously submitted
tasks are executed, but no new tasks will be
accepted. Invocation has no additional effect if already shut
down.
@throws SecurityException if a security manager exists and
shutting down this ExecutorService may manipulate threads that
the caller is not permitted to modify because it does not hold
{@link java.lang.RuntimePermission}<tt>(\"modifyThread\")</tt>,
or the security manager's <tt>checkAccess</tt>  method denies access."
      end

      operation 7870235 "shutdownNow"
	public return_type class_ref 135579 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to stop all actively executing tasks, halts the
processing of waiting tasks, and returns a list of the tasks that were
awaiting execution. 
 
<p>There are no guarantees beyond best-effort attempts to stop
processing actively executing tasks.  For example, typical
implementations will cancel via {@link Thread#interrupt}, so if any
tasks mask or fail to respond to interrupts, they may never terminate.

@return list of tasks that never commenced execution
@throws SecurityException if a security manager exists and
shutting down this ExecutorService may manipulate threads that
the caller is not permitted to modify because it does not hold
{@link java.lang.RuntimePermission}<tt>(\"modifyThread\")</tt>,
or the security manager's <tt>checkAccess</tt> method denies access."
      end

      operation 7870363 "isShutdown"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this executor has been shut down.

@return <tt>true</tt> if this executor has been shut down"
      end

      operation 7870491 "isTerminated"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if all tasks have completed following shut down.
Note that <tt>isTerminated</tt> is never <tt>true</tt> unless
either <tt>shutdown</tt> or <tt>shutdownNow</tt> was called first.

@return <tt>true</tt> if all tasks have completed following shut down"
      end

      operation 7870619 "awaitTermination"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Blocks until all tasks have completed execution after a shutdown
request, or the timeout occurs, or the current thread is
interrupted, whichever happens first.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return <tt>true</tt> if this executor terminated and <tt>false</tt>
if the timeout elapsed before termination
@throws InterruptedException if interrupted while waiting"
      end

      operation 7870747 "submit"
	public return_type class_ref 988443 // Future
	nparams 1
	  param inout name "task" type class_ref 988571 // Callable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a value-returning task for execution and returns a Future
representing the pending results of the task. 

<p>
If you would like to immediately block waiting
for a task, you can use constructions of the form
<tt>result = exec.submit(aCallable).get();</tt>

<p> Note: The {@link Executors} class includes a set of methods
that can convert some other common closure-like objects,
for example, {@link java.security.PrivilegedAction} to
{@link Callable} form so they can be submitted.

@param task the task to submit
@return a Future representing pending completion of the task
@throws RejectedExecutionException if task cannot be scheduled
for execution
@throws NullPointerException if task null"
      end

      operation 7870875 "submit"
	public return_type class_ref 988443 // Future
	nparams 2
	  param inout name "task" type class_ref 163355 // Runnable
	  param inout name "result" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a Runnable task for execution and returns a Future 
representing that task that will upon completion return 
the given result

@param task the task to submit
@param result the result to return
@return a Future representing pending completion of the task,
and whose <tt>get()</tt> method will return the given result
upon completion.
@throws RejectedExecutionException if task cannot be scheduled
for execution
@throws NullPointerException if task null     "
      end

      operation 7871003 "submit"
	public return_type class_ref 988443 // Future
	nparams 1
	  param inout name "task" type class_ref 163355 // Runnable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a Runnable task for execution and returns a Future 
representing that task.

@param task the task to submit
@return a Future representing pending completion of the task,
and whose <tt>get()</tt> method will return <tt>null</tt>
upon completion.
@throws RejectedExecutionException if task cannot be scheduled
for execution
@throws NullPointerException if task null"
      end

      operation 7871131 "invokeAll"
	public return_type class_ref 135579 // List
	nparams 1
	  param inout name "tasks" type class_ref 135067 // Collection
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given tasks, returning a list of Futures holding
their status and results when all complete. 
{@link Future#isDone} is <tt>true</tt> for each 
element of the returned list.
Note that a <em>completed</em> task could have
terminated either normally or by throwing an exception.
The results of this method are undefined if the given
collection is modified while this operation is in progress.
@param tasks the collection of tasks
@return A list of Futures representing the tasks, in the same
sequential order as produced by the iterator for the given task
list, each of which has completed.
@throws InterruptedException if interrupted while waiting, in
which case unfinished tasks are cancelled.
@throws NullPointerException if tasks or any of its elements are <tt>null</tt>
@throws RejectedExecutionException if any task cannot be scheduled
for execution"
      end

      operation 7871259 "invokeAll"
	public return_type class_ref 135579 // List
	nparams 3
	  param inout name "tasks" type class_ref 135067 // Collection
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given tasks, returning a list of Futures holding
their status and results 
when all complete or the timeout expires, whichever happens first.
{@link Future#isDone} is <tt>true</tt> for each 
element of the returned list.
Upon return, tasks that have not completed are cancelled.
Note that a <em>completed</em> task could have
terminated either normally or by throwing an exception.
The results of this method are undefined if the given
collection is modified while this operation is in progress.
@param tasks the collection of tasks
@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return A list of Futures representing the tasks, in the same
sequential order as produced by the iterator for the given
task list. If the operation did not time out, each task will
have completed. If it did time out, some of these tasks will
not have completed.
@throws InterruptedException if interrupted while waiting, in
which case unfinished tasks are cancelled.
@throws NullPointerException if tasks, any of its elements, or
unit are <tt>null</tt>
@throws RejectedExecutionException if any task cannot be scheduled
for execution"
      end

      operation 7871387 "invokeAny"
	public explicit_return_type "T"
	nparams 1
	  param inout name "tasks" type class_ref 135067 // Collection
	nexceptions 2
	  exception class_ref 164123 // InterruptedException
	  exception class_ref 988699 // ExecutionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given tasks, returning the result
of one that has completed successfully (i.e., without throwing
an exception), if any do. Upon normal or exceptional return,
tasks that have not completed are cancelled.
The results of this method are undefined if the given
collection is modified while this operation is in progress.
@param tasks the collection of tasks
@return The result returned by one of the tasks.
@throws InterruptedException if interrupted while waiting
@throws NullPointerException if tasks or any of its elements
are <tt>null</tt>
@throws IllegalArgumentException if tasks empty
@throws ExecutionException if no task successfully completes
@throws RejectedExecutionException if tasks cannot be scheduled
for execution"
      end

      operation 7871515 "invokeAny"
	public explicit_return_type "T"
	nparams 3
	  param inout name "tasks" type class_ref 135067 // Collection
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 3
	  exception class_ref 164123 // InterruptedException
	  exception class_ref 988699 // ExecutionException
	  exception class_ref 988827 // TimeoutException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given tasks, returning the result
of one that has completed successfully (i.e., without throwing
an exception), if any do before the given timeout elapses.
Upon normal or exceptional return, tasks that have not
completed are cancelled.
The results of this method are undefined if the given
collection is modified while this operation is in progress.
@param tasks the collection of tasks
@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return The result returned by one of the tasks.
@throws InterruptedException if interrupted while waiting
@throws NullPointerException if tasks, any of its elements, or
unit are <tt>null</tt>
@throws TimeoutException if the given timeout elapses before
any task successfully completes
@throws ExecutionException if no task successfully completes
@throws RejectedExecutionException if tasks cannot be scheduled
for execution"
      end
    end

    class 988315 "TimeUnit"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <tt>TimeUnit</tt> represents time durations at a given unit of
granularity and provides utility methods to convert across units,
and to perform timing and delay operations in these units.  A
<tt>TimeUnit</tt> does not maintain time information, but only
helps organize and use time representations that may be maintained
separately across various contexts.

<p>A <tt>TimeUnit</tt> is mainly used to inform time-based methods
how a given timing parameter should be interpreted. For example,
the following code will timeout in 50 milliseconds if the {@link
java.util.concurrent.locks.Lock lock} is not available:

<pre>  Lock lock = ...;
 if ( lock.tryLock(50L, TimeUnit.MILLISECONDS) ) ...
</pre>
while this code will timeout in 50 seconds:
<pre>
 Lock lock = ...;
 if ( lock.tryLock(50L, TimeUnit.SECONDS) ) ...
</pre>

Note however, that there is no guarantee that a particular timeout
implementation will be able to notice the passage of time at the
same granularity as the given <tt>TimeUnit</tt>.

@since 1.5
@author Doug Lea"
      attribute 2936859 "NANOSECONDS"
	public type class_ref 988315 // TimeUnit
	cpp_decl ""
	java_decl "  ${@}${name}(0),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2936987 "MICROSECONDS"
	public type class_ref 988315 // TimeUnit
	cpp_decl ""
	java_decl "  ${@}${name}(1),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2937115 "MILLISECONDS"
	public type class_ref 988315 // TimeUnit
	cpp_decl ""
	java_decl "  ${@}${name}(2),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2937243 "SECONDS"
	public type class_ref 988315 // TimeUnit
	cpp_decl ""
	java_decl "  ${@}${name}(3),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2937371 "index"
	const_attribute private explicit_type "int"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the index of this unit "
      end

      operation 7974299 "TimeUnit"
	package explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Internal constructor "
      end

      attribute 2937499 "multipliers"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value "=  { 
        1, 
        1000, 
        1000 * 1000, 
        1000 * 1000 * 1000 
    }"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Lookup table for conversion factors "
      end

      attribute 2937627 "overflows"
	class_attribute const_attribute private explicit_type "long"
	multiplicity "[]"
	init_value "=  { 
        0, // unused
        Long.MAX_VALUE / 1000,
        Long.MAX_VALUE / (1000 * 1000),
        Long.MAX_VALUE / (1000 * 1000 * 1000) 
    }"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Lookup table to check saturation.  Note that because we are
dividing these down, we don't have to deal with asymmetry of
MIN/MAX values.
"
      end

      operation 7974427 "doConvert"
	class_operation private explicit_return_type "long"
	nparams 2
	  param in name "delta" explicit_type "int"
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Perform conversion based on given delta representing the
difference between units
@param delta the difference in index values of source and target units
@param duration the duration
@return converted duration or saturated value"
      end

      operation 7974555 "convert"
	public explicit_return_type "long"
	nparams 2
	  param in name "duration" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert the given time duration in the given unit to this
unit.  Conversions from finer to coarser granularities
truncate, so lose precision. For example converting
<tt>999</tt> milliseconds to seconds results in
<tt>0</tt>. Conversions from coarser to finer granularities
with arguments that would numerically overflow saturate to
<tt>Long.MIN_VALUE</tt> if negative or <tt>Long.MAX_VALUE</tt>
if positive.

@param duration the time duration in the given <tt>unit</tt>
@param unit the unit of the <tt>duration</tt> argument
@return the converted duration in this unit,
or <tt>Long.MIN_VALUE</tt> if conversion would negatively
overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow."
      end

      operation 7974683 "toNanos"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to <tt>NANOSECONDS.convert(duration, this)</tt>.
@param duration the duration
@return the converted duration,
or <tt>Long.MIN_VALUE</tt> if conversion would negatively
overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
@see #convert"
      end

      operation 7974811 "toMicros"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to <tt>MICROSECONDS.convert(duration, this)</tt>.
@param duration the duration
@return the converted duration,
or <tt>Long.MIN_VALUE</tt> if conversion would negatively
overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
@see #convert"
      end

      operation 7974939 "toMillis"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to <tt>MILLISECONDS.convert(duration, this)</tt>.
@param duration the duration
@return the converted duration,
or <tt>Long.MIN_VALUE</tt> if conversion would negatively
overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
@see #convert"
      end

      operation 7975067 "toSeconds"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to <tt>SECONDS.convert(duration, this)</tt>.
@param duration the duration
@return the converted duration.
@see #convert"
      end

      operation 7975195 "excessNanos"
	private explicit_return_type "int"
	nparams 2
	  param in name "time" explicit_type "long"
	  param in name "ms" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility method to compute the excess-nanosecond argument to
wait, sleep, join."
      end

      operation 7975323 "timedWait"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param in name "timeout" explicit_type "long"
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Perform a timed <tt>Object.wait</tt> using this time unit.
This is a convenience method that converts timeout arguments
into the form required by the <tt>Object.wait</tt> method.

<p>For example, you could implement a blocking <tt>poll</tt>
method (see {@link BlockingQueue#poll BlockingQueue.poll})
using:

<pre>  public synchronized  Object poll(long timeout, TimeUnit unit) throws InterruptedException {
   while (empty) {
     unit.timedWait(this, timeout);
     ...
   }
 }</pre>

@param obj the object to wait on
@param timeout the maximum time to wait. 
@throws InterruptedException if interrupted while waiting.
@see Object#wait(long, int)"
      end

      operation 7975451 "timedJoin"
	public explicit_return_type "void"
	nparams 2
	  param inout name "thread" type class_ref 163227 // Thread
	  param in name "timeout" explicit_type "long"
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Perform a timed <tt>Thread.join</tt> using this time unit.
This is a convenience method that converts time arguments into the
form required by the <tt>Thread.join</tt> method.
@param thread the thread to wait for
@param timeout the maximum time to wait
@throws InterruptedException if interrupted while waiting.
@see Thread#join(long, int)"
      end

      operation 7975579 "sleep"
	public explicit_return_type "void"
	nparams 1
	  param in name "timeout" explicit_type "long"
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Perform a <tt>Thread.sleep</tt> using this unit.
This is a convenience method that converts time arguments into the
form required by the <tt>Thread.sleep</tt> method.
@param timeout the minimum time to sleep
@throws InterruptedException if interrupted while sleeping.
@see Thread#sleep"
      end
    end

    class 988443 "Future"
      visibility public stereotype "interface"
      nformals 3
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <tt>Future</tt> represents the result of an asynchronous
computation.  Methods are provided to check if the computation is
complete, to wait for its completion, and to retrieve the result of
the computation.  The result can only be retrieved using method
<tt>get</tt> when the computation has completed, blocking if
necessary until it is ready.  Cancellation is performed by the
<tt>cancel</tt> method.  Additional methods are provided to
determine if the task completed normally or was cancelled. Once a
computation has completed, the computation cannot be cancelled.
If you would like to use a <tt>Future</tt> for the sake
of cancellability but not provide a usable result, you can
declare types of the form <tt>Future&lt;?&gt;</tt> and
return <tt>null</tt> as a result of the underlying task.

<p>
<b>Sample Usage</b> (Note that the following classes are all
made-up.) <p>
<pre>
interface ArchiveSearcher { String search(String target); }
class App {
  ExecutorService executor = ...
  ArchiveSearcher searcher = ...
  void showSearch(final String target) throws InterruptedException {
    Future&lt;String&gt; future = executor.submit(new Callable&lt;String&gt;() {
        public String call() { return searcher.search(target); }
    });
    displayOtherThings(); // do other things while searching
    try {
      displayText(future.get()); // use future
    } catch (ExecutionException ex) { cleanup(); return; }
  }
}
</pre>

The {@link FutureTask} class is an implementation of <tt>Future</tt> that 
implements <tt>Runnable</tt>, and so may be executed by an <tt>Executor</tt>. 
For example, the above construction with <tt>submit</tt> could be replaced by:
<pre>
    FutureTask&lt;String&gt; future =
      new FutureTask&lt;String&gt;(new Callable&lt;String&gt;() {
        public String call() {
          return searcher.search(target);
      }});
    executor.execute(future);
</pre>
@see FutureTask
@see Executor
@since 1.5
@author Doug Lea
@param <V> The result type returned by this Future's <tt>get</tt> method"
      operation 7929499 "cancel"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "mayInterruptIfRunning" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to cancel execution of this task.  This attempt will
fail if the task has already completed, already been cancelled,
or could not be cancelled for some other reason. If successful,
and this task has not started when <tt>cancel</tt> is called,
this task should never run.  If the task has already started,
then the <tt>mayInterruptIfRunning</tt> parameter determines
whether the thread executing this task should be interrupted in
an attempt to stop the task.

@param mayInterruptIfRunning <tt>true</tt> if the thread executing this
task should be interrupted; otherwise, in-progress tasks are allowed
to complete
@return <tt>false</tt> if the task could not be cancelled,
typically because it has already completed normally;
<tt>true</tt> otherwise"
      end

      operation 7929627 "isCancelled"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this task was cancelled before it completed
normally.

@return <tt>true</tt> if task was cancelled before it completed"
      end

      operation 7929755 "isDone"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this task completed.  

Completion may be due to normal termination, an exception, or
cancellation -- in all of these cases, this method will return
<tt>true</tt>.

@return <tt>true</tt> if this task completed."
      end

      operation 7929883 "get"
	public explicit_return_type "V"
	nparams 0
	nexceptions 2
	  exception class_ref 164123 // InterruptedException
	  exception class_ref 988699 // ExecutionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits if necessary for the computation to complete, and then
retrieves its result.

@return the computed result
@throws CancellationException if the computation was cancelled
@throws ExecutionException if the computation threw an
exception
@throws InterruptedException if the current thread was interrupted
while waiting"
      end

      operation 7930011 "get"
	public explicit_return_type "V"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 3
	  exception class_ref 164123 // InterruptedException
	  exception class_ref 988699 // ExecutionException
	  exception class_ref 988827 // TimeoutException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits if necessary for at most the given time for the computation
to complete, and then retrieves its result, if available.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return the computed result
@throws CancellationException if the computation was cancelled
@throws ExecutionException if the computation threw an
exception
@throws InterruptedException if the current thread was interrupted
while waiting
@throws TimeoutException if the wait timed out"
      end
    end

    class 988571 "Callable"
      visibility public stereotype "interface"
      nformals 3
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A task that returns a result and may throw an exception.
Implementors define a single method with no arguments called
<tt>call</tt>.

<p>The <tt>Callable</tt> interface is similar to {@link
java.lang.Runnable}, in that both are designed for classes whose
instances are potentially executed by another thread.  A
<tt>Runnable</tt>, however, does not return a result and cannot
throw a checked exception.

<p> The {@link Executors} class contains utility methods to
convert from other common forms to <tt>Callable</tt> classes.

@see Executor
@since 1.5
@author Doug Lea
@param <V> the result type of method <tt>call</tt>"
      operation 7877915 "call"
	public explicit_return_type "V"
	nparams 0
	nexceptions 1
	  exception class_ref 165403 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes a result, or throws an exception if unable to do so.

@return computed result
@throws Exception if unable to compute a result"
      end
    end

    class 988699 "ExecutionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Exception thrown when attempting to retrieve the result of a task
that aborted by throwing an exception. This exception can be
inspected using the {@link #getCause()} method.

@see Future
@since 1.5
@author Doug Lea"
      classrelation 1934363 // <generalisation>
	relation 1934363 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1934363 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      attribute 2931611 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7830266012832686185L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7928987 "ExecutionException"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>ExecutionException</tt> with no detail message.
The cause is not initialized, and may subsequently be
initialized by a call to {@link #initCause(Throwable) initCause}."
      end

      operation 7929115 "ExecutionException"
	protected explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>ExecutionException</tt> with the specified detail
message. The cause is not initialized, and may subsequently be
initialized by a call to {@link #initCause(Throwable) initCause}.

@param message the detail message"
      end

      operation 7929243 "ExecutionException"
	public explicit_return_type ""
	nparams 2
	  param in name "message" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>ExecutionException</tt> with the specified detail
message and cause.

@param  message the detail message
@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method)"
      end

      operation 7929371 "ExecutionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>ExecutionException</tt> with the specified cause.
The detail message is set to:
<pre>
 (cause == null ? null : cause.toString())</pre>
(which typically contains the class and detail message of
<tt>cause</tt>).

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method)"
      end
    end

    class 988827 "TimeoutException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Exception thrown when a blocking operation times out.  Blocking
operations for which a timeout is specified need a means to
indicate that the timeout has occurred. For many such operations it
is possible to return a value that indicates timeout; when that is
not possible or desirable then <tt>TimeoutException</tt> should be
declared and thrown.

@since 1.5
@author Doug Lea"
      classrelation 1948827 // <generalisation>
	relation 1948827 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1948827 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      attribute 2936731 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  1900926677490660714L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7974043 "TimeoutException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>TimeoutException</tt> with no specified detail
message."
      end

      operation 7974171 "TimeoutException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>TimeoutException</tt> with the specified detail
message.

@param message the detail message"
      end
    end

    class 988955 "ArrayBlockingQueue"
      visibility public 
      nformals 3
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 7
      actual class class_ref 137115 // AbstractQueue
        rank 0 explicit_value "E"
      actual class class_ref 137115 // AbstractQueue
        rank 1 explicit_value ""
      actual class class_ref 137115 // AbstractQueue
        rank 2 explicit_value ""
      actual class class_ref 137115 // AbstractQueue
        rank 3 explicit_value ""
      actual class class_ref 989083 // BlockingQueue
        rank 0 explicit_value "E"
      actual class class_ref 989083 // BlockingQueue
        rank 1 explicit_value ""
      actual class class_ref 989083 // BlockingQueue
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A bounded {@linkplain BlockingQueue blocking queue} backed by an
array.  This queue orders elements FIFO (first-in-first-out).  The
<em>head</em> of the queue is that element that has been on the
queue the longest time.  The <em>tail</em> of the queue is that
element that has been on the queue the shortest time. New elements
are inserted at the tail of the queue, and the queue retrieval
operations obtain elements at the head of the queue.

<p>This is a classic &quot;bounded buffer&quot;, in which a
fixed-sized array holds elements inserted by producers and
extracted by consumers.  Once created, the capacity cannot be
increased.  Attempts to put an element to a full queue will
result in the put operation blocking; attempts to retrieve an
element from an empty queue will similarly block.

<p> This class supports an optional fairness policy for ordering
waiting producer and consumer threads.  By default, this ordering
is not guaranteed. However, a queue constructed with fairness set
to <tt>true</tt> grants threads access in FIFO order. Fairness
generally decreases throughput but reduces variability and avoids
starvation.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.

<p>This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 1921307 // <realization>
	relation 1921307 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1921307 // <realization>
	  b parent class_ref 137115 // AbstractQueue
      end

      classrelation 1921563 // <realization>
	relation 1921563 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1921563 // <realization>
	  b parent class_ref 989083 // BlockingQueue
      end

      classrelation 1921691 // <realization>
	relation 1921691 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1921691 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2920219 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -817911632652898426L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Serialization ID. This class relies on default serialization
even for the items array, which is default-serialized, even if
it is empty. Otherwise it could not be declared final, which is
necessary here.
"
      end

      attribute 2920347 "items"
	const_attribute private explicit_type "E"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The queued items  "
      end

      attribute 2920475 "takeIndex"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " items index for next take, poll or remove "
      end

      attribute 2920603 "putIndex"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " items index for next put, offer, or add. "
      end

      attribute 2920731 "count"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Number of items in the queue "
      end

      classrelation 1921819 // lock (<unidirectional association>)
	relation 1921819 --->
	  a role_name "lock" const_relation private
	    comment "
Concurrency control uses the classic two-condition algorithm
found in any textbook.

 Main lock guarding all access 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1921819 // lock (<unidirectional association>)
	  b parent class_ref 989211 // ReentrantLock
      end

      classrelation 1921947 // notEmpty (<unidirectional association>)
	relation 1921947 --->
	  a role_name "notEmpty" const_relation private
	    comment " Condition for waiting takes 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1921947 // notEmpty (<unidirectional association>)
	  b parent class_ref 989339 // Condition
      end

      classrelation 1922075 // notFull (<unidirectional association>)
	relation 1922075 --->
	  a role_name "notFull" const_relation private
	    comment " Condition for waiting puts 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1922075 // notFull (<unidirectional association>)
	  b parent class_ref 989339 // Condition
      end

      operation 7873819 "inc"
	package explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Internal helper methods

Circularly increment i."
      end

      operation 7873947 "insert"
	private explicit_return_type "void"
	nparams 1
	  param inout name "x" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Insert element at current put position, advance, and signal.
Call only when holding lock."
      end

      operation 7874075 "extract"
	private explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Extract element at current take position, advance, and signal.
Call only when holding lock."
      end

      operation 7874203 "removeAt"
	package explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility for remove and iterator.remove: Delete item at position i.
Call only when holding lock."
      end

      operation 7874331 "ArrayBlockingQueue"
	public explicit_return_type ""
	nparams 1
	  param in name "capacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an <tt>ArrayBlockingQueue</tt> with the given (fixed)
capacity and default access policy.
@param capacity the capacity of this queue
@throws IllegalArgumentException if <tt>capacity</tt> is less than 1"
      end

      operation 7874459 "ArrayBlockingQueue"
	public explicit_return_type ""
	nparams 2
	  param in name "capacity" explicit_type "int"
	  param inout name "fair" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an <tt>ArrayBlockingQueue</tt> with the given (fixed)
capacity and the specified access policy.
@param capacity the capacity of this queue
@param fair if <tt>true</tt> then queue accesses for threads blocked
on insertion or removal, are processed in FIFO order; if <tt>false</tt>
the access order is unspecified.
@throws IllegalArgumentException if <tt>capacity</tt> is less than 1"
      end

      operation 7874587 "ArrayBlockingQueue"
	public explicit_return_type ""
	nparams 3
	  param in name "capacity" explicit_type "int"
	  param inout name "fair" explicit_type "boolean"
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<? extends E> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an <tt>ArrayBlockingQueue</tt> with the given (fixed)
capacity, the specified access policy and initially containing the
elements of the given collection,
added in traversal order of the collection's iterator.
@param capacity the capacity of this queue
@param fair if <tt>true</tt> then queue accesses for threads blocked
on insertion or removal, are processed in FIFO order; if <tt>false</tt>
the access order is unspecified.
@param c the collection of elements to initially contain
@throws IllegalArgumentException if <tt>capacity</tt> is less than
<tt>c.size()</tt>, or less than 1.
@throws NullPointerException if <tt>c</tt> or any element within it
is <tt>null</tt>"
      end

      operation 7874715 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue if possible,
returning immediately if this queue is full.

@param o the element to add.
@return <tt>true</tt> if it was possible to add the element to
        this queue, else <tt>false</tt>
@throws NullPointerException if the specified element is <tt>null</tt>"
      end

      operation 7874843 "offer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "o" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue, waiting if
necessary up to the specified wait time for space to become available.
@param o the element to add
@param timeout how long to wait before giving up, in units of
<tt>unit</tt>
@param unit a <tt>TimeUnit</tt> determining how to interpret the
<tt>timeout</tt> parameter
@return <tt>true</tt> if successful, or <tt>false</tt> if
the specified waiting time elapses before space is available.
@throws InterruptedException if interrupted while waiting.
@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 7874971 "poll"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7875099 "poll"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7875227 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this
queue, if it is present."
      end

      operation 7875355 "peek"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7875483 "take"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7875611 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" explicit_type "E"
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to the tail of this queue, waiting if
necessary for space to become available.
@param o the element to add
@throws InterruptedException if interrupted while waiting.
@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 7875739 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " this doc comment is overridden to remove the reference to collections
 greater in size than Integer.MAX_VALUE

Returns the number of elements in this queue.

@return  the number of elements in this queue."
      end

      operation 7875867 "remainingCapacity"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " this doc comment is a modified copy of the inherited doc comment,
 without the reference to unlimited queues.

Returns the number of elements that this queue can ideally (in
the absence of memory or resource constraints) accept without
blocking. This is always equal to the initial capacity of this queue
less the current <tt>size</tt> of this queue.
<p>Note that you <em>cannot</em> always tell if
an attempt to <tt>add</tt> an element will succeed by
inspecting <tt>remainingCapacity</tt> because it may be the
case that a waiting consumer is ready to <tt>take</tt> an
element out of an otherwise full queue."
      end

      operation 7875995 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7876123 "toArray"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7876251 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7876379 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7876507 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically removes all of the elements from this queue.
The queue will be empty after this call returns."
      end

      operation 7876635 "drainTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7876763 "drainTo"
	public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 135067 // Collection
	  param in name "maxElements" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7876891 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue in proper sequence.
The returned <tt>Iterator</tt> is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException},
and guarantees to traverse elements as they existed upon
construction of the iterator, and may (but is not guaranteed to)
reflect any modifications subsequent to construction.

@return an iterator over the elements in this queue in proper sequence."
      end

      class 989467 "Itr"
	visibility private 
	nactuals 4
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "E"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1922203 // <realization>
	  relation 1922203 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1922203 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	attribute 2920859 "nextIndex"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Index of element to be returned by next,
or a negative number if no such.
"
	end

	attribute 2920987 "nextItem"
	  private explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "nextItem holds on to item fields because once we claim
that an element exists in hasNext(), we must return it in
the following next() call even if it was in the process of
being removed when hasNext() was called.
"
	end

	attribute 2921115 "lastRet"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Index of element returned by most recent call to next.
Reset to -1 if this element is deleted by a call to remove.
"
	end

	operation 7877019 "Itr"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7877147 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7877275 "checkNext"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Check whether nextIndex is valid; if so setting nextItem.
Stops iterator when either hits putIndex or sees null item."
	end

	operation 7877403 "next"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7877531 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 989083 "BlockingQueue"
      visibility public stereotype "interface"
      nformals 3
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 137243 // Queue
        rank 0 explicit_value "E"
      actual class class_ref 137243 // Queue
        rank 1 explicit_value ""
      actual class class_ref 137243 // Queue
        rank 2 explicit_value ""
      actual class class_ref 137243 // Queue
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@link java.util.Queue} that additionally supports operations
that wait for the queue to become non-empty when retrieving an element,
and wait for space to become available in the queue when storing an 
element.

<p>A <tt>BlockingQueue</tt> does not accept <tt>null</tt> elements.
Implementations throw <tt>NullPointerException</tt> on attempts
to <tt>add</tt>, <tt>put</tt> or <tt>offer</tt> a <tt>null</tt>.  A
<tt>null</tt> is used as a sentinel value to indicate failure of
<tt>poll</tt> operations.

<p>A <tt>BlockingQueue</tt> may be capacity bounded. At any given
time it may have a <tt>remainingCapacity</tt> beyond which no
additional elements can be <tt>put</tt> without blocking.
A <tt>BlockingQueue</tt> without any intrinsic capacity constraints always
reports a remaining capacity of <tt>Integer.MAX_VALUE</tt>.

<p> <tt>BlockingQueue</tt> implementations are designed to be used
primarily for producer-consumer queues, but additionally support
the {@link java.util.Collection} interface.  So, for example, it is
possible to remove an arbitrary element from a queue using
<tt>remove(x)</tt>. However, such operations are in general
<em>not</em> performed very efficiently, and are intended for only
occasional use, such as when a queued message is cancelled.

<p> <tt>BlockingQueue</tt> implementations are thread-safe.  All
queuing methods achieve their effects atomically using internal
locks or other forms of concurrency control. However, the
<em>bulk</em> Collection operations <tt>addAll</tt>,
<tt>containsAll</tt>, <tt>retainAll</tt> and <tt>removeAll</tt> are
<em>not</em> necessarily performed atomically unless specified
otherwise in an implementation. So it is possible, for example, for
<tt>addAll(c)</tt> to fail (throwing an exception) after adding
only some of the elements in <tt>c</tt>.

<p>A <tt>BlockingQueue</tt> does <em>not</em> intrinsically support
any kind of &quot;close&quot; or &quot;shutdown&quot; operation to
indicate that no more items will be added.  The needs and usage of
such features tend to be implementation-dependent. For example, a
common tactic is for producers to insert special
<em>end-of-stream</em> or <em>poison</em> objects, that are
interpreted accordingly when taken by consumers.

<p>
Usage example, based on a typical producer-consumer scenario.
Note that a <tt>BlockingQueue</tt> can safely be used with multiple
producers and multiple consumers.
<pre>
class Producer implements Runnable {
  private final BlockingQueue queue;
  Producer(BlockingQueue q) { queue = q; }
  public void run() {
    try {
      while(true) { queue.put(produce()); }
    } catch (InterruptedException ex) { ... handle ...}
  }
  Object produce() { ... }
}

class Consumer implements Runnable {
  private final BlockingQueue queue;
  Consumer(BlockingQueue q) { queue = q; }
  public void run() {
    try {
      while(true) { consume(queue.take()); }
    } catch (InterruptedException ex) { ... handle ...}
  }
  void consume(Object x) { ... }
}

class Setup {
  void main() {
    BlockingQueue q = new SomeQueueImplementation();
    Producer p = new Producer(q);
    Consumer c1 = new Consumer(q);
    Consumer c2 = new Consumer(q);
    new Thread(p).start();
    new Thread(c1).start();
    new Thread(c2).start();
  }
}
</pre>

<p>This interface is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.
 
@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 1921435 // <realization>
	relation 1921435 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1921435 // <realization>
	  b parent class_ref 137243 // Queue
      end

      operation 7872667 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue, if possible.  When
using queues that may impose insertion restrictions (for
example capacity bounds), method <tt>offer</tt> is generally
preferable to method {@link Collection#add}, which can fail to
insert an element only by throwing an exception.

@param o the element to add.
@return <tt>true</tt> if it was possible to add the element to
        this queue, else <tt>false</tt>
@throws NullPointerException if the specified element is <tt>null</tt>"
      end

      operation 7872795 "offer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "o" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue, waiting if necessary
up to the specified wait time for space to become available.
@param o the element to add
@param timeout how long to wait before giving up, in units of
<tt>unit</tt>
@param unit a <tt>TimeUnit</tt> determining how to interpret the
<tt>timeout</tt> parameter
@return <tt>true</tt> if successful, or <tt>false</tt> if
the specified waiting time elapses before space is available.
@throws InterruptedException if interrupted while waiting.
@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 7872923 "poll"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting
if necessary up to the specified wait time if no elements are
present on this queue.
@param timeout how long to wait before giving up, in units of
<tt>unit</tt>
@param unit a <tt>TimeUnit</tt> determining how to interpret the
<tt>timeout</tt> parameter
@return the head of this queue, or <tt>null</tt> if the
specified waiting time elapses before an element is present.
@throws InterruptedException if interrupted while waiting."
      end

      operation 7873051 "take"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting
if no elements are present on this queue.
@return the head of this queue
@throws InterruptedException if interrupted while waiting."
      end

      operation 7873179 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" explicit_type "E"
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to this queue, waiting if necessary for
space to become available.
@param o the element to add
@throws InterruptedException if interrupted while waiting.
@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 7873307 "remainingCapacity"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements that this queue can ideally (in
the absence of memory or resource constraints) accept without
blocking, or <tt>Integer.MAX_VALUE</tt> if there is no
intrinsic limit.
<p>Note that you <em>cannot</em> always tell if
an attempt to <tt>add</tt> an element will succeed by
inspecting <tt>remainingCapacity</tt> because it may be the
case that another thread is about to <tt>put</tt> or <tt>take</tt> an
element.
@return the remaining capacity"
      end

      operation 7873435 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to this queue if it is possible to
do so immediately, returning <tt>true</tt> upon success, else
throwing an IllegalStateException.  
@param o the element
@return <tt>true</tt> (as per the general contract of
        <tt>Collection.add</tt>).

@throws NullPointerException if the specified element is <tt>null</tt>
@throws IllegalStateException if element cannot be added"
      end

      operation 7873563 "drainTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all available elements from this queue and adds them
into the given collection.  This operation may be more
efficient than repeatedly polling this queue.  A failure
encountered while attempting to <tt>add</tt> elements to
collection <tt>c</tt> may result in elements being in neither,
either or both collections when the associated exception is
thrown. Attempts to drain a queue to itself result in
<tt>IllegalArgumentException</tt>. Further, the behavior of
this operation is undefined if the specified collection is
modified while the operation is in progress.

@param c the collection to transfer elements into
@return the number of elements transferred.
@throws NullPointerException if c is null
@throws IllegalArgumentException if c is this queue
"
      end

      operation 7873691 "drainTo"
	public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 135067 // Collection
	  param in name "maxElements" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes at most the given number of available elements from
this queue and adds them into the given collection.  A failure
encountered while attempting to <tt>add</tt> elements to
collection <tt>c</tt> may result in elements being in neither,
either or both collections when the associated exception is
thrown. Attempts to drain a queue to itself result in
<tt>IllegalArgumentException</tt>. Further, the behavior of
this operation is undefined if the specified collection is
modified while the operation is in progress.

@param c the collection to transfer elements into
@param maxElements the maximum number of elements to transfer
@return the number of elements transferred.
@throws NullPointerException if c is null
@throws IllegalArgumentException if c is this queue"
      end
    end

    class 989595 "BrokenBarrierException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Exception thrown when a thread tries to wait upon a barrier that is
in a broken state, or which enters the broken state while the thread
is waiting.

@see CyclicBarrier

@since 1.5
@author Doug Lea
"
      classrelation 1922331 // <generalisation>
	relation 1922331 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1922331 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      attribute 2921243 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7117394618823254244L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7877659 "BrokenBarrierException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>BrokenBarrierException</tt> with no specified detail
message."
      end

      operation 7877787 "BrokenBarrierException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>BrokenBarrierException</tt> with the specified
detail message.

@param message the detail message"
      end
    end

    class 989723 "CancellationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Exception indicating that the result of a value-producing task,
such as a {@link FutureTask}, cannot be retrieved because the task
was cancelled.

@since 1.5
@author Doug Lea"
      classrelation 1922459 // <generalisation>
	relation 1922459 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1922459 // <generalisation>
	  b parent class_ref 282779 // IllegalStateException
      end

      attribute 2921371 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -9202173006928992231L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7878043 "CancellationException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>CancellationException</tt> with no detail message."
      end

      operation 7878171 "CancellationException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>CancellationException</tt> with the specified detail
message.

@param message the detail message"
      end
    end

    class 989851 "CompletionService"
      visibility public stereotype "interface"
      nformals 3
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A service that decouples the production of new asynchronous tasks
from the consumption of the results of completed tasks.  Producers
<tt>submit</tt> tasks for execution. Consumers <tt>take</tt>
completed tasks and process their results in the order they
complete.  A <tt>CompletionService</tt> can for example be used to
manage asynchronous IO, in which tasks that perform reads are
submitted in one part of a program or system, and then acted upon
in a different part of the program when the reads complete,
possibly in a different order than they were requested.

<p>

Typically, a <tt>CompletionService</tt> relies on a separate {@link
Executor} to actually execute the tasks, in which case the
<tt>CompletionService</tt> only manages an internal completion
queue. The {@link ExecutorCompletionService} class provides an
implementation of this approach.
"
      operation 7878299 "submit"
	public return_type class_ref 988443 // Future
	nparams 1
	  param inout name "task" type class_ref 988571 // Callable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a value-returning task for execution and returns a Future
representing the pending results of the task. Upon completion,
this task may be taken or polled.

@param task the task to submit
@return a Future representing pending completion of the task
@throws RejectedExecutionException if task cannot be scheduled
for execution
@throws NullPointerException if task null     "
      end

      operation 7878427 "submit"
	public return_type class_ref 988443 // Future
	nparams 2
	  param inout name "task" type class_ref 163355 // Runnable
	  param inout name "result" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a Runnable task for execution and returns a Future 
representing that task.Upon completion,
this task may be taken or polled.

@param task the task to submit
@param result the result to return upon successful completion
@return a Future representing pending completion of the task,
and whose <tt>get()</tt> method will return the given result value 
upon completion
@throws RejectedExecutionException if task cannot be scheduled
for execution
@throws NullPointerException if task null     "
      end

      operation 7878555 "take"
	public return_type class_ref 988443 // Future
	nparams 0
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the Future representing the next
completed task, waiting if none are yet present.
@return the Future representing the next completed task
@throws InterruptedException if interrupted while waiting."
      end

      operation 7878683 "poll"
	public return_type class_ref 988443 // Future
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the Future representing the next
completed task or <tt>null</tt> if none are present.

@return the Future representing the next completed task, or
<tt>null</tt> if none are present."
      end

      operation 7878811 "poll"
	public return_type class_ref 988443 // Future
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the Future representing the next
completed task, waiting if necessary up to the specified wait
time if none are yet present.
@param timeout how long to wait before giving up, in units of
<tt>unit</tt>
@param unit a <tt>TimeUnit</tt> determining how to interpret the
<tt>timeout</tt> parameter
@return the Future representing the next completed task or
<tt>null</tt> if the specified waiting time elapses before one
is present.
@throws InterruptedException if interrupted while waiting."
      end
    end

    class 989979 "ConcurrentHashMap"
      visibility public 
      nformals 6
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 14
      actual class class_ref 136475 // AbstractMap
        rank 0 explicit_value "K"
      actual class class_ref 136475 // AbstractMap
        rank 1 explicit_value "V"
      actual class class_ref 136475 // AbstractMap
        rank 2 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 3 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 4 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 5 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 6 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 7 explicit_value ""
      actual class class_ref 202651 // ConcurrentMap
        rank 0 explicit_value "K"
      actual class class_ref 202651 // ConcurrentMap
        rank 1 explicit_value "V"
      actual class class_ref 202651 // ConcurrentMap
        rank 2 explicit_value ""
      actual class class_ref 202651 // ConcurrentMap
        rank 3 explicit_value ""
      actual class class_ref 202651 // ConcurrentMap
        rank 4 explicit_value ""
      actual class class_ref 202651 // ConcurrentMap
        rank 5 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A hash table supporting full concurrency of retrievals and
adjustable expected concurrency for updates. This class obeys the
same functional specification as {@link java.util.Hashtable}, and
includes versions of methods corresponding to each method of
<tt>Hashtable</tt>. However, even though all operations are
thread-safe, retrieval operations do <em>not</em> entail locking,
and there is <em>not</em> any support for locking the entire table
in a way that prevents all access.  This class is fully
interoperable with <tt>Hashtable</tt> in programs that rely on its
thread safety but not on its synchronization details.

<p> Retrieval operations (including <tt>get</tt>) generally do not
block, so may overlap with update operations (including
<tt>put</tt> and <tt>remove</tt>). Retrievals reflect the results
of the most recently <em>completed</em> update operations holding
upon their onset.  For aggregate operations such as <tt>putAll</tt>
and <tt>clear</tt>, concurrent retrievals may reflect insertion or
removal of only some entries.  Similarly, Iterators and
Enumerations return elements reflecting the state of the hash table
at some point at or since the creation of the iterator/enumeration.
They do <em>not</em> throw
{@link ConcurrentModificationException}.  However, iterators are
designed to be used by only one thread at a time.

<p> The allowed concurrency among update operations is guided by
the optional <tt>concurrencyLevel</tt> constructor argument
(default 16), which is used as a hint for internal sizing.  The
table is internally partitioned to try to permit the indicated
number of concurrent updates without contention. Because placement
in hash tables is essentially random, the actual concurrency will
vary.  Ideally, you should choose a value to accommodate as many
threads as will ever concurrently modify the table. Using a
significantly higher value than you need can waste space and time,
and a significantly lower value can lead to thread contention. But
overestimates and underestimates within an order of magnitude do
not usually have much noticeable impact. A value of one is
appropriate when it is known that only one thread will modify and
all others will only read. Also, resizing this or any other kind of
hash table is a relatively slow operation, so, when possible, it is
a good idea to provide estimates of expected table sizes in
constructors.

<p>This class and its views and iterators implement all of the
<em>optional</em> methods of the {@link Map} and {@link Iterator}
interfaces.

<p> Like {@link java.util.Hashtable} but unlike {@link
java.util.HashMap}, this class does NOT allow <tt>null</tt> to be
used as a key or value.

<p>This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <K> the type of keys maintained by this map
@param <V> the type of mapped values "
      classrelation 1922587 // <realization>
	relation 1922587 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1922587 // <realization>
	  b parent class_ref 136475 // AbstractMap
      end

      classrelation 1922843 // <realization>
	relation 1922843 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1922843 // <realization>
	  b parent class_ref 202651 // ConcurrentMap
      end

      classrelation 1922971 // <realization>
	relation 1922971 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1922971 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2921499 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7249069246763182397L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2921627 "DEFAULT_INITIAL_CAPACITY"
	class_attribute package explicit_type "int"
	init_value "=  16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The basic strategy is to subdivide the table among Segments,
each of which itself is a concurrently readable hash table.

 ---------------- Constants -------------- 

The default initial number of table slots for this table.
Used when not otherwise specified in constructor.
"
      end

      attribute 2921755 "MAXIMUM_CAPACITY"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  1 << 30"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum capacity, used if a higher value is implicitly
specified by either of the constructors with arguments.  MUST
be a power of two <= 1<<30 to ensure that entries are indexible
using ints.
"
      end

      attribute 2921883 "DEFAULT_LOAD_FACTOR"
	class_attribute const_attribute package explicit_type "float"
	init_value "=  0.75f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The default load factor for this table.  Used when not
otherwise specified in constructor.
"
      end

      attribute 2922011 "DEFAULT_SEGMENTS"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The default number of concurrency control segments.
"
      end

      attribute 2922139 "MAX_SEGMENTS"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  1 << 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum number of segments to allow; used to bound
constructor arguments.

 slightly conservative"
      end

      attribute 2922267 "RETRIES_BEFORE_LOCK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Number of unsynchronized retries in size and containsValue
methods before resorting to locking. This is used to avoid
unbounded retries if tables undergo continuous modification
which would make it impossible to obtain an accurate result.
"
      end

      attribute 2922395 "segmentMask"
	const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ---------------- Fields -------------- 

Mask value for indexing into segments. The upper bits of a
key's hash code are used to choose the segment.
"
      end

      attribute 2922523 "segmentShift"
	const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Shift value for indexing within segments.
"
      end

      class 990107 "Segment"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1926299 // <generalisation>
	  relation 1926299 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1926299 // <generalisation>
	    b parent class_ref 989211 // ReentrantLock
	end

	classrelation 1926427 // <realization>
	  relation 1926427 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1926427 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 2925083 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  2249069246763182397L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Segments maintain a table of entry lists that are ALWAYS
kept in a consistent state, so can be read without locking.
Next fields of nodes are immutable (final).  All list
additions are performed at the front of each bin. This
makes it easy to check changes, and also fast to traverse.
When nodes would otherwise be changed, new nodes are
created to replace them. This works well for hash tables
since the bin lists tend to be short. (The average length
is less than two for the default load factor threshold.)

Read operations can thus proceed without locking, but rely
on selected uses of volatiles to ensure that completed
write operations performed by other threads are
noticed. For most purposes, the \"count\" field, tracking the
number of elements, serves as that volatile variable
ensuring visibility.  This is convenient because this field
needs to be read in many read operations anyway:

  - All (unsynchronized) read operations must first read the
    \"count\" field, and should not look at table entries if
    it is 0.

  - All (synchronized) write operations should write to
    the \"count\" field after structurally changing any bin.
    The operations must not take any action that could even
    momentarily cause a concurrent read operation to see
    inconsistent data. This is made easier by the nature of
    the read operations in Map. For example, no operation
    can reveal that the table has grown but the threshold
    has not yet been updated, so there are no atomicity
    requirements for this with respect to reads.

As a guide, all critical volatile reads and writes to the
count field are marked in code comments.
"
	end

	attribute 2925211 "count"
	  volatile package explicit_type "int"
	  cpp_decl ""
	  transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The number of elements in this segment's region.
"
	end

	attribute 2925339 "modCount"
	  package explicit_type "int"
	  cpp_decl ""
	  transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Number of updates that alter the size of the table. This is
used during bulk-read methods to make sure they see a
consistent snapshot: If modCounts change during a traversal
of segments computing size or checking containsValue, then
we might have an inconsistent view of state so (usually)
must retry.
"
	end

	attribute 2925467 "threshold"
	  package explicit_type "int"
	  cpp_decl ""
	  transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The table is rehashed when its size exceeds this threshold.
(The value of this field is always (int)(capacity *
loadFactor).)
"
	end

	classrelation 1926555 // table (<unidirectional association>)
	  relation 1926555 --->
	    a role_name "table" multiplicity "[]" volatile package
	      comment "
The per-segment table. Declared as a raw type, casted
to HashEntry<K,V> on each use.

"
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1926555 // table (<unidirectional association>)
	    b parent class_ref 990235 // HashEntry
	end

	attribute 2925595 "loadFactor"
	  const_attribute package explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The load factor for the hash table.  Even though this value
is same for all segments, it is replicated to avoid needing
links to outer object.
@serial
"
	end

	operation 7895835 "Segment"
	  package explicit_return_type ""
	  nparams 2
	    param in name "initialCapacity" explicit_type "int"
	    param in name "lf" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7895963 "setTable"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "newTable" type class_ref 990235 // HashEntry
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set table to new HashEntry array.
Call only while holding lock or in constructor."
	end

	operation 7896091 "getFirst"
	  package return_type class_ref 990235 // HashEntry
	  nparams 1
	    param in name "hash" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return properly casted first entry of bin for given hash"
	end

	operation 7896219 "readValueUnderLock"
	  package explicit_return_type "V"
	  nparams 1
	    param inout name "e" type class_ref 990235 // HashEntry
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Read value field of an entry under lock. Called if value
field ever appears to be null. This is possible only if a
compiler happens to reorder a HashEntry initialization with
its table assignment, which is legal under memory model
but is not known to ever occur."
	end

	operation 7896347 "get"
	  package explicit_return_type "V"
	  nparams 2
	    param inout name "key" explicit_type "Object"
	    param in name "hash" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Specialized implementations of map methods "
	end

	operation 7896475 "containsKey"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "key" explicit_type "Object"
	    param in name "hash" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7896603 "containsValue"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "value" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7896731 "replace"
	  package explicit_return_type "boolean"
	  nparams 4
	    param inout name "key" explicit_type "K"
	    param in name "hash" explicit_type "int"
	    param inout name "oldValue" explicit_type "V"
	    param inout name "newValue" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7896859 "replace"
	  package explicit_return_type "V"
	  nparams 3
	    param inout name "key" explicit_type "K"
	    param in name "hash" explicit_type "int"
	    param inout name "newValue" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7896987 "put"
	  package explicit_return_type "V"
	  nparams 4
	    param inout name "key" explicit_type "K"
	    param in name "hash" explicit_type "int"
	    param inout name "value" explicit_type "V"
	    param inout name "onlyIfAbsent" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7897115 "rehash"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7897243 "remove"
	  package explicit_return_type "V"
	  nparams 3
	    param inout name "key" explicit_type "Object"
	    param in name "hash" explicit_type "int"
	    param inout name "value" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Remove; match on key only if value null, else match both."
	end

	operation 7897371 "clear"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1923099 // segments (<unidirectional association>)
	relation 1923099 --->
	  a role_name "segments" multiplicity "[]" const_relation package
	    comment "
The segments, each of which is a specialized hash table

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1923099 // segments (<unidirectional association>)
	  b parent class_ref 990107 // Segment
      end

      classrelation 1923227 // keySet (<unidirectional association>)
	relation 1923227 --->
	  a role_name "keySet" package
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K> ${name}${value};
"
	    classrelation_ref 1923227 // keySet (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      classrelation 1923355 // entrySet (<unidirectional association>)
	relation 1923355 --->
	  a role_name "entrySet" package
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	    classrelation_ref 1923355 // entrySet (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      classrelation 1923483 // values (<unidirectional association>)
	relation 1923483 --->
	  a role_name "values" package
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	    classrelation_ref 1923483 // values (<unidirectional association>)
	  b parent class_ref 135067 // Collection
      end

      operation 7879451 "hash"
	class_operation package explicit_return_type "int"
	nparams 1
	  param inout name "x" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Small Utilities -------------- 

Returns a hash code for non-null Object x.
Uses the same hash code spreader as most other java.util hash tables.
@param x the object serving as a key
@return the hash code"
      end

      operation 7879579 "segmentFor"
	package return_type class_ref 990107 // Segment
	nparams 1
	  param in name "hash" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the segment that should be used for key with given hash
@param hash the hash code for the key
@return the segment"
      end

      class 990235 "HashEntry"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2922651 "key"
	  const_attribute package explicit_type "K"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2922779 "hash"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2922907 "value"
	  volatile package explicit_type "V"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1923611 // next (<unidirectional association>)
	  relation 1923611 --->
	    a role_name "next" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 1923611 // next (<unidirectional association>)
	    b parent class_ref 990235 // HashEntry
	end

	operation 7879707 "HashEntry"
	  package explicit_return_type ""
	  nparams 4
	    param inout name "key" explicit_type "K"
	    param in name "hash" explicit_type "int"
	    param inout name "next" type class_ref 990235 // HashEntry
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<K,V> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7897499 "ConcurrentHashMap"
	public explicit_return_type ""
	nparams 3
	  param in name "initialCapacity" explicit_type "int"
	  param in name "loadFactor" explicit_type "float"
	  param in name "concurrencyLevel" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Public operations -------------- 

Creates a new, empty map with the specified initial
capacity, load factor, and concurrency level.

@param initialCapacity the initial capacity. The implementation
performs internal sizing to accommodate this many elements.
@param loadFactor  the load factor threshold, used to control resizing.
Resizing may be performed when the average number of elements per
bin exceeds this threshold.
@param concurrencyLevel the estimated number of concurrently
updating threads. The implementation performs internal sizing
to try to accommodate this many threads.  
@throws IllegalArgumentException if the initial capacity is
negative or the load factor or concurrencyLevel are
nonpositive."
      end

      operation 7897627 "ConcurrentHashMap"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new, empty map with the specified initial
capacity, and with default load factor and concurrencyLevel.

@param initialCapacity the initial capacity. The implementation
performs internal sizing to accommodate this many elements.
@throws IllegalArgumentException if the initial capacity of
elements is negative."
      end

      operation 7897755 "ConcurrentHashMap"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new, empty map with a default initial capacity,
load factor, and concurrencyLevel."
      end

      operation 7897883 "ConcurrentHashMap"
	public explicit_return_type ""
	nparams 1
	  param inout name "t" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new map with the same mappings as the given map.  The
map is created with a capacity of twice the number of mappings in
the given map or 11 (whichever is greater), and a default load factor
and concurrencyLevel.
@param t the map"
      end

      operation 7898011 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " inherit Map javadoc"
      end

      operation 7898139 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " inherit Map javadoc"
      end

      operation 7898267 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which the specified key is mapped in this table.

@param   key   a key in the table.
@return  the value to which the key is mapped in this table;
         <tt>null</tt> if the key is not mapped to any value in
         this table.
@throws  NullPointerException  if the key is
              <tt>null</tt>."
      end

      operation 7898395 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the specified object is a key in this table.

@param   key   possible key.
@return  <tt>true</tt> if and only if the specified object
         is a key in this table, as determined by the
         <tt>equals</tt> method; <tt>false</tt> otherwise.
@throws  NullPointerException  if the key is
              <tt>null</tt>."
      end

      operation 7898523 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map maps one or more keys to the
specified value. Note: This method requires a full internal
traversal of the hash table, and so is much slower than
method <tt>containsKey</tt>.

@param value value whose presence in this map is to be tested.
@return <tt>true</tt> if this map maps one or more keys to the
specified value.
@throws  NullPointerException  if the value is <tt>null</tt>."
      end

      operation 7898651 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Legacy method testing if some key maps into the specified value
in this table.  This method is identical in functionality to
{@link #containsValue}, and  exists solely to ensure
full compatibility with class {@link java.util.Hashtable},
which supported this method prior to introduction of the
Java Collections framework.

@param      value   a value to search for.
@return     <tt>true</tt> if and only if some key maps to the
            <tt>value</tt> argument in this table as
            determined by the <tt>equals</tt> method;
            <tt>false</tt> otherwise.
@throws  NullPointerException  if the value is <tt>null</tt>."
      end

      operation 7898779 "put"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Maps the specified <tt>key</tt> to the specified
<tt>value</tt> in this table. Neither the key nor the
value can be <tt>null</tt>. 

<p> The value can be retrieved by calling the <tt>get</tt> method
with a key that is equal to the original key.

@param      key     the table key.
@param      value   the value.
@return     the previous value of the specified key in this table,
            or <tt>null</tt> if it did not have one.
@throws  NullPointerException  if the key or value is
              <tt>null</tt>."
      end

      operation 7898907 "putIfAbsent"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the specified key is not already associated
with a value, associate it with the given value.
This is equivalent to
<pre>
  if (!map.containsKey(key)) 
     return map.put(key, value);
  else
     return map.get(key);
</pre>
Except that the action is performed atomically.
@param key key with which the specified value is to be associated.
@param value value to be associated with the specified key.
@return previous value associated with specified key, or <tt>null</tt>
        if there was no mapping for key.
@throws NullPointerException if the specified key or value is
           <tt>null</tt>."
      end

      operation 7899035 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies all of the mappings from the specified map to this one.

These mappings replace any mappings that this map had for any of the
keys currently in the specified Map.

@param t Mappings to be stored in this map."
      end

      operation 7899163 "remove"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the key (and its corresponding value) from this
table. This method does nothing if the key is not in the table.

@param   key   the key that needs to be removed.
@return  the value to which the key had been mapped in this table,
         or <tt>null</tt> if the key did not have a mapping.
@throws  NullPointerException  if the key is
              <tt>null</tt>."
      end

      operation 7899291 "remove"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "key" explicit_type "Object"
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove entry for key only if currently mapped to given value.
Acts as
<pre> 
 if (map.get(key).equals(value)) {
    map.remove(key);
    return true;
} else return false;
</pre>
except that the action is performed atomically.
@param key key with which the specified value is associated.
@param value value associated with the specified key.
@return true if the value was removed
@throws NullPointerException if the specified key is
           <tt>null</tt>."
      end

      operation 7899419 "replace"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "key" explicit_type "K"
	  param inout name "oldValue" explicit_type "V"
	  param inout name "newValue" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replace entry for key only if currently mapped to given value.
Acts as
<pre> 
 if (map.get(key).equals(oldValue)) {
    map.put(key, newValue);
    return true;
} else return false;
</pre>
except that the action is performed atomically.
@param key key with which the specified value is associated.
@param oldValue value expected to be associated with the specified key.
@param newValue value to be associated with the specified key.
@return true if the value was replaced
@throws NullPointerException if the specified key or values are
<tt>null</tt>."
      end

      operation 7899547 "replace"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replace entry for key only if currently mapped to some value.
Acts as
<pre> 
 if ((map.containsKey(key)) {
    return map.put(key, value);
} else return null;
</pre>
except that the action is performed atomically.
@param key key with which the specified value is associated.
@param value value to be associated with the specified key.
@return previous value associated with specified key, or <tt>null</tt>
        if there was no mapping for key.  
@throws NullPointerException if the specified key or value is
           <tt>null</tt>."
      end

      operation 7899675 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all mappings from this map."
      end

      operation 7899803 "keySet"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a set view of the keys contained in this map.  The set is
backed by the map, so changes to the map are reflected in the set, and
vice-versa.  The set supports element removal, which removes the
corresponding mapping from this map, via the <tt>Iterator.remove</tt>,
<tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and
<tt>clear</tt> operations.  It does not support the <tt>add</tt> or
<tt>addAll</tt> operations.
The view's returned <tt>iterator</tt> is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException},
and guarantees to traverse elements as they existed upon
construction of the iterator, and may (but is not guaranteed to)
reflect any modifications subsequent to construction.

@return a set view of the keys contained in this map."
      end

      operation 7899931 "values"
	public return_type class_ref 135067 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a collection view of the values contained in this map.  The
collection is backed by the map, so changes to the map are reflected in
the collection, and vice-versa.  The collection supports element
removal, which removes the corresponding mapping from this map, via the
<tt>Iterator.remove</tt>, <tt>Collection.remove</tt>,
<tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations.
It does not support the <tt>add</tt> or <tt>addAll</tt> operations.
The view's returned <tt>iterator</tt> is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException},
and guarantees to traverse elements as they existed upon
construction of the iterator, and may (but is not guaranteed to)
reflect any modifications subsequent to construction.

@return a collection view of the values contained in this map."
      end

      operation 7900059 "entrySet"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a collection view of the mappings contained in this map.  Each
element in the returned collection is a <tt>Map.Entry</tt>.  The
collection is backed by the map, so changes to the map are reflected in
the collection, and vice-versa.  The collection supports element
removal, which removes the corresponding mapping from the map, via the
<tt>Iterator.remove</tt>, <tt>Collection.remove</tt>,
<tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations.
It does not support the <tt>add</tt> or <tt>addAll</tt> operations.
The view's returned <tt>iterator</tt> is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException},
and guarantees to traverse elements as they existed upon
construction of the iterator, and may (but is not guaranteed to)
reflect any modifications subsequent to construction.

@return a collection view of the mappings contained in this map."
      end

      operation 7900187 "keys"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the keys in this table.

@return  an enumeration of the keys in this table.
@see     #keySet"
      end

      operation 7900315 "elements"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the values in this table.

@return  an enumeration of the values in this table.
@see     #values"
      end

      class 991259 "HashIterator"
	abstract visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2925723 "nextSegmentIndex"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2925851 "nextTableIndex"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1926683 // currentTable (<unidirectional association>)
	  relation 1926683 --->
	    a role_name "currentTable" multiplicity "[]" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1926683 // currentTable (<unidirectional association>)
	    b parent class_ref 990235 // HashEntry
	end

	classrelation 1926811 // nextEntry (<unidirectional association>)
	  relation 1926811 --->
	    a role_name "nextEntry" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K, V> ${name}${value};
"
	      classrelation_ref 1926811 // nextEntry (<unidirectional association>)
	    b parent class_ref 990235 // HashEntry
	end

	classrelation 1926939 // lastReturned (<unidirectional association>)
	  relation 1926939 --->
	    a role_name "lastReturned" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K, V> ${name}${value};
"
	      classrelation_ref 1926939 // lastReturned (<unidirectional association>)
	    b parent class_ref 990235 // HashEntry
	end

	operation 7900443 "HashIterator"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7900571 "hasMoreElements"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7900699 "advance"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7900827 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7900955 "nextEntry"
	  package return_type class_ref 990235 // HashEntry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7901083 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 991387 "KeyIterator"
	visibility package 
	nactuals 14
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 2 explicit_value ""
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 3 explicit_value ""
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 4 explicit_value ""
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 5 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "K"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	actual class class_ref 144411 // Enumeration
	  rank 0 explicit_value "K"
	actual class class_ref 144411 // Enumeration
	  rank 1 explicit_value ""
	actual class class_ref 144411 // Enumeration
	  rank 2 explicit_value ""
	actual class class_ref 144411 // Enumeration
	  rank 3 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1927067 // <generalisation>
	  relation 1927067 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1927067 // <generalisation>
	    b parent class_ref 991259 // HashIterator
	end

	classrelation 1927195 // <realization>
	  relation 1927195 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1927195 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	classrelation 1927323 // <realization>
	  relation 1927323 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1927323 // <realization>
	    b parent class_ref 144411 // Enumeration
	end

	operation 7901211 "next"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7901339 "nextElement"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 991515 "ValueIterator"
	visibility package 
	nactuals 14
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 2 explicit_value ""
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 3 explicit_value ""
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 4 explicit_value ""
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 5 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "V"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	actual class class_ref 144411 // Enumeration
	  rank 0 explicit_value "V"
	actual class class_ref 144411 // Enumeration
	  rank 1 explicit_value ""
	actual class class_ref 144411 // Enumeration
	  rank 2 explicit_value ""
	actual class class_ref 144411 // Enumeration
	  rank 3 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1927451 // <generalisation>
	  relation 1927451 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1927451 // <generalisation>
	    b parent class_ref 991259 // HashIterator
	end

	classrelation 1927579 // <realization>
	  relation 1927579 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1927579 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	classrelation 1927707 // <realization>
	  relation 1927707 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1927707 // <realization>
	    b parent class_ref 144411 // Enumeration
	end

	operation 7901467 "next"
	  public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7901595 "nextElement"
	  public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 991643 "EntryIterator"
	visibility package 
	nactuals 22
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 2 explicit_value ""
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 3 explicit_value ""
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 4 explicit_value ""
	actual class class_ref 989979 // ConcurrentHashMap
	  rank 5 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 0 explicit_value "K"
	actual class class_ref 136603 // Map
	  rank 1 explicit_value "V"
	actual class class_ref 136603 // Map
	  rank 2 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 3 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 4 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 5 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 6 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 7 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 0 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 1 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 2 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 3 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "Entry<K,V>"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1927835 // <generalisation>
	  relation 1927835 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1927835 // <generalisation>
	    b parent class_ref 991259 // HashIterator
	end

	classrelation 1927963 // <realization>
	  relation 1927963 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1927963 // <realization>
	    b parent class_ref 136859 // Entry
	end

	classrelation 1928091 // <realization>
	  relation 1928091 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1928091 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	operation 7901723 "next"
	  public return_type class_ref 136859 // Entry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7901851 "getKey"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7901979 "getValue"
	  public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7902107 "setValue"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7902235 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7902363 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7902491 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7902619 "eq"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "o1" explicit_type "Object"
	    param inout name "o2" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 991771 "KeySet"
	visibility package 
	nactuals 4
	actual class class_ref 137499 // AbstractSet
	  rank 0 explicit_value "K"
	actual class class_ref 137499 // AbstractSet
	  rank 1 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 2 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 3 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1928219 // <realization>
	  relation 1928219 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1928219 // <realization>
	    b parent class_ref 137499 // AbstractSet
	end

	operation 7902747 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7902875 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7903003 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7903131 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7903259 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7903387 "toArray"
	  public explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7903515 "toArray"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 991899 "Values"
	visibility package 
	nactuals 4
	actual class class_ref 134939 // AbstractCollection
	  rank 0 explicit_value "V"
	actual class class_ref 134939 // AbstractCollection
	  rank 1 explicit_value ""
	actual class class_ref 134939 // AbstractCollection
	  rank 2 explicit_value ""
	actual class class_ref 134939 // AbstractCollection
	  rank 3 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1928347 // <realization>
	  relation 1928347 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1928347 // <realization>
	    b parent class_ref 134939 // AbstractCollection
	end

	operation 7903643 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7903771 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7903899 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7904027 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7904155 "toArray"
	  public explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7904283 "toArray"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 992027 "EntrySet"
	visibility package 
	nactuals 4
	actual class class_ref 137499 // AbstractSet
	  rank 0 explicit_value "Map.Entry<K,V>"
	actual class class_ref 137499 // AbstractSet
	  rank 1 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 2 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 3 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1928475 // <realization>
	  relation 1928475 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1928475 // <realization>
	    b parent class_ref 137499 // AbstractSet
	end

	operation 7904411 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7904539 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7904667 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7904795 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7904923 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7905051 "toArray"
	  public explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7905179 "toArray"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 992155 "ConcurrentLinkedQueue"
      visibility public 
      nformals 3
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 8
      actual class class_ref 137115 // AbstractQueue
        rank 0 explicit_value "E"
      actual class class_ref 137115 // AbstractQueue
        rank 1 explicit_value ""
      actual class class_ref 137115 // AbstractQueue
        rank 2 explicit_value ""
      actual class class_ref 137115 // AbstractQueue
        rank 3 explicit_value ""
      actual class class_ref 137243 // Queue
        rank 0 explicit_value "E"
      actual class class_ref 137243 // Queue
        rank 1 explicit_value ""
      actual class class_ref 137243 // Queue
        rank 2 explicit_value ""
      actual class class_ref 137243 // Queue
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An unbounded thread-safe {@linkplain Queue queue} based on linked nodes.  
This queue orders elements FIFO (first-in-first-out).
The <em>head</em> of the queue is that element that has been on the
queue the longest time.
The <em>tail</em> of the queue is that element that has been on the
queue the shortest time. New elements
are inserted at the tail of the queue, and the queue retrieval
operations obtain elements at the head of the queue.
A <tt>ConcurrentLinkedQueue</tt> is an appropriate choice when 
many threads will share access to a common collection.
This queue does not permit <tt>null</tt> elements.

<p>This implementation employs an efficient &quot;wait-free&quot; 
algorithm based on one described in <a
href=\"http://www.cs.rochester.edu/u/michael/PODC96.html\"> Simple,
Fast, and Practical Non-Blocking and Blocking Concurrent Queue
Algorithms</a> by Maged M. Michael and Michael L. Scott.

<p>Beware that, unlike in most collections, the <tt>size</tt> method
is <em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these queues, determining the current number
of elements requires a traversal of the elements.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.

<p>This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 1928603 // <realization>
	relation 1928603 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1928603 // <realization>
	  b parent class_ref 137115 // AbstractQueue
      end

      classrelation 1928731 // <realization>
	relation 1928731 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1928731 // <realization>
	  b parent class_ref 137243 // Queue
      end

      classrelation 1928859 // <realization>
	relation 1928859 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1928859 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2925979 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  196745693267521676L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 992283 "Node"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2926107 "item"
	  volatile private explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1928987 // next (<unidirectional association>)
	  relation 1928987 --->
	    a role_name "next" volatile private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 1928987 // next (<unidirectional association>)
	    b parent class_ref 992283 // Node
	end

	classrelation 1929115 // nextUpdater (<unidirectional association>)
	  relation 1929115 --->
	    a role_name "nextUpdater" init_value "= 
            AtomicReferenceFieldUpdater.newUpdater
            (Node.class, Node.class, \"next\")" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Node, Node> ${name}${value};
"
	      classrelation_ref 1929115 // nextUpdater (<unidirectional association>)
	    b parent class_ref 902939 // AtomicReferenceFieldUpdater
	end

	classrelation 1929243 // itemUpdater (<unidirectional association>)
	  relation 1929243 --->
	    a role_name "itemUpdater" init_value "= 
            AtomicReferenceFieldUpdater.newUpdater
            (Node.class, Object.class, \"item\")" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Node, Object> ${name}${value};
"
	      classrelation_ref 1929243 // itemUpdater (<unidirectional association>)
	    b parent class_ref 902939 // AtomicReferenceFieldUpdater
	end

	operation 7905307 "Node"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "x" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7905435 "Node"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "x" explicit_type "E"
	    param inout name "n" type class_ref 992283 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7905563 "getItem"
	  package explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7905691 "casItem"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" explicit_type "E"
	    param inout name "val" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7905819 "setItem"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "val" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7905947 "getNext"
	  package return_type class_ref 992283 // Node
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7906075 "casNext"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 992283 // Node
	    param inout name "val" type class_ref 992283 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7906203 "setNext"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "val" type class_ref 992283 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1929371 // tailUpdater (<unidirectional association>)
	relation 1929371 --->
	  a role_name "tailUpdater" init_value "=  
        AtomicReferenceFieldUpdater.newUpdater
        (ConcurrentLinkedQueue.class, Node.class, \"tail\")" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ConcurrentLinkedQueue, Node> ${name}${value};
"
	    classrelation_ref 1929371 // tailUpdater (<unidirectional association>)
	  b parent class_ref 902939 // AtomicReferenceFieldUpdater
      end

      classrelation 1929499 // headUpdater (<unidirectional association>)
	relation 1929499 --->
	  a role_name "headUpdater" init_value "=  
        AtomicReferenceFieldUpdater.newUpdater
        (ConcurrentLinkedQueue.class,  Node.class, \"head\")" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ConcurrentLinkedQueue, Node> ${name}${value};
"
	    classrelation_ref 1929499 // headUpdater (<unidirectional association>)
	  b parent class_ref 902939 // AtomicReferenceFieldUpdater
      end

      operation 7906331 "casTail"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 992283 // Node
	  param inout name "val" type class_ref 992283 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7906459 "casHead"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 992283 // Node
	  param inout name "val" type class_ref 992283 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1929627 // head (<unidirectional association>)
	relation 1929627 --->
	  a role_name "head" init_value "=  new Node<E>(null, null)" volatile private
	    comment "
Pointer to header node, initialized to a dummy node.  The first
actual node is at head.getNext().

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 1929627 // head (<unidirectional association>)
	  b parent class_ref 992283 // Node
      end

      classrelation 1929755 // tail (<unidirectional association>)
	relation 1929755 --->
	  a role_name "tail" init_value "=  head" volatile private
	    comment " Pointer to last node on list *
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 1929755 // tail (<unidirectional association>)
	  b parent class_ref 992283 // Node
      end

      operation 7906587 "ConcurrentLinkedQueue"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>ConcurrentLinkedQueue</tt> that is initially empty."
      end

      operation 7906715 "ConcurrentLinkedQueue"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>ConcurrentLinkedQueue</tt> 
initially containing the elements of the given collection,
added in traversal order of the collection's iterator.
@param c the collection of elements to initially contain
@throws NullPointerException if <tt>c</tt> or any element within it
is <tt>null</tt>"
      end

      operation 7906843 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Have to override just to update the javadoc 

Adds the specified element to the tail of this queue.
@param o the element to add.
@return <tt>true</tt> (as per the general contract of
<tt>Collection.add</tt>).

@throws NullPointerException if the specified element is <tt>null</tt>"
      end

      operation 7906971 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element to the tail of this queue.

@param o the element to add.
@return <tt>true</tt> (as per the general contract of
<tt>Queue.offer</tt>).
@throws NullPointerException if the specified element is <tt>null</tt>"
      end

      operation 7907099 "poll"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7907227 "peek"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7907355 "first"
	package return_type class_ref 992283 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first actual (non-header) node on list.  This is yet
another variant of poll/peek; here returning out the first
node, not element (so we cannot collapse with peek() without
introducing race.)"
      end

      operation 7907483 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7907611 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this queue.  If this queue
contains more than <tt>Integer.MAX_VALUE</tt> elements, returns
<tt>Integer.MAX_VALUE</tt>.

<p>Beware that, unlike in most collections, this method is
<em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these queues, determining the current
number of elements requires an O(n) traversal.

@return  the number of elements in this queue."
      end

      operation 7907739 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7907867 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7907995 "toArray"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7908123 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7908251 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue in proper sequence.
The returned iterator is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException},
and guarantees to traverse elements as they existed upon
construction of the iterator, and may (but is not guaranteed to)
reflect any modifications subsequent to construction.

@return an iterator over the elements in this queue in proper sequence."
      end

      class 992411 "Itr"
	visibility private 
	nactuals 4
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "E"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1929883 // <realization>
	  relation 1929883 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1929883 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	classrelation 1930011 // nextNode (<unidirectional association>)
	  relation 1930011 --->
	    a role_name "nextNode" private
	      comment "
Next node to return item for.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 1930011 // nextNode (<unidirectional association>)
	    b parent class_ref 992283 // Node
	end

	attribute 2926235 "nextItem"
	  private explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "nextItem holds on to item fields because once we claim
that an element exists in hasNext(), we must return it in
the following next() call even if it was in the process of
being removed when hasNext() was called.
"
	end

	classrelation 1930139 // lastRet (<unidirectional association>)
	  relation 1930139 --->
	    a role_name "lastRet" private
	      comment "
Node of the last returned item, to support remove.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 1930139 // lastRet (<unidirectional association>)
	    b parent class_ref 992283 // Node
	end

	operation 7908379 "Itr"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7908507 "advance"
	  private explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Moves to next valid node and returns item to return for
next(), or null if no such."
	end

	operation 7908635 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7908763 "next"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7908891 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7909019 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state to a stream (that is, serialize it).

@serialData All of the elements (each an <tt>E</tt>) in
the proper order, followed by a null
@param s the stream"
      end

      operation 7909147 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the Queue instance from a stream (that is,
deserialize it).
@param s the stream"
      end
    end

    class 992539 "CopyOnWriteArrayList"
      visibility public 
      nformals 3
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 135579 // List
        rank 0 explicit_value "E"
      actual class class_ref 135579 // List
        rank 1 explicit_value ""
      actual class class_ref 135579 // List
        rank 2 explicit_value ""
      actual class class_ref 135579 // List
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A thread-safe variant of {@link java.util.ArrayList} in which all mutative
operations (add, set, and so on) are implemented by making a fresh
copy of the underlying array.

<p> This is ordinarily too costly, but may be <em>more</em> efficient
than alternatives when traversal operations vastly outnumber
mutations, and is useful when you cannot or don't want to
synchronize traversals, yet need to preclude interference among
concurrent threads.  The \"snapshot\" style iterator method uses a
reference to the state of the array at the point that the iterator
was created. This array never changes during the lifetime of the
iterator, so interference is impossible and the iterator is
guaranteed not to throw <tt>ConcurrentModificationException</tt>.
The iterator will not reflect additions, removals, or changes to
the list since the iterator was created.  Element-changing
operations on iterators themselves (remove, set, and add) are not
supported. These methods throw
<tt>UnsupportedOperationException</tt>.

<p>This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 1930267 // <realization>
	relation 1930267 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1930267 // <realization>
	  b parent class_ref 135579 // List
      end

      classrelation 1930395 // <realization>
	relation 1930395 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1930395 // <realization>
	  b parent class_ref 136347 // RandomAccess
      end

      classrelation 1930523 // <realization>
	relation 1930523 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1930523 // <realization>
	  b parent class_ref 339867 // Cloneable
      end

      classrelation 1930651 // <realization>
	relation 1930651 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1930651 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2926363 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  8673264195747942595L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2926491 "array"
	volatile private explicit_type "E"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The held array. Directly accessed only within synchronized
 methods
"
      end

      operation 7909275 "array"
	private explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accessor to the array intended to be called from
within unsynchronized read-only methods"
      end

      operation 7909403 "CopyOnWriteArrayList"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty list."
      end

      operation 7909531 "CopyOnWriteArrayList"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a list containing the elements of the specified
Collection, in the order they are returned by the Collection's
iterator.
@param c the collection of initially held elements"
      end

      operation 7909659 "CopyOnWriteArrayList"
	public explicit_return_type ""
	nparams 1
	  param inout name "toCopyIn" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new CopyOnWriteArrayList holding a copy of given array.

@param toCopyIn the array (a copy of this array is used as the
       internal array)"
      end

      operation 7909787 "copyIn"
	private explicit_return_type "void"
	nparams 3
	  param inout name "toCopyIn" explicit_type "E"
	  param in name "first" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replace the held array with a copy of the <tt>n</tt> elements
of the provided array, starting at position <tt>first</tt>.  To
copy an entire array, call with arguments (array, 0,
array.length).
@param toCopyIn the array. A copy of the indicated elements of
this array is used as the internal array.
@param first The index of first position of the array to
start copying from.
@param n the number of elements to copy. This will be the new size of
the list."
      end

      operation 7909915 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this list.

@return  the number of elements in this list."
      end

      operation 7910043 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this list has no elements.

@return  <tt>true</tt> if this list has no elements;
         <tt>false</tt> otherwise."
      end

      operation 7910171 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "elem" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this list contains the specified element.

@param elem element whose presence in this List is to be tested.
@return  <code>true</code> if the specified element is present;
         <code>false</code> otherwise."
      end

      operation 7910299 "indexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "elem" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches for the first occurrence of the given argument, testing 
for equality using the <tt>equals</tt> method. 

@param   elem   an object.
@return  the index of the first occurrence of the argument in this
         list; returns <tt>-1</tt> if the object is not found.
@see     Object#equals(Object)"
      end

      operation 7910427 "indexOf"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "elem" explicit_type "Object"
	  param inout name "elementData" explicit_type "Object"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "static version allows repeated call without needed
to grab lock for array each time"
      end

      operation 7910555 "indexOf"
	public explicit_return_type "int"
	nparams 2
	  param inout name "elem" explicit_type "E"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches for the first occurrence of the given argument, beginning
the search at <tt>index</tt>, and testing for equality using
the <tt>equals</tt> method.

@param   elem    an object.
@param   index   the index to start searching from.
@return  the index of the first occurrence of the object argument in
         this List at position <tt>index</tt> or later in the
         List; returns <tt>-1</tt> if the object is not found.
@see     Object#equals(Object)"
      end

      operation 7910683 "lastIndexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "elem" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the last occurrence of the specified object in
this list.

@param   elem   the desired element.
@return  the index of the last occurrence of the specified object in
         this list; returns -1 if the object is not found."
      end

      operation 7910811 "lastIndexOf"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "elem" explicit_type "Object"
	  param inout name "elementData" explicit_type "Object"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7910939 "lastIndexOf"
	public explicit_return_type "int"
	nparams 2
	  param inout name "elem" explicit_type "E"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches backwards for the specified object, starting from the
specified index, and returns an index to it.

@param  elem    the desired element.
@param  index   the index to start searching from.
@return the index of the last occurrence of the specified object in this
         List at position less than index in the List;
         -1 if the object is not found."
      end

      operation 7911067 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow copy of this list.  (The elements themselves
are not copied.)

@return  a clone of this list."
      end

      operation 7911195 "toArray"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this list
in the correct order.
@return an array containing all of the elements in this list
        in the correct order."
      end

      operation 7911323 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this list in the
correct order.  The runtime type of the returned array is that of the
specified array.  If the list fits in the specified array, it is
returned therein.  Otherwise, a new array is allocated with the runtime
type of the specified array and the size of this list.
<p>
If the list fits in the specified array with room to spare
(i.e., the array has more elements than the list),
the element in the array immediately following the end of the
collection is set to null.  This is useful in determining the length
of the list <em>only</em> if the caller knows that the list
does not contain any null elements.

@param a the array into which the elements of the list are to
           be stored, if it is big enough; otherwise, a new array of the
           same runtime type is allocated for this purpose.
@return an array containing the elements of the list.
@throws ArrayStoreException the runtime type of a is not a supertype
of the runtime type of every element in this list."
      end

      operation 7911451 "get"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Positional Access Operations

Returns the element at the specified position in this list.

@param  index index of element to return.
@return the element at the specified position in this list.
@throws    IndexOutOfBoundsException if index is out of range <tt>(index
           &lt; 0 || index &gt;= size())</tt>."
      end

      operation 7911579 "set"
	public explicit_return_type "E"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the element at the specified position in this list with
the specified element.

@param index index of element to replace.
@param element element to be stored at the specified position.
@return the element previously at the specified position.
@throws    IndexOutOfBoundsException if index out of range
           <tt>(index &lt; 0 || index &gt;= size())</tt>."
      end

      operation 7911707 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified element to the end of this list.

@param element element to be appended to this list.
@return true (as per the general contract of Collection.add)."
      end

      operation 7911835 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the specified position in this
list. Shifts the element currently at that position (if any) and
any subsequent elements to the right (adds one to their indices).

@param index index at which the specified element is to be inserted.
@param element element to be inserted.
@throws    IndexOutOfBoundsException if index is out of range
           <tt>(index &lt; 0 || index &gt; size())</tt>."
      end

      operation 7911963 "remove"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the element at the specified position in this list.
Shifts any subsequent elements to the left (subtracts one from their
indices).

@param index the index of the element to removed.
@return the element that was removed from the list.
@throws    IndexOutOfBoundsException if index out of range <tt>(index
           &lt; 0 || index &gt;= size())</tt>."
      end

      operation 7912091 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this
list, if it is present (optional operation).  More formally,
removes an element <tt>e</tt> such that <tt>(o==null ? e==null :
o.equals(e))</tt>, if the list contains one or more such
elements.  Returns <tt>true</tt> if the list contained the
specified element (or equivalently, if the list changed as a
result of the call).<p>

@param o element to be removed from this list, if present.
@return <tt>true</tt> if the list contained the specified element."
      end

      operation 7912219 "removeRange"
	private explicit_return_type "void"
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this List all of the elements whose index is between
fromIndex, inclusive and toIndex, exclusive.  Shifts any succeeding
elements to the left (reduces their index).
This call shortens the list by <tt>(toIndex - fromIndex)</tt> elements.
(If <tt>toIndex==fromIndex</tt>, this operation has no effect.)

@param fromIndex index of first element to be removed.
@param toIndex index after last element to be removed.
@throws IndexOutOfBoundsException fromIndex or toIndex out of
             range (fromIndex &lt; 0 || fromIndex &gt;= size() || toIndex
             &gt; size() || toIndex &lt; fromIndex)."
      end

      operation 7912347 "addIfAbsent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append the element if not present.
@param element element to be added to this Collection, if absent.
@return true if added"
      end

      operation 7912475 "containsAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this Collection contains all of the elements in the
specified Collection.
<p>
This implementation iterates over the specified Collection, checking
each element returned by the Iterator in turn to see if it's
contained in this Collection.  If all elements are so contained
true is returned, otherwise false.
@param c the collection
@return true if all elements are contained"
      end

      operation 7912603 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this Collection all of its elements that are contained in
the specified Collection. This is a particularly expensive operation
in this class because of the need for an internal temporary array.
<p>

@param c the collection
@return true if this Collection changed as a result of the call."
      end

      operation 7912731 "retainAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retains only the elements in this Collection that are contained in the
specified Collection (optional operation).  In other words, removes from
this Collection all of its elements that are not contained in the
specified Collection.
@param c the collection
@return true if this Collection changed as a result of the call."
      end

      operation 7912859 "addAllAbsent"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all of the elements in the specified Collection that
are not already contained in this list, to the end of
this list, in the order that they are returned by the
specified Collection's Iterator.

@param c elements to be added into this list.
@return the number of elements added"
      end

      operation 7912987 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this list.
"
      end

      operation 7913115 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all of the elements in the specified Collection to the end of
this list, in the order that they are returned by the
specified Collection's Iterator.

@param c elements to be inserted into this list.
@return true if any elements are added"
      end

      operation 7913243 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts all of the elements in the specified Collection into this
list, starting at the specified position.  Shifts the element
currently at that position (if any) and any subsequent elements to
the right (increases their indices).  The new elements will appear
in the list in the order that they are returned by the
specified Collection's iterator.

@param index index at which to insert first element
               from the specified collection.
@param c elements to be inserted into this list.
@throws IndexOutOfBoundsException index out of range (index
             &lt; 0 || index &gt; size()).
@return true if any elements are added"
      end

      operation 7913371 "rangeCheck"
	private explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if the given index is in range.  If not, throw an appropriate
runtime exception."
      end

      operation 7913499 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state of the list to a stream (i.e., serialize it).

@serialData The length of the array backing the list is emitted
              (int), followed by all of its elements (each an Object)
              in the proper order.
@param s the stream"
      end

      operation 7913627 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the list from a stream (i.e., deserialize it).
@param s the stream"
      end

      operation 7913755 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this Collection, containing
the String representation of each element."
      end

      operation 7913883 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified Object with this List for equality.  Returns true
if and only if the specified Object is also a List, both Lists have the
same size, and all corresponding pairs of elements in the two Lists are
<em>equal</em>.  (Two elements <tt>e1</tt> and <tt>e2</tt> are
<em>equal</em> if <tt>(e1==null ? e2==null : e1.equals(e2))</tt>.)
In other words, two Lists are defined to be equal if they contain the
same elements in the same order.
<p>
This implementation first checks if the specified object is this
List. If so, it returns true; if not, it checks if the specified
object is a List. If not, it returns false; if so, it iterates over
both lists, comparing corresponding pairs of elements.  If any
comparison returns false, this method returns false.  If either
Iterator runs out of elements before the other it returns false
(as the Lists are of unequal length); otherwise it returns true when
the iterations complete.

@param o the Object to be compared for equality with this List.
@return true if the specified Object is equal to this List."
      end

      operation 7914011 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this List.

<p> This implementation uses the definition in {@link
List#hashCode}.
@return the hash code"
      end

      operation 7914139 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an Iterator over the elements contained in this collection.
The iterator provides a snapshot of the state of the list
when the iterator was constructed. No synchronization is
needed while traversing the iterator. The iterator does
<em>NOT</em> support the <tt>remove</tt> method.
@return the iterator"
      end

      operation 7914267 "listIterator"
	public return_type class_ref 135707 // ListIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an Iterator of the elements in this List (in proper sequence).
The iterator provides a snapshot of the state of the list
when the iterator was constructed. No synchronization is
needed while traversing the iterator. The iterator does
<em>NOT</em> support the <tt>remove</tt>, <tt>set</tt>,
or <tt>add</tt> methods.
@return the iterator
"
      end

      operation 7914395 "listIterator"
	public return_type class_ref 135707 // ListIterator
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a ListIterator of the elements in this List (in proper
sequence), starting at the specified position in the List.  The
specified index indicates the first element that would be returned by
an initial call to nextElement.  An initial call to previousElement
would return the element with the specified index minus one.
The ListIterator returned by this implementation will throw
an UnsupportedOperationException in its remove, set and
add methods.

@param index index of first element to be returned from the
               ListIterator (by a call to getNext).
@return the iterator
@throws IndexOutOfBoundsException index is out of range
             (index &lt; 0 || index &gt; size())."
      end

      class 992667 "COWIterator"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135707 // ListIterator
	  rank 0 explicit_value "E"
	actual class class_ref 135707 // ListIterator
	  rank 1 explicit_value ""
	actual class class_ref 135707 // ListIterator
	  rank 2 explicit_value ""
	actual class class_ref 135707 // ListIterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1930779 // <realization>
	  relation 1930779 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1930779 // <realization>
	    b parent class_ref 135707 // ListIterator
	end

	attribute 2926619 "array"
	  const_attribute private explicit_type "E"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Snapshot of the array *"
	end

	attribute 2926747 "cursor"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Index of element to be returned by subsequent call to next.
"
	end

	operation 7914523 "COWIterator"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "elementArray" explicit_type "E"
	    param in name "initialCursor" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7914651 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7914779 "hasPrevious"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7914907 "next"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7915035 "previous"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7915163 "nextIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7915291 "previousIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7915419 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Not supported. Always throws UnsupportedOperationException.
@throws UnsupportedOperationException remove is not supported
           by this Iterator."
	end

	operation 7915547 "set"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "o" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Not supported. Always throws UnsupportedOperationException.
@throws UnsupportedOperationException set is not supported
           by this Iterator."
	end

	operation 7915675 "add"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "o" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Not supported. Always throws UnsupportedOperationException.
@throws UnsupportedOperationException add is not supported
           by this Iterator."
	end
      end

      operation 7915803 "subList"
	public return_type class_ref 135579 // List
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this List between fromIndex,
inclusive, and toIndex, exclusive.  The returned List is backed by this
List, so changes in the returned List are reflected in this List, and
vice-versa.  While mutative operations are supported, they are
probably not very useful for CopyOnWriteArrayLists.
<p>
The semantics of the List returned by this method become undefined if
the backing list (i.e., this List) is <i>structurally modified</i> in
any way other than via the returned List.  (Structural modifications are
those that change the size of the List, or otherwise perturb it in such
a fashion that iterations in progress may yield incorrect results.)

@param fromIndex low endpoint (inclusive) of the subList.
@param toIndex high endpoint (exclusive) of the subList.
@return a view of the specified range within this List.
@throws IndexOutOfBoundsException Illegal endpoint index value
    (fromIndex &lt; 0 || toIndex &gt; size || fromIndex &gt; toIndex)."
      end

      class 992795 "COWSubList"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135451 // AbstractList
	  rank 0 explicit_value "E"
	actual class class_ref 135451 // AbstractList
	  rank 1 explicit_value ""
	actual class class_ref 135451 // AbstractList
	  rank 2 explicit_value ""
	actual class class_ref 135451 // AbstractList
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1930907 // <realization>
	  relation 1930907 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1930907 // <realization>
	    b parent class_ref 135451 // AbstractList
	end

	classrelation 1931035 // l (<unidirectional association>)
	  relation 1931035 --->
	    a role_name "l" const_relation private
	      comment "
This class extends AbstractList merely for convenience, to
avoid having to define addAll, etc. This doesn't hurt, but
is wasteful.  This class does not need or use modCount
mechanics in AbstractList, but does need to check for
concurrent modification using similar mechanics.  On each
operation, the array that we expect the backing list to use
is checked and updated.  Since we do this for all of the
base operations invoked by those defined in AbstractList,
all is well.  While inefficient, this is not worth
improving.  The kinds of list operations inherited from
AbstractList are already so slow on COW sublists that
adding a bit more space/time doesn't seem even noticeable.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 1931035 // l (<unidirectional association>)
	    b parent class_ref 992539 // CopyOnWriteArrayList
	end

	attribute 2926875 "offset"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2927003 "size"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2927131 "expectedArray"
	  private explicit_type "E"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7915931 "COWSubList"
	  private explicit_return_type ""
	  nparams 3
	    param inout name "list" type class_ref 992539 // CopyOnWriteArrayList
	    param in name "fromIndex" explicit_type "int"
	    param in name "toIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7916059 "checkForComodification"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " only call this holding l's lock"
	end

	operation 7916187 "rangeCheck"
	  private explicit_return_type "void"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " only call this holding l's lock"
	end

	operation 7916315 "set"
	  public explicit_return_type "E"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "element" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7916443 "get"
	  public explicit_return_type "E"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7916571 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7916699 "add"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "element" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7916827 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7916955 "remove"
	  public explicit_return_type "E"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7917083 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7917211 "listIterator"
	  public return_type class_ref 135707 // ListIterator
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7917339 "subList"
	  public return_type class_ref 135579 // List
	  nparams 2
	    param in name "fromIndex" explicit_type "int"
	    param in name "toIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 992923 "COWSubListIterator"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135707 // ListIterator
	  rank 0 explicit_value "E"
	actual class class_ref 135707 // ListIterator
	  rank 1 explicit_value ""
	actual class class_ref 135707 // ListIterator
	  rank 2 explicit_value ""
	actual class class_ref 135707 // ListIterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1931163 // <realization>
	  relation 1931163 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1931163 // <realization>
	    b parent class_ref 135707 // ListIterator
	end

	classrelation 1931291 // i (<unidirectional association>)
	  relation 1931291 --->
	    a role_name "i" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 1931291 // i (<unidirectional association>)
	    b parent class_ref 135707 // ListIterator
	end

	attribute 2927259 "index"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2927387 "offset"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2927515 "size"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7917467 "COWSubListIterator"
	  private explicit_return_type ""
	  nparams 4
	    param inout name "l" type class_ref 135579 // List
	    param in name "index" explicit_type "int"
	    param in name "offset" explicit_type "int"
	    param in name "size" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7917595 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7917723 "next"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7917851 "hasPrevious"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7917979 "previous"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7918107 "nextIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7918235 "previousIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7918363 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7918491 "set"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "o" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7918619 "add"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "o" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 993051 "CopyOnWriteArraySet"
      visibility public 
      nformals 3
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 137499 // AbstractSet
        rank 0 explicit_value "E"
      actual class class_ref 137499 // AbstractSet
        rank 1 explicit_value ""
      actual class class_ref 137499 // AbstractSet
        rank 2 explicit_value ""
      actual class class_ref 137499 // AbstractSet
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@link java.util.Set} that uses {@link
java.util.concurrent.CopyOnWriteArrayList} for all of its
operations.  Thus, it shares the same basic properties:
<ul>
 <li>It is best suited for applications in which set sizes generally
      stay small, read-only operations
      vastly outnumber mutative operations, and you need
      to prevent interference among threads during traversal.
 <li>It is thread-safe.
 <li>Mutative operations(add, set, remove, etc) are expensive
     since they usually entail copying the entire underlying array.
 <li>Iterators do not support the mutative remove operation.
 <li>Traversal via iterators is fast and cannot encounter
     interference from other threads. Iterators rely on
     unchanging snapshots of the array at the time the iterators were
    constructed.
</ul>

<p> <b>Sample Usage.</b> The following code sketch uses a
copy-on-write set to maintain a set of Handler objects that 
perform some action upon state updates. 

<pre>
class Handler { void handle(); ... }

class X {
   private final CopyOnWriteArraySet&lt;Handler&gt; handlers = new CopyOnWriteArraySet&lt;Handler&gt;();
   public void addHandler(Handler h) { handlers.add(h); }

   private long internalState;
   private synchronized void changeState() { internalState = ...; }

   public void update() {
      changeState();
      for (Handler handler : handlers)
          handler.handle();
   }
}
</pre>

<p>This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@see CopyOnWriteArrayList
@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 1931419 // <realization>
	relation 1931419 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1931419 // <realization>
	  b parent class_ref 137499 // AbstractSet
      end

      classrelation 1931547 // <realization>
	relation 1931547 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1931547 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2927643 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  5457747651344034263L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1931675 // al (<unidirectional association>)
	relation 1931675 --->
	  a role_name "al" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 1931675 // al (<unidirectional association>)
	  b parent class_ref 992539 // CopyOnWriteArrayList
      end

      operation 7918747 "CopyOnWriteArraySet"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty set."
      end

      operation 7918875 "CopyOnWriteArraySet"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a set containing all of the elements of the specified
Collection.
@param c the collection"
      end

      operation 7919003 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7919131 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7919259 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7919387 "toArray"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7919515 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7919643 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7919771 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7919899 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7920027 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7920155 "containsAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7920283 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7920411 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7920539 "retainAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 993179 "CountDownLatch"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A synchronization aid that allows one or more threads to wait until
a set of operations being performed in other threads completes.

<p>A <tt>CountDownLatch</tt> is initialized with a given
<em>count</em>.  The {@link #await await} methods block until the current
{@link #getCount count} reaches zero due to invocations of the
{@link #countDown} method, after which all waiting threads are
released and any subsequent invocations of {@link #await await} return
immediately. This is a one-shot phenomenon -- the count cannot be
reset.  If you need a version that resets the count, consider using
a {@link CyclicBarrier}.

<p>A <tt>CountDownLatch</tt> is a versatile synchronization tool
and can be used for a number of purposes.  A
<tt>CountDownLatch</tt> initialized with a count of one serves as a
simple on/off latch, or gate: all threads invoking {@link #await await}
wait at the gate until it is opened by a thread invoking {@link
#countDown}.  A <tt>CountDownLatch</tt> initialized to <em>N</em>
can be used to make one thread wait until <em>N</em> threads have
completed some action, or some action has been completed N times.
<p>A useful property of a <tt>CountDownLatch</tt> is that it
doesn't require that threads calling <tt>countDown</tt> wait for
the count to reach zero before proceeding, it simply prevents any
thread from proceeding past an {@link #await await} until all
threads could pass.

<p><b>Sample usage:</b> Here is a pair of classes in which a group
of worker threads use two countdown latches:
<ul>
<li>The first is a start signal that prevents any worker from proceeding
until the driver is ready for them to proceed;
<li>The second is a completion signal that allows the driver to wait
until all workers have completed.
</ul>

<pre>
class Driver { // ...
  void main() throws InterruptedException {
    CountDownLatch startSignal = new CountDownLatch(1);
    CountDownLatch doneSignal = new CountDownLatch(N);

    for (int i = 0; i < N; ++i) // create and start threads
      new Thread(new Worker(startSignal, doneSignal)).start();

    doSomethingElse();            // don't let run yet
    startSignal.countDown();      // let all threads proceed
    doSomethingElse();
    doneSignal.await();           // wait for all to finish
  }
}

class Worker implements Runnable {
  private final CountDownLatch startSignal;
  private final CountDownLatch doneSignal;
  Worker(CountDownLatch startSignal, CountDownLatch doneSignal) {
     this.startSignal = startSignal;
     this.doneSignal = doneSignal;
  }
  public void run() {
     try {
       startSignal.await();
       doWork();
       doneSignal.countDown();
     } catch (InterruptedException ex) {} // return;
  }

  void doWork() { ... }
}

</pre>

<p>Another typical usage would be to divide a problem into N parts,
describe each part with a Runnable that executes that portion and
counts down on the latch, and queue all the Runnables to an
Executor.  When all sub-parts are complete, the coordinating thread
will be able to pass through await. (When threads must repeatedly
count down in this way, instead use a {@link CyclicBarrier}.)

<pre>
class Driver2 { // ...
  void main() throws InterruptedException {
    CountDownLatch doneSignal = new CountDownLatch(N);
    Executor e = ...

    for (int i = 0; i < N; ++i) // create and start threads
      e.execute(new WorkerRunnable(doneSignal, i));

    doneSignal.await();           // wait for all to finish
  }
}

class WorkerRunnable implements Runnable {
  private final CountDownLatch doneSignal;
  private final int i;
  WorkerRunnable(CountDownLatch doneSignal, int i) {
     this.doneSignal = doneSignal;
     this.i = i;
  }
  public void run() {
     try {
       doWork(i);
       doneSignal.countDown();
     } catch (InterruptedException ex) {} // return;
  }

  void doWork() { ... }
}

</pre>

@since 1.5
@author Doug Lea"
      class 993307 "Sync"
	visibility private 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1931803 // <generalisation>
	  relation 1931803 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1931803 // <generalisation>
	    b parent class_ref 990619 // AbstractQueuedSynchronizer
	end

	operation 7920667 "Sync"
	  package explicit_return_type ""
	  nparams 1
	    param in name "count" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7920795 "getCount"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7920923 "tryAcquireShared"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "acquires" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7921051 "tryReleaseShared"
	  public explicit_return_type "boolean"
	  nparams 1
	    param in name "releases" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1931931 // sync (<unidirectional association>)
	relation 1931931 --->
	  a role_name "sync" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1931931 // sync (<unidirectional association>)
	  b parent class_ref 993307 // Sync
      end

      operation 7921179 "CountDownLatch"
	public explicit_return_type ""
	nparams 1
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>CountDownLatch</tt> initialized with the given
count.

@param count the number of times {@link #countDown} must be invoked
before threads can pass through {@link #await}.

@throws IllegalArgumentException if <tt>count</tt> is less than zero."
      end

      operation 7921307 "await"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes the current thread to wait until the latch has counted down to 
zero, unless the thread is {@link Thread#interrupt interrupted}.

<p>If the current {@link #getCount count} is zero then this method
returns immediately.
<p>If the current {@link #getCount count} is greater than zero then
the current thread becomes disabled for thread scheduling 
purposes and lies dormant until one of two things happen:
<ul>
<li>The count reaches zero due to invocations of the
{@link #countDown} method; or
<li>Some other thread {@link Thread#interrupt interrupts} the current
thread.
</ul>
<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or 
<li>is {@link Thread#interrupt interrupted} while waiting, 
</ul>
then {@link InterruptedException} is thrown and the current thread's 
interrupted status is cleared. 

@throws InterruptedException if the current thread is interrupted
while waiting."
      end

      operation 7921435 "await"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes the current thread to wait until the latch has counted down to 
zero, unless the thread is {@link Thread#interrupt interrupted},
or the specified waiting time elapses.

<p>If the current {@link #getCount count} is zero then this method
returns immediately with the value <tt>true</tt>.

<p>If the current {@link #getCount count} is greater than zero then
the current thread becomes disabled for thread scheduling 
purposes and lies dormant until one of three things happen:
<ul>
<li>The count reaches zero due to invocations of the
{@link #countDown} method; or
<li>Some other thread {@link Thread#interrupt interrupts} the current
thread; or
<li>The specified waiting time elapses.
</ul>
<p>If the count reaches zero then the method returns with the
value <tt>true</tt>.
<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or 
<li>is {@link Thread#interrupt interrupted} while waiting, 
</ul>
then {@link InterruptedException} is thrown and the current thread's 
interrupted status is cleared. 

<p>If the specified waiting time elapses then the value <tt>false</tt>
is returned.
If the time is 
less than or equal to zero, the method will not wait at all.

@param timeout the maximum time to wait
@param unit the time unit of the <tt>timeout</tt> argument.
@return <tt>true</tt> if the count reached zero  and <tt>false</tt>
if the waiting time elapsed before the count reached zero.

@throws InterruptedException if the current thread is interrupted
while waiting."
      end

      operation 7921563 "countDown"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrements the count of the latch, releasing all waiting threads if
the count reaches zero.
<p>If the current {@link #getCount count} is greater than zero then
it is decremented. If the new count is zero then all waiting threads
are re-enabled for thread scheduling purposes.
<p>If the current {@link #getCount count} equals zero then nothing
happens."
      end

      operation 7921691 "getCount"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current count.
<p>This method is typically used for debugging and testing purposes.
@return the current count."
      end

      operation 7921819 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string identifying this latch, as well as its state.
The state, in brackets, includes the String 
&quot;Count =&quot; followed by the current count.
@return a string identifying this latch, as well as its
state"
      end
    end

    class 993435 "CyclicBarrier"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A synchronization aid that allows a set of threads to all wait for
each other to reach a common barrier point.  CyclicBarriers are
useful in programs involving a fixed sized party of threads that
must occasionally wait for each other. The barrier is called
<em>cyclic</em> because it can be re-used after the waiting threads
are released.

<p>A <tt>CyclicBarrier</tt> supports an optional {@link Runnable} command
that is run once per barrier point, after the last thread in the party
arrives, but before any threads are released.
This <em>barrier action</em> is useful
for updating shared-state before any of the parties continue.

<p><b>Sample usage:</b> Here is an example of
 using a barrier in a parallel decomposition design:
<pre>
class Solver {
  final int N;
  final float[][] data;
  final CyclicBarrier barrier;

  class Worker implements Runnable {
    int myRow;
    Worker(int row) { myRow = row; }
    public void run() {
      while (!done()) {
        processRow(myRow);

        try {
          barrier.await();
        } catch (InterruptedException ex) {
          return;
        } catch (BrokenBarrierException ex) {
          return;
        }
      }
    }
  }

  public Solver(float[][] matrix) {
    data = matrix;
    N = matrix.length;
    barrier = new CyclicBarrier(N,
                                new Runnable() {
                                  public void run() {
                                    mergeRows(...);
                                  }
                                });
    for (int i = 0; i < N; ++i)
      new Thread(new Worker(i)).start();

    waitUntilDone();
  }
}
</pre>
Here, each worker thread processes a row of the matrix then waits at the
barrier until all rows have been processed. When all rows are processed
the supplied {@link Runnable} barrier action is executed and merges the
rows. If the merger
determines that a solution has been found then <tt>done()</tt> will return
<tt>true</tt> and each worker will terminate.

<p>If the barrier action does not rely on the parties being suspended when
it is executed, then any of the threads in the party could execute that
action when it is released. To facilitate this, each invocation of
{@link #await} returns the arrival index of that thread at the barrier.
You can then choose which thread should execute the barrier action, for
example:
<pre>  if (barrier.await() == 0) {
    // log the completion of this iteration
  }</pre>

<p>The <tt>CyclicBarrier</tt> uses an all-or-none breakage model
for failed synchronization attempts: If a thread leaves a barrier
point prematurely because of interruption, failure, or timeout, all
other threads waiting at that barrier point will also leave
abnormally via {@link BrokenBarrierException} (or
{@link InterruptedException} if they too were interrupted at about
the same time).

@since 1.5
@see CountDownLatch

@author Doug Lea"
      class 993563 "Generation"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2927771 "broken"
	  package explicit_type "boolean"
	  init_value "=  false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      classrelation 1932059 // lock (<unidirectional association>)
	relation 1932059 --->
	  a role_name "lock" init_value "=  new ReentrantLock()" const_relation private
	    comment " The lock for guarding barrier entry 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1932059 // lock (<unidirectional association>)
	  b parent class_ref 989211 // ReentrantLock
      end

      classrelation 1932187 // trip (<unidirectional association>)
	relation 1932187 --->
	  a role_name "trip" init_value "=  lock.newCondition()" const_relation private
	    comment " Condition to wait on until tripped 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1932187 // trip (<unidirectional association>)
	  b parent class_ref 989339 // Condition
      end

      attribute 2927899 "parties"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The number of parties "
      end

      classrelation 1932315 // barrierCommand (<unidirectional association>)
	relation 1932315 --->
	  a role_name "barrierCommand" const_relation private
	    comment " The command to run when tripped 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1932315 // barrierCommand (<unidirectional association>)
	  b parent class_ref 163355 // Runnable
      end

      classrelation 1932443 // generation (<unidirectional association>)
	relation 1932443 --->
	  a role_name "generation" init_value "=  new Generation()" private
	    comment " The current generation 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1932443 // generation (<unidirectional association>)
	  b parent class_ref 993563 // Generation
      end

      attribute 2928027 "count"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Number of parties still waiting. Counts down from parties to 0
on each generation.  It is reset to parties on each new
generation or when broken.
"
      end

      operation 7921947 "nextGeneration"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates state on barrier trip and wakes up everyone.
Called only while holding lock."
      end

      operation 7922075 "breakBarrier"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets current barrier generation as broken and wakes up everyone.
Called only while holding lock."
      end

      operation 7922203 "dowait"
	private explicit_return_type "int"
	nparams 2
	  param inout name "timed" explicit_type "boolean"
	  param in name "nanos" explicit_type "long"
	nexceptions 3
	  exception class_ref 164123 // InterruptedException
	  exception class_ref 989595 // BrokenBarrierException
	  exception class_ref 988827 // TimeoutException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main barrier code, covering the various policies."
      end

      operation 7922331 "CyclicBarrier"
	public explicit_return_type ""
	nparams 2
	  param in name "parties" explicit_type "int"
	  param inout name "barrierAction" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>CyclicBarrier</tt> that will trip when the
given number of parties (threads) are waiting upon it, and which
will execute the given barrier action when the barrier is tripped,
performed by the last thread entering the barrier.

@param parties the number of threads that must invoke {@link #await}
before the barrier is tripped.
@param barrierAction the command to execute when the barrier is
tripped, or <tt>null</tt> if there is no action.

@throws IllegalArgumentException if <tt>parties</tt> is less than 1."
      end

      operation 7922459 "CyclicBarrier"
	public explicit_return_type ""
	nparams 1
	  param in name "parties" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>CyclicBarrier</tt> that will trip when the
given number of parties (threads) are waiting upon it, and
does not perform a predefined action when the barrier is tripped.

@param parties the number of threads that must invoke {@link #await}
before the barrier is tripped.

@throws IllegalArgumentException if <tt>parties</tt> is less than 1."
      end

      operation 7922587 "getParties"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of parties required to trip this barrier.
@return the number of parties required to trip this barrier."
      end

      operation 7922715 "await"
	public explicit_return_type "int"
	nparams 0
	nexceptions 2
	  exception class_ref 164123 // InterruptedException
	  exception class_ref 989595 // BrokenBarrierException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits until all {@link #getParties parties} have invoked <tt>await</tt>
on this barrier.

<p>If the current thread is not the last to arrive then it is
disabled for thread scheduling purposes and lies dormant until
one of the following things happens:
<ul>
<li>The last thread arrives; or
<li>Some other thread {@link Thread#interrupt interrupts} the current
thread; or
<li>Some other thread  {@link Thread#interrupt interrupts} one of the
other waiting threads; or
<li>Some other thread times out while waiting for barrier; or
<li>Some other thread invokes {@link #reset} on this barrier.
</ul>
<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@link Thread#interrupt interrupted} while waiting
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

<p>If the barrier is {@link #reset} while any thread is waiting, or if
the barrier {@link #isBroken is broken} when <tt>await</tt> is invoked,
or while any thread is waiting,
then {@link BrokenBarrierException} is thrown.

<p>If any thread is {@link Thread#interrupt interrupted} while waiting,
then all other waiting threads will throw
{@link BrokenBarrierException} and the barrier is placed in the broken
state.

<p>If the current thread is the last thread to arrive, and a
non-null barrier action was supplied in the constructor, then the
current thread runs the action before allowing the other threads to
continue.
If an exception occurs during the barrier action then that exception
will be propagated in the current thread and the barrier is placed in
the broken state.

@return the arrival index of the current thread, where index
 <tt>{@link #getParties()} - 1</tt> indicates the first to arrive and
zero indicates the last to arrive.

@throws InterruptedException if the current thread was interrupted
while waiting.
@throws BrokenBarrierException if <em>another</em> thread was
interrupted or timed out while the current thread was waiting,
or the barrier was reset, or the barrier was broken when
<tt>await</tt> was called, or the barrier action (if present)
failed due an exception."
      end

      operation 7922843 "await"
	public explicit_return_type "int"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 3
	  exception class_ref 164123 // InterruptedException
	  exception class_ref 989595 // BrokenBarrierException
	  exception class_ref 988827 // TimeoutException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits until all {@link #getParties parties} have invoked <tt>await</tt>
on this barrier.

<p>If the current thread is not the last to arrive then it is
disabled for thread scheduling purposes and lies dormant until
one of the following things happens:
<ul>
<li>The last thread arrives; or
<li>The specified timeout elapses; or
<li>Some other thread {@link Thread#interrupt interrupts} the current
thread; or
<li>Some other thread  {@link Thread#interrupt interrupts} one of the
other waiting threads; or
<li>Some other thread times out while waiting for barrier; or
<li>Some other thread invokes {@link #reset} on this barrier.
</ul>
<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@link Thread#interrupt interrupted} while waiting
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

<p>If the specified waiting time elapses then {@link TimeoutException}
is thrown. If the time is less than or equal to zero, the
method will not wait at all.

<p>If the barrier is {@link #reset} while any thread is waiting, or if
the barrier {@link #isBroken is broken} when <tt>await</tt> is invoked,
or while any thread is waiting,
then {@link BrokenBarrierException} is thrown.

<p>If any thread is {@link Thread#interrupt interrupted} while waiting,
then all other waiting threads will throw
{@link BrokenBarrierException} and the barrier is placed in the broken
state.

<p>If the current thread is the last thread to arrive, and a
non-null barrier action was supplied in the constructor, then the
current thread runs the action before allowing the other threads to
continue.
If an exception occurs during the barrier action then that exception
will be propagated in the current thread and the barrier is placed in
the broken state.

@param timeout the time to wait for the barrier
@param unit the time unit of the timeout parameter
@return the arrival index of the current thread, where index
<tt>{@link #getParties()} - 1</tt> indicates the first to arrive and
zero indicates the last to arrive.

@throws InterruptedException if the current thread was interrupted
while waiting.
@throws TimeoutException if the specified timeout elapses.
@throws BrokenBarrierException if <em>another</em> thread was
interrupted or timed out while the current thread was waiting,
or the barrier was reset, or the barrier was broken when
<tt>await</tt> was called, or the barrier action (if present)
failed due an exception."
      end

      operation 7922971 "isBroken"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Queries if this barrier is in a broken state.
@return <tt>true</tt> if one or more parties broke out of this
barrier due to interruption or timeout since construction or
the last reset, or a barrier action failed due to an exception;
<tt>false</tt> otherwise."
      end

      operation 7923099 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the barrier to its initial state.  If any parties are
currently waiting at the barrier, they will return with a
{@link BrokenBarrierException}. Note that resets <em>after</em>
a breakage has occurred for other reasons can be complicated to
carry out; threads need to re-synchronize in some other way,
and choose one to perform the reset.  It may be preferable to
instead create a new barrier for subsequent use."
      end

      operation 7923227 "getNumberWaiting"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of parties currently waiting at the barrier.
This method is primarily useful for debugging and assertions.

@return the number of parties currently blocked in {@link #await}."
      end
    end

    class 993691 "Delayed"
      visibility public stereotype "interface"
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 value class_ref 993691 // Delayed
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A mix-in style interface for marking objects that should be
acted upon after a given delay.

<p>An implementation of this interface must define a
<tt>compareTo</tt> method that provides an ordering consistent with
its <tt>getDelay</tt> method.

@since 1.5
@author Doug Lea"
      classrelation 1932571 // <realization>
	relation 1932571 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1932571 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      operation 7923355 "getDelay"
	public explicit_return_type "long"
	nparams 1
	  param inout name "unit" type class_ref 988315 // TimeUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the remaining delay associated with this object, in the
given time unit.

@param unit the time unit
@return the remaining delay; zero or negative values indicate
that the delay has already elapsed"
      end
    end

    class 993819 "DelayQueue"
      visibility public 
      nformals 3
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 7
      actual class class_ref 137115 // AbstractQueue
        rank 0 explicit_value "E"
      actual class class_ref 137115 // AbstractQueue
        rank 1 explicit_value ""
      actual class class_ref 137115 // AbstractQueue
        rank 2 explicit_value ""
      actual class class_ref 137115 // AbstractQueue
        rank 3 explicit_value ""
      actual class class_ref 989083 // BlockingQueue
        rank 0 explicit_value "E"
      actual class class_ref 989083 // BlockingQueue
        rank 1 explicit_value ""
      actual class class_ref 989083 // BlockingQueue
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An unbounded {@linkplain BlockingQueue blocking queue} of
<tt>Delayed</tt> elements, in which an element can only be taken
when its delay has expired.  The <em>head</em> of the queue is that
<tt>Delayed</tt> element whose delay expired furthest in the
past. If no delay has expired there is no head and <tt>poll</tt>
will return <tt>null</tt>. Expiration occurs when an element's
<tt>getDelay(TimeUnit.NANOSECONDS)</tt> method returns a value less
than or equal to zero.  This queue does not permit <tt>null</tt>
elements.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.

<p>This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 1932699 // <realization>
	relation 1932699 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1932699 // <realization>
	  b parent class_ref 137115 // AbstractQueue
      end

      classrelation 1932827 // <realization>
	relation 1932827 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1932827 // <realization>
	  b parent class_ref 989083 // BlockingQueue
      end

      classrelation 1932955 // lock (<unidirectional association>)
	relation 1932955 --->
	  a role_name "lock" init_value "=  new ReentrantLock()" const_relation private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1932955 // lock (<unidirectional association>)
	  b parent class_ref 989211 // ReentrantLock
      end

      classrelation 1933083 // available (<unidirectional association>)
	relation 1933083 --->
	  a role_name "available" init_value "=  lock.newCondition()" const_relation private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1933083 // available (<unidirectional association>)
	  b parent class_ref 989339 // Condition
      end

      classrelation 1933211 // q (<unidirectional association>)
	relation 1933211 --->
	  a role_name "q" init_value "=  new PriorityQueue<E>()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 1933211 // q (<unidirectional association>)
	  b parent class_ref 154651 // PriorityQueue
      end

      operation 7923483 "DelayQueue"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>DelayQueue</tt> that is initially empty."
      end

      operation 7923611 "DelayQueue"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>DelayQueue</tt> initially containing the elements of the
given collection of {@link Delayed} instances.

@param c the collection
@throws NullPointerException if <tt>c</tt> or any element within it
is <tt>null</tt>
"
      end

      operation 7923739 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this delay queue.

@param o the element to add
@return <tt>true</tt>
@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 7923867 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to this delay queue. As the queue is
unbounded this method will never block.
@param o the element to add
@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 7923995 "offer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "o" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this delay queue. As the queue is
unbounded this method will never block.
@param o the element to add
@param timeout This parameter is ignored as the method never blocks
@param unit This parameter is ignored as the method never blocks
@return <tt>true</tt>
@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 7924123 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to this queue.
@param o the element to add
@return <tt>true</tt> (as per the general contract of
<tt>Collection.add</tt>).

@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 7924251 "take"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting
if no elements with an unexpired delay are present on this queue.
@return the head of this queue
@throws InterruptedException if interrupted while waiting."
      end

      operation 7924379 "poll"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting
if necessary up to the specified wait time if no elements with
an unexpired delay are
present on this queue.
@param timeout how long to wait before giving up, in units of
<tt>unit</tt>
@param unit a <tt>TimeUnit</tt> determining how to interpret the
<tt>timeout</tt> parameter
@return the head of this queue, or <tt>null</tt> if the
specified waiting time elapses before an element with
an unexpired delay is present.
@throws InterruptedException if interrupted while waiting."
      end

      operation 7924507 "poll"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, or <tt>null</tt>
if this queue has no elements with an unexpired delay.

@return the head of this queue, or <tt>null</tt> if this
        queue has no elements with an unexpired delay."
      end

      operation 7924635 "peek"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves, but does not remove, the head of this queue,
returning <tt>null</tt> if this queue has no elements with an
unexpired delay.

@return the head of this queue, or <tt>null</tt> if this queue
has no elements with an unexpired delay."
      end

      operation 7924763 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7924891 "drainTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7925019 "drainTo"
	public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 135067 // Collection
	  param in name "maxElements" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7925147 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically removes all of the elements from this delay queue.
The queue will be empty after this call returns."
      end

      operation 7925275 "remainingCapacity"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns <tt>Integer.MAX_VALUE</tt> because
a <tt>DelayQueue</tt> is not capacity constrained.
@return <tt>Integer.MAX_VALUE</tt>"
      end

      operation 7925403 "toArray"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7925531 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "array" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7925659 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this
queue, if it is present."
      end

      operation 7925787 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue. The iterator
does not return the elements in any particular order. The
returned iterator is a thread-safe \"fast-fail\" iterator that will
throw {@link java.util.ConcurrentModificationException}
upon detected interference.

@return an iterator over the elements in this queue."
      end

      class 993947 "Itr"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "E"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1933339 // <realization>
	  relation 1933339 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1933339 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	classrelation 1933467 // iter (<unidirectional association>)
	  relation 1933467 --->
	    a role_name "iter" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 1933467 // iter (<unidirectional association>)
	    b parent class_ref 135323 // Iterator
	end

	operation 7925915 "Itr"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "i" type class_ref 135323 // Iterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7926043 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7926171 "next"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7926299 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 994075 "Exchanger"
      visibility public 
      nformals 3
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A synchronization point at which two threads can exchange objects.
Each thread presents some object on entry to the {@link #exchange
exchange} method, and receives the object presented by the other
thread on return.

<p><b>Sample Usage:</b>
Here are the highlights of a class that uses an <tt>Exchanger</tt> to
swap buffers between threads so that the thread filling the
buffer gets a freshly
emptied one when it needs it, handing off the filled one to
the thread emptying the buffer.
<pre>
class FillAndEmpty {
  Exchanger&lt;DataBuffer&gt; exchanger = new Exchanger();
  DataBuffer initialEmptyBuffer = ... a made-up type
  DataBuffer initialFullBuffer = ...

  class FillingLoop implements Runnable {
    public void run() {
      DataBuffer currentBuffer = initialEmptyBuffer;
      try {
        while (currentBuffer != null) {
          addToBuffer(currentBuffer);
          if (currentBuffer.full())
            currentBuffer = exchanger.exchange(currentBuffer);
        }
      } catch (InterruptedException ex) { ... handle ... }
    }
  }

  class EmptyingLoop implements Runnable {
    public void run() {
      DataBuffer currentBuffer = initialFullBuffer;
      try {
        while (currentBuffer != null) {
          takeFromBuffer(currentBuffer);
          if (currentBuffer.empty())
            currentBuffer = exchanger.exchange(currentBuffer);
        }
      } catch (InterruptedException ex) { ... handle ...}
    }
  }

  void start() {
    new Thread(new FillingLoop()).start();
    new Thread(new EmptyingLoop()).start();
  }
}
</pre>

@since 1.5
@author Doug Lea
@param <V> The type of objects that may be exchanged"
      attribute 2928155 "NCPU"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  Runtime.getRuntime().availableProcessors()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Algorithm Description:

The basic idea is to maintain a \"slot\", which is a reference to
a Node containing both an Item to offer and a \"hole\" waiting to
get filled in.  If an incoming \"occupying\" thread sees that the
slot is null, it CAS'es (compareAndSets) a Node there and waits
for another to invoke exchange.  That second \"fulfilling\" thread
sees that the slot is non-null, and so CASes it back to null,
also exchanging items by CASing the hole, plus waking up the
occupying thread if it is blocked.  In each case CAS'es may
fail because a slot at first appears non-null but is null upon
CAS, or vice-versa.  So threads may need to retry these
actions.

This simple approach works great when there are only a few
threads using an Exchanger, but performance rapidly
deteriorates due to CAS contention on the single slot when
there are lots of threads using an exchanger.  So instead we use
an \"arena\"; basically a kind of hash table with a dynamically
varying number of slots, any one of which can be used by
threads performing an exchange.  Incoming threads pick slots
based on a hash of their Thread ids.  If an incoming thread
fails to CAS in its chosen slot, it picks an alternative slot
instead.  And similarly from there.  If a thread successfully
CASes into a slot but no other thread arrives, it tries
another, heading toward the zero slot, which always exists even
if the table shrinks.  The particular mechanics controlling this
are as follows:

Waiting: Slot zero is special in that it is the only slot that
exists when there is no contention.  A thread occupying slot
zero will block if no thread fulfills it after a short spin.
In other cases, occupying threads eventually give up and try
another slot.  Waiting threads spin for a while (a period that
should be a little less than a typical context-switch time)
before either blocking (if slot zero) or giving up (if other
slots) and restarting.  There is no reason for threads to block
unless there are unlikely to be any other threads present.
Occupants are mainly avoiding memory contention so sit there
quietly polling for a shorter period than it would take to
block and then unblock them.  Non-slot-zero waits that elapse
because of lack of other threads waste around one extra
context-switch time per try, which is still on average much
faster than alternative approaches.

Sizing: Usually, using only a few slots suffices to reduce
contention.  Especially with small numbers of threads, using
too many slots can lead to just as poor performance as using
too few of them, and there's not much room for error.  The
variable \"max\" maintains the number of slots actually in
use.  It is increased when a thread sees too many CAS
failures.  (This is analogous to resizing a regular hash table
based on a target load factor, except here, growth steps are
just one-by-one rather than proportional.)  Growth requires
contention failures in each of three tried slots.  Requiring
multiple failures for expansion copes with the fact that some
failed CASes are not due to contention but instead to simple
races between two threads or thread pre-emptions occurring
between reading and CASing.  Also, very transient peak
contention can be much higher than the average sustainable
levels.  The max limit is decreased on average 50% of the times
that a non-slot-zero wait elapses without being fulfilled.
Threads experiencing elapsed waits move closer to zero, so
eventually find existing (or future) threads even if the table
has been shrunk due to inactivity.  The chosen mechanics and
thresholds for growing and shrinking are intrinsically
entangled with indexing and hashing inside the exchange code,
and can't be nicely abstracted out.

Hashing: Each thread picks its initial slot to use in accord
with a simple hashcode.  The sequence is the same on each
encounter by any given thread, but effectively random across
threads.  Using arenas encounters the classic cost vs quality
tradeoffs of all hash tables.  Here, we use a one-step FNV-1a
hash code based on the current thread's Thread.getId(), along
with a cheap approximation to a mod operation to select an
index.  The downside of optimizing index selection in this way
is that the code is hardwired to use a maximum table size of
32.  But this value more than suffices for known platforms and
applications.

Probing: On sensed contention of a selected slot, we probe
sequentially through the table, analogously to linear probing
after collision in a hash table.  (We move circularly, in
reverse order, to mesh best with table growth and shrinkage
rules.)  Except that to minimize the effects of false-alarms
and cache thrashing, we try the first selected slot twice
before moving.

Padding: Even with contention management, slots are heavily
contended, so use cache-padding to avoid poor memory
performance.  Because of this, slots are lazily constructed
only when used, to avoid wasting this space unnecessarily.
While isolation of locations is not much of an issue at first
in an application, as time goes on and garbage-collectors
perform compaction, slots are very likely to be moved adjacent
to each other, which can cause much thrashing of cache lines on
MPs unless padding is employed.

This is an improvement of the algorithm described in the paper
\"A Scalable Elimination-based Exchange Channel\" by William
Scherer, Doug Lea, and Michael Scott in Proceedings of SCOOL05
workshop.  Available at: http://hdl.handle.net/1802/2104

 The number of CPUs, for sizing and spin control "
      end

      attribute 2928283 "CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The capacity of the arena.  Set to a value that provides more
than enough space to handle contention.  On small machines
most slots won't be used, but it is still not wasted because
the extra space provides some machine-level address padding
to minimize interference with heavily CAS'ed Slot locations.
And on very large machines, performance eventually becomes
bounded by memory bandwidth, not numbers of threads/CPUs.
This constant cannot be changed without also modifying
indexing and hashing algorithms.
"
      end

      attribute 2928411 "FULL"
	class_attribute const_attribute private explicit_type "int"
	init_value "= 
        Math.max(0, Math.min(CAPACITY, NCPU / 2) - 1)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The value of \"max\" that will hold all threads without
contention.  When this value is less than CAPACITY, some
otherwise wasted expansion can be avoided.
"
      end

      attribute 2928539 "SPINS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  (NCPU == 1) ? 0 : 2000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of times to spin (doing nothing except polling a
memory location) before blocking or giving up while waiting to
be fulfilled.  Should be zero on uniprocessors.  On
multiprocessors, this value should be large enough so that two
threads exchanging items as fast as possible block only when
one of them is stalled (due to GC or preemption), but not much
longer, to avoid wasting CPU resources.  Seen differently, this
value is a little over half the number of cycles of an average
context switch time on most systems.  The value here is
approximately the average of those across a range of tested
systems.
"
      end

      attribute 2928667 "TIMED_SPINS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  SPINS / 20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of times to spin before blocking in timed waits.
Timed waits spin more slowly because checking the time takes
time.  The best value relies mainly on the relative rate of
System.nanoTime vs memory accesses.  The value is empirically
derived to work well across a variety of systems.
"
      end

      attribute 2928795 "CANCEL"
	class_attribute const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Sentinel item representing cancellation of a wait due to
interruption, timeout, or elapsed spin-waits.  This value is
placed in holes on cancellation, and used as a return value
from waiting methods to indicate failure to set or get hole.
"
      end

      attribute 2928923 "NULL_ITEM"
	class_attribute const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value representing null arguments/returns from public
methods.  This disambiguates from internal requirement that
holes start out as null to mean they are not yet set.
"
      end

      class 994203 "Node"
	visibility private 
	nactuals 3
	actual class class_ref 994331 // AtomicReference
	  rank 0 explicit_value "any"
	actual class class_ref 994331 // AtomicReference
	  rank 1 explicit_value ""
	actual class class_ref 994331 // AtomicReference
	  rank 2 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1933723 // <realization>
	  relation 1933723 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1933723 // <realization>
	    b parent class_ref 994331 // AtomicReference
	end

	attribute 2929563 "item"
	  const_attribute public explicit_type "Object"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " The element offered by the Thread creating this node. "
	end

	classrelation 1933851 // waiter (<unidirectional association>)
	  relation 1933851 --->
	    a role_name "waiter" volatile public
	      comment " The Thread waiting to be signalled; null until waiting. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1933851 // waiter (<unidirectional association>)
	    b parent class_ref 163227 // Thread
	end

	operation 7927451 "Node"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "item" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates node with given item and empty hole.
@param item the item"
	end
      end

      class 994459 "Slot"
	visibility private 
	nactuals 3
	actual class class_ref 994331 // AtomicReference
	  rank 0 explicit_value "any"
	actual class class_ref 994331 // AtomicReference
	  rank 1 explicit_value ""
	actual class class_ref 994331 // AtomicReference
	  rank 2 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1933979 // <realization>
	  relation 1933979 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1933979 // <realization>
	    b parent class_ref 994331 // AtomicReference
	end

	attribute 2929691 "q0"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 64 byte cache lines"
	end

	attribute 2929819 "q1"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 64 byte cache lines"
	end

	attribute 2929947 "q2"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 64 byte cache lines"
	end

	attribute 2930075 "q3"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 64 byte cache lines"
	end

	attribute 2930203 "q4"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 64 byte cache lines"
	end

	attribute 2930331 "q5"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 64 byte cache lines"
	end

	attribute 2930459 "q6"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 64 byte cache lines"
	end

	attribute 2930587 "q7"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 64 byte cache lines"
	end

	attribute 2930715 "q8"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 64 byte cache lines"
	end

	attribute 2930843 "q9"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 64 byte cache lines"
	end

	attribute 2930971 "qa"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 64 byte cache lines"
	end

	attribute 2931099 "qb"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 64 byte cache lines"
	end

	attribute 2931227 "qc"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 64 byte cache lines"
	end

	attribute 2931355 "qd"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 64 byte cache lines"
	end

	attribute 2931483 "qe"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 64 byte cache lines"
	end
      end

      classrelation 1934107 // arena (<unidirectional association>)
	relation 1934107 --->
	  a role_name "arena" multiplicity "[]" init_value "=  new Slot[CAPACITY]" volatile private
	    comment "
Slot array.  Elements are lazily initialized when needed.
Declared volatile to enable double-checked lazy construction.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1934107 // arena (<unidirectional association>)
	  b parent class_ref 994459 // Slot
      end

      classrelation 1934235 // max (<unidirectional association>)
	relation 1934235 --->
	  a role_name "max" init_value "=  new AtomicInteger()" const_relation private
	    comment "
The maximum slot index being used.  The value sometimes
increases when a thread experiences too many CAS contentions,
and sometimes decreases when a spin-wait elapses.  Changes
are performed only via compareAndSet, to avoid stale values
when a thread happens to stall right before setting.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1934235 // max (<unidirectional association>)
	  b parent class_ref 994587 // AtomicInteger
      end

      operation 7927579 "doExchange"
	private explicit_return_type "Object"
	nparams 3
	  param inout name "item" explicit_type "Object"
	  param inout name "timed" explicit_type "boolean"
	  param in name "nanos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main exchange function, handling the different policy variants.
Uses Object, not \"V\" as argument and return value to simplify
handling of sentinel values.  Callers from public methods decode
and cast accordingly.

@param item the (non-null) item to exchange
@param timed true if the wait is timed
@param nanos if timed, the maximum wait time
@return the other thread's item, or CANCEL if interrupted or timed out"
      end

      operation 7927707 "hashIndex"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash index for the current thread.  Uses a one-step
FNV-1a hash code (http://www.isthe.com/chongo/tech/comp/fnv/)
based on the current thread's Thread.getId().  These hash codes
have more uniform distribution properties with respect to small
moduli (here 1-31) than do other simple hashing functions.

<p>To return an index between 0 and max, we use a cheap
approximation to a mod operation, that also corrects for bias
due to non-power-of-2 remaindering (see {@link
java.util.Random#nextInt}).  Bits of the hashcode are masked
with \"nbits\", the ceiling power of two of table size (looked up
in a table packed into three ints).  If too large, this is
retried after rotating the hash by nbits bits, while forcing new
top bit to 0, which guarantees eventual termination (although
with a non-random-bias).  This requires an average of less than
2 tries for all table sizes, and has a maximum 2% difference
from perfectly uniform slot probabilities when applied to all
possible hash codes for sizes less than 32.

@return a per-thread-random index, 0 <= index < max"
      end

      operation 7927835 "createSlot"
	private explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new slot at given index.  Called only when the slot
appears to be null.  Relies on double-check using builtin
locks, since they rarely contend.  This in turn relies on the
arena array being declared volatile.

@param index the index to add slot at"
      end

      operation 7927963 "tryCancel"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "node" type class_ref 994203 // Node
	  param inout name "slot" type class_ref 994459 // Slot
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to cancel a wait for the given node waiting in the given
slot, if so, helping clear the node from its slot to avoid
garbage retention.

@param node the waiting node
@param the slot it is waiting in
@return true if successfully cancelled"
      end

      operation 7928091 "spinWait"
	class_operation private explicit_return_type "Object"
	nparams 2
	  param inout name "node" type class_ref 994203 // Node
	  param inout name "slot" type class_ref 994459 // Slot
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Three forms of waiting. Each just different enough not to merge
 code with others.

Spin-waits for hole for a non-0 slot.  Fails if spin elapses
before hole filled.  Does not check interrupt, relying on check
in public exchange method to abort if interrupted on entry.

@param node the waiting node
@return on success, the hole; on failure, CANCEL"
      end

      operation 7928219 "await"
	class_operation private explicit_return_type "Object"
	nparams 2
	  param inout name "node" type class_ref 994203 // Node
	  param inout name "slot" type class_ref 994459 // Slot
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits for (by spinning and/or blocking) and gets the hole
filled in by another thread.  Fails if interrupted before
hole filled.

When a node/thread is about to block, it sets its waiter field
and then rechecks state at least one more time before actually
parking, thus covering race vs fulfiller noticing that waiter
is non-null so should be woken.

Thread interruption status is checked only surrounding calls to
park.  The caller is assumed to have checked interrupt status
on entry.

@param node the waiting node
@return on success, the hole; on failure, CANCEL"
      end

      operation 7928347 "awaitNanos"
	private explicit_return_type "Object"
	nparams 3
	  param inout name "node" type class_ref 994203 // Node
	  param inout name "slot" type class_ref 994459 // Slot
	  param in name "nanos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits for (at index 0) and gets the hole filled in by another
thread.  Fails if timed out or interrupted before hole filled.
Same basic logic as untimed version, but a bit messier.

@param node the waiting node
@param nanos the wait time
@return on success, the hole; on failure, CANCEL"
      end

      operation 7928475 "scanOnTimeout"
	private explicit_return_type "Object"
	nparams 1
	  param inout name "node" type class_ref 994203 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sweeps through arena checking for any waiting threads.  Called
only upon return from timeout while waiting in slot 0.  When a
thread gives up on a timed wait, it is possible that a
previously-entered thread is still waiting in some other
slot.  So we scan to check for any.  This is almost always
overkill, but decreases the likelihood of timeouts when there
are other threads present to far less than that in lock-based
exchangers in which earlier-arriving threads may still be
waiting on entry locks.

@param node the waiting node
@return another thread's item, or CANCEL"
      end

      operation 7928603 "Exchanger"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new Exchanger."
      end

      operation 7928731 "exchange"
	public explicit_return_type "V"
	nparams 1
	  param inout name "x" explicit_type "V"
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits for another thread to arrive at this exchange point (unless
it is {@link Thread#interrupt interrupted}),
and then transfers the given object to it, receiving its object
in return.
<p>If another thread is already waiting at the exchange point then
it is resumed for thread scheduling purposes and receives the object
passed in by the current thread. The current thread returns immediately,
receiving the object passed to the exchange by that other thread.
<p>If no other thread is already waiting at the exchange then the 
current thread is disabled for thread scheduling purposes and lies
dormant until one of two things happens:
<ul>
<li>Some other thread enters the exchange; or
<li>Some other thread {@link Thread#interrupt interrupts} the current
thread.
</ul>
<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or 
<li>is {@link Thread#interrupt interrupted} while waiting
for the exchange, 
</ul>
then {@link InterruptedException} is thrown and the current thread's 
interrupted status is cleared. 

@param x the object to exchange
@return the object provided by the other thread.
@throws InterruptedException if current thread was interrupted 
while waiting"
      end

      operation 7928859 "exchange"
	public explicit_return_type "V"
	nparams 3
	  param inout name "x" explicit_type "V"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 2
	  exception class_ref 164123 // InterruptedException
	  exception class_ref 988827 // TimeoutException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits for another thread to arrive at this exchange point (unless
it is {@link Thread#interrupt interrupted}, or the specified waiting
time elapses),
and then transfers the given object to it, receiving its object
in return.

<p>If another thread is already waiting at the exchange point then
it is resumed for thread scheduling purposes and receives the object
passed in by the current thread. The current thread returns immediately,
receiving the object passed to the exchange by that other thread.

<p>If no other thread is already waiting at the exchange then the 
current thread is disabled for thread scheduling purposes and lies
dormant until one of three things happens:
<ul>
<li>Some other thread enters the exchange; or
<li>Some other thread {@link Thread#interrupt interrupts} the current
thread; or
<li>The specified waiting time elapses.
</ul>
<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or 
<li>is {@link Thread#interrupt interrupted} while waiting
for the exchange, 
</ul>
then {@link InterruptedException} is thrown and the current thread's 
interrupted status is cleared. 

<p>If the specified waiting time elapses then {@link TimeoutException}
is thrown.
If the time is 
less than or equal to zero, the method will not wait at all.

@param x the object to exchange
@param timeout the maximum time to wait
@param unit the time unit of the <tt>timeout</tt> argument.
@return the object provided by the other thread.
@throws InterruptedException if current thread was interrupted
while waiting
@throws TimeoutException if the specified waiting time elapses before
another thread enters the exchange."
      end
    end

    class 994715 "ExecutorCompletionService"
      visibility public 
      nformals 3
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 3
      actual class class_ref 989851 // CompletionService
        rank 0 explicit_value "V"
      actual class class_ref 989851 // CompletionService
        rank 1 explicit_value ""
      actual class class_ref 989851 // CompletionService
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@link CompletionService} that uses a supplied {@link Executor}
to execute tasks.  This class arranges that submitted tasks are,
upon completion, placed on a queue accessible using <tt>take</tt>.
The class is lightweight enough to be suitable for transient use
when processing groups of tasks.

<p>

<b>Usage Examples.</b>

Suppose you have a set of solvers for a certain problem, each
returning a value of some type <tt>Result</tt>, and would like to
run them concurrently, processing the results of each of them that
return a non-null value, in some method <tt>use(Result r)</tt>. You
could write this as:

<pre>
   void solve(Executor e, Collection&lt;Callable&lt;Result&gt;&gt; solvers)
     throws InterruptedException, ExecutionException {
       CompletionService&lt;Result&gt; ecs = new ExecutorCompletionService&lt;Result&gt;(e);
       for (Callable&lt;Result&gt; s : solvers)
           ecs.submit(s);
       int n = solvers.size();
       for (int i = 0; i &lt; n; ++i) {
           Result r = ecs.take().get();
           if (r != null) 
               use(r);
       }
   }
</pre>

Suppose instead that you would like to use the first non-null result
of the set of tasks, ignoring any that encounter exceptions,
and cancelling all other tasks when the first one is ready:

<pre>
   void solve(Executor e, Collection&lt;Callable&lt;Result&gt;&gt; solvers) 
     throws InterruptedException {
       CompletionService&lt;Result&gt; ecs = new ExecutorCompletionService&lt;Result&gt;(e);
       int n = solvers.size();
       List&lt;Future&lt;Result&gt;&gt; futures = new ArrayList&lt;Future&lt;Result&gt;&gt;(n);
       Result result = null;
       try {
           for (Callable&lt;Result&gt; s : solvers)
               futures.add(ecs.submit(s));
           for (int i = 0; i &lt; n; ++i) {
               try {
                   Result r = ecs.take().get();
                   if (r != null) {
                       result = r;
                       break;
                   }
               } catch(ExecutionException ignore) {}
           }
       }
       finally {
           for (Future&lt;Result&gt; f : futures)
               f.cancel(true);
       }

       if (result != null)
           use(result);
   }
</pre>"
      classrelation 1934491 // <realization>
	relation 1934491 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1934491 // <realization>
	  b parent class_ref 989851 // CompletionService
      end

      classrelation 1934619 // executor (<unidirectional association>)
	relation 1934619 --->
	  a role_name "executor" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1934619 // executor (<unidirectional association>)
	  b parent class_ref 521371 // Executor
      end

      classrelation 1934747 // completionQueue (<unidirectional association>)
	relation 1934747 --->
	  a role_name "completionQueue" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Future<V>> ${name}${value};
"
	    classrelation_ref 1934747 // completionQueue (<unidirectional association>)
	  b parent class_ref 989083 // BlockingQueue
      end

      class 994843 "QueueingFuture"
	visibility private 
	nactuals 3
	actual class class_ref 994971 // FutureTask
	  rank 0 explicit_value "V"
	actual class class_ref 994971 // FutureTask
	  rank 1 explicit_value ""
	actual class class_ref 994971 // FutureTask
	  rank 2 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1935771 // <realization>
	  relation 1935771 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1935771 // <realization>
	    b parent class_ref 994971 // FutureTask
	end

	operation 7933339 "QueueingFuture"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "c" type class_ref 988571 // Callable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7933467 "QueueingFuture"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "t" type class_ref 163355 // Runnable
	    param inout name "r" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7933595 "done"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7933723 "ExecutorCompletionService"
	public explicit_return_type ""
	nparams 1
	  param inout name "executor" type class_ref 521371 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ExecutorCompletionService using the supplied
executor for base task execution and a
{@link LinkedBlockingQueue} as a completion queue.
@param executor the executor to use
@throws NullPointerException if executor is <tt>null</tt>"
      end

      operation 7933851 "ExecutorCompletionService"
	public explicit_return_type ""
	nparams 2
	  param inout name "executor" type class_ref 521371 // Executor
	  param inout name "completionQueue" type class_ref 989083 // BlockingQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Future<V>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ExecutorCompletionService using the supplied
executor for base task execution and the supplied queue as its
completion queue.
@param executor the executor to use
@param completionQueue the queue to use as the completion queue
normally one dedicated for use by this service
@throws NullPointerException if executor or completionQueue are <tt>null</tt>"
      end

      operation 7933979 "submit"
	public return_type class_ref 988443 // Future
	nparams 1
	  param inout name "task" type class_ref 988571 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7934107 "submit"
	public return_type class_ref 988443 // Future
	nparams 2
	  param inout name "task" type class_ref 163355 // Runnable
	  param inout name "result" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7934235 "take"
	public return_type class_ref 988443 // Future
	nparams 0
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7934363 "poll"
	public return_type class_ref 988443 // Future
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7934491 "poll"
	public return_type class_ref 988443 // Future
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 994971 "FutureTask"
      visibility public 
      nformals 3
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 3
      actual class class_ref 988443 // Future
        rank 0 explicit_value "V"
      actual class class_ref 988443 // Future
        rank 1 explicit_value ""
      actual class class_ref 988443 // Future
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A cancellable asynchronous computation.  This class provides a base
implementation of {@link Future}, with methods to start and cancel
a computation, query to see if the computation is complete, and
retrieve the result of the computation.  The result can only be
retrieved when the computation has completed; the <tt>get</tt>
method will block if the computation has not yet completed.  Once
the computation has completed, the computation cannot be restarted
or cancelled.

<p>A <tt>FutureTask</tt> can be used to wrap a {@link Callable} or
{@link java.lang.Runnable} object.  Because <tt>FutureTask</tt>
implements <tt>Runnable</tt>, a <tt>FutureTask</tt> can be
submitted to an {@link Executor} for execution.

<p>In addition to serving as a standalone class, this class provides
<tt>protected</tt> functionality that may be useful when creating
customized task classes.

@since 1.5
@author Doug Lea
@param <V> The result type returned by this FutureTask's <tt>get</tt> method"
      classrelation 1934875 // <realization>
	relation 1934875 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1934875 // <realization>
	  b parent class_ref 988443 // Future
      end

      classrelation 1935003 // <realization>
	relation 1935003 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1935003 // <realization>
	  b parent class_ref 163355 // Runnable
      end

      class 995099 "Sync"
	visibility private 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1935259 // <generalisation>
	  relation 1935259 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1935259 // <generalisation>
	    b parent class_ref 990619 // AbstractQueuedSynchronizer
	end

	attribute 2931739 "RUNNING"
	  class_attribute const_attribute private explicit_type "int"
	  init_value "=  1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " State value representing that task is running "
	end

	attribute 2931867 "RAN"
	  class_attribute const_attribute private explicit_type "int"
	  init_value "=  2"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " State value representing that task ran "
	end

	attribute 2931995 "CANCELLED"
	  class_attribute const_attribute private explicit_type "int"
	  init_value "=  4"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " State value representing that task was cancelled "
	end

	classrelation 1935387 // callable (<unidirectional association>)
	  relation 1935387 --->
	    a role_name "callable" const_relation private
	      comment " The underlying callable 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	      classrelation_ref 1935387 // callable (<unidirectional association>)
	    b parent class_ref 988571 // Callable
	end

	attribute 2932123 "result"
	  private explicit_type "V"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " The result to return from get() "
	end

	classrelation 1935515 // exception (<unidirectional association>)
	  relation 1935515 --->
	    a role_name "exception" private
	      comment " The exception to throw from get() 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1935515 // exception (<unidirectional association>)
	    b parent class_ref 164251 // Throwable
	end

	classrelation 1935643 // runner (<unidirectional association>)
	  relation 1935643 --->
	    a role_name "runner" volatile private
	      comment " 
The thread running task. When nulled after set/cancel, this
indicates that the results are accessible.  Must be
volatile, to ensure visibility upon completion.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1935643 // runner (<unidirectional association>)
	    b parent class_ref 163227 // Thread
	end

	operation 7931675 "Sync"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "callable" type class_ref 988571 // Callable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7931803 "ranOrCancelled"
	  private explicit_return_type "boolean"
	  nparams 1
	    param in name "state" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7931931 "tryAcquireShared"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "ignore" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Implements AQS base acquire to succeed if ran or cancelled"
	end

	operation 7932059 "tryReleaseShared"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param in name "ignore" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Implements AQS base release to always signal after setting
final done status by nulling runner thread."
	end

	operation 7932187 "innerIsCancelled"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7932315 "innerIsDone"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7932443 "innerGet"
	  package explicit_return_type "V"
	  nparams 0
	  nexceptions 2
	    exception class_ref 164123 // InterruptedException
	    exception class_ref 988699 // ExecutionException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7932571 "innerGet"
	  package explicit_return_type "V"
	  nparams 1
	    param in name "nanosTimeout" explicit_type "long"
	  nexceptions 3
	    exception class_ref 164123 // InterruptedException
	    exception class_ref 988699 // ExecutionException
	    exception class_ref 988827 // TimeoutException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7932699 "innerSet"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "v" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7932827 "innerSetException"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "t" type class_ref 164251 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7932955 "innerCancel"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "mayInterruptIfRunning" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7933083 "innerRun"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7933211 "innerRunAndReset"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1935131 // sync (<unidirectional association>)
	relation 1935131 --->
	  a role_name "sync" const_relation private
	    comment " Synchronization control for FutureTask 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1935131 // sync (<unidirectional association>)
	  b parent class_ref 995099 // Sync
      end

      operation 7930139 "FutureTask"
	public explicit_return_type ""
	nparams 1
	  param inout name "callable" type class_ref 988571 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>FutureTask</tt> that will upon running, execute the
given <tt>Callable</tt>.

@param  callable the callable task
@throws NullPointerException if callable is null"
      end

      operation 7930267 "FutureTask"
	public explicit_return_type ""
	nparams 2
	  param inout name "runnable" type class_ref 163355 // Runnable
	  param inout name "result" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>FutureTask</tt> that will upon running, execute the
given <tt>Runnable</tt>, and arrange that <tt>get</tt> will return the
given result on successful completion.

@param  runnable the runnable task
@param result the result to return on successful completion. If
you don't need a particular result, consider using
constructions of the form:
<tt>Future&lt;?&gt; f = new FutureTask&lt;Object&gt;(runnable, null)</tt>
@throws NullPointerException if runnable is null"
      end

      operation 7930395 "isCancelled"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7930523 "isDone"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7930651 "cancel"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "mayInterruptIfRunning" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7930779 "get"
	public explicit_return_type "V"
	nparams 0
	nexceptions 2
	  exception class_ref 164123 // InterruptedException
	  exception class_ref 988699 // ExecutionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7930907 "get"
	public explicit_return_type "V"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 3
	  exception class_ref 164123 // InterruptedException
	  exception class_ref 988699 // ExecutionException
	  exception class_ref 988827 // TimeoutException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7931035 "done"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected method invoked when this task transitions to state
<tt>isDone</tt> (whether normally or via cancellation). The
default implementation does nothing.  Subclasses may override
this method to invoke completion callbacks or perform
bookkeeping. Note that you can query status inside the
implementation of this method to determine whether this task
has been cancelled."
      end

      operation 7931163 "set"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "v" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the result of this Future to the given value unless
this future has already been set or has been cancelled.
@param v the value"
      end

      operation 7931291 "setException"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes this future to report an <tt>ExecutionException</tt>
with the given throwable as its cause, unless this Future has
already been set or has been cancelled.
@param t the cause of failure."
      end

      operation 7931419 "run"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this Future to the result of computation unless
it has been cancelled."
      end

      operation 7931547 "runAndReset"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the computation without setting its result, and then
resets this Future to initial state, failing to do so if the
computation encounters an exception or is cancelled.  This is
designed for use with tasks that intrinsically execute more
than once.
@return true if successfully run and reset"
      end
    end

    class 995227 "Executors"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Factory and utility methods for {@link Executor}, {@link
ExecutorService}, {@link ScheduledExecutorService}, {@link
ThreadFactory}, and {@link Callable} classes defined in this
package. This class supports the following kinds of methods:

<ul>
  <li> Methods that create and return an {@link ExecutorService} 
       set up with commonly useful configuration settings. 
  <li> Methods that create and return a {@link ScheduledExecutorService} 
       set up with commonly useful configuration settings. 
  <li> Methods that create and return a \"wrapped\" ExecutorService, that
       disables reconfiguration by making implementation-specific methods
       inaccessible.
  <li> Methods that create and return a {@link ThreadFactory}
       that sets newly created threads to a known state.
  <li> Methods that create and return a {@link Callable} 
       out of other closure-like forms, so they can be used
       in execution methods requiring <tt>Callable</tt>.
</ul>

@since 1.5
@author Doug Lea"
      operation 7934619 "newFixedThreadPool"
	class_operation public return_type class_ref 988187 // ExecutorService
	nparams 1
	  param in name "nThreads" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that reuses a fixed set of threads
operating off a shared unbounded queue. If any thread
terminates due to a failure during execution prior to shutdown,
a new one will take its place if needed to execute subsequent
tasks.

@param nThreads the number of threads in the pool
@return the newly created thread pool"
      end

      operation 7934747 "newFixedThreadPool"
	class_operation public return_type class_ref 988187 // ExecutorService
	nparams 2
	  param in name "nThreads" explicit_type "int"
	  param inout name "threadFactory" type class_ref 995355 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that reuses a fixed set of threads
operating off a shared unbounded queue, using the provided
ThreadFactory to create new threads when needed.

@param nThreads the number of threads in the pool
@param threadFactory the factory to use when creating new threads
@return the newly created thread pool"
      end

      operation 7934875 "newSingleThreadExecutor"
	class_operation public return_type class_ref 988187 // ExecutorService
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an Executor that uses a single worker thread operating
off an unbounded queue. (Note however that if this single
thread terminates due to a failure during execution prior to
shutdown, a new one will take its place if needed to execute
subsequent tasks.)  Tasks are guaranteed to execute
sequentially, and no more than one task will be active at any
given time. Unlike the otherwise equivalent
<tt>newFixedThreadPool(1)</tt> the returned executor is
guaranteed not to be reconfigurable to use additional threads.

@return the newly created single-threaded Executor"
      end

      operation 7935003 "newSingleThreadExecutor"
	class_operation public return_type class_ref 988187 // ExecutorService
	nparams 1
	  param inout name "threadFactory" type class_ref 995355 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an Executor that uses a single worker thread operating
off an unbounded queue, and uses the provided ThreadFactory to
create a new thread when needed. Unlike the otherwise
equivalent <tt>newFixedThreadPool(1, threadFactory)</tt> the returned executor
is guaranteed not to be reconfigurable to use additional
threads.

@param threadFactory the factory to use when creating new
threads

@return the newly created single-threaded Executor"
      end

      operation 7935131 "newCachedThreadPool"
	class_operation public return_type class_ref 988187 // ExecutorService
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that creates new threads as needed, but
will reuse previously constructed threads when they are
available.  These pools will typically improve the performance
of programs that execute many short-lived asynchronous tasks.
Calls to <tt>execute</tt> will reuse previously constructed
threads if available. If no existing thread is available, a new
thread will be created and added to the pool. Threads that have
not been used for sixty seconds are terminated and removed from
the cache. Thus, a pool that remains idle for long enough will
not consume any resources. Note that pools with similar
properties but different details (for example, timeout parameters)
may be created using {@link ThreadPoolExecutor} constructors.

@return the newly created thread pool"
      end

      operation 7935259 "newCachedThreadPool"
	class_operation public return_type class_ref 988187 // ExecutorService
	nparams 1
	  param inout name "threadFactory" type class_ref 995355 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that creates new threads as needed, but
will reuse previously constructed threads when they are
available, and uses the provided
ThreadFactory to create new threads when needed.
@param threadFactory the factory to use when creating new threads
@return the newly created thread pool"
      end

      operation 7935387 "newSingleThreadScheduledExecutor"
	class_operation public return_type class_ref 995483 // ScheduledExecutorService
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a single-threaded executor that can schedule commands
to run after a given delay, or to execute periodically.
(Note however that if this single
thread terminates due to a failure during execution prior to
shutdown, a new one will take its place if needed to execute
subsequent tasks.)  Tasks are guaranteed to execute
sequentially, and no more than one task will be active at any
given time. Unlike the otherwise equivalent
<tt>newScheduledThreadPool(1)</tt> the returned executor is
guaranteed not to be reconfigurable to use additional threads.
@return the newly created scheduled executor"
      end

      operation 7935515 "newSingleThreadScheduledExecutor"
	class_operation public return_type class_ref 995483 // ScheduledExecutorService
	nparams 1
	  param inout name "threadFactory" type class_ref 995355 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a single-threaded executor that can schedule commands
to run after a given delay, or to execute periodically.  (Note
however that if this single thread terminates due to a failure
during execution prior to shutdown, a new one will take its
place if needed to execute subsequent tasks.)  Tasks are
guaranteed to execute sequentially, and no more than one task
will be active at any given time. Unlike the otherwise
equivalent <tt>newScheduledThreadPool(1, threadFactory)</tt>
the returned executor is guaranteed not to be reconfigurable to
use additional threads.
@param threadFactory the factory to use when creating new
threads
@return a newly created scheduled executor"
      end

      operation 7935643 "newScheduledThreadPool"
	class_operation public return_type class_ref 995483 // ScheduledExecutorService
	nparams 1
	  param in name "corePoolSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that can schedule commands to run after a 
given delay, or to execute periodically.
@param corePoolSize the number of threads to keep in the pool,
even if they are idle.
@return a newly created scheduled thread pool"
      end

      operation 7935771 "newScheduledThreadPool"
	class_operation public return_type class_ref 995483 // ScheduledExecutorService
	nparams 2
	  param in name "corePoolSize" explicit_type "int"
	  param inout name "threadFactory" type class_ref 995355 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that can schedule commands to run after a 
given delay, or to execute periodically.
@param corePoolSize the number of threads to keep in the pool,
even if they are idle.
@param threadFactory the factory to use when the executor
creates a new thread. 
@return a newly created scheduled thread pool"
      end

      operation 7935899 "unconfigurableExecutorService"
	class_operation public return_type class_ref 988187 // ExecutorService
	nparams 1
	  param inout name "executor" type class_ref 988187 // ExecutorService
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object that delegates all defined {@link
ExecutorService} methods to the given executor, but not any
other methods that might otherwise be accessible using
casts. This provides a way to safely \"freeze\" configuration and
disallow tuning of a given concrete implementation.
@param executor the underlying implementation
@return an <tt>ExecutorService</tt> instance
@throws NullPointerException if executor null"
      end

      operation 7936027 "unconfigurableScheduledExecutorService"
	class_operation public return_type class_ref 995483 // ScheduledExecutorService
	nparams 1
	  param inout name "executor" type class_ref 995483 // ScheduledExecutorService
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object that delegates all defined {@link
ScheduledExecutorService} methods to the given executor, but
not any other methods that might otherwise be accessible using
casts. This provides a way to safely \"freeze\" configuration and
disallow tuning of a given concrete implementation.
@param executor the underlying implementation
@return a <tt>ScheduledExecutorService</tt> instance
@throws NullPointerException if executor null"
      end

      operation 7936155 "defaultThreadFactory"
	class_operation public return_type class_ref 995355 // ThreadFactory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a default thread factory used to create new threads.
This factory creates all new threads used by an Executor in the
same {@link ThreadGroup}. If there is a {@link
java.lang.SecurityManager}, it uses the group of {@link
System#getSecurityManager}, else the group of the thread
invoking this <tt>defaultThreadFactory</tt> method. Each new
thread is created as a non-daemon thread with priority
<tt>Thread.NORM_PRIORITY</tt>. New threads have names
accessible via {@link Thread#getName} of
<em>pool-N-thread-M</em>, where <em>N</em> is the sequence
number of this factory, and <em>M</em> is the sequence number
of the thread created by this factory.
@return a thread factory"
      end

      operation 7936283 "privilegedThreadFactory"
	class_operation public return_type class_ref 995355 // ThreadFactory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a thread factory used to create new threads that
have the same permissions as the current thread.
This factory creates threads with the same settings as {@link
Executors#defaultThreadFactory}, additionally setting the
AccessControlContext and contextClassLoader of new threads to
be the same as the thread invoking this
<tt>privilegedThreadFactory</tt> method.  A new
<tt>privilegedThreadFactory</tt> can be created within an
{@link AccessController#doPrivileged} action setting the
current thread's access control context to create threads with
the selected permission settings holding within that action.

<p> Note that while tasks running within such threads will have
the same access control and class loader settings as the
current thread, they need not have the same {@link
java.lang.ThreadLocal} or {@link
java.lang.InheritableThreadLocal} values. If necessary,
particular values of thread locals can be set or reset before
any task runs in {@link ThreadPoolExecutor} subclasses using
{@link ThreadPoolExecutor#beforeExecute}. Also, if it is
necessary to initialize worker threads to have the same
InheritableThreadLocal settings as some other designated
thread, you can create a custom ThreadFactory in which that
thread waits for and services requests to create others that
will inherit its values.

@return a thread factory
@throws AccessControlException if the current access control
context does not have permission to both get and set context
class loader."
      end

      operation 7936411 "callable"
	class_operation public return_type class_ref 988571 // Callable
	nparams 2
	  param inout name "task" type class_ref 163355 // Runnable
	  param inout name "result" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that, when
called, runs the given task and returns the given result.  This
can be useful when applying methods requiring a
<tt>Callable</tt> to an otherwise resultless action.
@param task the task to run
@param result the result to return
@throws NullPointerException if task null
@return a callable object"
      end

      operation 7936539 "callable"
	class_operation public return_type class_ref 988571 // Callable
	nparams 1
	  param inout name "task" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that, when
called, runs the given task and returns <tt>null</tt>.
@param task the task to run
@return a callable object
@throws NullPointerException if task null"
      end

      operation 7936667 "callable"
	class_operation public return_type class_ref 988571 // Callable
	nparams 1
	  param inout name "action" type class_ref 222363 // PrivilegedAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that, when
called, runs the given privileged action and returns its result.
@param action the privileged action to run
@return a callable object
@throws NullPointerException if action null"
      end

      operation 7936795 "callable"
	class_operation public return_type class_ref 988571 // Callable
	nparams 1
	  param inout name "action" type class_ref 529051 // PrivilegedExceptionAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that, when
called, runs the given privileged exception action and returns
its result.
@param action the privileged exception action to run
@return a callable object
@throws NullPointerException if action null"
      end

      operation 7936923 "privilegedCallable"
	class_operation public return_type class_ref 988571 // Callable
	nparams 1
	  param inout name "callable" type class_ref 988571 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that will, when
called, execute the given <tt>callable</tt> under the current
access control context. This method should normally be
invoked within an {@link AccessController#doPrivileged} action
to create callables that will, if possible, execute under the
selected permission settings holding within that action; or if
not possible, throw an associated {@link
AccessControlException}.
@param callable the underlying task
@return a callable object
@throws NullPointerException if callable null
"
      end

      operation 7937051 "privilegedCallableUsingCurrentClassLoader"
	class_operation public return_type class_ref 988571 // Callable
	nparams 1
	  param inout name "callable" type class_ref 988571 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that will, when
called, execute the given <tt>callable</tt> under the current
access control context, with the current context class loader
as the context class loader. This method should normally be
invoked within an {@link AccessController#doPrivileged} action
to create callables that will, if possible, execute under the
selected permission settings holding within that action; or if
not possible, throw an associated {@link
AccessControlException}.
@param callable the underlying task

@return a callable object
@throws NullPointerException if callable null
@throws AccessControlException if the current access control
context does not have permission to both set and get context
class loader."
      end

      class 995611 "RunnableAdapter"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 988571 // Callable
	  rank 0 explicit_value "T"
	actual class class_ref 988571 // Callable
	  rank 1 explicit_value ""
	actual class class_ref 988571 // Callable
	  rank 2 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1935899 // <realization>
	  relation 1935899 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1935899 // <realization>
	    b parent class_ref 988571 // Callable
	end

	classrelation 1936027 // task (<unidirectional association>)
	  relation 1936027 --->
	    a role_name "task" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1936027 // task (<unidirectional association>)
	    b parent class_ref 163355 // Runnable
	end

	attribute 2932251 "result"
	  const_attribute package explicit_type "T"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7937179 "RunnableAdapter"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "task" type class_ref 163355 // Runnable
	    param inout name "result" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7937307 "call"
	  public explicit_return_type "T"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 995739 "PrivilegedActionAdapter"
	visibility package 
	nactuals 3
	actual class class_ref 988571 // Callable
	  rank 0 explicit_value "any"
	actual class class_ref 988571 // Callable
	  rank 1 explicit_value ""
	actual class class_ref 988571 // Callable
	  rank 2 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1936155 // <realization>
	  relation 1936155 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1936155 // <realization>
	    b parent class_ref 988571 // Callable
	end

	operation 7937435 "PrivilegedActionAdapter"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "action" type class_ref 222363 // PrivilegedAction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7937563 "call"
	  public explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 1936283 // action (<unidirectional association>)
	  relation 1936283 --->
	    a role_name "action" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1936283 // action (<unidirectional association>)
	    b parent class_ref 222363 // PrivilegedAction
	end
      end

      class 995867 "PrivilegedExceptionActionAdapter"
	visibility package 
	nactuals 3
	actual class class_ref 988571 // Callable
	  rank 0 explicit_value "any"
	actual class class_ref 988571 // Callable
	  rank 1 explicit_value ""
	actual class class_ref 988571 // Callable
	  rank 2 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1936411 // <realization>
	  relation 1936411 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1936411 // <realization>
	    b parent class_ref 988571 // Callable
	end

	operation 7937691 "PrivilegedExceptionActionAdapter"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "action" type class_ref 529051 // PrivilegedExceptionAction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7937819 "call"
	  public explicit_return_type "Object"
	  nparams 0
	  nexceptions 1
	    exception class_ref 165403 // Exception
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 1936539 // action (<unidirectional association>)
	  relation 1936539 --->
	    a role_name "action" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1936539 // action (<unidirectional association>)
	    b parent class_ref 529051 // PrivilegedExceptionAction
	end
      end

      class 995995 "PrivilegedCallable"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 988571 // Callable
	  rank 0 explicit_value "T"
	actual class class_ref 988571 // Callable
	  rank 1 explicit_value ""
	actual class class_ref 988571 // Callable
	  rank 2 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1936667 // <realization>
	  relation 1936667 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1936667 // <realization>
	    b parent class_ref 988571 // Callable
	end

	classrelation 1936795 // acc (<unidirectional association>)
	  relation 1936795 --->
	    a role_name "acc" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1936795 // acc (<unidirectional association>)
	    b parent class_ref 163739 // AccessControlContext
	end

	classrelation 1936923 // task (<unidirectional association>)
	  relation 1936923 --->
	    a role_name "task" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 1936923 // task (<unidirectional association>)
	    b parent class_ref 988571 // Callable
	end

	attribute 2932379 "result"
	  private explicit_type "T"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1937051 // exception (<unidirectional association>)
	  relation 1937051 --->
	    a role_name "exception" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1937051 // exception (<unidirectional association>)
	    b parent class_ref 165403 // Exception
	end

	operation 7937947 "PrivilegedCallable"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "task" type class_ref 988571 // Callable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7938075 "call"
	  public explicit_return_type "T"
	  nparams 0
	  nexceptions 1
	    exception class_ref 165403 // Exception
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 996123 "PrivilegedCallableUsingCurrentClassLoader"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 988571 // Callable
	  rank 0 explicit_value "T"
	actual class class_ref 988571 // Callable
	  rank 1 explicit_value ""
	actual class class_ref 988571 // Callable
	  rank 2 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1937179 // <realization>
	  relation 1937179 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1937179 // <realization>
	    b parent class_ref 988571 // Callable
	end

	classrelation 1937307 // ccl (<unidirectional association>)
	  relation 1937307 --->
	    a role_name "ccl" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1937307 // ccl (<unidirectional association>)
	    b parent class_ref 163611 // ClassLoader
	end

	classrelation 1937435 // acc (<unidirectional association>)
	  relation 1937435 --->
	    a role_name "acc" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1937435 // acc (<unidirectional association>)
	    b parent class_ref 163739 // AccessControlContext
	end

	classrelation 1937563 // task (<unidirectional association>)
	  relation 1937563 --->
	    a role_name "task" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 1937563 // task (<unidirectional association>)
	    b parent class_ref 988571 // Callable
	end

	attribute 2932507 "result"
	  private explicit_type "T"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1937691 // exception (<unidirectional association>)
	  relation 1937691 --->
	    a role_name "exception" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1937691 // exception (<unidirectional association>)
	    b parent class_ref 165403 // Exception
	end

	operation 7938203 "PrivilegedCallableUsingCurrentClassLoader"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "task" type class_ref 988571 // Callable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7938331 "call"
	  public explicit_return_type "T"
	  nparams 0
	  nexceptions 1
	    exception class_ref 165403 // Exception
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 996251 "DefaultThreadFactory"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1937819 // <realization>
	  relation 1937819 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1937819 // <realization>
	    b parent class_ref 995355 // ThreadFactory
	end

	classrelation 1937947 // poolNumber (<unidirectional association>)
	  relation 1937947 --->
	    a role_name "poolNumber" init_value "=  new AtomicInteger(1)" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1937947 // poolNumber (<unidirectional association>)
	    b parent class_ref 994587 // AtomicInteger
	end

	classrelation 1938075 // group (<unidirectional association>)
	  relation 1938075 --->
	    a role_name "group" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1938075 // group (<unidirectional association>)
	    b parent class_ref 163483 // ThreadGroup
	end

	classrelation 1938203 // threadNumber (<unidirectional association>)
	  relation 1938203 --->
	    a role_name "threadNumber" init_value "=  new AtomicInteger(1)" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1938203 // threadNumber (<unidirectional association>)
	    b parent class_ref 994587 // AtomicInteger
	end

	attribute 2932635 "namePrefix"
	  const_attribute package explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7938587 "DefaultThreadFactory"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7938715 "newThread"
	  public return_type class_ref 163227 // Thread
	  nparams 1
	    param inout name "r" type class_ref 163355 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 996379 "PrivilegedThreadFactory"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1938331 // <generalisation>
	  relation 1938331 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1938331 // <generalisation>
	    b parent class_ref 996251 // DefaultThreadFactory
	end

	classrelation 1938459 // ccl (<unidirectional association>)
	  relation 1938459 --->
	    a role_name "ccl" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1938459 // ccl (<unidirectional association>)
	    b parent class_ref 163611 // ClassLoader
	end

	classrelation 1938587 // acc (<unidirectional association>)
	  relation 1938587 --->
	    a role_name "acc" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1938587 // acc (<unidirectional association>)
	    b parent class_ref 163739 // AccessControlContext
	end

	operation 7938843 "PrivilegedThreadFactory"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7938971 "newThread"
	  public return_type class_ref 163227 // Thread
	  nparams 1
	    param in name "r" type class_ref 163355 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 996507 "DelegatedExecutorService"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1938715 // <generalisation>
	  relation 1938715 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1938715 // <generalisation>
	    b parent class_ref 988059 // AbstractExecutorService
	end

	classrelation 1938843 // e (<unidirectional association>)
	  relation 1938843 --->
	    a role_name "e" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1938843 // e (<unidirectional association>)
	    b parent class_ref 988187 // ExecutorService
	end

	operation 7939099 "DelegatedExecutorService"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "executor" type class_ref 988187 // ExecutorService
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7939227 "execute"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "command" type class_ref 163355 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7939355 "shutdown"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7939483 "shutdownNow"
	  public return_type class_ref 135579 // List
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7939611 "isShutdown"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7939739 "isTerminated"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7939867 "awaitTermination"
	  public explicit_return_type "boolean"
	  nparams 2
	    param in name "timeout" explicit_type "long"
	    param inout name "unit" type class_ref 988315 // TimeUnit
	  nexceptions 1
	    exception class_ref 164123 // InterruptedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7939995 "submit"
	  public return_type class_ref 988443 // Future
	  nparams 1
	    param inout name "task" type class_ref 163355 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7940123 "submit"
	  public return_type class_ref 988443 // Future
	  nparams 1
	    param inout name "task" type class_ref 988571 // Callable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7940251 "submit"
	  public return_type class_ref 988443 // Future
	  nparams 2
	    param inout name "task" type class_ref 163355 // Runnable
	    param inout name "result" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7940379 "invokeAll"
	  public return_type class_ref 135579 // List
	  nparams 1
	    param inout name "tasks" type class_ref 135067 // Collection
	  nexceptions 1
	    exception class_ref 164123 // InterruptedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7940507 "invokeAll"
	  public return_type class_ref 135579 // List
	  nparams 3
	    param inout name "tasks" type class_ref 135067 // Collection
	    param in name "timeout" explicit_type "long"
	    param inout name "unit" type class_ref 988315 // TimeUnit
	  nexceptions 1
	    exception class_ref 164123 // InterruptedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7940635 "invokeAny"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "tasks" type class_ref 135067 // Collection
	  nexceptions 2
	    exception class_ref 164123 // InterruptedException
	    exception class_ref 988699 // ExecutionException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7940763 "invokeAny"
	  public explicit_return_type "T"
	  nparams 3
	    param inout name "tasks" type class_ref 135067 // Collection
	    param in name "timeout" explicit_type "long"
	    param inout name "unit" type class_ref 988315 // TimeUnit
	  nexceptions 3
	    exception class_ref 164123 // InterruptedException
	    exception class_ref 988699 // ExecutionException
	    exception class_ref 988827 // TimeoutException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 996635 "DelegatedScheduledExecutorService"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1938971 // <generalisation>
	  relation 1938971 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1938971 // <generalisation>
	    b parent class_ref 996507 // DelegatedExecutorService
	end

	classrelation 1939227 // <realization>
	  relation 1939227 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1939227 // <realization>
	    b parent class_ref 995483 // ScheduledExecutorService
	end

	classrelation 1939355 // e (<unidirectional association>)
	  relation 1939355 --->
	    a role_name "e" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1939355 // e (<unidirectional association>)
	    b parent class_ref 995483 // ScheduledExecutorService
	end

	operation 7941403 "DelegatedScheduledExecutorService"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "executor" type class_ref 995483 // ScheduledExecutorService
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7941531 "schedule"
	  public return_type class_ref 996763 // ScheduledFuture
	  nparams 3
	    param inout name "command" type class_ref 163355 // Runnable
	    param in name "delay" explicit_type "long"
	    param inout name "unit" type class_ref 988315 // TimeUnit
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7941659 "schedule"
	  public return_type class_ref 996763 // ScheduledFuture
	  nparams 3
	    param inout name "callable" type class_ref 988571 // Callable
	    param in name "delay" explicit_type "long"
	    param inout name "unit" type class_ref 988315 // TimeUnit
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0}<V> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7941787 "scheduleAtFixedRate"
	  public return_type class_ref 996763 // ScheduledFuture
	  nparams 4
	    param inout name "command" type class_ref 163355 // Runnable
	    param in name "initialDelay" explicit_type "long"
	    param in name "period" explicit_type "long"
	    param inout name "unit" type class_ref 988315 // TimeUnit
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7941915 "scheduleWithFixedDelay"
	  public return_type class_ref 996763 // ScheduledFuture
	  nparams 4
	    param inout name "command" type class_ref 163355 // Runnable
	    param in name "initialDelay" explicit_type "long"
	    param in name "delay" explicit_type "long"
	    param inout name "unit" type class_ref 988315 // TimeUnit
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7942043 "Executors"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Cannot instantiate. "
      end
    end

    class 995355 "ThreadFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that creates new threads on demand.  Using thread factories
removes hardwiring of calls to {@link Thread#Thread(Runnable) new Thread},
enabling applications to use special thread subclasses, priorities, etc.

<p> 
The simplest implementation of this interface is just:
<pre>
class SimpleThreadFactory implements ThreadFactory {
  public Thread newThread(Runnable r) {
    return new Thread(r);
  }
}
</pre>

The {@link Executors#defaultThreadFactory} method provides a more
useful simple implementation, that sets the created thread context
to known values before returning it. 
@since 1.5
@author Doug Lea"
      operation 7938459 "newThread"
	public return_type class_ref 163227 // Thread
	nparams 1
	  param inout name "r" type class_ref 163355 // Runnable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <tt>Thread</tt>.  Implementations may also initialize
priority, name, daemon status, <tt>ThreadGroup</tt>, etc.

@param r a runnable to be executed by new thread instance
@return constructed thread"
      end
    end

    class 995483 "ScheduledExecutorService"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@link ExecutorService} that can schedule commands to run after a given
delay, or to execute periodically. 

<p> The <tt>schedule</tt> methods create tasks with various delays
and return a task object that can be used to cancel or check
execution. The <tt>scheduleAtFixedRate</tt> and
<tt>scheduleWithFixedDelay</tt> methods create and execute tasks
that run periodically until cancelled.  

<p> Commands submitted using the {@link Executor#execute} and
{@link ExecutorService} <tt>submit</tt> methods are scheduled with
a requested delay of zero. Zero and negative delays (but not
periods) are also allowed in <tt>schedule</tt> methods, and are
treated as requests for immediate execution.

<p>All <tt>schedule</tt> methods accept <em>relative</em> delays and
periods as arguments, not absolute times or dates. It is a simple
matter to transform an absolute time represented as a {@link
java.util.Date} to the required form. For example, to schedule at
a certain future <tt>date</tt>, you can use: <tt>schedule(task,
date.getTime() - System.currentTimeMillis(),
TimeUnit.MILLISECONDS)</tt>. Beware however that expiration of a
relative delay need not coincide with the current <tt>Date</tt> at
which the task is enabled due to network time synchronization
protocols, clock drift, or other factors. 

The {@link Executors} class provides convenient factory methods for
the ScheduledExecutorService implementations provided in this package.

<h3>Usage Example</h3>

Here is a class with a method that sets up a ScheduledExecutorService
to beep every ten seconds for an hour:

<pre>
import static java.util.concurrent.TimeUnit.*;
class BeeperControl {
   private final ScheduledExecutorService scheduler = 
      Executors.newScheduledThreadPool(1);

   public void beepForAnHour() {
       final Runnable beeper = new Runnable() {
               public void run() { System.out.println(\"beep\"); }
           };
       final ScheduledFuture&lt;?&gt; beeperHandle = 
           scheduler.scheduleAtFixedRate(beeper, 10, 10, SECONDS);
       scheduler.schedule(new Runnable() {
               public void run() { beeperHandle.cancel(true); }
           }, 60 * 60, SECONDS);
   }
}
</pre>

@since 1.5
@author Doug Lea"
      classrelation 1939099 // <generalisation>
	relation 1939099 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1939099 // <generalisation>
	  b parent class_ref 988187 // ExecutorService
      end

      operation 7940891 "schedule"
	public return_type class_ref 996763 // ScheduledFuture
	nparams 3
	  param inout name "command" type class_ref 163355 // Runnable
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and executes a one-shot action that becomes enabled
after the given delay.
@param command the task to execute.
@param delay the time from now to delay execution.
@param unit the time unit of the delay parameter.
@return a Future representing pending completion of the task,
and whose <tt>get()</tt> method will return <tt>null</tt>
upon completion.
@throws RejectedExecutionException if task cannot be scheduled
for execution.
@throws NullPointerException if command is null"
      end

      operation 7941019 "schedule"
	public return_type class_ref 996763 // ScheduledFuture
	nparams 3
	  param inout name "callable" type class_ref 988571 // Callable
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0}<V> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and executes a ScheduledFuture that becomes enabled after the
given delay.
@param callable the function to execute.
@param delay the time from now to delay execution.
@param unit the time unit of the delay parameter.
@return a ScheduledFuture that can be used to extract result or cancel.
@throws RejectedExecutionException if task cannot be scheduled
for execution.
@throws NullPointerException if callable is null"
      end

      operation 7941147 "scheduleAtFixedRate"
	public return_type class_ref 996763 // ScheduledFuture
	nparams 4
	  param inout name "command" type class_ref 163355 // Runnable
	  param in name "initialDelay" explicit_type "long"
	  param in name "period" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and executes a periodic action that becomes enabled first
after the given initial delay, and subsequently with the given
period; that is executions will commence after
<tt>initialDelay</tt> then <tt>initialDelay+period</tt>, then
<tt>initialDelay + 2 * period</tt>, and so on.  
If any execution of the task
encounters an exception, subsequent executions are suppressed.
Otherwise, the task will only terminate via cancellation or
termination of the executor.
@param command the task to execute.
@param initialDelay the time to delay first execution.
@param period the period between successive executions.
@param unit the time unit of the initialDelay and period parameters
@return a Future representing pending completion of the task,
and whose <tt>get()</tt> method will throw an exception upon
cancellation.
@throws RejectedExecutionException if task cannot be scheduled
for execution.
@throws NullPointerException if command is null
@throws IllegalArgumentException if period less than or equal to zero."
      end

      operation 7941275 "scheduleWithFixedDelay"
	public return_type class_ref 996763 // ScheduledFuture
	nparams 4
	  param inout name "command" type class_ref 163355 // Runnable
	  param in name "initialDelay" explicit_type "long"
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and executes a periodic action that becomes enabled first
after the given initial delay, and subsequently with the
given delay between the termination of one execution and the
commencement of the next. If any execution of the task
encounters an exception, subsequent executions are suppressed.
Otherwise, the task will only terminate via cancellation or
termination of the executor.
@param command the task to execute.
@param initialDelay the time to delay first execution.
@param delay the delay between the termination of one
execution and the commencement of the next.
@param unit the time unit of the initialDelay and delay parameters
@return a Future representing pending completion of the task,
and whose <tt>get()</tt> method will throw an exception upon
cancellation.
@throws RejectedExecutionException if task cannot be scheduled
for execution.
@throws NullPointerException if command is null
@throws IllegalArgumentException if delay less than or equal to zero."
      end
    end

    class 996763 "ScheduledFuture"
      visibility public stereotype "interface"
      nformals 3
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 3
      actual class class_ref 988443 // Future
        rank 0 explicit_value "V"
      actual class class_ref 988443 // Future
        rank 1 explicit_value ""
      actual class class_ref 988443 // Future
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A delayed result-bearing action that can be cancelled.
Usually a scheduled future is the result of scheduling
a task with a {@link ScheduledExecutorService}.

@since 1.5
@author Doug Lea
@param <V> The result type returned by this Future"
      classrelation 1942427 // <generalisation>
	relation 1942427 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1942427 // <generalisation>
	  b parent class_ref 993691 // Delayed
      end

      classrelation 1942555 // <realization>
	relation 1942555 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1942555 // <realization>
	  b parent class_ref 988443 // Future
      end
    end

    class 996891 "LinkedBlockingQueue"
      visibility public 
      nformals 3
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 7
      actual class class_ref 137115 // AbstractQueue
        rank 0 explicit_value "E"
      actual class class_ref 137115 // AbstractQueue
        rank 1 explicit_value ""
      actual class class_ref 137115 // AbstractQueue
        rank 2 explicit_value ""
      actual class class_ref 137115 // AbstractQueue
        rank 3 explicit_value ""
      actual class class_ref 989083 // BlockingQueue
        rank 0 explicit_value "E"
      actual class class_ref 989083 // BlockingQueue
        rank 1 explicit_value ""
      actual class class_ref 989083 // BlockingQueue
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An optionally-bounded {@linkplain BlockingQueue blocking queue} based on
linked nodes.
This queue orders elements FIFO (first-in-first-out).
The <em>head</em> of the queue is that element that has been on the
queue the longest time.
The <em>tail</em> of the queue is that element that has been on the
queue the shortest time. New elements
are inserted at the tail of the queue, and the queue retrieval
operations obtain elements at the head of the queue.
Linked queues typically have higher throughput than array-based queues but
less predictable performance in most concurrent applications.

<p> The optional capacity bound constructor argument serves as a
way to prevent excessive queue expansion. The capacity, if unspecified,
is equal to {@link Integer#MAX_VALUE}.  Linked nodes are
dynamically created upon each insertion unless this would bring the
queue above capacity.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.

<p>This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 1939483 // <realization>
	relation 1939483 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1939483 // <realization>
	  b parent class_ref 137115 // AbstractQueue
      end

      classrelation 1939611 // <realization>
	relation 1939611 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1939611 // <realization>
	  b parent class_ref 989083 // BlockingQueue
      end

      classrelation 1939739 // <realization>
	relation 1939739 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1939739 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2932763 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -6903933977591709194L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 997019 "Node"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2932891 "item"
	  volatile package explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " The item, volatile to ensure barrier separating write and read "
	end

	classrelation 1939867 // next (<unidirectional association>)
	  relation 1939867 --->
	    a role_name "next" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 1939867 // next (<unidirectional association>)
	    b parent class_ref 997019 // Node
	end

	operation 7942171 "Node"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "x" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 2933019 "capacity"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The capacity bound, or Integer.MAX_VALUE if none "
      end

      classrelation 1939995 // count (<unidirectional association>)
	relation 1939995 --->
	  a role_name "count" init_value "=  new AtomicInteger(0)" const_relation private
	    comment " Current number of elements 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1939995 // count (<unidirectional association>)
	  b parent class_ref 994587 // AtomicInteger
      end

      classrelation 1940123 // head (<unidirectional association>)
	relation 1940123 --->
	  a role_name "head" private
	    comment " Head of linked list 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 1940123 // head (<unidirectional association>)
	  b parent class_ref 997019 // Node
      end

      classrelation 1940251 // last (<unidirectional association>)
	relation 1940251 --->
	  a role_name "last" private
	    comment " Tail of linked list 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 1940251 // last (<unidirectional association>)
	  b parent class_ref 997019 // Node
      end

      classrelation 1940379 // takeLock (<unidirectional association>)
	relation 1940379 --->
	  a role_name "takeLock" init_value "=  new ReentrantLock()" const_relation private
	    comment " Lock held by take, poll, etc 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1940379 // takeLock (<unidirectional association>)
	  b parent class_ref 989211 // ReentrantLock
      end

      classrelation 1940507 // notEmpty (<unidirectional association>)
	relation 1940507 --->
	  a role_name "notEmpty" init_value "=  takeLock.newCondition()" const_relation private
	    comment " Wait queue for waiting takes 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1940507 // notEmpty (<unidirectional association>)
	  b parent class_ref 989339 // Condition
      end

      classrelation 1940635 // putLock (<unidirectional association>)
	relation 1940635 --->
	  a role_name "putLock" init_value "=  new ReentrantLock()" const_relation private
	    comment " Lock held by put, offer, etc 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1940635 // putLock (<unidirectional association>)
	  b parent class_ref 989211 // ReentrantLock
      end

      classrelation 1940763 // notFull (<unidirectional association>)
	relation 1940763 --->
	  a role_name "notFull" init_value "=  putLock.newCondition()" const_relation private
	    comment " Wait queue for waiting puts 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1940763 // notFull (<unidirectional association>)
	  b parent class_ref 989339 // Condition
      end

      operation 7942299 "signalNotEmpty"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Signal a waiting take. Called only from put/offer (which do not
otherwise ordinarily lock takeLock.)"
      end

      operation 7942427 "signalNotFull"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Signal a waiting put. Called only from take/poll."
      end

      operation 7942555 "insert"
	private explicit_return_type "void"
	nparams 1
	  param inout name "x" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a node and link it at end of queue
@param x the item"
      end

      operation 7942683 "extract"
	private explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a node from head of queue,
@return the node"
      end

      operation 7942811 "fullyLock"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Lock to prevent both puts and takes."
      end

      operation 7942939 "fullyUnlock"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlock to allow both puts and takes."
      end

      operation 7943067 "LinkedBlockingQueue"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>LinkedBlockingQueue</tt> with a capacity of
{@link Integer#MAX_VALUE}."
      end

      operation 7943195 "LinkedBlockingQueue"
	public explicit_return_type ""
	nparams 1
	  param in name "capacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>LinkedBlockingQueue</tt> with the given (fixed) capacity.

@param capacity the capacity of this queue.
@throws IllegalArgumentException if <tt>capacity</tt> is not greater
        than zero."
      end

      operation 7943323 "LinkedBlockingQueue"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>LinkedBlockingQueue</tt> with a capacity of
{@link Integer#MAX_VALUE}, initially containing the elements of the
given collection,
added in traversal order of the collection's iterator.
@param c the collection of elements to initially contain
@throws NullPointerException if <tt>c</tt> or any element within it
is <tt>null</tt>"
      end

      operation 7943451 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " this doc comment is overridden to remove the reference to collections
 greater in size than Integer.MAX_VALUE

Returns the number of elements in this queue.

@return  the number of elements in this queue."
      end

      operation 7943579 "remainingCapacity"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " this doc comment is a modified copy of the inherited doc comment,
 without the reference to unlimited queues.

Returns the number of elements that this queue can ideally (in
the absence of memory or resource constraints) accept without
blocking. This is always equal to the initial capacity of this queue
less the current <tt>size</tt> of this queue.
<p>Note that you <em>cannot</em> always tell if
an attempt to <tt>add</tt> an element will succeed by
inspecting <tt>remainingCapacity</tt> because it may be the
case that a waiting consumer is ready to <tt>take</tt> an
element out of an otherwise full queue."
      end

      operation 7943707 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" explicit_type "E"
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to the tail of this queue, waiting if
necessary for space to become available.
@param o the element to add
@throws InterruptedException if interrupted while waiting.
@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 7943835 "offer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "o" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue, waiting if
necessary up to the specified wait time for space to become available.
@param o the element to add
@param timeout how long to wait before giving up, in units of
<tt>unit</tt>
@param unit a <tt>TimeUnit</tt> determining how to interpret the
<tt>timeout</tt> parameter
@return <tt>true</tt> if successful, or <tt>false</tt> if
the specified waiting time elapses before space is available.
@throws InterruptedException if interrupted while waiting.
@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 7943963 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue if possible,
returning immediately if this queue is full.

@param o the element to add.
@return <tt>true</tt> if it was possible to add the element to
        this queue, else <tt>false</tt>
@throws NullPointerException if the specified element is <tt>null</tt>"
      end

      operation 7944091 "take"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7944219 "poll"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7944347 "poll"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7944475 "peek"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7944603 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this
queue, if it is present."
      end

      operation 7944731 "toArray"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7944859 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7944987 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7945115 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically removes all of the elements from this queue.
The queue will be empty after this call returns."
      end

      operation 7945243 "drainTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7945371 "drainTo"
	public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 135067 // Collection
	  param in name "maxElements" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7945499 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue in proper sequence.
The returned <tt>Iterator</tt> is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException},
and guarantees to traverse elements as they existed upon
construction of the iterator, and may (but is not guaranteed to)
reflect any modifications subsequent to construction.

@return an iterator over the elements in this queue in proper sequence."
      end

      class 997147 "Itr"
	visibility private 
	nactuals 4
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "E"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1940891 // <realization>
	  relation 1940891 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1940891 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	classrelation 1941019 // current (<unidirectional association>)
	  relation 1941019 --->
	    a role_name "current" private
	      comment "
Basic weak-consistent iterator.  At all times hold the next
item to hand out so that if hasNext() reports true, we will
still have it to return even if lost race with a take etc.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 1941019 // current (<unidirectional association>)
	    b parent class_ref 997019 // Node
	end

	classrelation 1941147 // lastRet (<unidirectional association>)
	  relation 1941147 --->
	    a role_name "lastRet" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 1941147 // lastRet (<unidirectional association>)
	    b parent class_ref 997019 // Node
	end

	attribute 2933147 "currentElement"
	  private explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7945627 "Itr"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7945755 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7945883 "next"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7946011 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7946139 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state to a stream (that is, serialize it).

@serialData The capacity is emitted (int), followed by all of
its elements (each an <tt>Object</tt>) in the proper order,
followed by a null
@param s the stream"
      end

      operation 7946267 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute this queue instance from a stream (that is,
deserialize it).
@param s the stream"
      end
    end

    class 997275 "PriorityBlockingQueue"
      visibility public 
      nformals 3
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 7
      actual class class_ref 137115 // AbstractQueue
        rank 0 explicit_value "E"
      actual class class_ref 137115 // AbstractQueue
        rank 1 explicit_value ""
      actual class class_ref 137115 // AbstractQueue
        rank 2 explicit_value ""
      actual class class_ref 137115 // AbstractQueue
        rank 3 explicit_value ""
      actual class class_ref 989083 // BlockingQueue
        rank 0 explicit_value "E"
      actual class class_ref 989083 // BlockingQueue
        rank 1 explicit_value ""
      actual class class_ref 989083 // BlockingQueue
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An unbounded {@linkplain BlockingQueue blocking queue} that uses
the same ordering rules as class {@link PriorityQueue} and supplies
blocking retrieval operations.  While this queue is logically
unbounded, attempted additions may fail due to resource exhaustion
(causing <tt>OutOfMemoryError</tt>). This class does not permit
<tt>null</tt> elements.  A priority queue relying on natural
ordering also does not permit insertion of non-comparable objects
(doing so results in <tt>ClassCastException</tt>).

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces. 
The Iterator provided in method {@link #iterator()} is
<em>not</em> guaranteed to traverse the elements of the
PriorityBlockingQueue in any particular order. If you need ordered
traversal, consider using <tt>Arrays.sort(pq.toArray())</tt>.

<p>This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 1941275 // <realization>
	relation 1941275 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1941275 // <realization>
	  b parent class_ref 137115 // AbstractQueue
      end

      classrelation 1941403 // <realization>
	relation 1941403 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1941403 // <realization>
	  b parent class_ref 989083 // BlockingQueue
      end

      classrelation 1941531 // <realization>
	relation 1941531 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1941531 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2933275 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  5595510919245408276L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1941659 // q (<unidirectional association>)
	relation 1941659 --->
	  a role_name "q" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 1941659 // q (<unidirectional association>)
	  b parent class_ref 154651 // PriorityQueue
      end

      classrelation 1941787 // lock (<unidirectional association>)
	relation 1941787 --->
	  a role_name "lock" init_value "=  new ReentrantLock(true)" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1941787 // lock (<unidirectional association>)
	  b parent class_ref 989211 // ReentrantLock
      end

      classrelation 1941915 // notEmpty (<unidirectional association>)
	relation 1941915 --->
	  a role_name "notEmpty" init_value "=  lock.newCondition()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1941915 // notEmpty (<unidirectional association>)
	  b parent class_ref 989339 // Condition
      end

      operation 7946395 "PriorityBlockingQueue"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>PriorityBlockingQueue</tt> with the default initial 
capacity
(11) that orders its elements according to their natural
ordering (using <tt>Comparable</tt>)."
      end

      operation 7946523 "PriorityBlockingQueue"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>PriorityBlockingQueue</tt> with the specified initial
capacity
that orders its elements according to their natural ordering
(using <tt>Comparable</tt>).

@param initialCapacity the initial capacity for this priority queue.
@throws IllegalArgumentException if <tt>initialCapacity</tt> is less
than 1"
      end

      operation 7946651 "PriorityBlockingQueue"
	public explicit_return_type ""
	nparams 2
	  param in name "initialCapacity" explicit_type "int"
	  param inout name "comparator" type class_ref 138139 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>PriorityBlockingQueue</tt> with the specified initial
capacity
that orders its elements according to the specified comparator.

@param initialCapacity the initial capacity for this priority queue.
@param comparator the comparator used to order this priority queue.
If <tt>null</tt> then the order depends on the elements' natural
ordering.
@throws IllegalArgumentException if <tt>initialCapacity</tt> is less
than 1"
      end

      operation 7946779 "PriorityBlockingQueue"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>PriorityBlockingQueue</tt> containing the elements
in the specified collection.  The priority queue has an initial
capacity of 110% of the size of the specified collection. If
the specified collection is a {@link SortedSet} or a {@link
PriorityQueue}, this priority queue will be sorted according to
the same comparator, or according to its elements' natural
order if the collection is sorted according to its elements'
natural order.  Otherwise, this priority queue is ordered
according to its elements' natural order.

@param c the collection whose elements are to be placed
       into this priority queue.
@throws ClassCastException if elements of the specified collection
        cannot be compared to one another according to the priority
        queue's ordering.
@throws NullPointerException if <tt>c</tt> or any element within it
is <tt>null</tt>"
      end

      operation 7946907 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " these first few override just to update doc comments

Adds the specified element to this queue.
@param o the element to add
@return <tt>true</tt> (as per the general contract of
<tt>Collection.add</tt>).

@throws NullPointerException if the specified element is <tt>null</tt>.
@throws ClassCastException if the specified element cannot be compared
with elements currently in the priority queue according
to the priority queue's ordering."
      end

      operation 7947035 "comparator"
	public return_type class_ref 138139 // Comparator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the comparator used to order this collection, or <tt>null</tt>
if this collection is sorted according to its elements natural ordering
(using <tt>Comparable</tt>).

@return the comparator used to order this collection, or <tt>null</tt>
if this collection is sorted according to its elements natural ordering."
      end

      operation 7947163 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this priority queue.

@param o the element to add
@return <tt>true</tt>
@throws ClassCastException if the specified element cannot be compared
with elements currently in the priority queue according
to the priority queue's ordering.
@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 7947291 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to this priority queue. As the queue is
unbounded this method will never block.
@param o the element to add
@throws ClassCastException if the element cannot be compared
with elements currently in the priority queue according
to the priority queue's ordering.
@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 7947419 "offer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "o" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this priority queue. As the queue is
unbounded this method will never block.
@param o the element to add
@param timeout This parameter is ignored as the method never blocks
@param unit This parameter is ignored as the method never blocks
@return <tt>true</tt>
@throws ClassCastException if the element cannot be compared
with elements currently in the priority queue according
to the priority queue's ordering.
@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 7947547 "take"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7947675 "poll"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7947803 "poll"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7947931 "peek"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7948059 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7948187 "remainingCapacity"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns <tt>Integer.MAX_VALUE</tt> because
a <tt>PriorityBlockingQueue</tt> is not capacity constrained.
@return <tt>Integer.MAX_VALUE</tt>"
      end

      operation 7948315 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this
queue, if it is present."
      end

      operation 7948443 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7948571 "toArray"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7948699 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7948827 "drainTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7948955 "drainTo"
	public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 135067 // Collection
	  param in name "maxElements" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7949083 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically removes all of the elements from this queue.
The queue will be empty after this call returns."
      end

      operation 7949211 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7949339 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue. The
iterator does not return the elements in any particular order.
The returned iterator is a thread-safe \"fast-fail\" iterator
that will throw {@link
java.util.ConcurrentModificationException} upon detected
interference.

@return an iterator over the elements in this queue."
      end

      class 997403 "Itr"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "E"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1942043 // <realization>
	  relation 1942043 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1942043 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	classrelation 1942171 // iter (<unidirectional association>)
	  relation 1942171 --->
	    a role_name "iter" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 1942171 // iter (<unidirectional association>)
	    b parent class_ref 135323 // Iterator
	end

	operation 7949467 "Itr"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "i" type class_ref 135323 // Iterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7949595 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7949723 "next"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7949851 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7949979 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state to a stream (that is, serialize it).  This
merely wraps default serialization within lock.  The
serialization strategy for items is left to underlying
Queue. Note that locking is not needed on deserialization, so
readObject is not defined, just relying on default."
      end
    end

    class 997531 "RejectedExecutionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Exception thrown by an {@link Executor} when a task cannot be
accepted for execution.

@since 1.5
@author Doug Lea"
      classrelation 1942299 // <generalisation>
	relation 1942299 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1942299 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end

      attribute 2933403 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -375805702767069545L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7950107 "RejectedExecutionException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>RejectedExecutionException</tt> with no detail message.
The cause is not initialized, and may subsequently be
initialized by a call to {@link #initCause(Throwable) initCause}."
      end

      operation 7950235 "RejectedExecutionException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>RejectedExecutionException</tt> with the
specified detail message. The cause is not initialized, and may
subsequently be initialized by a call to {@link
#initCause(Throwable) initCause}.

@param message the detail message"
      end

      operation 7950363 "RejectedExecutionException"
	public explicit_return_type ""
	nparams 2
	  param in name "message" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>RejectedExecutionException</tt> with the
specified detail message and cause.

@param  message the detail message
@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method)"
      end

      operation 7950491 "RejectedExecutionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>RejectedExecutionException</tt> with the
specified cause.  The detail message is set to: <pre> (cause ==
null ? null : cause.toString())</pre> (which typically contains
the class and detail message of <tt>cause</tt>).

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method)"
      end
    end

    class 997659 "RejectedExecutionHandler"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A handler for tasks that cannot be executed by a {@link
ThreadPoolExecutor}.

@since 1.5
@author Doug Lea"
      operation 7950619 "rejectedExecution"
	public explicit_return_type "void"
	nparams 2
	  param inout name "r" type class_ref 163355 // Runnable
	  param inout name "executor" type class_ref 997787 // ThreadPoolExecutor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method that may be invoked by a {@link ThreadPoolExecutor} when
<tt>execute</tt> cannot accept a task. This may occur when no
more threads or queue slots are available because their bounds
would be exceeded, or upon shutdown of the Executor.

In the absence other alternatives, the method may throw an
unchecked {@link RejectedExecutionException}, which will be
propagated to the caller of <tt>execute</tt>.

@param r the runnable task requested to be executed
@param executor the executor attempting to execute this task
@throws RejectedExecutionException if there is no remedy"
      end
    end

    class 997787 "ThreadPoolExecutor"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@link ExecutorService} that executes each submitted task using
one of possibly several pooled threads, normally configured
using {@link Executors} factory methods.

<p>Thread pools address two different problems: they usually
provide improved performance when executing large numbers of
asynchronous tasks, due to reduced per-task invocation overhead,
and they provide a means of bounding and managing the resources,
including threads, consumed when executing a collection of tasks.
Each <tt>ThreadPoolExecutor</tt> also maintains some basic
statistics, such as the number of completed tasks.

<p>To be useful across a wide range of contexts, this class
provides many adjustable parameters and extensibility
hooks. However, programmers are urged to use the more convenient
{@link Executors} factory methods {@link
Executors#newCachedThreadPool} (unbounded thread pool, with
automatic thread reclamation), {@link Executors#newFixedThreadPool}
(fixed size thread pool) and {@link
Executors#newSingleThreadExecutor} (single background thread), that
preconfigure settings for the most common usage
scenarios. Otherwise, use the following guide when manually
configuring and tuning this class:

<dl>

<dt>Core and maximum pool sizes</dt>

<dd>A <tt>ThreadPoolExecutor</tt> will automatically adjust the
pool size 
(see {@link ThreadPoolExecutor#getPoolSize})
according to the bounds set by corePoolSize 
(see {@link ThreadPoolExecutor#getCorePoolSize})
and
maximumPoolSize
(see {@link ThreadPoolExecutor#getMaximumPoolSize}).
When a new task is submitted in method {@link
ThreadPoolExecutor#execute}, and fewer than corePoolSize threads
are running, a new thread is created to handle the request, even if
other worker threads are idle.  If there are more than
corePoolSize but less than maximumPoolSize threads running, a new
thread will be created only if the queue is full.  By setting
corePoolSize and maximumPoolSize the same, you create a fixed-size
thread pool. By setting maximumPoolSize to an essentially unbounded
value such as <tt>Integer.MAX_VALUE</tt>, you allow the pool to
accommodate an arbitrary number of concurrent tasks. Most typically,
core and maximum pool sizes are set only upon construction, but they
may also be changed dynamically using {@link
ThreadPoolExecutor#setCorePoolSize} and {@link
ThreadPoolExecutor#setMaximumPoolSize}. <dd>

<dt> On-demand construction

<dd> By default, even core threads are initially created and
started only when needed by new tasks, but this can be overridden
dynamically using method {@link
ThreadPoolExecutor#prestartCoreThread} or
{@link ThreadPoolExecutor#prestartAllCoreThreads}.  </dd>

<dt>Creating new threads</dt>

<dd>New threads are created using a {@link
java.util.concurrent.ThreadFactory}.  If not otherwise specified, a
{@link Executors#defaultThreadFactory} is used, that creates threads to all
be in the same {@link ThreadGroup} and with the same
<tt>NORM_PRIORITY</tt> priority and non-daemon status. By supplying
a different ThreadFactory, you can alter the thread's name, thread
group, priority, daemon status, etc. If a <tt>ThreadFactory</tt> fails to create
a thread when asked by returning null from <tt>newThread</tt>, 
the executor will continue, but might
not be able to execute any tasks. </dd>

<dt>Keep-alive times</dt>

<dd>If the pool currently has more than corePoolSize threads,
excess threads will be terminated if they have been idle for more
than the keepAliveTime (see {@link
ThreadPoolExecutor#getKeepAliveTime}). This provides a means of
reducing resource consumption when the pool is not being actively
used. If the pool becomes more active later, new threads will be
constructed. This parameter can also be changed dynamically
using method {@link ThreadPoolExecutor#setKeepAliveTime}. Using
a value of <tt>Long.MAX_VALUE</tt> {@link TimeUnit#NANOSECONDS}
effectively disables idle threads from ever terminating prior
to shut down.
</dd>

<dt>Queuing</dt>

<dd>Any {@link BlockingQueue} may be used to transfer and hold
submitted tasks.  The use of this queue interacts with pool sizing:

<ul>

<li> If fewer than corePoolSize threads are running, the Executor
always prefers adding a new thread
rather than queuing.</li>

<li> If corePoolSize or more threads are running, the Executor
always prefers queuing a request rather than adding a new
thread.</li>

<li> If a request cannot be queued, a new thread is created unless
this would exceed maximumPoolSize, in which case, the task will be
rejected.</li>

</ul>

There are three general strategies for queuing:
<ol>

<li> <em> Direct handoffs.</em> A good default choice for a work
queue is a {@link SynchronousQueue} that hands off tasks to threads
without otherwise holding them. Here, an attempt to queue a task
will fail if no threads are immediately available to run it, so a
new thread will be constructed. This policy avoids lockups when
handling sets of requests that might have internal dependencies.
Direct handoffs generally require unbounded maximumPoolSizes to
avoid rejection of new submitted tasks. This in turn admits the
possibility of unbounded thread growth when commands continue to
arrive on average faster than they can be processed.  </li>

<li><em> Unbounded queues.</em> Using an unbounded queue (for
example a {@link LinkedBlockingQueue} without a predefined
capacity) will cause new tasks to be queued in cases where all
corePoolSize threads are busy. Thus, no more than corePoolSize
threads will ever be created. (And the value of the maximumPoolSize
therefore doesn't have any effect.)  This may be appropriate when
each task is completely independent of others, so tasks cannot
affect each others execution; for example, in a web page server.
While this style of queuing can be useful in smoothing out
transient bursts of requests, it admits the possibility of
unbounded work queue growth when commands continue to arrive on
average faster than they can be processed.  </li>

<li><em>Bounded queues.</em> A bounded queue (for example, an
{@link ArrayBlockingQueue}) helps prevent resource exhaustion when
used with finite maximumPoolSizes, but can be more difficult to
tune and control.  Queue sizes and maximum pool sizes may be traded
off for each other: Using large queues and small pools minimizes
CPU usage, OS resources, and context-switching overhead, but can
lead to artificially low throughput.  If tasks frequently block (for
example if they are I/O bound), a system may be able to schedule
time for more threads than you otherwise allow. Use of small queues
generally requires larger pool sizes, which keeps CPUs busier but
may encounter unacceptable scheduling overhead, which also
decreases throughput.  </li>

</ol>

</dd>

<dt>Rejected tasks</dt>

<dd> New tasks submitted in method {@link
ThreadPoolExecutor#execute} will be <em>rejected</em> when the
Executor has been shut down, and also when the Executor uses finite
bounds for both maximum threads and work queue capacity, and is
saturated.  In either case, the <tt>execute</tt> method invokes the
{@link RejectedExecutionHandler#rejectedExecution} method of its
{@link RejectedExecutionHandler}.  Four predefined handler policies
are provided:

<ol>

<li> In the
default {@link ThreadPoolExecutor.AbortPolicy}, the handler throws a
runtime {@link RejectedExecutionException} upon rejection. </li>

<li> In {@link
ThreadPoolExecutor.CallerRunsPolicy}, the thread that invokes
<tt>execute</tt> itself runs the task. This provides a simple
feedback control mechanism that will slow down the rate that new
tasks are submitted. </li>

<li> In {@link ThreadPoolExecutor.DiscardPolicy},
a task that cannot be executed is simply dropped.  </li>

<li>In {@link
ThreadPoolExecutor.DiscardOldestPolicy}, if the executor is not
shut down, the task at the head of the work queue is dropped, and
then execution is retried (which can fail again, causing this to be
repeated.) </li>

</ol>

It is possible to define and use other kinds of {@link
RejectedExecutionHandler} classes. Doing so requires some care
especially when policies are designed to work only under particular
capacity or queuing policies. </dd>

<dt>Hook methods</dt>

<dd>This class provides <tt>protected</tt> overridable {@link
ThreadPoolExecutor#beforeExecute} and {@link
ThreadPoolExecutor#afterExecute} methods that are called before and
after execution of each task.  These can be used to manipulate the
execution environment; for example, reinitializing ThreadLocals,
gathering statistics, or adding log entries. Additionally, method
{@link ThreadPoolExecutor#terminated} can be overridden to perform
any special processing that needs to be done once the Executor has
fully terminated. 

<p>If hook or callback methods throw 
exceptions, internal worker threads may in turn fail and
abruptly terminate.</dd> 

<dt>Queue maintenance</dt>

<dd> Method {@link ThreadPoolExecutor#getQueue} allows access to
the work queue for purposes of monitoring and debugging.  Use of
this method for any other purpose is strongly discouraged.  Two
supplied methods, {@link ThreadPoolExecutor#remove} and {@link
ThreadPoolExecutor#purge} are available to assist in storage
reclamation when large numbers of queued tasks become
cancelled.</dd> </dl>

<p> <b>Extension example</b>. Most extensions of this class
override one or more of the protected hook methods. For example,
here is a subclass that adds a simple pause/resume feature:

<pre>
class PausableThreadPoolExecutor extends ThreadPoolExecutor {
  private boolean isPaused;
  private ReentrantLock pauseLock = new ReentrantLock();
  private Condition unpaused = pauseLock.newCondition();

  public PausableThreadPoolExecutor(...) { super(...); }

  protected void beforeExecute(Thread t, Runnable r) {
    super.beforeExecute(t, r);
    pauseLock.lock();
    try {
      while (isPaused) unpaused.await();
    } catch(InterruptedException ie) {
      t.interrupt();
    } finally {
      pauseLock.unlock();
    }
  }

  public void pause() {
    pauseLock.lock();
    try {
      isPaused = true;
    } finally {
      pauseLock.unlock();
    }
  }

  public void resume() {
    pauseLock.lock();
    try {
      isPaused = false;
      unpaused.signalAll();
    } finally {
      pauseLock.unlock();
    }
  }
}
</pre>
@since 1.5
@author Doug Lea"
      classrelation 1942683 // <generalisation>
	relation 1942683 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1942683 // <generalisation>
	  b parent class_ref 988059 // AbstractExecutorService
      end

      classrelation 1942811 // EMPTY_RUNNABLE_ARRAY (<unidirectional association>)
	relation 1942811 --->
	  a role_name "EMPTY_RUNNABLE_ARRAY" multiplicity "[]" init_value "=  new Runnable[0]" class_relation const_relation private
	    comment "
Only used to force toArray() to produce a Runnable[].

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1942811 // EMPTY_RUNNABLE_ARRAY (<unidirectional association>)
	  b parent class_ref 163355 // Runnable
      end

      classrelation 1942939 // shutdownPerm (<unidirectional association>)
	relation 1942939 --->
	  a role_name "shutdownPerm" init_value "= 
        new RuntimePermission(\"modifyThread\")" class_relation const_relation private
	    comment "
Permission for checking shutdown

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1942939 // shutdownPerm (<unidirectional association>)
	  b parent class_ref 164507 // RuntimePermission
      end

      classrelation 1943067 // workQueue (<unidirectional association>)
	relation 1943067 --->
	  a role_name "workQueue" const_relation private
	    comment "
Queue used for holding tasks and handing off to worker threads.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Runnable> ${name}${value};
"
	    classrelation_ref 1943067 // workQueue (<unidirectional association>)
	  b parent class_ref 989083 // BlockingQueue
      end

      classrelation 1943195 // mainLock (<unidirectional association>)
	relation 1943195 --->
	  a role_name "mainLock" init_value "=  new ReentrantLock()" const_relation private
	    comment "
Lock held on updates to poolSize, corePoolSize, maximumPoolSize, and
workers set.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1943195 // mainLock (<unidirectional association>)
	  b parent class_ref 989211 // ReentrantLock
      end

      classrelation 1943323 // termination (<unidirectional association>)
	relation 1943323 --->
	  a role_name "termination" init_value "=  mainLock.newCondition()" const_relation private
	    comment "
Wait condition to support awaitTermination

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1943323 // termination (<unidirectional association>)
	  b parent class_ref 989339 // Condition
      end

      class 998043 "Worker"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1943963 // <realization>
	  relation 1943963 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1943963 // <realization>
	    b parent class_ref 163355 // Runnable
	end

	classrelation 1944091 // runLock (<unidirectional association>)
	  relation 1944091 --->
	    a role_name "runLock" init_value "=  new ReentrantLock()" const_relation private
	      comment "
The runLock is acquired and released surrounding each task
execution. It mainly protects against interrupts that are
intended to cancel the worker thread from instead
interrupting the task being run.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1944091 // runLock (<unidirectional association>)
	    b parent class_ref 989211 // ReentrantLock
	end

	classrelation 1944219 // firstTask (<unidirectional association>)
	  relation 1944219 --->
	    a role_name "firstTask" private
	      comment "
Initial task to run before entering run loop

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1944219 // firstTask (<unidirectional association>)
	    b parent class_ref 163355 // Runnable
	end

	attribute 2934939 "completedTasks"
	  volatile package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Per thread completed task counter; accumulated
into completedTaskCount upon termination.
"
	end

	classrelation 1944347 // thread (<unidirectional association>)
	  relation 1944347 --->
	    a role_name "thread" package
	      comment "
Thread this worker is running in.  Acts as a final field,
but cannot be set until thread is created.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1944347 // thread (<unidirectional association>)
	    b parent class_ref 163227 // Thread
	end

	operation 7951643 "Worker"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "firstTask" type class_ref 163355 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7951771 "isActive"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7951899 "interruptIfIdle"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Interrupt thread if not running a task"
	end

	operation 7952027 "interruptNow"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Cause thread to die even if running a task."
	end

	operation 7952155 "runTask"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "task" type class_ref 163355 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Run a single task between before/after methods."
	end

	operation 7952283 "run"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Main run loop"
	end
      end

      classrelation 1943451 // workers (<unidirectional association>)
	relation 1943451 --->
	  a role_name "workers" init_value "=  new HashSet<Worker>()" const_relation private
	    comment "
Set containing all worker threads in pool.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Worker> ${name}${value};
"
	    classrelation_ref 1943451 // workers (<unidirectional association>)
	  b parent class_ref 149659 // HashSet
      end

      attribute 2933531 "keepAliveTime"
	volatile private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Timeout in nanoseconds for idle threads waiting for work.
Threads use this timeout only when there are more than
corePoolSize present. Otherwise they wait forever for new work.
"
      end

      attribute 2933659 "corePoolSize"
	volatile private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Core pool size, updated only while holding mainLock,
but volatile to allow concurrent readability even
during updates.
"
      end

      attribute 2933787 "maximumPoolSize"
	volatile private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Maximum pool size, updated only while holding mainLock
but volatile to allow concurrent readability even
during updates.
"
      end

      attribute 2933915 "poolSize"
	volatile private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Current pool size, updated only while holding mainLock
but volatile to allow concurrent readability even
during updates.
"
      end

      attribute 2934043 "runState"
	volatile package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Lifecycle state
"
      end

      attribute 2934171 "RUNNING"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Special values for runState
 Normal, not-shutdown mode "
      end

      attribute 2934299 "SHUTDOWN"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Controlled shutdown mode "
      end

      attribute 2934427 "STOP"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Immediate shutdown mode "
      end

      attribute 2934555 "TERMINATED"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Final state "
      end

      classrelation 1943579 // handler (<unidirectional association>)
	relation 1943579 --->
	  a role_name "handler" volatile private
	    comment "
Handler called when saturated or shutdown in execute.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1943579 // handler (<unidirectional association>)
	  b parent class_ref 997659 // RejectedExecutionHandler
      end

      classrelation 1943707 // threadFactory (<unidirectional association>)
	relation 1943707 --->
	  a role_name "threadFactory" volatile private
	    comment "
Factory for new threads.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1943707 // threadFactory (<unidirectional association>)
	  b parent class_ref 995355 // ThreadFactory
      end

      attribute 2934683 "largestPoolSize"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tracks largest attained pool size.
"
      end

      attribute 2934811 "completedTaskCount"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Counter for completed tasks. Updated only on termination of
worker threads.
"
      end

      classrelation 1943835 // defaultHandler (<unidirectional association>)
	relation 1943835 --->
	  a role_name "defaultHandler" init_value "= 
        new AbortPolicy()" class_relation const_relation private
	    comment "
The default rejected execution handler

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1943835 // defaultHandler (<unidirectional association>)
	  b parent class_ref 997659 // RejectedExecutionHandler
      end

      operation 7950747 "reject"
	package explicit_return_type "void"
	nparams 1
	  param inout name "command" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke the rejected execution handler for the given command."
      end

      operation 7950875 "addThread"
	private return_type class_ref 163227 // Thread
	nparams 1
	  param inout name "firstTask" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create and return a new thread running firstTask as its first
task. Call only while holding mainLock
@param firstTask the task the new thread should run first (or
null if none)
@return the new thread, or null if threadFactory fails to create thread"
      end

      operation 7951003 "addIfUnderCorePoolSize"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "firstTask" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create and start a new thread running firstTask as its first
task, only if fewer than corePoolSize threads are running.
@param firstTask the task the new thread should run first (or
null if none)
@return true if successful."
      end

      operation 7951131 "addIfUnderMaximumPoolSize"
	private return_type class_ref 163355 // Runnable
	nparams 1
	  param inout name "firstTask" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create and start a new thread only if fewer than maximumPoolSize
threads are running.  The new thread runs as its first task the
next task in queue, or if there is none, the given task.
@param firstTask the task the new thread should run first (or
null if none)
@return null on failure, else the first task to be run by new thread."
      end

      operation 7951259 "getTask"
	package return_type class_ref 163355 // Runnable
	nparams 0
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next task for a worker thread to run.
@return the task
@throws InterruptedException if interrupted while waiting for task"
      end

      operation 7951387 "interruptIdleWorkers"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wake up all threads that might be waiting for tasks."
      end

      operation 7951515 "workerDone"
	package explicit_return_type "void"
	nparams 1
	  param inout name "w" type class_ref 998043 // Worker
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Perform bookkeeping for a terminated worker thread.
@param w the worker"
      end

      operation 7952411 "ThreadPoolExecutor"
	public explicit_return_type ""
	nparams 5
	  param in name "corePoolSize" explicit_type "int"
	  param in name "maximumPoolSize" explicit_type "int"
	  param in name "keepAliveTime" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	  param inout name "workQueue" type class_ref 989083 // BlockingQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<Runnable> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Public methods

Creates a new <tt>ThreadPoolExecutor</tt> with the given
initial parameters and default thread factory and handler.  It
may be more convenient to use one of the {@link Executors}
factory methods instead of this general purpose constructor.

@param corePoolSize the number of threads to keep in the
pool, even if they are idle.
@param maximumPoolSize the maximum number of threads to allow in the
pool.
@param keepAliveTime when the number of threads is greater than
the core, this is the maximum time that excess idle threads
will wait for new tasks before terminating.
@param unit the time unit for the keepAliveTime
argument.
@param workQueue the queue to use for holding tasks before they
are executed. This queue will hold only the <tt>Runnable</tt>
tasks submitted by the <tt>execute</tt> method.
@throws IllegalArgumentException if corePoolSize, or
keepAliveTime less than zero, or if maximumPoolSize less than or
equal to zero, or if corePoolSize greater than maximumPoolSize.
@throws NullPointerException if <tt>workQueue</tt> is null"
      end

      operation 7952539 "ThreadPoolExecutor"
	public explicit_return_type ""
	nparams 6
	  param in name "corePoolSize" explicit_type "int"
	  param in name "maximumPoolSize" explicit_type "int"
	  param in name "keepAliveTime" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	  param inout name "workQueue" type class_ref 989083 // BlockingQueue
	  param inout name "threadFactory" type class_ref 995355 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<Runnable> ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>ThreadPoolExecutor</tt> with the given initial
parameters.

@param corePoolSize the number of threads to keep in the
pool, even if they are idle.
@param maximumPoolSize the maximum number of threads to allow in the
pool.
@param keepAliveTime when the number of threads is greater than
the core, this is the maximum time that excess idle threads
will wait for new tasks before terminating.
@param unit the time unit for the keepAliveTime
argument.
@param workQueue the queue to use for holding tasks before they
are executed. This queue will hold only the <tt>Runnable</tt>
tasks submitted by the <tt>execute</tt> method.
@param threadFactory the factory to use when the executor
creates a new thread.
@throws IllegalArgumentException if corePoolSize, or
keepAliveTime less than zero, or if maximumPoolSize less than or
equal to zero, or if corePoolSize greater than maximumPoolSize.
@throws NullPointerException if <tt>workQueue</tt>
or <tt>threadFactory</tt> are null."
      end

      operation 7952667 "ThreadPoolExecutor"
	public explicit_return_type ""
	nparams 6
	  param in name "corePoolSize" explicit_type "int"
	  param in name "maximumPoolSize" explicit_type "int"
	  param in name "keepAliveTime" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	  param inout name "workQueue" type class_ref 989083 // BlockingQueue
	  param inout name "handler" type class_ref 997659 // RejectedExecutionHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<Runnable> ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>ThreadPoolExecutor</tt> with the given initial
parameters.

@param corePoolSize the number of threads to keep in the
pool, even if they are idle.
@param maximumPoolSize the maximum number of threads to allow in the
pool.
@param keepAliveTime when the number of threads is greater than
the core, this is the maximum time that excess idle threads
will wait for new tasks before terminating.
@param unit the time unit for the keepAliveTime
argument.
@param workQueue the queue to use for holding tasks before they
are executed. This queue will hold only the <tt>Runnable</tt>
tasks submitted by the <tt>execute</tt> method.
@param handler the handler to use when execution is blocked
because the thread bounds and queue capacities are reached.
@throws IllegalArgumentException if corePoolSize, or
keepAliveTime less than zero, or if maximumPoolSize less than or
equal to zero, or if corePoolSize greater than maximumPoolSize.
@throws NullPointerException if <tt>workQueue</tt>
or  <tt>handler</tt> are null."
      end

      operation 7952795 "ThreadPoolExecutor"
	public explicit_return_type ""
	nparams 7
	  param in name "corePoolSize" explicit_type "int"
	  param in name "maximumPoolSize" explicit_type "int"
	  param in name "keepAliveTime" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	  param inout name "workQueue" type class_ref 989083 // BlockingQueue
	  param inout name "threadFactory" type class_ref 995355 // ThreadFactory
	  param inout name "handler" type class_ref 997659 // RejectedExecutionHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<Runnable> ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>ThreadPoolExecutor</tt> with the given initial
parameters.

@param corePoolSize the number of threads to keep in the
pool, even if they are idle.
@param maximumPoolSize the maximum number of threads to allow in the
pool.
@param keepAliveTime when the number of threads is greater than
the core, this is the maximum time that excess idle threads
will wait for new tasks before terminating.
@param unit the time unit for the keepAliveTime
argument.
@param workQueue the queue to use for holding tasks before they
are executed. This queue will hold only the <tt>Runnable</tt>
tasks submitted by the <tt>execute</tt> method.
@param threadFactory the factory to use when the executor
creates a new thread.
@param handler the handler to use when execution is blocked
because the thread bounds and queue capacities are reached.
@throws IllegalArgumentException if corePoolSize, or
keepAliveTime less than zero, or if maximumPoolSize less than or
equal to zero, or if corePoolSize greater than maximumPoolSize.
@throws NullPointerException if <tt>workQueue</tt>
or <tt>threadFactory</tt> or <tt>handler</tt> are null."
      end

      operation 7952923 "execute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "command" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given task sometime in the future.  The task
may execute in a new thread or in an existing pooled thread.

If the task cannot be submitted for execution, either because this
executor has been shutdown or because its capacity has been reached,
the task is handled by the current <tt>RejectedExecutionHandler</tt>.

@param command the task to execute
@throws RejectedExecutionException at discretion of
<tt>RejectedExecutionHandler</tt>, if task cannot be accepted
for execution
@throws NullPointerException if command is null"
      end

      operation 7953051 "shutdown"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initiates an orderly shutdown in which previously submitted
tasks are executed, but no new tasks will be
accepted. Invocation has no additional effect if already shut
down.
@throws SecurityException if a security manager exists and
shutting down this ExecutorService may manipulate threads that
the caller is not permitted to modify because it does not hold
{@link java.lang.RuntimePermission}<tt>(\"modifyThread\")</tt>,
or the security manager's <tt>checkAccess</tt>  method denies access."
      end

      operation 7953179 "shutdownNow"
	public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to stop all actively executing tasks, halts the
processing of waiting tasks, and returns a list of the tasks that were
awaiting execution. 
 
<p>This implementation cancels tasks via {@link
Thread#interrupt}, so if any tasks mask or fail to respond to
interrupts, they may never terminate.

@return list of tasks that never commenced execution
@throws SecurityException if a security manager exists and
shutting down this ExecutorService may manipulate threads that
the caller is not permitted to modify because it does not hold
{@link java.lang.RuntimePermission}<tt>(\"modifyThread\")</tt>,
or the security manager's <tt>checkAccess</tt> method denies access."
      end

      operation 7953307 "isShutdown"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7953435 "isTerminating"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this executor is in the process of terminating
after <tt>shutdown</tt> or <tt>shutdownNow</tt> but has not
completely terminated.  This method may be useful for
debugging. A return of <tt>true</tt> reported a sufficient
period after shutdown may indicate that submitted tasks have
ignored or suppressed interruption, causing this executor not
to properly terminate.
@return true if terminating but not yet terminated."
      end

      operation 7953563 "isTerminated"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7953691 "awaitTermination"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7953819 "finalize"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes <tt>shutdown</tt> when this executor is no longer
referenced."
      end

      operation 7953947 "setThreadFactory"
	public explicit_return_type "void"
	nparams 1
	  param inout name "threadFactory" type class_ref 995355 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the thread factory used to create new threads.

@param threadFactory the new thread factory
@throws NullPointerException if threadFactory is null
@see #getThreadFactory"
      end

      operation 7954075 "getThreadFactory"
	public return_type class_ref 995355 // ThreadFactory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the thread factory used to create new threads.

@return the current thread factory
@see #setThreadFactory"
      end

      operation 7954203 "setRejectedExecutionHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 997659 // RejectedExecutionHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a new handler for unexecutable tasks.

@param handler the new handler
@throws NullPointerException if handler is null
@see #getRejectedExecutionHandler"
      end

      operation 7954331 "getRejectedExecutionHandler"
	public return_type class_ref 997659 // RejectedExecutionHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current handler for unexecutable tasks.

@return the current handler
@see #setRejectedExecutionHandler"
      end

      operation 7954459 "getQueue"
	public return_type class_ref 989083 // BlockingQueue
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the task queue used by this executor. Access to the
task queue is intended primarily for debugging and monitoring.
This queue may be in active use.  Retrieving the task queue
does not prevent queued tasks from executing.

@return the task queue"
      end

      operation 7954587 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "task" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes this task from the executor's internal queue if it is
present, thus causing it not to be run if it has not already
started.

<p> This method may be useful as one part of a cancellation
scheme.  It may fail to remove tasks that have been converted
into other forms before being placed on the internal queue. For
example, a task entered using <tt>submit</tt> might be
converted into a form that maintains <tt>Future</tt> status.
However, in such cases, method {@link ThreadPoolExecutor#purge}
may be used to remove those Futures that have been cancelled.


@param task the task to remove
@return true if the task was removed"
      end

      operation 7954715 "purge"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to remove from the work queue all {@link Future}
tasks that have been cancelled. This method can be useful as a
storage reclamation operation, that has no other impact on
functionality. Cancelled tasks are never executed, but may
accumulate in work queues until worker threads can actively
remove them. Invoking this method instead tries to remove them now.
However, this method may fail to remove tasks in
the presence of interference by other threads."
      end

      operation 7954843 "setCorePoolSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "corePoolSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the core number of threads.  This overrides any value set
in the constructor.  If the new value is smaller than the
current value, excess existing threads will be terminated when
they next become idle. If larger, new threads will, if needed,
be started to execute any queued tasks.

@param corePoolSize the new core size
@throws IllegalArgumentException if <tt>corePoolSize</tt>
less than zero
@see #getCorePoolSize"
      end

      operation 7954971 "getCorePoolSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the core number of threads.

@return the core number of threads
@see #setCorePoolSize"
      end

      operation 7955099 "prestartCoreThread"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts a core thread, causing it to idly wait for work. This
overrides the default policy of starting core threads only when
new tasks are executed. This method will return <tt>false</tt>
if all core threads have already been started.
@return true if a thread was started"
      end

      operation 7955227 "prestartAllCoreThreads"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts all core threads, causing them to idly wait for work. This
overrides the default policy of starting core threads only when
new tasks are executed. 
@return the number of threads started."
      end

      operation 7955355 "setMaximumPoolSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "maximumPoolSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum allowed number of threads. This overrides any
value set in the constructor. If the new value is smaller than
the current value, excess existing threads will be
terminated when they next become idle.

@param maximumPoolSize the new maximum
@throws IllegalArgumentException if maximumPoolSize less than zero or
the {@link #getCorePoolSize core pool size}
@see #getMaximumPoolSize"
      end

      operation 7955483 "getMaximumPoolSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum allowed number of threads.

@return the maximum allowed number of threads
@see #setMaximumPoolSize"
      end

      operation 7955611 "setKeepAliveTime"
	public explicit_return_type "void"
	nparams 2
	  param in name "time" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time limit for which threads may remain idle before
being terminated.  If there are more than the core number of
threads currently in the pool, after waiting this amount of
time without processing a task, excess threads will be
terminated.  This overrides any value set in the constructor.
@param time the time to wait.  A time value of zero will cause
excess threads to terminate immediately after executing tasks.
@param unit  the time unit of the time argument
@throws IllegalArgumentException if time less than zero
@see #getKeepAliveTime"
      end

      operation 7955739 "getKeepAliveTime"
	public explicit_return_type "long"
	nparams 1
	  param inout name "unit" type class_ref 988315 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the thread keep-alive time, which is the amount of time
which threads in excess of the core pool size may remain
idle before being terminated.

@param unit the desired time unit of the result
@return the time limit
@see #setKeepAliveTime"
      end

      operation 7955867 "getPoolSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Statistics 

Returns the current number of threads in the pool.

@return the number of threads"
      end

      operation 7955995 "getActiveCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the approximate number of threads that are actively
executing tasks.

@return the number of threads"
      end

      operation 7956123 "getLargestPoolSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the largest number of threads that have ever
simultaneously been in the pool.

@return the number of threads"
      end

      operation 7956251 "getTaskCount"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the approximate total number of tasks that have been
scheduled for execution. Because the states of tasks and
threads may change dynamically during computation, the returned
value is only an approximation, but one that does not ever
decrease across successive calls.

@return the number of tasks"
      end

      operation 7956379 "getCompletedTaskCount"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the approximate total number of tasks that have
completed execution. Because the states of tasks and threads
may change dynamically during computation, the returned value
is only an approximation, but one that does not ever decrease
across successive calls.

@return the number of tasks"
      end

      operation 7956507 "beforeExecute"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "t" type class_ref 163227 // Thread
	  param inout name "r" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method invoked prior to executing the given Runnable in the
given thread.  This method is invoked by thread <tt>t</tt> that
will execute task <tt>r</tt>, and may be used to re-initialize
ThreadLocals, or to perform logging. Note: To properly nest
multiple overridings, subclasses should generally invoke
<tt>super.beforeExecute</tt> at the end of this method.

@param t the thread that will run task r.
@param r the task that will be executed."
      end

      operation 7956635 "afterExecute"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "r" type class_ref 163355 // Runnable
	  param inout name "t" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method invoked upon completion of execution of the given
Runnable.  This method is invoked by the thread that executed
the task. If non-null, the Throwable is the uncaught exception
that caused execution to terminate abruptly. Note: To properly
nest multiple overridings, subclasses should generally invoke
<tt>super.afterExecute</tt> at the beginning of this method.

@param r the runnable that has completed.
@param t the exception that caused termination, or null if
execution completed normally."
      end

      operation 7956763 "terminated"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method invoked when the Executor has terminated.  Default
implementation does nothing. Note: To properly nest multiple
overridings, subclasses should generally invoke
<tt>super.terminated</tt> within this method."
      end

      class 998171 "CallerRunsPolicy"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1944475 // <realization>
	  relation 1944475 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1944475 // <realization>
	    b parent class_ref 997659 // RejectedExecutionHandler
	end

	operation 7956891 "CallerRunsPolicy"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a <tt>CallerRunsPolicy</tt>."
	end

	operation 7957019 "rejectedExecution"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "r" type class_ref 163355 // Runnable
	    param inout name "e" type class_ref 997787 // ThreadPoolExecutor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Executes task r in the caller's thread, unless the executor
has been shut down, in which case the task is discarded.
@param r the runnable task requested to be executed
@param e the executor attempting to execute this task"
	end
      end

      class 998299 "AbortPolicy"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1944603 // <realization>
	  relation 1944603 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1944603 // <realization>
	    b parent class_ref 997659 // RejectedExecutionHandler
	end

	operation 7957147 "AbortPolicy"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates an <tt>AbortPolicy</tt>."
	end

	operation 7957275 "rejectedExecution"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "r" type class_ref 163355 // Runnable
	    param inout name "e" type class_ref 997787 // ThreadPoolExecutor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Always throws RejectedExecutionException.
@param r the runnable task requested to be executed
@param e the executor attempting to execute this task
@throws RejectedExecutionException always."
	end
      end

      class 998427 "DiscardPolicy"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1944731 // <realization>
	  relation 1944731 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1944731 // <realization>
	    b parent class_ref 997659 // RejectedExecutionHandler
	end

	operation 7957403 "DiscardPolicy"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a <tt>DiscardPolicy</tt>."
	end

	operation 7957531 "rejectedExecution"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "r" type class_ref 163355 // Runnable
	    param inout name "e" type class_ref 997787 // ThreadPoolExecutor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Does nothing, which has the effect of discarding task r.
@param r the runnable task requested to be executed
@param e the executor attempting to execute this task"
	end
      end

      class 998555 "DiscardOldestPolicy"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1944859 // <realization>
	  relation 1944859 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1944859 // <realization>
	    b parent class_ref 997659 // RejectedExecutionHandler
	end

	operation 7957659 "DiscardOldestPolicy"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a <tt>DiscardOldestPolicy</tt> for the given executor."
	end

	operation 7957787 "rejectedExecution"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "r" type class_ref 163355 // Runnable
	    param inout name "e" type class_ref 997787 // ThreadPoolExecutor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Obtains and ignores the next task that the executor
would otherwise execute, if one is immediately available,
and then retries execution of task r, unless the executor
is shut down, in which case task r is instead discarded.
@param r the runnable task requested to be executed
@param e the executor attempting to execute this task"
	end
      end
    end

    class 997915 "ScheduledThreadPoolExecutor"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@link ThreadPoolExecutor} that can additionally schedule
commands to run after a given delay, or to execute
periodically. This class is preferable to {@link java.util.Timer}
when multiple worker threads are needed, or when the additional
flexibility or capabilities of {@link ThreadPoolExecutor} (which
this class extends) are required.

<p> Delayed tasks execute no sooner than they are enabled, but
without any real-time guarantees about when, after they are
enabled, they will commence. Tasks scheduled for exactly the same
execution time are enabled in first-in-first-out (FIFO) order of
submission.

<p>While this class inherits from {@link ThreadPoolExecutor}, a few
of the inherited tuning methods are not useful for it. In
particular, because it acts as a fixed-sized pool using
<tt>corePoolSize</tt> threads and an unbounded queue, adjustments
to <tt>maximumPoolSize</tt> have no useful effect.

@since 1.5
@author Doug Lea"
      classrelation 1944987 // <generalisation>
	relation 1944987 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1944987 // <generalisation>
	  b parent class_ref 997787 // ThreadPoolExecutor
      end

      classrelation 1945115 // <realization>
	relation 1945115 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1945115 // <realization>
	  b parent class_ref 995483 // ScheduledExecutorService
      end

      attribute 2935067 "continueExistingPeriodicTasksAfterShutdown"
	volatile private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "False if should cancel/suppress periodic tasks on shutdown.
"
      end

      attribute 2935195 "executeExistingDelayedTasksAfterShutdown"
	volatile private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "False if should cancel non-periodic tasks on shutdown.
"
      end

      classrelation 1945243 // sequencer (<unidirectional association>)
	relation 1945243 --->
	  a role_name "sequencer" init_value "=  new AtomicLong(0)" class_relation const_relation private
	    comment "
Sequence number to break scheduling ties, and in turn to
guarantee FIFO order among tied entries.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1945243 // sequencer (<unidirectional association>)
	  b parent class_ref 607259 // AtomicLong
      end

      attribute 2935323 "NANO_ORIGIN"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  System.nanoTime()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Base of nanosecond timings, to avoid wrapping "
      end

      operation 7957915 "now"
	package explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns nanosecond time offset by origin"
      end

      class 998683 "ScheduledFutureTask"
	visibility private 
	nformals 1
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 6
	actual class class_ref 994971 // FutureTask
	  rank 0 explicit_value "V"
	actual class class_ref 994971 // FutureTask
	  rank 1 explicit_value ""
	actual class class_ref 994971 // FutureTask
	  rank 2 explicit_value ""
	actual class class_ref 996763 // ScheduledFuture
	  rank 0 explicit_value "V"
	actual class class_ref 996763 // ScheduledFuture
	  rank 1 explicit_value ""
	actual class class_ref 996763 // ScheduledFuture
	  rank 2 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1945371 // <realization>
	  relation 1945371 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1945371 // <realization>
	    b parent class_ref 994971 // FutureTask
	end

	classrelation 1945499 // <realization>
	  relation 1945499 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1945499 // <realization>
	    b parent class_ref 996763 // ScheduledFuture
	end

	attribute 2935451 "sequenceNumber"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Sequence number to break ties FIFO "
	end

	attribute 2935579 "time"
	  private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " The time the task is enabled to execute in nanoTime units "
	end

	attribute 2935707 "period"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Period in nanoseconds for repeating tasks.  A positive
value indicates fixed-rate execution.  A negative value
indicates fixed-delay execution.  A value of 0 indicates a
non-repeating task.
"
	end

	operation 7958043 "ScheduledFutureTask"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "r" type class_ref 163355 // Runnable
	    param inout name "result" explicit_type "V"
	    param in name "ns" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a one-shot action with given nanoTime-based trigger time"
	end

	operation 7958171 "ScheduledFutureTask"
	  package explicit_return_type ""
	  nparams 4
	    param inout name "r" type class_ref 163355 // Runnable
	    param inout name "result" explicit_type "V"
	    param in name "ns" explicit_type "long"
	    param in name "period" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a periodic action with given nano time and period"
	end

	operation 7958299 "ScheduledFutureTask"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "callable" type class_ref 988571 // Callable
	    param in name "ns" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<V> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a one-shot action with given nanoTime-based trigger"
	end

	operation 7958427 "getDelay"
	  public explicit_return_type "long"
	  nparams 1
	    param inout name "unit" type class_ref 988315 // TimeUnit
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7958555 "compareTo"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "other" type class_ref 993691 // Delayed
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7958683 "isPeriodic"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if this is a periodic (not a one-shot) action.
@return true if periodic"
	end

	operation 7958811 "runPeriodic"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Run a periodic task"
	end

	operation 7958939 "run"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Overrides FutureTask version so as to reset/requeue if periodic."
	end
      end

      operation 7959067 "delayedExecute"
	private explicit_return_type "void"
	nparams 1
	  param inout name "command" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specialized variant of ThreadPoolExecutor.execute for delayed tasks."
      end

      operation 7959195 "cancelUnwantedTasks"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancel and clear the queue of all tasks that should not be run
due to shutdown policy."
      end

      operation 7959323 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "task" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7959451 "ScheduledThreadPoolExecutor"
	public explicit_return_type ""
	nparams 1
	  param in name "corePoolSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new ScheduledThreadPoolExecutor with the given core
pool size.

@param corePoolSize the number of threads to keep in the pool,
even if they are idle.
@throws IllegalArgumentException if corePoolSize less than or
equal to zero"
      end

      operation 7959579 "ScheduledThreadPoolExecutor"
	public explicit_return_type ""
	nparams 2
	  param in name "corePoolSize" explicit_type "int"
	  param inout name "threadFactory" type class_ref 995355 // ThreadFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new ScheduledThreadPoolExecutor with the given
initial parameters.

@param corePoolSize the number of threads to keep in the pool,
even if they are idle.
@param threadFactory the factory to use when the executor
creates a new thread. 
@throws NullPointerException if threadFactory is null"
      end

      operation 7959707 "ScheduledThreadPoolExecutor"
	public explicit_return_type ""
	nparams 2
	  param in name "corePoolSize" explicit_type "int"
	  param inout name "handler" type class_ref 997659 // RejectedExecutionHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new ScheduledThreadPoolExecutor with the given
initial parameters.

@param corePoolSize the number of threads to keep in the pool,
even if they are idle.
@param handler the handler to use when execution is blocked
because the thread bounds and queue capacities are reached.
@throws NullPointerException if handler is null"
      end

      operation 7959835 "ScheduledThreadPoolExecutor"
	public explicit_return_type ""
	nparams 3
	  param in name "corePoolSize" explicit_type "int"
	  param inout name "threadFactory" type class_ref 995355 // ThreadFactory
	  param inout name "handler" type class_ref 997659 // RejectedExecutionHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new ScheduledThreadPoolExecutor with the given
initial parameters.

@param corePoolSize the number of threads to keep in the pool,
even if they are idle.
@param threadFactory the factory to use when the executor
creates a new thread. 
@param handler the handler to use when execution is blocked
because the thread bounds and queue capacities are reached.
@throws NullPointerException if threadFactory or handler is null"
      end

      operation 7959963 "schedule"
	public return_type class_ref 996763 // ScheduledFuture
	nparams 3
	  param inout name "command" type class_ref 163355 // Runnable
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7960091 "schedule"
	public return_type class_ref 996763 // ScheduledFuture
	nparams 3
	  param inout name "callable" type class_ref 988571 // Callable
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0}<V> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7960219 "scheduleAtFixedRate"
	public return_type class_ref 996763 // ScheduledFuture
	nparams 4
	  param inout name "command" type class_ref 163355 // Runnable
	  param in name "initialDelay" explicit_type "long"
	  param in name "period" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7960347 "scheduleWithFixedDelay"
	public return_type class_ref 996763 // ScheduledFuture
	nparams 4
	  param inout name "command" type class_ref 163355 // Runnable
	  param in name "initialDelay" explicit_type "long"
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7960475 "execute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "command" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Execute command with zero required delay. This has effect
equivalent to <tt>schedule(command, 0, anyUnit)</tt>.  Note
that inspections of the queue and of the list returned by
<tt>shutdownNow</tt> will access the zero-delayed
{@link ScheduledFuture}, not the <tt>command</tt> itself.

@param command the task to execute
@throws RejectedExecutionException at discretion of
<tt>RejectedExecutionHandler</tt>, if task cannot be accepted
for execution because the executor has been shut down.
@throws NullPointerException if command is null"
      end

      operation 7960603 "submit"
	public return_type class_ref 988443 // Future
	nparams 1
	  param inout name "task" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Override AbstractExecutorService methods"
      end

      operation 7960731 "submit"
	public return_type class_ref 988443 // Future
	nparams 2
	  param inout name "task" type class_ref 163355 // Runnable
	  param inout name "result" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7960859 "submit"
	public return_type class_ref 988443 // Future
	nparams 1
	  param inout name "task" type class_ref 988571 // Callable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7960987 "setContinueExistingPeriodicTasksAfterShutdownPolicy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set policy on whether to continue executing existing periodic
tasks even when this executor has been <tt>shutdown</tt>. In
this case, these tasks will only terminate upon
<tt>shutdownNow</tt>, or after setting the policy to
<tt>false</tt> when already shutdown. This value is by default
false.
@param value if true, continue after shutdown, else don't.
@see #getExecuteExistingDelayedTasksAfterShutdownPolicy"
      end

      operation 7961115 "getContinueExistingPeriodicTasksAfterShutdownPolicy"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the policy on whether to continue executing existing
periodic tasks even when this executor has been
<tt>shutdown</tt>. In this case, these tasks will only
terminate upon <tt>shutdownNow</tt> or after setting the policy
to <tt>false</tt> when already shutdown. This value is by
default false.
@return true if will continue after shutdown.
@see #setContinueExistingPeriodicTasksAfterShutdownPolicy"
      end

      operation 7961243 "setExecuteExistingDelayedTasksAfterShutdownPolicy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set policy on whether to execute existing delayed
tasks even when this executor has been <tt>shutdown</tt>. In
this case, these tasks will only terminate upon
<tt>shutdownNow</tt>, or after setting the policy to
<tt>false</tt> when already shutdown. This value is by default
true.
@param value if true, execute after shutdown, else don't.
@see #getExecuteExistingDelayedTasksAfterShutdownPolicy"
      end

      operation 7961371 "getExecuteExistingDelayedTasksAfterShutdownPolicy"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get policy on whether to execute existing delayed
tasks even when this executor has been <tt>shutdown</tt>. In
this case, these tasks will only terminate upon
<tt>shutdownNow</tt>, or after setting the policy to
<tt>false</tt> when already shutdown. This value is by default
true.
@return true if will execute after shutdown.
@see #setExecuteExistingDelayedTasksAfterShutdownPolicy"
      end

      operation 7961499 "shutdown"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initiates an orderly shutdown in which previously submitted
tasks are executed, but no new tasks will be accepted. If the
<tt>ExecuteExistingDelayedTasksAfterShutdownPolicy</tt> has
been set <tt>false</tt>, existing delayed tasks whose delays
have not yet elapsed are cancelled. And unless the
<tt>ContinueExistingPeriodicTasksAfterShutdownPolicy</tt> has
been set <tt>true</tt>, future executions of existing periodic
tasks will be cancelled."
      end

      operation 7961627 "shutdownNow"
	public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to stop all actively executing tasks, halts the
processing of waiting tasks, and returns a list of the tasks that were
awaiting execution. 
 
<p>There are no guarantees beyond best-effort attempts to stop
processing actively executing tasks.  This implementation
cancels tasks via {@link Thread#interrupt}, so if any tasks mask or
fail to respond to interrupts, they may never terminate.

@return list of tasks that never commenced execution.  Each
element of this list is a {@link ScheduledFuture},
including those tasks submitted using <tt>execute</tt>, which
are for scheduling purposes used as the basis of a zero-delay
<tt>ScheduledFuture</tt>."
      end

      operation 7961755 "getQueue"
	public return_type class_ref 989083 // BlockingQueue
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the task queue used by this executor.  Each element of
this queue is a {@link ScheduledFuture}, including those
tasks submitted using <tt>execute</tt> which are for scheduling
purposes used as the basis of a zero-delay
<tt>ScheduledFuture</tt>. Iteration over this queue is
<em>not</em> guaranteed to traverse tasks in the order in
which they will execute.

@return the task queue"
      end

      class 998811 "DelayedWorkQueue"
	visibility private 
	nactuals 7
	actual class class_ref 134939 // AbstractCollection
	  rank 0 value class_ref 163355 // Runnable
	actual class class_ref 134939 // AbstractCollection
	  rank 1 explicit_value ""
	actual class class_ref 134939 // AbstractCollection
	  rank 2 explicit_value ""
	actual class class_ref 134939 // AbstractCollection
	  rank 3 explicit_value ""
	actual class class_ref 989083 // BlockingQueue
	  rank 0 value class_ref 163355 // Runnable
	actual class class_ref 989083 // BlockingQueue
	  rank 1 explicit_value ""
	actual class class_ref 989083 // BlockingQueue
	  rank 2 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1945627 // <realization>
	  relation 1945627 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1945627 // <realization>
	    b parent class_ref 134939 // AbstractCollection
	end

	classrelation 1945755 // <realization>
	  relation 1945755 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1945755 // <realization>
	    b parent class_ref 989083 // BlockingQueue
	end

	classrelation 1945883 // dq (<unidirectional association>)
	  relation 1945883 --->
	    a role_name "dq" init_value "=  new DelayQueue<ScheduledFutureTask>()" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ScheduledFutureTask> ${name}${value};
"
	      classrelation_ref 1945883 // dq (<unidirectional association>)
	    b parent class_ref 993819 // DelayQueue
	end

	operation 7961883 "poll"
	  public return_type class_ref 163355 // Runnable
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7962011 "peek"
	  public return_type class_ref 163355 // Runnable
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7962139 "take"
	  public return_type class_ref 163355 // Runnable
	  nparams 0
	  nexceptions 1
	    exception class_ref 164123 // InterruptedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7962267 "poll"
	  public return_type class_ref 163355 // Runnable
	  nparams 2
	    param in name "timeout" explicit_type "long"
	    param inout name "unit" type class_ref 988315 // TimeUnit
	  nexceptions 1
	    exception class_ref 164123 // InterruptedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7962395 "add"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "x" type class_ref 163355 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7962523 "offer"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "x" type class_ref 163355 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7962651 "put"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "x" type class_ref 163355 // Runnable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7962779 "offer"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "x" type class_ref 163355 // Runnable
	    param in name "timeout" explicit_type "long"
	    param inout name "unit" type class_ref 988315 // TimeUnit
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7962907 "remove"
	  public return_type class_ref 163355 // Runnable
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7963035 "element"
	  public return_type class_ref 163355 // Runnable
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7963163 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7963291 "drainTo"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "c" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Runnable> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7963419 "drainTo"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "c" type class_ref 135067 // Collection
	    param in name "maxElements" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Runnable> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7963547 "remainingCapacity"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7963675 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "x" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7963803 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "x" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7963931 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7964059 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7964187 "toArray"
	  public explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7964315 "toArray"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "array" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7964443 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 998939 "Semaphore"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A counting semaphore.  Conceptually, a semaphore maintains a set of
permits.  Each {@link #acquire} blocks if necessary until a permit is
available, and then takes it.  Each {@link #release} adds a permit,
potentially releasing a blocking acquirer.
However, no actual permit objects are used; the <tt>Semaphore</tt> just
keeps a count of the number available and acts accordingly.

<p>Semaphores are often used to restrict the number of threads than can
access some (physical or logical) resource. For example, here is
a class that uses a semaphore to control access to a pool of items:
<pre>
class Pool {
  private static final MAX_AVAILABLE = 100;
  private final Semaphore available = new Semaphore(MAX_AVAILABLE, true);

  public Object getItem() throws InterruptedException {
    available.acquire();
    return getNextAvailableItem();
  }

  public void putItem(Object x) {
    if (markAsUnused(x))
      available.release();
  }

  // Not a particularly efficient data structure; just for demo

  protected Object[] items = ... whatever kinds of items being managed
  protected boolean[] used = new boolean[MAX_AVAILABLE];

  protected synchronized Object getNextAvailableItem() {
    for (int i = 0; i < MAX_AVAILABLE; ++i) {
      if (!used[i]) {
         used[i] = true;
         return items[i];
      }
    }
    return null; // not reached
  }

  protected synchronized boolean markAsUnused(Object item) {
    for (int i = 0; i < MAX_AVAILABLE; ++i) {
      if (item == items[i]) {
         if (used[i]) {
           used[i] = false;
           return true;
         } else
           return false;
      }
    }
    return false;
  }

}
</pre>

<p>Before obtaining an item each thread must acquire a permit from
the semaphore, guaranteeing that an item is available for use. When
the thread has finished with the item it is returned back to the
pool and a permit is returned to the semaphore, allowing another
thread to acquire that item.  Note that no synchronization lock is
held when {@link #acquire} is called as that would prevent an item
from being returned to the pool.  The semaphore encapsulates the
synchronization needed to restrict access to the pool, separately
from any synchronization needed to maintain the consistency of the
pool itself.

<p>A semaphore initialized to one, and which is used such that it
only has at most one permit available, can serve as a mutual
exclusion lock.  This is more commonly known as a <em>binary
semaphore</em>, because it only has two states: one permit
available, or zero permits available.  When used in this way, the
binary semaphore has the property (unlike many {@link Lock}
implementations), that the &quot;lock&quot; can be released by a
thread other than the owner (as semaphores have no notion of
ownership).  This can be useful in some specialized contexts, such
as deadlock recovery.

<p> The constructor for this class optionally accepts a
<em>fairness</em> parameter. When set false, this class makes no
guarantees about the order in which threads acquire permits. In
particular, <em>barging</em> is permitted, that is, a thread
invoking {@link #acquire} can be allocated a permit ahead of a
thread that has been waiting - logically the new thread places itself at
the head of the queue of waiting threads. When fairness is set true, the
semaphore guarantees that threads invoking any of the {@link
#acquire() acquire} methods are selected to obtain permits in the order in
which their invocation of those methods was processed
(first-in-first-out; FIFO). Note that FIFO ordering necessarily
applies to specific internal points of execution within these
methods.  So, it is possible for one thread to invoke
<tt>acquire</tt> before another, but reach the ordering point after
the other, and similarly upon return from the method.
Also note that the untimed {@link #tryAcquire() tryAcquire} methods do not
honor the fairness setting, but will take any permits that are
available.

<p>Generally, semaphores used to control resource access should be
initialized as fair, to ensure that no thread is starved out from
accessing a resource. When using semaphores for other kinds of
synchronization control, the throughput advantages of non-fair
ordering often outweigh fairness considerations.

<p>This class also provides convenience methods to {@link
#acquire(int) acquire} and {@link #release(int) release} multiple
permits at a time.  Beware of the increased risk of indefinite
postponement when these methods are used without fairness set true.

@since 1.5
@author Doug Lea
"
      classrelation 1946011 // <realization>
	relation 1946011 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1946011 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2935835 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -3222578661600680210L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 999067 "Sync"
	abstract visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1946267 // <generalisation>
	  relation 1946267 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1946267 // <generalisation>
	    b parent class_ref 990619 // AbstractQueuedSynchronizer
	end

	operation 7964571 "Sync"
	  package explicit_return_type ""
	  nparams 1
	    param in name "permits" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7964699 "getPermits"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7964827 "nonfairTryAcquireShared"
	  package explicit_return_type "int"
	  nparams 1
	    param in name "acquires" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7964955 "tryReleaseShared"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param in name "releases" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7965083 "reducePermits"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "reductions" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7965211 "drainPermits"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1946139 // sync (<unidirectional association>)
	relation 1946139 --->
	  a role_name "sync" const_relation private
	    comment " All mechanics via AbstractQueuedSynchronizer subclass 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1946139 // sync (<unidirectional association>)
	  b parent class_ref 999067 // Sync
      end

      class 999195 "NonfairSync"
	visibility package 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1946395 // <generalisation>
	  relation 1946395 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1946395 // <generalisation>
	    b parent class_ref 999067 // Sync
	end

	operation 7965339 "NonfairSync"
	  package explicit_return_type ""
	  nparams 1
	    param in name "permits" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7965467 "tryAcquireShared"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "acquires" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 999323 "FairSync"
	visibility package 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1946523 // <generalisation>
	  relation 1946523 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1946523 // <generalisation>
	    b parent class_ref 999067 // Sync
	end

	operation 7965595 "FairSync"
	  package explicit_return_type ""
	  nparams 1
	    param in name "permits" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7965723 "tryAcquireShared"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "acquires" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7965851 "Semaphore"
	public explicit_return_type ""
	nparams 1
	  param in name "permits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>Semaphore</tt> with the given number of
permits and nonfair fairness setting.
@param permits the initial number of permits available. This
value may be negative, in which case releases must
occur before any acquires will be granted."
      end

      operation 7965979 "Semaphore"
	public explicit_return_type ""
	nparams 2
	  param in name "permits" explicit_type "int"
	  param inout name "fair" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>Semaphore</tt> with the given number of
permits and the given fairness setting.
@param permits the initial number of permits available. This
value may be negative, in which case releases must
occur before any acquires will be granted.
@param fair true if this semaphore will guarantee first-in
first-out granting of permits under contention, else false."
      end

      operation 7966107 "acquire"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires a permit from this semaphore, blocking until one is
available, or the thread is {@link Thread#interrupt interrupted}.

<p>Acquires a permit, if one is available and returns immediately,
reducing the number of available permits by one.
<p>If no permit is available then the current thread becomes
disabled for thread scheduling purposes and lies dormant until
one of two things happens:
<ul>
<li>Some other thread invokes the {@link #release} method for this
semaphore and the current thread is next to be assigned a permit; or
<li>Some other thread {@link Thread#interrupt interrupts} the current
thread.
</ul>

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@link Thread#interrupt interrupted} while waiting
for a permit,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

@throws InterruptedException if the current thread is interrupted

@see Thread#interrupt"
      end

      operation 7966235 "acquireUninterruptibly"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires a permit from this semaphore, blocking until one is
available.

<p>Acquires a permit, if one is available and returns immediately,
reducing the number of available permits by one.
<p>If no permit is available then the current thread becomes
disabled for thread scheduling purposes and lies dormant until
some other thread invokes the {@link #release} method for this
semaphore and the current thread is next to be assigned a permit.

<p>If the current thread
is {@link Thread#interrupt interrupted} while waiting
for a permit then it will continue to wait, but the time at which
the thread is assigned a permit may change compared to the time it
would have received the permit had no interruption occurred. When the
thread does return from this method its interrupt status will be set.
"
      end

      operation 7966363 "tryAcquire"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires a permit from this semaphore, only if one is available at the 
time of invocation.
<p>Acquires a permit, if one is available and returns immediately,
with the value <tt>true</tt>,
reducing the number of available permits by one.

<p>If no permit is available then this method will return
immediately with the value <tt>false</tt>.

<p>Even when this semaphore has been set to use a
fair ordering policy, a call to <tt>tryAcquire()</tt> <em>will</em>
immediately acquire a permit if one is available, whether or not
other threads are currently waiting. 
This &quot;barging&quot; behavior can be useful in certain 
circumstances, even though it breaks fairness. If you want to honor
the fairness setting, then use 
{@link #tryAcquire(long, TimeUnit) tryAcquire(0, TimeUnit.SECONDS) }
which is almost equivalent (it also detects interruption).

@return <tt>true</tt> if a permit was acquired and <tt>false</tt>
otherwise."
      end

      operation 7966491 "tryAcquire"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires a permit from this semaphore, if one becomes available 
within the given waiting time and the
current thread has not been {@link Thread#interrupt interrupted}.
<p>Acquires a permit, if one is available and returns immediately,
with the value <tt>true</tt>,
reducing the number of available permits by one.
<p>If no permit is available then
the current thread becomes disabled for thread scheduling
purposes and lies dormant until one of three things happens:
<ul>
<li>Some other thread invokes the {@link #release} method for this
semaphore and the current thread is next to be assigned a permit; or
<li>Some other thread {@link Thread#interrupt interrupts} the current
thread; or
<li>The specified waiting time elapses.
</ul>
<p>If a permit is acquired then the value <tt>true</tt> is returned.
<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@link Thread#interrupt interrupted} while waiting to acquire
a permit,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.
<p>If the specified waiting time elapses then the value <tt>false</tt>
is returned.
If the time is less than or equal to zero, the method will not wait 
at all.

@param timeout the maximum time to wait for a permit
@param unit the time unit of the <tt>timeout</tt> argument.
@return <tt>true</tt> if a permit was acquired and <tt>false</tt>
if the waiting time elapsed before a permit was acquired.

@throws InterruptedException if the current thread is interrupted

@see Thread#interrupt
"
      end

      operation 7966619 "release"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases a permit, returning it to the semaphore.
<p>Releases a permit, increasing the number of available permits
by one.
If any threads are trying to acquire a permit, then one
is selected and given the permit that was just released.
That thread is (re)enabled for thread scheduling purposes.
<p>There is no requirement that a thread that releases a permit must
have acquired that permit by calling {@link #acquire}.
Correct usage of a semaphore is established by programming convention
in the application."
      end

      operation 7966747 "acquire"
	public explicit_return_type "void"
	nparams 1
	  param in name "permits" explicit_type "int"
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires the given number of permits from this semaphore, 
blocking until all are available, 
or the thread is {@link Thread#interrupt interrupted}.

<p>Acquires the given number of permits, if they are available,
and returns immediately,
reducing the number of available permits by the given amount.

<p>If insufficient permits are available then the current thread becomes
disabled for thread scheduling purposes and lies dormant until
one of two things happens:
<ul>
<li>Some other thread invokes one of the {@link #release() release} 
methods for this semaphore, the current thread is next to be assigned
permits and the number of available permits satisfies this request; or
<li>Some other thread {@link Thread#interrupt interrupts} the current
thread.
</ul>

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@link Thread#interrupt interrupted} while waiting
for a permit,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared. 
Any permits that were to be assigned to this thread are instead 
assigned to other threads trying to acquire permits, as if
permits had been made available by a call to {@link #release()}.

@param permits the number of permits to acquire

@throws InterruptedException if the current thread is interrupted
@throws IllegalArgumentException if permits less than zero.

@see Thread#interrupt"
      end

      operation 7966875 "acquireUninterruptibly"
	public explicit_return_type "void"
	nparams 1
	  param in name "permits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires the given number of permits from this semaphore, 
blocking until all are available.

<p>Acquires the given number of permits, if they are available,
and returns immediately,
reducing the number of available permits by the given amount.

<p>If insufficient permits are available then the current thread becomes
disabled for thread scheduling purposes and lies dormant until
some other thread invokes one of the {@link #release() release} 
methods for this semaphore, the current thread is next to be assigned
permits and the number of available permits satisfies this request.

<p>If the current thread
is {@link Thread#interrupt interrupted} while waiting
for permits then it will continue to wait and its position in the
queue is not affected. When the
thread does return from this method its interrupt status will be set.

@param permits the number of permits to acquire
@throws IllegalArgumentException if permits less than zero.
"
      end

      operation 7967003 "tryAcquire"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "permits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires the given number of permits from this semaphore, only
if all are available at the time of invocation.

<p>Acquires the given number of permits, if they are available, and 
returns immediately, with the value <tt>true</tt>,
reducing the number of available permits by the given amount.

<p>If insufficient permits are available then this method will return
immediately with the value <tt>false</tt> and the number of available
permits is unchanged.

<p>Even when this semaphore has been set to use a fair ordering
policy, a call to <tt>tryAcquire</tt> <em>will</em>
immediately acquire a permit if one is available, whether or
not other threads are currently waiting.  This
&quot;barging&quot; behavior can be useful in certain
circumstances, even though it breaks fairness. If you want to
honor the fairness setting, then use {@link #tryAcquire(int,
long, TimeUnit) tryAcquire(permits, 0, TimeUnit.SECONDS) }
which is almost equivalent (it also detects interruption).

@param permits the number of permits to acquire

@return <tt>true</tt> if the permits were acquired and <tt>false</tt>
otherwise.
@throws IllegalArgumentException if permits less than zero."
      end

      operation 7967131 "tryAcquire"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "permits" explicit_type "int"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires the given number of permits from this semaphore, if all 
become available within the given waiting time and the
current thread has not been {@link Thread#interrupt interrupted}.
<p>Acquires the given number of permits, if they are available and 
returns immediately, with the value <tt>true</tt>,
reducing the number of available permits by the given amount.
<p>If insufficient permits are available then
the current thread becomes disabled for thread scheduling
purposes and lies dormant until one of three things happens:
<ul>
<li>Some other thread invokes one of the {@link #release() release} 
methods for this semaphore, the current thread is next to be assigned
permits and the number of available permits satisfies this request; or
<li>Some other thread {@link Thread#interrupt interrupts} the current
thread; or
<li>The specified waiting time elapses.
</ul>
<p>If the permits are acquired then the value <tt>true</tt> is returned.
<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@link Thread#interrupt interrupted} while waiting to acquire
the permits,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.
Any permits that were to be assigned to this thread, are instead 
assigned to other threads trying to acquire permits, as if
the permits had been made available by a call to {@link #release()}.

<p>If the specified waiting time elapses then the value <tt>false</tt>
is returned.
If the time is
less than or equal to zero, the method will not wait at all.
Any permits that were to be assigned to this thread, are instead 
assigned to other threads trying to acquire permits, as if
the permits had been made available by a call to {@link #release()}.

@param permits the number of permits to acquire
@param timeout the maximum time to wait for the permits
@param unit the time unit of the <tt>timeout</tt> argument.
@return <tt>true</tt> if all permits were acquired and <tt>false</tt>
if the waiting time elapsed before all permits were acquired.

@throws InterruptedException if the current thread is interrupted
@throws IllegalArgumentException if permits less than zero.

@see Thread#interrupt
"
      end

      operation 7967259 "release"
	public explicit_return_type "void"
	nparams 1
	  param in name "permits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases the given number of permits, returning them to the semaphore.
<p>Releases the given number of permits, increasing the number of 
available permits by that amount.
If any threads are trying to acquire permits, then one
is selected and given the permits that were just released.
If the number of available permits satisfies that thread's request
then that thread is (re)enabled for thread scheduling purposes;
otherwise the thread will wait until sufficient permits are available.
If there are still permits available
after this thread's request has been satisfied, then those permits
are assigned in turn to other threads trying to acquire permits.

<p>There is no requirement that a thread that releases a permit must
have acquired that permit by calling {@link Semaphore#acquire acquire}.
Correct usage of a semaphore is established by programming convention
in the application.

@param permits the number of permits to release
@throws IllegalArgumentException if permits less than zero."
      end

      operation 7967387 "availablePermits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current number of permits available in this semaphore.
<p>This method is typically used for debugging and testing purposes.
@return the number of permits available in this semaphore."
      end

      operation 7967515 "drainPermits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquire and return all permits that are immediately available.
@return the number of permits "
      end

      operation 7967643 "reducePermits"
	protected explicit_return_type "void"
	nparams 1
	  param in name "reduction" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Shrinks the number of available permits by the indicated
reduction. This method can be useful in subclasses that use
semaphores to track resources that become unavailable. This
method differs from <tt>acquire</tt> in that it does not block
waiting for permits to become available.
@param reduction the number of permits to remove
@throws IllegalArgumentException if reduction is negative"
      end

      operation 7967771 "isFair"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this semaphore has fairness set true.
@return true if this semaphore has fairness set true."
      end

      operation 7967899 "hasQueuedThreads"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Queries whether any threads are waiting to acquire. Note that
because cancellations may occur at any time, a <tt>true</tt>
return does not guarantee that any other thread will ever
acquire.  This method is designed primarily for use in
monitoring of the system state.

@return true if there may be other threads waiting to acquire
the lock."
      end

      operation 7968027 "getQueueLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of threads waiting to
acquire.  The value is only an estimate because the number of
threads may change dynamically while this method traverses
internal data structures.  This method is designed for use in
monitoring of the system state, not for synchronization
control.
@return the estimated number of threads waiting for this lock"
      end

      operation 7968155 "getQueuedThreads"
	protected return_type class_ref 135067 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Thread> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a collection containing threads that may be waiting to
acquire.  Because the actual set of threads may change
dynamically while constructing this result, the returned
collection is only a best-effort estimate.  The elements of the
returned collection are in no particular order.  This method is
designed to facilitate construction of subclasses that provide
more extensive monitoring facilities.
@return the collection of threads"
      end

      operation 7968283 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string identifying this semaphore, as well as its state.
The state, in brackets, includes the String 
&quot;Permits =&quot; followed by the number of permits.
@return a string identifying this semaphore, as well as its
state"
      end
    end

    class 999451 "SynchronousQueue"
      visibility public 
      nformals 3
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 7
      actual class class_ref 137115 // AbstractQueue
        rank 0 explicit_value "E"
      actual class class_ref 137115 // AbstractQueue
        rank 1 explicit_value ""
      actual class class_ref 137115 // AbstractQueue
        rank 2 explicit_value ""
      actual class class_ref 137115 // AbstractQueue
        rank 3 explicit_value ""
      actual class class_ref 989083 // BlockingQueue
        rank 0 explicit_value "E"
      actual class class_ref 989083 // BlockingQueue
        rank 1 explicit_value ""
      actual class class_ref 989083 // BlockingQueue
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@linkplain BlockingQueue blocking queue} in which each
<tt>put</tt> must wait for a <tt>take</tt>, and vice versa.  A
synchronous queue does not have any internal capacity, not even a
capacity of one. You cannot <tt>peek</tt> at a synchronous queue
because an element is only present when you try to take it; you
cannot add an element (using any method) unless another thread is
trying to remove it; you cannot iterate as there is nothing to
iterate.  The <em>head</em> of the queue is the element that the
first queued thread is trying to add to the queue; if there are no
queued threads then no element is being added and the head is
<tt>null</tt>.  For purposes of other <tt>Collection</tt> methods
(for example <tt>contains</tt>), a <tt>SynchronousQueue</tt> acts
as an empty collection.  This queue does not permit <tt>null</tt>
elements.

<p>Synchronous queues are similar to rendezvous channels used in
CSP and Ada. They are well suited for handoff designs, in which an
object running in one thread must sync up with an object running
in another thread in order to hand it some information, event, or
task.

<p> This class supports an optional fairness policy for ordering
waiting producer and consumer threads.  By default, this ordering
is not guaranteed. However, a queue constructed with fairness set
to <tt>true</tt> grants threads access in FIFO order. Fairness
generally decreases throughput but reduces variability and avoids
starvation.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.

<p>This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 1946651 // <realization>
	relation 1946651 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1946651 // <realization>
	  b parent class_ref 137115 // AbstractQueue
      end

      classrelation 1946779 // <realization>
	relation 1946779 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1946779 // <realization>
	  b parent class_ref 989083 // BlockingQueue
      end

      classrelation 1946907 // <realization>
	relation 1946907 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1946907 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2935963 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -3223113410248163686L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1947035 // qlock (<unidirectional association>)
	relation 1947035 --->
	  a role_name "qlock" const_relation private
	    comment "
This implementation divides actions into two cases for puts:

An arriving producer that does not already have a waiting consumer
creates a node holding item, and then waits for a consumer to take it.
An arriving producer that does already have a waiting consumer fills
the slot node created by the consumer, and notifies it to continue.

And symmetrically, two for takes:

An arriving consumer that does not already have a waiting producer
creates an empty slot node, and then waits for a producer to fill it.
An arriving consumer that does already have a waiting producer takes
item from the node created by the producer, and notifies it to continue.

When a put or take waiting for the actions of its counterpart
aborts due to interruption or timeout, it marks the node
it created as \"CANCELLED\", which causes its counterpart to retry
the entire put or take sequence.

This requires keeping two simple queues, waitingProducers and
waitingConsumers. Each of these can be FIFO (preserves fairness)
or LIFO (improves throughput).

 Lock protecting both wait queues 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1947035 // qlock (<unidirectional association>)
	  b parent class_ref 989211 // ReentrantLock
      end

      class 999579 "WaitQueue"
	abstract visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1947419 // <realization>
	  relation 1947419 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1947419 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	operation 7968667 "enq"
	  abstract package return_type class_ref 999707 // Node
	  nparams 1
	    param inout name "x" explicit_type "Object"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Create, add, and return node for x "
	end

	operation 7968795 "deq"
	  abstract package return_type class_ref 999707 // Node
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Remove and return node, or null if empty "
	end
      end

      classrelation 1947163 // waitingProducers (<unidirectional association>)
	relation 1947163 --->
	  a role_name "waitingProducers" const_relation private
	    comment " Queue holding waiting puts 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1947163 // waitingProducers (<unidirectional association>)
	  b parent class_ref 999579 // WaitQueue
      end

      classrelation 1947291 // waitingConsumers (<unidirectional association>)
	relation 1947291 --->
	  a role_name "waitingConsumers" const_relation private
	    comment " Queue holding waiting takes 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1947291 // waitingConsumers (<unidirectional association>)
	  b parent class_ref 999579 // WaitQueue
      end

      operation 7968411 "SynchronousQueue"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>SynchronousQueue</tt> with nonfair access policy."
      end

      operation 7968539 "SynchronousQueue"
	public explicit_return_type ""
	nparams 1
	  param inout name "fair" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>SynchronousQueue</tt> with specified fairness policy.
@param fair if true, threads contend in FIFO order for access;
otherwise the order is unspecified."
      end

      class 999707 "Node"
	visibility package 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1948443 // <generalisation>
	  relation 1948443 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1948443 // <generalisation>
	    b parent class_ref 990619 // AbstractQueuedSynchronizer
	end

	attribute 2936347 "ACK"
	  class_attribute const_attribute private explicit_type "int"
	  init_value "=   1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Synchronization state value representing that node acked "
	end

	attribute 2936475 "CANCEL"
	  class_attribute const_attribute private explicit_type "int"
	  init_value "=  -1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Synchronization state value representing that node cancelled "
	end

	attribute 2936603 "item"
	  package explicit_type "Object"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " The item being transferred "
	end

	classrelation 1948571 // next (<unidirectional association>)
	  relation 1948571 --->
	    a role_name "next" package
	      comment " Next node in wait queue 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1948571 // next (<unidirectional association>)
	    b parent class_ref 990747 // Node
	end

	operation 7969435 "Node"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "x" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Creates a node with initial item "
	end

	operation 7969563 "Node"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "x" explicit_type "Object"
	    param inout name "n" type class_ref 990747 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Creates a node with initial item and next "
	end

	operation 7969691 "tryAcquire"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param in name "ignore" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Implements AQS base acquire to succeed if not in WAITING state"
	end

	operation 7969819 "tryRelease"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param in name "newState" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Implements AQS base release to signal if state changed"
	end

	operation 7969947 "extract"
	  private explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Takes item and nulls out field (for sake of GC)"
	end

	operation 7970075 "checkCancellationOnInterrupt"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "ie" type class_ref 164123 // InterruptedException
	  nexceptions 1
	    exception class_ref 164123 // InterruptedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tries to cancel on interrupt; if so rethrowing,
else setting interrupt state"
	end

	operation 7970203 "setItem"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "x" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Fills in the slot created by the consumer and signal consumer to
continue."
	end

	operation 7970331 "getItem"
	  package explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Removes item from slot created by producer and signal producer
to continue."
	end

	operation 7970459 "waitForTake"
	  package explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 164123 // InterruptedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Waits for a consumer to take item placed by producer."
	end

	operation 7970587 "waitForPut"
	  package explicit_return_type "Object"
	  nparams 0
	  nexceptions 1
	    exception class_ref 164123 // InterruptedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Waits for a producer to put item placed by consumer."
	end

	operation 7970715 "waitForTake"
	  package explicit_return_type "boolean"
	  nparams 1
	    param in name "nanos" explicit_type "long"
	  nexceptions 1
	    exception class_ref 164123 // InterruptedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Waits for a consumer to take item placed by producer or time out."
	end

	operation 7970843 "waitForPut"
	  package explicit_return_type "Object"
	  nparams 1
	    param in name "nanos" explicit_type "long"
	  nexceptions 1
	    exception class_ref 164123 // InterruptedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Waits for a producer to put item placed by consumer, or time out."
	end
      end

      class 999835 "FifoWaitQueue"
	visibility package 
	nactuals 3
	actual class class_ref 999451 // SynchronousQueue
	  rank 0 explicit_value ""
	actual class class_ref 999451 // SynchronousQueue
	  rank 1 explicit_value ""
	actual class class_ref 999451 // SynchronousQueue
	  rank 2 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1947547 // <generalisation>
	  relation 1947547 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1947547 // <generalisation>
	    b parent class_ref 999579 // WaitQueue
	end

	classrelation 1947675 // <realization>
	  relation 1947675 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1947675 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 2936091 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  -3623113410248163686L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1947803 // head (<unidirectional association>)
	  relation 1947803 --->
	    a role_name "head" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1947803 // head (<unidirectional association>)
	    b parent class_ref 999707 // Node
	end

	classrelation 1947931 // last (<unidirectional association>)
	  relation 1947931 --->
	    a role_name "last" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1947931 // last (<unidirectional association>)
	    b parent class_ref 999707 // Node
	end

	operation 7968923 "enq"
	  package return_type class_ref 999707 // Node
	  nparams 1
	    param inout name "x" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7969051 "deq"
	  package return_type class_ref 999707 // Node
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 999963 "LifoWaitQueue"
	visibility package 
	nactuals 3
	actual class class_ref 999451 // SynchronousQueue
	  rank 0 explicit_value ""
	actual class class_ref 999451 // SynchronousQueue
	  rank 1 explicit_value ""
	actual class class_ref 999451 // SynchronousQueue
	  rank 2 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1948059 // <generalisation>
	  relation 1948059 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1948059 // <generalisation>
	    b parent class_ref 999579 // WaitQueue
	end

	classrelation 1948187 // <realization>
	  relation 1948187 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1948187 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 2936219 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  -3633113410248163686L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1948315 // head (<unidirectional association>)
	  relation 1948315 --->
	    a role_name "head" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1948315 // head (<unidirectional association>)
	    b parent class_ref 999707 // Node
	end

	operation 7969179 "enq"
	  package return_type class_ref 999707 // Node
	  nparams 1
	    param inout name "x" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7969307 "deq"
	  package return_type class_ref 999707 // Node
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7970971 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" explicit_type "E"
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to this queue, waiting if necessary for
another thread to receive it.
@param o the element to add
@throws InterruptedException if interrupted while waiting.
@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 7971099 "offer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "o" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue, waiting if necessary
up to the specified wait time for another thread to receive it.
@param o the element to add
@param timeout how long to wait before giving up, in units of
<tt>unit</tt>
@param unit a <tt>TimeUnit</tt> determining how to interpret the
<tt>timeout</tt> parameter
@return <tt>true</tt> if successful, or <tt>false</tt> if
the specified waiting time elapses before a consumer appears.
@throws InterruptedException if interrupted while waiting.
@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 7971227 "take"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting if necessary
for another thread to insert it.
@throws InterruptedException if interrupted while waiting.
@return the head of this queue"
      end

      operation 7971355 "poll"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 988315 // TimeUnit
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting
if necessary up to the specified wait time, for another thread
to insert it.
@param timeout how long to wait before giving up, in units of
<tt>unit</tt>
@param unit a <tt>TimeUnit</tt> determining how to interpret the
<tt>timeout</tt> parameter
@return the head of this queue, or <tt>null</tt> if the
specified waiting time elapses before an element is present.
@throws InterruptedException if interrupted while waiting."
      end

      operation 7971483 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Untimed nonblocking versions

Inserts the specified element into this queue, if another thread is
waiting to receive it.

@param o the element to add.
@return <tt>true</tt> if it was possible to add the element to
        this queue, else <tt>false</tt>
@throws NullPointerException if the specified element is <tt>null</tt>"
      end

      operation 7971611 "poll"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, if another thread
is currently making an element available.

@return the head of this queue, or <tt>null</tt> if no
        element is available."
      end

      operation 7971739 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns <tt>true</tt>. 
A <tt>SynchronousQueue</tt> has no internal capacity.
@return <tt>true</tt>"
      end

      operation 7971867 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns zero.
A <tt>SynchronousQueue</tt> has no internal capacity.
@return zero."
      end

      operation 7971995 "remainingCapacity"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns zero.
A <tt>SynchronousQueue</tt> has no internal capacity.
@return zero."
      end

      operation 7972123 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does nothing.
A <tt>SynchronousQueue</tt> has no internal capacity."
      end

      operation 7972251 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns <tt>false</tt>.
A <tt>SynchronousQueue</tt> has no internal capacity.
@param o the element
@return <tt>false</tt>"
      end

      operation 7972379 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns <tt>false</tt>.
A <tt>SynchronousQueue</tt> has no internal capacity.

@param o the element to remove
@return <tt>false</tt>"
      end

      operation 7972507 "containsAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>false</tt> unless given collection is empty.
A <tt>SynchronousQueue</tt> has no internal capacity.
@param c the collection
@return <tt>false</tt> unless given collection is empty"
      end

      operation 7972635 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns <tt>false</tt>.
A <tt>SynchronousQueue</tt> has no internal capacity.
@param c the collection
@return <tt>false</tt>"
      end

      operation 7972763 "retainAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns <tt>false</tt>.
A <tt>SynchronousQueue</tt> has no internal capacity.
@param c the collection
@return <tt>false</tt>"
      end

      operation 7972891 "peek"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns <tt>null</tt>. 
A <tt>SynchronousQueue</tt> does not return elements
unless actively waited on.
@return <tt>null</tt>"
      end

      class 1000091 "EmptyIterator"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "E"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1948699 // <realization>
	  relation 1948699 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1948699 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	operation 7973019 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7973147 "next"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7973275 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7973403 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an empty iterator in which <tt>hasNext</tt> always returns
<tt>false</tt>.

@return an empty iterator"
      end

      operation 7973531 "toArray"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a zero-length array.
@return a zero-length array"
      end

      operation 7973659 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the zeroeth element of the specified array to <tt>null</tt>
(if the array has non-zero length) and returns it.
@param a the array
@return the specified array"
      end

      operation 7973787 "drainTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7973915 "drainTo"
	public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 135067 // Collection
	  param in name "maxElements" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  package_ref 138523 // atomic

  deploymentview 149275 "concurrent"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 347931 "Executor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 521371 // Executor
      end
      comment "@(#)Executor.java	1.5 04/02/09

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 756891 "ExecutorService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import java.util.Collection;
import java.security.PrivilegedAction;
import java.security.PrivilegedExceptionAction;
${definition}"
      associated_classes
	class_ref 988187 // ExecutorService
      end
      comment "@(#)ExecutorService.java	1.6 04/07/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 757019 "AbstractExecutorService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_classes
	class_ref 988059 // AbstractExecutorService
      end
      comment "@(#)AbstractExecutorService.java	1.1 04/02/09

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 757147 "BlockingQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collection;
import java.util.Queue;
${definition}"
      associated_classes
	class_ref 989083 // BlockingQueue
      end
      comment "@(#)BlockingQueue.java	1.8 04/07/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 757275 "ArrayBlockingQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.*;
import java.util.*;
${definition}"
      associated_classes
	class_ref 988955 // ArrayBlockingQueue
      end
      comment "@(#)ArrayBlockingQueue.java	1.9 04/06/14

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 757403 "BrokenBarrierException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 989595 // BrokenBarrierException
      end
      comment "@(#)BrokenBarrierException.java	1.3 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 757531 "Callable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 988571 // Callable
      end
      comment "@(#)Callable.java	1.5 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 757659 "CancellationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 989723 // CancellationException
      end
      comment "@(#)CancellationException.java	1.4 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 757787 "CompletionService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 989851 // CompletionService
      end
      comment "@(#)CompletionService.java	1.1 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 757915 "ConcurrentMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
${definition}"
      associated_classes
	class_ref 202651 // ConcurrentMap
      end
      comment "@(#)ConcurrentMap.java	1.6 04/07/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 758555 "ConcurrentLinkedQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.util.concurrent.atomic.*;
${definition}"
      associated_classes
	class_ref 992155 // ConcurrentLinkedQueue
      end
      comment "@(#)ConcurrentLinkedQueue.java	1.7 04/06/11

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 758683 "CopyOnWriteArrayList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_classes
	class_ref 992539 // CopyOnWriteArrayList
      end
      comment "@(#)CopyOnWriteArrayList.java	1.8 04/04/14

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 758811 "CopyOnWriteArraySet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_classes
	class_ref 993051 // CopyOnWriteArraySet
      end
      comment "@(#)CopyOnWriteArraySet.java	1.7 04/06/11

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 758939 "CountDownLatch"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.*;
import java.util.concurrent.atomic.*;
${definition}"
      associated_classes
	class_ref 993179 // CountDownLatch
      end
      comment "@(#)CountDownLatch.java	1.5 04/02/09

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 759067 "CyclicBarrier"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.*;
${definition}"
      associated_classes
	class_ref 993435 // CyclicBarrier
      end
      comment "@(#)CyclicBarrier.java	1.12 06/01/03

Copyright 2006 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 759195 "Delayed"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_classes
	class_ref 993691 // Delayed
      end
      comment "@(#)Delayed.java	1.6 04/04/14

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 759323 "DelayQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.*;
import java.util.*;
${definition}"
      associated_classes
	class_ref 993819 // DelayQueue
      end
      comment "@(#)DelayQueue.java	1.8 05/09/24

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 759579 "Exchanger"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.LockSupport;
${definition}"
      associated_classes
	class_ref 994075 // Exchanger
      end
      comment "@(#)Exchanger.java	1.6 06/09/20

Copyright 2006 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 759707 "ExecutionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 988699 // ExecutionException
      end
      comment "@(#)ExecutionException.java	1.3 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 759835 "Future"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 988443 // Future
      end
      comment "@(#)Future.java	1.6 04/02/09

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 759963 "FutureTask"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.*;
${definition}"
      associated_classes
	class_ref 994971 // FutureTask
      end
      comment "@(#)FutureTask.java	1.7 04/04/15

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 760091 "ExecutorCompletionService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 994715 // ExecutorCompletionService
      end
      comment "@(#)ExecutorCompletionService.java	1.1 04/02/09

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 760219 "ThreadFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 995355 // ThreadFactory
      end
      comment "@(#)ThreadFactory.java	1.4 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 760347 "ScheduledExecutorService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.atomic.*;
import java.util.*;
${definition}"
      associated_classes
	class_ref 995483 // ScheduledExecutorService
      end
      comment "@(#)ScheduledExecutorService.java	1.2 04/04/14

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 760475 "Executors"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.security.AccessControlContext;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.security.PrivilegedExceptionAction;
import java.security.AccessControlException;
${definition}"
      associated_classes
	class_ref 995227 // Executors
      end
      comment "@(#)Executors.java	1.6 04/02/09

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 760603 "LinkedBlockingQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.*;
${definition}"
      associated_classes
	class_ref 996891 // LinkedBlockingQueue
      end
      comment "@(#)LinkedBlockingQueue.java	1.11 05/09/02

Copyright 2005 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 760731 "PriorityBlockingQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.*;
import java.util.*;
${definition}"
      associated_classes
	class_ref 997275 // PriorityBlockingQueue
      end
      comment "@(#)PriorityBlockingQueue.java	1.9 04/06/11

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 760859 "RejectedExecutionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 997531 // RejectedExecutionException
      end
      comment "@(#)RejectedExecutionException.java	1.3 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 760987 "RejectedExecutionHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 997659 // RejectedExecutionHandler
      end
      comment "@(#)RejectedExecutionHandler.java	1.3 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 761115 "ScheduledFuture"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 996763 // ScheduledFuture
      end
      comment "@(#)ScheduledFuture.java	1.5 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 761243 "ThreadPoolExecutor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.*;
import java.util.*;
${definition}"
      associated_classes
	class_ref 997787 // ThreadPoolExecutor
      end
      comment "@(#)ThreadPoolExecutor.java	1.9 04/07/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 761371 "ScheduledThreadPoolExecutor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.atomic.*;
import java.util.*;
${definition}"
      associated_classes
	class_ref 997915 // ScheduledThreadPoolExecutor
      end
      comment "@(#)ScheduledThreadPoolExecutor.java	1.3 04/04/14

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 761499 "Semaphore"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.util.concurrent.locks.*;
import java.util.concurrent.atomic.*;
${definition}"
      associated_classes
	class_ref 998939 // Semaphore
      end
      comment "@(#)Semaphore.java	1.8 04/07/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 761627 "SynchronousQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.*;
import java.util.*;
${definition}"
      associated_classes
	class_ref 999451 // SynchronousQueue
      end
      comment "@(#)SynchronousQueue.java	1.8 04/06/11

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 761755 "TimeoutException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 988827 // TimeoutException
      end
      comment "@(#)TimeoutException.java	1.3 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 761883 "TimeUnit"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 988315 // TimeUnit
      end
      comment "@(#)TimeUnit.java	1.6 04/02/09

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end

  package_ref 181787 // locks
end
