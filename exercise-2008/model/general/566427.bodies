class ClassPath
!!!3867291.java!!!	ClassPath(in class_path : String)
    ArrayList vec = new ArrayList();

    for(StringTokenizer tok=new StringTokenizer(class_path,
						java.io.File.pathSeparator);
	tok.hasMoreTokens();)
    {
      String path = tok.nextToken();
      
      if(!path.equals("")) {
	File file = new File(path);

	try {
	  if(file.exists()) {
	    if(file.isDirectory())
	      vec.add(new Dir(path));
	    else
	      vec.add(new Zip(new ZipFile(file)));
	  }
	} catch(IOException e) {
	  System.err.println("CLASSPATH component " + file + ": " + e);
	}
      }
    }

    paths = new PathEntry[vec.size()];
    vec.toArray(paths);
!!!3867419.java!!!	ClassPath()
    this(getClassPath());
!!!3867547.java!!!	getPathComponents(in path : String, inout list : ArrayList) : void
    if(path != null) {
      StringTokenizer tok = new StringTokenizer(path, File.pathSeparator);

      while(tok.hasMoreTokens()) {
        String name = tok.nextToken();
        File   file = new File(name);

	if(file.exists())
	  list.add(name);
      }
    }
!!!3867675.java!!!	getClassPath() : String
    String class_path = System.getProperty("java.class.path");
    String boot_path  = System.getProperty("sun.boot.class.path");
    String ext_path   = System.getProperty("java.ext.dirs");

    ArrayList list = new ArrayList();

    getPathComponents(class_path, list);
    getPathComponents(boot_path, list);

    ArrayList dirs = new ArrayList();
    getPathComponents(ext_path, dirs);

    for(Iterator e = dirs.iterator(); e.hasNext(); ) {
      File     ext_dir    = new File((String)e.next());
      String[] extensions = ext_dir.list(new FilenameFilter() {
	public boolean accept(File dir, String name) {
	  name = name.toLowerCase();
	  return name.endsWith(".zip") || name.endsWith(".jar");
	}
      });

      if(extensions != null)
	for(int i=0; i < extensions.length; i++)
	  list.add(ext_path + File.separatorChar + extensions[i]);
    }

    StringBuffer buf = new StringBuffer();

    for(Iterator e = list.iterator(); e.hasNext(); ) {
      buf.append((String)e.next());

      if(e.hasNext())
	buf.append(File.pathSeparatorChar);
    }

    return buf.toString();
!!!3867803.java!!!	getInputStream(in name : String) : InputStream
    return getInputStream(name, ".class");
!!!3867931.java!!!	getInputStream(in name : String, in suffix : String) : InputStream
    return getClassFile(name, suffix).getInputStream();
!!!3868059.java!!!	getClassFile(in name : String, in suffix : String) : ClassFile
    for(int i=0; i < paths.length; i++) {
      ClassFile cf;

      if((cf = paths[i].getClassFile(name, suffix)) != null)
	return cf;
    }

    throw new IOException("Couldn't find: " + name + suffix);
!!!3868187.java!!!	getClassFile(in name : String) : ClassFile
    return getClassFile(name, ".class");
!!!3868315.java!!!	getBytes(in name : String, in suffix : String) : byte
    InputStream is = getInputStream(name, suffix);
    
    if(is == null)
      throw new IOException("Couldn't find: " + name + suffix);

    DataInputStream dis   = new DataInputStream(is);
    byte[]          bytes = new byte[is.available()];
    dis.readFully(bytes);
    dis.close(); is.close();

    return bytes;
!!!3868443.java!!!	getBytes(in name : String) : byte
    return getBytes(name, ".class");
!!!3868571.java!!!	getPath(in name : String) : String
    int    index  = name.lastIndexOf('.');
    String suffix = "";

    if(index > 0) {
      suffix = name.substring(index);
      name   = name.substring(0, index);
    }
    
    return getPath(name, suffix);
!!!3868699.java!!!	getPath(in name : String, in suffix : String) : String
    return getClassFile(name, suffix).getPath();
