class SpinnerListModel
!!!9266331.java!!!	SpinnerListModel(inout values : List)
        if (values == null || values.size() == 0) {
            throw new IllegalArgumentException("SpinnerListModel(List) expects non-null non-empty List");
        }
	this.list = values;
	this.index = 0;
!!!9266459.java!!!	SpinnerListModel(inout values : Object)
        if (values == null || values.length == 0) {
            throw new IllegalArgumentException("SpinnerListModel(Object[]) expects non-null non-empty Object[]");
        }
	this.list = Arrays.asList(values);
        this.index = 0;
!!!9266587.java!!!	SpinnerListModel()
	this(new Object[]{"empty"});
!!!9266715.java!!!	getList() : List
	return list;
!!!9266843.java!!!	setList(inout list : List) : void
	if ((list == null) || (list.size() == 0)) {
	    throw new IllegalArgumentException("invalid list");
	}
	if (!list.equals(this.list)) {
	    this.list = list;
	    index = 0;
	    fireStateChanged();
	}
!!!9266971.java!!!	getValue() : Object
	return list.get(index);
!!!9267099.java!!!	setValue(inout elt : Object) : void
	int index = list.indexOf(elt);
	if (index == -1) {
	    throw new IllegalArgumentException("invalid sequence element");
	}
	else if (index != this.index) {
	    this.index = index;
	    fireStateChanged();
	}
!!!9267227.java!!!	getNextValue() : Object
	return (index >= (list.size() - 1)) ? null : list.get(index + 1);
!!!9267355.java!!!	getPreviousValue() : Object
	return (index <= 0) ? null : list.get(index - 1);
!!!9267483.java!!!	findNextMatch(in substring : String) : Object
        int max = list.size();

        if (max == 0) {
            return null;
        }
        int counter = index;

        do {
            Object value = list.get(counter);
            String string = value.toString();

            if (string != null && string.startsWith(substring)) {
                return value;
            }
            counter = (counter + 1) % max;
        } while (counter != index);
        return null;
