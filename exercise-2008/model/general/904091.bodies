class URI
!!!7262107.java!!!	URI(in str : String)
	new Parser(str).parse(false);
!!!7262235.java!!!	URI(in scheme : String, in userInfo : String, in host : String, in port : int, in path : String, in query : String, in fragment : String)
	String s = toString(scheme, null,
			    null, userInfo, host, port,
			    path, query, fragment);
	checkPath(s, scheme, path);
	new Parser(s).parse(true);
!!!7262363.java!!!	URI(in scheme : String, in authority : String, in path : String, in query : String, in fragment : String)
	String s = toString(scheme, null,
			    authority, null, null, -1,
			    path, query, fragment);
	checkPath(s, scheme, path);
	new Parser(s).parse(false);
!!!7262491.java!!!	URI(in scheme : String, in host : String, in path : String, in fragment : String)
	this(scheme, null, host, -1, path, null, fragment);
!!!7262619.java!!!	URI(in scheme : String, in ssp : String, in fragment : String)
	new Parser(toString(scheme, ssp,
			    null, null, null, -1,
			    null, null, fragment))
	    .parse(false);
!!!7262747.java!!!	create(in str : String) : URI
	try {
	    return new URI(str);
	} catch (URISyntaxException x) {
	    IllegalArgumentException y = new IllegalArgumentException();
	    y.initCause(x);
	    throw y;
	}
!!!7262875.java!!!	parseServerAuthority() : URI
	// We could be clever and cache the error message and index from the
	// exception thrown during the original parse, but that would require
	// either more fields or a more-obscure representation.
	if ((host != null) || (authority == null))
	    return this;
	defineString();
	new Parser(string).parse(true);
	return this;
!!!7263003.java!!!	normalize() : URI
	return normalize(this);
!!!7263131.java!!!	resolve(inout uri : URI) : URI
	return resolve(this, uri);
!!!7263259.java!!!	resolve(in str : String) : URI
	return resolve(URI.create(str));
!!!7263387.java!!!	relativize(inout uri : URI) : URI
	return relativize(this, uri);
!!!7263515.java!!!	toURL() : URL
	if (!isAbsolute())
	    throw new IllegalArgumentException("URI is not absolute");
	return new URL(toString());
!!!7263643.java!!!	getScheme() : String
	return scheme;
!!!7263771.java!!!	isAbsolute() : boolean
	return scheme != null;
!!!7263899.java!!!	isOpaque() : boolean
        return path == null;
!!!7264027.java!!!	getRawSchemeSpecificPart() : String
	defineSchemeSpecificPart();
	return schemeSpecificPart;
!!!7264155.java!!!	getSchemeSpecificPart() : String
	if (decodedSchemeSpecificPart == null)
	    decodedSchemeSpecificPart = decode(getRawSchemeSpecificPart());
	return decodedSchemeSpecificPart;
!!!7264283.java!!!	getRawAuthority() : String
	return authority;
!!!7264411.java!!!	getAuthority() : String
	if (decodedAuthority == null)
	    decodedAuthority = decode(authority);
	return decodedAuthority;
!!!7264539.java!!!	getRawUserInfo() : String
	return userInfo;
!!!7264667.java!!!	getUserInfo() : String
	if ((decodedUserInfo == null) && (userInfo != null))
	    decodedUserInfo = decode(userInfo);
	return decodedUserInfo;
!!!7264795.java!!!	getHost() : String
	return host;
!!!7264923.java!!!	getPort() : int
	return port;
!!!7265051.java!!!	getRawPath() : String
	return path;
!!!7265179.java!!!	getPath() : String
	if ((decodedPath == null) && (path != null))
	    decodedPath = decode(path);
	return decodedPath;
!!!7265307.java!!!	getRawQuery() : String
	return query;
!!!7265435.java!!!	getQuery() : String
	if ((decodedQuery == null) && (query != null))
	    decodedQuery = decode(query);
	return decodedQuery;
!!!7265563.java!!!	getRawFragment() : String
	return fragment;
!!!7265691.java!!!	getFragment() : String
	if ((decodedFragment == null) && (fragment != null))
	    decodedFragment = decode(fragment);
	return decodedFragment;
!!!7265819.java!!!	equals(inout ob : Object) : boolean
	if (ob == this)
	    return true;
	if (!(ob instanceof URI))
	    return false;
	URI that = (URI)ob;
	if (this.isOpaque() != that.isOpaque()) return false;
	if (!equalIgnoringCase(this.scheme, that.scheme)) return false;
	if (!equal(this.fragment, that.fragment)) return false;

	// Opaque
	if (this.isOpaque())
	    return equal(this.schemeSpecificPart, that.schemeSpecificPart);

	// Hierarchical
	if (!equal(this.path, that.path)) return false;
	if (!equal(this.query, that.query)) return false;

	// Authorities
	if (this.authority == that.authority) return true;
	if (this.host != null) {
	    // Server-based
	    if (!equal(this.userInfo, that.userInfo)) return false;
	    if (!equalIgnoringCase(this.host, that.host)) return false;
	    if (this.port != that.port) return false;
	} else if (this.authority != null) {
	    // Registry-based
	    if (!equal(this.authority, that.authority)) return false;
	} else if (this.authority != that.authority) {
	    return false;
	}

	return true;
!!!7265947.java!!!	hashCode() : int
	if (hash != 0)
	    return hash;
	int h = hashIgnoringCase(0, scheme);
	h = hash(h, fragment);
	if (isOpaque()) {
	    h = hash(h, schemeSpecificPart);
	} else {
	    h = hash(h, path);
	    h = hash(h, query);
	    if (host != null) {
		h = hash(h, userInfo);
		h = hashIgnoringCase(h, host);
		h += 1949 * port;
	    } else {
		h = hash(h, authority);
	    }
	}
	hash = h;
	return h;
!!!7266075.java!!!	compareTo(inout that : URI) : int
	int c;

	if ((c = compareIgnoringCase(this.scheme, that.scheme)) != 0)
	    return c;

	if (this.isOpaque()) {
	    if (that.isOpaque()) {
		// Both opaque
		if ((c = compare(this.schemeSpecificPart,
				 that.schemeSpecificPart)) != 0)
		    return c;
		return compare(this.fragment, that.fragment);
	    }
	    return +1;			// Opaque > hierarchical
	} else if (that.isOpaque()) {
	    return -1;			// Hierarchical < opaque
	}

	// Hierarchical
	if ((this.host != null) && (that.host != null)) {
	    // Both server-based
	    if ((c = compare(this.userInfo, that.userInfo)) != 0)
		return c;
	    if ((c = compareIgnoringCase(this.host, that.host)) != 0)
		return c;
	    if ((c = this.port - that.port) != 0)
		return c;
	} else {
	    // If one or both authorities are registry-based then we simply
	    // compare them in the usual, case-sensitive way.  If one is
	    // registry-based and one is server-based then the strings are
	    // guaranteed to be unequal, hence the comparison will never return
	    // zero and the compareTo and equals methods will remain
	    // consistent.
	    if ((c = compare(this.authority, that.authority)) != 0) return c;
	}

	if ((c = compare(this.path, that.path)) != 0) return c;
	if ((c = compare(this.query, that.query)) != 0) return c;
	return compare(this.fragment, that.fragment);
!!!7266203.java!!!	toString() : String
	defineString();
	return string;
!!!7266331.java!!!	toASCIIString() : String
	defineString();
	return encode(string);
!!!7266459.java!!!	writeObject(inout os : ObjectOutputStream) : void
	defineString();
	os.defaultWriteObject();	// Writes the string field only
!!!7266587.java!!!	readObject(inout is : ObjectInputStream) : void
	port = -1;			// Argh
	is.defaultReadObject();
	try {
	    new Parser(string).parse(false);
	} catch (URISyntaxException x) {
	    IOException y = new InvalidObjectException("Invalid URI");
	    y.initCause(x);
	    throw y;
	}
!!!7266715.java!!!	toLower(in c : char) : int
	if ((c >= 'A') && (c <= 'Z'))
	    return c + ('a' - 'A');
	return c;
!!!7266843.java!!!	equal(in s : String, in t : String) : boolean
	if (s == t) return true;
	if ((s != null) && (t != null)) {
	    if (s.length() != t.length())
		return false;
	    if (s.indexOf('%') < 0)
		return s.equals(t);
	    int n = s.length();
	    for (int i = 0; i < n;) {
		char c = s.charAt(i);
		char d = t.charAt(i);
		if (c != '%') {
		    if (c != d)
			return false;
		    i++;
		    continue;
		}
		i++;
		if (toLower(s.charAt(i)) != toLower(t.charAt(i)))
		    return false;
		i++;
		if (toLower(s.charAt(i)) != toLower(t.charAt(i)))
		    return false;
		i++;
	    }
	    return true;
	}
	return false;
!!!7266971.java!!!	equalIgnoringCase(in s : String, in t : String) : boolean
	if (s == t) return true;
	if ((s != null) && (t != null)) {
	    int n = s.length();
	    if (t.length() != n)
		return false;
	    for (int i = 0; i < n; i++) {
		if (toLower(s.charAt(i)) != toLower(t.charAt(i)))
		    return false;
	    }
	    return true;
	}
	return false;
!!!7267099.java!!!	hash(in hash : int, in s : String) : int
	if (s == null) return hash;
	return hash * 127 + s.hashCode();
!!!7267227.java!!!	hashIgnoringCase(in hash : int, in s : String) : int
	if (s == null) return hash;
	int h = hash;
	int n = s.length();
	for (int i = 0; i < n; i++)
	    h = 31 * h + toLower(s.charAt(i));
	return h;
!!!7267355.java!!!	compare(in s : String, in t : String) : int
	if (s == t) return 0;
	if (s != null) {
	    if (t != null)
		return s.compareTo(t);
	    else
		return +1;
	} else {
	    return -1;
	}
!!!7267483.java!!!	compareIgnoringCase(in s : String, in t : String) : int
	if (s == t) return 0;
	if (s != null) {
	    if (t != null) {
		int sn = s.length();
		int tn = t.length();
		int n = sn < tn ? sn : tn;
		for (int i = 0; i < n; i++) {
		    int c = toLower(s.charAt(i)) - toLower(t.charAt(i));
		    if (c != 0)
			return c;
		}
		return sn - tn;
	    }
	    return +1;
	} else {
	    return -1;
	}
!!!7267611.java!!!	checkPath(in s : String, in scheme : String, in path : String) : void
	if (scheme != null) {
	    if ((path != null)
		&& ((path.length() > 0) && (path.charAt(0) != '/')))
		throw new URISyntaxException(s,
					     "Relative path in absolute URI");
	}
!!!7267739.java!!!	appendAuthority(inout sb : StringBuffer, in authority : String, in userInfo : String, in host : String, in port : int) : void
	if (host != null) {
	    sb.append("//");
	    if (userInfo != null) {
		sb.append(quote(userInfo, L_USERINFO, H_USERINFO));
		sb.append('@');
	    }
	    boolean needBrackets = ((host.indexOf(':') >= 0)
				    && !host.startsWith("[")
				    && !host.endsWith("]"));
	    if (needBrackets) sb.append('[');
	    sb.append(host);
	    if (needBrackets) sb.append(']');
	    if (port != -1) {
		sb.append(':');
		sb.append(port);
	    }
	} else if (authority != null) {
	    sb.append("//");
	    if (authority.startsWith("[")) {
		int end = authority.indexOf("]");
		if (end != -1 && authority.indexOf(":")!=-1) {
		    String doquote, dontquote;
		    if (end == authority.length()) {
			dontquote = authority;
			doquote = "";
		    } else {
		    	dontquote = authority.substring(0,end+1);
			doquote = authority.substring(end+1);
		    }
		    sb.append (dontquote);
	    	    sb.append(quote(doquote, 
			    L_REG_NAME | L_SERVER,
			    H_REG_NAME | H_SERVER));
		}
	    } else {
	    	sb.append(quote(authority,
			    L_REG_NAME | L_SERVER,
			    H_REG_NAME | H_SERVER));
	    }
	}
!!!7267867.java!!!	appendSchemeSpecificPart(inout sb : StringBuffer, in opaquePart : String, in authority : String, in userInfo : String, in host : String, in port : int, in path : String, in query : String) : void
	if (opaquePart != null) {
	    /* check if SSP begins with an IPv6 address
	     * because we must not quote a literal IPv6 address
	     */
	    if (opaquePart.startsWith("//[")) {
		int end =  opaquePart.indexOf("]");
		if (end != -1 && opaquePart.indexOf(":")!=-1) {
		    String doquote, dontquote;
		    if (end == opaquePart.length()) {
			dontquote = opaquePart;
			doquote = "";
		    } else {
		    	dontquote = opaquePart.substring(0,end+1);
			doquote = opaquePart.substring(end+1);
		    }
		    sb.append (dontquote);
	    	    sb.append(quote(doquote, L_URIC, H_URIC));
		}
	    } else {
	    	sb.append(quote(opaquePart, L_URIC, H_URIC));
	    }
	} else {
	    appendAuthority(sb, authority, userInfo, host, port);
	    if (path != null) 
		sb.append(quote(path, L_PATH, H_PATH));
	    if (query != null) {
		sb.append('?');
		sb.append(quote(query, L_URIC, H_URIC));
	    }
	}
!!!7267995.java!!!	appendFragment(inout sb : StringBuffer, in fragment : String) : void
	if (fragment != null) {
	    sb.append('#');
	    sb.append(quote(fragment, L_URIC, H_URIC));
	}
!!!7268123.java!!!	toString(in scheme : String, in opaquePart : String, in authority : String, in userInfo : String, in host : String, in port : int, in path : String, in query : String, in fragment : String) : String
	StringBuffer sb = new StringBuffer();
	if (scheme != null) {
	    sb.append(scheme);
	    sb.append(':');
	}
	appendSchemeSpecificPart(sb, opaquePart,
				 authority, userInfo, host, port,
				 path, query);
	appendFragment(sb, fragment);
	return sb.toString();
!!!7268251.java!!!	defineSchemeSpecificPart() : void
	if (schemeSpecificPart != null) return;
	StringBuffer sb = new StringBuffer();
	appendSchemeSpecificPart(sb, null, getAuthority(), getUserInfo(),
				 host, port, getPath(), getQuery());
	if (sb.length() == 0) return;
	schemeSpecificPart = sb.toString();
!!!7268379.java!!!	defineString() : void
	if (string != null) return;

	StringBuffer sb = new StringBuffer();
        if (scheme != null) {
            sb.append(scheme);
            sb.append(':');
        }
	if (isOpaque()) {
            sb.append(schemeSpecificPart);
        } else {
	    if (host != null) {
                sb.append("//");
                if (userInfo != null) {
                    sb.append(userInfo);
                    sb.append('@');
                }
                boolean needBrackets = ((host.indexOf(':') >= 0)
                                    && !host.startsWith("[")
                                    && !host.endsWith("]"));
                if (needBrackets) sb.append('[');
                sb.append(host);
                if (needBrackets) sb.append(']');
                if (port != -1) {
                    sb.append(':');
                    sb.append(port);
                }
            } else if (authority != null) {
                sb.append("//");
                sb.append(authority);
	    }
            if (path != null)
                sb.append(path);
            if (query != null) {
                sb.append('?');
                sb.append(query);
            }
        }
	if (fragment != null) {
            sb.append('#');
            sb.append(fragment);
	}
	string = sb.toString();
!!!7268507.java!!!	resolvePath(in base : String, in child : String, inout absolute : boolean) : String
        int i = base.lastIndexOf('/');
	int cn = child.length();
	String path = "";

	if (cn == 0) {
	    // 5.2 (6a)
	    if (i >= 0)
		path = base.substring(0, i + 1);
	} else {
	    StringBuffer sb = new StringBuffer(base.length() + cn);
	    // 5.2 (6a)
	    if (i >= 0)
		sb.append(base.substring(0, i + 1));
	    // 5.2 (6b)
	    sb.append(child);
	    path = sb.toString();
	}

	// 5.2 (6c-f)
	String np = normalize(path);

	// 5.2 (6g): If the result is absolute but the path begins with "../",
	// then we simply leave the path as-is

	return np;
!!!7268635.java!!!	resolve(inout base : URI, inout child : URI) : URI
	// check if child if opaque first so that NPE is thrown 
	// if child is null.
	if (child.isOpaque() || base.isOpaque())
	    return child;

	// 5.2 (2): Reference to current document (lone fragment)
	if ((child.scheme == null) && (child.authority == null)
	    && child.path.equals("") && (child.fragment != null)
	    && (child.query == null)) {
	    if ((base.fragment != null)
		&& child.fragment.equals(base.fragment)) {
		return base;
	    }
	    URI ru = new URI();
	    ru.scheme = base.scheme;
	    ru.authority = base.authority;
	    ru.userInfo = base.userInfo;
	    ru.host = base.host;
	    ru.port = base.port;
	    ru.path = base.path;
	    ru.fragment = child.fragment;
	    ru.query = base.query;
	    return ru;
	}

	// 5.2 (3): Child is absolute
	if (child.scheme != null)
	    return child;

	URI ru = new URI();		// Resolved URI
	ru.scheme = base.scheme;
	ru.query = child.query;
	ru.fragment = child.fragment;

	// 5.2 (4): Authority
	if (child.authority == null) {
	    ru.authority = base.authority;
	    ru.host = base.host;
	    ru.userInfo = base.userInfo;
	    ru.port = base.port;

	    String cp = (child.path == null) ? "" : child.path;
	    if ((cp.length() > 0) && (cp.charAt(0) == '/')) {
		// 5.2 (5): Child path is absolute
		ru.path = child.path;
	    } else {
		// 5.2 (6): Resolve relative path
		ru.path = resolvePath(base.path, cp, base.isAbsolute());
	    }
	} else {
	    ru.authority = child.authority;
	    ru.host = child.host;
	    ru.userInfo = child.userInfo;
	    ru.host = child.host;
	    ru.port = child.port;
	    ru.path = child.path;
	}

	// 5.2 (7): Recombine (nothing to do here)
	return ru;
!!!7268763.java!!!	normalize(inout u : URI) : URI
	if (u.isOpaque() || (u.path == null) || (u.path.length() == 0))
	    return u;

	String np = normalize(u.path);
	if (np == u.path)
	    return u;

	URI v = new URI();
	v.scheme = u.scheme;
	v.fragment = u.fragment;
	v.authority = u.authority;
	v.userInfo = u.userInfo;
	v.host = u.host;
	v.port = u.port;
	v.path = np;
	v.query = u.query;
	return v;
!!!7268891.java!!!	relativize(inout base : URI, inout child : URI) : URI
	// check if child if opaque first so that NPE is thrown 
        // if child is null.
	if (child.isOpaque() || base.isOpaque())
	    return child;
	if (!equalIgnoringCase(base.scheme, child.scheme)
	    || !equal(base.authority, child.authority))
	    return child;

	String bp = normalize(base.path);
	String cp = normalize(child.path);
	if (!bp.equals(cp)) {
	    if (!bp.endsWith("/"))
		bp = bp + "/";
	    if (!cp.startsWith(bp))
		return child;
	}

	URI v = new URI();
	v.path = cp.substring(bp.length());
	v.query = child.query;
	v.fragment = child.fragment;
	return v;
!!!7269019.java!!!	needsNormalization(in path : String) : int
	boolean normal = true;
	int ns = 0;			// Number of segments
	int end = path.length() - 1;	// Index of last char in path
	int p = 0;			// Index of next char in path

	// Skip initial slashes
	while (p <= end) {
	    if (path.charAt(p) != '/') break;
	    p++;
	}
	if (p > 1) normal = false;

	// Scan segments
	while (p <= end) {

	    // Looking at "." or ".." ?
	    if ((path.charAt(p) == '.')
		&& ((p == end)
		    || ((path.charAt(p + 1) == '/')
			|| ((path.charAt(p + 1) == '.')
			    && ((p + 1 == end)
				|| (path.charAt(p + 2) == '/')))))) {
		normal = false;
	    }
	    ns++;

	    // Find beginning of next segment
	    while (p <= end) {
		if (path.charAt(p++) != '/')
		    continue;

		// Skip redundant slashes
		while (p <= end) {
		    if (path.charAt(p) != '/') break;
		    normal = false;
		    p++;
		}

		break;
	    }
	}

	return normal ? -1 : ns;
!!!7269147.java!!!	split(in path : char, in segs : int) : void
	int end = path.length - 1;	// Index of last char in path
	int p = 0;			// Index of next char in path
	int i = 0;			// Index of current segment

	// Skip initial slashes
	while (p <= end) {
	    if (path[p] != '/') break;
	    path[p] = '\0';
	    p++;
	}

	while (p <= end) {

	    // Note start of segment
	    segs[i++] = p++;

	    // Find beginning of next segment
	    while (p <= end) {
		if (path[p++] != '/')
		    continue;
		path[p - 1] = '\0';

		// Skip redundant slashes
		while (p <= end) {
		    if (path[p] != '/') break;
		    path[p++] = '\0';
		}
		break;
	    }
	}

	if (i != segs.length)
	    throw new InternalError();	// ASSERT
!!!7269275.java!!!	join(in path : char, in segs : int) : int
	int ns = segs.length;		// Number of segments
	int end = path.length - 1;	// Index of last char in path
	int p = 0;			// Index of next path char to write

	if (path[p] == '\0') {
	    // Restore initial slash for absolute paths
	    path[p++] = '/';
	}

	for (int i = 0; i < ns; i++) {
	    int q = segs[i];		// Current segment
	    if (q == -1)
		// Ignore this segment
		continue;

	    if (p == q) {
		// We're already at this segment, so just skip to its end
		while ((p <= end) && (path[p] != '\0'))
		    p++;
		if (p <= end) {
		    // Preserve trailing slash
		    path[p++] = '/';
		}
	    } else if (p < q) {
		// Copy q down to p
		while ((q <= end) && (path[q] != '\0'))
		    path[p++] = path[q++];
		if (q <= end) {
		    // Preserve trailing slash
		    path[p++] = '/';
		}
	    } else
		throw new InternalError(); // ASSERT false
	}

	return p;
!!!7269403.java!!!	removeDots(in path : char, in segs : int) : void
	int ns = segs.length;
	int end = path.length - 1;

	for (int i = 0; i < ns; i++) {
	    int dots = 0;		// Number of dots found (0, 1, or 2)

	    // Find next occurrence of "." or ".."
	    do {
		int p = segs[i];
		if (path[p] == '.') {
		    if (p == end) {
			dots = 1;
			break;
		    } else if (path[p + 1] == '\0') {
			dots = 1;
			break;
		    } else if ((path[p + 1] == '.')
			       && ((p + 1 == end)
				   || (path[p + 2] == '\0'))) {
			dots = 2;
			break;
		    }
		}
		i++;
	    } while (i < ns);
	    if ((i > ns) || (dots == 0))
		break;

	    if (dots == 1) {
		// Remove this occurrence of "."
		segs[i] = -1;
	    } else {
		// If there is a preceding non-".." segment, remove both that
		// segment and this occurrence of ".."; otherwise, leave this
		// ".." segment as-is.
		int j;
		for (j = i - 1; j >= 0; j--) {
		    if (segs[j] != -1) break;
		}
		if (j >= 0) {
		    int q = segs[j];
		    if (!((path[q] == '.')
			  && (path[q + 1] == '.')
			  && (path[q + 2] == '\0'))) {
			segs[i] = -1;
			segs[j] = -1;
		    }
		}
	    }
	}
!!!7269531.java!!!	maybeAddLeadingDot(in path : char, in segs : int) : void

	if (path[0] == '\0')
	    // The path is absolute
	    return;

	int ns = segs.length;
	int f = 0;			// Index of first segment
	while (f < ns) {
	    if (segs[f] >= 0)
		break;
	    f++;
	}
	if ((f >= ns) || (f == 0))
	    // The path is empty, or else the original first segment survived,
	    // in which case we already know that no leading "." is needed
	    return;

	int p = segs[f];
	while ((p < path.length) && (path[p] != ':') && (path[p] != '\0')) p++;
	if (p >= path.length || path[p] == '\0')
	    // No colon in first segment, so no "." needed
	    return;

	// At this point we know that the first segment is unused,
	// hence we can insert a "." segment at that position
	path[0] = '.';
	path[1] = '\0';
	segs[0] = 0;
!!!7269659.java!!!	normalize(in ps : String) : String

	// Does this path need normalization?
	int ns = needsNormalization(ps);	// Number of segments
	if (ns < 0)
	    // Nope -- just return it
	    return ps;

	char[] path = ps.toCharArray();		// Path in char-array form

	// Split path into segments
	int[] segs = new int[ns];		// Segment-index array
	split(path, segs);

	// Remove dots
	removeDots(path, segs);

	// Prevent scheme-name confusion
	maybeAddLeadingDot(path, segs);

	// Join the remaining segments and return the result
	String s = new String(path, 0, join(path, segs));
	if (s.equals(ps)) {
	    // string was already normalized
	    return ps;
	}
	return s;
!!!7269787.java!!!	lowMask(in chars : String) : long
	int n = chars.length();
	long m = 0;
	for (int i = 0; i < n; i++) {
	    char c = chars.charAt(i);
	    if (c < 64)
		m |= (1L << c);
	}
	return m;
!!!7269915.java!!!	highMask(in chars : String) : long
	int n = chars.length();
	long m = 0;
	for (int i = 0; i < n; i++) {
	    char c = chars.charAt(i);
	    if ((c >= 64) && (c < 128))
		m |= (1L << (c - 64));
	}
	return m;
!!!7270043.java!!!	lowMask(in first : char, in last : char) : long
	long m = 0;
	int f = Math.max(Math.min(first, 63), 0);
	int l = Math.max(Math.min(last, 63), 0);
	for (int i = f; i <= l; i++)
	    m |= 1L << i;
	return m;
!!!7270171.java!!!	highMask(in first : char, in last : char) : long
	long m = 0;
	int f = Math.max(Math.min(first, 127), 64) - 64;
	int l = Math.max(Math.min(last, 127), 64) - 64;
	for (int i = f; i <= l; i++)
	    m |= 1L << i;
	return m;
!!!7270299.java!!!	match(in c : char, in lowMask : long, in highMask : long) : boolean
	if (c < 64)
	    return ((1L << c) & lowMask) != 0;
	if (c < 128)
	    return ((1L << (c - 64)) & highMask) != 0;
	return false;
!!!7270427.java!!!	appendEscape(inout sb : StringBuffer, in b : byte) : void
	sb.append('%');
	sb.append(hexDigits[(b >> 4) & 0x0f]);
	sb.append(hexDigits[(b >> 0) & 0x0f]);
!!!7270555.java!!!	appendEncoded(inout sb : StringBuffer, in c : char) : void
	ByteBuffer bb = null;
	try {
	    bb = ThreadLocalCoders.encoderFor("UTF-8")
		.encode(CharBuffer.wrap("" + c));
	} catch (CharacterCodingException x) {
	    assert false;
	}
	while (bb.hasRemaining()) {
	    int b = bb.get() & 0xff;
	    if (b >= 0x80)
		appendEscape(sb, (byte)b);
	    else
		sb.append((char)b);
	}
!!!7270683.java!!!	quote(in s : String, in lowMask : long, in highMask : long) : String
	int n = s.length();
	StringBuffer sb = null;
	boolean allowNonASCII = ((lowMask & L_ESCAPED) != 0);
	for (int i = 0; i < s.length(); i++) {
	    char c = s.charAt(i);
	    if (c < '\u0080') {
		if (!match(c, lowMask, highMask)) {
		    if (sb == null) {
			sb = new StringBuffer();
			sb.append(s.substring(0, i));
		    }
		    appendEscape(sb, (byte)c);
		} else {
		    if (sb != null)
			sb.append(c);
		}
	    } else if (allowNonASCII
		       && (Character.isSpaceChar(c)
			   || Character.isISOControl(c))) {
		if (sb == null) {
		    sb = new StringBuffer();
		    sb.append(s.substring(0, i));
		}
		appendEncoded(sb, c);
	    } else {
		if (sb != null)
		    sb.append(c);
	    }
	}
	return (sb == null) ? s : sb.toString();
!!!7270811.java!!!	encode(in s : String) : String
	int n = s.length();
	if (n == 0)
	    return s;

	// First check whether we actually need to encode
	for (int i = 0;;) {
	    if (s.charAt(i) >= '\u0080')
		break;
	    if (++i >= n)
		return s;
	}

	String ns = Normalizer.normalize(s, Normalizer.COMPOSE, 0);
	ByteBuffer bb = null;
	try {
	    bb = ThreadLocalCoders.encoderFor("UTF-8")
		.encode(CharBuffer.wrap(ns));
	} catch (CharacterCodingException x) {
	    assert false;
	}

	StringBuffer sb = new StringBuffer();
	while (bb.hasRemaining()) {
	    int b = bb.get() & 0xff;
	    if (b >= 0x80)
		appendEscape(sb, (byte)b);
	    else
		sb.append((char)b);
	}
	return sb.toString();
!!!7270939.java!!!	decode(in c : char) : int
	if ((c >= '0') && (c <= '9'))
	    return c - '0';
	if ((c >= 'a') && (c <= 'f'))
	    return c - 'a' + 10;
	if ((c >= 'A') && (c <= 'F'))
	    return c - 'A' + 10;
	assert false;
	return -1;
!!!7271067.java!!!	decode(in c1 : char, in c2 : char) : byte
	return (byte)(  ((decode(c1) & 0xf) << 4)
		      | ((decode(c2) & 0xf) << 0));
!!!7271195.java!!!	decode(in s : String) : String
	if (s == null)
	    return s;
	int n = s.length();
	if (n == 0)
	    return s;
	if (s.indexOf('%') < 0)
	    return s;

	byte[] ba = new byte[n];
	StringBuffer sb = new StringBuffer(n);
	ByteBuffer bb = ByteBuffer.allocate(n);
	CharBuffer cb = CharBuffer.allocate(n);
	CharsetDecoder dec = ThreadLocalCoders.decoderFor("UTF-8")
	    .onMalformedInput(CodingErrorAction.REPLACE)
	    .onUnmappableCharacter(CodingErrorAction.REPLACE);

	// This is not horribly efficient, but it will do for now
	char c = s.charAt(0);
    	boolean betweenBrackets = false;

	for (int i = 0; i < n;) {
	    assert c == s.charAt(i);	// Loop invariant
	    if (c == '[') {
		betweenBrackets = true;
	    } else if (betweenBrackets && c == ']') {
		betweenBrackets = false;
	    }
	    if (c != '%' || betweenBrackets) {
		sb.append(c);
		if (++i >= n)
		    break;
		c = s.charAt(i);
		continue;
	    }
	    bb.clear();
	    int ui = i;
	    for (;;) {
		assert (n - i >= 2);
		bb.put(decode(s.charAt(++i), s.charAt(++i)));
		if (++i >= n)
		    break;
		c = s.charAt(i);
		if (c != '%')
		    break;
	    }
	    bb.flip();
	    cb.clear();
	    dec.reset();
	    CoderResult cr = dec.decode(bb, cb, true);
	    assert cr.isUnderflow();
	    cr = dec.flush(cb);
	    assert cr.isUnderflow();
	    sb.append(cb.flip().toString());
	}

	return sb.toString();
