class DatatypeFactory
!!!5387163.java!!!	newInstance() : DatatypeFactory
			
		try {
			return (DatatypeFactory) FactoryFinder.find(
				/* The default property name according to the JAXP spec */
				 DATATYPEFACTORY_PROPERTY,
				/* The fallback implementation class name */
				DATATYPEFACTORY_IMPLEMENTATION_CLASS);
		} catch (FactoryFinder.ConfigurationError e) {
			throw new DatatypeConfigurationException(e.getMessage(), e.getException());
		}
!!!5387675.java!!!	newDuration(in isPositive : boolean, in years : int, in months : int, in days : int, in hours : int, in minutes : int, in seconds : int) : Duration
			
		// years may not be set
		BigInteger realYears = (years != DatatypeConstants.FIELD_UNDEFINED) ? BigInteger.valueOf((long) years) : null;
			
		// months may not be set
		BigInteger realMonths = (months != DatatypeConstants.FIELD_UNDEFINED) ? BigInteger.valueOf((long) months) : null;

		// days may not be set
		BigInteger realDays = (days != DatatypeConstants.FIELD_UNDEFINED) ? BigInteger.valueOf((long) days) : null;

		// hours may not be set
		BigInteger realHours = (hours != DatatypeConstants.FIELD_UNDEFINED) ? BigInteger.valueOf((long) hours) : null;

		// minutes may not be set
		BigInteger realMinutes = (minutes != DatatypeConstants.FIELD_UNDEFINED) ? BigInteger.valueOf((long) minutes) : null;
		
		// seconds may not be set
		BigDecimal realSeconds = (seconds != DatatypeConstants.FIELD_UNDEFINED) ? BigDecimal.valueOf((long) seconds) : null;

			return newDuration(
				isPositive,
				realYears,
				realMonths,
				realDays,
				realHours,
				realMinutes,
				realSeconds
			);
!!!5387803.java!!!	newDurationDayTime(in lexicalRepresentation : String) : Duration
		
		return newDuration(lexicalRepresentation);
!!!5387931.java!!!	newDurationDayTime(in durationInMilliseconds : long) : Duration
		
		return newDuration(durationInMilliseconds);
!!!5388059.java!!!	newDurationDayTime(in isPositive : boolean, in day : BigInteger, in hour : BigInteger, in minute : BigInteger, in second : BigInteger) : Duration
			
		return newDuration(
			isPositive,
			null,  // years
			null, // months
			day,
			hour,
			minute,
			(second != null)? new BigDecimal(second):null
		);
!!!5388187.java!!!	newDurationDayTime(in isPositive : boolean, in day : int, in hour : int, in minute : int, in second : int) : Duration
			
			return newDurationDayTime(
				isPositive,
				BigInteger.valueOf((long) day),
				BigInteger.valueOf((long) hour),
				BigInteger.valueOf((long) minute),
				BigInteger.valueOf((long) second)
				);
!!!5388315.java!!!	newDurationYearMonth(in lexicalRepresentation : String) : Duration
		
		return newDuration(lexicalRepresentation);
!!!5388443.java!!!	newDurationYearMonth(in durationInMilliseconds : long) : Duration
		
		return newDuration(durationInMilliseconds);
!!!5388571.java!!!	newDurationYearMonth(in isPositive : boolean, in year : BigInteger, in month : BigInteger) : Duration
			
		return newDuration(
			isPositive,
			year,
			month,
			null, // days
			null, // hours
			null, // minutes
			null  // seconds
		);
!!!5388699.java!!!	newDurationYearMonth(in isPositive : boolean, in year : int, in month : int) : Duration
			
		return newDurationYearMonth(
			isPositive,
			BigInteger.valueOf((long) year),
			BigInteger.valueOf((long) month));
!!!5389339.java!!!	newXMLGregorianCalendar(in year : int, in month : int, in day : int, in hour : int, in minute : int, in second : int, in millisecond : int, in timezone : int) : XMLGregorianCalendar
			
		// year may be undefined
		BigInteger realYear = (year != DatatypeConstants.FIELD_UNDEFINED) ? BigInteger.valueOf((long) year) : null;
			
		// millisecond may be undefined
		// millisecond must be >= 0 millisecond <= 1000
		BigDecimal realMillisecond = null; // undefined value
		if (millisecond != DatatypeConstants.FIELD_UNDEFINED) {
			if (millisecond < 0 || millisecond > 1000) {
				throw new IllegalArgumentException(
							"javax.xml.datatype.DatatypeFactory#newXMLGregorianCalendar("
							+ "int year, int month, int day, int hour, int minute, int second, int millisecond, int timezone)"
							+ "with invalid millisecond: " + millisecond
							);
			}
			
			realMillisecond = BigDecimal.valueOf((long) millisecond).movePointLeft(3);
		}
		
		return newXMLGregorianCalendar(
			realYear,
			month,
			day,
			hour,
			minute,
			second,
			realMillisecond,
			timezone
		);
!!!5389467.java!!!	newXMLGregorianCalendarDate(in year : int, in month : int, in day : int, in timezone : int) : XMLGregorianCalendar
			
		return newXMLGregorianCalendar(
			year,
			month,
			day,
			DatatypeConstants.FIELD_UNDEFINED, // hour
			DatatypeConstants.FIELD_UNDEFINED, // minute
			DatatypeConstants.FIELD_UNDEFINED, // second
			DatatypeConstants.FIELD_UNDEFINED, // millisecond
			timezone);
!!!5389595.java!!!	newXMLGregorianCalendarTime(in hours : int, in minutes : int, in seconds : int, in timezone : int) : XMLGregorianCalendar
				
		return newXMLGregorianCalendar(
			DatatypeConstants.FIELD_UNDEFINED, // Year
			DatatypeConstants.FIELD_UNDEFINED, // Month
			DatatypeConstants.FIELD_UNDEFINED, // Day
			hours,
			minutes,
			seconds,
			DatatypeConstants.FIELD_UNDEFINED, //Millisecond
			timezone);
!!!5389723.java!!!	newXMLGregorianCalendarTime(in hours : int, in minutes : int, in seconds : int, in fractionalSecond : BigDecimal, in timezone : int) : XMLGregorianCalendar
			
		return newXMLGregorianCalendar(
			null, // year
			DatatypeConstants.FIELD_UNDEFINED, // month
			DatatypeConstants.FIELD_UNDEFINED, // day
			hours,
			minutes,
			seconds,
			fractionalSecond,
			timezone);
!!!5389851.java!!!	newXMLGregorianCalendarTime(in hours : int, in minutes : int, in seconds : int, in milliseconds : int, in timezone : int) : XMLGregorianCalendar
			
		// millisecond may be undefined
		// millisecond must be >= 0 millisecond <= 1000
		BigDecimal realMilliseconds = null; // undefined value
		if (milliseconds != DatatypeConstants.FIELD_UNDEFINED) {
			if (milliseconds < 0 || milliseconds > 1000) {
				throw new IllegalArgumentException(
							"javax.xml.datatype.DatatypeFactory#newXMLGregorianCalendarTime("
							+ "int hours, int minutes, int seconds, int milliseconds, int timezone)"
							+ "with invalid milliseconds: " + milliseconds
							);
			}
			
			realMilliseconds = BigDecimal.valueOf((long) milliseconds).movePointLeft(3);
		}
		
		return newXMLGregorianCalendarTime(
			hours,
			minutes,
			seconds,
			realMilliseconds,
			timezone
		);
