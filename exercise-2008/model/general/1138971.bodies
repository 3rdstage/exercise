class SmartGridLayout
!!!9347355.java!!!	SmartGridLayout(in numColumns : int, in numRows : int)
    rows = numRows;
    columns = numColumns;
    layoutGrid = new Component[numColumns][numRows];

!!!9347483.java!!!	layoutContainer(inout c : Container) : void

    buildLayoutGrid(c);

    int[] rowHeights = new int[rows];
    int[] columnWidths = new int[columns];
    
    for (int row = 0; row < rows; row++) {
        rowHeights[row] = computeRowHeight(row);
    }

    for (int column = 0; column < columns; column++) {
        columnWidths[column] = computeColumnWidth(column);
    }


    Insets insets = c.getInsets();

    if (c.getComponentOrientation().isLeftToRight()) {
        int horizLoc = insets.left;
        for (int column = 0; column < columns; column++) {
          int vertLoc = insets.top;
      
          for (int row = 0; row < rows; row++) {
            Component current = layoutGrid[column][row];

            current.setBounds(horizLoc, vertLoc, columnWidths[column], rowHeights[row]);
            //	System.out.println(current.getBounds());
            vertLoc += (rowHeights[row] + yGap);
          }
          horizLoc += (columnWidths[column] + xGap );
        }
    } else {  
        int horizLoc = c.getWidth() - insets.right;
        for (int column = 0; column < columns; column++) {
          int vertLoc = insets.top;
          horizLoc -= columnWidths[column];
      
          for (int row = 0; row < rows; row++) {
            Component current = layoutGrid[column][row];

            current.setBounds(horizLoc, vertLoc, columnWidths[column], rowHeights[row]);
            //	System.out.println(current.getBounds());
            vertLoc += (rowHeights[row] + yGap);
          }
          horizLoc -= xGap;
        }
    }
      


!!!9347611.java!!!	minimumLayoutSize(inout c : Container) : Dimension

    buildLayoutGrid(c);
    Insets insets = c.getInsets();
    


    int height = 0;
    int width = 0;
    
    for (int row = 0; row < rows; row++) {
        height += computeRowHeight(row);
    }

    for (int column = 0; column < columns; column++) {
        width += computeColumnWidth(column);
    }

    height += (yGap * (rows - 1)) + insets.top + insets.bottom;
    width += (xGap * (columns - 1)) + insets.right + insets.left;

    return new Dimension(width, height);


!!!9347739.java!!!	preferredLayoutSize(inout c : Container) : Dimension
      return minimumLayoutSize(c);
!!!9348123.java!!!	buildLayoutGrid(inout c : Container) : void

      Component[] children = c.getComponents();

      for (int componentCount = 0; componentCount < children.length; componentCount++) {
	//	System.out.println("Children: " +componentCount);
	int row = 0;
	int column = 0;

	if (componentCount != 0) {
	  column = componentCount % columns;
	  row = (componentCount - column) / columns;
	}

	//	System.out.println("inserting into: "+ column +  " " + row);
      
	layoutGrid[column][row] = children[componentCount];
      }
!!!9348251.java!!!	computeColumnWidth(in columnNum : int) : int
    int maxWidth = 1;
    for (int row = 0; row < rows; row++) {
      int width = layoutGrid[columnNum][row].getPreferredSize().width;
      if (width > maxWidth) {
	maxWidth = width;
      }
    }
    return maxWidth;
!!!9348379.java!!!	computeRowHeight(in rowNum : int) : int
    int maxHeight = 1;
    for (int column = 0; column < columns; column++) {
      int height = layoutGrid[column][rowNum].getPreferredSize().height;
      if (height > maxHeight) {
	maxHeight = height;
      }
    }
    return maxHeight;
