class BigDecimalLayout
!!!274459.java!!!	BigDecimalLayout(inout intVal : BigInteger, in scale : int, inout form : BigDecimalLayoutForm)
 		layout(intVal, scale, form);
!!!274587.java!!!	hasDot() : boolean
		return dot;
!!!274715.java!!!	layoutChars() : char
		StringBuilder sb = new StringBuilder(mant);
		if (exp != null) {
		    sb.append('E');
		    sb.append(exp);
		}
		return toCharArray(sb);
!!!274843.java!!!	mantissa() : char
		return toCharArray(mant);
!!!274971.java!!!	exponent() : char
		return toCharArray(exp);
!!!275099.java!!!	toCharArray(inout sb : StringBuilder) : char
		if (sb == null)
		    return null;
		char[] result = new char[sb.length()];
		sb.getChars(0, result.length, result, 0);
		return result;
!!!275227.java!!!	layout(inout intVal : BigInteger, in scale : int, inout form : BigDecimalLayoutForm) : void
 		char coeff[] = intVal.toString().toCharArray();

		// Construct a buffer, with sufficient capacity for all cases.
		// If E-notation is needed, length will be: +1 if negative, +1
		// if '.' needed, +2 for "E+", + up to 10 for adjusted
		// exponent.  Otherwise it could have +1 if negative, plus
		// leading "0.00000"
		mant = new StringBuilder(coeff.length + 14);

		if (scale == 0) {
		    int len = coeff.length;
		    if (len > 1) {
			mant.append(coeff[0]);
			if (form == BigDecimalLayoutForm.SCIENTIFIC) {
			    mant.append('.');
			    dot = true;
			    mant.append(coeff, 1, len - 1);
			    exp = new StringBuilder("+");
			    if (len < 10)
				exp.append("0").append(len - 1);
			    else
				exp.append(len - 1);
			} else {
			    mant.append(coeff, 1, len - 1);
			}
		    } else {
			mant.append(coeff);
			if (form == BigDecimalLayoutForm.SCIENTIFIC)
			    exp = new StringBuilder("+00");
		    }
		    return;
		}
		long adjusted = -(long) scale + (coeff.length - 1);
		if (form == BigDecimalLayoutForm.DECIMAL_FLOAT) {
		    // count of padding zeros
		    int pad = scale - coeff.length;
		    if (pad >= 0) {
			// 0.xxx form
			mant.append("0.");
			dot = true;
			for (; pad > 0 ; pad--) mant.append('0');
			mant.append(coeff);
		    } else {
			// xx.xx form
			mant.append(coeff, 0, -pad);
			mant.append('.');
			dot = true;
			mant.append(coeff, -pad, scale);
		    }
		} else {
		    // x.xxx form
		    mant.append(coeff[0]);
		    if (coeff.length > 1) {
			mant.append('.');
			dot = true;
			mant.append(coeff, 1, coeff.length-1);
		    }
		    exp = new StringBuilder();
		    if (adjusted != 0) {
			long abs = Math.abs(adjusted);
			// require sign
			exp.append(adjusted < 0 ? '-' : '+');
			if (abs < 10)
			    exp.append('0');
			exp.append(abs);
		    } else {
			exp.append("+00");
		    }
		}
