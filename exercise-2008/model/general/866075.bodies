class TextArea
!!!6372123.java!!!	TextArea()
	this("", 0, 0, SCROLLBARS_BOTH);
!!!6372251.java!!!	TextArea(in text : String)
	this(text, 0, 0, SCROLLBARS_BOTH);
!!!6372379.java!!!	TextArea(in rows : int, in columns : int)
	this("", rows, columns, SCROLLBARS_BOTH);
!!!6372507.java!!!	TextArea(in text : String, in rows : int, in columns : int)
        this(text, rows, columns, SCROLLBARS_BOTH);
!!!6372635.java!!!	TextArea(in text : String, in rows : int, in columns : int, in scrollbars : int)
	super(text);

        this.rows = (rows >= 0) ? rows : 0;
        this.columns = (columns >= 0) ? columns : 0;

        if (scrollbars >= SCROLLBARS_BOTH && scrollbars <= SCROLLBARS_NONE) {
       	    this.scrollbarVisibility = scrollbars;
        } else {
            this.scrollbarVisibility = SCROLLBARS_BOTH;
        }

	setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
			      forwardTraversalKeys);
	setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,
			      backwardTraversalKeys);
!!!6372763.java!!!	constructComponentName() : String
        synchronized (getClass()) {
	    return base + nameCounter++;
	}
!!!6372891.java!!!	addNotify() : void
        synchronized (getTreeLock()) {
	    if (peer == null)
	        peer = getToolkit().createTextArea(this);
	    super.addNotify();
	}
!!!6373019.java!!!	insert(in str : String, in pos : int) : void
    	insertText(str, pos);
!!!6373147.java!!!	insertText(in str : String, in pos : int) : void
	TextAreaPeer peer = (TextAreaPeer)this.peer;
	if (peer != null) {
	    peer.insertText(str, pos);
	} else {
	    text = text.substring(0, pos) + str + text.substring(pos);
	}
!!!6373275.java!!!	append(in str : String) : void
    	appendText(str);
!!!6373403.java!!!	appendText(in str : String) : void
	if (peer != null) {
	    insertText(str, getText().length());
	} else {
	    text = text + str;
	}
!!!6373531.java!!!	replaceRange(in str : String, in start : int, in end : int) : void
	replaceText(str, start, end);
!!!6373659.java!!!	replaceText(in str : String, in start : int, in end : int) : void
	TextAreaPeer peer = (TextAreaPeer)this.peer;
	if (peer != null) {
	    peer.replaceText(str, start, end);
	} else {
	    text = text.substring(0, start) + str + text.substring(end);
	}
!!!6373787.java!!!	getRows() : int
	return rows;
!!!6373915.java!!!	setRows(in rows : int) : void
	int oldVal = this.rows;
	if (rows < 0) {
	    throw new IllegalArgumentException("rows less than zero.");
	}
	if (rows != oldVal) {
	    this.rows = rows;
	    invalidate();
	}
!!!6374043.java!!!	getColumns() : int
	return columns;
!!!6374171.java!!!	setColumns(in columns : int) : void
	int oldVal = this.columns;
	if (columns < 0) {
	    throw new IllegalArgumentException("columns less than zero.");
	}
	if (columns != oldVal) {
	    this.columns = columns;
	    invalidate();
	}
!!!6374299.java!!!	getScrollbarVisibility() : int
        return scrollbarVisibility;
!!!6374427.java!!!	getPreferredSize(in rows : int, in columns : int) : Dimension
    	return preferredSize(rows, columns);
!!!6374555.java!!!	preferredSize(in rows : int, in columns : int) : Dimension
        synchronized (getTreeLock()) {
	    TextAreaPeer peer = (TextAreaPeer)this.peer;
	    return (peer != null) ? 
		       peer.preferredSize(rows, columns) :
		       super.preferredSize();
        }
!!!6374683.java!!!	getPreferredSize() : Dimension
	return preferredSize();
!!!6374811.java!!!	preferredSize() : Dimension
        synchronized (getTreeLock()) {
	    return ((rows > 0) && (columns > 0)) ? 
			preferredSize(rows, columns) :
			super.preferredSize();
        }
!!!6374939.java!!!	getMinimumSize(in rows : int, in columns : int) : Dimension
    	return minimumSize(rows, columns);
!!!6375067.java!!!	minimumSize(in rows : int, in columns : int) : Dimension
        synchronized (getTreeLock()) {
	    TextAreaPeer peer = (TextAreaPeer)this.peer;
	    return (peer != null) ? 
		       peer.minimumSize(rows, columns) :
		       super.minimumSize();
        }
!!!6375195.java!!!	getMinimumSize() : Dimension
	return minimumSize();
!!!6375323.java!!!	minimumSize() : Dimension
        synchronized (getTreeLock()) {
	    return ((rows > 0) && (columns > 0)) ? 
			minimumSize(rows, columns) :
			super.minimumSize();
        }
!!!6375451.java!!!	paramString() : String
	String sbVisStr;
	switch (scrollbarVisibility) {
	    case SCROLLBARS_BOTH:
		sbVisStr = "both";
		break;
	    case SCROLLBARS_VERTICAL_ONLY:
		sbVisStr = "vertical-only";
		break;
	    case SCROLLBARS_HORIZONTAL_ONLY:
		sbVisStr = "horizontal-only";
		break;
	    case SCROLLBARS_NONE:
		sbVisStr = "none";
		break;
	    default:
		sbVisStr = "invalid display policy";
	}

	return super.paramString() + ",rows=" + rows +
	    ",columns=" + columns +
	  ",scrollbarVisibility=" + sbVisStr;
!!!6375579.java!!!	readObject(inout s : ObjectInputStream) : void
        // HeadlessException will be thrown by TextComponent's readObject
        s.defaultReadObject();

        // Make sure the state we just read in for columns, rows, 
        // and scrollbarVisibility has legal values
        if (columns < 0) {
            columns = 0;
        }
        if (rows < 0) {
            rows = 0;
        }

        if ((scrollbarVisibility < SCROLLBARS_BOTH) || 
            (scrollbarVisibility > SCROLLBARS_NONE)) {
            this.scrollbarVisibility = SCROLLBARS_BOTH;
        }

	if (textAreaSerializedDataVersion < 2) {
	    setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
				  forwardTraversalKeys);
	    setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,
				  backwardTraversalKeys);
	}
!!!6375707.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleAWTTextArea();
        }
        return accessibleContext;
