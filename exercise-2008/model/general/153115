format 66
"text" // src::java::text
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/text"
  java_package "java.text"
  classview 151579 "text"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 361115 "AttributedCharacterIterator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An AttributedCharacterIterator allows iteration through both text and
related attribute information.

<p>
An attribute is a key/value pair, identified by the key.  No two
attributes on a given character can have the same key.

<p>The values for an attribute are immutable, or must not be mutated
by clients or storage.  They are always passed by reference, and not
cloned.

<p>A <em>run with respect to an attribute</em> is a maximum text range for
which:
<ul>
<li>the attribute is undefined or null for the entire range, or
<li>the attribute value is defined and has the same non-null value for the
    entire range.
</ul>

<p>A <em>run with respect to a set of attributes</em> is a maximum text range for
which this condition is met for each member attribute.

<p>The returned indexes are limited to the range of the iterator.

<p>The returned attribute information is limited to runs that contain
the current character.

<p>
Attribute keys are instances of AttributedCharacterIterator.Attribute and its
subclasses, such as java.awt.font.TextAttribute.

@see AttributedCharacterIterator.Attribute
@see java.awt.font.TextAttribute
@see AttributedString
@see Annotation
@since 1.2"
      class 448155 "Attribute"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1674651 // <realization>
	  relation 1674651 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1674651 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 2609691 "name"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The name of this Attribute. The name is used primarily by readResolve
to look up the corresponding predefined instance when deserializing
an instance.
@serial
"
	end

	classrelation 1674779 // instanceMap (<unidirectional association>)
	  relation 1674779 --->
	    a role_name "instanceMap" init_value "=  new HashMap(7)" class_relation const_relation private
	      comment " table of all instances in this class, used by readResolve
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1674779 // instanceMap (<unidirectional association>)
	    b parent class_ref 136603 // Map
	end

	operation 6485019 "Attribute"
	  protected explicit_return_type ""
	  nparams 1
	    param in name "name" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs an Attribute with the given name."
	end

	operation 6485147 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Compares two objects for equality. This version only returns true
for <code>x.equals(y)</code> if <code>x</code> and <code>y</code> refer
to the same object, and guarantees this for all subclasses."
	end

	operation 6485275 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a hash code value for the object. This version is identical to
the one in Object, but is also final."
	end

	operation 6485403 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a string representation of the object. This version returns the
concatenation of class name, \"(\", a name identifying the attribute and \")\"."
	end

	operation 6485531 "getName"
	  protected explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the name of the attribute."
	end

	operation 6485659 "readResolve"
	  protected explicit_return_type "Object"
	  nparams 0
	  nexceptions 1
	    exception class_ref 203931 // InvalidObjectException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resolves instances being deserialized to the predefined constants."
	end

	classrelation 1674907 // LANGUAGE (<unidirectional association>)
	  relation 1674907 --->
	    a role_name "LANGUAGE" init_value "=  new Attribute(\"language\")" class_relation const_relation public
	      comment "
Attribute key for the language of some text.
<p> Values are instances of Locale.
@see java.util.Locale

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1674907 // LANGUAGE (<unidirectional association>)
	    b parent class_ref 448155 // Attribute
	end

	classrelation 1675035 // READING (<unidirectional association>)
	  relation 1675035 --->
	    a role_name "READING" init_value "=  new Attribute(\"reading\")" class_relation const_relation public
	      comment "
Attribute key for the reading of some text. In languages where the written form
and the pronunciation of a word are only loosely related (such as Japanese),
it is often necessary to store the reading (pronunciation) along with the
written form.
<p>Values are instances of Annotation holding instances of String.
@see Annotation
@see java.lang.String

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1675035 // READING (<unidirectional association>)
	    b parent class_ref 448155 // Attribute
	end

	classrelation 1675163 // INPUT_METHOD_SEGMENT (<unidirectional association>)
	  relation 1675163 --->
	    a role_name "INPUT_METHOD_SEGMENT" init_value "=  new Attribute(\"input_method_segment\")" class_relation const_relation public
	      comment "
Attribute key for input method segments. Input methods often break
up text into segments, which usually correspond to words.
<p>Values are instances of Annotation holding a null reference.
@see Annotation

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1675163 // INPUT_METHOD_SEGMENT (<unidirectional association>)
	    b parent class_ref 448155 // Attribute
	end

	attribute 2609819 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  -9142742483513960612L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " make sure the serial version doesn't change between compiler versions"
	end
      end

      classrelation 1674523 // <generalisation>
	relation 1674523 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1674523 // <generalisation>
	  b parent class_ref 447003 // CharacterIterator
      end

      operation 6485787 "getRunStart"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character of the run
with respect to all attributes containing the current character."
      end

      operation 6485915 "getRunStart"
	public explicit_return_type "int"
	nparams 1
	  param inout name "attribute" type class_ref 448155 // Attribute
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character of the run
with respect to the given attribute containing the current character."
      end

      operation 6486043 "getRunStart"
	public explicit_return_type "int"
	nparams 1
	  param inout name "attributes" type class_ref 136731 // Set
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character of the run
with respect to the given attributes containing the current character."
      end

      operation 6486171 "getRunLimit"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character following the run
with respect to all attributes containing the current character."
      end

      operation 6486299 "getRunLimit"
	public explicit_return_type "int"
	nparams 1
	  param inout name "attribute" type class_ref 448155 // Attribute
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character following the run
with respect to the given attribute containing the current character."
      end

      operation 6486427 "getRunLimit"
	public explicit_return_type "int"
	nparams 1
	  param inout name "attributes" type class_ref 136731 // Set
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character following the run
with respect to the given attributes containing the current character."
      end

      operation 6486555 "getAttributes"
	public return_type class_ref 136603 // Map
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute,Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a map with the attributes defined on the current
character."
      end

      operation 6486683 "getAttribute"
	public explicit_return_type "Object"
	nparams 1
	  param inout name "attribute" type class_ref 448155 // Attribute
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the named attribute for the current character.
Returns null if the attribute is not defined.
@param attribute the key of the attribute whose value is requested."
      end

      operation 6486811 "getAllAttributeKeys"
	public return_type class_ref 136731 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the keys of all attributes defined on the
iterator's text range. The set is empty if no
attributes are defined."
      end
    end

    class 391963 "ParseException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that an error has been reached unexpectedly
while parsing.
@see java.lang.Exception
@see java.text.Format
@see java.text.FieldPosition
@version     1.16, 12/19/03
@author      Mark Davis"
      classrelation 1918107 // <generalisation>
	relation 1918107 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1918107 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      operation 7855003 "ParseException"
	public explicit_return_type ""
	nparams 2
	  param in name "s" explicit_type "String"
	  param in name "errorOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ParseException with the specified detail message and
offset.
A detail message is a String that describes this particular exception.
@param s the detail message
@param errorOffset the position where the error is found while parsing."
      end

      operation 7855131 "getErrorOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the position where the error was found."
      end

      attribute 2911899 "errorOffset"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "============ privates ============

The zero-based character offset into the string being parsed at which
the error was found during parsing.
@serial
"
      end
    end

    class 447003 "CharacterIterator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface defines a protocol for bidirectional iteration over text.
The iterator iterates over a bounded sequence of characters.  Characters
are indexed with values beginning with the value returned by getBeginIndex() and
continuing through the value returned by getEndIndex()-1.
<p>
Iterators maintain a current character index, whose valid range is from
getBeginIndex() to getEndIndex(); the value getEndIndex() is included to allow
handling of zero-length text ranges and for historical reasons.
The current index can be retrieved by calling getIndex() and set directly
by calling setIndex(), first(), and last().
<p>
The methods previous() and next() are used for iteration. They return DONE if
they would move outside the range from getBeginIndex() to getEndIndex() -1,
signaling that the iterator has reached the end of the sequence. DONE is
also returned by other methods to indicate that the current index is
outside this range.

<P>Examples:<P>

Traverse the text from start to finish
<pre>
public void traverseForward(CharacterIterator iter) {
    for(char c = iter.first(); c != CharacterIterator.DONE; c = iter.next()) {
        processChar(c);
    }
}
</pre>

Traverse the text backwards, from end to start
<pre>
public void traverseBackward(CharacterIterator iter) {
    for(char c = iter.last(); c != CharacterIterator.DONE; c = iter.previous()) {
        processChar(c);
    }
}
</pre>

Traverse both forward and backward from a given position in the text.
Calls to notBoundary() in this example represents some
additional stopping criteria.
<pre>
public void traverseOut(CharacterIterator iter, int pos) {
    for (char c = iter.setIndex(pos);
             c != CharacterIterator.DONE && notBoundary(c);
             c = iter.next()) {
    }
    int end = iter.getIndex();
    for (char c = iter.setIndex(pos);
            c != CharacterIterator.DONE && notBoundary(c);
            c = iter.previous()) {
    }
    int start = iter.getIndex();
    processSection(start, end);
}
</pre>

@see StringCharacterIterator
@see AttributedCharacterIterator"
      classrelation 723867 // <generalisation>
	relation 723867 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 723867 // <generalisation>
	  b parent class_ref 339867 // Cloneable
      end

      attribute 766235 "DONE"
	class_attribute const_attribute public explicit_type "char"
	init_value "=  '\\uFFFF'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that is returned when the iterator has reached either the end
or the beginning of the text. The value is '\\\\uFFFF', the \"not a
character\" value which should not occur in any valid Unicode string.
"
      end

      operation 2711451 "first"
	public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position to getBeginIndex() and returns the character at that
position.
@return the first character in the text, or DONE if the text is empty
@see #getBeginIndex()"
      end

      operation 2711579 "last"
	public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty)
and returns the character at that position.
@return the last character in the text, or DONE if the text is empty
@see #getEndIndex()"
      end

      operation 2711707 "current"
	public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character at the current position (as returned by getIndex()).
@return the character at the current position or DONE if the current
position is off the end of the text.
@see #getIndex()"
      end

      operation 2711835 "next"
	public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increments the iterator's index by one and returns the character
at the new index.  If the resulting index is greater or equal
to getEndIndex(), the current index is reset to getEndIndex() and
a value of DONE is returned.
@return the character at the new position or DONE if the new
position is off the end of the text range."
      end

      operation 2711963 "previous"
	public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrements the iterator's index by one and returns the character
at the new index. If the current index is getBeginIndex(), the index
remains at getBeginIndex() and a value of DONE is returned.
@return the character at the new position or DONE if the current
position is equal to getBeginIndex()."
      end

      operation 2712091 "setIndex"
	public explicit_return_type "char"
	nparams 1
	  param in name "position" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position to the specified position in the text and returns that
character.
@param position the position within the text.  Valid values range from
getBeginIndex() to getEndIndex().  An IllegalArgumentException is thrown
if an invalid value is supplied.
@return the character at the specified position or DONE if the specified position is equal to getEndIndex()"
      end

      operation 2712219 "getBeginIndex"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the start index of the text.
@return the index at which the text begins."
      end

      operation 2712347 "getEndIndex"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the end index of the text.  This index is the index of the first
character following the end of the text.
@return the index after the last character in the text"
      end

      operation 2712475 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current index.
@return the current index."
      end

      operation 2712603 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a copy of this iterator
@return A copy of this"
      end
    end

    class 490139 "DateFormat"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "DateFormat is an abstract class for date/time formatting subclasses which
formats and parses dates or time in a language-independent manner.
The date/time formatting subclass, such as SimpleDateFormat, allows for
formatting (i.e., date -> text), parsing (text -> date), and
normalization.  The date is represented as a <code>Date</code> object or
as the milliseconds since January 1, 1970, 00:00:00 GMT.

<p>DateFormat provides many class methods for obtaining default date/time
formatters based on the default or a given locale and a number of formatting
styles. The formatting styles include FULL, LONG, MEDIUM, and SHORT. More
detail and examples of using these styles are provided in the method
descriptions.

<p>DateFormat helps you to format and parse dates for any locale.
Your code can be completely independent of the locale conventions for
months, days of the week, or even the calendar format: lunar vs. solar.

<p>To format a date for the current Locale, use one of the
static factory methods:
<pre>
 myString = DateFormat.getDateInstance().format(myDate);
</pre>
<p>If you are formatting multiple dates, it is
more efficient to get the format and use it multiple times so that
the system doesn't have to fetch the information about the local
language and country conventions multiple times.
<pre>
 DateFormat df = DateFormat.getDateInstance();
 for (int i = 0; i < myDate.length; ++i) {
   output.println(df.format(myDate[i]) + \"; \");
 }
</pre>
<p>To format a date for a different Locale, specify it in the
call to getDateInstance().
<pre>
 DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE);
</pre>
<p>You can use a DateFormat to parse also.
<pre>
 myDate = df.parse(myString);
</pre>
<p>Use getDateInstance to get the normal date format for that country.
There are other static factory methods available.
Use getTimeInstance to get the time format for that country.
Use getDateTimeInstance to get a date and time format. You can pass in 
different options to these factory methods to control the length of the
result; from SHORT to MEDIUM to LONG to FULL. The exact result depends
on the locale, but generally:
<ul><li>SHORT is completely numeric, such as 12.13.52 or 3:30pm
<li>MEDIUM is longer, such as Jan 12, 1952
<li>LONG is longer, such as January 12, 1952 or 3:30:32pm
<li>FULL is pretty completely specified, such as
Tuesday, April 12, 1952 AD or 3:30:42pm PST.
</ul>

<p>You can also set the time zone on the format if you wish.
If you want even more control over the format or parsing,
(or want to give your users more control),
you can try casting the DateFormat you get from the factory methods
to a SimpleDateFormat. This will work for the majority
of countries; just remember to put it in a try block in case you
encounter an unusual one.

<p>You can also use forms of the parse and format methods with
ParsePosition and FieldPosition to
allow you to
<ul><li>progressively parse through pieces of a string.
<li>align any particular field, or find out where it is for selection
on the screen.
</ul>

<h4><a name=\"synchronization\">Synchronization</a></h4>

<p>
Date formats are not synchronized.
It is recommended to create separate format instances for each thread.
If multiple threads access a format concurrently, it must be synchronized
externally.

@see          Format
@see          NumberFormat
@see          SimpleDateFormat
@see          java.util.Calendar
@see          java.util.GregorianCalendar
@see          java.util.TimeZone
@version      1.51 04/12/04
@author       Mark Davis, Chen-Lieh Huang, Alan Liu"
      class 490267 "Field"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 1912731 // <generalisation>
	relation 1912731 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1912731 // <generalisation>
	  b parent class_ref 984731 // Format
      end

      classrelation 1912859 // calendar (<unidirectional association>)
	relation 1912859 --->
	  a role_name "calendar" protected
	    comment "
The calendar that <code>DateFormat</code> uses to produce the time field
values needed to implement date and time formatting.  Subclasses should
initialize this to a calendar appropriate for the locale associated with
this <code>DateFormat</code>.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1912859 // calendar (<unidirectional association>)
	  b parent class_ref 138523 // Calendar
      end

      classrelation 1912987 // numberFormat (<unidirectional association>)
	relation 1912987 --->
	  a role_name "numberFormat" protected
	    comment "
The number formatter that <code>DateFormat</code> uses to format numbers
in dates and times.  Subclasses should initialize this to a number format
appropriate for the locale associated with this <code>DateFormat</code>.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1912987 // numberFormat (<unidirectional association>)
	  b parent class_ref 985371 // NumberFormat
      end

      attribute 2894747 "ERA_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for ERA field alignment.
Used in FieldPosition of date/time formatting.
"
      end

      attribute 2894875 "YEAR_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for YEAR field alignment.
Used in FieldPosition of date/time formatting.
"
      end

      attribute 2895003 "MONTH_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for MONTH field alignment.
Used in FieldPosition of date/time formatting.
"
      end

      attribute 2895131 "DATE_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for DATE field alignment.
Used in FieldPosition of date/time formatting.
"
      end

      attribute 2895259 "HOUR_OF_DAY1_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for one-based HOUR_OF_DAY field alignment.
Used in FieldPosition of date/time formatting.
HOUR_OF_DAY1_FIELD is used for the one-based 24-hour clock.
For example, 23:59 + 01:00 results in 24:59.
"
      end

      attribute 2895387 "HOUR_OF_DAY0_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for zero-based HOUR_OF_DAY field alignment.
Used in FieldPosition of date/time formatting.
HOUR_OF_DAY0_FIELD is used for the zero-based 24-hour clock.
For example, 23:59 + 01:00 results in 00:59.
"
      end

      attribute 2895515 "MINUTE_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for MINUTE field alignment.
Used in FieldPosition of date/time formatting.
"
      end

      attribute 2895643 "SECOND_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for SECOND field alignment.
Used in FieldPosition of date/time formatting.
"
      end

      attribute 2895771 "MILLISECOND_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for MILLISECOND field alignment.
Used in FieldPosition of date/time formatting.
"
      end

      attribute 2895899 "DAY_OF_WEEK_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for DAY_OF_WEEK field alignment.
Used in FieldPosition of date/time formatting.
"
      end

      attribute 2896027 "DAY_OF_YEAR_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for DAY_OF_YEAR field alignment.
Used in FieldPosition of date/time formatting.
"
      end

      attribute 2896155 "DAY_OF_WEEK_IN_MONTH_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for DAY_OF_WEEK_IN_MONTH field alignment.
Used in FieldPosition of date/time formatting.
"
      end

      attribute 2896283 "WEEK_OF_YEAR_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for WEEK_OF_YEAR field alignment.
Used in FieldPosition of date/time formatting.
"
      end

      attribute 2896411 "WEEK_OF_MONTH_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for WEEK_OF_MONTH field alignment.
Used in FieldPosition of date/time formatting.
"
      end

      attribute 2896539 "AM_PM_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for AM_PM field alignment.
Used in FieldPosition of date/time formatting.
"
      end

      attribute 2896667 "HOUR1_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for one-based HOUR field alignment.
Used in FieldPosition of date/time formatting.
HOUR1_FIELD is used for the one-based 12-hour clock.
For example, 11:30 PM + 1 hour results in 12:30 AM.
"
      end

      attribute 2896795 "HOUR0_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for zero-based HOUR field alignment.
Used in FieldPosition of date/time formatting.
HOUR0_FIELD is used for the zero-based 12-hour clock.
For example, 11:30 PM + 1 hour results in 00:30 AM.
"
      end

      attribute 2896923 "TIMEZONE_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  17"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Useful constant for TIMEZONE field alignment.
Used in FieldPosition of date/time formatting.
"
      end

      attribute 2897051 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7218322306649953788L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Proclaim serial compatibility with 1.1 FCS"
      end

      operation 7817243 "format"
	public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param inout name "obj" explicit_type "Object"
	  param inout name "toAppendTo" type class_ref 198171 // StringBuffer
	  param inout name "fieldPosition" type class_ref 701083 // FieldPosition
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides Format.
Formats a time object into a time string. Examples of time objects
are a time value expressed in milliseconds and a Date object.
@param obj must be a Number or a Date.
@param toAppendTo the string buffer for the returning time string.
@return the formatted time string.
@param fieldPosition keeps track of the position of the field
within the returned string.
On input: an alignment field,
if desired. On output: the offsets of the alignment field. For
example, given a time text \"1996.07.10 AD at 15:08:56 PDT\",
if the given fieldPosition is DateFormat.YEAR_FIELD, the
begin index and end index of fieldPosition will be set to
0 and 4, respectively.
Notice that if the same time field appears
more than once in a pattern, the fieldPosition will be set for the first
occurrence of that time field. For instance, formatting a Date to
the time string \"1 PM PDT (Pacific Daylight Time)\" using the pattern
\"h a z (zzzz)\" and the alignment field DateFormat.TIMEZONE_FIELD,
the begin index and end index of fieldPosition will be set to
5 and 8, respectively, for the first occurrence of the timezone
pattern character 'z'.
@see java.text.Format"
      end

      operation 7817371 "format"
	abstract public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param inout name "date" type class_ref 139163 // Date
	  param inout name "toAppendTo" type class_ref 198171 // StringBuffer
	  param inout name "fieldPosition" type class_ref 701083 // FieldPosition
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a Date into a date/time string.
@param date a Date to be formatted into a date/time string.
@param toAppendTo the string buffer for the returning date/time string.
@param fieldPosition keeps track of the position of the field
within the returned string.
On input: an alignment field,
if desired. On output: the offsets of the alignment field. For
example, given a time text \"1996.07.10 AD at 15:08:56 PDT\",
if the given fieldPosition is DateFormat.YEAR_FIELD, the
begin index and end index of fieldPosition will be set to
0 and 4, respectively.
Notice that if the same time field appears
more than once in a pattern, the fieldPosition will be set for the first
occurrence of that time field. For instance, formatting a Date to
the time string \"1 PM PDT (Pacific Daylight Time)\" using the pattern
\"h a z (zzzz)\" and the alignment field DateFormat.TIMEZONE_FIELD,
the begin index and end index of fieldPosition will be set to
5 and 8, respectively, for the first occurrence of the timezone
pattern character 'z'.
@return the formatted date/time string."
      end

      operation 7817499 "format"
	public explicit_return_type "String"
	nparams 1
	  param inout name "date" type class_ref 139163 // Date
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a Date into a date/time string.
@param date the time value to be formatted into a time string.
@return the formatted time string."
      end

      operation 7817627 "parse"
	public return_type class_ref 139163 // Date
	nparams 1
	  param in name "source" explicit_type "String"
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from the beginning of the given string to produce a date.
The method may not use the entire text of the given string.
<p>
See the {@link #parse(String, ParsePosition)} method for more information
on date parsing.

@param source A <code>String</code> whose beginning should be parsed.
@return A <code>Date</code> parsed from the string.
@exception ParseException if the beginning of the specified string
           cannot be parsed."
      end

      operation 7817755 "parse"
	abstract public return_type class_ref 139163 // Date
	nparams 2
	  param in name "source" explicit_type "String"
	  param inout name "pos" type class_ref 984987 // ParsePosition
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse a date/time string according to the given parse position.  For
example, a time text \"07/10/96 4:5 PM, PDT\" will be parsed into a Date
that is equivalent to Date(837039928046).

<p> By default, parsing is lenient: If the input is not in the form used
by this object's format method but can still be parsed as a date, then
the parse succeeds.  Clients may insist on strict adherence to the
format by calling setLenient(false).

@see java.text.DateFormat#setLenient(boolean)

@param source  The date/time string to be parsed

@param pos   On input, the position at which to start parsing; on
             output, the position at which parsing terminated, or the
             start position if the parse failed.

@return      A Date, or null if the input could not be parsed"
      end

      operation 7817883 "parseObject"
	public explicit_return_type "Object"
	nparams 2
	  param in name "source" explicit_type "String"
	  param inout name "pos" type class_ref 984987 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from a string to produce a <code>Date</code>.
<p>
The method attempts to parse text starting at the index given by
<code>pos</code>.
If parsing succeeds, then the index of <code>pos</code> is updated
to the index after the last character used (parsing does not necessarily
use all characters up to the end of the string), and the parsed
date is returned. The updated <code>pos</code> can be used to
indicate the starting point for the next call to this method.
If an error occurs, then the index of <code>pos</code> is not
changed, the error index of <code>pos</code> is set to the index of
the character where the error occurred, and null is returned.
<p>
See the {@link #parse(String, ParsePosition)} method for more information
on date parsing.

@param source A <code>String</code>, part of which should be parsed.
@param pos A <code>ParsePosition</code> object with index and error
           index information as described above.
@return A <code>Date</code> parsed from the string. In case of
        error, returns null.
@exception NullPointerException if <code>pos</code> is null."
      end

      attribute 2897179 "FULL"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for full style pattern.
"
      end

      attribute 2897307 "LONG"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for long style pattern.
"
      end

      attribute 2897435 "MEDIUM"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for medium style pattern.
"
      end

      attribute 2897563 "SHORT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for short style pattern.
"
      end

      attribute 2897691 "DEFAULT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  MEDIUM"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for default style pattern.  Its value is MEDIUM.
"
      end

      operation 7818011 "getTimeInstance"
	class_operation public return_type class_ref 490139 // DateFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the time formatter with the default formatting style
for the default locale.
@return a time formatter."
      end

      operation 7818139 "getTimeInstance"
	class_operation public return_type class_ref 490139 // DateFormat
	nparams 1
	  param in name "style" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the time formatter with the given formatting style
for the default locale.
@param style the given formatting style. For example,
SHORT for \"h:mm a\" in the US locale.
@return a time formatter."
      end

      operation 7818267 "getTimeInstance"
	class_operation public return_type class_ref 490139 // DateFormat
	nparams 2
	  param in name "style" explicit_type "int"
	  param inout name "aLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the time formatter with the given formatting style
for the given locale.
@param style the given formatting style. For example,
SHORT for \"h:mm a\" in the US locale.
@param aLocale the given locale.
@return a time formatter."
      end

      operation 7818395 "getDateInstance"
	class_operation public return_type class_ref 490139 // DateFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the date formatter with the default formatting style
for the default locale.
@return a date formatter."
      end

      operation 7818523 "getDateInstance"
	class_operation public return_type class_ref 490139 // DateFormat
	nparams 1
	  param in name "style" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the date formatter with the given formatting style
for the default locale.
@param style the given formatting style. For example,
SHORT for \"M/d/yy\" in the US locale.
@return a date formatter."
      end

      operation 7818651 "getDateInstance"
	class_operation public return_type class_ref 490139 // DateFormat
	nparams 2
	  param in name "style" explicit_type "int"
	  param inout name "aLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the date formatter with the given formatting style
for the given locale.
@param style the given formatting style. For example,
SHORT for \"M/d/yy\" in the US locale.
@param aLocale the given locale.
@return a date formatter."
      end

      operation 7818779 "getDateTimeInstance"
	class_operation public return_type class_ref 490139 // DateFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the date/time formatter with the default formatting style
for the default locale.
@return a date/time formatter."
      end

      operation 7818907 "getDateTimeInstance"
	class_operation public return_type class_ref 490139 // DateFormat
	nparams 2
	  param in name "dateStyle" explicit_type "int"
	  param in name "timeStyle" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the date/time formatter with the given date and time
formatting styles for the default locale.
@param dateStyle the given date formatting style. For example,
SHORT for \"M/d/yy\" in the US locale.
@param timeStyle the given time formatting style. For example,
SHORT for \"h:mm a\" in the US locale.
@return a date/time formatter."
      end

      operation 7819035 "getDateTimeInstance"
	class_operation public return_type class_ref 490139 // DateFormat
	nparams 3
	  param in name "dateStyle" explicit_type "int"
	  param in name "timeStyle" explicit_type "int"
	  param inout name "aLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the date/time formatter with the given formatting styles
for the given locale.
@param dateStyle the given date formatting style.
@param timeStyle the given time formatting style.
@param aLocale the given locale.
@return a date/time formatter."
      end

      operation 7819163 "getInstance"
	class_operation public return_type class_ref 490139 // DateFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a default date/time formatter that uses the SHORT style for both the
date and the time."
      end

      operation 7819291 "getAvailableLocales"
	class_operation public return_type class_ref 138907 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all locales for which the
<code>get*Instance</code> methods of this class can return
localized instances.
The array returned must contain at least a <code>Locale</code>
instance equal to {@link java.util.Locale#US Locale.US}.

@return An array of locales for which localized
        <code>DateFormat</code> instances are available."
      end

      operation 7819419 "setCalendar"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newCalendar" type class_ref 138523 // Calendar
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the calendar to be used by this date format.  Initially, the default
calendar for the specified or default locale is used.
@param newCalendar the new Calendar to be used by the date format"
      end

      operation 7819547 "getCalendar"
	public return_type class_ref 138523 // Calendar
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the calendar associated with this date/time formatter.
@return the calendar associated with this date/time formatter."
      end

      operation 7819675 "setNumberFormat"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newNumberFormat" type class_ref 985371 // NumberFormat
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows you to set the number formatter.
@param newNumberFormat the given new NumberFormat."
      end

      operation 7819803 "getNumberFormat"
	public return_type class_ref 985371 // NumberFormat
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number formatter which this date/time formatter uses to
format and parse a time.
@return the number formatter which this date/time formatter uses."
      end

      operation 7819931 "setTimeZone"
	public explicit_return_type "void"
	nparams 1
	  param inout name "zone" type class_ref 138779 // TimeZone
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time zone for the calendar of this DateFormat object.
@param zone the given new time zone."
      end

      operation 7820059 "getTimeZone"
	public return_type class_ref 138779 // TimeZone
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the time zone.
@return the time zone associated with the calendar of DateFormat."
      end

      operation 7820187 "setLenient"
	public explicit_return_type "void"
	nparams 1
	  param inout name "lenient" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specify whether or not date/time parsing is to be lenient.  With
lenient parsing, the parser may use heuristics to interpret inputs that
do not precisely match this object's format.  With strict parsing,
inputs must match this object's format.
@param lenient when true, parsing is lenient
@see java.util.Calendar#setLenient"
      end

      operation 7820315 "isLenient"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether date/time parsing is to be lenient."
      end

      operation 7820443 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides hashCode"
      end

      operation 7820571 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides equals"
      end

      operation 7820699 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides Cloneable"
      end

      operation 7820827 "get"
	class_operation private return_type class_ref 490139 // DateFormat
	nparams 4
	  param in name "timeStyle" explicit_type "int"
	  param in name "dateStyle" explicit_type "int"
	  param in name "flags" explicit_type "int"
	  param inout name "loc" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DateFormat with the given time and/or date style in the given
locale.
@param timeStyle a value from 0 to 3 indicating the time format,
ignored if flags is 2
@param dateStyle a value from 0 to 3 indicating the time format,
ignored if flags is 1
@param flags either 1 for a time format, 2 for a date format,
or 3 for a date/time format
@param loc the locale for the format"
      end

      operation 7820955 "DateFormat"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new date format."
      end
    end

    class 653339 "Collator"
      abstract visibility public 
      nactuals 4
      actual class class_ref 138139 // Comparator
        rank 0 explicit_value "any"
      actual class class_ref 138139 // Comparator
        rank 1 explicit_value ""
      actual class class_ref 138139 // Comparator
        rank 2 explicit_value ""
      actual class class_ref 138139 // Comparator
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Collator</code> class performs locale-sensitive
<code>String</code> comparison. You use this class to build
searching and sorting routines for natural language text.

<p>
<code>Collator</code> is an abstract base class. Subclasses
implement specific collation strategies. One subclass,
<code>RuleBasedCollator</code>, is currently provided with
the Java 2 platform and is applicable to a wide set of languages. Other
subclasses may be created to handle more specialized needs.

<p>
Like other locale-sensitive classes, you can use the static
factory method, <code>getInstance</code>, to obtain the appropriate
<code>Collator</code> object for a given locale. You will only need
to look at the subclasses of <code>Collator</code> if you need
to understand the details of a particular collation strategy or
if you need to modify that strategy.

<p>
The following example shows how to compare two strings using
the <code>Collator</code> for the default locale.
<blockquote>
<pre>
// Compare two strings in the default locale
Collator myCollator = Collator.getInstance();
if( myCollator.compare(\"abc\", \"ABC\") < 0 )
    System.out.println(\"abc is less than ABC\");
else
    System.out.println(\"abc is greater than or equal to ABC\");
</pre>
</blockquote>

<p>
You can set a <code>Collator</code>'s <em>strength</em> property
to determine the level of difference considered significant in
comparisons. Four strengths are provided: <code>PRIMARY</code>,
<code>SECONDARY</code>, <code>TERTIARY</code>, and <code>IDENTICAL</code>.
The exact assignment of strengths to language features is
locale dependant.  For example, in Czech, \"e\" and \"f\" are considered
primary differences, while \"e\" and \"\\u00EA\" are secondary differences,
\"e\" and \"E\" are tertiary differences and \"e\" and \"e\" are identical.
The following shows how both case and accents could be ignored for
US English.
<blockquote>
<pre>
//Get the Collator for US English and set its strength to PRIMARY
Collator usCollator = Collator.getInstance(Locale.US);
usCollator.setStrength(Collator.PRIMARY);
if( usCollator.compare(\"abc\", \"ABC\") == 0 ) {
    System.out.println(\"Strings are equivalent\");
}
</pre>
</blockquote>
<p>
For comparing <code>String</code>s exactly once, the <code>compare</code>
method provides the best performance. When sorting a list of
<code>String</code>s however, it is generally necessary to compare each
<code>String</code> multiple times. In this case, <code>CollationKey</code>s
provide better performance. The <code>CollationKey</code> class converts
a <code>String</code> to a series of bits that can be compared bitwise
against other <code>CollationKey</code>s. A <code>CollationKey</code> is
created by a <code>Collator</code> object for a given <code>String</code>.
<br>
<strong>Note:</strong> <code>CollationKey</code>s from different
<code>Collator</code>s can not be compared. See the class description
for {@link CollationKey}
for an example using <code>CollationKey</code>s.

@see         RuleBasedCollator
@see         CollationKey
@see         CollationElementIterator
@see         Locale
@version     1.39, 05/05/04
@author      Helena Shih, Laura Werner, Richard Gillam"
      classrelation 1912475 // <realization>
	relation 1912475 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1912475 // <realization>
	  b parent class_ref 138139 // Comparator
      end

      classrelation 1912603 // <realization>
	relation 1912603 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1912603 // <realization>
	  b parent class_ref 339867 // Cloneable
      end

      attribute 2893083 "PRIMARY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Collator strength value.  When set, only PRIMARY differences are
considered significant during comparison. The assignment of strengths
to language features is locale dependant. A common example is for
different base letters (\"a\" vs \"b\") to be considered a PRIMARY difference.
@see java.text.Collator#setStrength
@see java.text.Collator#getStrength
"
      end

      attribute 2893211 "SECONDARY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Collator strength value.  When set, only SECONDARY and above differences are
considered significant during comparison. The assignment of strengths
to language features is locale dependant. A common example is for
different accented forms of the same base letter (\"a\" vs \"\\u00E4\") to be
considered a SECONDARY difference.
@see java.text.Collator#setStrength
@see java.text.Collator#getStrength
"
      end

      attribute 2893339 "TERTIARY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Collator strength value.  When set, only TERTIARY and above differences are
considered significant during comparison. The assignment of strengths
to language features is locale dependant. A common example is for
case differences (\"a\" vs \"A\") to be considered a TERTIARY difference.
@see java.text.Collator#setStrength
@see java.text.Collator#getStrength
"
      end

      attribute 2893467 "IDENTICAL"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Collator strength value.  When set, all differences are
considered significant during comparison. The assignment of strengths
to language features is locale dependant. A common example is for control
characters (\"&#092;u0001\" vs \"&#092;u0002\") to be considered equal at the
PRIMARY, SECONDARY, and TERTIARY levels but different at the IDENTICAL
level.  Additionally, differences between pre-composed accents such as
\"&#092;u00C0\" (A-grave) and combining accents such as \"A&#092;u0300\"
(A, combining-grave) will be considered significant at the IDENTICAL
level if decomposition is set to NO_DECOMPOSITION.
"
      end

      attribute 2893595 "NO_DECOMPOSITION"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Decomposition mode value. With NO_DECOMPOSITION
set, accented characters will not be decomposed for collation. This
is the default setting and provides the fastest collation but 
will only produce correct results for languages that do not use accents.
@see java.text.Collator#getDecomposition
@see java.text.Collator#setDecomposition
"
      end

      attribute 2893723 "CANONICAL_DECOMPOSITION"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Decomposition mode value. With CANONICAL_DECOMPOSITION
set, characters that are canonical variants according to Unicode 
standard will be decomposed for collation. This should be used to get 
correct collation of accented characters.
<p>
CANONICAL_DECOMPOSITION corresponds to Normalization Form D as
described in 
<a href=\"http://www.unicode.org/unicode/reports/tr15/\">Unicode 
Technical Report #15</a>.
@see java.text.Collator#getDecomposition
@see java.text.Collator#setDecomposition
"
      end

      attribute 2893851 "FULL_DECOMPOSITION"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Decomposition mode value. With FULL_DECOMPOSITION
set, both Unicode canonical variants and Unicode compatibility variants
will be decomposed for collation.  This causes not only accented
characters to be collated, but also characters that have special formats
to be collated with their norminal form. For example, the half-width and
full-width ASCII and Katakana characters are then collated together.
FULL_DECOMPOSITION is the most complete and therefore the slowest
decomposition mode.
<p>
FULL_DECOMPOSITION corresponds to Normalization Form KD as
described in 
<a href=\"http://www.unicode.org/unicode/reports/tr15/\">Unicode 
Technical Report #15</a>.
@see java.text.Collator#getDecomposition
@see java.text.Collator#setDecomposition
"
      end

      operation 7815323 "getInstance"
	class_operation public return_type class_ref 653339 // Collator
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the Collator for the current default locale.
The default locale is determined by java.util.Locale.getDefault.
@return the Collator for the default locale.(for example, en_US)
@see java.util.Locale#getDefault"
      end

      operation 7815451 "getInstance"
	class_operation public return_type class_ref 653339 // Collator
	nparams 1
	  param inout name "desiredLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the Collator for the desired locale.
@param desiredLocale the desired locale.
@return the Collator for the desired locale.
@see java.util.Locale
@see java.util.ResourceBundle"
      end

      operation 7815579 "compare"
	abstract public explicit_return_type "int"
	nparams 2
	  param in name "source" explicit_type "String"
	  param in name "target" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the source string to the target string according to the
collation rules for this Collator.  Returns an integer less than,
equal to or greater than zero depending on whether the source String is
less than, equal to or greater than the target string.  See the Collator
class description for an example of use.
<p>
For a one time comparison, this method has the best performance. If a
given String will be involved in multiple comparisons, CollationKey.compareTo
has the best performance. See the Collator class description for an example
using CollationKeys.
@param source the source string.
@param target the target string.
@return Returns an integer value. Value is less than zero if source is less than
target, value is zero if source and target are equal, value is greater than zero
if source is greater than target.
@see java.text.CollationKey
@see java.text.Collator#getCollationKey"
      end

      operation 7815707 "compare"
	public explicit_return_type "int"
	nparams 2
	  param inout name "o1" explicit_type "Object"
	  param inout name "o2" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares its two arguments for order.  Returns a negative integer,
zero, or a positive integer as the first argument is less than, equal
to, or greater than the second.
<p>
This implementation merely returns
 <code> compare((String)o1, (String)o2) </code>.

@return a negative integer, zero, or a positive integer as the
        first argument is less than, equal to, or greater than the
        second. 
@exception ClassCastException the arguments cannot be cast to Strings.
@see java.util.Comparator
@since   1.2"
      end

      operation 7815835 "getCollationKey"
	abstract public return_type class_ref 985755 // CollationKey
	nparams 1
	  param in name "source" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms the String into a series of bits that can be compared bitwise
to other CollationKeys. CollationKeys provide better performance than
Collator.compare when Strings are involved in multiple comparisons.
See the Collator class description for an example using CollationKeys.
@param source the string to be transformed into a collation key.
@return the CollationKey for the given String based on this Collator's collation
rules. If the source String is null, a null CollationKey is returned.
@see java.text.CollationKey
@see java.text.Collator#compare"
      end

      operation 7815963 "equals"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "source" explicit_type "String"
	  param in name "target" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method for comparing the equality of two strings based on
this Collator's collation rules.
@param source the source string to be compared with.
@param target the target string to be compared with.
@return true if the strings are equal according to the collation
rules.  false, otherwise.
@see java.text.Collator#compare"
      end

      operation 7816091 "getStrength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this Collator's strength property.  The strength property determines
the minimum level of difference considered significant during comparison.
See the Collator class description for an example of use.
@return this Collator's current strength property.
@see java.text.Collator#setStrength
@see java.text.Collator#PRIMARY
@see java.text.Collator#SECONDARY
@see java.text.Collator#TERTIARY
@see java.text.Collator#IDENTICAL"
      end

      operation 7816219 "setStrength"
	public explicit_return_type "void"
	nparams 1
	  param in name "newStrength" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this Collator's strength property.  The strength property determines
the minimum level of difference considered significant during comparison.
See the Collator class description for an example of use.
@param newStrength  the new strength value.
@see java.text.Collator#getStrength
@see java.text.Collator#PRIMARY
@see java.text.Collator#SECONDARY
@see java.text.Collator#TERTIARY
@see java.text.Collator#IDENTICAL
@exception  IllegalArgumentException If the new strength value is not one of
PRIMARY, SECONDARY, TERTIARY or IDENTICAL."
      end

      operation 7816347 "getDecomposition"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the decomposition mode of this Collator. Decomposition mode
determines how Unicode composed characters are handled. Adjusting
decomposition mode allows the user to select between faster and more
complete collation behavior.
<p>The three values for decomposition mode are:
<UL>
<LI>NO_DECOMPOSITION,
<LI>CANONICAL_DECOMPOSITION
<LI>FULL_DECOMPOSITION.
</UL>
See the documentation for these three constants for a description
of their meaning.
@return the decomposition mode
@see java.text.Collator#setDecomposition
@see java.text.Collator#NO_DECOMPOSITION
@see java.text.Collator#CANONICAL_DECOMPOSITION
@see java.text.Collator#FULL_DECOMPOSITION"
      end

      operation 7816475 "setDecomposition"
	public explicit_return_type "void"
	nparams 1
	  param in name "decompositionMode" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the decomposition mode of this Collator. See getDecomposition
for a description of decomposition mode.
@param decompositionMode  the new decomposition mode.
@see java.text.Collator#getDecomposition
@see java.text.Collator#NO_DECOMPOSITION
@see java.text.Collator#CANONICAL_DECOMPOSITION
@see java.text.Collator#FULL_DECOMPOSITION
@exception IllegalArgumentException If the given value is not a valid decomposition
mode."
      end

      operation 7816603 "getAvailableLocales"
	class_operation public return_type class_ref 138907 // Locale
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all locales for which the
<code>getInstance</code> methods of this class can return
localized instances.
The array returned must contain at least a <code>Locale</code>
instance equal to {@link java.util.Locale#US Locale.US}.

@return An array of locales for which localized
        <code>Collator</code> instances are available."
      end

      operation 7816731 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides Cloneable"
      end

      operation 7816859 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "that" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the equality of two Collators.
@param that the Collator to be compared with this.
@return true if this Collator is the same as that Collator;
false otherwise."
      end

      operation 7816987 "hashCode"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the hash code for this Collator."
      end

      operation 7817115 "Collator"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.  This constructor is
protected so subclasses can get access to it. Users typically create
a Collator sub-class by calling the factory method getInstance.
@see java.text.Collator#getInstance"
      end

      attribute 2893979 "strength"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2894107 "decmp"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2894235 "cache"
	class_attribute private explicit_type "SoftCache"
	init_value "=  new SoftCache()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2894363 "LESS"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " FIXME: These three constants should be removed.


LESS is returned if source string is compared to be less than target
string in the compare() method.
@see java.text.Collator#compare
"
      end

      attribute 2894491 "EQUAL"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "EQUAL is returned if source string is compared to be equal to target
string in the compare() method.
@see java.text.Collator#compare
"
      end

      attribute 2894619 "GREATER"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "GREATER is returned if source string is compared to be greater than
target string in the compare() method.
@see java.text.Collator#compare
"
      end
    end

    class 700571 "DecimalFormatSymbols"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents the set of symbols (such as the decimal separator,
the grouping separator, and so on) needed by <code>DecimalFormat</code>
to format numbers. <code>DecimalFormat</code> creates for itself an instance of
<code>DecimalFormatSymbols</code> from its locale data.  If you need to change any
of these symbols, you can get the <code>DecimalFormatSymbols</code> object from
your <code>DecimalFormat</code> and modify it.

@see          java.util.Locale
@see          DecimalFormat
@version      1.41, 05/10/04
@author       Mark Davis
@author       Alan Liu"
      classrelation 1915035 // <realization>
	relation 1915035 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1915035 // <realization>
	  b parent class_ref 339867 // Cloneable
      end

      classrelation 1915163 // <realization>
	relation 1915163 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1915163 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      operation 7833243 "DecimalFormatSymbols"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a DecimalFormatSymbols object for the default locale."
      end

      operation 7833371 "DecimalFormatSymbols"
	public explicit_return_type ""
	nparams 1
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a DecimalFormatSymbols object for the given locale.

@exception NullPointerException if <code>locale</code> is null"
      end

      operation 7833499 "getZeroDigit"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used for zero. Different for Arabic, etc."
      end

      operation 7833627 "setZeroDigit"
	public explicit_return_type "void"
	nparams 1
	  param in name "zeroDigit" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used for zero. Different for Arabic, etc."
      end

      operation 7833755 "getGroupingSeparator"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used for thousands separator. Different for French, etc."
      end

      operation 7833883 "setGroupingSeparator"
	public explicit_return_type "void"
	nparams 1
	  param in name "groupingSeparator" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used for thousands separator. Different for French, etc."
      end

      operation 7834011 "getDecimalSeparator"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used for decimal sign. Different for French, etc."
      end

      operation 7834139 "setDecimalSeparator"
	public explicit_return_type "void"
	nparams 1
	  param in name "decimalSeparator" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used for decimal sign. Different for French, etc."
      end

      operation 7834267 "getPerMill"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used for per mille sign. Different for Arabic, etc."
      end

      operation 7834395 "setPerMill"
	public explicit_return_type "void"
	nparams 1
	  param in name "perMill" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used for per mille sign. Different for Arabic, etc."
      end

      operation 7834523 "getPercent"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used for percent sign. Different for Arabic, etc."
      end

      operation 7834651 "setPercent"
	public explicit_return_type "void"
	nparams 1
	  param in name "percent" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used for percent sign. Different for Arabic, etc."
      end

      operation 7834779 "getDigit"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used for a digit in a pattern."
      end

      operation 7834907 "setDigit"
	public explicit_return_type "void"
	nparams 1
	  param in name "digit" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used for a digit in a pattern."
      end

      operation 7835035 "getPatternSeparator"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used to separate positive and negative subpatterns
in a pattern."
      end

      operation 7835163 "setPatternSeparator"
	public explicit_return_type "void"
	nparams 1
	  param in name "patternSeparator" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used to separate positive and negative subpatterns
in a pattern."
      end

      operation 7835291 "getInfinity"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the string used to represent infinity. Almost always left
unchanged."
      end

      operation 7835419 "setInfinity"
	public explicit_return_type "void"
	nparams 1
	  param in name "infinity" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the string used to represent infinity. Almost always left
unchanged."
      end

      operation 7835547 "getNaN"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the string used to represent \"not a number\". Almost always left
unchanged."
      end

      operation 7835675 "setNaN"
	public explicit_return_type "void"
	nparams 1
	  param in name "NaN" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the string used to represent \"not a number\". Almost always left
unchanged."
      end

      operation 7835803 "getMinusSign"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used to represent minus sign. If no explicit
negative format is specified, one is formed by prefixing
minusSign to the positive format."
      end

      operation 7835931 "setMinusSign"
	public explicit_return_type "void"
	nparams 1
	  param in name "minusSign" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used to represent minus sign. If no explicit
negative format is specified, one is formed by prefixing
minusSign to the positive format."
      end

      operation 7836059 "getCurrencySymbol"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the currency symbol for the currency of these
DecimalFormatSymbols in their locale.
@since 1.2"
      end

      operation 7836187 "setCurrencySymbol"
	public explicit_return_type "void"
	nparams 1
	  param in name "currency" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the currency symbol for the currency of these
DecimalFormatSymbols in their locale.
@since 1.2"
      end

      operation 7836315 "getInternationalCurrencySymbol"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ISO 4217 currency code of the currency of these
DecimalFormatSymbols.
@since 1.2"
      end

      operation 7836443 "setInternationalCurrencySymbol"
	public explicit_return_type "void"
	nparams 1
	  param in name "currencyCode" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the ISO 4217 currency code of the currency of these
DecimalFormatSymbols.
If the currency code is valid (as defined by
{@link java.util.Currency#getInstance(java.lang.String) Currency.getInstance}),
this also sets the currency attribute to the corresponding Currency
instance and the currency symbol attribute to the currency's symbol
in the DecimalFormatSymbols' locale. If the currency code is not valid,
then the currency attribute is set to null and the currency symbol
attribute is not modified.

@see #setCurrency
@see #setCurrencySymbol
@since 1.2"
      end

      operation 7836571 "getCurrency"
	public return_type class_ref 144795 // Currency
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the currency of these DecimalFormatSymbols. May be null if the
currency symbol attribute was previously set to a value that's not
a valid ISO 4217 currency code.

@return the currency used, or null
@since 1.4"
      end

      operation 7836699 "setCurrency"
	public explicit_return_type "void"
	nparams 1
	  param inout name "currency" type class_ref 144795 // Currency
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the currency of these DecimalFormatSymbols.
This also sets the currency symbol attribute to the currency's symbol
in the DecimalFormatSymbols' locale, and the international currency
symbol attribute to the currency's ISO 4217 currency code.

@param currency the new currency to be used
@exception NullPointerException if <code>currency</code> is null
@since 1.4
@see #setCurrencySymbol
@see #setInternationalCurrencySymbol"
      end

      operation 7836827 "getMonetaryDecimalSeparator"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the monetary decimal separator.
@since 1.2"
      end

      operation 7836955 "setMonetaryDecimalSeparator"
	public explicit_return_type "void"
	nparams 1
	  param in name "sep" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the monetary decimal separator.
@since 1.2"
      end

      operation 7837083 "getExponentialSymbol"
	package explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------------------------------------------
 BEGIN   Package Private methods ... to be made public later
------------------------------------------------------------

Returns the character used to separate the mantissa from the exponent."
      end

      operation 7837211 "setExponentialSymbol"
	package explicit_return_type "void"
	nparams 1
	  param in name "exp" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used to separate the mantissa from the exponent."
      end

      operation 7837339 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------------------------------------------
 END     Package Private methods ... to be made public later
------------------------------------------------------------

Standard override."
      end

      operation 7837467 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Override equals."
      end

      operation 7837595 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Override hashCode."
      end

      operation 7837723 "initialize"
	private explicit_return_type "void"
	nparams 1
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the symbols from the LocaleElements resource bundle."
      end

      operation 7837851 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the default serializable fields, provides default values for objects
in older serial versions, and initializes non-serializable fields.
If <code>serialVersionOnStream</code>
is less than 1, initializes <code>monetarySeparator</code> to be
the same as <code>decimalSeparator</code> and <code>exponential</code>
to be 'E'.
If <code>serialVersionOnStream</code> is less then 2,
initializes <code>locale</code>to the root locale.
Sets <code>serialVersionOnStream</code> back to the maximum allowed value so that
default serialization will work properly if this object is streamed out again.
Initializes the currency from the intlCurrencySymbol field.

@since JDK 1.1.6"
      end

      attribute 2904347 "zeroDigit"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Character used for zero.

@serial
@see #getZeroDigit
"
      end

      attribute 2904475 "groupingSeparator"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Character used for thousands separator.

@serial
@see #getGroupingSeparator
"
      end

      attribute 2904603 "decimalSeparator"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Character used for decimal sign.

@serial
@see #getDecimalSeparator
"
      end

      attribute 2904731 "perMill"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Character used for per mille sign.

@serial
@see #getPerMill
"
      end

      attribute 2904859 "percent"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Character used for percent sign.
@serial
@see #getPercent
"
      end

      attribute 2904987 "digit"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Character used for a digit in a pattern.

@serial
@see #getDigit
"
      end

      attribute 2905115 "patternSeparator"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Character used to separate positive and negative subpatterns
in a pattern.

@serial
@see #getPatternSeparator
"
      end

      attribute 2905243 "infinity"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "String used to represent infinity.
@serial
@see #getInfinity
"
      end

      attribute 2905371 "NaN"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "String used to represent \"not a number\".
@serial
@see #getNaN
"
      end

      attribute 2905499 "minusSign"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Character used to represent minus sign.
@serial
@see #getMinusSign
"
      end

      attribute 2905627 "currencySymbol"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "String denoting the local currency, e.g. \"$\".
@serial
@see #getCurrencySymbol
"
      end

      attribute 2905755 "intlCurrencySymbol"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "ISO 4217 currency code denoting the local currency, e.g. \"USD\".
@serial
@see #getInternationalCurrencySymbol
"
      end

      attribute 2905883 "monetarySeparator"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The decimal separator used when formatting currency values.
@serial
@since JDK 1.1.6
@see #getMonetaryDecimalSeparator

 Field new in JDK 1.1.6"
      end

      attribute 2906011 "exponential"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The character used to distinguish the exponent in a number formatted
in exponential notation, e.g. 'E' for a number such as \"1.23E45\".
<p>
Note that the public API provides no way to set this field,
even though it is supported by the implementation and the stream format.
The intent is that this will be added to the API in the future.

@serial
@since JDK 1.1.6

 Field new in JDK 1.1.6"
      end

      classrelation 1915291 // locale (<unidirectional association>)
	relation 1915291 --->
	  a role_name "locale" private
	    comment "
The locale of these currency format symbols.

@serial
@since 1.4

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1915291 // locale (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 1915419 // currency (<unidirectional association>)
	relation 1915419 --->
	  a role_name "currency" private
	    comment " currency; only the ISO code is serialized.
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1915419 // currency (<unidirectional association>)
	  b parent class_ref 144795 // Currency
      end

      attribute 2906139 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  5772796243397350300L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Proclaim JDK 1.1 FCS compatibility"
      end

      attribute 2906267 "currentSerialVersion"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The internal serial version which says which version was written
 - 0 (default) for version up to JDK 1.1.5
 - 1 for version from JDK 1.1.6, which includes two new fields:
     monetarySeparator and exponential.
 - 2 for version from J2SE 1.4, which includes locale field."
      end

      attribute 2906395 "serialVersionOnStream"
	private explicit_type "int"
	init_value "=  currentSerialVersion"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Describes the version of <code>DecimalFormatSymbols</code> present on the stream.
Possible values are:
<ul>
<li><b>0</b> (or uninitialized): versions prior to JDK 1.1.6.

<li><b>1</b>: Versions written by JDK 1.1.6 or later, which include
     two new fields: <code>monetarySeparator</code> and <code>exponential</code>.
<li><b>2</b>: Versions written by J2SE 1.4 or later, which include a
     new <code>locale</code> field.
</ul>
When streaming out a <code>DecimalFormatSymbols</code>, the most recent format
(corresponding to the highest allowable <code>serialVersionOnStream</code>)
is always written.

@serial
@since JDK 1.1.6
"
      end

      classrelation 1915547 // cachedLocaleData (<unidirectional association>)
	relation 1915547 --->
	  a role_name "cachedLocaleData" init_value "=  new Hashtable(3)" class_relation const_relation private
	    comment "
cache to hold the NumberElements and the Currency
of a Locale.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1915547 // cachedLocaleData (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end
    end

    class 700699 "DecimalFormat"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>DecimalFormat</code> is a concrete subclass of
<code>NumberFormat</code> that formats decimal numbers. It has a variety of
features designed to make it possible to parse and format numbers in any
locale, including support for Western, Arabic, and Indic digits.  It also
supports different kinds of numbers, including integers (123), fixed-point
numbers (123.4), scientific notation (1.23E4), percentages (12%), and
currency amounts ($123).  All of these can be localized.

<p>To obtain a <code>NumberFormat</code> for a specific locale, including the
default locale, call one of <code>NumberFormat</code>'s factory methods, such
as <code>getInstance()</code>.  In general, do not call the
<code>DecimalFormat</code> constructors directly, since the
<code>NumberFormat</code> factory methods may return subclasses other than
<code>DecimalFormat</code>. If you need to customize the format object, do
something like this:

<blockquote><pre>
NumberFormat f = NumberFormat.getInstance(loc);
if (f instanceof DecimalFormat) {
    ((DecimalFormat) f).setDecimalSeparatorAlwaysShown(true);
}
</pre></blockquote>

<p>A <code>DecimalFormat</code> comprises a <em>pattern</em> and a set of
<em>symbols</em>.  The pattern may be set directly using
<code>applyPattern()</code>, or indirectly using the API methods.  The
symbols are stored in a <code>DecimalFormatSymbols</code> object.  When using
the <code>NumberFormat</code> factory methods, the pattern and symbols are
read from localized <code>ResourceBundle</code>s.

<h4>Patterns</h4>

<code>DecimalFormat</code> patterns have the following syntax:
<blockquote><pre>
<i>Pattern:</i>
        <i>PositivePattern</i>
        <i>PositivePattern</i> ; <i>NegativePattern</i>
<i>PositivePattern:</i>
        <i>Prefix<sub>opt</sub></i> <i>Number</i> <i>Suffix<sub>opt</sub></i>
<i>NegativePattern:</i>
        <i>Prefix<sub>opt</sub></i> <i>Number</i> <i>Suffix<sub>opt</sub></i>
<i>Prefix:</i>
        any Unicode characters except &#92;uFFFE, &#92;uFFFF, and special characters
<i>Suffix:</i>
        any Unicode characters except &#92;uFFFE, &#92;uFFFF, and special characters
<i>Number:</i>
        <i>Integer</i> <i>Exponent<sub>opt</sub></i>
        <i>Integer</i> . <i>Fraction</i> <i>Exponent<sub>opt</sub></i>
<i>Integer:</i>
        <i>MinimumInteger</i>
        #
        # <i>Integer</i>
        # , <i>Integer</i>
<i>MinimumInteger:</i>
        0
        0 <i>MinimumInteger</i>
        0 , <i>MinimumInteger</i>
<i>Fraction:</i>
        <i>MinimumFraction<sub>opt</sub></i> <i>OptionalFraction<sub>opt</sub></i>
<i>MinimumFraction:</i>
        0 <i>MinimumFraction<sub>opt</sub></i>
<i>OptionalFraction:</i>
        # <i>OptionalFraction<sub>opt</sub></i>
<i>Exponent:</i>
        E <i>MinimumExponent</i>
<i>MinimumExponent:</i>
        0 <i>MinimumExponent<sub>opt</sub></i>
</pre></blockquote>

<p>A <code>DecimalFormat</code> pattern contains a positive and negative
subpattern, for example, <code>\"#,##0.00;(#,##0.00)\"</code>.  Each
subpattern has a prefix, numeric part, and suffix. The negative subpattern
is optional; if absent, then the positive subpattern prefixed with the
localized minus sign (<code>'-'</code> in most locales) is used as the
negative subpattern. That is, <code>\"0.00\"</code> alone is equivalent to
<code>\"0.00;-0.00\"</code>.  If there is an explicit negative subpattern, it
serves only to specify the negative prefix and suffix; the number of digits,
minimal digits, and other characteristics are all the same as the positive
pattern. That means that <code>\"#,##0.0#;(#)\"</code> produces precisely
the same behavior as <code>\"#,##0.0#;(#,##0.0#)\"</code>.

<p>The prefixes, suffixes, and various symbols used for infinity, digits,
thousands separators, decimal separators, etc. may be set to arbitrary
values, and they will appear properly during formatting.  However, care must
be taken that the symbols and strings do not conflict, or parsing will be
unreliable.  For example, either the positive and negative prefixes or the
suffixes must be distinct for <code>DecimalFormat.parse()</code> to be able
to distinguish positive from negative values.  (If they are identical, then
<code>DecimalFormat</code> will behave as if no negative subpattern was
specified.)  Another example is that the decimal separator and thousands
separator should be distinct characters, or parsing will be impossible.

<p>The grouping separator is commonly used for thousands, but in some
countries it separates ten-thousands. The grouping size is a constant number
of digits between the grouping characters, such as 3 for 100,000,000 or 4 for
1,0000,0000.  If you supply a pattern with multiple grouping characters, the
interval between the last one and the end of the integer is the one that is
used. So <code>\"#,##,###,####\"</code> == <code>\"######,####\"</code> ==
<code>\"##,####,####\"</code>.

<h4>Special Pattern Characters</h4>

<p>Many characters in a pattern are taken literally; they are matched during
parsing and output unchanged during formatting.  Special characters, on the
other hand, stand for other characters, strings, or classes of characters.
They must be quoted, unless noted otherwise, if they are to appear in the
prefix or suffix as literals.

<p>The characters listed here are used in non-localized patterns.  Localized
patterns use the corresponding characters taken from this formatter's
<code>DecimalFormatSymbols</code> object instead, and these characters lose
their special status.  Two exceptions are the currency sign and quote, which
are not localized.

<blockquote>
<table border=0 cellspacing=3 cellpadding=0 summary=\"Chart showing symbol,
 location, localized, and meaning.\">
    <tr bgcolor=\"#ccccff\">
         <th align=left>Symbol
         <th align=left>Location
         <th align=left>Localized?
         <th align=left>Meaning
    <tr valign=top>
         <td><code>0</code>
         <td>Number
         <td>Yes
         <td>Digit
    <tr valign=top bgcolor=\"#eeeeff\">
         <td><code>#</code>
         <td>Number
         <td>Yes
         <td>Digit, zero shows as absent
    <tr valign=top>
         <td><code>.</code>
         <td>Number
         <td>Yes
         <td>Decimal separator or monetary decimal separator
    <tr valign=top bgcolor=\"#eeeeff\">
         <td><code>-</code>
         <td>Number
         <td>Yes
         <td>Minus sign
    <tr valign=top>
         <td><code>,</code>
         <td>Number
         <td>Yes
         <td>Grouping separator
    <tr valign=top bgcolor=\"#eeeeff\">
         <td><code>E</code>
         <td>Number
         <td>Yes
         <td>Separates mantissa and exponent in scientific notation.
             <em>Need not be quoted in prefix or suffix.</em>
    <tr valign=top>
         <td><code>;</code>
         <td>Subpattern boundary
         <td>Yes
         <td>Separates positive and negative subpatterns
    <tr valign=top bgcolor=\"#eeeeff\">
         <td><code>%</code>
         <td>Prefix or suffix
         <td>Yes
         <td>Multiply by 100 and show as percentage
    <tr valign=top>
         <td><code>&#92;u2030</code>
         <td>Prefix or suffix
         <td>Yes
         <td>Multiply by 1000 and show as per mille value
    <tr valign=top bgcolor=\"#eeeeff\">
         <td><code>&#164;</code> (<code>&#92;u00A4</code>)
         <td>Prefix or suffix
         <td>No
         <td>Currency sign, replaced by currency symbol.  If
             doubled, replaced by international currency symbol.
             If present in a pattern, the monetary decimal separator
             is used instead of the decimal separator.
    <tr valign=top>
         <td><code>'</code>
         <td>Prefix or suffix
         <td>No
         <td>Used to quote special characters in a prefix or suffix,
             for example, <code>\"'#'#\"</code> formats 123 to
             <code>\"#123\"</code>.  To create a single quote
             itself, use two in a row: <code>\"# o''clock\"</code>.
</table>
</blockquote>

<h4>Scientific Notation</h4>

<p>Numbers in scientific notation are expressed as the product of a mantissa
and a power of ten, for example, 1234 can be expressed as 1.234 x 10^3.  The
mantissa is often in the range 1.0 <= x < 10.0, but it need not be.
<code>DecimalFormat</code> can be instructed to format and parse scientific
notation <em>only via a pattern</em>; there is currently no factory method
that creates a scientific notation format.  In a pattern, the exponent
character immediately followed by one or more digit characters indicates
scientific notation.  Example: <code>\"0.###E0\"</code> formats the number
1234 as <code>\"1.234E3\"</code>.

<ul>
<li>The number of digit characters after the exponent character gives the
minimum exponent digit count.  There is no maximum.  Negative exponents are
formatted using the localized minus sign, <em>not</em> the prefix and suffix
from the pattern.  This allows patterns such as <code>\"0.###E0 m/s\"</code>.

<li>The minimum and maximum number of integer digits are interpreted
together:

<ul>
<li>If the maximum number of integer digits is greater than their minimum number
and greater than 1, it forces the exponent to be a multiple of the maximum
number of integer digits, and the minimum number of integer digits to be
interpreted as 1.  The most common use of this is to generate
<em>engineering notation</em>, in which the exponent is a multiple of three,
e.g., <code>\"##0.#####E0\"</code>. Using this pattern, the number 12345
formats to <code>\"12.345E3\"</code>, and 123456 formats to
<code>\"123.456E3\"</code>.

<li>Otherwise, the minimum number of integer digits is achieved by adjusting the
exponent.  Example: 0.00123 formatted with <code>\"00.###E0\"</code> yields
<code>\"12.3E-4\"</code>.
</ul>

<li>The number of significant digits in the mantissa is the sum of the
<em>minimum integer</em> and <em>maximum fraction</em> digits, and is
unaffected by the maximum integer digits.  For example, 12345 formatted with
<code>\"##0.##E0\"</code> is <code>\"12.3E3\"</code>. To show all digits, set
the significant digits count to zero.  The number of significant digits
does not affect parsing.

<li>Exponential patterns may not contain grouping separators.
</ul>

<h4>Rounding</h4>

<code>DecimalFormat</code> uses half-even rounding (see
{@link java.math.BigDecimal#ROUND_HALF_EVEN ROUND_HALF_EVEN}) for
formatting.

<h4>Digits</h4>

For formatting, <code>DecimalFormat</code> uses the ten consecutive
characters starting with the localized zero digit defined in the
<code>DecimalFormatSymbols</code> object as digits. For parsing, these
digits as well as all Unicode decimal digits, as defined by
{@link Character#digit Character.digit}, are recognized.

<h4>Special Values</h4>

<p><code>NaN</code> is formatted as a single character, typically
<code>&#92;uFFFD</code>.  This character is determined by the
<code>DecimalFormatSymbols</code> object.  This is the only value for which
the prefixes and suffixes are not used.

<p>Infinity is formatted as a single character, typically
<code>&#92;u221E</code>, with the positive or negative prefixes and suffixes
applied.  The infinity character is determined by the
<code>DecimalFormatSymbols</code> object.

<p>Negative zero (<code>\"-0\"</code>) parses to
<ul>
<li><code>BigDecimal(0)</code> if <code>isParseBigDecimal()</code> is
true,
<li><code>Long(0)</code> if <code>isParseBigDecimal()</code> is false
    and <code>isParseIntegerOnly()</code> is true,
<li><code>Double(-0.0)</code> if both <code>isParseBigDecimal()</code>
and <code>isParseIntegerOnly()</code> are false.
</ul>

<h4><a name=\"synchronization\">Synchronization</a></h4>

<p>
Decimal formats are generally not synchronized.
It is recommended to create separate format instances for each thread.
If multiple threads access a format concurrently, it must be synchronized
externally.

<h4>Example</h4>

<blockquote><pre>
<strong>// Print out a number using the localized number, integer, currency,
// and percent format for each locale</strong>
Locale[] locales = NumberFormat.getAvailableLocales();
double myNumber = -1234.56;
NumberFormat form;
for (int j=0; j<4; ++j) {
    System.out.println(\"FORMAT\");
    for (int i = 0; i < locales.length; ++i) {
        if (locales[i].getCountry().length() == 0) {
           continue; // Skip language-only locales
        }
        System.out.print(locales[i].getDisplayName());
        switch (j) {
        case 0:
            form = NumberFormat.getInstance(locales[i]); break;
        case 1:
            form = NumberFormat.getIntegerInstance(locales[i]); break;
        case 2:
            form = NumberFormat.getCurrencyInstance(locales[i]); break;
        default:
            form = NumberFormat.getPercentInstance(locales[i]); break;
        }
        if (form instanceof DecimalFormat) {
            System.out.print(\": \" + ((DecimalFormat) form).toPattern());
        }
        System.out.print(\" -> \" + form.format(myNumber));
        try {
            System.out.println(\" -> \" + form.parse(form.format(myNumber)));
        } catch (ParseException e) {}
    }
}
</pre></blockquote>

@see          <a href=\"http://java.sun.com/docs/books/tutorial/i18n/format/decimalFormat.html\">Java Tutorial</a>
@see          NumberFormat
@see          DecimalFormatSymbols
@see          ParsePosition
@version      1.79 06/28/04
@author       Mark Davis
@author       Alan Liu"
      classrelation 1913627 // <generalisation>
	relation 1913627 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1913627 // <generalisation>
	  b parent class_ref 985371 // NumberFormat
      end

      operation 7824667 "DecimalFormat"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DecimalFormat using the default pattern and symbols
for the default locale. This is a convenient way to obtain a
DecimalFormat when internationalization is not the main concern.
<p>
To obtain standard formats for a given locale, use the factory methods
on NumberFormat such as getNumberInstance. These factories will
return the most appropriate sub-class of NumberFormat for a given
locale.

@see java.text.NumberFormat#getInstance
@see java.text.NumberFormat#getNumberInstance
@see java.text.NumberFormat#getCurrencyInstance
@see java.text.NumberFormat#getPercentInstance"
      end

      operation 7824795 "DecimalFormat"
	public explicit_return_type ""
	nparams 1
	  param in name "pattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DecimalFormat using the given pattern and the symbols
for the default locale. This is a convenient way to obtain a
DecimalFormat when internationalization is not the main concern.
<p>
To obtain standard formats for a given locale, use the factory methods
on NumberFormat such as getNumberInstance. These factories will
return the most appropriate sub-class of NumberFormat for a given
locale.

@param pattern A non-localized pattern string.
@exception NullPointerException if <code>pattern</code> is null
@exception IllegalArgumentException if the given pattern is invalid.
@see java.text.NumberFormat#getInstance
@see java.text.NumberFormat#getNumberInstance
@see java.text.NumberFormat#getCurrencyInstance
@see java.text.NumberFormat#getPercentInstance"
      end

      operation 7824923 "DecimalFormat"
	public explicit_return_type ""
	nparams 2
	  param in name "pattern" explicit_type "String"
	  param inout name "symbols" type class_ref 700571 // DecimalFormatSymbols
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DecimalFormat using the given pattern and symbols.
Use this constructor when you need to completely customize the
behavior of the format.
<p>
To obtain standard formats for a given
locale, use the factory methods on NumberFormat such as
getInstance or getCurrencyInstance. If you need only minor adjustments
to a standard format, you can modify the format returned by
a NumberFormat factory method.

@param pattern a non-localized pattern string
@param symbols the set of symbols to be used
@exception NullPointerException if any of the given arguments is null
@exception IllegalArgumentException if the given pattern is invalid
@see java.text.NumberFormat#getInstance
@see java.text.NumberFormat#getNumberInstance
@see java.text.NumberFormat#getCurrencyInstance
@see java.text.NumberFormat#getPercentInstance
@see java.text.DecimalFormatSymbols"
      end

      operation 7825051 "format"
	public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param inout name "number" explicit_type "Object"
	  param inout name "toAppendTo" type class_ref 198171 // StringBuffer
	  param inout name "pos" type class_ref 701083 // FieldPosition
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Overrides

Formats a number and appends the resulting text to the given string 
buffer.
The number can be of any subclass of {@link java.lang.Number}.
<p>
This implementation uses the maximum precision permitted.
@param number     the number to format
@param toAppendTo the <code>StringBuffer</code> to which the formatted
                  text is to be appended
@param pos        On input: an alignment field, if desired.
                  On output: the offsets of the alignment field.
@return           the value passed in as <code>toAppendTo</code>
@exception        IllegalArgumentException if <code>number</code> is
                  null or not an instance of <code>Number</code>.
@exception        NullPointerException if <code>toAppendTo</code> or 
                  <code>pos</code> is null
@see              java.text.FieldPosition"
      end

      operation 7825179 "format"
	public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "double"
	  param inout name "result" type class_ref 198171 // StringBuffer
	  param inout name "fieldPosition" type class_ref 701083 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a double to produce a string.
@param number    The double to format
@param result    where the text is to be appended
@param fieldPosition    On input: an alignment field, if desired.
On output: the offsets of the alignment field.
@return The formatted number string
@see java.text.FieldPosition"
      end

      operation 7825307 "format"
	private return_type class_ref 198171 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "double"
	  param inout name "result" type class_ref 198171 // StringBuffer
	  param inout name "delegate" type class_ref 984859 // FieldDelegate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a double to produce a string.
@param number    The double to format
@param result    where the text is to be appended
@param delegate notified of locations of sub fields
@return The formatted number string"
      end

      operation 7825435 "format"
	public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "long"
	  param inout name "result" type class_ref 198171 // StringBuffer
	  param inout name "fieldPosition" type class_ref 701083 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format a long to produce a string.
@param number    The long to format
@param result    where the text is to be appended
@param fieldPosition    On input: an alignment field, if desired.
On output: the offsets of the alignment field.
@return The formatted number string
@see java.text.FieldPosition"
      end

      operation 7825563 "format"
	private return_type class_ref 198171 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "long"
	  param inout name "result" type class_ref 198171 // StringBuffer
	  param inout name "delegate" type class_ref 984859 // FieldDelegate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format a long to produce a string.
@param number    The long to format
@param result    where the text is to be appended
@param delegate notified of locations of sub fields
@return The formatted number string
@see java.text.FieldPosition"
      end

      operation 7825691 "format"
	private return_type class_ref 198171 // StringBuffer
	nparams 3
	  param inout name "number" type class_ref 178459 // BigDecimal
	  param inout name "result" type class_ref 198171 // StringBuffer
	  param inout name "fieldPosition" type class_ref 701083 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a BigDecimal to produce a string.
@param number    The BigDecimal to format
@param result    where the text is to be appended
@param fieldPosition    On input: an alignment field, if desired.
On output: the offsets of the alignment field.
@return The formatted number string
@see java.text.FieldPosition"
      end

      operation 7825819 "format"
	private return_type class_ref 198171 // StringBuffer
	nparams 3
	  param inout name "number" type class_ref 178459 // BigDecimal
	  param inout name "result" type class_ref 198171 // StringBuffer
	  param inout name "delegate" type class_ref 984859 // FieldDelegate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a BigDecimal to produce a string.
@param number    The BigDecimal to format
@param result    where the text is to be appended
@param delegate notified of locations of sub fields
@return The formatted number string"
      end

      operation 7825947 "format"
	private return_type class_ref 198171 // StringBuffer
	nparams 3
	  param inout name "number" type class_ref 775835 // BigInteger
	  param inout name "result" type class_ref 198171 // StringBuffer
	  param inout name "fieldPosition" type class_ref 701083 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format a BigInteger to produce a string.
@param number    The BigInteger to format
@param result    where the text is to be appended
@param fieldPosition    On input: an alignment field, if desired.
On output: the offsets of the alignment field.
@return The formatted number string
@see java.text.FieldPosition"
      end

      operation 7826075 "format"
	private return_type class_ref 198171 // StringBuffer
	nparams 4
	  param inout name "number" type class_ref 775835 // BigInteger
	  param inout name "result" type class_ref 198171 // StringBuffer
	  param inout name "delegate" type class_ref 984859 // FieldDelegate
	  param inout name "formatLong" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format a BigInteger to produce a string.
@param number    The BigInteger to format
@param result    where the text is to be appended
@param delegate notified of locations of sub fields
@return The formatted number string
@see java.text.FieldPosition"
      end

      operation 7826203 "formatToCharacterIterator"
	public return_type class_ref 361115 // AttributedCharacterIterator
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats an Object producing an <code>AttributedCharacterIterator</code>.
You can use the returned <code>AttributedCharacterIterator</code>
to build the resulting String, as well as to determine information
about the resulting String.
<p>
Each attribute key of the AttributedCharacterIterator will be of type
<code>NumberFormat.Field</code>, with the attribute value being the
same as the attribute key.

@exception NullPointerException if obj is null.
@exception IllegalArgumentException when the Format cannot format the
           given object.
@param obj The object to format
@return AttributedCharacterIterator describing the formatted value.
@since 1.4"
      end

      operation 7826331 "subformat"
	private return_type class_ref 198171 // StringBuffer
	nparams 8
	  param inout name "result" type class_ref 198171 // StringBuffer
	  param inout name "delegate" type class_ref 984859 // FieldDelegate
	  param inout name "isNegative" explicit_type "boolean"
	  param inout name "isInteger" explicit_type "boolean"
	  param in name "maxIntDigits" explicit_type "int"
	  param in name "minIntDigits" explicit_type "int"
	  param in name "maxFraDigits" explicit_type "int"
	  param in name "minFraDigits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Complete the formatting of a finite number.  On entry, the digitList must
be filled in with the correct digits."
      end

      operation 7826459 "append"
	private explicit_return_type "void"
	nparams 5
	  param inout name "result" type class_ref 198171 // StringBuffer
	  param in name "string" explicit_type "String"
	  param inout name "delegate" type class_ref 984859 // FieldDelegate
	  param inout name "positions" type class_ref 701083 // FieldPosition
	  param inout name "signAttribute" type class_ref 985115 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the String <code>string</code> to <code>result</code>.
<code>delegate</code> is notified of all  the
<code>FieldPosition</code>s in <code>positions</code>.
<p>
If one of the <code>FieldPosition</code>s in <code>positions</code>
identifies a <code>SIGN</code> attribute, it is mapped to
<code>signAttribute</code>. This is used
to map the <code>SIGN</code> attribute to the <code>EXPONENT</code>
attribute as necessary.
<p>
This is used by <code>subformat</code> to add the prefix/suffix."
      end

      operation 7826587 "parse"
	public return_type class_ref 413979 // Number
	nparams 2
	  param in name "text" explicit_type "String"
	  param inout name "pos" type class_ref 984987 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from a string to produce a <code>Number</code>.
<p>
The method attempts to parse text starting at the index given by
<code>pos</code>.
If parsing succeeds, then the index of <code>pos</code> is updated
to the index after the last character used (parsing does not necessarily
use all characters up to the end of the string), and the parsed
number is returned. The updated <code>pos</code> can be used to
indicate the starting point for the next call to this method.
If an error occurs, then the index of <code>pos</code> is not
changed, the error index of <code>pos</code> is set to the index of
the character where the error occurred, and null is returned.
<p>
The subclass returned depends on the value of {@link #isParseBigDecimal}
as well as on the string being parsed.
<ul>
  <li>If <code>isParseBigDecimal()</code> is false (the default),
      most integer values are returned as <code>Long</code>
      objects, no matter how they are written: <code>\"17\"</code> and
      <code>\"17.000\"</code> both parse to <code>Long(17)</code>.
      Values that cannot fit into a <code>Long</code> are returned as
      <code>Double</code>s. This includes values with a fractional part,
      infinite values, <code>NaN</code>, and the value -0.0.
      <code>DecimalFormat</code> does <em>not</em> decide whether to
      return a <code>Double</code> or a <code>Long</code> based on the
      presence of a decimal separator in the source string. Doing so
      would prevent integers that overflow the mantissa of a double,
      such as <code>\"-9,223,372,036,854,775,808.00\"</code>, from being
      parsed accurately.
      <p>
      Callers may use the <code>Number</code> methods 
      <code>doubleValue</code>, <code>longValue</code>, etc., to obtain
      the type they want.
  <li>If <code>isParseBigDecimal()</code> is true, values are returned
      as <code>BigDecimal</code> objects. The values are the ones
      constructed by {@link java.math.BigDecimal#BigDecimal(String)}
      for corresponding strings in locale-independent format. The
      special cases negative and positive infinity and NaN are returned
      as <code>Double</code> instances holding the values of the
      corresponding <code>Double</code> constants.
</ul>
<p>
<code>DecimalFormat</code> parses all Unicode characters that represent
decimal digits, as defined by <code>Character.digit()</code>. In
addition, <code>DecimalFormat</code> also recognizes as digits the ten
consecutive characters starting with the localized zero digit defined in
the <code>DecimalFormatSymbols</code> object.

@param text the string to be parsed
@param pos  A <code>ParsePosition</code> object with index and error
            index information as described above.
@return     the parsed value, or <code>null</code> if the parse fails
@exception  NullPointerException if <code>text</code> or
            <code>pos</code> is null."
      end

      operation 7826715 "getBigIntegerMultiplier"
	private return_type class_ref 775835 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a BigInteger multiplier."
      end

      classrelation 1913755 // bigIntegerMultiplier (<unidirectional association>)
	relation 1913755 --->
	  a role_name "bigIntegerMultiplier" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1913755 // bigIntegerMultiplier (<unidirectional association>)
	  b parent class_ref 775835 // BigInteger
      end

      operation 7826843 "getBigDecimalMultiplier"
	private return_type class_ref 178459 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a BigDecimal multiplier."
      end

      classrelation 1913883 // bigDecimalMultiplier (<unidirectional association>)
	relation 1913883 --->
	  a role_name "bigDecimalMultiplier" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1913883 // bigDecimalMultiplier (<unidirectional association>)
	  b parent class_ref 178459 // BigDecimal
      end

      attribute 2899227 "STATUS_INFINITE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2899355 "STATUS_POSITIVE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2899483 "STATUS_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7826971 "subparse"
	private explicit_return_type "boolean"
	nparams 7
	  param in name "text" explicit_type "String"
	  param inout name "parsePosition" type class_ref 984987 // ParsePosition
	  param in name "positivePrefix" explicit_type "String"
	  param in name "negativePrefix" explicit_type "String"
	  param inout name "digits" type class_ref 986139 // DigitList
	  param inout name "isExponent" explicit_type "boolean"
	  param inout name "status" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse the given text into a number.  The text is parsed beginning at
parsePosition, until an unparseable character is seen.
@param text The string to parse.
@param parsePosition The position at which to being parsing.  Upon
return, the first unparseable character.
@param digits The DigitList to set to the parsed value.
@param isExponent If true, parse an exponent.  This means no
infinite values and integer only.
@param status Upon return contains boolean status flags indicating
whether the value was infinite and whether it was positive."
      end

      operation 7827099 "getDecimalFormatSymbols"
	public return_type class_ref 700571 // DecimalFormatSymbols
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the decimal format symbols, which is generally not changed
by the programmer or user.
@return desired DecimalFormatSymbols
@see java.text.DecimalFormatSymbols"
      end

      operation 7827227 "setDecimalFormatSymbols"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newSymbols" type class_ref 700571 // DecimalFormatSymbols
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the decimal format symbols, which is generally not changed
by the programmer or user.
@param newSymbols desired DecimalFormatSymbols
@see java.text.DecimalFormatSymbols"
      end

      operation 7827355 "getPositivePrefix"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the positive prefix.
<P>Examples: +123, $123, sFr123"
      end

      operation 7827483 "setPositivePrefix"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the positive prefix.
<P>Examples: +123, $123, sFr123"
      end

      operation 7827611 "getPositivePrefixFieldPositions"
	private return_type class_ref 701083 // FieldPosition
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the FieldPositions of the fields in the prefix used for
positive numbers. This is not used if the user has explicitly set
a positive prefix via <code>setPositivePrefix</code>. This is
lazily created.

@return FieldPositions in positive prefix"
      end

      operation 7827739 "getNegativePrefix"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the negative prefix.
<P>Examples: -123, ($123) (with negative suffix), sFr-123"
      end

      operation 7827867 "setNegativePrefix"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the negative prefix.
<P>Examples: -123, ($123) (with negative suffix), sFr-123"
      end

      operation 7827995 "getNegativePrefixFieldPositions"
	private return_type class_ref 701083 // FieldPosition
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the FieldPositions of the fields in the prefix used for
negative numbers. This is not used if the user has explicitly set
a negative prefix via <code>setNegativePrefix</code>. This is
lazily created.

@return FieldPositions in positive prefix"
      end

      operation 7828123 "getPositiveSuffix"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the positive suffix.
<P>Example: 123%"
      end

      operation 7828251 "setPositiveSuffix"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the positive suffix.
<P>Example: 123%"
      end

      operation 7828379 "getPositiveSuffixFieldPositions"
	private return_type class_ref 701083 // FieldPosition
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the FieldPositions of the fields in the suffix used for
positive numbers. This is not used if the user has explicitly set
a positive suffix via <code>setPositiveSuffix</code>. This is
lazily created.

@return FieldPositions in positive prefix"
      end

      operation 7828507 "getNegativeSuffix"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the negative suffix.
<P>Examples: -123%, ($123) (with positive suffixes)"
      end

      operation 7828635 "setNegativeSuffix"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the negative suffix.
<P>Examples: 123%"
      end

      operation 7828763 "getNegativeSuffixFieldPositions"
	private return_type class_ref 701083 // FieldPosition
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the FieldPositions of the fields in the suffix used for
negative numbers. This is not used if the user has explicitly set
a negative suffix via <code>setNegativeSuffix</code>. This is
lazily created.

@return FieldPositions in positive prefix"
      end

      operation 7828891 "getMultiplier"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the multiplier for use in percent, per mille, and similar
formats.

@see #setMultiplier(int)"
      end

      operation 7829019 "setMultiplier"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the multiplier for use in percent, per mille, and similar
formats.
For a percent format, set the multiplier to 100 and the suffixes to
have '%' (for Arabic, use the Arabic percent sign).
For a per mille format, set the multiplier to 1000 and the suffixes to
have '&#92;u2030'.

<P>Example: with multiplier 100, 1.23 is formatted as \"123\", and
\"123\" is parsed into 1.23.

@see #getMultiplier"
      end

      operation 7829147 "getGroupingSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the grouping size. Grouping size is the number of digits between
grouping separators in the integer portion of a number.  For example,
in the number \"123,456.78\", the grouping size is 3. 
@see #setGroupingSize
@see java.text.NumberFormat#isGroupingUsed
@see java.text.DecimalFormatSymbols#getGroupingSeparator"
      end

      operation 7829275 "setGroupingSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the grouping size. Grouping size is the number of digits between
grouping separators in the integer portion of a number.  For example,
in the number \"123,456.78\", the grouping size is 3.
<br>
The value passed in is converted to a byte, which may lose information.
@see #getGroupingSize
@see java.text.NumberFormat#setGroupingUsed
@see java.text.DecimalFormatSymbols#setGroupingSeparator"
      end

      operation 7829403 "isDecimalSeparatorAlwaysShown"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows you to get the behavior of the decimal separator with integers.
(The decimal separator will always appear with decimals.)
<P>Example: Decimal ON: 12345 -> 12345.; OFF: 12345 -> 12345"
      end

      operation 7829531 "setDecimalSeparatorAlwaysShown"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows you to set the behavior of the decimal separator with integers.
(The decimal separator will always appear with decimals.)
<P>Example: Decimal ON: 12345 -> 12345.; OFF: 12345 -> 12345"
      end

      operation 7829659 "isParseBigDecimal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the {@link #parse(java.lang.String, java.text.ParsePosition)}
method returns <code>BigDecimal</code>. The default value is false.
@see #setParseBigDecimal
@since 1.5"
      end

      operation 7829787 "setParseBigDecimal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the {@link #parse(java.lang.String, java.text.ParsePosition)}
method returns <code>BigDecimal</code>. 
@see #isParseBigDecimal
@since 1.5"
      end

      operation 7829915 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Standard override; no change in semantics."
      end

      operation 7830043 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides equals"
      end

      operation 7830171 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides hashCode"
      end

      operation 7830299 "toPattern"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Synthesizes a pattern string that represents the current state
of this Format object.
@see #applyPattern"
      end

      operation 7830427 "toLocalizedPattern"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Synthesizes a localized pattern string that represents the current
state of this Format object.
@see #applyPattern"
      end

      operation 7830555 "expandAffixes"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Expand the affix pattern strings into the expanded affix strings.  If any
affix pattern string is null, do not expand it.  This method should be
called any time the symbols or the affix patterns change in order to keep
the expanded affix strings up to date."
      end

      operation 7830683 "expandAffix"
	private explicit_return_type "String"
	nparams 2
	  param in name "pattern" explicit_type "String"
	  param inout name "buffer" type class_ref 198171 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Expand an affix pattern into an affix string.  All characters in the
pattern are literal unless prefixed by QUOTE.  The following characters
after QUOTE are recognized: PATTERN_PERCENT, PATTERN_PER_MILLE,
PATTERN_MINUS, and CURRENCY_SIGN.  If CURRENCY_SIGN is doubled (QUOTE +
CURRENCY_SIGN + CURRENCY_SIGN), it is interpreted as an ISO 4217
currency code.  Any other character after a QUOTE represents itself.
QUOTE must be followed by another character; QUOTE may not occur by
itself at the end of the pattern.

@param pattern the non-null, possibly empty pattern
@param buffer a scratch StringBuffer; its contents will be lost
@return the expanded equivalent of pattern"
      end

      operation 7830811 "expandAffix"
	private return_type class_ref 701083 // FieldPosition
	nparams 1
	  param in name "pattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Expand an affix pattern into an array of FieldPositions describing
how the pattern would be expanded.
All characters in the
pattern are literal unless prefixed by QUOTE.  The following characters
after QUOTE are recognized: PATTERN_PERCENT, PATTERN_PER_MILLE,
PATTERN_MINUS, and CURRENCY_SIGN.  If CURRENCY_SIGN is doubled (QUOTE +
CURRENCY_SIGN + CURRENCY_SIGN), it is interpreted as an ISO 4217
currency code.  Any other character after a QUOTE represents itself.
QUOTE must be followed by another character; QUOTE may not occur by
itself at the end of the pattern.

@param pattern the non-null, possibly empty pattern
@return FieldPosition array of the resulting fields."
      end

      operation 7830939 "appendAffix"
	private explicit_return_type "void"
	nparams 4
	  param inout name "buffer" type class_ref 198171 // StringBuffer
	  param in name "affixPattern" explicit_type "String"
	  param in name "expAffix" explicit_type "String"
	  param inout name "localized" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends an affix pattern to the given StringBuffer, quoting special
characters as needed.  Uses the internal affix pattern, if that exists,
or the literal affix, if the internal affix pattern is null.  The
appended string will generate the same affix pattern (or literal affix)
when passed to toPattern().

@param buffer the affix string is appended to this
@param affixPattern a pattern such as posPrefixPattern; may be null
@param expAffix a corresponding expanded affix, such as positivePrefix.
Ignored unless affixPattern is null.  If affixPattern is null, then
expAffix is appended as a literal affix.
@param localized true if the appended pattern should contain localized
pattern characters; otherwise, non-localized pattern chars are appended"
      end

      operation 7831067 "appendAffix"
	private explicit_return_type "void"
	nparams 3
	  param inout name "buffer" type class_ref 198171 // StringBuffer
	  param in name "affix" explicit_type "String"
	  param inout name "localized" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append an affix to the given StringBuffer, using quotes if
there are special characters.  Single quotes themselves must be
escaped in either case."
      end

      operation 7831195 "toPattern"
	private explicit_return_type "String"
	nparams 1
	  param inout name "localized" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does the real work of generating a pattern.  "
      end

      operation 7831323 "applyPattern"
	public explicit_return_type "void"
	nparams 1
	  param in name "pattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Apply the given pattern to this Format object.  A pattern is a
short-hand specification for the various formatting properties.
These properties can also be changed individually through the
various setter methods.
<p>
There is no limit to integer digits are set
by this routine, since that is the typical end-user desire;
use setMaximumInteger if you want to set a real value.
For negative numbers, use a second pattern, separated by a semicolon
<P>Example <code>\"#,#00.0#\"</code> -> 1,234.56
<P>This means a minimum of 2 integer digits, 1 fraction digit, and
a maximum of 2 fraction digits.
<p>Example: <code>\"#,#00.0#;(#,#00.0#)\"</code> for negatives in
parentheses.
<p>In negative patterns, the minimum and maximum counts are ignored;
these are presumed to be set in the positive pattern.

@exception NullPointerException if <code>pattern</code> is null
@exception IllegalArgumentException if the given pattern is invalid."
      end

      operation 7831451 "applyLocalizedPattern"
	public explicit_return_type "void"
	nparams 1
	  param in name "pattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Apply the given pattern to this Format object.  The pattern
is assumed to be in a localized notation. A pattern is a
short-hand specification for the various formatting properties.
These properties can also be changed individually through the
various setter methods.
<p>
There is no limit to integer digits are set
by this routine, since that is the typical end-user desire;
use setMaximumInteger if you want to set a real value.
For negative numbers, use a second pattern, separated by a semicolon
<P>Example <code>\"#,#00.0#\"</code> -> 1,234.56
<P>This means a minimum of 2 integer digits, 1 fraction digit, and
a maximum of 2 fraction digits.
<p>Example: <code>\"#,#00.0#;(#,#00.0#)\"</code> for negatives in
parentheses.
<p>In negative patterns, the minimum and maximum counts are ignored;
these are presumed to be set in the positive pattern.

@exception NullPointerException if <code>pattern</code> is null
@exception IllegalArgumentException if the given pattern is invalid."
      end

      operation 7831579 "applyPattern"
	private explicit_return_type "void"
	nparams 2
	  param in name "pattern" explicit_type "String"
	  param inout name "localized" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does the real work of applying a pattern."
      end

      operation 7831707 "setMaximumIntegerDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of digits allowed in the integer portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of <code>newValue</code> and
309 is used. Negative input values are replaced with 0.
@see NumberFormat#setMaximumIntegerDigits"
      end

      operation 7831835 "setMinimumIntegerDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the minimum number of digits allowed in the integer portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of <code>newValue</code> and
309 is used. Negative input values are replaced with 0.
@see NumberFormat#setMinimumIntegerDigits"
      end

      operation 7831963 "setMaximumFractionDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of digits allowed in the fraction portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of <code>newValue</code> and
340 is used. Negative input values are replaced with 0.
@see NumberFormat#setMaximumFractionDigits"
      end

      operation 7832091 "setMinimumFractionDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the minimum number of digits allowed in the fraction portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of <code>newValue</code> and
340 is used. Negative input values are replaced with 0.
@see NumberFormat#setMinimumFractionDigits"
      end

      operation 7832219 "getMaximumIntegerDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the maximum number of digits allowed in the integer portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of the return value and
309 is used.
@see #setMaximumIntegerDigits"
      end

      operation 7832347 "getMinimumIntegerDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the minimum number of digits allowed in the integer portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of the return value and
309 is used.
@see #setMinimumIntegerDigits"
      end

      operation 7832475 "getMaximumFractionDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the maximum number of digits allowed in the fraction portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of the return value and
340 is used.
@see #setMaximumFractionDigits"
      end

      operation 7832603 "getMinimumFractionDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the minimum number of digits allowed in the fraction portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of the return value and
340 is used.
@see #setMinimumFractionDigits"
      end

      operation 7832731 "getCurrency"
	public return_type class_ref 144795 // Currency
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the currency used by this decimal format when formatting
currency values.
The currency is obtained by calling
{@link DecimalFormatSymbols#getCurrency DecimalFormatSymbols.getCurrency}
on this number format's symbols.

@return the currency used by this decimal format, or <code>null</code>
@since 1.4"
      end

      operation 7832859 "setCurrency"
	public explicit_return_type "void"
	nparams 1
	  param inout name "currency" type class_ref 144795 // Currency
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the currency used by this number format when formatting
currency values. This does not update the minimum or maximum
number of fraction digits used by the number format.
The currency is set by calling
{@link DecimalFormatSymbols#setCurrency DecimalFormatSymbols.setCurrency}
on this number format's symbols.

@param currency the new currency to be used by this decimal format
@exception NullPointerException if <code>currency</code> is null
@since 1.4"
      end

      operation 7832987 "adjustForCurrencyDefaultFractionDigits"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adjusts the minimum and maximum fraction digits to values that
are reasonable for the currency's default fraction digits."
      end

      operation 7833115 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the default serializable fields from the stream and performs
validations and adjustments for older serialized versions. The
validations and adjustments are:
<ol>
<li>
Verify that the superclass's digit count fields correctly reflect
the limits imposed on formatting numbers other than
<code>BigInteger</code> and <code>BigDecimal</code> objects. These
limits are stored in the superclass for serialization compatibility
with older versions, while the limits for <code>BigInteger</code> and
<code>BigDecimal</code> objects are kept in this class.
If, in the superclass, the minimum or maximum integer digit count is
larger than <code>DOUBLE_INTEGER_DIGITS</code> or if the minimum or
maximum fraction digit count is larger than
<code>DOUBLE_FRACTION_DIGITS</code>, then the stream data is invalid
and this method throws an <code>InvalidObjectException</code>.
<li>
If <code>serialVersionOnStream</code> is less than 3, then call
the setters for the minimum and maximum integer and fraction digits with
the values of the corresponding superclass getters to initialize the
fields in this class. The fields in this class are new with version 3.
<li>
If <code>serialVersionOnStream</code> is less than 1, indicating that
the stream was written by JDK 1.1, initialize
<code>useExponentialNotation</code>
to false, since it was not present in JDK 1.1.
<li>
Set <code>serialVersionOnStream</code> to the maximum allowed value so
that default serialization will work properly if this object is streamed
out again.
</ol>

<p>Stream versions older than 2 will not have the affix pattern variables
<code>posPrefixPattern</code> etc.  As a result, they will be initialized
to <code>null</code>, which means the affix strings will be taken as
literal values.  This is exactly what we want, since that corresponds to
the pre-version-2 behavior."
      end

      classrelation 1914011 // digitList (<unidirectional association>)
	relation 1914011 --->
	  a role_name "digitList" init_value "=  new DigitList()" private
	    comment "----------------------------------------------------------------------
 INSTANCE VARIABLES
----------------------------------------------------------------------
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1914011 // digitList (<unidirectional association>)
	  b parent class_ref 986139 // DigitList
      end

      attribute 2899611 "positivePrefix"
	private explicit_type "String"
	init_value "=  \"\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The symbol used as a prefix when formatting positive numbers, e.g. \"+\".

@serial
@see #getPositivePrefix
"
      end

      attribute 2899739 "positiveSuffix"
	private explicit_type "String"
	init_value "=  \"\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The symbol used as a suffix when formatting positive numbers.
This is often an empty string.

@serial
@see #getPositiveSuffix
"
      end

      attribute 2899867 "negativePrefix"
	private explicit_type "String"
	init_value "=  \"-\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The symbol used as a prefix when formatting negative numbers, e.g. \"-\".

@serial
@see #getNegativePrefix
"
      end

      attribute 2899995 "negativeSuffix"
	private explicit_type "String"
	init_value "=  \"\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The symbol used as a suffix when formatting negative numbers.
This is often an empty string.

@serial
@see #getNegativeSuffix
"
      end

      attribute 2900123 "posPrefixPattern"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The prefix pattern for non-negative numbers.  This variable corresponds
to <code>positivePrefix</code>.

<p>This pattern is expanded by the method <code>expandAffix()</code> to
<code>positivePrefix</code> to update the latter to reflect changes in
<code>symbols</code>.  If this variable is <code>null</code> then
<code>positivePrefix</code> is taken as a literal value that does not
change when <code>symbols</code> changes.  This variable is always
<code>null</code> for <code>DecimalFormat</code> objects older than
stream version 2 restored from stream.

@serial
@since 1.3
"
      end

      attribute 2900251 "posSuffixPattern"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The suffix pattern for non-negative numbers.  This variable corresponds
to <code>positiveSuffix</code>.  This variable is analogous to
<code>posPrefixPattern</code>; see that variable for further
documentation.

@serial
@since 1.3
"
      end

      attribute 2900379 "negPrefixPattern"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The prefix pattern for negative numbers.  This variable corresponds
to <code>negativePrefix</code>.  This variable is analogous to
<code>posPrefixPattern</code>; see that variable for further
documentation.

@serial
@since 1.3
"
      end

      attribute 2900507 "negSuffixPattern"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The suffix pattern for negative numbers.  This variable corresponds
to <code>negativeSuffix</code>.  This variable is analogous to
<code>posPrefixPattern</code>; see that variable for further
documentation.

@serial
@since 1.3
"
      end

      attribute 2900635 "multiplier"
	private explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The multiplier for use in percent, per mille, etc.

@serial
@see #getMultiplier
"
      end

      attribute 2900763 "groupingSize"
	private explicit_type "byte"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of digits between grouping separators in the integer
portion of a number.  Must be greater than 0 if
<code>NumberFormat.groupingUsed</code> is true.

@serial
@see #getGroupingSize
@see java.text.NumberFormat#isGroupingUsed

 invariant, > 0 if useThousands"
      end

      attribute 2900891 "decimalSeparatorAlwaysShown"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If true, forces the decimal separator to always appear in a formatted
number, even if the fractional part of the number is zero.

@serial
@see #isDecimalSeparatorAlwaysShown
"
      end

      attribute 2901019 "parseBigDecimal"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If true, parse returns BigDecimal wherever possible.

@serial
@see #isParseBigDecimal
@since 1.5
"
      end

      attribute 2901147 "isCurrencyFormat"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True if this object represents a currency format.  This determines
whether the monetary decimal separator is used instead of the normal one.
"
      end

      classrelation 1914139 // symbols (<unidirectional association>)
	relation 1914139 --->
	  a role_name "symbols" init_value "=  null" private
	    comment "
The <code>DecimalFormatSymbols</code> object used by this format.
It contains the symbols used to format numbers, e.g. the grouping separator,
decimal separator, and so on.

@serial
@see #setDecimalFormatSymbols
@see java.text.DecimalFormatSymbols

 LIU new DecimalFormatSymbols();"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1914139 // symbols (<unidirectional association>)
	  b parent class_ref 700571 // DecimalFormatSymbols
      end

      attribute 2901275 "useExponentialNotation"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True to force the use of exponential (i.e. scientific) notation when formatting
numbers.

@serial
@since 1.2

 Newly persistent in the Java 2 platform"
      end

      classrelation 1914267 // positivePrefixFieldPositions (<unidirectional association>)
	relation 1914267 --->
	  a role_name "positivePrefixFieldPositions" multiplicity "[]" private
	    comment "
FieldPositions describing the positive prefix String. This is
lazily created. Use <code>getPositivePrefixFieldPositions</code>
when needed.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1914267 // positivePrefixFieldPositions (<unidirectional association>)
	  b parent class_ref 701083 // FieldPosition
      end

      classrelation 1914395 // positiveSuffixFieldPositions (<unidirectional association>)
	relation 1914395 --->
	  a role_name "positiveSuffixFieldPositions" multiplicity "[]" private
	    comment "
FieldPositions describing the positive suffix String. This is
lazily created. Use <code>getPositiveSuffixFieldPositions</code>
when needed.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1914395 // positiveSuffixFieldPositions (<unidirectional association>)
	  b parent class_ref 701083 // FieldPosition
      end

      classrelation 1914523 // negativePrefixFieldPositions (<unidirectional association>)
	relation 1914523 --->
	  a role_name "negativePrefixFieldPositions" multiplicity "[]" private
	    comment "
FieldPositions describing the negative prefix String. This is
lazily created. Use <code>getNegativePrefixFieldPositions</code>
when needed.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1914523 // negativePrefixFieldPositions (<unidirectional association>)
	  b parent class_ref 701083 // FieldPosition
      end

      classrelation 1914651 // negativeSuffixFieldPositions (<unidirectional association>)
	relation 1914651 --->
	  a role_name "negativeSuffixFieldPositions" multiplicity "[]" private
	    comment "
FieldPositions describing the negative suffix String. This is
lazily created. Use <code>getNegativeSuffixFieldPositions</code>
when needed.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1914651 // negativeSuffixFieldPositions (<unidirectional association>)
	  b parent class_ref 701083 // FieldPosition
      end

      attribute 2901403 "minExponentDigits"
	private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum number of digits used to display the exponent when a number is
formatted in exponential notation.  This field is ignored if
<code>useExponentialNotation</code> is not true.

@serial
@since 1.2

 Newly persistent in the Java 2 platform"
      end

      attribute 2901531 "maximumIntegerDigits"
	private explicit_type "int"
	init_value "=  super.getMaximumIntegerDigits()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum number of digits allowed in the integer portion of a
<code>BigInteger</code> or <code>BigDecimal</code> number.
<code>maximumIntegerDigits</code> must be greater than or equal to
<code>minimumIntegerDigits</code>.

@serial
@see #getMaximumIntegerDigits
@since 1.5
"
      end

      attribute 2901659 "minimumIntegerDigits"
	private explicit_type "int"
	init_value "=  super.getMinimumIntegerDigits()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum number of digits allowed in the integer portion of a
<code>BigInteger</code> or <code>BigDecimal</code> number.
<code>minimumIntegerDigits</code> must be less than or equal to
<code>maximumIntegerDigits</code>.

@serial
@see #getMinimumIntegerDigits
@since 1.5
"
      end

      attribute 2901787 "maximumFractionDigits"
	private explicit_type "int"
	init_value "=  super.getMaximumFractionDigits()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum number of digits allowed in the fractional portion of a
<code>BigInteger</code> or <code>BigDecimal</code> number.
<code>maximumFractionDigits</code> must be greater than or equal to
<code>minimumFractionDigits</code>.

@serial
@see #getMaximumFractionDigits
@since 1.5
"
      end

      attribute 2901915 "minimumFractionDigits"
	private explicit_type "int"
	init_value "=  super.getMinimumFractionDigits()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum number of digits allowed in the fractional portion of a
<code>BigInteger</code> or <code>BigDecimal</code> number.
<code>minimumFractionDigits</code> must be less than or equal to
<code>maximumFractionDigits</code>.

@serial
@see #getMinimumFractionDigits
@since 1.5
"
      end

      attribute 2902043 "currentSerialVersion"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "----------------------------------------------------------------------"
      end

      attribute 2902171 "serialVersionOnStream"
	private explicit_type "int"
	init_value "=  currentSerialVersion"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The internal serial version which says which version was written.
Possible values are:
<ul>
<li><b>0</b> (default): versions before the Java 2 platform v1.2
<li><b>1</b>: version for 1.2, which includes the two new fields
     <code>useExponentialNotation</code> and
     <code>minExponentDigits</code>.
<li><b>2</b>: version for 1.3 and later, which adds four new fields:
     <code>posPrefixPattern</code>, <code>posSuffixPattern</code>,
     <code>negPrefixPattern</code>, and <code>negSuffixPattern</code>.
<li><b>3</b>: version for 5 and later, which adds five new fields:
     <code>maximumIntegerDigits</code>,
     <code>minimumIntegerDigits</code>,
     <code>maximumFractionDigits</code>,
     <code>minimumFractionDigits</code>, and
     <code>parseBigDecimal</code>.
</ul>
@since 1.2
@serial
"
      end

      attribute 2902299 "PATTERN_ZERO_DIGIT"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  '0'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "----------------------------------------------------------------------
 CONSTANTS
----------------------------------------------------------------------
 Constants for characters used in programmatic (unlocalized) patterns."
      end

      attribute 2902427 "PATTERN_GROUPING_SEPARATOR"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  ','"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2902555 "PATTERN_DECIMAL_SEPARATOR"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  '.'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2902683 "PATTERN_PER_MILLE"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  '\\u2030'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2902811 "PATTERN_PERCENT"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  '%'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2902939 "PATTERN_DIGIT"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  '#'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2903067 "PATTERN_SEPARATOR"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  ';'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2903195 "PATTERN_EXPONENT"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  'E'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2903323 "PATTERN_MINUS"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  '-'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2903451 "CURRENCY_SIGN"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  '\\u00A4'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The CURRENCY_SIGN is the standard Unicode symbol for currency.  It
is used in patterns and substituted with either the currency symbol,
or if it is doubled, with the international currency symbol.  If the
CURRENCY_SIGN is seen in a pattern, then the decimal separator is
replaced with the monetary decimal separator.

The CURRENCY_SIGN is not localized.
"
      end

      attribute 2903579 "QUOTE"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  '\\''"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1914779 // EmptyFieldPositionArray (<unidirectional association>)
	relation 1914779 --->
	  a role_name "EmptyFieldPositionArray" multiplicity "[]" init_value "=  new FieldPosition[0]" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1914779 // EmptyFieldPositionArray (<unidirectional association>)
	  b parent class_ref 701083 // FieldPosition
      end

      attribute 2903707 "DOUBLE_INTEGER_DIGITS"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  309"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Upper limit on integer and fraction digits for a Java double"
      end

      attribute 2903835 "DOUBLE_FRACTION_DIGITS"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  340"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2903963 "MAXIMUM_INTEGER_DIGITS"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  Integer.MAX_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Upper limit on integer and fraction digits for BigDecimal and BigInteger"
      end

      attribute 2904091 "MAXIMUM_FRACTION_DIGITS"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  Integer.MAX_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2904219 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  864413376551465018L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Proclaim JDK 1.1 serial compatibility."
      end

      classrelation 1914907 // cachedLocaleData (<unidirectional association>)
	relation 1914907 --->
	  a role_name "cachedLocaleData" init_value "=  new Hashtable(3)" class_relation private
	    comment "
Cache to hold the NumberPattern of a Locale.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1914907 // cachedLocaleData (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end
    end

    class 701083 "FieldPosition"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>FieldPosition</code> is a simple class used by <code>Format</code>
and its subclasses to identify fields in formatted output. Fields can
be identified in two ways:
<ul>
 <li>By an integer constant, whose names typically end with
     <code>_FIELD</code>. The constants are defined in the various
     subclasses of <code>Format</code>.
 <li>By a <code>Format.Field</code> constant, see <code>ERA_FIELD</code>
     and its friends in <code>DateFormat</code> for an example.
</ul>
<p>
<code>FieldPosition</code> keeps track of the position of the
field within the formatted output with two indices: the index
of the first character of the field and the index of the last
character of the field.

<p>
One version of the <code>format</code> method in the various
<code>Format</code> classes requires a <code>FieldPosition</code>
object as an argument. You use this <code>format</code> method
to perform partial formatting or to get information about the
formatted output (such as the position of a field).

<p>
If you are interested in the positions of all attributes in the
formatted string use the <code>Format</code> method
<code>formatToCharacterIterator</code>.

@version     1.21 12/19/03
@author      Mark Davis
@see         java.text.Format"
      attribute 2910363 "field"
	package explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Input: Desired field to determine start and end offsets for.
The meaning depends on the subclass of Format.
"
      end

      attribute 2910491 "endIndex"
	package explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Output: End offset of field in text.
If the field does not occur in the text, 0 is returned.
"
      end

      attribute 2910619 "beginIndex"
	package explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Output: Start offset of field in text.
If the field does not occur in the text, 0 is returned.
"
      end

      classrelation 1916827 // attribute (<unidirectional association>)
	relation 1916827 --->
	  a role_name "attribute" private
	    comment "
Desired field this FieldPosition is for.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1916827 // attribute (<unidirectional association>)
	  b parent class_ref 985115 // Field
      end

      operation 7847963 "FieldPosition"
	public explicit_return_type ""
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a FieldPosition object for the given field.  Fields are
identified by constants, whose names typically end with _FIELD,
in the various subclasses of Format.

@see java.text.NumberFormat#INTEGER_FIELD
@see java.text.NumberFormat#FRACTION_FIELD
@see java.text.DateFormat#YEAR_FIELD
@see java.text.DateFormat#MONTH_FIELD"
      end

      operation 7848091 "FieldPosition"
	public explicit_return_type ""
	nparams 1
	  param inout name "attribute" type class_ref 985115 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a FieldPosition object for the given field constant. Fields are
identified by constants defined in the various <code>Format</code>
subclasses. This is equivalent to calling
<code>new FieldPosition(attribute, -1)</code>.

@param attribute Format.Field constant identifying a field
@since 1.4"
      end

      operation 7848219 "FieldPosition"
	public explicit_return_type ""
	nparams 2
	  param inout name "attribute" type class_ref 985115 // Field
	  param in name "fieldID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>FieldPosition</code> object for the given field.
The field is identified by an attribute constant from one of the
<code>Field</code> subclasses as well as an integer field ID
defined by the <code>Format</code> subclasses. <code>Format</code>
subclasses that are aware of <code>Field</code> should give precedence
to <code>attribute</code> and ignore <code>fieldID</code> if
<code>attribute</code> is not null. However, older <code>Format</code>
subclasses may not be aware of <code>Field</code> and rely on
<code>fieldID</code>. If the field has no corresponding integer
constant, <code>fieldID</code> should be -1.

@param attribute Format.Field constant identifying a field
@param fieldID integer constantce identifying a field
@since 1.4"
      end

      operation 7848347 "getFieldAttribute"
	public return_type class_ref 985115 // Field
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the field identifier as an attribute constant
from one of the <code>Field</code> subclasses. May return null if
the field is specified only by an integer field ID.

@return Identifier for the field
@since 1.4"
      end

      operation 7848475 "getField"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the field identifier."
      end

      operation 7848603 "getBeginIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the index of the first character in the requested field."
      end

      operation 7848731 "getEndIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the index of the character following the last character in the
requested field."
      end

      operation 7848859 "setBeginIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "bi" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the begin index.  For use by subclasses of Format.
@since 1.2"
      end

      operation 7848987 "setEndIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "ei" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the end index.  For use by subclasses of Format.
@since 1.2"
      end

      operation 7849115 "getFieldDelegate"
	package return_type class_ref 984859 // FieldDelegate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Format.FieldDelegate</code> instance that is associated
with the FieldPosition. When the delegate is notified of the same
field the FieldPosition is associated with, the begin/end will be
adjusted."
      end

      operation 7849243 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides equals"
      end

      operation 7849371 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this FieldPosition.
@return a hash code value for this object"
      end

      operation 7849499 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string representation of this FieldPosition.
@return  a string representation of this object"
      end

      operation 7849627 "matchesField"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "attribute" type class_ref 985115 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the receiver wants a <code>Format.Field</code> value and
<code>attribute</code> is equal to it."
      end

      operation 7849755 "matchesField"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "attribute" type class_ref 985115 // Field
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the receiver wants a <code>Format.Field</code> value and
<code>attribute</code> is equal to it, or true if the receiver
represents an inteter constant and <code>field</code> equals it."
      end

      class 986779 "Delegate"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1916955 // <realization>
	  relation 1916955 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1916955 // <realization>
	    b parent class_ref 984859 // FieldDelegate
	end

	attribute 2910747 "encounteredField"
	  private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Indicates whether the field has been  encountered before. If this
is true, and <code>formatted</code> is invoked, the begin/end
are not updated.
"
	end

	operation 7849883 "formatted"
	  public explicit_return_type "void"
	  nparams 5
	    param inout name "attr" type class_ref 985115 // Field
	    param inout name "value" explicit_type "Object"
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	    param inout name "buffer" type class_ref 198171 // StringBuffer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7850011 "formatted"
	  public explicit_return_type "void"
	  nparams 6
	    param in name "fieldID" explicit_type "int"
	    param inout name "attr" type class_ref 985115 // Field
	    param inout name "value" explicit_type "Object"
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	    param inout name "buffer" type class_ref 198171 // StringBuffer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 809883 "RuleBasedCollator"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>RuleBasedCollator</code> class is a concrete subclass of
<code>Collator</code> that provides a simple, data-driven, table
collator.  With this class you can create a customized table-based
<code>Collator</code>.  <code>RuleBasedCollator</code> maps
characters to sort keys.

<p>
<code>RuleBasedCollator</code> has the following restrictions
for efficiency (other subclasses may be used for more complex languages) :
<ol>
<li>If a special collation rule controlled by a &lt;modifier&gt; is
specified it applies to the whole collator object.
<li>All non-mentioned characters are at the end of the
    collation order.
</ol>

<p>
The collation table is composed of a list of collation rules, where each
rule is of one of three forms:
<pre>
   &lt;modifier&gt;
   &lt;relation&gt; &lt;text-argument&gt;
   &lt;reset&gt; &lt;text-argument&gt;
</pre>
The definitions of the rule elements is as follows:
<UL Type=disc>
   <LI><strong>Text-Argument</strong>: A text-argument is any sequence of
       characters, excluding special characters (that is, common
       whitespace characters [0009-000D, 0020] and rule syntax characters
       [0021-002F, 003A-0040, 005B-0060, 007B-007E]). If those
       characters are desired, you can put them in single quotes
       (e.g. ampersand => '&'). Note that unquoted white space characters
       are ignored; e.g. <code>b c</code> is treated as <code>bc</code>.
   <LI><strong>Modifier</strong>: There are currently two modifiers that 
       turn on special collation rules.
       <UL Type=square>
           <LI>'@' : Turns on backwards sorting of accents (secondary
                     differences), as in French.
           <LI>'!' : Turns on Thai/Lao vowel-consonant swapping.  If this
                     rule is in force when a Thai vowel of the range
                     &#92;U0E40-&#92;U0E44 precedes a Thai consonant of the range
                     &#92;U0E01-&#92;U0E2E OR a Lao vowel of the range &#92;U0EC0-&#92;U0EC4
                     precedes a Lao consonant of the range &#92;U0E81-&#92;U0EAE then
                     the vowel is placed after the consonant for collation
                     purposes.
       </UL>
       <p>'@' : Indicates that accents are sorted backwards, as in French.
   <LI><strong>Relation</strong>: The relations are the following:
       <UL Type=square>
           <LI>'&lt;' : Greater, as a letter difference (primary)
           <LI>';' : Greater, as an accent difference (secondary)
           <LI>',' : Greater, as a case difference (tertiary)
           <LI>'=' : Equal
       </UL>
   <LI><strong>Reset</strong>: There is a single reset
       which is used primarily for contractions and expansions, but which
       can also be used to add a modification at the end of a set of rules.
       <p>'&' : Indicates that the next rule follows the position to where
           the reset text-argument would be sorted.
</UL>

<p>
This sounds more complicated than it is in practice. For example, the
following are equivalent ways of expressing the same thing:
<blockquote>
<pre>
a &lt; b &lt; c
a &lt; b &amp; b &lt; c
a &lt; c &amp; a &lt; b
</pre>
</blockquote>
Notice that the order is important, as the subsequent item goes immediately
after the text-argument. The following are not equivalent:
<blockquote>
<pre>
a &lt; b &amp; a &lt; c
a &lt; c &amp; a &lt; b
</pre>
</blockquote>
Either the text-argument must already be present in the sequence, or some
initial substring of the text-argument must be present. (e.g. \"a &lt; b &amp; ae &lt; 
e\" is valid since \"a\" is present in the sequence before \"ae\" is reset). In
this latter case, \"ae\" is not entered and treated as a single character;
instead, \"e\" is sorted as if it were expanded to two characters: \"a\"
followed by an \"e\". This difference appears in natural languages: in
traditional Spanish \"ch\" is treated as though it contracts to a single
character (expressed as \"c &lt; ch &lt; d\"), while in traditional German
a-umlaut is treated as though it expanded to two characters
(expressed as \"a,A &lt; b,B ... &amp;ae;&#92;u00e3&amp;AE;&#92;u00c3\").
[&#92;u00e3 and &#92;u00c3 are, of course, the escape sequences for a-umlaut.]
<p>
<strong>Ignorable Characters</strong>
<p>
For ignorable characters, the first rule must start with a relation (the
examples we have used above are really fragments; \"a &lt; b\" really should be
\"&lt; a &lt; b\"). If, however, the first relation is not \"&lt;\", then all the all
text-arguments up to the first \"&lt;\" are ignorable. For example, \", - &lt; a &lt; b\"
makes \"-\" an ignorable character, as we saw earlier in the word
\"black-birds\". In the samples for different languages, you see that most
accents are ignorable.

<p><strong>Normalization and Accents</strong>
<p>
<code>RuleBasedCollator</code> automatically processes its rule table to
include both pre-composed and combining-character versions of
accented characters.  Even if the provided rule string contains only
base characters and separate combining accent characters, the pre-composed
accented characters matching all canonical combinations of characters from
the rule string will be entered in the table.
<p>
This allows you to use a RuleBasedCollator to compare accented strings
even when the collator is set to NO_DECOMPOSITION.  There are two caveats,
however.  First, if the strings to be collated contain combining
sequences that may not be in canonical order, you should set the collator to
CANONICAL_DECOMPOSITION or FULL_DECOMPOSITION to enable sorting of
combining sequences.  Second, if the strings contain characters with
compatibility decompositions (such as full-width and half-width forms),
you must use FULL_DECOMPOSITION, since the rule tables only include
canonical mappings.

<p><strong>Errors</strong>
<p>
The following are errors:
<UL Type=disc>
    <LI>A text-argument contains unquoted punctuation symbols
       (e.g. \"a &lt; b-c &lt; d\").
    <LI>A relation or reset character not followed by a text-argument
       (e.g. \"a &lt; ,b\").
    <LI>A reset where the text-argument (or an initial substring of the
        text-argument) is not already in the sequence.
        (e.g. \"a &lt; b &amp; e &lt; f\")
</UL>
If you produce one of these errors, a <code>RuleBasedCollator</code> throws
a <code>ParseException</code>.

<p><strong>Examples</strong>
<p>Simple:     \"&lt; a &lt; b &lt; c &lt; d\"
<p>Norwegian:  \"&lt; a,A&lt; b,B&lt; c,C&lt; d,D&lt; e,E&lt; f,F&lt; g,G&lt; h,H&lt; i,I&lt; j,J
                &lt; k,K&lt; l,L&lt; m,M&lt; n,N&lt; o,O&lt; p,P&lt; q,Q&lt; r,R&lt; s,S&lt; t,T
                &lt; u,U&lt; v,V&lt; w,W&lt; x,X&lt; y,Y&lt; z,Z
                &lt; &#92;u00E5=a&#92;u030A,&#92;u00C5=A&#92;u030A
                ;aa,AA&lt; &#92;u00E6,&#92;u00C6&lt; &#92;u00F8,&#92;u00D8\"

<p>
Normally, to create a rule-based Collator object, you will use
<code>Collator</code>'s factory method <code>getInstance</code>.
However, to create a rule-based Collator object with specialized
rules tailored to your needs, you construct the <code>RuleBasedCollator</code>
with the rules contained in a <code>String</code> object. For example:
<blockquote>
<pre>
String Simple = \"&lt; a&lt; b&lt; c&lt; d\";
RuleBasedCollator mySimple = new RuleBasedCollator(Simple);
</pre>
</blockquote>
Or:
<blockquote>
<pre>
String Norwegian = \"&lt; a,A&lt; b,B&lt; c,C&lt; d,D&lt; e,E&lt; f,F&lt; g,G&lt; h,H&lt; i,I&lt; j,J\" +
                \"&lt; k,K&lt; l,L&lt; m,M&lt; n,N&lt; o,O&lt; p,P&lt; q,Q&lt; r,R&lt; s,S&lt; t,T\" +
                \"&lt; u,U&lt; v,V&lt; w,W&lt; x,X&lt; y,Y&lt; z,Z\" +
                \"&lt; &#92;u00E5=a&#92;u030A,&#92;u00C5=A&#92;u030A\" +
                \";aa,AA&lt; &#92;u00E6,&#92;u00C6&lt; &#92;u00F8,&#92;u00D8\";
RuleBasedCollator myNorwegian = new RuleBasedCollator(Norwegian);
</pre>
</blockquote>

<p>
Combining <code>Collator</code>s is as simple as concatenating strings.
Here's an example that combines two <code>Collator</code>s from two
different locales:
<blockquote>
<pre>
// Create an en_US Collator object
RuleBasedCollator en_USCollator = (RuleBasedCollator)
    Collator.getInstance(new Locale(\"en\", \"US\", \"\"));
// Create a da_DK Collator object
RuleBasedCollator da_DKCollator = (RuleBasedCollator)
    Collator.getInstance(new Locale(\"da\", \"DK\", \"\"));
// Combine the two
// First, get the collation rules from en_USCollator
String en_USRules = en_USCollator.getRules();
// Second, get the collation rules from da_DKCollator
String da_DKRules = da_DKCollator.getRules();
RuleBasedCollator newCollator =
    new RuleBasedCollator(en_USRules + da_DKRules);
// newCollator has the combined rules
</pre>
</blockquote>

<p>
Another more interesting example would be to make changes on an existing
table to create a new <code>Collator</code> object.  For example, add
\"&amp;C&lt; ch, cH, Ch, CH\" to the <code>en_USCollator</code> object to create
your own:
<blockquote>
<pre>
// Create a new Collator object with additional rules
String addRules = \"&amp;C&lt; ch, cH, Ch, CH\";
RuleBasedCollator myCollator =
    new RuleBasedCollator(en_USCollator + addRules);
// myCollator contains the new rules
</pre>
</blockquote>

<p>
The following example demonstrates how to change the order of
non-spacing accents,
<blockquote>
<pre>
// old rule
String oldRules = \"=&#92;u0301;&#92;u0300;&#92;u0302;&#92;u0308\"    // main accents
                + \";&#92;u0327;&#92;u0303;&#92;u0304;&#92;u0305\"    // main accents
                + \";&#92;u0306;&#92;u0307;&#92;u0309;&#92;u030A\"    // main accents
                + \";&#92;u030B;&#92;u030C;&#92;u030D;&#92;u030E\"    // main accents
                + \";&#92;u030F;&#92;u0310;&#92;u0311;&#92;u0312\"    // main accents
                + \"&lt; a , A ; ae, AE ; &#92;u00e6 , &#92;u00c6\"
                + \"&lt; b , B &lt; c, C &lt; e, E & C &lt; d, D\";
// change the order of accent characters
String addOn = \"& &#92;u0300 ; &#92;u0308 ; &#92;u0302\";
RuleBasedCollator myCollator = new RuleBasedCollator(oldRules + addOn);
</pre>
</blockquote>

<p>
The last example shows how to put new primary ordering in before the
default setting. For example, in Japanese <code>Collator</code>, you
can either sort English characters before or after Japanese characters,
<blockquote>
<pre>
// get en_US Collator rules
RuleBasedCollator en_USCollator = (RuleBasedCollator)Collator.getInstance(Locale.US);
// add a few Japanese character to sort before English characters
// suppose the last character before the first base letter 'a' in
// the English collation rule is &#92;u2212
String jaString = \"& &#92;u2212 &lt; &#92;u3041, &#92;u3042 &lt; &#92;u3043, &#92;u3044\";
RuleBasedCollator myJapaneseCollator = new
    RuleBasedCollator(en_USCollator.getRules() + jaString);
</pre>
</blockquote>

@see        Collator
@see        CollationElementIterator
@version    1.25 07/24/98
@author     Helena Shih, Laura Werner, Richard Gillam"
      classrelation 1919259 // <generalisation>
	relation 1919259 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1919259 // <generalisation>
	  b parent class_ref 653339 // Collator
      end

      operation 7862171 "RuleBasedCollator"
	public explicit_return_type ""
	nparams 1
	  param in name "rules" explicit_type "String"
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " IMPLEMENTATION NOTES:  The implementation of the collation algorithm is
 divided across three classes: RuleBasedCollator, RBCollationTables, and
 CollationElementIterator.  RuleBasedCollator contains the collator's
 transient state and includes the code that uses the other classes to
 implement comparison and sort-key building.  RuleBasedCollator also
 contains the logic to handle French secondary accent sorting.
 A RuleBasedCollator has two CollationElementIterators.  State doesn't
 need to be preserved in these objects between calls to compare() or
 getCollationKey(), but the objects persist anyway to avoid wasting extra
 creation time.  compare() and getCollationKey() are synchronized to ensure
 thread safety with this scheme.  The CollationElementIterator is responsible
 for generating collation elements from strings and returning one element at
 a time (sometimes there's a one-to-many or many-to-one mapping between
 characters and collation elements-- this class handles that).
 CollationElementIterator depends on RBCollationTables, which contains the
 collator's static state.  RBCollationTables contains the actual data
 tables specifying the collation order of characters for a particular locale
 or use.  It also contains the base logic that CollationElementIterator
 uses to map from characters to collation elements.  A single RBCollationTables
 object is shared among all RuleBasedCollators for the same locale, and
 thus by all the CollationElementIterators they create.

RuleBasedCollator constructor.  This takes the table rules and builds
a collation table out of them.  Please see RuleBasedCollator class
description for more details on the collation rule syntax.
@see java.util.Locale
@param rules the collation rules to build the collation table from.
@exception ParseException A format exception
will be thrown if the build process of the rules fails. For
example, build rule \"a < ? < d\" will cause the constructor to
throw the ParseException because the '?' is not quoted."
      end

      operation 7862299 "RuleBasedCollator"
	package explicit_return_type ""
	nparams 2
	  param in name "rules" explicit_type "String"
	  param in name "decomp" explicit_type "int"
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "RuleBasedCollator constructor.  This takes the table rules and builds
a collation table out of them.  Please see RuleBasedCollator class
description for more details on the collation rule syntax.
@see java.util.Locale
@param rules the collation rules to build the collation table from.
@param decomp the decomposition strength used to build the
collation table and to perform comparisons.
@exception ParseException A format exception
will be thrown if the build process of the rules fails. For
example, build rule \"a < ? < d\" will cause the constructor to
throw the ParseException because the '?' is not quoted."
      end

      operation 7862427 "RuleBasedCollator"
	private explicit_return_type ""
	nparams 1
	  param inout name "that" type class_ref 809883 // RuleBasedCollator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "\"Copy constructor.\"  Used in clone() for performance."
      end

      operation 7862555 "getRules"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the table-based rules for the collation object.
@return returns the collation rules that the table collation object
was created from."
      end

      operation 7862683 "getCollationElementIterator"
	public return_type class_ref 985499 // CollationElementIterator
	nparams 1
	  param in name "source" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a CollationElementIterator for the given String.
@see java.text.CollationElementIterator"
      end

      operation 7862811 "getCollationElementIterator"
	public return_type class_ref 985499 // CollationElementIterator
	nparams 1
	  param inout name "source" type class_ref 447003 // CharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a CollationElementIterator for the given String.
@see java.text.CollationElementIterator
@since 1.2"
      end

      operation 7862939 "compare"
	public explicit_return_type "int"
	nparams 2
	  param in name "source" explicit_type "String"
	  param in name "target" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the character data stored in two different strings based on the
collation rules.  Returns information about whether a string is less
than, greater than or equal to another string in a language.
This can be overriden in a subclass."
      end

      operation 7863067 "getCollationKey"
	public return_type class_ref 985755 // CollationKey
	nparams 1
	  param in name "source" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms the string into a series of characters that can be compared
with CollationKey.compareTo. This overrides java.text.Collator.getCollationKey.
It can be overriden in a subclass."
      end

      operation 7863195 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Standard override; no change in semantics."
      end

      operation 7863323 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the equality of two collation objects.
@param obj the table-based collation object to be compared with this.
@return true if the current table-based collation object is the same
as the table-based collation object obj; false otherwise."
      end

      operation 7863451 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the hash code for the table-based collation object"
      end

      operation 7863579 "getTables"
	package return_type class_ref 985627 // RBCollationTables
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows CollationElementIterator access to the tables object"
      end

      attribute 2917275 "CHARINDEX"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0x70000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ==============================================================
 private
 ==============================================================
 need look up in .commit()"
      end

      attribute 2917403 "EXPANDCHARINDEX"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0x7E000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Expand index follows"
      end

      attribute 2917531 "CONTRACTCHARINDEX"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0x7F000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " contract indexes follow"
      end

      attribute 2917659 "UNMAPPED"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0xFFFFFFFF"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2917787 "COLLATIONKEYOFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1919387 // tables (<unidirectional association>)
	relation 1919387 --->
	  a role_name "tables" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1919387 // tables (<unidirectional association>)
	  b parent class_ref 985627 // RBCollationTables
      end

      classrelation 1919515 // primResult (<unidirectional association>)
	relation 1919515 --->
	  a role_name "primResult" init_value "=  null" private
	    comment " Internal objects that are cached across calls so that they don't have to
 be created/destroyed on every call to compare() and getCollationKey()
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1919515 // primResult (<unidirectional association>)
	  b parent class_ref 198171 // StringBuffer
      end

      classrelation 1919643 // secResult (<unidirectional association>)
	relation 1919643 --->
	  a role_name "secResult" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1919643 // secResult (<unidirectional association>)
	  b parent class_ref 198171 // StringBuffer
      end

      classrelation 1919771 // terResult (<unidirectional association>)
	relation 1919771 --->
	  a role_name "terResult" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1919771 // terResult (<unidirectional association>)
	  b parent class_ref 198171 // StringBuffer
      end

      classrelation 1919899 // sourceCursor (<unidirectional association>)
	relation 1919899 --->
	  a role_name "sourceCursor" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1919899 // sourceCursor (<unidirectional association>)
	  b parent class_ref 985499 // CollationElementIterator
      end

      classrelation 1920027 // targetCursor (<unidirectional association>)
	relation 1920027 --->
	  a role_name "targetCursor" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1920027 // targetCursor (<unidirectional association>)
	  b parent class_ref 985499 // CollationElementIterator
      end
    end

    class 866459 "BreakIterator"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>BreakIterator</code> class implements methods for finding
the location of boundaries in text. Instances of <code>BreakIterator</code>
maintain a current position and scan over text
returning the index of characters where boundaries occur.
Internally, <code>BreakIterator</code> scans text using a
<code>CharacterIterator</code>, and is thus able to scan text held
by any object implementing that protocol. A <code>StringCharacterIterator</code>
is used to scan <code>String</code> objects passed to <code>setText</code>.

<p>
You use the factory methods provided by this class to create
instances of various types of break iterators. In particular,
use <code>getWordIterator</code>, <code>getLineIterator</code>,
<code>getSentenceIterator</code>, and <code>getCharacterIterator</code>
to create <code>BreakIterator</code>s that perform
word, line, sentence, and character boundary analysis respectively.
A single <code>BreakIterator</code> can work only on one unit
(word, line, sentence, and so on). You must use a different iterator
for each unit boundary analysis you wish to perform.

<p>
Line boundary analysis determines where a text string can be
broken when line-wrapping. The mechanism correctly handles
punctuation and hyphenated words.

<p>
Sentence boundary analysis allows selection with correct interpretation
of periods within numbers and abbreviations, and trailing punctuation
marks such as quotation marks and parentheses.

<p>
Word boundary analysis is used by search and replace functions, as
well as within text editing applications that allow the user to
select words with a double click. Word selection provides correct
interpretation of punctuation marks within and following
words. Characters that are not part of a word, such as symbols
or punctuation marks, have word-breaks on both sides.

<p>
Character boundary analysis allows users to interact with characters
as they expect to, for example, when moving the cursor through a text
string. Character boundary analysis provides correct navigation of
through character strings, regardless of how the character is stored.
For example, an accented character might be stored as a base character
and a diacritical mark. What users consider to be a character can
differ between languages.

<p>
<code>BreakIterator</code> is intended for use with natural
languages only. Do not use this class to tokenize a programming language.

<P>
<strong>Examples</strong>:<P>
Creating and using text boundaries
<blockquote>
<pre>
public static void main(String args[]) {
     if (args.length == 1) {
         String stringToExamine = args[0];
         //print each word in order
         BreakIterator boundary = BreakIterator.getWordInstance();
         boundary.setText(stringToExamine);
         printEachForward(boundary, stringToExamine);
         //print each sentence in reverse order
         boundary = BreakIterator.getSentenceInstance(Locale.US);
         boundary.setText(stringToExamine);
         printEachBackward(boundary, stringToExamine);
         printFirst(boundary, stringToExamine);
         printLast(boundary, stringToExamine);
     }
}
</pre>
</blockquote>

Print each element in order
<blockquote>
<pre>
public static void printEachForward(BreakIterator boundary, String source) {
    int start = boundary.first();
    for (int end = boundary.next();
         end != BreakIterator.DONE;
         start = end, end = boundary.next()) {
         System.out.println(source.substring(start,end));
    }
}
</pre>
</blockquote>

Print each element in reverse order
<blockquote>
<pre>
public static void printEachBackward(BreakIterator boundary, String source) {
    int end = boundary.last();
    for (int start = boundary.previous();
         start != BreakIterator.DONE;
         end = start, start = boundary.previous()) {
        System.out.println(source.substring(start,end));
    }
}
</pre>
</blockquote>

Print first element
<blockquote>
<pre>
public static void printFirst(BreakIterator boundary, String source) {
    int start = boundary.first();
    int end = boundary.next();
    System.out.println(source.substring(start,end));
}
</pre>
</blockquote>

Print last element
<blockquote>
<pre>
public static void printLast(BreakIterator boundary, String source) {
    int end = boundary.last();
    int start = boundary.previous();
    System.out.println(source.substring(start,end));
}
</pre>
</blockquote>

Print the element at a specified position
<blockquote>
<pre>
public static void printAt(BreakIterator boundary, int pos, String source) {
    int end = boundary.following(pos);
    int start = boundary.previous();
    System.out.println(source.substring(start,end));
}
</pre>
</blockquote>

Find the next word
<blockquote>
<pre>
public static int nextWordStartAfter(int pos, String text) {
    BreakIterator wb = BreakIterator.getWordInstance();
    wb.setText(text);
    int last = wb.following(pos);
    int current = wb.next();
    while (current != BreakIterator.DONE) {
        for (int p = last; p < current; p++) {
            if (Character.isLetter(text.codePointAt(p))
                return last;
        }
        last = current;
        current = wb.next();
    }
    return BreakIterator.DONE;
}
</pre>
(The iterator returned by BreakIterator.getWordInstance() is unique in that
the break positions it returns don't represent both the start and end of the
thing being iterated over.  That is, a sentence-break iterator returns breaks
that each represent the end of one sentence and the beginning of the next.
With the word-break iterator, the characters between two boundaries might be a
word, or they might be the punctuation or whitespace between two words.  The
above code uses a simple heuristic to determine which boundary is the beginning
of a word: If the characters between this boundary and the next boundary
include at least one letter (this can be an alphabetical letter, a CJK ideograph,
a Hangul syllable, a Kana character, etc.), then the text between this boundary
and the next is a word; otherwise, it's the material between words.)
</blockquote>

@see CharacterIterator
"
      classrelation 1910427 // <realization>
	relation 1910427 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1910427 // <realization>
	  b parent class_ref 339867 // Cloneable
      end

      operation 7797787 "BreakIterator"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor. BreakIterator is stateless and has no default behavior."
      end

      operation 7797915 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a copy of this iterator
@return A copy of this"
      end

      attribute 2887579 "DONE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "DONE is returned by previous() and next() after all valid
boundaries have been returned.
"
      end

      operation 7798043 "first"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the first boundary. The iterator's current position is set
to the first boundary.
@return The character index of the first text boundary."
      end

      operation 7798171 "last"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the last boundary. The iterator's current position is set
to the last boundary.
@return The character index of the last text boundary."
      end

      operation 7798299 "next"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the nth boundary from the current boundary
@param n which boundary to return.  A value of 0
does nothing.  Negative values move to previous boundaries
and positive values move to later boundaries.
@return The index of the nth boundary from the current position."
      end

      operation 7798427 "next"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the boundary following the current boundary.
@return The character index of the next text boundary or DONE if all
boundaries have been returned.  Equivalent to next(1)."
      end

      operation 7798555 "previous"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the boundary preceding the current boundary.
@return The character index of the previous text boundary or DONE if all
boundaries have been returned."
      end

      operation 7798683 "following"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the first boundary following the specified offset.
The value returned is always greater than the offset or
the value BreakIterator.DONE
@param offset the offset to begin scanning. Valid values
are determined by the CharacterIterator passed to
setText().  Invalid values cause
an IllegalArgumentException to be thrown.
@return The first boundary after the specified offset."
      end

      operation 7798811 "preceding"
	public explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the last boundary preceding the specfied offset.
The value returned is always less than the offset or the value
BreakIterator.DONE.
@param offset the offset to begin scanning.  Valid values are
determined by the CharacterIterator passed to setText().
Invalid values cause an IllegalArgumentException to be thrown.
@return The last boundary before the specified offset.
@since 1.2"
      end

      operation 7798939 "isBoundary"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the specified position is a boundary position.
@param offset the offset to check.
@return True if \"offset\" is a boundary position.
@since 1.2"
      end

      operation 7799067 "current"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return character index of the text boundary that was most recently
returned by next(), previous(), first(), or last()
@return The boundary most recently returned."
      end

      operation 7799195 "getText"
	abstract public return_type class_ref 447003 // CharacterIterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the text being scanned
@return the text being scanned"
      end

      operation 7799323 "setText"
	public explicit_return_type "void"
	nparams 1
	  param in name "newText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a new text string to be scanned.  The current scan
position is reset to first().
@param newText new text to scan."
      end

      operation 7799451 "setText"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "newText" type class_ref 447003 // CharacterIterator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a new text for scanning.  The current scan
position is reset to first().
@param newText new text to scan."
      end

      attribute 2887707 "CHARACTER_INDEX"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2887835 "WORD_INDEX"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2887963 "LINE_INDEX"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2888091 "SENTENCE_INDEX"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1910555 // iterCache (<unidirectional association>)
	relation 1910555 --->
	  a role_name "iterCache" multiplicity "[]" init_value "=  new SoftReference[4]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1910555 // iterCache (<unidirectional association>)
	  b parent class_ref 857499 // SoftReference
      end

      operation 7799579 "getWordInstance"
	class_operation public return_type class_ref 866459 // BreakIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create BreakIterator for word-breaks using default locale.
Returns an instance of a BreakIterator implementing word breaks.
WordBreak  is usefull for word selection (ex. double click)
@return A BreakIterator for word-breaks
@see java.util.Locale#getDefault"
      end

      operation 7799707 "getWordInstance"
	class_operation public return_type class_ref 866459 // BreakIterator
	nparams 1
	  param inout name "where" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create BreakIterator for word-breaks using specified locale.
Returns an instance of a BreakIterator implementing word breaks.
WordBreak is usefull for word selection (ex. double click)
@param where the local.  If a specific WordBreak is not
avaliable for the specified locale, a default WordBreak is returned.
@return A BreakIterator for word-breaks"
      end

      operation 7799835 "getLineInstance"
	class_operation public return_type class_ref 866459 // BreakIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create BreakIterator for line-breaks using default locale.
Returns an instance of a BreakIterator implementing line breaks. Line
breaks are logically possible line breaks, actual line breaks are
usually determined based on display width.
LineBreak is useful for word wrapping text.
@return A BreakIterator for line-breaks
@see java.util.Locale#getDefault"
      end

      operation 7799963 "getLineInstance"
	class_operation public return_type class_ref 866459 // BreakIterator
	nparams 1
	  param inout name "where" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create BreakIterator for line-breaks using specified locale.
Returns an instance of a BreakIterator implementing line breaks. Line
breaks are logically possible line breaks, actual line breaks are
usually determined based on display width.
LineBreak is useful for word wrapping text.
@param where the local.  If a specific LineBreak is not
avaliable for the specified locale, a default LineBreak is returned.
@return A BreakIterator for line-breaks"
      end

      operation 7800091 "getCharacterInstance"
	class_operation public return_type class_ref 866459 // BreakIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create BreakIterator for character-breaks using default locale
Returns an instance of a BreakIterator implementing character breaks.
Character breaks are boundaries of combining character sequences.
@return A BreakIterator for character-breaks
@see Locale#getDefault"
      end

      operation 7800219 "getCharacterInstance"
	class_operation public return_type class_ref 866459 // BreakIterator
	nparams 1
	  param inout name "where" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create BreakIterator for character-breaks using specified locale
Returns an instance of a BreakIterator implementing character breaks.
Character breaks are boundaries of combining character sequences.
@param where the local.  If a specific character break is not
avaliable for the specified local, a default character break is returned.
@return A BreakIterator for character-breaks"
      end

      operation 7800347 "getSentenceInstance"
	class_operation public return_type class_ref 866459 // BreakIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create BreakIterator for sentence-breaks using default locale
Returns an instance of a BreakIterator implementing sentence breaks.
@return A BreakIterator for sentence-breaks
@see java.util.Locale#getDefault"
      end

      operation 7800475 "getSentenceInstance"
	class_operation public return_type class_ref 866459 // BreakIterator
	nparams 1
	  param inout name "where" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create BreakIterator for sentence-breaks using specified locale
Returns an instance of a BreakIterator implementing sentence breaks.
@param where the local.  If a specific SentenceBreak is not
avaliable for the specified local, a default SentenceBreak is returned.
@return A BreakIterator for sentence-breaks"
      end

      operation 7800603 "getBreakInstance"
	class_operation private return_type class_ref 866459 // BreakIterator
	nparams 4
	  param inout name "where" type class_ref 138907 // Locale
	  param in name "type" explicit_type "int"
	  param in name "dataName" explicit_type "String"
	  param in name "dictionaryName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7800731 "getBundle"
	class_operation private return_type class_ref 153371 // ResourceBundle
	nparams 2
	  param in name "baseName" explicit_type "String"
	  param in name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7800859 "createBreakInstance"
	class_operation private return_type class_ref 866459 // BreakIterator
	nparams 4
	  param inout name "where" type class_ref 138907 // Locale
	  param in name "type" explicit_type "int"
	  param in name "dataName" explicit_type "String"
	  param in name "dictionaryName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7800987 "getAvailableLocales"
	class_operation public return_type class_ref 138907 // Locale
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all locales for which the
<code>get*Instance</code> methods of this class can return
localized instances.
The array returned must contain at least a <code>Locale</code>
instance equal to {@link java.util.Locale#US Locale.US}.

@return An array of locales for which localized
        <code>BreakIterator</code> instances are available."
      end

      class 984475 "BreakIteratorCache"
	visibility private 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1910683 // iter (<unidirectional association>)
	  relation 1910683 --->
	    a role_name "iter" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1910683 // iter (<unidirectional association>)
	    b parent class_ref 866459 // BreakIterator
	end

	classrelation 1910811 // where (<unidirectional association>)
	  relation 1910811 --->
	    a role_name "where" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1910811 // where (<unidirectional association>)
	    b parent class_ref 138907 // Locale
	end

	operation 7801115 "BreakIteratorCache"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "where" type class_ref 138907 // Locale
	    param inout name "iter" type class_ref 866459 // BreakIterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7801243 "getLocale"
	  package return_type class_ref 138907 // Locale
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7801371 "createBreakInstance"
	  package return_type class_ref 866459 // BreakIterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7801499 "getLong"
	class_operation protected explicit_return_type "long"
	nparams 2
	  param in name "buf" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7801627 "getInt"
	class_operation protected explicit_return_type "int"
	nparams 2
	  param in name "buf" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7801755 "getShort"
	class_operation protected explicit_return_type "short"
	nparams 2
	  param in name "buf" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 877979 "Bidi"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class implements the Unicode Bidirectional Algorithm.
<p>
A Bidi object provides information on the bidirectional reordering of the text
used to create it.  This is required, for example, to properly display Arabic 
or Hebrew text.  These languages are inherently mixed directional, as they order
numbers from left-to-right while ordering most other text from right-to-left.
<p>
Once created, a Bidi object can be queried to see if the text it represents is
all left-to-right or all right-to-left.  Such objects are very lightweight and
this text is relatively easy to process.
<p>
If there are multiple runs of text, information about the runs can be accessed
by indexing to get the start, limit, and level of a run.  The level represents
both the direction and the 'nesting level' of a directional run.  Odd levels
are right-to-left, while even levels are left-to-right.  So for example level
0 represents left-to-right text, while level 1 represents right-to-left text, and
level 2 represents left-to-right text embedded in a right-to-left run.

@since 1.4"
      attribute 2884763 "dir"
	package explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2884891 "baselevel"
	package explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2885019 "length"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2885147 "runs"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2885275 "cws"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 165659 "initialization"
	
	cpp "" ""
	java "  static {
	java.security.AccessController.doPrivileged(
	    new sun.security.action.LoadLibraryAction(\"awt\"));
	java.security.AccessController.doPrivileged(
	    new sun.security.action.LoadLibraryAction(\"fontmanager\"));
    }"
	php ""
	python ""
	idl ""
      end

      attribute 2885403 "DIRECTION_LEFT_TO_RIGHT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Constant indicating base direction is left-to-right. "
      end

      attribute 2885531 "DIRECTION_RIGHT_TO_LEFT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Constant indicating base direction is right-to-left. "
      end

      attribute 2885659 "DIRECTION_DEFAULT_LEFT_TO_RIGHT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant indicating that the base direction depends on the first strong
directional character in the text according to the Unicode
Bidirectional Algorithm.  If no strong directional character is present,
the base direction is left-to-right.
"
      end

      attribute 2885787 "DIRECTION_DEFAULT_RIGHT_TO_LEFT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant indicating that the base direction depends on the first strong
directional character in the text according to the Unicode
Bidirectional Algorithm.  If no strong directional character is present,
the base direction is right-to-left.
"
      end

      attribute 2885915 "DIR_MIXED"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7794203 "Bidi"
	public explicit_return_type ""
	nparams 2
	  param in name "paragraph" explicit_type "String"
	  param in name "flags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create Bidi from the given paragraph of text and base direction.
@param paragraph a paragraph of text
@param flags a collection of flags that control the algorithm.  The
algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT,
DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT.
Other values are reserved."
      end

      operation 7794331 "Bidi"
	public explicit_return_type ""
	nparams 1
	  param inout name "paragraph" type class_ref 361115 // AttributedCharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create Bidi from the given paragraph of text.
<p>
The RUN_DIRECTION attribute in the text, if present, determines the base
direction (left-to-right or right-to-left).  If not present, the base
direction is computes using the Unicode Bidirectional Algorithm, defaulting to left-to-right
if there are no strong directional characters in the text.  This attribute, if
present, must be applied to all the text in the paragraph.
<p>
The BIDI_EMBEDDING attribute in the text, if present, represents embedding level
information.  Negative values from -1 to -62 indicate overrides at the absolute value
of the level.  Positive values from 1 to 62 indicate embeddings.  Where values are
zero or not defined, the base embedding level as determined by the base direction
is assumed.
<p>
The NUMERIC_SHAPING attribute in the text, if present, converts European digits to
other decimal digits before running the bidi algorithm.  This attribute, if present,
must be applied to all the text in the paragraph.

@param paragraph a paragraph of text with optional character and paragraph attribute information

@see TextAttribute#BIDI_EMBEDDING
@see TextAttribute#NUMERIC_SHAPING
@see TextAttribute#RUN_DIRECTION"
      end

      operation 7794459 "Bidi"
	public explicit_return_type ""
	nparams 6
	  param in name "text" explicit_type "char"
	  param in name "textStart" explicit_type "int"
	  param in name "embeddings" explicit_type "byte"
	  param in name "embStart" explicit_type "int"
	  param in name "paragraphLength" explicit_type "int"
	  param in name "flags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create Bidi from the given text, embedding, and direction information.
The embeddings array may be null.  If present, the values represent embedding level
information.  Negative values from -1 to -61 indicate overrides at the absolute value
of the level.  Positive values from 1 to 61 indicate embeddings.  Where values are
zero, the base embedding level as determined by the base direction is assumed.
@param text an array containing the paragraph of text to process.
@param textStart the index into the text array of the start of the paragraph.
@param embeddings an array containing embedding values for each character in the paragraph.
This can be null, in which case it is assumed that there is no external embedding information.
@param embStart the index into the embedding array of the start of the paragraph.
@param paragraphLength the length of the paragraph in the text and embeddings arrays.
@param flags a collection of flags that control the algorithm.  The
algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT,
DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT.
Other values are reserved."
      end

      operation 7794587 "Bidi"
	private explicit_return_type ""
	nparams 5
	  param in name "dir" explicit_type "int"
	  param in name "baseLevel" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param in name "data" explicit_type "int"
	  param in name "cws" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private constructor used by line bidi."
      end

      operation 7794715 "reset"
	private explicit_return_type "void"
	nparams 5
	  param in name "dir" explicit_type "int"
	  param in name "baselevel" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param in name "data" explicit_type "int"
	  param in name "cws" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private mutator used by native code."
      end

      operation 7794843 "createLineBidi"
	public return_type class_ref 877979 // Bidi
	nparams 2
	  param in name "lineStart" explicit_type "int"
	  param in name "lineLimit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a Bidi object representing the bidi information on a line of text within
the paragraph represented by the current Bidi.  This call is not required if the
entire paragraph fits on one line.
@param lineStart the offset from the start of the paragraph to the start of the line.
@param lineLimit the offset from the start of the paragraph to the limit of the line."
      end

      operation 7794971 "isMixed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the line is not left-to-right or right-to-left.  This means it either has mixed runs of left-to-right 
and right-to-left text, or the base direction differs from the direction of the only run of text.
@return true if the line is not left-to-right or right-to-left."
      end

      operation 7795099 "isLeftToRight"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the line is all left-to-right text and the base direction is left-to-right.
@return true if the line is all left-to-right text and the base direction is left-to-right"
      end

      operation 7795227 "isRightToLeft"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the line is all right-to-left text, and the base direction is right-to-left.
@return true if the line is all right-to-left text, and the base direction is right-to-left"
      end

      operation 7795355 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the length of text in the line.
@return the length of text in the line"
      end

      operation 7795483 "baseIsLeftToRight"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the base direction is left-to-right.
@return true if the base direction is left-to-right"
      end

      operation 7795611 "getBaseLevel"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the base level (0 if left-to-right, 1 if right-to-left).
@return the base level"
      end

      operation 7795739 "getLevelAt"
	public explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the resolved level of the character at offset.  If offset is <0 or >=
the length of the line, return the base direction level.
@param offset the index of the character for which to return the level
@return the resolved level of the character at offset "
      end

      operation 7795867 "getRunCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the number of level runs.
@return the number of level runs"
      end

      operation 7795995 "getRunLevel"
	public explicit_return_type "int"
	nparams 1
	  param in name "run" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the level of the nth logical run in this line.
@param run the index of the run, between 0 and <code>getRunCount()</code>
@return the level of the run"
      end

      operation 7796123 "getRunStart"
	public explicit_return_type "int"
	nparams 1
	  param in name "run" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the index of the character at the start of the nth logical run in this line, as 
an offset from the start of the line.
@param run the index of the run, between 0 and <code>getRunCount()</code>
@return the start of the run"
      end

      operation 7796251 "getRunLimit"
	public explicit_return_type "int"
	nparams 1
	  param in name "run" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the index of the character past the end of the nth logical run in this line, as 
an offset from the start of the line.  For example, this will return the length
of the line for the last run on the line.
@param run the index of the run, between 0 and <code>getRunCount()</code>
@return limit the limit of the run"
      end

      operation 7796379 "requiresBidi"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param in name "text" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the specified text requires bidi analysis.  If this returns false,
the text will display left-to-right.  Clients can then avoid constructing a Bidi object.
Text in the Arabic Presentation Forms area of Unicode is presumed to already be shaped
and ordered for display, and so will not cause this function to return true.

@param text the text containing the characters to test
@param start the start of the range of characters to test
@param limit the limit of the range of characters to test
@return true if the range of characters requires bidi analysis"
      end

      operation 7796507 "reorderVisually"
	class_operation public explicit_return_type "void"
	nparams 5
	  param in name "levels" explicit_type "byte"
	  param in name "levelStart" explicit_type "int"
	  param inout name "objects" explicit_type "Object"
	  param in name "objectStart" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reorder the objects in the array into visual order based on their levels.
This is a utility function to use when you have a collection of objects
representing runs of text in logical order, each run containing text
at a single level.  The elements at <code>index</code> from
<code>objectStart</code> up to <code>objectStart + count</code> 
in the objects array will be reordered into visual order assuming
each run of text has the level indicated by the corresponding element 
in the levels array (at <code>index - objectStart + levelStart</code>).

@param levels an array representing the bidi level of each object
@param levelStart the start position in the levels array
@param objects the array of objects to be reordered into visual order
@param objectStart the start position in the objects array
@param count the number of objects to reorder"
      end

      attribute 2886043 "NUMLEVELS"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  62"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2886171 "RMASK"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  
	(1 << 1 /* U_RIGHT_TO_LEFT */) |
	(1 << 5 /* U_ARABIC_NUMBER */) |
	(1 << 13 /* U_RIGHT_TO_LEFT_ARABIC */) |
	(1 << 14 /* U_RIGHT_TO_LEFT_EMBEDDING */) |
	(1 << 15 /* U_RIGHT_TO_LEFT_OVERRIDE */)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7796635 "nativeGetDirectionCode"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "cp" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Access native bidi implementation. "
      end

      operation 7796763 "nativeBidiChars"
	class_operation private explicit_return_type "void"
	nparams 7
	  param inout name "bidi" type class_ref 877979 // Bidi
	  param in name "text" explicit_type "char"
	  param in name "textStart" explicit_type "int"
	  param in name "embeddings" explicit_type "byte"
	  param in name "embeddingStart" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param in name "flags" explicit_type "int"
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Access native bidi implementation. "
      end

      operation 7796891 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Display the bidi internal state, used in debugging."
      end
    end

    class 983707 "Annotation"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An Annotation object is used as a wrapper for a text attribute value if
the attribute has annotation characteristics. These characteristics are:
<ul>
<li>The text range that the attribute is applied to is critical to the
semantics of the range. That means, the attribute cannot be applied to subranges
of the text range that it applies to, and, if two adjacent text ranges have
the same value for this attribute, the attribute still cannot be applied to
the combined range as a whole with this value.
<li>The attribute or its value usually do no longer apply if the underlying text is
changed.
</ul>

An example is grammatical information attached to a sentence:
For the previous sentence, you can say that \"an example\"
is the subject, but you cannot say the same about \"an\", \"example\", or \"exam\".
When the text is changed, the grammatical information typically becomes invalid.
Another example is Japanese reading information (yomi).

<p>
Wrapping the attribute value into an Annotation object guarantees that
adjacent text runs don't get merged even if the attribute values are equal,
and indicates to text containers that the attribute should be discarded if
the underlying text is modified.

@see AttributedCharacterIterator
@since 1.2"
      operation 7786011 "Annotation"
	public explicit_return_type ""
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an annotation record with the given value, which
may be null.
@param value The value of the attribute"
      end

      operation 7786139 "getValue"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the attribute, which may be null."
      end

      operation 7786267 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of this Annotation."
      end

      attribute 2882715 "value"
	private explicit_type "Object"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 983835 "AttributedString"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An AttributedString holds text and related attribute information. It
may be used as the actual data storage in some cases where a text
reader wants to access attributed text through the AttributedCharacterIterator
interface.

@see AttributedCharacterIterator
@see Annotation
@since 1.2"
      attribute 2882843 "ARRAY_SIZE_INCREMENT"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " since there are no vectors of int, we have to use arrays.
 We allocate them in chunks of 10 elements so we don't have to allocate all the time."
      end

      attribute 2882971 "text"
	package explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " field holding the text"
      end

      attribute 2883099 "runArraySize"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " fields holding run attribute information
 run attributes are organized by run
 current size of the arrays"
      end

      attribute 2883227 "runCount"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " actual number of runs, <= runArraySize"
      end

      attribute 2883355 "runStarts"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " start index for each run"
      end

      classrelation 1909531 // runAttributes (<unidirectional association>)
	relation 1909531 --->
	  a role_name "runAttributes" multiplicity "[]" package
	    comment " vector of attribute keys for each run"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1909531 // runAttributes (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      classrelation 1909659 // runAttributeValues (<unidirectional association>)
	relation 1909659 --->
	  a role_name "runAttributeValues" multiplicity "[]" package
	    comment " parallel vector of attribute values for each run"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1909659 // runAttributeValues (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      operation 7786395 "AttributedString"
	package explicit_return_type ""
	nparams 1
	  param inout name "iterators" type class_ref 361115 // AttributedCharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AttributedString instance with the given
AttributedCharacterIterators.

@param iterators AttributedCharacterIterators to construct
AttributedString from.
@throws NullPointerException if iterators is null"
      end

      operation 7786523 "AttributedString"
	public explicit_return_type ""
	nparams 1
	  param in name "text" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AttributedString instance with the given text.
@param text The text for this attributed string."
      end

      operation 7786651 "AttributedString"
	public explicit_return_type ""
	nparams 2
	  param in name "text" explicit_type "String"
	  param inout name "attributes" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? extends Attribute, ?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AttributedString instance with the given text and attributes.
@param text The text for this attributed string.
@param attributes The attributes that apply to the entire string.
@exception IllegalArgumentException if the text has length 0
and the attributes parameter is not an empty Map (attributes
cannot be applied to a 0-length range)."
      end

      operation 7786779 "AttributedString"
	public explicit_return_type ""
	nparams 1
	  param inout name "text" type class_ref 361115 // AttributedCharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AttributedString instance with the given attributed
text represented by AttributedCharacterIterator.
@param text The text for this attributed string."
      end

      operation 7786907 "AttributedString"
	public explicit_return_type ""
	nparams 3
	  param inout name "text" type class_ref 361115 // AttributedCharacterIterator
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AttributedString instance with the subrange of
the given attributed text represented by
AttributedCharacterIterator. If the given range produces an
empty text, all attributes will be discarded.  Note that any
attributes wrapped by an Annotation object are discarded for a
subrange of the original attribute range.

@param text The text for this attributed string.
@param beginIndex Index of the first character of the range.
@param endIndex Index of the character following the last character
of the range.
@exception IllegalArgumentException if the subrange given by
beginIndex and endIndex is out of the text range.
@see java.text.Annotation"
      end

      operation 7787035 "AttributedString"
	public explicit_return_type ""
	nparams 4
	  param inout name "text" type class_ref 361115 // AttributedCharacterIterator
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	  param inout name "attributes" type class_ref 448155 // Attribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AttributedString instance with the subrange of
the given attributed text represented by
AttributedCharacterIterator.  Only attributes that match the
given attributes will be incorporated into the instance. If the
given range produces an empty text, all attributes will be
discarded. Note that any attributes wrapped by an Annotation
object are discarded for a subrange of the original attribute
range.

@param text The text for this attributed string.
@param beginIndex Index of the first character of the range.
@param endIndex Index of the character following the last character
of the range.
@param attributes Specifies attributes to be extracted
from the text. If null is specified, all available attributes will
be used.
@exception IllegalArgumentException if the subrange given by
beginIndex and endIndex is out of the text range.
@see java.text.Annotation"
      end

      operation 7787163 "addAttribute"
	public explicit_return_type "void"
	nparams 2
	  param inout name "attribute" type class_ref 448155 // Attribute
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an attribute to the entire string.
@param attribute the attribute key
@param value the value of the attribute; may be null
@exception IllegalArgumentException if the AttributedString has length 0
(attributes cannot be applied to a 0-length range)."
      end

      operation 7787291 "addAttribute"
	public explicit_return_type "void"
	nparams 4
	  param inout name "attribute" type class_ref 448155 // Attribute
	  param inout name "value" explicit_type "Object"
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an attribute to a subrange of the string.
@param attribute the attribute key
@param value The value of the attribute. May be null.
@param beginIndex Index of the first character of the range.
@param endIndex Index of the character following the last character of the range.
@exception IllegalArgumentException if beginIndex is less then 0, endIndex is
greater than the length of the string, or beginIndex and endIndex together don't
define a non-empty subrange of the string."
      end

      operation 7787419 "addAttributes"
	public explicit_return_type "void"
	nparams 3
	  param inout name "attributes" type class_ref 136603 // Map
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute, ?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a set of attributes to a subrange of the string.
@param attributes The attributes to be added to the string.
@param beginIndex Index of the first character of the range.
@param endIndex Index of the character following the last
character of the range.
@exception IllegalArgumentException if beginIndex is less then
0, endIndex is greater than the length of the string, or
beginIndex and endIndex together don't define a non-empty
subrange of the string and the attributes parameter is not an
empty Map."
      end

      operation 7787547 "addAttributeImpl"
	private explicit_return_type "void"
	nparams 4
	  param inout name "attribute" type class_ref 448155 // Attribute
	  param inout name "value" explicit_type "Object"
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7787675 "createRunAttributeDataVectors"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7787803 "ensureRunBreak"
	private explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ensure there's a run break at offset, return the index of the run"
      end

      operation 7787931 "ensureRunBreak"
	private explicit_return_type "int"
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "copyAttrs" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures there is a run break at offset, returning the index of
the run. If this results in splitting a run, two things can happen:
<ul>
<li>If copyAttrs is true, the attributes from the existing run
    will be placed in both of the newly created runs.
<li>If copyAttrs is false, the attributes from the existing run
will NOT be copied to the run to the right (>= offset) of the break,
but will exist on the run to the left (< offset).
</ul>"
      end

      operation 7788059 "addAttributeRunData"
	private explicit_return_type "void"
	nparams 4
	  param inout name "attribute" type class_ref 448155 // Attribute
	  param inout name "value" explicit_type "Object"
	  param in name "beginRunIndex" explicit_type "int"
	  param in name "endRunIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " add the attribute attribute/value to all runs where beginRunIndex <= runIndex < endRunIndex"
      end

      operation 7788187 "getIterator"
	public return_type class_ref 361115 // AttributedCharacterIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an AttributedCharacterIterator instance that provides access to the entire contents of
this string.

@return An iterator providing access to the text and its attributes."
      end

      operation 7788315 "getIterator"
	public return_type class_ref 361115 // AttributedCharacterIterator
	nparams 1
	  param inout name "attributes" type class_ref 448155 // Attribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an AttributedCharacterIterator instance that provides access to
selected contents of this string.
Information about attributes not listed in attributes that the
implementor may have need not be made accessible through the iterator.
If the list is null, all available attribute information should be made
accessible.

@param attributes a list of attributes that the client is interested in
@return an iterator providing access to the text and its attributes"
      end

      operation 7788443 "getIterator"
	public return_type class_ref 361115 // AttributedCharacterIterator
	nparams 3
	  param inout name "attributes" type class_ref 448155 // Attribute
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an AttributedCharacterIterator instance that provides access to
selected contents of this string.
Information about attributes not listed in attributes that the
implementor may have need not be made accessible through the iterator.
If the list is null, all available attribute information should be made
accessible.

@param attributes a list of attributes that the client is interested in
@param beginIndex the index of the first character
@param endIndex the index of the character following the last character
@return an iterator providing access to the text and its attributes
@exception IllegalArgumentException if beginIndex is less then 0,
endIndex is greater than the length of the string, or beginIndex is
greater than endIndex."
      end

      operation 7788571 "length"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " all (with the exception of length) reading operations are private,
 since AttributedString instances are accessed through iterators.
 length is package private so that CharacterIteratorFieldDelegate can
 access it without creating an AttributedCharacterIterator."
      end

      operation 7788699 "charAt"
	private explicit_return_type "char"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7788827 "getAttribute"
	private explicit_return_type "Object"
	nparams 2
	  param inout name "attribute" type class_ref 448155 // Attribute
	  param in name "runIndex" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7788955 "getAttributeCheckRange"
	private explicit_return_type "Object"
	nparams 4
	  param inout name "attribute" type class_ref 448155 // Attribute
	  param in name "runIndex" explicit_type "int"
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " gets an attribute value, but returns an annotation only if it's range does not extend outside the range beginIndex..endIndex"
      end

      operation 7789083 "attributeValuesMatch"
	private explicit_return_type "boolean"
	nparams 3
	  param inout name "attributes" type class_ref 136731 // Set
	  param in name "runIndex1" explicit_type "int"
	  param in name "runIndex2" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " returns whether all specified attributes have equal values in the runs with the given indices"
      end

      operation 7789211 "valuesMatch"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "value1" explicit_type "Object"
	  param inout name "value2" explicit_type "Object"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " returns whether the two objects are either both null or equal"
      end

      operation 7789339 "appendContents"
	private explicit_return_type "void"
	nparams 2
	  param inout name "buf" type class_ref 198171 // StringBuffer
	  param inout name "iterator" type class_ref 447003 // CharacterIterator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the contents of the CharacterIterator iterator into the
StringBuffer buf."
      end

      operation 7789467 "setAttributes"
	private explicit_return_type "void"
	nparams 2
	  param inout name "attrs" type class_ref 136603 // Map
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the attributes for the range from offset to the the next run break 
(typically the end of the text) to the ones specified in attrs.
This is only meant to be called from the constructor!"
      end

      operation 7789595 "mapsDiffer"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "last" type class_ref 136603 // Map
	  param inout name "attrs" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the attributes specified in last and attrs differ."
      end

      class 983963 "AttributedStringIterator"
	visibility private 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1909787 // <realization>
	  relation 1909787 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1909787 // <realization>
	    b parent class_ref 361115 // AttributedCharacterIterator
	end

	attribute 2883483 "beginIndex"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " note on synchronization:
 we don't synchronize on the iterator, assuming that an iterator is only used in one thread.
 we do synchronize access to the AttributedString however, since it's more likely to be shared between threads.
 start and end index for our iteration"
	end

	attribute 2883611 "endIndex"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1909915 // relevantAttributes (<unidirectional association>)
	  relation 1909915 --->
	    a role_name "relevantAttributes" multiplicity "[]" private
	      comment " attributes that our client is interested in
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1909915 // relevantAttributes (<unidirectional association>)
	    b parent class_ref 448155 // Attribute
	end

	attribute 2883739 "currentIndex"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " the current index for our iteration
 invariant: beginIndex <= currentIndex <= endIndex"
	end

	attribute 2883867 "currentRunIndex"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " information about the run that includes currentIndex"
	end

	attribute 2883995 "currentRunStart"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2884123 "currentRunLimit"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7789723 "AttributedStringIterator"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "attributes" type class_ref 448155 // Attribute
	    param in name "beginIndex" explicit_type "int"
	    param in name "endIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " constructor"
	end

	operation 7789851 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Object methods. See documentation in that class."
	end

	operation 7789979 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7790107 "clone"
	  public explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7790235 "first"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " CharacterIterator methods. See documentation in that interface."
	end

	operation 7790363 "last"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7790491 "current"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7790619 "next"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7790747 "previous"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7790875 "setIndex"
	  public explicit_return_type "char"
	  nparams 1
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7791003 "getBeginIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7791131 "getEndIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7791259 "getIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7791387 "getRunStart"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " AttributedCharacterIterator methods. See documentation in that interface."
	end

	operation 7791515 "getRunStart"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "attribute" type class_ref 448155 // Attribute
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7791643 "getRunStart"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "attributes" type class_ref 136731 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7791771 "getRunLimit"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7791899 "getRunLimit"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "attribute" type class_ref 448155 // Attribute
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7792027 "getRunLimit"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "attributes" type class_ref 136731 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7792155 "getAttributes"
	  public return_type class_ref 136603 // Map
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute,Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7792283 "getAllAttributeKeys"
	  public return_type class_ref 136731 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7792411 "getAttribute"
	  public explicit_return_type "Object"
	  nparams 1
	    param inout name "attribute" type class_ref 448155 // Attribute
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7792539 "getString"
	  private return_type class_ref 983835 // AttributedString
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " internally used methods"
	end

	operation 7792667 "internalSetIndex"
	  private explicit_return_type "char"
	  nparams 1
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " set the current index, update information about the current run if necessary,
 return the character at the current index"
	end

	operation 7792795 "updateRunInfo"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " update the information about the current run"
	end
      end

      class 984091 "AttributeMap"
	visibility private 
	nactuals 8
	actual class class_ref 136475 // AbstractMap
	  rank 0 value class_ref 448155 // Attribute
	actual class class_ref 136475 // AbstractMap
	  rank 1 explicit_value "any"
	actual class class_ref 136475 // AbstractMap
	  rank 2 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 3 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 4 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 5 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 6 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 7 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1910043 // <realization>
	  relation 1910043 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1910043 // <realization>
	    b parent class_ref 136475 // AbstractMap
	end

	attribute 2884251 "runIndex"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2884379 "beginIndex"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2884507 "endIndex"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7792923 "AttributeMap"
	  package explicit_return_type ""
	  nparams 3
	    param in name "runIndex" explicit_type "int"
	    param in name "beginIndex" explicit_type "int"
	    param in name "endIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7793051 "entrySet"
	  public return_type class_ref 136731 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7793179 "get"
	  public explicit_return_type "Object"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 984219 "AttributeEntry"
      visibility package 
      nactuals 12
      actual class class_ref 136603 // Map
        rank 0 explicit_value ""
      actual class class_ref 136603 // Map
        rank 1 explicit_value ""
      actual class class_ref 136603 // Map
        rank 2 explicit_value ""
      actual class class_ref 136603 // Map
        rank 3 explicit_value ""
      actual class class_ref 136603 // Map
        rank 4 explicit_value ""
      actual class class_ref 136603 // Map
        rank 5 explicit_value ""
      actual class class_ref 136603 // Map
        rank 6 explicit_value ""
      actual class class_ref 136603 // Map
        rank 7 explicit_value ""
      actual class class_ref 136859 // Entry
        rank 0 explicit_value ""
      actual class class_ref 136859 // Entry
        rank 1 explicit_value ""
      actual class class_ref 136859 // Entry
        rank 2 explicit_value ""
      actual class class_ref 136859 // Entry
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1910171 // <realization>
	relation 1910171 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1910171 // <realization>
	  b parent class_ref 136859 // Entry
      end

      classrelation 1910299 // key (<unidirectional association>)
	relation 1910299 --->
	  a role_name "key" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1910299 // key (<unidirectional association>)
	  b parent class_ref 448155 // Attribute
      end

      attribute 2884635 "value"
	private explicit_type "Object"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7793307 "AttributeEntry"
	package explicit_return_type ""
	nparams 2
	  param inout name "key" type class_ref 448155 // Attribute
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7793435 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7793563 "getKey"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7793691 "getValue"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7793819 "setValue"
	public explicit_return_type "Object"
	nparams 1
	  param inout name "newValue" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7793947 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7794075 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 984347 "BreakDictionary"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is the class that represents the list of known words used by
DictionaryBasedBreakIterator.  The conceptual data structure used
here is a trie: there is a node hanging off the root node for every
letter that can start a word.  Each of these nodes has a node hanging
off of it for every letter that can be the second letter of a word
if this node is the first letter, and so on.  The trie is represented
as a two-dimensional array that can be treated as a table of state
transitions.  Indexes are used to compress this array, taking
advantage of the fact that this array will always be very sparse."
      attribute 2886299 "supportedVersion"
	class_attribute private explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "=========================================================================
 data members
=========================================================================

The version of the dictionary that was read in.
"
      end

      attribute 2886427 "columnMap"
	private explicit_type "CompactByteArray"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Maps from characters to column numbers.  The main use of this is to
avoid making room in the array for empty columns.
"
      end

      attribute 2886555 "supplementaryCharColumnMap"
	private explicit_type "SupplementaryCharacterData"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2886683 "numCols"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of actual columns in the table
"
      end

      attribute 2886811 "numColGroups"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Columns are organized into groups of 32.  This says how many
column groups.  (We could calculate this, but we store the
value to avoid having to repeatedly calculate it.)
"
      end

      attribute 2886939 "table"
	private explicit_type "short"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The actual compressed state table.  Each conceptual row represents
a state, and the cells in it contain the row numbers of the states
to transition to for each possible letter.  0 is used to indicate
an illegal combination of letters (i.e., the error state).  The
table is compressed by eliminating all the unpopulated (i.e., zero)
cells.  Multiple conceptual rows can then be doubled up in a single
physical row by sliding them up and possibly shifting them to one
side or the other so the populated cells don't collide.  Indexes
are used to identify unpopulated cells and to locate populated cells.
"
      end

      attribute 2887067 "rowIndex"
	private explicit_type "short"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This index maps logical row numbers to physical row numbers
"
      end

      attribute 2887195 "rowIndexFlags"
	private explicit_type "int"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A bitmap is used to tell which cells in the comceptual table are
populated.  This array contains all the unique bit combinations
in that bitmap.  If the table is more than 32 columns wide,
successive entries in this array are used for a single row.
"
      end

      attribute 2887323 "rowIndexFlagsIndex"
	private explicit_type "short"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This index maps from a logical row number into the bitmap table above.
(This keeps us from storing duplicate bitmap combinations.)  Since there
are a lot of rows with only one populated cell, instead of wasting space
in the bitmap table, we just store a negative number in this index for
rows with one populated cell.  The absolute value of that number is
the column number of the populated cell.
"
      end

      attribute 2887451 "rowIndexShifts"
	private explicit_type "byte"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "For each logical row, this index contains a constant that is added to
the logical column number to get the physical column number
"
      end

      operation 7797019 "BreakDictionary"
	public explicit_return_type ""
	nparams 1
	  param in name "dictionaryName" explicit_type "String"
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 154011 // MissingResourceException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "=========================================================================
 deserialization
========================================================================="
      end

      operation 7797147 "readDictionaryFile"
	private explicit_return_type "void"
	nparams 1
	  param in name "dictionaryName" explicit_type "String"
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 154011 // MissingResourceException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7797275 "getNextStateFromCharacter"
	public explicit_return_type "short"
	nparams 2
	  param in name "row" explicit_type "int"
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "=========================================================================
 access to the words
=========================================================================

Uses the column map to map the character to a column number, then
passes the row and column number to getNextState()
@param row The current state
@param ch The character whose column we're interested in
@return The new state to transition to"
      end

      operation 7797403 "getNextState"
	public explicit_return_type "short"
	nparams 2
	  param in name "row" explicit_type "int"
	  param in name "col" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value in the cell with the specified (logical) row and
column numbers.  In DictionaryBasedBreakIterator, the row number is
a state number, the column number is an input, and the return value
is the row number of the new state to transition to.  (0 is the
\"error\" state, and -1 is the \"end of word\" state in a dictionary)
@param row The row number of the current state
@param col The column number of the input character (0 means \"not a
dictionary character\")
@return The row number of the new state to transition to"
      end

      operation 7797531 "cellIsPopulated"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "row" explicit_type "int"
	  param in name "col" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given (logical) row and column numbers, returns true if the
cell in that position is populated"
      end

      operation 7797659 "internalAt"
	private explicit_return_type "short"
	nparams 2
	  param in name "row" explicit_type "int"
	  param in name "col" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implementation of getNextState() when we know the specified cell is
populated.
@param row The PHYSICAL row number of the cell
@param col The PHYSICAL column number of the cell
@return The value stored in the cell"
      end
    end

    class 984603 "CharacterIteratorFieldDelegate"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "CharacterIteratorFieldDelegate combines the notifications from a Format
into a resulting <code>AttributedCharacterIterator</code>. The resulting
<code>AttributedCharacterIterator</code> can be retrieved by way of
the <code>getIterator</code> method.

@version 1.4 12/19/03"
      classrelation 1911323 // <realization>
	relation 1911323 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1911323 // <realization>
	  b parent class_ref 984859 // FieldDelegate
      end

      classrelation 1911451 // attributedStrings (<unidirectional association>)
	relation 1911451 --->
	  a role_name "attributedStrings" private
	    comment "
Array of AttributeStrings. Whenever <code>formatted</code> is invoked
for a region > size, a new instance of AttributedString is added to
attributedStrings. Subsequent invocations of <code>formatted</code>
for existing regions result in invoking addAttribute on the existing
AttributedStrings.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1911451 // attributedStrings (<unidirectional association>)
	  b parent class_ref 137627 // ArrayList
      end

      attribute 2888475 "size"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Running count of the number of characters that have
been encountered.
"
      end

      operation 7803547 "CharacterIteratorFieldDelegate"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7803675 "formatted"
	public explicit_return_type "void"
	nparams 5
	  param inout name "attr" type class_ref 985115 // Field
	  param inout name "value" explicit_type "Object"
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param inout name "buffer" type class_ref 198171 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7803803 "formatted"
	public explicit_return_type "void"
	nparams 6
	  param in name "fieldID" explicit_type "int"
	  param inout name "attr" type class_ref 985115 // Field
	  param inout name "value" explicit_type "Object"
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param inout name "buffer" type class_ref 198171 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7803931 "getIterator"
	public return_type class_ref 361115 // AttributedCharacterIterator
	nparams 1
	  param in name "string" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>AttributedCharacterIterator</code> that can be used
to iterate over the resulting formatted String.

@pararm string Result of formatting."
      end
    end

    class 984731 "Format"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>Format</code> is an abstract base class for formatting locale-sensitive
information such as dates, messages, and numbers.

<p>
<code>Format</code> defines the programming interface for formatting
locale-sensitive objects into <code>String</code>s (the
<code>format</code> method) and for parsing <code>String</code>s back
into objects (the <code>parseObject</code> method).

<p>
Generally, a format's <code>parseObject</code> method must be able to parse
any string formatted by its <code>format</code> method. However, there may 
be exceptional cases where this is not possible. For example, a
<code>format</code> method might create two adjacent integer numbers with
no separator in between, and in this case the <code>parseObject</code> could
not tell which digits belong to which number.

<h4>Subclassing</h4>

<p>
The Java 2 platform provides three specialized subclasses of <code>Format</code>--
<code>DateFormat</code>, <code>MessageFormat</code>, and
<code>NumberFormat</code>--for formatting dates, messages, and numbers,
respectively.
<p>
Concrete subclasses must implement three methods:
<ol>
<li> <code>format(Object obj, StringBuffer toAppendTo, FieldPosition pos)</code>
<li> <code>formatToCharacterIterator(Object obj)</code>
<li> <code>parseObject(String source, ParsePosition pos)</code>
</ol>
These general methods allow polymorphic parsing and formatting of objects
and are used, for example, by <code>MessageFormat</code>.
Subclasses often also provide additional <code>format</code> methods for
specific input types as well as <code>parse</code> methods for specific
result types. Any <code>parse</code> method that does not take a
<code>ParsePosition</code> argument should throw <code>ParseException</code>
when no text in the required format is at the beginning of the input text.

<p>
Most subclasses will also implement the following factory methods:
<ol>
<li>
<code>getInstance</code> for getting a useful format object appropriate
for the current locale
<li>
<code>getInstance(Locale)</code> for getting a useful format
object appropriate for the specified locale
</ol>
In addition, some subclasses may also implement other
<code>getXxxxInstance</code> methods for more specialized control. For
example, the <code>NumberFormat</code> class provides
<code>getPercentInstance</code> and <code>getCurrencyInstance</code>
methods for getting specialized number formatters.

<p>
Subclasses of <code>Format</code> that allow programmers to create objects
for locales (with <code>getInstance(Locale)</code> for example)
must also implement the following class method:
<blockquote>
<pre>
public static Locale[] getAvailableLocales()
</pre>
</blockquote>

<p>
And finally subclasses may define a set of constants to identify the various
fields in the formatted output. These constants are used to create a FieldPosition
object which identifies what information is contained in the field and its
position in the formatted result. These constants should be named
<code><em>item</em>_FIELD</code> where <code><em>item</em></code> identifies
the field. For examples of these constants, see <code>ERA_FIELD</code> and its
friends in {@link DateFormat}.

<h4><a name=\"synchronization\">Synchronization</a></h4>

<p>
Formats are generally not synchronized.
It is recommended to create separate format instances for each thread.
If multiple threads access a format concurrently, it must be synchronized
externally.

@see          java.text.ParsePosition
@see          java.text.FieldPosition
@see          java.text.NumberFormat
@see          java.text.DateFormat
@see          java.text.MessageFormat
@version      1.34, 12/19/03
@author       Mark Davis"
      class 984859 "FieldDelegate"
	visibility package stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 7803291 "formatted"
	  public explicit_return_type "void"
	  nparams 5
	    param inout name "attr" type class_ref 985115 // Field
	    param inout name "value" explicit_type "Object"
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	    param inout name "buffer" type class_ref 198171 // StringBuffer
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notified when a particular region of the String is formatted. This
method will be invoked if there is no corresponding integer field id
matching <code>attr</code>.

@param attr Identifies the field matched
@param value Value associated with the field
@param start Beginning location of the field, will be >= 0
@param end End of the field, will be >= start and <= buffer.length()
@param buffer Contains current formatted value, receiver should
       NOT modify it."
	end

	operation 7803419 "formatted"
	  public explicit_return_type "void"
	  nparams 6
	    param in name "fieldID" explicit_type "int"
	    param inout name "attr" type class_ref 985115 // Field
	    param inout name "value" explicit_type "Object"
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	    param inout name "buffer" type class_ref 198171 // StringBuffer
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notified when a particular region of the String is formatted.

@param fieldID Identifies the field by integer
@param attr Identifies the field matched
@param value Value associated with the field
@param start Beginning location of the field, will be >= 0
@param end End of the field, will be >= start and <= buffer.length()
@param buffer Contains current formatted value, receiver should
       NOT modify it."
	end
      end

      classrelation 1910939 // <realization>
	relation 1910939 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1910939 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 1911067 // <realization>
	relation 1911067 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1911067 // <realization>
	  b parent class_ref 339867 // Cloneable
      end

      attribute 2888219 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -299282585814624189L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7801883 "format"
	public explicit_return_type "String"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats an object to produce a string. This is equivalent to
<blockquote>
{@link #format(Object, StringBuffer, FieldPosition) format}<code>(obj,
        new StringBuffer(), new FieldPosition(0)).toString();</code>
</blockquote>

@param obj    The object to format
@return       Formatted string.
@exception IllegalArgumentException if the Format cannot format the given
           object"
      end

      operation 7802011 "format"
	abstract public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param inout name "obj" explicit_type "Object"
	  param inout name "toAppendTo" type class_ref 198171 // StringBuffer
	  param inout name "pos" type class_ref 701083 // FieldPosition
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats an object and appends the resulting text to a given string
buffer.
If the <code>pos</code> argument identifies a field used by the format,
then its indices are set to the beginning and end of the first such
field encountered.

@param obj    The object to format
@param toAppendTo    where the text is to be appended
@param pos    A <code>FieldPosition</code> identifying a field
              in the formatted text
@return       the string buffer passed in as <code>toAppendTo</code>,
              with formatted text appended
@exception NullPointerException if <code>toAppendTo</code> or
           <code>pos</code> is null
@exception IllegalArgumentException if the Format cannot format the given
           object"
      end

      operation 7802139 "formatToCharacterIterator"
	public return_type class_ref 361115 // AttributedCharacterIterator
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats an Object producing an <code>AttributedCharacterIterator</code>.
You can use the returned <code>AttributedCharacterIterator</code>
to build the resulting String, as well as to determine information
about the resulting String.
<p>
Each attribute key of the AttributedCharacterIterator will be of type
<code>Field</code>. It is up to each <code>Format</code> implementation
to define what the legal values are for each attribute in the
<code>AttributedCharacterIterator</code>, but typically the attribute
key is also used as the attribute value.
<p>The default implementation creates an
<code>AttributedCharacterIterator</code> with no attributes. Subclasses
that support fields should override this and create an
<code>AttributedCharacterIterator</code> with meaningful attributes.

@exception NullPointerException if obj is null.
@exception IllegalArgumentException when the Format cannot format the
           given object.
@param obj The object to format
@return AttributedCharacterIterator describing the formatted value.
@since 1.4"
      end

      operation 7802267 "parseObject"
	abstract public explicit_return_type "Object"
	nparams 2
	  param in name "source" explicit_type "String"
	  param inout name "pos" type class_ref 984987 // ParsePosition
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from a string to produce an object.
<p>
The method attempts to parse text starting at the index given by
<code>pos</code>.
If parsing succeeds, then the index of <code>pos</code> is updated
to the index after the last character used (parsing does not necessarily
use all characters up to the end of the string), and the parsed
object is returned. The updated <code>pos</code> can be used to
indicate the starting point for the next call to this method.
If an error occurs, then the index of <code>pos</code> is not
changed, the error index of <code>pos</code> is set to the index of
the character where the error occurred, and null is returned.

@param source A <code>String</code>, part of which should be parsed.
@param pos A <code>ParsePosition</code> object with index and error
           index information as described above.
@return An <code>Object</code> parsed from the string. In case of
        error, returns null.
@exception NullPointerException if <code>pos</code> is null."
      end

      operation 7802395 "parseObject"
	public explicit_return_type "Object"
	nparams 1
	  param in name "source" explicit_type "String"
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from the beginning of the given string to produce an object.
The method may not use the entire text of the given string.

@param source A <code>String</code> whose beginning should be parsed.
@return An <code>Object</code> parsed from the string.
@exception ParseException if the beginning of the specified string
           cannot be parsed."
      end

      operation 7802523 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a copy of this object.

@return a clone of this instance."
      end

      operation 7802651 "createAttributedCharacterIterator"
	package return_type class_ref 361115 // AttributedCharacterIterator
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convenience methods for creating AttributedCharacterIterators from
 different parameters.
 

Creates an <code>AttributedCharacterIterator</code> for the String
<code>s</code>.

@param s String to create AttributedCharacterIterator from
@return AttributedCharacterIterator wrapping s"
      end

      operation 7802779 "createAttributedCharacterIterator"
	package return_type class_ref 361115 // AttributedCharacterIterator
	nparams 1
	  param inout name "iterators" type class_ref 361115 // AttributedCharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an <code>AttributedCharacterIterator</code> containg the
concatenated contents of the passed in
<code>AttributedCharacterIterator</code>s.

@param iterators AttributedCharacterIterators used to create resulting
                 AttributedCharacterIterators
@return AttributedCharacterIterator wrapping passed in
        AttributedCharacterIterators"
      end

      operation 7802907 "createAttributedCharacterIterator"
	package return_type class_ref 361115 // AttributedCharacterIterator
	nparams 3
	  param in name "string" explicit_type "String"
	  param inout name "key" type class_ref 448155 // Attribute
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an AttributedCharacterIterator with the String
<code>string</code> and additional key/value pair <code>key</code>,
<code>value</code>.

@param string String to create AttributedCharacterIterator from
@param key Key for AttributedCharacterIterator
@param value Value associated with key in AttributedCharacterIterator
@return AttributedCharacterIterator wrapping args"
      end

      operation 7803035 "createAttributedCharacterIterator"
	package return_type class_ref 361115 // AttributedCharacterIterator
	nparams 3
	  param inout name "iterator" type class_ref 361115 // AttributedCharacterIterator
	  param inout name "key" type class_ref 448155 // Attribute
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an AttributedCharacterIterator with the contents of
<code>iterator</code> and the additional attribute <code>key</code>
<code>value</code>.

@param iterator Initial AttributedCharacterIterator to add arg to
@param key Key for AttributedCharacterIterator
@param value Value associated with key in AttributedCharacterIterator
@return AttributedCharacterIterator wrapping args"
      end

      class 985115 "Field"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1911195 // <generalisation>
	  relation 1911195 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1911195 // <generalisation>
	    b parent class_ref 448155 // Attribute
	end

	attribute 2888347 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  276966692217360283L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Proclaim serial compatibility with 1.4 FCS"
	end

	operation 7803163 "Field"
	  protected explicit_return_type ""
	  nparams 1
	    param in name "name" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a Field with the specified name.

@param name Name of the attribute"
	end
      end
    end

    class 984987 "ParsePosition"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>ParsePosition</code> is a simple class used by <code>Format</code>
and its subclasses to keep track of the current position during parsing.
The <code>parseObject</code> method in the various <code>Format</code>
classes requires a <code>ParsePosition</code> object as an argument.

<p>
By design, as you parse through a string with different formats,
you can use the same <code>ParsePosition</code>, since the index parameter
records the current position.

@version     1.19 12/19/03
@author      Mark Davis
@see         java.text.Format"
      attribute 2912027 "index"
	package explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Input: the place you start parsing.
<br>Output: position where the parse stopped.
This is designed to be used serially,
with each call setting index up for the next one.
"
      end

      attribute 2912155 "errorIndex"
	package explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7855259 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current parse position.  On input to a parse method, this
is the index of the character at which parsing will begin; on output, it
is the index of the character following the last character parsed."
      end

      operation 7855387 "setIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the current parse position."
      end

      operation 7855515 "ParsePosition"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new ParsePosition with the given initial index."
      end

      operation 7855643 "setErrorIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "ei" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the index at which a parse error occurred.  Formatters
should set this before returning an error code from their
parseObject method.  The default value is -1 if this is not set.
@since 1.2"
      end

      operation 7855771 "getErrorIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the index at which an error occurred, or -1 if the
error index has not been set.
@since 1.2"
      end

      operation 7855899 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides equals"
      end

      operation 7856027 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this ParsePosition.
@return a hash code value for this object"
      end

      operation 7856155 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string representation of this ParsePosition.
@return  a string representation of this object"
      end
    end

    class 985243 "ChoiceFormat"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>ChoiceFormat</code> allows you to attach a format to a range of numbers.
It is generally used in a <code>MessageFormat</code> for handling plurals.
The choice is specified with an ascending list of doubles, where each item
specifies a half-open interval up to the next item:
<blockquote>
<pre>
X matches j if and only if limit[j] &lt;= X &lt; limit[j+1]
</pre>
</blockquote>
If there is no match, then either the first or last index is used, depending
on whether the number (X) is too low or too high.  If the limit array is not
in ascending order, the results of formatting will be incorrect.  ChoiceFormat
also accepts <code>&#92;u221E</code> as equivalent to infinity(INF).

<p>
<strong>Note:</strong>
<code>ChoiceFormat</code> differs from the other <code>Format</code>
classes in that you create a <code>ChoiceFormat</code> object with a
constructor (not with a <code>getInstance</code> style factory
method). The factory methods aren't necessary because <code>ChoiceFormat</code>
doesn't require any complex setup for a given locale. In fact,
<code>ChoiceFormat</code> doesn't implement any locale specific behavior.

<p>
When creating a <code>ChoiceFormat</code>, you must specify an array of formats
and an array of limits. The length of these arrays must be the same.
For example,
<ul>
<li>
    <em>limits</em> = {1,2,3,4,5,6,7}<br>
    <em>formats</em> = {\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thur\",\"Fri\",\"Sat\"}
<li>
    <em>limits</em> = {0, 1, ChoiceFormat.nextDouble(1)}<br>
    <em>formats</em> = {\"no files\", \"one file\", \"many files\"}<br>
    (<code>nextDouble</code> can be used to get the next higher double, to
    make the half-open interval.)
</ul>

<p>
Here is a simple example that shows formatting and parsing:
<blockquote>
<pre>
double[] limits = {1,2,3,4,5,6,7};
String[] monthNames = {\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thur\",\"Fri\",\"Sat\"};
ChoiceFormat form = new ChoiceFormat(limits, monthNames);
ParsePosition status = new ParsePosition(0);
for (double i = 0.0; i &lt;= 8.0; ++i) {
    status.setIndex(0);
    System.out.println(i + \" -&gt; \" + form.format(i) + \" -&gt; \"
                             + form.parse(form.format(i),status));
}
</pre>
</blockquote>
Here is a more complex example, with a pattern format:
<blockquote>
<pre>
double[] filelimits = {0,1,2};
String[] filepart = {\"are no files\",\"is one file\",\"are {2} files\"};
ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart);
Format[] testFormats = {fileform, null, NumberFormat.getInstance()};
MessageFormat pattform = new MessageFormat(\"There {0} on {1}\");
pattform.setFormats(testFormats);
Object[] testArgs = {null, \"ADisk\", null};
for (int i = 0; i &lt; 4; ++i) {
    testArgs[0] = new Integer(i);
    testArgs[2] = testArgs[0];
    System.out.println(pattform.format(testArgs));
}
</pre>
</blockquote>
<p>
Specifying a pattern for ChoiceFormat objects is fairly straightforward.
For example:
<blockquote>
<pre>
ChoiceFormat fmt = new ChoiceFormat(
     \"-1#is negative| 0#is zero or fraction | 1#is one |1.0&lt;is 1+ |2#is two |2&lt;is more than 2.\");
System.out.println(\"Formatter Pattern : \" + fmt.toPattern());

System.out.println(\"Format with -INF : \" + fmt.format(Double.NEGATIVE_INFINITY));
System.out.println(\"Format with -1.0 : \" + fmt.format(-1.0));
System.out.println(\"Format with 0 : \" + fmt.format(0));
System.out.println(\"Format with 0.9 : \" + fmt.format(0.9));
System.out.println(\"Format with 1.0 : \" + fmt.format(1));
System.out.println(\"Format with 1.5 : \" + fmt.format(1.5));
System.out.println(\"Format with 2 : \" + fmt.format(2));
System.out.println(\"Format with 2.1 : \" + fmt.format(2.1));
System.out.println(\"Format with NaN : \" + fmt.format(Double.NaN));
System.out.println(\"Format with +INF : \" + fmt.format(Double.POSITIVE_INFINITY));
</pre>
</blockquote>
And the output result would be like the following:
<pre>
<blockquote>
  Format with -INF : is negative
  Format with -1.0 : is negative
  Format with 0 : is zero or fraction
  Format with 0.9 : is zero or fraction
  Format with 1.0 : is one
  Format with 1.5 : is 1+
  Format with 2 : is two
  Format with 2.1 : is more than 2.
  Format with NaN : is negative
  Format with +INF : is more than 2.
</pre>
</blockquote>

<h4><a name=\"synchronization\">Synchronization</a></h4>

<p>
Choice formats are not synchronized.
It is recommended to create separate format instances for each thread.
If multiple threads access a format concurrently, it must be synchronized
externally.


@see          DecimalFormat
@see          MessageFormat
@version      1.22 09/21/98
@author       Mark Davis"
      classrelation 1911835 // <generalisation>
	relation 1911835 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1911835 // <generalisation>
	  b parent class_ref 985371 // NumberFormat
      end

      attribute 2891163 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  1795184449645032964L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Proclaim serial compatibility with 1.1 FCS"
      end

      operation 7809307 "applyPattern"
	public explicit_return_type "void"
	nparams 1
	  param in name "newPattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the pattern.
@param newPattern See the class description."
      end

      operation 7809435 "toPattern"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the pattern."
      end

      operation 7809563 "ChoiceFormat"
	public explicit_return_type ""
	nparams 1
	  param in name "newPattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs with limits and corresponding formats based on the pattern.
@see #applyPattern"
      end

      operation 7809691 "ChoiceFormat"
	public explicit_return_type ""
	nparams 2
	  param in name "limits" explicit_type "double"
	  param in name "formats" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs with the limits and the corresponding formats.
@see #setChoices"
      end

      operation 7809819 "setChoices"
	public explicit_return_type "void"
	nparams 2
	  param in name "limits" explicit_type "double"
	  param in name "formats" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the choices to be used in formatting.
@param limits contains the top value that you want
parsed with that format,and should be in ascending sorted order. When
formatting X, the choice will be the i, where
limit[i] &lt;= X &lt; limit[i+1].
If the limit array is not in ascending order, the results of formatting
will be incorrect.
@param formats are the formats you want to use for each limit.
They can be either Format objects or Strings.
When formatting with object Y,
if the object is a NumberFormat, then ((NumberFormat) Y).format(X)
is called. Otherwise Y.toString() is called."
      end

      operation 7809947 "getLimits"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the limits passed in the constructor.
@return the limits."
      end

      operation 7810075 "getFormats"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the formats passed in the constructor.
@return the formats."
      end

      operation 7810203 "format"
	public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "long"
	  param inout name "toAppendTo" type class_ref 198171 // StringBuffer
	  param inout name "status" type class_ref 701083 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Overrides

Specialization of format. This method really calls
<code>format(double, StringBuffer, FieldPosition)</code>
thus the range of longs that are supported is only equal to
the range that can be stored by double. This will never be
a practical limitation."
      end

      operation 7810331 "format"
	public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "double"
	  param inout name "toAppendTo" type class_ref 198171 // StringBuffer
	  param inout name "status" type class_ref 701083 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns pattern with formatted double.
@param number number to be formatted & substituted.
@param toAppendTo where text is appended.
@param status ignore no useful status is returned."
      end

      operation 7810459 "parse"
	public return_type class_ref 413979 // Number
	nparams 2
	  param in name "text" explicit_type "String"
	  param inout name "status" type class_ref 984987 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses a Number from the input text.
@param text the source text.
@param status an input-output parameter.  On input, the
status.index field indicates the first character of the
source text that should be parsed.  On exit, if no error
occured, status.index is set to the first unparsed character
in the source text.  On exit, if an error did occur,
status.index is unchanged and status.errorIndex is set to the
first index of the character that caused the parse to fail.
@return A Number representing the value of the number parsed."
      end

      operation 7810587 "nextDouble"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the least double greater than d.
If NaN, returns same value.
<p>Used to make half-open intervals.
@see #previousDouble"
      end

      operation 7810715 "previousDouble"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the greatest double less than d.
If NaN, returns same value.
@see #nextDouble"
      end

      operation 7810843 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides Cloneable"
      end

      operation 7810971 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a hash code for the message format object."
      end

      operation 7811099 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equality comparision between two"
      end

      operation 7811227 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "After reading an object from the input stream, do a simple verification
to maintain class invariants.
@throws InvalidObjectException if the objects read from the stream is invalid."
      end

      attribute 2891291 "choiceLimits"
	private explicit_type "double"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ===============privates===========================

A list of lower bounds for the choices.  The formatter will return
<code>choiceFormats[i]</code> if the number being formatted is greater than or equal to
<code>choiceLimits[i]</code> and less than <code>choiceLimits[i+1]</code>.
@serial
"
      end

      attribute 2891419 "choiceFormats"
	private explicit_type "String"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A list of choice strings.  The formatter will return
<code>choiceFormats[i]</code> if the number being formatted is greater than or equal to
<code>choiceLimits[i]</code> and less than <code>choiceLimits[i+1]</code>.
@serial
"
      end

      attribute 2891547 "SIGN"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  0x8000000000000000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "static final long SIGN          = 0x8000000000000000L;
static final long EXPONENT      = 0x7FF0000000000000L;
static final long SIGNIFICAND   = 0x000FFFFFFFFFFFFFL;

private static double nextDouble (double d, boolean positive) {
if (Double.isNaN(d) || Double.isInfinite(d)) {
return d;
}
long bits = Double.doubleToLongBits(d);
long significand = bits & SIGNIFICAND;
if (bits < 0) {
significand |= (SIGN | EXPONENT);
}
long exponent = bits & EXPONENT;
if (positive) {
significand += 1;
// FIXME fix overflow & underflow
} else {
significand -= 1;
// FIXME fix overflow & underflow
}
bits = exponent | (significand & ~EXPONENT);
return Double.longBitsToDouble(bits);
}
"
      end

      attribute 2891675 "EXPONENT"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  0x7FF0000000000000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2891803 "POSITIVEINFINITY"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  0x7FF0000000000000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7811355 "nextDouble"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "d" explicit_type "double"
	  param inout name "positive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the least double greater than d (if positive == true),
or the greatest double less than d (if positive == false).
If NaN, returns same value.

Does not affect floating-point flags,
provided these member functions do not:
         Double.longBitsToDouble(long)
         Double.doubleToLongBits(double)
         Double.isNaN(double)"
      end

      operation 7811483 "doubleArraySize"
	class_operation private explicit_return_type "double"
	nparams 1
	  param in name "array" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7811611 "doubleArraySize"
	private explicit_return_type "String"
	nparams 1
	  param in name "array" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 985371 "NumberFormat"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>NumberFormat</code> is the abstract base class for all number
formats. This class provides the interface for formatting and parsing
numbers. <code>NumberFormat</code> also provides methods for determining
which locales have number formats, and what their names are.

<p>
<code>NumberFormat</code> helps you to format and parse numbers for any locale.
Your code can be completely independent of the locale conventions for
decimal points, thousands-separators, or even the particular decimal
digits used, or whether the number format is even decimal.

<p>
To format a number for the current Locale, use one of the factory
class methods:
<blockquote>
<pre>
 myString = NumberFormat.getInstance().format(myNumber);
</pre>
</blockquote>
If you are formatting multiple numbers, it is
more efficient to get the format and use it multiple times so that
the system doesn't have to fetch the information about the local
language and country conventions multiple times.
<blockquote>
<pre>
NumberFormat nf = NumberFormat.getInstance();
for (int i = 0; i < a.length; ++i) {
    output.println(nf.format(myNumber[i]) + \"; \");
}
</pre>
</blockquote>
To format a number for a different Locale, specify it in the
call to <code>getInstance</code>.
<blockquote>
<pre>
NumberFormat nf = NumberFormat.getInstance(Locale.FRENCH);
</pre>
</blockquote>
You can also use a <code>NumberFormat</code> to parse numbers:
<blockquote>
<pre>
myNumber = nf.parse(myString);
</pre>
</blockquote>
Use <code>getInstance</code> or <code>getNumberInstance</code> to get the
normal number format. Use <code>getIntegerInstance</code> to get an
integer number format. Use <code>getCurrencyInstance</code> to get the
currency number format. And use <code>getPercentInstance</code> to get a
format for displaying percentages. With this format, a fraction like
0.53 is displayed as 53%.

<p>
You can also control the display of numbers with such methods as
<code>setMinimumFractionDigits</code>.
If you want even more control over the format or parsing,
or want to give your users more control,
you can try casting the <code>NumberFormat</code> you get from the factory methods
to a <code>DecimalFormat</code>. This will work for the vast majority
of locales; just remember to put it in a <code>try</code> block in case you
encounter an unusual one.

<p>
NumberFormat and DecimalFormat are designed such that some controls
work for formatting and others work for parsing.  The following is
the detailed description for each these control methods,
<p>
setParseIntegerOnly : only affects parsing, e.g.
if true,  \"3456.78\" -> 3456 (and leaves the parse position just after index 6)
if false, \"3456.78\" -> 3456.78 (and leaves the parse position just after index 8)
This is independent of formatting.  If you want to not show a decimal point
where there might be no digits after the decimal point, use
setDecimalSeparatorAlwaysShown.
<p>
setDecimalSeparatorAlwaysShown : only affects formatting, and only where
there might be no digits after the decimal point, such as with a pattern
like \"#,##0.##\", e.g.,
if true,  3456.00 -> \"3,456.\"
if false, 3456.00 -> \"3456\"
This is independent of parsing.  If you want parsing to stop at the decimal
point, use setParseIntegerOnly.

<p>
You can also use forms of the <code>parse</code> and <code>format</code>
methods with <code>ParsePosition</code> and <code>FieldPosition</code> to
allow you to:
<ul>
<li> progressively parse through pieces of a string
<li> align the decimal point and other areas
</ul>
For example, you can align numbers in two ways:
<ol>
<li> If you are using a monospaced font with spacing for alignment,
     you can pass the <code>FieldPosition</code> in your format call, with
     <code>field</code> = <code>INTEGER_FIELD</code>. On output,
     <code>getEndIndex</code> will be set to the offset between the
     last character of the integer and the decimal. Add
     (desiredSpaceCount - getEndIndex) spaces at the front of the string.

<li> If you are using proportional fonts,
     instead of padding with spaces, measure the width
     of the string in pixels from the start to <code>getEndIndex</code>.
     Then move the pen by
     (desiredPixelWidth - widthToAlignmentPoint) before drawing the text.
     It also works where there is no decimal, but possibly additional
     characters at the end, e.g., with parentheses in negative
     numbers: \"(12)\" for -12.
</ol>

<h4><a name=\"synchronization\">Synchronization</a></h4>

<p>
Number formats are generally not synchronized.
It is recommended to create separate format instances for each thread.
If multiple threads access a format concurrently, it must be synchronized
externally.

@see          DecimalFormat
@see          ChoiceFormat
@version      1.65, 05/10/04
@author       Mark Davis
@author       Helena Shih"
      classrelation 1911579 // <generalisation>
	relation 1911579 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1911579 // <generalisation>
	  b parent class_ref 984731 // Format
      end

      attribute 2888603 "INTEGER_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field constant used to construct a FieldPosition object. Signifies that
the position of the integer part of a formatted number should be returned.
@see java.text.FieldPosition
"
      end

      attribute 2888731 "FRACTION_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field constant used to construct a FieldPosition object. Signifies that
the position of the fraction part of a formatted number should be returned.
@see java.text.FieldPosition
"
      end

      operation 7804059 "format"
	public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param inout name "number" explicit_type "Object"
	  param inout name "toAppendTo" type class_ref 198171 // StringBuffer
	  param inout name "pos" type class_ref 701083 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a number and appends the resulting text to the given string
buffer.
The number can be of any subclass of {@link java.lang.Number}.
<p>
This implementation extracts the number's value using
{@link java.lang.Number#longValue()} for all integral type values that
can be converted to <code>long</code> without loss of information,
including <code>BigInteger</code> values with a
{@link java.math.BigInteger#bitLength() bit length} of less than 64,
and {@link java.lang.Number#doubleValue()} for all other types. It
then calls
{@link #format(long,java.lang.StringBuffer,java.text.FieldPosition)}
or {@link #format(double,java.lang.StringBuffer,java.text.FieldPosition)}.
This may result in loss of magnitude information and precision for
<code>BigInteger</code> and <code>BigDecimal</code> values.
@param number     the number to format
@param toAppendTo the <code>StringBuffer</code> to which the formatted
                  text is to be appended
@param pos        On input: an alignment field, if desired.
                  On output: the offsets of the alignment field.
@return           the value passed in as <code>toAppendTo</code>
@exception        IllegalArgumentException if <code>number</code> is
                  null or not an instance of <code>Number</code>.
@exception        NullPointerException if <code>toAppendTo</code> or
                  <code>pos</code> is null
@see              java.text.FieldPosition"
      end

      operation 7804187 "parseObject"
	public explicit_return_type "Object"
	nparams 2
	  param in name "source" explicit_type "String"
	  param inout name "pos" type class_ref 984987 // ParsePosition
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from a string to produce a <code>Number</code>.
<p>
The method attempts to parse text starting at the index given by
<code>pos</code>.
If parsing succeeds, then the index of <code>pos</code> is updated
to the index after the last character used (parsing does not necessarily
use all characters up to the end of the string), and the parsed
number is returned. The updated <code>pos</code> can be used to
indicate the starting point for the next call to this method.
If an error occurs, then the index of <code>pos</code> is not
changed, the error index of <code>pos</code> is set to the index of
the character where the error occurred, and null is returned.
<p>
See the {@link #parse(String, ParsePosition)} method for more information
on number parsing.

@param source A <code>String</code>, part of which should be parsed.
@param pos A <code>ParsePosition</code> object with index and error
           index information as described above.
@return A <code>Number</code> parsed from the string. In case of
        error, returns null.
@exception NullPointerException if <code>pos</code> is null."
      end

      operation 7804315 "format"
	public explicit_return_type "String"
	nparams 1
	  param in name "number" explicit_type "double"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specialization of format.
@see java.text.Format#format"
      end

      operation 7804443 "format"
	public explicit_return_type "String"
	nparams 1
	  param in name "number" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specialization of format.
@see java.text.Format#format"
      end

      operation 7804571 "format"
	abstract public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "double"
	  param inout name "toAppendTo" type class_ref 198171 // StringBuffer
	  param inout name "pos" type class_ref 701083 // FieldPosition
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specialization of format.
@see java.text.Format#format"
      end

      operation 7804699 "format"
	abstract public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "long"
	  param inout name "toAppendTo" type class_ref 198171 // StringBuffer
	  param inout name "pos" type class_ref 701083 // FieldPosition
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specialization of format.
@see java.text.Format#format"
      end

      operation 7804827 "parse"
	abstract public return_type class_ref 413979 // Number
	nparams 2
	  param in name "source" explicit_type "String"
	  param inout name "parsePosition" type class_ref 984987 // ParsePosition
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Long if possible (e.g., within the range [Long.MIN_VALUE,
Long.MAX_VALUE] and with no decimals), otherwise a Double.
If IntegerOnly is set, will stop at a decimal
point (or equivalent; e.g., for rational numbers \"1 2/3\", will stop
after the 1).
Does not throw an exception; if no object can be parsed, index is
unchanged!
@see java.text.NumberFormat#isParseIntegerOnly
@see java.text.Format#parseObject"
      end

      operation 7804955 "parse"
	public return_type class_ref 413979 // Number
	nparams 1
	  param in name "source" explicit_type "String"
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from the beginning of the given string to produce a number.
The method may not use the entire text of the given string.
<p>
See the {@link #parse(String, ParsePosition)} method for more information
on number parsing.

@param source A <code>String</code> whose beginning should be parsed.
@return A <code>Number</code> parsed from the string.
@exception ParseException if the beginning of the specified string
           cannot be parsed."
      end

      operation 7805083 "isParseIntegerOnly"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this format will parse numbers as integers only.
For example in the English locale, with ParseIntegerOnly true, the
string \"1234.\" would be parsed as the integer value 1234 and parsing
would stop at the \".\" character.  Of course, the exact format accepted
by the parse operation is locale dependant and determined by sub-classes
of NumberFormat."
      end

      operation 7805211 "setParseIntegerOnly"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether or not numbers should be parsed as integers only.
@see #isParseIntegerOnly"
      end

      operation 7805339 "getInstance"
	class_operation public return_type class_ref 985371 // NumberFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "============== Locale Stuff =====================

Returns a general-purpose number format for the current default locale.
This is the same as calling
{@link #getNumberInstance() getNumberInstance()}."
      end

      operation 7805467 "getInstance"
	class_operation public return_type class_ref 985371 // NumberFormat
	nparams 1
	  param inout name "inLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a general-purpose number format for the specified locale.
This is the same as calling
{@link #getNumberInstance(java.util.Locale) getNumberInstance(inLocale)}."
      end

      operation 7805595 "getNumberInstance"
	class_operation public return_type class_ref 985371 // NumberFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a general-purpose number format for the current default locale."
      end

      operation 7805723 "getNumberInstance"
	class_operation public return_type class_ref 985371 // NumberFormat
	nparams 1
	  param inout name "inLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a general-purpose number format for the specified locale."
      end

      operation 7805851 "getIntegerInstance"
	class_operation public return_type class_ref 985371 // NumberFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an integer number format for the current default locale. The
returned number format is configured to round floating point numbers
to the nearest integer using IEEE half-even rounding (see {@link 
java.math.BigDecimal#ROUND_HALF_EVEN ROUND_HALF_EVEN}) for formatting,
and to parse only the integer part of an input string (see {@link
#isParseIntegerOnly isParseIntegerOnly}).

@return a number format for integer values
@since 1.4"
      end

      operation 7805979 "getIntegerInstance"
	class_operation public return_type class_ref 985371 // NumberFormat
	nparams 1
	  param inout name "inLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an integer number format for the specified locale. The
returned number format is configured to round floating point numbers
to the nearest integer using IEEE half-even rounding (see {@link 
java.math.BigDecimal#ROUND_HALF_EVEN ROUND_HALF_EVEN}) for formatting,
and to parse only the integer part of an input string (see {@link
#isParseIntegerOnly isParseIntegerOnly}).

@param inLocale the locale for which a number format is needed
@return a number format for integer values
@since 1.4"
      end

      operation 7806107 "getCurrencyInstance"
	class_operation public return_type class_ref 985371 // NumberFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a currency format for the current default locale."
      end

      operation 7806235 "getCurrencyInstance"
	class_operation public return_type class_ref 985371 // NumberFormat
	nparams 1
	  param inout name "inLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a currency format for the specified locale."
      end

      operation 7806363 "getPercentInstance"
	class_operation public return_type class_ref 985371 // NumberFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a percentage format for the current default locale."
      end

      operation 7806491 "getPercentInstance"
	class_operation public return_type class_ref 985371 // NumberFormat
	nparams 1
	  param inout name "inLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a percentage format for the specified locale."
      end

      operation 7806619 "getScientificInstance"
	class_operation package return_type class_ref 985371 // NumberFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a scientific format for the current default locale.

public"
      end

      operation 7806747 "getScientificInstance"
	class_operation package return_type class_ref 985371 // NumberFormat
	nparams 1
	  param inout name "inLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a scientific format for the specified locale.

public"
      end

      operation 7806875 "getAvailableLocales"
	class_operation public return_type class_ref 138907 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all locales for which the
<code>get*Instance</code> methods of this class can return
localized instances.
The array returned must contain at least a <code>Locale</code>
instance equal to {@link java.util.Locale#US Locale.US}.

@return An array of locales for which localized
        <code>NumberFormat</code> instances are available."
      end

      operation 7807003 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides hashCode"
      end

      operation 7807131 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides equals"
      end

      operation 7807259 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides Cloneable"
      end

      operation 7807387 "isGroupingUsed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if grouping is used in this format. For example, in the
English locale, with grouping on, the number 1234567 might be formatted
as \"1,234,567\". The grouping separator as well as the size of each group
is locale dependant and is determined by sub-classes of NumberFormat.
@see #setGroupingUsed"
      end

      operation 7807515 "setGroupingUsed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set whether or not grouping will be used in this format.
@see #isGroupingUsed"
      end

      operation 7807643 "getMaximumIntegerDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of digits allowed in the integer portion of a
number.
@see #setMaximumIntegerDigits"
      end

      operation 7807771 "setMaximumIntegerDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of digits allowed in the integer portion of a
number. maximumIntegerDigits must be >= minimumIntegerDigits.  If the
new value for maximumIntegerDigits is less than the current value
of minimumIntegerDigits, then minimumIntegerDigits will also be set to
the new value.
@param newValue the maximum number of integer digits to be shown; if
less than zero, then zero is used. The concrete subclass may enforce an
upper limit to this value appropriate to the numeric type being formatted.
@see #getMaximumIntegerDigits"
      end

      operation 7807899 "getMinimumIntegerDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum number of digits allowed in the integer portion of a
number.
@see #setMinimumIntegerDigits"
      end

      operation 7808027 "setMinimumIntegerDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the minimum number of digits allowed in the integer portion of a
number. minimumIntegerDigits must be <= maximumIntegerDigits.  If the
new value for minimumIntegerDigits exceeds the current value
of maximumIntegerDigits, then maximumIntegerDigits will also be set to
the new value
@param newValue the minimum number of integer digits to be shown; if
less than zero, then zero is used. The concrete subclass may enforce an
upper limit to this value appropriate to the numeric type being formatted.
@see #getMinimumIntegerDigits"
      end

      operation 7808155 "getMaximumFractionDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of digits allowed in the fraction portion of a
number.
@see #setMaximumFractionDigits"
      end

      operation 7808283 "setMaximumFractionDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of digits allowed in the fraction portion of a
number. maximumFractionDigits must be >= minimumFractionDigits.  If the
new value for maximumFractionDigits is less than the current value
of minimumFractionDigits, then minimumFractionDigits will also be set to
the new value.
@param newValue the maximum number of fraction digits to be shown; if
less than zero, then zero is used. The concrete subclass may enforce an
upper limit to this value appropriate to the numeric type being formatted.
@see #getMaximumFractionDigits"
      end

      operation 7808411 "getMinimumFractionDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum number of digits allowed in the fraction portion of a
number.
@see #setMinimumFractionDigits"
      end

      operation 7808539 "setMinimumFractionDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the minimum number of digits allowed in the fraction portion of a
number. minimumFractionDigits must be <= maximumFractionDigits.  If the
new value for minimumFractionDigits exceeds the current value
of maximumFractionDigits, then maximumIntegerDigits will also be set to
the new value
@param newValue the minimum number of fraction digits to be shown; if
less than zero, then zero is used. The concrete subclass may enforce an
upper limit to this value appropriate to the numeric type being formatted.
@see #getMinimumFractionDigits"
      end

      operation 7808667 "getCurrency"
	public return_type class_ref 144795 // Currency
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the currency used by this number format when formatting
currency values. The initial value is derived in a locale dependent
way. The returned value may be null if no valid
currency could be determined and no currency has been set using
{@link #setCurrency(java.util.Currency) setCurrency}.
<p>
The default implementation throws
<code>UnsupportedOperationException</code>.

@return the currency used by this number format, or <code>null</code>
@exception UnsupportedOperationException if the number format class
doesn't implement currency formatting
@since 1.4"
      end

      operation 7808795 "setCurrency"
	public explicit_return_type "void"
	nparams 1
	  param inout name "currency" type class_ref 144795 // Currency
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the currency used by this number format when formatting
currency values. This does not update the minimum or maximum
number of fraction digits used by the number format.
<p>
The default implementation throws
<code>UnsupportedOperationException</code>.

@param currency the new currency to be used by this number format
@exception UnsupportedOperationException if the number format class
doesn't implement currency formatting
@exception NullPointerException if <code>currency</code> is null
@since 1.4"
      end

      operation 7808923 "getInstance"
	class_operation private return_type class_ref 985371 // NumberFormat
	nparams 2
	  param inout name "desiredLocale" type class_ref 138907 // Locale
	  param in name "choice" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " =======================privates==============================="
      end

      operation 7809051 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "First, read in the default serializable data.

Then, if <code>serialVersionOnStream</code> is less than 1, indicating that
the stream was written by JDK 1.1,
set the <code>int</code> fields such as <code>maximumIntegerDigits</code>
to be equal to the <code>byte</code> fields such as <code>maxIntegerDigits</code>,
since the <code>int</code> fields were not present in JDK 1.1.
Finally, set serialVersionOnStream back to the maximum allowed value so that
default serialization will work properly if this object is streamed out again.

<p>If <code>minimumIntegerDigits</code> is greater than
<code>maximumIntegerDigits</code> or <code>minimumFractionDigits</code>
is greater than <code>maximumFractionDigits</code>, then the stream data
is invalid and this method throws an <code>InvalidObjectException</code>.
In addition, if any of these values is negative, then this method throws
an <code>InvalidObjectException</code>.

@since 1.2"
      end

      operation 7809179 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write out the default serializable data, after first setting
the <code>byte</code> fields such as <code>maxIntegerDigits</code> to be
equal to the <code>int</code> fields such as <code>maximumIntegerDigits</code>
(or to <code>Byte.MAX_VALUE</code>, whichever is smaller), for compatibility
with the JDK 1.1 version of the stream format.

@since 1.2"
      end

      classrelation 1911707 // cachedLocaleData (<unidirectional association>)
	relation 1911707 --->
	  a role_name "cachedLocaleData" init_value "=  new Hashtable(3)" class_relation const_relation private
	    comment "
Cache to hold the NumberPatterns of a Locale.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1911707 // cachedLocaleData (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end

      attribute 2888859 "NUMBERSTYLE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Constants used by factory methods to specify a style of format."
      end

      attribute 2888987 "CURRENCYSTYLE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2889115 "PERCENTSTYLE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2889243 "SCIENTIFICSTYLE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2889371 "INTEGERSTYLE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2889499 "groupingUsed"
	private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True if the the grouping (i.e. thousands) separator is used when
formatting and parsing numbers.

@serial
@see #isGroupingUsed
"
      end

      attribute 2889627 "maxIntegerDigits"
	private explicit_type "byte"
	init_value "=  40"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum number of digits allowed in the integer portion of a
number.  <code>maxIntegerDigits</code> must be greater than or equal to
<code>minIntegerDigits</code>.
<p>
<strong>Note:</strong> This field exists only for serialization
compatibility with JDK 1.1.  In Java platform 2 v1.2 and higher, the new
<code>int</code> field <code>maximumIntegerDigits</code> is used instead.
When writing to a stream, <code>maxIntegerDigits</code> is set to
<code>maximumIntegerDigits</code> or <code>Byte.MAX_VALUE</code>,
whichever is smaller.  When reading from a stream, this field is used
only if <code>serialVersionOnStream</code> is less than 1. 

@serial
@see #getMaximumIntegerDigits
"
      end

      attribute 2889755 "minIntegerDigits"
	private explicit_type "byte"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum number of digits allowed in the integer portion of a
number.  <code>minimumIntegerDigits</code> must be less than or equal to
<code>maximumIntegerDigits</code>.
<p>
<strong>Note:</strong> This field exists only for serialization
compatibility with JDK 1.1.  In Java platform 2 v1.2 and higher, the new
<code>int</code> field <code>minimumIntegerDigits</code> is used instead.
When writing to a stream, <code>minIntegerDigits</code> is set to
<code>minimumIntegerDigits</code> or <code>Byte.MAX_VALUE</code>,
whichever is smaller.  When reading from a stream, this field is used
only if <code>serialVersionOnStream</code> is less than 1. 

@serial
@see #getMinimumIntegerDigits
"
      end

      attribute 2889883 "maxFractionDigits"
	private explicit_type "byte"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum number of digits allowed in the fractional portion of a
number.  <code>maximumFractionDigits</code> must be greater than or equal to
<code>minimumFractionDigits</code>.
<p>
<strong>Note:</strong> This field exists only for serialization
compatibility with JDK 1.1.  In Java platform 2 v1.2 and higher, the new
<code>int</code> field <code>maximumFractionDigits</code> is used instead.
When writing to a stream, <code>maxFractionDigits</code> is set to
<code>maximumFractionDigits</code> or <code>Byte.MAX_VALUE</code>,
whichever is smaller.  When reading from a stream, this field is used
only if <code>serialVersionOnStream</code> is less than 1. 

@serial
@see #getMaximumFractionDigits

 invariant, >= minFractionDigits"
      end

      attribute 2890011 "minFractionDigits"
	private explicit_type "byte"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum number of digits allowed in the fractional portion of a
number.  <code>minimumFractionDigits</code> must be less than or equal to
<code>maximumFractionDigits</code>.
<p>
<strong>Note:</strong> This field exists only for serialization
compatibility with JDK 1.1.  In Java platform 2 v1.2 and higher, the new
<code>int</code> field <code>minimumFractionDigits</code> is used instead.
When writing to a stream, <code>minFractionDigits</code> is set to
<code>minimumFractionDigits</code> or <code>Byte.MAX_VALUE</code>,
whichever is smaller.  When reading from a stream, this field is used
only if <code>serialVersionOnStream</code> is less than 1. 

@serial
@see #getMinimumFractionDigits
"
      end

      attribute 2890139 "parseIntegerOnly"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True if this format will parse numbers as integers only.

@serial
@see #isParseIntegerOnly
"
      end

      attribute 2890267 "maximumIntegerDigits"
	private explicit_type "int"
	init_value "=  40"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " new fields for 1.2.  byte is too small for integer digits.

The maximum number of digits allowed in the integer portion of a
number.  <code>maximumIntegerDigits</code> must be greater than or equal to
<code>minimumIntegerDigits</code>.

@serial
@since 1.2
@see #getMaximumIntegerDigits
"
      end

      attribute 2890395 "minimumIntegerDigits"
	private explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum number of digits allowed in the integer portion of a
number.  <code>minimumIntegerDigits</code> must be less than or equal to
<code>maximumIntegerDigits</code>.

@serial
@since 1.2
@see #getMinimumIntegerDigits
"
      end

      attribute 2890523 "maximumFractionDigits"
	private explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum number of digits allowed in the fractional portion of a
number.  <code>maximumFractionDigits</code> must be greater than or equal to
<code>minimumFractionDigits</code>.

@serial
@since 1.2
@see #getMaximumFractionDigits

 invariant, >= minFractionDigits"
      end

      attribute 2890651 "minimumFractionDigits"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum number of digits allowed in the fractional portion of a
number.  <code>minimumFractionDigits</code> must be less than or equal to
<code>maximumFractionDigits</code>.

@serial
@since 1.2
@see #getMinimumFractionDigits
"
      end

      attribute 2890779 "currentSerialVersion"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2890907 "serialVersionOnStream"
	private explicit_type "int"
	init_value "=  currentSerialVersion"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Describes the version of <code>NumberFormat</code> present on the stream.
Possible values are:
<ul>
<li><b>0</b> (or uninitialized): the JDK 1.1 version of the stream format.
    In this version, the <code>int</code> fields such as
    <code>maximumIntegerDigits</code> were not present, and the <code>byte</code>
    fields such as <code>maxIntegerDigits</code> are used instead.

<li><b>1</b>: the 1.2 version of the stream format.  The values of the
    <code>byte</code> fields such as <code>maxIntegerDigits</code> are ignored,
    and the <code>int</code> fields such as <code>maximumIntegerDigits</code>
    are used instead.
</ul>
When streaming out a <code>NumberFormat</code>, the most recent format
(corresponding to the highest allowable <code>serialVersionOnStream</code>)
is always written.

@serial
@since 1.2
"
      end

      attribute 2891035 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -2308460125733713944L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Removed \"implements Cloneable\" clause.  Needs to update serialization
 ID for backward compatibility."
      end

      class 1120411 "Field"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end
    end

    class 985499 "CollationElementIterator"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>CollationElementIterator</code> class is used as an iterator
to walk through each character of an international string. Use the iterator
to return the ordering priority of the positioned character. The ordering
priority of a character, which we refer to as a key, defines how a character
is collated in the given collation object.

<p>
For example, consider the following in Spanish:
<blockquote>
<pre>
\"ca\" -> the first key is key('c') and second key is key('a').
\"cha\" -> the first key is key('ch') and second key is key('a').
</pre>
</blockquote>
And in German,
<blockquote>
<pre>
\"\\u00e4b\"-> the first key is key('a'), the second key is key('e'), and
the third key is key('b').
</pre>
</blockquote>
The key of a character is an integer composed of primary order(short),
secondary order(byte), and tertiary order(byte). Java strictly defines
the size and signedness of its primitive data types. Therefore, the static
functions <code>primaryOrder</code>, <code>secondaryOrder</code>, and
<code>tertiaryOrder</code> return <code>int</code>, <code>short</code>,
and <code>short</code> respectively to ensure the correctness of the key
value.

<p>
Example of the iterator usage,
<blockquote>
<pre>

 String testString = \"This is a test\";
 RuleBasedCollator ruleBasedCollator = (RuleBasedCollator)Collator.getInstance();
 CollationElementIterator collationElementIterator = ruleBasedCollator.getCollationElementIterator(testString);
 int primaryOrder = CollationElementIterator.primaryOrder(collationElementIterator.next());
</pre>
</blockquote>

<p>
<code>CollationElementIterator.next</code> returns the collation order
of the next character. A collation order consists of primary order,
secondary order and tertiary order. The data type of the collation
order is <strong>int</strong>. The first 16 bits of a collation order
is its primary order; the next 8 bits is the secondary order and the
last 8 bits is the tertiary order.

@see                Collator
@see                RuleBasedCollator
@version            1.24 07/27/98
@author             Helena Shih, Laura Werner, Richard Gillam"
      attribute 2891931 "NULLORDER"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xffffffff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Null order which indicates the end of string is reached by the
cursor.
"
      end

      operation 7811739 "CollationElementIterator"
	package explicit_return_type ""
	nparams 2
	  param in name "sourceText" explicit_type "String"
	  param inout name "owner" type class_ref 809883 // RuleBasedCollator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CollationElementIterator constructor.  This takes the source string and
the collation object.  The cursor will walk thru the source string based
on the predefined collation rules.  If the source string is empty,
NULLORDER will be returned on the calls to next().
@param sourceText the source string.
@param order the collation object."
      end

      operation 7811867 "CollationElementIterator"
	package explicit_return_type ""
	nparams 2
	  param inout name "sourceText" type class_ref 447003 // CharacterIterator
	  param inout name "owner" type class_ref 809883 // RuleBasedCollator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CollationElementIterator constructor.  This takes the source string and
the collation object.  The cursor will walk thru the source string based
on the predefined collation rules.  If the source string is empty,
NULLORDER will be returned on the calls to next().
@param sourceText the source string.
@param order the collation object."
      end

      operation 7811995 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the cursor to the beginning of the string.  The next call
to next() will return the first collation element in the string."
      end

      operation 7812123 "next"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next collation element in the string.  <p>This iterator iterates
over a sequence of collation elements that were built from the string.
Because there isn't necessarily a one-to-one mapping from characters to
collation elements, this doesn't mean the same thing as \"return the
collation element [or ordering priority] of the next character in the
string\".</p>
<p>This function returns the collation element that the iterator is currently
pointing to and then updates the internal pointer to point to the next element.
previous() updates the pointer first and then returns the element.  This
means that when you change direction while iterating (i.e., call next() and
then call previous(), or call previous() and then call next()), you'll get
back the same element twice.</p>"
      end

      operation 7812251 "previous"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the previous collation element in the string.  <p>This iterator iterates
over a sequence of collation elements that were built from the string.
Because there isn't necessarily a one-to-one mapping from characters to
collation elements, this doesn't mean the same thing as \"return the
collation element [or ordering priority] of the previous character in the
string\".</p>
<p>This function updates the iterator's internal pointer to point to the
collation element preceding the one it's currently pointing to and then
returns that element, while next() returns the current element and then
updates the pointer.  This means that when you change direction while
iterating (i.e., call next() and then call previous(), or call previous()
and then call next()), you'll get back the same element twice.</p>
@since 1.2"
      end

      operation 7812379 "primaryOrder"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "order" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the primary component of a collation element.
@param order the collation element
@return the element's primary component"
      end

      operation 7812507 "secondaryOrder"
	class_operation public explicit_return_type "short"
	nparams 1
	  param in name "order" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the secondary component of a collation element.
@param order the collation element
@return the element's secondary component"
      end

      operation 7812635 "tertiaryOrder"
	class_operation public explicit_return_type "short"
	nparams 1
	  param in name "order" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the tertiary component of a collation element.
@param order the collation element
@return the element's tertiary component"
      end

      operation 7812763 "strengthOrder"
	package explicit_return_type "int"
	nparams 1
	  param in name "order" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the comparison order in the desired strength.  Ignore the other
 differences.
 @param order The order value"
      end

      operation 7812891 "setOffset"
	public explicit_return_type "void"
	nparams 1
	  param in name "newOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the iterator to point to the collation element corresponding to
the specified character (the parameter is a CHARACTER offset in the
original string, not an offset into its corresponding sequence of
collation elements).  The value returned by the next call to next()
will be the collation element corresponding to the specified position
in the text.  If that position is in the middle of a contracting
character sequence, the result of the next call to next() is the
collation element for that sequence.  This means that getOffset()
is not guaranteed to return the same value as was passed to a preceding
call to setOffset().

@param newOffset The new character offset into the original text.
@since 1.2"
      end

      operation 7813019 "getOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character offset in the original text corresponding to the next
collation element.  (That is, getOffset() returns the position in the text
corresponding to the collation element that will be returned by the next
call to next().)  This value will always be the index of the FIRST character
corresponding to the collation element (a contracting character sequence is
when two or more characters all correspond to the same collation element).
This means if you do setOffset(x) followed immediately by getOffset(), getOffset()
won't necessarily return x.

@return The character offset in the original text corresponding to the collation
element that will be returned by the next call to next().
@since 1.2"
      end

      operation 7813147 "getMaxExpansion"
	public explicit_return_type "int"
	nparams 1
	  param in name "order" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the maximum length of any expansion sequences that end
with the specified comparison order.
@param order a collation order returned by previous or next.
@return the maximum length of any expansion sequences ending
        with the specified order.
@since 1.2"
      end

      operation 7813275 "setText"
	public explicit_return_type "void"
	nparams 1
	  param in name "source" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a new string over which to iterate.

@param source  the new source text
@since 1.2"
      end

      operation 7813403 "setText"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 447003 // CharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a new string over which to iterate.

@param source  the new source text.
@since 1.2"
      end

      operation 7813531 "isThaiPreVowel"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "============================================================
 privates
============================================================

Determine if a character is a Thai vowel (which sorts after
its base consonant)."
      end

      operation 7813659 "isThaiBaseConsonant"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if a character is a Thai base consonant"
      end

      operation 7813787 "isLaoPreVowel"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if a character is a Lao vowel (which sorts after
its base consonant)."
      end

      operation 7813915 "isLaoBaseConsonant"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if a character is a Lao base consonant"
      end

      operation 7814043 "makeReorderedBuffer"
	private explicit_return_type "int"
	nparams 4
	  param in name "colFirst" explicit_type "int"
	  param in name "lastValue" explicit_type "int"
	  param in name "lastExpansion" explicit_type "int"
	  param inout name "forward" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method produces a buffer which contains the collation
elements for the two characters, with colFirst's values preceding
another character's.  Presumably, the other character precedes colFirst
in logical order (otherwise you wouldn't need this method would you?).
The assumption is that the other char's value(s) have already been
computed.  If this char has a single element it is passed to this
method as lastValue, and lastExpansion is null.  If it has an
expansion it is passed in lastExpansion, and colLastValue is ignored."
      end

      operation 7814171 "isIgnorable"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "order" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check if a comparison order is ignorable.
 @return true if a character is ignorable, false otherwise."
      end

      operation 7814299 "nextContractChar"
	private explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the ordering priority of the next contracting character in the
string.
@param ch the starting character of a contracting character token
@return the next contracting character's ordering.  Returns NULLORDER
if the end of string is reached."
      end

      operation 7814427 "prevContractChar"
	private explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the ordering priority of the previous contracting character in the
string.
@param ch the starting character of a contracting character token
@return the next contracting character's ordering.  Returns NULLORDER
if the end of string is reached."
      end

      attribute 2892059 "UNMAPPEDCHARVALUE"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0x7FFF0000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2892187 "text"
	private explicit_type "Normalizer"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2892315 "buffer"
	private explicit_type "int"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2892443 "expIndex"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1911963 // key (<unidirectional association>)
	relation 1911963 --->
	  a role_name "key" init_value "=  new StringBuffer(5)" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1911963 // key (<unidirectional association>)
	  b parent class_ref 198171 // StringBuffer
      end

      attribute 2892571 "swapOrder"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1912091 // ordering (<unidirectional association>)
	relation 1912091 --->
	  a role_name "ordering" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1912091 // ordering (<unidirectional association>)
	  b parent class_ref 985627 // RBCollationTables
      end

      classrelation 1912219 // owner (<unidirectional association>)
	relation 1912219 --->
	  a role_name "owner" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1912219 // owner (<unidirectional association>)
	  b parent class_ref 809883 // RuleBasedCollator
      end
    end

    class 985627 "RBCollationTables"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class contains the static state of a RuleBasedCollator: The various
tables that are used by the collation routines.  Several RuleBasedCollators
can share a single RBCollationTables object, easing memory requirements and
improving performance."
      operation 7858075 "RBCollationTables"
	public explicit_return_type ""
	nparams 2
	  param in name "rules" explicit_type "String"
	  param in name "decmp" explicit_type "int"
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "===========================================================================================
  The following diagram shows the data structure of the RBCollationTables object.
  Suppose we have the rule, where 'o-umlaut' is the unicode char 0x00F6.
  \"a, A < b, B < c, C, ch, cH, Ch, CH < d, D ... < o, O; 'o-umlaut'/E, 'O-umlaut'/E ...\".
  What the rule says is, sorts 'ch'ligatures and 'c' only with tertiary difference and
  sorts 'o-umlaut' as if it's always expanded with 'e'.

 mapping table                     contracting list           expanding list
 (contains all unicode char
  entries)                   ___    ____________       _________________________
  ________                +>|_*_|->|'c' |v('c') |  +>|v('o')|v('umlaut')|v('e')|
 |_\\u0001_|-> v('\\u0001') | |_:_|  |------------|  | |-------------------------|
 |_\\u0002_|-> v('\\u0002') | |_:_|  |'ch'|v('ch')|  | |             :           |
 |____:___|               | |_:_|  |------------|  | |-------------------------|
 |____:___|               |        |'cH'|v('cH')|  | |             :           |
 |__'a'___|-> v('a')      |        |------------|  | |-------------------------|
 |__'b'___|-> v('b')      |        |'Ch'|v('Ch')|  | |             :           |
 |____:___|               |        |------------|  | |-------------------------|
 |____:___|               |        |'CH'|v('CH')|  | |             :           |
 |___'c'__|----------------         ------------   | |-------------------------|
 |____:___|                                        | |             :           |
 |o-umlaut|----------------------------------------  |_________________________|
 |____:___|

 Noted by Helena Shih on 6/23/97
============================================================================================"
      end

      class 987547 "BuildAPI"
	visibility package 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 7858203 "BuildAPI"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Private constructor.  Prevents anyone else besides RBTableBuilder
from gaining direct access to the internals of this class."
	end

	operation 7858331 "fillInTables"
	  package explicit_return_type "void"
	  nparams 8
	    param inout name "f2ary" explicit_type "boolean"
	    param inout name "swap" explicit_type "boolean"
	    param inout name "map" explicit_type "UCompactIntArray"
	    param inout name "cTbl" type class_ref 153883 // Vector
	    param inout name "eTbl" type class_ref 153883 // Vector
	    param inout name "cFlgs" explicit_type "IntHashtable"
	    param in name "mso" explicit_type "short"
	    param in name "mto" explicit_type "short"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "This function is used by RBTableBuilder to fill in all the members of this
object.  (Effectively, the builder class functions as a \"friend\" of this
class, but to avoid changing too much of the logic, it carries around \"shadow\"
copies of all these variables until the end of the build process and then
copies them en masse into the actual tables object once all the construction
logic is complete.  This function does that \"copying en masse\".
@param f2ary The value for frenchSec (the French-secondary flag)
@param swap The value for SE Asian swapping rule
@param map The collator's character-mapping table (the value for mapping)
@param cTbl The collator's contracting-character table (the value for contractTable)
@param eTbl The collator's expanding-character table (the value for expandTable)
@param cFlgs The hash table of characters that participate in contracting-
             character sequences (the value for contractFlags)
@param mso The value for maxSecOrder
@param mto The value for maxTerOrder"
	end
      end

      operation 7858459 "getRules"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the table-based rules for the collation object.
@return returns the collation rules that the table collation object
was created from."
      end

      operation 7858587 "isFrenchSec"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7858715 "isSEAsianSwapping"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7858843 "getContractValues"
	package return_type class_ref 153883 // Vector
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ==============================================================      
 internal (for use by CollationElementIterator)
 ==============================================================

 Get the entry of hash table of the contracting string in the collation
 table.
 @param ch the starting character of the contracting string"
      end

      operation 7858971 "getContractValuesImpl"
	private return_type class_ref 153883 // Vector
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "get contract values from contractTable by index"
      end

      operation 7859099 "usedInContractSeq"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this character appears anywhere in a contracting
character sequence.  (Used by CollationElementIterator.setOffset().)"
      end

      operation 7859227 "getMaxExpansion"
	package explicit_return_type "int"
	nparams 1
	  param in name "order" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the maximum length of any expansion sequences that end
with the specified comparison order.

@param order a collation order returned by previous or next.
@return the maximum length of any expansion seuences ending
        with the specified order.

@see CollationElementIterator#getMaxExpansion"
      end

      operation 7859355 "getExpandValueList"
	package explicit_return_type "int"
	nparams 1
	  param in name "order" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the entry of hash table of the expanding string in the collation
 table.
 @param idx the index of the expanding string value list"
      end

      operation 7859483 "getUnicodeOrder"
	package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the comarison order of a character from the collation table.
 @return the comparison order of a character."
      end

      operation 7859611 "getMaxSecOrder"
	package explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7859739 "getMaxTerOrder"
	package explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7859867 "reverse"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "result" type class_ref 198171 // StringBuffer
	  param in name "from" explicit_type "int"
	  param in name "to" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reverse a string.

shemran/Note: this is used for secondary order value reverse, no
              need to consider supplementary pair."
      end

      operation 7859995 "getEntry"
	class_operation package explicit_return_type "int"
	nparams 3
	  param inout name "list" type class_ref 153883 // Vector
	  param in name "name" explicit_type "String"
	  param inout name "fwd" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2913179 "EXPANDCHARINDEX"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0x7E000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ==============================================================
 constants
 ==============================================================
sherman/Todo: is the value big enough?????
 Expand index follows"
      end

      attribute 2913307 "CONTRACTCHARINDEX"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0x7F000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " contract indexes follow"
      end

      attribute 2913435 "UNMAPPED"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0xFFFFFFFF"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2913563 "PRIMARYORDERMASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0xffff0000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2913691 "SECONDARYORDERMASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0x0000ff00"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2913819 "TERTIARYORDERMASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0x000000ff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2913947 "PRIMARYDIFFERENCEONLY"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0xffff0000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2914075 "SECONDARYDIFFERENCEONLY"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0xffffff00"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2914203 "PRIMARYORDERSHIFT"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2914331 "SECONDARYORDERSHIFT"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2914459 "rules"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ==============================================================
 instance variables
 =============================================================="
      end

      attribute 2914587 "frenchSec"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2914715 "seAsianSwapping"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2914843 "mapping"
	private explicit_type "UCompactIntArray"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1918491 // contractTable (<unidirectional association>)
	relation 1918491 --->
	  a role_name "contractTable" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1918491 // contractTable (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      classrelation 1918619 // expandTable (<unidirectional association>)
	relation 1918619 --->
	  a role_name "expandTable" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1918619 // expandTable (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      attribute 2914971 "contractFlags"
	private explicit_type "IntHashtable"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2915099 "maxSecOrder"
	private explicit_type "short"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2915227 "maxTerOrder"
	private explicit_type "short"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 985755 "CollationKey"
      visibility public 
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 value class_ref 985755 // CollationKey
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>CollationKey</code> represents a <code>String</code> under the
rules of a specific <code>Collator</code> object. Comparing two
<code>CollationKey</code>s returns the relative order of the
<code>String</code>s they represent. Using <code>CollationKey</code>s
to compare <code>String</code>s is generally faster than using
<code>Collator.compare</code>. Thus, when the <code>String</code>s
must be compared multiple times, for example when sorting a list
of <code>String</code>s. It's more efficient to use <code>CollationKey</code>s.

<p>
You can not create <code>CollationKey</code>s directly. Rather,
generate them by calling <code>Collator.getCollationKey</code>.
You can only compare <code>CollationKey</code>s generated from
the same <code>Collator</code> object.

<p>
Generating a <code>CollationKey</code> for a <code>String</code>
involves examining the entire <code>String</code>
and converting it to series of bits that can be compared bitwise. This
allows fast comparisons once the keys are generated. The cost of generating
keys is recouped in faster comparisons when <code>String</code>s need
to be compared many times. On the other hand, the result of a comparison
is often determined by the first couple of characters of each <code>String</code>.
<code>Collator.compare</code> examines only as many characters as it needs which
allows it to be faster when doing single comparisons.
<p>
The following example shows how <code>CollationKey</code>s might be used
to sort a list of <code>String</code>s.
<blockquote>
<pre>
// Create an array of CollationKeys for the Strings to be sorted.
Collator myCollator = Collator.getInstance();
CollationKey[] keys = new CollationKey[3];
keys[0] = myCollator.getCollationKey(\"Tom\");
keys[1] = myCollator.getCollationKey(\"Dick\");
keys[2] = myCollator.getCollationKey(\"Harry\");
sort( keys );
<br>
//...
<br>
// Inside body of sort routine, compare keys this way
if( keys[i].compareTo( keys[j] ) > 0 )
   // swap keys[i] and keys[j]
<br>
//...
<br>
// Finally, when we've returned from sort.
System.out.println( keys[0].getSourceString() );
System.out.println( keys[1].getSourceString() );
System.out.println( keys[2].getSourceString() );
</pre>
</blockquote>

@see          Collator
@see          RuleBasedCollator
@version      1.18, 05/05/04
@author       Helena Shih"
      classrelation 1912347 // <realization>
	relation 1912347 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1912347 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      operation 7814555 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "target" type class_ref 985755 // CollationKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare this CollationKey to the target CollationKey. The collation rules of the
Collator object which created these keys are applied. <strong>Note:</strong>
CollationKeys created by different Collators can not be compared.
@param target target CollationKey
@return Returns an integer value. Value is less than zero if this is less
than target, value is zero if this and target are equal and value is greater than
zero if this is greater than target.
@see java.text.Collator#compare"
      end

      operation 7814683 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "target" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare this CollationKey and the target CollationKey for equality.
The collation rules of the Collator object which created these keys are applied.
<strong>Note:</strong> CollationKeys created by different Collators can not be
compared.
@param target the CollationKey to compare to.
@return Returns true if two objects are equal, false otherwise."
      end

      operation 7814811 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a hash code for this CollationKey. The hash value is calculated on the
key itself, not the String from which the key was created.  Thus
if x and y are CollationKeys, then x.hashCode(x) == y.hashCode() if
x.equals(y) is true.  This allows language-sensitive comparison in a hash table.
See the CollatinKey class description for an example.
@return the hash value based on the string's collation order."
      end

      operation 7814939 "getSourceString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String that this CollationKey represents."
      end

      operation 7815067 "toByteArray"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the CollationKey to a sequence of bits. If two CollationKeys
could be legitimately compared, then one could compare the byte arrays
for each of those keys to obtain the same result.  Byte arrays are
organized most significant byte first."
      end

      operation 7815195 "CollationKey"
	package explicit_return_type ""
	nparams 2
	  param in name "source" explicit_type "String"
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A CollationKey can only be generated by Collator objects."
      end

      attribute 2892699 "source"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2892827 "key"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 985883 "CollationRules"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "CollationRules contains the default en_US collation rules as a base
for building other collation tables.
<p>Note that decompositions are done before these rules are used,
so they do not have to contain accented characters, such as A-grave.
@see                RuleBasedCollator
@see                LocaleElements
@version            1.26, 12/19/03
@author             Helena Shih, Mark Davis"
      attribute 2892955 "DEFAULTRULES"
	class_attribute const_attribute package explicit_type "String"
	init_value "=  new String(
        \"\" // no FRENCH accent order by default, add in French Delta
        // IGNORABLES (up to first < character)
        // COMPLETELY IGNORE format characters
        + \"='\\u200B'=\\u200C=\\u200D=\\u200E=\\u200F\"
        // Control Characters
        + \"=\\u0000 =\\u0001 =\\u0002 =\\u0003 =\\u0004\" //null, .. eot
        + \"=\\u0005 =\\u0006 =\\u0007 =\\u0008 ='\\u0009'\" //enq, ...
        + \"='\\u000b' =\\u000e\" //vt,, so
        + \"=\\u000f ='\\u0010' =\\u0011 =\\u0012 =\\u0013\" //si, dle, dc1, dc2, dc3
        + \"=\\u0014 =\\u0015 =\\u0016 =\\u0017 =\\u0018\" //dc4, nak, syn, etb, can
        + \"=\\u0019 =\\u001a =\\u001b =\\u001c =\\u001d\" //em, sub, esc, fs, gs
        + \"=\\u001e =\\u001f =\\u007f\"                   //rs, us, del
        //....then the C1 Latin 1 reserved control codes
        + \"=\\u0080 =\\u0081 =\\u0082 =\\u0083 =\\u0084 =\\u0085\"
        + \"=\\u0086 =\\u0087 =\\u0088 =\\u0089 =\\u008a =\\u008b\"
        + \"=\\u008c =\\u008d =\\u008e =\\u008f =\\u0090 =\\u0091\"
        + \"=\\u0092 =\\u0093 =\\u0094 =\\u0095 =\\u0096 =\\u0097\"
        + \"=\\u0098 =\\u0099 =\\u009a =\\u009b =\\u009c =\\u009d\"
        + \"=\\u009e =\\u009f\"
        // IGNORE except for secondary, tertiary difference
        // Spaces
        + \";'\\u0020';'\\u00A0'\"                  // spaces
        + \";'\\u2000';'\\u2001';'\\u2002';'\\u2003';'\\u2004'\"  // spaces
        + \";'\\u2005';'\\u2006';'\\u2007';'\\u2008';'\\u2009'\"  // spaces
        + \";'\\u200A';'\\u3000';'\\uFEFF'\"                // spaces
        + \";'\\r' ;'\\t' ;'\\n';'\\f';'\\u000b'\"  // whitespace

        // Non-spacing accents

        + \";\\u0301\"          // non-spacing acute accent
        + \";\\u0300\"          // non-spacing grave accent
        + \";\\u0306\"          // non-spacing breve accent
        + \";\\u0302\"          // non-spacing circumflex accent
        + \";\\u030c\"          // non-spacing caron/hacek accent
        + \";\\u030a\"          // non-spacing ring above accent
        + \";\\u030d\"          // non-spacing vertical line above
        + \";\\u0308\"          // non-spacing diaeresis accent
        + \";\\u030b\"          // non-spacing double acute accent
        + \";\\u0303\"          // non-spacing tilde accent
        + \";\\u0307\"          // non-spacing dot above/overdot accent
        + \";\\u0304\"          // non-spacing macron accent
        + \";\\u0337\"          // non-spacing short slash overlay (overstruck diacritic)
        + \";\\u0327\"          // non-spacing cedilla accent
        + \";\\u0328\"          // non-spacing ogonek accent
        + \";\\u0323\"          // non-spacing dot-below/underdot accent
        + \";\\u0332\"          // non-spacing underscore/underline accent
        // with the rest of the general diacritical marks in binary order
        + \";\\u0305\"          // non-spacing overscore/overline
        + \";\\u0309\"          // non-spacing hook above
        + \";\\u030e\"          // non-spacing double vertical line above
        + \";\\u030f\"          // non-spacing double grave
        + \";\\u0310\"          // non-spacing chandrabindu
        + \";\\u0311\"          // non-spacing inverted breve
        + \";\\u0312\"          // non-spacing turned comma above/cedilla above
        + \";\\u0313\"          // non-spacing comma above
        + \";\\u0314\"          // non-spacing reversed comma above
        + \";\\u0315\"          // non-spacing comma above right
        + \";\\u0316\"          // non-spacing grave below
        + \";\\u0317\"          // non-spacing acute below
        + \";\\u0318\"          // non-spacing left tack below
        + \";\\u0319\"          // non-spacing tack below
        + \";\\u031a\"          // non-spacing left angle above
        + \";\\u031b\"          // non-spacing horn
        + \";\\u031c\"          // non-spacing left half ring below
        + \";\\u031d\"          // non-spacing up tack below
        + \";\\u031e\"          // non-spacing down tack below
        + \";\\u031f\"          // non-spacing plus sign below
        + \";\\u0320\"          // non-spacing minus sign below
        + \";\\u0321\"          // non-spacing palatalized hook below
        + \";\\u0322\"          // non-spacing retroflex hook below
        + \";\\u0324\"          // non-spacing double dot below
        + \";\\u0325\"          // non-spacing ring below
        + \";\\u0326\"          // non-spacing comma below
        + \";\\u0329\"          // non-spacing vertical line below
        + \";\\u032a\"          // non-spacing bridge below
        + \";\\u032b\"          // non-spacing inverted double arch below
        + \";\\u032c\"          // non-spacing hacek below
        + \";\\u032d\"          // non-spacing circumflex below
        + \";\\u032e\"          // non-spacing breve below
        + \";\\u032f\"          // non-spacing inverted breve below
        + \";\\u0330\"          // non-spacing tilde below
        + \";\\u0331\"          // non-spacing macron below
        + \";\\u0333\"          // non-spacing double underscore
        + \";\\u0334\"          // non-spacing tilde overlay
        + \";\\u0335\"          // non-spacing short bar overlay
        + \";\\u0336\"          // non-spacing long bar overlay
        + \";\\u0338\"          // non-spacing long slash overlay
        + \";\\u0339\"          // non-spacing right half ring below
        + \";\\u033a\"          // non-spacing inverted bridge below
        + \";\\u033b\"          // non-spacing square below
        + \";\\u033c\"          // non-spacing seagull below
        + \";\\u033d\"          // non-spacing x above
        + \";\\u033e\"          // non-spacing vertical tilde
        + \";\\u033f\"          // non-spacing double overscore
        //+ \";\\u0340\"          // non-spacing grave tone mark == \\u0300
        //+ \";\\u0341\"          // non-spacing acute tone mark == \\u0301
        + \";\\u0342;\"
	//+ \"\\u0343;\" // == \\u0313
	+ \"\\u0344;\\u0345;\\u0360;\\u0361\"    // newer
        + \";\\u0483;\\u0484;\\u0485;\\u0486\"    // Cyrillic accents

        + \";\\u20D0;\\u20D1;\\u20D2\"           // symbol accents
        + \";\\u20D3;\\u20D4;\\u20D5\"           // symbol accents
        + \";\\u20D6;\\u20D7;\\u20D8\"           // symbol accents
        + \";\\u20D9;\\u20DA;\\u20DB\"           // symbol accents
        + \";\\u20DC;\\u20DD;\\u20DE\"           // symbol accents
        + \";\\u20DF;\\u20E0;\\u20E1\"           // symbol accents

        + \",'\\u002D';\\u00AD\"                // dashes
        + \";\\u2010;\\u2011;\\u2012\"           // dashes
        + \";\\u2013;\\u2014;\\u2015\"           // dashes
        + \";\\u2212\"                         // dashes

        // other punctuation

        + \"<'\\u005f'\"        // underline/underscore (spacing)
        + \"<\\u00af\"          // overline or macron (spacing)
        + \"<'\\u002c'\"        // comma (spacing)
        + \"<'\\u003b'\"        // semicolon
        + \"<'\\u003a'\"        // colon
        + \"<'\\u0021'\"        // exclamation point
        + \"<\\u00a1\"          // inverted exclamation point
        + \"<'\\u003f'\"        // question mark
        + \"<\\u00bf\"          // inverted question mark
        + \"<'\\u002f'\"        // slash
        + \"<'\\u002e'\"        // period/full stop
        + \"<\\u00b4\"          // acute accent (spacing)
        + \"<'\\u0060'\"        // grave accent (spacing)
        + \"<'\\u005e'\"        // circumflex accent (spacing)
        + \"<\\u00a8\"          // diaresis/umlaut accent (spacing)
        + \"<'\\u007e'\"        // tilde accent (spacing)
        + \"<\\u00b7\"          // middle dot (spacing)
        + \"<\\u00b8\"          // cedilla accent (spacing)
        + \"<'\\u0027'\"        // apostrophe
        + \"<'\\\"'\"            // quotation marks
        + \"<\\u00ab\"          // left angle quotes
        + \"<\\u00bb\"          // right angle quotes
        + \"<'\\u0028'\"        // left parenthesis
        + \"<'\\u0029'\"        // right parenthesis
        + \"<'\\u005b'\"        // left bracket
        + \"<'\\u005d'\"        // right bracket
        + \"<'\\u007b'\"        // left brace
        + \"<'\\u007d'\"        // right brace
        + \"<\\u00a7\"          // section symbol
        + \"<\\u00b6\"          // paragraph symbol
        + \"<\\u00a9\"          // copyright symbol
        + \"<\\u00ae\"          // registered trademark symbol
        + \"<'\\u0040'\"          // at sign
        + \"<\\u00a4\"          // international currency symbol
        + \"<\\u0e3f\"          // baht sign
        + \"<\\u00a2\"          // cent sign
        + \"<\\u20a1\"          // colon sign
        + \"<\\u20a2\"          // cruzeiro sign
        + \"<'\\u0024'\"        // dollar sign
        + \"<\\u20ab\"          // dong sign
        + \"<\\u20ac\"          // euro sign
        + \"<\\u20a3\"          // franc sign
        + \"<\\u20a4\"          // lira sign
        + \"<\\u20a5\"          // mill sign
        + \"<\\u20a6\"          // naira sign
        + \"<\\u20a7\"          // peseta sign        
        + \"<\\u00a3\"          // pound-sterling sign
        + \"<\\u20a8\"          // rupee sign
        + \"<\\u20aa\"          // new shekel sign
        + \"<\\u20a9\"          // won sign
        + \"<\\u00a5\"          // yen sign
        + \"<'\\u002a'\"        // asterisk
        + \"<'\\\\'\"            // backslash
        + \"<'\\u0026'\"        // ampersand
        + \"<'\\u0023'\"        // number sign
        + \"<'\\u0025'\"        // percent sign
        + \"<'\\u002b'\"        // plus sign
        + \"<\\u00b1\"          // plus-or-minus sign
        + \"<\\u00f7\"          // divide sign
        + \"<\\u00d7\"          // multiply sign
        + \"<'\\u003c'\"        // less-than sign
        + \"<'\\u003d'\"        // equal sign
        + \"<'\\u003e'\"        // greater-than sign
        + \"<\\u00ac\"          // end of line symbol/logical NOT symbol
        + \"<'\\u007c'\"          // vertical line/logical OR symbol
        + \"<\\u00a6\"          // broken vertical line
        + \"<\\u00b0\"          // degree symbol
        + \"<\\u00b5\"          // micro symbol

        // NUMERICS

        + \"<0<1<2<3<4<5<6<7<8<9\"
        + \"<\\u00bc<\\u00bd<\\u00be\"   // 1/4,1/2,3/4 fractions

        // NON-IGNORABLES
        + \"<a,A\"
        + \"<b,B\"
        + \"<c,C\"
        + \"<d,D\"
        + \"<\\u00F0,\\u00D0\"                  // eth
        + \"<e,E\"
        + \"<f,F\"
        + \"<g,G\"
        + \"<h,H\"
        + \"<i,I\"
        + \"<j,J\"
        + \"<k,K\"
        + \"<l,L\"
        + \"<m,M\"
        + \"<n,N\"
        + \"<o,O\"
        + \"<p,P\"
        + \"<q,Q\"
        + \"<r,R\"
        + \"<s, S & SS,\\u00DF\"             // s-zet
        + \"<t,T\"
        + \"& TH, \\u00DE &TH, \\u00FE \"     // thorn
        + \"<u,U\"
        + \"<v,V\"
        + \"<w,W\"
        + \"<x,X\"
        + \"<y,Y\"
        + \"<z,Z\"
        + \"&AE,\\u00C6\"                    // ae & AE ligature
        + \"&AE,\\u00E6\"
        + \"&OE,\\u0152\"                    // oe & OE ligature
        + \"&OE,\\u0153\"
    )"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 986011 "DateFormatSymbols"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>DateFormatSymbols</code> is a public class for encapsulating
localizable date-time formatting data, such as the names of the
months, the names of the days of the week, and the time zone data.
<code>DateFormat</code> and <code>SimpleDateFormat</code> both use
<code>DateFormatSymbols</code> to encapsulate this information.

<p>
Typically you shouldn't use <code>DateFormatSymbols</code> directly.
Rather, you are encouraged to create a date-time formatter with the
<code>DateFormat</code> class's factory methods: <code>getTimeInstance</code>,
<code>getDateInstance</code>, or <code>getDateTimeInstance</code>.
These methods automatically create a <code>DateFormatSymbols</code> for
the formatter so that you don't have to. After the
formatter is created, you may modify its format pattern using the
<code>setPattern</code> method. For more information about
creating formatters using <code>DateFormat</code>'s factory methods,
see {@link DateFormat}.

<p>
If you decide to create a date-time formatter with a specific
format pattern for a specific locale, you can do so with:
<blockquote>
<pre>
new SimpleDateFormat(aPattern, new DateFormatSymbols(aLocale)).
</pre>
</blockquote>

<p>
<code>DateFormatSymbols</code> objects are cloneable. When you obtain
a <code>DateFormatSymbols</code> object, feel free to modify the
date-time formatting data. For instance, you can replace the localized
date-time format pattern characters with the ones that you feel easy
to remember. Or you can change the representative cities
to your favorite ones.

<p>
New <code>DateFormatSymbols</code> subclasses may be added to support
<code>SimpleDateFormat</code> for date-time formatting for additional locales.

@see          DateFormat
@see          SimpleDateFormat
@see          java.util.SimpleTimeZone
@version      1.41 12/19/03
@author       Chen-Lieh Huang"
      classrelation 1913115 // <realization>
	relation 1913115 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1913115 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 1913243 // <realization>
	relation 1913243 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1913243 // <realization>
	  b parent class_ref 339867 // Cloneable
      end

      operation 7821083 "DateFormatSymbols"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a DateFormatSymbols object by loading format data from
resources for the default locale.

@exception  java.util.MissingResourceException
            if the resources for the default locale cannot be
            found or cannot be loaded."
      end

      operation 7821211 "DateFormatSymbols"
	public explicit_return_type ""
	nparams 1
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a DateFormatSymbols object by loading format data from
resources for the given locale.

@exception  java.util.MissingResourceException
            if the resources for the specified locale cannot be
            found or cannot be loaded."
      end

      attribute 2897819 "eras"
	package explicit_type "String"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Era strings. For example: \"AD\" and \"BC\".  An array of 2 strings,
indexed by <code>Calendar.BC</code> and <code>Calendar.AD</code>.
@serial
"
      end

      attribute 2897947 "months"
	package explicit_type "String"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Month strings. For example: \"January\", \"February\", etc.  An array
of 13 strings (some calendars have 13 months), indexed by
<code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.
@serial
"
      end

      attribute 2898075 "shortMonths"
	package explicit_type "String"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Short month strings. For example: \"Jan\", \"Feb\", etc.  An array of
13 strings (some calendars have 13 months), indexed by
<code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.

@serial
"
      end

      attribute 2898203 "weekdays"
	package explicit_type "String"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Weekday strings. For example: \"Sunday\", \"Monday\", etc.  An array
of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
<code>Calendar.MONDAY</code>, etc.
The element <code>weekdays[0]</code> is ignored.
@serial
"
      end

      attribute 2898331 "shortWeekdays"
	package explicit_type "String"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Short weekday strings. For example: \"Sun\", \"Mon\", etc.  An array
of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
<code>Calendar.MONDAY</code>, etc.
The element <code>shortWeekdays[0]</code> is ignored.
@serial
"
      end

      attribute 2898459 "ampms"
	package explicit_type "String"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "AM and PM strings. For example: \"AM\" and \"PM\".  An array of
2 strings, indexed by <code>Calendar.AM</code> and
<code>Calendar.PM</code>.
@serial
"
      end

      attribute 2898587 "zoneStrings"
	package explicit_type "String"
	multiplicity "[][]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Localized names of time zones in this locale.  This is a
two-dimensional array of strings of size <em>n</em> by <em>m</em>,
where <em>m</em> is at least 5.  Each of the <em>n</em> rows is an
entry containing the localized names for a single <code>TimeZone</code>.
Each such row contains (with <code>i</code> ranging from
0..<em>n</em>-1):
<ul>
<li><code>zoneStrings[i][0]</code> - time zone ID</li>
<li><code>zoneStrings[i][1]</code> - long name of zone in standard
time</li>
<li><code>zoneStrings[i][2]</code> - short name of zone in
standard time</li>
<li><code>zoneStrings[i][3]</code> - long name of zone in daylight
savings time</li>
<li><code>zoneStrings[i][4]</code> - short name of zone in daylight
savings time</li>
</ul>
The zone ID is <em>not</em> localized; it corresponds to the ID
value associated with a system time zone object.  All other entries
are localized names.  If a zone does not implement daylight savings
time, the daylight savings time names are ignored.
@see java.util.TimeZone
@serial
"
      end

      attribute 2898715 "patternChars"
	class_attribute const_attribute package explicit_type "String"
	init_value "=  \"GyMdkHmsSEDFwWahKzZ\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Unlocalized date-time pattern characters. For example: 'y', 'd', etc.
All locales use the same these unlocalized pattern characters.
"
      end

      attribute 2898843 "localPatternChars"
	package explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Localized date-time pattern characters. For example, a locale may
wish to use 'u' rather than 'y' to represent years in its date format
pattern strings.
This string must be exactly 18 characters long, with the index of
the characters described by <code>DateFormat.ERA_FIELD</code>,
<code>DateFormat.YEAR_FIELD</code>, etc.  Thus, if the string were
\"Xz...\", then localized patterns would use 'X' for era and 'z' for year.
@serial
"
      end

      attribute 2898971 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -5987973545549424702L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.1.4 for interoperability "
      end

      operation 7821339 "getEras"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets era strings. For example: \"AD\" and \"BC\".
@return the era strings."
      end

      operation 7821467 "setEras"
	public explicit_return_type "void"
	nparams 1
	  param in name "newEras" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets era strings. For example: \"AD\" and \"BC\".
@param newEras the new era strings."
      end

      operation 7821595 "getMonths"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets month strings. For example: \"January\", \"February\", etc.
@return the month strings."
      end

      operation 7821723 "setMonths"
	public explicit_return_type "void"
	nparams 1
	  param in name "newMonths" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets month strings. For example: \"January\", \"February\", etc.
@param newMonths the new month strings."
      end

      operation 7821851 "getShortMonths"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets short month strings. For example: \"Jan\", \"Feb\", etc.
@return the short month strings."
      end

      operation 7821979 "setShortMonths"
	public explicit_return_type "void"
	nparams 1
	  param in name "newShortMonths" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets short month strings. For example: \"Jan\", \"Feb\", etc.
@param newShortMonths the new short month strings."
      end

      operation 7822107 "getWeekdays"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets weekday strings. For example: \"Sunday\", \"Monday\", etc.
@return the weekday strings. Use <code>Calendar.SUNDAY</code>,
<code>Calendar.MONDAY</code>, etc. to index the result array."
      end

      operation 7822235 "setWeekdays"
	public explicit_return_type "void"
	nparams 1
	  param in name "newWeekdays" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets weekday strings. For example: \"Sunday\", \"Monday\", etc.
@param newWeekdays the new weekday strings. The array should
be indexed by <code>Calendar.SUNDAY</code>,
<code>Calendar.MONDAY</code>, etc."
      end

      operation 7822363 "getShortWeekdays"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets short weekday strings. For example: \"Sun\", \"Mon\", etc.
@return the short weekday strings. Use <code>Calendar.SUNDAY</code>,
<code>Calendar.MONDAY</code>, etc. to index the result array."
      end

      operation 7822491 "setShortWeekdays"
	public explicit_return_type "void"
	nparams 1
	  param in name "newShortWeekdays" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets short weekday strings. For example: \"Sun\", \"Mon\", etc.
@param newShortWeekdays the new short weekday strings. The array should
be indexed by <code>Calendar.SUNDAY</code>,
<code>Calendar.MONDAY</code>, etc."
      end

      operation 7822619 "getAmPmStrings"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets ampm strings. For example: \"AM\" and \"PM\".
@return the ampm strings."
      end

      operation 7822747 "setAmPmStrings"
	public explicit_return_type "void"
	nparams 1
	  param in name "newAmpms" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets ampm strings. For example: \"AM\" and \"PM\".
@param newAmpms the new ampm strings."
      end

      operation 7822875 "getZoneStrings"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets timezone strings.
@return the timezone strings."
      end

      operation 7823003 "setZoneStrings"
	public explicit_return_type "void"
	nparams 1
	  param in name "newZoneStrings" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets timezone strings.
@param newZoneStrings the new timezone strings."
      end

      operation 7823131 "getLocalPatternChars"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets localized date-time pattern characters. For example: 'u', 't', etc.
@return the localized date-time pattern characters."
      end

      operation 7823259 "setLocalPatternChars"
	public explicit_return_type "void"
	nparams 1
	  param in name "newLocalPatternChars" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets localized date-time pattern characters. For example: 'u', 't', etc.
@param newLocalPatternChars the new localized date-time
pattern characters."
      end

      operation 7823387 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides Cloneable"
      end

      operation 7823515 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Override hashCode.
Generates a hash code for the DateFormatSymbols object."
      end

      operation 7823643 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Override equals"
      end

      attribute 2899099 "millisPerHour"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  60*60*1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " =======================privates===============================

Useful constant for defining timezone offsets.
"
      end

      classrelation 1913371 // cachedLocaleData (<unidirectional association>)
	relation 1913371 --->
	  a role_name "cachedLocaleData" init_value "=  new Hashtable(3)" class_relation private
	    comment "
Cache to hold the LocaleElements and DateFormatZoneData ResourceBundles
of a Locale.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1913371 // cachedLocaleData (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end

      classrelation 1913499 // cachedZoneData (<unidirectional association>)
	relation 1913499 --->
	  a role_name "cachedZoneData" init_value "=  new Hashtable()" class_relation private
	    comment "
cache to hold time zone localized strings. Keyed by Locale

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1913499 // cachedZoneData (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end

      operation 7823771 "cacheLookup"
	private return_type class_ref 153371 // ResourceBundle
	nparams 1
	  param inout name "desiredLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look up resource data for the desiredLocale in the cache; update the
cache if necessary."
      end

      operation 7823899 "loadZoneStrings"
	private explicit_return_type "String"
	nparams 2
	  param inout name "desiredLocale" type class_ref 138907 // Locale
	  param inout name "rsrc" type class_ref 153371 // ResourceBundle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load time zone localized strings. Enumerate all keys (except
\"localPatternChars\" and \"zoneStrings\")."
      end

      operation 7824027 "initializeData"
	private explicit_return_type "void"
	nparams 1
	  param inout name "desiredLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7824155 "getZoneIndex"
	package explicit_return_type "int"
	nparams 1
	  param in name "ID" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package private: used by SimpleDateFormat
Gets the index for the given time zone ID to obtain the timezone
strings for formatting. The time zone ID is just for programmatic
lookup. NOT LOCALIZED!!!
@param ID the given time zone ID.
@return the index of the given time zone ID.  Returns -1 if
the given time zone ID can't be located in the DateFormatSymbols object.
@see java.util.SimpleTimeZone"
      end

      operation 7824283 "duplicate"
	private explicit_return_type "String"
	nparams 1
	  param in name "srcArray" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clones an array of Strings.
@param srcArray the source array to be cloned.
@param count the number of elements in the given source array.
@return a cloned array."
      end

      operation 7824411 "copyMembers"
	private explicit_return_type "void"
	nparams 2
	  param inout name "src" type class_ref 986011 // DateFormatSymbols
	  param inout name "dst" type class_ref 986011 // DateFormatSymbols
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clones all the data members from the source DateFormatSymbols to
the target DateFormatSymbols. This is only for subclasses.
@param src the source DateFormatSymbols.
@param dst the target DateFormatSymbols."
      end

      operation 7824539 "equals"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "current" explicit_type "String"
	  param in name "other" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the equality of the two arrays of String.
@param current this String array.
@param other that String array."
      end
    end

    class 986139 "DigitList"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Digit List. Private to DecimalFormat.
Handles the transcoding
between numeric values and strings of characters.  Only handles
non-negative numbers.  The division of labor between DigitList and
DecimalFormat is that DigitList handles the radix 10 representation
issues; DecimalFormat handles the locale-specific issues such as
positive/negative, grouping, decimal point, currency, and so on.

A DigitList is really a representation of a floating point value.
It may be an integer value; we assume that a double has sufficient
precision to represent all digits of a long.

The DigitList representation consists of a string of characters,
which are the digits radix 10, from '0' to '9'.  It also has a radix
10 exponent associated with it.  The value represented by a DigitList
object can be computed by mulitplying the fraction f, where 0 <= f < 1,
derived by placing all the digits of the list to the right of the
decimal point, by 10^exponent.

@see  Locale
@see  Format
@see  NumberFormat
@see  DecimalFormat
@see  ChoiceFormat
@see  MessageFormat
@version      1.30 12/19/03
@author       Mark Davis, Alan Liu"
      classrelation 1916571 // <realization>
	relation 1916571 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1916571 // <realization>
	  b parent class_ref 339867 // Cloneable
      end

      attribute 2909595 "MAX_COUNT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  19"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum number of significant digits in an IEEE 754 double, that
is, in a Java double.  This must not be increased, or garbage digits
will be generated, and should not be decreased, or accuracy will be lost.

 == Long.toString(Long.MAX_VALUE).length()"
      end

      attribute 2909723 "decimalAt"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "These data members are intentionally public and can be set directly.

The value represented is given by placing the decimal point before
digits[decimalAt].  If decimalAt is < 0, then leading zeros between
the decimal point and the first nonzero digit are implied.  If decimalAt
is > count, then trailing zeros between the digits[count-1] and the
decimal point are implied.

Equivalently, the represented value is given by f * 10^decimalAt.  Here
f is a value 0.1 <= f < 1 arrived at by placing the digits in Digits to
the right of the decimal.

DigitList is normalized, so if it is non-zero, figits[0] is non-zero.  We
don't allow denormalized numbers because our exponent is effectively of
unlimited magnitude.  The count value contains the number of significant
digits present in digits[].

Zero is represented by any DigitList with count == 0 or with each digits[i]
for all i <= count == '0'.
"
      end

      attribute 2909851 "count"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2909979 "digits"
	public explicit_type "char"
	multiplicity "[]"
	init_value "=  new char[MAX_COUNT]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2910107 "data"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7844763 "isZero"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the represented number is zero."
      end

      operation 7844891 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears out the digits.
Use before appending them.
Typically, you set a series of digits with append, then at the point
you hit the decimal point, you set myDigitList.decimalAt = myDigitList.count;
then go on appending digits."
      end

      operation 7845019 "append"
	public explicit_return_type "void"
	nparams 1
	  param in name "digit" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a digit to the list, extending the list when necessary."
      end

      operation 7845147 "getDouble"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to get the value of the digit list
If (count == 0) this throws a NumberFormatException, which
mimics Long.parseLong()."
      end

      operation 7845275 "getLong"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to get the value of the digit list.
If (count == 0) this returns 0, unlike Long.parseLong()."
      end

      operation 7845403 "getBigDecimal"
	public return_type class_ref 178459 // BigDecimal
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7845531 "fitsIntoLong"
	package explicit_return_type "boolean"
	nparams 2
	  param inout name "isPositive" explicit_type "boolean"
	  param inout name "ignoreNegativeZero" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the number represented by this object can fit into
a long.
@param isPositive true if this number should be regarded as positive
@param ignoreNegativeZero true if -0 should be regarded as identical to
+0; otherwise they are considered distinct
@return true if this number fits into a Java long"
      end

      operation 7845659 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "source" explicit_type "double"
	  param in name "maximumFractionDigits" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the digit list to a representation of the given double value.
This method supports fixed-point notation.
@param source Value to be converted; must not be Inf, -Inf, Nan,
or a value <= 0.
@param maximumFractionDigits The most fractional digits which should
be converted."
      end

      operation 7845787 "set"
	package explicit_return_type "void"
	nparams 3
	  param in name "source" explicit_type "double"
	  param in name "maximumDigits" explicit_type "int"
	  param inout name "fixedPoint" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the digit list to a representation of the given double value.
This method supports both fixed-point and exponential notation.
@param source Value to be converted; must not be Inf, -Inf, Nan,
or a value <= 0.
@param maximumDigits The most fractional or total digits which should
be converted.
@param fixedPoint If true, then maximumDigits is the maximum
fractional digits to be converted.  If false, total digits."
      end

      operation 7845915 "set"
	package explicit_return_type "void"
	nparams 3
	  param in name "s" explicit_type "String"
	  param in name "maximumDigits" explicit_type "int"
	  param inout name "fixedPoint" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate a representation of the form DDDDD, DDDDD.DDDDD, or
DDDDDE+/-DDDDD."
      end

      operation 7846043 "round"
	private explicit_return_type "void"
	nparams 1
	  param in name "maximumDigits" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Round the representation to the given number of digits.
@param maximumDigits The maximum number of digits to be shown.
Upon return, count will be less than or equal to maximumDigits."
      end

      operation 7846171 "shouldRoundUp"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "maximumDigits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if truncating the representation to the given number
of digits will result in an increment to the last digit.  This
method implements half-even rounding, the default rounding mode.
[bnf]
@param maximumDigits the number of digits to keep, from 0 to
<code>count-1</code>.  If 0, then all digits are rounded away, and
this method returns true if a one should be generated (e.g., formatting
0.09 with \"#.#\").
@return true if digit <code>maximumDigits-1</code> should be
incremented"
      end

      operation 7846299 "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "source" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to set the value of the digit list from a long"
      end

      operation 7846427 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "source" explicit_type "long"
	  param in name "maximumDigits" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the digit list to a representation of the given long value.
@param source Value to be converted; must be >= 0 or ==
Long.MIN_VALUE.
@param maximumDigits The most digits which should be converted.
If maximumDigits is lower than the number of significant digits
in source, the representation will be rounded.  Ignored if <= 0."
      end

      operation 7846555 "set"
	package explicit_return_type "void"
	nparams 3
	  param inout name "source" type class_ref 178459 // BigDecimal
	  param in name "maximumDigits" explicit_type "int"
	  param inout name "fixedPoint" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the digit list to a representation of the given BigDecimal value.
This method supports both fixed-point and exponential notation.
@param source Value to be converted; must not be a value <= 0.
@param maximumDigits The most fractional or total digits which should
be converted.
@param fixedPoint If true, then maximumDigits is the maximum
fractional digits to be converted.  If false, total digits."
      end

      operation 7846683 "set"
	package explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 775835 // BigInteger
	  param in name "maximumDigits" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the digit list to a representation of the given BigInteger value.
@param source Value to be converted; must be >= 0.
@param maximumDigits The most digits which should be converted.
If maximumDigits is lower than the number of significant digits
in source, the representation will be rounded.  Ignored if <= 0."
      end

      operation 7846811 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "equality test between two digit lists."
      end

      operation 7846939 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the hash code for the digit list."
      end

      operation 7847067 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a copy of this object.
@return a clone of this instance."
      end

      operation 7847195 "isLongMIN_VALUE"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this DigitList represents Long.MIN_VALUE;
false, otherwise.  This is required so that getLong() works."
      end

      operation 7847323 "parseInt"
	class_operation private explicit_return_type "int"
	nparams 3
	  param in name "str" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "strLen" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2910235 "LONG_MIN_REP"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "[]"
	init_value "=  \"9223372036854775808\".toCharArray()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The digit part of -9223372036854775808L"
      end

      operation 7847451 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1916699 // tempBuffer (<unidirectional association>)
	relation 1916699 --->
	  a role_name "tempBuffer" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1916699 // tempBuffer (<unidirectional association>)
	  b parent class_ref 198171 // StringBuffer
      end

      operation 7847579 "getStringBuffer"
	private return_type class_ref 198171 // StringBuffer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7847707 "extendDigits"
	private explicit_return_type "void"
	nparams 1
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7847835 "getDataChars"
	private explicit_return_type "char"
	nparams 1
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 986267 "DictionaryBasedBreakIterator"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A subclass of RuleBasedBreakIterator that adds the ability to use a dictionary
to further subdivide ranges of text beyond what is possible using just the
state-table-based algorithm.  This is necessary, for example, to handle
word and line breaking in Thai, which doesn't use spaces between words.  The
state-table-based algorithm used by RuleBasedBreakIterator is used to divide
up text as far as possible, and then contiguous ranges of letters are
repeatedly compared against a list of known words (i.e., the dictionary)
to divide them up into words.

DictionaryBasedBreakIterator uses the same rule language as RuleBasedBreakIterator,
but adds one more special substitution name: &lt;dictionary&gt;.  This substitution
name is used to identify characters in words in the dictionary.  The idea is that
if the iterator passes over a chunk of text that includes two or more characters
in a row that are included in &lt;dictionary&gt;, it goes back through that range and
derives additional break positions (if possible) using the dictionary.

DictionaryBasedBreakIterator is also constructed with the filename of a dictionary
file.  It follows a prescribed search path to locate the dictionary (right now,
it looks for it in /com/ibm/text/resources in each directory in the classpath,
and won't find it in JAR files, but this location is likely to change).  The
dictionary file is in a serialized binary format.  We have a very primitive (and
slow) BuildDictionaryFile utility for creating dictionary files, but aren't
currently making it public.  Contact us for help."
      classrelation 1916315 // <generalisation>
	relation 1916315 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1916315 // <generalisation>
	  b parent class_ref 986395 // RuleBasedBreakIterator
      end

      classrelation 1916443 // dictionary (<unidirectional association>)
	relation 1916443 --->
	  a role_name "dictionary" private
	    comment "
a list of known words that is used to divide up contiguous ranges of letters,
stored in a compressed, indexed, format that offers fast access

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1916443 // dictionary (<unidirectional association>)
	  b parent class_ref 984347 // BreakDictionary
      end

      attribute 2909083 "categoryFlags"
	private explicit_type "boolean"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "a list of flags indicating which character categories are contained in
the dictionary file (this is used to determine which ranges of characters
to apply the dictionary to)
"
      end

      attribute 2909211 "dictionaryCharCount"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "a temporary hiding place for the number of dictionary characters in the
last range passed over by next()
"
      end

      attribute 2909339 "cachedBreakPositions"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "when a range of characters is divided up using the dictionary, the break
positions that are discovered are stored here, preventing us from having
to use either the dictionary or the state table again until the iterator
leaves this range of text
"
      end

      attribute 2909467 "positionInCache"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "if cachedBreakPositions is not null, this indicates which item in the
cache the current iteration position refers to
"
      end

      operation 7843355 "DictionaryBasedBreakIterator"
	public explicit_return_type ""
	nparams 2
	  param in name "dataFile" explicit_type "String"
	  param in name "dictionaryFile" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a DictionaryBasedBreakIterator.
@param description Same as the description parameter on RuleBasedBreakIterator,
except for the special meaning of \"<dictionary>\".  This parameter is just
passed through to RuleBasedBreakIterator's constructor.
@param dictionaryFilename The filename of the dictionary file to use"
      end

      operation 7843483 "prepareCategoryFlags"
	private explicit_return_type "void"
	nparams 1
	  param in name "data" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7843611 "setText"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newText" type class_ref 447003 // CharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7843739 "first"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current iteration position to the beginning of the text.
(i.e., the CharacterIterator's starting offset).
@return The offset of the beginning of the text."
      end

      operation 7843867 "last"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current iteration position to the end of the text.
(i.e., the CharacterIterator's ending offset).
@return The text's past-the-end offset."
      end

      operation 7843995 "previous"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Advances the iterator one step backwards.
@return The position of the last boundary position before the
current iteration position"
      end

      operation 7844123 "preceding"
	public explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current iteration position to the last boundary position
before the specified position.
@param offset The position to begin searching from
@return The position of the last boundary before \"offset\""
      end

      operation 7844251 "following"
	public explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current iteration position to the first boundary position after
the specified position.
@param offset The position to begin searching forward from
@return The position of the first boundary after \"offset\""
      end

      operation 7844379 "handleNext"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is the implementation function for next()."
      end

      operation 7844507 "lookupCategory"
	protected explicit_return_type "int"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Looks up a character category for a character."
      end

      operation 7844635 "divideUpDictionaryRange"
	private explicit_return_type "void"
	nparams 2
	  param in name "startPos" explicit_type "int"
	  param in name "endPos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is the function that actually implements the dictionary-based
algorithm.  Given the endpoints of a range of text, it uses the
dictionary to determine the positions of any boundaries in this
range.  It stores all the boundary positions it discovers in
cachedBreakPositions so that we only have to do this work once
for each time we enter the range."
      end
    end

    class 986395 "RuleBasedBreakIterator"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>A subclass of BreakIterator whose behavior is specified using a list of rules.</p>

<p>There are two kinds of rules, which are separated by semicolons: <i>substitutions</i>
and <i>regular expressions.</i></p>

<p>A substitution rule defines a name that can be used in place of an expression. It
consists of a name, which is a string of characters contained in angle brackets, an equals
sign, and an expression. (There can be no whitespace on either side of the equals sign.)
To keep its syntactic meaning intact, the expression must be enclosed in parentheses or
square brackets. A substitution is visible after its definition, and is filled in using
simple textual substitution. Substitution definitions can contain other substitutions, as
long as those substitutions have been defined first. Substitutions are generally used to
make the regular expressions (which can get quite complex) shorted and easier to read.
They typically define either character categories or commonly-used subexpressions.</p>

<p>There is one special substitution.&nbsp; If the description defines a substitution
called &quot;&lt;ignore&gt;&quot;, the expression must be a [] expression, and the
expression defines a set of characters (the &quot;<em>ignore characters</em>&quot;) that
will be transparent to the BreakIterator.&nbsp; A sequence of characters will break the
same way it would if any ignore characters it contains are taken out.&nbsp; Break
positions never occur befoer ignore characters.</p>

<p>A regular expression uses a subset of the normal Unix regular-expression syntax, and
defines a sequence of characters to be kept together. With one significant exception, the
iterator uses a longest-possible-match algorithm when matching text to regular
expressions. The iterator also treats descriptions containing multiple regular expressions
as if they were ORed together (i.e., as if they were separated by |).</p>

<p>The special characters recognized by the regular-expression parser are as follows:</p>

<blockquote>
  <table border=\"1\" width=\"100%\">
    <tr>
      <td width=\"6%\">*</td>
      <td width=\"94%\">Specifies that the expression preceding the asterisk may occur any number
      of times (including not at all).</td>
    </tr>
    <tr>
      <td width=\"6%\">{}</td>
      <td width=\"94%\">Encloses a sequence of characters that is optional.</td>
    </tr>
    <tr>
      <td width=\"6%\">()</td>
      <td width=\"94%\">Encloses a sequence of characters.&nbsp; If followed by *, the sequence
      repeats.&nbsp; Otherwise, the parentheses are just a grouping device and a way to delimit
      the ends of expressions containing |.</td>
    </tr>
    <tr>
      <td width=\"6%\">|</td>
      <td width=\"94%\">Separates two alternative sequences of characters.&nbsp; Either one
      sequence or the other, but not both, matches this expression.&nbsp; The | character can
      only occur inside ().</td>
    </tr>
    <tr>
      <td width=\"6%\">.</td>
      <td width=\"94%\">Matches any character.</td>
    </tr>
    <tr>
      <td width=\"6%\">*?</td>
      <td width=\"94%\">Specifies a non-greedy asterisk.&nbsp; *? works the same way as *, except
      when there is overlap between the last group of characters in the expression preceding the
      * and the first group of characters following the *.&nbsp; When there is this kind of
      overlap, * will match the longest sequence of characters that match the expression before
      the *, and *? will match the shortest sequence of characters matching the expression
      before the *?.&nbsp; For example, if you have &quot;xxyxyyyxyxyxxyxyxyy&quot; in the text,
      &quot;x[xy]*x&quot; will match through to the last x (i.e., &quot;<strong>xxyxyyyxyxyxxyxyx</strong>yy&quot;,
      but &quot;x[xy]*?x&quot; will only match the first two xes (&quot;<strong>xx</strong>yxyyyxyxyxxyxyxyy&quot;).</td>
    </tr>
    <tr>
      <td width=\"6%\">[]</td>
      <td width=\"94%\">Specifies a group of alternative characters.&nbsp; A [] expression will
      match any single character that is specified in the [] expression.&nbsp; For more on the
      syntax of [] expressions, see below.</td>
    </tr>
    <tr>
      <td width=\"6%\">/</td>
      <td width=\"94%\">Specifies where the break position should go if text matches this
      expression.&nbsp; (e.g., &quot;[a-z]&#42;/[:Zs:]*[1-0]&quot; will match if the iterator sees a run
      of letters, followed by a run of whitespace, followed by a digit, but the break position
      will actually go before the whitespace).&nbsp; Expressions that don't contain / put the
      break position at the end of the matching text.</td>
    </tr>
    <tr>
      <td width=\"6%\">\\</td>
      <td width=\"94%\">Escape character.&nbsp; The \\ itself is ignored, but causes the next
      character to be treated as literal character.&nbsp; This has no effect for many
      characters, but for the characters listed above, this deprives them of their special
      meaning.&nbsp; (There are no special escape sequences for Unicode characters, or tabs and
      newlines; these are all handled by a higher-level protocol.&nbsp; In a Java string,
      &quot;\\n&quot; will be converted to a literal newline character by the time the
      regular-expression parser sees it.&nbsp; Of course, this means that \\ sequences that are
      visible to the regexp parser must be written as \\\\ when inside a Java string.)&nbsp; All
      characters in the ASCII range except for letters, digits, and control characters are
      reserved characters to the parser and must be preceded by \\ even if they currently don't
      mean anything.</td>
    </tr>
    <tr>
      <td width=\"6%\">!</td>
      <td width=\"94%\">If ! appears at the beginning of a regular expression, it tells the regexp
      parser that this expression specifies the backwards-iteration behavior of the iterator,
      and not its normal iteration behavior.&nbsp; This is generally only used in situations
      where the automatically-generated backwards-iteration brhavior doesn't produce
      satisfactory results and must be supplemented with extra client-specified rules.</td>
    </tr>
    <tr>
      <td width=\"6%\"><em>(all others)</em></td>
      <td width=\"94%\">All other characters are treated as literal characters, which must match
      the corresponding character(s) in the text exactly.</td>
    </tr>
  </table>
</blockquote>

<p>Within a [] expression, a number of other special characters can be used to specify
groups of characters:</p>

<blockquote>
  <table border=\"1\" width=\"100%\">
    <tr>
      <td width=\"6%\">-</td>
      <td width=\"94%\">Specifies a range of matching characters.&nbsp; For example
      &quot;[a-p]&quot; matches all lowercase Latin letters from a to p (inclusive).&nbsp; The -
      sign specifies ranges of continuous Unicode numeric values, not ranges of characters in a
      language's alphabetical order: &quot;[a-z]&quot; doesn't include capital letters, nor does
      it include accented letters such as a-umlaut.</td>
    </tr>
    <tr>
      <td width=\"6%\">::</td>
      <td width=\"94%\">A pair of colons containing a one- or two-letter code matches all
      characters in the corresponding Unicode category.&nbsp; The two-letter codes are the same
      as the two-letter codes in the Unicode database (for example, &quot;[:Sc::Sm:]&quot;
      matches all currency symbols and all math symbols).&nbsp; Specifying a one-letter code is
      the same as specifying all two-letter codes that begin with that letter (for example,
      &quot;[:L:]&quot; matches all letters, and is equivalent to
      &quot;[:Lu::Ll::Lo::Lm::Lt:]&quot;).&nbsp; Anything other than a valid two-letter Unicode
      category code or a single letter that begins a Unicode category code is illegal within
      colons.</td>
    </tr>
    <tr>
      <td width=\"6%\">[]</td>
      <td width=\"94%\">[] expressions can nest.&nbsp; This has no effect, except when used in
      conjunction with the ^ token.</td>
    </tr>
    <tr>
      <td width=\"6%\">^</td>
      <td width=\"94%\">Excludes the character (or the characters in the [] expression) following
      it from the group of characters.&nbsp; For example, &quot;[a-z^p]&quot; matches all Latin
      lowercase letters except p.&nbsp; &quot;[:L:^[&#92;u4e00-&#92;u9fff]]&quot; matches all letters
      except the Han ideographs.</td>
    </tr>
    <tr>
      <td width=\"6%\"><em>(all others)</em></td>
      <td width=\"94%\">All other characters are treated as literal characters.&nbsp; (For
      example, &quot;[aeiou]&quot; specifies just the letters a, e, i, o, and u.)</td>
    </tr>
  </table>
</blockquote>

<p>For a more complete explanation, see <a
href=\"http://www.ibm.com/java/education/boundaries/boundaries.html\">http://www.ibm.com/java/education/boundaries/boundaries.html</a>.
&nbsp; For examples, see the resource data (which is annotated).</p>

@author Richard Gillam
@version $RCSFile$ $Revision: 1.1 $ $Date: 1998/11/05 19:32:04 $"
      classrelation 1915675 // <generalisation>
	relation 1915675 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1915675 // <generalisation>
	  b parent class_ref 866459 // BreakIterator
      end

      attribute 2906523 "IGNORE"
	class_attribute const_attribute protected explicit_type "byte"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A token used as a character-category value to identify ignore characters
"
      end

      attribute 2906651 "START_STATE"
	class_attribute const_attribute private explicit_type "short"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The state number of the starting state
"
      end

      attribute 2906779 "STOP_STATE"
	class_attribute const_attribute private explicit_type "short"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The state-transition value indicating \"stop\"
"
      end

      attribute 2906907 "LABEL"
	class_attribute const_attribute package explicit_type "byte"
	multiplicity "[]"
	init_value "=  {
        (byte)'B', (byte)'I', (byte)'d', (byte)'a', (byte)'t', (byte)'a',
        (byte)'\\0'
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Magic number for the BreakIterator data file format.
"
      end

      attribute 2907035 "LABEL_LENGTH"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  LABEL.length"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2907163 "supportedVersion"
	class_attribute const_attribute package explicit_type "byte"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Version number of the dictionary that was read in.
"
      end

      attribute 2907291 "HEADER_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  36"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Header size in byte count
"
      end

      attribute 2907419 "BMP_INDICES_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  512"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "An array length of indices for BMP characters
"
      end

      attribute 2907547 "charCategoryTable"
	private explicit_type "CompactByteArray"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tables that indexes from character values to character category numbers
"
      end

      attribute 2907675 "supplementaryCharCategoryTable"
	private explicit_type "SupplementaryCharacterData"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2907803 "stateTable"
	private explicit_type "short"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The table of state transitions used for forward iteration
"
      end

      attribute 2907931 "backwardsStateTable"
	private explicit_type "short"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The table of state transitions used to sync up the iterator with the
text in backwards and random-access iteration
"
      end

      attribute 2908059 "endStates"
	private explicit_type "boolean"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A list of flags indicating which states in the state table are accepting
(\"end\") states
"
      end

      attribute 2908187 "lookaheadStates"
	private explicit_type "boolean"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A list of flags indicating which states in the state table are
lookahead states (states which turn lookahead on and off)
"
      end

      attribute 2908315 "additionalData"
	private explicit_type "byte"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A table for additional data. May be used by a subclass of
RuleBasedBreakIterator.
"
      end

      attribute 2908443 "numCategories"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of character categories (and, thus, the number of columns in
the state tables)
"
      end

      classrelation 1915803 // text (<unidirectional association>)
	relation 1915803 --->
	  a role_name "text" init_value "=  null" private
	    comment "
The character iterator through which this BreakIterator accesses the text

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1915803 // text (<unidirectional association>)
	  b parent class_ref 447003 // CharacterIterator
      end

      attribute 2908571 "checksum"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A CRC32 value of all data in datafile
"
      end

      operation 7837979 "RuleBasedBreakIterator"
	public explicit_return_type ""
	nparams 1
	  param in name "datafile" explicit_type "String"
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 154011 // MissingResourceException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "=======================================================================
 constructors
=======================================================================

Constructs a RuleBasedBreakIterator according to the datafile
provided."
      end

      operation 7838107 "readTables"
	protected explicit_return_type "void"
	nparams 1
	  param in name "datafile" explicit_type "String"
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 154011 // MissingResourceException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read datafile. The datafile's format is as follows:
<pre>
  BreakIteratorData {
      u1           magic[7];
      u1           version;
      u4           totalDataSize;
      header_info  header;
      body         value;
  }
</pre>
<code>totalDataSize</code> is the summation of the size of
<code>header_info</code> and <code>body</code> in byte count.
<p>
In <code>header</code>, each field except for checksum implies the
length of each field. Since <code>BMPdataLength</code> is a fixed-length
 data(512 entries), its length isn't included in <code>header</code>.
<code>checksum</code> is a CRC32 value of all in <code>body</code>.
<pre>
  header_info { 
      u4           stateTableLength;
      u4           backwardsStateTableLength;
      u4           endStatesLength;
      u4           lookaheadStatesLength;
      u4           BMPdataLength;
      u4           nonBMPdataLength;
      u4           additionalDataLength;
      u8           checksum;
  }
</pre>
<p>

Finally, <code>BMPindices</code> and <code>BMPdata</code> are set to
<code>charCategoryTable</code>. <code>nonBMPdata</code> is set to
<code>supplementaryCharCategoryTable</code>.
<pre>
  body {
      u2           stateTable[stateTableLength];
      u2           backwardsStateTable[backwardsStateTableLength];
      u1           endStates[endStatesLength];
      u1           lookaheadStates[lookaheadStatesLength];
      u2           BMPindices[512];
      u1           BMPdata[BMPdataLength];
      u4           nonBMPdata[numNonBMPdataLength];
      u1           additionalData[additionalDataLength];
  }
</pre>"
      end

      operation 7838235 "readFile"
	protected explicit_return_type "byte"
	nparams 1
	  param in name "datafile" explicit_type "String"
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 154011 // MissingResourceException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7838363 "getAdditionalData"
	package explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7838491 "setAdditionalData"
	package explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7838619 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "=======================================================================
 boilerplate
=======================================================================

Clones this iterator.
@return A newly-constructed RuleBasedBreakIterator with the same
behavior as this one."
      end

      operation 7838747 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "that" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if both BreakIterators are of the same class, have the same
rules, and iterate over the same text."
      end

      operation 7838875 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns text"
      end

      operation 7839003 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compute a hashcode for this BreakIterator
@return A hash code"
      end

      operation 7839131 "first"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "=======================================================================
 BreakIterator overrides
=======================================================================

Sets the current iteration position to the beginning of the text.
(i.e., the CharacterIterator's starting offset).
@return The offset of the beginning of the text."
      end

      operation 7839259 "last"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current iteration position to the end of the text.
(i.e., the CharacterIterator's ending offset).
@return The text's past-the-end offset."
      end

      operation 7839387 "next"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Advances the iterator either forward or backward the specified number of steps.
Negative values move backward, and positive values move forward.  This is
equivalent to repeatedly calling next() or previous().
@param n The number of steps to move.  The sign indicates the direction
(negative is backwards, and positive is forwards).
@return The character offset of the boundary position n boundaries away from
the current one."
      end

      operation 7839515 "next"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Advances the iterator to the next boundary position.
@return The position of the first boundary after this one."
      end

      operation 7839643 "previous"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Advances the iterator backwards, to the last boundary preceding this one.
@return The position of the last boundary position preceding this one."
      end

      operation 7839771 "getPrevious"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns previous character"
      end

      operation 7839899 "getCurrent"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns current character"
      end

      operation 7840027 "getCurrentCodePointCount"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the count of next character."
      end

      operation 7840155 "getNext"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns next character"
      end

      operation 7840283 "getNextIndex"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the position of next character."
      end

      operation 7840411 "checkOffset"
	class_operation protected explicit_return_type "void"
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "text" type class_ref 447003 // CharacterIterator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throw IllegalArgumentException unless begin <= offset < end."
      end

      operation 7840539 "following"
	public explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the iterator to refer to the first boundary position following
the specified position.
@offset The position from which to begin searching for a break position.
@return The position of the first break after the current position."
      end

      operation 7840667 "preceding"
	public explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the iterator to refer to the last boundary position before the
specified position.
@offset The position to begin searching for a break from.
@return The position of the last boundary before the starting position."
      end

      operation 7840795 "isBoundary"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the specfied position is a boundary position.  As a side
effect, leaves the iterator pointing to the first boundary position at
or after \"offset\".
@param offset the offset to check.
@return True if \"offset\" is a boundary position."
      end

      operation 7840923 "current"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current iteration position.
@return The current iteration position."
      end

      operation 7841051 "getText"
	public return_type class_ref 447003 // CharacterIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a CharacterIterator over the text being analyzed.  This version
of this method returns the actual CharacterIterator we're using internally.
Changing the state of this iterator can have undefined consequences.  If
you need to change it, clone it first.
@return An iterator over the text being analyzed."
      end

      operation 7841179 "setText"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newText" type class_ref 447003 // CharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the iterator to analyze a new piece of text.  This function resets
the current iteration position to the beginning of the text.
@param newText An iterator over the text to analyze."
      end

      operation 7841307 "handleNext"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "=======================================================================
 implementation
=======================================================================

This method is the actual implementation of the next() method.  All iteration
vectors through here.  This method initializes the state machine to state 1
and advances through the text character by character until we reach the end
of the text or the state machine transitions to state 0.  We update our return
value every time the state machine passes through a possible end state."
      end

      operation 7841435 "handlePrevious"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method backs the iterator back up to a \"safe position\" in the text.
This is a position that we know, without any context, must be a break position.
The various calling methods then iterate forward from this safe position to
the appropriate position to return.  (For more information, see the description
of buildBackwardsStateTable() in RuleBasedBreakIterator.Builder.)"
      end

      operation 7841563 "lookupCategory"
	protected explicit_return_type "int"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Looks up a character's category (i.e., its category for breaking purposes,
not its Unicode category)"
      end

      operation 7841691 "lookupState"
	protected explicit_return_type "int"
	nparams 2
	  param in name "state" explicit_type "int"
	  param in name "category" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a current state and a character category, looks up the
next state to transition to in the state table."
      end

      operation 7841819 "lookupBackwardState"
	protected explicit_return_type "int"
	nparams 2
	  param in name "state" explicit_type "int"
	  param in name "category" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a current state and a character category, looks up the
next state to transition to in the backwards state table."
      end

      class 986523 "SafeCharIterator"
	visibility private 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1915931 // <realization>
	  relation 1915931 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1915931 // <realization>
	    b parent class_ref 447003 // CharacterIterator
	end

	classrelation 1916059 // <realization>
	  relation 1916059 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1916059 // <realization>
	    b parent class_ref 339867 // Cloneable
	end

	classrelation 1916187 // base (<unidirectional association>)
	  relation 1916187 --->
	    a role_name "base" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1916187 // base (<unidirectional association>)
	    b parent class_ref 447003 // CharacterIterator
	end

	attribute 2908699 "rangeStart"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2908827 "rangeLimit"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2908955 "currentIndex"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7841947 "SafeCharIterator"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "base" type class_ref 447003 // CharacterIterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7842075 "first"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7842203 "last"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7842331 "current"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7842459 "next"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7842587 "previous"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7842715 "setIndex"
	  public explicit_return_type "char"
	  nparams 1
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7842843 "getBeginIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7842971 "getEndIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7843099 "getIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7843227 "clone"
	  public explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 986651 "DontCareFieldPosition"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "DontCareFieldPosition defines no-op FieldDelegate. Its
singleton is used for the format methods that don't take a
FieldPosition."
      classrelation 1917083 // <generalisation>
	relation 1917083 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1917083 // <generalisation>
	  b parent class_ref 701083 // FieldPosition
      end

      classrelation 1917211 // INSTANCE (<unidirectional association>)
	relation 1917211 --->
	  a role_name "INSTANCE" init_value "=  new DontCareFieldPosition()" class_relation const_relation package
	    comment " The singleton of DontCareFieldPosition.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1917211 // INSTANCE (<unidirectional association>)
	  b parent class_ref 701083 // FieldPosition
      end

      classrelation 1917339 // noDelegate (<unidirectional association>)
	relation 1917339 --->
	  a role_name "noDelegate" init_value "=  new Format.FieldDelegate() {
	public void formatted(Format.Field attr, Object value, int start,
			      int end, StringBuffer buffer) {
	}
	public void formatted(int fieldID, Format.Field attr, Object value,
			      int start, int end, StringBuffer buffer) {
	}
    }" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1917339 // noDelegate (<unidirectional association>)
	  b parent class_ref 984859 // FieldDelegate
      end

      operation 7850139 "DontCareFieldPosition"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7850267 "getFieldDelegate"
	package return_type class_ref 984859 // FieldDelegate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 986907 "EntryPair"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is used for building contracting character tables.  entryName
is the contracting character name and value is its collation
order."
      attribute 2910875 "entryName"
	public explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2911003 "value"
	public explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2911131 "fwd"
	public explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7850395 "EntryPair"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7850523 "EntryPair"
	public explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "String"
	  param in name "value" explicit_type "int"
	  param inout name "fwd" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 987035 "MergeCollation"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Utility class for normalizing and merging patterns for collation.
Patterns are strings of the form <entry>*, where <entry> has the
form:
<pattern> := <entry>*
<entry> := <separator><chars>{\"/\"<extension>}
<separator> := \"=\", \",\", \";\", \"<\", \"&\"
<chars>, and <extension> are both arbitrary strings.
unquoted whitespaces are ignored.
'xxx' can be used to quote characters
One difference from Collator is that & is used to reset to a current
point. Or, in other words, it introduces a new sequence which is to
be added to the old.
That is: \"a < b < c < d\" is the same as \"a < b & b < c & c < d\" OR
\"a < b < d & b < c\"
XXX: make '' be a single quote.
@see PatternEntry
@version    1.17 12/19/03
@author             Mark Davis, Helena Shih"
      operation 7850651 "MergeCollation"
	public explicit_return_type ""
	nparams 1
	  param in name "pattern" explicit_type "String"
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates from a pattern
@exception ParseException If the input pattern is incorrect."
      end

      operation 7850779 "getPattern"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "recovers current pattern"
      end

      operation 7850907 "getPattern"
	public explicit_return_type "String"
	nparams 1
	  param inout name "withWhiteSpace" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "recovers current pattern.
@param withWhiteSpace puts spacing around the entries, and \\n
before & and <"
      end

      operation 7851035 "findLastWithNoExtension"
	private return_type class_ref 987163 // PatternEntry
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7851163 "emitPattern"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "emits the pattern for collation builder.
@return emits the string in the format understable to the collation
builder."
      end

      operation 7851291 "emitPattern"
	public explicit_return_type "String"
	nparams 1
	  param inout name "withWhiteSpace" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "emits the pattern for collation builder.
@param withWhiteSpace puts spacing around the entries, and \\n
before & and <
@return emits the string in the format understable to the collation
builder."
      end

      operation 7851419 "setPattern"
	public explicit_return_type "void"
	nparams 1
	  param in name "pattern" explicit_type "String"
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "sets the pattern."
      end

      operation 7851547 "addPattern"
	public explicit_return_type "void"
	nparams 1
	  param in name "pattern" explicit_type "String"
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "adds a pattern to the current one.
@param pattern the new pattern to be added"
      end

      operation 7851675 "getCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "gets count of separate entries
@return the size of pattern entries"
      end

      operation 7851803 "getItemAt"
	public return_type class_ref 987163 // PatternEntry
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "gets count of separate entries
@param index the offset of the desired pattern entry
@return the requested pattern entry"
      end

      classrelation 1917467 // patterns (<unidirectional association>)
	relation 1917467 --->
	  a role_name "patterns" init_value "=  new ArrayList()" package
	    comment "============================================================
 privates
============================================================
 a list of PatternEntries"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1917467 // patterns (<unidirectional association>)
	  b parent class_ref 137627 // ArrayList
      end

      classrelation 1917595 // saveEntry (<unidirectional association>)
	relation 1917595 --->
	  a role_name "saveEntry" init_value "=  null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1917595 // saveEntry (<unidirectional association>)
	  b parent class_ref 987163 // PatternEntry
      end

      classrelation 1917723 // lastEntry (<unidirectional association>)
	relation 1917723 --->
	  a role_name "lastEntry" init_value "=  null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1917723 // lastEntry (<unidirectional association>)
	  b parent class_ref 987163 // PatternEntry
      end

      classrelation 1917851 // excess (<unidirectional association>)
	relation 1917851 --->
	  a role_name "excess" init_value "=  new StringBuffer()" private
	    comment " This is really used as a local variable inside fixEntry, but we cache
 it here to avoid newing it up every time the method is called.
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1917851 // excess (<unidirectional association>)
	  b parent class_ref 198171 // StringBuffer
      end

      attribute 2911259 "statusArray"
	private explicit_type "byte"
	multiplicity "[]"
	init_value "=  new byte[8192]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " When building a MergeCollation, we need to do lots of searches to see
 whether a given entry is already in the table.  Since we're using an
 array, this would make the algorithm O(N*N).  To speed things up, we
 use this bit array to remember whether the array contains any entries
 starting with each Unicode character.  If not, we can avoid the search.
 Using BitSet would make this easier, but it's significantly slower.
"
      end

      attribute 2911387 "BITARRAYMASK"
	const_attribute private explicit_type "byte"
	init_value "=  (byte)0x1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2911515 "BYTEPOWER"
	const_attribute private explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2911643 "BYTEMASK"
	const_attribute private explicit_type "int"
	init_value "=  (1 << BYTEPOWER) - 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7851931 "fixEntry"
	private explicit_return_type "void"
	nparams 1
	  param inout name "newEntry" type class_ref 987163 // PatternEntry
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the strength is RESET, then just change the lastEntry to
be the current. (If the current is not in patterns, signal an error).
If not, then remove the current entry, and add it after lastEntry
(which is usually at the end)."
      end

      operation 7852059 "findLastEntry"
	private explicit_return_type "int"
	nparams 2
	  param inout name "entry" type class_ref 987163 // PatternEntry
	  param inout name "excessChars" type class_ref 198171 // StringBuffer
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 987163 "PatternEntry"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Utility class for normalizing and merging patterns for collation.
This is to be used with MergeCollation for adding patterns to an
existing rule table.
@see        MergeCollation
@version    1.25 12/19/03
@author     Mark Davis, Helena Shih"
      operation 7856283 "appendQuotedExtension"
	public explicit_return_type "void"
	nparams 1
	  param inout name "toAddTo" type class_ref 198171 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current extension, quoted"
      end

      operation 7856411 "appendQuotedChars"
	public explicit_return_type "void"
	nparams 1
	  param inout name "toAddTo" type class_ref 198171 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current chars, quoted"
      end

      operation 7856539 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "WARNING this is used for searching in a Vector.
Because Vector.indexOf doesn't take a comparator,
this method is ill-defined and ignores strength."
      end

      operation 7856667 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7856795 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For debugging."
      end

      operation 7856923 "getStrength"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the strength of the entry."
      end

      operation 7857051 "getExtension"
	package explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the expanding characters of the entry."
      end

      operation 7857179 "getChars"
	package explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the core characters of the entry."
      end

      operation 7857307 "addToBuffer"
	package explicit_return_type "void"
	nparams 4
	  param inout name "toAddTo" type class_ref 198171 // StringBuffer
	  param inout name "showExtension" explicit_type "boolean"
	  param inout name "showWhiteSpace" explicit_type "boolean"
	  param inout name "lastEntry" type class_ref 987163 // PatternEntry
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ===== privates ====="
      end

      operation 7857435 "appendQuoted"
	class_operation package explicit_return_type "void"
	nparams 2
	  param in name "chars" explicit_type "String"
	  param inout name "toAddTo" type class_ref 198171 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7857563 "PatternEntry"
	package explicit_return_type ""
	nparams 3
	  param in name "strength" explicit_type "int"
	  param inout name "chars" type class_ref 198171 // StringBuffer
	  param inout name "extension" type class_ref 198171 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "========================================================================
 Parsing a pattern into a list of PatternEntries....
========================================================================"
      end

      class 987419 "Parser"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2912283 "pattern"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2912411 "i"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7857691 "Parser"
	  public explicit_return_type ""
	  nparams 1
	    param in name "pattern" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7857819 "next"
	  public return_type class_ref 987163 // PatternEntry
	  nparams 0
	  nexceptions 1
	    exception class_ref 391963 // ParseException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 1918235 // newChars (<unidirectional association>)
	  relation 1918235 --->
	    a role_name "newChars" init_value "=  new StringBuffer()" private
	      comment " We re-use these objects in order to improve performance
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1918235 // newChars (<unidirectional association>)
	    b parent class_ref 198171 // StringBuffer
	end

	classrelation 1918363 // newExtension (<unidirectional association>)
	  relation 1918363 --->
	    a role_name "newExtension" init_value "=  new StringBuffer()" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1918363 // newExtension (<unidirectional association>)
	    b parent class_ref 198171 // StringBuffer
	end
      end

      operation 7857947 "isSpecialChar"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2912539 "RESET"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2912667 "UNSET"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2912795 "strength"
	package explicit_type "int"
	init_value "=  UNSET"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2912923 "chars"
	package explicit_type "String"
	init_value "=  \"\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2913051 "extension"
	package explicit_type "String"
	init_value "=  \"\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 987291 "MessageFormat"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>MessageFormat</code> provides a means to produce concatenated
messages in language-neutral way. Use this to construct messages
displayed for end users.

<p>
<code>MessageFormat</code> takes a set of objects, formats them, then
inserts the formatted strings into the pattern at the appropriate places.

<p>
<strong>Note:</strong>
<code>MessageFormat</code> differs from the other <code>Format</code>
classes in that you create a <code>MessageFormat</code> object with one
of its constructors (not with a <code>getInstance</code> style factory
method). The factory methods aren't necessary because <code>MessageFormat</code>
itself doesn't implement locale specific behavior. Any locale specific
behavior is defined by the pattern that you provide as well as the
subformats used for inserted arguments.

<h4><a name=\"patterns\">Patterns and Their Interpretation</a></h4>

<code>MessageFormat</code> uses patterns of the following form:
<blockquote><pre>
<i>MessageFormatPattern:</i>
        <i>String</i>
        <i>MessageFormatPattern</i> <i>FormatElement</i> <i>String</i>

<i>FormatElement:</i>
        { <i>ArgumentIndex</i> }
        { <i>ArgumentIndex</i> , <i>FormatType</i> }
        { <i>ArgumentIndex</i> , <i>FormatType</i> , <i>FormatStyle</i> }

<i>FormatType: one of </i>
        number date time choice

<i>FormatStyle:</i>
        short
        medium
        long
        full
        integer
        currency
        percent
        <i>SubformatPattern</i>

<i>String:</i>
        <i>StringPart<sub>opt</sub></i>
        <i>String</i> <i>StringPart</i>

<i>StringPart:</i>
        ''
        ' <i>QuotedString</i> '
        <i>UnquotedString</i>

<i>SubformatPattern:</i>
        <i>SubformatPatternPart<sub>opt</sub></i>
        <i>SubformatPattern</i> <i>SubformatPatternPart</i>

<i>SubFormatPatternPart:</i>
        ' <i>QuotedPattern</i> '
        <i>UnquotedPattern</i>
</pre></blockquote>

<p>
Within a <i>String</i>, <code>\"''\"</code> represents a single
quote. A <i>QuotedString</i> can contain arbitrary characters
except single quotes; the surrounding single quotes are removed.
An <i>UnquotedString</i> can contain arbitrary characters
except single quotes and left curly brackets. Thus, a string that
should result in the formatted message \"'{0}'\" can be written as
<code>\"'''{'0}''\"</code> or <code>\"'''{0}'''\"</code>.
<p>
Within a <i>SubformatPattern</i>, different rules apply.
A <i>QuotedPattern</i> can contain arbitrary characters
except single quotes; but the surrounding single quotes are
<strong>not</strong> removed, so they may be interpreted by the
subformat. For example, <code>\"{1,number,$'#',##}\"</code> will
produce a number format with the pound-sign quoted, with a result
such as: \"$#31,45\".
An <i>UnquotedPattern</i> can contain arbitrary characters
except single quotes, but curly braces within it must be balanced.
For example, <code>\"ab {0} de\"</code> and <code>\"ab '}' de\"</code>
are valid subformat patterns, but <code>\"ab {0'}' de\"</code> and
<code>\"ab } de\"</code> are not.
<p>
<dl><dt><b>Warning:</b><dd>The rules for using quotes within message
format patterns unfortunately have shown to be somewhat confusing.
In particular, it isn't always obvious to localizers whether single
quotes need to be doubled or not. Make sure to inform localizers about
the rules, and tell them (for example, by using comments in resource
bundle source files) which strings will be processed by MessageFormat.
Note that localizers may need to use single quotes in translated
strings where the original version doesn't have them.
</dl>
<p>
The <i>ArgumentIndex</i> value is a non-negative integer written
using the digits '0' through '9', and represents an index into the
<code>arguments</code> array passed to the <code>format</code> methods
or the result array returned by the <code>parse</code> methods.
<p>
The <i>FormatType</i> and <i>FormatStyle</i> values are used to create
a <code>Format</code> instance for the format element. The following
table shows how the values map to Format instances. Combinations not
shown in the table are illegal. A <i>SubformatPattern</i> must
be a valid pattern string for the Format subclass used.
<p>
<table border=1 summary=\"Shows how FormatType and FormatStyle values map to Format instances\">
   <tr>
      <th id=\"ft\">Format Type
      <th id=\"fs\">Format Style
      <th id=\"sc\">Subformat Created
   <tr>
      <td headers=\"ft\"><i>(none)</i>
      <td headers=\"fs\"><i>(none)</i>
      <td headers=\"sc\"><code>null</code>
   <tr>
      <td headers=\"ft\" rowspan=5><code>number</code>
      <td headers=\"fs\"><i>(none)</i>
      <td headers=\"sc\"><code>NumberFormat.getInstance(getLocale())</code>
   <tr>
      <td headers=\"fs\"><code>integer</code>
      <td headers=\"sc\"><code>NumberFormat.getIntegerInstance(getLocale())</code>
   <tr>
      <td headers=\"fs\"><code>currency</code>
      <td headers=\"sc\"><code>NumberFormat.getCurrencyInstance(getLocale())</code>
   <tr>
      <td headers=\"fs\"><code>percent</code>
      <td headers=\"sc\"><code>NumberFormat.getPercentInstance(getLocale())</code>
   <tr>
      <td headers=\"fs\"><i>SubformatPattern</i>
      <td headers=\"sc\"><code>new DecimalFormat(subformatPattern, new DecimalFormatSymbols(getLocale()))</code>
   <tr>
      <td headers=\"ft\" rowspan=6><code>date</code>
      <td headers=\"fs\"><i>(none)</i>
      <td headers=\"sc\"><code>DateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())</code>
   <tr>
      <td headers=\"fs\"><code>short</code>
      <td headers=\"sc\"><code>DateFormat.getDateInstance(DateFormat.SHORT, getLocale())</code>
   <tr>
      <td headers=\"fs\"><code>medium</code>
      <td headers=\"sc\"><code>DateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())</code>
   <tr>
      <td headers=\"fs\"><code>long</code>
      <td headers=\"sc\"><code>DateFormat.getDateInstance(DateFormat.LONG, getLocale())</code>
   <tr>
      <td headers=\"fs\"><code>full</code>
      <td headers=\"sc\"><code>DateFormat.getDateInstance(DateFormat.FULL, getLocale())</code>
   <tr>
      <td headers=\"fs\"><i>SubformatPattern</i>
      <td headers=\"sc\"><code>new SimpleDateFormat(subformatPattern, getLocale())
   <tr>
      <td headers=\"ft\" rowspan=6><code>time</code>
      <td headers=\"fs\"><i>(none)</i>
      <td headers=\"sc\"><code>DateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())</code>
   <tr>
      <td headers=\"fs\"><code>short</code>
      <td headers=\"sc\"><code>DateFormat.getTimeInstance(DateFormat.SHORT, getLocale())</code>
   <tr>
      <td headers=\"fs\"><code>medium</code>
      <td headers=\"sc\"><code>DateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())</code>
   <tr>
      <td headers=\"fs\"><code>long</code>
      <td headers=\"sc\"><code>DateFormat.getTimeInstance(DateFormat.LONG, getLocale())</code>
   <tr>
      <td headers=\"fs\"><code>full</code>
      <td headers=\"sc\"><code>DateFormat.getTimeInstance(DateFormat.FULL, getLocale())</code>
   <tr>
      <td headers=\"fs\"><i>SubformatPattern</i>
      <td headers=\"sc\"><code>new SimpleDateFormat(subformatPattern, getLocale())
   <tr>
      <td headers=\"ft\"><code>choice</code>
      <td headers=\"fs\"><i>SubformatPattern</i>
      <td headers=\"sc\"><code>new ChoiceFormat(subformatPattern)</code>
</table>
<p>

<h4>Usage Information</h4>

<p>
Here are some examples of usage.
In real internationalized programs, the message format pattern and other
static strings will, of course, be obtained from resource bundles.
Other parameters will be dynamically determined at runtime.
<p>
The first example uses the static method <code>MessageFormat.format</code>,
which internally creates a <code>MessageFormat</code> for one-time use:
<blockquote><pre>
int planet = 7;
String event = \"a disturbance in the Force\";

String result = MessageFormat.format(
    \"At {1,time} on {1,date}, there was {2} on planet {0,number,integer}.\",
    planet, new Date(), event);
</pre></blockquote>
The output is:
<blockquote><pre>
At 12:30 PM on Jul 3, 2053, there was a disturbance in the Force on planet 7.
</pre></blockquote>

<p>
The following example creates a <code>MessageFormat</code> instance that
can be used repeatedly:
<blockquote><pre>
int fileCount = 1273;
String diskName = \"MyDisk\";
Object[] testArgs = {new Long(fileCount), diskName};

MessageFormat form = new MessageFormat(
    \"The disk \\\"{1}\\\" contains {0} file(s).\");

System.out.println(form.format(testArgs));
</pre></blockquote>
The output with different values for <code>fileCount</code>:
<blockquote><pre>
The disk \"MyDisk\" contains 0 file(s).
The disk \"MyDisk\" contains 1 file(s).
The disk \"MyDisk\" contains 1,273 file(s).
</pre></blockquote>

<p>
For more sophisticated patterns, you can use a <code>ChoiceFormat</code>
to produce correct forms for singular and plural:
<blockquote><pre>
MessageFormat form = new MessageFormat(\"The disk \\\"{1}\\\" contains {0}.\");
double[] filelimits = {0,1,2};
String[] filepart = {\"no files\",\"one file\",\"{0,number} files\"};
ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart);
form.setFormatByArgumentIndex(0, fileform);

int fileCount = 1273;
String diskName = \"MyDisk\";
Object[] testArgs = {new Long(fileCount), diskName};

System.out.println(form.format(testArgs));
</pre></blockquote>
The output with different values for <code>fileCount</code>:
<blockquote><pre>
The disk \"MyDisk\" contains no files.
The disk \"MyDisk\" contains one file.
The disk \"MyDisk\" contains 1,273 files.
</pre></blockquote>

<p>
You can create the <code>ChoiceFormat</code> programmatically, as in the
above example, or by using a pattern. See {@link ChoiceFormat}
for more information.
<blockquote><pre>
form.applyPattern(
   \"There {0,choice,0#are no files|1#is one file|1&lt;are {0,number,integer} files}.\");
</pre></blockquote>

<p>
<strong>Note:</strong> As we see above, the string produced
by a <code>ChoiceFormat</code> in <code>MessageFormat</code> is treated specially;
occurences of '{' are used to indicated subformats, and cause recursion.
If you create both a <code>MessageFormat</code> and <code>ChoiceFormat</code>
programmatically (instead of using the string patterns), then be careful not to
produce a format that recurses on itself, which will cause an infinite loop.
<p>
When a single argument is parsed more than once in the string, the last match
will be the final result of the parsing.  For example,
<blockquote><pre>
MessageFormat mf = new MessageFormat(\"{0,number,#.##}, {0,number,#.#}\");
Object[] objs = {new Double(3.1415)};
String result = mf.format( objs );
// result now equals \"3.14, 3.1\"
objs = null;
objs = mf.parse(result, new ParsePosition(0));
// objs now equals {new Double(3.1)}
</pre></blockquote>

<p>
Likewise, parsing with a MessageFormat object using patterns containing
multiple occurences of the same argument would return the last match.  For
example,
<blockquote><pre>
MessageFormat mf = new MessageFormat(\"{0}, {0}, {0}\");
String forParsing = \"x, y, z\";
Object[] objs = mf.parse(forParsing, new ParsePosition(0));
// result now equals {new String(\"z\")}
</pre></blockquote>

<h4><a name=\"synchronization\">Synchronization</a></h4>

<p>
Message formats are not synchronized.
It is recommended to create separate format instances for each thread.
If multiple threads access a format concurrently, it must be synchronized
externally.

@see          java.util.Locale
@see          Format
@see          NumberFormat
@see          DecimalFormat
@see          ChoiceFormat
@version      1.56, 12/19/03
@author       Mark Davis"
      classrelation 1917979 // <generalisation>
	relation 1917979 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1917979 // <generalisation>
	  b parent class_ref 984731 // Format
      end

      attribute 2911771 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  6479157306784022952L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7852187 "MessageFormat"
	public explicit_return_type ""
	nparams 1
	  param in name "pattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a MessageFormat for the default locale and the
specified pattern.
The constructor first sets the locale, then parses the pattern and
creates a list of subformats for the format elements contained in it.
Patterns and their interpretation are specified in the
<a href=\"#patterns\">class description</a>.

@param pattern the pattern for this message format
@exception IllegalArgumentException if the pattern is invalid"
      end

      operation 7852315 "MessageFormat"
	public explicit_return_type ""
	nparams 2
	  param in name "pattern" explicit_type "String"
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a MessageFormat for the specified locale and
pattern.
The constructor first sets the locale, then parses the pattern and
creates a list of subformats for the format elements contained in it.
Patterns and their interpretation are specified in the
<a href=\"#patterns\">class description</a>.

@param pattern the pattern for this message format
@param locale the locale for this message format
@exception IllegalArgumentException if the pattern is invalid
@since 1.4"
      end

      operation 7852443 "setLocale"
	public explicit_return_type "void"
	nparams 1
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the locale to be used when creating or comparing subformats.
This affects subsequent calls to the {@link #applyPattern applyPattern}
and {@link #toPattern toPattern} methods as well as to the
<code>format</code> and
{@link #formatToCharacterIterator formatToCharacterIterator} methods.

@param locale the locale to be used when creating or comparing subformats"
      end

      operation 7852571 "getLocale"
	public return_type class_ref 138907 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the locale that's used when creating or comparing subformats.

@return the locale used when creating or comparing subformats"
      end

      operation 7852699 "applyPattern"
	public explicit_return_type "void"
	nparams 1
	  param in name "pattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the pattern used by this message format.
The method parses the pattern and creates a list of subformats
for the format elements contained in it.
Patterns and their interpretation are specified in the
<a href=\"#patterns\">class description</a>.

@param pattern the pattern for this message format
@exception IllegalArgumentException if the pattern is invalid"
      end

      operation 7852827 "toPattern"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pattern representing the current state of the message format.
The string is constructed from internal information and therefore
does not necessarily equal the previously applied pattern. 

@return a pattern representing the current state of the message format"
      end

      operation 7852955 "setFormatsByArgumentIndex"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newFormats" type class_ref 984731 // Format
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the formats to use for the values passed into
<code>format</code> methods or returned from <code>parse</code>
methods. The indices of elements in <code>newFormats</code>
correspond to the argument indices used in the previously set
pattern string.
The order of formats in <code>newFormats</code> thus corresponds to
the order of elements in the <code>arguments</code> array passed
to the <code>format</code> methods or the result array returned
by the <code>parse</code> methods.
<p>
If an argument index is used for more than one format element
in the pattern string, then the corresponding new format is used
for all such format elements. If an argument index is not used
for any format element in the pattern string, then the
corresponding new format is ignored. If fewer formats are provided
than needed, then only the formats for argument indices less
than <code>newFormats.length</code> are replaced.

@param newFormats the new formats to use
@exception NullPointerException if <code>newFormats</code> is null
@since 1.4"
      end

      operation 7853083 "setFormats"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newFormats" type class_ref 984731 // Format
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the formats to use for the format elements in the
previously set pattern string.
The order of formats in <code>newFormats</code> corresponds to
the order of format elements in the pattern string.
<p>
If more formats are provided than needed by the pattern string,
the remaining ones are ignored. If fewer formats are provided
than needed, then only the first <code>newFormats.length</code>
formats are replaced.
<p>
Since the order of format elements in a pattern string often
changes during localization, it is generally better to use the
{@link #setFormatsByArgumentIndex setFormatsByArgumentIndex}
method, which assumes an order of formats corresponding to the
order of elements in the <code>arguments</code> array passed to
the <code>format</code> methods or the result array returned by
the <code>parse</code> methods.

@param newFormats the new formats to use
@exception NullPointerException if <code>newFormats</code> is null"
      end

      operation 7853211 "setFormatByArgumentIndex"
	public explicit_return_type "void"
	nparams 2
	  param in name "argumentIndex" explicit_type "int"
	  param inout name "newFormat" type class_ref 984731 // Format
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the format to use for the format elements within the
previously set pattern string that use the given argument
index.
The argument index is part of the format element definition and
represents an index into the <code>arguments</code> array passed
to the <code>format</code> methods or the result array returned
by the <code>parse</code> methods.
<p>
If the argument index is used for more than one format element
in the pattern string, then the new format is used for all such
format elements. If the argument index is not used for any format
element in the pattern string, then the new format is ignored.

@param argumentIndex the argument index for which to use the new format
@param newFormat the new format to use
@since 1.4"
      end

      operation 7853339 "setFormat"
	public explicit_return_type "void"
	nparams 2
	  param in name "formatElementIndex" explicit_type "int"
	  param inout name "newFormat" type class_ref 984731 // Format
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the format to use for the format element with the given
format element index within the previously set pattern string.
The format element index is the zero-based number of the format
element counting from the start of the pattern string.
<p>
Since the order of format elements in a pattern string often
changes during localization, it is generally better to use the
{@link #setFormatByArgumentIndex setFormatByArgumentIndex}
method, which accesses format elements based on the argument
index they specify.

@param formatElementIndex the index of a format element within the pattern
@param newFormat the format to use for the specified format element
@exception ArrayIndexOutOfBoundsException if formatElementIndex is equal to or
           larger than the number of format elements in the pattern string"
      end

      operation 7853467 "getFormatsByArgumentIndex"
	public return_type class_ref 984731 // Format
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the formats used for the values passed into
<code>format</code> methods or returned from <code>parse</code>
methods. The indices of elements in the returned array
correspond to the argument indices used in the previously set
pattern string.
The order of formats in the returned array thus corresponds to
the order of elements in the <code>arguments</code> array passed
to the <code>format</code> methods or the result array returned
by the <code>parse</code> methods.
<p>
If an argument index is used for more than one format element
in the pattern string, then the format used for the last such
format element is returned in the array. If an argument index
is not used for any format element in the pattern string, then
null is returned in the array.

@return the formats used for the arguments within the pattern
@since 1.4"
      end

      operation 7853595 "getFormats"
	public return_type class_ref 984731 // Format
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the formats used for the format elements in the
previously set pattern string.
The order of formats in the returned array corresponds to
the order of format elements in the pattern string.
<p>
Since the order of format elements in a pattern string often
changes during localization, it's generally better to use the
{@link #getFormatsByArgumentIndex getFormatsByArgumentIndex}
method, which assumes an order of formats corresponding to the
order of elements in the <code>arguments</code> array passed to
the <code>format</code> methods or the result array returned by
the <code>parse</code> methods.

@return the formats used for the format elements in the pattern"
      end

      operation 7853723 "format"
	public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param inout name "arguments" explicit_type "Object"
	  param inout name "result" type class_ref 198171 // StringBuffer
	  param inout name "pos" type class_ref 701083 // FieldPosition
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats an array of objects and appends the <code>MessageFormat</code>'s
pattern, with format elements replaced by the formatted objects, to the
provided <code>StringBuffer</code>.
<p>
The text substituted for the individual format elements is derived from
the current subformat of the format element and the
<code>arguments</code> element at the format element's argument index
as indicated by the first matching line of the following table. An
argument is <i>unavailable</i> if <code>arguments</code> is
<code>null</code> or has fewer than argumentIndex+1 elements.
<p>
<table border=1 summary=\"Examples of subformat,argument,and formatted text\">
   <tr>
      <th>Subformat
      <th>Argument
      <th>Formatted Text
   <tr>
      <td><i>any</i>
      <td><i>unavailable</i>
      <td><code>\"{\" + argumentIndex + \"}\"</code>
   <tr>
      <td><i>any</i>
      <td><code>null</code>
      <td><code>\"null\"</code>
   <tr>
      <td><code>instanceof ChoiceFormat</code>
      <td><i>any</i>
      <td><code>subformat.format(argument).indexOf('{') >= 0 ?<br>
          (new MessageFormat(subformat.format(argument), getLocale())).format(argument) :
          subformat.format(argument)</code>
   <tr>
      <td><code>!= null</code>
      <td><i>any</i>
      <td><code>subformat.format(argument)</code>
   <tr>
      <td><code>null</code>
      <td><code>instanceof Number</code>
      <td><code>NumberFormat.getInstance(getLocale()).format(argument)</code>
   <tr>
      <td><code>null</code>
      <td><code>instanceof Date</code>
      <td><code>DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale()).format(argument)</code>
   <tr>
      <td><code>null</code>
      <td><code>instanceof String</code>
      <td><code>argument</code>
   <tr>
      <td><code>null</code>
      <td><i>any</i>
      <td><code>argument.toString()</code>
</table>
<p>
If <code>pos</code> is non-null, and refers to
<code>Field.ARGUMENT</code>, the location of the first formatted
string will be returned.

@param arguments an array of objects to be formatted and substituted.
@param result where text is appended.
@param pos On input: an alignment field, if desired.
           On output: the offsets of the alignment field.
@exception IllegalArgumentException if an argument in the
           <code>arguments</code> array is not of the type
           expected by the format element(s) that use it."
      end

      operation 7853851 "format"
	class_operation public explicit_return_type "String"
	nparams 2
	  param in name "pattern" explicit_type "String"
	  param inout name "arguments" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a MessageFormat with the given pattern and uses it
to format the given arguments. This is equivalent to
<blockquote>
    <code>(new {@link #MessageFormat(String) MessageFormat}(pattern)).{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}(arguments, new StringBuffer(), null).toString()</code>
</blockquote>

@exception IllegalArgumentException if the pattern is invalid,
           or if an argument in the <code>arguments</code> array
           is not of the type expected by the format element(s)
           that use it."
      end

      operation 7853979 "format"
	public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param inout name "arguments" explicit_type "Object"
	  param inout name "result" type class_ref 198171 // StringBuffer
	  param inout name "pos" type class_ref 701083 // FieldPosition
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Overrides

Formats an array of objects and appends the <code>MessageFormat</code>'s
pattern, with format elements replaced by the formatted objects, to the
provided <code>StringBuffer</code>.
This is equivalent to
<blockquote>
    <code>{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}((Object[]) arguments, result, pos)</code>
</blockquote>

@param arguments an array of objects to be formatted and substituted.
@param result where text is appended.
@param pos On input: an alignment field, if desired.
           On output: the offsets of the alignment field.
@exception IllegalArgumentException if an argument in the
           <code>arguments</code> array is not of the type
           expected by the format element(s) that use it."
      end

      operation 7854107 "formatToCharacterIterator"
	public return_type class_ref 361115 // AttributedCharacterIterator
	nparams 1
	  param inout name "arguments" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats an array of objects and inserts them into the
<code>MessageFormat</code>'s pattern, producing an
<code>AttributedCharacterIterator</code>.
You can use the returned <code>AttributedCharacterIterator</code>
to build the resulting String, as well as to determine information
about the resulting String.
<p>
The text of the returned <code>AttributedCharacterIterator</code> is
the same that would be returned by
<blockquote>
    <code>{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}(arguments, new StringBuffer(), null).toString()</code>
</blockquote>
<p>
In addition, the <code>AttributedCharacterIterator</code> contains at
least attributes indicating where text was generated from an
argument in the <code>arguments</code> array. The keys of these attributes are of
type <code>MessageFormat.Field</code>, their values are
<code>Integer</code> objects indicating the index in the <code>arguments</code>
array of the argument from which the text was generated.
<p>
The attributes/value from the underlying <code>Format</code>
instances that <code>MessageFormat</code> uses will also be
placed in the resulting <code>AttributedCharacterIterator</code>.
This allows you to not only find where an argument is placed in the
resulting String, but also which fields it contains in turn.

@param arguments an array of objects to be formatted and substituted.
@return AttributedCharacterIterator describing the formatted value.
@exception NullPointerException if <code>arguments</code> is null.
@exception IllegalArgumentException if an argument in the
           <code>arguments</code> array is not of the type
           expected by the format element(s) that use it.
@since 1.4"
      end

      operation 7854235 "parse"
	public explicit_return_type "Object"
	nparams 2
	  param in name "source" explicit_type "String"
	  param inout name "pos" type class_ref 984987 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the string.

<p>Caveats: The parse may fail in a number of circumstances.
For example:
<ul>
<li>If one of the arguments does not occur in the pattern.
<li>If the format of an argument loses information, such as
    with a choice format where a large number formats to \"many\".
<li>Does not yet handle recursion (where
    the substituted strings contain {n} references.)
<li>Will not always find a match (or the correct match)
    if some part of the parse is ambiguous.
    For example, if the pattern \"{1},{2}\" is used with the
    string arguments {\"a,b\", \"c\"}, it will format as \"a,b,c\".
    When the result is parsed, it will return {\"a\", \"b,c\"}.
<li>If a single argument is parsed more than once in the string,
    then the later parse wins.
</ul>
When the parse fails, use ParsePosition.getErrorIndex() to find out
where in the string did the parsing failed.  The returned error
index is the starting offset of the sub-patterns that the string
is comparing with.  For example, if the parsing string \"AAA {0} BBB\"
is comparing against the pattern \"AAD {0} BBB\", the error index is
0. When an error occurs, the call to this method will return null.
If the source is null, return an empty array."
      end

      operation 7854363 "parse"
	public explicit_return_type "Object"
	nparams 1
	  param in name "source" explicit_type "String"
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from the beginning of the given string to produce an object
array.
The method may not use the entire text of the given string.
<p>
See the {@link #parse(String, ParsePosition)} method for more information
on message parsing.

@param source A <code>String</code> whose beginning should be parsed.
@return An <code>Object</code> array parsed from the string.
@exception ParseException if the beginning of the specified string
           cannot be parsed."
      end

      operation 7854491 "parseObject"
	public explicit_return_type "Object"
	nparams 2
	  param in name "source" explicit_type "String"
	  param inout name "pos" type class_ref 984987 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from a string to produce an object array.
<p>
The method attempts to parse text starting at the index given by
<code>pos</code>.
If parsing succeeds, then the index of <code>pos</code> is updated
to the index after the last character used (parsing does not necessarily
use all characters up to the end of the string), and the parsed
object array is returned. The updated <code>pos</code> can be used to
indicate the starting point for the next call to this method.
If an error occurs, then the index of <code>pos</code> is not
changed, the error index of <code>pos</code> is set to the index of
the character where the error occurred, and null is returned.
<p>
See the {@link #parse(String, ParsePosition)} method for more information
on message parsing.

@param source A <code>String</code>, part of which should be parsed.
@param pos A <code>ParsePosition</code> object with index and error
           index information as described above.
@return An <code>Object</code> array parsed from the string. In case of
        error, returns null.
@exception NullPointerException if <code>pos</code> is null."
      end

      operation 7854619 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a copy of this object.

@return a clone of this instance."
      end

      operation 7854747 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equality comparison between two message format objects"
      end

      operation 7854875 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a hash code for the message format object."
      end
    end

    class 987675 "RBTableBuilder"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class contains all the code to parse a RuleBasedCollator pattern
and build a RBCollationTables object from it.  A particular instance
of tis class exists only during the actual build process-- once an
RBCollationTables object has been built, the RBTableBuilder object
goes away.  This object carries all of the state which is only needed
during the build process, plus a \"shadow\" copy of all of the state
that will go into the tables object itself.  This object communicates
with RBCollationTables through a separate class, RBCollationTables.BuildAPI,
this is an inner class of RBCollationTables and provides a separate
private API for communication with RBTableBuilder.
This class isn't just an inner class of RBCollationTables itself because
of its large size.  For source-code readability, it seemed better for the
builder to have its own source file."
      operation 7860123 "RBTableBuilder"
	public explicit_return_type ""
	nparams 1
	  param inout name "tables" type class_ref 987547 // BuildAPI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7860251 "build"
	public explicit_return_type "void"
	nparams 2
	  param in name "pattern" explicit_type "String"
	  param in name "decmp" explicit_type "int"
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a table-based collation object with the given rules.
This is the main function that actually builds the tables and
stores them back in the RBCollationTables object.  It is called
ONLY by the RBCollationTables constructor.
@see java.util.RuleBasedCollator#RuleBasedCollator
@exception ParseException If the rules format is incorrect."
      end

      operation 7860379 "addComposedChars"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add expanding entries for pre-composed unicode characters so that this
collator can be used reasonably well with decomposition turned off."
      end

      operation 7860507 "commit"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look up for unmapped values in the expanded character table.

When the expanding character tables are built by addExpandOrder,
it doesn't know what the final ordering of each character
in the expansion will be.  Instead, it just puts the raw character
code into the table, adding CHARINDEX as a flag.  Now that we've
finished building the mapping table, we can go back and look up
that character to see what its real collation order is and
stick that into the expansion table.  That lets us avoid doing
a two-stage lookup later."
      end

      operation 7860635 "increment"
	private explicit_return_type "int"
	nparams 2
	  param in name "aStrength" explicit_type "int"
	  param in name "lastValue" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Increment of the last order based on the comparison level."
      end

      operation 7860763 "addOrder"
	private explicit_return_type "void"
	nparams 2
	  param in name "ch" explicit_type "int"
	  param in name "anOrder" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds a character and its designated order into the collation table."
      end

      operation 7860891 "addContractOrder"
	private explicit_return_type "void"
	nparams 2
	  param in name "groupChars" explicit_type "String"
	  param in name "anOrder" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7861019 "addContractOrder"
	private explicit_return_type "void"
	nparams 3
	  param in name "groupChars" explicit_type "String"
	  param in name "anOrder" explicit_type "int"
	  param inout name "fwd" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds the contracting string into the collation table."
      end

      operation 7861147 "getContractOrder"
	private explicit_return_type "int"
	nparams 1
	  param in name "groupChars" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the given string has been specified as a contracting string
in this collation table, return its ordering.
Otherwise return UNMAPPED."
      end

      operation 7861275 "getCharOrder"
	private explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7861403 "getContractValues"
	private return_type class_ref 153883 // Vector
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the entry of hash table of the contracting string in the collation
 table.
 @param ch the starting character of the contracting string"
      end

      operation 7861531 "getContractValuesImpl"
	private return_type class_ref 153883 // Vector
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7861659 "addExpandOrder"
	private explicit_return_type "void"
	nparams 3
	  param in name "contractChars" explicit_type "String"
	  param in name "expandChars" explicit_type "String"
	  param in name "anOrder" explicit_type "int"
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds the expanding string into the collation table."
      end

      operation 7861787 "addExpandOrder"
	private explicit_return_type "void"
	nparams 3
	  param in name "ch" explicit_type "int"
	  param in name "expandChars" explicit_type "String"
	  param in name "anOrder" explicit_type "int"
	nexceptions 1
	  exception class_ref 391963 // ParseException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7861915 "addExpansion"
	private explicit_return_type "int"
	nparams 2
	  param in name "anOrder" explicit_type "int"
	  param in name "expandChars" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new entry in the expansion table that contains the orderings
for the given characers.  If anOrder is valid, it is added to the
beginning of the expanded list of orders."
      end

      operation 7862043 "addContractFlags"
	private explicit_return_type "void"
	nparams 1
	  param in name "chars" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2915355 "CHARINDEX"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0x70000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ==============================================================
 constants
 ==============================================================
 need look up in .commit()"
      end

      attribute 2915483 "IGNORABLEMASK"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x0000ffff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2915611 "PRIMARYORDERINCREMENT"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x00010000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2915739 "SECONDARYORDERINCREMENT"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x00000100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2915867 "TERTIARYORDERINCREMENT"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x00000001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2915995 "INITIALTABLESIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2916123 "MAXKEYSIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1918747 // tables (<unidirectional association>)
	relation 1918747 --->
	  a role_name "tables" init_value "=  null" private
	    comment " ==============================================================
 instance variables
 ==============================================================
 variables used by the build process
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1918747 // tables (<unidirectional association>)
	  b parent class_ref 987547 // BuildAPI
      end

      classrelation 1918875 // mPattern (<unidirectional association>)
	relation 1918875 --->
	  a role_name "mPattern" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1918875 // mPattern (<unidirectional association>)
	  b parent class_ref 987035 // MergeCollation
      end

      attribute 2916251 "isOverIgnore"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2916379 "keyBuf"
	private explicit_type "char"
	multiplicity "[]"
	init_value "=  new char[MAXKEYSIZE]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2916507 "contractFlags"
	private explicit_type "IntHashtable"
	init_value "=  new IntHashtable(100)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2916635 "frenchSec"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " \"shadow\" copies of the instance variables in RBCollationTables
 (the values in these variables are copied back into RBCollationTables
 at the end of the build process)"
      end

      attribute 2916763 "seAsianSwapping"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2916891 "mapping"
	private explicit_type "UCompactIntArray"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1919003 // contractTable (<unidirectional association>)
	relation 1919003 --->
	  a role_name "contractTable" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1919003 // contractTable (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      classrelation 1919131 // expandTable (<unidirectional association>)
	relation 1919131 --->
	  a role_name "expandTable" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1919131 // expandTable (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      attribute 2917019 "maxSecOrder"
	private explicit_type "short"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2917147 "maxTerOrder"
	private explicit_type "short"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 987803 "SimpleDateFormat"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>SimpleDateFormat</code> is a concrete class for formatting and
parsing dates in a locale-sensitive manner. It allows for formatting
(date -> text), parsing (text -> date), and normalization.

<p>
<code>SimpleDateFormat</code> allows you to start by choosing
any user-defined patterns for date-time formatting. However, you
are encouraged to create a date-time formatter with either
<code>getTimeInstance</code>, <code>getDateInstance</code>, or
<code>getDateTimeInstance</code> in <code>DateFormat</code>. Each
of these class methods can return a date/time formatter initialized
with a default format pattern. You may modify the format pattern
using the <code>applyPattern</code> methods as desired.
For more information on using these methods, see
{@link DateFormat}.

<h4>Date and Time Patterns</h4>
<p>
Date and time formats are specified by <em>date and time pattern</em>
strings.
Within date and time pattern strings, unquoted letters from
<code>'A'</code> to <code>'Z'</code> and from <code>'a'</code> to
<code>'z'</code> are interpreted as pattern letters representing the
components of a date or time string.
Text can be quoted using single quotes (<code>'</code>) to avoid
interpretation.
<code>\"''\"</code> represents a single quote.
All other characters are not interpreted; they're simply copied into the
output string during formatting or matched against the input string
during parsing.
<p>
The following pattern letters are defined (all other characters from
<code>'A'</code> to <code>'Z'</code> and from <code>'a'</code> to
<code>'z'</code> are reserved):
<blockquote>
<table border=0 cellspacing=3 cellpadding=0 summary=\"Chart shows pattern letters, date/time component, presentation, and examples.\">
    <tr bgcolor=\"#ccccff\">
        <th align=left>Letter
        <th align=left>Date or Time Component
        <th align=left>Presentation
        <th align=left>Examples
    <tr>
        <td><code>G</code>
        <td>Era designator
        <td><a href=\"#text\">Text</a>
        <td><code>AD</code>
    <tr bgcolor=\"#eeeeff\">
        <td><code>y</code>
        <td>Year
        <td><a href=\"#year\">Year</a>
        <td><code>1996</code>; <code>96</code>
    <tr>
        <td><code>M</code>
        <td>Month in year
        <td><a href=\"#month\">Month</a>
        <td><code>July</code>; <code>Jul</code>; <code>07</code>
    <tr bgcolor=\"#eeeeff\">
        <td><code>w</code>
        <td>Week in year
        <td><a href=\"#number\">Number</a>
        <td><code>27</code>
    <tr>
        <td><code>W</code>
        <td>Week in month
        <td><a href=\"#number\">Number</a>
        <td><code>2</code>
    <tr bgcolor=\"#eeeeff\">
        <td><code>D</code>
        <td>Day in year
        <td><a href=\"#number\">Number</a>
        <td><code>189</code>
    <tr>
        <td><code>d</code>
        <td>Day in month
        <td><a href=\"#number\">Number</a>
        <td><code>10</code>
    <tr bgcolor=\"#eeeeff\">
        <td><code>F</code>
        <td>Day of week in month
        <td><a href=\"#number\">Number</a>
        <td><code>2</code>
    <tr>
        <td><code>E</code>
        <td>Day in week
        <td><a href=\"#text\">Text</a>
        <td><code>Tuesday</code>; <code>Tue</code>
    <tr bgcolor=\"#eeeeff\">
        <td><code>a</code>
        <td>Am/pm marker
        <td><a href=\"#text\">Text</a>
        <td><code>PM</code>
    <tr>
        <td><code>H</code>
        <td>Hour in day (0-23)
        <td><a href=\"#number\">Number</a>
        <td><code>0</code>
    <tr bgcolor=\"#eeeeff\">
        <td><code>k</code>
        <td>Hour in day (1-24)
        <td><a href=\"#number\">Number</a>
        <td><code>24</code>
    <tr>
        <td><code>K</code>
        <td>Hour in am/pm (0-11)
        <td><a href=\"#number\">Number</a>
        <td><code>0</code>
    <tr bgcolor=\"#eeeeff\">
        <td><code>h</code>
        <td>Hour in am/pm (1-12)
        <td><a href=\"#number\">Number</a>
        <td><code>12</code>
    <tr>
        <td><code>m</code>
        <td>Minute in hour
        <td><a href=\"#number\">Number</a>
        <td><code>30</code>
    <tr bgcolor=\"#eeeeff\">
        <td><code>s</code>
        <td>Second in minute
        <td><a href=\"#number\">Number</a>
        <td><code>55</code>
    <tr>
        <td><code>S</code>
        <td>Millisecond
        <td><a href=\"#number\">Number</a>
        <td><code>978</code>
    <tr bgcolor=\"#eeeeff\">
        <td><code>z</code>
        <td>Time zone
        <td><a href=\"#timezone\">General time zone</a>
        <td><code>Pacific Standard Time</code>; <code>PST</code>; <code>GMT-08:00</code>
    <tr>
        <td><code>Z</code>
        <td>Time zone
        <td><a href=\"#rfc822timezone\">RFC 822 time zone</a>
        <td><code>-0800</code>
</table>
</blockquote>
Pattern letters are usually repeated, as their number determines the
exact presentation:
<ul>
<li><strong><a name=\"text\">Text:</a></strong>
    For formatting, if the number of pattern letters is 4 or more,
    the full form is used; otherwise a short or abbreviated form
    is used if available.
    For parsing, both forms are accepted, independent of the number
    of pattern letters.
<li><strong><a name=\"number\">Number:</a></strong>
    For formatting, the number of pattern letters is the minimum
    number of digits, and shorter numbers are zero-padded to this amount.
    For parsing, the number of pattern letters is ignored unless
    it's needed to separate two adjacent fields.
<li><strong><a name=\"year\">Year:</a></strong>
    For formatting, if the number of pattern letters is 2, the year
    is truncated to 2 digits; otherwise it is interpreted as a
    <a href=\"#number\">number</a>.
    <p>For parsing, if the number of pattern letters is more than 2,
    the year is interpreted literally, regardless of the number of
    digits. So using the pattern \"MM/dd/yyyy\", \"01/11/12\" parses to
    Jan 11, 12 A.D.
    <p>For parsing with the abbreviated year pattern (\"y\" or \"yy\"),
    <code>SimpleDateFormat</code> must interpret the abbreviated year
    relative to some century.  It does this by adjusting dates to be
    within 80 years before and 20 years after the time the <code>SimpleDateFormat</code>
    instance is created. For example, using a pattern of \"MM/dd/yy\" and a
    <code>SimpleDateFormat</code> instance created on Jan 1, 1997,  the string
    \"01/11/12\" would be interpreted as Jan 11, 2012 while the string \"05/04/64\"
    would be interpreted as May 4, 1964.
    During parsing, only strings consisting of exactly two digits, as defined by
    {@link Character#isDigit(char)}, will be parsed into the default century.
    Any other numeric string, such as a one digit string, a three or more digit
    string, or a two digit string that isn't all digits (for example, \"-1\"), is
    interpreted literally.  So \"01/02/3\" or \"01/02/003\" are parsed, using the
    same pattern, as Jan 2, 3 AD.  Likewise, \"01/02/-3\" is parsed as Jan 2, 4 BC.
<li><strong><a name=\"month\">Month:</a></strong>
    If the number of pattern letters is 3 or more, the month is
    interpreted as <a href=\"#text\">text</a>; otherwise,
    it is interpreted as a <a href=\"#number\">number</a>.
<li><strong><a name=\"timezone\">General time zone:</a></strong>
    Time zones are interpreted as <a href=\"#text\">text</a> if they have
    names. For time zones representing a GMT offset value, the
    following syntax is used:
    <pre>
    <a name=\"GMTOffsetTimeZone\"><i>GMTOffsetTimeZone:</i></a>
            <code>GMT</code> <i>Sign</i> <i>Hours</i> <code>:</code> <i>Minutes</i>
    <i>Sign:</i> one of
            <code>+ -</code>
    <i>Hours:</i>
            <i>Digit</i>
            <i>Digit</i> <i>Digit</i>
    <i>Minutes:</i>
            <i>Digit</i> <i>Digit</i>
    <i>Digit:</i> one of
            <code>0 1 2 3 4 5 6 7 8 9</code></pre>
    <i>Hours</i> must be between 0 and 23, and <i>Minutes</i> must be between
    00 and 59. The format is locale independent and digits must be taken
    from the Basic Latin block of the Unicode standard.
    <p>For parsing, <a href=\"#rfc822timezone\">RFC 822 time zones</a> are also
    accepted.
<li><strong><a name=\"rfc822timezone\">RFC 822 time zone:</a></strong>
    For formatting, the RFC 822 4-digit time zone format is used:
    <pre>
    <i>RFC822TimeZone:</i>
            <i>Sign</i> <i>TwoDigitHours</i> <i>Minutes</i>
    <i>TwoDigitHours:</i>
            <i>Digit Digit</i></pre>
    <i>TwoDigitHours</i> must be between 00 and 23. Other definitions
    are as for <a href=\"#timezone\">general time zones</a>.
    <p>For parsing, <a href=\"#timezone\">general time zones</a> are also
    accepted.
</ul>
<code>SimpleDateFormat</code> also supports <em>localized date and time
pattern</em> strings. In these strings, the pattern letters described above
may be replaced with other, locale dependent, pattern letters.
<code>SimpleDateFormat</code> does not deal with the localization of text
other than the pattern letters; that's up to the client of the class.
<p>

<h4>Examples</h4>

The following examples show how date and time patterns are interpreted in
the U.S. locale. The given date and time are 2001-07-04 12:08:56 local time
in the U.S. Pacific Time time zone.
<blockquote>
<table border=0 cellspacing=3 cellpadding=0 summary=\"Examples of date and time patterns interpreted in the U.S. locale\">
    <tr bgcolor=\"#ccccff\">
        <th align=left>Date and Time Pattern
        <th align=left>Result
    <tr>
        <td><code>\"yyyy.MM.dd G 'at' HH:mm:ss z\"</code>
        <td><code>2001.07.04 AD at 12:08:56 PDT</code>
    <tr bgcolor=\"#eeeeff\">
        <td><code>\"EEE, MMM d, ''yy\"</code>
        <td><code>Wed, Jul 4, '01</code>
    <tr>
        <td><code>\"h:mm a\"</code>
        <td><code>12:08 PM</code>
    <tr bgcolor=\"#eeeeff\">
        <td><code>\"hh 'o''clock' a, zzzz\"</code>
        <td><code>12 o'clock PM, Pacific Daylight Time</code>
    <tr>
        <td><code>\"K:mm a, z\"</code>
        <td><code>0:08 PM, PDT</code>
    <tr bgcolor=\"#eeeeff\">
        <td><code>\"yyyyy.MMMMM.dd GGG hh:mm aaa\"</code>
        <td><code>02001.July.04 AD 12:08 PM</code>
    <tr>
        <td><code>\"EEE, d MMM yyyy HH:mm:ss Z\"</code>
        <td><code>Wed, 4 Jul 2001 12:08:56 -0700</code>
    <tr bgcolor=\"#eeeeff\">
        <td><code>\"yyMMddHHmmssZ\"</code>
        <td><code>010704120856-0700</code>
    <tr>
        <td><code>\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"</code>
        <td><code>2001-07-04T12:08:56.235-0700</code>
</table>
</blockquote>

<h4><a name=\"synchronization\">Synchronization</a></h4>

<p>
Date formats are not synchronized.
It is recommended to create separate format instances for each thread.
If multiple threads access a format concurrently, it must be synchronized
externally.

@see          <a href=\"http://java.sun.com/docs/books/tutorial/i18n/format/simpleDateFormat.html\">Java Tutorial</a>
@see          java.util.Calendar
@see          java.util.TimeZone
@see          DateFormat
@see          DateFormatSymbols
@version      1.77, 01/22/04
@author       Mark Davis, Chen-Lieh Huang, Alan Liu"
      classrelation 1920155 // <generalisation>
	relation 1920155 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1920155 // <generalisation>
	  b parent class_ref 490139 // DateFormat
      end

      attribute 2917915 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  4774881970558875024L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the official serial version ID which says cryptically
 which version we're compatible with"
      end

      attribute 2918043 "currentSerialVersion"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the internal serial version which says which version was written
 - 0 (default) for version up to JDK 1.1.3
 - 1 for version from JDK 1.1.4, which includes a new field"
      end

      attribute 2918171 "serialVersionOnStream"
	private explicit_type "int"
	init_value "=  currentSerialVersion"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The version of the serialized data on the stream.  Possible values:
<ul>
<li><b>0</b> or not present on stream: JDK 1.1.3.  This version
has no <code>defaultCenturyStart</code> on stream.
<li><b>1</b> JDK 1.1.4 or later.  This version adds
<code>defaultCenturyStart</code>.
</ul>
When streaming out this class, the most recent format
and the highest allowable <code>serialVersionOnStream</code>
is written.
@serial
@since JDK1.1.4
"
      end

      attribute 2918299 "pattern"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The pattern string of this formatter.  This is always a non-localized
pattern.  May not be null.  See class documentation for details.
@serial
"
      end

      attribute 2918427 "compiledPattern"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The compiled pattern.
"
      end

      attribute 2918555 "TAG_QUOTE_ASCII_CHAR"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tags for the compiled pattern.
"
      end

      attribute 2918683 "TAG_QUOTE_CHARS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  101"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2918811 "zeroDigit"
	private explicit_type "char"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Locale dependent digit zero.
@see #zeroPaddingNumber
@see java.text.DecimalFormatSymbols#getZeroDigit
"
      end

      classrelation 1920283 // formatData (<unidirectional association>)
	relation 1920283 --->
	  a role_name "formatData" private
	    comment "
The symbols used by this formatter for week names, month names,
etc.  May not be null.
@serial
@see java.text.DateFormatSymbols

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1920283 // formatData (<unidirectional association>)
	  b parent class_ref 986011 // DateFormatSymbols
      end

      classrelation 1920411 // defaultCenturyStart (<unidirectional association>)
	relation 1920411 --->
	  a role_name "defaultCenturyStart" private
	    comment "
We map dates with two-digit years into the century starting at
<code>defaultCenturyStart</code>, which may be any date.  May
not be null.
@serial
@since JDK1.1.4

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1920411 // defaultCenturyStart (<unidirectional association>)
	  b parent class_ref 139163 // Date
      end

      attribute 2918939 "defaultCenturyStartYear"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2919067 "millisPerHour"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  60 * 60 * 1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2919195 "millisPerMinute"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  60 * 1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2919323 "GMT"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"GMT\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " For time zones that have no names, use strings GMT+minutes and
 GMT-minutes. For instance, in France the time zone is GMT+60."
      end

      classrelation 1920539 // cachedLocaleData (<unidirectional association>)
	relation 1920539 --->
	  a role_name "cachedLocaleData" init_value "=  new Hashtable(3)" class_relation private
	    comment "
Cache to hold the DateTimePatterns of a Locale.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1920539 // cachedLocaleData (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end

      classrelation 1920667 // cachedNumberFormatData (<unidirectional association>)
	relation 1920667 --->
	  a role_name "cachedNumberFormatData" init_value "=  new Hashtable(3)" class_relation private
	    comment "
Cache NumberFormat instances with Locale key.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1920667 // cachedNumberFormatData (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end

      operation 7863707 "SimpleDateFormat"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SimpleDateFormat</code> using the default pattern and
date format symbols for the default locale.
<b>Note:</b> This constructor may not support all locales.
For full coverage, use the factory methods in the {@link DateFormat}
class."
      end

      operation 7863835 "SimpleDateFormat"
	public explicit_return_type ""
	nparams 1
	  param in name "pattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SimpleDateFormat</code> using the given pattern and
the default date format symbols for the default locale.
<b>Note:</b> This constructor may not support all locales.
For full coverage, use the factory methods in the {@link DateFormat}
class.

@param pattern the pattern describing the date and time format
@exception NullPointerException if the given pattern is null
@exception IllegalArgumentException if the given pattern is invalid"
      end

      operation 7863963 "SimpleDateFormat"
	public explicit_return_type ""
	nparams 2
	  param in name "pattern" explicit_type "String"
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SimpleDateFormat</code> using the given pattern and
the default date format symbols for the given locale.
<b>Note:</b> This constructor may not support all locales.
For full coverage, use the factory methods in the {@link DateFormat}
class.

@param pattern the pattern describing the date and time format
@param locale the locale whose date format symbols should be used
@exception NullPointerException if the given pattern is null
@exception IllegalArgumentException if the given pattern is invalid"
      end

      operation 7864091 "SimpleDateFormat"
	public explicit_return_type ""
	nparams 2
	  param in name "pattern" explicit_type "String"
	  param inout name "formatSymbols" type class_ref 986011 // DateFormatSymbols
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SimpleDateFormat</code> using the given pattern and
date format symbols.

@param pattern the pattern describing the date and time format
@param formatSymbols the date format symbols to be used for formatting
@exception NullPointerException if the given pattern or formatSymbols is null
@exception IllegalArgumentException if the given pattern is invalid"
      end

      operation 7864219 "SimpleDateFormat"
	package explicit_return_type ""
	nparams 3
	  param in name "timeStyle" explicit_type "int"
	  param in name "dateStyle" explicit_type "int"
	  param inout name "loc" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package-private, called by DateFormat factory methods "
      end

      operation 7864347 "initialize"
	private explicit_return_type "void"
	nparams 1
	  param inout name "loc" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialize calendar and numberFormat fields "
      end

      operation 7864475 "compile"
	private explicit_return_type "char"
	nparams 1
	  param in name "pattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the compiled form of the given pattern. The syntax of
the compiled pattern is:
<blockquote>
CompiledPattern:
    EntryList
EntryList:
    Entry
    EntryList Entry
Entry:
    TagField
    TagField data
TagField:
    Tag Length
    TaggedData
Tag:
    pattern_char_index
    TAG_QUOTE_CHARS
Length:
    short_length
    long_length
TaggedData:
    TAG_QUOTE_ASCII_CHAR ascii_char

</blockquote>

where `short_length' is an 8-bit unsigned integer between 0 and
254.  `long_length' is a sequence of an 8-bit integer 255 and a
32-bit signed integer value which is split into upper and lower
16-bit fields in two char's. `pattern_char_index' is an 8-bit
integer between 0 and 18. `ascii_char' is an 7-bit ASCII
character value. `data' depends on its Tag value.
<p>
If Length is short_length, Tag and short_length are packed in a
single char, as illustrated below.
<blockquote>
    char[0] = (Tag << 8) | short_length;
</blockquote>

If Length is long_length, Tag and 255 are packed in the first
char and a 32-bit integer, as illustrated below.
<blockquote>
    char[0] = (Tag << 8) | 255;
    char[1] = (char) (long_length >>> 16);
    char[2] = (char) (long_length & 0xffff);
</blockquote>
<p>
If Tag is a pattern_char_index, its Length is the number of
pattern characters. For example, if the given pattern is
\"yyyy\", Tag is 1 and Length is 4, followed by no data.
<p>
If Tag is TAG_QUOTE_CHARS, its Length is the number of char's
following the TagField. For example, if the given pattern is
\"'o''clock'\", Length is 7 followed by a char sequence of
<code>o&nbs;'&nbs;c&nbs;l&nbs;o&nbs;c&nbs;k</code>.
<p>
TAG_QUOTE_ASCII_CHAR is a special tag and has an ASCII
character in place of Length. For example, if the given pattern
is \"'o'\", the TaggedData entry is
<code>((TAG_QUOTE_ASCII_CHAR&nbs;<<&nbs;8)&nbs;|&nbs;'o')</code>.

@exception NullPointerException if the given pattern is null
@exception IllegalArgumentException if the given pattern is invalid"
      end

      operation 7864603 "encode"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "tag" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param inout name "buffer" type class_ref 360091 // StringBuilder
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes the given tag and length and puts encoded char(s) into buffer."
      end

      operation 7864731 "initializeDefaultCentury"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialize the fields we use to disambiguate ambiguous years. Separate
so we can call it from readObject()."
      end

      operation 7864859 "parseAmbiguousDatesAsAfter"
	private explicit_return_type "void"
	nparams 1
	  param inout name "startDate" type class_ref 139163 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Define one-century window into which to disambiguate dates using
two-digit years."
      end

      operation 7864987 "set2DigitYearStart"
	public explicit_return_type "void"
	nparams 1
	  param inout name "startDate" type class_ref 139163 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the 100-year period 2-digit years will be interpreted as being in
to begin on the date the user specifies.

@param startDate During parsing, two digit years will be placed in the range
<code>startDate</code> to <code>startDate + 100 years</code>.
@see #get2DigitYearStart
@since 1.2"
      end

      operation 7865115 "get2DigitYearStart"
	public return_type class_ref 139163 // Date
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the beginning date of the 100-year period 2-digit years are interpreted
as being within.

@return the start of the 100-year period into which two digit years are
parsed
@see #set2DigitYearStart
@since 1.2"
      end

      operation 7865243 "format"
	public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param inout name "date" type class_ref 139163 // Date
	  param inout name "toAppendTo" type class_ref 198171 // StringBuffer
	  param inout name "pos" type class_ref 701083 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats the given <code>Date</code> into a date/time string and appends
the result to the given <code>StringBuffer</code>.

@param date the date-time value to be formatted into a date-time string.
@param toAppendTo where the new date-time text is to be appended.
@param pos the formatting position. On input: an alignment field,
if desired. On output: the offsets of the alignment field.
@return the formatted date-time string.
@exception NullPointerException if the given date is null"
      end

      operation 7865371 "format"
	private return_type class_ref 198171 // StringBuffer
	nparams 3
	  param inout name "date" type class_ref 139163 // Date
	  param inout name "toAppendTo" type class_ref 198171 // StringBuffer
	  param inout name "delegate" type class_ref 984859 // FieldDelegate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Called from Format after creating a FieldDelegate"
      end

      operation 7865499 "formatToCharacterIterator"
	public return_type class_ref 361115 // AttributedCharacterIterator
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats an Object producing an <code>AttributedCharacterIterator</code>.
You can use the returned <code>AttributedCharacterIterator</code>
to build the resulting String, as well as to determine information
about the resulting String.
<p>
Each attribute key of the AttributedCharacterIterator will be of type
<code>DateFormat.Field</code>, with the corresponding attribute value
being the same as the attribute key.

@exception NullPointerException if obj is null.
@exception IllegalArgumentException if the Format cannot format the
           given object, or if the Format's pattern string is invalid.
@param obj The object to format
@return AttributedCharacterIterator describing the formatted value.
@since 1.4"
      end

      attribute 2919451 "PATTERN_INDEX_TO_CALENDAR_FIELD"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value "= 
    {
        Calendar.ERA, Calendar.YEAR, Calendar.MONTH, Calendar.DATE,
        Calendar.HOUR_OF_DAY, Calendar.HOUR_OF_DAY, Calendar.MINUTE,
        Calendar.SECOND, Calendar.MILLISECOND, Calendar.DAY_OF_WEEK,
        Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK_IN_MONTH,
        Calendar.WEEK_OF_YEAR, Calendar.WEEK_OF_MONTH,
        Calendar.AM_PM, Calendar.HOUR, Calendar.HOUR, Calendar.ZONE_OFFSET,
        Calendar.ZONE_OFFSET
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Map index into pattern character string to Calendar field number"
      end

      attribute 2919579 "PATTERN_INDEX_TO_DATE_FORMAT_FIELD"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value "=  {
        DateFormat.ERA_FIELD, DateFormat.YEAR_FIELD, DateFormat.MONTH_FIELD,
        DateFormat.DATE_FIELD, DateFormat.HOUR_OF_DAY1_FIELD,
        DateFormat.HOUR_OF_DAY0_FIELD, DateFormat.MINUTE_FIELD,
        DateFormat.SECOND_FIELD, DateFormat.MILLISECOND_FIELD,
        DateFormat.DAY_OF_WEEK_FIELD, DateFormat.DAY_OF_YEAR_FIELD,
        DateFormat.DAY_OF_WEEK_IN_MONTH_FIELD, DateFormat.WEEK_OF_YEAR_FIELD,
        DateFormat.WEEK_OF_MONTH_FIELD, DateFormat.AM_PM_FIELD,
        DateFormat.HOUR1_FIELD, DateFormat.HOUR0_FIELD,
        DateFormat.TIMEZONE_FIELD, DateFormat.TIMEZONE_FIELD,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Map index into pattern character string to DateFormat field number"
      end

      classrelation 1920795 // PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID (<unidirectional association>)
	relation 1920795 --->
	  a role_name "PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID" multiplicity "[]" init_value "=  {
        Field.ERA, Field.YEAR, Field.MONTH, Field.DAY_OF_MONTH,
        Field.HOUR_OF_DAY1, Field.HOUR_OF_DAY0, Field.MINUTE,
        Field.SECOND, Field.MILLISECOND, Field.DAY_OF_WEEK,
        Field.DAY_OF_YEAR, Field.DAY_OF_WEEK_IN_MONTH,
        Field.WEEK_OF_YEAR, Field.WEEK_OF_MONTH,
        Field.AM_PM, Field.HOUR1, Field.HOUR0, Field.TIME_ZONE,
        Field.TIME_ZONE,
    }" class_relation const_relation private
	    comment " Maps from DecimalFormatSymbols index to Field constant
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1920795 // PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID (<unidirectional association>)
	  b parent class_ref 985115 // Field
      end

      operation 7865627 "subFormat"
	private explicit_return_type "void"
	nparams 4
	  param in name "patternCharIndex" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param inout name "delegate" type class_ref 984859 // FieldDelegate
	  param inout name "buffer" type class_ref 198171 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private member function that does the real date/time formatting."
      end

      operation 7865755 "zeroPaddingNumber"
	private explicit_return_type "void"
	nparams 4
	  param in name "value" explicit_type "int"
	  param in name "minDigits" explicit_type "int"
	  param in name "maxDigits" explicit_type "int"
	  param inout name "buffer" type class_ref 198171 // StringBuffer
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a number with the specified minimum and maximum number of digits."
      end

      operation 7865883 "parse"
	public return_type class_ref 139163 // Date
	nparams 2
	  param in name "text" explicit_type "String"
	  param inout name "pos" type class_ref 984987 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from a string to produce a <code>Date</code>.
<p>
The method attempts to parse text starting at the index given by
<code>pos</code>.
If parsing succeeds, then the index of <code>pos</code> is updated
to the index after the last character used (parsing does not necessarily
use all characters up to the end of the string), and the parsed
date is returned. The updated <code>pos</code> can be used to
indicate the starting point for the next call to this method.
If an error occurs, then the index of <code>pos</code> is not
changed, the error index of <code>pos</code> is set to the index of
the character where the error occurred, and null is returned.

@param text  A <code>String</code>, part of which should be parsed.
@param pos   A <code>ParsePosition</code> object with index and error
             index information as described above.
@return A <code>Date</code> parsed from the string. In case of
        error, returns null.
@exception NullPointerException if <code>text</code> or <code>pos</code> is null."
      end

      operation 7866011 "matchString"
	private explicit_return_type "int"
	nparams 4
	  param in name "text" explicit_type "String"
	  param in name "start" explicit_type "int"
	  param in name "field" explicit_type "int"
	  param in name "data" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private code-size reduction function used by subParse.
@param text the time text being parsed.
@param start where to start parsing.
@param field the date field being parsed.
@param data the string array to parsed.
@return the new start position if matching succeeded; a negative number
indicating matching failure, otherwise."
      end

      operation 7866139 "matchZoneString"
	private explicit_return_type "int"
	nparams 3
	  param in name "text" explicit_type "String"
	  param in name "start" explicit_type "int"
	  param in name "zoneIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7866267 "matchDSTString"
	private explicit_return_type "boolean"
	nparams 4
	  param in name "text" explicit_type "String"
	  param in name "start" explicit_type "int"
	  param in name "zoneIndex" explicit_type "int"
	  param in name "standardIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7866395 "subParseZoneString"
	private explicit_return_type "int"
	nparams 2
	  param in name "text" explicit_type "String"
	  param in name "start" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "find time zone 'text' matched zoneStrings and set to internal
calendar."
      end

      operation 7866523 "subParse"
	private explicit_return_type "int"
	nparams 7
	  param in name "text" explicit_type "String"
	  param in name "start" explicit_type "int"
	  param in name "patternCharIndex" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param inout name "obeyCount" explicit_type "boolean"
	  param inout name "ambiguousYear" explicit_type "boolean"
	  param inout name "origPos" type class_ref 984987 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private member function that converts the parsed date strings into
timeFields. Returns -start (for ParsePosition) if failed.
@param text the time text to be parsed.
@param start where to start parsing.
@param ch the pattern character for the date field text to be parsed.
@param count the count of a pattern character.
@param obeyCount if true, then the next field directly abuts this one,
and we should use the count to know when to stop parsing.
@param ambiguousYear return parameter; upon return, if ambiguousYear[0]
is true, then a two-digit year was parsed and may need to be readjusted.
@param origPos origPos.errorIndex is used to return an error index
at which a parse error occurred, if matching failure occurs.
@return the new start position if matching succeeded; -1 indicating
matching failure, otherwise. In case matching failure occurred,
an error index is set to origPos.errorIndex."
      end

      operation 7866651 "translatePattern"
	private explicit_return_type "String"
	nparams 3
	  param in name "pattern" explicit_type "String"
	  param in name "from" explicit_type "String"
	  param in name "to" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a pattern, mapping each character in the from string to the
corresponding character in the to string.

@exception IllegalArgumentException if the given pattern is invalid"
      end

      operation 7866779 "toPattern"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pattern string describing this date format.

@return a pattern string describing this date format."
      end

      operation 7866907 "toLocalizedPattern"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a localized pattern string describing this date format.

@return a localized pattern string describing this date format."
      end

      operation 7867035 "applyPattern"
	public explicit_return_type "void"
	nparams 1
	  param in name "pattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the given pattern string to this date format.

@param pattern the new date and time pattern for this date format
@exception NullPointerException if the given pattern is null
@exception IllegalArgumentException if the given pattern is invalid"
      end

      operation 7867163 "applyLocalizedPattern"
	public explicit_return_type "void"
	nparams 1
	  param in name "pattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the given localized pattern string to this date format.

@param pattern a String to be mapped to the new date and time format
       pattern for this format
@exception NullPointerException if the given pattern is null
@exception IllegalArgumentException if the given pattern is invalid"
      end

      operation 7867291 "getDateFormatSymbols"
	public return_type class_ref 986011 // DateFormatSymbols
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a copy of the date and time format symbols of this date format.

@return the date and time format symbols of this date format
@see #setDateFormatSymbols"
      end

      operation 7867419 "setDateFormatSymbols"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newFormatSymbols" type class_ref 986011 // DateFormatSymbols
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the date and time format symbols of this date format.

@param newFormatSymbols the new date and time format symbols
@exception NullPointerException if the given newFormatSymbols is null
@see #getDateFormatSymbols"
      end

      operation 7867547 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a copy of this <code>SimpleDateFormat</code>. This also
clones the format's date format symbols.

@return a clone of this <code>SimpleDateFormat</code>"
      end

      operation 7867675 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this <code>SimpleDateFormat</code> object.

@return the hash code value for this <code>SimpleDateFormat</code> object."
      end

      operation 7867803 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the given object with this <code>SimpleDateFormat</code> for
equality.

@return true if the given object is equal to this
<code>SimpleDateFormat</code>"
      end

      operation 7867931 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "After reading an object from the input stream, the format
pattern in the object is verified.
<p>
@exception InvalidObjectException if the pattern is invalid"
      end
    end

    class 987931 "StringCharacterIterator"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>StringCharacterIterator</code> implements the
<code>CharacterIterater</code> protocol for a <code>String</code>.
The <code>StringCharacterIterator</code> class iterates over the
entire <code>String</code>.

@see CharacterIterator"
      classrelation 1920923 // <realization>
	relation 1920923 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1920923 // <realization>
	  b parent class_ref 447003 // CharacterIterator
      end

      attribute 2919707 "text"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2919835 "begin"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2919963 "end"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2920091 "pos"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " invariant: begin <= pos <= end"
      end

      operation 7868059 "StringCharacterIterator"
	public explicit_return_type ""
	nparams 1
	  param in name "text" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an iterator with an initial index of 0."
      end

      operation 7868187 "StringCharacterIterator"
	public explicit_return_type ""
	nparams 2
	  param in name "text" explicit_type "String"
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an iterator with the specified initial index.

@param  text   The String to be iterated over
@param  pos    Initial iterator position"
      end

      operation 7868315 "StringCharacterIterator"
	public explicit_return_type ""
	nparams 4
	  param in name "text" explicit_type "String"
	  param in name "begin" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an iterator over the given range of the given string, with the
index set at the specified position.

@param  text   The String to be iterated over
@param  begin  Index of the first character
@param  end    Index of the character following the last character
@param  pos    Initial iterator position"
      end

      operation 7868443 "setText"
	public explicit_return_type "void"
	nparams 1
	  param in name "text" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset this iterator to point to a new string.  This package-visible
method is used by other java.text classes that want to avoid allocating
new StringCharacterIterator objects every time their setText method
is called.

@param  text   The String to be iterated over
@since 1.2"
      end

      operation 7868571 "first"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.first() for String.
@see CharacterIterator#first"
      end

      operation 7868699 "last"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.last() for String.
@see CharacterIterator#last"
      end

      operation 7868827 "setIndex"
	public explicit_return_type "char"
	nparams 1
	  param in name "p" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.setIndex() for String.
@see CharacterIterator#setIndex"
      end

      operation 7868955 "current"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.current() for String.
@see CharacterIterator#current"
      end

      operation 7869083 "next"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.next() for String.
@see CharacterIterator#next"
      end

      operation 7869211 "previous"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.previous() for String.
@see CharacterIterator#previous"
      end

      operation 7869339 "getBeginIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.getBeginIndex() for String.
@see CharacterIterator#getBeginIndex"
      end

      operation 7869467 "getEndIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.getEndIndex() for String.
@see CharacterIterator#getEndIndex"
      end

      operation 7869595 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.getIndex() for String.
@see CharacterIterator#getIndex"
      end

      operation 7869723 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the equality of two StringCharacterIterator objects.
@param obj the StringCharacterIterator object to be compared with.
@return true if the given obj is the same as this
StringCharacterIterator object; false otherwise."
      end

      operation 7869851 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes a hashcode for this iterator.
@return A hash code"
      end

      operation 7869979 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a copy of this iterator.
@return A copy of this"
      end
    end
  end

  deploymentview 147227 "text"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 311579 "CharacterIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 447003 // CharacterIterator
      end
      comment "@(#)CharacterIterator.java	1.19 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

The original version of this source code and documentation
is copyrighted and owned by Taligent, Inc., a wholly-owned
subsidiary of IBM. These materials are provided under terms
of a License Agreement between Taligent and Sun. This technology
is protected by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 646683 "AttributedCharacterIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
${definition}"
      associated_classes
	class_ref 361115 // AttributedCharacterIterator
      end
      comment "@(#)AttributedCharacterIterator.java	1.32 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 753051 "Annotation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 983707 // Annotation
      end
      comment "@(#)Annotation.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 753179 "AttributedString"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.text.AttributedCharacterIterator.Attribute;
${definition}"
      associated_classes
	class_ref 983835 // AttributedString
	class_ref 984219 // AttributeEntry
      end
      comment "@(#)AttributedString.java	1.36 04/07/16

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 753307 "Bidi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Toolkit;
import java.awt.font.TextAttribute;
import java.awt.font.NumericShaper;
import sun.text.CodePointIterator;
${definition}"
      associated_classes
	class_ref 877979 // Bidi
      end
      comment "@(#)Bidi.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright IBM Corp. 1999-2003 - All Rights Reserved

The original version of this source code and documentation is
copyrighted and owned by IBM. These materials are provided
under terms of a License Agreement between IBM and Sun.
This technology is protected by multiple US and International
patents. This notice and attribution to IBM may not be removed."
    end

    artifact 753435 "BreakDictionary"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.security.AccessController;
import java.security.PrivilegedActionException;
import java.security.PrivilegedExceptionAction;
import java.util.MissingResourceException;
import sun.text.CompactByteArray;
import sun.text.SupplementaryCharacterData;
${definition}"
      associated_classes
	class_ref 984347 // BreakDictionary
      end
      comment "@(#)BreakDictionary.java	1.14 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


@(#)BreakDictionary.java        1.3 99/04/07

(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 2002 - All Rights Reserved

The original version of this source code and documentation
is copyrighted and owned by Taligent, Inc., a wholly-owned
subsidiary of IBM. These materials are provided under terms
of a License Agreement between Taligent and Sun. This technology
is protected by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc."
    end

    artifact 753563 "BreakIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import sun.text.resources.LocaleData;
import java.text.CharacterIterator;
import java.text.StringCharacterIterator;
import java.net.URL;
import java.io.InputStream;
import java.io.IOException;
import java.lang.ref.SoftReference;
import java.security.AccessController;
import java.security.PrivilegedAction;
${definition}"
      associated_classes
	class_ref 866459 // BreakIterator
      end
      comment "@(#)BreakIterator.java	1.35 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

The original version of this source code and documentation
is copyrighted and owned by Taligent, Inc., a wholly-owned
subsidiary of IBM. These materials are provided under terms
of a License Agreement between Taligent and Sun. This technology
is protected by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 753691 "Format"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_classes
	class_ref 984731 // Format
      end
      comment "@(#)Format.java	1.34 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 753819 "CharacterIteratorFieldDelegate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 984603 // CharacterIteratorFieldDelegate
      end
      comment "@(#)CharacterIteratorFieldDelegate.java	1.4 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 753947 "ChoiceFormat"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.io.IOException;
import java.io.ObjectInputStream;
import sun.text.Utility;
${definition}"
      associated_classes
	class_ref 985243 // ChoiceFormat
      end
      comment "@(#)ChoiceFormat.java	1.34 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 754075 "CollationElementIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.Character;
import java.util.Vector;
import sun.text.Normalizer;
import sun.text.NormalizerUtilities;
${definition}"
      associated_classes
	class_ref 985499 // CollationElementIterator
      end
      comment "@(#)CollationElementIterator.java	1.48 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996-1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 754203 "CollationKey"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 985755 // CollationKey
      end
      comment "@(#)CollationKey.java	1.18 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 754331 "CollationRules"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 985883 // CollationRules
      end
      comment "@(#)CollationRules.java	1.26 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996,1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996, 1997 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 754459 "Collator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import sun.misc.SoftCache;
import sun.text.resources.LocaleData;
${definition}"
      associated_classes
	class_ref 653339 // Collator
      end
      comment "@(#)Collator.java	1.39 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996-1998 -  All Rights Reserved
(C) Copyright IBM Corp. 1996-1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 754587 "DateFormatSymbols"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Locale;
import java.util.ResourceBundle;
import java.io.Serializable;
import java.lang.ref.SoftReference;
import java.util.Vector;
import java.util.Enumeration;
import sun.text.Utility;
import sun.text.resources.LocaleData;
import java.util.Hashtable;
${definition}"
      associated_classes
	class_ref 986011 // DateFormatSymbols
      end
      comment "@(#)DateFormatSymbols.java	1.41 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 754715 "DecimalFormat"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Currency;
import java.util.Hashtable;
import java.util.Locale;
import java.util.ResourceBundle;
import sun.text.resources.LocaleData;
${definition}"
      associated_classes
	class_ref 700699 // DecimalFormat
      end
      comment "@(#)DecimalFormat.java	1.79 04/06/28

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 754843 "DecimalFormatSymbols"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.util.Currency;
import java.util.Hashtable;
import java.util.Locale;
import java.util.ResourceBundle;
import sun.text.resources.LocaleData;
${definition}"
      associated_classes
	class_ref 700571 // DecimalFormatSymbols
      end
      comment "@(#)DecimalFormatSymbols.java	1.41 04/05/10

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 754971 "RuleBasedBreakIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.BufferedInputStream;
import java.io.IOException;
import java.security.AccessController;
import java.security.PrivilegedActionException;
import java.security.PrivilegedExceptionAction;
import java.util.Vector;
import java.util.Stack;
import java.util.Hashtable;
import java.util.Enumeration;
import java.util.MissingResourceException;
import java.text.CharacterIterator;
import java.text.StringCharacterIterator;
import sun.text.CompactByteArray;
import sun.text.SupplementaryCharacterData;
${definition}"
      associated_classes
	class_ref 986395 // RuleBasedBreakIterator
      end
      comment "@(#)RuleBasedBreakIterator.java	1.17 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


@(#)RuleBasedBreakIterator.java	1.3 99/04/07

(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 2002 - All Rights Reserved

The original version of this source code and documentation
is copyrighted and owned by Taligent, Inc., a wholly-owned
subsidiary of IBM. These materials are provided under terms
of a License Agreement between Taligent and Sun. This technology
is protected by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc."
    end

    artifact 755099 "DictionaryBasedBreakIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import java.util.Stack;
import java.util.Hashtable;
import java.text.CharacterIterator;
import java.io.InputStream;
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 986267 // DictionaryBasedBreakIterator
      end
      comment "@(#)DictionaryBasedBreakIterator.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


@(#)DictionaryBasedBreakIterator.java	1.3 99/05/03

(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 2002 - All Rights Reserved

The original version of this source code and documentation
is copyrighted and owned by Taligent, Inc., a wholly-owned
subsidiary of IBM. These materials are provided under terms
of a License Agreement between Taligent and Sun. This technology
is protected by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc."
    end

    artifact 755227 "DigitList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.math.BigDecimal;
import java.math.BigInteger;
${definition}"
      associated_classes
	class_ref 986139 // DigitList
      end
      comment "@(#)DigitList.java	1.30 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 755355 "FieldPosition"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 701083 // FieldPosition
      end
      comment "@(#)FieldPosition.java	1.21 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 755483 "DontCareFieldPosition"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 986651 // DontCareFieldPosition
      end
      comment "@(#)DontCareFieldPosition.java	1.3 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 755611 "EntryPair"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 986907 // EntryPair
      end
      comment "@(#)EntryPair.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 755739 "MergeCollation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 987035 // MergeCollation
      end
      comment "@(#)MergeCollation.java	1.17 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996, 1997 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 755867 "ParseException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 391963 // ParseException
      end
      comment "@(#)ParseException.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 755995 "ParsePosition"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 984987 // ParsePosition
      end
      comment "@(#)ParsePosition.java	1.19 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 756123 "PatternEntry"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.Character;
${definition}"
      associated_classes
	class_ref 987163 // PatternEntry
      end
      comment "@(#)PatternEntry.java	1.25 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996, 1997 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 756251 "RBCollationTables"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import sun.text.UCompactIntArray;
import sun.text.IntHashtable;
${definition}"
      associated_classes
	class_ref 985627 // RBCollationTables
      end
      comment "@(#)RBCollationTables.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996-1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 756379 "RBTableBuilder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import sun.text.UCompactIntArray;
import sun.text.IntHashtable;
import sun.text.Normalizer;
import sun.text.NormalizerImpl;
import sun.text.ComposedCharIter;
import sun.text.NormalizerUtilities;
${definition}"
      associated_classes
	class_ref 987675 // RBTableBuilder
      end
      comment "@(#)RBTableBuilder.java	1.12 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996-1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 756507 "RuleBasedCollator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import java.util.Locale;
import sun.text.Normalizer;
import sun.text.NormalizerUtilities;
${definition}"
      associated_classes
	class_ref 809883 // RuleBasedCollator
      end
      comment "@(#)RuleBasedCollator.java	1.37 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996-1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 756635 "SimpleDateFormat"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.TimeZone;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.SimpleTimeZone;
import java.util.GregorianCalendar;
import java.io.ObjectInputStream;
import java.io.InvalidObjectException;
import java.io.IOException;
import java.lang.ClassNotFoundException;
import java.util.Hashtable;
import java.lang.StringIndexOutOfBoundsException;
import sun.text.resources.LocaleData;
import sun.util.calendar.CalendarUtils;
import sun.util.calendar.ZoneInfoFile;
${definition}"
      associated_classes
	class_ref 987803 // SimpleDateFormat
      end
      comment "@(#)SimpleDateFormat.java	1.77 04/01/22

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996 - All Rights Reserved
(C) Copyright IBM Corp. 1996-1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 756763 "StringCharacterIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 987931 // StringCharacterIterator
      end
      comment "@(#)StringCharacterIterator.java	1.21 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

The original version of this source code and documentation
is copyrighted and owned by Taligent, Inc., a wholly-owned
subsidiary of IBM. These materials are provided under terms
of a License Agreement between Taligent and Sun. This technology
is protected by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.
"
    end
  end
end
