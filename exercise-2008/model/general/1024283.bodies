class IIORegistry
!!!8205851.java!!!	IIORegistry()
        super(initialCategories.iterator());
        registerStandardSpis();
        registerApplicationClasspathSpis();
!!!8205979.java!!!	getDefaultInstance() : IIORegistry
        AppContext context = AppContext.getAppContext();
        IIORegistry registry =
            (IIORegistry)context.get(IIORegistry.class);
        if (registry == null) {
            // Create an instance for this AppContext
            registry = new IIORegistry();
            context.put(IIORegistry.class, registry);
        }
        return registry;
!!!8206107.java!!!	registerStandardSpis() : void
        // Hardwire standard SPIs
        registerServiceProvider(new GIFImageReaderSpi());
        registerServiceProvider(new BMPImageReaderSpi());
        registerServiceProvider(new BMPImageWriterSpi());
        registerServiceProvider(new WBMPImageReaderSpi());
        registerServiceProvider(new WBMPImageWriterSpi());
        registerServiceProvider(new PNGImageReaderSpi());
        registerServiceProvider(new PNGImageWriterSpi());
        registerServiceProvider(new JPEGImageReaderSpi());
        registerServiceProvider(new JPEGImageWriterSpi());
        registerServiceProvider(new FileImageInputStreamSpi());
        registerServiceProvider(new FileImageOutputStreamSpi());
        registerServiceProvider(new InputStreamImageInputStreamSpi());
        registerServiceProvider(new OutputStreamImageOutputStreamSpi());
        registerServiceProvider(new RAFImageInputStreamSpi());
        registerServiceProvider(new RAFImageOutputStreamSpi());

        registerInstalledProviders();
!!!8206235.java!!!	registerApplicationClasspathSpis() : void
        // FIX: load only from application classpath
        
	ClassLoader loader = Thread.currentThread().getContextClassLoader();

        Iterator categories = getCategories();
        while (categories.hasNext()) {
            Class c = (Class)categories.next();
            Iterator<IIOServiceProvider> riter = Service.providers(c, loader);
            while (riter.hasNext()) {
                try {
                    IIOServiceProvider r = riter.next();
                    registerServiceProvider(r);
                } catch (ServiceConfigurationError err) {
                    if (System.getSecurityManager() != null) {
                        // In the applet case, we will catch the  error so
                        // registration of other plugins can  proceed 
                        err.printStackTrace();
                    } else {
                        // In the application case, we will  throw the
                        // error to indicate app/system  misconfiguration
                        throw err;
                    }
                }
            }
        }
!!!8206363.java!!!	registerInstalledProviders() : void
        /*
          We need load installed providers from lib/ext
          directory in the privileged mode in order to 
          be able read corresponding jar files even if
          file read capability is restricted (like the 
          applet context case).
         */
        PrivilegedAction doRegistration =
            new PrivilegedAction() {
                public Object run() {
                    Iterator categories = getCategories();
                    while (categories.hasNext()) {
                        Class c = (Class)categories.next();
                        Iterator<IIOServiceProvider> providers =
                            Service.installedProviders(c);
                        while (providers.hasNext()) {
                            IIOServiceProvider p = providers.next();
                            registerServiceProvider(p);
                        }
                    }
                    return this;
                }
            };
        
        AccessController.doPrivileged(doRegistration);
