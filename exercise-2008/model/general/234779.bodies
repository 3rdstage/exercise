class IdentityHashtable
!!!1679771.java!!!	IdentityHashtable(in initialCapacity : int, in loadFactor : float)
	if ((initialCapacity <= 0) || (loadFactor <= 0.0)) {
	    throw new IllegalArgumentException();
	}
	this.loadFactor = loadFactor;
	table = new IdentityHashtableEntry[initialCapacity];
	threshold = (int)(initialCapacity * loadFactor);
!!!1679899.java!!!	IdentityHashtable(in initialCapacity : int)
	this(initialCapacity, 0.75f);
!!!1680027.java!!!	IdentityHashtable()
	this(101, 0.75f);
!!!1680155.java!!!	size() : int
	return count;
!!!1680283.java!!!	isEmpty() : boolean
	return count == 0;
!!!1680411.java!!!	keys() : Enumeration
	return new IdentityHashtableEnumerator(table, true);
!!!1680539.java!!!	elements() : Enumeration
	return new IdentityHashtableEnumerator(table, false);
!!!1680667.java!!!	contains(inout value : Object) : boolean
	if (value == null) {
	    throw new NullPointerException();
	}

	IdentityHashtableEntry tab[] = table;
	for (int i = tab.length ; i-- > 0 ;) {
	    for (IdentityHashtableEntry e = tab[i] ; e != null ; e = e.next) {
		if (e.value == value) {
		    return true;
		}
	    }
	}
	return false;
!!!1680795.java!!!	containsKey(inout key : Object) : boolean
	IdentityHashtableEntry tab[] = table;
	int hash = System.identityHashCode(key);
	int index = (hash & 0x7FFFFFFF) % tab.length;
	for (IdentityHashtableEntry e = tab[index] ; e != null ; e = e.next) {
	    if ((e.hash == hash) && e.key == key) {
		return true;
	    }
	}
	return false;
!!!1680923.java!!!	get(inout key : Object) : Object
	IdentityHashtableEntry tab[] = table;
	int hash = System.identityHashCode(key);
	int index = (hash & 0x7FFFFFFF) % tab.length;
	for (IdentityHashtableEntry e = tab[index] ; e != null ; e = e.next) {
	    if ((e.hash == hash) && e.key == key) {
		return e.value;
	    }
	}
	return null;
!!!1681051.java!!!	rehash() : void
	int oldCapacity = table.length;
	IdentityHashtableEntry oldTable[] = table;

	int newCapacity = oldCapacity * 2 + 1;
	IdentityHashtableEntry newTable[] = new IdentityHashtableEntry[newCapacity];

	threshold = (int)(newCapacity * loadFactor);
	table = newTable;

	//System.out.println("rehash old=" + oldCapacity + ", new=" + newCapacity + ", thresh=" + threshold + ", count=" + count);

	for (int i = oldCapacity ; i-- > 0 ;) {
	    for (IdentityHashtableEntry old = oldTable[i] ; old != null ; ) {
		IdentityHashtableEntry e = old;
		old = old.next;

		int index = (e.hash & 0x7FFFFFFF) % newCapacity;
		e.next = newTable[index];
		newTable[index] = e;
	    }
	}
!!!1681179.java!!!	put(inout key : Object, inout value : Object) : Object
	// Make sure the value is not null
	if (value == null) {
	    throw new NullPointerException();
	}

	// Makes sure the key is not already in the hashtable.
	IdentityHashtableEntry tab[] = table;
	int hash = System.identityHashCode(key);
	int index = (hash & 0x7FFFFFFF) % tab.length;
	for (IdentityHashtableEntry e = tab[index] ; e != null ; e = e.next) {
	    if ((e.hash == hash) && e.key == key) {
		Object old = e.value;
		e.value = value;
		return old;
	    }
	}

	if (count >= threshold) {
	    // Rehash the table if the threshold is exceeded
	    rehash();
	    return put(key, value);
	} 

	// Creates the new entry.
	IdentityHashtableEntry e = new IdentityHashtableEntry();
	e.hash = hash;
	e.key = key;
	e.value = value;
	e.next = tab[index];
	tab[index] = e;
	count++;
	return null;
!!!1681307.java!!!	remove(inout key : Object) : Object
	IdentityHashtableEntry tab[] = table;
	int hash = System.identityHashCode(key);
	int index = (hash & 0x7FFFFFFF) % tab.length;
	for (IdentityHashtableEntry e = tab[index], prev = null ; e != null ; prev = e, e = e.next) {
	    if ((e.hash == hash) && e.key == key) {
		if (prev != null) {
		    prev.next = e.next;
		} else {
		    tab[index] = e.next;
		}
		count--;
		return e.value;
	    }
	}
	return null;
!!!1681435.java!!!	clear() : void
	IdentityHashtableEntry tab[] = table;
	for (int index = tab.length; --index >= 0; )
	    tab[index] = null;
	count = 0;
!!!1681563.java!!!	toString() : String
	int max = size() - 1;
	StringBuffer buf = new StringBuffer();
	Enumeration k = keys();
	Enumeration e = elements();
	buf.append("{");

	for (int i = 0; i <= max; i++) {
	    String s1 = k.nextElement().toString();
	    String s2 = e.nextElement().toString();
	    buf.append(s1 + "=" + s2);
	    if (i < max) {
		buf.append(", ");
	    }
	}
	buf.append("}");
	return buf.toString();
