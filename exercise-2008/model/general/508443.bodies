class CSet
!!!3145115.java!!!	CSet()
      m_set = new SparseBitSet();
      m_complement = false;
!!!3145243.java!!!	complement() : void
	m_complement = true;
!!!3145371.java!!!	add(in i : int) : void
	m_set.set(i);
!!!3145499.java!!!	addncase(in c : char) : void
	/* Do this in a Unicode-friendly way. */
	/* (note that duplicate adds have no effect) */
	add(c);
	add(Character.toLowerCase(c));
	add(Character.toTitleCase(c));
	add(Character.toUpperCase(c));
!!!3145627.java!!!	contains(in i : int) : boolean
	boolean result;
	
	result = m_set.get(i);
	
	if (m_complement)
	  {
	    return (false == result);
	  }
	
	return result;
!!!3145755.java!!!	mimic(inout set : CSet) : void
	m_complement = set.m_complement;
	m_set = (SparseBitSet) set.m_set.clone();
!!!3145883.java!!!	map(inout set : CSet, in mapping : int) : void
    m_complement = set.m_complement;
    m_set.clearAll();
    for (Enumeration e=set.m_set.elements(); e.hasMoreElements(); ) {
      int old_value =((Integer)e.nextElement()).intValue();
      if (old_value<mapping.length) // skip unmapped characters
	m_set.set(mapping[old_value]);
    }
