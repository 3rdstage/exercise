class SizeSequence
!!!9262363.java!!!	SizeSequence()
 
        a = emptyArray; 
!!!9262491.java!!!	SizeSequence(in numEntries : int)
 
        this(numEntries, 0); 
!!!9262619.java!!!	SizeSequence(in numEntries : int, in value : int)
 
        this(); 
        insertEntries(0, numEntries, value); 
!!!9262747.java!!!	SizeSequence(in sizes : int)
 
        this(); 
	setSizes(sizes); 
!!!9262875.java!!!	setSizes(in sizes : int) : void
 
	if (a.length != sizes.length) { 
	    a = new int[sizes.length]; 
        }
	setSizes(0, a.length, sizes);
!!!9263003.java!!!	setSizes(in from : int, in to : int, in sizes : int) : int
 
        if (to <= from) { 
            return 0; 
        }
        int m = (from + to)/2; 
        a[m] = sizes[m] + setSizes(from, m, sizes); 
        return a[m] + setSizes(m + 1, to, sizes); 
!!!9263131.java!!!	getSizes() : int
 
        int n = a.length; 
        int[] sizes = new int[n]; 
        getSizes(0, n, sizes); 
        return sizes;
!!!9263259.java!!!	getSizes(in from : int, in to : int, in sizes : int) : int
 
        if (to <= from) { 
            return 0; 
        }
        int m = (from + to)/2; 
        sizes[m] = a[m] - getSizes(from, m, sizes); 
        return a[m] + getSizes(m + 1, to, sizes); 
!!!9263387.java!!!	getPosition(in index : int) : int
 
        return getPosition(0, a.length, index); 
!!!9263515.java!!!	getPosition(in from : int, in to : int, in index : int) : int
 
        if (to <= from) { 
            return 0; 
        }
        int m = (from + to)/2; 
        if (index <= m) { 
            return getPosition(from, m, index); 
        }
        else { 
            return a[m] + getPosition(m + 1, to, index); 
        }
!!!9263643.java!!!	getIndex(in position : int) : int
 
        return getIndex(0, a.length, position); 
!!!9263771.java!!!	getIndex(in from : int, in to : int, in position : int) : int
 
        if (to <= from) { 
            return from; 
        }
        int m = (from + to)/2; 
        int pivot = a[m]; 
        if (position < pivot) { 
           return getIndex(from, m, position); 
        }
        else { 
            return getIndex(m + 1, to, position - pivot); 
        }
!!!9263899.java!!!	getSize(in index : int) : int
 
        return getPosition(index + 1) - getPosition(index); 
!!!9264027.java!!!	setSize(in index : int, in size : int) : void
 
        changeSize(0, a.length, index, size - getSize(index)); 
!!!9264155.java!!!	changeSize(in from : int, in to : int, in index : int, in delta : int) : void
 
        if (to <= from) { 
            return; 
        }
        int m = (from + to)/2; 
        if (index <= m) { 
            a[m] += delta; 
            changeSize(from, m, index, delta); 
        }
        else { 
            changeSize(m + 1, to, index, delta); 
        }
!!!9264283.java!!!	insertEntries(in start : int, in length : int, in value : int) : void
 
        int sizes[] = getSizes(); 
        int end = start + length; 
        int n = a.length + length; 
        a = new int[n]; 
        for (int i = 0; i < start; i++) { 
            a[i] = sizes[i] ;
        }
        for (int i = start; i < end; i++) { 
            a[i] = value ;
        }
        for (int i = end; i < n; i++) { 
            a[i] = sizes[i-length] ;
        }
        setSizes(a); 
!!!9264411.java!!!	removeEntries(in start : int, in length : int) : void
 
        int sizes[] = getSizes(); 
        int end = start + length; 
        int n = a.length - length; 
        a = new int[n]; 
        for (int i = 0; i < start; i++) { 
            a[i] = sizes[i] ;
        }
        for (int i = start; i < n; i++) { 
            a[i] = sizes[i+length] ;
        }
        setSizes(a); 
