class MetalUtils
!!!9561115.java!!!	drawFlush3DBorder(inout g : Graphics, inout r : Rectangle) : void
        drawFlush3DBorder(g, r.x, r.y, r.width, r.height);
!!!9561243.java!!!	drawFlush3DBorder(inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        g.translate( x, y);
        g.setColor( MetalLookAndFeel.getControlDarkShadow() );
	g.drawRect( 0, 0, w-2, h-2 );
        g.setColor( MetalLookAndFeel.getControlHighlight() );
	g.drawRect( 1, 1, w-2, h-2 );
        g.setColor( MetalLookAndFeel.getControl() );
	g.drawLine( 0, h-1, 1, h-2 );
	g.drawLine( w-1, 0, w-2, 1 );
        g.translate( -x, -y);
!!!9561371.java!!!	drawPressed3DBorder(inout g : Graphics, inout r : Rectangle) : void
        drawPressed3DBorder( g, r.x, r.y, r.width, r.height );
!!!9561499.java!!!	drawDisabledBorder(inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        g.translate( x, y);
        g.setColor( MetalLookAndFeel.getControlShadow() );
	g.drawRect( 0, 0, w-1, h-1 );
        g.translate(-x, -y);
!!!9561627.java!!!	drawPressed3DBorder(inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        g.translate( x, y);

        drawFlush3DBorder(g, 0, 0, w, h);

        g.setColor( MetalLookAndFeel.getControlShadow() );
	g.drawLine( 1, 1, 1, h-2 );
	g.drawLine( 1, 1, w-2, 1 );
        g.translate( -x, -y);
!!!9561755.java!!!	drawDark3DBorder(inout g : Graphics, inout r : Rectangle) : void
        drawDark3DBorder(g, r.x, r.y, r.width, r.height);
!!!9561883.java!!!	drawDark3DBorder(inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        g.translate( x, y);

        drawFlush3DBorder(g, 0, 0, w, h);

        g.setColor( MetalLookAndFeel.getControl() );
	g.drawLine( 1, 1, 1, h-2 );
	g.drawLine( 1, 1, w-2, 1 );
        g.setColor( MetalLookAndFeel.getControlShadow() );
	g.drawLine( 1, h-2, 1, h-2 );
	g.drawLine( w-2, 1, w-2, 1 );
        g.translate( -x, -y);
!!!9562011.java!!!	drawButtonBorder(inout g : Graphics, in x : int, in y : int, in w : int, in h : int, inout active : boolean) : void
        if (active) {
            drawActiveButtonBorder(g, x, y, w, h);	    
        } else {
            drawFlush3DBorder(g, x, y, w, h);
	}
!!!9562139.java!!!	drawActiveButtonBorder(inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        drawFlush3DBorder(g, x, y, w, h);
        g.setColor( MetalLookAndFeel.getPrimaryControl() );
	g.drawLine( x+1, y+1, x+1, h-3 );
	g.drawLine( x+1, y+1, w-3, x+1 );
        g.setColor( MetalLookAndFeel.getPrimaryControlDarkShadow() );
	g.drawLine( x+2, h-2, w-2, h-2 );
	g.drawLine( w-2, y+2, w-2, h-2 );
!!!9562267.java!!!	drawDefaultButtonBorder(inout g : Graphics, in x : int, in y : int, in w : int, in h : int, inout active : boolean) : void
        drawButtonBorder(g, x+1, y+1, w-1, h-1, active);	    
        g.translate(x, y);
        g.setColor( MetalLookAndFeel.getControlDarkShadow() );
	g.drawRect( 0, 0, w-3, h-3 );
	g.drawLine( w-2, 0, w-2, 0);
	g.drawLine( 0, h-2, 0, h-2);
        g.translate(-x, -y);
!!!9562395.java!!!	drawDefaultButtonPressedBorder(inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        drawPressed3DBorder(g, x + 1, y + 1, w - 1, h - 1);
        g.translate(x, y);
        g.setColor(MetalLookAndFeel.getControlDarkShadow());
        g.drawRect(0, 0, w - 3, h - 3);
        g.drawLine(w - 2, 0, w - 2, 0);
        g.drawLine(0, h - 2, 0, h - 2);
        g.setColor(MetalLookAndFeel.getControl());
        g.drawLine(w - 1, 0, w - 1, 0);
        g.drawLine(0, h - 1, 0, h - 1);
        g.translate(-x, -y);
!!!9562523.java!!!	isLeftToRight(inout c : Component) : boolean
        return c.getComponentOrientation().isLeftToRight();
!!!9562651.java!!!	getInt(inout key : Object, in defaultValue : int) : int
        Object value = UIManager.get(key);

        if (value instanceof Integer) {
            return ((Integer)value).intValue();
        }
        if (value instanceof String) {
            try {
                return Integer.parseInt((String)value);
            } catch (NumberFormatException nfe) {}
        }
        return defaultValue;
!!!9562779.java!!!	drawGradient(inout c : Component, inout g : Graphics, in key : String, in x : int, in y : int, in w : int, in h : int, inout vertical : boolean) : boolean
        java.util.List gradient = (java.util.List)UIManager.get(key);
        if (gradient == null || !(g instanceof Graphics2D)) {
            return false;
        }

        if (w <= 0 || h <= 0) {
            return true;
        }

        GradientPainter.INSTANCE.paint(
                c, (Graphics2D)g, gradient, x, y, w, h, vertical);
        return true;
!!!9563803.java!!!	isToolBarButton(inout c : JComponent) : boolean
        return (c.getParent() instanceof JToolBar);
!!!9563931.java!!!	getOceanToolBarIcon(inout i : Image) : Icon
	ImageProducer prod = new FilteredImageSource(i.getSource(),
                             new OceanToolBarImageFilter());
	return new IconUIResource(new ImageIcon(
                         Toolkit.getDefaultToolkit().createImage(prod)));
!!!9564059.java!!!	getOceanDisabledButtonIcon(inout image : Image) : Icon
        Object[] range = (Object[])UIManager.get("Button.disabledGrayRange");
        int min = 180;
        int max = 215;
        if (range != null) {
            min = ((Integer)range[0]).intValue();
            max = ((Integer)range[1]).intValue();
        }
	ImageProducer prod = new FilteredImageSource(image.getSource(),
                      new OceanDisabledButtonImageFilter(min , max));
	return new IconUIResource(new ImageIcon(
                             Toolkit.getDefaultToolkit().createImage(prod)));
