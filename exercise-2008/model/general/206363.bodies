class BlockDataOutputStream
!!!716187.java!!!	BlockDataOutputStream(inout out : OutputStream)
	    this.out = out;
	    dout = new DataOutputStream(this);
!!!716315.java!!!	setBlockDataMode(inout mode : boolean) : boolean
	    if (blkmode == mode) {
		return blkmode;
	    }
	    drain();
	    blkmode = mode;
	    return !blkmode;
!!!716443.java!!!	getBlockDataMode() : boolean
	    return blkmode;
!!!716571.java!!!	write(in b : int) : void
	    if (pos >= MAX_BLOCK_SIZE) {
		drain();
	    }
	    buf[pos++] = (byte) b;
!!!716699.java!!!	write(in b : byte) : void
	    write(b, 0, b.length, false);
!!!716827.java!!!	write(in b : byte, in off : int, in len : int) : void
	    write(b, off, len, false);
!!!716955.java!!!	flush() : void
	    drain();
	    out.flush();
!!!717083.java!!!	close() : void
	    flush();
	    out.close();
!!!717211.java!!!	write(in b : byte, in off : int, in len : int, inout copy : boolean) : void
	    if (!(copy || blkmode)) { 		// write directly
		drain();
		out.write(b, off, len);
		return;
	    }

	    while (len > 0) {
		if (pos >= MAX_BLOCK_SIZE) {
		    drain();
		}
		if (len >= MAX_BLOCK_SIZE && !copy && pos == 0) {
		    // avoid unnecessary copy
		    writeBlockHeader(MAX_BLOCK_SIZE);
		    out.write(b, off, MAX_BLOCK_SIZE);
		    off += MAX_BLOCK_SIZE;
		    len -= MAX_BLOCK_SIZE;
		} else {
		    int wlen = Math.min(len, MAX_BLOCK_SIZE - pos);
		    System.arraycopy(b, off, buf, pos, wlen);
		    pos += wlen;
		    off += wlen;
		    len -= wlen;
		}
	    }
!!!717339.java!!!	drain() : void
	    if (pos == 0) {
		return;
	    }
	    if (blkmode) {
		writeBlockHeader(pos);
	    }
	    out.write(buf, 0, pos);
	    pos = 0;
!!!717467.java!!!	writeBlockHeader(in len : int) : void
	    if (len <= 0xFF) {
		hbuf[0] = TC_BLOCKDATA;
		hbuf[1] = (byte) len;
		out.write(hbuf, 0, 2);
	    } else {
		hbuf[0] = TC_BLOCKDATALONG;
		Bits.putInt(hbuf, 1, len);
		out.write(hbuf, 0, 5);
	    }
!!!717595.java!!!	writeBoolean(inout v : boolean) : void
	    if (pos >= MAX_BLOCK_SIZE) {
		drain();
	    }
	    Bits.putBoolean(buf, pos++, v);
!!!717723.java!!!	writeByte(in v : int) : void
	    if (pos >= MAX_BLOCK_SIZE) {
		drain();
	    }
	    buf[pos++] = (byte) v;
!!!717851.java!!!	writeChar(in v : int) : void
	    if (pos + 2 <= MAX_BLOCK_SIZE) {
		Bits.putChar(buf, pos, (char) v);
		pos += 2;
	    } else {
		dout.writeChar(v);
	    }
!!!717979.java!!!	writeShort(in v : int) : void
	    if (pos + 2 <= MAX_BLOCK_SIZE) {
		Bits.putShort(buf, pos, (short) v);
		pos += 2;
	    } else {
		dout.writeShort(v);
	    }
!!!718107.java!!!	writeInt(in v : int) : void
	    if (pos + 4 <= MAX_BLOCK_SIZE) {
		Bits.putInt(buf, pos, v);
		pos += 4;
	    } else {
		dout.writeInt(v);
	    }
!!!718235.java!!!	writeFloat(in v : float) : void
	    if (pos + 4 <= MAX_BLOCK_SIZE) {
		Bits.putFloat(buf, pos, v);
		pos += 4;
	    } else {
		dout.writeFloat(v);
	    }
!!!718363.java!!!	writeLong(in v : long) : void
	    if (pos + 8 <= MAX_BLOCK_SIZE) {
		Bits.putLong(buf, pos, v);
		pos += 8;
	    } else {
		dout.writeLong(v);
	    }
!!!718491.java!!!	writeDouble(in v : double) : void
	    if (pos + 8 <= MAX_BLOCK_SIZE) {
		Bits.putDouble(buf, pos, v);
		pos += 8;
	    } else {
		dout.writeDouble(v);
	    }
!!!718619.java!!!	writeBytes(in s : String) : void
	    int endoff = s.length();
	    int cpos = 0;
	    int csize = 0;
	    for (int off = 0; off < endoff; ) {
		if (cpos >= csize) {
		    cpos = 0;
		    csize = Math.min(endoff - off, CHAR_BUF_SIZE);
		    s.getChars(off, off + csize, cbuf, 0);
		} 
		if (pos >= MAX_BLOCK_SIZE) {
		    drain();
		}
		int n = Math.min(csize - cpos, MAX_BLOCK_SIZE - pos);
		int stop = pos + n;
		while (pos < stop) {
		    buf[pos++] = (byte) cbuf[cpos++];
		}
		off += n;
	    }
!!!718747.java!!!	writeChars(in s : String) : void
	    int endoff = s.length();
	    for (int off = 0; off < endoff; ) {
		int csize = Math.min(endoff - off, CHAR_BUF_SIZE);
		s.getChars(off, off + csize, cbuf, 0);
		writeChars(cbuf, 0, csize);
		off += csize;
	    }
!!!718875.java!!!	writeUTF(in s : String) : void
	    writeUTF(s, getUTFLength(s));
!!!719003.java!!!	writeBooleans(inout v : boolean, in off : int, in len : int) : void
	    int endoff = off + len;
	    while (off < endoff) {
		if (pos >= MAX_BLOCK_SIZE) {
		    drain();
		}
		int stop = Math.min(endoff, off + (MAX_BLOCK_SIZE - pos));
		while (off < stop) {
		    Bits.putBoolean(buf, pos++, v[off++]);
		}
	    }
!!!719131.java!!!	writeChars(in v : char, in off : int, in len : int) : void
	    int limit = MAX_BLOCK_SIZE - 2;
	    int endoff = off + len;
	    while (off < endoff) {
		if (pos <= limit) {
		    int avail = (MAX_BLOCK_SIZE - pos) >> 1;
		    int stop = Math.min(endoff, off + avail);
		    while (off < stop) {
			Bits.putChar(buf, pos, v[off++]);
			pos += 2;
		    }
		} else {
		    dout.writeChar(v[off++]);
		}
	    }
!!!719259.java!!!	writeShorts(in v : short, in off : int, in len : int) : void
	    int limit = MAX_BLOCK_SIZE - 2;
	    int endoff = off + len;
	    while (off < endoff) {
		if (pos <= limit) {
		    int avail = (MAX_BLOCK_SIZE - pos) >> 1;
		    int stop = Math.min(endoff, off + avail);
		    while (off < stop) {
			Bits.putShort(buf, pos, v[off++]);
			pos += 2;
		    }
		} else {
		    dout.writeShort(v[off++]);
		}
	    }
!!!719387.java!!!	writeInts(in v : int, in off : int, in len : int) : void
	    int limit = MAX_BLOCK_SIZE - 4;
	    int endoff = off + len;
	    while (off < endoff) {
		if (pos <= limit) {
		    int avail = (MAX_BLOCK_SIZE - pos) >> 2;
		    int stop = Math.min(endoff, off + avail);
		    while (off < stop) {
			Bits.putInt(buf, pos, v[off++]);
			pos += 4;
		    }
		} else {
		    dout.writeInt(v[off++]);
		}
	    }
!!!719515.java!!!	writeFloats(in v : float, in off : int, in len : int) : void
	    int limit = MAX_BLOCK_SIZE - 4;
	    int endoff = off + len;
	    while (off < endoff) {
		if (pos <= limit) {
		    int avail = (MAX_BLOCK_SIZE - pos) >> 2;
		    int chunklen = Math.min(endoff - off, avail);
		    floatsToBytes(v, off, buf, pos, chunklen);
		    off += chunklen;
		    pos += chunklen << 2;
		} else {
		    dout.writeFloat(v[off++]);
		}
	    }
!!!719643.java!!!	writeLongs(in v : long, in off : int, in len : int) : void
	    int limit = MAX_BLOCK_SIZE - 8;
	    int endoff = off + len;
	    while (off < endoff) {
		if (pos <= limit) {
		    int avail = (MAX_BLOCK_SIZE - pos) >> 3;
		    int stop = Math.min(endoff, off + avail);
		    while (off < stop) {
			Bits.putLong(buf, pos, v[off++]);
			pos += 8;
		    }
		} else {
		    dout.writeLong(v[off++]);
		}
	    }
!!!719771.java!!!	writeDoubles(in v : double, in off : int, in len : int) : void
	    int limit = MAX_BLOCK_SIZE - 8;
	    int endoff = off + len;
	    while (off < endoff) {
		if (pos <= limit) {
		    int avail = (MAX_BLOCK_SIZE - pos) >> 3;
		    int chunklen = Math.min(endoff - off, avail);
		    doublesToBytes(v, off, buf, pos, chunklen);
		    off += chunklen;
		    pos += chunklen << 3;
		} else {
		    dout.writeDouble(v[off++]);
		}
	    }
!!!719899.java!!!	getUTFLength(in s : String) : long
	    int len = s.length();
	    long utflen = 0;
	    for (int off = 0; off < len; ) {
		int csize = Math.min(len - off, CHAR_BUF_SIZE);
		s.getChars(off, off + csize, cbuf, 0);
		for (int cpos = 0; cpos < csize; cpos++) {
		    char c = cbuf[cpos];
		    if (c >= 0x0001 && c <= 0x007F) {
			utflen++;
		    } else if (c > 0x07FF) {
			utflen += 3;
		    } else {
			utflen += 2;
		    }
		}
		off += csize;
	    }
	    return utflen;
!!!720027.java!!!	writeUTF(in s : String, in utflen : long) : void
	    if (utflen > 0xFFFFL) {
		throw new UTFDataFormatException();
	    }
	    writeShort((int) utflen);
	    if (utflen == (long) s.length()) {
		writeBytes(s);
	    } else {
		writeUTFBody(s);
	    }
!!!720155.java!!!	writeLongUTF(in s : String) : void
	    writeLongUTF(s, getUTFLength(s));
!!!720283.java!!!	writeLongUTF(in s : String, in utflen : long) : void
	    writeLong(utflen);
	    if (utflen == (long) s.length()) {
		writeBytes(s);
	    } else {
		writeUTFBody(s);
	    }
!!!720411.java!!!	writeUTFBody(in s : String) : void
	    int limit = MAX_BLOCK_SIZE - 3;
	    int len = s.length();
	    for (int off = 0; off < len; ) {
		int csize = Math.min(len - off, CHAR_BUF_SIZE);
		s.getChars(off, off + csize, cbuf, 0);
		for (int cpos = 0; cpos < csize; cpos++) {
		    char c = cbuf[cpos];
		    if (pos <= limit) {
			if (c <= 0x007F && c != 0) {
			    buf[pos++] = (byte) c;
			} else if (c > 0x07FF) {
			    buf[pos + 2] = (byte) (0x80 | ((c >> 0) & 0x3F));
			    buf[pos + 1] = (byte) (0x80 | ((c >> 6) & 0x3F));
			    buf[pos + 0] = (byte) (0xE0 | ((c >> 12) & 0x0F));
			    pos += 3;
			} else {
			    buf[pos + 1] = (byte) (0x80 | ((c >> 0) & 0x3F));
			    buf[pos + 0] = (byte) (0xC0 | ((c >> 6) & 0x1F));
			    pos += 2;
			}
		    } else { 	// write one byte at a time to normalize block
			if (c <= 0x007F && c != 0) {
			    write(c);
			} else if (c > 0x07FF) {
			    write(0xE0 | ((c >> 12) & 0x0F));
			    write(0x80 | ((c >> 6) & 0x3F));
			    write(0x80 | ((c >> 0) & 0x3F));
			} else {
			    write(0xC0 | ((c >> 6) & 0x1F));
			    write(0x80 | ((c >> 0) & 0x3F));
			}
		    }
		}
		off += csize;
	    }
