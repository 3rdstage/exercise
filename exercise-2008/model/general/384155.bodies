class AccessibleJLabel
!!!2226971.java!!!	getAccessibleName() : String
            if (accessibleName != null) {
                return accessibleName;
            } else {
                if (JLabel.this.getText() == null) {
                    return super.getAccessibleName();
                } else {
                    return JLabel.this.getText();
                }
            }
!!!2227099.java!!!	getAccessibleRole() : AccessibleRole
            return AccessibleRole.LABEL;
!!!2227227.java!!!	getAccessibleIcon() : AccessibleIcon
            Icon icon = getIcon();
            if (icon instanceof Accessible) {
                AccessibleContext ac = 
		((Accessible)icon).getAccessibleContext();
                if (ac != null && ac instanceof AccessibleIcon) {
                    return new AccessibleIcon[] { (AccessibleIcon)ac };
                }
            } 
            return null;
!!!2227355.java!!!	getAccessibleRelationSet() : AccessibleRelationSet
	    // Check where the AccessibleContext's relation
	    // set already contains a LABEL_FOR relation.
	    AccessibleRelationSet relationSet 
		= super.getAccessibleRelationSet();

	    if (!relationSet.contains(AccessibleRelation.LABEL_FOR)) {
		Component c = JLabel.this.getLabelFor();
		if (c != null) {
		    AccessibleRelation relation 
			= new AccessibleRelation(AccessibleRelation.LABEL_FOR);
		    relation.setTarget(c);
		    relationSet.add(relation);
		}
	    }
	    return relationSet;
!!!2227483.java!!!	getAccessibleText() : AccessibleText
	    View view = (View)JLabel.this.getClientProperty("html");
	    if (view != null) {
		return this;
	    } else {
		return null;
	    }
!!!2227611.java!!!	getIndexAtPoint(inout p : Point) : int
	    View view = (View) JLabel.this.getClientProperty("html");
	    if (view != null) {
		Rectangle r = getTextRectangle();
                if (r == null) {
                    return -1;
                }
		Rectangle2D.Float shape = 
		    new Rectangle2D.Float(r.x, r.y, r.width, r.height);
		Position.Bias bias[] = new Position.Bias[1];
		return view.viewToModel(p.x, p.y, shape, bias);
	    } else {
		return -1;
	    }
!!!2227739.java!!!	getCharacterBounds(in i : int) : Rectangle
	    View view = (View) JLabel.this.getClientProperty("html");
	    if (view != null) {
		Rectangle r = getTextRectangle();
        if (r == null) {
            return null;
        }
		Rectangle2D.Float shape = 
		    new Rectangle2D.Float(r.x, r.y, r.width, r.height);
		try {
		    Shape charShape = 
			view.modelToView(i, shape, Position.Bias.Forward);
		    return charShape.getBounds();
		} catch (BadLocationException e) {
		    return null;
		}
	    } else {
		return null;
	    }
!!!2227867.java!!!	getCharCount() : int
	    View view = (View) JLabel.this.getClientProperty("html");
	    if (view != null) {
		Document d = view.getDocument();
		if (d instanceof StyledDocument) {
		    StyledDocument doc = (StyledDocument)d;
		    return doc.getLength();
		}
	    }
	    return accessibleContext.getAccessibleName().length();
!!!2227995.java!!!	getCaretPosition() : int
	    // There is no caret.
	    return -1;
!!!2228123.java!!!	getAtIndex(in part : int, in index : int) : String
            if (index < 0 || index >= getCharCount()) {
                return null;
            }
            switch (part) {
            case AccessibleText.CHARACTER:
                try {
                    return getText(index, 1);
                } catch (BadLocationException e) {
                    return null;
                }
            case AccessibleText.WORD:
                try {
                    String s = getText(0, getCharCount());
                    BreakIterator words = BreakIterator.getWordInstance(getLocale());
                    words.setText(s);
                    int end = words.following(index);
                    return s.substring(words.previous(), end);
                } catch (BadLocationException e) {
                    return null;
                }
            case AccessibleText.SENTENCE:
                try {
                    String s = getText(0, getCharCount());
                    BreakIterator sentence = 
			BreakIterator.getSentenceInstance(getLocale());
                    sentence.setText(s);
                    int end = sentence.following(index);
                    return s.substring(sentence.previous(), end);
                } catch (BadLocationException e) {
                    return null;
                }
            default:
                return null;
            }
!!!2228251.java!!!	getAfterIndex(in part : int, in index : int) : String
            if (index < 0 || index >= getCharCount()) {
                return null;
            }
            switch (part) {
            case AccessibleText.CHARACTER:
		if (index+1 >= getCharCount()) {
		   return null;
		}
                try {
                    return getText(index+1, 1);
                } catch (BadLocationException e) {
                    return null;
                }
            case AccessibleText.WORD:
                try {
                    String s = getText(0, getCharCount());
                    BreakIterator words = BreakIterator.getWordInstance(getLocale());
                    words.setText(s);
                    int start = words.following(index);
		    if (start == BreakIterator.DONE || start >= s.length()) {
			return null;
		    }
		    int end = words.following(start);
		    if (end == BreakIterator.DONE || end >= s.length()) {
			return null;
		    }
                    return s.substring(start, end);
                } catch (BadLocationException e) {
                    return null;
                }
            case AccessibleText.SENTENCE:
                try {
                    String s = getText(0, getCharCount());
                    BreakIterator sentence = 
			BreakIterator.getSentenceInstance(getLocale());
                    sentence.setText(s);
                    int start = sentence.following(index);
		    if (start == BreakIterator.DONE || start >= s.length()) {
			return null;
		    }
		    int end = sentence.following(start);
		    if (end == BreakIterator.DONE || end >= s.length()) {
			return null;
		    }
                    return s.substring(start, end);
                } catch (BadLocationException e) {
                    return null;
                }
            default:
                return null;
            }
!!!2228379.java!!!	getBeforeIndex(in part : int, in index : int) : String
            if (index < 0 || index > getCharCount()-1) {
                return null;
            }
            switch (part) {
            case AccessibleText.CHARACTER:
		if (index == 0) {
		    return null;
		}
                try {
                    return getText(index-1, 1);
                } catch (BadLocationException e) {
                    return null;
                }
            case AccessibleText.WORD:
                try {
                    String s = getText(0, getCharCount());
                    BreakIterator words = BreakIterator.getWordInstance(getLocale());
                    words.setText(s);
                    int end = words.following(index);
                    end = words.previous();
		    int start = words.previous();
		    if (start == BreakIterator.DONE) {
			return null;
		    }
                    return s.substring(start, end);
                } catch (BadLocationException e) {
                    return null;
                }
            case AccessibleText.SENTENCE:
                try {
                    String s = getText(0, getCharCount());
                    BreakIterator sentence = 
			BreakIterator.getSentenceInstance(getLocale());
                    sentence.setText(s);
                    int end = sentence.following(index);
                    end = sentence.previous();
		    int start = sentence.previous();
		    if (start == BreakIterator.DONE) {
			return null;
		    }
                    return s.substring(start, end);
                } catch (BadLocationException e) {
                    return null;
                }
            default:
                return null;
            }
!!!2228507.java!!!	getCharacterAttribute(in i : int) : AttributeSet
	    View view = (View) JLabel.this.getClientProperty("html");
	    if (view != null) {
		Document d = view.getDocument();
		if (d instanceof StyledDocument) {
		    StyledDocument doc = (StyledDocument)d;
		    Element elem = doc.getCharacterElement(i);
		    if (elem != null) {
			return elem.getAttributes();
		    }
		}
	    }
	    return null;
!!!2228635.java!!!	getSelectionStart() : int
	    // Text cannot be selected.
	    return -1;
!!!2228763.java!!!	getSelectionEnd() : int
	    // Text cannot be selected.
	    return -1;
!!!2228891.java!!!	getSelectedText() : String
	    // Text cannot be selected.
	    return null;
!!!2229019.java!!!	getText(in offset : int, in length : int) : String

	    View view = (View) JLabel.this.getClientProperty("html");
	    if (view != null) {
		Document d = view.getDocument();
		if (d instanceof StyledDocument) {
		    StyledDocument doc = (StyledDocument)d;
		    return doc.getText(offset, length);
		}
	    }
	    return null;
!!!2229147.java!!!	getTextRectangle() : Rectangle
	    
	    String text = JLabel.this.getText();
	    Icon icon = (JLabel.this.isEnabled()) ? JLabel.this.getIcon() : JLabel.this.getDisabledIcon();
	    
	    if ((icon == null) && (text == null)) {
		return null;
	    }

	    Rectangle paintIconR = new Rectangle();
	    Rectangle paintTextR = new Rectangle();
	    Rectangle paintViewR = new Rectangle();
	    Insets paintViewInsets = new Insets(0, 0, 0, 0);

	    paintViewInsets = JLabel.this.getInsets(paintViewInsets);
	    paintViewR.x = paintViewInsets.left;
	    paintViewR.y = paintViewInsets.top;
	    paintViewR.width = JLabel.this.getWidth() - (paintViewInsets.left + paintViewInsets.right);
	    paintViewR.height = JLabel.this.getHeight() - (paintViewInsets.top + paintViewInsets.bottom);
	    
            Graphics g = JLabel.this.getGraphics();
            if (g == null) {
                return null;
            }
	    String clippedText = SwingUtilities.layoutCompoundLabel(
	        (JComponent)JLabel.this,
		g.getFontMetrics(),
		text,
		icon,
		JLabel.this.getVerticalAlignment(),
		JLabel.this.getHorizontalAlignment(),
		JLabel.this.getVerticalTextPosition(),
		JLabel.this.getHorizontalTextPosition(),
		paintViewR,
		paintIconR,
		paintTextR,
		JLabel.this.getIconTextGap());

	    return paintTextR;
!!!2229275.java!!!	getAccessibleExtendedComponent() : AccessibleExtendedComponent
	    return this;
!!!2229403.java!!!	getToolTipText() : String
	    return JLabel.this.getToolTipText();
!!!2229531.java!!!	getTitledBorderText() : String
	    return super.getTitledBorderText();
!!!2229659.java!!!	getAccessibleKeyBinding() : AccessibleKeyBinding
	    int mnemonic = JLabel.this.getDisplayedMnemonic();
	    if (mnemonic == 0) {
		return null;
	    }
	    return new LabelKeyBinding(mnemonic);
