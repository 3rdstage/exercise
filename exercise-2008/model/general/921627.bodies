class ManagementFactory
!!!7096603.java!!!	getClassLoadingMXBean() : ClassLoadingMXBean
        return sun.management.ManagementFactory.getClassLoadingMXBean();
!!!7096731.java!!!	getMemoryMXBean() : MemoryMXBean
        return sun.management.ManagementFactory.getMemoryMXBean();
!!!7096859.java!!!	getThreadMXBean() : ThreadMXBean
        return sun.management.ManagementFactory.getThreadMXBean();
!!!7096987.java!!!	getRuntimeMXBean() : RuntimeMXBean
        return sun.management.ManagementFactory.getRuntimeMXBean();
!!!7097115.java!!!	getCompilationMXBean() : CompilationMXBean
        return sun.management.ManagementFactory.getCompilationMXBean();
!!!7097243.java!!!	getOperatingSystemMXBean() : OperatingSystemMXBean
        return sun.management.ManagementFactory.getOperatingSystemMXBean();
!!!7097371.java!!!	getMemoryPoolMXBeans() : List
        return sun.management.ManagementFactory.getMemoryPoolMXBeans();
!!!7097499.java!!!	getMemoryManagerMXBeans() : List
        return sun.management.ManagementFactory.getMemoryManagerMXBeans();
!!!7097627.java!!!	getGarbageCollectorMXBeans() : List
        return sun.management.ManagementFactory.getGarbageCollectorMXBeans();
!!!7097755.java!!!	getPlatformMBeanServer() : MBeanServer
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            Permission perm = new MBeanServerPermission("createMBeanServer");
            sm.checkPermission(perm);
        }

        if (platformMBeanServer == null) {
            platformMBeanServer = 
                sun.management.ManagementFactory.createPlatformMBeanServer();
        }
        return platformMBeanServer;
!!!7097883.java!!!	newPlatformMXBeanProxy(inout connection : MBeanServerConnection, in mxbeanName : String, inout mxbeanInterface : Class) : T

        final Class interfaceClass = mxbeanInterface;
        // Only allow MXBean interfaces from rt.jar loaded by the
        // bootstrap class loader
        final ClassLoader loader = (ClassLoader)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() { 
                    return interfaceClass.getClassLoader();
                }
            });
        if (loader != null) {
            throw new IllegalArgumentException(mxbeanName +
                " is not a platform MXBean");
        }

        try {
            final ObjectName objName = new ObjectName(mxbeanName);
            if (!connection.isInstanceOf(objName, interfaceClass.getName())) {
                throw new IllegalArgumentException(mxbeanName +
                    " is not an instance of " + interfaceClass);
            }

            final Class[] interfaces;
            // check if the registered MBean is a notification emitter
            if (connection.isInstanceOf(objName,
                                        NOTIF_EMITTER)) {
                interfaces = new Class[] {
                                 interfaceClass,
                                 NotificationEmitter.class
                             };
            } else {
                interfaces = new Class[] {interfaceClass};
            }
            
            // create a MXBean proxy
            InvocationHandler handler =
                new PlatformMXBeanInvocationHandler(connection, 
                                                    objName,
                                                    interfaceClass);
            return (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(),
                                              interfaces,
                                              handler);
        } catch (InstanceNotFoundException e) {
            final IllegalArgumentException iae =
                new IllegalArgumentException(mxbeanName +
                    " not found in the connection.");
            iae.initCause(e);
            throw iae;
        } catch (MalformedObjectNameException e) {
            final IllegalArgumentException iae =
                new IllegalArgumentException(mxbeanName +
                    " is not a valid ObjectName format.");
            iae.initCause(e);
            throw iae;
        }
