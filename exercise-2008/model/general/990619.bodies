class AbstractQueuedSynchronizer
!!!7881371.java!!!	getState() : int
        return state;
!!!7881499.java!!!	setState(in newState : int) : void
        state = newState;
!!!7881627.java!!!	compareAndSetState(in expect : int, in update : int) : boolean
        // See below for intrinsics setup to support this
        return unsafe.compareAndSwapInt(this, stateOffset, expect, update);
!!!7881755.java!!!	enq(in node : Node) : Node
        for (;;) {
            Node t = tail;
            if (t == null) { // Must initialize
                Node h = new Node(); // Dummy header
                h.next = node;
                node.prev = h;
                if (compareAndSetHead(h)) {
                    tail = node;
                    return h;
                }
            }
            else {
                node.prev = t;     
                if (compareAndSetTail(t, node)) {
                    t.next = node; 
                    return t; 
                }
            }
        }
!!!7881883.java!!!	addWaiter(inout mode : Node) : Node
        Node node = new Node(Thread.currentThread(), mode);
        // Try the fast path of enq; backup to full enq on failure
        Node pred = tail;
        if (pred != null) {
            node.prev = pred;     
            if (compareAndSetTail(pred, node)) {
                pred.next = node; 
                return node;
            }
        }
        enq(node);
        return node;
!!!7882011.java!!!	setHead(inout node : Node) : void
        head = node;
        node.thread = null;
        node.prev = null; 
!!!7882139.java!!!	unparkSuccessor(inout node : Node) : void
        /*
         * Try to clear status in anticipation of signalling.  It is
         * OK if this fails or if status is changed by waiting thread.
         */
        compareAndSetWaitStatus(node, Node.SIGNAL, 0);
        
        /*
         * Thread to unpark is held in successor, which is normally
         * just the next node.  But if cancelled or apparently null,
         * traverse backwards from tail to find the actual
         * non-cancelled successor.
         */
        Thread thread;
        Node s = node.next;
        if (s != null && s.waitStatus <= 0)
            thread = s.thread;
        else {
            thread = null;
            for (s = tail; s != null && s != node; s = s.prev) 
                if (s.waitStatus <= 0)
                    thread = s.thread;
        }
        LockSupport.unpark(thread);
!!!7882267.java!!!	setHeadAndPropagate(inout node : Node, in propagate : int) : void
        setHead(node);
        if (propagate > 0 && node.waitStatus != 0) {
            /*
             * Don't bother fully figuring out successor.  If it
             * looks null, call unparkSuccessor anyway to be safe.
             */
            Node s = node.next; 
            if (s == null || s.isShared())
                unparkSuccessor(node);
        }
!!!7882395.java!!!	cancelAcquire(inout node : Node) : void
	// Ignore if node doesn't exist
        if (node == null)
	    return;

	node.thread = null;

	// Skip cancelled predecessors
	Node pred = node.prev;
	while (pred.waitStatus > 0)
	    node.prev = pred = pred.prev;

	// Getting this before setting waitStatus ensures staleness
	Node predNext = pred.next;

	// Can use unconditional write instead of CAS here
	node.waitStatus = Node.CANCELLED;

	// If we are the tail, remove ourselves
	if (node == tail && compareAndSetTail(node, pred)) {
	    compareAndSetNext(pred, predNext, null);
	} else {
	    // If "active" predecessor found...
	    if (pred != head
		&& (pred.waitStatus == Node.SIGNAL
		    || compareAndSetWaitStatus(pred, 0, Node.SIGNAL))
		&& pred.thread != null) {

		// If successor is active, set predecessor's next link
		Node next = node.next;
		if (next != null && next.waitStatus <= 0)
		    compareAndSetNext(pred, predNext, next);
	    } else {
		unparkSuccessor(node);
	    }

	    node.next = node; // help GC
	}
!!!7882523.java!!!	shouldParkAfterFailedAcquire(inout pred : Node, inout node : Node) : boolean
        int s = pred.waitStatus;
        if (s < 0)
            /*
             * This node has already set status asking a release
             * to signal it, so it can safely park
             */
            return true;
        if (s > 0) {
            /*
             * Predecessor was cancelled. Skip over predecessors and
             * indicate retry.
             */
	    do {
		node.prev = pred = pred.prev;
	    } while (pred.waitStatus > 0);
	    pred.next = node;
	}
        else
            /*
             * Indicate that we need a signal, but don't park yet. Caller
             * will need to retry to make sure it cannot acquire before
             * parking.
             */
            compareAndSetWaitStatus(pred, 0, Node.SIGNAL);
        return false;
!!!7882651.java!!!	selfInterrupt() : void
        Thread.currentThread().interrupt();
!!!7882779.java!!!	parkAndCheckInterrupt() : boolean
        LockSupport.park();
        return Thread.interrupted();
!!!7882907.java!!!	acquireQueued(in node : Node, in arg : int) : boolean
        try {
            boolean interrupted = false;
            for (;;) {
                final Node p = node.predecessor();
                if (p == head && tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    return interrupted;
                }
                if (shouldParkAfterFailedAcquire(p, node) && 
                    parkAndCheckInterrupt()) 
                    interrupted = true;
            }
        } catch (RuntimeException ex) {
            cancelAcquire(node);
            throw ex;
        }
!!!7883035.java!!!	doAcquireInterruptibly(in arg : int) : void
        final Node node = addWaiter(Node.EXCLUSIVE);
        try {
            for (;;) {
                final Node p = node.predecessor();
                if (p == head && tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    return;
                }
                if (shouldParkAfterFailedAcquire(p, node) && 
                    parkAndCheckInterrupt()) 
                    break;
            }
        } catch (RuntimeException ex) {
            cancelAcquire(node);
            throw ex;
        }
        // Arrive here only if interrupted
        cancelAcquire(node);
        throw new InterruptedException();
!!!7883163.java!!!	doAcquireNanos(in arg : int, in nanosTimeout : long) : boolean
        long lastTime = System.nanoTime();
        final Node node = addWaiter(Node.EXCLUSIVE);
        try {
            for (;;) {
                final Node p = node.predecessor();
                if (p == head && tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    return true;
                }
                if (nanosTimeout <= 0) {
                    cancelAcquire(node);
                    return false;
                }
                if (shouldParkAfterFailedAcquire(p, node)) {
                    LockSupport.parkNanos(nanosTimeout);
                    if (Thread.interrupted()) 
                        break;
                    long now = System.nanoTime();
                    nanosTimeout -= now - lastTime;
                    lastTime = now;
                }
            }
        } catch (RuntimeException ex) {
            cancelAcquire(node);
            throw ex;
        }
        // Arrive here only if interrupted
        cancelAcquire(node);
        throw new InterruptedException();
!!!7883291.java!!!	doAcquireShared(in arg : int) : void
        final Node node = addWaiter(Node.SHARED);
        try {
            boolean interrupted = false;
            for (;;) {
                final Node p = node.predecessor();
                if (p == head) {
                    int r = tryAcquireShared(arg);
                    if (r >= 0) {
                        setHeadAndPropagate(node, r);
                        p.next = null; // help GC
                        if (interrupted)
                            selfInterrupt();
                        return;
                    }
                }
                if (shouldParkAfterFailedAcquire(p, node) && 
                    parkAndCheckInterrupt()) 
                    interrupted = true;
            }
        } catch (RuntimeException ex) {
            cancelAcquire(node);
            throw ex;
        }
!!!7883419.java!!!	doAcquireSharedInterruptibly(in arg : int) : void
        final Node node = addWaiter(Node.SHARED);
        try {
            for (;;) {
                final Node p = node.predecessor();
                if (p == head) {
                    int r = tryAcquireShared(arg);
                    if (r >= 0) {
                        setHeadAndPropagate(node, r);
                        p.next = null; // help GC
                        return;
                    }
                }
                if (shouldParkAfterFailedAcquire(p, node) && 
                    parkAndCheckInterrupt()) 
                    break;
            }
        } catch (RuntimeException ex) {
            cancelAcquire(node);
            throw ex;
        }
        // Arrive here only if interrupted
        cancelAcquire(node);
        throw new InterruptedException();
!!!7883547.java!!!	doAcquireSharedNanos(in arg : int, in nanosTimeout : long) : boolean

        long lastTime = System.nanoTime();
        final Node node = addWaiter(Node.SHARED);
        try {
            for (;;) {
                final Node p = node.predecessor();
                if (p == head) {
                    int r = tryAcquireShared(arg);
                    if (r >= 0) {
                        setHeadAndPropagate(node, r);
                        p.next = null; // help GC
                        return true;
                    }
                }
                if (nanosTimeout <= 0) {
                    cancelAcquire(node);
                    return false;
                }
                if (shouldParkAfterFailedAcquire(p, node)) {
                    LockSupport.parkNanos(nanosTimeout);
                    if (Thread.interrupted()) 
                        break;
                    long now = System.nanoTime();
                    nanosTimeout -= now - lastTime;
                    lastTime = now;
                }
            }
        } catch (RuntimeException ex) {
            cancelAcquire(node);
            throw ex;
        }
        // Arrive here only if interrupted
        cancelAcquire(node);
        throw new InterruptedException();
!!!7883675.java!!!	tryAcquire(in arg : int) : boolean
        throw new UnsupportedOperationException();
!!!7883803.java!!!	tryRelease(in arg : int) : boolean
        throw new UnsupportedOperationException();
!!!7883931.java!!!	tryAcquireShared(in arg : int) : int
        throw new UnsupportedOperationException();
!!!7884059.java!!!	tryReleaseShared(in arg : int) : boolean
        throw new UnsupportedOperationException();
!!!7884187.java!!!	isHeldExclusively() : boolean
        throw new UnsupportedOperationException();
!!!7884315.java!!!	acquire(in arg : int) : void
        if (!tryAcquire(arg) &&
            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
            selfInterrupt();
!!!7884443.java!!!	acquireInterruptibly(in arg : int) : void
        if (Thread.interrupted())
            throw new InterruptedException();
        if (!tryAcquire(arg))
            doAcquireInterruptibly(arg);
!!!7884571.java!!!	tryAcquireNanos(in arg : int, in nanosTimeout : long) : boolean
       if (Thread.interrupted())
           throw new InterruptedException();
       return tryAcquire(arg) ||
           doAcquireNanos(arg, nanosTimeout);
!!!7884699.java!!!	release(in arg : int) : boolean
        if (tryRelease(arg)) {
            Node h = head;
            if (h != null && h.waitStatus != 0) 
                unparkSuccessor(h);
            return true;
        }
        return false;
!!!7884827.java!!!	acquireShared(in arg : int) : void
        if (tryAcquireShared(arg) < 0)
            doAcquireShared(arg);
!!!7884955.java!!!	acquireSharedInterruptibly(in arg : int) : void
        if (Thread.interrupted())
            throw new InterruptedException();
        if (tryAcquireShared(arg) < 0)
            doAcquireSharedInterruptibly(arg);
!!!7885083.java!!!	tryAcquireSharedNanos(in arg : int, in nanosTimeout : long) : boolean
       if (Thread.interrupted())
           throw new InterruptedException();
       return tryAcquireShared(arg) >= 0 ||
           doAcquireSharedNanos(arg, nanosTimeout);
!!!7885211.java!!!	releaseShared(in arg : int) : boolean
        if (tryReleaseShared(arg)) {
            Node h = head;
            if (h != null && h.waitStatus != 0) 
                unparkSuccessor(h);
            return true;
        }
        return false;
!!!7885339.java!!!	hasQueuedThreads() : boolean
 
        return head != tail;
!!!7885467.java!!!	hasContended() : boolean
        return head != null;
!!!7885595.java!!!	getFirstQueuedThread() : Thread
        // handle only fast path, else relay
        return (head == tail)? null : fullGetFirstQueuedThread();
!!!7885723.java!!!	fullGetFirstQueuedThread() : Thread
            Node h = head;
            if (h == null)                    // No queue
                return null;

            /*
             * The first node is normally h.next. Try to get its
             * thread field, ensuring consistent reads: If thread
             * field is nulled out or s.prev is no longer head, then
             * some other thread(s) concurrently performed setHead in
         * between some of our reads.
             */
            Node s = h.next;
            if (s != null) {
                Thread st = s.thread;
                Node sp = s.prev;
                if (st != null && sp == head)
                    return st;
            }

            /*
         * Head's next field might not have been set yet, or may have
         * been unset after setHead. So we must check to see if tail
         * is actually first node. If not, we continue on, safely
         * traversing from tail back to head to find first,
         * guaranteeing termination.
             */

        Node t = tail;
        Thread firstThread = null;
        while (t != null && t != head) {
                Thread tt = t.thread;
            if (tt != null)
                firstThread = tt;
            t = t.prev;
        }
        return firstThread;
!!!7885851.java!!!	isQueued(inout thread : Thread) : boolean
        if (thread == null)
            throw new NullPointerException();
        for (Node p = tail; p != null; p = p.prev)
            if (p.thread == thread)
                return true;
        return false;
!!!7885979.java!!!	getQueueLength() : int
        int n = 0;
        for (Node p = tail; p != null; p = p.prev) {
            if (p.thread != null)
                ++n;
        }
        return n;
!!!7886107.java!!!	getQueuedThreads() : Collection
        ArrayList<Thread> list = new ArrayList<Thread>();
        for (Node p = tail; p != null; p = p.prev) {
            Thread t = p.thread;
            if (t != null)
                list.add(t);
        }
        return list;
!!!7886235.java!!!	getExclusiveQueuedThreads() : Collection
        ArrayList<Thread> list = new ArrayList<Thread>();
        for (Node p = tail; p != null; p = p.prev) {
            if (!p.isShared()) {
                Thread t = p.thread;
                if (t != null)
                    list.add(t);
            }
        }
        return list;
!!!7886363.java!!!	getSharedQueuedThreads() : Collection
        ArrayList<Thread> list = new ArrayList<Thread>();
        for (Node p = tail; p != null; p = p.prev) {
            if (p.isShared()) {
                Thread t = p.thread;
                if (t != null)
                    list.add(t);
            }
        }
        return list;
!!!7886491.java!!!	toString() : String
        int s = getState();
        String q  = hasQueuedThreads()? "non" : "";
        return super.toString() + 
            "[State = " + s + ", " + q + "empty queue]";
!!!7886619.java!!!	isOnSyncQueue(inout node : Node) : boolean
        if (node.waitStatus == Node.CONDITION || node.prev == null)
            return false;
        if (node.next != null) // If has successor, it must be on queue
            return true;
        /*
         * node.prev can be non-null, but not yet on queue because
         * the CAS to place it on queue can fail. So we have to
         * traverse from tail to make sure it actually made it.  It
         * will always be near the tail in calls to this method, and
         * unless the CAS failed (which is unlikely), it will be
         * there, so we hardly ever traverse much.
         */
        return findNodeFromTail(node);
!!!7886747.java!!!	findNodeFromTail(inout node : Node) : boolean
        Node t = tail; 
        for (;;) {
            if (t == node)
                return true;
            if (t == null)
                return false;
            t = t.prev;
        }
!!!7886875.java!!!	transferForSignal(inout node : Node) : boolean
        /*
         * If cannot change waitStatus, the node has been cancelled.
         */
        if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))
            return false;

        /*
         * Splice onto queue and try to set waitStatus of predecessor to
         * indicate that thread is (probably) waiting. If cancelled or
         * attempt to set waitStatus fails, wake up to resync (in which
         * case the waitStatus can be transiently and harmlessly wrong).
         */
        Node p = enq(node);
        int c = p.waitStatus;
        if (c > 0 || !compareAndSetWaitStatus(p, c, Node.SIGNAL)) 
            LockSupport.unpark(node.thread);
        return true;
!!!7887003.java!!!	transferAfterCancelledWait(inout node : Node) : boolean
        if (compareAndSetWaitStatus(node, Node.CONDITION, 0)) {
            enq(node);
            return true;
        }
        /*
         * If we lost out to a signal(), then we can't proceed
         * until it finishes its enq().  Cancelling during an
         * incomplete transfer is both rare and transient, so just
         * spin.
         */
        while (!isOnSyncQueue(node)) 
            Thread.yield();
        return false;
!!!7887131.java!!!	fullyRelease(inout node : Node) : int
        try {
            int savedState = getState();
            if (release(savedState))
                return savedState;
        } catch(RuntimeException ex) {
            node.waitStatus = Node.CANCELLED;
            throw ex;
        }
        // reach here if release fails
        node.waitStatus = Node.CANCELLED;
        throw new IllegalMonitorStateException();
!!!7887259.java!!!	owns(inout condition : ConditionObject) : boolean
        if (condition == null)
            throw new NullPointerException();
        return condition.isOwnedBy(this);
!!!7887387.java!!!	hasWaiters(inout condition : ConditionObject) : boolean
        if (!owns(condition))
            throw new IllegalArgumentException("Not owner");
        return condition.hasWaiters();
!!!7887515.java!!!	getWaitQueueLength(inout condition : ConditionObject) : int
        if (!owns(condition))
            throw new IllegalArgumentException("Not owner");
        return condition.getWaitQueueLength();
!!!7887643.java!!!	getWaitingThreads(inout condition : ConditionObject) : Collection
        if (!owns(condition))
            throw new IllegalArgumentException("Not owner");
        return condition.getWaitingThreads();
!!!7890971.java!!!	compareAndSetHead(inout update : Node) : boolean
        return unsafe.compareAndSwapObject(this, headOffset, null, update);
!!!7891099.java!!!	compareAndSetTail(inout expect : Node, inout update : Node) : boolean
        return unsafe.compareAndSwapObject(this, tailOffset, expect, update);
!!!7891227.java!!!	compareAndSetWaitStatus(inout node : Node, in expect : int, in update : int) : boolean
        return unsafe.compareAndSwapInt(node, waitStatusOffset, 
                                        expect, update);
!!!7891355.java!!!	compareAndSetNext(inout node : Node, inout expect : Node, inout update : Node) : boolean
        return unsafe.compareAndSwapObject(node, nextOffset, expect, update);
