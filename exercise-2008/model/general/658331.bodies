class MethodGenerator
!!!4485019.java!!!	MethodGenerator(in access_flags : int, inout return_type : Type, inout arg_types : Type, in arg_names : String, in method_name : String, in class_name : String, inout il : InstructionList, inout cpg : ConstantPoolGen)
	super(access_flags, return_type, arg_types, arg_names, method_name, 
	      class_name, il, cpg);
	
	_astoreHandler  = new ASTORE(HANDLER_INDEX);
	_aloadHandler   = new ALOAD(HANDLER_INDEX);
	_astoreIterator = new ASTORE(ITERATOR_INDEX);
	_aloadIterator  = new ALOAD(ITERATOR_INDEX);
	_aloadDom       = new ALOAD(DOM_INDEX);
	_astoreDom      = new ASTORE(DOM_INDEX);
	
	final int startElement =
	    cpg.addInterfaceMethodref(TRANSLET_OUTPUT_INTERFACE,
				      "startElement",
				      START_ELEMENT_SIG);
	_startElement = new INVOKEINTERFACE(startElement, 2);
	
	final int endElement =
	    cpg.addInterfaceMethodref(TRANSLET_OUTPUT_INTERFACE,
				      "endElement",
				      END_ELEMENT_SIG);
	_endElement = new INVOKEINTERFACE(endElement, 2);

	final int attribute =
	    cpg.addInterfaceMethodref(TRANSLET_OUTPUT_INTERFACE,
				      "addAttribute", 
				      "("
				      + STRING_SIG
				      + STRING_SIG
				      + ")V");
	_attribute = new INVOKEINTERFACE(attribute, 3);

	final int uniqueAttribute =
	    cpg.addInterfaceMethodref(TRANSLET_OUTPUT_INTERFACE,
				      "addUniqueAttribute", 
				      "("
				      + STRING_SIG
				      + STRING_SIG
				      + "I)V");
	_uniqueAttribute = new INVOKEINTERFACE(uniqueAttribute, 4);

	final int namespace =
	    cpg.addInterfaceMethodref(TRANSLET_OUTPUT_INTERFACE,
				      "namespaceAfterStartElement", 
				      "("
				      + STRING_SIG
				      + STRING_SIG
				      + ")V");
	_namespace = new INVOKEINTERFACE(namespace, 3);
	
	int index = cpg.addInterfaceMethodref(TRANSLET_OUTPUT_INTERFACE,
					      "startDocument",
					      "()V");
	_startDocument = new INVOKEINTERFACE(index, 1);
	
	index = cpg.addInterfaceMethodref(TRANSLET_OUTPUT_INTERFACE,
					  "endDocument",
					  "()V");
	_endDocument = new INVOKEINTERFACE(index, 1);
	
	
	index = cpg.addInterfaceMethodref(NODE_ITERATOR,
					  SET_START_NODE,
					  SET_START_NODE_SIG);
	_setStartNode = new INVOKEINTERFACE(index, 2);

	index = cpg.addInterfaceMethodref(NODE_ITERATOR,
					  "reset", "()"+NODE_ITERATOR_SIG);
	_reset = new INVOKEINTERFACE(index, 1);
	
	index = cpg.addInterfaceMethodref(NODE_ITERATOR, NEXT, NEXT_SIG);
	_nextNode = new INVOKEINTERFACE(index, 1);
	
	_slotAllocator = new SlotAllocator();
	_slotAllocator.initialize(getLocalVariables());
	_allocatorInit = true;
!!!4485147.java!!!	addLocalVariable(in name : String, inout type : Type, inout start : InstructionHandle, inout end : InstructionHandle) : LocalVariableGen
	return (_allocatorInit) ? addLocalVariable2(name, type, start) 
	    : super.addLocalVariable(name, type, start, end);
!!!4485275.java!!!	addLocalVariable2(in name : String, inout type : Type, inout start : InstructionHandle) : LocalVariableGen
	return super.addLocalVariable(name, type,
				      _slotAllocator.allocateSlot(type),
				      start, null);
!!!4485403.java!!!	removeLocalVariable(inout lvg : LocalVariableGen) : void
	_slotAllocator.releaseSlot(lvg);
	super.removeLocalVariable(lvg);
!!!4485531.java!!!	loadDOM() : Instruction
	return _aloadDom;
!!!4485659.java!!!	storeDOM() : Instruction
	return _astoreDom;
!!!4485787.java!!!	storeHandler() : Instruction
	return _astoreHandler;
!!!4485915.java!!!	loadHandler() : Instruction
	return _aloadHandler;
!!!4486043.java!!!	storeIterator() : Instruction
	return _astoreIterator;
!!!4486171.java!!!	loadIterator() : Instruction
	return _aloadIterator;
!!!4486299.java!!!	setStartNode() : Instruction
	return _setStartNode;
!!!4486427.java!!!	reset() : Instruction
	return _reset;
!!!4486555.java!!!	nextNode() : Instruction
	return _nextNode;
!!!4486683.java!!!	startElement() : Instruction
	return _startElement;
!!!4486811.java!!!	endElement() : Instruction
	return _endElement;
!!!4486939.java!!!	startDocument() : Instruction
	return _startDocument;
!!!4487067.java!!!	endDocument() : Instruction
	return _endDocument;
!!!4487195.java!!!	attribute() : Instruction
	return _attribute;
!!!4487323.java!!!	uniqueAttribute() : Instruction
    	return _uniqueAttribute;
!!!4487451.java!!!	namespace() : Instruction
	return _namespace;
!!!4487579.java!!!	loadCurrentNode() : Instruction
	if (_iloadCurrent == null) {
	    int idx = getLocalIndex("current");
	    if (idx > 0)
		_iloadCurrent = new ILOAD(idx);
	    else
		_iloadCurrent = new ICONST(0);
	}
	return _iloadCurrent;
!!!4487707.java!!!	storeCurrentNode() : Instruction
	return _istoreCurrent != null
	    ? _istoreCurrent
	    : (_istoreCurrent = new ISTORE(getLocalIndex("current")));
!!!4487835.java!!!	loadContextNode() : Instruction
	return loadCurrentNode();
!!!4487963.java!!!	storeContextNode() : Instruction
	return storeCurrentNode();
!!!4488091.java!!!	getLocalIndex(in name : String) : int
	return getLocalVariable(name).getIndex();
!!!4488219.java!!!	getLocalVariable(in name : String) : LocalVariableGen
	final LocalVariableGen[] vars = getLocalVariables();
	for (int i = 0; i < vars.length; i++)
	    if (vars[i].getName().equals(name))
		return vars[i];
	return null;	
!!!4488347.java!!!	setMaxLocals() : void
	
	// Get the current number of local variable slots
	int maxLocals = super.getMaxLocals();
	int prevLocals = maxLocals;

	// Get numer of actual variables
	final LocalVariableGen[] localVars = super.getLocalVariables();
	if (localVars != null) {
	    if (localVars.length > maxLocals)
		maxLocals = localVars.length;
	}

	// We want at least 5 local variable slots (for parameters)
	if (maxLocals < 5) maxLocals = 5;

	super.setMaxLocals(maxLocals);
