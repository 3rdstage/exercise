class AbstractSelectableChannel
!!!7479579.java!!!	AbstractSelectableChannel(inout provider : SelectorProvider)
	this.provider = provider;
!!!7479707.java!!!	provider() : SelectorProvider
	return provider;
!!!7479835.java!!!	addKey(inout k : SelectionKey) : void
	synchronized (keyLock) {
	    int i = 0;
	    if ((keys != null) && (keyCount < keys.length)) {
		// Find empty element of key array
		for (i = 0; i < keys.length; i++)
		    if (keys[i] == null)
			break;
	    } else if (keys == null) {
                keys =  new SelectionKey[3];
            } else {
		// Grow key array
		int n = keys.length * 2;
		SelectionKey[] ks =  new SelectionKey[n];
		for (i = 0; i < keys.length; i++)
		    ks[i] = keys[i];
		keys = ks;
		i = keyCount;
	    }
	    keys[i] = k;
	    keyCount++;
	}
!!!7479963.java!!!	findKey(inout sel : Selector) : SelectionKey
	synchronized (keyLock) {
            if (keys == null)
                return null;
	    for (int i = 0; i < keys.length; i++)
                if ((keys[i] != null) && (keys[i].selector() == sel))
                    return keys[i];
	    return null;
	}
!!!7480091.java!!!	removeKey(inout k : SelectionKey) : void
			// package-private
	synchronized (keyLock) {
	    for (int i = 0; i < keys.length; i++)
		if (keys[i] == k) {
		    keys[i] = null;
		    keyCount--;
		}
	    ((AbstractSelectionKey)k).invalidate();
	}
!!!7480219.java!!!	haveValidKeys() : boolean
	synchronized (keyLock) {
	    if (keyCount == 0)
		return false;
	    for (int i = 0; i < keys.length; i++) {
		if ((keys[i] != null) && keys[i].isValid())
		    return true;
	    }
	    return false;
	}
!!!7480347.java!!!	isRegistered() : boolean
	synchronized (keyLock) {
	    return keyCount != 0;
	}
!!!7480475.java!!!	keyFor(inout sel : Selector) : SelectionKey
	return findKey(sel);
!!!7480603.java!!!	register(inout sel : Selector, in ops : int, inout att : Object) : SelectionKey
	if (!isOpen())
	    throw new ClosedChannelException();
	if ((ops & ~validOps()) != 0)
	    throw new IllegalArgumentException();
	synchronized (regLock) {
	    if (blocking)
		throw new IllegalBlockingModeException();
	    SelectionKey k = findKey(sel);
            if (k != null) {
                k.interestOps(ops);
		k.attach(att);
            }
	    if (k == null) {
		// New registration
		k = ((AbstractSelector)sel).register(this, ops, att);
		addKey(k);
	    }
            return k;
        }
!!!7480731.java!!!	implCloseChannel() : void
	implCloseSelectableChannel();
	synchronized (keyLock) {
            int count = (keys == null) ? 0 : keys.length;
	    for (int i = 0; i < count; i++) {
		SelectionKey k = keys[i];
		if (k != null)
		    k.cancel();
	    }
	}
!!!7480987.java!!!	isBlocking() : boolean
	synchronized (regLock) {
	    return blocking;
	}
!!!7481115.java!!!	blockingLock() : Object
	return regLock;
!!!7481243.java!!!	configureBlocking(inout block : boolean) : SelectableChannel
        if (!isOpen())
            throw new ClosedChannelException();
	synchronized (regLock) {
	    if (blocking == block)
		return this;
	    if (block && haveValidKeys())
		throw new IllegalBlockingModeException();
	    implConfigureBlocking(block);
	    blocking = block;
	}
	return this;
