class ClassGen
!!!3704219.java!!!	ClassGen(in class_name : String, in super_class_name : String, in file_name : String, in access_flags : int, in interfaces : String)
    this.class_name       = class_name;
    this.super_class_name = super_class_name;
    this.file_name        = file_name;
    this.access_flags     = access_flags;
    cp = new ConstantPoolGen(); // Create empty constant pool

    // Put everything needed by default into the constant pool and the vectors
    addAttribute(new SourceFile(cp.addUtf8("SourceFile"), 2,
				cp.addUtf8(file_name), cp.getConstantPool()));
    class_name_index      = cp.addClass(class_name);
    superclass_name_index = cp.addClass(super_class_name);

    if(interfaces != null)
      for(int i=0; i < interfaces.length; i++)
	addInterface(interfaces[i]);
!!!3704347.java!!!	ClassGen(inout clazz : JavaClass)
    class_name_index      = clazz.getClassNameIndex();
    superclass_name_index = clazz.getSuperclassNameIndex();
    class_name            = clazz.getClassName();
    super_class_name      = clazz.getSuperclassName();
    file_name             = clazz.getSourceFileName();
    access_flags          = clazz.getAccessFlags();
    cp                    = new ConstantPoolGen(clazz.getConstantPool());
    major                 = clazz.getMajor();
    minor                 = clazz.getMinor();

    Attribute[] attributes = clazz.getAttributes();
    Method[]    methods    = clazz.getMethods();
    Field[]     fields     = clazz.getFields();
    String[]    interfaces = clazz.getInterfaceNames();
    
    for(int i=0; i < interfaces.length; i++)
      addInterface(interfaces[i]);

    for(int i=0; i < attributes.length; i++)
      addAttribute(attributes[i]);

    for(int i=0; i < methods.length; i++)
      addMethod(methods[i]);

    for(int i=0; i < fields.length; i++)
      addField(fields[i]);
!!!3704475.java!!!	getJavaClass() : JavaClass
    int[]        interfaces = getInterfaces();
    Field[]      fields     = getFields();
    Method[]     methods    = getMethods();
    Attribute[]  attributes = getAttributes();

    // Must be last since the above calls may still add something to it
    ConstantPool cp         = this.cp.getFinalConstantPool();
    
    return new JavaClass(class_name_index, superclass_name_index,
			 file_name, major, minor, access_flags,
			 cp, interfaces, fields, methods, attributes);
!!!3704603.java!!!	addInterface(in name : String) : void
    interface_vec.add(name);
!!!3704731.java!!!	removeInterface(in name : String) : void
    interface_vec.remove(name);
!!!3704859.java!!!	getMajor() : int
 return major;
!!!3704987.java!!!	setMajor(in major : int) : void
    this.major = major;
!!!3705115.java!!!	setMinor(in minor : int) : void
    this.minor = minor;
!!!3705243.java!!!	getMinor() : int
 return minor;
!!!3705371.java!!!	addAttribute(inout a : Attribute) : void
 attribute_vec.add(a);
!!!3705499.java!!!	addMethod(inout m : Method) : void
 method_vec.add(m);
!!!3705627.java!!!	addEmptyConstructor(in access_flags : int) : void
    InstructionList il = new InstructionList();
    il.append(InstructionConstants.THIS); // Push `this'
    il.append(new INVOKESPECIAL(cp.addMethodref(super_class_name,
						"<init>", "()V")));
    il.append(InstructionConstants.RETURN);

    MethodGen mg = new MethodGen(access_flags, Type.VOID, Type.NO_ARGS, null,
		       "<init>", class_name, il, cp);
    mg.setMaxStack(1);
    addMethod(mg.getMethod());
!!!3705755.java!!!	addField(inout f : Field) : void
 field_vec.add(f);
!!!3705883.java!!!	containsField(inout f : Field) : boolean
 return field_vec.contains(f);
!!!3706011.java!!!	containsField(in name : String) : Field
    for(Iterator e=field_vec.iterator(); e.hasNext(); ) {
      Field f = (Field)e.next();
      if(f.getName().equals(name))
	return f;
    }

    return null;
!!!3706139.java!!!	containsMethod(in name : String, in signature : String) : Method
    for(Iterator e=method_vec.iterator(); e.hasNext();) {
      Method m = (Method)e.next();
      if(m.getName().equals(name) && m.getSignature().equals(signature))
	return m;
    }

    return null;
!!!3706267.java!!!	removeAttribute(inout a : Attribute) : void
 attribute_vec.remove(a);
!!!3706395.java!!!	removeMethod(inout m : Method) : void
 method_vec.remove(m);
!!!3706523.java!!!	replaceMethod(inout old : Method, inout new_ : Method) : void
    if(new_ == null)
      throw new ClassGenException("Replacement method must not be null");

    int i = method_vec.indexOf(old);

    if(i < 0)
      method_vec.add(new_);
    else
      method_vec.set(i, new_);
!!!3706651.java!!!	replaceField(inout old : Field, inout new_ : Field) : void
    if(new_ == null)
      throw new ClassGenException("Replacement method must not be null");

    int i = field_vec.indexOf(old);

    if(i < 0)
      field_vec.add(new_);
    else
      field_vec.set(i, new_);
!!!3706779.java!!!	removeField(inout f : Field) : void
 field_vec.remove(f);
!!!3706907.java!!!	getClassName() : String
 return class_name;
!!!3707035.java!!!	getSuperclassName() : String
 return super_class_name;
!!!3707163.java!!!	getFileName() : String
 return file_name;
!!!3707291.java!!!	setClassName(in name : String) : void
    class_name = name.replace('/', '.');
    class_name_index = cp.addClass(name);
!!!3707419.java!!!	setSuperclassName(in name : String) : void
    super_class_name = name.replace('/', '.');
    superclass_name_index = cp.addClass(name);
!!!3707547.java!!!	getMethods() : Method
    Method[] methods = new Method[method_vec.size()];
    method_vec.toArray(methods);
    return methods;
!!!3707675.java!!!	setMethods(inout methods : Method) : void
    method_vec.clear();
    for(int m=0; m<methods.length; m++)
      addMethod(methods[m]);
!!!3707803.java!!!	setMethodAt(inout method : Method, in pos : int) : void
    method_vec.set(pos, method);
!!!3707931.java!!!	getMethodAt(in pos : int) : Method
    return (Method)method_vec.get(pos);
!!!3708059.java!!!	getInterfaceNames() : String
    int      size = interface_vec.size();
    String[] interfaces = new String[size];

    interface_vec.toArray(interfaces);
    return interfaces;
!!!3708187.java!!!	getInterfaces() : int
    int   size = interface_vec.size();
    int[] interfaces = new int[size];

    for(int i=0; i < size; i++)
      interfaces[i] = cp.addClass((String)interface_vec.get(i));

    return interfaces;
!!!3708315.java!!!	getFields() : Field
    Field[] fields = new Field[field_vec.size()];
    field_vec.toArray(fields);
    return fields;
!!!3708443.java!!!	getAttributes() : Attribute
    Attribute[] attributes = new Attribute[attribute_vec.size()];
    attribute_vec.toArray(attributes);
    return attributes;
!!!3708571.java!!!	getConstantPool() : ConstantPoolGen
 return cp;
!!!3708699.java!!!	setConstantPool(inout constant_pool : ConstantPoolGen) : void
    cp = constant_pool;
!!!3708827.java!!!	setClassNameIndex(in class_name_index : int) : void
    this.class_name_index = class_name_index;
    class_name = cp.getConstantPool().
      getConstantString(class_name_index, Constants.CONSTANT_Class).replace('/', '.');
!!!3708955.java!!!	setSuperclassNameIndex(in superclass_name_index : int) : void
    this.superclass_name_index = superclass_name_index;
    super_class_name = cp.getConstantPool().
      getConstantString(superclass_name_index, Constants.CONSTANT_Class).replace('/', '.');
!!!3709083.java!!!	getSuperclassNameIndex() : int
 return superclass_name_index;
!!!3709211.java!!!	getClassNameIndex() : int
 return class_name_index;
!!!3709339.java!!!	addObserver(inout o : ClassObserver) : void
    if(observers == null)
      observers = new ArrayList();

    observers.add(o);
!!!3709467.java!!!	removeObserver(inout o : ClassObserver) : void
    if(observers != null)
      observers.remove(o);
!!!3709595.java!!!	update() : void
    if(observers != null)
      for(Iterator e = observers.iterator(); e.hasNext(); )
	((ClassObserver)e.next()).notify(this);
!!!3709723.java!!!	clone() : Object
    try {
      return super.clone();
    } catch(CloneNotSupportedException e) {
      System.err.println(e);
      return null;
    }
