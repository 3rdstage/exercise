class AbstractTranslet
!!!4706587.java!!!	printInternalState() : void
	System.out.println("-------------------------------------");
	System.out.println("AbstractTranslet this = " + this);
	System.out.println("pbase = " + pbase);
	System.out.println("vframe = " + pframe);
	System.out.println("paramsStack.size() = " + paramsStack.size());
	System.out.println("namesArray.size = " + namesArray.length);
	System.out.println("namespaceArray.size = " + namespaceArray.length);
	System.out.println("");
	System.out.println("Total memory = " + Runtime.getRuntime().totalMemory());
!!!4706715.java!!!	makeDOMAdapter(inout dom : DOM) : DOMAdapter
	return new DOMAdapter(dom, namesArray, urisArray, typesArray, namespaceArray);
!!!4706843.java!!!	pushParamFrame() : void
	paramsStack.add(pframe, new Integer(pbase));
	pbase = ++pframe;
!!!4706971.java!!!	popParamFrame() : void
	if (pbase > 0) {
	    final int oldpbase = ((Integer)paramsStack.get(--pbase)).intValue();
	    for (int i = pframe - 1; i >= pbase; i--) {
		paramsStack.remove(i);
	    }
	    pframe = pbase; pbase = oldpbase;
	}
!!!4707099.java!!!	addParameter(in name : String, inout value : Object) : Object
        name = BasisLibrary.mapQNameToJavaName (name);
	return addParameter(name, value, false);
!!!4707227.java!!!	addParameter(in name : String, inout value : Object, inout isDefault : boolean) : Object
	// Local parameters need to be re-evaluated for each iteration
	for (int i = pframe - 1; i >= pbase; i--) {
	    final Parameter param = (Parameter) paramsStack.get(i);

	    if (param._name.equals(name)) {
		// Only overwrite if current value is the default value and
		// the new value is _NOT_ the default value.
		if (param._isDefault || !isDefault) {
		    param._value = value;
		    param._isDefault = isDefault;
		    return value;
		}
		return param._value;
	    }
	}

	// Add new parameter to parameter stack
	paramsStack.add(pframe++, new Parameter(name, value, isDefault));
	return value;
!!!4707355.java!!!	clearParameters() : void
  
	pbase = pframe = 0;
	paramsStack.clear();
!!!4707483.java!!!	getParameter(in name : String) : Object

        name = BasisLibrary.mapQNameToJavaName (name);

	for (int i = pframe - 1; i >= pbase; i--) {
	    final Parameter param = (Parameter)paramsStack.get(i);
	    if (param._name.equals(name)) return param._value;
	}
	return null;
!!!4707611.java!!!	setMessageHandler(inout handler : MessageHandler) : void
	_msgHandler = handler;
!!!4707739.java!!!	displayMessage(in msg : String) : void
	if (_msgHandler == null) {
            System.err.println(msg);
	}
	else {
	    _msgHandler.displayMessage(msg);
	}
!!!4707867.java!!!	addDecimalFormat(in name : String, inout symbols : DecimalFormatSymbols) : void
	// Instanciate hashtable for formatting symbols if needed
	if (_formatSymbols == null) _formatSymbols = new Hashtable();

	// The name cannot be null - use empty string instead
	if (name == null) name = EMPTYSTRING;

	// Construct a DecimalFormat object containing the symbols we got
	final DecimalFormat df = new DecimalFormat();
	if (symbols != null) {
	    df.setDecimalFormatSymbols(symbols);
	}
	_formatSymbols.put(name, df);
!!!4707995.java!!!	getDecimalFormat(in name : String) : DecimalFormat

	if (_formatSymbols != null) {
	    // The name cannot be null - use empty string instead
	    if (name == null) name = EMPTYSTRING;

	    DecimalFormat df = (DecimalFormat)_formatSymbols.get(name);
	    if (df == null) df = (DecimalFormat)_formatSymbols.get(EMPTYSTRING);
	    return df;
	}
	return(null);
!!!4708123.java!!!	prepassDocument(inout document : DOM) : void
        setIndexSize(document.getSize());
        buildIDIndex(document);
!!!4708251.java!!!	buildIDIndex(inout document : DOM) : void
        
        if (document instanceof DOMEnhancedForDTM) {
            DOMEnhancedForDTM enhancedDOM = (DOMEnhancedForDTM)document;
            
            // If the input source is DOMSource, the KeyIndex table is not
            // built at this time. It will be built later by the lookupId()
            // and containsId() methods of the KeyIndex class.
            if (enhancedDOM.hasDOMSource()) {
                buildKeyIndex(ID_INDEX_NAME, document);
                return;
            }
            else {
                final Hashtable elementsByID = enhancedDOM.getElementsWithIDs();

                if (elementsByID == null) {
            	    return;
                }

                // Given a Hashtable of DTM nodes indexed by ID attribute values,
                // loop through the table copying information to a KeyIndex
                // for the mapping from ID attribute value to DTM node
                final Enumeration idValues = elementsByID.keys();
                boolean hasIDValues = false;

                while (idValues.hasMoreElements()) {
            	    final Object idValue = idValues.nextElement();
            	    final int element = ((Integer)elementsByID.get(idValue)).intValue();

            	    buildKeyIndex(ID_INDEX_NAME, element, idValue);
            	    hasIDValues = true;
                }

                if (hasIDValues) {
            	    setKeyIndexDom(ID_INDEX_NAME, document);
                }
            }
        }
!!!4708379.java!!!	postInitialization() : void
        // If the version of the translet had just one namesArray, split
        // it into multiple fields.
        if (transletVersion < VER_SPLIT_NAMES_ARRAY) {
            int arraySize = namesArray.length;
            String[] newURIsArray = new String[arraySize];
            String[] newNamesArray = new String[arraySize];
            int[] newTypesArray = new int[arraySize];

            for (int i = 0; i < arraySize; i++) {
                String name = namesArray[i];
                int colonIndex = name.lastIndexOf(':');
                int lNameStartIdx = colonIndex+1;

                if (colonIndex > -1) {
                    newURIsArray[i] = name.substring(0, colonIndex);
                }

               // Distinguish attribute and element names.  Attribute has
               // @ before local part of name.
               if (name.charAt(lNameStartIdx) == '@') {
                   lNameStartIdx++;
                   newTypesArray[i] = DTM.ATTRIBUTE_NODE;
               } else if (name.charAt(lNameStartIdx) == '?') {
                   lNameStartIdx++;
                   newTypesArray[i] = DTM.NAMESPACE_NODE;
               } else {
                   newTypesArray[i] = DTM.ELEMENT_NODE;
               }
               newNamesArray[i] =
                          (lNameStartIdx == 0) ? name
                                               : name.substring(lNameStartIdx);
            }

            namesArray = newNamesArray;
            urisArray  = newURIsArray;
            typesArray = newTypesArray;
        }

        // Was translet compiled using a more recent version of the XSLTC
        // compiler than is known by the AbstractTranslet class?  If, so
        // and we've made it this far (which is doubtful), we should give up.
        if (transletVersion > CURRENT_TRANSLET_VERSION) {
            BasisLibrary.runTimeError(BasisLibrary.UNKNOWN_TRANSLET_VERSION_ERR,
                                      this.getClass().getName());
        }
!!!4708507.java!!!	setIndexSize(in size : int) : void
	if (size > _indexSize) _indexSize = size;
!!!4708635.java!!!	createKeyIndex() : KeyIndex
	return(new KeyIndex(_indexSize));
!!!4708763.java!!!	buildKeyIndex(in name : String, in node : int, inout value : Object) : void
	if (_keyIndexes == null) _keyIndexes = new Hashtable();
	
	KeyIndex index = (KeyIndex)_keyIndexes.get(name);
	if (index == null) {
	    _keyIndexes.put(name, index = new KeyIndex(_indexSize));
	}
	index.add(value, node);
!!!4708891.java!!!	buildKeyIndex(in name : String, inout dom : DOM) : void
	if (_keyIndexes == null) _keyIndexes = new Hashtable();
	
	KeyIndex index = (KeyIndex)_keyIndexes.get(name);
	if (index == null) {
	    _keyIndexes.put(name, index = new KeyIndex(_indexSize));
	}
	index.setDom(dom);
!!!4709019.java!!!	getKeyIndex(in name : String) : KeyIndex
	// Return an empty key index iterator if none are defined
	if (_keyIndexes == null) {
	    return (_emptyKeyIndex != null) 
	        ? _emptyKeyIndex
	        : (_emptyKeyIndex = new KeyIndex(1)); 
	} 

	// Look up the requested key index
	final KeyIndex index = (KeyIndex)_keyIndexes.get(name);

	// Return an empty key index iterator if the requested index not found
	if (index == null) {
	    return (_emptyKeyIndex != null) 
	        ? _emptyKeyIndex
	        : (_emptyKeyIndex = new KeyIndex(1)); 
	}

	return(index);
!!!4709147.java!!!	buildKeys(inout document : DOM, inout iterator : DTMAxisIterator, inout handler : SerializationHandler, in root : int) : void
			  	
!!!4709275.java!!!	setKeyIndexDom(in name : String, inout document : DOM) : void
    	getKeyIndex(name).setDom(document);
			  	
!!!4709403.java!!!	setDOMCache(inout cache : DOMCache) : void
	_domCache = cache;
!!!4709531.java!!!	getDOMCache() : DOMCache
	return(_domCache);
!!!4709659.java!!!	openOutputHandler(in filename : String, inout append : boolean) : SerializationHandler
	try {
	    final TransletOutputHandlerFactory factory 
		= TransletOutputHandlerFactory.newInstance();

            String dirStr = new File(filename).getParent();
            if ((null != dirStr) && (dirStr.length() > 0)) {
               File dir = new File(dirStr);
               dir.mkdirs();
            }

	    factory.setEncoding(_encoding);
	    factory.setOutputMethod(_method);
	    factory.setWriter(new FileWriter(filename, append));
	    factory.setOutputType(TransletOutputHandlerFactory.STREAM);

	    final SerializationHandler handler 
		= factory.getSerializationHandler();

	    transferOutputSettings(handler);
	    handler.startDocument();
	    return handler;
	}
	catch (Exception e) {
	    throw new TransletException(e);
	}
!!!4709787.java!!!	openOutputHandler(in filename : String) : SerializationHandler
       return openOutputHandler(filename, false);
!!!4709915.java!!!	closeOutputHandler(inout handler : SerializationHandler) : void
	try {
	    handler.endDocument();
	    handler.close();
	}
	catch (Exception e) {
	    // what can you do?
	}
!!!4710171.java!!!	transform(inout document : DOM, inout handler : SerializationHandler) : void
	transform(document, document.getIterator(), handler);
!!!4710299.java!!!	characters(in string : String, inout handler : SerializationHandler) : void
        if (string != null) {
           //final int length = string.length();
           try {
               handler.characters(string);
           } catch (Exception e) {
               throw new TransletException(e);
           }
        }   
!!!4710427.java!!!	addCdataElement(in name : String) : void
	if (_cdata == null) {
            _cdata = new Vector();
        }

        int lastColon = name.lastIndexOf(':');

        if (lastColon > 0) {
            String uri = name.substring(0, lastColon);
            String localName = name.substring(lastColon+1);
	    _cdata.addElement(uri);
	    _cdata.addElement(localName);
        } else {
	    _cdata.addElement(null);
	    _cdata.addElement(name);
        }
!!!4710555.java!!!	transferOutputSettings(inout handler : SerializationHandler) : void
	if (_method != null) {
	    if (_method.equals("xml")) {
	        if (_standalone != null) {
		    handler.setStandalone(_standalone);
		}
		if (_omitHeader) {
		    handler.setOmitXMLDeclaration(true);
		}
		handler.setCdataSectionElements(_cdata);
		if (_version != null) {
		    handler.setVersion(_version);
		}
		handler.setIndent(_indent);
        handler.setIndentAmount(_indentamount);
		if (_doctypeSystem != null) {
		    handler.setDoctype(_doctypeSystem, _doctypePublic);
		}
	    }
	    else if (_method.equals("html")) {
		handler.setIndent(_indent);
		handler.setDoctype(_doctypeSystem, _doctypePublic);
		if (_mediaType != null) {
		    handler.setMediaType(_mediaType);
		}
	    }
	}
	else {
	    handler.setCdataSectionElements(_cdata);
	    if (_version != null) {
		handler.setVersion(_version);
	    }
	    if (_standalone != null) {
		handler.setStandalone(_standalone);
	    }
	    if (_omitHeader) {
		handler.setOmitXMLDeclaration(true);
	    }
	    handler.setIndent(_indent);
	    handler.setDoctype(_doctypeSystem, _doctypePublic);
	}
!!!4710683.java!!!	addAuxiliaryClass(inout auxClass : Class) : void
	if (_auxClasses == null) _auxClasses = new Hashtable();
	_auxClasses.put(auxClass.getName(), auxClass);
!!!4710811.java!!!	setAuxiliaryClasses(inout auxClasses : Hashtable) : void
    	_auxClasses = auxClasses;
!!!4710939.java!!!	getAuxiliaryClass(in className : String) : Class
	if (_auxClasses == null) return null;
	return((Class)_auxClasses.get(className));
!!!4711067.java!!!	getNamesArray() : String
	return namesArray;
!!!4711195.java!!!	getUrisArray() : String
    	return urisArray;
!!!4711323.java!!!	getTypesArray() : int
    	return typesArray;
!!!4711451.java!!!	getNamespaceArray() : String
	return namespaceArray;
!!!4711579.java!!!	hasIdCall() : boolean
    	return _hasIdCall;
!!!4711707.java!!!	getTemplates() : Templates
    	return _templates;
!!!4711835.java!!!	setTemplates(inout templates : Templates) : void
    	_templates = templates;
!!!4711963.java!!!	newDocument(in uri : String, in qname : String) : Document
        if (_domImplementation == null) {
            _domImplementation = DocumentBuilderFactory.newInstance()
                .newDocumentBuilder().getDOMImplementation();
        }       
        return _domImplementation.createDocument(uri, qname, null);   
