class VariableRefBase
!!!4407579.java!!!	VariableRefBase(inout variable : VariableBase)
	_variable = variable;
	variable.addReference(this);
!!!4407707.java!!!	VariableRefBase()
	_variable = null;
!!!4407835.java!!!	getVariable() : VariableBase
	return _variable;
!!!4407963.java!!!	addParentDependency() : void
 
	SyntaxTreeNode node = this;
        while (node != null && node instanceof TopLevelElement == false) { 
	    node = node.getParent();
	}
        TopLevelElement parent = (TopLevelElement) node;
        if (parent != null) {
            VariableBase var = _variable;
            if (_variable._ignore) {
                if (_variable instanceof Variable) { 
                    var = parent.getSymbolTable()
                                .lookupVariable(_variable._name);
                } else if (_variable instanceof Param) {
                    var = parent.getSymbolTable().lookupParam(_variable._name);
                }
             }
             parent.addDependency(var);
         }
!!!4408091.java!!!	equals(inout obj : Object) : boolean
	try {
	    return (_variable == ((VariableRefBase) obj)._variable);
	} 
	catch (ClassCastException e) {
	    return false;
	}
!!!4408219.java!!!	toString() : String
	return "variable-ref("+_variable.getName()+'/'+_variable.getType()+')';
!!!4408347.java!!!	typeCheck(inout stable : SymbolTable) : Type
	// Returned cached type if available
	if (_type != null) return _type;

	// Find nearest closure to add a variable reference
	if (_variable.isLocal()) {
	    SyntaxTreeNode node = getParent();
	    do {
		if (node instanceof Closure) {
		    _closure = (Closure) node;
		    break;
		}
		if (node instanceof TopLevelElement) {
		    break;	// way up in the tree
		}
		node = node.getParent();
	    } while (node != null);

	    if (_closure != null) {
		_closure.addVariable(this);
	    }
	}

        // Attempt to get the cached variable type
        _type = _variable.getType();

        // If that does not work we must force a type-check (this is normally
        // only needed for globals in included/imported stylesheets
        if (_type == null) {
            _variable.typeCheck(stable);
            _type = _variable.getType();
        }
       
        // If in a top-level element, create dependency to the referenced var
        addParentDependency();

        // Return the type of the referenced variable
        return _type;
