class JFrame
!!!3883547.java!!!	JFrame()
        super();        
        frameInit();
!!!3883675.java!!!	JFrame(inout gc : GraphicsConfiguration)
        super(gc);
        frameInit();
!!!3883803.java!!!	JFrame(in title : String)
        super(title);
        frameInit();
!!!3883931.java!!!	JFrame(in title : String, inout gc : GraphicsConfiguration)
        super(title, gc);
        frameInit();
!!!3884059.java!!!	frameInit() : void
        enableEvents(AWTEvent.KEY_EVENT_MASK | AWTEvent.WINDOW_EVENT_MASK);
        setLocale( JComponent.getDefaultLocale() );
        setRootPane(createRootPane());
        setBackground(UIManager.getColor("control"));
        setRootPaneCheckingEnabled(true);
        if (JFrame.isDefaultLookAndFeelDecorated()) {
            boolean supportsWindowDecorations = 
            UIManager.getLookAndFeel().getSupportsWindowDecorations();
            if (supportsWindowDecorations) {
                setUndecorated(true);
                getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
            }
        }
        sun.awt.SunToolkit.checkAndSetPolicy(this, true);
!!!3884187.java!!!	createRootPane() : JRootPane
        JRootPane rp = new JRootPane();
        // NOTE: this uses setOpaque vs LookAndFeel.installProperty as there
        // is NO reason for the RootPane not to be opaque. For painting to
        // work the contentPane must be opaque, therefor the RootPane can
        // also be opaque.
        rp.setOpaque(true);
        return rp;
!!!3884315.java!!!	processWindowEvent(inout e : WindowEvent) : void
        super.processWindowEvent(e);

        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
            switch(defaultCloseOperation) {
              case HIDE_ON_CLOSE:
                 setVisible(false);
                 break;
              case DISPOSE_ON_CLOSE:
                 setVisible(false);
                 dispose();
                 break;
              case DO_NOTHING_ON_CLOSE:
                 default: 
                 break;
	      case EXIT_ON_CLOSE:
                  // This needs to match the checkExit call in
                  // setDefaultCloseOperation
		System.exit(0);
		break;
            }
        }
!!!3884443.java!!!	setDefaultCloseOperation(in operation : int) : void
	if (operation != DO_NOTHING_ON_CLOSE &&
	    operation != HIDE_ON_CLOSE &&
	    operation != DISPOSE_ON_CLOSE &&
	    operation != EXIT_ON_CLOSE) {
            throw new IllegalArgumentException("defaultCloseOperation must be one of: DO_NOTHING_ON_CLOSE, HIDE_ON_CLOSE, DISPOSE_ON_CLOSE, or EXIT_ON_CLOSE");
	}
        if (this.defaultCloseOperation != operation) {
            if (operation == EXIT_ON_CLOSE) {
                SecurityManager security = System.getSecurityManager();
                if (security != null) {
                    security.checkExit(0);
                }
            }
            int oldValue = this.defaultCloseOperation;
            this.defaultCloseOperation = operation;
            firePropertyChange("defaultCloseOperation", oldValue, operation);
	}
!!!3884571.java!!!	getDefaultCloseOperation() : int
        return defaultCloseOperation;
!!!3884699.java!!!	update(inout g : Graphics) : void
        paint(g);
!!!3884827.java!!!	setJMenuBar(inout menubar : JMenuBar) : void
        getRootPane().setMenuBar(menubar);
!!!3884955.java!!!	getJMenuBar() : JMenuBar
 
        return getRootPane().getMenuBar(); 
!!!3885083.java!!!	isRootPaneCheckingEnabled() : boolean
        return rootPaneCheckingEnabled;
!!!3885211.java!!!	setRootPaneCheckingEnabled(inout enabled : boolean) : void
        rootPaneCheckingEnabled = enabled;
!!!3885339.java!!!	addImpl(inout comp : Component, inout constraints : Object, in index : int) : void
        if(isRootPaneCheckingEnabled()) {
            getContentPane().add(comp, constraints, index);
        }
        else {
            super.addImpl(comp, constraints, index);
        }
!!!3885467.java!!!	remove(inout comp : Component) : void
	if (comp == rootPane) {
	    super.remove(comp);
	} else {
	    getContentPane().remove(comp);
	}
!!!3885595.java!!!	setLayout(inout manager : LayoutManager) : void
        if(isRootPaneCheckingEnabled()) {
            getContentPane().setLayout(manager);
        }
        else {
            super.setLayout(manager);
        }
!!!3885723.java!!!	getRootPane() : JRootPane
 
        return rootPane; 
!!!3885851.java!!!	setRootPane(inout root : JRootPane) : void
        if(rootPane != null) {
            remove(rootPane);
        }
        rootPane = root;
        if(rootPane != null) {
            boolean checkingEnabled = isRootPaneCheckingEnabled();
            try {
                setRootPaneCheckingEnabled(false);
                add(rootPane, BorderLayout.CENTER);
            }
            finally {
                setRootPaneCheckingEnabled(checkingEnabled);
            }
        }
!!!3885979.java!!!	setIconImage(inout image : Image) : void
        Image oldImage = getIconImage();
        super.setIconImage(image);
        firePropertyChange("iconImage", oldImage, image);
!!!3886107.java!!!	getContentPane() : Container
 
        return getRootPane().getContentPane(); 
!!!3886235.java!!!	setContentPane(inout contentPane : Container) : void
        getRootPane().setContentPane(contentPane);
!!!3886363.java!!!	getLayeredPane() : JLayeredPane
 
        return getRootPane().getLayeredPane(); 
!!!3886491.java!!!	setLayeredPane(inout layeredPane : JLayeredPane) : void
        getRootPane().setLayeredPane(layeredPane);
!!!3886619.java!!!	getGlassPane() : Component
 
        return getRootPane().getGlassPane(); 
!!!3886747.java!!!	setGlassPane(inout glassPane : Component) : void
        getRootPane().setGlassPane(glassPane);
!!!3886875.java!!!	setDefaultLookAndFeelDecorated(inout defaultLookAndFeelDecorated : boolean) : void
        if (defaultLookAndFeelDecorated) {
            SwingUtilities.appContextPut(defaultLookAndFeelDecoratedKey, Boolean.TRUE);
        } else {
            SwingUtilities.appContextPut(defaultLookAndFeelDecoratedKey, Boolean.FALSE);
        }
!!!3887003.java!!!	isDefaultLookAndFeelDecorated() : boolean
    
        Boolean defaultLookAndFeelDecorated = 
            (Boolean) SwingUtilities.appContextGet(defaultLookAndFeelDecoratedKey);
        if (defaultLookAndFeelDecorated == null) {
            defaultLookAndFeelDecorated = Boolean.FALSE;
        }
        return defaultLookAndFeelDecorated.booleanValue();
!!!3887131.java!!!	paramString() : String
        String defaultCloseOperationString;
        if (defaultCloseOperation == HIDE_ON_CLOSE) {
            defaultCloseOperationString = "HIDE_ON_CLOSE";
        } else if (defaultCloseOperation == DISPOSE_ON_CLOSE) {
            defaultCloseOperationString = "DISPOSE_ON_CLOSE";
        } else if (defaultCloseOperation == DO_NOTHING_ON_CLOSE) {
            defaultCloseOperationString = "DO_NOTHING_ON_CLOSE";
        } else if (defaultCloseOperation == 3) {
            defaultCloseOperationString = "EXIT_ON_CLOSE";
        } else defaultCloseOperationString = "";
	String rootPaneString = (rootPane != null ?
				 rootPane.toString() : "");
	String rootPaneCheckingEnabledString = (rootPaneCheckingEnabled ?
						"true" : "false");

	return super.paramString() +
	",defaultCloseOperation=" + defaultCloseOperationString +
	",rootPane=" + rootPaneString +
	",rootPaneCheckingEnabled=" + rootPaneCheckingEnabledString;
!!!3887259.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJFrame();
        }
        return accessibleContext;
