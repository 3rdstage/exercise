class AccessibleStateSet
!!!8163099.java!!!	AccessibleStateSet()
        states = null;
!!!8163227.java!!!	AccessibleStateSet(inout states : AccessibleState)
        if (states.length != 0) {
            this.states = new Vector(states.length);
            for (int i = 0; i < states.length; i++) {
                if (!this.states.contains(states[i])) {
                    this.states.addElement(states[i]);
                }
            }
        }
!!!8163355.java!!!	add(inout state : AccessibleState) : boolean
        // [[[ PENDING:  WDW - the implementation of this does not need
        // to always use a vector of states.  It could be improved by
        // caching the states as a bit set.]]]
        if (states == null) {
            states = new Vector();
        }

        if (!states.contains(state)) {
            states.addElement(state);
            return true;
        } else {
            return false;
        }
!!!8163483.java!!!	addAll(inout states : AccessibleState) : void
        if (states.length != 0) {
            if (this.states == null) {
		this.states = new Vector(states.length);
            }
            for (int i = 0; i < states.length; i++) {
                if (!this.states.contains(states[i])) {
                    this.states.addElement(states[i]);
                }
            }
        }
!!!8163611.java!!!	remove(inout state : AccessibleState) : boolean
        if (states == null) {
            return false;
        } else {
            return states.removeElement(state);
        }
!!!8163739.java!!!	clear() : void
        if (states != null) {
            states.removeAllElements();
        }
!!!8163867.java!!!	contains(inout state : AccessibleState) : boolean
        if (states == null) {
            return false;
        } else {
            return states.contains(state);
        }
!!!8163995.java!!!	toArray() : AccessibleState
        if (states == null) {
            return new AccessibleState[0];
        } else {
            AccessibleState[] stateArray = new AccessibleState[states.size()];
            for (int i = 0; i < stateArray.length; i++) {
                stateArray[i] = (AccessibleState) states.elementAt(i);
            }
            return stateArray;
        }
!!!8164123.java!!!	toString() : String
        String ret = null;
        if ((states != null) && (states.size() > 0)) {
            ret = ((AccessibleState) (states.elementAt(0))).toDisplayString();
            for (int i = 1; i < states.size(); i++) {
                ret = ret + "," 
                        + ((AccessibleState) (states.elementAt(i))).
					      toDisplayString();
            }
        }
        return ret;
