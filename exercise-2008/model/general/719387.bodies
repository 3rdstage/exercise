class XMLGrammarPoolImpl
!!!5357595.java!!!	XMLGrammarPoolImpl()
        fGrammars = new Entry[TABLE_SIZE];
        fPoolIsLocked = false;
!!!5357723.java!!!	XMLGrammarPoolImpl(in initialCapacity : int)
        fGrammars = new Entry[initialCapacity];
        fPoolIsLocked = false;
!!!5357851.java!!!	retrieveInitialGrammarSet(in grammarType : String) : Grammar
        synchronized (fGrammars) {
            int grammarSize = fGrammars.length ;
            Grammar [] tempGrammars = new Grammar[fGrammarCount];
            int pos = 0;
            for (int i = 0; i < grammarSize; i++) {
                for (Entry e = fGrammars[i]; e != null; e = e.next) {
                    if (e.desc.getGrammarType().equals(grammarType)) {
                        tempGrammars[pos++] = e.grammar;
                    }
                }
            }
            Grammar[] toReturn = new Grammar[pos];
            System.arraycopy(tempGrammars, 0, toReturn, 0, pos);
            return toReturn;
        }
!!!5357979.java!!!	cacheGrammars(in grammarType : String, inout grammars : Grammar) : void
        if(!fPoolIsLocked) {
            for (int i = 0; i < grammars.length; i++) {
                if(DEBUG) {
                    System.out.println("CACHED GRAMMAR " + (i+1) ) ;
                    Grammar temp = grammars[i] ;
                    //print(temp.getGrammarDescription());
                }
                putGrammar(grammars[i]);
            }
        }
!!!5358107.java!!!	retrieveGrammar(inout desc : XMLGrammarDescription) : Grammar
        if(DEBUG){
            System.out.println("RETRIEVING GRAMMAR FROM THE APPLICATION WITH FOLLOWING DESCRIPTION :");
            //print(desc);
        }
        return getGrammar(desc);
!!!5358235.java!!!	putGrammar(inout grammar : Grammar) : void
        if(!fPoolIsLocked) {
            synchronized (fGrammars) {
                XMLGrammarDescription desc = grammar.getGrammarDescription();
                int hash = hashCode(desc);
                int index = (hash & 0x7FFFFFFF) % fGrammars.length;
                for (Entry entry = fGrammars[index]; entry != null; entry = entry.next) {
                    if (entry.hash == hash && equals(entry.desc, desc)) {
                        entry.grammar = grammar;
                        return;
                    }
                }
                // create a new entry
                Entry entry = new Entry(hash, desc, grammar, fGrammars[index]);
                fGrammars[index] = entry;
                fGrammarCount++;
            }
        }
!!!5358363.java!!!	getGrammar(inout desc : XMLGrammarDescription) : Grammar
        synchronized (fGrammars) {
            int hash = hashCode(desc);
        int index = (hash & 0x7FFFFFFF) % fGrammars.length;
        for (Entry entry = fGrammars[index] ; entry != null ; entry = entry.next) {
            if ((entry.hash == hash) && equals(entry.desc, desc)) {
                return entry.grammar;
            }
        }
        return null;
    }
!!!5358491.java!!!	removeGrammar(inout desc : XMLGrammarDescription) : Grammar
        synchronized (fGrammars) {
            int hash = hashCode(desc);
        int index = (hash & 0x7FFFFFFF) % fGrammars.length;
        for (Entry entry = fGrammars[index], prev = null ; entry != null ; prev = entry, entry = entry.next) {
            if ((entry.hash == hash) && equals(entry.desc, desc)) {
                if (prev != null) {
                        prev.next = entry.next;
            }
            else {
                fGrammars[index] = entry.next;
            }
                Grammar tempGrammar = entry.grammar;
                entry.grammar = null;
                fGrammarCount--;
                return tempGrammar;
            }
        }
        return null;
        }
!!!5358619.java!!!	containsGrammar(inout desc : XMLGrammarDescription) : boolean
        synchronized (fGrammars) {
            int hash = hashCode(desc);
        int index = (hash & 0x7FFFFFFF) % fGrammars.length;
        for (Entry entry = fGrammars[index] ; entry != null ; entry = entry.next) {
            if ((entry.hash == hash) && equals(entry.desc, desc)) {
                return true;
            }
        }
        return false;
    }
!!!5358747.java!!!	lockPool() : void
        fPoolIsLocked = true;
!!!5358875.java!!!	unlockPool() : void
        fPoolIsLocked = false;
!!!5359003.java!!!	clear() : void
        for (int i=0; i<fGrammars.length; i++) {
            if(fGrammars[i] != null) {
                fGrammars[i].clear();
                fGrammars[i] = null;
            }
        }
        fGrammarCount = 0;
!!!5359131.java!!!	equals(inout desc1 : XMLGrammarDescription, inout desc2 : XMLGrammarDescription) : boolean
        return desc1.equals(desc2);
!!!5359259.java!!!	hashCode(inout desc : XMLGrammarDescription) : int
        return desc.hashCode();
