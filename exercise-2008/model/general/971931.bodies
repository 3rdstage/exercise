class X509CertSelector
!!!7661979.java!!!	X509CertSelector()
	// empty
!!!7662107.java!!!	setCertificate(inout cert : X509Certificate) : void
	x509Cert = cert;
!!!7662235.java!!!	setSerialNumber(inout serial : BigInteger) : void
	serialNumber = serial;
!!!7662363.java!!!	setIssuer(inout issuer : X500Principal) : void
	this.issuer = issuer;
!!!7662491.java!!!	setIssuer(in issuerDN : String) : void
	if (issuerDN == null) {
	    issuer = null;
	} else {
	    issuer = new X500Name(issuerDN).asX500Principal();
	}
!!!7662619.java!!!	setIssuer(in issuerDN : byte) : void
	try {
	    issuer = (issuerDN == null ? null : new X500Principal(issuerDN));
	} catch (IllegalArgumentException e) {
	    throw (IOException)new IOException("Invalid name").initCause(e);
	}
!!!7662747.java!!!	setSubject(inout subject : X500Principal) : void
	this.subject = subject;
!!!7662875.java!!!	setSubject(in subjectDN : String) : void
	if (subjectDN == null) {
	    subject = null;
	} else {
	    subject = new X500Name(subjectDN).asX500Principal();
	}
!!!7663003.java!!!	setSubject(in subjectDN : byte) : void
	try {
	    subject = (subjectDN == null ? null : new X500Principal(subjectDN));
	} catch (IllegalArgumentException e) {
	    throw (IOException)new IOException("Invalid name").initCause(e);
	}
!!!7663131.java!!!	setSubjectKeyIdentifier(in subjectKeyID : byte) : void
	if (subjectKeyID == null) {
	    this.subjectKeyID = null;
	} else {
	    this.subjectKeyID = (byte[])subjectKeyID.clone();
	}
!!!7663259.java!!!	setAuthorityKeyIdentifier(in authorityKeyID : byte) : void
	if (authorityKeyID == null) {
	    this.authorityKeyID = null;
	} else {
	    this.authorityKeyID = (byte[])authorityKeyID.clone();
	}
!!!7663387.java!!!	setCertificateValid(inout certValid : Date) : void
	if (certValid == null) {
	    certificateValid = null;
	} else {
	    certificateValid = (Date)certValid.clone();
	}
!!!7663515.java!!!	setPrivateKeyValid(inout privateKeyValid : Date) : void
	if (privateKeyValid == null) {
	    this.privateKeyValid = null;
	} else {
	    this.privateKeyValid = (Date)privateKeyValid.clone();
	}
!!!7663643.java!!!	setSubjectPublicKeyAlgID(in oid : String) : void
	if (oid == null) {
	    subjectPublicKeyAlgID = null;
	} else {
	    subjectPublicKeyAlgID = new ObjectIdentifier(oid);
	}
!!!7663771.java!!!	setSubjectPublicKey(inout key : PublicKey) : void
	if (key == null) {
	    subjectPublicKey = null;
	    subjectPublicKeyBytes = null;
	} else {
	    subjectPublicKey = key;
	    subjectPublicKeyBytes = key.getEncoded();
	}
!!!7663899.java!!!	setSubjectPublicKey(in key : byte) : void
	if (key == null) {
	    subjectPublicKey = null;
	    subjectPublicKeyBytes = null;
	} else {
	    subjectPublicKeyBytes = (byte[])key.clone();
	    subjectPublicKey = X509Key.parse(new DerValue(subjectPublicKeyBytes));
	}
!!!7664027.java!!!	setKeyUsage(inout keyUsage : boolean) : void
	if (keyUsage == null) {
	    this.keyUsage = null;
	} else {
	    this.keyUsage = (boolean[])keyUsage.clone();
	}
!!!7664155.java!!!	setExtendedKeyUsage(inout keyPurposeSet : Set) : void
	if ((keyPurposeSet == null) || keyPurposeSet.isEmpty()) {
	    this.keyPurposeSet = null;
	    keyPurposeOIDSet = null;
	} else {
	    this.keyPurposeSet = 
		Collections.unmodifiableSet(new HashSet<String>(keyPurposeSet));
	    keyPurposeOIDSet = new HashSet<ObjectIdentifier>();
	    for (String s : this.keyPurposeSet) {
		keyPurposeOIDSet.add(new ObjectIdentifier(s));
	    }
	}
!!!7664283.java!!!	setMatchAllSubjectAltNames(inout matchAllNames : boolean) : void
	this.matchAllSubjectAltNames = matchAllNames;
!!!7664411.java!!!	setSubjectAlternativeNames(inout names : Collection) : void
	if (names == null) {
	    subjectAlternativeNames = null;
	    subjectAlternativeGeneralNames = null;
	} else {
	    if (names.isEmpty()) {
		subjectAlternativeNames = null;
		subjectAlternativeGeneralNames = null;
		return;
	    }
	    Set<List<?>> tempNames = cloneAndCheckNames(names);
	    // Ensure that we either set both of these or neither
	    subjectAlternativeGeneralNames = parseNames(tempNames);
	    subjectAlternativeNames = tempNames;
	}
!!!7664539.java!!!	addSubjectAlternativeName(in type : int, in name : String) : void
	addSubjectAlternativeNameInternal(type, name);
!!!7664667.java!!!	addSubjectAlternativeName(in type : int, in name : byte) : void
	// clone because byte arrays are modifiable
	addSubjectAlternativeNameInternal(type, name.clone());
!!!7664795.java!!!	addSubjectAlternativeNameInternal(in type : int, inout name : Object) : void
	// First, ensure that the name parses
	GeneralNameInterface tempName = makeGeneralNameInterface(type, name);
	if (subjectAlternativeNames == null) {
	    subjectAlternativeNames = new HashSet<List<?>>();
	}
	if (subjectAlternativeGeneralNames == null) {
	    subjectAlternativeGeneralNames = new HashSet<GeneralNameInterface>();
	}
	List<Object> list = new ArrayList<Object>(2);
	list.add(Integer.valueOf(type));
	list.add(name);
	subjectAlternativeNames.add(list);
	subjectAlternativeGeneralNames.add(tempName);
!!!7664923.java!!!	parseNames(inout names : Collection) : Set
	Set<GeneralNameInterface> genNames = new HashSet<GeneralNameInterface>();
	Iterator<List<?>> i = names.iterator();
	while (i.hasNext()) {
	    Object o = i.next();
	    if (!(o instanceof List)) {
		throw new IOException("expected List");
	    }
	    List<Object> nameList = (List<Object>)o;
	    if (nameList.size() != 2) {
		throw new IOException("name list size not 2");
	    }
	    o =  nameList.get(0);
	    if (!(o instanceof Integer)) {
		throw new IOException("expected an Integer");
	    }
	    int nameType = ((Integer)o).intValue();
	    o = nameList.get(1);
	    genNames.add(makeGeneralNameInterface(nameType, o));
	}
	return genNames;
!!!7665051.java!!!	equalNames(inout object1 : Collection, inout object2 : Collection) : boolean
	if ((object1 == null) || (object2 == null)) {
	    return object1 == object2;
	}
	return object1.equals(object2);
!!!7665179.java!!!	makeGeneralNameInterface(in type : int, inout name : Object) : GeneralNameInterface
	GeneralNameInterface result;
	if (debug != null) {
	    debug.println("X509CertSelector.makeGeneralNameInterface("
	        + type + ")...");
	}
  
	if (name instanceof String) {
	    if (debug != null) {
		debug.println("X509CertSelector.makeGeneralNameInterface() "
		    + "name is String: " + name);
	    }
	    switch (type) {
	    case NAME_RFC822:
		result = new RFC822Name((String)name);
		break;
	    case NAME_DNS:
		result = new DNSName((String)name);
		break;
	    case NAME_DIRECTORY:
		result = new X500Name((String)name);
		break;
	    case NAME_URI:
		result = new URIName((String)name);
		break;
	    case NAME_IP:
		result = new IPAddressName((String)name);
		break;
	    case NAME_OID:
		result = new OIDName((String)name);
		break;
	    default:
		throw new IOException("unable to parse String names of type "
				      + type);
	    }
	    if (debug != null) {
		debug.println("X509CertSelector.makeGeneralNameInterface() "
		    + "result: " + result.toString());
	    }
	} else if (name instanceof byte[]) {
	    DerValue val = new DerValue((byte[]) name);
	    if (debug != null) {
		debug.println
		    ("X509CertSelector.makeGeneralNameInterface() is byte[]");
	    }
    
	    switch (type) {
	    case NAME_ANY:
		result = new OtherName(val);
		break;
	    case NAME_RFC822:
		result = new RFC822Name(val);
		break;
	    case NAME_DNS:
		result = new DNSName(val);
		break;
	    case NAME_X400:
		result = new X400Address(val);
		break;
	    case NAME_DIRECTORY:
		result = new X500Name(val);
		break;
	    case NAME_EDI:
		result = new EDIPartyName(val);
		break;
	    case NAME_URI:
		result = new URIName(val);
		break;
	    case NAME_IP:
		result = new IPAddressName(val);
		break;
	    case NAME_OID:
		result = new OIDName(val);
		break;
	    default:
		throw new IOException("unable to parse byte array names of "
		    + "type " + type);
	    }
	    if (debug != null) {
		debug.println("X509CertSelector.makeGeneralNameInterface() result: "
		    + result.toString());
	    }
	} else {
	    if (debug != null) {
		debug.println("X509CertSelector.makeGeneralName() input name "
		    + "not String or byte array");
	    }
	    throw new IOException("name not String or byte array");
	}
	return result;
!!!7665307.java!!!	setNameConstraints(in bytes : byte) : void
	if (bytes == null) {
	    ncBytes = null;
	    nc = null;
	} else {
	    ncBytes = (byte[])bytes.clone();
	    nc = new NameConstraintsExtension(FALSE, bytes);
	}
!!!7665435.java!!!	setBasicConstraints(in minMaxPathLen : int) : void
	if (minMaxPathLen < -2) {
	    throw new IllegalArgumentException("basic constraints less than -2");
	}
	basicConstraints = minMaxPathLen;
!!!7665563.java!!!	setPolicy(inout certPolicySet : Set) : void
	if (certPolicySet == null) {
	    policySet = null;
	    policy = null;
	} else {
	    // Snapshot set and parse it
	    Set<String> tempSet = Collections.unmodifiableSet
	    				(new HashSet<String>(certPolicySet));
	    /* Convert to Vector of ObjectIdentifiers */
	    Iterator i = tempSet.iterator();
	    Vector<CertificatePolicyId> polIdVector = new Vector<CertificatePolicyId>();
	    while (i.hasNext()) {
		Object o = i.next();
		if (!(o instanceof String)) {
		    throw new IOException("non String in certPolicySet");
		}
		polIdVector.add(new CertificatePolicyId(new ObjectIdentifier(
		  (String)o)));
	    }
	    // If everything went OK, make the changes
	    policySet = tempSet;
	    policy = new CertificatePolicySet(polIdVector);
	}
!!!7665691.java!!!	setPathToNames(inout names : Collection) : void
	if ((names == null) || names.isEmpty()) {
	    pathToNames = null;
	    pathToGeneralNames = null;
	} else {
	    Set<List<?>> tempNames = cloneAndCheckNames(names);
	    pathToGeneralNames = parseNames(tempNames);
	    // Ensure that we either set both of these or neither
	    pathToNames = tempNames;
	}
!!!7665819.java!!!	setPathToNamesInternal(inout names : Set) : void
	// set names to non-null dummy value
	// this breaks getPathToNames()
	pathToNames = Collections.<List<?>>emptySet();
	pathToGeneralNames = names;
!!!7665947.java!!!	addPathToName(in type : int, in name : String) : void
	addPathToNameInternal(type, name);
!!!7666075.java!!!	addPathToName(in type : int, in name : byte) : void
	// clone because byte arrays are modifiable
	addPathToNameInternal(type, name.clone());
!!!7666203.java!!!	addPathToNameInternal(in type : int, inout name : Object) : void
	// First, ensure that the name parses
	GeneralNameInterface tempName = makeGeneralNameInterface(type, name);
	if (pathToGeneralNames == null) {
	    pathToNames = new HashSet<List<?>>();
	    pathToGeneralNames = new HashSet<GeneralNameInterface>();
	}
	List<Object> list = new ArrayList<Object>(2);
	list.add(Integer.valueOf(type));
	list.add(name);
	pathToNames.add(list);
	pathToGeneralNames.add(tempName);
!!!7666331.java!!!	getCertificate() : X509Certificate
	return x509Cert;
!!!7666459.java!!!	getSerialNumber() : BigInteger
	return serialNumber;
!!!7666587.java!!!	getIssuer() : X500Principal
	return issuer;
!!!7666715.java!!!	getIssuerAsString() : String
	return (issuer == null ? null : issuer.getName());
!!!7666843.java!!!	getIssuerAsBytes() : byte
	return (issuer == null ? null: issuer.getEncoded()); 
!!!7666971.java!!!	getSubject() : X500Principal
	return subject;
!!!7667099.java!!!	getSubjectAsString() : String
	return (subject == null ? null : subject.getName());
!!!7667227.java!!!	getSubjectAsBytes() : byte
	return (subject == null ? null : subject.getEncoded());
!!!7667355.java!!!	getSubjectKeyIdentifier() : byte
	if (subjectKeyID == null) {
	    return null;
	}
	return (byte[])subjectKeyID.clone();
!!!7667483.java!!!	getAuthorityKeyIdentifier() : byte
	if (authorityKeyID == null) {
	  return null;
	}
	return (byte[])authorityKeyID.clone();
!!!7667611.java!!!	getCertificateValid() : Date
	if (certificateValid == null) {
	    return null;
	}
	return (Date)certificateValid.clone();
!!!7667739.java!!!	getPrivateKeyValid() : Date
	if (privateKeyValid == null) {
	    return null;
	}
	return (Date)privateKeyValid.clone();
!!!7667867.java!!!	getSubjectPublicKeyAlgID() : String
	if (subjectPublicKeyAlgID == null) {
	    return null;
	}
	return subjectPublicKeyAlgID.toString();
!!!7667995.java!!!	getSubjectPublicKey() : PublicKey
	return subjectPublicKey;
!!!7668123.java!!!	getKeyUsage() : boolean
	if (keyUsage == null) {
	    return null;
	}
	return (boolean[])keyUsage.clone();
!!!7668251.java!!!	getExtendedKeyUsage() : Set
	return keyPurposeSet;
!!!7668379.java!!!	getMatchAllSubjectAltNames() : boolean
	return matchAllSubjectAltNames;
!!!7668507.java!!!	getSubjectAlternativeNames() : Collection
	if (subjectAlternativeNames == null) {
	    return null;
	}
	return cloneNames(subjectAlternativeNames);
!!!7668635.java!!!	cloneNames(inout names : Collection) : Set
	try {
	    return cloneAndCheckNames(names);
	} catch (IOException e) {
	    throw new RuntimeException("cloneNames encountered IOException: " +
				       e.getMessage());
	}
!!!7668763.java!!!	cloneAndCheckNames(inout names : Collection) : Set
	// Copy the Lists and Collection
	Set<List<?>> namesCopy = new HashSet<List<?>>();
	Iterator<List<?>> i = names.iterator();
	while (i.hasNext()) {
	    Object o = i.next();
	    if (!(o instanceof List)) {
		throw new IOException("expected a List");
	    }
	    namesCopy.add(new ArrayList<Object>((List<?>)o));
	}
    
	// Check the contents of the Lists and clone any byte arrays
	i = namesCopy.iterator();
	while (i.hasNext()) {
	    List<Object> nameList = (List<Object>)i.next();
	    if (nameList.size() != 2) {
		throw new IOException("name list size not 2");
	    }
	    Object o = nameList.get(0);
	    if (!(o instanceof Integer)) {
		throw new IOException("expected an Integer");
	    }
	    int nameType = ((Integer) o).intValue();
	    if ((nameType < 0) || (nameType > 8)) {
		throw new IOException("name type not 0-8");
	    }
	    Object nameObject = nameList.get(1);
	    if (!(nameObject instanceof byte[]) &&
		!(nameObject instanceof String)) {
		if (debug != null) {
		    debug.println("X509CertSelector.cloneAndCheckNames() "
		        + "name not byte array");
		}
		throw new IOException("name not byte array or String");
	    }
	    if (nameObject instanceof byte[]) {
		nameList.set(1, ((byte[]) nameObject).clone());
	    }
	}
	return namesCopy;
!!!7668891.java!!!	getNameConstraints() : byte
	if (ncBytes == null) {
	    return null;
	} else {
	    return (byte[]) ncBytes.clone();
	}
!!!7669019.java!!!	getBasicConstraints() : int
	return basicConstraints;
!!!7669147.java!!!	getPolicy() : Set
	return policySet;
!!!7669275.java!!!	getPathToNames() : Collection
	if (pathToNames == null) {
	    return null;
	}
	return cloneNames(pathToNames);
!!!7669403.java!!!	toString() : String
	StringBuffer sb = new StringBuffer();
	sb.append("X509CertSelector: [\n");
	if (x509Cert != null) {
	    sb.append("  Certificate: " + x509Cert.toString() + "\n");
	}
	if (serialNumber != null) {
	    sb.append("  Serial Number: " + serialNumber.toString() + "\n");
	}
	if (issuer != null) {
	    sb.append("  Issuer: " + getIssuerAsString() + "\n");
	}
	if (subject != null) {
	    sb.append("  Subject: " + getSubjectAsString() + "\n");
	}
	sb.append("  matchAllSubjectAltNames flag: " 
		  + String.valueOf(matchAllSubjectAltNames) + "\n");
	if (subjectAlternativeNames != null) {
	    sb.append("  SubjectAlternativeNames:\n");
	    Iterator i = subjectAlternativeNames.iterator();
	    while (i.hasNext()) {
		List list = (List) i.next();
		sb.append("    type " + list.get(0) +
			  ", name " + list.get(1) + "\n");
	    }
	}
	if (subjectKeyID != null) {
	    HexDumpEncoder enc = new HexDumpEncoder();
	    sb.append("  Subject Key Identifier: " + 
		      enc.encodeBuffer(subjectKeyID) + "\n");
	}
	if (authorityKeyID != null) {
	    HexDumpEncoder enc = new HexDumpEncoder();
	    sb.append("  Authority Key Identifier: " + 
		      enc.encodeBuffer(authorityKeyID) + "\n");
	}
	if (certificateValid != null) {
	    sb.append("  Certificate Valid: " + 
		      certificateValid.toString() + "\n");
	}
	if (privateKeyValid != null) {
	    sb.append("  Private Key Valid: " + 
		      privateKeyValid.toString() + "\n");
	}
	if (subjectPublicKeyAlgID != null) {
	    sb.append("  Subject Public Key AlgID: " + 
		      subjectPublicKeyAlgID.toString() + "\n");
	}
	if (subjectPublicKey != null) {
	    sb.append("  Subject Public Key: " + 
		      subjectPublicKey.toString() + "\n");
	}
	if (keyUsage != null) {
	    sb.append("  Key Usage: " + keyUsageToString(keyUsage) + "\n");
	}
	if (keyPurposeSet != null) {
	    sb.append("  Extended Key Usage: " + 
		      keyPurposeSet.toString() + "\n");
	}
	if (policy != null) {
	    sb.append("  Policy: " + policy.toString() + "\n");
	}
	if (pathToGeneralNames != null) {
	    sb.append("  Path to names:\n");
	    Iterator i = pathToGeneralNames.iterator();
	    while (i.hasNext()) {
		sb.append("    " + i.next() + "\n");
	    }
	}
	sb.append("]");
	return sb.toString();
!!!7669531.java!!!	keyUsageToString(inout k : boolean) : String
	String s = "KeyUsage [\n";
	try {
	    if (k[0]) {
		s += "  DigitalSignature\n";
	    }
	    if (k[1]) {
		s += "  Non_repudiation\n";
	    }
	    if (k[2]) {
		s += "  Key_Encipherment\n";
	    }
	    if (k[3]) {
		s += "  Data_Encipherment\n";
	    }
	    if (k[4]) {
		s += "  Key_Agreement\n";
	    }
	    if (k[5]) {
		s += "  Key_CertSign\n";
	    }
	    if (k[6]) {
		s += "  Crl_Sign\n";
	    }
	    if (k[7]) {
		s += "  Encipher_Only\n";
	    }
	    if (k[8]) {
		s += "  Decipher_Only\n";
	    }
	} catch (ArrayIndexOutOfBoundsException ex) {}
    
	s += "]\n";
    
	return (s);
!!!7669659.java!!!	getExtensionObject(inout cert : X509Certificate, in extId : int) : Extension
	if (cert instanceof X509CertImpl) {
	    X509CertImpl impl = (X509CertImpl)cert;
	    switch (extId) {
	    case PRIVATE_KEY_USAGE_ID:
		return impl.getPrivateKeyUsageExtension();
	    case SUBJECT_ALT_NAME_ID:
		return impl.getSubjectAlternativeNameExtension();
	    case NAME_CONSTRAINTS_ID:
		return impl.getNameConstraintsExtension();
	    case CERT_POLICIES_ID:
		return impl.getCertificatePoliciesExtension();
	    case EXTENDED_KEY_USAGE_ID:
		return impl.getExtendedKeyUsageExtension();
	    default:
		return null;
	    }
	}
	byte[] rawExtVal = cert.getExtensionValue(EXTENSION_OIDS[extId]);
	if (rawExtVal == null) {
	    return null;
	}
	DerInputStream in = new DerInputStream(rawExtVal);
	byte[] encoded = in.getOctetString();
	switch (extId) {
	case PRIVATE_KEY_USAGE_ID:
	    try {
		return new PrivateKeyUsageExtension(FALSE, encoded);
	    } catch (CertificateException ex) {
		throw new IOException(ex.getMessage());
	    }
	case SUBJECT_ALT_NAME_ID:
	    return new SubjectAlternativeNameExtension(FALSE, encoded);
	case NAME_CONSTRAINTS_ID:
	    return new NameConstraintsExtension(FALSE, encoded);
	case CERT_POLICIES_ID:
	    return new CertificatePoliciesExtension(FALSE, encoded);
	case EXTENDED_KEY_USAGE_ID:
	    return new ExtendedKeyUsageExtension(FALSE, encoded);
	default:
	    return null;
	}
!!!7669787.java!!!	match(inout cert : Certificate) : boolean
	if (!(cert instanceof X509Certificate)) {
	    return false;
	}
	X509Certificate xcert = (X509Certificate)cert;
    
	if (debug != null) {
	    debug.println("X509CertSelector.match(SN: " 
		+ (xcert.getSerialNumber()).toString(16) + "\n  Issuer: " 
		+ xcert.getIssuerDN() + "\n  Subject: " + xcert.getSubjectDN() 
		+ ")");
	}
    
	/* match on X509Certificate */
	if (x509Cert != null) {
	    if (!x509Cert.equals(xcert)) {
		if (debug != null) {
		    debug.println("X509CertSelector.match: "
		    	+ "certs don't match");
		}
		return false;
	    }
	}
	
	/* match on serial number */
	if (serialNumber != null) {
	    if (!serialNumber.equals(xcert.getSerialNumber())) {
		if (debug != null) {
		    debug.println("X509CertSelector.match: "
		    	+ "serial numbers don't match");
		}
		return false;
	    }
	}
    
	/* match on issuer name */
	if (issuer != null) {
	    if (!issuer.equals(xcert.getIssuerX500Principal())) {
		if (debug != null) {
		    debug.println("X509CertSelector.match: "
		    	+ "issuer DNs don't match");
		}
		return false;
	    }
	}
    
	/* match on subject name */
	if (subject != null) {
	    if (!subject.equals(xcert.getSubjectX500Principal())) {
		if (debug != null) {
		    debug.println("X509CertSelector.match: "
		    	+ "subject DNs don't match");
		}
		return false;
	    }
	}
    
	/* match on certificate validity range */
	if (certificateValid != null) {
	    try {
		xcert.checkValidity(certificateValid);
	    } catch (CertificateException e) {
		if (debug != null) {
		    debug.println("X509CertSelector.match: "
		    	+ "certificate not within validity period");
		}
		return false;
	    }
	}
    
	/* match on subject public key */
	if (subjectPublicKeyBytes != null) {
	    byte[] certKey = xcert.getPublicKey().getEncoded();
	    if (!Arrays.equals(subjectPublicKeyBytes, certKey)) {
		if (debug != null) {
		    debug.println("X509CertSelector.match: "
		    	+ "subject public keys don't match");
		}
		return false;
	    }
	}
	
	boolean result = matchBasicConstraints(xcert)
		      && matchKeyUsage(xcert)
		      && matchExtendedKeyUsage(xcert)
		      && matchSubjectKeyID(xcert)
		      && matchAuthorityKeyID(xcert)
		      && matchPrivateKeyValid(xcert)
		      && matchSubjectPublicKeyAlgID(xcert)
		      && matchPolicy(xcert)
		      && matchSubjectAlternativeNames(xcert)
		      && matchPathToNames(xcert)
		      && matchNameConstraints(xcert);
    
	if (result && (debug != null)) {
	    debug.println("X509CertSelector.match returning: true");
	}
	return result;
!!!7669915.java!!!	matchSubjectKeyID(inout xcert : X509Certificate) : boolean
	if (subjectKeyID == null) {
	    return true;
	}
	try {
	    byte[] extVal = xcert.getExtensionValue("2.5.29.14");
	    if (extVal == null) {
		if (debug != null) {
		    debug.println("X509CertSelector.match: "
		    	+ "no subject key ID extension");
		}
		return false;
	    }
	    DerInputStream in = new DerInputStream(extVal);
	    byte[] certSubjectKeyID = in.getOctetString();
	    if (certSubjectKeyID == null || 
	            !Arrays.equals(subjectKeyID, certSubjectKeyID)) {
		if (debug != null) {
		    debug.println("X509CertSelector.match: "
		    	+ "subject key IDs don't match");
		}
		return false;
	    }
	} catch (IOException ex) {
	    if (debug != null) {
		debug.println("X509CertSelector.match: "
		    + "exception in subject key ID check");
	    }
	    return false;
	}
	return true;
!!!7670043.java!!!	matchAuthorityKeyID(inout xcert : X509Certificate) : boolean
	if (authorityKeyID == null) {
	    return true;
	}
	try {
	    byte[] extVal = xcert.getExtensionValue("2.5.29.35");
	    if (extVal == null) {
		if (debug != null) {
		    debug.println("X509CertSelector.match: "
		    	+ "no authority key ID extension");
		}
		return false;
	    }
	    DerInputStream in = new DerInputStream(extVal);
	    byte[] certAuthKeyID = in.getOctetString();
	    if (certAuthKeyID == null || 
	    	    !Arrays.equals(authorityKeyID, certAuthKeyID)) {
		if (debug != null) {
		    debug.println("X509CertSelector.match: "
		    	+ "authority key IDs don't match");
		}
		return false;
	    }
	} catch (IOException ex) {
	    if (debug != null) {
		debug.println("X509CertSelector.match: "
		    + "exception in authority key ID check");
	    }
	    return false;
	}
	return true;
!!!7670171.java!!!	matchPrivateKeyValid(inout xcert : X509Certificate) : boolean
	if (privateKeyValid == null) {
	    return true;
	}
	PrivateKeyUsageExtension ext = null;
	try {
	    ext = (PrivateKeyUsageExtension) 
		getExtensionObject(xcert, PRIVATE_KEY_USAGE_ID);
	    if (ext != null) {
	        ext.valid(privateKeyValid);
	    }
	} catch (CertificateExpiredException e1) {
	    if (debug != null) {
	        String time = "n/a";
		try {
		    Date notAfter = 
		    	(Date)ext.get(PrivateKeyUsageExtension.NOT_AFTER);
		    time = notAfter.toString();
		} catch (CertificateException ex) {
		    // not able to retrieve notAfter value
		}
		debug.println("X509CertSelector.match: private key usage not "
		    + "within validity date; ext.NOT_After: " 
		    + time + "; X509CertSelector: " 
		    + this.toString());
		e1.printStackTrace();
	    }
	    return false;
	} catch (CertificateNotYetValidException e2) {
	    if (debug != null) {
		String time = "n/a";
		try {
		    Date notBefore = (Date) 
			ext.get(PrivateKeyUsageExtension.NOT_BEFORE);
		    time = notBefore.toString();
		} catch (CertificateException ex) {
		    // not able to retrieve notBefore value
		}
		debug.println("X509CertSelector.match: private key usage not "
		    + "within validity date; ext.NOT_BEFORE: " 
		    + time + "; X509CertSelector: " 
		    + this.toString());
		e2.printStackTrace();
	    }
	    return false;
	} catch (CertificateException e3) {
	    if (debug != null) {
	        debug.println("X509CertSelector.match: CertificateException "
		    + "in private key usage check; X509CertSelector: " 
		    + this.toString());
	        e3.printStackTrace();
	    }
	    return false;
	} catch (IOException e4) {
	    if (debug != null) {
	        debug.println("X509CertSelector.match: IOException in "
		    + "private key usage check; X509CertSelector: " 
		    + this.toString());
	        e4.printStackTrace();
	    }
	    return false;
	}
	return true;
!!!7670299.java!!!	matchSubjectPublicKeyAlgID(inout xcert : X509Certificate) : boolean
	if (subjectPublicKeyAlgID == null) {
	    return true;
	}
	try {
	    byte[] encodedKey = xcert.getPublicKey().getEncoded();
	    DerValue val = new DerValue(encodedKey);
	    if (val.tag != DerValue.tag_Sequence) {
		throw new IOException("invalid key format");
	    }
  
	    AlgorithmId algID = AlgorithmId.parse(val.data.getDerValue());
	    if (debug != null) {
		debug.println("X509CertSelector.match: subjectPublicKeyAlgID = " 
		    + subjectPublicKeyAlgID + ", xcert subjectPublicKeyAlgID = " 
		    + algID.getOID()); 
	    }
	    if (!subjectPublicKeyAlgID.equals(algID.getOID())) {
		if (debug != null) {
		    debug.println("X509CertSelector.match: "
		    	+ "subject public key alg IDs don't match");
		}
		return false;
	    }
	} catch (IOException e5) {
	    if (debug != null) {
		debug.println("X509CertSelector.match: IOException in subject "
		    + "public key algorithm OID check");
	    }
	    return false;
	}
	return true;
!!!7670427.java!!!	matchKeyUsage(inout xcert : X509Certificate) : boolean
	if (keyUsage == null) {
	    return true;
	}
	boolean[] certKeyUsage = xcert.getKeyUsage();
	if (certKeyUsage != null) {
	    for (int keyBit = 0; keyBit < keyUsage.length; keyBit++) {
		if (keyUsage[keyBit] &&
		    ((keyBit >= certKeyUsage.length) || !certKeyUsage[keyBit])) {
		    if (debug != null) {
			debug.println("X509CertSelector.match: "
			    + "key usage bits don't match");
		    }
		    return false;
		}
	    }
	}
	return true;
!!!7670555.java!!!	matchExtendedKeyUsage(inout xcert : X509Certificate) : boolean
	if ((keyPurposeSet == null) || keyPurposeSet.isEmpty()) {
	    return true;
	}
	try {
	    ExtendedKeyUsageExtension ext = 
		(ExtendedKeyUsageExtension)getExtensionObject(xcert, 
						EXTENDED_KEY_USAGE_ID);
	    if (ext != null) {
		Vector<ObjectIdentifier> certKeyPurposeVector = 
		    (Vector<ObjectIdentifier>)ext.get(ExtendedKeyUsageExtension.USAGES);
		if (!certKeyPurposeVector.contains(ANY_EXTENDED_KEY_USAGE) 
		        && !certKeyPurposeVector.containsAll(keyPurposeOIDSet)) {
		    if (debug != null) {
			debug.println("X509CertSelector.match: cert failed "
			    + "extendedKeyUsage criterion");
		    }
		    return false;
		}
	    }
	} catch (IOException ex) {
	    if (debug != null) {
		debug.println("X509CertSelector.match: "
		    + "IOException in extended key usage check");
	    }
	    return false;
	}
	return true;
!!!7670683.java!!!	matchSubjectAlternativeNames(inout xcert : X509Certificate) : boolean
	if ((subjectAlternativeNames == null) || subjectAlternativeNames.isEmpty()) {
	    return true;
	}
	try {
	    SubjectAlternativeNameExtension sanExt = 
		(SubjectAlternativeNameExtension) getExtensionObject(xcert, 
						      SUBJECT_ALT_NAME_ID); 
	    if (sanExt == null) {
		if (debug != null) {
		  debug.println("X509CertSelector.match: "
		      + "no subject alternative name extension");
		}
		return false;
	    }
	    GeneralNames certNames = (GeneralNames) 
		sanExt.get(SubjectAlternativeNameExtension.SUBJECT_NAME);
	    Iterator i = subjectAlternativeGeneralNames.iterator();
	    while (i.hasNext()) {
		GeneralNameInterface matchName = (GeneralNameInterface) i.next();
		boolean found = false;
		for (Iterator t = certNames.iterator(); t.hasNext() && !found; ) {
		    GeneralNameInterface certName =
			((GeneralName)t.next()).getName();
		    found = certName.equals(matchName);
		}
		if (!found && (matchAllSubjectAltNames || !i.hasNext())) {
		    if (debug != null) {
		      debug.println("X509CertSelector.match: subject alternative "
			  + "name " + matchName + " not found"); 
		    }
		    return false;
		} else if (found && !matchAllSubjectAltNames) {
		    break;
		}
	    }
	} catch (IOException ex) {
	    if (debug != null)
		debug.println("X509CertSelector.match: IOException in subject "
		    + "alternative name check");
	    return false;
	}
	return true;
!!!7670811.java!!!	matchNameConstraints(inout xcert : X509Certificate) : boolean
	if (nc == null) {
	    return true;
	}
	try {
	    if (!nc.verify(xcert)) {
		if (debug != null) {
		    debug.println("X509CertSelector.match: "
		        + "name constraints not satisfied");
		}
		return false;
	    }
	} catch (IOException e) { 
	    if (debug != null) {
		debug.println("X509CertSelector.match: "
		    + "IOException in name constraints check");
	    }
	    return false; 
	}
	return true;
!!!7670939.java!!!	matchPolicy(inout xcert : X509Certificate) : boolean
	if (policy == null) {
	    return true;
	}
	try {
	    CertificatePoliciesExtension ext = (CertificatePoliciesExtension)
	    	getExtensionObject(xcert, CERT_POLICIES_ID);
	    if (ext == null) {
		if (debug != null) {
		  debug.println("X509CertSelector.match: "
		      + "no certificate policy extension");
		}
		return false;
	    }
	    List<PolicyInformation> policies = (List<PolicyInformation>)ext.get(CertificatePoliciesExtension.POLICIES);
	    /*
	     * Convert the Vector of PolicyInformation to a Vector 
	     * of CertificatePolicyIds for easier comparison.
	     */
	    List<CertificatePolicyId> policyIDs = new ArrayList<CertificatePolicyId>(policies.size());
	    for (PolicyInformation info : policies) {
		policyIDs.add(info.getPolicyIdentifier());
	    }
	    if (policy != null) {
		boolean foundOne = false;
		/*
		 * if the user passes in an empty policy Set, then
		 * we just want to make sure that the candidate certificate
		 * has some policy OID in its CertPoliciesExtension
		 */
		if (policy.getCertPolicyIds().isEmpty()) {
		    if (policyIDs.isEmpty()) {
			if (debug != null) {
			    debug.println("X509CertSelector.match: "
			        + "cert failed policyAny criterion");
			}
			return false;
		    }
		} else {
		    for (CertificatePolicyId id : policy.getCertPolicyIds()) {
			if (policyIDs.contains(id)) {
			    foundOne = true;
			    break;
			}
		    }
		    if (!foundOne) {
			if (debug != null) {
			    debug.println("X509CertSelector.match: "
			        + "cert failed policyAny criterion");
			}
			return false;
		    }
		}
	    }
	} catch (IOException ex) {
	    if (debug != null) {
	        debug.println("X509CertSelector.match: "
		    + "IOException in certificate policy ID check");
	    }
	    return false;
	}
	return true;
!!!7671067.java!!!	matchPathToNames(inout xcert : X509Certificate) : boolean
	if (pathToGeneralNames == null) {
	    return true;
	}
	try {
	    NameConstraintsExtension ext = (NameConstraintsExtension)
	    	getExtensionObject(xcert, NAME_CONSTRAINTS_ID);
	    if (ext == null) {
		return true;
	    }
	    if ((debug != null) && debug.isOn("certpath")) {
		debug.println("X509CertSelector.match pathToNames:\n");
		Iterator i = pathToGeneralNames.iterator();
		while (i.hasNext()) {
		    debug.println("    " + i.next() + "\n");
		}
	    }
    
	    GeneralSubtrees permitted = (GeneralSubtrees)
		ext.get(NameConstraintsExtension.PERMITTED_SUBTREES);
	    GeneralSubtrees excluded = (GeneralSubtrees)
		ext.get(NameConstraintsExtension.EXCLUDED_SUBTREES);
	    if (excluded != null) {
		if (matchExcluded(excluded) == false) {
		    return false;
		}
	    }
	    if (permitted != null) {
		if (matchPermitted(permitted) == false) {
		    return false;
		}
	    }
	} catch (IOException ex) {
	    if (debug != null) {
		debug.println("X509CertSelector.match: "
		    + "IOException in name constraints check");
	    }
	    return false;
	}
	return true;
!!!7671195.java!!!	matchExcluded(inout excluded : GeneralSubtrees) : boolean
	/* 
	 * Enumerate through excluded and compare each entry
	 * to all pathToNames. If any pathToName is within any of the
	 * subtrees listed in excluded, return false.
	 */
	for (Iterator t = excluded.iterator(); t.hasNext(); ) {
	    GeneralSubtree tree = (GeneralSubtree)t.next();
	    GeneralNameInterface excludedName = tree.getName().getName();
	    Iterator i = pathToGeneralNames.iterator();
	    while (i.hasNext()) {
		GeneralNameInterface pathToName = (GeneralNameInterface) i.next();
		if (excludedName.getType() == pathToName.getType()) {
		    switch (pathToName.constrains(excludedName)) {
		    case GeneralNameInterface.NAME_WIDENS:
		    case GeneralNameInterface.NAME_MATCH:
			if (debug != null) {
			    debug.println("X509CertSelector.match: name constraints "
				+ "inhibit path to specified name");
			    debug.println("X509CertSelector.match: excluded name: " +
				pathToName);
			}
			return false;
		    default:
		    }
		}
	    }
	}
	return true;
!!!7671323.java!!!	matchPermitted(inout permitted : GeneralSubtrees) : boolean
	/*
	 * Enumerate through pathToNames, checking that each pathToName
	 * is in at least one of the subtrees listed in permitted.
	 * If not, return false. However, if no subtrees of a given type
	 * are listed, all names of that type are permitted.
	 */
	Iterator i = pathToGeneralNames.iterator();
	while (i.hasNext()) {
	    GeneralNameInterface pathToName = (GeneralNameInterface)i.next();
	    Iterator t = permitted.iterator();
	    boolean permittedNameFound = false;
	    boolean nameTypeFound = false;
	    String names = "";
	    while (t.hasNext() && !permittedNameFound) {
		GeneralSubtree tree = (GeneralSubtree)t.next();
		GeneralNameInterface permittedName = tree.getName().getName();
		if (permittedName.getType() == pathToName.getType()) {
		    nameTypeFound = true;
		    names = names + "  " + permittedName;
		    switch (pathToName.constrains(permittedName)) {
		    case GeneralNameInterface.NAME_WIDENS:
		    case GeneralNameInterface.NAME_MATCH:
			permittedNameFound = true;
			break;
		    default:
		    }
		}
	    }
	    if (!permittedNameFound && nameTypeFound) {
		if (debug != null)
		  debug.println("X509CertSelector.match: " + 
			    "name constraints inhibit path to specified name; " +
			    "permitted names of type " + pathToName.getType() +
			    ": " + names);
		return false;
	    }
	}
	return true;
!!!7671451.java!!!	matchBasicConstraints(inout xcert : X509Certificate) : boolean
	if (basicConstraints == -1) {
	    return true;
	}
	int maxPathLen = xcert.getBasicConstraints();
	if (basicConstraints == -2) {
	    if (maxPathLen != -1) {
		if (debug != null) {
		    debug.println("X509CertSelector.match: not an EE cert");
		}
		return false;
	    }
	} else {
	    if (maxPathLen < basicConstraints) {
		if (debug != null) {
		    debug.println("X509CertSelector.match: maxPathLen too small (" 
			+ maxPathLen + " < " + basicConstraints + ")"); 
		}
		return false;
	    }
	}
	return true;
!!!7671579.java!!!	cloneSet(inout set : Set) : Set
	if (set instanceof HashSet) {
	    Object clone = ((HashSet<?>)set).clone();
	    return (Set<?>)clone;
	} else {
	    return new HashSet<Object>(set);
	}
!!!7671707.java!!!	clone() : Object
	try {
	    X509CertSelector copy = (X509CertSelector)super.clone();
	    // Must clone these because addPathToName et al. modify them
	    if (subjectAlternativeNames != null) {
		copy.subjectAlternativeNames = 
			(Set<List<?>>)cloneSet(subjectAlternativeNames);
		copy.subjectAlternativeGeneralNames = 
			(Set<GeneralNameInterface>)cloneSet
				(subjectAlternativeGeneralNames);
	    }
	    if (pathToGeneralNames != null) {
		copy.pathToNames = 
			(Set<List<?>>)cloneSet(pathToNames);
		copy.pathToGeneralNames = 
			(Set<GeneralNameInterface>)cloneSet
				(pathToGeneralNames);
	    }
	    return copy;
	} catch (CloneNotSupportedException e) {
	    /* Cannot happen */
	    throw new InternalError(e.toString());
	}
