format 66
"spi" // src::java::nio::channels::spi
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/nio/channels/spi"
  java_package "java.nio.channels.spi"
  classview 175515 "spi"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 945819 "AbstractInterruptibleChannel"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Base implementation class for interruptible channels.

<p> This class encapsulates the low-level machinery required to implement
the asynchronous closing and interruption of channels.  A concrete channel
class must invoke the {@link #begin begin} and {@link #end end} methods
before and after, respectively, invoking an I/O operation that might block
indefinitely.  In order to ensure that the {@link #end end} method is always
invoked, these methods should be used within a
<tt>try</tt>&nbsp;...&nbsp;<tt>finally</tt> block: <a name=\"be\">

<blockquote><pre>
boolean completed = false;
try {
    begin();
    completed = ...;    // Perform blocking I/O operation
    return ...;         // Return result
} finally {
    end(completed);
}</pre></blockquote>

<p> The <tt>completed</tt> argument to the {@link #end end} method tells
whether or not the I/O operation actually completed, that is, whether it had
any effect that would be visible to the invoker.  In the case of an
operation that reads bytes, for example, this argument should be
<tt>true</tt> if, and only if, some bytes were actually transferred into the
invoker's target buffer.

<p> A concrete channel class must also implement the {@link
#implCloseChannel implCloseChannel} method in such a way that if it is
invoked while another thread is blocked in a native I/O operation upon the
channel then that operation will immediately return, either by throwing an
exception or by returning normally.  If a thread is interrupted or the
channel upon which it is blocked is asynchronously closed then the channel's
{@link #end end} method will throw the appropriate exception.

<p> This class performs the synchronization required to implement the {@link
java.nio.channels.Channel} specification.  Implementations of the {@link
#implCloseChannel implCloseChannel} method need not synchronize against
other threads that might be attempting to close the channel.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.16, 06/03/22
@since 1.4"
      classrelation 1840539 // <realization>
	relation 1840539 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1840539 // <realization>
	  b parent class_ref 918171 // Channel
      end

      classrelation 1840795 // <realization>
	relation 1840795 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1840795 // <realization>
	  b parent class_ref 945947 // InterruptibleChannel
      end

      attribute 2815771 "closeLock"
	private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2815899 "open"
	volatile private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7475611 "AbstractInterruptibleChannel"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class."
      end

      operation 7475739 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this channel.

<p> If the channel has already been closed then this method returns
immediately.  Otherwise it marks the channel as closed and then invokes
the {@link #implCloseChannel implCloseChannel} method in order to
complete the close operation.  </p>

@throws  IOException
         If an I/O error occurs"
      end

      operation 7475867 "implCloseChannel"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this channel.

<p> This method is invoked by the {@link #close close} method in order
to perform the actual work of closing the channel.  This method is only
invoked if the channel has not yet been closed, and it is never invoked
more than once.

<p> An implementation of this method must arrange for any other thread
that is blocked in an I/O operation upon this channel to return
immediately, either by throwing an exception or by returning normally.
</p>

@throws  IOException
         If an I/O error occurs while closing the channel"
      end

      operation 7475995 "isOpen"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2816027 "interruptor"
	private explicit_type "Interruptible"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " -- Interruption machinery --"
      end

      attribute 2816155 "interrupted"
	volatile private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7476123 "begin"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the beginning of an I/O operation that might block indefinitely.

<p> This method should be invoked in tandem with the {@link #end end}
method, using a <tt>try</tt>&nbsp;...&nbsp;<tt>finally</tt> block as
shown <a href=\"#be\">above</a>, in order to implement asynchronous
closing and interruption for this channel.  </p>"
      end

      operation 7476251 "end"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "completed" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 944795 // AsynchronousCloseException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the end of an I/O operation that might block indefinitely.

<p> This method should be invoked in tandem with the {@link #begin
begin} method, using a <tt>try</tt>&nbsp;...&nbsp;<tt>finally</tt> block
as shown <a href=\"#be\">above</a>, in order to implement asynchronous
closing and interruption for this channel.  </p>

@param  completed
        <tt>true</tt> if, and only if, the I/O operation completed
        successfully, that is, had some effect that would be visible to
        the operation's invoker

@throws  AsynchronousCloseException
         If the channel was asynchronously closed

@throws  ClosedByInterruptException
         If the thread blocked in the I/O operation was interrupted"
      end

      operation 7476379 "blockedOn"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "intr" explicit_type "Interruptible"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- sun.misc.SharedSecrets --"
      end
    end

    class 946587 "AbstractSelectableChannel"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Base implementation class for selectable channels.

<p> This class defines methods that handle the mechanics of channel
registration, deregistration, and closing.  It maintains the current
blocking mode of this channel as well as its current set of selection keys.
It performs all of the synchronization required to implement the {@link
java.nio.channels.SelectableChannel} specification.  Implementations of the
abstract protected methods defined in this class need not synchronize
against other threads that might be engaged in the same operations.  </p>


@author Mark Reinhold
@author Mike McCloskey
@author JSR-51 Expert Group
@version 1.25, 03/12/19
@since 1.4"
      classrelation 1842331 // <generalisation>
	relation 1842331 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1842331 // <generalisation>
	  b parent class_ref 236699 // SelectableChannel
      end

      classrelation 1842459 // provider (<unidirectional association>)
	relation 1842459 --->
	  a role_name "provider" const_relation private
	    comment " The provider that created this channel
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1842459 // provider (<unidirectional association>)
	  b parent class_ref 946715 // SelectorProvider
      end

      classrelation 1842587 // keys (<unidirectional association>)
	relation 1842587 --->
	  a role_name "keys" multiplicity "[]" init_value "=  null" private
	    comment " Keys that have been created by registering this channel with selectors.
 They are saved because if this channel is closed the keys must be
 deregistered.  Protected by keyLock.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1842587 // keys (<unidirectional association>)
	  b parent class_ref 236827 // SelectionKey
      end

      attribute 2817307 "keyCount"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2817435 "keyLock"
	const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Lock for key set and count"
      end

      attribute 2817563 "regLock"
	const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Lock for registration and configureBlocking operations"
      end

      attribute 2817691 "blocking"
	package explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Blocking mode, protected by regLock"
      end

      operation 7479579 "AbstractSelectableChannel"
	protected explicit_return_type ""
	nparams 1
	  param inout name "provider" type class_ref 946715 // SelectorProvider
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class."
      end

      operation 7479707 "provider"
	public return_type class_ref 946715 // SelectorProvider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider that created this channel.

@return  The provider that created this channel"
      end

      operation 7479835 "addKey"
	private explicit_return_type "void"
	nparams 1
	  param inout name "k" type class_ref 236827 // SelectionKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Utility methods for the key set --"
      end

      operation 7479963 "findKey"
	private return_type class_ref 236827 // SelectionKey
	nparams 1
	  param inout name "sel" type class_ref 303387 // Selector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7480091 "removeKey"
	package explicit_return_type "void"
	nparams 1
	  param inout name "k" type class_ref 236827 // SelectionKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7480219 "haveValidKeys"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7480347 "isRegistered"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Registration --"
      end

      operation 7480475 "keyFor"
	public return_type class_ref 236827 // SelectionKey
	nparams 1
	  param inout name "sel" type class_ref 303387 // Selector
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7480603 "register"
	public return_type class_ref 236827 // SelectionKey
	nparams 3
	  param inout name "sel" type class_ref 303387 // Selector
	  param in name "ops" explicit_type "int"
	  param inout name "att" explicit_type "Object"
	nexceptions 1
	  exception class_ref 944923 // ClosedChannelException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers this channel with the given selector, returning a selection key.

<p>  This method first verifies that this channel is open and that the
given initial interest set is valid.

<p> If this channel is already registered with the given selector then
the selection key representing that registration is returned after
setting its interest set to the given value.

<p> Otherwise this channel has not yet been registered with the given
selector, so the {@link AbstractSelector#register register} method of
the selector is invoked while holding the appropriate locks.  The
resulting key is added to this channel's key set before being returned.
</p>"
      end

      operation 7480731 "implCloseChannel"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Closing --

Closes this channel.

<p> This method, which is specified in the {@link
AbstractInterruptibleChannel} class and is invoked by the {@link
java.nio.channels.Channel#close close} method, in turn invokes the
{@link #implCloseSelectableChannel implCloseSelectableChannel} method in
order to perform the actual work of closing this channel.  It then
cancels all of this channel's keys.  </p>"
      end

      operation 7480859 "implCloseSelectableChannel"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this selectable channel.

<p> This method is invoked by the {@link java.nio.channels.Channel#close
close} method in order to perform the actual work of closing the
channel.  This method is only invoked if the channel has not yet been
closed, and it is never invoked more than once.

<p> An implementation of this method must arrange for any other thread
that is blocked in an I/O operation upon this channel to return
immediately, either by throwing an exception or by returning normally.
</p>"
      end

      operation 7480987 "isBlocking"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Blocking --"
      end

      operation 7481115 "blockingLock"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7481243 "configureBlocking"
	public return_type class_ref 236699 // SelectableChannel
	nparams 1
	  param inout name "block" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adjusts this channel's blocking mode.

<p> If the given blocking mode is different from the current blocking
mode then this method invokes the {@link #implConfigureBlocking
implConfigureBlocking} method, while holding the appropriate locks, in
order to change the mode.  </p>"
      end

      operation 7481371 "implConfigureBlocking"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "block" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adjusts this channel's blocking mode.

<p> This method is invoked by the {@link #configureBlocking
configureBlocking} method in order to perform the actual work of
changing the blocking mode.  This method is only invoked if the new mode
is different from the current mode.  </p>

@throws IOException
        If an I/O error occurs"
      end
    end

    class 946715 "SelectorProvider"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Service-provider class for selectors and selectable channels.

<p> A selector provider is a concrete subclass of this class that has a
zero-argument constructor and implements the abstract methods specified
below.  A given invocation of the Java virtual machine maintains a single
system-wide default provider instance, which is returned by the {@link
#provider provider} method.  The first invocation of that method will locate
the default provider as specified below.

<p> The system-wide default provider is used by the static <tt>open</tt>
methods of the {@link java.nio.channels.DatagramChannel#open
DatagramChannel}, {@link java.nio.channels.Pipe#open Pipe}, {@link
java.nio.channels.Selector#open Selector}, {@link
java.nio.channels.ServerSocketChannel#open ServerSocketChannel}, and {@link
java.nio.channels.SocketChannel#open SocketChannel} classes.  It is also
used by the {@link java.lang.System#inheritedChannel System.inheritedChannel()}
method. A program may make use of a provider other than the default provider
by instantiating that provider and then directly invoking the <tt>open</tt>
methods defined in this class.

<p> All of the methods in this class are safe for use by multiple concurrent
threads.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.26, 04/06/15
@since 1.4"
      attribute 2819227 "lock"
	class_attribute const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1847963 // provider (<unidirectional association>)
	relation 1847963 --->
	  a role_name "provider" init_value "=  null" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1847963 // provider (<unidirectional association>)
	  b parent class_ref 946715 // SelectorProvider
      end

      operation 7498139 "SelectorProvider"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class.  </p>

@throws  SecurityException
         If a security manager has been installed and it denies
         {@link RuntimePermission}<tt>(\"selectorProvider\")</tt>"
      end

      operation 7498267 "loadProviderFromProperty"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7498395 "loadProviderAsService"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7498523 "provider"
	class_operation public return_type class_ref 946715 // SelectorProvider
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the system-wide default selector provider for this invocation of
the Java virtual machine.

<p> The first invocation of this method locates the default provider
object as follows: </p>

<ol>

  <li><p> If the system property
  <tt>java.nio.channels.spi.SelectorProvider</tt> is defined then it is
  taken to be the fully-qualified name of a concrete provider class.
  The class is loaded and instantiated; if this process fails then an
  unspecified error is thrown.  </p></li>

  <li><p> If a provider class has been installed in a jar file that is
  visible to the system class loader, and that jar file contains a
  provider-configuration file named
  <tt>java.nio.channels.spi.SelectorProvider</tt> in the resource
  directory <tt>META-INF/services</tt>, then the first class name
  specified in that file is taken.  The class is loaded and
  instantiated; if this process fails then an unspecified error is
  thrown.  </p></li>

  <li><p> Finally, if no provider has been specified by any of the above
  means then the system-default provider class is instantiated and the
  result is returned.  </p></li>

</ol>

<p> Subsequent invocations of this method return the provider that was
returned by the first invocation.  </p>

@return  The system-wide default selector provider"
      end

      operation 7498651 "openDatagramChannel"
	abstract public return_type class_ref 927643 // DatagramChannel
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a datagram channel.  </p>

@return  The new channel"
      end

      operation 7498779 "openPipe"
	abstract public return_type class_ref 948507 // Pipe
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a pipe.  </p>

@return  The new pipe"
      end

      operation 7498907 "openSelector"
	abstract public return_type class_ref 949275 // AbstractSelector
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a selector.  </p>

@return  The new selector"
      end

      operation 7499035 "openServerSocketChannel"
	abstract public return_type class_ref 237979 // ServerSocketChannel
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a server-socket channel.  </p>

@return  The new channel"
      end

      operation 7499163 "openSocketChannel"
	abstract public return_type class_ref 238747 // SocketChannel
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a socket channel. </p>

@return  The new channel"
      end

      operation 7499291 "inheritedChannel"
	public return_type class_ref 918171 // Channel
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the channel inherited from the entity that created this
Java virtual machine.

<p> On many operating systems a process, such as a Java virtual
machine, can be started in a manner that allows the process to
inherit a channel from the entity that created the process. The
manner in which this is done is system dependent, as are the
possible entities to which the channel may be connected. For example,
on UNIX systems, the Internet services daemon (<i>inetd</i>) is used to 
start programs to service requests when a request arrives on an 
associated network port. In this example, the process that is started, 
inherits a channel representing a network socket. 

<p> In cases where the inherited channel represents a network socket
then the {@link java.nio.channels.Channel Channel} type returned 
by this method is determined as follows:
    
<ul>

 <li><p> If the inherited channel represents a stream-oriented connected
 socket then a {@link java.nio.channels.SocketChannel SocketChannel} is
 returned. The socket channel is, at least initially, in blocking
 mode, bound to a socket address, and connected to a peer.
 </p></li>

 <li><p> If the inherited channel represents a stream-oriented listening
 socket then a {@link java.nio.channels.ServerSocketChannel 
 ServerSocketChannel} is returned. The server-socket channel is, at 
 least initially, in blocking mode, and bound to a socket address.
 </p></li>     

 <li><p> If the inherited channel is a datagram-oriented socket 
 then a {@link java.nio.channels.DatagramChannel DatagramChannel} is    
 returned. The datagram channel is, at least initially, in blocking
 mode, and bound to a socket address. 
 </p></li>

</ul>

<p> In addition to the network-oriented channels described, this method
may return other kinds of channels in the future.

<p> The first invocation of this method creates the channel that is 
returned. Subsequent invocations of this method return the same 
channel. </p>

@return  The inherited channel, if any, otherwise <tt>null</tt>.

@throws  IOException
		If an I/O error occurs

@throws	SecurityException
	 	If a security manager has been installed and it denies
		{@link RuntimePermission}<tt>(\"inheritedChannel\")</tt>

@since 1.5"
      end
    end

    class 949147 "AbstractSelectionKey"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Base implementation class for selection keys.

<p> This class tracks the validity of the key and implements cancellation.

@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.12, 06/07/15
@since 1.4"
      classrelation 1847323 // <generalisation>
	relation 1847323 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1847323 // <generalisation>
	  b parent class_ref 236827 // SelectionKey
      end

      operation 7496219 "AbstractSelectionKey"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class.  </p>"
      end

      attribute 2818971 "valid"
	volatile private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7496347 "isValid"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7496475 "invalidate"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7496603 "cancel"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels this key.

<p> If this key has not yet been cancelled then it is added to its
selector's cancelled-key set while synchronized on that set.  </p>"
      end
    end

    class 949275 "AbstractSelector"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Base implementation class for selectors.

<p> This class encapsulates the low-level machinery required to implement
the interruption of selection operations.  A concrete selector class must
invoke the {@link #begin begin} and {@link #end end} methods before and
after, respectively, invoking an I/O operation that might block
indefinitely.  In order to ensure that the {@link #end end} method is always
invoked, these methods should be used within a
<tt>try</tt>&nbsp;...&nbsp;<tt>finally</tt> block: <a name=\"be\">

<blockquote><pre>
try {
    begin();
    // Perform blocking I/O operation here
    ...
} finally {
    end();
}</pre></blockquote>

<p> This class also defines methods for maintaining a selector's
cancelled-key set and for removing a key from its channel's key set, and
declares the abstract {@link #register register} method that is invoked by a
selectable channel's {@link AbstractSelectableChannel#register register}
method in order to perform the actual work of registering a channel.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.19, 04/05/05
@since 1.4"
      classrelation 1847451 // <generalisation>
	relation 1847451 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1847451 // <generalisation>
	  b parent class_ref 303387 // Selector
      end

      classrelation 1847579 // selectorOpen (<unidirectional association>)
	relation 1847579 --->
	  a role_name "selectorOpen" init_value "=  new AtomicBoolean(true)" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1847579 // selectorOpen (<unidirectional association>)
	  b parent class_ref 205083 // AtomicBoolean
      end

      classrelation 1847707 // provider (<unidirectional association>)
	relation 1847707 --->
	  a role_name "provider" const_relation private
	    comment " The provider that created this selector
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1847707 // provider (<unidirectional association>)
	  b parent class_ref 946715 // SelectorProvider
      end

      operation 7496731 "AbstractSelector"
	protected explicit_return_type ""
	nparams 1
	  param inout name "provider" type class_ref 946715 // SelectorProvider
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class.  </p>"
      end

      classrelation 1847835 // cancelledKeys (<unidirectional association>)
	relation 1847835 --->
	  a role_name "cancelledKeys" init_value "=  new HashSet()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1847835 // cancelledKeys (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      operation 7496859 "cancel"
	package explicit_return_type "void"
	nparams 1
	  param inout name "k" type class_ref 236827 // SelectionKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7496987 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this selector.

<p> If the selector has already been closed then this method returns
immediately.  Otherwise it marks the selector as closed and then invokes
the {@link #implCloseSelector implCloseSelector} method in order to
complete the close operation.  </p>

@throws  IOException
         If an I/O error occurs"
      end

      operation 7497115 "implCloseSelector"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this selector.

<p> This method is invoked by the {@link #close close} method in order
to perform the actual work of closing the selector.  This method is only
invoked if the selector has not yet been closed, and it is never invoked
more than once.

<p> An implementation of this method must arrange for any other thread
that is blocked in a selection operation upon this selector to return
immediately as if by invoking the {@link
java.nio.channels.Selector#wakeup wakeup} method. </p>

@throws  IOException
         If an I/O error occurs while closing the selector"
      end

      operation 7497243 "isOpen"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7497371 "provider"
	public return_type class_ref 946715 // SelectorProvider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider that created this channel.

@return  The provider that created this channel"
      end

      operation 7497499 "cancelledKeys"
	protected return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SelectionKey> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this selector's cancelled-key set.

<p> This set should only be used while synchronized upon it.  </p>

@return  The cancelled-key set"
      end

      operation 7497627 "register"
	abstract protected return_type class_ref 236827 // SelectionKey
	nparams 3
	  param inout name "ch" type class_ref 946587 // AbstractSelectableChannel
	  param in name "ops" explicit_type "int"
	  param inout name "att" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the given channel with this selector.

<p> This method is invoked by a channel's {@link
AbstractSelectableChannel#register register} method in order to perform
the actual work of registering the channel with this selector.  </p>

@param  ch
        The channel to be registered

@param  ops
        The initial interest set, which must be valid

@param  att
        The initial attachment for the resulting key

@return  A new key representing the registration of the given channel
         with this selector"
      end

      operation 7497755 "deregister"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 949147 // AbstractSelectionKey
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the given key from its channel's key set.

<p> This method must be invoked by the selector for each channel that it
deregisters.  </p>

@param  key
        The selection key to be removed"
      end

      attribute 2819099 "interruptor"
	private explicit_type "Interruptible"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " -- Interruption machinery --"
      end

      operation 7497883 "begin"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the beginning of an I/O operation that might block indefinitely.

<p> This method should be invoked in tandem with the {@link #end end}
method, using a <tt>try</tt>&nbsp;...&nbsp;<tt>finally</tt> block as
shown <a href=\"#be\">above</a>, in order to implement interruption for
this selector.

<p> Invoking this method arranges for the selector's {@link
Selector#wakeup wakeup} method to be invoked if a thread's {@link
Thread#interrupt interrupt} method is invoked while the thread is
blocked in an I/O operation upon the selector.  </p>"
      end

      operation 7498011 "end"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the end of an I/O operation that might block indefinitely.

<p> This method should be invoked in tandem with the {@link #end end}
method, using a <tt>try</tt>&nbsp;...&nbsp;<tt>finally</tt> block as
shown <a href=\"#be\">above</a>, in order to implement interruption for
this selector.  </p>"
      end
    end
  end

  deploymentview 167451 "spi"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 716827 "AbstractInterruptibleChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.lang.reflect.Method;
import java.lang.reflect.InvocationTargetException;
import java.nio.channels.*;
import java.security.AccessController;
import java.security.PrivilegedAction;
import sun.nio.ch.Interruptible;
${definition}"
      associated_classes
	class_ref 945819 // AbstractInterruptibleChannel
      end
      comment "Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


@(#)AbstractInterruptibleChannel.java	1.16 06/03/22"
    end

    artifact 717595 "AbstractSelectableChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.channels.*;
${definition}"
      associated_classes
	class_ref 946587 // AbstractSelectableChannel
      end
      comment "@(#)AbstractSelectableChannel.java	1.25 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 720411 "AbstractSelectionKey"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.channels.*;
${definition}"
      associated_classes
	class_ref 949147 // AbstractSelectionKey
      end
      comment "@(#)AbstractSelectionKey.java	1.12 06/07/15

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 720539 "AbstractSelector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.util.HashSet;
import java.util.Set;
import sun.nio.ch.Interruptible;
import java.util.concurrent.atomic.AtomicBoolean;
${definition}"
      associated_classes
	class_ref 949275 // AbstractSelector
      end
      comment "@(#)AbstractSelector.java	1.19 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 720667 "SelectorProvider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.FileDescriptor;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.channels.*;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Iterator;
import sun.misc.Service;
import sun.misc.ServiceConfigurationError;
import sun.security.action.GetPropertyAction;
${definition}"
      associated_classes
	class_ref 946715 // SelectorProvider
      end
      comment "@(#)SelectorProvider.java	1.26 04/06/15

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
