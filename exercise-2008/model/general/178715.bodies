class EncapsInputStream
!!!471323.java!!!	EncapsInputStream(inout orb : ORB, in buf : byte, in size : int, inout littleEndian : boolean, inout version : GIOPVersion)
        super(orb, ByteBuffer.wrap(buf), size, littleEndian,
	      version, Message.CDR_ENC_VERSION,
	      BufferManagerFactory.newBufferManagerRead(
				      BufferManagerFactory.GROW,
				      Message.CDR_ENC_VERSION,
				      (ORB)orb));

	wrapper = ORBUtilSystemException.get( (ORB)orb, 
	    CORBALogDomains.RPC_ENCODING ) ;

        performORBVersionSpecificInit();
!!!471451.java!!!	EncapsInputStream(inout orb : ORB, inout byteBuffer : ByteBuffer, in size : int, inout littleEndian : boolean, inout version : GIOPVersion)
        super(orb, byteBuffer, size, littleEndian, 
              version, Message.CDR_ENC_VERSION,
              BufferManagerFactory.newBufferManagerRead(
				      BufferManagerFactory.GROW,
				      Message.CDR_ENC_VERSION,
				      (com.sun.corba.se.spi.orb.ORB)orb));

        performORBVersionSpecificInit();
!!!471579.java!!!	EncapsInputStream(inout orb : ORB, in data : byte, in size : int)
        this(orb, data, size, GIOPVersion.V1_2);
!!!471707.java!!!	EncapsInputStream(inout eis : EncapsInputStream)
        super(eis);

	wrapper = ORBUtilSystemException.get( (ORB)(eis.orb()), 
	    CORBALogDomains.RPC_ENCODING ) ;

        performORBVersionSpecificInit();
!!!471835.java!!!	EncapsInputStream(inout orb : ORB, in data : byte, in size : int, inout version : GIOPVersion)
        this(orb, data, size, false, version);
!!!471963.java!!!	EncapsInputStream(inout orb : ORB, in data : byte, in size : int, inout version : GIOPVersion, inout codeBase : CodeBase)
        super(orb, 
              ByteBuffer.wrap(data), 
              size, 
              false, 
              version, Message.CDR_ENC_VERSION,
              BufferManagerFactory.newBufferManagerRead(
				      BufferManagerFactory.GROW,
				      Message.CDR_ENC_VERSION,
				      (ORB)orb));

        this.codeBase = codeBase;

        performORBVersionSpecificInit();
!!!472091.java!!!	dup() : CDRInputStream
        return new EncapsInputStream(this);
!!!472219.java!!!	createCharBTCConverter() : BTCConverter
        return CodeSetConversion.impl().getBTCConverter(OSFCodeSetRegistry.ISO_8859_1);
!!!472347.java!!!	createWCharBTCConverter() : BTCConverter
        // Wide characters don't exist in GIOP 1.0
        if (getGIOPVersion().equals(GIOPVersion.V1_0))
	    throw wrapper.wcharDataInGiop10( CompletionStatus.COMPLETED_MAYBE);

        // In GIOP 1.1, we shouldn't have byte order markers.  Take the order
        // of the stream if we don't see them.
        if (getGIOPVersion().equals(GIOPVersion.V1_1))
            return CodeSetConversion.impl().getBTCConverter(OSFCodeSetRegistry.UTF_16,
                                                            isLittleEndian());

        // Assume anything else adheres to GIOP 1.2 requirements.
        //
        // Our UTF_16 converter will work with byte order markers, and if
        // they aren't present, it will use the provided endianness.
        //
        // With no byte order marker, it's big endian in GIOP 1.2.  
        // formal 00-11-03 15.3.16.
        return CodeSetConversion.impl().getBTCConverter(OSFCodeSetRegistry.UTF_16,
                                                        false);
!!!472475.java!!!	getCodeBase() : CodeBase
        return codeBase;
