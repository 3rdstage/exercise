class Observable
!!!326299.java!!!	Observable()
	obs = new Vector();
!!!326427.java!!!	addObserver(inout o : Observer) : void
        if (o == null)
            throw new NullPointerException();
	if (!obs.contains(o)) {
	    obs.addElement(o);
	}
!!!326555.java!!!	deleteObserver(inout o : Observer) : void
        obs.removeElement(o);
!!!326683.java!!!	notifyObservers() : void
	notifyObservers(null);
!!!326811.java!!!	notifyObservers(inout arg : Object) : void
	/*
         * a temporary array buffer, used as a snapshot of the state of
         * current Observers.
         */
        Object[] arrLocal;

	synchronized (this) {
	    /* We don't want the Observer doing callbacks into
	     * arbitrary code while holding its own Monitor.
	     * The code where we extract each Observable from 
	     * the Vector and store the state of the Observer
	     * needs synchronization, but notifying observers
	     * does not (should not).  The worst result of any 
	     * potential race-condition here is that:
	     * 1) a newly-added Observer will miss a
	     *   notification in progress
	     * 2) a recently unregistered Observer will be
	     *   wrongly notified when it doesn't care
	     */
	    if (!changed)
                return;
            arrLocal = obs.toArray();
            clearChanged();
        }

        for (int i = arrLocal.length-1; i>=0; i--)
            ((Observer)arrLocal[i]).update(this, arg);
!!!326939.java!!!	deleteObservers() : void
	obs.removeAllElements();
!!!327067.java!!!	setChanged() : void
	changed = true;
!!!327195.java!!!	clearChanged() : void
	changed = false;
!!!327323.java!!!	hasChanged() : boolean
	return changed;
!!!327451.java!!!	countObservers() : int
	return obs.size();
