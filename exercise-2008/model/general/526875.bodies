class ProtectionDomain
!!!7605147.java!!!	ProtectionDomain(inout codesource : CodeSource, inout permissions : PermissionCollection)
	this.codesource = codesource;
	if (permissions != null) {
	    this.permissions = permissions;
	    this.permissions.setReadOnly();
	}
	this.classloader = null;
	this.principals = new Principal[0];
	staticPermissions = true;
!!!7605275.java!!!	ProtectionDomain(inout codesource : CodeSource, inout permissions : PermissionCollection, inout classloader : ClassLoader, inout principals : Principal)
	this.codesource = codesource;
	if (permissions != null) {
	    this.permissions = permissions;
	    this.permissions.setReadOnly();
	}
	this.classloader = classloader;
	this.principals = (principals != null ?
			   (Principal[])principals.clone():
			   new Principal[0]);
	staticPermissions = false;
!!!7605403.java!!!	getCodeSource() : CodeSource
	return this.codesource;
!!!7605531.java!!!	getClassLoader() : ClassLoader
	return this.classloader;
!!!7605659.java!!!	getPrincipals() : Principal
	return (Principal[])this.principals.clone();
!!!7605787.java!!!	getPermissions() : PermissionCollection
	return permissions;
!!!7605915.java!!!	implies(inout permission : Permission) : boolean
	if (!staticPermissions && 
	    Policy.getPolicyNoCheck().implies(this, permission))
	    return true;
	if (permissions != null) 
	    return permissions.implies(permission);

	return false;
!!!7606043.java!!!	toString() : String
	String pals = "<no principals>";
	if (principals != null && principals.length > 0) {
	    StringBuilder palBuf = new StringBuilder("(principals ");
	    
	    for (int i = 0; i < principals.length; i++) {
		palBuf.append(principals[i].getClass().getName() +
			    " \"" + principals[i].getName() +
			    "\"");
		if (i < principals.length-1)
		    palBuf.append(",\n");
		else
		    palBuf.append(")\n");
	    }
	    pals = palBuf.toString();
	}

	// Check if policy is set; we don't want to load
	// the policy prematurely here	
	PermissionCollection pc = Policy.isSet() && seeAllp() ?
				      mergePermissions():
	                              getPermissions();

 	return "ProtectionDomain "+
 	    " "+codesource+"\n"+
 	    " "+classloader+"\n"+
 	    " "+pals+"\n"+
	    " "+pc+"\n"; 
!!!7606171.java!!!	seeAllp() : boolean
	SecurityManager sm = System.getSecurityManager();

	if (sm == null) {
	    return true;
	} else {
	    if (debug != null) {
		if (sm.getClass().getClassLoader() == null &&
		    Policy.getPolicyNoCheck().getClass().getClassLoader()
								== null) {
		    return true;
		}
	    } else {
		try {
		    sm.checkPermission(SecurityConstants.GET_POLICY_PERMISSION);
		    return true;
		} catch (SecurityException se) {
		    // fall thru and return false
		}
	    }
	}

	return false;
!!!7606299.java!!!	mergePermissions() : PermissionCollection
	if (staticPermissions)
	    return permissions;
	
        PermissionCollection perms = (PermissionCollection)
            java.security.AccessController.doPrivileged
            (new java.security.PrivilegedAction() {
                    public Object run() {
                        Policy p = Policy.getPolicyNoCheck();
                        return p.getPermissions(ProtectionDomain.this);
                    }
                });
	
	Permissions mergedPerms = new Permissions();
	int swag = 32;
	int vcap = 8;       
	Enumeration e;
	List pdVector = new ArrayList(vcap);
	List plVector = new ArrayList(swag);
            
	//
	// Build a vector of domain permissions for subsequent merge
	if (permissions != null) {
	    synchronized (permissions) {
		e = permissions.elements();
		while (e.hasMoreElements()) {
		    Permission p = (Permission)e.nextElement();
		    pdVector.add(p);
		}
	    }
	}

	//
	// Build a vector of Policy permissions for subsequent merge
	if (perms != null) {
	    synchronized (perms) {
		e = perms.elements();
		while (e.hasMoreElements()) {
		    plVector.add(e.nextElement());
		    vcap++;
		}
	    }
	}

	if (perms != null && permissions != null) {
	    //
	    // Weed out the duplicates from the policy. Unless a refresh
	    // has occured since the pd was consed this should result in
	    // an empty vector.
	    synchronized (permissions) {
		e = permissions.elements();   // domain vs policy
		while (e.hasMoreElements()) {
		    Permission pdp = (Permission)e.nextElement();
		    Class pdpClass = pdp.getClass();
		    String pdpActions = pdp.getActions();
		    String pdpName = pdp.getName();
		    for (int i = 0; i < plVector.size(); i++) {
			Permission pp = (Permission) plVector.get(i);
			if (pdpClass.isInstance(pp)) {
			    // The equals() method on some permissions
			    // have some side effects so this manual 
			    // comparison is sufficient.
			    if (pdpName.equals(pp.getName()) &&
				pdpActions.equals(pp.getActions())) {
				plVector.remove(i);
				break;
			    } 
			}
		    }
		}
	    }
	}
                
	if (perms !=null) {
	    // the order of adding to merged perms and permissions
	    // needs to preserve the bugfix 4301064
                
	    for (int i = plVector.size()-1; i >= 0; i--) {
		mergedPerms.add((Permission)plVector.get(i));
	    }
	}
	if (permissions != null) {
	    for (int i = pdVector.size()-1; i >= 0; i--) {
		mergedPerms.add((Permission)pdVector.get(i));
	    }
	}

	return mergedPerms;
