class DirectFloatBufferRU
!!!7411611.java!!!	DirectFloatBufferRU(inout db : DirectBuffer, in mark : int, in pos : int, in lim : int, in cap : int, in off : int)









	super(db, mark, pos, lim, cap, off);

!!!7411739.java!!!	slice() : FloatBuffer

	int pos = this.position();
	int lim = this.limit();
	assert (pos <= lim);
	int rem = (pos <= lim ? lim - pos : 0);
	int off = (pos << 2);
        assert (off >= 0);
	return new DirectFloatBufferRU(this, -1, 0, rem, rem, off);
!!!7411867.java!!!	duplicate() : FloatBuffer

	return new DirectFloatBufferRU(this,
					      this.markValue(),
					      this.position(),
					      this.limit(),
					      this.capacity(),
					      0);
!!!7411995.java!!!	asReadOnlyBuffer() : FloatBuffer









	return duplicate();

!!!7412123.java!!!	put(in x : float) : FloatBuffer





	throw new ReadOnlyBufferException();

!!!7412251.java!!!	put(in i : int, in x : float) : FloatBuffer





	throw new ReadOnlyBufferException();

!!!7412379.java!!!	put(inout src : FloatBuffer) : FloatBuffer





































	throw new ReadOnlyBufferException();

!!!7412507.java!!!	put(in src : float, in offset : int, in length : int) : FloatBuffer























	throw new ReadOnlyBufferException();

!!!7412635.java!!!	compact() : FloatBuffer












	throw new ReadOnlyBufferException();

!!!7412763.java!!!	isDirect() : boolean

	return true;
!!!7412891.java!!!	isReadOnly() : boolean

	return true;
!!!7413019.java!!!	order() : ByteOrder






	return ((ByteOrder.nativeOrder() != ByteOrder.BIG_ENDIAN)
		? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);

