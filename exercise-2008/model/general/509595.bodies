class CUtility
!!!3143195.java!!!	enter(in descent : String, in lexeme : char, in token : int) : void
	System.out.println("Entering " + descent 
			   + " [lexeme: " + lexeme 
			   + "] [token: " + token + "]");
!!!3143323.java!!!	leave(in descent : String, in lexeme : char, in token : int) : void
	System.out.println("Leaving " + descent 
			   + " [lexeme:" + lexeme 
			   + "] [token:" + token + "]");
!!!3143451.java!!!	_assert(inout expr : boolean) : void
	if (DEBUG && false == expr)
	  {
	    System.out.println("Assertion Failed");
	    throw new Error("Assertion Failed.");
	  }
!!!3143579.java!!!	doubleSize(in oldBuffer : char) : char
	char newBuffer[] = new char[2 * oldBuffer.length];
	int elem;

	for (elem = 0; elem < oldBuffer.length; ++elem)
	  {
	    newBuffer[elem] = oldBuffer[elem];
	  }

	return newBuffer;
!!!3143707.java!!!	doubleSize(in oldBuffer : byte) : byte
	byte newBuffer[] = new byte[2 * oldBuffer.length];
	int elem;

	for (elem = 0; elem < oldBuffer.length; ++elem)
	  {
	    newBuffer[elem] = oldBuffer[elem];
	  }

	return newBuffer;
!!!3143835.java!!!	hex2bin(in c : char) : char
	if ('0' <= c && '9' >= c)
	  {
	    return (char) (c - '0');
	  }
	else if ('a' <= c && 'f' >= c)
	  {
	    return (char) (c - 'a' + 10);
	  }	    
	else if ('A' <= c && 'F' >= c)
	  {
	    return (char) (c - 'A' + 10);
	  }
	
	CError.impos("Bad hexidecimal digit" + c);
	return 0;
!!!3143963.java!!!	ishexdigit(in c : char) : boolean
	if (('0' <= c && '9' >= c)
	    || ('a' <= c && 'f' >= c)
	    || ('A' <= c && 'F' >= c))
	  {
	    return true;
	  }

	return false;
!!!3144091.java!!!	oct2bin(in c : char) : char
	if ('0' <= c && '7' >= c)
	  {
	    return (char) (c - '0');
	  }
	
	CError.impos("Bad octal digit " + c);
	return 0;
!!!3144219.java!!!	isoctdigit(in c : char) : boolean
	if ('0' <= c && '7' >= c)
	  {
	    return true;
	  }

	return false;
!!!3144347.java!!!	isspace(in c : char) : boolean
	if ('\b' == c 
	    || '\t' == c
	    || '\n' == c
	    || '\f' == c
	    || '\r' == c
	    || ' ' == c)
	  {
	    return true;
	  }
	
	return false;
!!!3144475.java!!!	isnewline(in c : char) : boolean
	if ('\n' == c
	    || '\r' == c)
	    {
	    return true;
	  }
	
	return false;
!!!3144603.java!!!	bytencmp(in a : byte, in a_first : int, in b : byte, in b_first : int, in n : int) : int
	int elem;

	for (elem = 0; elem < n; ++elem)
	  {
	    /*System.out.print((char) a[a_first + elem]);
	    System.out.print((char) b[b_first + elem]);*/
			     
	    if ('\0' == a[a_first + elem] && '\0' == b[b_first + elem])
	      {
		/*System.out.println("return 0");*/
		return 0;
	      }
	    if (a[a_first + elem] < b[b_first + elem])
	      {
		/*System.out.println("return 1");*/
		return 1;
	      }
	    else if (a[a_first + elem] > b[b_first + elem])
	      {
		/*System.out.println("return -1");*/
		return -1;
	      }
	  }

	/*System.out.println("return 0");*/
	return 0;
!!!3144731.java!!!	charncmp(in a : char, in a_first : int, in b : char, in b_first : int, in n : int) : int
	int elem;

	for (elem = 0; elem < n; ++elem)
	  {
	    if ('\0' == a[a_first + elem] && '\0' == b[b_first + elem])
	      {
		return 0;
	      }
	    if (a[a_first + elem] < b[b_first + elem])
	      {
		return 1;
	      }
	    else if (a[a_first + elem] > b[b_first + elem])
	      {
		return -1;
	      }
	  }

	return 0;
