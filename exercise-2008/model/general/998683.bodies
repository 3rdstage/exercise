class ScheduledFutureTask
!!!7958043.java!!!	ScheduledFutureTask(inout r : Runnable, inout result : V, in ns : long)
            super(r, result);
            this.time = ns;
            this.period = 0;
            this.sequenceNumber = sequencer.getAndIncrement();
!!!7958171.java!!!	ScheduledFutureTask(inout r : Runnable, inout result : V, in ns : long, in period : long)
            super(r, result);
            this.time = ns;
            this.period = period;
            this.sequenceNumber = sequencer.getAndIncrement();
!!!7958299.java!!!	ScheduledFutureTask(inout callable : Callable, in ns : long)
            super(callable);
            this.time = ns;
            this.period = 0;
            this.sequenceNumber = sequencer.getAndIncrement();
!!!7958427.java!!!	getDelay(inout unit : TimeUnit) : long
            long d = unit.convert(time - now(), TimeUnit.NANOSECONDS);
            return d;
!!!7958555.java!!!	compareTo(inout other : Delayed) : int
            if (other == this) // compare zero ONLY if same object
                return 0;
            ScheduledFutureTask<?> x = (ScheduledFutureTask<?>)other;
            long diff = time - x.time;
            if (diff < 0)
                return -1;
            else if (diff > 0)
                return 1;
            else if (sequenceNumber < x.sequenceNumber)
                return -1;
            else
                return 1;
!!!7958683.java!!!	isPeriodic() : boolean
            return period != 0;
!!!7958811.java!!!	runPeriodic() : void
            boolean ok = ScheduledFutureTask.super.runAndReset();
            boolean down = isShutdown();
            // Reschedule if not cancelled and not shutdown or policy allows
            if (ok && (!down ||
                       (getContinueExistingPeriodicTasksAfterShutdownPolicy() && 
                        !isTerminating()))) {
                long p = period;
                if (p > 0)
                    time += p;
                else
                    time = now() - p;
                ScheduledThreadPoolExecutor.super.getQueue().add(this);
            }
            // This might have been the final executed delayed
            // task.  Wake up threads to check.
            else if (down) 
                interruptIdleWorkers();
!!!7958939.java!!!	run() : void
            if (isPeriodic())
                runPeriodic();
            else 
                ScheduledFutureTask.super.run();
