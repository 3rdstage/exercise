class HTMLReader
!!!9425051.java!!!	HTMLReader(in offset : int)
	    this(offset, 0, 0, null);
!!!9425179.java!!!	HTMLReader(in offset : int, in popDepth : int, in pushDepth : int, inout insertTag : Tag)
	    this(offset, popDepth, pushDepth, insertTag, true, false, true);
!!!9425307.java!!!	HTMLReader(in offset : int, in popDepth : int, in pushDepth : int, inout insertTag : Tag, inout insertInsertTag : boolean, inout insertAfterImplied : boolean, inout wantsTrailingNewline : boolean)
	    emptyDocument = (getLength() == 0);
	    isStyleCSS = "text/css".equals(getDefaultStyleSheetType());
	    this.offset = offset;
	    threshold = HTMLDocument.this.getTokenThreshold();
	    tagMap = new Hashtable(57);
	    TagAction na = new TagAction();
	    TagAction ba = new BlockAction();
	    TagAction pa = new ParagraphAction();
	    TagAction ca = new CharacterAction();
	    TagAction sa = new SpecialAction();
	    TagAction fa = new FormAction();
	    TagAction ha = new HiddenAction();
	    TagAction conv = new ConvertAction();

	    // register handlers for the well known tags
	    tagMap.put(HTML.Tag.A, new AnchorAction());
	    tagMap.put(HTML.Tag.ADDRESS, ca);
	    tagMap.put(HTML.Tag.APPLET, ha);
	    tagMap.put(HTML.Tag.AREA, new AreaAction());
	    tagMap.put(HTML.Tag.B, conv);
	    tagMap.put(HTML.Tag.BASE, new BaseAction());
	    tagMap.put(HTML.Tag.BASEFONT, ca);
	    tagMap.put(HTML.Tag.BIG, ca);
	    tagMap.put(HTML.Tag.BLOCKQUOTE, ba);
	    tagMap.put(HTML.Tag.BODY, ba);
	    tagMap.put(HTML.Tag.BR, sa);
	    tagMap.put(HTML.Tag.CAPTION, ba);
	    tagMap.put(HTML.Tag.CENTER, ba);
	    tagMap.put(HTML.Tag.CITE, ca);
	    tagMap.put(HTML.Tag.CODE, ca);
	    tagMap.put(HTML.Tag.DD, ba);
	    tagMap.put(HTML.Tag.DFN, ca);
	    tagMap.put(HTML.Tag.DIR, ba);
	    tagMap.put(HTML.Tag.DIV, ba);
	    tagMap.put(HTML.Tag.DL, ba);
	    tagMap.put(HTML.Tag.DT, pa);
	    tagMap.put(HTML.Tag.EM, ca);
	    tagMap.put(HTML.Tag.FONT, conv);
	    tagMap.put(HTML.Tag.FORM, new FormTagAction());
	    tagMap.put(HTML.Tag.FRAME, sa);
	    tagMap.put(HTML.Tag.FRAMESET, ba);
	    tagMap.put(HTML.Tag.H1, pa);
	    tagMap.put(HTML.Tag.H2, pa);
	    tagMap.put(HTML.Tag.H3, pa);
	    tagMap.put(HTML.Tag.H4, pa);
	    tagMap.put(HTML.Tag.H5, pa);
	    tagMap.put(HTML.Tag.H6, pa);
	    tagMap.put(HTML.Tag.HEAD, new HeadAction());
	    tagMap.put(HTML.Tag.HR, sa);
	    tagMap.put(HTML.Tag.HTML, ba);
	    tagMap.put(HTML.Tag.I, conv);
	    tagMap.put(HTML.Tag.IMG, sa);
	    tagMap.put(HTML.Tag.INPUT, fa);
	    tagMap.put(HTML.Tag.ISINDEX, new IsindexAction());
	    tagMap.put(HTML.Tag.KBD, ca);
	    tagMap.put(HTML.Tag.LI, ba);
	    tagMap.put(HTML.Tag.LINK, new LinkAction());
	    tagMap.put(HTML.Tag.MAP, new MapAction());
	    tagMap.put(HTML.Tag.MENU, ba);
	    tagMap.put(HTML.Tag.META, new MetaAction());
	    tagMap.put(HTML.Tag.NOBR, ca);
	    tagMap.put(HTML.Tag.NOFRAMES, ba);
	    tagMap.put(HTML.Tag.OBJECT, sa);
	    tagMap.put(HTML.Tag.OL, ba);
	    tagMap.put(HTML.Tag.OPTION, fa);
	    tagMap.put(HTML.Tag.P, pa);
	    tagMap.put(HTML.Tag.PARAM, new ObjectAction());
	    tagMap.put(HTML.Tag.PRE, new PreAction());
	    tagMap.put(HTML.Tag.SAMP, ca);
	    tagMap.put(HTML.Tag.SCRIPT, ha);
	    tagMap.put(HTML.Tag.SELECT, fa);
	    tagMap.put(HTML.Tag.SMALL, ca);
    	    tagMap.put(HTML.Tag.SPAN, ca);
	    tagMap.put(HTML.Tag.STRIKE, conv);	    
	    tagMap.put(HTML.Tag.S, ca);
	    tagMap.put(HTML.Tag.STRONG, ca);
	    tagMap.put(HTML.Tag.STYLE, new StyleAction());
	    tagMap.put(HTML.Tag.SUB, conv);
	    tagMap.put(HTML.Tag.SUP, conv);
	    tagMap.put(HTML.Tag.TABLE, ba);
	    tagMap.put(HTML.Tag.TD, ba);
	    tagMap.put(HTML.Tag.TEXTAREA, fa);
	    tagMap.put(HTML.Tag.TH, ba);
	    tagMap.put(HTML.Tag.TITLE, new TitleAction());
	    tagMap.put(HTML.Tag.TR, ba);
	    tagMap.put(HTML.Tag.TT, ca);
	    tagMap.put(HTML.Tag.U, conv);
	    tagMap.put(HTML.Tag.UL, ba);
	    tagMap.put(HTML.Tag.VAR, ca);

	    if (insertTag != null) {
		this.insertTag = insertTag;
		this.popDepth = popDepth;
		this.pushDepth = pushDepth;
		this.insertInsertTag = insertInsertTag;
		foundInsertTag = false;
	    }
	    else {
		foundInsertTag = true;
	    }
	    if (insertAfterImplied) {
		this.popDepth = popDepth;
		this.pushDepth = pushDepth;
		this.insertAfterImplied = true;
		foundInsertTag = false;
		midInsert = false;
		this.insertInsertTag = true;
		this.wantsTrailingNewline = wantsTrailingNewline;
	    }
	    else {
		midInsert = (!emptyDocument && insertTag == null);
		if (midInsert) {
		    generateEndsSpecsForMidInsert();
		}
	    }
!!!9425435.java!!!	generateEndsSpecsForMidInsert() : void
	    int           count = heightToElementWithName(HTML.Tag.BODY,
						   Math.max(0, offset - 1));
	    boolean       joinNext = false;

	    if (count == -1 && offset > 0) {
		count = heightToElementWithName(HTML.Tag.BODY, offset);
		if (count != -1) {
		    // Previous isn't in body, but current is. Have to
		    // do some end specs, followed by join next.
		    count = depthTo(offset - 1) - 1;
		    joinNext = true;
		}
	    }
	    if (count == -1) {
		throw new RuntimeException("Must insert new content into body element-");
	    }
	    if (count != -1) {
		// Insert a newline, if necessary.
		try {
		    if (!joinNext && offset > 0 &&
			!getText(offset - 1, 1).equals("\n")) {
			SimpleAttributeSet newAttrs = new SimpleAttributeSet();
			newAttrs.addAttribute(StyleConstants.NameAttribute,
					      HTML.Tag.CONTENT);
			ElementSpec spec = new ElementSpec(newAttrs,
				    ElementSpec.ContentType, NEWLINE, 0, 1);
			parseBuffer.addElement(spec);
		    }
		    // Should never throw, but will catch anyway.
		} catch (BadLocationException ble) {}
		while (count-- > 0) {
		    parseBuffer.addElement(new ElementSpec
					   (null, ElementSpec.EndTagType));
		}
		if (joinNext) {
		    ElementSpec spec = new ElementSpec(null, ElementSpec.
						       StartTagType);

		    spec.setDirection(ElementSpec.JoinNextDirection);
		    parseBuffer.addElement(spec);
		}
	    }
	    // We should probably throw an exception if (count == -1)
	    // Or look for the body and reset the offset.
!!!9425563.java!!!	depthTo(in offset : int) : int
	    Element       e = getDefaultRootElement();
	    int           count = 0;

	    while (!e.isLeaf()) {
		count++;
		e = e.getElement(e.getElementIndex(offset));
	    }
	    return count;
!!!9425691.java!!!	heightToElementWithName(inout name : Object, in offset : int) : int
	    Element       e = getCharacterElement(offset).getParentElement();
	    int           count = 0;

	    while (e != null && e.getAttributes().getAttribute
		   (StyleConstants.NameAttribute) != name) {
		count++;
		e = e.getParentElement();
	    }
	    return (e == null) ? -1 : count;
!!!9425819.java!!!	adjustEndElement() : void
	    int length = getLength();
	    if (length == 0) {
		return;
	    }
	    obtainLock();
	    try {
		Element[] pPath = getPathTo(length - 1);
                int pLength = pPath.length;
		if (pLength > 1 && pPath[1].getAttributes().getAttribute
		         (StyleConstants.NameAttribute) == HTML.Tag.BODY &&
		         pPath[1].getEndOffset() == length) {
		    String lastText = getText(length - 1, 1);
		    DefaultDocumentEvent event = null;
		    Element[] added;
		    Element[] removed;
		    int index;
		    // Remove the fake second body.
		    added = new Element[0];
		    removed = new Element[1];
		    index = pPath[0].getElementIndex(length);
		    removed[0] = pPath[0].getElement(index);
		    ((BranchElement)pPath[0]).replace(index, 1, added);
		    ElementEdit firstEdit = new ElementEdit(pPath[0], index,
							    removed, added);

                    // Insert a new element to represent the end that the
                    // second body was representing.
                    SimpleAttributeSet sas = new SimpleAttributeSet();
                    sas.addAttribute(StyleConstants.NameAttribute,
                                         HTML.Tag.CONTENT);
		    sas.addAttribute(IMPLIED_CR, Boolean.TRUE);
                    added = new Element[1];
                    added[0] = createLeafElement(pPath[pLength - 1],
                                                     sas, length, length + 1);
                    index = pPath[pLength - 1].getElementCount();
                    ((BranchElement)pPath[pLength - 1]).replace(index, 0,
                                                                added);
                    event = new DefaultDocumentEvent(length, 1,
					    DocumentEvent.EventType.CHANGE);
                    event.addEdit(new ElementEdit(pPath[pLength - 1],
                                         index, new Element[0], added));
                    event.addEdit(firstEdit);
                    event.end();
                    fireChangedUpdate(event);
		    fireUndoableEditUpdate(new UndoableEditEvent(this, event));

		    if (lastText.equals("\n")) {
                        // We now have two \n's, one part of the Document.
                        // We need to remove one
                        event = new DefaultDocumentEvent(length - 1, 1,
                                           DocumentEvent.EventType.REMOVE); 
                        removeUpdate(event);
                        UndoableEdit u = getContent().remove(length - 1, 1);
                        if (u != null) {
                            event.addEdit(u);
                        }
                        postRemoveUpdate(event);
                        // Mark the edit as done.
                        event.end();
                        fireRemoveUpdate(event);
                        fireUndoableEditUpdate(new UndoableEditEvent(
                                               this, event));
                    }
		}
	    }
	    catch (BadLocationException ble) {
	    }
	    finally {
		releaseLock();
	    }
!!!9425947.java!!!	getPathTo(in offset : int) : Element
	    Stack elements = new Stack();
	    Element e = getDefaultRootElement();
	    int index;
	    while (!e.isLeaf()) {
		elements.push(e);
		e = e.getElement(e.getElementIndex(offset));
	    }
	    Element[] retValue = new Element[elements.size()];
	    elements.copyInto(retValue);
	    return retValue;
!!!9426075.java!!!	flush() : void
	    if (emptyDocument && !insertAfterImplied) {
                if (HTMLDocument.this.getLength() > 0 ||
                                      parseBuffer.size() > 0) {
                    flushBuffer(true);
                    adjustEndElement();
                }
                // We won't insert when 
	    }
            else {
                flushBuffer(true);
            }
!!!9426203.java!!!	handleText(in data : char, in pos : int) : void
	    if (receivedEndHTML || (midInsert && !inBody)) {
		return;
	    }

	    // see if complex glyph layout support is needed
	    if(HTMLDocument.this.getProperty(I18NProperty).equals( Boolean.FALSE ) ) {
		// if a default direction of right-to-left has been specified,
		// we want complex layout even if the text is all left to right.
		Object d = getProperty(TextAttribute.RUN_DIRECTION);
		if ((d != null) && (d.equals(TextAttribute.RUN_DIRECTION_RTL))) {
		    HTMLDocument.this.putProperty( I18NProperty, Boolean.TRUE);
		} else {
		    if (Bidi.requiresBidi(data, 0, data.length) ||
			isComplex(data, 0, data.length)) {
			//
			HTMLDocument.this.putProperty( I18NProperty, Boolean.TRUE);
		    }
		}
	    }

	    if (inTextArea) {
	        textAreaContent(data);
	    } else if (inPre) {
		preContent(data);
	    } else if (inTitle) {
		putProperty(Document.TitleProperty, new String(data));
	    } else if (option != null) {
		option.setLabel(new String(data));
	    } else if (inStyle) {
		if (styles != null) {
		    styles.addElement(new String(data));
		}
	    } else if (inBlock > 0) {
		if (!foundInsertTag && insertAfterImplied) {
		    // Assume content should be added.
		    foundInsertTag(false);
		    foundInsertTag = true;
		    inParagraph = impliedP = true;
		}
		if (data.length >= 1) {
		    addContent(data, 0, data.length);
		}
	    }
!!!9426331.java!!!	handleStartTag(inout t : Tag, inout a : MutableAttributeSet, in pos : int) : void
            if (receivedEndHTML) {
                return;
            }
	    if (midInsert && !inBody) {
		if (t == HTML.Tag.BODY) {
		    inBody = true;
		    // Increment inBlock since we know we are in the body,
		    // this is needed incase an implied-p is needed. If
		    // inBlock isn't incremented, and an implied-p is
		    // encountered, addContent won't be called!
		    inBlock++;
		}
		return;
	    }
	    if (!inBody && t == HTML.Tag.BODY) {
		inBody = true;
	    }
	    if (isStyleCSS && a.isDefined(HTML.Attribute.STYLE)) {
		// Map the style attributes.
		String decl = (String)a.getAttribute(HTML.Attribute.STYLE);
		a.removeAttribute(HTML.Attribute.STYLE);
		styleAttributes = getStyleSheet().getDeclaration(decl);
		a.addAttributes(styleAttributes);
	    }
	    else {
		styleAttributes = null;
	    }
	    TagAction action = (TagAction) tagMap.get(t);

	    if (action != null) {
		action.start(t, a);
	    } 
!!!9426459.java!!!	handleComment(in data : char, in pos : int) : void
            if (receivedEndHTML) {
                addExternalComment(new String(data));
                return;
            }
	    if (inStyle) {
		if (styles != null) {
		    styles.addElement(new String(data));
		}
	    }
	    else if (getPreservesUnknownTags()) {
		if (inBlock == 0 && (foundInsertTag ||
                                     insertTag != HTML.Tag.COMMENT)) {
                    // Comment outside of body, will not be able to show it,
                    // but can add it as a property on the Document.
                    addExternalComment(new String(data));
		    return;
		}
		SimpleAttributeSet sas = new SimpleAttributeSet();
		sas.addAttribute(HTML.Attribute.COMMENT, new String(data));
		addSpecialElement(HTML.Tag.COMMENT, sas);
	    }

            TagAction action = (TagAction)tagMap.get(HTML.Tag.COMMENT);
            if (action != null) {
                action.start(HTML.Tag.COMMENT, new SimpleAttributeSet());
                action.end(HTML.Tag.COMMENT);
            }
!!!9426587.java!!!	addExternalComment(in comment : String) : void
            Object comments = getProperty(AdditionalComments);
            if (comments != null && !(comments instanceof Vector)) {
                // No place to put comment.
                return;
            }
            if (comments == null) {
                comments = new Vector();
                putProperty(AdditionalComments, comments);
            }
            ((Vector)comments).addElement(comment);
!!!9426715.java!!!	handleEndTag(inout t : Tag, in pos : int) : void
	    if (receivedEndHTML || (midInsert && !inBody)) {
		return;
	    }
            if (t == HTML.Tag.HTML) {
                receivedEndHTML = true;
            }
	    if (t == HTML.Tag.BODY) {
		inBody = false;
		if (midInsert) {
		    inBlock--;
		}
	    }
	    TagAction action = (TagAction) tagMap.get(t);
	    if (action != null) {
		action.end(t);
	    }
!!!9426843.java!!!	handleSimpleTag(inout t : Tag, inout a : MutableAttributeSet, in pos : int) : void
	    if (receivedEndHTML || (midInsert && !inBody)) {
		return;
	    }

	    if (isStyleCSS && a.isDefined(HTML.Attribute.STYLE)) {
		// Map the style attributes.
		String decl = (String)a.getAttribute(HTML.Attribute.STYLE);
		a.removeAttribute(HTML.Attribute.STYLE);
		styleAttributes = getStyleSheet().getDeclaration(decl);
		a.addAttributes(styleAttributes);
	    }
	    else {
		styleAttributes = null;
	    }

	    TagAction action = (TagAction) tagMap.get(t);
	    if (action != null) {
		action.start(t, a);
		action.end(t);
	    }
	    else if (getPreservesUnknownTags()) {
		// unknown tag, only add if should preserve it.
		addSpecialElement(t, a);
	    }
!!!9426971.java!!!	handleEndOfLineString(in eol : String) : void
	    if (emptyDocument && eol != null) {
		putProperty(DefaultEditorKit.EndOfLineStringProperty,
			    eol);
	    }
!!!9427099.java!!!	registerTag(inout t : Tag, inout a : TagAction) : void
	    tagMap.put(t, a);
!!!9432987.java!!!	pushCharacterStyle() : void
	    charAttrStack.push(charAttr.copyAttributes());
!!!9433115.java!!!	popCharacterStyle() : void
	    if (!charAttrStack.empty()) {
		charAttr = (MutableAttributeSet) charAttrStack.peek();
		charAttrStack.pop();
	    }
!!!9433243.java!!!	textAreaContent(in data : char) : void
	    try {
		textAreaDocument.insertString(textAreaDocument.getLength(), new String(data), null);
	    } catch (BadLocationException e) {
		// Should do something reasonable
	    }
!!!9433371.java!!!	preContent(in data : char) : void
	    int last = 0;
	    for (int i = 0; i < data.length; i++) {
		if (data[i] == '\n') {
		    addContent(data, last, i - last + 1);
		    blockClose(HTML.Tag.IMPLIED);
		    MutableAttributeSet a = new SimpleAttributeSet();
		    a.addAttribute(CSS.Attribute.WHITE_SPACE, "pre");
		    blockOpen(HTML.Tag.IMPLIED, a);
		    last = i + 1;
		}
	    }
	    if (last < data.length) {
		addContent(data, last, data.length - last);
	    }
!!!9433499.java!!!	blockOpen(inout t : Tag, inout attr : MutableAttributeSet) : void
	    if (impliedP) {
		blockClose(HTML.Tag.IMPLIED);
	    }
		
	    inBlock++;

	    if (!canInsertTag(t, attr, true)) {
		return;
	    }
	    if (attr.isDefined(IMPLIED)) {
		attr.removeAttribute(IMPLIED);
	    }
	    lastWasNewline = false;
	    attr.addAttribute(StyleConstants.NameAttribute, t);
	    ElementSpec es = new ElementSpec(
		attr.copyAttributes(), ElementSpec.StartTagType);
	    parseBuffer.addElement(es);
!!!9433627.java!!!	blockClose(inout t : Tag) : void
	    inBlock--;
	    
	    if (!foundInsertTag) {
		return;
	    }

	    // Add a new line, if the last character wasn't one. This is
	    // needed for proper positioning of the cursor. addContent
            // with true will force an implied paragraph to be generated if
            // there isn't one. This may result in a rather bogus structure
            // (perhaps a table with a child pargraph), but the paragraph
            // is needed for proper positioning and display.
	    if(!lastWasNewline) {
                pushCharacterStyle();
                charAttr.addAttribute(IMPLIED_CR, Boolean.TRUE);
		addContent(NEWLINE, 0, 1, true);
                popCharacterStyle();
		lastWasNewline = true;
	    }

	    if (impliedP) {
		impliedP = false;
		inParagraph = false;
                if (t != HTML.Tag.IMPLIED) {
                    blockClose(HTML.Tag.IMPLIED);
                }
	    }
	    // an open/close with no content will be removed, so we
	    // add a space of content to keep the element being formed.
	    ElementSpec prev = (parseBuffer.size() > 0) ? 
		(ElementSpec) parseBuffer.lastElement() : null;
	    if (prev != null && prev.getType() == ElementSpec.StartTagType) {
		char[] one = new char[1];
		one[0] = ' ';
		addContent(one, 0, 1);
	    }
	    ElementSpec es = new ElementSpec(
		null, ElementSpec.EndTagType);
	    parseBuffer.addElement(es);
!!!9433755.java!!!	addContent(in data : char, in offs : int, in length : int) : void
	    addContent(data, offs, length, true);
!!!9433883.java!!!	addContent(in data : char, in offs : int, in length : int, inout generateImpliedPIfNecessary : boolean) : void
	    if (!foundInsertTag) {
		return;
	    }

	    if (generateImpliedPIfNecessary && (! inParagraph) && (! inPre)) {
		blockOpen(HTML.Tag.IMPLIED, new SimpleAttributeSet());
		inParagraph = true;
		impliedP = true;
	    }
	    emptyAnchor = false;
	    charAttr.addAttribute(StyleConstants.NameAttribute, HTML.Tag.CONTENT);
	    AttributeSet a = charAttr.copyAttributes();
	    ElementSpec es = new ElementSpec(
		a, ElementSpec.ContentType, data, offs, length);
	    parseBuffer.addElement(es);

	    if (parseBuffer.size() > threshold) {
                if ( threshold <= MaxThreshold ) {
                    threshold *= StepThreshold;
                }
		try {
		    flushBuffer(false);
		} catch (BadLocationException ble) {
		}
	    }
	    if(length > 0) {
		lastWasNewline = (data[offs + length - 1] == '\n');
	    }
!!!9434011.java!!!	addSpecialElement(inout t : Tag, inout a : MutableAttributeSet) : void
	    if ((t != HTML.Tag.FRAME) && (! inParagraph) && (! inPre)) {
		blockOpen(HTML.Tag.IMPLIED, new SimpleAttributeSet());
		inParagraph = true;
		impliedP = true;
	    }
	    if (!canInsertTag(t, a, t.isBlock())) {
		return;
	    }
	    if (a.isDefined(IMPLIED)) {
		a.removeAttribute(IMPLIED);
	    }
	    emptyAnchor = false;
	    a.addAttributes(charAttr);
	    a.addAttribute(StyleConstants.NameAttribute, t);
	    char[] one = new char[1];
	    one[0] = ' ';
	    ElementSpec es = new ElementSpec(
		a.copyAttributes(), ElementSpec.ContentType, one, 0, 1);
	    parseBuffer.addElement(es);
	    // Set this to avoid generating a newline for frames, frames
	    // shouldn't have any content, and shouldn't need a newline.
	    if (t == HTML.Tag.FRAME) {
		lastWasNewline = true;
	    }
!!!9434139.java!!!	flushBuffer(inout endOfStream : boolean) : void
	    int oldLength = HTMLDocument.this.getLength();
	    int size = parseBuffer.size();
	    if (endOfStream && (insertTag != null || insertAfterImplied) &&
		size > 0) {
		adjustEndSpecsForPartialInsert();
		size = parseBuffer.size();
	    }
	    ElementSpec[] spec = new ElementSpec[size];
	    parseBuffer.copyInto(spec);

	    if (oldLength == 0 && (insertTag == null && !insertAfterImplied)) {
		create(spec);
	    } else {
		insert(offset, spec);
	    }
	    parseBuffer.removeAllElements();
	    offset += HTMLDocument.this.getLength() - oldLength;
	    flushCount++;
!!!9434267.java!!!	adjustEndSpecsForPartialInsert() : void
	    int size = parseBuffer.size();
	    if (insertTagDepthDelta < 0) {
		// When inserting via an insertTag, the depths (of the tree
		// being read in, and existing hiearchy) may not match up.
		// This attemps to clean it up.
		int removeCounter = insertTagDepthDelta;
		while (removeCounter < 0 && size >= 0 &&
		       ((ElementSpec)parseBuffer.elementAt(size - 1)).
		       getType() == ElementSpec.EndTagType) {
		    parseBuffer.removeElementAt(--size);
		    removeCounter++;
		}
	    }
	    if (flushCount == 0 && (!insertAfterImplied ||
				    !wantsTrailingNewline)) {
		// If this starts with content (or popDepth > 0 &&
		// pushDepth > 0) and ends with EndTagTypes, make sure
		// the last content isn't a \n, otherwise will end up with
		// an extra \n in the middle of content.
		int index = 0;
		if (pushDepth > 0) {
		    if (((ElementSpec)parseBuffer.elementAt(0)).getType() ==
			ElementSpec.ContentType) {
			index++;
		    }
		}
		index += (popDepth + pushDepth);
		int cCount = 0;
		int cStart = index;
		while (index < size && ((ElementSpec)parseBuffer.elementAt
			    (index)).getType() == ElementSpec.ContentType) {
		    index++;
		    cCount++;
		}
		if (cCount > 1) {
		    while (index < size && ((ElementSpec)parseBuffer.elementAt
			       (index)).getType() == ElementSpec.EndTagType) {
			index++;
		    }
		    if (index == size) {
			char[] lastText = ((ElementSpec)parseBuffer.elementAt
					   (cStart + cCount - 1)).getArray();
			if (lastText.length == 1 && lastText[0] == NEWLINE[0]){
			    index = cStart + cCount - 1;
			    while (size > index) {
				parseBuffer.removeElementAt(--size);
			    }
			}
		    }
		}
	    }
            if (wantsTrailingNewline) {
                // Make sure there is in fact a newline
                for (int counter = parseBuffer.size() - 1; counter >= 0;
                                   counter--) {
                    ElementSpec spec = (ElementSpec)parseBuffer.
                                                    elementAt(counter);
                    if (spec.getType() == ElementSpec.ContentType) {
                        if (spec.getArray()[spec.getLength() - 1] != '\n') {
                            SimpleAttributeSet attrs =new SimpleAttributeSet();

                            attrs.addAttribute(StyleConstants.NameAttribute,
                                               HTML.Tag.CONTENT);
                            parseBuffer.insertElementAt(new ElementSpec(
                                    attrs,
				    ElementSpec.ContentType, NEWLINE, 0, 1),
                                    counter + 1);
                        }
                        break;
                    }
                }
            }
!!!9434395.java!!!	addCSSRules(in rules : String) : void
	    StyleSheet ss = getStyleSheet();
	    ss.addRule(rules);
!!!9434523.java!!!	linkCSSStyleSheet(in href : String) : void
	    URL url = null;
	    try {
		url = new URL(base, href);
	    } catch (MalformedURLException mfe) {
		try {
		    url = new URL(href);
		} catch (MalformedURLException mfe2) {
		    url = null;
		}
	    }
	    if (url != null) {
		getStyleSheet().importStyleSheet(url);
	    }
!!!9434651.java!!!	canInsertTag(inout t : Tag, inout attr : AttributeSet, inout isBlockTag : boolean) : boolean
	    if (!foundInsertTag) {
		if ((insertTag != null && !isInsertTag(t)) ||
		    (insertAfterImplied && (t == HTML.Tag.IMPLIED ||
                               (attr == null || attr.isDefined(IMPLIED))))) {
		    return false;
		}
                // Allow the insert if t matches the insert tag, or
                // insertAfterImplied is true and the element is implied.
		foundInsertTag(isBlockTag);
		if (!insertInsertTag) {
		    return false;
		}
	    }
	    return true;
!!!9434779.java!!!	isInsertTag(inout tag : Tag) : boolean
	    return (insertTag == tag);
!!!9434907.java!!!	foundInsertTag(inout isBlockTag : boolean) : void
	    foundInsertTag = true;
	    if (!insertAfterImplied && (popDepth > 0 || pushDepth > 0)) {
		try {
		    if (offset == 0 || !getText(offset - 1, 1).equals("\n")) {
			// Need to insert a newline.
			AttributeSet newAttrs = null;
			boolean joinP = true;

			if (offset != 0) {
			    // Determine if we can use JoinPrevious, we can't
			    // if the Element has some attributes that are
			    // not meant to be duplicated.
			    Element charElement = getCharacterElement
				                    (offset - 1);
			    AttributeSet attrs = charElement.getAttributes();

			    if (attrs.isDefined(StyleConstants.
						ComposedTextAttribute)) {
				joinP = false;
			    }
			    else {
				Object name = attrs.getAttribute
				              (StyleConstants.NameAttribute);
				if (name instanceof HTML.Tag) {
				    HTML.Tag tag = (HTML.Tag)name;
				    if (tag == HTML.Tag.IMG ||
					tag == HTML.Tag.HR ||
					tag == HTML.Tag.COMMENT ||
					(tag instanceof HTML.UnknownTag)) {
					joinP = false;
				    }
				}
			    }
			}
			if (!joinP) {
			    // If not joining with the previous element, be
			    // sure and set the name (otherwise it will be
			    // inherited).
			    newAttrs = new SimpleAttributeSet();
			    ((SimpleAttributeSet)newAttrs).addAttribute
				              (StyleConstants.NameAttribute,
					       HTML.Tag.CONTENT);
			}
			ElementSpec es = new ElementSpec(newAttrs,
				     ElementSpec.ContentType, NEWLINE, 0,
				     NEWLINE.length);
			if (joinP) {
			    es.setDirection(ElementSpec.
					    JoinPreviousDirection);
			}
			parseBuffer.addElement(es);
		    }
		} catch (BadLocationException ble) {}
	    }
	    // pops
	    for (int counter = 0; counter < popDepth; counter++) {
		parseBuffer.addElement(new ElementSpec(null, ElementSpec.
						       EndTagType));
	    }
	    // pushes
	    for (int counter = 0; counter < pushDepth; counter++) {
		ElementSpec es = new ElementSpec(null, ElementSpec.
						 StartTagType);
		es.setDirection(ElementSpec.JoinNextDirection);
		parseBuffer.addElement(es);
	    }
	    insertTagDepthDelta = depthTo(Math.max(0, offset - 1)) -
		                  popDepth + pushDepth - inBlock;
	    if (isBlockTag) {
		// A start spec will be added (for this tag), so we account
		// for it here.
		insertTagDepthDelta++;
	    }
	    else {
		// An implied paragraph close (end spec) is going to be added,
		// so we account for it here.
		insertTagDepthDelta--;
                inParagraph = true;
                lastWasNewline = false;
	    }
