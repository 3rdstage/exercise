format 66
"relation" // src::javax::management::relation
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "javax/management/relation"
  java_package "javax.management.relation"
  classview 177179 "relation"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 1040795 "InvalidRelationIdException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is raised when relation id provided for a relation is already
used.

@since 1.5"
      classrelation 2067611 // <generalisation>
	relation 2067611 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2067611 // <generalisation>
	  b parent class_ref 1040923 // RelationException
      end

      attribute 3052443 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -7115040321202754171L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version "
      end

      operation 8364059 "InvalidRelationIdException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception."
      end

      operation 8364187 "InvalidRelationIdException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message."
      end
    end

    class 1040923 "RelationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is the superclass of any exception which can be raised during
relation management.

@since 1.5"
      classrelation 2067483 // <generalisation>
	relation 2067483 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2067483 // <generalisation>
	  b parent class_ref 1029147 // JMException
      end

      attribute 3052315 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  5434016005679159613L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version "
      end

      operation 8363803 "RelationException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception."
      end

      operation 8363931 "RelationException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message."
      end
    end

    class 1041051 "InvalidRelationServiceException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is raised when an invalid Relation Service is provided.

@since 1.5"
      classrelation 2067739 // <generalisation>
	relation 2067739 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2067739 // <generalisation>
	  b parent class_ref 1040923 // RelationException
      end

      attribute 3052571 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  3400722103759507559L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version "
      end

      operation 8364315 "InvalidRelationServiceException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception."
      end

      operation 8364443 "InvalidRelationServiceException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message."
      end
    end

    class 1041179 "InvalidRelationTypeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Invalid relation type.
This exception is raised when, in a relation type, there is already a
relation type with that name, or the same name has been used for two
different role infos, or no role info provided, or one null role info
provided.

@since 1.5"
      classrelation 2067867 // <generalisation>
	relation 2067867 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2067867 // <generalisation>
	  b parent class_ref 1040923 // RelationException
      end

      attribute 3052699 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  3007446608299169961L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version "
      end

      operation 8364571 "InvalidRelationTypeException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception."
      end

      operation 8364699 "InvalidRelationTypeException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message."
      end
    end

    class 1041307 "InvalidRoleInfoException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is raised when, in a role info, its minimum degree is greater
than its maximum degree.

@since 1.5"
      classrelation 2067995 // <generalisation>
	relation 2067995 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2067995 // <generalisation>
	  b parent class_ref 1040923 // RelationException
      end

      attribute 3052827 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7517834705158932074L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version "
      end

      operation 8364827 "InvalidRoleInfoException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception."
      end

      operation 8364955 "InvalidRoleInfoException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message."
      end
    end

    class 1041435 "InvalidRoleValueException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Role value is invalid.
This exception is raised when, in a role, the number of referenced MBeans
in given value is less than expected minimum degree, or the number of
referenced MBeans in provided value exceeds expected maximum degree, or
one referenced MBean in the value is not an Object of the MBean
class expected for that role, or an MBean provided for that role does not
exist.

@since 1.5"
      classrelation 2068123 // <generalisation>
	relation 2068123 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2068123 // <generalisation>
	  b parent class_ref 1040923 // RelationException
      end

      attribute 3052955 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -2066091747301983721L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version "
      end

      operation 8365083 "InvalidRoleValueException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception."
      end

      operation 8365211 "InvalidRoleValueException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message."
      end
    end

    class 1041563 "MBeanServerNotificationFilter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Filter for {@link MBeanServerNotification}.
This filter filters MBeanServerNotification notifications by
selecting the ObjectNames of interest and the operations (registration,
unregistration, both) of interest (corresponding to notification
types).

@since 1.5"
      classrelation 2068251 // <generalisation>
	relation 2068251 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2068251 // <generalisation>
	  b parent class_ref 1032475 // NotificationFilterSupport
      end

      attribute 3053083 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  6001782699077323605L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form "
      end

      attribute 3053211 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  2605900539589789736L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version for new serial form "
      end

      classrelation 2068379 // oldSerialPersistentFields (<unidirectional association>)
	relation 2068379 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"mySelectObjNameList\", Vector.class),
      new ObjectStreamField(\"myDeselectObjNameList\", Vector.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2068379 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      classrelation 2068507 // newSerialPersistentFields (<unidirectional association>)
	relation 2068507 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"selectedNames\", List.class),
      new ObjectStreamField(\"deselectedNames\", List.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2068507 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3053339 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual serial version and serial form"
      end

      classrelation 2068635 // serialPersistentFields (<unidirectional association>)
	relation 2068635 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField selectedNames List List of {@link ObjectName}s of interest
        <ul>
        <li><code>null</code> means that all {@link ObjectName}s are implicitly selected
        (check for explicit deselections)</li>
        <li>Empty vector means that no {@link ObjectName} is explicitly selected</li>
        </ul>
@serialField deselectedNames List List of {@link ObjectName}s with no interest
        <ul>
        <li><code>null</code> means that all {@link ObjectName}s are implicitly deselected 
        (check for explicit selections))</li>
        <li>Empty vector means that no {@link ObjectName} is explicitly deselected</li>
        </ul>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2068635 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3053467 "compat"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 171291 "initialization"
	
	cpp "" ""
	java "  static {
	try {
	    PrivilegedAction act = new GetPropertyAction(\"jmx.serial.form\");
	    String form = (String) AccessController.doPrivileged(act);
	    compat = (form != null && form.equals(\"1.0\"));
	} catch (Exception e) {
	    // OK : Too bad, no compat with 1.0
	}
	if (compat) {
	    serialPersistentFields = oldSerialPersistentFields;
	    serialVersionUID = oldSerialVersionUID;
	} else {
	    serialPersistentFields = newSerialPersistentFields;
	    serialVersionUID = newSerialVersionUID;
	}
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 2068763 // selectedNames (<unidirectional association>)
	relation 2068763 --->
	  a role_name "selectedNames" init_value "=  new Vector()" private
	    comment " END Serialization compatibility stuff

 Private members


@serial List of {@link ObjectName}s of interest
        <ul>
        <li><code>null</code> means that all {@link ObjectName}s are implicitly selected
        (check for explicit deselections)</li>
        <li>Empty vector means that no {@link ObjectName} is explicitly selected</li>
        </ul>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2068763 // selectedNames (<unidirectional association>)
	  b parent class_ref 135579 // List
      end

      classrelation 2068891 // deselectedNames (<unidirectional association>)
	relation 2068891 --->
	  a role_name "deselectedNames" init_value "=  null" private
	    comment "
@serial List of {@link ObjectName}s with no interest
        <ul>
        <li><code>null</code> means that all {@link ObjectName}s are implicitly deselected 
        (check for explicit selections))</li>
        <li>Empty vector means that no {@link ObjectName} is explicitly deselected</li>
        </ul>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2068891 // deselectedNames (<unidirectional association>)
	  b parent class_ref 135579 // List
      end

      operation 8365339 "MBeanServerNotificationFilter"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructor


Creates a filter selecting all MBeanServerNotification notifications for
all ObjectNames."
      end

      operation 8365467 "disableAllObjectNames"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Disables any MBeanServerNotification (all ObjectNames are
deselected)."
      end

      operation 8365595 "disableObjectName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theObjName" type class_ref 510875 // ObjectName
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disables MBeanServerNotifications concerning given ObjectName.

@param theObjName  ObjectName no longer of interest

@exception IllegalArgumentException  if the given ObjectName is null"
      end

      operation 8365723 "enableAllObjectNames"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables all MBeanServerNotifications (all ObjectNames are selected)."
      end

      operation 8365851 "enableObjectName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theObjName" type class_ref 510875 // ObjectName
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables MBeanServerNotifications concerning given ObjectName.

@param theObjName  ObjectName of interest

@exception IllegalArgumentException  if the given ObjectName is null"
      end

      operation 8365979 "getEnabledObjectNames"
	public return_type class_ref 153883 // Vector
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets all the ObjectNames enabled.

@return Vector of ObjectNames:
<P>- null means all ObjectNames are implicitly selected, except the
ObjectNames explicitly deselected
<P>- empty means all ObjectNames are deselected, i.e. no ObjectName
selected."
      end

      operation 8366107 "getDisabledObjectNames"
	public return_type class_ref 153883 // Vector
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets all the ObjectNames disabled.

@return Vector of ObjectNames:
<P>- null means all ObjectNames are implicitly deselected, except the
ObjectNames explicitly selected
<P>- empty means all ObjectNames are selected, i.e. no ObjectName
deselected."
      end

      operation 8366235 "isNotificationEnabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "theNtf" type class_ref 513819 // Notification
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NotificationFilter interface


Invoked before sending the specified notification to the listener.
<P>If:
<P>- the ObjectName of the concerned MBean is selected (explicitly OR
(implicitly and not explicitly deselected))
<P>AND
<P>- the type of the operation (registration or unregistration) is
selected
<P>then the notification is sent to the listener.

@param theNtf  The notification to be sent.

@return true if the notification has to be sent to the listener, false
otherwise.

@exception IllegalArgumentException  if null parameter"
      end

      attribute 3053595 "localClassName"
	class_attribute private explicit_type "String"
	init_value "=  \"MBeanServerNotificationFilter\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " stuff for Tracing"
      end

      operation 8366363 "isTraceOn"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " trace level"
      end

      operation 8366491 "trace"
	private explicit_return_type "void"
	nparams 2
	  param in name "methodName" explicit_type "String"
	  param in name "info" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    private void trace(String className, String methodName, String info) {
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_RELATION, className, methodName, info);
    }"
      end

      operation 8366619 "isDebugOn"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    private void trace(String className, String methodName, Exception e) {
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_RELATION, className, methodName, e);
    }
    private void trace(String methodName, Exception e) {
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_RELATION, localClassName, methodName, e);
    }
 debug level"
      end

      operation 8366747 "debug"
	private explicit_return_type "void"
	nparams 2
	  param in name "methodName" explicit_type "String"
	  param in name "info" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    private void debug(String className, String methodName, String info) {
        Trace.send(Trace.LEVEL_DEBUG, Trace.INFO_RELATION, className, methodName, info);
    }"
      end

      operation 8366875 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    private void debug(String className, String methodName, Exception e) {
        Trace.send(Trace.LEVEL_DEBUG, Trace.INFO_RELATION, className, methodName, e);
    }
    private void debug(String methodName, Exception e) {
        Trace.send(Trace.LEVEL_DEBUG, Trace.INFO_RELATION, localClassName, methodName, e);
    }

Deserializes an {@link MBeanServerNotificationFilter} from an {@link ObjectInputStream}."
      end

      operation 8367003 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes an {@link MBeanServerNotificationFilter} to an {@link ObjectOutputStream}."
      end
    end

    class 1041691 "Relation"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface has to be implemented by any MBean class expected to
represent a relation managed using the Relation Service.
<P>Simple relations, i.e. having only roles, no properties or methods, can
be created directly by the Relation Service (represented as RelationSupport
objects, internally handled by the Relation Service).
<P>If the user wants to represent more complex relations, involving
properties and/or methods, he has to provide his own class implementing the
Relation interface. This can be achieved either by inheriting from
RelationSupport class, or by implementing the interface (fully or delegation to
a RelationSupport object member).
<P>Specifying such user relation class is to introduce properties and/or
methods. Those have to be exposed for remote management. So this means that
any user relation class must be a MBean class.

@since 1.5"
      operation 8367131 "getRole"
	public return_type class_ref 135579 // List
	nparams 1
	  param in name "theRoleName" explicit_type "String"
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves role value for given role name.
<P>Checks if the role exists and is readable according to the relation
type.

@param theRoleName  name of role

@return the ArrayList of ObjectName objects being the role value

@exception IllegalArgumentException  if null role name
@exception RoleNotFoundException  if:
<P>- there is no role with given name
<P>- the role is not readable.
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server

@see #setRole"
      end

      operation 8367259 "getRoles"
	public return_type class_ref 1042075 // RoleResult
	nparams 1
	  param in name "theRoleNameArray" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves values of roles with given names.
<P>Checks for each role if it exists and is readable according to the
relation type.

@param theRoleNameArray  array of names of roles to be retrieved

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
retrieved).

@exception IllegalArgumentException  if null role name
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server

@see #setRoles"
      end

      operation 8367387 "getRoleCardinality"
	public return_type class_ref 170395 // Integer
	nparams 1
	  param in name "theRoleName" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041819 // RoleNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of MBeans currently referenced in the given role.

@param theRoleName  name of role

@return the number of currently referenced MBeans in that role

@exception IllegalArgumentException  if null role name
@exception RoleNotFoundException  if there is no role with given name"
      end

      operation 8367515 "getAllRoles"
	public return_type class_ref 1042075 // RoleResult
	nparams 0
	nexceptions 1
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all roles present in the relation.

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
readable).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server"
      end

      operation 8367643 "retrieveAllRoles"
	public return_type class_ref 1042203 // RoleList
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all roles in the relation without checking read mode.

@return a RoleList."
      end

      operation 8367771 "setRole"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theRole" type class_ref 1042331 // Role
	nexceptions 6
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1041435 // InvalidRoleValueException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1042587 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given role.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>Will send a notification (RelationNotification with type
RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
relation is a MBean or not).

@param theRole  role to be set (name and new value)

@exception IllegalArgumentException  if null role
@exception RoleNotFoundException  if the role is not writable (no
test on the write access mode performed when initialising the role)
@exception InvalidRoleValueException  if value provided for
role is not valid, i.e.:
<P>- the number of referenced MBeans in given value is less than
expected minimum degree
<P>- the number of referenced MBeans in provided value exceeds expected
maximum degree
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>- a MBean provided for that role does not exist.
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationTypeNotFoundException  if the relation type has not
been declared in the Relation Service.
@exception RelationNotFoundException  if the relation has not been
added in the Relation Service.

@see #getRole"
      end

      operation 8367899 "setRoles"
	public return_type class_ref 1042075 // RoleResult
	nparams 1
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	nexceptions 4
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1042587 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given roles.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>Will send one notification (RelationNotification with type
RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
relation is a MBean or not) per updated role.

@param theRoleList  list of roles to be set

@return a RoleResult object, including a RoleList (for roles
successfully set) and a RoleUnresolvedList (for roles not
set).

@exception IllegalArgumentException  if null role name
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationTypeNotFoundException  if the relation type has not
been declared in the Relation Service.
@exception RelationNotFoundException  if the relation MBean has not been
added in the Relation Service.

@see #getRoles"
      end

      operation 8368027 "handleMBeanUnregistration"
	public explicit_return_type "void"
	nparams 2
	  param inout name "theObjName" type class_ref 510875 // ObjectName
	  param in name "theRoleName" explicit_type "String"
	nexceptions 6
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1041435 // InvalidRoleValueException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1042587 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Callback used by the Relation Service when a MBean referenced in a role
is unregistered.
<P>The Relation Service will call this method to let the relation
take action to reflect the impact of such unregistration.
<P>BEWARE. the user is not expected to call this method.
<P>Current implementation is to set the role with its current value
(list of ObjectNames of referenced MBeans) without the unregistered
one.

@param theObjName  ObjectName of unregistered MBean
@param theRoleName  name of role where the MBean is referenced

@exception IllegalArgumentException  if null parameter
@exception RoleNotFoundException  if role does not exist in the
relation or is not writable
@exception InvalidRoleValueException  if role value does not conform to
the associated role info (this will never happen when called from the
Relation Service)
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationTypeNotFoundException  if the relation type has not
been declared in the Relation Service.
@exception RelationNotFoundException  if this method is called for a
relation MBean not added in the Relation Service."
      end

      operation 8368155 "getReferencedMBeans"
	public return_type class_ref 136603 // Map
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves MBeans referenced in the various roles of the relation.

@return a HashMap mapping:
<P> ObjectName -> ArrayList of String (role names)"
      end

      operation 8368283 "getRelationTypeName"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns name of associated relation type.

@return the name of the relation type."
      end

      operation 8368411 "getRelationServiceName"
	public return_type class_ref 510875 // ObjectName
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns ObjectName of the Relation Service handling the relation.

@return the ObjectName of the Relation Service."
      end

      operation 8368539 "getRelationId"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns relation identifier (used to uniquely identify the relation
inside the Relation Service).

@return the relation id."
      end
    end

    class 1041819 "RoleNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is raised when a role in a relation does not exist, or is not
readable, or is not settable.

@since 1.5"
      classrelation 2075419 // <generalisation>
	relation 2075419 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2075419 // <generalisation>
	  b parent class_ref 1040923 // RelationException
      end

      attribute 3059739 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -2986406101364031481L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version "
      end

      operation 8394395 "RoleNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception."
      end

      operation 8394523 "RoleNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message."
      end
    end

    class 1041947 "RelationServiceNotRegisteredException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is raised when an access is done to the Relation Service and
that one is not registered.

@since 1.5"
      classrelation 2072091 // <generalisation>
	relation 2072091 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2072091 // <generalisation>
	  b parent class_ref 1040923 // RelationException
      end

      attribute 3055771 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  8454744887157122910L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version "
      end

      operation 8382235 "RelationServiceNotRegisteredException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception."
      end

      operation 8382363 "RelationServiceNotRegisteredException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message."
      end
    end

    class 1042075 "RoleResult"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Represents the result of a multiple access to several roles of a relation
(either for reading or writing).

@since 1.5"
      classrelation 2075547 // <realization>
	relation 2075547 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2075547 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 3059867 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  3786616013762091099L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form "
      end

      attribute 3059995 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -6304063118040985512L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version for new serial form "
      end

      classrelation 2075675 // oldSerialPersistentFields (<unidirectional association>)
	relation 2075675 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"myRoleList\", RoleList.class),
      new ObjectStreamField(\"myRoleUnresList\", RoleUnresolvedList.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2075675 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      classrelation 2075803 // newSerialPersistentFields (<unidirectional association>)
	relation 2075803 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"roleList\", RoleList.class),
      new ObjectStreamField(\"unresolvedRoleList\", RoleUnresolvedList.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2075803 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3060123 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual serial version and serial form"
      end

      classrelation 2075931 // serialPersistentFields (<unidirectional association>)
	relation 2075931 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField roleList RoleList List of roles successfully accessed
@serialField unresolvedRoleList RoleUnresolvedList List of roles unsuccessfully accessed

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2075931 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3060251 "compat"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 171931 "initialization"
	
	cpp "" ""
	java "  static {
	try {
	    PrivilegedAction act = new GetPropertyAction(\"jmx.serial.form\");
	    String form = (String) AccessController.doPrivileged(act);
	    compat = (form != null && form.equals(\"1.0\"));
	} catch (Exception e) {
	    // OK : Too bad, no compat with 1.0
	}
	if (compat) {
	    serialPersistentFields = oldSerialPersistentFields;
	    serialVersionUID = oldSerialVersionUID;
	} else {
	    serialPersistentFields = newSerialPersistentFields;
	    serialVersionUID = newSerialVersionUID;
	}
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 2076059 // roleList (<unidirectional association>)
	relation 2076059 --->
	  a role_name "roleList" init_value "=  null" private
	    comment " END Serialization compatibility stuff

 Private members


@serial List of roles successfully accessed

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2076059 // roleList (<unidirectional association>)
	  b parent class_ref 1042203 // RoleList
      end

      classrelation 2076187 // unresolvedRoleList (<unidirectional association>)
	relation 2076187 --->
	  a role_name "unresolvedRoleList" init_value "=  null" private
	    comment "
@serial List of roles unsuccessfully accessed

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2076187 // unresolvedRoleList (<unidirectional association>)
	  b parent class_ref 1043867 // RoleUnresolvedList
      end

      operation 8394651 "RoleResult"
	public explicit_return_type ""
	nparams 2
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	  param inout name "theRoleUnresList" type class_ref 1043867 // RoleUnresolvedList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructor


Constructor.

@param theRoleList  list of roles successfully accessed.
@param theRoleUnresList  list of roles not accessed (with problem
descriptions)."
      end

      operation 8394779 "getRoles"
	public return_type class_ref 1042203 // RoleList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Retrieves list of roles successfully accessed.

@return a RoleList

@see #setRoles"
      end

      operation 8394907 "getRolesUnresolved"
	public return_type class_ref 1043867 // RoleUnresolvedList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves list of roles unsuccessfully accessed.

@return a RoleUnresolvedList.

@see #setRolesUnresolved"
      end

      operation 8395035 "setRoles"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets list of roles successfully accessed.

@param theRoleList  list of roles successfully accessed

@see #getRoles"
      end

      operation 8395163 "setRolesUnresolved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theRoleUnresList" type class_ref 1043867 // RoleUnresolvedList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets list of roles unsuccessfully accessed.

@param theRoleUnresList  list of roles unsuccessfully accessed

@see #getRolesUnresolved"
      end

      operation 8395291 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link RoleResult} from an {@link ObjectInputStream}."
      end

      operation 8395419 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link RoleResult} to an {@link ObjectOutputStream}."
      end
    end

    class 1042203 "RoleList"
      visibility public 
      nactuals 4
      actual class class_ref 137627 // ArrayList
        rank 0 explicit_value ""
      actual class class_ref 137627 // ArrayList
        rank 1 explicit_value ""
      actual class class_ref 137627 // ArrayList
        rank 2 explicit_value ""
      actual class class_ref 137627 // ArrayList
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A RoleList represents a list of roles (Role objects). It is used as
parameter when creating a relation, and when trying to set several roles in
a relation (via 'setRoles()' method). It is returned as part of a
RoleResult, to provide roles successfully retrieved.

@since 1.5"
      classrelation 2075291 // <generalisation>
	relation 2075291 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2075291 // <generalisation>
	  b parent class_ref 137627 // ArrayList
      end

      attribute 3059611 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  5568344346499649313L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version "
      end

      operation 8393371 "RoleList"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Constructs an empty RoleList."
      end

      operation 8393499 "RoleList"
	public explicit_return_type ""
	nparams 1
	  param in name "theInitialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty RoleList with the initial capacity
specified.

@param theInitialCapacity  initial capacity"
      end

      operation 8393627 "RoleList"
	public explicit_return_type ""
	nparams 1
	  param inout name "theList" type class_ref 135579 // List
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a RoleList containing the elements of the
List specified, in the order in which they are returned
by the List's iterator. The RoleList instance has
an initial capacity of 110% of the size of the List
specified.

@param theList  list of Role objects

@exception IllegalArgumentException  if:
<P>- null parameter
<P>or
<P>- an element in the List is not a Role"
      end

      operation 8393755 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theRole" type class_ref 1042331 // Role
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Adds the Role specified as the last element of the list.

@param theRole  the role to be added.

@exception IllegalArgumentException  if the role is null."
      end

      operation 8393883 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "theIndex" explicit_type "int"
	  param inout name "theRole" type class_ref 1042331 // Role
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 870555 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the role specified as an element at the position specified.
Elements with an index greater than or equal to the current position are
shifted up.

@param theIndex  The position in the list where the new Role
object is to be inserted.
@param theRole  The Role object to be inserted.

@exception IllegalArgumentException  if the role is null.
@exception IndexOutOfBoundsException  if accessing with an index
outside of the list."
      end

      operation 8394011 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "theIndex" explicit_type "int"
	  param inout name "theRole" type class_ref 1042331 // Role
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 870555 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the element at the position specified to be the role
specified.
The previous element at that position is discarded.

@param theIndex  The position specified.
@param theRole  The value to which the role element should be set.

@exception IllegalArgumentException  if the role is null.
@exception IndexOutOfBoundsException  if accessing with an index
outside of the list."
      end

      operation 8394139 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	nexceptions 1
	  exception class_ref 870555 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all the elements in the RoleList specified to the end
of the list, in the order in which they are returned by the Iterator of
the RoleList specified.

@param theRoleList  Elements to be inserted into the list (can be null)

@return true if this list changed as a result of the call.

@exception IndexOutOfBoundsException  if accessing with an index
outside of the list.

@see ArrayList#addAll(Collection)"
      end

      operation 8394267 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "theIndex" explicit_type "int"
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 870555 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts all of the elements in the RoleList specified into this
list, starting at the specified position, in the order in which they are
returned by the Iterator of the RoleList specified.

@param theIndex  Position at which to insert the first element from the
RoleList specified.
@param theRoleList  Elements to be inserted into the list.

@return true if this list changed as a result of the call.

@exception IllegalArgumentException  if the role is null.
@exception IndexOutOfBoundsException  if accessing with an index
outside of the list.

@see ArrayList#addAll(int, Collection)"
      end
    end

    class 1042331 "Role"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Represents a role: includes a role name and referenced MBeans (via their
ObjectNames). The role value is always represented as an ArrayList
collection (of ObjectNames) to homogenize the access.

@since 1.5"
      classrelation 2074011 // <realization>
	relation 2074011 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2074011 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 3057307 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -1959486389343113026L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form "
      end

      attribute 3057435 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -279985518429862552L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version for new serial form "
      end

      classrelation 2074139 // oldSerialPersistentFields (<unidirectional association>)
	relation 2074139 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"myName\", String.class),
      new ObjectStreamField(\"myObjNameList\", ArrayList.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2074139 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      classrelation 2074267 // newSerialPersistentFields (<unidirectional association>)
	relation 2074267 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"name\", String.class),
      new ObjectStreamField(\"objectNameList\", List.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2074267 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3057563 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual serial version and serial form"
      end

      classrelation 2074395 // serialPersistentFields (<unidirectional association>)
	relation 2074395 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField name String Role name
@serialField objectNameList List {@link List} of {@link ObjectName}s of referenced MBeans

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2074395 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3057691 "compat"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 171675 "initialization"
	
	cpp "" ""
	java "  static {
	try {
	    PrivilegedAction act = new GetPropertyAction(\"jmx.serial.form\");
	    String form = (String) AccessController.doPrivileged(act);
	    compat = (form != null && form.equals(\"1.0\"));
	} catch (Exception e) {
	    // OK : Too bad, no compat with 1.0
	}
	if (compat) {
	    serialPersistentFields = oldSerialPersistentFields;
	    serialVersionUID = oldSerialVersionUID;
	} else {
	    serialPersistentFields = newSerialPersistentFields;
	    serialVersionUID = newSerialVersionUID;
	}
    }"
	php ""
	python ""
	idl ""
      end

      attribute 3057819 "name"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " END Serialization compatibility stuff

 Private members


@serial Role name
"
      end

      classrelation 2074523 // objectNameList (<unidirectional association>)
	relation 2074523 --->
	  a role_name "objectNameList" init_value "=  new ArrayList()" private
	    comment "
@serial {@link List} of {@link ObjectName}s of referenced MBeans

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2074523 // objectNameList (<unidirectional association>)
	  b parent class_ref 135579 // List
      end

      operation 8389659 "Role"
	public explicit_return_type ""
	nparams 2
	  param in name "theRoleName" explicit_type "String"
	  param inout name "theRoleValue" type class_ref 135579 // List
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


<p>Make a new Role object.
No check is made that the ObjectNames in the role value exist in
an MBean server.  That check will be made when the role is set
in a relation.

@param theRoleName  role name
@param theRoleValue  role value (List of ObjectName objects)

@exception IllegalArgumentException  if null parameter"
      end

      operation 8389787 "getRoleName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Retrieves role name.

@return the role name.

@see #setRoleName"
      end

      operation 8389915 "getRoleValue"
	public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves role value.

@return ArrayList of ObjectName objects for referenced MBeans.

@see #setRoleValue"
      end

      operation 8390043 "setRoleName"
	public explicit_return_type "void"
	nparams 1
	  param in name "theRoleName" explicit_type "String"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets role name.

@param theRoleName  role name

@exception IllegalArgumentException  if null parameter

@see #getRoleName"
      end

      operation 8390171 "setRoleValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theRoleValue" type class_ref 135579 // List
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets role value.

@param theRoleValue  List of ObjectName objects for referenced
MBeans.

@exception IllegalArgumentException  if null parameter

@see #getRoleValue"
      end

      operation 8390299 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing the role.

@return the description of the role."
      end

      operation 8390427 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Misc


Clone the role object.

@return a Role that is an independent copy of the current Role object."
      end

      operation 8390555 "roleValueToString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "theRoleValue" type class_ref 135579 // List
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string for the given role value.

@param theRoleValue  List of ObjectName objects

@return A String consisting of the ObjectNames separated by
newlines (\\n).

@exception IllegalArgumentException  if null parameter"
      end

      operation 8390683 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link Role} from an {@link ObjectInputStream}."
      end

      operation 8390811 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link Role} to an {@link ObjectOutputStream}."
      end
    end

    class 1042459 "RelationTypeNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is raised when there is no relation type with given name in
Relation Service.

@since 1.5"
      classrelation 2073243 // <generalisation>
	relation 2073243 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2073243 // <generalisation>
	  b parent class_ref 1040923 // RelationException
      end

      attribute 3056283 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  1274155316284300752L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version "
      end

      operation 8387483 "RelationTypeNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception."
      end

      operation 8387611 "RelationTypeNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message."
      end
    end

    class 1042587 "RelationNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is raised when there is no relation for a given relation id
in a Relation Service.

@since 1.5"
      classrelation 2069019 // <generalisation>
	relation 2069019 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2069019 // <generalisation>
	  b parent class_ref 1040923 // RelationException
      end

      attribute 3053723 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -3793951411158559116L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version "
      end

      operation 8368667 "RelationNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception."
      end

      operation 8368795 "RelationNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message."
      end
    end

    class 1042715 "RelationNotification"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A notification of a change in the Relation Service.
A RelationNotification notification is sent when a relation is created via
the Relation Service, or an MBean is added as a relation in the Relation
Service, or a role is updated in a relation, or a relation is removed from
the Relation Service.

@since 1.5"
      classrelation 2069147 // <generalisation>
	relation 2069147 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2069147 // <generalisation>
	  b parent class_ref 513819 // Notification
      end

      attribute 3053851 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -2126464566505527147L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form "
      end

      attribute 3053979 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -6871117877523310399L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version for new serial form "
      end

      classrelation 2069275 // oldSerialPersistentFields (<unidirectional association>)
	relation 2069275 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "=  
    {
	new ObjectStreamField(\"myNewRoleValue\", ArrayList.class),
	new ObjectStreamField(\"myOldRoleValue\", ArrayList.class),
	new ObjectStreamField(\"myRelId\", String.class),
	new ObjectStreamField(\"myRelObjName\", ObjectName.class),
	new ObjectStreamField(\"myRelTypeName\", String.class),
	new ObjectStreamField(\"myRoleName\", String.class),
	new ObjectStreamField(\"myUnregMBeanList\", ArrayList.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2069275 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      classrelation 2069403 // newSerialPersistentFields (<unidirectional association>)
	relation 2069403 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "=  
    {
	new ObjectStreamField(\"newRoleValue\", List.class),
	new ObjectStreamField(\"oldRoleValue\", List.class),
	new ObjectStreamField(\"relationId\", String.class),
	new ObjectStreamField(\"relationObjName\", ObjectName.class),
	new ObjectStreamField(\"relationTypeName\", String.class),
	new ObjectStreamField(\"roleName\", String.class),
	new ObjectStreamField(\"unregisterMBeanList\", List.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2069403 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3054107 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual serial version and serial form"
      end

      classrelation 2069531 // serialPersistentFields (<unidirectional association>)
	relation 2069531 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField relationId String Relation identifier of created/removed/updated relation
@serialField relationTypeName String Relation type name of created/removed/updated relation
@serialField relationObjName ObjectName {@link ObjectName} of the relation MBean of created/removed/updated relation
             (only if the relation is represented by an MBean)
@serialField unregisterMBeanList List List of {@link ObjectName}s of referenced MBeans to be unregistered due to
             relation removal
@serialField roleName String Name of updated role (only for role update)
@serialField oldRoleValue List Old role value ({@link ArrayList} of {@link ObjectName}s) (only for role update)
@serialField newRoleValue List New role value ({@link ArrayList} of {@link ObjectName}s) (only for role update)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2069531 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3054235 "compat"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 171419 "initialization"
	
	cpp "" ""
	java "  static {
	try {
	    PrivilegedAction act = new GetPropertyAction(\"jmx.serial.form\");
	    String form = (String) AccessController.doPrivileged(act);
	    compat = (form != null && form.equals(\"1.0\"));
	} catch (Exception e) {
	    // OK : Too bad, no compat with 1.0
	}
	if (compat) {
	    serialPersistentFields = oldSerialPersistentFields;
	    serialVersionUID = oldSerialVersionUID;
	} else {
	    serialPersistentFields = newSerialPersistentFields;
	    serialVersionUID = newSerialVersionUID;
	}
    }"
	php ""
	python ""
	idl ""
      end

      attribute 3054363 "RELATION_BASIC_CREATION"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  \"jmx.relation.creation.basic\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " END Serialization compatibility stuff

 Notification types


Type for the creation of an internal relation.
"
      end

      attribute 3054491 "RELATION_MBEAN_CREATION"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  \"jmx.relation.creation.mbean\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Type for the relation MBean added into the Relation Service.
"
      end

      attribute 3054619 "RELATION_BASIC_UPDATE"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  \"jmx.relation.update.basic\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Type for an update of an internal relation.
"
      end

      attribute 3054747 "RELATION_MBEAN_UPDATE"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  \"jmx.relation.update.mbean\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Type for the update of a relation MBean.
"
      end

      attribute 3054875 "RELATION_BASIC_REMOVAL"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  \"jmx.relation.removal.basic\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Type for the removal from the Relation Service of an internal relation.
"
      end

      attribute 3055003 "RELATION_MBEAN_REMOVAL"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  \"jmx.relation.removal.mbean\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Type for the removal from the Relation Service of a relation MBean.
"
      end

      attribute 3055131 "relationId"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Private members


@serial Relation identifier of created/removed/updated relation
"
      end

      attribute 3055259 "relationTypeName"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Relation type name of created/removed/updated relation
"
      end

      classrelation 2069659 // relationObjName (<unidirectional association>)
	relation 2069659 --->
	  a role_name "relationObjName" init_value "=  null" private
	    comment "
@serial {@link ObjectName} of the relation MBean of created/removed/updated relation
        (only if the relation is represented by an MBean)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2069659 // relationObjName (<unidirectional association>)
	  b parent class_ref 510875 // ObjectName
      end

      classrelation 2069787 // unregisterMBeanList (<unidirectional association>)
	relation 2069787 --->
	  a role_name "unregisterMBeanList" init_value "=  null" private
	    comment "
@serial List of {@link ObjectName}s of referenced MBeans to be unregistered due to
        relation removal

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2069787 // unregisterMBeanList (<unidirectional association>)
	  b parent class_ref 135579 // List
      end

      attribute 3055387 "roleName"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Name of updated role (only for role update)
"
      end

      classrelation 2069915 // oldRoleValue (<unidirectional association>)
	relation 2069915 --->
	  a role_name "oldRoleValue" init_value "=  null" private
	    comment " 
@serial Old role value ({@link ArrayList} of {@link ObjectName}s) (only for role update)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2069915 // oldRoleValue (<unidirectional association>)
	  b parent class_ref 135579 // List
      end

      classrelation 2070043 // newRoleValue (<unidirectional association>)
	relation 2070043 --->
	  a role_name "newRoleValue" init_value "=  null" private
	    comment "
@serial New role value ({@link ArrayList} of {@link ObjectName}s) (only for role update)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2070043 // newRoleValue (<unidirectional association>)
	  b parent class_ref 135579 // List
      end

      operation 8368923 "RelationNotification"
	public explicit_return_type ""
	nparams 9
	  param in name "theNtfType" explicit_type "String"
	  param inout name "theSrcObj" explicit_type "Object"
	  param in name "TheSeqNbr" explicit_type "long"
	  param in name "theTimeStamp" explicit_type "long"
	  param in name "theMsg" explicit_type "String"
	  param in name "theRelId" explicit_type "String"
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theRelObjName" type class_ref 510875 // ObjectName
	  param inout name "theUnregMBeanList" type class_ref 135579 // List
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Creates a notification for either a relation creation (RelationSupport
object created internally in the Relation Service, or an MBean added as a
relation) or for a relation removal from the Relation Service.

@param theNtfType  type of the notification; either:
<P>- RELATION_BASIC_CREATION
<P>- RELATION_MBEAN_CREATION
<P>- RELATION_BASIC_REMOVAL
<P>- RELATION_MBEAN_REMOVAL
@param theSrcObj  source object, sending the notification. Will always
be a RelationService object.
@param TheSeqNbr  sequence number to identify the notification
@param theTimeStamp  time stamp
@param theMsg  human-readable message describing the notification
@param theRelId  relation id identifying the relation in the Relation
Service
@param theRelTypeName  name of the relation type
@param theRelObjName  ObjectName of the relation object if it is an MBean
(null for relations internally handled by the Relation Service)
@param theUnregMBeanList  list of ObjectNames of referenced MBeans
expected to be unregistered due to relation removal (only for removal,
due to CIM qualifiers, can be null)

@exception IllegalArgumentException  if:
<P>- no value for the notification type
<P>- the notification type is not RELATION_BASIC_CREATION,
RELATION_MBEAN_CREATION, RELATION_BASIC_REMOVAL or
RELATION_MBEAN_REMOVAL
<P>- no source object
<P>- the source object is not a Relation Service
<P>- no relation id
<P>- no relation type name"
      end

      operation 8369051 "RelationNotification"
	public explicit_return_type ""
	nparams 11
	  param in name "theNtfType" explicit_type "String"
	  param inout name "theSrcObj" explicit_type "Object"
	  param in name "TheSeqNbr" explicit_type "long"
	  param in name "theTimeStamp" explicit_type "long"
	  param in name "theMsg" explicit_type "String"
	  param in name "theRelId" explicit_type "String"
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theRelObjName" type class_ref 510875 // ObjectName
	  param in name "theRoleName" explicit_type "String"
	  param inout name "theNewRoleValue" type class_ref 135579 // List
	  param inout name "theOldRoleValue" type class_ref 135579 // List
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a notification for a role update in a relation.

@param theNtfType  type of the notification; either:
<P>- RELATION_BASIC_UPDATE
<P>- RELATION_MBEAN_UPDATE
@param theSrcObj  source object, sending the notification. Will always
be a RelationService object.
@param TheSeqNbr  sequence number to identify the notification
@param theTimeStamp  time stamp
@param theMsg  human-readable message describing the notification
@param theRelId  relation id identifying the relation in the Relation
Service
@param theRelTypeName  name of the relation type
@param theRelObjName  ObjectName of the relation object if it is an MBean
(null for relations internally handled by the Relation Service)
@param theRoleName  name of the updated role
@param theNewRoleValue  new value (List of ObjectName objects)
@param theOldRoleValue  old value (List of ObjectName objects)

@exception IllegalArgumentException  if null parameter"
      end

      operation 8369179 "getRelationId"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Returns the relation identifier of created/removed/updated relation.

@return the relation id."
      end

      operation 8369307 "getRelationTypeName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the relation type name of created/removed/updated relation.

@return the relation type name."
      end

      operation 8369435 "getObjectName"
	public return_type class_ref 510875 // ObjectName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ObjectName of the
created/removed/updated relation.

@return the ObjectName if the relation is an MBean, otherwise null."
      end

      operation 8369563 "getMBeansToUnregister"
	public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of ObjectNames of MBeans expected to be unregistered
due to a relation removal (only for relation removal).

@return a {@link List} of {@link ObjectName}."
      end

      operation 8369691 "getRoleName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns name of updated role of updated relation (only for role update).

@return the name of the updated role."
      end

      operation 8369819 "getOldRoleValue"
	public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns old value of updated role (only for role update).

@return the old value of the updated role."
      end

      operation 8369947 "getNewRoleValue"
	public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns new value of updated role (only for role update).

@return the new value of the updated role."
      end

      operation 8370075 "initMembers"
	private explicit_return_type "void"
	nparams 13
	  param in name "theNtfKind" explicit_type "int"
	  param in name "theNtfType" explicit_type "String"
	  param inout name "theSrcObj" explicit_type "Object"
	  param in name "TheSeqNbr" explicit_type "long"
	  param in name "theTimeStamp" explicit_type "long"
	  param in name "theMsg" explicit_type "String"
	  param in name "theRelId" explicit_type "String"
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theRelObjName" type class_ref 510875 // ObjectName
	  param inout name "theUnregMBeanList" type class_ref 135579 // List
	  param in name "theRoleName" explicit_type "String"
	  param inout name "theNewRoleValue" type class_ref 135579 // List
	  param inout name "theOldRoleValue" type class_ref 135579 // List
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}, ${t12} ${p12}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Misc

 Initialises members

 -param theNtfKind  1 for creation/removal, 2 for update
 -param theNtfType  type of the notification; either:
  - RELATION_BASIC_UPDATE
  - RELATION_MBEAN_UPDATE
  for an update, or:
  - RELATION_BASIC_CREATION
  - RELATION_MBEAN_CREATION
  - RELATION_BASIC_REMOVAL
  - RELATION_MBEAN_REMOVAL
  for a creation or removal
 -param theSrcObj  source object, sending the notification. Will always
  be a RelationService object.
 -param TheSeqNbr  sequence number to identify the notification
 -param theTimeStamp  time stamp
 -param theMsg  human-readable message describing the notification
 -param theRelId  relation id identifying the relation in the Relation
  Service
 -param theRelTypeName  name of the relation type
 -param theRelObjName  ObjectName of the relation object if it is an MBean
  (null for relations internally handled by the Relation Service)
 -param theUnregMBeanList  list of ObjectNames of MBeans expected to be
  removed due to relation removal
 -param theRoleName  name of the updated role
 -param theNewRoleValue  new value (List of ObjectName objects)
 -param theOldRoleValue  old value (List of ObjectName objects)

 -exception IllegalArgumentException  if:
  - no value for the notification type
  - incorrect notification type
  - no source object
  - the source object is not a Relation Service
  - no relation id
  - no relation type name
  - no role name (for role update)
  - no role old value (for role update)
  - no role new value (for role update)"
      end

      operation 8370203 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link RelationNotification} from an {@link ObjectInputStream}."
      end

      operation 8370331 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link RelationNotification} to an {@link ObjectOutputStream}."
      end
    end

    class 1042843 "RelationService"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The Relation Service is in charge of creating and deleting relation types
and relations, of handling the consistency and of providing query
mechanisms.
<P>It implements the NotificationBroadcaster by extending
NotificationBroadcasterSupport to send notifications when a relation is
removed from it.
<P>It implements the NotificationListener interface to be able to receive
notifications concerning unregistration of MBeans referenced in relation
roles and of relation MBeans.
<P>It implements the MBeanRegistration interface to be able to retrieve
its ObjectName and MBean Server.

@since 1.5"
      classrelation 2070171 // <generalisation>
	relation 2070171 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2070171 // <generalisation>
	  b parent class_ref 516763 // NotificationBroadcasterSupport
      end

      classrelation 2070299 // <realization>
	relation 2070299 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2070299 // <realization>
	  b parent class_ref 1042971 // RelationServiceMBean
      end

      classrelation 2070427 // <realization>
	relation 2070427 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2070427 // <realization>
	  b parent class_ref 517019 // MBeanRegistration
      end

      classrelation 2070555 // <realization>
	relation 2070555 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2070555 // <realization>
	  b parent class_ref 512411 // NotificationListener
      end

      classrelation 2070683 // myRelId2ObjMap (<unidirectional association>)
	relation 2070683 --->
	  a role_name "myRelId2ObjMap" init_value "=  new HashMap()" private
	    comment " Private members

 Map associating:
      <relation id> -> <RelationSupport object/ObjectName>
 depending if the relation has been created using createRelation()
 method (so internally handled) or is an MBean added as a relation by the
 user
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2070683 // myRelId2ObjMap (<unidirectional association>)
	  b parent class_ref 144923 // HashMap
      end

      classrelation 2070811 // myRelId2RelTypeMap (<unidirectional association>)
	relation 2070811 --->
	  a role_name "myRelId2RelTypeMap" init_value "=  new HashMap()" private
	    comment " Map associating:
      <relation id> -> <relation type name>
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2070811 // myRelId2RelTypeMap (<unidirectional association>)
	  b parent class_ref 144923 // HashMap
      end

      classrelation 2070939 // myRelMBeanObjName2RelIdMap (<unidirectional association>)
	relation 2070939 --->
	  a role_name "myRelMBeanObjName2RelIdMap" init_value "=  new HashMap()" private
	    comment " Map associating:
      <relation MBean Object Name> -> <relation id>
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2070939 // myRelMBeanObjName2RelIdMap (<unidirectional association>)
	  b parent class_ref 144923 // HashMap
      end

      classrelation 2071067 // myRelType2ObjMap (<unidirectional association>)
	relation 2071067 --->
	  a role_name "myRelType2ObjMap" init_value "=  new HashMap()" private
	    comment " Map associating:
       <relation type name> -> <RelationType object>
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2071067 // myRelType2ObjMap (<unidirectional association>)
	  b parent class_ref 144923 // HashMap
      end

      classrelation 2071195 // myRelType2RelIdsMap (<unidirectional association>)
	relation 2071195 --->
	  a role_name "myRelType2RelIdsMap" init_value "=  new HashMap()" private
	    comment " Map associating:
       <relation type name> -> ArrayList of <relation id>
 to list all the relations of a given type
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2071195 // myRelType2RelIdsMap (<unidirectional association>)
	  b parent class_ref 144923 // HashMap
      end

      classrelation 2071323 // myRefedMBeanObjName2RelIdsMap (<unidirectional association>)
	relation 2071323 --->
	  a role_name "myRefedMBeanObjName2RelIdsMap" init_value "=  new HashMap()" private
	    comment " Map associating:
       <ObjectName> -> HashMap
 the value HashMap mapping:
       <relation id> -> ArrayList of <role name>
 to track where a given MBean is referenced.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2071323 // myRefedMBeanObjName2RelIdsMap (<unidirectional association>)
	  b parent class_ref 144923 // HashMap
      end

      attribute 3055515 "myPurgeFlg"
	private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Flag to indicate if, when a notification is received for the
 unregistration of an MBean referenced in a relation, if an immediate
 \"purge\" of the relations (look for the relations no
 longer valid) has to be performed , or if that will be performed only
 when the purgeRelations method will be explicitly called.
 true is immediate purge."
      end

      classrelation 2071451 // myNtfSeqNbrCounter (<unidirectional association>)
	relation 2071451 --->
	  a role_name "myNtfSeqNbrCounter" init_value "=  new Long(0)" private
	    comment " Internal counter to provide sequence numbers for notifications sent by:
 - the Relation Service
 - a relation handled by the Relation Service
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2071451 // myNtfSeqNbrCounter (<unidirectional association>)
	  b parent class_ref 277915 // Long
      end

      classrelation 2071579 // myObjName (<unidirectional association>)
	relation 2071579 --->
	  a role_name "myObjName" init_value "=  null" private
	    comment " ObjectName used to register the Relation Service in the MBean Server
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2071579 // myObjName (<unidirectional association>)
	  b parent class_ref 510875 // ObjectName
      end

      classrelation 2071707 // myMBeanServer (<unidirectional association>)
	relation 2071707 --->
	  a role_name "myMBeanServer" init_value "=  null" private
	    comment " MBean Server where the Relation Service is registered
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2071707 // myMBeanServer (<unidirectional association>)
	  b parent class_ref 513179 // MBeanServer
      end

      classrelation 2071835 // myUnregNtfFilter (<unidirectional association>)
	relation 2071835 --->
	  a role_name "myUnregNtfFilter" init_value "=  null" private
	    comment " Filter registered in the MBean Server with the Relation Service to be
 informed of referenced MBean unregistrations
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2071835 // myUnregNtfFilter (<unidirectional association>)
	  b parent class_ref 1041563 // MBeanServerNotificationFilter
      end

      classrelation 2071963 // myUnregNtfList (<unidirectional association>)
	relation 2071963 --->
	  a role_name "myUnregNtfList" init_value "=  new ArrayList()" private
	    comment " List of unregistration notifications received (storage used if purge
 of relations when unregistering a referenced MBean is not immediate but
 on user request)
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2071963 // myUnregNtfList (<unidirectional association>)
	  b parent class_ref 137627 // ArrayList
      end

      operation 8374811 "RelationService"
	public explicit_return_type ""
	nparams 1
	  param inout name "theImmediatePurgeFlg" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructor


Constructor.

@param theImmediatePurgeFlg  flag to indicate when a notification is
received for the unregistration of an MBean referenced in a relation, if
an immediate \"purge\" of the relations (look for the relations no
longer valid) has to be performed , or if that will be performed only
when the purgeRelations method will be explicitly called.
<P>true is immediate purge."
      end

      operation 8374939 "isActive"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the Relation Service is active.
Current condition is that the Relation Service must be registered in the
MBean Server

@exception RelationServiceNotRegisteredException  if it is not
registered"
      end

      operation 8375067 "preRegister"
	public return_type class_ref 510875 // ObjectName
	nparams 2
	  param inout name "server" type class_ref 513179 // MBeanServer
	  param inout name "name" type class_ref 510875 // ObjectName
	nexceptions 1
	  exception class_ref 165403 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " MBeanRegistration interface

 Pre-registration: retrieves its ObjectName and MBean Server

 No exception thrown."
      end

      operation 8375195 "postRegister"
	public explicit_return_type "void"
	nparams 1
	  param inout name "registrationDone" type class_ref 392091 // Boolean
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Post-registration: does nothing"
      end

      operation 8375323 "preDeregister"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 165403 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Pre-unregistration: does nothing"
      end

      operation 8375451 "postDeregister"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Post-unregistration: does nothing"
      end

      operation 8375579 "getPurgeFlag"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Returns the flag to indicate if when a notification is received for the
unregistration of an MBean referenced in a relation, if an immediate
\"purge\" of the relations (look for the relations no longer valid)
has to be performed , or if that will be performed only when the
purgeRelations method will be explicitly called.
<P>true is immediate purge.

@return true if purges are automatic.

@see #setPurgeFlag"
      end

      operation 8375707 "setPurgeFlag"
	public explicit_return_type "void"
	nparams 1
	  param inout name "thePurgeFlg" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the flag to indicate if when a notification is received for the
unregistration of an MBean referenced in a relation, if an immediate
\"purge\" of the relations (look for the relations no longer valid)
has to be performed , or if that will be performed only when the
purgeRelations method will be explicitly called.
<P>true is immediate purge.

@param thePurgeFlg  flag

@see #getPurgeFlag"
      end

      operation 8375835 "getNotificationSequenceNumber"
	private return_type class_ref 277915 // Long
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns internal counter to be used for Sequence Numbers of
 notifications to be raised by:
 - a relation handled by this Relation Service (when updated)
 - the Relation Service"
      end

      operation 8375963 "createRelationType"
	public explicit_return_type "void"
	nparams 2
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theRoleInfoArray" type class_ref 1043099 // RoleInfo
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041179 // InvalidRelationTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Relation type handling


Creates a relation type (a RelationTypeSupport object) with given
role infos (provided by the RoleInfo objects), and adds it in the
Relation Service.

@param theRelTypeName  name of the relation type
@param theRoleInfoArray  array of role infos

@exception IllegalArgumentException  if null parameter
@exception InvalidRelationTypeException  If:
<P>- there is already a relation type with that name
<P>- the same name has been used for two different role infos
<P>- no role info provided
<P>- one null role info provided"
      end

      operation 8376091 "addRelationType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theRelTypeObj" type class_ref 1043227 // RelationType
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041179 // InvalidRelationTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds given object as a relation type. The object is expected to
implement the RelationType interface.

@param theRelTypeObj  relation type object (implementing the
RelationType interface)

@exception IllegalArgumentException  if null parameter
@exception InvalidRelationTypeException  if:
<P>- the same name has been used for two different roles
<P>- no role info provided
<P>- one null role info provided
<P>- there is already a relation type with that name"
      end

      operation 8376219 "getAllRelationTypeNames"
	public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves names of all known relation types.

@return ArrayList of relation type names (Strings)"
      end

      operation 8376347 "getRoleInfos"
	public return_type class_ref 135579 // List
	nparams 1
	  param in name "theRelTypeName" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves list of role infos (RoleInfo objects) of a given relation
type.

@param theRelTypeName  name of relation type

@return ArrayList of RoleInfo.

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if there is no relation type
with that name."
      end

      operation 8376475 "getRoleInfo"
	public return_type class_ref 1043099 // RoleInfo
	nparams 2
	  param in name "theRelTypeName" explicit_type "String"
	  param in name "theRoleInfoName" explicit_type "String"
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1043355 // RoleInfoNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves role info for given role name of a given relation type.

@param theRelTypeName  name of relation type
@param theRoleInfoName  name of role

@return RoleInfo object.

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if the relation type is not
known in the Relation Service
@exception RoleInfoNotFoundException  if the role is not part of the
relation type."
      end

      operation 8376603 "removeRelationType"
	public explicit_return_type "void"
	nparams 1
	  param in name "theRelTypeName" explicit_type "String"
	nexceptions 3
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes given relation type from Relation Service.
<P>The relation objects of that type will be removed from the
Relation Service.

@param theRelTypeName  name of the relation type to be removed

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  If there is no relation type
with that name"
      end

      operation 8376731 "createRelation"
	public explicit_return_type "void"
	nparams 3
	  param in name "theRelId" explicit_type "String"
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	nexceptions 6
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1040795 // InvalidRelationIdException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1041435 // InvalidRoleValueException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Relation handling


Creates a simple relation (represented by a RelationSupport object) of
given relation type, and adds it in the Relation Service.
<P>Roles are initialized according to the role list provided in
parameter. The ones not initialized in this way are set to an empty
ArrayList of ObjectNames.
<P>A RelationNotification, with type RELATION_BASIC_CREATION, is sent.

@param theRelId  relation identifier, to identify uniquely the relation
inside the Relation Service
@param theRelTypeName  name of the relation type (has to be created
in the Relation Service)
@param theRoleList  role list to initialize roles of the relation (can
be null).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter, except the role
list which can be null if no role initialization
@exception RoleNotFoundException  if a value is provided for a role
that does not exist in the relation type
@exception InvalidRelationIdException  if relation id already used
@exception RelationTypeNotFoundException  if relation type not known in
Relation Service
@exception InvalidRoleValueException if:
<P>- the same role name is used for two different roles
<P>- the number of referenced MBeans in given value is less than
expected minimum degree
<P>- the number of referenced MBeans in provided value exceeds expected
maximum degree
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>- an MBean provided for that role does not exist"
      end

      operation 8376859 "addRelation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theRelObjectName" type class_ref 510875 // ObjectName
	nexceptions 9
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 791451 // NoSuchMethodException
	  exception class_ref 1040795 // InvalidRelationIdException
	  exception class_ref 511643 // InstanceNotFoundException
	  exception class_ref 1041051 // InvalidRelationServiceException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1041435 // InvalidRoleValueException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an MBean created by the user (and registered by him in the MBean
Server) as a relation in the Relation Service.
<P>To be added as a relation, the MBean must conform to the
following:
<P>- implement the Relation interface
<P>- have for RelationService ObjectName the ObjectName of current
Relation Service
<P>- have a relation id unique and unused in current Relation Service
<P>- have for relation type a relation type created in the Relation
Service
<P>- have roles conforming to the role info provided in the relation
type.

@param theRelObjectName  ObjectName of the relation MBean to be added.

@exception IllegalArgumentException  if null parameter
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception NoSuchMethodException  If the MBean does not implement the
Relation interface
@exception InvalidRelationIdException  if:
<P>- no relation identifier in MBean
<P>- the relation identifier is already used in the Relation Service
@exception InstanceNotFoundException  if the MBean for given ObjectName
has not been registered
@exception InvalidRelationServiceException  if:
<P>- no Relation Service name in MBean
<P>- the Relation Service name in the MBean is not the one of the
current Relation Service
@exception RelationTypeNotFoundException  if:
<P>- no relation type name in MBean
<P>- the relation type name in MBean does not correspond to a relation
type created in the Relation Service
@exception InvalidRoleValueException  if:
<P>- the number of referenced MBeans in a role is less than
expected minimum degree
<P>- the number of referenced MBeans in a role exceeds expected
maximum degree
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>- an MBean provided for a role does not exist
@exception RoleNotFoundException  if a value is provided for a role
that does not exist in the relation type"
      end

      operation 8376987 "isRelationMBean"
	public return_type class_ref 510875 // ObjectName
	nparams 1
	  param in name "theRelId" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the relation is represented by an MBean (created by the user and
added as a relation in the Relation Service), returns the ObjectName of
the MBean.

@param theRelId  relation id identifying the relation

@return ObjectName of the corresponding relation MBean, or null if
the relation is not an MBean.

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException there is no relation associated
to that id"
      end

      operation 8377115 "isRelation"
	public explicit_return_type "String"
	nparams 1
	  param inout name "theObjName" type class_ref 510875 // ObjectName
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the relation id associated to the given ObjectName if the
MBean has been added as a relation in the Relation Service.

@param theObjName  ObjectName of supposed relation

@return relation id (String) or null (if the ObjectName is not a
relation handled by the Relation Service)

@exception IllegalArgumentException  if null parameter"
      end

      operation 8377243 "hasRelation"
	public return_type class_ref 392091 // Boolean
	nparams 1
	  param in name "theRelId" explicit_type "String"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if there is a relation identified in Relation Service with given
relation id.

@param theRelId  relation id identifying the relation

@return boolean: true if there is a relation, false else

@exception IllegalArgumentException  if null parameter"
      end

      operation 8377371 "getAllRelationIds"
	public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the relation ids for all the relations handled by the
Relation Service.

@return ArrayList of String"
      end

      operation 8377499 "checkRoleReading"
	public return_type class_ref 170395 // Integer
	nparams 2
	  param in name "theRoleName" explicit_type "String"
	  param in name "theRelTypeName" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if given Role can be read in a relation of the given type.

@param theRoleName  name of role to be checked
@param theRelTypeName  name of the relation type

@return an Integer wrapping an integer corresponding to possible
problems represented as constants in RoleUnresolved:
<P>- 0 if role can be read
<P>- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME
<P>- integer corresponding to RoleStatus.ROLE_NOT_READABLE

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if the relation type is not
known in the Relation Service"
      end

      operation 8377627 "checkRoleWriting"
	public return_type class_ref 170395 // Integer
	nparams 3
	  param inout name "theRole" type class_ref 1042331 // Role
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theInitFlg" type class_ref 392091 // Boolean
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if given Role can be set in a relation of given type.

@param theRole  role to be checked
@param theRelTypeName  name of relation type
@param theInitFlg  flag to specify that the checking is done for the
initialization of a role, write access shall not be verified.

@return an Integer wrapping an integer corresponding to possible
problems represented as constants in RoleUnresolved:
<P>- 0 if role can be set
<P>- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME
<P>- integer for RoleStatus.ROLE_NOT_WRITABLE
<P>- integer for RoleStatus.LESS_THAN_MIN_ROLE_DEGREE
<P>- integer for RoleStatus.MORE_THAN_MAX_ROLE_DEGREE
<P>- integer for RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS
<P>- integer for RoleStatus.REF_MBEAN_NOT_REGISTERED

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if unknown relation type"
      end

      operation 8377755 "sendRelationCreationNotification"
	public explicit_return_type "void"
	nparams 1
	  param in name "theRelId" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a notification (RelationNotification) for a relation creation.
The notification type is:
<P>- RelationNotification.RELATION_BASIC_CREATION if the relation is an
object internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_CREATION if the relation is a
MBean added as a relation.
<P>The source object is the Relation Service itself.
<P>It is called in Relation Service createRelation() and
addRelation() methods.

@param theRelId  relation identifier of the updated relation

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if there is no relation for given
relation id"
      end

      operation 8377883 "sendRoleUpdateNotification"
	public explicit_return_type "void"
	nparams 3
	  param in name "theRelId" explicit_type "String"
	  param inout name "theNewRole" type class_ref 1042331 // Role
	  param inout name "theOldRoleValue" type class_ref 135579 // List
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a notification (RelationNotification) for a role update in the
given relation. The notification type is:
<P>- RelationNotification.RELATION_BASIC_UPDATE if the relation is an
object internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_UPDATE if the relation is a
MBean added as a relation.
<P>The source object is the Relation Service itself.
<P>It is called in relation MBean setRole() (for given role) and
setRoles() (for each role) methods (implementation provided in
RelationSupport class).
<P>It is also called in Relation Service setRole() (for given role) and
setRoles() (for each role) methods.

@param theRelId  relation identifier of the updated relation
@param theNewRole  new role (name and new value)
@param theOldRoleValue  old role value (List of ObjectName objects)

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if there is no relation for given
relation id"
      end

      operation 8378011 "sendRelationRemovalNotification"
	public explicit_return_type "void"
	nparams 2
	  param in name "theRelId" explicit_type "String"
	  param inout name "theUnregMBeanList" type class_ref 135579 // List
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a notification (RelationNotification) for a relation removal.
The notification type is:
<P>- RelationNotification.RELATION_BASIC_REMOVAL if the relation is an
object internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_REMOVAL if the relation is a
MBean added as a relation.
<P>The source object is the Relation Service itself.
<P>It is called in Relation Service removeRelation() method.

@param theRelId  relation identifier of the updated relation
@param theUnregMBeanList  List of ObjectNames of MBeans expected
to be unregistered due to relation removal (can be null)

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if there is no relation for given
relation id"
      end

      operation 8378139 "updateRoleMap"
	public explicit_return_type "void"
	nparams 3
	  param in name "theRelId" explicit_type "String"
	  param inout name "theNewRole" type class_ref 1042331 // Role
	  param inout name "theOldRoleValue" type class_ref 135579 // List
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Handles update of the Relation Service role map for the update of given
role in given relation.
<P>It is called in relation MBean setRole() (for given role) and
setRoles() (for each role) methods (implementation provided in
RelationSupport class).
<P>It is also called in Relation Service setRole() (for given role) and
setRoles() (for each role) methods.
<P>To allow the Relation Service to maintain the consistency (in case
of MBean unregistration) and to be able to perform queries, this method
must be called when a role is updated.

@param theRelId  relation identifier of the updated relation
@param theNewRole  new role (name and new value)
@param theOldRoleValue  old role value (List of ObjectName objects)

@exception IllegalArgumentException  if null parameter
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationNotFoundException  if no relation for given id."
      end

      operation 8378267 "removeRelation"
	public explicit_return_type "void"
	nparams 1
	  param in name "theRelId" explicit_type "String"
	nexceptions 3
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes given relation from the Relation Service.
<P>A RelationNotification notification is sent, its type being:
<P>- RelationNotification.RELATION_BASIC_REMOVAL if the relation was
only internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_REMOVAL if the relation is
registered as an MBean.
<P>For MBeans referenced in such relation, nothing will be done,

@param theRelId  relation id of the relation to be removed

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation corresponding to
given relation id"
      end

      operation 8378395 "purgeRelations"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Purges the relations.

<P>Depending on the purgeFlag value, this method is either called
automatically when a notification is received for the unregistration of
an MBean referenced in a relation (if the flag is set to true), or not
(if the flag is set to false).
<P>In that case it is up to the user to call it to maintain the
consistency of the relations. To be kept in mind that if an MBean is
unregistered and the purge not done immediately, if the ObjectName is
reused and assigned to another MBean referenced in a relation, calling
manually this purgeRelations() method will cause trouble, as will
consider the ObjectName as corresponding to the unregistered MBean, not
seeing the new one.

<P>The behavior depends on the cardinality of the role where the
unregistered MBean is referenced:
<P>- if removing one MBean reference in the role makes its number of
references less than the minimum degree, the relation has to be removed.
<P>- if the remaining number of references after removing the MBean
reference is still in the cardinality range, keep the relation and
update it calling its handleMBeanUnregistration() callback.

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server."
      end

      operation 8378523 "findReferencingRelations"
	public return_type class_ref 136603 // Map
	nparams 3
	  param inout name "theMBeanName" type class_ref 510875 // ObjectName
	  param in name "theRelTypeName" explicit_type "String"
	  param in name "theRoleName" explicit_type "String"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the relations where a given MBean is referenced.
<P>This corresponds to the CIM \"References\" and \"ReferenceNames\"
operations.

@param theMBeanName  ObjectName of MBean
@param theRelTypeName  can be null; if specified, only the relations
of that type will be considered in the search. Else all relation types
are considered.
@param theRoleName  can be null; if specified, only the relations
where the MBean is referenced in that role will be returned. Else all
roles are considered.

@return an HashMap, where the keys are the relation ids of the relations
where the MBean is referenced, and the value is, for each key,
an ArrayList of role names (as an MBean can be referenced in several
roles in the same relation).

@exception IllegalArgumentException  if null parameter"
      end

      operation 8378651 "findAssociatedMBeans"
	public return_type class_ref 136603 // Map
	nparams 3
	  param inout name "theMBeanName" type class_ref 510875 // ObjectName
	  param in name "theRelTypeName" explicit_type "String"
	  param in name "theRoleName" explicit_type "String"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the MBeans associated to given one in a relation.
<P>This corresponds to CIM Associators and AssociatorNames operations.

@param theMBeanName  ObjectName of MBean
@param theRelTypeName  can be null; if specified, only the relations
of that type will be considered in the search. Else all
relation types are considered.
@param theRoleName  can be null; if specified, only the relations
where the MBean is referenced in that role will be considered. Else all
roles are considered.

@return an HashMap, where the keys are the ObjectNames of the MBeans
associated to given MBean, and the value is, for each key, an ArrayList
of the relation ids of the relations where the key MBean is
associated to given one (as they can be associated in several different
relations).

@exception IllegalArgumentException  if null parameter"
      end

      operation 8378779 "findRelationsOfType"
	public return_type class_ref 135579 // List
	nparams 1
	  param in name "theRelTypeName" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the relation ids for relations of the given type.

@param theRelTypeName  relation type name

@return an ArrayList of relation ids.

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if there is no relation type
with that name."
      end

      operation 8378907 "getRole"
	public return_type class_ref 135579 // List
	nparams 2
	  param in name "theRelId" explicit_type "String"
	  param in name "theRoleName" explicit_type "String"
	nexceptions 4
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	  exception class_ref 1041819 // RoleNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves role value for given role name in given relation.

@param theRelId  relation id
@param theRoleName  name of role

@return the ArrayList of ObjectName objects being the role value

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id
@exception RoleNotFoundException  if:
<P>- there is no role with given name
<P>or
<P>- the role is not readable.

@see #setRole"
      end

      operation 8379035 "getRoles"
	public return_type class_ref 1042075 // RoleResult
	nparams 2
	  param in name "theRelId" explicit_type "String"
	  param in name "theRoleNameArray" explicit_type "String"
	nexceptions 3
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves values of roles with given names in given relation.

@param theRelId  relation id
@param theRoleNameArray  array of names of roles to be retrieved

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
retrieved).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id

@see #setRoles"
      end

      operation 8379163 "getAllRoles"
	public return_type class_ref 1042075 // RoleResult
	nparams 1
	  param in name "theRelId" explicit_type "String"
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all roles present in the relation.

@param theRelId  relation id

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
readable).

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation for given id
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server"
      end

      operation 8379291 "getRoleCardinality"
	public return_type class_ref 170395 // Integer
	nparams 2
	  param in name "theRelId" explicit_type "String"
	  param in name "theRoleName" explicit_type "String"
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	  exception class_ref 1041819 // RoleNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of MBeans currently referenced in the given role.

@param theRelId  relation id
@param theRoleName  name of role

@return the number of currently referenced MBeans in that role

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id
@exception RoleNotFoundException  if there is no role with given name"
      end

      operation 8379419 "setRole"
	public explicit_return_type "void"
	nparams 2
	  param in name "theRelId" explicit_type "String"
	  param inout name "theRole" type class_ref 1042331 // Role
	nexceptions 5
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1041435 // InvalidRoleValueException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given role in given relation.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>The Relation Service will keep track of the change to keep the
consistency of relations by handling referenced MBean unregistrations.

@param theRelId  relation id
@param theRole  role to be set (name and new value)

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id
@exception RoleNotFoundException  if the role does not exist or is not
writable
@exception InvalidRoleValueException  if value provided for role is not
valid:
<P>- the number of referenced MBeans in given value is less than
expected minimum degree
<P>or
<P>- the number of referenced MBeans in provided value exceeds expected
maximum degree
<P>or
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>or
<P>- an MBean provided for that role does not exist

@see #getRole"
      end

      operation 8379547 "setRoles"
	public return_type class_ref 1042075 // RoleResult
	nparams 2
	  param in name "theRelId" explicit_type "String"
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	nexceptions 3
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given roles in given relation.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>The Relation Service keeps track of the changes to keep the
consistency of relations by handling referenced MBean unregistrations.

@param theRelId  relation id
@param theRoleList  list of roles to be set

@return a RoleResult object, including a RoleList (for roles
successfully set) and a RoleUnresolvedList (for roles not
set).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id

@see #getRoles"
      end

      operation 8379675 "getReferencedMBeans"
	public return_type class_ref 136603 // Map
	nparams 1
	  param in name "theRelId" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves MBeans referenced in the various roles of the relation.

@param theRelId  relation id

@return a HashMap mapping:
<P> ObjectName -> ArrayList of String (role
names)

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation for given
relation id"
      end

      operation 8379803 "getRelationTypeName"
	public explicit_return_type "String"
	nparams 1
	  param in name "theRelId" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns name of associated relation type for given relation.

@param theRelId  relation id

@return the name of the associated relation type.

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation for given
relation id"
      end

      operation 8379931 "handleNotification"
	public explicit_return_type "void"
	nparams 2
	  param inout name "theNtf" type class_ref 513819 // Notification
	  param inout name "theHandback" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NotificationListener Interface


Invoked when a JMX notification occurs.
Currently handles notifications for unregistration of MBeans, either
referenced in a relation role or being a relation itself.

@param theNtf  The notification.
@param theHandback  An opaque object which helps the listener to
associate information regarding the MBean emitter (can be null)."
      end

      operation 8380059 "getNotificationInfo"
	public return_type class_ref 516635 // MBeanNotificationInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NotificationBroadcaster interface


Returns a NotificationInfo object containing the name of the Java class
of the notification and the notification types sent."
      end

      operation 8380187 "addRelationTypeInt"
	private explicit_return_type "void"
	nparams 1
	  param inout name "theRelTypeObj" type class_ref 1043227 // RelationType
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041179 // InvalidRelationTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Misc

 Adds given object as a relation type.

 -param theRelTypeObj  relation type object

 -exception IllegalArgumentException  if null parameter
 -exception InvalidRelationTypeException  if there is already a relation
  type with that name"
      end

      operation 8380315 "getRelationType"
	package return_type class_ref 1043227 // RelationType
	nparams 1
	  param in name "theRelTypeName" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieves relation type with given name

 -param theRelTypeName  expected name of a relation type created in the
  Relation Service

 -return RelationType object corresponding to given name

 -exception IllegalArgumentException  if null parameter
 -exception RelationTypeNotFoundException  if no relation type for that
  name created in Relation Service"
      end

      operation 8380443 "getRelation"
	package explicit_return_type "Object"
	nparams 1
	  param in name "theRelId" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieves relation corresponding to given relation id.
 Returns either:
 - a RelationSupport object if the relation is internal
 or
 - the ObjectName of the corresponding MBean

 -param theRelId  expected relation id

 -return RelationSupport object or ObjectName of relation with given id

 -exception IllegalArgumentException  if null parameter
 -exception RelationNotFoundException  if no relation for that
  relation id created in Relation Service"
      end

      operation 8380571 "addNewMBeanReference"
	private explicit_return_type "boolean"
	nparams 3
	  param inout name "theObjName" type class_ref 510875 // ObjectName
	  param in name "theRelId" explicit_type "String"
	  param in name "theRoleName" explicit_type "String"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds a new MBean reference (reference to an ObjectName) in the
 referenced MBean map (myRefedMBeanObjName2RelIdsMap).

 -param theObjName  ObjectName of new referenced MBean
 -param theRelId  relation id of the relation where the MBean is
  referenced
 -param theRoleName  name of the role where the MBean is referenced

 -return boolean:
  - true  if the MBean was not referenced before, so really a new
    reference
  - false else

 -exception IllegalArgumentException  if null parameter"
      end

      operation 8380699 "removeMBeanReference"
	private explicit_return_type "boolean"
	nparams 4
	  param inout name "theObjName" type class_ref 510875 // ObjectName
	  param in name "theRelId" explicit_type "String"
	  param in name "theRoleName" explicit_type "String"
	  param inout name "theAllRolesFlg" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Removes an obsolete MBean reference (reference to an ObjectName) in
 the referenced MBean map (myRefedMBeanObjName2RelIdsMap).

 -param theObjName  ObjectName of MBean no longer referenced
 -param theRelId  relation id of the relation where the MBean was
  referenced
 -param theRoleName  name of the role where the MBean was referenced
 -param theAllRolesFlg  flag, if true removes reference to MBean for all
  roles in the relation, not only for the one above

 -return boolean:
  - true  if the MBean is no longer reference in any relation
  - false else

 -exception IllegalArgumentException  if null parameter"
      end

      operation 8380827 "updateUnregistrationListener"
	private explicit_return_type "void"
	nparams 2
	  param inout name "theNewRefList" type class_ref 135579 // List
	  param inout name "theObsRefList" type class_ref 135579 // List
	nexceptions 1
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Updates the listener registered to the MBean Server to be informed of
 referenced MBean unregistrations

 -param theNewRefList  ArrayList of ObjectNames for new references done
  to MBeans (can be null)
 -param theObsRefList  ArrayList of ObjectNames for obsolete references
  to MBeans (can be null)

 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server."
      end

      operation 8380955 "addRelationInt"
	private explicit_return_type "void"
	nparams 6
	  param inout name "theRelBaseFlg" explicit_type "boolean"
	  param inout name "theRelObj" type class_ref 1043483 // RelationSupport
	  param inout name "theRelObjName" type class_ref 510875 // ObjectName
	  param in name "theRelId" explicit_type "String"
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	nexceptions 6
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1040795 // InvalidRelationIdException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1041435 // InvalidRoleValueException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds a relation (being either a RelationSupport object or an MBean
 referenced using its ObjectName) in the Relation Service.
 Will send a notification RelationNotification with type:
 - RelationNotification.RELATION_BASIC_CREATION for internal relation
   creation
 - RelationNotification.RELATION_MBEAN_CREATION for an MBean being added
   as a relation.

 -param theRelBaseFlg  flag true if the relation is a RelationSupport
  object, false if it is an MBean
 -param theRelObj  RelationSupport object (if relation is internal)
 -param theRelObjName  ObjectName of the MBean to be added as a relation
  (only for the relation MBean)
 -param theRelId  relation identifier, to uniquely identify the relation
  inside the Relation Service
 -param theRelTypeName  name of the relation type (has to be created
  in the Relation Service)
 -param theRoleList  role list to initialize roles of the relation
  (can be null)

 -exception IllegalArgumentException  if null paramater
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception RoleNotFoundException  if a value is provided for a role
  that does not exist in the relation type
 -exception InvalidRelationIdException  if relation id already used
 -exception RelationTypeNotFoundException  if relation type not known in
  Relation Service
 -exception InvalidRoleValueException if:
  - the same role name is used for two different roles
  - the number of referenced MBeans in given value is less than
    expected minimum degree
  - the number of referenced MBeans in provided value exceeds expected
    maximum degree
  - one referenced MBean in the value is not an Object of the MBean
    class expected for that role
  - an MBean provided for that role does not exist"
      end

      operation 8381083 "checkRoleInt"
	private return_type class_ref 170395 // Integer
	nparams 5
	  param in name "theChkType" explicit_type "int"
	  param in name "theRoleName" explicit_type "String"
	  param inout name "theRoleValue" type class_ref 135579 // List
	  param inout name "theRoleInfo" type class_ref 1043099 // RoleInfo
	  param inout name "theWriteChkFlg" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks that given role conforms to given role info.

 -param theChkType  type of check:
  - 1: read, just check read access
  - 2: write, check value and write access if theWriteChkFlg
 -param theRoleName  role name
 -param theRoleValue  role value
 -param theRoleInfo  corresponding role info
 -param theWriteChkFlg  boolean to specify a current write access and
  to check it

 -return Integer with value:
  - 0: ok
  - RoleStatus.NO_ROLE_WITH_NAME
  - RoleStatus.ROLE_NOT_READABLE
  - RoleStatus.ROLE_NOT_WRITABLE
  - RoleStatus.LESS_THAN_MIN_ROLE_DEGREE
  - RoleStatus.MORE_THAN_MAX_ROLE_DEGREE
  - RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS
  - RoleStatus.REF_MBEAN_NOT_REGISTERED

 -exception IllegalArgumentException  if null parameter"
      end

      operation 8381211 "initialiseMissingRoles"
	private explicit_return_type "void"
	nparams 6
	  param inout name "theRelBaseFlg" explicit_type "boolean"
	  param inout name "theRelObj" type class_ref 1043483 // RelationSupport
	  param inout name "theRelObjName" type class_ref 510875 // ObjectName
	  param in name "theRelId" explicit_type "String"
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theRoleInfoList" type class_ref 135579 // List
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1041435 // InvalidRoleValueException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialises roles associated to given role infos to default value (empty
 ArrayList of ObjectNames) in given relation.
 It will succeed for every role except if the role info has a minimum
 cardinality greater than 0. In that case, an InvalidRoleValueException
 will be raised.

 -param theRelBaseFlg  flag true if the relation is a RelationSupport
  object, false if it is an MBean
 -param theRelObj  RelationSupport object (if relation is internal)
 -param theRelObjName  ObjectName of the MBean to be added as a relation
  (only for the relation MBean)
 -param theRelId  relation id
 -param theRelTypeName  name of the relation type (has to be created
  in the Relation Service)
 -param theRoleInfoList  list of role infos for roles to be defaulted

 -exception IllegalArgumentException  if null paramater
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception InvalidRoleValueException  if role must have a non-empty
  value
 Revisit [cebro] Handle CIM qualifiers as REQUIRED to detect roles which
    should have been initialized by the user"
      end

      operation 8381339 "throwRoleProblemException"
	class_operation package explicit_return_type "void"
	nparams 2
	  param in name "thePbType" explicit_type "int"
	  param in name "theRoleName" explicit_type "String"
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1041435 // InvalidRoleValueException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Throws an exception corresponding to a given problem type

 -param thePbType  possible problem, defined in RoleUnresolved
 -param theRoleName  role name

 -exception IllegalArgumentException  if null parameter
 -exception RoleNotFoundException  for problems:
  - NO_ROLE_WITH_NAME
  - ROLE_NOT_READABLE
  - ROLE_NOT_WRITABLE
 -exception InvalidRoleValueException  for problems:
  - LESS_THAN_MIN_ROLE_DEGREE
  - MORE_THAN_MAX_ROLE_DEGREE
  - REF_MBEAN_OF_INCORRECT_CLASS
  - REF_MBEAN_NOT_REGISTERED"
      end

      operation 8381467 "sendNotificationInt"
	private explicit_return_type "void"
	nparams 7
	  param in name "theIntNtfType" explicit_type "int"
	  param in name "theMsg" explicit_type "String"
	  param in name "theRelId" explicit_type "String"
	  param inout name "theUnregMBeanList" type class_ref 135579 // List
	  param in name "theRoleName" explicit_type "String"
	  param inout name "theRoleNewValue" type class_ref 135579 // List
	  param inout name "theOldRoleValue" type class_ref 135579 // List
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sends a notification of given type, with given parameters

 -param theIntNtfType  integer to represent notification type:
  - 1 : create
  - 2 : update
  - 3 : delete
 -param theMsg  human-readable message
 -param theRelId  relation id of the created/updated/deleted relation
 -param theUnregMBeanList  list of ObjectNames of referenced MBeans
  expected to be unregistered due to relation removal (only for removal,
  due to CIM qualifiers, can be null)
 -param theRoleName  role name
 -param theRoleNewValue  role new value (ArrayList of ObjectNames)
 -param theOldRoleValue  old role value (ArrayList of ObjectNames)

 -exception IllegalArgument  if null parameter
 -exception RelationNotFoundException  if no relation for given id"
      end

      operation 8381595 "handleReferenceUnregistration"
	private explicit_return_type "void"
	nparams 3
	  param in name "theRelId" explicit_type "String"
	  param inout name "theObjName" type class_ref 510875 // ObjectName
	  param inout name "theRoleNameList" type class_ref 135579 // List
	nexceptions 4
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1042587 // RelationNotFoundException
	  exception class_ref 1041819 // RoleNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks, for the unregistration of an MBean referenced in the roles given
 in parameter, if the relation has to be removed or not, regarding
 expected minimum role cardinality and current number of
 references in each role after removal of the current one.
 If the relation is kept, calls handleMBeanUnregistration() callback of
 the relation to update it.

 -param theRelId  relation id
 -param theObjName  ObjectName of the unregistered MBean
 -param theRoleNameList  list of names of roles where the unregistered
  MBean is referenced.

 -exception IllegalArgumentException  if null parameter
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception RelationNotFoundException  if unknown relation id
 -exception RoleNotFoundException  if one role given as parameter does
  not exist in the relation"
      end

      attribute 3055643 "localClassName"
	class_attribute private explicit_type "String"
	init_value "=  \"RelationService\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " stuff for Tracing"
      end

      operation 8381723 "isTraceOn"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " trace level"
      end

      operation 8381851 "trace"
	private explicit_return_type "void"
	nparams 2
	  param in name "methodName" explicit_type "String"
	  param in name "info" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    private void trace(String className, String methodName, String info) {
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_RELATION, className, methodName, info);
    }"
      end

      operation 8381979 "isDebugOn"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    private void trace(String className, String methodName, Exception e) {
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_RELATION, className, methodName, e);
    }
    private void trace(String methodName, Exception e) {
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_RELATION, localClassName, methodName, e);
    }
 debug level"
      end

      operation 8382107 "debug"
	private explicit_return_type "void"
	nparams 2
	  param in name "methodName" explicit_type "String"
	  param in name "info" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    private void debug(String className, String methodName, String info) {
        Trace.send(Trace.LEVEL_DEBUG, Trace.INFO_RELATION, className, methodName, info);
    }"
      end
    end

    class 1042971 "RelationServiceMBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The Relation Service is in charge of creating and deleting relation types
and relations, of handling the consistency and of providing query
mechanisms.

@since 1.5"
      operation 8370459 "isActive"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the Relation Service is active.
Current condition is that the Relation Service must be registered in the
MBean Server

@exception RelationServiceNotRegisteredException  if it is not
registered"
      end

      operation 8370587 "getPurgeFlag"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Returns the flag to indicate if when a notification is received for the
unregistration of an MBean referenced in a relation, if an immediate
\"purge\" of the relations (look for the relations no longer valid)
has to be performed, or if that will be performed only when the
purgeRelations method is explicitly called.
<P>true is immediate purge.

@return true if purges are immediate.

@see #setPurgeFlag"
      end

      operation 8370715 "setPurgeFlag"
	public explicit_return_type "void"
	nparams 1
	  param inout name "thePurgeFlg" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the flag to indicate if when a notification is received for the
unregistration of an MBean referenced in a relation, if an immediate
\"purge\" of the relations (look for the relations no longer valid)
has to be performed, or if that will be performed only when the
purgeRelations method is explicitly called.
<P>true is immediate purge.

@param thePurgeFlg  flag

@see #getPurgeFlag"
      end

      operation 8370843 "createRelationType"
	public explicit_return_type "void"
	nparams 2
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theRoleInfoArray" type class_ref 1043099 // RoleInfo
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041179 // InvalidRelationTypeException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Relation type handling


Creates a relation type (RelationTypeSupport object) with given
role infos (provided by the RoleInfo objects), and adds it in the
Relation Service.

@param theRelTypeName  name of the relation type
@param theRoleInfoArray  array of role infos

@exception IllegalArgumentException  if null parameter
@exception InvalidRelationTypeException  If:
<P>- there is already a relation type with that name
<P>- the same name has been used for two different role infos
<P>- no role info provided
<P>- one null role info provided"
      end

      operation 8370971 "addRelationType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theRelTypeObj" type class_ref 1043227 // RelationType
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041179 // InvalidRelationTypeException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds given object as a relation type. The object is expected to
implement the RelationType interface.

@param theRelTypeObj  relation type object (implementing the
RelationType interface)

@exception IllegalArgumentException  if null parameter
@exception InvalidRelationTypeException  if there is already a relation
type with that name"
      end

      operation 8371099 "getAllRelationTypeNames"
	public return_type class_ref 135579 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves names of all known relation types.

@return ArrayList of relation type names (Strings)"
      end

      operation 8371227 "getRoleInfos"
	public return_type class_ref 135579 // List
	nparams 1
	  param in name "theRelTypeName" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves list of role infos (RoleInfo objects) of a given relation
type.

@param theRelTypeName  name of relation type

@return ArrayList of RoleInfo.

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if there is no relation type
with that name."
      end

      operation 8371355 "getRoleInfo"
	public return_type class_ref 1043099 // RoleInfo
	nparams 2
	  param in name "theRelTypeName" explicit_type "String"
	  param in name "theRoleInfoName" explicit_type "String"
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1043355 // RoleInfoNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves role info for given role of a given relation type.

@param theRelTypeName  name of relation type
@param theRoleInfoName  name of role

@return RoleInfo object.

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if the relation type is not
known in the Relation Service
@exception RoleInfoNotFoundException  if the role is not part of the
relation type."
      end

      operation 8371483 "removeRelationType"
	public explicit_return_type "void"
	nparams 1
	  param in name "theRelTypeName" explicit_type "String"
	nexceptions 3
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes given relation type from Relation Service.
<P>The relation objects of that type will be removed from the
Relation Service.

@param theRelTypeName  name of the relation type to be removed

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  If there is no relation type
with that name"
      end

      operation 8371611 "createRelation"
	public explicit_return_type "void"
	nparams 3
	  param in name "theRelId" explicit_type "String"
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	nexceptions 6
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1040795 // InvalidRelationIdException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1041435 // InvalidRoleValueException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Relation handling


Creates a simple relation (represented by a RelationSupport object) of
given relation type, and adds it in the Relation Service.
<P>Roles are initialized according to the role list provided in
parameter. The ones not initialized in this way are set to an empty
ArrayList of ObjectNames.
<P>A RelationNotification, with type RELATION_BASIC_CREATION, is sent.

@param theRelId  relation identifier, to identify uniquely the relation
inside the Relation Service
@param theRelTypeName  name of the relation type (has to be created
in the Relation Service)
@param theRoleList  role list to initialize roles of the relation (can
be null).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RoleNotFoundException  if a value is provided for a role
that does not exist in the relation type
@exception InvalidRelationIdException  if relation id already used
@exception RelationTypeNotFoundException  if relation type not known in
Relation Service
@exception InvalidRoleValueException if:
<P>- the same role name is used for two different roles
<P>- the number of referenced MBeans in given value is less than
expected minimum degree
<P>- the number of referenced MBeans in provided value exceeds expected
maximum degree
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>- an MBean provided for that role does not exist"
      end

      operation 8371739 "addRelation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theRelObjectName" type class_ref 510875 // ObjectName
	nexceptions 9
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 791451 // NoSuchMethodException
	  exception class_ref 1040795 // InvalidRelationIdException
	  exception class_ref 511643 // InstanceNotFoundException
	  exception class_ref 1041051 // InvalidRelationServiceException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1041435 // InvalidRoleValueException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an MBean created by the user (and registered by him in the MBean
Server) as a relation in the Relation Service.
<P>To be added as a relation, the MBean must conform to the
following:
<P>- implement the Relation interface
<P>- have for RelationService ObjectName the ObjectName of current
Relation Service
<P>- have a relation id that is unique and unused in current Relation Service
<P>- have for relation type a relation type created in the Relation
Service
<P>- have roles conforming to the role info provided in the relation
type.

@param theRelObjectName  ObjectName of the relation MBean to be added.

@exception IllegalArgumentException  if null parameter
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception NoSuchMethodException  If the MBean does not implement the
Relation interface
@exception InvalidRelationIdException  if:
<P>- no relation identifier in MBean
<P>- the relation identifier is already used in the Relation Service
@exception InstanceNotFoundException  if the MBean for given ObjectName
has not been registered
@exception InvalidRelationServiceException  if:
<P>- no Relation Service name in MBean
<P>- the Relation Service name in the MBean is not the one of the
current Relation Service
@exception RelationTypeNotFoundException  if:
<P>- no relation type name in MBean
<P>- the relation type name in MBean does not correspond to a relation
type created in the Relation Service
@exception InvalidRoleValueException  if:
<P>- the number of referenced MBeans in a role is less than
expected minimum degree
<P>- the number of referenced MBeans in a role exceeds expected
maximum degree
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>- an MBean provided for a role does not exist
@exception RoleNotFoundException  if a value is provided for a role
that does not exist in the relation type"
      end

      operation 8371867 "isRelationMBean"
	public return_type class_ref 510875 // ObjectName
	nparams 1
	  param in name "theRelId" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the relation is represented by an MBean (created by the user and
added as a relation in the Relation Service), returns the ObjectName of
the MBean.

@param theRelId  relation id identifying the relation

@return ObjectName of the corresponding relation MBean, or null if
the relation is not an MBean.

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException there is no relation associated
to that id"
      end

      operation 8371995 "isRelation"
	public explicit_return_type "String"
	nparams 1
	  param inout name "theObjName" type class_ref 510875 // ObjectName
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the relation id associated to the given ObjectName if the
MBean has been added as a relation in the Relation Service.

@param theObjName  ObjectName of supposed relation

@return relation id (String) or null (if the ObjectName is not a
relation handled by the Relation Service)

@exception IllegalArgumentException  if null parameter"
      end

      operation 8372123 "hasRelation"
	public return_type class_ref 392091 // Boolean
	nparams 1
	  param in name "theRelId" explicit_type "String"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if there is a relation identified in Relation Service with given
relation id.

@param theRelId  relation id identifying the relation

@return boolean: true if there is a relation, false else

@exception IllegalArgumentException  if null parameter"
      end

      operation 8372251 "getAllRelationIds"
	public return_type class_ref 135579 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the relation ids for all the relations handled by the
Relation Service.

@return ArrayList of String"
      end

      operation 8372379 "checkRoleReading"
	public return_type class_ref 170395 // Integer
	nparams 2
	  param in name "theRoleName" explicit_type "String"
	  param in name "theRelTypeName" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if given Role can be read in a relation of the given type.

@param theRoleName  name of role to be checked
@param theRelTypeName  name of the relation type

@return an Integer wrapping an integer corresponding to possible
problems represented as constants in RoleUnresolved:
<P>- 0 if role can be read
<P>- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME
<P>- integer corresponding to RoleStatus.ROLE_NOT_READABLE

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if the relation type is not
known in the Relation Service"
      end

      operation 8372507 "checkRoleWriting"
	public return_type class_ref 170395 // Integer
	nparams 3
	  param inout name "theRole" type class_ref 1042331 // Role
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theInitFlg" type class_ref 392091 // Boolean
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if given Role can be set in a relation of given type.

@param theRole  role to be checked
@param theRelTypeName  name of relation type
@param theInitFlg  flag to specify that the checking is done for the
initialization of a role, write access shall not be verified.

@return an Integer wrapping an integer corresponding to possible
problems represented as constants in RoleUnresolved:
<P>- 0 if role can be set
<P>- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME
<P>- integer for RoleStatus.ROLE_NOT_WRITABLE
<P>- integer for RoleStatus.LESS_THAN_MIN_ROLE_DEGREE
<P>- integer for RoleStatus.MORE_THAN_MAX_ROLE_DEGREE
<P>- integer for RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS
<P>- integer for RoleStatus.REF_MBEAN_NOT_REGISTERED

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if unknown relation type"
      end

      operation 8372635 "sendRelationCreationNotification"
	public explicit_return_type "void"
	nparams 1
	  param in name "theRelId" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a notification (RelationNotification) for a relation creation.
The notification type is:
<P>- RelationNotification.RELATION_BASIC_CREATION if the relation is an
object internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_CREATION if the relation is a
MBean added as a relation.
<P>The source object is the Relation Service itself.
<P>It is called in Relation Service createRelation() and
addRelation() methods.

@param theRelId  relation identifier of the updated relation

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if there is no relation for given
relation id"
      end

      operation 8372763 "sendRoleUpdateNotification"
	public explicit_return_type "void"
	nparams 3
	  param in name "theRelId" explicit_type "String"
	  param inout name "theNewRole" type class_ref 1042331 // Role
	  param inout name "theOldRoleValue" type class_ref 135579 // List
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a notification (RelationNotification) for a role update in the
given relation. The notification type is:
<P>- RelationNotification.RELATION_BASIC_UPDATE if the relation is an
object internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_UPDATE if the relation is a
MBean added as a relation.
<P>The source object is the Relation Service itself.
<P>It is called in relation MBean setRole() (for given role) and
setRoles() (for each role) methods (implementation provided in
RelationSupport class).
<P>It is also called in Relation Service setRole() (for given role) and
setRoles() (for each role) methods.

@param theRelId  relation identifier of the updated relation
@param theNewRole  new role (name and new value)
@param theOldRoleValue  old role value (List of ObjectName objects)

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if there is no relation for given
relation id"
      end

      operation 8372891 "sendRelationRemovalNotification"
	public explicit_return_type "void"
	nparams 2
	  param in name "theRelId" explicit_type "String"
	  param inout name "theUnregMBeanList" type class_ref 135579 // List
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a notification (RelationNotification) for a relation removal.
The notification type is:
<P>- RelationNotification.RELATION_BASIC_REMOVAL if the relation is an
object internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_REMOVAL if the relation is a
MBean added as a relation.
<P>The source object is the Relation Service itself.
<P>It is called in Relation Service removeRelation() method.

@param theRelId  relation identifier of the updated relation
@param theUnregMBeanList  List of ObjectNames of MBeans expected
to be unregistered due to relation removal (can be null)

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if there is no relation for given
relation id"
      end

      operation 8373019 "updateRoleMap"
	public explicit_return_type "void"
	nparams 3
	  param in name "theRelId" explicit_type "String"
	  param inout name "theNewRole" type class_ref 1042331 // Role
	  param inout name "theOldRoleValue" type class_ref 135579 // List
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1042587 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Handles update of the Relation Service role map for the update of given
role in given relation.
<P>It is called in relation MBean setRole() (for given role) and
setRoles() (for each role) methods (implementation provided in
RelationSupport class).
<P>It is also called in Relation Service setRole() (for given role) and
setRoles() (for each role) methods.
<P>To allow the Relation Service to maintain the consistency (in case
of MBean unregistration) and to be able to perform queries, this method
must be called when a role is updated.

@param theRelId  relation identifier of the updated relation
@param theNewRole  new role (name and new value)
@param theOldRoleValue  old role value (List of ObjectName objects)

@exception IllegalArgumentException  if null parameter
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationNotFoundException  if no relation for given id."
      end

      operation 8373147 "removeRelation"
	public explicit_return_type "void"
	nparams 1
	  param in name "theRelId" explicit_type "String"
	nexceptions 3
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes given relation from the Relation Service.
<P>A RelationNotification notification is sent, its type being:
<P>- RelationNotification.RELATION_BASIC_REMOVAL if the relation was
only internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_REMOVAL if the relation is
registered as an MBean.
<P>For MBeans referenced in such relation, nothing will be done,

@param theRelId  relation id of the relation to be removed

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation corresponding to
given relation id"
      end

      operation 8373275 "purgeRelations"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Purges the relations.

<P>Depending on the purgeFlag value, this method is either called
automatically when a notification is received for the unregistration of
an MBean referenced in a relation (if the flag is set to true), or not
(if the flag is set to false).
<P>In that case it is up to the user to call it to maintain the
consistency of the relations. To be kept in mind that if an MBean is
unregistered and the purge not done immediately, if the ObjectName is
reused and assigned to another MBean referenced in a relation, calling
manually this purgeRelations() method will cause trouble, as will
consider the ObjectName as corresponding to the unregistered MBean, not
seeing the new one.

<P>The behavior depends on the cardinality of the role where the
unregistered MBean is referenced:
<P>- if removing one MBean reference in the role makes its number of
references less than the minimum degree, the relation has to be removed.
<P>- if the remaining number of references after removing the MBean
reference is still in the cardinality range, keep the relation and
update it calling its handleMBeanUnregistration() callback.

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server."
      end

      operation 8373403 "findReferencingRelations"
	public return_type class_ref 136603 // Map
	nparams 3
	  param inout name "theMBeanName" type class_ref 510875 // ObjectName
	  param in name "theRelTypeName" explicit_type "String"
	  param in name "theRoleName" explicit_type "String"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the relations where a given MBean is referenced.
<P>This corresponds to the CIM \"References\" and \"ReferenceNames\"
operations.

@param theMBeanName  ObjectName of MBean
@param theRelTypeName  can be null; if specified, only the relations
of that type will be considered in the search. Else all relation types
are considered.
@param theRoleName  can be null; if specified, only the relations
where the MBean is referenced in that role will be returned. Else all
roles are considered.

@return an HashMap, where the keys are the relation ids of the relations
where the MBean is referenced, and the value is, for each key,
an ArrayList of role names (as an MBean can be referenced in several
roles in the same relation).

@exception IllegalArgumentException  if null parameter"
      end

      operation 8373531 "findAssociatedMBeans"
	public return_type class_ref 136603 // Map
	nparams 3
	  param inout name "theMBeanName" type class_ref 510875 // ObjectName
	  param in name "theRelTypeName" explicit_type "String"
	  param in name "theRoleName" explicit_type "String"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the MBeans associated to given one in a relation.
<P>This corresponds to CIM Associators and AssociatorNames operations.

@param theMBeanName  ObjectName of MBean
@param theRelTypeName  can be null; if specified, only the relations
of that type will be considered in the search. Else all
relation types are considered.
@param theRoleName  can be null; if specified, only the relations
where the MBean is referenced in that role will be considered. Else all
roles are considered.

@return an HashMap, where the keys are the ObjectNames of the MBeans
associated to given MBean, and the value is, for each key, an ArrayList
of the relation ids of the relations where the key MBean is
associated to given one (as they can be associated in several different
relations).

@exception IllegalArgumentException  if null parameter"
      end

      operation 8373659 "findRelationsOfType"
	public return_type class_ref 135579 // List
	nparams 1
	  param in name "theRelTypeName" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the relation ids for relations of the given type.

@param theRelTypeName  relation type name

@return an ArrayList of relation ids.

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if there is no relation type
with that name."
      end

      operation 8373787 "getRole"
	public return_type class_ref 135579 // List
	nparams 2
	  param in name "theRelId" explicit_type "String"
	  param in name "theRoleName" explicit_type "String"
	nexceptions 4
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	  exception class_ref 1041819 // RoleNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves role value for given role name in given relation.

@param theRelId  relation id
@param theRoleName  name of role

@return the ArrayList of ObjectName objects being the role value

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id
@exception RoleNotFoundException  if:
<P>- there is no role with given name
<P>or
<P>- the role is not readable.

@see #setRole"
      end

      operation 8373915 "getRoles"
	public return_type class_ref 1042075 // RoleResult
	nparams 2
	  param in name "theRelId" explicit_type "String"
	  param in name "theRoleNameArray" explicit_type "String"
	nexceptions 3
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves values of roles with given names in given relation.

@param theRelId  relation id
@param theRoleNameArray  array of names of roles to be retrieved

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
retrieved).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id

@see #setRoles"
      end

      operation 8374043 "getAllRoles"
	public return_type class_ref 1042075 // RoleResult
	nparams 1
	  param in name "theRelId" explicit_type "String"
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all roles present in the relation.

@param theRelId  relation id

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
readable).

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation for given id
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server"
      end

      operation 8374171 "getRoleCardinality"
	public return_type class_ref 170395 // Integer
	nparams 2
	  param in name "theRelId" explicit_type "String"
	  param in name "theRoleName" explicit_type "String"
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	  exception class_ref 1041819 // RoleNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of MBeans currently referenced in the
given role.

@param theRelId  relation id
@param theRoleName  name of role

@return the number of currently referenced MBeans in that role

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id
@exception RoleNotFoundException  if there is no role with given name"
      end

      operation 8374299 "setRole"
	public explicit_return_type "void"
	nparams 2
	  param in name "theRelId" explicit_type "String"
	  param inout name "theRole" type class_ref 1042331 // Role
	nexceptions 6
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1041435 // InvalidRoleValueException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given role in given relation.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>The Relation Service will keep track of the change to keep the
consistency of relations by handling referenced MBean unregistrations.

@param theRelId  relation id
@param theRole  role to be set (name and new value)

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id
@exception RoleNotFoundException  if:
<P>- internal relation
<P>and
<P>- the role does not exist or is not writable
@exception InvalidRoleValueException  if internal relation and value
provided for role is not valid:
<P>- the number of referenced MBeans in given value is less than
expected minimum degree
<P>or
<P>- the number of referenced MBeans in provided value exceeds expected
maximum degree
<P>or
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>or
<P>- an MBean provided for that role does not exist
@exception RelationTypeNotFoundException  if unknown relation type

@see #getRole"
      end

      operation 8374427 "setRoles"
	public return_type class_ref 1042075 // RoleResult
	nparams 2
	  param in name "theRelId" explicit_type "String"
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	nexceptions 3
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given roles in given relation.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>The Relation Service keeps track of the changes to keep the
consistency of relations by handling referenced MBean unregistrations.

@param theRelId  relation id
@param theRoleList  list of roles to be set

@return a RoleResult object, including a RoleList (for roles
successfully set) and a RoleUnresolvedList (for roles not
set).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id

@see #getRoles"
      end

      operation 8374555 "getReferencedMBeans"
	public return_type class_ref 136603 // Map
	nparams 1
	  param in name "theRelId" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves MBeans referenced in the various roles of the relation.

@param theRelId  relation id

@return a HashMap mapping:
<P> ObjectName -> ArrayList of String (role
names)

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation for given
relation id"
      end

      operation 8374683 "getRelationTypeName"
	public explicit_return_type "String"
	nparams 1
	  param in name "theRelId" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1042587 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns name of associated relation type for given relation.

@param theRelId  relation id

@return the name of the associated relation type.

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation for given
relation id"
      end
    end

    class 1043099 "RoleInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A RoleInfo object summarises a role in a relation type.

@since 1.5"
      classrelation 2074651 // <realization>
	relation 2074651 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2074651 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 3057947 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7227256952085334351L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form "
      end

      attribute 3058075 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  2504952983494636987L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version for new serial form "
      end

      classrelation 2074779 // oldSerialPersistentFields (<unidirectional association>)
	relation 2074779 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"myName\", String.class),
      new ObjectStreamField(\"myIsReadableFlg\", boolean.class),
      new ObjectStreamField(\"myIsWritableFlg\", boolean.class),
      new ObjectStreamField(\"myDescription\", String.class),
      new ObjectStreamField(\"myMinDegree\", int.class),
      new ObjectStreamField(\"myMaxDegree\", int.class),
      new ObjectStreamField(\"myRefMBeanClassName\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2074779 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      classrelation 2074907 // newSerialPersistentFields (<unidirectional association>)
	relation 2074907 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"name\", String.class),
      new ObjectStreamField(\"isReadable\", boolean.class),
      new ObjectStreamField(\"isWritable\", boolean.class),
      new ObjectStreamField(\"description\", String.class),
      new ObjectStreamField(\"minDegree\", int.class),
      new ObjectStreamField(\"maxDegree\", int.class),
      new ObjectStreamField(\"referencedMBeanClassName\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2074907 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3058203 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual serial version and serial form"
      end

      classrelation 2075035 // serialPersistentFields (<unidirectional association>)
	relation 2075035 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField name String Role name
@serialField isReadable boolean Read access mode: <code>true</code> if role is readable
@serialField isWritable boolean Write access mode: <code>true</code> if role is writable
@serialField description String Role description
@serialField minDegree int Minimum degree (i.e. minimum number of referenced MBeans in corresponding role)
@serialField maxDegree int Maximum degree (i.e. maximum number of referenced MBeans in corresponding role)
@serialField referencedMBeanClassName String Name of class of MBean(s) expected to be referenced in corresponding role

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2075035 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3058331 "compat"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 171803 "initialization"
	
	cpp "" ""
	java "  static {
	try {
	    PrivilegedAction act = new GetPropertyAction(\"jmx.serial.form\");
	    String form = (String) AccessController.doPrivileged(act);
	    compat = (form != null && form.equals(\"1.0\"));
	} catch (Exception e) {
	    // OK : Too bad, no compat with 1.0
	}
	if (compat) {
	    serialPersistentFields = oldSerialPersistentFields;
	    serialVersionUID = oldSerialVersionUID;
	} else {
	    serialPersistentFields = newSerialPersistentFields;
	    serialVersionUID = newSerialVersionUID;
	}
    }"
	php ""
	python ""
	idl ""
      end

      attribute 3058459 "ROLE_CARDINALITY_INFINITY"
	class_attribute public explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " END Serialization compatibility stuff

 Public constants


To specify an unlimited cardinality.
"
      end

      attribute 3058587 "name"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Private members


@serial Role name
"
      end

      attribute 3058715 "isReadable"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Read access mode: <code>true</code> if role is readable
"
      end

      attribute 3058843 "isWritable"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Write access mode: <code>true</code> if role is writable
"
      end

      attribute 3058971 "description"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Role description
"
      end

      attribute 3059099 "minDegree"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Minimum degree (i.e. minimum number of referenced MBeans in corresponding role)
"
      end

      attribute 3059227 "maxDegree"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Maximum degree (i.e. maximum number of referenced MBeans in corresponding role)
"
      end

      attribute 3059355 "referencedMBeanClassName"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Name of class of MBean(s) expected to be referenced in corresponding role
"
      end

      operation 8390939 "RoleInfo"
	public explicit_return_type ""
	nparams 7
	  param in name "theName" explicit_type "String"
	  param in name "theRefMBeanClassName" explicit_type "String"
	  param inout name "theIsReadable" explicit_type "boolean"
	  param inout name "theIsWritable" explicit_type "boolean"
	  param in name "theMinDegree" explicit_type "int"
	  param in name "theMaxDegree" explicit_type "int"
	  param in name "theDescription" explicit_type "String"
	nexceptions 4
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041307 // InvalidRoleInfoException
	  exception class_ref 201883 // ClassNotFoundException
	  exception class_ref 511515 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Constructor.

@param theName  name of the role.
@param theRefMBeanClassName  name of the class of MBean(s) expected to
be referenced in corresponding role.  If an MBean <em>M</em> is in
this role, then the MBean server must return true for
{@link MBeanServer#isInstanceOf isInstanceOf(M, theRefMBeanClassName)}.
@param theIsReadable  flag to indicate if the corresponding role
can be read
@param theIsWritable  flag to indicate if the corresponding role
can be set
@param theMinDegree  minimum degree for role, i.e. minimum number of
MBeans to provide in corresponding role
Must be less or equal than theMaxDegree.
(ROLE_CARDINALITY_INFINITY for unlimited)
@param theMaxDegree  maximum degree for role, i.e. maximum number of
MBeans to provide in corresponding role
Must be greater or equal than theMinDegree
(ROLE_CARDINALITY_INFINITY for unlimited)
@param theDescription  description of the role (can be null)

@exception IllegalArgumentException  if null parameter
@exception InvalidRoleInfoException  if the minimum degree is
greater than the maximum degree.
@exception ClassNotFoundException As of JMX 1.2, this exception
can no longer be thrown.  It is retained in the declaration of
this class for compatibility with existing code.
@exception NotCompliantMBeanException  if the class theRefMBeanClassName
is not a MBean class."
      end

      operation 8391067 "RoleInfo"
	public explicit_return_type ""
	nparams 4
	  param in name "theName" explicit_type "String"
	  param in name "theRefMBeanClassName" explicit_type "String"
	  param inout name "theIsReadable" explicit_type "boolean"
	  param inout name "theIsWritable" explicit_type "boolean"
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 201883 // ClassNotFoundException
	  exception class_ref 511515 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param theName  name of the role
@param theRefMBeanClassName  name of the class of MBean(s) expected to
be referenced in corresponding role.  If an MBean <em>M</em> is in
this role, then the MBean server must return true for
{@link MBeanServer#isInstanceOf isInstanceOf(M, theRefMBeanClassName)}.
@param theIsReadable  flag to indicate if the corresponding role
can be read
@param theIsWritable  flag to indicate if the corresponding role
can be set

<P>Minimum and maximum degrees defaulted to 1.
<P>Description of role defaulted to null.

@exception IllegalArgumentException  if null parameter
@exception ClassNotFoundException As of JMX 1.2, this exception
can no longer be thrown.  It is retained in the declaration of
this class for compatibility with existing code.
@exception NotCompliantMBeanException As of JMX 1.2, this
exception can no longer be thrown.  It is retained in the
declaration of this class for compatibility with existing code."
      end

      operation 8391195 "RoleInfo"
	public explicit_return_type ""
	nparams 2
	  param in name "theName" explicit_type "String"
	  param in name "theRefMBeanClassName" explicit_type "String"
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 201883 // ClassNotFoundException
	  exception class_ref 511515 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param theName  name of the role
@param theRefMBeanClassName  name of the class of MBean(s) expected to
be referenced in corresponding role.  If an MBean <em>M</em> is in
this role, then the MBean server must return true for
{@link MBeanServer#isInstanceOf isInstanceOf(M, theRefMBeanClassName)}.

<P>IsReadable and IsWritable defaulted to true.
<P>Minimum and maximum degrees defaulted to 1.
<P>Description of role defaulted to null.

@exception IllegalArgumentException  if null parameter
@exception ClassNotFoundException As of JMX 1.2, this exception
can no longer be thrown.  It is retained in the declaration of
this class for compatibility with existing code.
@exception NotCompliantMBeanException As of JMX 1.2, this
exception can no longer be thrown.  It is retained in the
declaration of this class for compatibility with existing code."
      end

      operation 8391323 "RoleInfo"
	public explicit_return_type ""
	nparams 1
	  param inout name "theRoleInfo" type class_ref 1043099 // RoleInfo
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy constructor.

@param theRoleInfo the RoleInfo to be copied.

@exception IllegalArgumentException  if null parameter"
      end

      operation 8391451 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Returns the name of the role.

@return the name of the role."
      end

      operation 8391579 "isReadable"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns read access mode for the role (true if it is readable).

@return true if the role is readable."
      end

      operation 8391707 "isWritable"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns write access mode for the role (true if it is writable).

@return true if the role is writable."
      end

      operation 8391835 "getDescription"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns description text for the role.

@return the description of the role."
      end

      operation 8391963 "getMinDegree"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns minimum degree for corresponding role reference.

@return the minimum degree."
      end

      operation 8392091 "getMaxDegree"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns maximum degree for corresponding role reference.

@return the maximum degree."
      end

      operation 8392219 "getRefMBeanClassName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns name of type of MBean expected to be referenced in
corresponding role.</p>

@return the name of the referenced type."
      end

      operation 8392347 "checkMinDegree"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "theValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a boolean to specify if given value is greater or equal than
expected minimum degree (true if yes).

@param theValue  value

@return true if greater or equal than minimum degree, false otherwise."
      end

      operation 8392475 "checkMaxDegree"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "theValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a boolean to specify if given value is less or equal than
expected maximum degree (true if yes).

@param theValue  value

@return true if less or equal than maximum degree, false otherwise."
      end

      operation 8392603 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing the role info.

@return a description of the role info."
      end

      operation 8392731 "init"
	private explicit_return_type "void"
	nparams 7
	  param in name "theName" explicit_type "String"
	  param in name "theRefMBeanClassName" explicit_type "String"
	  param inout name "theIsReadable" explicit_type "boolean"
	  param inout name "theIsWritable" explicit_type "boolean"
	  param in name "theMinDegree" explicit_type "int"
	  param in name "theMaxDegree" explicit_type "int"
	  param in name "theDescription" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041307 // InvalidRoleInfoException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Misc

 Initialisation"
      end

      operation 8392859 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link RoleInfo} from an {@link ObjectInputStream}."
      end

      operation 8392987 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link RoleInfo} to an {@link ObjectOutputStream}."
      end
    end

    class 1043227 "RelationType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The RelationType interface has to be implemented by any class expected to
represent a relation type.

@since 1.5"
      classrelation 2073115 // <generalisation>
	relation 2073115 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2073115 // <generalisation>
	  b parent class_ref 137883 // Serializable
      end

      operation 8387099 "getRelationTypeName"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Returns the relation type name.

@return the relation type name."
      end

      operation 8387227 "getRoleInfos"
	public return_type class_ref 135579 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of role definitions (ArrayList of RoleInfo objects).

@return an {@link ArrayList} of {@link RoleInfo}."
      end

      operation 8387355 "getRoleInfo"
	public return_type class_ref 1043099 // RoleInfo
	nparams 1
	  param in name "theRoleInfoName" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1043355 // RoleInfoNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the role info (RoleInfo object) for the given role info name
(null if not found).

@param theRoleInfoName  role info name

@return RoleInfo object providing role definition
does not exist

@exception IllegalArgumentException  if null parameter
@exception RoleInfoNotFoundException  if no role info with that name in
relation type."
      end
    end

    class 1043355 "RoleInfoNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is raised when there is no role info with given name in a
given relation type.

@since 1.5"
      classrelation 2075163 // <generalisation>
	relation 2075163 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2075163 // <generalisation>
	  b parent class_ref 1040923 // RelationException
      end

      attribute 3059483 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  4394092234999959939L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version "
      end

      operation 8393115 "RoleInfoNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception."
      end

      operation 8393243 "RoleInfoNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message."
      end
    end

    class 1043483 "RelationSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A RelationSupport object is used internally by the Relation Service to
represent simple relations (only roles, no properties or methods), with an
unlimited number of roles, of any relation type. As internal representation,
it is not exposed to the user.
<P>RelationSupport class conforms to the design patterns of standard MBean. So
the user can decide to instantiate a RelationSupport object himself as
a MBean (as it follows the MBean design patterns), to register it in the
MBean Server, and then to add it in the Relation Service.
<P>The user can also, when creating his own MBean relation class, have it
extending RelationSupport, to retrieve the implementations of required
interfaces (see below).
<P>It is also possible to have in a user relation MBean class a member
being a RelationSupport object, and to implement the required interfaces by
delegating all to this member.
<P> RelationSupport implements the Relation interface (to be handled by the
Relation Service).
<P>It implements also the MBeanRegistration interface to be able to retrieve
the MBean Server where it is registered (if registered as a MBean) to access
to its Relation Service.

@since 1.5"
      classrelation 2072347 // <realization>
	relation 2072347 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2072347 // <realization>
	  b parent class_ref 1043611 // RelationSupportMBean
      end

      classrelation 2072475 // <realization>
	relation 2072475 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2072475 // <realization>
	  b parent class_ref 517019 // MBeanRegistration
      end

      attribute 3055899 "myRelId"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Private members

 Relation identifier (expected to be unique in the Relation Service where
 the RelationSupport object will be added)"
      end

      classrelation 2072603 // myRelServiceName (<unidirectional association>)
	relation 2072603 --->
	  a role_name "myRelServiceName" init_value "=  null" private
	    comment " ObjectName of the Relation Service where the relation will be added
 REQUIRED if the RelationSupport is created by the user to be registered as
 a MBean, as it will have to access the Relation Service via the MBean
 Server to perform the check regarding the relation type.
 Is null if current object is directly created by the Relation Service,
 as the object will directly access it.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2072603 // myRelServiceName (<unidirectional association>)
	  b parent class_ref 510875 // ObjectName
      end

      classrelation 2072731 // myRelServiceMBeanServer (<unidirectional association>)
	relation 2072731 --->
	  a role_name "myRelServiceMBeanServer" init_value "=  null" private
	    comment " Reference to the MBean Server where the Relation Service is
 registered
 REQUIRED if the RelationSupport is created by the user to be registered as
 a MBean, as it will have to access the Relation Service via the MBean
 Server to perform the check regarding the relation type.
 If the Relationbase object is created by the Relation Service (use of
 createRelation() method), this is null as not needed, direct access to
 the Relation Service.
 If the Relationbase object is created by the user and registered as a
 MBean, this is set by the preRegister() method below.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2072731 // myRelServiceMBeanServer (<unidirectional association>)
	  b parent class_ref 513179 // MBeanServer
      end

      attribute 3056027 "myRelTypeName"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Relation type name (must be known in the Relation Service where the
 relation will be added)"
      end

      classrelation 2072859 // myRoleName2ValueMap (<unidirectional association>)
	relation 2072859 --->
	  a role_name "myRoleName2ValueMap" init_value "=  new HashMap()" private
	    comment " Role map, mapping <role-name> -> <Role>
 Initialised by role list in the constructor, then updated:
 - if the relation is a MBean, via setRole() and setRoles() methods, or
   via Relation Service setRole() and setRoles() methods
 - if the relation is internal to the Relation Service, via
   setRoleInt() and setRolesInt() methods.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2072859 // myRoleName2ValueMap (<unidirectional association>)
	  b parent class_ref 144923 // HashMap
      end

      classrelation 2072987 // myInRelServFlg (<unidirectional association>)
	relation 2072987 --->
	  a role_name "myInRelServFlg" init_value "=  null" private
	    comment " Flag to indicate if the object has been added in the Relation Service
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2072987 // myInRelServFlg (<unidirectional association>)
	  b parent class_ref 392091 // Boolean
      end

      operation 8382747 "RelationSupport"
	public explicit_return_type ""
	nparams 4
	  param in name "theRelId" explicit_type "String"
	  param inout name "theRelServiceName" type class_ref 510875 // ObjectName
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	nexceptions 2
	  exception class_ref 1041435 // InvalidRoleValueException
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Creates object.
<P>This constructor has to be used when the RelationSupport object will be
registered as a MBean by the user, or when creating a user relation
MBean those class extends RelationSupport.
<P>Nothing is done at the Relation Service level, i.e. the RelationSupport
object is not added, and no check if the provided values are correct.
The object is always created, EXCEPT if:
<P>- one mandatory parameter is not provided
<P>- the same name is used for two roles.
<P>To be handled as a relation, the object has then to be added in the
Relation Service using Relation Service method addRelation().

@param theRelId  relation identifier, to identify the relation in the
Relation Service.
<P>Expected to be unique in the given Relation Service.
@param theRelServiceName  ObjectName of the Relation Service where
the relation will be registered.
<P>It is required as this is the Relation Service that is aware of the
definition of the relation type of given relation, so that will be able
to check update operations (set).
@param theRelTypeName  Name of relation type.
<P>Expected to have been created in given Relation Service.
@param theRoleList  list of roles (Role objects) to initialised the
relation. Can be null.
<P>Expected to conform to relation info in associated relation type.

@exception InvalidRoleValueException  if the same name is used for two
roles.
@exception IllegalArgumentException  if a required value (Relation
Service Object Name, etc.) is not provided as parameter."
      end

      operation 8382875 "RelationSupport"
	public explicit_return_type ""
	nparams 5
	  param in name "theRelId" explicit_type "String"
	  param inout name "theRelServiceName" type class_ref 510875 // ObjectName
	  param inout name "theRelServiceMBeanServer" type class_ref 513179 // MBeanServer
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	nexceptions 2
	  exception class_ref 1041435 // InvalidRoleValueException
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates object.
<P>This constructor has to be used when the user relation MBean
implements the interfaces expected to be supported by a relation by
delegating to a RelationSupport object.
<P>This object needs to know the Relation Service expected to handle the
relation. So it has to know the MBean Server where the Relation Service
is registered.
<P>According to a limitation, a relation MBean must be registered in the
same MBean Server as the Relation Service expected to handle it. So the
user relation MBean has to be created and registered, and then the
wrapped RelationSupport object can be created with identified MBean
Server.
<P>Nothing is done at the Relation Service level, i.e. the RelationSupport
object is not added, and no check if the provided values are correct.
The object is always created, EXCEPT if:
<P>- one required parameter is not provided
<P>- the same name is used for two roles.
<P>To be handled as a relation, the object has then to be added in the
Relation Service using the Relation Service method addRelation().

@param theRelId  relation identifier, to identify the relation in the
Relation Service.
<P>Expected to be unique in the given Relation Service.
@param theRelServiceName  ObjectName of the Relation Service where
the relation will be registered.
<P>It is required as this is the Relation Service that is aware of the
definition of the relation type of given relation, so that will be able
to check update operations (set).
@param theRelServiceMBeanServer  MBean Server where the wrapping MBean
is or will be registered.
<P>Expected to be the MBean Server where the Relation Service is or will
be registered.
@param theRelTypeName  Name of relation type.
<P>Expected to have been created in given Relation Service.
@param theRoleList  list of roles (Role objects) to initialised the
relation. Can be null.
<P>Expected to conform to relation info in associated relation type.

@exception InvalidRoleValueException  if the same name is used for two
roles.
@exception IllegalArgumentException  if a required value (Relation
Service Object Name, etc.) is not provided as parameter."
      end

      operation 8383003 "getRole"
	public return_type class_ref 135579 // List
	nparams 1
	  param in name "theRoleName" explicit_type "String"
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Relation Interface


Retrieves role value for given role name.
<P>Checks if the role exists and is readable according to the relation
type.

@param theRoleName  name of role

@return the ArrayList of ObjectName objects being the role value

@exception IllegalArgumentException  if null role name
@exception RoleNotFoundException  if:
<P>- there is no role with given name
<P>- the role is not readable.
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server

@see #setRole"
      end

      operation 8383131 "getRoles"
	public return_type class_ref 1042075 // RoleResult
	nparams 1
	  param in name "theRoleNameArray" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves values of roles with given names.
<P>Checks for each role if it exists and is readable according to the
relation type.

@param theRoleNameArray  array of names of roles to be retrieved

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
retrieved).

@exception IllegalArgumentException  if null role name
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server

@see #setRoles"
      end

      operation 8383259 "getAllRoles"
	public return_type class_ref 1042075 // RoleResult
	nparams 0
	nexceptions 1
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all roles present in the relation.

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
readable).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server"
      end

      operation 8383387 "retrieveAllRoles"
	public return_type class_ref 1042203 // RoleList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all roles in the relation without checking read mode.

@return a RoleList"
      end

      operation 8383515 "getRoleCardinality"
	public return_type class_ref 170395 // Integer
	nparams 1
	  param in name "theRoleName" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041819 // RoleNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of MBeans currently referenced in the given role.

@param theRoleName  name of role

@return the number of currently referenced MBeans in that role

@exception IllegalArgumentException  if null role name
@exception RoleNotFoundException  if there is no role with given name"
      end

      operation 8383643 "setRole"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theRole" type class_ref 1042331 // Role
	nexceptions 6
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1041435 // InvalidRoleValueException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given role.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>Will send a notification (RelationNotification with type
RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
relation is a MBean or not).

@param theRole  role to be set (name and new value)

@exception IllegalArgumentException  if null role
@exception RoleNotFoundException  if the role is not writable (no
test on the write access mode performed when initialising the role)
@exception InvalidRoleValueException  if value provided for
role is not valid, i.e.:
<P>- the number of referenced MBeans in given value is less than
expected minimum degree
<P>- the number of referenced MBeans in provided value exceeds expected
maximum degree
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>- a MBean provided for that role does not exist
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationTypeNotFoundException  if the relation type has not
been declared in the Relation Service
@exception RelationNotFoundException  if the relation has not been
added in the Relation Service.

@see #getRole"
      end

      operation 8383771 "setRoles"
	public return_type class_ref 1042075 // RoleResult
	nparams 1
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	nexceptions 4
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given roles.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>Will send one notification (RelationNotification with type
RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
relation is a MBean or not) per updated role.

@param theRoleList  list of roles to be set

@return a RoleResult object, including a RoleList (for roles
successfully set) and a RoleUnresolvedList (for roles not
set).

@exception IllegalArgumentException  if null role name
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationTypeNotFoundException  if the relation type has not
been declared in the Relation Service.
@exception RelationNotFoundException  if the relation MBean has not been
added in the Relation Service.

@see #getRoles"
      end

      operation 8383899 "handleMBeanUnregistration"
	public explicit_return_type "void"
	nparams 2
	  param inout name "theObjName" type class_ref 510875 // ObjectName
	  param in name "theRoleName" explicit_type "String"
	nexceptions 6
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1041435 // InvalidRoleValueException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Callback used by the Relation Service when a MBean referenced in a role
is unregistered.
<P>The Relation Service will call this method to let the relation
take action to reflect the impact of such unregistration.
<P>BEWARE. the user is not expected to call this method.
<P>Current implementation is to set the role with its current value
(list of ObjectNames of referenced MBeans) without the unregistered
one.

@param theObjName  ObjectName of unregistered MBean
@param theRoleName  name of role where the MBean is referenced

@exception IllegalArgumentException  if null parameter
@exception RoleNotFoundException  if role does not exist in the
relation or is not writable
@exception InvalidRoleValueException  if role value does not conform to
the associated role info (this will never happen when called from the
Relation Service)
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationTypeNotFoundException  if the relation type has not
been declared in the Relation Service.
@exception RelationNotFoundException  if this method is called for a
relation MBean not added in the Relation Service."
      end

      operation 8384027 "getReferencedMBeans"
	public return_type class_ref 136603 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves MBeans referenced in the various roles of the relation.

@return a HashMap mapping:
<P> ObjectName -> ArrayList of String (role names)"
      end

      operation 8384155 "getRelationTypeName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns name of associated relation type."
      end

      operation 8384283 "getRelationServiceName"
	public return_type class_ref 510875 // ObjectName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns ObjectName of the Relation Service handling the relation.

@return the ObjectName of the Relation Service."
      end

      operation 8384411 "getRelationId"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns relation identifier (used to uniquely identify the relation
inside the Relation Service).

@return the relation id."
      end

      operation 8384539 "preRegister"
	public return_type class_ref 510875 // ObjectName
	nparams 2
	  param inout name "server" type class_ref 513179 // MBeanServer
	  param inout name "name" type class_ref 510875 // ObjectName
	nexceptions 1
	  exception class_ref 165403 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " MBeanRegistration interface

 Pre-registration: retrieves the MBean Server (useful to access to the
 Relation Service)
 This is the way to retrieve the MBean Server when the relation object is
 a MBean created by the user outside of the Relation Service.

 No exception thrown."
      end

      operation 8384667 "postRegister"
	public explicit_return_type "void"
	nparams 1
	  param inout name "registrationDone" type class_ref 392091 // Boolean
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Post-registration: does nothing"
      end

      operation 8384795 "preDeregister"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 165403 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Pre-unregistration: does nothing"
      end

      operation 8384923 "postDeregister"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Post-unregistration: does nothing"
      end

      operation 8385051 "isInRelationService"
	public return_type class_ref 392091 // Boolean
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Others


Returns an internal flag specifying if the object is still handled by
the Relation Service."
      end

      operation 8385179 "setRelationServiceManagementFlag"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theFlg" type class_ref 392091 // Boolean
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8385307 "getRoleInt"
	package explicit_return_type "Object"
	nparams 4
	  param in name "theRoleName" explicit_type "String"
	  param inout name "theRelServCallFlg" explicit_type "boolean"
	  param inout name "theRelServ" type class_ref 1042843 // RelationService
	  param inout name "theMultiRoleFlg" explicit_type "boolean"
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Misc

 Gets the role with given name
 Checks if the role exists and is readable according to the relation
 type.

 This method is called in getRole() above.
 It is also called in the Relation Service getRole() method.
 It is also called in getRolesInt() below (used for getRoles() above
 and for Relation Service getRoles() method).

 Depending on parameters reflecting its use (either in the scope of
 getting a single role or of getting several roles), will return:
 - in case of success:
   - for single role retrieval, the ArrayList of ObjectNames being the
     role value
   - for multi-role retrieval, the Role object itself
 - in case of failure (except critical exceptions):
   - for single role retrieval, if role does not exist or is not
     readable, an RoleNotFoundException exception is raised
   - for multi-role retrieval, a RoleUnresolved object

 -param theRoleName  name of role to be retrieved
 -param theRelServCallFlg  true if call from the Relation Service; this
  will happen if the current RelationSupport object has been created by
  the Relation Service (via createRelation()) method, so direct access is
  possible.
 -param theRelServ  reference to Relation Service object, if object
  created by Relation Service.
 -param theMultiRoleFlg  true if getting the role in the scope of a
  multiple retrieval.

 -return:
  - for single role retrieval (theMultiRoleFlg false):
    - ArrayList of ObjectName objects, value of role with given name, if
      the role can be retrieved
    - raise a RoleNotFoundException exception else
  - for multi-role retrieval (theMultiRoleFlg true):
    - the Role object for given role name if role can be retrieved
    - a RoleUnresolved object with problem.

 -exception IllegalArgumentException  if null parameter
 -exception RoleNotFoundException  if theMultiRoleFlg is false and:
  - there is no role with given name
  or
  - the role is not readable.
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server"
      end

      operation 8385435 "getRolesInt"
	package return_type class_ref 1042075 // RoleResult
	nparams 3
	  param in name "theRoleNameArray" explicit_type "String"
	  param inout name "theRelServCallFlg" explicit_type "boolean"
	  param inout name "theRelServ" type class_ref 1042843 // RelationService
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the given roles
 For each role, verifies if the role exists and is readable according to
 the relation type.

 This method is called in getRoles() above and in Relation Service
 getRoles() method.

 -param theRoleNameArray  array of names of roles to be retrieved
 -param theRelServCallFlg  true if call from the Relation Service; this
  will happen if the current RelationSupport object has been created by
  the Relation Service (via createRelation()) method, so direct access is
  possible.
 -param theRelServ  reference to Relation Service object, if object
  created by Relation Service.

 -return a RoleResult object

 -exception IllegalArgumentException  if null parameter
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server"
      end

      operation 8385563 "getAllRolesInt"
	package return_type class_ref 1042075 // RoleResult
	nparams 2
	  param inout name "theRelServCallFlg" explicit_type "boolean"
	  param inout name "theRelServ" type class_ref 1042843 // RelationService
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns all roles present in the relation

 -return a RoleResult object, including a RoleList (for roles
  successfully retrieved) and a RoleUnresolvedList (for roles not
  readable).

 -exception IllegalArgumentException if null parameter
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server"
      end

      operation 8385691 "setRoleInt"
	package explicit_return_type "Object"
	nparams 4
	  param inout name "theRole" type class_ref 1042331 // Role
	  param inout name "theRelServCallFlg" explicit_type "boolean"
	  param inout name "theRelServ" type class_ref 1042843 // RelationService
	  param inout name "theMultiRoleFlg" explicit_type "boolean"
	nexceptions 6
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1041435 // InvalidRoleValueException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the role with given value

 This method is called in setRole() above.
 It is also called by the Relation Service setRole() method.
 It is also called in setRolesInt() method below (used in setRoles()
 above and in RelationService setRoles() method).

 Will check the role according to its corresponding role definition
 provided in relation's relation type
 Will send a notification (RelationNotification with type
 RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
 relation is a MBean or not) if not initialisation of role.

 -param theRole  role to be set (name and new value)
 -param theRelServCallFlg  true if call from the Relation Service; this
  will happen if the current RelationSupport object has been created by
  the Relation Service (via createRelation()) method, so direct access is
  possible.
 -param theRelServ  reference to Relation Service object, if internal
  relation
 -param theMultiRoleFlg  true if getting the role in the scope of a
  multiple retrieval.

 -return (except other \"critical\" exceptions):
  - for single role retrieval (theMultiRoleFlg false):
    - null if the role has been set
    - raise an InvalidRoleValueException
 else
  - for multi-role retrieval (theMultiRoleFlg true):
    - the Role object for given role name if role has been set
    - a RoleUnresolved object with problem else.

 -exception IllegalArgumentException if null parameter
 -exception RoleNotFoundException  if theMultiRoleFlg is false and:
  - internal relation and the role does not exist
  or
  - existing role (i.e. not initialising it) and the role is not
    writable.
 -exception InvalidRoleValueException  iftheMultiRoleFlg is false and
  value provided for:
   - the number of referenced MBeans in given value is less than
     expected minimum degree
   or
   - the number of referenced MBeans in provided value exceeds expected
     maximum degree
   or
   - one referenced MBean in the value is not an Object of the MBean
     class expected for that role
   or
   - a MBean provided for that role does not exist
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception RelationTypeNotFoundException  if relation type unknown
 -exception RelationNotFoundException  if a relation MBean has not been
  added in the Relation Service"
      end

      operation 8385819 "sendRoleUpdateNotification"
	private explicit_return_type "void"
	nparams 4
	  param inout name "theNewRole" type class_ref 1042331 // Role
	  param inout name "theOldRoleValue" type class_ref 135579 // List
	  param inout name "theRelServCallFlg" explicit_type "boolean"
	  param inout name "theRelServ" type class_ref 1042843 // RelationService
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Requires the Relation Service to send a notification
 RelationNotification, with type being either:
 - RelationNotification.RELATION_BASIC_UPDATE if the updated relation is
   a relation internal to the Relation Service
 - RelationNotification.RELATION_MBEAN_UPDATE if the updated relation is
   a relation MBean.

 -param theNewRole  new role
 -param theOldRoleValue  old role value (ArrayList of ObjectNames)
 -param theRelServCallFlg  true if call from the Relation Service; this
  will happen if the current RelationSupport object has been created by
  the Relation Service (via createRelation()) method, so direct access is
  possible.
 -param theRelServ  reference to Relation Service object, if object
  created by Relation Service.

 -exception IllegalArgumentException  if null parameter provided
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception RelationNotFoundException if:
  - relation MBean
  and
  - it has not been added into the Relation Service"
      end

      operation 8385947 "updateRelationServiceMap"
	private explicit_return_type "void"
	nparams 4
	  param inout name "theNewRole" type class_ref 1042331 // Role
	  param inout name "theOldRoleValue" type class_ref 135579 // List
	  param inout name "theRelServCallFlg" explicit_type "boolean"
	  param inout name "theRelServ" type class_ref 1042843 // RelationService
	nexceptions 3
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Requires the Relation Service to update its internal map handling
 MBeans referenced in relations.
 The Relation Service will also update its recording as a listener to
 be informed about unregistration of new referenced MBeans, and no longer
 informed of MBeans no longer referenced.

 -param theNewRole  new role
 -param theOldRoleValue  old role value (ArrayList of ObjectNames)
 -param theRelServCallFlg  true if call from the Relation Service; this
  will happen if the current RelationSupport object has been created by
  the Relation Service (via createRelation()) method, so direct access is
  possible.
 -param theRelServ  reference to Relation Service object, if object
  created by Relation Service.

 -exception IllegalArgumentException  if null parameter
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception RelationNotFoundException if:
  - relation MBean
  and
  - the relation is not added in the Relation Service"
      end

      operation 8386075 "setRolesInt"
	package return_type class_ref 1042075 // RoleResult
	nparams 3
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	  param inout name "theRelServCallFlg" explicit_type "boolean"
	  param inout name "theRelServ" type class_ref 1042843 // RelationService
	nexceptions 4
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the given roles
 For each role:
 - will check the role according to its corresponding role definition
   provided in relation's relation type
 - will send a notification (RelationNotification with type
   RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
   relation is a MBean or not) for each updated role.

 This method is called in setRoles() above and in Relation Service
 setRoles() method.

 -param theRoleList  list of roles to be set
 -param theRelServCallFlg  true if call from the Relation Service; this
  will happen if the current RelationSupport object has been created by
  the Relation Service (via createRelation()) method, so direct access is
  possible.
 -param theRelServ  reference to Relation Service object, if object
  created by Relation Service.

 -return a RoleResult object

 -exception IllegalArgumentException  if null parameter
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception RelationTypeNotFoundException if:
  - relation MBean
  and
  - unknown relation type
 -exception RelationNotFoundException if:
  - relation MBean
 and
 - not added in the RS"
      end

      operation 8386203 "initMembers"
	private explicit_return_type "void"
	nparams 5
	  param in name "theRelId" explicit_type "String"
	  param inout name "theRelServiceName" type class_ref 510875 // ObjectName
	  param inout name "theRelServiceMBeanServer" type class_ref 513179 // MBeanServer
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	nexceptions 2
	  exception class_ref 1041435 // InvalidRoleValueException
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialises all members

 -param theRelId  relation identifier, to identify the relation in the
 Relation Service.
 Expected to be unique in the given Relation Service.
 -param theRelServiceName  ObjectName of the Relation Service where
 the relation will be registered.
 It is required as this is the Relation Service that is aware of the
 definition of the relation type of given relation, so that will be able
 to check update operations (set). Direct access via the Relation
 Service (RelationService.setRole()) do not need this information but
 as any user relation is a MBean, setRole() is part of its management
 interface and can be called directly on the user relation MBean. So the
 user relation MBean must be aware of the Relation Service where it will
 be added.
 -param theRelTypeName  Name of relation type.
 Expected to have been created in given Relation Service.
 -param theRoleList  list of roles (Role objects) to initialised the
 relation. Can be null.
 Expected to conform to relation info in associated relation type.

 -exception InvalidRoleValueException  if the same name is used for two
  roles.
 -exception IllegalArgumentException  if a required value (Relation
  Service Object Name, etc.) is not provided as parameter."
      end

      operation 8386331 "initRoleMap"
	private explicit_return_type "void"
	nparams 1
	  param inout name "theRoleList" type class_ref 1042203 // RoleList
	nexceptions 1
	  exception class_ref 1041435 // InvalidRoleValueException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialise the internal role map from given RoleList parameter

 -param theRoleList  role list. Can be null.
  As it is a RoleList object, it cannot include null (rejected).

 -exception InvalidRoleValueException  if the same role name is used for
  several roles."
      end

      operation 8386459 "handleMBeanUnregistrationInt"
	package explicit_return_type "void"
	nparams 4
	  param inout name "theObjName" type class_ref 510875 // ObjectName
	  param in name "theRoleName" explicit_type "String"
	  param inout name "theRelServCallFlg" explicit_type "boolean"
	  param inout name "theRelServ" type class_ref 1042843 // RelationService
	nexceptions 6
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041819 // RoleNotFoundException
	  exception class_ref 1041435 // InvalidRoleValueException
	  exception class_ref 1041947 // RelationServiceNotRegisteredException
	  exception class_ref 1042459 // RelationTypeNotFoundException
	  exception class_ref 1042587 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Callback used by the Relation Service when a MBean referenced in a role
 is unregistered.
 The Relation Service will call this method to let the relation
 take action to reflect the impact of such unregistration.
 Current implementation is to set the role with its current value
 (list of ObjectNames of referenced MBeans) without the unregistered
 one.

 -param theObjName  ObjectName of unregistered MBean
 -param theRoleName  name of role where the MBean is referenced
 -param theRelServCallFlg  true if call from the Relation Service; this
  will happen if the current RelationSupport object has been created by
  the Relation Service (via createRelation()) method, so direct access is
  possible.
 -param theRelServ  reference to Relation Service object, if internal
  relation

 -exception IllegalArgumentException if null parameter
 -exception RoleNotFoundException  if:
  - the role does not exist
  or
  - role not writable.
 -exception InvalidRoleValueException  if value provided for:
   - the number of referenced MBeans in given value is less than
     expected minimum degree
   or
   - the number of referenced MBeans in provided value exceeds expected
     maximum degree
   or
   - one referenced MBean in the value is not an Object of the MBean
     class expected for that role
   or
   - a MBean provided for that role does not exist
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception RelationTypeNotFoundException if unknown relation type
 -exception RelationNotFoundException if current relation has not been
  added in the RS"
      end

      attribute 3056155 "localClassName"
	class_attribute private explicit_type "String"
	init_value "=  \"RelationSupport\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " stuff for Tracing"
      end

      operation 8386587 "isTraceOn"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " trace level"
      end

      operation 8386715 "trace"
	private explicit_return_type "void"
	nparams 2
	  param in name "methodName" explicit_type "String"
	  param in name "info" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    private void trace(String className, String methodName, String info) {
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_RELATION, className, methodName, info);
    }"
      end

      operation 8386843 "isDebugOn"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    private void trace(String className, String methodName, Exception e) {
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_RELATION, className, methodName, e);
    }
    private void trace(String methodName, Exception e) {
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_RELATION, localClassName, methodName, e);
    }
 debug level"
      end

      operation 8386971 "debug"
	private explicit_return_type "void"
	nparams 2
	  param in name "methodName" explicit_type "String"
	  param in name "info" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    private void debug(String className, String methodName, String info) {
        Trace.send(Trace.LEVEL_DEBUG, Trace.INFO_RELATION, className, methodName, info);
    }"
      end
    end

    class 1043611 "RelationSupportMBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A RelationSupport object is used internally by the Relation Service to
represent simple relations (only roles, no properties or methods), with an
unlimited number of roles, of any relation type. As internal representation,
it is not exposed to the user.
<P>RelationSupport class conforms to the design patterns of standard MBean. So
the user can decide to instantiate a RelationSupport object himself as
a MBean (as it follows the MBean design patterns), to register it in the
MBean Server, and then to add it in the Relation Service.
<P>The user can also, when creating his own MBean relation class, have it
extending RelationSupport, to retrieve the implementations of required
interfaces (see below).
<P>It is also possible to have in a user relation MBean class a member
being a RelationSupport object, and to implement the required interfaces by
delegating all to this member.
<P> RelationSupport implements the Relation interface (to be handled by the
Relation Service).

@since 1.5"
      classrelation 2072219 // <generalisation>
	relation 2072219 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2072219 // <generalisation>
	  b parent class_ref 1041691 // Relation
      end

      operation 8382491 "isInRelationService"
	public return_type class_ref 392091 // Boolean
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an internal flag specifying if the object is still handled by
the Relation Service.

@return a Boolean equal to {@link Boolean#TRUE} if the object
is still handled by the Relation Service and {@link
Boolean#FALSE} otherwise."
      end

      operation 8382619 "setRelationServiceManagementFlag"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theFlg" type class_ref 392091 // Boolean
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Specifies whether this relation is handled by the Relation
Service.</p>
<P>BEWARE, this method has to be exposed as the Relation Service will
access the relation through its management interface. It is RECOMMENDED
NOT to use this method. Using it does not affect the registration of the
relation object in the Relation Service, but will provide wrong
information about it!

@param theFlg whether the relation is handled by the Relation Service.

@exception IllegalArgumentException  if null parameter"
      end
    end

    class 1043739 "RelationTypeSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A RelationTypeSupport object implements the RelationType interface.
<P>It represents a relation type, providing role information for each role
expected to be supported in every relation of that type.

<P>A relation type includes a relation type name and a list of
role infos (represented by RoleInfo objects).

<P>A relation type has to be declared in the Relation Service:
<P>- either using the createRelationType() method, where a RelationTypeSupport
object will be created and kept in the Relation Service
<P>- either using the addRelationType() method where the user has to create
an object implementing the RelationType interface, and this object will be
used as representing a relation type in the Relation Service.

@since 1.5"
      classrelation 2073371 // <realization>
	relation 2073371 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2073371 // <realization>
	  b parent class_ref 1043227 // RelationType
      end

      attribute 3056411 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -8179019472410837190L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form "
      end

      attribute 3056539 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  4611072955724144607L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version for new serial form "
      end

      classrelation 2073499 // oldSerialPersistentFields (<unidirectional association>)
	relation 2073499 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"myTypeName\", String.class),
      new ObjectStreamField(\"myRoleName2InfoMap\", HashMap.class),
      new ObjectStreamField(\"myIsInRelServFlg\", boolean.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2073499 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      classrelation 2073627 // newSerialPersistentFields (<unidirectional association>)
	relation 2073627 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"typeName\", String.class),
      new ObjectStreamField(\"roleName2InfoMap\", Map.class),
      new ObjectStreamField(\"isInRelationService\", boolean.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2073627 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3056667 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual serial version and serial form"
      end

      classrelation 2073755 // serialPersistentFields (<unidirectional association>)
	relation 2073755 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField typeName String Relation type name
@serialField roleName2InfoMap Map {@link Map} holding the mapping: 
             &lt;role name ({@link String})&gt; -&gt; &lt;role info ({@link RoleInfo} object)&gt;
@serialField isInRelationService boolean Flag specifying whether the relation type has been declared in the
             Relation Service (so can no longer be updated)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2073755 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3056795 "compat"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 171547 "initialization"
	
	cpp "" ""
	java "  static {
	try {
	    PrivilegedAction act = new GetPropertyAction(\"jmx.serial.form\");
	    String form = (String) AccessController.doPrivileged(act);
	    compat = (form != null && form.equals(\"1.0\"));
	} catch (Exception e) {
	    // OK : Too bad, no compat with 1.0
	}
	if (compat) {
	    serialPersistentFields = oldSerialPersistentFields;
	    serialVersionUID = oldSerialVersionUID;
	} else {
	    serialPersistentFields = newSerialPersistentFields;
	    serialVersionUID = newSerialVersionUID;
	}
    }"
	php ""
	python ""
	idl ""
      end

      attribute 3056923 "typeName"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " END Serialization compatibility stuff

 Private members


@serial Relation type name
"
      end

      classrelation 2073883 // roleName2InfoMap (<unidirectional association>)
	relation 2073883 --->
	  a role_name "roleName2InfoMap" init_value "=  new HashMap()" private
	    comment "
@serial {@link Map} holding the mapping: 
          &lt;role name ({@link String})&gt; -&gt; &lt;role info ({@link RoleInfo} object)&gt;

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2073883 // roleName2InfoMap (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      attribute 3057051 "isInRelationService"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Flag specifying whether the relation type has been declared in the
        Relation Service (so can no longer be updated)
"
      end

      operation 8387739 "RelationTypeSupport"
	public explicit_return_type ""
	nparams 2
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theRoleInfoArray" type class_ref 1043099 // RoleInfo
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041179 // InvalidRelationTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Constructor where all role definitions are dynamically created and
passed as parameter.

@param theRelTypeName  Name of relation type
@param theRoleInfoArray  List of role definitions (RoleInfo objects)

@exception IllegalArgumentException  if null parameter
@exception InvalidRelationTypeException  if:
<P>- the same name has been used for two different roles
<P>- no role info provided
<P>- one null role info provided"
      end

      operation 8387867 "RelationTypeSupport"
	protected explicit_return_type ""
	nparams 1
	  param in name "theRelTypeName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor to be used for subclasses.

@param theRelTypeName  Name of relation type.

@exception IllegalArgumentException  if null parameter."
      end

      operation 8387995 "getRelationTypeName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Returns the relation type name.

@return the relation type name."
      end

      operation 8388123 "getRoleInfos"
	public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of role definitions (ArrayList of RoleInfo objects)."
      end

      operation 8388251 "getRoleInfo"
	public return_type class_ref 1043099 // RoleInfo
	nparams 1
	  param in name "theRoleInfoName" explicit_type "String"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1043355 // RoleInfoNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the role info (RoleInfo object) for the given role info name
(null if not found).

@param theRoleInfoName  role info name

@return RoleInfo object providing role definition
does not exist

@exception IllegalArgumentException  if null parameter
@exception RoleInfoNotFoundException  if no role info with that name in
relation type."
      end

      operation 8388379 "addRoleInfo"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "theRoleInfo" type class_ref 1043099 // RoleInfo
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041179 // InvalidRelationTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Misc


Add a role info.
This method of course should not be used after the creation of the
relation type, because updating it would invalidate that the relations
created associated to that type still conform to it.
Can throw a RuntimeException if trying to update a relation type
declared in the Relation Service.

@param theRoleInfo  role info to be added.

@exception IllegalArgumentException  if null parameter.
@exception InvalidRelationTypeException  if there is already a role
 info in current relation type with the same name."
      end

      operation 8388507 "setRelationServiceFlag"
	package explicit_return_type "void"
	nparams 1
	  param inout name "theFlg" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the internal flag to specify that the relation type has been
 declared in the Relation Service"
      end

      operation 8388635 "initMembers"
	private explicit_return_type "void"
	nparams 2
	  param in name "theRelTypeName" explicit_type "String"
	  param inout name "theRoleInfoArray" type class_ref 1043099 // RoleInfo
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041179 // InvalidRelationTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initializes the members, i.e. type name and role info list.

 -param theRelTypeName  Name of relation type
 -param theRoleInfoArray  List of role definitions (RoleInfo objects)

 -exception IllegalArgumentException  if null parameter
 -exception InvalidRelationTypeException  If:
  - the same name has been used for two different roles
  - no role info provided
  - one null role info provided"
      end

      operation 8388763 "checkRoleInfos"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "theRoleInfoArray" type class_ref 1043099 // RoleInfo
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 1041179 // InvalidRelationTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks the given RoleInfo array to verify that:
 - the array is not empty
 - it does not contain a null element
 - a given role name is used only for one RoleInfo

 -param theRoleInfoArray  array to be checked

 -exception IllegalArgumentException
 -exception InvalidRelationTypeException  If:
  - the same name has been used for two different roles
  - no role info provided
  - one null role info provided"
      end

      attribute 3057179 "localClassName"
	class_attribute private explicit_type "String"
	init_value "=  \"RelationTypeSupport\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " stuff for Tracing"
      end

      operation 8388891 "isTraceOn"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " trace level"
      end

      operation 8389019 "trace"
	private explicit_return_type "void"
	nparams 2
	  param in name "methodName" explicit_type "String"
	  param in name "info" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    private void trace(String className, String methodName, String info) {
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_RELATION, className, methodName, info);
    }"
      end

      operation 8389147 "isDebugOn"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    private void trace(String className, String methodName, Exception e) {
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_RELATION, className, methodName, e);
    }
    private void trace(String methodName, Exception e) {
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_RELATION, localClassName, methodName, e);
    }
 debug level"
      end

      operation 8389275 "debug"
	private explicit_return_type "void"
	nparams 2
	  param in name "methodName" explicit_type "String"
	  param in name "info" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    private void debug(String className, String methodName, String info) {
        Trace.send(Trace.LEVEL_DEBUG, Trace.INFO_RELATION, className, methodName, info);
    }"
      end

      operation 8389403 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    private void debug(String className, String methodName, Exception e) {
        Trace.send(Trace.LEVEL_DEBUG, Trace.INFO_RELATION, className, methodName, e);
    }
    private void debug(String methodName, Exception e) {
        Trace.send(Trace.LEVEL_DEBUG, Trace.INFO_RELATION, localClassName, methodName, e);
    }

Deserializes a {@link RelationTypeSupport} from an {@link ObjectInputStream}."
      end

      operation 8389531 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link RelationTypeSupport} to an {@link ObjectOutputStream}."
      end
    end

    class 1043867 "RoleUnresolvedList"
      visibility public 
      nactuals 4
      actual class class_ref 137627 // ArrayList
        rank 0 explicit_value ""
      actual class class_ref 137627 // ArrayList
        rank 1 explicit_value ""
      actual class class_ref 137627 // ArrayList
        rank 2 explicit_value ""
      actual class class_ref 137627 // ArrayList
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A RoleUnresolvedList represents a list of RoleUnresolved objects,
representing roles not retrieved from a relation due to a problem
encountered when trying to access (read or write to roles).

@since 1.5"
      classrelation 2076955 // <generalisation>
	relation 2076955 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2076955 // <generalisation>
	  b parent class_ref 137627 // ArrayList
      end

      attribute 3062043 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  4054902803091433324L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version "
      end

      operation 8397083 "RoleUnresolvedList"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Constructs an empty RoleUnresolvedList."
      end

      operation 8397211 "RoleUnresolvedList"
	public explicit_return_type ""
	nparams 1
	  param in name "theInitialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty RoleUnresolvedList with the initial capacity
specified.

@param theInitialCapacity  initial capacity"
      end

      operation 8397339 "RoleUnresolvedList"
	public explicit_return_type ""
	nparams 1
	  param inout name "theList" type class_ref 135579 // List
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a RoleUnresolvedList containing the elements of the
List specified, in the order in which they are returned
by the List's iterator. The RoleUnresolvedList instance has
an initial capacity of 110% of the size of the List
specified.

@param theList  list of RoleUnresolved objects

@exception IllegalArgumentException  if:
<P>- null parameter
<P>or
<P>- an element in the List is not a RoleUnresolved"
      end

      operation 8397467 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theRoleUnres" type class_ref 1044123 // RoleUnresolved
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Adds the RoleUnresolved specified as the last element of the list.

@param theRoleUnres - the unresolved role to be added.

@exception IllegalArgumentException  if the unresolved role is null."
      end

      operation 8397595 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "theRoleUnres" type class_ref 1044123 // RoleUnresolved
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 870555 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the unresolved role specified as an element at the position
specified.
Elements with an index greater than or equal to the current position are
shifted up.

@param index - The position in the list where the new
RoleUnresolved object is to be inserted.
@param theRoleUnres - The RoleUnresolved object to be inserted.

@exception IllegalArgumentException  if the unresolved role is null.
@exception IndexOutOfBoundsException if index is out of range
(<code>index &lt; 0 || index &gt; size()</code>)."
      end

      operation 8397723 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "theRoleUnres" type class_ref 1044123 // RoleUnresolved
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 870555 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the element at the position specified to be the unresolved role
specified.
The previous element at that position is discarded.

@param index - The position specified.
@param theRoleUnres - The value to which the unresolved role element
should be set.

@exception IllegalArgumentException   if the unresolved role is null.
@exception IndexOutOfBoundsException if index is out of range
(<code>index &lt; 0 || index &gt;= size()</code>)."
      end

      operation 8397851 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "theRoleUnresolvedList" type class_ref 1043867 // RoleUnresolvedList
	nexceptions 1
	  exception class_ref 870555 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all the elements in the RoleUnresolvedList specified to the end
of the list, in the order in which they are returned by the Iterator of
the RoleUnresolvedList specified.

@param theRoleUnresolvedList - Elements to be inserted into the list
(can be null).

@return true if this list changed as a result of the call.

@exception IndexOutOfBoundsException  if accessing with an index
outside of the list."
      end

      operation 8397979 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "theRoleUnresolvedList" type class_ref 1043867 // RoleUnresolvedList
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 870555 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts all of the elements in the RoleUnresolvedList specified into
this list, starting at the specified position, in the order in which
they are returned by the Iterator of the RoleUnresolvedList specified.

@param index - Position at which to insert the first element from the
RoleUnresolvedList specified.
@param theRoleUnresolvedList - Elements to be inserted into the list.

@return true if this list changed as a result of the call.

@exception IllegalArgumentException  if the role is null.
@exception IndexOutOfBoundsException if index is out of range
(<code>index &lt; 0 || index &gt; size()</code>)."
      end
    end

    class 1043995 "RoleStatus"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class describes the various problems which can be encountered when
accessing a role.

@since 1.5"
      attribute 3060379 "NO_ROLE_WITH_NAME"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Possible problems


Problem type when trying to access an unknown role.
"
      end

      attribute 3060507 "ROLE_NOT_READABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Problem type when trying to read a non-readable attribute.
"
      end

      attribute 3060635 "ROLE_NOT_WRITABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Problem type when trying to update a non-writable attribute.
"
      end

      attribute 3060763 "LESS_THAN_MIN_ROLE_DEGREE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Problem type when trying to set a role value with less ObjectNames than
the minimum expected cardinality.
"
      end

      attribute 3060891 "MORE_THAN_MAX_ROLE_DEGREE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Problem type when trying to set a role value with more ObjectNames than
the maximum expected cardinality.
"
      end

      attribute 3061019 "REF_MBEAN_OF_INCORRECT_CLASS"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Problem type when trying to set a role value including the ObjectName of
a MBean not of the class expected for that role.
"
      end

      attribute 3061147 "REF_MBEAN_NOT_REGISTERED"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Problem type when trying to set a role value including the ObjectName of
a MBean not registered in the MBean Server.
"
      end

      operation 8395547 "isRoleStatus"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "theRoleStatus" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if given value corresponds to a known role status, false
otherwise.

@param theRoleStatus a status code.

@return true if this value is a known role status."
      end
    end

    class 1044123 "RoleUnresolved"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Represents an unresolved role: a role not retrieved from a relation due
to a problem. It provides the role name, value (if problem when trying to
set the role) and an integer defining the problem (constants defined in
RoleStatus).

@since 1.5"
      classrelation 2076315 // <realization>
	relation 2076315 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2076315 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 3061275 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -9026457686611660144L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form "
      end

      attribute 3061403 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -48350262537070138L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version for new serial form "
      end

      classrelation 2076443 // oldSerialPersistentFields (<unidirectional association>)
	relation 2076443 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"myRoleName\", String.class),
      new ObjectStreamField(\"myRoleValue\", ArrayList.class),
      new ObjectStreamField(\"myPbType\", int.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2076443 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      classrelation 2076571 // newSerialPersistentFields (<unidirectional association>)
	relation 2076571 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"roleName\", String.class),
      new ObjectStreamField(\"roleValue\", List.class),
      new ObjectStreamField(\"problemType\", int.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2076571 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3061531 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual serial version and serial form"
      end

      classrelation 2076699 // serialPersistentFields (<unidirectional association>)
	relation 2076699 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment " @serialField roleName String Role name 
 @serialField roleValue List Role value ({@link List} of {@link ObjectName} objects)
 @serialField problemType int Problem type

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2076699 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3061659 "compat"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 172059 "initialization"
	
	cpp "" ""
	java "  static {
	try {
	    PrivilegedAction act = new GetPropertyAction(\"jmx.serial.form\");
	    String form = (String) AccessController.doPrivileged(act);
	    compat = (form != null && form.equals(\"1.0\"));
	} catch (Exception e) {
	    // OK : Too bad, no compat with 1.0
	}
	if (compat) {
	    serialPersistentFields = oldSerialPersistentFields;
	    serialVersionUID = oldSerialVersionUID;
	} else {
	    serialPersistentFields = newSerialPersistentFields;
	    serialVersionUID = newSerialVersionUID;
	}
    }"
	php ""
	python ""
	idl ""
      end

      attribute 3061787 "roleName"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " END Serialization compatibility stuff

 Private members


@serial Role name
"
      end

      classrelation 2076827 // roleValue (<unidirectional association>)
	relation 2076827 --->
	  a role_name "roleValue" init_value "=  null" private
	    comment "
@serial Role value ({@link List} of {@link ObjectName} objects)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2076827 // roleValue (<unidirectional association>)
	  b parent class_ref 135579 // List
      end

      attribute 3061915 "problemType"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Problem type
"
      end

      operation 8395675 "RoleUnresolved"
	public explicit_return_type ""
	nparams 3
	  param in name "theRoleName" explicit_type "String"
	  param inout name "theRoleValue" type class_ref 135579 // List
	  param in name "thePbType" explicit_type "int"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructor


Constructor.

@param theRoleName  name of the role
@param theRoleValue  value of the role (if problem when setting the
role)
@param thePbType  type of problem (according to known problem types,
listed as static final members).

@exception IllegalArgumentException  if null parameter or incorrect
problem type"
      end

      operation 8395803 "getRoleName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Retrieves role name.

@return the role name.

@see #setRoleName"
      end

      operation 8395931 "getRoleValue"
	public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves role value.

@return an ArrayList of ObjectName objects, the one provided to be set
in given role. Null if the unresolved role is returned for a read
access.

@see #setRoleValue"
      end

      operation 8396059 "getProblemType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves problem type.

@return an integer corresponding to a problem, those being described as
static final members of current class.

@see #setProblemType"
      end

      operation 8396187 "setRoleName"
	public explicit_return_type "void"
	nparams 1
	  param in name "theRoleName" explicit_type "String"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets role name.

@param theRoleName the new role name.

@exception IllegalArgumentException  if null parameter

@see #getRoleName"
      end

      operation 8396315 "setRoleValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theRoleValue" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets role value.

@param theRoleValue  List of ObjectName objects for referenced
MBeans not set in role.

@see #getRoleValue"
      end

      operation 8396443 "setProblemType"
	public explicit_return_type "void"
	nparams 1
	  param in name "thePbType" explicit_type "int"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets problem type.

@param thePbType  integer corresponding to a problem. Must be one of
those described as static final members of current class.

@exception IllegalArgumentException  if incorrect problem type

@see #getProblemType"
      end

      operation 8396571 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clone this object.

@return an independent clone."
      end

      operation 8396699 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string describing this object.

@return a description of this RoleUnresolved object."
      end

      operation 8396827 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link RoleUnresolved} from an {@link ObjectInputStream}."
      end

      operation 8396955 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link RoleUnresolved} to an {@link ObjectOutputStream}."
      end
    end
  end

  deploymentview 170395 "relation"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 792987 "RelationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.JMException;
${definition}"
      associated_classes
	class_ref 1040923 // RelationException
      end
      comment "@(#)RelationException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 793115 "InvalidRelationIdException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1040795 // InvalidRelationIdException
      end
      comment "@(#)InvalidRelationIdException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 793243 "InvalidRelationServiceException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1041051 // InvalidRelationServiceException
      end
      comment "@(#)InvalidRelationServiceException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 793371 "InvalidRelationTypeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1041179 // InvalidRelationTypeException
      end
      comment "@(#)InvalidRelationTypeException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 793499 "InvalidRoleInfoException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1041307 // InvalidRoleInfoException
      end
      comment "@(#)InvalidRoleInfoException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 793627 "InvalidRoleValueException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1041435 // InvalidRoleValueException
      end
      comment "@(#)InvalidRoleValueException.java	1.17 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 793755 "MBeanServerNotificationFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
import java.security.PrivilegedAction;
import javax.management.Notification;
import javax.management.NotificationFilterSupport;
import javax.management.MBeanServerNotification;
import javax.management.ObjectName;
import java.util.List;
import java.util.Vector;
import com.sun.jmx.mbeanserver.GetPropertyAction;
import com.sun.jmx.trace.Trace;
${definition}"
      associated_classes
	class_ref 1041563 // MBeanServerNotificationFilter
      end
      comment "@(#)MBeanServerNotificationFilter.java	1.33 04/02/10

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 793883 "Relation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import java.util.Map;
import javax.management.ObjectName;
import javax.management.InstanceNotFoundException;
import javax.management.ReflectionException;
${definition}"
      associated_classes
	class_ref 1041691 // Relation
      end
      comment "@(#)Relation.java	1.21 04/02/10

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 794011 "RelationNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1042587 // RelationNotFoundException
      end
      comment "@(#)RelationNotFoundException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 794139 "RelationNotification"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.Notification;
import javax.management.ObjectName;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import com.sun.jmx.mbeanserver.GetPropertyAction;
${definition}"
      associated_classes
	class_ref 1042715 // RelationNotification
      end
      comment "@(#)RelationNotification.java	1.31 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 794267 "RelationServiceMBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.ObjectName;
import javax.management.InstanceNotFoundException;
import java.util.List;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 1042971 // RelationServiceMBean
      end
      comment "@(#)RelationServiceMBean.java	1.26 04/02/10

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 794395 "RelationService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.Attribute;
import javax.management.AttributeNotFoundException;
import javax.management.NotificationListener;
import javax.management.ObjectName;
import javax.management.NotCompliantMBeanException;
import javax.management.Notification;
import javax.management.NotificationBroadcasterSupport;
import javax.management.MBeanRegistration;
import javax.management.MBeanServer;
import javax.management.ListenerNotFoundException;
import javax.management.InstanceNotFoundException;
import javax.management.InvalidAttributeValueException;
import javax.management.MBeanException;
import javax.management.ReflectionException;
import javax.management.MBeanServerNotification;
import javax.management.MBeanNotificationInfo;
import javax.management.MalformedObjectNameException;
import com.sun.jmx.defaults.ServiceName;
import com.sun.jmx.trace.Trace;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.List;
import java.util.Map;
import java.util.Date;
${definition}"
      associated_classes
	class_ref 1042843 // RelationService
      end
      comment "@(#)RelationService.java	1.42 04/04/13

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 794523 "RelationServiceNotRegisteredException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1041947 // RelationServiceNotRegisteredException
      end
      comment "@(#)RelationServiceNotRegisteredException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 794651 "RelationSupportMBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1043611 // RelationSupportMBean
      end
      comment "@(#)RelationSupportMBean.java	1.19 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 794779 "RelationSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.ObjectName;
import javax.management.MBeanRegistration;
import javax.management.MBeanServer;
import javax.management.InstanceNotFoundException;
import javax.management.ReflectionException;
import javax.management.MBeanException;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.List;
import com.sun.jmx.trace.Trace;
${definition}"
      associated_classes
	class_ref 1043483 // RelationSupport
      end
      comment "@(#)RelationSupport.java	1.31 04/02/10

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 794907 "RelationType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
${definition}"
      associated_classes
	class_ref 1043227 // RelationType
      end
      comment "@(#)RelationType.java	1.17 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 795035 "RelationTypeNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1042459 // RelationTypeNotFoundException
      end
      comment "@(#)RelationTypeNotFoundException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 795163 "RelationTypeSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.sun.jmx.mbeanserver.GetPropertyAction;
import com.sun.jmx.trace.Trace;
${definition}"
      associated_classes
	class_ref 1043739 // RelationTypeSupport
      end
      comment "@(#)RelationTypeSupport.java	1.31 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 795291 "Role"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.ObjectName;
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.io.Serializable;
import com.sun.jmx.mbeanserver.GetPropertyAction;
${definition}"
      associated_classes
	class_ref 1042331 // Role
      end
      comment "@(#)Role.java	1.32 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 795419 "RoleInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.io.Serializable;
import java.security.AccessController;
import java.security.PrivilegedAction;
import javax.management.NotCompliantMBeanException;
import javax.management.MBeanInfo;
import javax.management.MBeanServer;
import javax.management.loading.ClassLoaderRepository;
import com.sun.jmx.mbeanserver.GetPropertyAction;
import com.sun.jmx.mbeanserver.Introspector;
${definition}"
      associated_classes
	class_ref 1043099 // RoleInfo
      end
      comment "@(#)RoleInfo.java	1.34 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 795547 "RoleInfoNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1043355 // RoleInfoNotFoundException
      end
      comment "@(#)RoleInfoNotFoundException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 795675 "RoleList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
import java.util.Collection;
${definition}"
      associated_classes
	class_ref 1042203 // RoleList
      end
      comment "@(#)RoleList.java	1.20 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 795803 "RoleNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1041819 // RoleNotFoundException
      end
      comment "@(#)RoleNotFoundException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 795931 "RoleResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.io.Serializable;
import java.security.AccessController;
import java.security.PrivilegedAction;
import com.sun.jmx.mbeanserver.GetPropertyAction;
${definition}"
      associated_classes
	class_ref 1042075 // RoleResult
      end
      comment "@(#)RoleResult.java	1.23 04/02/10

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 796059 "RoleStatus"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1043995 // RoleStatus
      end
      comment "@(#)RoleStatus.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 796187 "RoleUnresolved"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.ObjectName;
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.io.Serializable;
import com.sun.jmx.mbeanserver.GetPropertyAction;
${definition}"
      associated_classes
	class_ref 1044123 // RoleUnresolved
      end
      comment "@(#)RoleUnresolved.java	1.26 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 796315 "RoleUnresolvedList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
${definition}"
      associated_classes
	class_ref 1043867 // RoleUnresolvedList
      end
      comment "@(#)RoleUnresolvedList.java	1.21 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
