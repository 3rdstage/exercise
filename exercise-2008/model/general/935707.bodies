class ByteBufferAsCharBufferRB
!!!7320603.java!!!	ByteBufferAsCharBufferRB(inout bb : ByteBuffer)
	// package-private












	super(bb);

!!!7320731.java!!!	ByteBufferAsCharBufferRB(inout bb : ByteBuffer, in mark : int, in pos : int, in lim : int, in cap : int, in off : int)






	super(bb, mark, pos, lim, cap, off);

!!!7320859.java!!!	slice() : CharBuffer

	int pos = this.position();
	int lim = this.limit();
	assert (pos <= lim);
	int rem = (pos <= lim ? lim - pos : 0);
	int off = (pos << 1) + offset;
        assert (off >= 0);
	return new ByteBufferAsCharBufferRB(bb, -1, 0, rem, rem, off);
!!!7320987.java!!!	duplicate() : CharBuffer

	return new ByteBufferAsCharBufferRB(bb,
						    this.markValue(),
						    this.position(),
						    this.limit(),
						    this.capacity(),
						    offset);
!!!7321115.java!!!	asReadOnlyBuffer() : CharBuffer









	return duplicate();

!!!7321243.java!!!	put(in x : char) : CharBuffer





	throw new ReadOnlyBufferException();

!!!7321371.java!!!	put(in i : int, in x : char) : CharBuffer





	throw new ReadOnlyBufferException();

!!!7321499.java!!!	compact() : CharBuffer

















	throw new ReadOnlyBufferException();

!!!7321627.java!!!	isDirect() : boolean

	return bb.isDirect();
!!!7321755.java!!!	isReadOnly() : boolean

	return true;
!!!7321883.java!!!	toString(in start : int, in end : int) : String

	if ((end > limit()) || (start > end))
	    throw new IndexOutOfBoundsException();
	try {
	    int len = end - start;
	    char[] ca = new char[len];
	    CharBuffer cb = CharBuffer.wrap(ca);
	    CharBuffer db = this.duplicate();
	    db.position(start);
	    db.limit(end);
	    cb.put(db);
	    return new String(ca);
	} catch (StringIndexOutOfBoundsException x) {
	    throw new IndexOutOfBoundsException();
	}
!!!7322011.java!!!	subSequence(in start : int, in end : int) : CharSequence

	int pos = position();
	int lim = limit();
	assert (pos <= lim);
	pos = (pos <= lim ? pos : lim);
	int len = lim - pos;

	if ((start < 0) || (end > len) || (start > end))
	    throw new IndexOutOfBoundsException();
	int sublen = end - start;
 	int off = offset + ((pos + start) << 1);
        assert (off >= 0);
	return new ByteBufferAsCharBufferRB(bb, -1, 0, sublen, sublen, off);
!!!7322139.java!!!	order() : ByteOrder


	return ByteOrder.BIG_ENDIAN;




