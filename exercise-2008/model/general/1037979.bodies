class ArrayType
!!!8336923.java!!!	ArrayType(in dimension : int, inout elementType : OpenType)
	
	// Check and construct state defined by parent.
	//
	super(buildArrayClassName(dimension, elementType.getClassName()), 
	      buildArrayClassName(dimension, elementType.getClassName()), 
	      String.valueOf(dimension) +"-dimension array of "+ elementType.getClassName());
	
	// Check and construct state specific to ArrayType
	//
	this.dimension   = dimension;   // already checked >=1 in buildArrayClassName
	this.elementType = elementType; // cannot be ArrayType: super() would throw exception on the built classname
!!!8337051.java!!!	buildArrayClassName(in dimension : int, in elementClassName : String) : String

	if (dimension < 1) {
	    throw new IllegalArgumentException("Value of argument dimension must be greater than 0");
	}

	StringBuffer result = new StringBuffer();

	for (int i=1; i<dimension; i++) { // add (dimension - 1) '[' characters
	    result.append('[');
	}
	result.append("[L");
	result.append(elementClassName);
	result.append(';');

	return result.toString();
!!!8337179.java!!!	getDimension() : int

	return dimension;
!!!8337307.java!!!	getElementOpenType() : OpenType

	return elementType;
!!!8337435.java!!!	isValue(inout obj : Object) : boolean

	// if obj is null, return false
	//
	if (obj == null) {
	    return false;
	}

	Class  objClass     = obj.getClass();
	String objClassName = objClass.getName();

	// if obj is not an array, return false
	//
	if ( ! objClass.isArray() ) {
	    return false;
	}

	// Test if obj's class name is the same as for the array values that this instance describes
	// (this is fine if elements are of simple types, which are final classes)
	//
	if ( this.getClassName().equals(objClassName) ) {
	    return true;
	}

	// In case this ArrayType instance describes an array of classes implementing the TabularData or CompositeData interface,
	// we first check for the assignability of obj to such an array of TabularData or CompositeData, 
	// which ensures that:
	//  . obj is of the the same dimension as this ArrayType instance, 
	//  . it is declared as an array of elements which are either all TabularData or all CompositeData.
	//
	// If the assignment check is positive, 
	// then we have to check that each element in obj is of the same TabularType or CompositeType 
	// as the one described by this ArrayType instance.
	//
	// [About assignment check, note that the call below returns true: ]
	// [Class.forName("[Lpackage.CompositeData;").isAssignableFrom(Class.forName("[Lpackage.CompositeDataImpl;)")); ]
	//
	if ( (this.elementType.getClassName().equals(TabularData.class.getName()))  ||
	     (this.elementType.getClassName().equals(CompositeData.class.getName()))   ) {

	    /* this.getClassName() is
	     * "[Ljavax.management.openmbean.TabularData;" or the same
	     * thing for CompositeData, either one optionally preceded
	     * by n '[' characters.  So the class is necessarily known
	     * to the ClassLoader of ArrayType, and Class.forName is
	     * safe.  */
	    Class targetClass;
	    try {
		targetClass = Class.forName(this.getClassName());
	    } catch (ClassNotFoundException e) { // should not happen 
		return false; 
	    }
	    // assignment check: return false if negative
	    if  ( ! targetClass.isAssignableFrom(objClass) ) {
		return false;
	    }

	    // check that all elements in obj are valid values for this ArrayType
	    if ( ! checkElementsType( (Object[]) obj, this.dimension) ) { // we know obj's dimension is this.dimension
		return false;
	    }

	    return true;
	}

	// if previous tests did not return, then obj is not a value for this ArrayType instance
	return false;
!!!8337563.java!!!	checkElementsType(inout x_dim_Array : Object, in dim : int) : boolean

	// if the elements of x_dim_Array are themselves array: go down recursively....
	if ( dim > 1 ) {
	    for (int i=0; i<x_dim_Array.length; i++) {
		if ( ! checkElementsType((Object[])x_dim_Array[i], dim-1) ) {
		    return false;
		}
	    }
	    return true;
	}
	// ...else, for a non-empty array, each element must be a valid value: either null or of the right openType
	else {
	    for (int i=0; i<x_dim_Array.length; i++) {
		if ( (x_dim_Array[i] != null) && (! this.getElementOpenType().isValue(x_dim_Array[i])) ) {
		    return false;
		}
	    }
	    return true;
	}
!!!8337691.java!!!	equals(inout obj : Object) : boolean

	// if obj is null, return false
	//
	if (obj == null) {
	    return false;
	}

	// if obj is not an ArrayType, return false
	//
	ArrayType other;
	try {
	    other = (ArrayType) obj;
	} catch (ClassCastException e) {
	    return false;
	}

	// if other's dimension is different than this instance's, return false
	//
	if (other.dimension != this.dimension) {
	    return false;
	}

	// Test if other's elementType field is the same as for this instance
	//
	return this.elementType.equals(other.elementType);
!!!8337819.java!!!	hashCode() : int

	// Calculate the hash code value if it has not yet been done (ie 1st call to hashCode())
	//
	if (myHashCode == null) {
	    int value = 0;
	    value += this.dimension;
	    value += this.elementType.hashCode();
	    myHashCode = new Integer(value);
	}
	
	// return always the same hash code for this instance (immutable)
	//
	return myHashCode.intValue();
!!!8337947.java!!!	toString() : String

	// Calculate the string representation if it has not yet been done (ie 1st call to toString())
	//
	if (myToString == null) {
	    StringBuffer result = new StringBuffer();
	    result.append(this.getClass().getName());
	    result.append("(name=");
	    result.append(getTypeName());
	    result.append(",dimension=");
	    result.append(String.valueOf(this.dimension));
	    result.append(",elementType=");
	    result.append(this.elementType.toString());
	    result.append(")");
	    myToString = result.toString();
	}

	// return always the same string representation for this instance (immutable)
	//
	return myToString;
