class SparseBitSet
!!!3148955.java!!!	SparseBitSet()
	bits = new long[4];
	offs = new int [4];
	size = 0;
!!!3149083.java!!!	SparseBitSet(in nbits : int)
	this();
!!!3149211.java!!!	SparseBitSet(inout set : SparseBitSet)
	bits = new long[set.size];
	offs = new int [set.size];
	size = 0;
!!!3149339.java!!!	new_block(in bnum : int) : void
	new_block(bsearch(bnum), bnum);
!!!3149467.java!!!	new_block(in idx : int, in bnum : int) : void
	if (size==bits.length) { // resize
	    long[] nbits = new long[size*3];
	    int [] noffs = new int [size*3];
	    System.arraycopy(bits, 0, nbits, 0, size);
	    System.arraycopy(offs, 0, noffs, 0, size);
	    bits = nbits;
	    offs = noffs;
	}
	CUtility._assert(size<bits.length);
	insert_block(idx, bnum);
!!!3149595.java!!!	insert_block(in idx : int, in bnum : int) : void
	CUtility._assert(idx<=size);
	CUtility._assert(idx==size || offs[idx]!=bnum);
	System.arraycopy(bits, idx, bits, idx+1, size-idx);
	System.arraycopy(offs, idx, offs, idx+1, size-idx);
	offs[idx]=bnum;
	bits[idx]=0; //clear them bits.
	size++;
!!!3149723.java!!!	bsearch(in bnum : int) : int
	int l=0, r=size; // search interval is [l, r)
	while (l<r) {
	    int p = (l+r)/2;
	    if (bnum<offs[p]) r=p;
	    else if (bnum>offs[p]) l=p+1;
	    else return p;
	}
	CUtility._assert(l==r);
	return l; // index at which the bnum *should* be, if it's not.
!!!3149851.java!!!	set(in bit : int) : void
	int bnum = bit >> LG_BITS;
	int idx  = bsearch(bnum);
	if (idx >= size || offs[idx]!=bnum)
	    new_block(idx, bnum);
	bits[idx] |= (1L << (bit & BITS_M1) );
!!!3149979.java!!!	clear(in bit : int) : void
	int bnum = bit >> LG_BITS;
	int idx  = bsearch(bnum);
	if (idx >= size || offs[idx]!=bnum)
	    new_block(idx, bnum);
	bits[idx] &= ~(1L << (bit & BITS_M1) );
!!!3150107.java!!!	clearAll() : void
	size = 0;
!!!3150235.java!!!	get(in bit : int) : boolean
	int bnum = bit >> LG_BITS;
	int idx  = bsearch(bnum);
	if (idx >= size || offs[idx]!=bnum)
	    return false;
	return 0 != ( bits[idx] & (1L << (bit & BITS_M1) ) );
!!!3150363.java!!!	and(inout set : SparseBitSet) : void
	binop(this, set, AND);
!!!3150491.java!!!	or(inout set : SparseBitSet) : void
	binop(this, set, OR);
!!!3150619.java!!!	xor(inout set : SparseBitSet) : void
	binop(this, set, XOR);
!!!3150875.java!!!	binop(inout a : SparseBitSet, inout b : SparseBitSet, inout op : BinOp) : void
	int  nsize = a.size + b.size;
	long[] nbits; 
	int [] noffs;
	int a_zero, a_size;
	// be very clever and avoid allocating more memory if we can.
	if (a.bits.length < nsize) { // oh well, have to make working space.
	    nbits = new long[nsize];
	    noffs = new int [nsize];
	    a_zero  = 0; a_size = a.size;
	} else { // reduce, reuse, recycle!
	    nbits = a.bits;
	    noffs = a.offs;
	    a_zero = a.bits.length - a.size; a_size = a.bits.length;
	    System.arraycopy(a.bits, 0, a.bits, a_zero, a.size);
	    System.arraycopy(a.offs, 0, a.offs, a_zero, a.size);
	}
	// ok, crunch through and binop those sets!
	nsize = 0;
	for (int i=a_zero, j=0; i<a_size || j<b.size; ) {
	    long nb; int no;
	    if (i<a_size && (j>=b.size || a.offs[i] < b.offs[j])) {
		nb = op.op(a.bits[i], 0);
		no = a.offs[i];
		i++;
	    } else if (j<b.size && (i>=a_size || a.offs[i] > b.offs[j])) {
		nb = op.op(0, b.bits[j]);
		no = b.offs[j];
		j++;
	    } else { // equal keys; merge.
		nb = op.op(a.bits[i], b.bits[j]);
		no = a.offs[i];
		i++; j++;
	    }
	    if (nb!=0) {
		nbits[nsize] = nb;
		noffs[nsize] = no;
		nsize++;
	    }
	}
	a.bits = nbits;
	a.offs = noffs;
	a.size = nsize;
!!!3151003.java!!!	hashCode() : int
	long h = 1234;
	for (int i=0; i<size; i++)
	    h ^= bits[i] * offs[i];
	return (int)((h >> 32) ^ h);
!!!3151131.java!!!	size() : int
	return (size==0)?0:((1+offs[size-1]) << LG_BITS);
!!!3151259.java!!!	equals(inout obj : Object) : boolean
	if ((obj != null) && (obj instanceof SparseBitSet))
	    return equals(this, (SparseBitSet)obj); 
	return false;
!!!3151387.java!!!	equals(inout a : SparseBitSet, inout b : SparseBitSet) : boolean
	for (int i=0, j=0; i<a.size || j<b.size; ) {
	    if (i<a.size && (j>=b.size || a.offs[i] < b.offs[j])) {
		if (a.bits[i++]!=0) return false;
	    } else if (j<b.size && (i>=a.size || a.offs[i] > b.offs[j])) {
		if (b.bits[j++]!=0) return false;
	    } else { // equal keys
		if (a.bits[i++]!=b.bits[j++]) return false;
	    }
	}
	return true;
!!!3151515.java!!!	clone() : Object
	try { 
	    SparseBitSet set = (SparseBitSet)super.clone();
	    set.bits = (long[]) bits.clone();
	    set.offs = (int []) offs.clone();
	    return set;
	} catch (CloneNotSupportedException e) {
	    // this shouldn't happen, since we are Cloneable
	    throw new InternalError();
	}
!!!3151643.java!!!	elements() : Enumeration
	return new Enumeration() {
	    int idx=-1, bit=BITS;
	    { advance(); }
	    public boolean hasMoreElements() {
		return (idx<size);
	    }
	    public Object nextElement() {
		int r = bit + (offs[idx] << LG_BITS);
		advance();
		return new Integer(r);
	    }
	    private void advance() {
		while (idx<size) {
		    while (++bit<BITS)
			if (0!=(bits[idx] & (1L<<bit)))
			    return;
		    idx++; bit=-1;
		}
	    }
	};
!!!3151771.java!!!	toString() : String
	StringBuffer sb = new StringBuffer();
	sb.append('{');
	for (Enumeration e=elements(); e.hasMoreElements(); ) {
	    if (sb.length() > 1) sb.append(", ");
	    sb.append(e.nextElement());
	}
	sb.append('}');
	return sb.toString();
!!!3151899.java!!!	isValid() : boolean
	if (bits.length!=offs.length) return false;
	if (size>bits.length) return false;
	if (size!=0 && 0<=offs[0]) return false;
	for (int i=1; i<size; i++)
	    if (offs[i] < offs[i-1])
		    return false;
	return true;
!!!3152027.java!!!	main(in args : String) : void
	final int ITER = 500;
	final int RANGE= 65536;
	SparseBitSet a = new SparseBitSet();
	CUtility._assert(!a.get(0) && !a.get(1));
	CUtility._assert(!a.get(123329));
	a.set(0); CUtility._assert(a.get(0) && !a.get(1));
	a.set(1); CUtility._assert(a.get(0) && a.get(1));
	a.clearAll();
	CUtility._assert(!a.get(0) && !a.get(1));
	java.util.Random r = new java.util.Random();
	java.util.Vector v = new java.util.Vector();
	for (int n=0; n<ITER; n++) {
	    int rr = ((r.nextInt()>>>1) % RANGE) << 1;
	    a.set(rr); v.addElement(new Integer(rr));
	    // check that all the numbers are there.
	    CUtility._assert(a.get(rr) && !a.get(rr+1) && !a.get(rr-1));
	    for (int i=0; i<v.size(); i++)
		CUtility._assert(a.get(((Integer)v.elementAt(i)).intValue()));
	}
	SparseBitSet b = (SparseBitSet) a.clone();
	CUtility._assert(a.equals(b) && b.equals(a));
	for (int n=0; n<ITER/2; n++) {
	    int rr = (r.nextInt()>>>1) % v.size();
	    int m = ((Integer)v.elementAt(rr)).intValue();
	    b.clear(m); v.removeElementAt(rr);
	    // check that numbers are removed properly.
	    CUtility._assert(!b.get(m));
	}
	CUtility._assert(!a.equals(b));
	SparseBitSet c = (SparseBitSet) a.clone();
	SparseBitSet d = (SparseBitSet) a.clone();
	c.and(a);
	CUtility._assert(c.equals(a) && a.equals(c));
	c.xor(a);
	CUtility._assert(!c.equals(a) && c.size()==0);
	d.or(b);
	CUtility._assert(d.equals(a) && !b.equals(d));
	d.and(b);
	CUtility._assert(!d.equals(a) && b.equals(d));
	d.xor(a);
	CUtility._assert(!d.equals(a) && !b.equals(d));
	c.or(d); c.or(b);
	CUtility._assert(c.equals(a) && a.equals(c));
	c = (SparseBitSet) d.clone();
	c.and(b);
	CUtility._assert(c.size()==0);
	System.out.println("Success.");
