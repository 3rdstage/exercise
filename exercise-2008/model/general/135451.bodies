class AbstractList
!!!145307.java!!!	add(inout o : E) : boolean
	add(size(), o);
	return true;
!!!145563.java!!!	set(in index : int, inout element : E) : E
	throw new UnsupportedOperationException();
!!!145691.java!!!	add(in index : int, inout element : E) : void
	throw new UnsupportedOperationException();
!!!145819.java!!!	remove(in index : int) : E
	throw new UnsupportedOperationException();
!!!145947.java!!!	indexOf(inout o : Object) : int
	ListIterator<E> e = listIterator();
	if (o==null) {
	    while (e.hasNext())
		if (e.next()==null)
		    return e.previousIndex();
	} else {
	    while (e.hasNext())
		if (o.equals(e.next()))
		    return e.previousIndex();
	}
	return -1;
!!!146075.java!!!	lastIndexOf(inout o : Object) : int
	ListIterator<E> e = listIterator(size());
	if (o==null) {
	    while (e.hasPrevious())
		if (e.previous()==null)
		    return e.nextIndex();
	} else {
	    while (e.hasPrevious())
		if (o.equals(e.previous()))
		    return e.nextIndex();
	}
	return -1;
!!!146203.java!!!	clear() : void
        removeRange(0, size());
!!!146331.java!!!	addAll(in index : int, inout c : Collection) : boolean
	boolean modified = false;
	Iterator<? extends E> e = c.iterator();
	while (e.hasNext()) {
	    add(index++, e.next());
	    modified = true;
	}
	return modified;
!!!146459.java!!!	iterator() : Iterator
	return new Itr();
!!!146587.java!!!	listIterator() : ListIterator
	return listIterator(0);
!!!146715.java!!!	listIterator(in index : int) : ListIterator
	if (index<0 || index>size())
	  throw new IndexOutOfBoundsException("Index: "+index);

	return new ListItr(index);
!!!149787.java!!!	subList(in fromIndex : int, in toIndex : int) : List
        return (this instanceof RandomAccess ?
                new RandomAccessSubList<E>(this, fromIndex, toIndex) :
                new SubList<E>(this, fromIndex, toIndex));
!!!149915.java!!!	equals(inout o : Object) : boolean
	if (o == this)
	    return true;
	if (!(o instanceof List))
	    return false;

	ListIterator<E> e1 = listIterator();
	ListIterator e2 = ((List) o).listIterator();
	while(e1.hasNext() && e2.hasNext()) {
	    E o1 = e1.next();
	    Object o2 = e2.next();
	    if (!(o1==null ? o2==null : o1.equals(o2)))
		return false;
	}
	return !(e1.hasNext() || e2.hasNext());
!!!150043.java!!!	hashCode() : int
	int hashCode = 1;
	Iterator<E> i = iterator();
     	while (i.hasNext()) {
	    E obj = i.next();
	    hashCode = 31*hashCode + (obj==null ? 0 : obj.hashCode());
	}
	return hashCode;
!!!150171.java!!!	removeRange(in fromIndex : int, in toIndex : int) : void
        ListIterator<E> it = listIterator(fromIndex);
        for (int i=0, n=toIndex-fromIndex; i<n; i++) {
            it.next();
            it.remove();
        }
