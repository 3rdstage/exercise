class ElementNSImpl
!!!4839579.java!!!	ElementNSImpl()
        super();
!!!4839707.java!!!	ElementNSImpl(inout ownerDocument : CoreDocumentImpl, in namespaceURI : String, in qualifiedName : String)
        super(ownerDocument, qualifiedName);
        setName(namespaceURI, qualifiedName);
!!!4839835.java!!!	setName(in namespaceURI : String, in qname : String) : void
        
		String prefix;
		// DOM Level 3: namespace URI is never empty string.
		this.namespaceURI = namespaceURI;
		if (namespaceURI != null) {
            //convert the empty string to 'null'
             this.namespaceURI =    (namespaceURI.length() == 0) ? null : namespaceURI;
         }

        int colon1, colon2 ;

        //NAMESPACE_ERR:
        //1. if the qualified name is 'null' it is malformed.
        //2. or if the qualifiedName is null and the namespaceURI is different from null,
        // We dont need to check for namespaceURI != null, if qualified name is null throw DOMException.
        if(qname == null){
                 String msg =
                     DOMMessageFormatter.formatMessage(
                         DOMMessageFormatter.DOM_DOMAIN,
                         "NAMESPACE_ERR",
                         null);
                 throw new DOMException(DOMException.NAMESPACE_ERR, msg);
         }
         else{
             colon1 = qname.indexOf(':');
             colon2 = qname.lastIndexOf(':');
		}
		ownerDocument().checkNamespaceWF(qname, colon1, colon2);
		if (colon1 < 0) {
			// there is no prefix
			localName = qname;
			ownerDocument().checkQName(null, localName);
			if (qname.equals("xmlns")
				&& (namespaceURI == null
					|| !namespaceURI.equals(NamespaceContext.XMLNS_URI))
				|| (namespaceURI!=null && namespaceURI.equals(NamespaceContext.XMLNS_URI)
					&& !qname.equals("xmlns"))) {
				String msg =
					DOMMessageFormatter.formatMessage(
						DOMMessageFormatter.DOM_DOMAIN,
						"NAMESPACE_ERR",
						null);
				throw new DOMException(DOMException.NAMESPACE_ERR, msg);
			}
		}//there is a prefix
		else {
			prefix = qname.substring(0, colon1);

            //NAMESPACE_ERR:
            //1. if the qualifiedName has a prefix and the namespaceURI is null,

            //2. or if the qualifiedName has a prefix that is "xml" and the namespaceURI
            //is different from " http://www.w3.org/XML/1998/namespace"

            if( namespaceURI == null || ( prefix.equals("xml") && !namespaceURI.equals(NamespaceContext.XML_URI) )){
                String msg =
                    DOMMessageFormatter.formatMessage(
                        DOMMessageFormatter.DOM_DOMAIN,
                        "NAMESPACE_ERR",
                        null);
                throw new DOMException(DOMException.NAMESPACE_ERR, msg);
            }

			localName = qname.substring(colon2 + 1);
			ownerDocument().checkQName(prefix, localName);
			ownerDocument().checkDOMNSErr(prefix, namespaceURI);
		}
!!!4839963.java!!!	ElementNSImpl(inout ownerDocument : CoreDocumentImpl, in namespaceURI : String, in qualifiedName : String, in localName : String)
        super(ownerDocument, qualifiedName);

        this.localName = localName;
        this.namespaceURI = namespaceURI;
!!!4840091.java!!!	ElementNSImpl(inout ownerDocument : CoreDocumentImpl, in value : String)
        super(ownerDocument, value);
!!!4840219.java!!!	rename(in namespaceURI : String, in qualifiedName : String) : void
        if (needsSyncData()) {
            synchronizeData();
        }
	this.name = qualifiedName;
        setName(namespaceURI, qualifiedName);
        reconcileDefaultAttributes();
!!!4840347.java!!!	setValues(inout ownerDocument : CoreDocumentImpl, in namespaceURI : String, in qualifiedName : String, in localName : String) : void
        
        // remove children first
        firstChild = null;
        previousSibling = null;
        nextSibling = null;
        fNodeListCache = null;
        
        // set owner document
        attributes = null;
        super.flags = 0;
        setOwnerDocument(ownerDocument);

        // synchronizeData will initialize attributes
        needsSyncData(true);    
        super.name = qualifiedName;
        this.localName = localName;
        this.namespaceURI = namespaceURI;

!!!4840475.java!!!	getNamespaceURI() : String
        if (needsSyncData()) {
            synchronizeData();
        }
        return namespaceURI;
!!!4840603.java!!!	getPrefix() : String
        
        if (needsSyncData()) {
            synchronizeData();
        }
        int index = name.indexOf(':');
        return index < 0 ? null : name.substring(0, index); 
!!!4840731.java!!!	setPrefix(in prefix : String) : void
        if (needsSyncData()) {
            synchronizeData();
        }
        if (ownerDocument().errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(
                                     DOMException.NO_MODIFICATION_ALLOWED_ERR, 
                                     msg);
            }
            if (prefix != null && prefix.length() != 0) {
                if (!CoreDocumentImpl.isXMLName(prefix,ownerDocument().isXML11Version())) {
                    String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_CHARACTER_ERR", null);
                    throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
                }
                if (namespaceURI == null || prefix.indexOf(':') >=0) {
                    String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NAMESPACE_ERR", null);
                    throw new DOMException(DOMException.NAMESPACE_ERR, msg);
                } else if (prefix.equals("xml")) {
                     if (!namespaceURI.equals(xmlURI)) {
                         String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NAMESPACE_ERR", null);
                         throw new DOMException(DOMException.NAMESPACE_ERR, msg);
                     }
                }
            }
        }
        // update node name with new qualifiedName
        if (prefix !=null && prefix.length() != 0) {
            name = prefix + ":" + localName;
        }
        else {
            name = localName;
        }
!!!4840859.java!!!	getLocalName() : String
        if (needsSyncData()) {
            synchronizeData();
        }
        return localName;
!!!4840987.java!!!	getBaseURI() : String

        if (needsSyncData()) {
            synchronizeData();
        }

        //Absolute base URI is computed according to XML Base (http://www.w3.org/TR/xmlbase/#granularity)
 
        //1.  the base URI specified by an xml:base attribute on the element, if one exists

        if (attributes != null) {
            Attr attrNode = (Attr)attributes.getNamedItemNS("http://www.w3.org/XML/1998/namespace", "base");
            if (attrNode != null) {
                String uri =  attrNode.getNodeValue();
                if (uri.length() != 0 ) {// attribute value is always empty string
                    try {
                       uri = new URI(uri).toString();  
                    } 
                    catch (com.sun.org.apache.xerces.internal.util.URI.MalformedURIException e){
                        // REVISIT: what should happen in this case?
                        return null;
                    }
                    return uri;
                }
            }
        }

        //2.the base URI of the element's parent element within the document or external entity,
        //if one exists
        String parentElementBaseURI = (this.parentNode() != null) ? this.parentNode().getBaseURI() : null ;
        //base URI of parent element is not null
        if(parentElementBaseURI != null){
            try {
                //return valid absolute base URI
               return new URI(parentElementBaseURI).toString();
            }
            catch (com.sun.org.apache.xerces.internal.util.URI.MalformedURIException e){
                // REVISIT: what should happen in this case?
                return null;
            }
        }
        //3. the base URI of the document entity or external entity containing the element

        String baseURI = (this.ownerNode != null) ? this.ownerNode.getBaseURI() : null ;

        if(baseURI != null){
            try {
                //return valid absolute base URI
               return new URI(baseURI).toString();
            }
            catch (com.sun.org.apache.xerces.internal.util.URI.MalformedURIException e){
                // REVISIT: what should happen in this case?
                return null;
            }
        }

        return null;
!!!4841115.java!!!	setType(inout type : TypeInfo) : void
        this.type = type;
