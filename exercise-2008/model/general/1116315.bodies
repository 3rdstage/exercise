class JPasswordField
!!!9022363.java!!!	JPasswordField()
        this(null,null,0);
!!!9022491.java!!!	JPasswordField(in text : String)
        this(null, text, 0);
!!!9022619.java!!!	JPasswordField(in columns : int)
        this(null, null, columns);
!!!9022747.java!!!	JPasswordField(in text : String, in columns : int)
        this(null, text, columns);
!!!9022875.java!!!	JPasswordField(inout doc : Document, in txt : String, in columns : int)
        super(doc, txt, columns);
        echoChar = '*';
        // We could either leave this on, which wouldn't be secure,
        // or obscure the composted text, which essentially makes displaying
        // it useless. Therefore, we turn off input methods.
        enableInputMethods(false);
!!!9023003.java!!!	getUIClassID() : String
        return uiClassID;
!!!9023131.java!!!	getEchoChar() : char
        return echoChar;
!!!9023259.java!!!	setEchoChar(in c : char) : void
        echoChar = c;
        repaint();
        revalidate();
!!!9023387.java!!!	echoCharIsSet() : boolean
        return echoChar != 0;
!!!9023515.java!!!	cut() : void
        if (getClientProperty("JPasswordField.cutCopyAllowed") != Boolean.TRUE) {
            UIManager.getLookAndFeel().provideErrorFeedback(this);
        } else {
            super.cut();
        }
!!!9023643.java!!!	copy() : void
        if (getClientProperty("JPasswordField.cutCopyAllowed") != Boolean.TRUE) {
            UIManager.getLookAndFeel().provideErrorFeedback(this);
        } else {
            super.copy();
        }
!!!9023771.java!!!	getText() : String
	return super.getText();
!!!9023899.java!!!	getText(in offs : int, in len : int) : String
        return super.getText(offs, len);
!!!9024027.java!!!	getPassword() : char
        Document doc = getDocument();
	Segment txt = new Segment();
        try {
            doc.getText(0, doc.getLength(), txt); // use the non-String API
        } catch (BadLocationException e) {
	    return null;
        }
	char[] retValue = new char[txt.count];
	System.arraycopy(txt.array, txt.offset, retValue, 0, txt.count);
        return retValue;
!!!9024155.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();
        if (getUIClassID().equals(uiClassID)) {
            byte count = JComponent.getWriteObjCounter(this);
            JComponent.setWriteObjCounter(this, --count);
            if (count == 0 && ui != null) {
                ui.installUI(this);
            }
        }
!!!9024283.java!!!	paramString() : String
	return super.paramString() +
	",echoChar=" + echoChar;
!!!9024411.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJPasswordField();
        }
        return accessibleContext;
