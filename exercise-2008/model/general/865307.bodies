class ScrollPane
!!!6356251.java!!!	ScrollPane()
	this(SCROLLBARS_AS_NEEDED);
!!!6356379.java!!!	ScrollPane(in scrollbarDisplayPolicy : int)
        GraphicsEnvironment.checkHeadless();
	this.layoutMgr = null;
	this.width = 100;
	this.height = 100;
	switch (scrollbarDisplayPolicy) {
	    case SCROLLBARS_NEVER:
	    case SCROLLBARS_AS_NEEDED:
	    case SCROLLBARS_ALWAYS:
		this.scrollbarDisplayPolicy = scrollbarDisplayPolicy;
		break;
	    default:
		throw new IllegalArgumentException("illegal scrollbar display policy");
	}

	vAdjustable = new ScrollPaneAdjustable(this, new PeerFixer(this),
					       Adjustable.VERTICAL);
	hAdjustable = new ScrollPaneAdjustable(this, new PeerFixer(this),
					       Adjustable.HORIZONTAL);
	setWheelScrollingEnabled(defaultWheelScroll);
!!!6356507.java!!!	constructComponentName() : String
        synchronized (getClass()) {
	    return base + nameCounter++;
	}
!!!6356635.java!!!	addToPanel(inout comp : Component, inout constraints : Object, in index : int) : void
        Panel child = new Panel();
        child.setLayout(new BorderLayout());
        child.add(comp);
        super.addImpl(child, constraints, index);
        validate();        
!!!6356763.java!!!	addImpl(inout comp : Component, inout constraints : Object, in index : int) : void
    	synchronized (getTreeLock()) {
	    if (getComponentCount() > 0) {
		remove(0);
	    }
	    if (index > 0) {
		throw new IllegalArgumentException("position greater than 0");
	    }

            if (!SunToolkit.isLightweightOrUnknown(comp)) {
                super.addImpl(comp, constraints, index);
            } else {
                addToPanel(comp, constraints, index);
            }
	}
!!!6356891.java!!!	getScrollbarDisplayPolicy() : int
        return scrollbarDisplayPolicy;
!!!6357019.java!!!	getViewportSize() : Dimension
	Insets i = getInsets();
	return new Dimension(width - i.right - i.left,
			     height - i.top - i.bottom);
!!!6357147.java!!!	getHScrollbarHeight() : int
	int h = 0;
	if (scrollbarDisplayPolicy != SCROLLBARS_NEVER) {
	    ScrollPanePeer peer = (ScrollPanePeer)this.peer;
	    if (peer != null) {
		h = peer.getHScrollbarHeight();
	    }
	}
	return h;
!!!6357275.java!!!	getVScrollbarWidth() : int
	int w = 0;
	if (scrollbarDisplayPolicy != SCROLLBARS_NEVER) {
	    ScrollPanePeer peer = (ScrollPanePeer)this.peer;
	    if (peer != null) {
		w = peer.getVScrollbarWidth();
	    }
	}
	return w;
!!!6357403.java!!!	getVAdjustable() : Adjustable
        return vAdjustable;
!!!6357531.java!!!	getHAdjustable() : Adjustable
        return hAdjustable;
!!!6357659.java!!!	setScrollPosition(in x : int, in y : int) : void
    	synchronized (getTreeLock()) {
	    if (ncomponents <= 0) {
		throw new NullPointerException("child is null");
	    }
	    hAdjustable.setValue(x);
	    vAdjustable.setValue(y);
	}
!!!6357787.java!!!	setScrollPosition(inout p : Point) : void
        setScrollPosition(p.x, p.y);
!!!6357915.java!!!	getScrollPosition() : Point
	if (ncomponents <= 0) {
	    throw new NullPointerException("child is null");
	}
	return new Point(hAdjustable.getValue(), vAdjustable.getValue());
!!!6358043.java!!!	setLayout(inout mgr : LayoutManager) : void
	throw new AWTError("ScrollPane controls layout");
!!!6358171.java!!!	doLayout() : void
	layout();
!!!6358299.java!!!	calculateChildSize() : Dimension
	//
	// calculate the view size, accounting for border but not scrollbars
	// - don't use right/bottom insets since they vary depending
	//   on whether or not scrollbars were displayed on last resize
	//
	Dimension	size = getSize();
	Insets		insets = getInsets();
	int 		viewWidth = size.width - insets.left*2;
	int 		viewHeight = size.height - insets.top*2;

	//
	// determine whether or not horz or vert scrollbars will be displayed
	//
	boolean vbarOn;
	boolean hbarOn;
	Component child = getComponent(0);
	Dimension childSize = new Dimension(child.getPreferredSize());

	if (scrollbarDisplayPolicy == SCROLLBARS_AS_NEEDED) {
	    vbarOn = childSize.height > viewHeight;
	    hbarOn = childSize.width  > viewWidth;
	} else if (scrollbarDisplayPolicy == SCROLLBARS_ALWAYS) {
	    vbarOn = hbarOn = true;
	} else { // SCROLLBARS_NEVER
	    vbarOn = hbarOn = false;
	}
	
	//
	// adjust predicted view size to account for scrollbars
	//
	int vbarWidth = getVScrollbarWidth(); 
	int hbarHeight = getHScrollbarHeight();
	if (vbarOn) {
	    viewWidth -= vbarWidth;
	}
	if(hbarOn) {
	    viewHeight -= hbarHeight;
	}

	//
	// if child is smaller than view, size it up
	//
	if (childSize.width < viewWidth) {
	    childSize.width = viewWidth;
	}
	if (childSize.height < viewHeight) {
	    childSize.height = viewHeight;
	}

	return childSize;
!!!6358427.java!!!	layout() : void
	if (ncomponents > 0) {
	    Component c = getComponent(0);
	    Point p = getScrollPosition();
	    Dimension cs = calculateChildSize();
	    Dimension vs = getViewportSize();
	    Insets i = getInsets();

	    c.reshape(i.left - p.x, i.top - p.y, cs.width, cs.height);
	    ScrollPanePeer peer = (ScrollPanePeer)this.peer;
	    if (peer != null) {
	        peer.childResized(cs.width, cs.height);
	    }

	    // update adjustables... the viewport size may have changed
	    // with the scrollbars coming or going so the viewport size
	    // is updated before the adjustables.
	    vs = getViewportSize();
	    hAdjustable.setSpan(0, cs.width, vs.width);
	    vAdjustable.setSpan(0, cs.height, vs.height);
	}
!!!6358555.java!!!	printComponents(inout g : Graphics) : void
	if (ncomponents > 0) {
	    Component c = component[0];
	    Point p = c.getLocation();
	    Dimension vs = getViewportSize();
	    Insets i = getInsets();

	    Graphics cg = g.create();
	    try {
	        cg.clipRect(i.left, i.top, vs.width, vs.height);
	        cg.translate(p.x, p.y);
		c.printAll(cg);
	    } finally {
		cg.dispose();
	    }
	}
!!!6358683.java!!!	addNotify() : void
        synchronized (getTreeLock()) {

            int vAdjustableValue = 0;
            int hAdjustableValue = 0;

            // Bug 4124460. Save the current adjustable values,
            // so they can be restored after addnotify. Set the
            // adjustables to 0, to prevent crashes for possible
            // negative values.
            if (getComponentCount() > 0) {
                vAdjustableValue = vAdjustable.getValue();
                hAdjustableValue = hAdjustable.getValue();
                vAdjustable.setValue(0);
                hAdjustable.setValue(0);
            }

	    if (peer == null)
	        peer = getToolkit().createScrollPane(this);
	    super.addNotify();

            // Bug 4124460. Restore the adjustable values.
            if (getComponentCount() > 0) {
                vAdjustable.setValue(vAdjustableValue);
                hAdjustable.setValue(hAdjustableValue);
            }
	}
!!!6358811.java!!!	paramString() : String
	String sdpStr;
	switch (scrollbarDisplayPolicy) {
	    case SCROLLBARS_AS_NEEDED:
		sdpStr = "as-needed";
		break;
	    case SCROLLBARS_ALWAYS:
		sdpStr = "always";
		break;
	    case SCROLLBARS_NEVER:
		sdpStr = "never";
		break;
	    default:
		sdpStr = "invalid display policy";
	}
	Point p = ncomponents > 0? getScrollPosition() : new Point(0,0);
	Insets i = getInsets();
	return super.paramString()+",ScrollPosition=("+p.x+","+p.y+")"+
	    ",Insets=("+i.top+","+i.left+","+i.bottom+","+i.right+")"+
	    ",ScrollbarDisplayPolicy="+sdpStr+
        ",wheelScrollingEnabled="+isWheelScrollingEnabled();
!!!6358939.java!!!	autoProcessMouseWheel(inout e : MouseWheelEvent) : void
        processMouseWheelEvent(e);
!!!6359067.java!!!	processMouseWheelEvent(inout e : MouseWheelEvent) : void
        if (isWheelScrollingEnabled()) {
            ScrollPaneWheelScroller.handleWheelScrolling(this, e);
            e.consume();
        }
        super.processMouseWheelEvent(e);
!!!6359195.java!!!	eventTypeEnabled(in type : int) : boolean
        if (type == MouseEvent.MOUSE_WHEEL && isWheelScrollingEnabled()) {
            return true;
        }
        else {
            return super.eventTypeEnabled(type);
        }
!!!6359323.java!!!	setWheelScrollingEnabled(inout handleWheel : boolean) : void
        wheelScrollingEnabled = handleWheel;
!!!6359451.java!!!	isWheelScrollingEnabled() : boolean
        return wheelScrollingEnabled;
!!!6359579.java!!!	writeObject(inout s : ObjectOutputStream) : void
	// 4352819: We only need this degenerate writeObject to make
	// it safe for future versions of this class to write optional
	// data to the stream.
	s.defaultWriteObject();
!!!6359707.java!!!	readObject(inout s : ObjectInputStream) : void
        GraphicsEnvironment.checkHeadless();
	// 4352819: Gotcha!  Cannot use s.defaultReadObject here and
	// then continue with reading optional data.  Use GetField instead.
	ObjectInputStream.GetField f = s.readFields();

	// Old fields
	scrollbarDisplayPolicy = f.get("scrollbarDisplayPolicy",
				       SCROLLBARS_AS_NEEDED);
	hAdjustable = (ScrollPaneAdjustable)f.get("hAdjustable", null);
	vAdjustable = (ScrollPaneAdjustable)f.get("vAdjustable", null);

	// Since 1.4
	wheelScrollingEnabled = f.get("wheelScrollingEnabled",
				      defaultWheelScroll);

//	// Note to future maintainers
//	if (f.defaulted("wheelScrollingEnabled")) {
//	    // We are reading pre-1.4 stream that doesn't have
//	    // optional data, not even the TC_ENDBLOCKDATA marker.
//	    // Reading anything after this point is unsafe as we will
//	    // read unrelated objects further down the stream (4352819).
//	}
//	else {
//	    // Reading data from 1.4 or later, it's ok to try to read
//	    // optional data as OptionalDataException with eof == true
//	    // will be correctly reported
//	}
!!!6360091.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleAWTScrollPane();
        }
        return accessibleContext;
