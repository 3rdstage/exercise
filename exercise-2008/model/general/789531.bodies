class XPointerElementHandler
!!!5560475.java!!!	XPointerElementHandler()
        
        
        fDepth = 0;
        fRootDepth = 0;
        fSawFallback[fDepth] = false;
        fSawInclude[fDepth] = false;
        fSchemaName="element";
        
        
!!!5560603.java!!!	reset() : void
        elemCount =0;
        fPointerToken = null;
        fCurrentTokenint=0;
        fCurrentTokenString=null;
        fCurrentTokenType=0 ;
        fElementCount =0;
        fCurrentToken =0;
        includeElement = false;
        foundElement = null;
        skip = false;
        fSubResourceIdentified=false;
!!!5560731.java!!!	reset(inout componentManager : XMLComponentManager) : void
        fNamespaceContext = null;
        elemCount =0;
        fDepth = 0;
        fRootDepth = 0;
        fPointerToken = null;
        fCurrentTokenint=0;
        fCurrentTokenString=null;
        fCurrentTokenType=0 ;
        foundElement = null;
        includeElement = false;
        skip = false;
        fSubResourceIdentified=false;
        
        
        
        
        try {
            setErrorReporter(
            (XMLErrorReporter)componentManager.getProperty(ERROR_REPORTER));
        }
        catch (XMLConfigurationException e) {
            fErrorReporter = null;
        }
        try {
            fGrammarPool =
            (XMLGrammarPool)componentManager.getProperty(GRAMMAR_POOL);
        }
        catch (XMLConfigurationException e) {
            fGrammarPool = null;
        }
        try {
            fEntityResolver =
            (XMLEntityResolver)componentManager.getProperty(
            ENTITY_RESOLVER);
        }
        catch (XMLConfigurationException e) {
            fEntityResolver = null;
        }
        
        fSettings = new ParserConfigurationSettings();
        
        Enumeration xercesFeatures = Constants.getXercesFeatures();
        while (xercesFeatures.hasMoreElements()) {
            String featureId = (String)xercesFeatures.nextElement();
            fSettings.addRecognizedFeatures(new String[] { featureId });
            try {
                fSettings.setFeature(
                featureId,
                componentManager.getFeature(featureId));
            }
            catch (XMLConfigurationException e) {
                // componentManager doesn't support this feature,
                // so we won't worry about it
            }
        }
/*		try{
          dtdValidator =   (XMLDTDValidator)componentManager.getProperty( Constants.XERCES_PROPERTY_PREFIX + Constants.DTD_VALIDATOR_PROPERTY);
                }Catch(Exception ex){
                        ex.printStackTrace();
                }*/
        
!!!5560859.java!!!	getRecognizedFeatures() : String
        return RECOGNIZED_FEATURES;
!!!5560987.java!!!	setFeature(in featureId : String, inout state : boolean) : void
        if (fSettings != null) {
            fSettings.setFeature(featureId, state);
        }
        
!!!5561115.java!!!	getRecognizedProperties() : String
        return RECOGNIZED_PROPERTIES;
!!!5561243.java!!!	setProperty(in propertyId : String, inout value : Object) : void
        if (propertyId.equals(ERROR_REPORTER)) {
            setErrorReporter((XMLErrorReporter)value);
        }
        if (propertyId.equals(GRAMMAR_POOL)) {
            fGrammarPool = (XMLGrammarPool)value;
        }
        if (propertyId.equals(ENTITY_RESOLVER)) {
            fEntityResolver = (XMLEntityResolver)value;
        }
        
!!!5561371.java!!!	getFeatureDefault(in featureId : String) : Boolean
        for (int i = 0; i < RECOGNIZED_FEATURES.length; i++) {
            if (RECOGNIZED_FEATURES[i].equals(featureId)) {
                return FEATURE_DEFAULTS[i];
            }
        }
        return null;
!!!5561499.java!!!	getPropertyDefault(in propertyId : String) : Object
        for (int i = 0; i < RECOGNIZED_PROPERTIES.length; i++) {
            if (RECOGNIZED_PROPERTIES[i].equals(propertyId)) {
                return PROPERTY_DEFAULTS[i];
            }
        }
        return null;
!!!5561627.java!!!	setErrorReporter(inout reporter : XMLErrorReporter) : void
        fErrorReporter = reporter;
        if (fErrorReporter != null) {
            fErrorReporter.putMessageFormatter(
            XIncludeMessageFormatter.XINCLUDE_DOMAIN,
            new XIncludeMessageFormatter());
        }
!!!5561755.java!!!	setDocumentHandler(inout handler : XMLDocumentHandler) : void
        fDocumentHandler = handler;
!!!5561883.java!!!	getDocumentHandler() : XMLDocumentHandler
        return fDocumentHandler;
!!!5562011.java!!!	setXPointerSchemaName(in schemaName : String) : void
        fSchemaName = schemaName;
!!!5562139.java!!!	getXpointerSchemaName() : String
        return fSchemaName;
!!!5562267.java!!!	setParent(inout parent : Object) : void
        fParentXIncludeHandler = (XIncludeHandler)parent;
!!!5562395.java!!!	getParent() : Object
        return fParentXIncludeHandler;
!!!5562523.java!!!	setXPointerSchemaPointer(in content : String) : void
        fSchemaPointer = content;
!!!5562651.java!!!	getXPointerSchemaPointer() : String
        return fSchemaPointer;
!!!5562779.java!!!	isSubResourceIndentified() : boolean
        return fSubResourceIdentified;
!!!5562907.java!!!	getTokens() : void
        fSchemaPointer = fSchemaPointer.substring(fSchemaPointer.indexOf("(")+1, fSchemaPointer.length());
        StringTokenizer st = new StringTokenizer(fSchemaPointer, "/");
        String tempToken;
        Integer integerToken =null;
        Stack tempPointerToken = new Stack();
        if(fPointerToken == null){
            fPointerToken = new Stack();
        }
        while(st.hasMoreTokens()){
            tempToken=st.nextToken();
            try {
                integerToken = Integer.valueOf(tempToken);
                tempPointerToken.push(integerToken);
            }catch(NumberFormatException e){
                tempPointerToken.push(tempToken);
            }
        }
        while(!tempPointerToken.empty()){
            fPointerToken.push(tempPointerToken.pop());
        }
!!!5563035.java!!!	hasMoreToken() : boolean
        if(fPointerToken.isEmpty())
            return false;
        else
            return true;
!!!5563163.java!!!	getNextToken() : boolean
        Object currentToken;
        if (!fPointerToken.isEmpty()){
            currentToken = fPointerToken.pop();
            if(currentToken instanceof Integer){
                fCurrentTokenint = ((Integer)currentToken).intValue();
                fCurrentTokenType = 1;
            }
            else{
                fCurrentTokenString = ((String)currentToken).toString();
                fCurrentTokenType = 2;
            }
            return true;
        }
        else {
            return false;
        }
!!!5563291.java!!!	isIdAttribute(inout attributes : XMLAttributes, inout augs : Augmentations, in index : int) : boolean
        Object o = augs.getItem(Constants.ID_ATTRIBUTE);
        if( o instanceof Boolean )
            return ((Boolean)o).booleanValue();
        return "ID".equals(attributes.getType(index));
!!!5563419.java!!!	checkStringToken(inout element : QName, inout attributes : XMLAttributes) : boolean
        QName cacheQName = null;
        String id =null;
        String rawname =null;
        QName attrName = new QName();
        String attrType = null;
        String attrValue = null;
        int attrCount = attributes.getLength();
        for (int i = 0; i < attrCount; i++) {
            Augmentations aaugs = attributes.getAugmentations(i);
            attributes.getName(i,attrName);
            attrType = attributes.getType(i);
            attrValue = attributes.getValue(i);
            if(attrType != null && attrValue!= null && isIdAttribute(attributes,aaugs,i) && attrValue.equals(fCurrentTokenString)){
                if(hasMoreToken()){
                    fCurrentTokenType = 0;
                    fCurrentTokenString = null;
                    return true;
                }
                else{
                    foundElement = element;
                    includeElement = true;
                    fCurrentTokenType = 0;
                    fCurrentTokenString = null;
                    fSubResourceIdentified = true;
                    return true;
                }
            }
        }
        return false;
!!!5563547.java!!!	checkIntegerToken(inout element : QName) : boolean
        if(!skip){
            fElementCount++;
            if(fCurrentTokenint == fElementCount){
                if(hasMoreToken()){
                    fElementCount=0;
                    fCurrentTokenType = 0;
                    return true;
                }
                else{
                    foundElement = element;
                    includeElement = true;
                    fCurrentTokenType = 0;
                    fElementCount=0;
                    fSubResourceIdentified =true;
                    return true;
                }
            }else{
                addQName(element);
                skip = true;
                return false;
            }
        }
        return false;
!!!5563675.java!!!	addQName(inout element : QName) : void
        QName cacheQName = new QName(element);
        ftempCurrentElement.push(cacheQName);
!!!5563803.java!!!	startDocument(inout locator : XMLLocator, in encoding : String, inout namespaceContext : NamespaceContext, inout augs : Augmentations) : void
        
        getTokens();
!!!5564187.java!!!	comment(inout text : XMLString, inout augs : Augmentations) : void
        if (fDocumentHandler != null && includeElement) {
            fDocumentHandler.comment(text, augs);
        }
!!!5564315.java!!!	processingInstruction(in target : String, inout data : XMLString, inout augs : Augmentations) : void
        if (fDocumentHandler != null && includeElement) {
            fDocumentHandler.processingInstruction(target, data, augs);
            
        }
!!!5564443.java!!!	startElement(inout element : QName, inout attributes : XMLAttributes, inout augs : Augmentations) : void
        
        boolean requiredToken=false;
        if(fCurrentTokenType == 0)
            getNextToken();
        if(fCurrentTokenType ==1)
            requiredToken = checkIntegerToken(element);
        else if (fCurrentTokenType ==2)
            requiredToken = checkStringToken(element, attributes);
        if(requiredToken && hasMoreToken())
            getNextToken();
        if(fDocumentHandler != null && includeElement){
            elemCount++;
            fDocumentHandler.startElement(element, attributes, augs);
        }
        
!!!5564571.java!!!	endElement(inout element : QName, inout augs : Augmentations) : void
        if(includeElement && foundElement != null ){
            if(elemCount >0 )elemCount --;
            fDocumentHandler.endElement(element, augs);
            if(elemCount == 0)includeElement = false;
            
        }else if(!ftempCurrentElement.empty()){
            QName name = (QName)ftempCurrentElement.peek();
            if(name.equals(element)){
                ftempCurrentElement.pop();
                skip = false;
            }
        }
!!!5564699.java!!!	emptyElement(inout element : QName, inout attributes : XMLAttributes, inout augs : Augmentations) : void
        if(fDocumentHandler != null && includeElement){
            fDocumentHandler.emptyElement(element, attributes, augs);
        }
!!!5564827.java!!!	startGeneralEntity(in name : String, inout resId : XMLResourceIdentifier, in encoding : String, inout augs : Augmentations) : void
        if (fDocumentHandler != null && includeElement) {
            fDocumentHandler.startGeneralEntity(name, resId, encoding, augs);
        }
!!!5564955.java!!!	textDecl(in version : String, in encoding : String, inout augs : Augmentations) : void
        if (fDocumentHandler != null && includeElement) {
            fDocumentHandler.textDecl(version, encoding, augs);
        }
!!!5565083.java!!!	endGeneralEntity(in name : String, inout augs : Augmentations) : void
        if (fDocumentHandler != null) {
            fDocumentHandler.endGeneralEntity(name, augs);
        }
!!!5565211.java!!!	characters(inout text : XMLString, inout augs : Augmentations) : void
        if (fDocumentHandler != null  && includeElement) {
            fDocumentHandler.characters(text, augs);
        }
!!!5565339.java!!!	ignorableWhitespace(inout text : XMLString, inout augs : Augmentations) : void
        if (fDocumentHandler != null && includeElement) {
            fDocumentHandler.ignorableWhitespace(text, augs);
        }
!!!5565467.java!!!	startCDATA(inout augs : Augmentations) : void
        if (fDocumentHandler != null && includeElement) {
            fDocumentHandler.startCDATA(augs);
        }
!!!5565595.java!!!	endCDATA(inout augs : Augmentations) : void
        if (fDocumentHandler != null && includeElement) {
            fDocumentHandler.endCDATA(augs);
        }
!!!5565851.java!!!	setDocumentSource(inout source : XMLDocumentSource) : void
        fDocumentSource = source;
!!!5565979.java!!!	getDocumentSource() : XMLDocumentSource
        return fDocumentSource;
!!!5566107.java!!!	reportFatalError(in key : String) : void
        this.reportFatalError(key, null);
!!!5566235.java!!!	reportFatalError(in key : String, inout args : Object) : void
        if (fErrorReporter != null) {
            fErrorReporter.reportError(
            fDocLocation,
            XIncludeMessageFormatter.XINCLUDE_DOMAIN,
            key,
            args,
            XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }
        // we won't worry about when error reporter is null, since there should always be
        // at least the default error reporter
!!!5566363.java!!!	isRootDocument() : boolean
        return this.fParentXIncludeHandler == null;
