class DefaultTreeCellRenderer
!!!2871195.java!!!	DefaultTreeCellRenderer()
	setHorizontalAlignment(JLabel.LEFT);

	setLeafIcon(UIManager.getIcon("Tree.leafIcon"));
	setClosedIcon(UIManager.getIcon("Tree.closedIcon"));
	setOpenIcon(UIManager.getIcon("Tree.openIcon"));

	setTextSelectionColor(UIManager.getColor("Tree.selectionForeground"));
	setTextNonSelectionColor(UIManager.getColor("Tree.textForeground"));
	setBackgroundSelectionColor(UIManager.getColor("Tree.selectionBackground"));
	setBackgroundNonSelectionColor(UIManager.getColor("Tree.textBackground"));
	setBorderSelectionColor(UIManager.getColor("Tree.selectionBorderColor"));
	Object value = UIManager.get("Tree.drawsFocusBorderAroundIcon");
	drawsFocusBorderAroundIcon = (value != null && ((Boolean)value).
				      booleanValue());
	value = UIManager.get("Tree.drawDashedFocusIndicator");
	drawDashedFocusIndicator = (value != null && ((Boolean)value).
				    booleanValue());
!!!2871323.java!!!	getDefaultOpenIcon() : Icon
	return UIManager.getIcon("Tree.openIcon");
!!!2871451.java!!!	getDefaultClosedIcon() : Icon
	return UIManager.getIcon("Tree.closedIcon");
!!!2871579.java!!!	getDefaultLeafIcon() : Icon
	return UIManager.getIcon("Tree.leafIcon");
!!!2871707.java!!!	setOpenIcon(inout newIcon : Icon) : void
	openIcon = newIcon;
!!!2871835.java!!!	getOpenIcon() : Icon
	return openIcon;
!!!2871963.java!!!	setClosedIcon(inout newIcon : Icon) : void
	closedIcon = newIcon;
!!!2872091.java!!!	getClosedIcon() : Icon
	return closedIcon;
!!!2872219.java!!!	setLeafIcon(inout newIcon : Icon) : void
	leafIcon = newIcon;
!!!2872347.java!!!	getLeafIcon() : Icon
	return leafIcon;
!!!2872475.java!!!	setTextSelectionColor(inout newColor : Color) : void
	textSelectionColor = newColor;
!!!2872603.java!!!	getTextSelectionColor() : Color
	return textSelectionColor;
!!!2872731.java!!!	setTextNonSelectionColor(inout newColor : Color) : void
	textNonSelectionColor = newColor;
!!!2872859.java!!!	getTextNonSelectionColor() : Color
	return textNonSelectionColor;
!!!2872987.java!!!	setBackgroundSelectionColor(inout newColor : Color) : void
	backgroundSelectionColor = newColor;
!!!2873115.java!!!	getBackgroundSelectionColor() : Color
	return backgroundSelectionColor;
!!!2873243.java!!!	setBackgroundNonSelectionColor(inout newColor : Color) : void
	backgroundNonSelectionColor = newColor;
!!!2873371.java!!!	getBackgroundNonSelectionColor() : Color
	return backgroundNonSelectionColor;
!!!2873499.java!!!	setBorderSelectionColor(inout newColor : Color) : void
	borderSelectionColor = newColor;
!!!2873627.java!!!	getBorderSelectionColor() : Color
	return borderSelectionColor;
!!!2873755.java!!!	setFont(inout font : Font) : void
	if(font instanceof FontUIResource)
	    font = null;
	super.setFont(font);
!!!2873883.java!!!	getFont() : Font
        Font font = super.getFont();

        if (font == null && tree != null) {
            // Strive to return a non-null value, otherwise the html support
            // will typically pick up the wrong font in certain situations.
            font = tree.getFont();
        }
        return font;
!!!2874011.java!!!	setBackground(inout color : Color) : void
	if(color instanceof ColorUIResource)
	    color = null;
	super.setBackground(color);
!!!2874139.java!!!	getTreeCellRendererComponent(inout tree : JTree, inout value : Object, inout sel : boolean, inout expanded : boolean, inout leaf : boolean, in row : int, inout hasFocus : boolean) : Component
	String         stringValue = tree.convertValueToText(value, sel,
					  expanded, leaf, row, hasFocus);

        this.tree = tree;
	this.hasFocus = hasFocus;
	setText(stringValue);
	if(sel)
	    setForeground(getTextSelectionColor());
	else
	    setForeground(getTextNonSelectionColor());
	// There needs to be a way to specify disabled icons.
	if (!tree.isEnabled()) {
	    setEnabled(false);
	    if (leaf) {
		setDisabledIcon(getLeafIcon());
	    } else if (expanded) {
		setDisabledIcon(getOpenIcon());
	    } else {
		setDisabledIcon(getClosedIcon());
	    }
	}
	else {
	    setEnabled(true);
	    if (leaf) {
		setIcon(getLeafIcon());
	    } else if (expanded) {
		setIcon(getOpenIcon());
	    } else {
		setIcon(getClosedIcon());
	    }
	}
        setComponentOrientation(tree.getComponentOrientation());
	    
	selected = sel;

	return this;
!!!2874267.java!!!	paint(inout g : Graphics) : void
	Color bColor;

	if(selected) {
	    bColor = getBackgroundSelectionColor();
	} else {
	    bColor = getBackgroundNonSelectionColor();
	    if(bColor == null)
		bColor = getBackground();
	}
	int imageOffset = -1;
	if(bColor != null) {
	    Icon currentI = getIcon();

	    imageOffset = getLabelStart();
	    g.setColor(bColor);
	    if(getComponentOrientation().isLeftToRight()) {
	        g.fillRect(imageOffset, 0, getWidth() - imageOffset,
			   getHeight());
	    } else {
	        g.fillRect(0, 0, getWidth() - imageOffset,
			   getHeight());
	    }
	}

	if (hasFocus) {
	    if (drawsFocusBorderAroundIcon) {
		imageOffset = 0;
	    }
	    else if (imageOffset == -1) {
		imageOffset = getLabelStart();
	    }
	    if(getComponentOrientation().isLeftToRight()) {
		paintFocus(g, imageOffset, 0, getWidth() - imageOffset,
			   getHeight());
	    } else {
		paintFocus(g, 0, 0, getWidth() - imageOffset, getHeight());
	    }
	}
	super.paint(g);
!!!2874395.java!!!	paintFocus(inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
	Color       bsColor = getBorderSelectionColor();

	if (bsColor != null && (selected || !drawDashedFocusIndicator)) {
	    g.setColor(bsColor);
	    g.drawRect(x, y, w - 1, h - 1);
	}
	if (drawDashedFocusIndicator) {
	    Color color;
	    if (selected) {
		color = getBackgroundSelectionColor();
	    } else {
		color = getBackgroundNonSelectionColor();
		if(color == null) {
		    color = getBackground();
		}
	    }
	    
	    if (treeBGColor != color) {
		treeBGColor = color;
		focusBGColor = new Color(~color.getRGB());
	    }
	    g.setColor(focusBGColor);
	    BasicGraphicsUtils.drawDashedRect(g, x, y, w, h);
	}
!!!2874523.java!!!	getLabelStart() : int
	Icon currentI = getIcon();
	if(currentI != null && getText() != null) {
	    return currentI.getIconWidth() + Math.max(0, getIconTextGap() - 1);
	}
	return 0;
!!!2874651.java!!!	getPreferredSize() : Dimension
	Dimension        retDimension = super.getPreferredSize();

	if(retDimension != null)
	    retDimension = new Dimension(retDimension.width + 3,
					 retDimension.height);
	return retDimension;
!!!2875547.java!!!	firePropertyChange(in propertyName : String, inout oldValue : Object, inout newValue : Object) : void
	
	// Strings get interned...
	if (propertyName=="text")
	    super.firePropertyChange(propertyName, oldValue, newValue);
