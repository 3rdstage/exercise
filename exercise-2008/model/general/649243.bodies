class ExsltStrings
!!!4302619.java!!!	align(in targetStr : String, in paddingStr : String, in type : String) : String
    if (targetStr.length() >= paddingStr.length())
      return targetStr.substring(0, paddingStr.length());
    
    if (type.equals("right"))
    {
      return paddingStr.substring(0, paddingStr.length() - targetStr.length()) + targetStr;
    }
    else if (type.equals("center"))
    {
      int startIndex = (paddingStr.length() - targetStr.length()) / 2;
      return paddingStr.substring(0, startIndex) + targetStr + paddingStr.substring(startIndex + targetStr.length());
    }
    // Default is left
    else
    {
      return targetStr + paddingStr.substring(targetStr.length());
    }    
!!!4302747.java!!!	align(in targetStr : String, in paddingStr : String) : String
    return align(targetStr, paddingStr, "left");
!!!4302875.java!!!	concat(inout nl : NodeList) : String
    StringBuffer sb = new StringBuffer();
    for (int i = 0; i < nl.getLength(); i++)
    {
      Node node = nl.item(i);
      String value = toString(node);
      
      if (value != null && value.length() > 0)
        sb.append(value);
    }
    
    return sb.toString();
!!!4303003.java!!!	padding(in length : double, in pattern : String) : String
    if (pattern == null || pattern.length() == 0)
      return "";
    
    StringBuffer sb = new StringBuffer();
    int len = (int)length;
    int numAdded = 0;
    int index = 0;
    while (numAdded < len)
    {
      if (index == pattern.length())
        index = 0;
        
      sb.append(pattern.charAt(index));
      index++;
      numAdded++;
    }
  
    return sb.toString();
!!!4303131.java!!!	padding(in length : double) : String
    return padding(length, " ");
!!!4303259.java!!!	split(in str : String, in pattern : String) : NodeList

    
    NodeSet resultSet = new NodeSet();
    resultSet.setShouldCacheNodes(true);
    
    boolean done = false;
    int fromIndex = 0;
    int matchIndex = 0;
    String token = null;
    
    while (!done && fromIndex < str.length())
    {
      matchIndex = str.indexOf(pattern, fromIndex);
      if (matchIndex >= 0)
      {
	token = str.substring(fromIndex, matchIndex);
	fromIndex = matchIndex + pattern.length();
      }
      else
      {
        done = true;
        token = str.substring(fromIndex);
      }

      Document doc = DocumentHolder.m_doc;
      synchronized (doc)
      {
        Element element = doc.createElement("token");
        Text text = doc.createTextNode(token);
        element.appendChild(text);
        resultSet.addNode(element);      
      }
    }
    
    return resultSet;
!!!4303387.java!!!	split(in str : String) : NodeList
    return split(str, " ");
!!!4303515.java!!!	tokenize(in toTokenize : String, in delims : String) : NodeList


    NodeSet resultSet = new NodeSet();
    
    if (delims != null && delims.length() > 0)
    {
      StringTokenizer lTokenizer = new StringTokenizer(toTokenize, delims);

      Document doc = DocumentHolder.m_doc;
      synchronized (doc)
      {
        while (lTokenizer.hasMoreTokens())
        {
          Element element = doc.createElement("token");
          element.appendChild(doc.createTextNode(lTokenizer.nextToken()));
          resultSet.addNode(element);      
        }
      }
    }
    // If the delimiter is an empty string, create one token Element for 
    // every single character.
    else
    {

      Document doc = DocumentHolder.m_doc;
      synchronized (doc)
      {
        for (int i = 0; i < toTokenize.length(); i++)
        {
          Element element = doc.createElement("token");
          element.appendChild(doc.createTextNode(toTokenize.substring(i, i+1)));
          resultSet.addNode(element);              
        }
      }
    }

    return resultSet;
!!!4303643.java!!!	tokenize(in toTokenize : String) : NodeList
    return tokenize(toTokenize, " \t\n\r");
