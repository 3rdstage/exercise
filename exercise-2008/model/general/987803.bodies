class SimpleDateFormat
!!!7863707.java!!!	SimpleDateFormat()
        this(SHORT, SHORT, Locale.getDefault());
!!!7863835.java!!!	SimpleDateFormat(in pattern : String)
        this(pattern, Locale.getDefault());
!!!7863963.java!!!	SimpleDateFormat(in pattern : String, inout locale : Locale)
        this.pattern = pattern;
        this.formatData = new DateFormatSymbols(locale);
        initialize(locale);
!!!7864091.java!!!	SimpleDateFormat(in pattern : String, inout formatSymbols : DateFormatSymbols)
        this.pattern = pattern;
        this.formatData = (DateFormatSymbols) formatSymbols.clone();
        initialize(Locale.getDefault());
!!!7864219.java!!!	SimpleDateFormat(in timeStyle : int, in dateStyle : int, inout loc : Locale)
        /* try the cache first */
        String[] dateTimePatterns = (String[]) cachedLocaleData.get(loc);
        if (dateTimePatterns == null) { /* cache miss */
            ResourceBundle r = LocaleData.getLocaleElements(loc);
            dateTimePatterns = r.getStringArray("DateTimePatterns");
            /* update cache */
            cachedLocaleData.put(loc, dateTimePatterns);
        }
	formatData = new DateFormatSymbols(loc);
	if ((timeStyle >= 0) && (dateStyle >= 0)) {
	    Object[] dateTimeArgs = {dateTimePatterns[timeStyle],
				     dateTimePatterns[dateStyle + 4]};
	    pattern = MessageFormat.format(dateTimePatterns[8], dateTimeArgs);
	}
	else if (timeStyle >= 0) {
	    pattern = dateTimePatterns[timeStyle];
	}
	else if (dateStyle >= 0) {
            pattern = dateTimePatterns[dateStyle + 4];
	}
	else {
	    throw new IllegalArgumentException("No date or time style specified");
	}

	initialize(loc);
!!!7864347.java!!!	initialize(inout loc : Locale) : void
	// Verify and compile the given pattern.
	compiledPattern = compile(pattern);

        // The format object must be constructed using the symbols for this zone.
        // However, the calendar should use the current default TimeZone.
        // If this is not contained in the locale zone strings, then the zone
        // will be formatted using generic GMT+/-H:MM nomenclature.
        calendar = Calendar.getInstance(TimeZone.getDefault(), loc);

        /* try the cache first */
        numberFormat = (NumberFormat) cachedNumberFormatData.get(loc);
        if (numberFormat == null) { /* cache miss */
            numberFormat = NumberFormat.getIntegerInstance(loc);
            numberFormat.setGroupingUsed(false);

            /* update cache */
            cachedNumberFormatData.put(loc, numberFormat);
        }
        numberFormat = (NumberFormat) numberFormat.clone();

        initializeDefaultCentury();
!!!7864475.java!!!	compile(in pattern : String) : char
	int length = pattern.length();
	boolean inQuote = false;
	StringBuilder compiledPattern = new StringBuilder(length * 2);
	StringBuilder tmpBuffer = null;
	int count = 0;
	int lastTag = -1;

	for (int i = 0; i < length; i++) {
	    char c = pattern.charAt(i);

	    if (c == '\'') {
		// '' is treated as a single quote regardless of being
		// in a quoted section.
		if ((i + 1) < length) {
		    c = pattern.charAt(i + 1);
		    if (c == '\'') {
			i++;
			if (count != 0) {
			    encode(lastTag, count, compiledPattern);
			    lastTag = -1;
			    count = 0;
			}
			if (inQuote) {
			    tmpBuffer.append(c);
			} else {
			    compiledPattern.append((char)(TAG_QUOTE_ASCII_CHAR << 8 | c));
			}
			continue;
		    }
		}
		if (!inQuote) {
		    if (count != 0) {
			encode(lastTag, count, compiledPattern);
			lastTag = -1;
			count = 0;
		    }
		    if (tmpBuffer == null) {
			tmpBuffer = new StringBuilder(length);
		    } else {
			tmpBuffer.setLength(0);
		    }
		    inQuote = true;
		} else {
		    int len = tmpBuffer.length();
		    if (len == 1) {
			char ch = tmpBuffer.charAt(0);
			if (ch < 128) {
			    compiledPattern.append((char)(TAG_QUOTE_ASCII_CHAR << 8 | ch));
			} else {
			    compiledPattern.append((char)(TAG_QUOTE_CHARS << 8 | 1));
			    compiledPattern.append(ch);
			}
		    } else {
			encode(TAG_QUOTE_CHARS, len, compiledPattern);
			compiledPattern.append(tmpBuffer);
		    }
		    inQuote = false;
		}
		continue;
	    }
	    if (inQuote) {
		tmpBuffer.append(c);
		continue;
	    }
	    if (!(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z')) {
		if (count != 0) {
		    encode(lastTag, count, compiledPattern);
		    lastTag = -1;
		    count = 0;
		}
		if (c < 128) {
		    // In most cases, c would be a delimiter, such as ':'.
		    compiledPattern.append((char)(TAG_QUOTE_ASCII_CHAR << 8 | c));
		} else {
		    // Take any contiguous non-ASCII alphabet characters and
		    // put them in a single TAG_QUOTE_CHARS.
		    int j;
		    for (j = i + 1; j < length; j++) {
			char d = pattern.charAt(j);
			if (d == '\'' || (d >= 'a' && d <= 'z' || d >= 'A' && d <= 'Z')) {
			    break;
			}
		    }
		    compiledPattern.append((char)(TAG_QUOTE_CHARS << 8 | (j - i)));
		    for (; i < j; i++) {
			compiledPattern.append(pattern.charAt(i));
		    }
		    i--; 
		}
		continue;
	    }

	    int tag;
	    if ((tag = formatData.patternChars.indexOf(c)) == -1) {
		throw new IllegalArgumentException("Illegal pattern character " +
						   "'" + c + "'");
	    }
	    if (lastTag == -1 || lastTag == tag) {
		lastTag = tag;
		count++;
		continue;
	    }
	    encode(lastTag, count, compiledPattern);
	    lastTag = tag;
	    count = 1;
	}

	if (inQuote) {
	    throw new IllegalArgumentException("Unterminated quote");
	}

	if (count != 0) {
	    encode(lastTag, count, compiledPattern);
	}

	// Copy the compiled pattern to a char array
	int len = compiledPattern.length();
	char[] r = new char[len];
	compiledPattern.getChars(0, len, r, 0);
	return r;
!!!7864603.java!!!	encode(in tag : int, in length : int, inout buffer : StringBuilder) : void
	if (length < 255) {
	    buffer.append((char)(tag << 8 | length));
	} else {
	    buffer.append((char)((tag << 8) | 0xff));
	    buffer.append((char)(length >>> 16));
	    buffer.append((char)(length & 0xffff));
	}
!!!7864731.java!!!	initializeDefaultCentury() : void
        calendar.setTime( new Date() );
        calendar.add( Calendar.YEAR, -80 );
        parseAmbiguousDatesAsAfter(calendar.getTime());
!!!7864859.java!!!	parseAmbiguousDatesAsAfter(inout startDate : Date) : void
        defaultCenturyStart = startDate;
        calendar.setTime(startDate);
        defaultCenturyStartYear = calendar.get(Calendar.YEAR);
!!!7864987.java!!!	set2DigitYearStart(inout startDate : Date) : void
        parseAmbiguousDatesAsAfter(startDate);
!!!7865115.java!!!	get2DigitYearStart() : Date
        return defaultCenturyStart;
!!!7865243.java!!!	format(inout date : Date, inout toAppendTo : StringBuffer, inout pos : FieldPosition) : StringBuffer
        pos.beginIndex = pos.endIndex = 0;
        return format(date, toAppendTo, pos.getFieldDelegate());
!!!7865371.java!!!	format(inout date : Date, inout toAppendTo : StringBuffer, inout delegate : FieldDelegate) : StringBuffer
        // Convert input date to time field list
        calendar.setTime(date);

        for (int i = 0; i < compiledPattern.length; ) {
            int tag = compiledPattern[i] >>> 8;
	    int count = compiledPattern[i++] & 0xff;
	    if (count == 255) {
		count = compiledPattern[i++] << 16;
		count |= compiledPattern[i++];
	    }

	    switch (tag) {
	    case TAG_QUOTE_ASCII_CHAR:
		toAppendTo.append((char)count);
		break;

	    case TAG_QUOTE_CHARS:
		toAppendTo.append(compiledPattern, i, count);
		i += count;
		break;

	    default:
                subFormat(tag, count, delegate, toAppendTo);
		break;
	    }
	}
        return toAppendTo;
!!!7865499.java!!!	formatToCharacterIterator(inout obj : Object) : AttributedCharacterIterator
        StringBuffer sb = new StringBuffer();
        CharacterIteratorFieldDelegate delegate = new
                         CharacterIteratorFieldDelegate();

        if (obj instanceof Date) {
            format((Date)obj, sb, delegate);
        }
        else if (obj instanceof Number) {
            format(new Date(((Number)obj).longValue()), sb, delegate);
        }
        else if (obj == null) {
            throw new NullPointerException(
                   "formatToCharacterIterator must be passed non-null object");
        }
        else {
            throw new IllegalArgumentException(
                             "Cannot format given Object as a Date");
        }
        return delegate.getIterator(sb.toString());
!!!7865627.java!!!	subFormat(in patternCharIndex : int, in count : int, inout delegate : FieldDelegate, inout buffer : StringBuffer) : void
        int     maxIntCount = Integer.MAX_VALUE;
        String  current = null;
        int     beginOffset = buffer.length();

        int field = PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex];
        int value = calendar.get(field);

	// Note: zeroPaddingNumber() assumes that maxDigits is either
	// 2 or maxIntCount. If we make any changes to this,
	// zeroPaddingNumber() must be fixed.

        switch (patternCharIndex) {
        case 0: // 'G' - ERA
            current = formatData.eras[value];
            break;
        case 1: // 'y' - YEAR
            if (count >= 4)
		zeroPaddingNumber(value, count, maxIntCount, buffer);
            else // count < 4
		zeroPaddingNumber(value, 2, 2, buffer); // clip 1996 to 96
            break;
        case 2: // 'M' - MONTH
            if (count >= 4)
                current = formatData.months[value];
            else if (count == 3)
                current = formatData.shortMonths[value];
            else
		zeroPaddingNumber(value+1, count, maxIntCount, buffer);
            break;
        case 4: // 'k' - HOUR_OF_DAY: 1-based.  eg, 23:59 + 1 hour =>> 24:59
            if (value == 0)
		zeroPaddingNumber(calendar.getMaximum(Calendar.HOUR_OF_DAY)+1,
                                            count, maxIntCount, buffer);
            else
		zeroPaddingNumber(value, count, maxIntCount, buffer);
            break;
        case 9: // 'E' - DAY_OF_WEEK
            if (count >= 4)
                current = formatData.weekdays[value];
            else // count < 4, use abbreviated form if exists
                current = formatData.shortWeekdays[value];
            break;
        case 14:    // 'a' - AM_PM
            current = formatData.ampms[value];
            break;
        case 15: // 'h' - HOUR:1-based.  eg, 11PM + 1 hour =>> 12 AM
            if (value == 0)
		zeroPaddingNumber(calendar.getLeastMaximum(Calendar.HOUR)+1,
				  count, maxIntCount, buffer);
            else
		zeroPaddingNumber(value, count, maxIntCount, buffer);
            break;
        case 17: // 'z' - ZONE_OFFSET
            int zoneIndex =
                formatData.getZoneIndex(calendar.getTimeZone().getID());
            if (zoneIndex == -1) {
                value = calendar.get(Calendar.ZONE_OFFSET) +
                    calendar.get(Calendar.DST_OFFSET);
		buffer.append(ZoneInfoFile.toCustomID(value));
            } else {
		int index = (calendar.get(Calendar.DST_OFFSET) == 0) ? 1: 3;
                if (count < 4) {
		    // Use the short name
		    index++;
		}
		buffer.append(formatData.zoneStrings[zoneIndex][index]);
            }
            break;
        case 18: // 'Z' - ZONE_OFFSET ("-/+hhmm" form)
            value = (calendar.get(Calendar.ZONE_OFFSET) +
		     calendar.get(Calendar.DST_OFFSET)) / 60000;

	    int width = 4;
            if (value >= 0) {
		buffer.append('+');
	    } else {
                width++;
            }

            int num = (value / 60) * 100 + (value % 60);
	    CalendarUtils.sprintf0d(buffer, num, width);
            break;
        default:
            // case 3: // 'd' - DATE
            // case 5: // 'H' - HOUR_OF_DAY:0-based.  eg, 23:59 + 1 hour =>> 00:59
            // case 6: // 'm' - MINUTE
            // case 7: // 's' - SECOND
            // case 8: // 'S' - MILLISECOND
            // case 10: // 'D' - DAY_OF_YEAR
            // case 11: // 'F' - DAY_OF_WEEK_IN_MONTH
            // case 12: // 'w' - WEEK_OF_YEAR
            // case 13: // 'W' - WEEK_OF_MONTH
            // case 16: // 'K' - HOUR: 0-based.  eg, 11PM + 1 hour =>> 0 AM
	    zeroPaddingNumber(value, count, maxIntCount, buffer);
            break;
        } // switch (patternCharIndex)

	if (current != null) {
	    buffer.append(current);
	}

        int fieldID = PATTERN_INDEX_TO_DATE_FORMAT_FIELD[patternCharIndex];
        Field f = PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID[patternCharIndex];

        delegate.formatted(fieldID, f, f, beginOffset, buffer.length(), buffer);
!!!7865755.java!!!	zeroPaddingNumber(in value : int, in minDigits : int, in maxDigits : int, inout buffer : StringBuffer) : void
	// Optimization for 1, 2 and 4 digit numbers. This should
	// cover most cases of formatting date/time related items.
	// Note: This optimization code assumes that maxDigits is
	// either 2 or Integer.MAX_VALUE (maxIntCount in format()).
	try {
	    if (zeroDigit == 0) {
		zeroDigit = ((DecimalFormat)numberFormat).getDecimalFormatSymbols().getZeroDigit();
	    }
	    if (value >= 0) {
		if (value < 100 && minDigits >= 1 && minDigits <= 2) {
		    if (value < 10) {
			if (minDigits == 2) {
			    buffer.append(zeroDigit);
			}
			buffer.append((char)(zeroDigit + value));
		    } else {
			buffer.append((char)(zeroDigit + value / 10));
			buffer.append((char)(zeroDigit + value % 10));
		    }
		    return;
		} else if (value >= 1000 && value < 10000) {
		    if (minDigits == 4) {
			buffer.append((char)(zeroDigit + value / 1000));
			value %= 1000;
			buffer.append((char)(zeroDigit + value / 100));
			value %= 100;
			buffer.append((char)(zeroDigit + value / 10));
			buffer.append((char)(zeroDigit + value % 10));
			return;
		    }
		    if (minDigits == 2 && maxDigits == 2) {
			zeroPaddingNumber(value % 100, 2, 2, buffer);
			return;
		    }
		}
	    }
	} catch (Exception e) {
	}

        numberFormat.setMinimumIntegerDigits(minDigits);
        numberFormat.setMaximumIntegerDigits(maxDigits);
	numberFormat.format((long)value, buffer, DontCareFieldPosition.INSTANCE);
!!!7865883.java!!!	parse(in text : String, inout pos : ParsePosition) : Date
        int start = pos.index;
        int oldStart = start;
	int textLength = text.length();

        boolean[] ambiguousYear = {false};

        calendar.clear(); // Clears all the time fields

        for (int i = 0; i < compiledPattern.length; ) {
            int tag = compiledPattern[i] >>> 8;
	    int count = compiledPattern[i++] & 0xff;
	    if (count == 255) {
		count = compiledPattern[i++] << 16;
		count |= compiledPattern[i++];
	    }

	    switch (tag) {
	    case TAG_QUOTE_ASCII_CHAR:
		if (start >= textLength || text.charAt(start) != (char)count) {
		    pos.index = oldStart;
		    pos.errorIndex = start;
		    return null;
		}
		start++;
		break;

	    case TAG_QUOTE_CHARS:
		while (count-- > 0) {
		    if (start >= textLength || text.charAt(start) != compiledPattern[i++]) {
			pos.index = oldStart;
			pos.errorIndex = start;
			return null;
		    }
		    start++;
		}
		break;

	    default:
		// Peek the next pattern to determine if we need to
		// obey the number of pattern letters for
		// parsing. It's required when parsing contiguous
		// digit text (e.g., "20010704") with a pattern which
		// has no delimiters between fields, like "yyyyMMdd".
		boolean obeyCount = false;
		if (i < compiledPattern.length) {
		    int nextTag = compiledPattern[i] >>> 8;
		    if (!(nextTag == TAG_QUOTE_ASCII_CHAR || nextTag == TAG_QUOTE_CHARS)) {
			obeyCount = true;
		    }
		}
		start = subParse(text, start, tag, count, obeyCount,
				 ambiguousYear, pos);
		if (start < 0) {
		    pos.index = oldStart;
		    return null;
		}
	    }
	}

        // At this point the fields of Calendar have been set.  Calendar
        // will fill in default values for missing fields when the time
        // is computed.

        pos.index = start;

        // This part is a problem:  When we call parsedDate.after, we compute the time.
        // Take the date April 3 2004 at 2:30 am.  When this is first set up, the year
        // will be wrong if we're parsing a 2-digit year pattern.  It will be 1904.
        // April 3 1904 is a Sunday (unlike 2004) so it is the DST onset day.  2:30 am
        // is therefore an "impossible" time, since the time goes from 1:59 to 3:00 am
        // on that day.  It is therefore parsed out to fields as 3:30 am.  Then we
        // add 100 years, and get April 3 2004 at 3:30 am.  Note that April 3 2004 is
        // a Saturday, so it can have a 2:30 am -- and it should. [LIU]
        /*
        Date parsedDate = calendar.getTime();
        if( ambiguousYear[0] && !parsedDate.after(defaultCenturyStart) ) {
            calendar.add(Calendar.YEAR, 100);
            parsedDate = calendar.getTime();
        }
        */
        // Because of the above condition, save off the fields in case we need to readjust.
        // The procedure we use here is not particularly efficient, but there is no other
        // way to do this given the API restrictions present in Calendar.  We minimize
        // inefficiency by only performing this computation when it might apply, that is,
        // when the two-digit year is equal to the start year, and thus might fall at the
        // front or the back of the default century.  This only works because we adjust
        // the year correctly to start with in other cases -- see subParse().
        Date parsedDate;
        try {
            if (ambiguousYear[0]) // If this is true then the two-digit year == the default start year
            {
                // We need a copy of the fields, and we need to avoid triggering a call to
                // complete(), which will recalculate the fields.  Since we can't access
                // the fields[] array in Calendar, we clone the entire object.  This will
                // stop working if Calendar.clone() is ever rewritten to call complete().
                Calendar savedCalendar = (Calendar)calendar.clone();
                parsedDate = calendar.getTime();
                if (parsedDate.before(defaultCenturyStart))
                {
                    // We can't use add here because that does a complete() first.
                    savedCalendar.set(Calendar.YEAR, defaultCenturyStartYear + 100);
                    parsedDate = savedCalendar.getTime();
                }
            }
            else parsedDate = calendar.getTime();
        }
        // An IllegalArgumentException will be thrown by Calendar.getTime()
        // if any fields are out of range, e.g., MONTH == 17.
        catch (IllegalArgumentException e) {
            pos.errorIndex = start;
            pos.index = oldStart;
            return null;
        }

        return parsedDate;
!!!7866011.java!!!	matchString(in text : String, in start : int, in field : int, in data : String) : int
        int i = 0;
        int count = data.length;

        if (field == Calendar.DAY_OF_WEEK) i = 1;

        // There may be multiple strings in the data[] array which begin with
        // the same prefix (e.g., Cerven and Cervenec (June and July) in Czech).
        // We keep track of the longest match, and return that.  Note that this
        // unfortunately requires us to test all array elements.
        int bestMatchLength = 0, bestMatch = -1;
        for (; i<count; ++i)
        {
            int length = data[i].length();
            // Always compare if we have no match yet; otherwise only compare
            // against potentially better matches (longer strings).
            if (length > bestMatchLength &&
                text.regionMatches(true, start, data[i], 0, length))
            {
                bestMatch = i;
                bestMatchLength = length;
            }
        }
        if (bestMatch >= 0)
        {
            calendar.set(field, bestMatch);
            return start + bestMatchLength;
        }
        return -start;
!!!7866139.java!!!	matchZoneString(in text : String, in start : int, in zoneIndex : int) : int
	for (int j = 1; j <= 4; ++j) {
	    // Checking long and short zones [1 & 2],
	    // and long and short daylight [3 & 4].
	    String zoneName = formatData.zoneStrings[zoneIndex][j];
	    if (text.regionMatches(true, start,
				   zoneName, 0, zoneName.length())) {
		return j;
	    }
	}
	return -1;
!!!7866267.java!!!	matchDSTString(in text : String, in start : int, in zoneIndex : int, in standardIndex : int) : boolean
	int index = standardIndex + 2;
	String zoneName  = formatData.zoneStrings[zoneIndex][index];
	if (text.regionMatches(true, start,
			       zoneName, 0, zoneName.length())) {
	    return true;
	}
	return false;
!!!7866395.java!!!	subParseZoneString(in text : String, in start : int) : int
	boolean useSameName = false; // true if standard and daylight time use the same abbreviation.
	TimeZone currentTimeZone = getTimeZone();

	// At this point, check for named time zones by looking through
	// the locale data from the DateFormatZoneData strings.
	// Want to be able to parse both short and long forms.
	int zoneIndex = 
	    formatData.getZoneIndex (currentTimeZone.getID());
	TimeZone tz = null;
	int j = 0, i = 0;
	if ((zoneIndex != -1) && ((j = matchZoneString(text, start, zoneIndex)) > 0)) {
	    if (j <= 2) {
		useSameName = matchDSTString(text, start, zoneIndex, j);
	    }
	    tz = TimeZone.getTimeZone(formatData.zoneStrings[zoneIndex][0]);
	    i = zoneIndex;
	}
	if (tz == null) {
	    zoneIndex = 
		formatData.getZoneIndex (TimeZone.getDefault().getID());
	    if ((zoneIndex != -1) && ((j = matchZoneString(text, start, zoneIndex)) > 0)) {
		if (j <= 2) {
		    useSameName = matchDSTString(text, start, zoneIndex, j);
		}
		tz = TimeZone.getTimeZone(formatData.zoneStrings[zoneIndex][0]);
		i = zoneIndex;
	    }
	}	    

	if (tz == null) {
	    for (i = 0; i < formatData.zoneStrings.length; i++) {
		if ((j = matchZoneString(text, start, i)) > 0) {
		    if (j <= 2) {
			useSameName = matchDSTString(text, start, i, j);
		    }
		    tz = TimeZone.getTimeZone(formatData.zoneStrings[i][0]);
		    break;
		}
	    }
	}
	if (tz != null) { // Matched any ?
	    if (!tz.equals(currentTimeZone)) {
		setTimeZone(tz);
	    }
	    // If the time zone matched uses the same name
	    // (abbreviation) for both standard and daylight time,
	    // let the time zone in the Calendar decide which one.
	    if (!useSameName) {
		calendar.set(Calendar.ZONE_OFFSET, tz.getRawOffset());
		calendar.set(Calendar.DST_OFFSET, 
			     j >= 3 ? tz.getDSTSavings() : 0);
	    }
	    return (start + formatData.zoneStrings[i][j].length());
	}
	return 0;
!!!7866523.java!!!	subParse(in text : String, in start : int, in patternCharIndex : int, in count : int, inout obeyCount : boolean, inout ambiguousYear : boolean, inout origPos : ParsePosition) : int
        Number number = null;
        int value = 0;
        ParsePosition pos = new ParsePosition(0);
        pos.index = start;
        int field = PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex];

        // If there are any spaces here, skip over them.  If we hit the end
        // of the string, then fail.
        for (;;) {
            if (pos.index >= text.length()) {
                origPos.errorIndex = start;
                return -1;
            }
            char c = text.charAt(pos.index);
            if (c != ' ' && c != '\t') break;
            ++pos.index;
        }

        // We handle a few special cases here where we need to parse
        // a number value.  We handle further, more generic cases below.  We need
        // to handle some of them here because some fields require extra processing on
        // the parsed value.
        if (patternCharIndex == 4 /*HOUR_OF_DAY1_FIELD*/ ||
            patternCharIndex == 15 /*HOUR1_FIELD*/ ||
            (patternCharIndex == 2 /*MONTH_FIELD*/ && count <= 2) ||
            patternCharIndex == 1)
        {
            // It would be good to unify this with the obeyCount logic below,
            // but that's going to be difficult.
            if (obeyCount)
            {
                if ((start+count) > text.length()) {
                    origPos.errorIndex = start;
                    return -1;
                }
                number = numberFormat.parse(text.substring(0, start+count), pos);
            }
            else number = numberFormat.parse(text, pos);
            if (number == null) {
                origPos.errorIndex = pos.index;
                return -1;
            }
            value = number.intValue();
        }

        int index;
        switch (patternCharIndex)
        {
        case 0: // 'G' - ERA
            if ((index = matchString(text, start, Calendar.ERA, formatData.eras)) > 0) {
                return index;
            } else {
                origPos.errorIndex = pos.index;
                return -1;
            }
        case 1: // 'y' - YEAR
            // If there are 3 or more YEAR pattern characters, this indicates
            // that the year value is to be treated literally, without any
            // two-digit year adjustments (e.g., from "01" to 2001).  Otherwise
            // we made adjustments to place the 2-digit year in the proper
            // century, for parsed strings from "00" to "99".  Any other string
            // is treated literally:  "2250", "-1", "1", "002".
            if (count <= 2 && (pos.index - start) == 2
                && Character.isDigit(text.charAt(start))
                && Character.isDigit(text.charAt(start+1)))
            {
                // Assume for example that the defaultCenturyStart is 6/18/1903.
                // This means that two-digit years will be forced into the range
                // 6/18/1903 to 6/17/2003.  As a result, years 00, 01, and 02
                // correspond to 2000, 2001, and 2002.  Years 04, 05, etc. correspond
                // to 1904, 1905, etc.  If the year is 03, then it is 2003 if the
                // other fields specify a date before 6/18, or 1903 if they specify a
                // date afterwards.  As a result, 03 is an ambiguous year.  All other
                // two-digit years are unambiguous.
                int ambiguousTwoDigitYear = defaultCenturyStartYear % 100;
                ambiguousYear[0] = value == ambiguousTwoDigitYear;
                value += (defaultCenturyStartYear/100)*100 +
                    (value < ambiguousTwoDigitYear ? 100 : 0);
            }
            calendar.set(Calendar.YEAR, value);
            return pos.index;
        case 2: // 'M' - MONTH
            if (count <= 2) // i.e., M or MM.
            {
                // Don't want to parse the month if it is a string
                // while pattern uses numeric style: M or MM.
                // [We computed 'value' above.]
                calendar.set(Calendar.MONTH, value - 1);
                return pos.index;
            }
            else
            {
                // count >= 3 // i.e., MMM or MMMM
                // Want to be able to parse both short and long forms.
                // Try count == 4 first:
                int newStart = 0;
                if ((newStart=matchString(text, start, Calendar.MONTH,
                                          formatData.months)) > 0)
                    return newStart;
                else // count == 4 failed, now try count == 3
                    if ((index = matchString(text, start, Calendar.MONTH,
                                       formatData.shortMonths)) > 0) {
                        return index;
                    } else {
                        origPos.errorIndex = pos.index;
                        return -1;
                    }
            }
        case 4: // 'k' - HOUR_OF_DAY: 1-based.  eg, 23:59 + 1 hour =>> 24:59
            // [We computed 'value' above.]
            if (value == calendar.getMaximum(Calendar.HOUR_OF_DAY)+1) value = 0;
            calendar.set(Calendar.HOUR_OF_DAY, value);
            return pos.index;
        case 9: { // 'E' - DAY_OF_WEEK
            // Want to be able to parse both short and long forms.
            // Try count == 4 (DDDD) first:
            int newStart = 0;
            if ((newStart=matchString(text, start, Calendar.DAY_OF_WEEK,
                                      formatData.weekdays)) > 0)
                return newStart;
            else // DDDD failed, now try DDD
                if ((index = matchString(text, start, Calendar.DAY_OF_WEEK,
                                   formatData.shortWeekdays)) > 0) {
                    return index;
                } else {
                    origPos.errorIndex = pos.index;
                    return -1;
                }
        }
        case 14:    // 'a' - AM_PM
            if ((index = matchString(text, start, Calendar.AM_PM, formatData.ampms)) > 0) {
                return index;
            } else {
                origPos.errorIndex = pos.index;
                return -1;
            }

        case 15: // 'h' - HOUR:1-based.  eg, 11PM + 1 hour =>> 12 AM
            // [We computed 'value' above.]
            if (value == calendar.getLeastMaximum(Calendar.HOUR)+1) value = 0;
            calendar.set(Calendar.HOUR, value);
            return pos.index;
        case 17: // 'z' - ZONE_OFFSET
        case 18: // 'Z' - ZONE_OFFSET
            // First try to parse generic forms such as GMT-07:00. Do this first
            // in case localized DateFormatZoneData contains the string "GMT"
            // for a zone; in that case, we don't want to match the first three
            // characters of GMT+/-hh:mm etc.
            {
                int sign = 0;
                int offset;

                // For time zones that have no known names, look for strings
                // of the form:
                //    GMT[+-]hours:minutes or
                //    GMT.
                if ((text.length() - start) >= GMT.length() &&
                    text.regionMatches(true, start, GMT, 0, GMT.length())) {
                    int num;
                    calendar.set(Calendar.DST_OFFSET, 0);
                    pos.index = start + GMT.length();

                    try { // try-catch for "GMT" only time zone string
                        if( text.charAt(pos.index) == '+' ) {
                            sign = 1;
                        } else if( text.charAt(pos.index) == '-' ) {
                            sign = -1;
                        } 
                    }
                    catch(StringIndexOutOfBoundsException e) {}

                    if (sign == 0) {	/* "GMT" without offset */
                        calendar.set(Calendar.ZONE_OFFSET, 0 );
                        return pos.index;
                    }

                    // Look for hours.
                    try {
                        char c = text.charAt(++pos.index);
                        if (c < '0' || c > '9') { /* must be from '0' to '9'. */
                            origPos.errorIndex = pos.index;
                            return -1;   // Wasn't actually a number.
                        } else {
                            num = c - '0';
                        }
                        if (text.charAt(++pos.index) != ':') {
                            c = text.charAt(pos.index);
                            if (c < '0' || c > '9') { /* must be from '0' to '9'. */
                                origPos.errorIndex = pos.index;
                                return -1;   // Wasn't actually a number.
                            } else {
                                num *= 10;
                                num += c - '0';
                                pos.index++;
                            }
                        }
                        if (num > 23) {
                            origPos.errorIndex = pos.index - 1;
                            return -1;   // Wasn't actually a number.
                        }
                        if  (text.charAt(pos.index) != ':') {
                            origPos.errorIndex = pos.index;
                            return -1;   // Wasn't actually a number.
                        }
                    }
                    catch(StringIndexOutOfBoundsException e) {
                        origPos.errorIndex = pos.index;
                        return -1;   // Wasn't actually a number.
                    }

                    // Look for minutes.
                    offset = num * 60;
                    try {
                        char c = text.charAt(++pos.index);
                        if (c < '0' || c > '9') { /* must be from '0' to '9'. */
                            origPos.errorIndex = pos.index;
                            return -1;   // Wasn't actually a number.
                        } else {
                            num = c - '0';
                            c = text.charAt(++pos.index);
                            if (c < '0' || c > '9') { /* must be from '0' to '9'. */
                                origPos.errorIndex = pos.index;
                                return -1;   // Wasn't actually a number.
                            } else {
                                num *= 10;
                                num += c - '0';
                            }
                        }

                        if (num > 59) {
                            origPos.errorIndex = pos.index;
                            return -1;   // Wasn't actually a number.
                        }
                    }
                    catch(StringIndexOutOfBoundsException e) {
                        origPos.errorIndex = pos.index;
                        return -1;   // Wasn't actually a number.
                    }
                    offset += num;

                    // Fall through for final processing below of 'offset' and 'sign'.
                }
                else {
                    // At this point, check for named time zones by looking through
                    // the locale data from the DateFormatZoneData strings.
                    // Want to be able to parse both short and long forms.
                    int i = subParseZoneString(text, pos.index);
                    if (i != 0) {
                        return i;
                    }

                    // As a last resort, look for numeric timezones of the form
                    // [+-]hhmm as specified by RFC 822.  This code is actually
                    // a little more permissive than RFC 822.  It will try to do
                    // its best with numbers that aren't strictly 4 digits long.
                    try {
                        if( text.charAt(pos.index) == '+' ) {
                            sign = 1;
                        } else if( text.charAt(pos.index) == '-' ) {
                            sign = -1;
                        } 
                        if (sign == 0) {
                            origPos.errorIndex = pos.index;
                            return -1;
                        }

                        // Look for hh.
                        int hours = 0;
                        char c = text.charAt(++pos.index);
                        if (c < '0' || c > '9') { /* must be from '0' to '9'. */
                            origPos.errorIndex = pos.index;
                            return -1;   // Wasn't actually a number.
                        } else {
                            hours = c - '0';
                            c = text.charAt(++pos.index);
                            if (c < '0' || c > '9') { /* must be from '0' to '9'. */
                                origPos.errorIndex = pos.index;
                                return -1;   // Wasn't actually a number.
                            } else {
                                hours *= 10;
                                hours += c - '0';
                            }
                        }
                        if (hours > 23) {
                            origPos.errorIndex = pos.index;
                            return -1;   // Wasn't actually a number.
                        }

                        // Look for mm.
                        int minutes = 0;
                        c = text.charAt(++pos.index);
                        if (c < '0' || c > '9') { /* must be from '0' to '9'. */
                            origPos.errorIndex = pos.index;
                            return -1;   // Wasn't actually a number.
                        } else {
                            minutes = c - '0';
                            c = text.charAt(++pos.index);
                            if (c < '0' || c > '9') { /* must be from '0' to '9'. */
                                origPos.errorIndex = pos.index;
                                return -1;   // Wasn't actually a number.
                            } else {
                                minutes *= 10;
                                minutes += c - '0';
                            }
                        }

                        if (minutes > 59) {
                            origPos.errorIndex = pos.index;
                            return -1;   // Wasn't actually a number.
                        }

                        offset = hours * 60 + minutes;
                    } catch(StringIndexOutOfBoundsException e) {
                        origPos.errorIndex = pos.index;
                        return -1;   // Wasn't actually a number.
                    }
                }

                // Do the final processing for both of the above cases.  We only
                // arrive here if the form GMT+/-... or an RFC 822 form was seen.
                if (sign != 0)
                {
                    offset *= millisPerMinute * sign;
                    calendar.set(Calendar.ZONE_OFFSET, offset);
                    calendar.set(Calendar.DST_OFFSET, 0);
                    return ++pos.index;
                }
            }

            // All efforts to parse a zone failed.
            origPos.errorIndex = pos.index;
            return -1;

        default:
            // case 3: // 'd' - DATE
            // case 5: // 'H' - HOUR_OF_DAY:0-based.  eg, 23:59 + 1 hour =>> 00:59
            // case 6: // 'm' - MINUTE
            // case 7: // 's' - SECOND
            // case 8: // 'S' - MILLISECOND
            // case 10: // 'D' - DAY_OF_YEAR
            // case 11: // 'F' - DAY_OF_WEEK_IN_MONTH
            // case 12: // 'w' - WEEK_OF_YEAR
            // case 13: // 'W' - WEEK_OF_MONTH
            // case 16: // 'K' - HOUR: 0-based.  eg, 11PM + 1 hour =>> 0 AM

            // Handle "generic" fields
            if (obeyCount)
            {
                if ((start+count) > text.length()) {
                    origPos.errorIndex = pos.index;
                    return -1;
                }
                number = numberFormat.parse(text.substring(0, start+count), pos);
            }
            else number = numberFormat.parse(text, pos);
            if (number != null) {
                calendar.set(field, number.intValue());
                return pos.index;
            }
            origPos.errorIndex = pos.index;
            return -1;
        }
!!!7866651.java!!!	translatePattern(in pattern : String, in from : String, in to : String) : String
        StringBuilder result = new StringBuilder();
        boolean inQuote = false;
        for (int i = 0; i < pattern.length(); ++i) {
            char c = pattern.charAt(i);
            if (inQuote) {
                if (c == '\'')
                    inQuote = false;
            }
            else {
                if (c == '\'')
                    inQuote = true;
                else if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
                    int ci = from.indexOf(c);
                    if (ci == -1)
                        throw new IllegalArgumentException("Illegal pattern " +
                                                           " character '" +
                                                           c + "'");
                    c = to.charAt(ci);
                }
            }
            result.append(c);
        }
        if (inQuote)
            throw new IllegalArgumentException("Unfinished quote in pattern");
        return result.toString();
!!!7866779.java!!!	toPattern() : String
        return pattern;
!!!7866907.java!!!	toLocalizedPattern() : String
        return translatePattern(pattern,
                                formatData.patternChars,
                                formatData.localPatternChars);
!!!7867035.java!!!	applyPattern(in pattern : String) : void
	compiledPattern = compile(pattern);
        this.pattern = pattern;
!!!7867163.java!!!	applyLocalizedPattern(in pattern : String) : void
         String p = translatePattern(pattern,
				     formatData.localPatternChars,
				     formatData.patternChars);
	 compiledPattern = compile(p);
	 this.pattern = p;
!!!7867291.java!!!	getDateFormatSymbols() : DateFormatSymbols
        return (DateFormatSymbols)formatData.clone();
!!!7867419.java!!!	setDateFormatSymbols(inout newFormatSymbols : DateFormatSymbols) : void
        this.formatData = (DateFormatSymbols)newFormatSymbols.clone();
!!!7867547.java!!!	clone() : Object
        SimpleDateFormat other = (SimpleDateFormat) super.clone();
        other.formatData = (DateFormatSymbols) formatData.clone();
        return other;
!!!7867675.java!!!	hashCode() : int
        return pattern.hashCode();
        // just enough fields for a reasonable distribution
!!!7867803.java!!!	equals(inout obj : Object) : boolean
        if (!super.equals(obj)) return false; // super does class check
        SimpleDateFormat that = (SimpleDateFormat) obj;
        return (pattern.equals(that.pattern)
                && formatData.equals(that.formatData));
!!!7867931.java!!!	readObject(inout stream : ObjectInputStream) : void
	stream.defaultReadObject();

	try {
	    compiledPattern = compile(pattern);
	} catch (Exception e) {
	    throw new InvalidObjectException("invalid pattern");
	}

	if (serialVersionOnStream < 1) {
	    // didn't have defaultCenturyStart field
	    initializeDefaultCentury();
	}
	else {
	    // fill in dependent transient field
	    parseAmbiguousDatesAsAfter(defaultCenturyStart);
	}
	serialVersionOnStream = currentSerialVersion;

	// If the deserialized object has a SimpleTimeZone, try
	// to replace it with a ZoneInfo equivalent in order to
	// be compatible with the SimpleTimeZone-based
	// implementation as much as possible.
	TimeZone tz = getTimeZone();
	if (tz instanceof SimpleTimeZone) {
	    String id = tz.getID();
	    TimeZone zi = TimeZone.getTimeZone(id);
	    if (zi != null && zi.hasSameRules(tz) && zi.getID().equals(id)) {
		setTimeZone(zi);
	    }
	}
