class BreakIterator
!!!7797915.java!!!	clone() : Object
        try {
            return super.clone();
        }
        catch (CloneNotSupportedException e) {
            throw new InternalError();
        }
!!!7798811.java!!!	preceding(in offset : int) : int
        // NOTE:  This implementation is here solely because we can't add new
        // abstract methods to an existing class.  There is almost ALWAYS a
        // better, faster way to do this.
        int pos = following(offset);
        while (pos >= offset && pos != DONE)
            pos = previous();
        return pos;
!!!7798939.java!!!	isBoundary(in offset : int) : boolean
        // NOTE: This implementation probably is wrong for most situations
        // because it fails to take into account the possibility that a
        // CharacterIterator passed to setText() may not have a begin offset
        // of 0.  But since the abstract BreakIterator doesn't have that
        // knowledge, it assumes the begin offset is 0.  If you subclass
        // BreakIterator, copy the SimpleTextBoundary implementation of this
        // function into your subclass.  [This should have been abstract at
        // this level, but it's too late to fix that now.]
        if (offset == 0)
            return true;
        else
            return following(offset - 1) == offset;
!!!7799323.java!!!	setText(in newText : String) : void
        setText(new StringCharacterIterator(newText));
!!!7799579.java!!!	getWordInstance() : BreakIterator
        return getWordInstance(Locale.getDefault());
!!!7799707.java!!!	getWordInstance(inout where : Locale) : BreakIterator
        return getBreakInstance(where,
                                WORD_INDEX,
                                "WordData",
                                "WordDictionary");
!!!7799835.java!!!	getLineInstance() : BreakIterator
        return getLineInstance(Locale.getDefault());
!!!7799963.java!!!	getLineInstance(inout where : Locale) : BreakIterator
        return getBreakInstance(where,
                                LINE_INDEX,
                                "LineData",
                                "LineDictionary");
!!!7800091.java!!!	getCharacterInstance() : BreakIterator
        return getCharacterInstance(Locale.getDefault());
!!!7800219.java!!!	getCharacterInstance(inout where : Locale) : BreakIterator
        return getBreakInstance(where,
                                CHARACTER_INDEX,
                                "CharacterData",
                                "CharacterDictionary");
!!!7800347.java!!!	getSentenceInstance() : BreakIterator
        return getSentenceInstance(Locale.getDefault());
!!!7800475.java!!!	getSentenceInstance(inout where : Locale) : BreakIterator
        return getBreakInstance(where,
                                SENTENCE_INDEX,
                                "SentenceData",
                                "SentenceDictionary");
!!!7800603.java!!!	getBreakInstance(inout where : Locale, in type : int, in dataName : String, in dictionaryName : String) : BreakIterator
        if (iterCache[type] != null) {
            BreakIteratorCache cache = (BreakIteratorCache) iterCache[type].get();
            if (cache != null) {
                if (cache.getLocale().equals(where)) {
                    return cache.createBreakInstance();
                }
            }
        }

        BreakIterator result = createBreakInstance(where,
                                                   type,
                                                   dataName,
                                                   dictionaryName);
        BreakIteratorCache cache = new BreakIteratorCache(where, result);
        iterCache[type] = new SoftReference(cache);
        return result;
!!!7800731.java!!!	getBundle(in baseName : String, in locale : Locale) : ResourceBundle
         return (ResourceBundle) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                return ResourceBundle.getBundle(baseName, locale);
            }
        });
!!!7800859.java!!!	createBreakInstance(inout where : Locale, in type : int, in dataName : String, in dictionaryName : String) : BreakIterator

        ResourceBundle bundle = getBundle(
                        "sun.text.resources.BreakIteratorInfo", where);
        String[] classNames = bundle.getStringArray("BreakIteratorClasses");

        String dataFile = bundle.getString(dataName);

        try {
            if (classNames[type].equals("RuleBasedBreakIterator")) {
                return new RuleBasedBreakIterator(dataFile);
            }
            else if (classNames[type].equals("DictionaryBasedBreakIterator")) {
                String dictionaryFile = bundle.getString(dictionaryName);
                return new DictionaryBasedBreakIterator(dataFile, dictionaryFile);
            }
            else {
                throw new IllegalArgumentException("Invalid break iterator class \"" +
                                classNames[type] + "\"");
            }
        }
        catch (Exception e) {
            throw new InternalError(e.toString()); 
        }
!!!7800987.java!!!	getAvailableLocales() : Locale
        //FIX ME - this is a known bug.  It should return
        //all locales.
        return LocaleData.getAvailableLocales("NumberPatterns");
!!!7801499.java!!!	getLong(in buf : byte, in offset : int) : long
        long num = buf[offset]&0xFF;
        for (int i = 1; i < 8; i++) {
            num = num<<8 | (buf[offset+i]&0xFF);
        }
        return num;
!!!7801627.java!!!	getInt(in buf : byte, in offset : int) : int
        int num = buf[offset]&0xFF;
        for (int i = 1; i < 4; i++) {
            num = num<<8 | (buf[offset+i]&0xFF);
        }
        return num;
!!!7801755.java!!!	getShort(in buf : byte, in offset : int) : short
        short num = (short)(buf[offset]&0xFF);
        num = (short)(num<<8 | (buf[offset+1]&0xFF));
        return num;
