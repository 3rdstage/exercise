class Delegate
!!!7619355.java!!!	Delegate(inout sigSpi : SignatureSpi, in algorithm : String)
	    super(algorithm);
	    this.sigSpi = sigSpi;
	    this.lock = null; // no lock needed
!!!7619483.java!!!	Delegate(inout service : Service, inout iterator : Iterator, in algorithm : String)
	    super(algorithm);
	    this.firstService = service;
	    this.serviceIterator = iterator;
	    this.lock = new Object();
!!!7619611.java!!!	clone() : Object
	    chooseFirstProvider();
	    if (sigSpi instanceof Cloneable) {
		SignatureSpi sigSpiClone = (SignatureSpi)sigSpi.clone();
		// Because 'algorithm' and 'provider' are private
		// members of our supertype, we must perform a cast to
		// access them.
		Signature that =
		    new Delegate(sigSpiClone, ((Signature)this).algorithm);
		that.provider = ((Signature)this).provider;
		return that;
	    } else {
		throw new CloneNotSupportedException();
	    }
!!!7619739.java!!!	newInstance(inout s : Service) : SignatureSpi
	    if (s.getType().equals("Cipher")) {
		// must be NONEwithRSA
		try {
		    Cipher c = Cipher.getInstance(RSA_CIPHER, s.getProvider());
		    return new CipherAdapter(c);
		} catch (NoSuchPaddingException e) {
		    throw new NoSuchAlgorithmException(e);
		}
	    } else {
		Object o = s.newInstance(null);
		if (o instanceof SignatureSpi == false) {
		    throw new NoSuchAlgorithmException
			("Not a SignatureSpi: " + o.getClass().getName());
		}
		return (SignatureSpi)o;
	    }
!!!7619867.java!!!	chooseFirstProvider() : void
	    if (sigSpi != null) {
		return;
	    }
	    synchronized (lock) {
		if (sigSpi != null) {
		    return;
		}
		if (debug != null) {
		    int w = --warnCount;
		    if (w >= 0) {
			debug.println("Signature.init() not first method "
			    + "called, disabling delayed provider selection");
			if (w == 0) {
			    debug.println("Further warnings of this type will "
			    	+ "be suppressed");
			}
			new Exception("Call trace").printStackTrace();
		    }
		}
		Exception lastException = null;
		while ((firstService != null) || serviceIterator.hasNext()) {
		    Service s;
		    if (firstService != null) {
			s = firstService;
			firstService = null;
		    } else {
			s = (Service)serviceIterator.next();
		    }
		    if (isSpi(s) == false) {
			continue;
		    }
		    try {
			sigSpi = newInstance(s);
			provider = s.getProvider();
			// not needed any more
			firstService = null;
			serviceIterator = null;
			return;
		    } catch (NoSuchAlgorithmException e) {
			lastException = e;
		    }
		}
		ProviderException e = new ProviderException
			("Could not construct SignatureSpi instance");
		if (lastException != null) {
		    e.initCause(lastException);
		}
		throw e;
	    }
!!!7619995.java!!!	chooseProvider(in type : int, inout key : Key, inout random : SecureRandom) : void
	    synchronized (lock) {
		if (sigSpi != null) {
		    init(sigSpi, type, key, random);
		    return;
		}
		Exception lastException = null;
		while ((firstService != null) || serviceIterator.hasNext()) {
		    Service s;
		    if (firstService != null) {
			s = firstService;
			firstService = null;
		    } else {
			s = (Service)serviceIterator.next();
		    }
		    // if provider says it does not support this key, ignore it
		    if (s.supportsParameter(key) == false) {
			continue;
		    }
		    // if instance is not a SignatureSpi, ignore it
		    if (isSpi(s) == false) {
			continue;
		    }
		    try {
			SignatureSpi spi = newInstance(s);
			init(spi, type, key, random);
			provider = s.getProvider();
			sigSpi = spi;
			firstService = null;
			serviceIterator = null;
			return;
		    } catch (Exception e) {
			// NoSuchAlgorithmException from newInstance()
			// InvalidKeyException from init()
			// RuntimeException (ProviderException) from init()
			if (lastException == null) {
			    lastException = e;
			}
		    }
		}
		// no working provider found, fail
		if (lastException instanceof InvalidKeyException) {
		    throw (InvalidKeyException)lastException;
		}
		if (lastException instanceof RuntimeException) {
		    throw (RuntimeException)lastException;
		}
		String k = (key != null) ? key.getClass().getName() : "(null)";
		throw new InvalidKeyException
		    ("No installed provider supports this key: "
		    + k, lastException);
	    }
!!!7620123.java!!!	init(inout spi : SignatureSpi, in type : int, inout key : Key, inout random : SecureRandom) : void
	    switch (type) {
	    case I_PUB:
		spi.engineInitVerify((PublicKey)key);
		break;
	    case I_PRIV:
		spi.engineInitSign((PrivateKey)key);
		break;
	    case I_PRIV_SR:
		spi.engineInitSign((PrivateKey)key, random);
		break;
	    default:
		throw new AssertionError("Internal error: " + type);
	    }
!!!7620251.java!!!	engineInitVerify(inout publicKey : PublicKey) : void
	    if (sigSpi != null) {
		sigSpi.engineInitVerify(publicKey);
	    } else {
		chooseProvider(I_PUB, publicKey, null);
	    }
!!!7620379.java!!!	engineInitSign(inout privateKey : PrivateKey) : void
	    if (sigSpi != null) {
		sigSpi.engineInitSign(privateKey);
	    } else {
		chooseProvider(I_PRIV, privateKey, null);
	    }
!!!7620507.java!!!	engineInitSign(inout privateKey : PrivateKey, inout sr : SecureRandom) : void
	    if (sigSpi != null) {
		sigSpi.engineInitSign(privateKey, sr);
	    } else {
		chooseProvider(I_PRIV_SR, privateKey, sr);
	    }
!!!7620635.java!!!	engineUpdate(in b : byte) : void
	    chooseFirstProvider();
	    sigSpi.engineUpdate(b);
!!!7620763.java!!!	engineUpdate(in b : byte, in off : int, in len : int) : void
	    chooseFirstProvider();
	    sigSpi.engineUpdate(b, off, len);
!!!7620891.java!!!	engineUpdate(inout data : ByteBuffer) : void
	    chooseFirstProvider();
	    sigSpi.engineUpdate(data);
!!!7621019.java!!!	engineSign() : byte
	    chooseFirstProvider();
	    return sigSpi.engineSign();
!!!7621147.java!!!	engineSign(in outbuf : byte, in offset : int, in len : int) : int
	    chooseFirstProvider();
	    return sigSpi.engineSign(outbuf, offset, len);
!!!7621275.java!!!	engineVerify(in sigBytes : byte) : boolean
	    chooseFirstProvider();
	    return sigSpi.engineVerify(sigBytes);
!!!7621403.java!!!	engineVerify(in sigBytes : byte, in offset : int, in length : int) : boolean
	    chooseFirstProvider();
	    return sigSpi.engineVerify(sigBytes, offset, length);
!!!7621531.java!!!	engineSetParameter(in param : String, inout value : Object) : void
	    chooseFirstProvider();
	    sigSpi.engineSetParameter(param, value);
!!!7621659.java!!!	engineSetParameter(inout params : AlgorithmParameterSpec) : void
	    chooseFirstProvider();
	    sigSpi.engineSetParameter(params);
!!!7621787.java!!!	engineGetParameter(in param : String) : Object
	    chooseFirstProvider();
	    return sigSpi.engineGetParameter(param);
!!!7621915.java!!!	engineGetParameters() : AlgorithmParameters
	    chooseFirstProvider();
	    return sigSpi.engineGetParameters();
