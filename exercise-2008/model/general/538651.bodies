class ThreadContext
!!!3347867.java!!!	ThreadContext(inout previous : ThreadContext, in key : String, inout value : Object)
	this.previous = previous;
	this.key = key;
	this.value = value;
!!!3347995.java!!!	get(in key : String) : Object
	ThreadContext context = contextContaining(key);
	if (context == null)
	    return null;
	else
	    return context.value;
!!!3348123.java!!!	contains(in key : String) : boolean
	return (contextContaining(key) != null);
!!!3348251.java!!!	contextContaining(in key : String) : ThreadContext
	if (key == null)
	    throw new IllegalArgumentException("null key");
	for (ThreadContext context = getContext();
	     context != null;
	     context = context.previous) {
	    if (key.equals(context.key))
		return context;
	    /* Note that "context.key" may be null if "context" is the
	       sentinel, so don't write "if (context.key.equals(key))"!  */
	}
	return null;
!!!3348379.java!!!	push(in key : String, inout value : Object) : ThreadContext
	if (key == null)
	    throw new IllegalArgumentException("null key");

	ThreadContext oldContext = getContext();
	if (oldContext == null)
	    oldContext = new ThreadContext(null, null, null);  // make sentinel
	ThreadContext newContext = new ThreadContext(oldContext, key, value);
	setContext(newContext);
	return oldContext;
!!!3348507.java!!!	getThreadContext() : ThreadContext
	return getContext();
!!!3348635.java!!!	restore(inout oldContext : ThreadContext) : void
	/* The following test is not strictly necessary in the code as it
	   stands today, since the reference to "oldContext.key" would
	   generate a NullPointerException anyway.  But if someone
	   didn't notice that during subsequent changes, they could
	   accidentally permit restore(null) with the semantics of
	   trashing the context stack.  */
	if (oldContext == null)
	    throw new NullPointerException();

	/* Check that the restored context is in the stack.  */
	for (ThreadContext context = getContext();
	     context != oldContext;
	     context = context.previous) {
	    if (context == null) {
		throw new IllegalArgumentException("Restored context is not " +
						   "contained in current " +
						   "context");
	    }
	}

	/* Discard the sentinel if the stack is empty.  This means that it
	   is an error to call "restore" a second time with the
	   ThreadContext value that means an empty stack.  That's why we
	   don't say that it is all right to restore the stack to the
	   state it was already in.  */
	if (oldContext.key == null)
	    oldContext = null;

	setContext(oldContext);
!!!3348763.java!!!	setInitialContext(inout context : ThreadContext) : void
	/* The following test assumes that we discard sentinels when the
	   stack is empty.  */
	if (getContext() != null)
	    throw new IllegalArgumentException("previous context not empty");
	setContext(context);
!!!3348891.java!!!	getContext() : ThreadContext
	return (ThreadContext) localContext.get();
!!!3349019.java!!!	setContext(inout context : ThreadContext) : void
	localContext.set(context);
