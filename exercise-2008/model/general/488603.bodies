class WindowsScrollBarUI
!!!3011867.java!!!	createUI(inout c : JComponent) : ComponentUI
        return new WindowsScrollBarUI();
!!!3011995.java!!!	installDefaults() : void
	super.installDefaults();

	if (XPStyle.getXP() != null) {
	    scrollbar.setBorder(null);
	}
!!!3012123.java!!!	uninstallUI(inout c : JComponent) : void
        super.uninstallUI(c);
        thumbGrid = highlightGrid = null;
!!!3012251.java!!!	configureScrollBarColors() : void
        super.configureScrollBarColors();
	Color color = UIManager.getColor("ScrollBar.trackForeground");
        if (color != null && trackColor != null) {
            thumbGrid = Grid.getGrid(color, trackColor);
        }

	color = UIManager.getColor("ScrollBar.trackHighlightForeground");
        if (color != null && trackHighlightColor != null) {
            highlightGrid = Grid.getGrid(color, trackHighlightColor);
        }
!!!3012379.java!!!	createDecreaseButton(in orientation : int) : JButton
        return new WindowsArrowButton(orientation,
				    UIManager.getColor("ScrollBar.thumb"),
				    UIManager.getColor("ScrollBar.thumbShadow"),
				    UIManager.getColor("ScrollBar.thumbDarkShadow"),
				    UIManager.getColor("ScrollBar.thumbHighlight"));
!!!3012507.java!!!	createIncreaseButton(in orientation : int) : JButton
        return new WindowsArrowButton(orientation,
				    UIManager.getColor("ScrollBar.thumb"),
				    UIManager.getColor("ScrollBar.thumbShadow"),
				    UIManager.getColor("ScrollBar.thumbDarkShadow"),
				    UIManager.getColor("ScrollBar.thumbHighlight"));
!!!3012635.java!!!	paintTrack(inout g : Graphics, inout c : JComponent, inout trackBounds : Rectangle) : void
	boolean v = (scrollbar.getOrientation() == JScrollBar.VERTICAL);

	XPStyle xp = XPStyle.getXP();
	if (xp != null) {
	    JScrollBar sb = (JScrollBar)c;
            State state = State.NORMAL;
            // Pending: Implement rollover (hot) and pressed
            if (!sb.isEnabled()) {
                state = State.DISABLED;
	    }
            Part part = v ? Part.SBP_LOWERTRACKVERT : Part.SBP_LOWERTRACKHORZ;
            xp.getSkin(sb, part).paintSkin(g, trackBounds, state);
	} else if (thumbGrid == null) {
            super.paintTrack(g, c, trackBounds);
        }
        else {
            thumbGrid.paint(g, trackBounds.x, trackBounds.y, trackBounds.width,
                            trackBounds.height);
            if (trackHighlight == DECREASE_HIGHLIGHT) {
                paintDecreaseHighlight(g);
            } 
            else if (trackHighlight == INCREASE_HIGHLIGHT) {
                paintIncreaseHighlight(g);
            }
        }
!!!3012763.java!!!	paintThumb(inout g : Graphics, inout c : JComponent, inout thumbBounds : Rectangle) : void
	boolean v = (scrollbar.getOrientation() == JScrollBar.VERTICAL);

	XPStyle xp = XPStyle.getXP();
	if (xp != null) {
	    JScrollBar sb = (JScrollBar)c;
            State state = State.NORMAL;
	    if (!sb.isEnabled()) {
                state = State.DISABLED;
	    } else if (isDragging) {
                state = State.PRESSED;
	    } else if (isThumbRollover()) {
                state = State.HOT;
	    }
	    // Paint thumb
            Part thumbPart = v ? Part.SBP_THUMBBTNVERT : Part.SBP_THUMBBTNHORZ;
            xp.getSkin(sb, thumbPart).paintSkin(g, thumbBounds, state);
	    // Paint gripper
            Part gripperPart = v ? Part.SBP_GRIPPERVERT : Part.SBP_GRIPPERHORZ;
            Skin skin = xp.getSkin(sb, gripperPart);
            Insets gripperInsets = xp.getMargin(c, thumbPart, null, 
                Prop.CONTENTMARGINS);
            if (gripperInsets == null ||
                    (v && (thumbBounds.height - gripperInsets.top -
                            gripperInsets.bottom >= skin.getHeight())) ||
                    (!v && (thumbBounds.width - gripperInsets.left -
                            gripperInsets.right >= skin.getWidth()))) {
                skin.paintSkin(g,
                               thumbBounds.x + (thumbBounds.width  - skin.getWidth()) / 2,
                               thumbBounds.y + (thumbBounds.height - skin.getHeight()) / 2,
                               skin.getWidth(), skin.getHeight(), state);
            }
	} else {
	    super.paintThumb(g, c, thumbBounds);
	}
!!!3012891.java!!!	paintDecreaseHighlight(inout g : Graphics) : void
        if (highlightGrid == null) {
            super.paintDecreaseHighlight(g);
        }
        else {
            Insets insets = scrollbar.getInsets();
            Rectangle thumbR = getThumbBounds();
            int x, y, w, h;

            if (scrollbar.getOrientation() == JScrollBar.VERTICAL) {
                x = insets.left;
                y = decrButton.getY() + decrButton.getHeight();
                w = scrollbar.getWidth() - (insets.left + insets.right);
                h = thumbR.y - y;
            } 
            else {
                x = decrButton.getX() + decrButton.getHeight();
                y = insets.top;
                w = thumbR.x - x;
                h = scrollbar.getHeight() - (insets.top + insets.bottom);
            }
            highlightGrid.paint(g, x, y, w, h);
	}
!!!3013019.java!!!	paintIncreaseHighlight(inout g : Graphics) : void
        if (highlightGrid == null) {
            super.paintDecreaseHighlight(g);
        }
        else {
            Insets insets = scrollbar.getInsets();
            Rectangle thumbR = getThumbBounds();
            int x, y, w, h;

            if (scrollbar.getOrientation() == JScrollBar.VERTICAL) {
                x = insets.left;
                y = thumbR.y + thumbR.height;
                w = scrollbar.getWidth() - (insets.left + insets.right);
                h = incrButton.getY() - y;
            }
            else {
                x = thumbR.x + thumbR.width;
                y = insets.top;
                w = incrButton.getX() - x;
                h = scrollbar.getHeight() - (insets.top + insets.bottom);
            }
            highlightGrid.paint(g, x, y, w, h);
        }
