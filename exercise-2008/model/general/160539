format 66
"spi" // src::javax::security::auth::spi
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "javax/security/auth/spi"
  java_package "javax.security.auth.spi"
  classview 157723 "spi"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 524827 "LoginModule"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p> <code>LoginModule</code> describes the interface
implemented by authentication technology providers.  LoginModules
are plugged in under applications to provide a particular type of
authentication.

<p> While applications write to the <code>LoginContext</code> API,
authentication technology providers implement the
<code>LoginModule</code> interface.
A <code>Configuration</code> specifies the LoginModule(s)
to be used with a particular login application.  Therefore different
LoginModules can be plugged in under the application without
requiring any modifications to the application itself.

<p> The <code>LoginContext</code> is responsible for reading the
<code>Configuration</code> and instantiating the appropriate
LoginModules.  Each <code>LoginModule</code> is initialized with
a <code>Subject</code>, a <code>CallbackHandler</code>, shared
<code>LoginModule</code> state, and LoginModule-specific options.

The <code>Subject</code> represents the
<code>Subject</code> currently being authenticated and is updated
with relevant Credentials if authentication succeeds.
LoginModules use the <code>CallbackHandler</code> to
communicate with users.  The <code>CallbackHandler</code> may be
used to prompt for usernames and passwords, for example.
Note that the <code>CallbackHandler</code> may be null.  LoginModules
which absolutely require a <code>CallbackHandler</code> to authenticate
the <code>Subject</code> may throw a <code>LoginException</code>.
LoginModules optionally use the shared state to share information
or data among themselves.

<p> The LoginModule-specific options represent the options
configured for this <code>LoginModule</code> by an administrator or user
in the login <code>Configuration</code>.
The options are defined by the <code>LoginModule</code> itself
and control the behavior within it.  For example, a
<code>LoginModule</code> may define options to support debugging/testing
capabilities.  Options are defined using a key-value syntax,
such as <i>debug=true</i>.  The <code>LoginModule</code>
stores the options as a <code>Map</code> so that the values may
be retrieved using the key.  Note that there is no limit to the number
of options a <code>LoginModule</code> chooses to define.

<p> The calling application sees the authentication process as a single
operation.  However, the authentication process within the
<code>LoginModule</code> proceeds in two distinct phases.
In the first phase, the LoginModule's
<code>login</code> method gets invoked by the LoginContext's
<code>login</code> method.  The <code>login</code>
method for the <code>LoginModule</code> then performs
the actual authentication (prompt for and verify a password for example)
and saves its authentication status as private state
information.  Once finished, the LoginModule's <code>login</code>
method either returns <code>true</code> (if it succeeded) or
<code>false</code> (if it should be ignored), or throws a
<code>LoginException</code> to specify a failure.
In the failure case, the <code>LoginModule</code> must not retry the
authentication or introduce delays.  The responsibility of such tasks
belongs to the application.  If the application attempts to retry
the authentication, the LoginModule's <code>login</code> method will be
called again.

<p> In the second phase, if the LoginContext's overall authentication
succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL
LoginModules succeeded), then the <code>commit</code>
method for the <code>LoginModule</code> gets invoked.
The <code>commit</code> method for a <code>LoginModule</code> checks its
privately saved state to see if its own authentication succeeded.
If the overall <code>LoginContext</code> authentication succeeded
and the LoginModule's own authentication succeeded, then the
<code>commit</code> method associates the relevant
Principals (authenticated identities) and Credentials (authentication data
such as cryptographic keys) with the <code>Subject</code>
located within the <code>LoginModule</code>.

<p> If the LoginContext's overall authentication failed (the relevant
REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules did not succeed),
then the <code>abort</code> method for each <code>LoginModule</code>
gets invoked.  In this case, the <code>LoginModule</code> removes/destroys
any authentication state originally saved.

<p> Logging out a <code>Subject</code> involves only one phase.
The <code>LoginContext</code> invokes the LoginModule's <code>logout</code>
method.  The <code>logout</code> method for the <code>LoginModule</code>
then performs the logout procedures, such as removing Principals or
Credentials from the <code>Subject</code> or logging session information.

<p> A <code>LoginModule</code> implementation must have a constructor with
no arguments.  This allows classes which load the <code>LoginModule</code>
to instantiate it.

@version 1.53, 05/05/04
@see javax.security.auth.login.LoginContext
@see javax.security.auth.login.Configuration"
      operation 3243931 "initialize"
	public explicit_return_type "void"
	nparams 4
	  param inout name "subject" type class_ref 520987 // Subject
	  param inout name "callbackHandler" type class_ref 524955 // CallbackHandler
	  param inout name "sharedState" type class_ref 136603 // Map
	  param inout name "options" type class_ref 136603 // Map
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String,?> ${p2}, ${t3}<String,?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize this LoginModule.

<p> This method is called by the <code>LoginContext</code>
after this <code>LoginModule</code> has been instantiated.
The purpose of this method is to initialize this
<code>LoginModule</code> with the relevant information.
If this <code>LoginModule</code> does not understand
any of the data stored in <code>sharedState</code> or
<code>options</code> parameters, they can be ignored.

<p>

@param subject the <code>Subject</code> to be authenticated. <p>

@param callbackHandler a <code>CallbackHandler</code> for communicating
			with the end user (prompting for usernames and
			passwords, for example). <p>

@param sharedState state shared with other configured LoginModules. <p>

@param options options specified in the login
			<code>Configuration</code> for this particular
			<code>LoginModule</code>."
      end

      operation 3244059 "login"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 525083 // LoginException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method to authenticate a <code>Subject</code> (phase 1).

<p> The implementation of this method authenticates
a <code>Subject</code>.  For example, it may prompt for
<code>Subject</code> information such
as a username and password and then attempt to verify the password.
This method saves the result of the authentication attempt
as private state within the LoginModule.

<p>

@exception LoginException if the authentication fails

@return true if the authentication succeeded, or false if this
			<code>LoginModule</code> should be ignored."
      end

      operation 3244187 "commit"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 525083 // LoginException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method to commit the authentication process (phase 2).

<p> This method is called if the LoginContext's
overall authentication succeeded
(the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
succeeded).

<p> If this LoginModule's own authentication attempt
succeeded (checked by retrieving the private state saved by the
<code>login</code> method), then this method associates relevant
Principals and Credentials with the <code>Subject</code> located in the
<code>LoginModule</code>.  If this LoginModule's own
authentication attempted failed, then this method removes/destroys
any state that was originally saved.

<p>

@exception LoginException if the commit fails

@return true if this method succeeded, or false if this
			<code>LoginModule</code> should be ignored."
      end

      operation 3244315 "abort"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 525083 // LoginException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method to abort the authentication process (phase 2).

<p> This method is called if the LoginContext's
overall authentication failed.
(the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
did not succeed).

<p> If this LoginModule's own authentication attempt
succeeded (checked by retrieving the private state saved by the
<code>login</code> method), then this method cleans up any state
that was originally saved.

<p>

@exception LoginException if the abort fails

@return true if this method succeeded, or false if this
			<code>LoginModule</code> should be ignored."
      end

      operation 3244443 "logout"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 525083 // LoginException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method which logs out a <code>Subject</code>.  

<p>An implementation of this method might remove/destroy a Subject's
Principals and Credentials.

<p>

@exception LoginException if the logout fails

@return true if this method succeeded, or false if this
			<code>LoginModule</code> should be ignored."
      end
    end
  end

  deploymentview 149915 "spi"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 349979 "LoginModule"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.security.auth.Subject;
import javax.security.auth.AuthPermission;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 524827 // LoginModule
      end
      comment "@(#)LoginModule.java	1.53 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
