class Duration
!!!5391003.java!!!	getXMLSchemaType() : QName
		
		boolean yearSet = isSet(DatatypeConstants.YEARS);
		boolean monthSet = isSet(DatatypeConstants.MONTHS);
		boolean daySet = isSet(DatatypeConstants.DAYS);
		boolean hourSet = isSet(DatatypeConstants.HOURS);
		boolean minuteSet = isSet(DatatypeConstants.MINUTES);
		boolean secondSet = isSet(DatatypeConstants.SECONDS);
		
		// DURATION
		if (yearSet
			&& monthSet
			&& daySet
			&& hourSet
			&& minuteSet
			&& secondSet) {
			return DatatypeConstants.DURATION;
		}

		// DURATION_DAYTIME
		if (!yearSet
			&& !monthSet
			&& daySet
			&& hourSet
			&& minuteSet
			&& secondSet) {
			return DatatypeConstants.DURATION_DAYTIME;
		}

		// DURATION_YEARMONTH
		if (yearSet
			&& monthSet
			&& !daySet
			&& !hourSet
			&& !minuteSet
			&& !secondSet) {
			return DatatypeConstants.DURATION_YEARMONTH;
		}

		// nothing matches
		throw new IllegalStateException(
				"javax.xml.datatype.Duration#getXMLSchemaType():"
				+ " this Duration does not match one of the XML Schema date/time datatypes:"
				+ " year set = " + yearSet
				+ " month set = " + monthSet
				+ " day set = " + daySet
				+ " hour set = " + hourSet
				+ " minute set = " + minuteSet
				+ " second set = " + secondSet
		);
!!!5391259.java!!!	getYears() : int
		return getField(DatatypeConstants.YEARS).intValue();
!!!5391387.java!!!	getMonths() : int
		return getField(DatatypeConstants.MONTHS).intValue();
!!!5391515.java!!!	getDays() : int
		return getField(DatatypeConstants.DAYS).intValue();
!!!5391643.java!!!	getHours() : int
		return getField(DatatypeConstants.HOURS).intValue();
!!!5391771.java!!!	getMinutes() : int
		return getField(DatatypeConstants.MINUTES).intValue();
!!!5391899.java!!!	getSeconds() : int
		return getField(DatatypeConstants.SECONDS).intValue();
!!!5392027.java!!!	getTimeInMillis(in startInstant : Calendar) : long
		Calendar cal = (Calendar) startInstant.clone();
		addTo(cal);
		return getCalendarTimeInMillis(cal)
					- getCalendarTimeInMillis(startInstant);
!!!5392155.java!!!	getTimeInMillis(in startInstant : Date) : long
		Calendar cal = new GregorianCalendar();
		cal.setTime(startInstant);
		this.addTo(cal);
		return getCalendarTimeInMillis(cal) - startInstant.getTime();
!!!5392795.java!!!	addTo(inout date : Date) : void
		
		// check data parameter
		if (date == null) {
			throw new NullPointerException(
				"Cannot call "
				+ this.getClass().getName()
				+ "#addTo(Date date) with date == null."
			);
		}
		
		Calendar cal = new GregorianCalendar();
		cal.setTime(date); 
		this.addTo(cal);
		date.setTime(getCalendarTimeInMillis(cal));
!!!5392923.java!!!	subtract(in rhs : Duration) : Duration
		return add(rhs.negate());
!!!5393051.java!!!	multiply(in factor : int) : Duration
		return multiply(new BigDecimal(String.valueOf(factor)));
!!!5393691.java!!!	isLongerThan(in duration : Duration) : boolean
		return compare(duration) == DatatypeConstants.GREATER;
!!!5393819.java!!!	isShorterThan(in duration : Duration) : boolean
		return compare(duration) == DatatypeConstants.LESSER;
!!!5393947.java!!!	equals(in duration : Object) : boolean
		if (duration == null) {
			throw new NullPointerException();
		}

		if (!(duration instanceof Duration)) {
			return false;
		}

		return compare((Duration) duration) == DatatypeConstants.EQUAL;
!!!5394203.java!!!	toString() : String
		
        StringBuffer buf = new StringBuffer();
        
        if (getSign() < 0) {
            buf.append('-');
        }
        buf.append('P');
        
        BigInteger years = (BigInteger) getField(DatatypeConstants.YEARS);
        if (years != null) {
            buf.append(years + "Y");
        }
        
        BigInteger months = (BigInteger) getField(DatatypeConstants.MONTHS);
        if (months != null) {
            buf.append(months + "M");
        }
        
        BigInteger days = (BigInteger) getField(DatatypeConstants.DAYS);
        if (days != null) {
            buf.append(days + "D");
        }

        BigInteger hours = (BigInteger) getField(DatatypeConstants.HOURS);
        BigInteger minutes = (BigInteger) getField(DatatypeConstants.MINUTES);
        BigDecimal seconds = (BigDecimal) getField(DatatypeConstants.SECONDS);
        if (hours != null || minutes != null || seconds != null) {
            buf.append('T');
            if (hours != null) {
                buf.append(hours + "H");
            }
            if (minutes != null) {
                buf.append(minutes + "M");
            }
            if (seconds != null) {
                buf.append(toString(seconds) + "S");
            }
        }
        
        return buf.toString();
!!!5394331.java!!!	toString(inout bd : BigDecimal) : String
        String intString = bd.unscaledValue().toString();
        int scale = bd.scale();

        if (scale == 0) {
            return intString;
        }

        /* Insert decimal point */
        StringBuffer buf;
        int insertionPoint = intString.length() - scale;
        if (insertionPoint == 0) { /* Point goes right before intVal */
            return "0." + intString;
        } else if (insertionPoint > 0) { /* Point goes inside intVal */
            buf = new StringBuffer(intString);
            buf.insert(insertionPoint, '.');
        } else { /* We must insert zeros between point and intVal */
            buf = new StringBuffer(3 - insertionPoint + intString.length());
            buf.append("0.");
            for (int i = 0; i < -insertionPoint; i++) {
                buf.append('0');
            }
            buf.append(intString);
        }
        return buf.toString();
!!!5394459.java!!!	getCalendarTimeInMillis(in cal : Calendar) : long
        return cal.getTime().getTime();
