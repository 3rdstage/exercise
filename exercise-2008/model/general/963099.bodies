class Identity
!!!7571867.java!!!	Identity()
	this("restoring...");
!!!7571995.java!!!	Identity(in name : String, inout scope : IdentityScope)
	this(name);
	if (scope != null) {
	    scope.addIdentity(this);
	}
	this.scope = scope;
!!!7572123.java!!!	Identity(in name : String)
	this.name = name;
!!!7572251.java!!!	getName() : String
	return name;
!!!7572379.java!!!	getScope() : IdentityScope
	return scope;
!!!7572507.java!!!	getPublicKey() : PublicKey
	return publicKey;
!!!7572635.java!!!	setPublicKey(inout key : PublicKey) : void

	check("setIdentityPublicKey");
	this.publicKey = key;
	certificates = new Vector();
!!!7572763.java!!!	setInfo(in info : String) : void
	check("setIdentityInfo");
	this.info = info;
!!!7572891.java!!!	getInfo() : String
	return info;
!!!7573019.java!!!	addCertificate(inout certificate : Certificate) : void

	check("addIdentityCertificate");

	if (certificates == null) {
	    certificates = new Vector();
	}
	if (publicKey != null) {
	    if (!keyEquals(publicKey, certificate.getPublicKey())) {
		throw new KeyManagementException(
		    "public key different from cert public key");
	    }
	} else {
	    publicKey = certificate.getPublicKey();
	}
	certificates.addElement(certificate);
!!!7573147.java!!!	keyEquals(inout aKey : Key, inout anotherKey : Key) : boolean
        String aKeyFormat = aKey.getFormat();
        String anotherKeyFormat = anotherKey.getFormat();
	if ((aKeyFormat == null) ^ (anotherKeyFormat == null))
	    return false;
	if (aKeyFormat != null && anotherKeyFormat != null)
	    if (!aKeyFormat.equalsIgnoreCase(anotherKeyFormat))
		return false;
	return java.util.Arrays.equals(aKey.getEncoded(),
				     anotherKey.getEncoded());
!!!7573275.java!!!	removeCertificate(inout certificate : Certificate) : void
	check("removeIdentityCertificate");
	if (certificates != null) {
	    certificates.removeElement(certificate);
	}
!!!7573403.java!!!	certificates() : Certificate
	if (certificates == null) {
	    return new Certificate[0];
	}
	int len = certificates.size();
	Certificate[] certs = new Certificate[len];
	certificates.copyInto(certs);
	return certs;
!!!7573531.java!!!	equals(inout identity : Object) : boolean

	if (identity == this) {
	    return true;
	}

	if (identity instanceof Identity) {
	    Identity i = (Identity)identity;
	    if (this.fullName().equals(i.fullName())) {
		return true;
	    } else {
		return identityEquals(i);	    
	    }
	}
	return false;
!!!7573659.java!!!	identityEquals(inout identity : Identity) : boolean
	if (!name.equalsIgnoreCase(identity.name))
	    return false;
	
	if ((publicKey == null) ^ (identity.publicKey == null))
	    return false;

	if (publicKey != null && identity.publicKey != null)
	    if (!publicKey.equals(identity.publicKey))
		return false;

	return true;

!!!7573787.java!!!	fullName() : String
	String parsable = name;
	if (scope != null) {
	    parsable += "." + scope.getName();
	}
	return parsable;
!!!7573915.java!!!	toString() : String
	check("printIdentity");
	String printable = name;
	if (scope != null) {
	    printable += "[" + scope.getName() + "]";
	}
	return printable;
!!!7574043.java!!!	toString(inout detailed : boolean) : String
	String out = toString();
	if (detailed) {
	    out += "\n";
	    out += printKeys();
	    out += "\n" + printCertificates();
	    if (info != null) {
		out += "\n\t" + info;
	    } else {
		out += "\n\tno additional information available.";
	    }
	}	  
	return out;
!!!7574171.java!!!	printKeys() : String
	String key = "";
	if (publicKey != null) {
	    key = "\tpublic key initialized";
	} else {
	    key = "\tno public key";
	}
	return key;
!!!7574299.java!!!	printCertificates() : String
	String out = "";
	if (certificates == null) {
	    return "\tno certificates";
	} else {
	    out += "\tcertificates: \n";
	    Enumeration e = certificates.elements();
	    int i = 1;
	    while (e.hasMoreElements()) {
		Certificate cert = (Certificate)e.nextElement();
		out += "\tcertificate " + i++ +
		    "\tfor  : " + cert.getPrincipal() + "\n";
		out += "\t\t\tfrom : " + 
		    cert.getGuarantor() + "\n";
	    }
	}
	return out;
!!!7574427.java!!!	hashCode() : int
	return name.hashCode();
!!!7574555.java!!!	check(in directive : String) : void
	SecurityManager security = System.getSecurityManager();
	if (security != null) {
	    security.checkSecurityAccess(directive);
	}
