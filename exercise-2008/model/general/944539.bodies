class StringCharBuffer
!!!7471899.java!!!	StringCharBuffer(inout s : CharSequence, in start : int, in end : int)
 // package-private
	super(-1, start, end, s.length());
	int n = s.length();
	if ((start < 0) || (start > n) || (end < start) || (end > n))
	    throw new IndexOutOfBoundsException();
	str = s;
!!!7472027.java!!!	slice() : CharBuffer
	return new StringCharBuffer(str, position(), limit());
!!!7472155.java!!!	StringCharBuffer(inout s : CharSequence, in mark : int, in pos : int, in limit : int, in cap : int)
	super(mark, pos, limit, cap);
	str = s;
!!!7472283.java!!!	duplicate() : CharBuffer
	return new StringCharBuffer(str, markValue(),
				    position(), limit(), capacity());
!!!7472411.java!!!	asReadOnlyBuffer() : CharBuffer
	return duplicate();
!!!7472539.java!!!	get() : char
	return str.charAt(nextGetIndex());
!!!7472667.java!!!	get(in index : int) : char
	return str.charAt(checkIndex(index));
!!!7472795.java!!!	put(in c : char) : CharBuffer
	throw new ReadOnlyBufferException();
!!!7472923.java!!!	put(in index : int, in c : char) : CharBuffer
	throw new ReadOnlyBufferException();
!!!7473051.java!!!	compact() : CharBuffer
	throw new ReadOnlyBufferException();
!!!7473179.java!!!	isReadOnly() : boolean
	return true;
!!!7473307.java!!!	toString(in start : int, in end : int) : String
	return str.toString().substring(start, end);
!!!7473435.java!!!	subSequence(in start : int, in end : int) : CharSequence
	try {
	    int pos = position();
	    return new StringCharBuffer(str,
					pos + checkIndex(start, pos),
					pos + checkIndex(end, pos));
	} catch (IllegalArgumentException x) {
	    throw new IndexOutOfBoundsException();
	}
!!!7473563.java!!!	isDirect() : boolean
	return false;
!!!7473691.java!!!	order() : ByteOrder
	return ByteOrder.nativeOrder();
