class RemoteMBeanServerConnection
!!!8425627.java!!!	RemoteMBeanServerConnection()
	    this(null);
!!!8425755.java!!!	RemoteMBeanServerConnection(inout delegationSubject : Subject)
	    this.delegationSubject = delegationSubject;
!!!8425883.java!!!	createMBean(in className : String, inout name : ObjectName) : ObjectInstance
	    if (logger.debugOn()) 
		logger.debug("createMBean(String,ObjectName)",
			     "className=" + className + ", name=" +
			     name);

            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.createMBean(className,
					     name,
					     delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.createMBean(className,
					     name,
					     delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8426011.java!!!	createMBean(in className : String, inout name : ObjectName, inout loaderName : ObjectName) : ObjectInstance

	    if (logger.debugOn())
		logger.debug("createMBean(String,ObjectName,ObjectName)",
		      "className=" + className + ", name="
		      + name + ", loaderName="
		      + loaderName + ")");

            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.createMBean(className,
					     name,
					     loaderName,
					     delegationSubject);

	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.createMBean(className,
					     name,
					     loaderName,
					     delegationSubject);

            } finally {
                popDefaultClassLoader(old);
            }
!!!8426139.java!!!	createMBean(in className : String, inout name : ObjectName, inout params : Object, in signature : String) : ObjectInstance
	    if (logger.debugOn())
	       logger.debug("createMBean(String,ObjectName,Object[],String[])",
		      "className=" + className + ", name="
		      + name + ", params="
		      + objects(params) + ", signature="
		      + strings(signature));

            final MarshalledObject sParams = new MarshalledObject(params);
            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.createMBean(className,
					     name,
					     sParams,
					     signature,
					     delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.createMBean(className,
					     name,
					     sParams,
					     signature,
					     delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8426267.java!!!	createMBean(in className : String, inout name : ObjectName, inout loaderName : ObjectName, inout params : Object, in signature : String) : ObjectInstance
	    if (logger.debugOn()) logger.debug(
		"createMBean(String,ObjectName,ObjectName,Object[],String[])",
		"className=" + className + ", name=" + name + ", loaderName=" 
		+ loaderName + ", params=" + objects(params)
		+ ", signature=" + strings(signature));

            final MarshalledObject sParams = new MarshalledObject(params);
            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.createMBean(className,
					     name,
					     loaderName,
					     sParams,
					     signature,
					     delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.createMBean(className,
					     name,
					     loaderName,
					     sParams,
					     signature,
					     delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8426395.java!!!	unregisterMBean(inout name : ObjectName) : void
	    if (logger.debugOn()) 
		logger.debug("unregisterMBean", "name=" + name);

            final ClassLoader old = pushDefaultClassLoader();
            try {
                connection.unregisterMBean(name, delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                connection.unregisterMBean(name, delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8426523.java!!!	getObjectInstance(inout name : ObjectName) : ObjectInstance
	    if (logger.debugOn()) 
		logger.debug("getObjectInstance", "name=" + name);

            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.getObjectInstance(name, delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.getObjectInstance(name, delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8426651.java!!!	queryMBeans(inout name : ObjectName, inout query : QueryExp) : Set
	    if (logger.debugOn()) logger.debug("queryMBeans",
				   "name=" + name + ", query=" + query);

            final MarshalledObject sQuery = new MarshalledObject(query);
            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.queryMBeans(name, sQuery, delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.queryMBeans(name, sQuery, delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8426779.java!!!	queryNames(inout name : ObjectName, inout query : QueryExp) : Set
	    if (logger.debugOn()) logger.debug("queryNames",
				   "name=" + name + ", query=" + query);

            final MarshalledObject sQuery = new MarshalledObject(query);
            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.queryNames(name, sQuery, delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.queryNames(name, sQuery, delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8426907.java!!!	isRegistered(inout name : ObjectName) : boolean
	    if (logger.debugOn()) 
		logger.debug("isRegistered", "name=" + name);

            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.isRegistered(name, delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.isRegistered(name, delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8427035.java!!!	getMBeanCount() : Integer
	    if (logger.debugOn()) logger.debug("getMBeanCount", "");

            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.getMBeanCount(delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.getMBeanCount(delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8427163.java!!!	getAttribute(inout name : ObjectName, in attribute : String) : Object
	    if (logger.debugOn()) logger.debug("getAttribute",
				   "name=" + name + ", attribute="
				   + attribute);

            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.getAttribute(name,
					      attribute,
					      delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.getAttribute(name,
					      attribute,
					      delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8427291.java!!!	getAttributes(inout name : ObjectName, in attributes : String) : AttributeList
	    if (logger.debugOn()) logger.debug("getAttributes",
				   "name=" + name + ", attributes="
				   + strings(attributes));

            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.getAttributes(name,
					       attributes,
					       delegationSubject);

	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.getAttributes(name,
					       attributes,
					       delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8427419.java!!!	setAttribute(inout name : ObjectName, inout attribute : Attribute) : void

	    if (logger.debugOn()) logger.debug("setAttribute",
				   "name=" + name + ", attribute="
				   + attribute);

            final MarshalledObject sAttribute =
		new MarshalledObject(attribute);
            final ClassLoader old = pushDefaultClassLoader();
            try {
                connection.setAttribute(name, sAttribute, delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                connection.setAttribute(name, sAttribute, delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8427547.java!!!	setAttributes(inout name : ObjectName, inout attributes : AttributeList) : AttributeList

	    if (logger.debugOn()) logger.debug("setAttributes",
				   "name=" + name + ", attributes="
				   + attributes);

            final MarshalledObject sAttributes =
                new MarshalledObject(attributes);
            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.setAttributes(name,
					       sAttributes,
					       delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.setAttributes(name,
					       sAttributes,
					       delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8427675.java!!!	invoke(inout name : ObjectName, in operationName : String, inout params : Object, in signature : String) : Object

	    if (logger.debugOn()) logger.debug("invoke",
				   "name=" + name
				   + ", operationName=" + operationName
				   + ", params=" + objects(params)
				   + ", signature=" + strings(signature));

            final MarshalledObject sParams = new MarshalledObject(params);
            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.invoke(name,
					operationName,
					sParams,
                                        signature,
					delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.invoke(name,
					operationName,
					sParams,
                                        signature,
					delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8427803.java!!!	getDefaultDomain() : String
	    if (logger.debugOn()) logger.debug("getDefaultDomain", "");

            final ClassLoader old = pushDefaultClassLoader();
            try {
		return connection.getDefaultDomain(delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

		return connection.getDefaultDomain(delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8427931.java!!!	getDomains() : String
	    if (logger.debugOn()) logger.debug("getDomains", "");

            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.getDomains(delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.getDomains(delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8428059.java!!!	getMBeanInfo(inout name : ObjectName) : MBeanInfo

	    if (logger.debugOn()) logger.debug("getMBeanInfo", "name=" + name);
            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.getMBeanInfo(name, delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.getMBeanInfo(name, delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8428187.java!!!	isInstanceOf(inout name : ObjectName, in className : String) : boolean
	    if (logger.debugOn()) 
		logger.debug("isInstanceOf", "name=" + name + 
			     ", className=" + className);

            final ClassLoader old = pushDefaultClassLoader();
            try {
                return connection.isInstanceOf(name,
					      className,
					      delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                return connection.isInstanceOf(name,
					      className,
					      delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8428315.java!!!	addNotificationListener(inout name : ObjectName, inout listener : ObjectName, inout filter : NotificationFilter, inout handback : Object) : void

	    if (logger.debugOn()) 
		logger.debug("addNotificationListener" +
		       "(ObjectName,ObjectName,NotificationFilter,Object)",
		       "name=" + name + ", listener=" + listener 
		       + ", filter=" + filter + ", handback=" + handback);

            final MarshalledObject sFilter = new MarshalledObject(filter);
            final MarshalledObject sHandback = new MarshalledObject(handback);
            final ClassLoader old = pushDefaultClassLoader();
            try {
                connection.addNotificationListener(name,
						  listener,
						  sFilter,
						  sHandback,
						  delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                connection.addNotificationListener(name,
						  listener,
						  sFilter,
						  sHandback,
						  delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8428443.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : ObjectName) : void

	    if (logger.debugOn()) logger.debug("removeNotificationListener" +
				   "(ObjectName,ObjectName)",
				   "name=" + name
				   + ", listener=" + listener);

            final ClassLoader old = pushDefaultClassLoader();
            try {
                connection.removeNotificationListener(name,
						     listener,
						     delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                connection.removeNotificationListener(name,
						     listener,
						     delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8428571.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : ObjectName, inout filter : NotificationFilter, inout handback : Object) : void
	    if (logger.debugOn())
		logger.debug("removeNotificationListener" +
		      "(ObjectName,ObjectName,NotificationFilter,Object)",
		      "name=" + name
		      + ", listener=" + listener
		      + ", filter=" + filter
		      + ", handback=" + handback);

            final MarshalledObject sFilter = new MarshalledObject(filter);
            final MarshalledObject sHandback = new MarshalledObject(handback);
            final ClassLoader old = pushDefaultClassLoader();
            try {
                connection.removeNotificationListener(name,
						     listener,
                                                     sFilter,
						     sHandback,
						     delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                connection.removeNotificationListener(name,
						     listener,
                                                     sFilter,
						     sHandback,
						     delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }
!!!8428699.java!!!	addNotificationListener(inout name : ObjectName, inout listener : NotificationListener, inout filter : NotificationFilter, inout handback : Object) : void

	    final boolean debug = logger.debugOn();
	    if (debug)
		logger.debug("addNotificationListener" +
			     "(ObjectName,NotificationListener,"+
			     "NotificationFilter,Object)",
			     "name=" + name
			     + ", listener=" + listener
			     + ", filter=" + filter
			     + ", handback=" + handback);

	    final Integer listenerID = 
		addListenerWithSubject(name, new MarshalledObject(filter), 
				       delegationSubject,true);
	    rmiNotifClient.addNotificationListener(listenerID, name, listener,
						   filter, handback, 
						   delegationSubject);
!!!8428827.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : NotificationListener) : void
	    final boolean debug = logger.debugOn();

	    if (debug) logger.debug("removeNotificationListener"+
			     "(ObjectName,NotificationListener)",
			     "name=" + name
			     + ", listener=" + listener);

            final Integer[] ret =
                rmiNotifClient.removeNotificationListener(name, listener);

	    if (debug) logger.debug("removeNotificationListener",
			     "listenerIDs=" + objects(ret));

            final ClassLoader old = pushDefaultClassLoader();

            try {
                connection.removeNotificationListeners(name,
						       ret,
						       delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                connection.removeNotificationListeners(name,
						       ret,
						       delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }

!!!8428955.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : NotificationListener, inout filter : NotificationFilter, inout handback : Object) : void
	    final boolean debug = logger.debugOn();

	    if (debug)
		logger.debug("removeNotificationListener"+
		      "(ObjectName,NotificationListener,"+
		      "NotificationFilter,Object)",
		      "name=" + name
		      + ", listener=" + listener
		      + ", filter=" + filter
		      + ", handback=" + handback);

            final Integer ret =
                rmiNotifClient.removeNotificationListener(name, listener,
                                                         filter, handback);

	    if (debug) logger.debug("removeNotificationListener",
			     "listenerID=" + ret);

            final ClassLoader old = pushDefaultClassLoader();
            try {
                connection.removeNotificationListeners(name,
						       new Integer[] {ret},
						       delegationSubject);
	    } catch (IOException ioe) {
		communicatorAdmin.gotIOException(ioe);

                connection.removeNotificationListeners(name,
						       new Integer[] {ret},
						       delegationSubject);
            } finally {
                popDefaultClassLoader(old);
            }

