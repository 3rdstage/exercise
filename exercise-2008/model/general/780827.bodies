class DOMASBuilderImpl
!!!5450907.java!!!	DOMASBuilderImpl()
        super(new XMLGrammarCachingConfiguration());
!!!5451035.java!!!	DOMASBuilderImpl(inout config : XMLGrammarCachingConfiguration)
        super(config);
!!!5451163.java!!!	DOMASBuilderImpl(inout symbolTable : SymbolTable)
        super(new XMLGrammarCachingConfiguration(symbolTable));
!!!5451291.java!!!	DOMASBuilderImpl(inout symbolTable : SymbolTable, inout grammarPool : XMLGrammarPool)
        super(new XMLGrammarCachingConfiguration(symbolTable, grammarPool));
!!!5451419.java!!!	getAbstractSchema() : ASModel
        return fAbstractSchema;
!!!5451547.java!!!	setAbstractSchema(inout abstractSchema : ASModel) : void

        // since the ASModel associated with this object is an attribute
        // according to the DOM IDL, we must obliterate anything
        // that was set before, rather than adding to it.
        // REVISIT:  so shouldn't we attempt to clear the
        // grammarPool before adding stuff to it?  - NG
        fAbstractSchema = (ASModelImpl)abstractSchema;

        // make sure the GrammarPool is properly initialized.
        XMLGrammarPool grammarPool = (XMLGrammarPool)fConfiguration.getProperty(StandardParserConfiguration.XMLGRAMMAR_POOL);
        // if there is no grammar pool, create one
        // REVISIT: ASBuilder should always create one.
        if (grammarPool == null) {
            // something's not right in this situation...
            grammarPool = new XMLGrammarPoolImpl();
            fConfiguration.setProperty(StandardParserConfiguration.XMLGRAMMAR_POOL,
                                       grammarPool);
        }
        if (fAbstractSchema != null) {
            initGrammarPool(fAbstractSchema, grammarPool);
        }
!!!5451675.java!!!	parseASURI(in uri : String) : ASModel
        XMLInputSource source = new XMLInputSource(null, uri, null);
        return parseASInputSource(source);
!!!5451803.java!!!	parseASInputSource(inout is : LSInput) : ASModel
                                      
        // need to wrap the LSInput with an XMLInputSource
        XMLInputSource xis = this.dom2xmlInputSource(is);
        try {
            return parseASInputSource(xis);
        }
        catch (XNIException e) {
            Exception ex = e.getException();
            throw ex;
        }
!!!5451931.java!!!	parseASInputSource(inout is : XMLInputSource) : ASModel
                                      
        if (fGrammarBucket == null) {
            fGrammarBucket = new XSGrammarBucket();
        }

        initGrammarBucket();

        // actually do the parse:
        // save some casting
        XMLGrammarCachingConfiguration gramConfig = (XMLGrammarCachingConfiguration)fConfiguration;
        // ensure grammarPool doesn't absorb grammars while it's parsing
        gramConfig.lockGrammarPool();
        SchemaGrammar grammar = gramConfig.parseXMLSchema(is);
        gramConfig.unlockGrammarPool();

        ASModelImpl newAsModel = null;
        if (grammar != null) {
            newAsModel = new ASModelImpl();
            fGrammarBucket.putGrammar (grammar, true);
            addGrammars(newAsModel, fGrammarBucket);
        }
        return newAsModel;
!!!5452059.java!!!	initGrammarBucket() : void
        fGrammarBucket.reset();
        if (fAbstractSchema != null)
            initGrammarBucketRecurse(fAbstractSchema);
!!!5452187.java!!!	initGrammarBucketRecurse(inout currModel : ASModelImpl) : void
        if(currModel.getGrammar() != null) {
            fGrammarBucket.putGrammar(currModel.getGrammar());
        }
        for(int i = 0; i < currModel.getInternalASModels().size(); i++) {
            ASModelImpl nextModel = (ASModelImpl)(currModel.getInternalASModels().elementAt(i));
            initGrammarBucketRecurse(nextModel);
        }
!!!5452315.java!!!	addGrammars(inout model : ASModelImpl, inout grammarBucket : XSGrammarBucket) : void
        SchemaGrammar [] grammarList = grammarBucket.getGrammars();
        for(int i=0; i<grammarList.length; i++) {
            ASModelImpl newModel = new ASModelImpl();
            newModel.setGrammar(grammarList[i]);
            model.addASModel(newModel);
        }
!!!5452443.java!!!	initGrammarPool(inout currModel : ASModelImpl, inout grammarPool : XMLGrammarPool) : void
        // put all the grammars in fAbstractSchema into the grammar pool.
        // grammarPool must never be null!
        Grammar[] grammars = new Grammar[1];
        if ((grammars[0] = (Grammar)currModel.getGrammar()) != null) {
            grammarPool.cacheGrammars(grammars[0].getGrammarDescription().getGrammarType(), grammars);
        }
        Vector modelStore = currModel.getInternalASModels();
        for (int i = 0; i < modelStore.size(); i++) {
            initGrammarPool((ASModelImpl)modelStore.elementAt(i), grammarPool);
        }
