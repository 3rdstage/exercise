class Byte
!!!6936091.java!!!	toString(in b : byte) : String
	return Integer.toString((int)b, 10);
!!!6936347.java!!!	valueOf(in b : byte) : Byte
	final int offset = 128;
	return ByteCache.cache[(int)b + offset];
!!!6936475.java!!!	parseByte(in s : String) : byte
	return parseByte(s, 10);
!!!6936603.java!!!	parseByte(in s : String, in radix : int) : byte
	int i = Integer.parseInt(s, radix);
	if (i < MIN_VALUE || i > MAX_VALUE)
	    throw new NumberFormatException(
                "Value out of range. Value:\"" + s + "\" Radix:" + radix);
	return (byte)i;
!!!6936731.java!!!	valueOf(in s : String, in radix : int) : Byte
	return new Byte(parseByte(s, radix));
!!!6936859.java!!!	valueOf(in s : String) : Byte
	return valueOf(s, 10);
!!!6936987.java!!!	decode(in nm : String) : Byte
        int radix = 10;
        int index = 0;
        boolean negative = false;
        Byte result;

        // Handle minus sign, if present
        if (nm.startsWith("-")) {
            negative = true;
            index++;
        }

	if (nm.startsWith("0x", index) || nm.startsWith("0X", index)) {
            index += 2;
            radix = 16;
	} else if (nm.startsWith("#", index)) {
	    index++;
            radix = 16;
	} else if (nm.startsWith("0", index) && nm.length() > 1 + index) {
	    index++;
            radix = 8;
	}

        if (nm.startsWith("-", index))
            throw new NumberFormatException("Negative sign in wrong position");

        try {
            result = Byte.valueOf(nm.substring(index), radix);
            result = negative ? new Byte((byte)-result.byteValue()) : result;
        } catch (NumberFormatException e) {
            // If number is Byte.MIN_VALUE, we'll end up here. The next line
            // handles this case, and causes any genuine format error to be
            // rethrown.
            String constant = negative ? new String("-" + nm.substring(index))
                                       : nm.substring(index);
            result = Byte.valueOf(constant, radix);
        }
        return result;
!!!6937115.java!!!	Byte(in value : byte)
	this.value = value;
!!!6937243.java!!!	Byte(in s : String)
	this.value = parseByte(s, 10);
!!!6937371.java!!!	byteValue() : byte
	return value;
!!!6937499.java!!!	shortValue() : short
	return (short)value;
!!!6937627.java!!!	intValue() : int
	return (int)value;
!!!6937755.java!!!	longValue() : long
	return (long)value;
!!!6937883.java!!!	floatValue() : float
	return (float)value;
!!!6938011.java!!!	doubleValue() : double
	return (double)value;
!!!6938139.java!!!	toString() : String
	return String.valueOf((int)value);
!!!6938267.java!!!	hashCode() : int
	return (int)value;
!!!6938395.java!!!	equals(inout obj : Object) : boolean
	if (obj instanceof Byte) {
	    return value == ((Byte)obj).byteValue();
	}
	return false;
!!!6938523.java!!!	compareTo(inout anotherByte : Byte) : int
	return this.value - anotherByte.value;
