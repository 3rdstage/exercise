class JPEGImageWriteParam
!!!8202267.java!!!	JPEGImageWriteParam(inout locale : Locale)
        super(locale);
        this.canWriteProgressive = true;
        this.progressiveMode = MODE_DISABLED;
        this.canWriteCompressed = true;
        this.compressionTypes = compressionNames;
        this.compressionType = compressionTypes[0];
        this.compressionQuality = JPEG.DEFAULT_QUALITY;
!!!8202395.java!!!	unsetCompression() : void
        if (getCompressionMode() != MODE_EXPLICIT) {
            throw new IllegalStateException
                ("Compression mode not MODE_EXPLICIT!");
        }
        this.compressionQuality = JPEG.DEFAULT_QUALITY;
!!!8202523.java!!!	isCompressionLossless() : boolean
        if (getCompressionMode() != MODE_EXPLICIT) {
            throw new IllegalStateException
                ("Compression mode not MODE_EXPLICIT!");
        }
        return false;
!!!8202651.java!!!	getCompressionQualityDescriptions() : String
        if (getCompressionMode() != MODE_EXPLICIT) {
            throw new IllegalStateException
                ("Compression mode not MODE_EXPLICIT!");
        }
        if ((getCompressionTypes() != null) &&
            (getCompressionType() == null)) {
            throw new IllegalStateException("No compression type set!");
        }
        return (String[])qualityDescs.clone();
!!!8202779.java!!!	getCompressionQualityValues() : float
        if (getCompressionMode() != MODE_EXPLICIT) {
            throw new IllegalStateException
                ("Compression mode not MODE_EXPLICIT!");
        }
        if ((getCompressionTypes() != null) &&
            (getCompressionType() == null)) {
            throw new IllegalStateException("No compression type set!");
        }
        return (float[])qualityVals.clone();
!!!8202907.java!!!	areTablesSet() : boolean
        return (qTables != null);
!!!8203035.java!!!	setEncodeTables(inout qTables : JPEGQTable, inout DCHuffmanTables : JPEGHuffmanTable, inout ACHuffmanTables : JPEGHuffmanTable) : void
        if ((qTables == null) ||
            (DCHuffmanTables == null) ||
            (ACHuffmanTables == null) ||
            (qTables.length > 4) ||
            (DCHuffmanTables.length > 4) ||
            (ACHuffmanTables.length > 4) ||
            (DCHuffmanTables.length != ACHuffmanTables.length)) {
                throw new IllegalArgumentException("Invalid JPEG table arrays");
        }
        this.qTables = (JPEGQTable[])qTables.clone();
        this.DCHuffmanTables = (JPEGHuffmanTable[])DCHuffmanTables.clone();
        this.ACHuffmanTables = (JPEGHuffmanTable[])ACHuffmanTables.clone();
!!!8203163.java!!!	unsetEncodeTables() : void
        this.qTables = null;
        this.DCHuffmanTables = null;
        this.ACHuffmanTables = null;
!!!8203291.java!!!	getQTables() : JPEGQTable
        return (qTables != null) ? (JPEGQTable[])qTables.clone() : null;
!!!8203419.java!!!	getDCHuffmanTables() : JPEGHuffmanTable
        return (DCHuffmanTables != null) 
            ? (JPEGHuffmanTable[])DCHuffmanTables.clone() 
            : null;
!!!8203547.java!!!	getACHuffmanTables() : JPEGHuffmanTable
        return (ACHuffmanTables != null) 
            ? (JPEGHuffmanTable[])ACHuffmanTables.clone() 
            : null;
!!!8203675.java!!!	setOptimizeHuffmanTables(inout optimize : boolean) : void
        optimizeHuffman = optimize;
!!!8203803.java!!!	getOptimizeHuffmanTables() : boolean
        return optimizeHuffman;
