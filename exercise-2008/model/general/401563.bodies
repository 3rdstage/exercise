class BasicButtonUI
!!!2350747.java!!!	createUI(inout c : JComponent) : ComponentUI
        return buttonUI;
!!!2350875.java!!!	getPropertyPrefix() : String
        return propertyPrefix;
!!!2351003.java!!!	installUI(inout c : JComponent) : void
        installDefaults((AbstractButton) c);
        installListeners((AbstractButton) c);
        installKeyboardActions((AbstractButton) c);
	BasicHTML.updateRenderer(c, ((AbstractButton) c).getText());
!!!2351131.java!!!	installDefaults(inout b : AbstractButton) : void
        // load shared instance defaults
        String pp = getPropertyPrefix();

        defaultTextShiftOffset = UIManager.getInt(pp + "textShiftOffset");

        // set the following defaults on the button
        if (b.isContentAreaFilled()) {
            LookAndFeel.installProperty(b, "opaque", Boolean.TRUE);
        } else {
            LookAndFeel.installProperty(b, "opaque", Boolean.FALSE);
        }

        if(b.getMargin() == null || (b.getMargin() instanceof UIResource)) {
            b.setMargin(UIManager.getInsets(pp + "margin"));
        }

	LookAndFeel.installColorsAndFont(b, pp + "background",
                                         pp + "foreground", pp + "font");
        LookAndFeel.installBorder(b, pp + "border");

        Object rollover = UIManager.get(pp + "rollover");
        if (rollover != null) {
            LookAndFeel.installProperty(b, "rolloverEnabled", rollover);
        }
!!!2351259.java!!!	installListeners(inout b : AbstractButton) : void
        BasicButtonListener listener = createButtonListener(b);
        if(listener != null) {
            b.addMouseListener(listener);
            b.addMouseMotionListener(listener);
            b.addFocusListener(listener);
            b.addPropertyChangeListener(listener);
            b.addChangeListener(listener);
        }
!!!2351387.java!!!	installKeyboardActions(inout b : AbstractButton) : void
        BasicButtonListener listener = getButtonListener(b);

        if(listener != null) {
            listener.installKeyboardActions(b);
        }
!!!2351515.java!!!	uninstallUI(inout c : JComponent) : void
        uninstallKeyboardActions((AbstractButton) c);
        uninstallListeners((AbstractButton) c);
        uninstallDefaults((AbstractButton) c);
	BasicHTML.updateRenderer(c, "");
!!!2351643.java!!!	uninstallKeyboardActions(inout b : AbstractButton) : void
        BasicButtonListener listener = getButtonListener(b);
        if(listener != null) {
            listener.uninstallKeyboardActions(b);
        }
!!!2351771.java!!!	uninstallListeners(inout b : AbstractButton) : void
        BasicButtonListener listener = getButtonListener(b);
        if(listener != null) {
            b.removeMouseListener(listener);
            b.removeMouseListener(listener);
            b.removeMouseMotionListener(listener);
            b.removeFocusListener(listener);
            b.removeChangeListener(listener);
            b.removePropertyChangeListener(listener);
        }
!!!2351899.java!!!	uninstallDefaults(inout b : AbstractButton) : void
        LookAndFeel.uninstallBorder(b);
!!!2352027.java!!!	createButtonListener(inout b : AbstractButton) : BasicButtonListener
        return new BasicButtonListener(b);
!!!2352155.java!!!	getDefaultTextIconGap(inout b : AbstractButton) : int
        return defaultTextIconGap;
!!!2352283.java!!!	paint(inout g : Graphics, inout c : JComponent) : void
        AbstractButton b = (AbstractButton) c;
        ButtonModel model = b.getModel();

        FontMetrics fm = SwingUtilities2.getFontMetrics(b, g);

        Insets i = c.getInsets();

        viewRect.x = i.left;
        viewRect.y = i.top;
        viewRect.width = b.getWidth() - (i.right + viewRect.x);
        viewRect.height = b.getHeight() - (i.bottom + viewRect.y);

        textRect.x = textRect.y = textRect.width = textRect.height = 0;
        iconRect.x = iconRect.y = iconRect.width = iconRect.height = 0;

        Font f = c.getFont();
        g.setFont(f);

        // layout the text and icon
        String text = SwingUtilities.layoutCompoundLabel(
            c, fm, b.getText(), b.getIcon(), 
            b.getVerticalAlignment(), b.getHorizontalAlignment(),
            b.getVerticalTextPosition(), b.getHorizontalTextPosition(),
            viewRect, iconRect, textRect, 
	    b.getText() == null ? 0 : b.getIconTextGap());

        clearTextShiftOffset();

        // perform UI specific press action, e.g. Windows L&F shifts text
        if (model.isArmed() && model.isPressed()) {
            paintButtonPressed(g,b); 
        }

        // Paint the Icon
        if(b.getIcon() != null) { 
            paintIcon(g,c,iconRect);
        }

        if (text != null && !text.equals("")){
	    View v = (View) c.getClientProperty(BasicHTML.propertyKey);
	    if (v != null) {
		v.paint(g, textRect);
	    } else {
		paintText(g, b, textRect, text);
	    }
        }

        if (b.isFocusPainted() && b.hasFocus()) {
            // paint UI specific focus
            paintFocus(g,b,viewRect,textRect,iconRect);
        }
!!!2352411.java!!!	paintIcon(inout g : Graphics, inout c : JComponent, inout iconRect : Rectangle) : void
            AbstractButton b = (AbstractButton) c;                           
            ButtonModel model = b.getModel();
            Icon icon = b.getIcon();
            Icon tmpIcon = null;

	    if(icon == null) {
	       return;
	    }

            if(!model.isEnabled()) {
		if(model.isSelected()) {
                   tmpIcon = (Icon) b.getDisabledSelectedIcon();
		} else {
                   tmpIcon = (Icon) b.getDisabledIcon();
		}
            } else if(model.isPressed() && model.isArmed()) {
                tmpIcon = (Icon) b.getPressedIcon();
                if(tmpIcon != null) {
                    // revert back to 0 offset
                    clearTextShiftOffset();
                }
            } else if(b.isRolloverEnabled() && model.isRollover()) {
		if(model.isSelected()) {
                   tmpIcon = (Icon) b.getRolloverSelectedIcon();
		} else {
                   tmpIcon = (Icon) b.getRolloverIcon();
		}
            } else if(model.isSelected()) {
                tmpIcon = (Icon) b.getSelectedIcon();
	    }
              
	    if(tmpIcon != null) {
	        icon = tmpIcon;
	    }
               
            if(model.isPressed() && model.isArmed()) {
                icon.paintIcon(c, g, iconRect.x + getTextShiftOffset(),
                        iconRect.y + getTextShiftOffset());
            } else {
                icon.paintIcon(c, g, iconRect.x, iconRect.y);
            }

!!!2352539.java!!!	paintText(inout g : Graphics, inout c : JComponent, inout textRect : Rectangle, in text : String) : void
        AbstractButton b = (AbstractButton) c;                       
        ButtonModel model = b.getModel();
        FontMetrics fm = SwingUtilities2.getFontMetrics(c, g);
        int mnemonicIndex = b.getDisplayedMnemonicIndex();

	/* Draw the Text */
	if(model.isEnabled()) {
	    /*** paint the text normally */
	    g.setColor(b.getForeground());
	    SwingUtilities2.drawStringUnderlineCharAt(c, g,text, mnemonicIndex,
					  textRect.x + getTextShiftOffset(),
					  textRect.y + fm.getAscent() + getTextShiftOffset());
	}
	else {
	    /*** paint the text disabled ***/
	    g.setColor(b.getBackground().brighter());
	    SwingUtilities2.drawStringUnderlineCharAt(c, g,text, mnemonicIndex,
					  textRect.x, textRect.y + fm.getAscent());
	    g.setColor(b.getBackground().darker());
	    SwingUtilities2.drawStringUnderlineCharAt(c, g,text, mnemonicIndex,
					  textRect.x - 1, textRect.y + fm.getAscent() - 1);
	}
!!!2352667.java!!!	paintText(inout g : Graphics, inout b : AbstractButton, inout textRect : Rectangle, in text : String) : void
	paintText(g, (JComponent)b, textRect, text);
!!!2353051.java!!!	clearTextShiftOffset() : void
        this.shiftOffset = 0;
!!!2353179.java!!!	setTextShiftOffset() : void
        this.shiftOffset = defaultTextShiftOffset;
!!!2353307.java!!!	getTextShiftOffset() : int
        return shiftOffset;
!!!2353435.java!!!	getMinimumSize(inout c : JComponent) : Dimension
        Dimension d = getPreferredSize(c);
	View v = (View) c.getClientProperty(BasicHTML.propertyKey);
	if (v != null) {
	    d.width -= v.getPreferredSpan(View.X_AXIS) - v.getMinimumSpan(View.X_AXIS);
	}
	return d;
!!!2353563.java!!!	getPreferredSize(inout c : JComponent) : Dimension
        AbstractButton b = (AbstractButton)c;
        return BasicGraphicsUtils.getPreferredButtonSize(b, b.getIconTextGap());
!!!2353691.java!!!	getMaximumSize(inout c : JComponent) : Dimension
        Dimension d = getPreferredSize(c);
	View v = (View) c.getClientProperty(BasicHTML.propertyKey);
	if (v != null) {
	    d.width += v.getMaximumSpan(View.X_AXIS) - v.getPreferredSpan(View.X_AXIS);
	}
	return d;
!!!2353819.java!!!	getButtonListener(inout b : AbstractButton) : BasicButtonListener
        MouseMotionListener[] listeners = b.getMouseMotionListeners();

        if (listeners != null) {
            for (int counter = 0; counter < listeners.length; counter++) {
                if (listeners[counter] instanceof BasicButtonListener) {
                    return (BasicButtonListener)listeners[counter];
                }
            }
        }
        return null;
