class ORB
!!!1394971.java!!!	getPresentationManager() : PresentationManager
	return globalPM ;
!!!1395099.java!!!	getStubFactoryFactory() : StubFactoryFactory
	boolean useDynamicStubs = globalPM.useDynamicStubs() ;
	return globalPM.getStubFactoryFactory( useDynamicStubs ) ;
!!!1395227.java!!!	ORB()
	// Initialize logging first, since it is needed nearly 
	// everywhere (for example, in TypeCodeImpl).
	wrapperMap = new ConcurrentHashMap();
	wrapper = ORBUtilSystemException.get( this, 
	    CORBALogDomains.RPC_PRESENTATION ) ;
	omgWrapper = OMGSystemException.get( this, 
	    CORBALogDomains.RPC_PRESENTATION ) ;

	typeCodeMap = new HashMap();

	primitiveTypeCodeConstants = new TypeCodeImpl[] {
	    new TypeCodeImpl(this, TCKind._tk_null),	
	    new TypeCodeImpl(this, TCKind._tk_void),
	    new TypeCodeImpl(this, TCKind._tk_short),		
	    new TypeCodeImpl(this, TCKind._tk_long),	
	    new TypeCodeImpl(this, TCKind._tk_ushort),	
	    new TypeCodeImpl(this, TCKind._tk_ulong),	
	    new TypeCodeImpl(this, TCKind._tk_float),	
	    new TypeCodeImpl(this, TCKind._tk_double),	
	    new TypeCodeImpl(this, TCKind._tk_boolean),	
	    new TypeCodeImpl(this, TCKind._tk_char),	
	    new TypeCodeImpl(this, TCKind._tk_octet),
	    new TypeCodeImpl(this, TCKind._tk_any),	
	    new TypeCodeImpl(this, TCKind._tk_TypeCode),	
	    new TypeCodeImpl(this, TCKind._tk_Principal),
	    new TypeCodeImpl(this, TCKind._tk_objref),	
	    null,	// tk_struct    
	    null,	// tk_union     
	    null,	// tk_enum      
	    new TypeCodeImpl(this, TCKind._tk_string),		
	    null,	// tk_sequence  
	    null,	// tk_array     
	    null,	// tk_alias     
	    null,	// tk_except    
	    new TypeCodeImpl(this, TCKind._tk_longlong),	
	    new TypeCodeImpl(this, TCKind._tk_ulonglong),
	    new TypeCodeImpl(this, TCKind._tk_longdouble),
	    new TypeCodeImpl(this, TCKind._tk_wchar),		
	    new TypeCodeImpl(this, TCKind._tk_wstring),	
	    new TypeCodeImpl(this, TCKind._tk_fixed),	
	    new TypeCodeImpl(this, TCKind._tk_value),	
	    new TypeCodeImpl(this, TCKind._tk_value_box),
	    new TypeCodeImpl(this, TCKind._tk_native),	
	    new TypeCodeImpl(this, TCKind._tk_abstract_interface)
	} ;

        monitoringManager = 
            MonitoringFactories.getMonitoringManagerFactory( ).
		createMonitoringManager(
                MonitoringConstants.DEFAULT_MONITORING_ROOT,
		MonitoringConstants.DEFAULT_MONITORING_ROOT_DESCRIPTION);
!!!1395355.java!!!	get_primitive_tc(in kind : int) : TypeCodeImpl
	try {
	    return primitiveTypeCodeConstants[kind] ;
	} catch (Throwable t) {
	    throw wrapper.invalidTypecodeKind( t, new Integer(kind) ) ;
	}
!!!1395483.java!!!	setTypeCode(in id : String, inout code : TypeCodeImpl) : void
        typeCodeMap.put(id, code);
!!!1395611.java!!!	getTypeCode(in id : String) : TypeCodeImpl
        return (TypeCodeImpl)typeCodeMap.get(id);
!!!1395739.java!!!	getMonitoringManager() : MonitoringManager
        return monitoringManager;
!!!1400091.java!!!	getLogger(in domain : String) : Logger
	ORBData odata = getORBData() ;

	// Determine the correct ORBId.  There are 3 cases:
	// 1. odata is null, which happens if we are getting a logger before
	//    ORB initialization is complete.  In this case we cannot determine
	//    the ORB ID (it's not known yet), so we set the ORBId to
	//    _INITIALIZING_.
	// 2. odata is not null, so initialization is complete, but ORBId is set to
	//    the default "".  To avoid a ".." in
	//    the log domain, we simply use _DEFAULT_ in this case.
	// 3. odata is not null, ORBId is not "": just use the ORBId.
	String ORBId ;
	if (odata == null)
	    ORBId = "_INITIALIZING_" ;
	else {
	    ORBId = odata.getORBId() ;
	    if (ORBId.equals(""))
		ORBId = "_DEFAULT_" ;
	}

	return getCORBALogger( ORBId, domain ) ;
!!!1400219.java!!!	staticGetLogger(in domain : String) : Logger
	return getCORBALogger( "_CORBA_", domain ) ;
!!!1400347.java!!!	getCORBALogger(in ORBId : String, in domain : String) : Logger
        String fqLogDomain = CORBALogDomains.TOP_LEVEL_DOMAIN + "." +
	    ORBId + "." + domain;

        return Logger.getLogger( fqLogDomain, ORBConstants.LOG_RESOURCE_FILE );
!!!1400475.java!!!	getLogWrapper(in logDomain : String, in exceptionGroup : String, inout factory : LogWrapperFactory) : LogWrapperBase
        StringPair key = new StringPair( logDomain, exceptionGroup ) ;

        LogWrapperBase logWrapper = (LogWrapperBase)wrapperMap.get( key ); 
        if (logWrapper == null) {
            logWrapper = factory.create( getLogger( logDomain ) );
            wrapperMap.put( key, logWrapper );
        }

        return logWrapper;
!!!1400603.java!!!	staticGetLogWrapper(in logDomain : String, in exceptionGroup : String, inout factory : LogWrapperFactory) : LogWrapperBase
        StringPair key = new StringPair( logDomain, exceptionGroup ) ;

        LogWrapperBase logWrapper = (LogWrapperBase)staticWrapperMap.get( key ); 
        if (logWrapper == null) {
            logWrapper = factory.create( staticGetLogger( logDomain ) );
            staticWrapperMap.put( key, logWrapper );
        }

        return logWrapper;
!!!1400731.java!!!	getByteBufferPool() : ByteBufferPool
        if (byteBufferPool == null)
            byteBufferPool = new ByteBufferPoolImpl(this);

        return byteBufferPool;
