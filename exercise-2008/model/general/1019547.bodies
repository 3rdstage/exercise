class CIBackRef
!!!8133019.java!!!	CIBackRef(in groupCount : int)
            super();
            groupIndex = groupCount + groupCount;
!!!8133147.java!!!	match(inout matcher : Matcher, in i : int, inout seq : CharSequence) : boolean
            int j = matcher.groups[groupIndex];
            int k = matcher.groups[groupIndex+1];

            int groupSize = k - j;

            // If the referenced group didn't match, neither can this
            if (j < 0)
                return false;

            // If there isn't enough input left no match
            if (i + groupSize > matcher.to) {
                matcher.hitEnd = true;
                return false;
            }

            // Check each new char to make sure it matches what the group
            // referenced matched last time around
	    int x = i;
            for (int index=0; index<groupSize; index++) {
                int c1 = Character.codePointAt(seq, x);
                int c2 = Character.codePointAt(seq, j);
                if (c1 != c2) {
                    int cc1 = Character.toUpperCase(c1);
                    int cc2 = Character.toUpperCase(c2);
                    if (cc1 != cc2) {
                        cc1 = Character.toLowerCase(cc1);
                        cc2 = Character.toLowerCase(cc2);
                        if (cc1 != cc2)
                            return false;
                    }
                }
		x += Character.charCount(c1);
		j += Character.charCount(c2);
            }

            return next.match(matcher, i+groupSize, seq);
!!!8133275.java!!!	study(inout info : TreeInfo) : boolean
            info.maxValid = false;
            return next.study(info);
