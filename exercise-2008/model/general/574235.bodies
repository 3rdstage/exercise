class Instruction
!!!3680155.java!!!	Instruction(in opcode : short, in length : short)
    this.length = length;
    this.opcode = opcode;
!!!3680283.java!!!	dump(inout out : DataOutputStream) : void
    out.writeByte(opcode); // Common for all instructions
!!!3680411.java!!!	toString(inout verbose : boolean) : String
    if(verbose)
      return Constants.OPCODE_NAMES[opcode] + "[" + opcode + "](" + length + ")";
    else
      return Constants.OPCODE_NAMES[opcode];
!!!3680539.java!!!	toString() : String
    return toString(true);
!!!3680667.java!!!	toString(inout cp : ConstantPool) : String
    return toString(false);
!!!3680795.java!!!	copy() : Instruction
    Instruction i = null;

    // "Constant" instruction, no need to duplicate
    if(InstructionConstants.INSTRUCTIONS[this.getOpcode()] != null)
      i = this;
    else {
      try {
	i = (Instruction)clone();
      } catch(CloneNotSupportedException e) {
	System.err.println(e);
      }
    }

    return i;
!!!3681051.java!!!	readInstruction(inout bytes : ByteSequence) : Instruction
    boolean     wide   = false;
    short       opcode = (short)bytes.readUnsignedByte();
    Instruction obj    = null;

    if(opcode == Constants.WIDE) { // Read next opcode after wide byte
      wide = true;
      opcode  = (short)bytes.readUnsignedByte();
    }

    if(InstructionConstants.INSTRUCTIONS[opcode] != null)
      return InstructionConstants.INSTRUCTIONS[opcode]; // Used predefined immutable object, if available

    /* Find appropiate class, instantiate an (empty) instruction object
     * and initialize it by hand.
     */
    Class clazz;
    try {
      clazz = Class.forName(className(opcode));
    }
    catch (ClassNotFoundException cnfe){
      // If a class by that name does not exist, the opcode is illegal.
      // Note that IMPDEP1, IMPDEP2, BREAKPOINT are also illegal in a sense.
      throw new ClassGenException("Illegal opcode detected.");
    }
    try {
      obj = (Instruction)clazz.newInstance();

      if(wide && !((obj instanceof LocalVariableInstruction) || (obj instanceof IINC) ||
		   (obj instanceof RET)))
	throw new Exception("Illegal opcode after wide: " + opcode);

      obj.setOpcode(opcode);
      obj.initFromFile(bytes, wide); // Do further initializations, if any
      // Byte code offset set in InstructionList
    } catch(Exception e) { throw new ClassGenException(e.toString()); }

    return obj;
!!!3681179.java!!!	className(in opcode : short) : String
    String name = Constants.OPCODE_NAMES[opcode].toUpperCase();

    /* ICONST_0, etc. will be shortened to ICONST, etc., since ICONST_0 and the like
     * are not implemented (directly).
     */
    try {
      int  len = name.length();
      char ch1 = name.charAt(len - 2), ch2 = name.charAt(len - 1);

      if((ch1 == '_') && (ch2 >= '0')  && (ch2 <= '5'))
	name = name.substring(0, len - 2);
      
      if(name.equals("ICONST_M1")) // Special case
	name = "ICONST";
    } catch(StringIndexOutOfBoundsException e) { System.err.println(e); }

    return "com.sun.org.apache.bcel.internal.generic." + name;
!!!3681307.java!!!	consumeStack(inout cpg : ConstantPoolGen) : int
    return Constants.CONSUME_STACK[opcode];
!!!3681435.java!!!	produceStack(inout cpg : ConstantPoolGen) : int
    return Constants.PRODUCE_STACK[opcode];
!!!3681563.java!!!	getOpcode() : short
 return opcode;
!!!3681691.java!!!	getLength() : int
 return length;
!!!3681819.java!!!	setOpcode(in opcode : short) : void
 this.opcode = opcode;
