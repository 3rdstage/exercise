class EntryIterator
!!!7901723.java!!!	next() : Entry
            nextEntry();
            return this;
!!!7901851.java!!!	getKey() : K
            if (lastReturned == null)
                throw new IllegalStateException("Entry was removed");
            return lastReturned.key;
!!!7901979.java!!!	getValue() : V
            if (lastReturned == null)
                throw new IllegalStateException("Entry was removed");
            return ConcurrentHashMap.this.get(lastReturned.key);
!!!7902107.java!!!	setValue(inout value : V) : V
            if (lastReturned == null)
                throw new IllegalStateException("Entry was removed");
            return ConcurrentHashMap.this.put(lastReturned.key, value);
!!!7902235.java!!!	equals(inout o : Object) : boolean
            // If not acting as entry, just use default.
            if (lastReturned == null)
                return super.equals(o);
            if (!(o instanceof Map.Entry))
                return false;
            Map.Entry e = (Map.Entry)o;
            return eq(getKey(), e.getKey()) && eq(getValue(), e.getValue());
!!!7902363.java!!!	hashCode() : int
            // If not acting as entry, just use default.
            if (lastReturned == null)
                return super.hashCode();

            Object k = getKey();
            Object v = getValue();
            return ((k == null) ? 0 : k.hashCode()) ^
                   ((v == null) ? 0 : v.hashCode());
!!!7902491.java!!!	toString() : String
            // If not acting as entry, just use default.
            if (lastReturned == null)
                return super.toString();
            else
                return getKey() + "=" + getValue();
!!!7902619.java!!!	eq(inout o1 : Object, inout o2 : Object) : boolean
            return (o1 == null ? o2 == null : o1.equals(o2));
