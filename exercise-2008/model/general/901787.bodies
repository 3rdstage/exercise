class BeanContextSupport
!!!6807067.java!!!	BeanContextSupport(inout peer : BeanContext, inout lcle : Locale, inout dTime : boolean, inout visible : boolean)
	super(peer);

	locale          = lcle != null ? lcle : Locale.getDefault();
	designTime      = dTime;
	okToUseGui      = visible;

	initialize();
!!!6807195.java!!!	BeanContextSupport(inout peer : BeanContext, inout lcle : Locale, inout dtime : boolean)
	this (peer, lcle, dtime, true);
!!!6807323.java!!!	BeanContextSupport(inout peer : BeanContext, inout lcle : Locale)
	this (peer, lcle, false, true);
!!!6807451.java!!!	BeanContextSupport(inout peer : BeanContext)
	this (peer, null, false, true);
!!!6807579.java!!!	BeanContextSupport()
	this (null, null, false, true);
!!!6807707.java!!!	getBeanContextPeer() : BeanContext
 return (BeanContext)getBeanContextChildPeer();
!!!6807835.java!!!	instantiateChild(in beanName : String) : Object
	BeanContext bc = getBeanContextPeer();

	return Beans.instantiate(bc.getClass().getClassLoader(), beanName, bc);
!!!6807963.java!!!	size() : int
	synchronized(children) {
	    return children.size();
	}
!!!6808091.java!!!	isEmpty() : boolean
	synchronized(children) {
	    return children.isEmpty();
	}
!!!6808219.java!!!	contains(inout o : Object) : boolean
	synchronized(children) {
	    return children.containsKey(o);
	}
!!!6808347.java!!!	containsKey(inout o : Object) : boolean
	synchronized(children) {
	    return children.containsKey(o);
	}
!!!6808475.java!!!	iterator() : Iterator
	synchronized(children) {
	    return new BCSIterator(children.keySet().iterator());
	}
!!!6808603.java!!!	toArray() : Object
	synchronized(children) {
	    return children.keySet().toArray();
	}
!!!6808731.java!!!	toArray(inout arry : Object) : Object
	synchronized(children) {
	    return children.keySet().toArray(arry);
	}
!!!6810139.java!!!	createBCSChild(inout targetChild : Object, inout peer : Object) : BCSChild
	return new BCSChild(targetChild, peer);
!!!6810267.java!!!	add(inout targetChild : Object) : boolean

	if (targetChild == null) throw new IllegalArgumentException();

	// The specification requires that we do nothing if the child
	// is already nested herein.

	if (children.containsKey(targetChild)) return false; // test before locking

	synchronized(BeanContext.globalHierarchyLock) {
	    if (children.containsKey(targetChild)) return false; // check again

	    if (!validatePendingAdd(targetChild)) {
	        throw new IllegalStateException();
	    }


	    // The specification requires that we invoke setBeanContext() on the
	    // newly added child if it implements the java.beans.beancontext.BeanContextChild interface

	    BeanContextChild cbcc  = getChildBeanContextChild(targetChild);
	    BeanContextChild  bccp = null;

	    synchronized(targetChild) {

		if (targetChild instanceof BeanContextProxy) {
		    bccp = ((BeanContextProxy)targetChild).getBeanContextProxy();

		    if (bccp == null) throw new NullPointerException("BeanContextPeer.getBeanContextProxy()");
		}

	        BCSChild bcsc  = createBCSChild(targetChild, bccp);
		BCSChild pbcsc = null;

	        synchronized (children) {
		    children.put(targetChild, bcsc);

		    if (bccp != null) children.put(bccp, pbcsc = createBCSChild(bccp, targetChild));
		}

	        if (cbcc != null) synchronized(cbcc) {
		    try {
	                cbcc.setBeanContext(getBeanContextPeer());
	            } catch (PropertyVetoException pve) {

		        synchronized (children) {
			    children.remove(targetChild);

			    if (bccp != null) children.remove(bccp);
			}

	                throw new IllegalStateException();
	            }

	            cbcc.addPropertyChangeListener("beanContext", childPCL);
	            cbcc.addVetoableChangeListener("beanContext", childVCL);
		}

	        Visibility v = getChildVisibility(targetChild);

	        if (v != null) {
	            if (okToUseGui)
	                v.okToUseGui();
	            else
	                v.dontUseGui();
	        }

	        if (getChildSerializable(targetChild) != null) serializable++;

	        childJustAddedHook(targetChild, bcsc);

		if (bccp != null) {
	            v = getChildVisibility(bccp);

	            if (v != null) {
	                if (okToUseGui)
	                    v.okToUseGui();
	                else
	                    v.dontUseGui();
	            }

		    if (getChildSerializable(bccp) != null) serializable++;

	            childJustAddedHook(bccp, pbcsc);
		}


	    }

	    // The specification requires that we fire a notification of the change

	    fireChildrenAdded(new BeanContextMembershipEvent(getBeanContextPeer(), bccp == null ? new Object[] { targetChild } : new Object[] { targetChild, bccp } ));

        }

	return true;
!!!6810395.java!!!	remove(inout targetChild : Object) : boolean
	return remove(targetChild, true);
!!!6810523.java!!!	remove(inout targetChild : Object, inout callChildSetBC : boolean) : boolean

	if (targetChild == null) throw new IllegalArgumentException();

	synchronized(BeanContext.globalHierarchyLock) {
	    if (!containsKey(targetChild)) return false;

	    if (!validatePendingRemove(targetChild)) {
	        throw new IllegalStateException();
	    }

            BCSChild bcsc  = (BCSChild)children.get(targetChild);
	    BCSChild pbcsc = null;
	    Object   peer  = null;

	    // we are required to notify the child that it is no longer nested here if
	    // it implements java.beans.beancontext.BeanContextChild

	    synchronized(targetChild) {
	        if (callChildSetBC) {
	            BeanContextChild cbcc = getChildBeanContextChild(targetChild);
	            if (cbcc != null) synchronized(cbcc) {
	                cbcc.removePropertyChangeListener("beanContext", childPCL);
	                cbcc.removeVetoableChangeListener("beanContext", childVCL);

			try {
	                    cbcc.setBeanContext(null);
	                } catch (PropertyVetoException pve1) {
	                    cbcc.addPropertyChangeListener("beanContext", childPCL);
	                    cbcc.addVetoableChangeListener("beanContext", childVCL);
	    	            throw new IllegalStateException();
	                }

		    }
	        }

	        synchronized (children) {
		    children.remove(targetChild);

		    if (bcsc.isProxyPeer()) {
			pbcsc = (BCSChild)children.get(peer = bcsc.getProxyPeer());
			children.remove(peer);
		    }
		}

	        if (getChildSerializable(targetChild) != null) serializable--;

	        childJustRemovedHook(targetChild, bcsc);

		if (peer != null) {
	            if (getChildSerializable(peer) != null) serializable--;

	            childJustRemovedHook(peer, pbcsc);
		}
	    }

	    fireChildrenRemoved(new BeanContextMembershipEvent(getBeanContextPeer(), peer == null ? new Object[] { targetChild } : new Object[] { targetChild, peer } ));

	}

	return true;
!!!6810651.java!!!	containsAll(inout c : Collection) : boolean
	synchronized(children) {
	    Iterator i = c.iterator();
	    while (i.hasNext())
	        if(!contains(i.next()))
		    return false;

	    return true;
	}
!!!6810779.java!!!	addAll(inout c : Collection) : boolean
	throw new UnsupportedOperationException();
!!!6810907.java!!!	removeAll(inout c : Collection) : boolean
	throw new UnsupportedOperationException();
!!!6811035.java!!!	retainAll(inout c : Collection) : boolean
	throw new UnsupportedOperationException();
!!!6811163.java!!!	clear() : void
	throw new UnsupportedOperationException();
!!!6811291.java!!!	addBeanContextMembershipListener(inout bcml : BeanContextMembershipListener) : void
	if (bcml == null) throw new NullPointerException("listener");

	synchronized(bcmListeners) {
	    if (bcmListeners.contains(bcml))
		return;
	    else
	        bcmListeners.add(bcml);
	}
!!!6811419.java!!!	removeBeanContextMembershipListener(inout bcml : BeanContextMembershipListener) : void
	if (bcml == null) throw new NullPointerException("listener");

	synchronized(bcmListeners) {
	    if (!bcmListeners.contains(bcml))
		return;
	    else
	        bcmListeners.remove(bcml);
	}
!!!6811547.java!!!	getResourceAsStream(in name : String, inout bcc : BeanContextChild) : InputStream
	if (name == null) throw new NullPointerException("name");
	if (bcc  == null) throw new NullPointerException("bcc");

	if (containsKey(bcc)) {
	    ClassLoader cl = bcc.getClass().getClassLoader();

	    return cl != null ? cl.getResourceAsStream(name)
			      : ClassLoader.getSystemResourceAsStream(name);
	} else throw new IllegalArgumentException("Not a valid child");
!!!6811675.java!!!	getResource(in name : String, inout bcc : BeanContextChild) : URL
	if (name == null) throw new NullPointerException("name");
	if (bcc  == null) throw new NullPointerException("bcc");

	if (containsKey(bcc)) {
	    ClassLoader cl = bcc.getClass().getClassLoader();

	    return cl != null ? cl.getResource(name)
			      : ClassLoader.getSystemResource(name);
	} else throw new IllegalArgumentException("Not a valid child");
!!!6811803.java!!!	setDesignTime(inout dTime : boolean) : void
	if (designTime != dTime) {
	    designTime = dTime;

	    firePropertyChange("designMode", Boolean.valueOf(!dTime), Boolean.valueOf(dTime));
	}
!!!6811931.java!!!	isDesignTime() : boolean
 return designTime;
!!!6812059.java!!!	setLocale(inout newLocale : Locale) : void

	if ((locale != null && !locale.equals(newLocale)) && newLocale != null) {
	    Locale old = locale;

	    fireVetoableChange("locale", old, newLocale); // throws

	    locale = newLocale;

	    firePropertyChange("locale", old, newLocale);
	}
!!!6812187.java!!!	getLocale() : Locale
 return locale;
!!!6812315.java!!!	needsGui() : boolean
	BeanContext bc = getBeanContextPeer();

	if (bc != this) {
	    if (bc instanceof Visibility) return ((Visibility)bc).needsGui();

	    if (bc instanceof Container || bc instanceof Component)
		return true;
	}

	synchronized(children) {
	    for (Iterator i = children.keySet().iterator(); i.hasNext();) {
	        Object c = i.next();

	        try {
		        return ((Visibility)c).needsGui();
		    } catch (ClassCastException cce) {
		        // do nothing ...
		    }

		    if (c instanceof Container || c instanceof Component)
		        return true;
	    }
	}

	return false;
!!!6812443.java!!!	dontUseGui() : void
	if (okToUseGui) {
	    okToUseGui = false;

	    // lets also tell the Children that can that they may not use their GUI's
	    synchronized(children) {
	        for (Iterator i = children.keySet().iterator(); i.hasNext();) {
		    Visibility v = getChildVisibility(i.next());

		    if (v != null) v.dontUseGui();
	       }
	    }
	}
!!!6812571.java!!!	okToUseGui() : void
	if (!okToUseGui) {
	    okToUseGui = true;

	    // lets also tell the Children that can that they may use their GUI's
	    synchronized(children) {
	        for (Iterator i = children.keySet().iterator(); i.hasNext();) {
		    Visibility v = getChildVisibility(i.next());

		    if (v != null) v.okToUseGui();
	        }
	    }
	}
!!!6812699.java!!!	avoidingGui() : boolean
	return !okToUseGui && needsGui();
!!!6812827.java!!!	isSerializing() : boolean
 return serializing;
!!!6812955.java!!!	bcsChildren() : Iterator
 synchronized(children) { return children.values().iterator();  }
!!!6813339.java!!!	childDeserializedHook(inout child : Object, inout bcsc : BCSChild) : void
	synchronized(children) {
	    children.put(child, bcsc);
	}
!!!6813467.java!!!	serialize(inout oos : ObjectOutputStream, inout coll : Collection) : void
   	int      count   = 0;
	Object[] objects = coll.toArray();
    
	for (int i = 0; i < objects.length; i++) {
	    if (objects[i] instanceof Serializable)
		count++;
	    else
		objects[i] = null;
	}

        oos.writeInt(count); // number of subsequent objects

	for (int i = 0; count > 0; i++) {
	    Object o = objects[i];

	    if (o != null) {
		oos.writeObject(o);
		count--;
	    }
	}
!!!6813595.java!!!	deserialize(inout ois : ObjectInputStream, inout coll : Collection) : void
	int count = 0;

	count = ois.readInt();

	while (count-- > 0) {
	    coll.add(ois.readObject());
	}
!!!6813723.java!!!	writeChildren(inout oos : ObjectOutputStream) : void
	if (serializable <= 0) return;

	boolean prev = serializing;

	serializing = true;

	int count = 0;

	synchronized(children) {
	    Iterator i = children.entrySet().iterator();

	    while (i.hasNext() && count < serializable) {
	        Map.Entry entry = (Map.Entry)i.next();

	        if (entry.getKey() instanceof Serializable) {
	      	    try {
		        oos.writeObject(entry.getKey());   // child
		        oos.writeObject(entry.getValue()); // BCSChild
		    } catch (IOException ioe) {
		        serializing = prev;
		        throw ioe;
		    }
		    count++;
	        }
	    }
	}
	
        serializing = prev;

	if (count != serializable) {
	    throw new IOException("wrote different number of children than expected");
	}

!!!6813851.java!!!	writeObject(inout oos : ObjectOutputStream) : void
	serializing = true;

	synchronized (BeanContext.globalHierarchyLock) {
	    try {
	        oos.defaultWriteObject(); // serialize the BeanContextSupport object

	        bcsPreSerializationHook(oos);

	        if (serializable > 0 && this.equals(getBeanContextPeer()))
	            writeChildren(oos);

	        serialize(oos, (Collection)bcmListeners);
	    } finally {
	        serializing = false;
	    }
 	}
!!!6813979.java!!!	readChildren(inout ois : ObjectInputStream) : void
	int count = serializable; 

	while (count-- > 0) {
	    Object                      child = null;
	    BeanContextSupport.BCSChild bscc  = null;
	  
	    try {
	        child = ois.readObject();
	        bscc  = (BeanContextSupport.BCSChild)ois.readObject();
	    } catch (IOException ioe) {
		continue;
	    } catch (ClassNotFoundException cnfe) {
		continue;
	    }


	    synchronized(child) {
		BeanContextChild bcc = null;

		try {
		    bcc = (BeanContextChild)child;
		} catch (ClassCastException cce) {
		    // do nothing;
		}

		if (bcc != null) {
		    try {
			bcc.setBeanContext(getBeanContextPeer());

	               bcc.addPropertyChangeListener("beanContext", childPCL);
	               bcc.addVetoableChangeListener("beanContext", childVCL);
	
		    } catch (PropertyVetoException pve) {
			continue;
		    }
		}

		childDeserializedHook(child, bscc);
	    }
	}
!!!6814107.java!!!	readObject(inout ois : ObjectInputStream) : void

	synchronized(BeanContext.globalHierarchyLock) {
	    ois.defaultReadObject();

	    initialize();

	    bcsPreDeserializationHook(ois);

	    if (serializable > 0 && this.equals(getBeanContextPeer()))
	        readChildren(ois);

	    deserialize(ois, bcmListeners = new ArrayList(1));
	}
!!!6814235.java!!!	vetoableChange(inout pce : PropertyChangeEvent) : void
	String propertyName = pce.getPropertyName();
	Object source	    = pce.getSource();

	synchronized(children) {
	    if ("beanContext".equals(propertyName) &&
	        containsKey(source)	               &&
	        !getBeanContextPeer().equals(pce.getNewValue())
	    ) {
	        if (!validatePendingRemove(source)) {
		    throw new PropertyVetoException("current BeanContext vetoes setBeanContext()", pce);
	        } else ((BCSChild)children.get(source)).setRemovePending(true);
	    }
	}
!!!6814363.java!!!	propertyChange(inout pce : PropertyChangeEvent) : void
	String propertyName = pce.getPropertyName();
	Object source	    = pce.getSource();

	synchronized(children) {
	    if ("beanContext".equals(propertyName) &&
	        containsKey(source)		       &&
	        ((BCSChild)children.get(source)).isRemovePending()) {
	        BeanContext bc = getBeanContextPeer();

	        if (bc.equals(pce.getOldValue()) && !bc.equals(pce.getNewValue())) {
	            remove(source, false);
	        } else {
		    ((BCSChild)children.get(source)).setRemovePending(false);
	        }
	    }
        }
!!!6814491.java!!!	validatePendingAdd(inout targetChild : Object) : boolean
	return true;
!!!6814619.java!!!	validatePendingRemove(inout targetChild : Object) : boolean
	return true;
!!!6815003.java!!!	getChildVisibility(inout child : Object) : Visibility
	try {
	    return (Visibility)child;
	} catch (ClassCastException cce) {
	    return null;
	}
!!!6815131.java!!!	getChildSerializable(inout child : Object) : Serializable
        try {
	    return (Serializable)child;
	} catch (ClassCastException cce) {
	    return null;
	}
!!!6815259.java!!!	getChildPropertyChangeListener(inout child : Object) : PropertyChangeListener
	try {
	    return (PropertyChangeListener)child;
	} catch (ClassCastException cce) {
	    return null;
	}
!!!6815387.java!!!	getChildVetoableChangeListener(inout child : Object) : VetoableChangeListener
	try {
	    return (VetoableChangeListener)child;
	} catch (ClassCastException cce) {
	    return null;
	}
!!!6815515.java!!!	getChildBeanContextMembershipListener(inout child : Object) : BeanContextMembershipListener
	try {
	    return (BeanContextMembershipListener)child;
	} catch (ClassCastException cce) {
	    return null;
	}
!!!6815643.java!!!	getChildBeanContextChild(inout child : Object) : BeanContextChild
        try {
	    BeanContextChild bcc = (BeanContextChild)child;

	    if (child instanceof BeanContextChild && child instanceof BeanContextProxy) 
		throw new IllegalArgumentException("child cannot implement both BeanContextChild and BeanContextProxy");
	    else
		return bcc;
	} catch (ClassCastException cce) {
	    try {
		return ((BeanContextProxy)child).getBeanContextProxy();
	    } catch (ClassCastException cce1) {
	        return null;
	    }
	}
!!!6815771.java!!!	fireChildrenAdded(inout bcme : BeanContextMembershipEvent) : void
	Object[] copy;
							  
	synchronized(bcmListeners) { copy = bcmListeners.toArray(); }

	for (int i = 0; i < copy.length; i++)
	    ((BeanContextMembershipListener)copy[i]).childrenAdded(bcme);
!!!6815899.java!!!	fireChildrenRemoved(inout bcme : BeanContextMembershipEvent) : void
	Object[] copy;
							  
	synchronized(bcmListeners) { copy = bcmListeners.toArray(); }

	for (int i = 0; i < copy.length; i++)
	    ((BeanContextMembershipListener)copy[i]).childrenRemoved(bcme);
!!!6816027.java!!!	initialize() : void
	children     = new HashMap(serializable + 1);
	bcmListeners = new ArrayList(1);

	childPCL = new PropertyChangeListener() {

	    /*
	     * this adaptor is used by the BeanContextSupport class to forward
	     * property changes from a child to the BeanContext, avoiding 
	     * accidential serialization of the BeanContext by a badly 
	     * behaved Serializable child.
	     */

	    public void propertyChange(PropertyChangeEvent pce) {
	        BeanContextSupport.this.propertyChange(pce);
	    }
	};

	childVCL = new VetoableChangeListener() {

	    /*
	     * this adaptor is used by the BeanContextSupport class to forward
	     * vetoable changes from a child to the BeanContext, avoiding 
	     * accidential serialization of the BeanContext by a badly 
	     * behaved Serializable child.
	     */

	    public void vetoableChange(PropertyChangeEvent pce) throws PropertyVetoException {
	        BeanContextSupport.this.vetoableChange(pce);
             }
        };
!!!6816155.java!!!	copyChildren() : Object
	synchronized(children) { return children.keySet().toArray(); }
!!!6816283.java!!!	classEquals(inout first : Class, inout second : Class) : boolean
	return first.equals(second) || first.getName().equals(second.getName());
