format 66
"jpeg" // src::javax::imageio::plugins::jpeg
  revision 1
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "javax/imageio/plugins/jpeg"
  java_package "javax.imageio.plugins.jpeg"
  classview 150299 "jpeg"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 350235 "JPEGHuffmanTable"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class encapsulating a single JPEG Huffman table.  Fields are
provided for the \"standard\" tables from taken from Annex K of the
JPEG specification.  These are the tables used as defaults.
This class differs from the old unsupported 
com.sun.image.codec.jpeg.JPEGHuffmanTable in two ways: 
<ol>
<li>The lengths arrays for this class do not contain an ignored 0th
entry.  The lengths array in a JPEG stream does not contain an extra
entry, and this class is used to represent the contents of a JPEG
stream.
</li>
<li>The old class incorrectly referred to Huffman \"symbols\", while
expecting an array of values to be encoded.  This class has a
<code>getValues</code> method instead of a <code>getSymbols</code>
method.
</li>
</ol>

<p>
For more information about the operation of the built-in JPEG plug-ins,
see the <A HREF=\"../../metadata/doc-files/jpeg_metadata.html\">JPEG
metadata format specification and usage notes</A>.

@version 0.5"
      attribute 3008027 "HUFF_MAX_LEN"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum number of symbol lengths
(max symbol length in bits = 16).
"
      end

      attribute 3008155 "HUFF_MAX_VALS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  256"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The maximum number of values. "
      end

      attribute 3008283 "lengths"
	private explicit_type "short"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " lengths[k-1] = number of symbols with length k bits.	"
      end

      attribute 3008411 "values"
	private explicit_type "short"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Values in order of increasing length of the corresponding symbols. "
      end

      classrelation 2014747 // StdDCLuminance (<unidirectional association>)
	relation 2014747 --->
	  a role_name "StdDCLuminance" init_value "=  
        new JPEGHuffmanTable()" class_relation const_relation public
	    comment " The standard DC luminance Huffman table. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2014747 // StdDCLuminance (<unidirectional association>)
	  b parent class_ref 350235 // JPEGHuffmanTable
      end

      extra_member 167835 "initialization"
	
	cpp "" ""
	java "  static {
        short lengths[] = {
            0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
        short values[] = {
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
        
        StdDCLuminance.lengths = lengths;
        StdDCLuminance.values = values;
        StdDCLuminance.checkTable();
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 2014875 // StdDCChrominance (<unidirectional association>)
	relation 2014875 --->
	  a role_name "StdDCChrominance" init_value "=  
        new JPEGHuffmanTable()" class_relation const_relation public
	    comment " The standard DC chrominance Huffman table. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2014875 // StdDCChrominance (<unidirectional association>)
	  b parent class_ref 350235 // JPEGHuffmanTable
      end

      extra_member 167963 "initialization"
	
	cpp "" ""
	java "  static {
        short lengths[] = {
            0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 };
        short values[] = {
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
        
        StdDCChrominance.lengths = lengths;
        StdDCChrominance.values = values;
        StdDCChrominance.checkTable();
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 2015003 // StdACLuminance (<unidirectional association>)
	relation 2015003 --->
	  a role_name "StdACLuminance" init_value "=  
        new JPEGHuffmanTable()" class_relation const_relation public
	    comment " The standard AC luminance Huffman table. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2015003 // StdACLuminance (<unidirectional association>)
	  b parent class_ref 350235 // JPEGHuffmanTable
      end

      extra_member 168091 "initialization"
	
	cpp "" ""
	java "  static {
        short lengths[] = {
            0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d };
        short values[] = { 
            0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
            0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
            0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
            0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
            0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
            0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
            0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
            0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
            0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
            0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
            0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
            0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
            0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
            0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
            0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
            0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
            0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
            0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
            0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
            0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
            0xf9, 0xfa };
        
        StdACLuminance.lengths = lengths;
        StdACLuminance.values = values;
        StdACLuminance.checkTable();
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 2015131 // StdACChrominance (<unidirectional association>)
	relation 2015131 --->
	  a role_name "StdACChrominance" init_value "=  
        new JPEGHuffmanTable()" class_relation const_relation public
	    comment " The standard AC chrominance Huffman table. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2015131 // StdACChrominance (<unidirectional association>)
	  b parent class_ref 350235 // JPEGHuffmanTable
      end

      extra_member 168219 "initialization"
	
	cpp "" ""
	java "  static {
        short lengths[] =  {
            0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77 };
        short values[] = { 
            0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
            0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
            0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
            0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
            0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
            0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
            0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
            0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
            0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
            0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
            0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
            0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
            0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
            0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
            0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
            0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
            0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
            0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
            0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
            0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
            0xf9, 0xfa };
        
        StdACChrominance.lengths = lengths;
        StdACChrominance.values = values;
        StdACChrominance.checkTable();
    }"
	php ""
	python ""
	idl ""
      end

      operation 8200603 "JPEGHuffmanTable"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private constructor used to construct the Standard Huffman tables"
      end

      operation 8200731 "JPEGHuffmanTable"
	public explicit_return_type ""
	nparams 2
	  param in name "lengths" explicit_type "short"
	  param in name "values" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Huffman table and initializes it.  The input arrays
are copied.  The arrays must describe a possible Huffman table.
For example, 3 codes cannot be expressed with a single bit.

@param lengths an array of <code>short</code>s where
<code>lengths[k]</code> is equal to the number of values with
corresponding codes of length <code>k + 1</code> bits.
@param values an array of <code>short</code>s containing the
values in order of increasing code length.

@exception IllegalArgumentException if <code>lengths</code> or
<code>values</code> are <code>null</code>, the length of
<code>lengths</code> is greater than 16, the length of
<code>values</code> is greater than 256, if any value in
<code>lengths</code> or <code>values</code> is less than zero,
or if the arrays do not describe a valid Huffman table."
      end

      operation 8200859 "checkTable"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This checks that the table they gave us isn't 'illegal' It
checks that the symbol length counts are possible, and that
they gave us at least enough values for the symbol length
counts. Eventually this might check that there aren't duplicate
values."
      end

      operation 8200987 "getLengths"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an array of <code>short</code>s containing the number of
values for each length in the Huffman table.  The returned
array is a copy.

@return a <code>short</code> array where <code>array[k-1]</code>
is equal to the number of values in the table of length
<code>k</code>.

@see #getValues"
      end

      operation 8201115 "getValues"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an array of <code>short</code>s containing the
values arranged by increasing length of their corresponding
codes.  The interpretation of
the array is dependent on the values returned from
<code>getLengths</code>.  The returned array is a copy.

@return a <code>short</code> array of values.

@see #getLengths"
      end

      operation 8201243 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 350619 "JPEGQTable"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class encapsulating a single JPEG quantization table.  The
elements appear in natural order (as opposed to zig-zag order).
Static variables are provided for the \"standard\" tables taken from
Annex K of the JPEG spec, as well as the default tables
conventionally used for visually lossless encoding.

<p>
For more information about the operation of the built-in JPEG plug-ins,
see the <A HREF=\"../../metadata/doc-files/jpeg_metadata.html\">JPEG
metadata format specification and usage notes</A>.

@version 0.5"
      attribute 3009051 "table"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Table "
      end

      attribute 3009179 "QTABLESIZE"
	class_attribute const_attribute private explicit_type "byte"
	init_value "=  64"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The number of coefficients in a quantization table. "
      end

      classrelation 2016283 // K1Luminance (<unidirectional association>)
	relation 2016283 --->
	  a role_name "K1Luminance" init_value "=  new JPEGQTable()" class_relation const_relation public
	    comment " 
The sample luminance quantization table given in the JPEG
specification, table K.1.  According to the specification,
these values produce \"good\" quality output.

@see #K1Div2Luminance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2016283 // K1Luminance (<unidirectional association>)
	  b parent class_ref 350619 // JPEGQTable
      end

      extra_member 168347 "initialization"
	
	cpp "" ""
	java "  static {
        int [] lumVals = {
            16,  11,  10,  16,  24,  40,  51,  61,
            12,  12,  14,  19,  26,  58,  60,  55,
            14,  13,  16,  24,  40,  57,  69,  56,
            14,  17,  22,  29,  51,  87,  80,  62,
            18,  22,  37,  56,  68, 109, 103,  77,
            24,  35,  55,  64,  81, 104, 113,  92,
            49,  64,  78,  87, 103, 121, 120, 101,
            72,  92,  95,  98, 112, 100, 103,  99
        };
        
        K1Luminance.table = lumVals;
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 2016411 // K1Div2Luminance (<unidirectional association>)
	relation 2016411 --->
	  a role_name "K1Div2Luminance" init_value "=  
        K1Luminance.getScaledInstance(0.5f, true)" class_relation const_relation public
	    comment "
The sample luminance quantization table given in the JPEG
specification, table K.1, with all elements divided by 2.
According to the specification, these values produce \"very
good\" quality output.  This is the table usually used for
\"visually lossless\" encoding, and is the default luminance
table used if the default tables and quality settings are used.

@see #K1Luminance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2016411 // K1Div2Luminance (<unidirectional association>)
	  b parent class_ref 350619 // JPEGQTable
      end

      classrelation 2016539 // K2Chrominance (<unidirectional association>)
	relation 2016539 --->
	  a role_name "K2Chrominance" init_value "=  new JPEGQTable()" class_relation const_relation public
	    comment " 
The sample chrominance quantization table given in the JPEG
specification, table K.2.  According to the specification,
these values produce \"good\" quality output.

@see #K2Div2Chrominance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2016539 // K2Chrominance (<unidirectional association>)
	  b parent class_ref 350619 // JPEGQTable
      end

      extra_member 168475 "initialization"
	
	cpp "" ""
	java "  static {
        int [] chromVals = {
            17,  18,  24,  47,  99,  99,  99,  99,
            18,  21,  26,  66,  99,  99,  99,  99,
            24,  26,  56,  99,  99,  99,  99,  99,
            47,  66,  99,  99,  99,  99,  99,  99,
            99,  99,  99,  99,  99,  99,  99,  99,
            99,  99,  99,  99,  99,  99,  99,  99,
            99,  99,  99,  99,  99,  99,  99,  99,
            99,  99,  99,  99,  99,  99,  99,  99
        };
        K2Chrominance.table = chromVals;
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 2016667 // K2Div2Chrominance (<unidirectional association>)
	relation 2016667 --->
	  a role_name "K2Div2Chrominance" init_value "=  
        K2Chrominance.getScaledInstance(0.5f, true)" class_relation const_relation public
	    comment "
The sample chrominance quantization table given in the JPEG
specification, table K.2, with all elements divided by 2.
According to the specification, these values produce \"very
good\" quality output.  This is the table usually used for
\"visually lossless\" encoding, and is the default chrominance
table used if the default tables and quality settings are used.

@see #K2Chrominance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2016667 // K2Div2Chrominance (<unidirectional association>)
	  b parent class_ref 350619 // JPEGQTable
      end

      operation 8203931 "JPEGQTable"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty quantization table. This is used to create
the standard tables."
      end

      operation 8204059 "JPEGQTable"
	public explicit_return_type ""
	nparams 1
	  param in name "table" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a quantization table from the argument, which must
contain 64 elements in natural order (not zig-zag order).
A copy is made of the the input array.

@param table the quantization table, as an <code>int</code>
array.

@exception IllegalArgumentException if <code>table</code> is
<code>null</code> or <code>table.length</code> is not equal to
64."
      end

      operation 8204187 "getTable"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the current quantization table as an array of
ints in natural (not zig-zag) order.

@return A copy of the current quantization table."
      end

      operation 8204315 "getScaledInstance"
	public return_type class_ref 350619 // JPEGQTable
	nparams 2
	  param in name "scaleFactor" explicit_type "float"
	  param inout name "forceBaseline" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new quantization table where the values are
multiplied by <code>scaleFactor</code> and then clamped to the
range 1..32767 (or to 1..255 if <code>forceBaseline</code> is
<code>true</code>).

<p> Values of <code>scaleFactorless</code> than 1 tend to
improve the quality level of the table, and values greater than
<code>1.0</code> degrade the quality level of the table.

@param scaleFactor the multiplicative factor for the table.
@param forceBaseline if <code>true</code>, the values will be
clamped to the range 1..255.

@return a new quantization table that is a linear multiple of
the current table."
      end

      operation 8204443 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1027227 "JPEGImageReadParam"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class adds the ability to set JPEG quantization and Huffman
tables when using the built-in JPEG reader plug-in.  An instance of
this class will be returned from the
<code>getDefaultImageReadParam</code> methods of the built-in JPEG
<code>ImageReader</code>.

<p> The sole purpose of these additions is to allow the
specification of tables for use in decoding abbreviated streams.
The built-in JPEG reader will also accept an ordinary
<code>ImageReadParam</code>, which is sufficient for decoding
non-abbreviated streams.

<p> While tables for abbreviated streams are often obtained by
first reading another abbreviated stream containing only the
tables, in some applications the tables are fixed ahead of time.
This class allows the tables to be specified directly from client
code.  If no tables are specified either in the stream or in a
<code>JPEGImageReadParam</code>, then the stream is presumed to use
the \"standard\" visually lossless tables.  See {@link JPEGQTable
<code>JPEGQTable</code>} and {@link JPEGHuffmanTable
<code>JPEGHuffmanTable</code>} for more information on the default
tables.

<p> The default <code>JPEGImageReadParam</code> returned by the
<code>getDefaultReadParam</code> method of the builtin JPEG reader
contains no tables.  Default tables may be obtained from the table
classes {@link JPEGQTable <code>JPEGQTable</code>} and {@link
JPEGHuffmanTable <code>JPEGHuffmanTable</code>}.

<p> If a stream does contain tables, the tables given in a
<code>JPEGImageReadParam</code> are ignored.  Furthermore, if the
first image in a stream does contain tables and subsequent ones do
not, then the tables given in the first image are used for all the
abbreviated images.  Once tables have been read from a stream, they
can be overridden only by tables subsequently read from the same
stream.  In order to specify new tables, the {@link
javax.imageio.ImageReader#setInput <code>setInput</code>} method of
the reader must be called to change the stream.

<p> Note that this class does not provide a means for obtaining the
tables found in a stream.  These may be extracted from a stream by
consulting the <code>IIOMetadata</code> object returned by the
reader.

<p>
For more information about the operation of the built-in JPEG plug-ins,
see the <A HREF=\"../../metadata/doc-files/jpeg_metadata.html\">JPEG
metadata format specification and usage notes</A>.

@version 0.5"
      classrelation 2015259 // <generalisation>
	relation 2015259 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2015259 // <generalisation>
	  b parent class_ref 341787 // ImageReadParam
      end

      classrelation 2015387 // qTables (<unidirectional association>)
	relation 2015387 --->
	  a role_name "qTables" multiplicity "[]" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2015387 // qTables (<unidirectional association>)
	  b parent class_ref 350619 // JPEGQTable
      end

      classrelation 2015515 // DCHuffmanTables (<unidirectional association>)
	relation 2015515 --->
	  a role_name "DCHuffmanTables" multiplicity "[]" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2015515 // DCHuffmanTables (<unidirectional association>)
	  b parent class_ref 350235 // JPEGHuffmanTable
      end

      classrelation 2015643 // ACHuffmanTables (<unidirectional association>)
	relation 2015643 --->
	  a role_name "ACHuffmanTables" multiplicity "[]" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2015643 // ACHuffmanTables (<unidirectional association>)
	  b parent class_ref 350235 // JPEGHuffmanTable
      end

      operation 8201371 "JPEGImageReadParam"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>JPEGImageReadParam</code>."
      end

      operation 8201499 "areTablesSet"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if tables are currently set.

@return <code>true</code> if tables are present."
      end

      operation 8201627 "setDecodeTables"
	public explicit_return_type "void"
	nparams 3
	  param inout name "qTables" type class_ref 350619 // JPEGQTable
	  param inout name "DCHuffmanTables" type class_ref 350235 // JPEGHuffmanTable
	  param inout name "ACHuffmanTables" type class_ref 350235 // JPEGHuffmanTable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the quantization and Huffman tables to use in decoding
abbreviated streams.  There may be a maximum of 4 tables of
each type.  These tables are ignored once tables are
encountered in the stream.  All arguments must be
non-<code>null</code>.  The two arrays of Huffman tables must
have the same number of elements.  The table specifiers in the
frame and scan headers in the stream are assumed to be
equivalent to indices into these arrays.  The argument arrays
are copied by this method.

@param qTables an array of quantization table objects.
@param DCHuffmanTables an array of Huffman table objects.
@param ACHuffmanTables an array of Huffman table objects.

@exception IllegalArgumentException if any of the arguments
is <code>null</code>, has more than 4 elements, or if the
numbers of DC and AC tables differ.

@see #unsetDecodeTables"
      end

      operation 8201755 "unsetDecodeTables"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes any quantization and Huffman tables that are currently
set.

@see #setDecodeTables"
      end

      operation 8201883 "getQTables"
	public return_type class_ref 350619 // JPEGQTable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the array of quantization tables set on the
most recent call to <code>setDecodeTables</code>, or
<code>null</code> if tables are not currently set.

@return an array of <code>JPEGQTable</code> objects, or
<code>null</code>.

@see #setDecodeTables"
      end

      operation 8202011 "getDCHuffmanTables"
	public return_type class_ref 350235 // JPEGHuffmanTable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the array of DC Huffman tables set on the
most recent call to <code>setDecodeTables</code>, or
<code>null</code> if tables are not currently set.

@return an array of <code>JPEGHuffmanTable</code> objects, or
<code>null</code>.

@see #setDecodeTables"
      end

      operation 8202139 "getACHuffmanTables"
	public return_type class_ref 350235 // JPEGHuffmanTable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the array of AC Huffman tables set on the
most recent call to <code>setDecodeTables</code>, or
<code>null</code> if tables are not currently set.

@return an array of <code>JPEGHuffmanTable</code> objects, or
<code>null</code>.

@see #setDecodeTables"
      end
    end

    class 1027355 "JPEGImageWriteParam"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class adds the ability to set JPEG quantization and Huffman
tables when using the built-in JPEG writer plug-in, and to request that
optimized Huffman tables be computed for an image.  An instance of
this class will be returned from the
<code>getDefaultImageWriteParam</code> methods of the built-in JPEG
<code>ImageWriter</code>.

<p> The principal purpose of these additions is to allow the
specification of tables to use in encoding abbreviated streams.
The built-in JPEG writer will also accept an ordinary
<code>ImageWriteParam</code>, in which case the writer will
construct the necessary tables internally.

<p> In either case, the quality setting in an <code>ImageWriteParam</code>
has the same meaning as for the underlying library: 1.00 means a
quantization table of all 1's, 0.75 means the \"standard\", visually
lossless quantization table, and 0.00 means aquantization table of
all 255's.

<p> While tables for abbreviated streams are often specified by
first writing an abbreviated stream containing only the tables, in
some applications the tables are fixed ahead of time.  This class
allows the tables to be specified directly from client code.

<p> Normally, the tables are specified in the
<code>IIOMetadata</code> objects passed in to the writer, and any
tables included in these objects are written to the stream.
If no tables are specified in the metadata, then an abbreviated
stream is written.  If no tables are included in the metadata and 
no tables are specified in a <code>JPEGImageWriteParam</code>, then 
an abbreviated stream is encoded using the \"standard\" visually 
lossless tables.  This class is necessary for specifying tables
when an abbreviated stream must be written without writing any tables
to a stream first.  In order to use this class, the metadata object
passed into the writer must contain no tables, and no stream metadata
must be provided.  See {@link JPEGQTable <code>JPEGQTable</code>} and
{@link JPEGHuffmanTable <code>JPEGHuffmanTable</code>} for more
information on the default tables.

<p> The default <code>JPEGImageWriteParam</code> returned by the
<code>getDefaultWriteParam</code> method of the writer contains no
tables.  Default tables are included in the default
<code>IIOMetadata</code> objects returned by the writer.

<p> If the metadata does contain tables, the tables given in a
<code>JPEGImageWriteParam</code> are ignored.  Furthermore, once a
set of tables has been written, only tables in the metadata can
override them for subsequent writes, whether to the same stream or
a different one.  In order to specify new tables using this class,
the {@link javax.imageio.ImageWriter#reset <code>reset</code>}
method of the writer must be called.

<p>
For more information about the operation of the built-in JPEG plug-ins,
see the <A HREF=\"../../metadata/doc-files/jpeg_metadata.html\">JPEG
metadata format specification and usage notes</A>.

@version 0.5"
      classrelation 2015771 // <generalisation>
	relation 2015771 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2015771 // <generalisation>
	  b parent class_ref 344219 // ImageWriteParam
      end

      classrelation 2015899 // qTables (<unidirectional association>)
	relation 2015899 --->
	  a role_name "qTables" multiplicity "[]" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2015899 // qTables (<unidirectional association>)
	  b parent class_ref 350619 // JPEGQTable
      end

      classrelation 2016027 // DCHuffmanTables (<unidirectional association>)
	relation 2016027 --->
	  a role_name "DCHuffmanTables" multiplicity "[]" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2016027 // DCHuffmanTables (<unidirectional association>)
	  b parent class_ref 350235 // JPEGHuffmanTable
      end

      classrelation 2016155 // ACHuffmanTables (<unidirectional association>)
	relation 2016155 --->
	  a role_name "ACHuffmanTables" multiplicity "[]" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2016155 // ACHuffmanTables (<unidirectional association>)
	  b parent class_ref 350235 // JPEGHuffmanTable
      end

      attribute 3008539 "optimizeHuffman"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3008667 "compressionNames"
	private explicit_type "String"
	multiplicity "[]"
	init_value "=  {\"JPEG\"}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3008795 "qualityVals"
	private explicit_type "float"
	multiplicity "[]"
	init_value "=  { 0.05F, 0.75F, 0.95F }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3008923 "qualityDescs"
	private explicit_type "String"
	multiplicity "[]"
	init_value "=  { \"Minimum useful\",    // .05
                                      \"Visually lossless\", // .75
                                      \"Maximum useful\"     // .95
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8202267 "JPEGImageWriteParam"
	public explicit_return_type ""
	nparams 1
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>JPEGImageWriteParam</code>.  Tiling is not
supported.  Progressive encoding is supported. The default
progressive mode is MODE_DISABLED.  A single form of compression,
named \"JPEG\", is supported.  The default compression quality is
0.75.

@param locale a <code>Locale</code> to be used by the
superclass to localize compression type names and quality
descriptions, or <code>null</code>."
      end

      operation 8202395 "unsetCompression"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes any previous compression quality setting.

<p> The default implementation resets the compression quality
to <code>0.75F</code>.

@exception IllegalStateException if the compression mode is not
<code>MODE_EXPLICIT</code>."
      end

      operation 8202523 "isCompressionLossless"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>false</code> since the JPEG plug-in only supports
lossy compression.

@return <code>false</code>.

@exception IllegalStateException if the compression mode is not
<code>MODE_EXPLICIT</code>."
      end

      operation 8202651 "getCompressionQualityDescriptions"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8202779 "getCompressionQualityValues"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8202907 "areTablesSet"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if tables are currently set.

@return <code>true</code> if tables are present."
      end

      operation 8203035 "setEncodeTables"
	public explicit_return_type "void"
	nparams 3
	  param inout name "qTables" type class_ref 350619 // JPEGQTable
	  param inout name "DCHuffmanTables" type class_ref 350235 // JPEGHuffmanTable
	  param inout name "ACHuffmanTables" type class_ref 350235 // JPEGHuffmanTable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the quantization and Huffman tables to use in encoding
abbreviated streams.  There may be a maximum of 4 tables of
each type.  These tables are ignored if tables are specified in
the metadata.  All arguments must be non-<code>null</code>.
The two arrays of Huffman tables must have the same number of
elements.  The table specifiers in the frame and scan headers
in the metadata are assumed to be equivalent to indices into
these arrays.  The argument arrays are copied by this method.

@param qTables An array of quantization table objects.
@param DCHuffmanTables An array of Huffman table objects.
@param ACHuffmanTables An array of Huffman table objects.

@exception IllegalArgumentException if any of the arguments
is <code>null</code> or has more than 4 elements, or if the
numbers of DC and AC tables differ.

@see #unsetEncodeTables"
      end

      operation 8203163 "unsetEncodeTables"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes any quantization and Huffman tables that are currently
set.

@see #setEncodeTables"
      end

      operation 8203291 "getQTables"
	public return_type class_ref 350619 // JPEGQTable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the array of quantization tables set on the
most recent call to <code>setEncodeTables</code>, or
<code>null</code> if tables are not currently set.

@return an array of <code>JPEGQTable</code> objects, or
<code>null</code>.

@see #setEncodeTables"
      end

      operation 8203419 "getDCHuffmanTables"
	public return_type class_ref 350235 // JPEGHuffmanTable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the array of DC Huffman tables set on the
most recent call to <code>setEncodeTables</code>, or
<code>null</code> if tables are not currently set.

@return an array of <code>JPEGHuffmanTable</code> objects, or
<code>null</code>.

@see #setEncodeTables"
      end

      operation 8203547 "getACHuffmanTables"
	public return_type class_ref 350235 // JPEGHuffmanTable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the array of AC Huffman tables set on the
most recent call to <code>setEncodeTables</code>, or
<code>null</code> if tables are not currently set.

@return an array of <code>JPEGHuffmanTable</code> objects, or
<code>null</code>.

@see #setEncodeTables"
      end

      operation 8203675 "setOptimizeHuffmanTables"
	public explicit_return_type "void"
	nparams 1
	  param inout name "optimize" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells the writer to generate optimized Huffman tables
for the image as part of the writing process.  The
default is <code>false</code>.  If this flag is set
to <code>true</code>, it overrides any tables specified
in the metadata.  Note that this means that any image
written with this flag set to <code>true</code> will
always contain Huffman tables.

@param optimize A boolean indicating whether to generate
optimized Huffman tables when writing.

@see #getOptimizeHuffmanTables"
      end

      operation 8203803 "getOptimizeHuffmanTables"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value passed into the most recent call
to <code>setOptimizeHuffmanTables</code>, or
<code>false</code> if <code>setOptimizeHuffmanTables</code>
has never been called.

@return <code>true</code> if the writer will generate optimized
Huffman tables.

@see #setOptimizeHuffmanTables"
      end
    end
  end

  deploymentview 169883 "jpeg"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 775963 "JPEGHuffmanTable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 350235 // JPEGHuffmanTable
      end
      comment "@(#)JPEGHuffmanTable.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


*********************************************************************
*********************************************************************
** COPYRIGHT (c) 1997-1998 Eastman Kodak Company.                 ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end

    artifact 776091 "JPEGImageReadParam"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.imageio.ImageReadParam;
${definition}"
      associated_classes
	class_ref 1027227 // JPEGImageReadParam
      end
      comment "@(#)JPEGImageReadParam.java	1.11 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 776219 "JPEGImageWriteParam"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Locale;
import javax.imageio.ImageWriteParam;
import com.sun.imageio.plugins.jpeg.JPEG;
${definition}"
      associated_classes
	class_ref 1027355 // JPEGImageWriteParam
      end
      comment "@(#)JPEGImageWriteParam.java	1.18 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 776347 "JPEGQTable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 350619 // JPEGQTable
      end
      comment "@(#)JPEGQTable.java	1.12 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


*********************************************************************
*********************************************************************
** COPYRIGHT (c) 1997-1998 Eastman Kodak Company.                 ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end
  end
end
