class BluecurveStyle
!!!2098203.java!!!	BluecurveStyle(inout style : DefaultSynthStyle)
        super(style);
!!!2098331.java!!!	BluecurveStyle(inout states : StateInfo, inout classSpecificValues : CircularIdentityList, inout font : Font, in xThickness : int, in yThickness : int, inout icons : GTKStockIconInfo)
        super(states, classSpecificValues, font, xThickness, yThickness,icons);
!!!2098459.java!!!	addTo(inout s : DefaultSynthStyle) : DefaultSynthStyle
        if (!(s instanceof BluecurveStyle)) {
            s = new BluecurveStyle(s);
        }
        BluecurveStyle style = (BluecurveStyle)super.addTo(s);
        return style;
!!!2098587.java!!!	clone() : Object
        return super.clone();
!!!2098715.java!!!	getEngine(inout context : SynthContext) : GTKEngine
        return BLUECURVE_ENGINE;
!!!2098843.java!!!	getDefaultColor(inout c : JComponent, inout id : Region, in state : int, inout type : ColorType) : Color
        int colorID = type.getID();
        if (colorID >= BluecurveColorType.MIN_ID &&
                      colorID <= BluecurveColorType.MAX_ID) {
            if (blueColors == null) {
                int min = BluecurveColorType.MIN_ID;
                Color base = getGTKColor(c, id, SynthConstants.SELECTED,
                                         GTKColorType.TEXT_BACKGROUND);
                Color bg = getGTKColor(c, id, SynthConstants.ENABLED,
                                       GTKColorType.BACKGROUND);

                blueColors = new Color[BluecurveColorType.MAX_ID - min + 1];
                blueColors[BluecurveColorType.OUTER.getID() - min] =
                    GTKColorType.adjustColor(base, 1.0f, .72f, .7f);
                blueColors[BluecurveColorType.INNER_LEFT.getID() - min] =
                    GTKColorType.adjustColor(base, 1.0f, 1.63f, 1.53f);
                blueColors[BluecurveColorType.TOP_GRADIENT.getID() - min] =
                    GTKColorType.adjustColor(base, 1.0f, .93f, .88f);
                blueColors[BluecurveColorType.BOTTOM_GRADIENT.getID() - min] =
                    GTKColorType.adjustColor(base, 1f, 1.16f,1.13f);
                blueColors[BluecurveColorType.INNER_RIGHT.getID() - min] =
                    GTKColorType.adjustColor(base, 1.0f, 1.06f, 1.08f);

                blueColors[BluecurveColorType.OUTER2.getID() - min] =
                    GTKColorType.adjustColor(bg, 1.0f, .67f, .67f);
                blueColors[BluecurveColorType.INNER_RIGHT2.getID() - min] =
                    GTKColorType.adjustColor(bg, 1.0f, .92f, .92f);

                blueColors[BluecurveColorType.OUTER3.getID() - min] =
                    GTKColorType.adjustColor(bg, 1.0f, .4f, .4f);

                blueColors[BluecurveColorType.OUTER4.getID() - min] =
                    GTKColorType.adjustColor(bg, 1.0f, .84f, .84f);

                blueColors[BluecurveColorType.OUTER5.getID() - min] =
                    GTKColorType.adjustColor(bg, 1.0f, .245f, .192f);
            }
            return blueColors[colorID - BluecurveColorType.MIN_ID];
        }
        return super.getDefaultColor(c, id, state, type);
!!!2098971.java!!!	toString() : String
        StringBuffer buf = new StringBuffer(super.toString());

        if (blueColors != null) {
            buf.append("\t" + BluecurveColorType.OUTER + "=" +
                       blueColors[BluecurveColorType.OUTER.getID() -
                                  BluecurveColorType.MIN_ID] + "\n");
            buf.append("\t" + BluecurveColorType.INNER_LEFT + "=" +
                       blueColors[BluecurveColorType.INNER_LEFT.getID() -
                                  BluecurveColorType.MIN_ID] + "\n");
            buf.append("\t" + BluecurveColorType.INNER_RIGHT + "=" +
                       blueColors[BluecurveColorType.INNER_RIGHT.getID() -
                                  BluecurveColorType.MIN_ID] + "\n");
            buf.append("\t" + BluecurveColorType.TOP_GRADIENT + "=" +
                       blueColors[BluecurveColorType.TOP_GRADIENT.getID() -
                                  BluecurveColorType.MIN_ID] + "\n");
            buf.append("\t" + BluecurveColorType.BOTTOM_GRADIENT + "=" +
                       blueColors[BluecurveColorType.BOTTOM_GRADIENT.getID() -
                                  BluecurveColorType.MIN_ID] + "\n");
            buf.append("\t" + BluecurveColorType.OUTER2 + "=" +
                       blueColors[BluecurveColorType.OUTER2.getID() -
                                  BluecurveColorType.MIN_ID] + "\n");
            buf.append("\t" + BluecurveColorType.INNER_RIGHT2 + "=" +
                       blueColors[BluecurveColorType.INNER_RIGHT2.getID() -
                                  BluecurveColorType.MIN_ID] + "\n");
            buf.append("\t" + BluecurveColorType.OUTER3 + "=" +
                       blueColors[BluecurveColorType.OUTER3.getID() -
                                  BluecurveColorType.MIN_ID] + "\n");
            buf.append("\t" + BluecurveColorType.OUTER4 + "=" +
                       blueColors[BluecurveColorType.OUTER4.getID() -
                                  BluecurveColorType.MIN_ID] + "\n");
            buf.append("\t" + BluecurveColorType.OUTER5 + "=" +
                       blueColors[BluecurveColorType.OUTER5.getID() -
                                  BluecurveColorType.MIN_ID] + "\n");
        }
        return buf.toString();
