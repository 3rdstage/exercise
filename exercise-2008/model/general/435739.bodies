class ApproveSelectionAction
!!!2626459.java!!!	ApproveSelectionAction()
	    super(FilePane.ACTION_APPROVE_SELECTION);
!!!2626587.java!!!	actionPerformed(inout e : ActionEvent) : void
	    if (isDirectorySelected()) {
		File dir = getDirectory();
		if (dir != null) {
		    try {
			// Strip trailing ".."
			dir = dir.getCanonicalFile();
		    } catch (IOException ex) {
			// Ok, use f as is
		    }
		    changeDirectory(dir);
		    return;
		}
	    }

	    JFileChooser chooser = getFileChooser();

	    String filename = getFileName();
	    FileSystemView fs = chooser.getFileSystemView();
	    File dir = chooser.getCurrentDirectory();

	    if (filename != null) {
		// Remove whitespace from beginning and end of filename
		filename = filename.trim();
	    }

	    if (filename == null || filename.equals("")) {
		// no file selected, multiple selection off, therefore cancel the approve action
		resetGlobFilter();
		return;
	    }

	    File selectedFile = null;
	    File[] selectedFiles = null;

	    if (filename != null && !filename.equals("")) {
		// Unix: Resolve '~' to user's home directory
		if (File.separatorChar == '/') {
		    if (filename.startsWith("~/")) {
			filename = System.getProperty("user.home") + filename.substring(1);
		    } else if (filename.equals("~")) {
			filename = System.getProperty("user.home");
		    }
		}

		if (chooser.isMultiSelectionEnabled() && filename.startsWith("\"")) {
		    ArrayList fList = new ArrayList();

		    filename = filename.substring(1);
		    if (filename.endsWith("\"")) {
			filename = filename.substring(0, filename.length()-1);
		    }
		    File[] children = null;
		    int childIndex = 0;
		    do {
			String str;
			int i = filename.indexOf("\" \"");
			if (i > 0) {
			    str = filename.substring(0, i);
			    filename = filename.substring(i+3);
			} else {
			    str = filename;
			    filename = "";
			}
			File file = fs.createFileObject(str);
			if (!file.isAbsolute()) {
			    if (children == null) {
				children = fs.getFiles(dir, false);
				Arrays.sort(children);
			    }
			    for (int k = 0; k < children.length; k++) {
				int l = (childIndex + k) % children.length;
				if (children[l].getName().equals(str)) {
				    file = children[l];
				    childIndex = l + 1;
				    break;
				}
			    }
			}
			fList.add(file);
		    } while (filename.length() > 0);
		    if (fList.size() > 0) {
			selectedFiles = (File[])fList.toArray(new File[fList.size()]);
		    }
		    resetGlobFilter();
		} else {
		    selectedFile = fs.createFileObject(filename);
		    if(!selectedFile.isAbsolute()) {
		       selectedFile = fs.getChild(dir, filename);
		    }
		    // check for wildcard pattern
		    FileFilter currentFilter = chooser.getFileFilter();
		    if (!selectedFile.exists() && isGlobPattern(filename)) {
			if (globFilter == null) {
			    globFilter = new GlobFilter();
			}
			try {
			    globFilter.setPattern(filename);
			    if (!(currentFilter instanceof GlobFilter)) {
				actualFileFilter = currentFilter;
			    }
			    chooser.setFileFilter(null);
			    chooser.setFileFilter(globFilter);
			    return;
			} catch (PatternSyntaxException pse) {
			    // Not a valid glob pattern. Abandon filter.
			}
		    }

		    resetGlobFilter();

		    // Check for directory change action
		    boolean isDir = (selectedFile != null && selectedFile.isDirectory());
		    boolean isTrav = (selectedFile != null && chooser.isTraversable(selectedFile));
		    boolean isDirSelEnabled = chooser.isDirectorySelectionEnabled();
		    boolean isFileSelEnabled = chooser.isFileSelectionEnabled();

		    if (isDir && isTrav && !isDirSelEnabled) {
			changeDirectory(selectedFile);
			return;
		    } else if ((isDir || !isFileSelEnabled)
			       && (!isDir || !isDirSelEnabled)
			       && (!isDirSelEnabled || selectedFile.exists())) {
			selectedFile = null;
		    }
		}
	    }
	    if (selectedFiles != null || selectedFile != null) {
		if (selectedFiles != null || chooser.isMultiSelectionEnabled()) {
		    if (selectedFiles == null) {
			selectedFiles = new File[] { selectedFile };
		    }
		    chooser.setSelectedFiles(selectedFiles);
		    // Do it again. This is a fix for bug 4949273 to force the
		    // selected value in case the ListSelectionModel clears it
		    // for non-existing file names.
		    chooser.setSelectedFiles(selectedFiles);
		} else {
		    chooser.setSelectedFile(selectedFile);
		}
		chooser.approveSelection();
	    } else {
		if (chooser.isMultiSelectionEnabled()) { 
		    chooser.setSelectedFiles(null);
		} else {
		    chooser.setSelectedFile(null);
		}
		chooser.cancelSelection();
	    }
