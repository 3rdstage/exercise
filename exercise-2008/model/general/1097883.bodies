class SerialBlob
!!!8810523.java!!!	SerialBlob(in b : byte)
    	
        len = b.length;                
        buf = new byte[(int)len];               
        for(int i = 0; i < len; i++) {
           buf[i] = b[i];
        }          
        origLen = len;
!!!8810651.java!!!	SerialBlob(inout blob : Blob)
    
        if (blob == null) {
            throw new SQLException("Cannot instantiate a SerialBlob " +
                 "object with a null Blob object");
        }
        
        len = blob.length();                       
        buf = blob.getBytes(1, (int)len );
        this.blob = blob;
        
         //if ( len < 10240000)
         // len = 10240000;          
        origLen = len;
!!!8810779.java!!!	getBytes(in pos : long, in length : int) : byte
        if (length > len) {
            length = (int)len;                
        }

        if (pos < 1 || length - pos < 0 ) {
            throw new SerialException("Invalid arguments: position cannot be less that 1");
        }      
        
        pos--; // correct pos to array index
      
        byte[] b = new byte[length];
        
        for (int i = 0; i < length; i++) {
            b[i] = this.buf[(int)pos];
            pos++;
        }
        return b;
!!!8810907.java!!!	length() : long
        return len;
!!!8811035.java!!!	getBinaryStream() : InputStream
            
         InputStream stream = new ByteArrayInputStream(buf);
         return (java.io.InputStream)stream;
!!!8811163.java!!!	position(in pattern : byte, in start : long) : long
                
        if (start < 1 || start > len) {
            return -1;
        } 

        int pos = (int)start-1; // internally Blobs are stored as arrays. 
        int i = 0;        
        long patlen = pattern.length;                
        
        while (pos < len) {     
            if (pattern[i] == buf[pos]) {                
                if (i + 1 == patlen) {
                    return (pos + 1) - (patlen - 1);
                }
                i++; pos++; // increment pos, and i
            } else if (pattern[i] != buf[pos]) {
                pos++; // increment pos only
            }                                    
        }        
        return -1; // not found
!!!8811291.java!!!	position(inout pattern : Blob, in start : long) : long
        return position(pattern.getBytes(1, (int)(pattern.length())), start);
!!!8811419.java!!!	setBytes(in pos : long, in bytes : byte) : int
        return (setBytes(pos, bytes, 0, bytes.length));
!!!8811547.java!!!	setBytes(in pos : long, in bytes : byte, in offset : int, in length : int) : int
        
        if (offset < 0 || offset > bytes.length) {
            throw new SerialException("Invalid offset in byte array set");
        }            
        
        if (pos < 1 || pos > this.length()) {
            throw new SerialException("Invalid position in BLOB object set");
        }
                    
        if ((long)(length) > origLen) {
	    throw new SerialException("Buffer is not sufficient to hold the value");
	}    
        
        if ((length + offset) > bytes.length) {  
            throw new SerialException("Invalid OffSet. Cannot have combined offset " +
                "and length that is greater that the Blob buffer");            
        }                                       
        
        int i = 0;
        pos--; // correct to array indexing
        while ( i < length || (offset + i +1) < (bytes.length-offset) ) {
            this.buf[(int)pos + i] = bytes[offset + i ]; 
            i++;
        }
        return i;        
!!!8811675.java!!!	setBinaryStream(in pos : long) : OutputStream
       
        if (this.blob.setBinaryStream(pos) != null) {
            return this.blob.setBinaryStream(pos);
        } else {
            throw new SerialException("Unsupported operation. SerialBlob cannot " +
                "return a writable binary stream, unless instantiated with a Blob object " +
                "that provides a setBinaryStream() implementation");
        }        
!!!8811803.java!!!	truncate(in length : long) : void
         
         if (length > len) {
            throw new SerialException
               ("Length more than what can be truncated");
         } else if((int)length == 0) { 
              buf = new byte[0];
              len = length;
         } else {      
              len = length;              
              buf = this.getBytes(1, (int)len);
         }  
