class LineNumberTable
!!!3647643.java!!!	LineNumberTable(inout c : LineNumberTable)
    this(c.getNameIndex(), c.getLength(), c.getLineNumberTable(),
	 c.getConstantPool());
!!!3647771.java!!!	LineNumberTable(in name_index : int, in length : int, inout line_number_table : LineNumber, inout constant_pool : ConstantPool)
    super(Constants.ATTR_LINE_NUMBER_TABLE, name_index, length, constant_pool);
    setLineNumberTable(line_number_table);
!!!3647899.java!!!	LineNumberTable(in name_index : int, in length : int, inout file : DataInputStream, inout constant_pool : ConstantPool)
    this(name_index, length, (LineNumber[])null, constant_pool);
    line_number_table_length = (file.readUnsignedShort());
    line_number_table = new LineNumber[line_number_table_length];

    for(int i=0; i < line_number_table_length; i++)
      line_number_table[i] = new LineNumber(file);
!!!3648027.java!!!	accept(inout v : Visitor) : void
    v.visitLineNumberTable(this);
!!!3648155.java!!!	dump(inout file : DataOutputStream) : void
    super.dump(file);
    file.writeShort(line_number_table_length);
    for(int i=0; i < line_number_table_length; i++)
      line_number_table[i].dump(file);
!!!3648283.java!!!	getLineNumberTable() : LineNumber
 return line_number_table;
!!!3648411.java!!!	setLineNumberTable(inout line_number_table : LineNumber) : void
    this.line_number_table = line_number_table;

    line_number_table_length = (line_number_table == null)? 0 :
      line_number_table.length;
!!!3648539.java!!!	toString() : String
    StringBuffer buf  = new StringBuffer();
    StringBuffer line = new StringBuffer();

    for(int i=0; i < line_number_table_length; i++) {
      line.append(line_number_table[i].toString());

      if(i < line_number_table_length - 1)
	line.append(", ");

      if(line.length() > 72) {
	line.append('\n');
	buf.append(line);
	line.setLength(0);
      }
    }

    buf.append(line);

    return buf.toString();    
!!!3648667.java!!!	getSourceLine(in pos : int) : int
    int l = 0, r = line_number_table_length-1;

    if(r < 0) // array is empty
      return -1;

    int min_index = -1, min=-1;
    
    /* Do a binary search since the array is ordered.
     */
    do {
      int i = (l + r) / 2;
      int j = line_number_table[i].getStartPC();

      if(j == pos)
	return line_number_table[i].getLineNumber();
      else if(pos < j) // else constrain search area
	r = i - 1;
      else // pos > j
	l = i + 1;

      /* If exact match can't be found (which is the most common case)
       * return the line number that corresponds to the greatest index less
       * than pos.
       */
      if(j < pos && j > min) {
        min       = j;
        min_index = i;
      }
    } while(l <= r);

    return line_number_table[min_index].getLineNumber();
!!!3648795.java!!!	copy(inout constant_pool : ConstantPool) : Attribute
    LineNumberTable c = (LineNumberTable)clone();

    c.line_number_table = new LineNumber[line_number_table_length];
    for(int i=0; i < line_number_table_length; i++)
      c.line_number_table[i] = line_number_table[i].copy();

    c.constant_pool = constant_pool;
    return c;
!!!3648923.java!!!	getTableLength() : int
 return line_number_table_length;
