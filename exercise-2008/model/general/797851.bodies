class EncodingInfo
!!!5670939.java!!!	EncodingInfo(in ianaName : String, in javaName : String, in lastPrintable : int)
        this.ianaName = ianaName;
        this.javaName = EncodingMap.getIANA2JavaMapping(ianaName);
        this.lastPrintable = lastPrintable;
		try{
			 nioCharset = Charset.forName(this.javaName);
			 if(nioCharset.canEncode())
			 	nioCharEncoder = nioCharset.newEncoder();
		}catch(IllegalCharsetNameException ie){
			nioCharset = null;
			nioCharEncoder = null;
		}catch(UnsupportedCharsetException ue){
			nioCharset = null;
			nioCharEncoder = null;
		}
!!!5671067.java!!!	getIANAName() : String
        return this.ianaName;
!!!5671195.java!!!	getWriter(inout output : OutputStream) : Writer
        // this should always be true!
        if (javaName != null) 
            return new OutputStreamWriter(output, javaName);
        javaName = EncodingMap.getIANA2JavaMapping(ianaName);
        if(javaName == null) 
            // use UTF-8 as preferred encoding
            return new OutputStreamWriter(output, "UTF8");
        return new OutputStreamWriter(output, javaName);
!!!5671323.java!!!	isPrintable(in ch : char) : boolean
        if(ch <= this.lastPrintable) 
            return true;
		if(nioCharEncoder != null)
			return nioCharEncoder.canEncode(ch);

		//We should not reach here , if we reach due to 
		//charset not supporting encoding then fgConvertersAvailable 
		//should take care of returning false.

        if(fCharToByteConverter == null) {
            if(fHaveTriedCToB || !fgConvertersAvailable) {
                // forget it; nothing we can do...
                return false;
            }
            if (fArgsForMethod == null) {
                fArgsForMethod = new Object [1];
            }
            // try and create it:
            try {
                fArgsForMethod[0] = javaName;
                fCharToByteConverter = fgGetConverterMethod.invoke(null, fArgsForMethod);
            } catch(Exception e) {   
                // don't try it again...
                fHaveTriedCToB = true;
                return false;
            }
        }
        try {
            fArgsForMethod[0] = new Character(ch);
            return ((Boolean) fgCanConvertMethod.invoke(fCharToByteConverter, fArgsForMethod)).booleanValue();
        } catch (Exception e) {
            // obviously can't use this converter; probably some kind of
            // security restriction
            fCharToByteConverter = null;
            fHaveTriedCToB = false;
            return false;
        }
!!!5671451.java!!!	testJavaEncodingName(in name : String) : void
        final byte [] bTest = {(byte)'v', (byte)'a', (byte)'l', (byte)'i', (byte)'d'};
        String s = new String(bTest, name);
