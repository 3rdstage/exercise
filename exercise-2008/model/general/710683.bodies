class AttrNSImpl
!!!4813723.java!!!	AttrNSImpl(inout ownerDocument : CoreDocumentImpl, in namespaceURI : String, in qualifiedName : String)

        super(ownerDocument, qualifiedName);
        setName(namespaceURI, qualifiedName);
!!!4813851.java!!!	setName(in namespaceURI : String, in qname : String) : void
        
        String prefix;
		// DOM Level 3: namespace URI is never empty string.
        this.namespaceURI = namespaceURI;
        if (namespaceURI !=null) {
  	        this.namespaceURI = (namespaceURI.length() == 0)? null
                                 : namespaceURI;

		}
		int colon1 = qname.indexOf(':');
		int colon2 = qname.lastIndexOf(':');
		ownerDocument().checkNamespaceWF(qname, colon1, colon2);
		if (colon1 < 0) {
			// there is no prefix
			localName = qname;
			ownerDocument().checkQName(null, localName);
			if (ownerDocument().errorChecking) {
				if (qname.equals("xmlns")
					&& (namespaceURI == null
						|| !namespaceURI.equals(NamespaceContext.XMLNS_URI))
					|| (namespaceURI!=null && namespaceURI.equals(NamespaceContext.XMLNS_URI)
						&& !qname.equals("xmlns"))) {
					String msg =
						DOMMessageFormatter.formatMessage(
							DOMMessageFormatter.DOM_DOMAIN,
							"NAMESPACE_ERR",
							null);
					throw new DOMException(DOMException.NAMESPACE_ERR, msg);
				}
			}
		}
		else {
			prefix = qname.substring(0, colon1);
			localName = qname.substring(colon2+1);
			ownerDocument().checkQName(prefix, localName);
            ownerDocument().checkDOMNSErr(prefix, namespaceURI);
        }
!!!4813979.java!!!	AttrNSImpl(inout ownerDocument : CoreDocumentImpl, in namespaceURI : String, in qualifiedName : String, in localName : String)
        super(ownerDocument, qualifiedName);
        
        this.localName = localName;
        this.namespaceURI = namespaceURI;
!!!4814107.java!!!	AttrNSImpl(inout ownerDocument : CoreDocumentImpl, in value : String)
        super(ownerDocument, value);
!!!4814235.java!!!	rename(in namespaceURI : String, in qualifiedName : String) : void
        if (needsSyncData()) {
            synchronizeData();
        }
	this.name = qualifiedName;
        setName(namespaceURI, qualifiedName);
!!!4814363.java!!!	setValues(inout ownerDocument : CoreDocumentImpl, in namespaceURI : String, in qualifiedName : String, in localName : String) : void

        super.textNode = null;
        super.flags = 0;
        isSpecified(true);
        hasStringValue(true);
        super.setOwnerDocument(ownerDocument);
        this.localName = localName;
        this.namespaceURI = namespaceURI;
        super.name = qualifiedName;
        super.value = null;
!!!4814491.java!!!	getNamespaceURI() : String
        if (needsSyncData()) {
            synchronizeData();
        }
        // REVIST: This code could/should be done at a lower-level, such that
        // the namespaceURI is set properly upon creation. However, there still
        // seems to be some DOM spec interpretation grey-area.
        return namespaceURI;
!!!4814619.java!!!	getPrefix() : String
        if (needsSyncData()) {
            synchronizeData();
        }
        int index = name.indexOf(':');
        return index < 0 ? null : name.substring(0, index); 
!!!4814747.java!!!	setPrefix(in prefix : String) : void
        if (needsSyncData()) {
            synchronizeData();
        }
        if (ownerDocument().errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
            }
            if (prefix != null && prefix.length() != 0) {

                if (!CoreDocumentImpl.isXMLName(prefix,ownerDocument().isXML11Version())) {
                    String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_CHARACTER_ERR", null);
                    throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
                }
                if (namespaceURI == null || prefix.indexOf(':') >=0) {
                    String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NAMESPACE_ERR", null);
                    throw new DOMException(DOMException.NAMESPACE_ERR, msg);
               
                }
               if (prefix.equals("xmlns")) {
                    if (!namespaceURI.equals(xmlnsURI)){
                        String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NAMESPACE_ERR", null);
                        throw new DOMException(DOMException.NAMESPACE_ERR, msg);
                    }
                } else if (prefix.equals("xml")) {
                    if (!namespaceURI.equals(xmlURI)) {
                        String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NAMESPACE_ERR", null);
                        throw new DOMException(DOMException.NAMESPACE_ERR, msg);
                    }
                }else if (name.equals("xmlns")) {
                    String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NAMESPACE_ERR", null);
                    throw new DOMException(DOMException.NAMESPACE_ERR, msg);
                }
            } 
        }

        // update node name with new qualifiedName
        if (prefix !=null && prefix.length() != 0) {
            name = prefix + ":" + localName;
        }
        else {
            name = localName;
        }
!!!4814875.java!!!	getLocalName() : String
        if (needsSyncData()) {
            synchronizeData();
        }
        return localName;
!!!4815003.java!!!	isDerivedFrom(in typeNamespaceArg : String, in typeNameArg : String, in derivationMethod : int) : boolean
        
        //REVISIT: XSSimpleTypeDecl.derivedFrom and 
        //derivationMethod constants in DOM vs Xerces
        if (type !=null){
            if (type instanceof XSSimpleTypeDecl){
                return ((XSSimpleTypeDecl)type).derivedFrom(typeNamespaceArg,typeNameArg,(short)derivationMethod);
            }
        }                                	
        return false;
!!!4815131.java!!!	getTypeNamespace() : String
        if (type !=null) {
            if (type instanceof XSSimpleTypeDecl){
                return ((XSSimpleTypeDecl)type).getNamespace();
            }
            return DTD_URI;
        }
        return null;
