class GIOPVersion
!!!1832347.java!!!	GIOPVersion(in majorB : byte, in minorB : byte)
        this.major = majorB;
        this.minor = minorB;
!!!1832475.java!!!	GIOPVersion(in major : int, in minor : int)
        this.major = (byte)major;
        this.minor = (byte)minor;
!!!1832603.java!!!	getMajor() : byte
        return this.major;
!!!1832731.java!!!	getMinor() : byte
        return this.minor;
!!!1832859.java!!!	equals(inout gv : GIOPVersion) : boolean
        return gv.major == this.major && gv.minor == this.minor ;
!!!1832987.java!!!	equals(inout obj : Object) : boolean
        if (obj != null && (obj instanceof GIOPVersion))
            return equals((GIOPVersion)obj);
        else
            return false;
!!!1833115.java!!!	hashCode() : int
	return 37*major + minor ;
!!!1833243.java!!!	lessThan(inout gv : GIOPVersion) : boolean
        if (this.major < gv.major) {
            return true;
        } else if (this.major == gv.major) {
            if (this.minor < gv.minor) {
                return true;
            }
        }

        return false;
!!!1833371.java!!!	intValue() : int
        return (major << 8 | minor);
!!!1833499.java!!!	toString() : String
        return major + "." + minor;
!!!1833627.java!!!	getInstance(in major : byte, in minor : byte) : GIOPVersion
        switch(((major << 8) | minor)) {
            case VERSION_1_0:
                return GIOPVersion.V1_0;
            case VERSION_1_1:
                return GIOPVersion.V1_1;
            case VERSION_1_2:
                return GIOPVersion.V1_2;
            case VERSION_1_3:
                return GIOPVersion.V1_3;
            case VERSION_13_XX:
                return GIOPVersion.V13_XX;
            default:
                return new GIOPVersion(major, minor);
        }
!!!1833755.java!!!	parseVersion(in s : String) : GIOPVersion
        int dotIdx = s.indexOf('.');

        if (dotIdx < 1 || dotIdx == s.length() - 1)
            throw new NumberFormatException("GIOP major, minor, and decimal point required: " + s);

        int major = Integer.parseInt(s.substring(0, dotIdx));
        int minor = Integer.parseInt(s.substring(dotIdx + 1, s.length()));

        return GIOPVersion.getInstance((byte)major, (byte)minor);
!!!1833883.java!!!	chooseRequestVersion(inout orb : ORB, inout ior : IOR) : GIOPVersion

        GIOPVersion orbVersion = orb.getORBData().getGIOPVersion();
	IIOPProfile prof = ior.getProfile() ;
        GIOPVersion profVersion = prof.getGIOPVersion();

        // Check if the profile is from a legacy Sun ORB.

        ORBVersion targetOrbVersion = prof.getORBVersion();
        if (!(targetOrbVersion.equals(ORBVersionFactory.getFOREIGN())) &&
                targetOrbVersion.lessThan(ORBVersionFactory.getNEWER())) {
            // we are dealing with a SUN legacy orb which emits 1.1 IORs,
            // in spite of being able to handle only GIOP 1.0 messages.
            return V1_0;
        }

        // Now the target has to be (FOREIGN | NEWER*)

        byte prof_major = profVersion.getMajor();
        byte prof_minor = profVersion.getMinor();

        byte orb_major = orbVersion.getMajor();
        byte orb_minor = orbVersion.getMinor();

        if (orb_major < prof_major) {
            return orbVersion;
        } else if (orb_major > prof_major) {
            return profVersion;
        } else { // both major version are the same
            if (orb_minor <= prof_minor) {
                return orbVersion;
            } else {
                return profVersion;
            }
        }
!!!1834011.java!!!	supportsIORIIOPProfileComponents() : boolean
        return getMinor() > 0 || getMajor() > 1;
!!!1834139.java!!!	read(inout istream : InputStream) : void
        this.major = istream.read_octet();
        this.minor = istream.read_octet();
!!!1834267.java!!!	write(inout ostream : OutputStream) : void
        ostream.write_octet(this.major);
        ostream.write_octet(this.minor);
