class LiteralAttribute
!!!4386971.java!!!	LiteralAttribute(in name : String, in value : String, inout parser : Parser, inout parent : SyntaxTreeNode)
   	_name = name;
        setParent(parent);
	_value = AttributeValue.create(this, value, parser);
!!!4387099.java!!!	display(in indent : int) : void
	indent(indent);
	Util.println("LiteralAttribute name=" + _name + " value=" + _value);
!!!4387227.java!!!	typeCheck(inout stable : SymbolTable) : Type
	_value.typeCheck(stable);
	typeCheckContents(stable);
	return Type.Void;
!!!4387355.java!!!	contextDependent() : boolean
	return _value.contextDependent();
!!!4387483.java!!!	translate(inout classGen : ClassGenerator, inout methodGen : MethodGenerator) : void
	final ConstantPoolGen cpg = classGen.getConstantPool();
	final InstructionList il = methodGen.getInstructionList();

	// push handler
	il.append(methodGen.loadHandler());
	// push attribute name - namespace prefix set by parent node
	il.append(new PUSH(cpg, _name));
	// push attribute value
	_value.translate(classGen, methodGen);
	
	// Generate code that calls SerializationHandler.addUniqueAttribute()
	// if all attributes are unique.
	SyntaxTreeNode parent = getParent();
	if (parent instanceof LiteralElement
	    && ((LiteralElement)parent).allAttributesUnique()) {	    
	    
	    int flags = 0;
	    boolean isHTMLAttrEmpty = false;
	    ElemDesc elemDesc = ((LiteralElement)parent).getElemDesc();
	    
	    // Set the HTML flags
	    if (elemDesc != null) {
	    	if (elemDesc.isAttrFlagSet(_name, ElemDesc.ATTREMPTY)) {
	    	    flags = flags | SerializationHandler.HTML_ATTREMPTY;
	    	    isHTMLAttrEmpty = true;
	    	}
	    	else if (elemDesc.isAttrFlagSet(_name, ElemDesc.ATTRURL)) {
	    	    flags = flags | SerializationHandler.HTML_ATTRURL;
	    	}
	    }
	    
	    if (_value instanceof SimpleAttributeValue) {
	        String attrValue = ((SimpleAttributeValue)_value).toString();
	        
	        if (!hasBadChars(attrValue) && !isHTMLAttrEmpty) {
	            flags = flags | SerializationHandler.NO_BAD_CHARS;
	        }
	    }
	        
	    il.append(new PUSH(cpg, flags));
	    il.append(methodGen.uniqueAttribute());
	}
	else {
	    // call attribute
	    il.append(methodGen.attribute());
	}
!!!4387611.java!!!	hasBadChars(in value : String) : boolean
    	char[] chars = value.toCharArray();
    	int size = chars.length;
    	for (int i = 0; i < size; i++) {
    	    char ch = chars[i];
    	    if (ch < 32 || 126 < ch || ch == '<' || ch == '>' || ch == '&' || ch == '\"')
                return true;    	        
    	}
    	return false;
!!!4387739.java!!!	getName() : String
        return _name;
!!!4387867.java!!!	getValue() : AttributeValue
        return _value;
