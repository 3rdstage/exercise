class DirectByteBufferR
!!!7383323.java!!!	DirectByteBufferR(in cap : int)
			// package-private




















	super(cap);

!!!7383451.java!!!	DirectByteBufferR(in cap : int, in addr : long, inout unmapper : Runnable)







	super(cap, addr, unmapper);

!!!7383579.java!!!	DirectByteBufferR(inout db : DirectBuffer, in mark : int, in pos : int, in lim : int, in cap : int, in off : int)









	super(db, mark, pos, lim, cap, off);

!!!7383707.java!!!	slice() : ByteBuffer

	int pos = this.position();
	int lim = this.limit();
	assert (pos <= lim);
	int rem = (pos <= lim ? lim - pos : 0);
	int off = (pos << 0);
        assert (off >= 0);
	return new DirectByteBufferR(this, -1, 0, rem, rem, off);
!!!7383835.java!!!	duplicate() : ByteBuffer

	return new DirectByteBufferR(this,
					      this.markValue(),
					      this.position(),
					      this.limit(),
					      this.capacity(),
					      0);
!!!7383963.java!!!	asReadOnlyBuffer() : ByteBuffer









	return duplicate();

!!!7384091.java!!!	put(in x : byte) : ByteBuffer





	throw new ReadOnlyBufferException();

!!!7384219.java!!!	put(in i : int, in x : byte) : ByteBuffer





	throw new ReadOnlyBufferException();

!!!7384347.java!!!	put(inout src : ByteBuffer) : ByteBuffer





































	throw new ReadOnlyBufferException();

!!!7384475.java!!!	put(in src : byte, in offset : int, in length : int) : ByteBuffer























	throw new ReadOnlyBufferException();

!!!7384603.java!!!	compact() : ByteBuffer












	throw new ReadOnlyBufferException();

!!!7384731.java!!!	isDirect() : boolean

	return true;
!!!7384859.java!!!	isReadOnly() : boolean

	return true;
!!!7384987.java!!!	_get(in i : int) : byte
				// package-private
	return unsafe.getByte(address + i);
!!!7385115.java!!!	_put(in i : int, in b : byte) : void
			// package-private



	throw new ReadOnlyBufferException();

!!!7385243.java!!!	putChar(in a : long, in x : char) : ByteBuffer










	throw new ReadOnlyBufferException();

!!!7385371.java!!!	putChar(in x : char) : ByteBuffer





	throw new ReadOnlyBufferException();

!!!7385499.java!!!	putChar(in i : int, in x : char) : ByteBuffer





	throw new ReadOnlyBufferException();

!!!7385627.java!!!	asCharBuffer() : CharBuffer

	int off = this.position();
	int lim = this.limit();
	assert (off <= lim);
	int rem = (off <= lim ? lim - off : 0);

	int size = rem >> 1;
 	if (!unaligned && ((address + off) % (1 << 1) != 0)) {
	    return (bigEndian
		    ? (CharBuffer)(new ByteBufferAsCharBufferRB(this,
								       -1,
								       0,
								       size,
								       size,
								       off))
		    : (CharBuffer)(new ByteBufferAsCharBufferRL(this,
								       -1,
								       0,
								       size,
								       size,
								       off)));
	} else {
	    return (nativeByteOrder
		    ? (CharBuffer)(new DirectCharBufferRU(this,
								 -1,
								 0,
								 size,
								 size,
								 off))
		    : (CharBuffer)(new DirectCharBufferRS(this,
								 -1,
								 0,
								 size,
								 size,
								 off)));
	}
!!!7385755.java!!!	putShort(in a : long, in x : short) : ByteBuffer










	throw new ReadOnlyBufferException();

!!!7385883.java!!!	putShort(in x : short) : ByteBuffer





	throw new ReadOnlyBufferException();

!!!7386011.java!!!	putShort(in i : int, in x : short) : ByteBuffer





	throw new ReadOnlyBufferException();

!!!7386139.java!!!	asShortBuffer() : ShortBuffer

	int off = this.position();
	int lim = this.limit();
	assert (off <= lim);
	int rem = (off <= lim ? lim - off : 0);

	int size = rem >> 1;
 	if (!unaligned && ((address + off) % (1 << 1) != 0)) {
	    return (bigEndian
		    ? (ShortBuffer)(new ByteBufferAsShortBufferRB(this,
								       -1,
								       0,
								       size,
								       size,
								       off))
		    : (ShortBuffer)(new ByteBufferAsShortBufferRL(this,
								       -1,
								       0,
								       size,
								       size,
								       off)));
	} else {
	    return (nativeByteOrder
		    ? (ShortBuffer)(new DirectShortBufferRU(this,
								 -1,
								 0,
								 size,
								 size,
								 off))
		    : (ShortBuffer)(new DirectShortBufferRS(this,
								 -1,
								 0,
								 size,
								 size,
								 off)));
	}
!!!7386267.java!!!	putInt(in a : long, in x : int) : ByteBuffer










	throw new ReadOnlyBufferException();

!!!7386395.java!!!	putInt(in x : int) : ByteBuffer





	throw new ReadOnlyBufferException();

!!!7386523.java!!!	putInt(in i : int, in x : int) : ByteBuffer





	throw new ReadOnlyBufferException();

!!!7386651.java!!!	asIntBuffer() : IntBuffer

	int off = this.position();
	int lim = this.limit();
	assert (off <= lim);
	int rem = (off <= lim ? lim - off : 0);

	int size = rem >> 2;
 	if (!unaligned && ((address + off) % (1 << 2) != 0)) {
	    return (bigEndian
		    ? (IntBuffer)(new ByteBufferAsIntBufferRB(this,
								       -1,
								       0,
								       size,
								       size,
								       off))
		    : (IntBuffer)(new ByteBufferAsIntBufferRL(this,
								       -1,
								       0,
								       size,
								       size,
								       off)));
	} else {
	    return (nativeByteOrder
		    ? (IntBuffer)(new DirectIntBufferRU(this,
								 -1,
								 0,
								 size,
								 size,
								 off))
		    : (IntBuffer)(new DirectIntBufferRS(this,
								 -1,
								 0,
								 size,
								 size,
								 off)));
	}
!!!7386779.java!!!	putLong(in a : long, in x : long) : ByteBuffer










	throw new ReadOnlyBufferException();

!!!7386907.java!!!	putLong(in x : long) : ByteBuffer





	throw new ReadOnlyBufferException();

!!!7387035.java!!!	putLong(in i : int, in x : long) : ByteBuffer





	throw new ReadOnlyBufferException();

!!!7387163.java!!!	asLongBuffer() : LongBuffer

	int off = this.position();
	int lim = this.limit();
	assert (off <= lim);
	int rem = (off <= lim ? lim - off : 0);

	int size = rem >> 3;
 	if (!unaligned && ((address + off) % (1 << 3) != 0)) {
	    return (bigEndian
		    ? (LongBuffer)(new ByteBufferAsLongBufferRB(this,
								       -1,
								       0,
								       size,
								       size,
								       off))
		    : (LongBuffer)(new ByteBufferAsLongBufferRL(this,
								       -1,
								       0,
								       size,
								       size,
								       off)));
	} else {
	    return (nativeByteOrder
		    ? (LongBuffer)(new DirectLongBufferRU(this,
								 -1,
								 0,
								 size,
								 size,
								 off))
		    : (LongBuffer)(new DirectLongBufferRS(this,
								 -1,
								 0,
								 size,
								 size,
								 off)));
	}
!!!7387291.java!!!	putFloat(in a : long, in x : float) : ByteBuffer










	throw new ReadOnlyBufferException();

!!!7387419.java!!!	putFloat(in x : float) : ByteBuffer





	throw new ReadOnlyBufferException();

!!!7387547.java!!!	putFloat(in i : int, in x : float) : ByteBuffer





	throw new ReadOnlyBufferException();

!!!7387675.java!!!	asFloatBuffer() : FloatBuffer

	int off = this.position();
	int lim = this.limit();
	assert (off <= lim);
	int rem = (off <= lim ? lim - off : 0);

	int size = rem >> 2;
 	if (!unaligned && ((address + off) % (1 << 2) != 0)) {
	    return (bigEndian
		    ? (FloatBuffer)(new ByteBufferAsFloatBufferRB(this,
								       -1,
								       0,
								       size,
								       size,
								       off))
		    : (FloatBuffer)(new ByteBufferAsFloatBufferRL(this,
								       -1,
								       0,
								       size,
								       size,
								       off)));
	} else {
	    return (nativeByteOrder
		    ? (FloatBuffer)(new DirectFloatBufferRU(this,
								 -1,
								 0,
								 size,
								 size,
								 off))
		    : (FloatBuffer)(new DirectFloatBufferRS(this,
								 -1,
								 0,
								 size,
								 size,
								 off)));
	}
!!!7387803.java!!!	putDouble(in a : long, in x : double) : ByteBuffer










	throw new ReadOnlyBufferException();

!!!7387931.java!!!	putDouble(in x : double) : ByteBuffer





	throw new ReadOnlyBufferException();

!!!7388059.java!!!	putDouble(in i : int, in x : double) : ByteBuffer





	throw new ReadOnlyBufferException();

!!!7388187.java!!!	asDoubleBuffer() : DoubleBuffer

	int off = this.position();
	int lim = this.limit();
	assert (off <= lim);
	int rem = (off <= lim ? lim - off : 0);

	int size = rem >> 3;
 	if (!unaligned && ((address + off) % (1 << 3) != 0)) {
	    return (bigEndian
		    ? (DoubleBuffer)(new ByteBufferAsDoubleBufferRB(this,
								       -1,
								       0,
								       size,
								       size,
								       off))
		    : (DoubleBuffer)(new ByteBufferAsDoubleBufferRL(this,
								       -1,
								       0,
								       size,
								       size,
								       off)));
	} else {
	    return (nativeByteOrder
		    ? (DoubleBuffer)(new DirectDoubleBufferRU(this,
								 -1,
								 0,
								 size,
								 size,
								 off))
		    : (DoubleBuffer)(new DirectDoubleBufferRS(this,
								 -1,
								 0,
								 size,
								 size,
								 off)));
	}
