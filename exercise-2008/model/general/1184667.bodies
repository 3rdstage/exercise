class SynthProgressBarUI
!!!9714843.java!!!	createUI(inout x : JComponent) : ComponentUI
        return new SynthProgressBarUI();
!!!9714971.java!!!	installListeners() : void
        super.installListeners();
        progressBar.addPropertyChangeListener(this);
!!!9715099.java!!!	uninstallListeners() : void
        super.uninstallListeners();
        progressBar.removePropertyChangeListener(this);
!!!9715227.java!!!	installDefaults() : void
        updateStyle(progressBar);
!!!9715355.java!!!	updateStyle(inout c : JProgressBar) : void
        SynthContext context = getContext(c, ENABLED);
        SynthStyle oldStyle = style;
        style = SynthLookAndFeel.updateStyle(context, this);
        if (style != oldStyle) {
            setCellLength(style.getInt(context, "ProgressBar.cellLength", 1));
            setCellSpacing(style.getInt(context, "ProgressBar.cellSpacing", 0));
            progressPadding = style.getInt(context,
                    "ProgressBar.progressPadding", 0);
        }
        context.dispose();
!!!9715483.java!!!	uninstallDefaults() : void
        SynthContext context = getContext(progressBar, ENABLED);

        style.uninstallDefaults(context);
        context.dispose();
        style = null;
!!!9715611.java!!!	getContext(inout c : JComponent) : SynthContext
        return getContext(c, getComponentState(c));
!!!9715739.java!!!	getContext(inout c : JComponent, in state : int) : SynthContext
        return SynthContext.getContext(SynthContext.class, c,
                            SynthLookAndFeel.getRegion(c), style, state);
!!!9715867.java!!!	getRegion(inout c : JComponent) : Region
        return SynthLookAndFeel.getRegion(c);
!!!9715995.java!!!	getComponentState(inout c : JComponent) : int
        return SynthLookAndFeel.getComponentState(c);
!!!9716123.java!!!	update(inout g : Graphics, inout c : JComponent) : void
        SynthContext context = getContext(c);

        SynthLookAndFeel.update(context, g);
        context.getPainter().paintProgressBarBackground(context,
                          g, 0, 0, c.getWidth(), c.getHeight());
        paint(context, g);
        context.dispose();
!!!9716251.java!!!	paint(inout g : Graphics, inout c : JComponent) : void
        SynthContext context = getContext(c);

        paint(context, g);
        context.dispose();
!!!9716379.java!!!	paint(inout context : SynthContext, inout g : Graphics) : void
        JProgressBar pBar = (JProgressBar)context.getComponent();
        int x = 0, y = 0, width = 0, height = 0; 
        if (!pBar.isIndeterminate()) {
            Insets pBarInsets = pBar.getInsets();
            double percentComplete = pBar.getPercentComplete();
            if (percentComplete != 0.0) {
                if (pBar.getOrientation() == JProgressBar.HORIZONTAL) {
                    x = pBarInsets.left + progressPadding;
                    y = pBarInsets.top + progressPadding;
                    width = (int)(percentComplete * (pBar.getWidth() 
                            - (pBarInsets.left + progressPadding 
                             + pBarInsets.right + progressPadding)));
                    height = pBar.getHeight() 
                            - (pBarInsets.top + progressPadding 
                             + pBarInsets.bottom + progressPadding);

                    if (!SynthLookAndFeel.isLeftToRight(pBar)) {
                        x = pBar.getWidth() - pBarInsets.right - width 
                                - progressPadding;
                    }
                } else {  // JProgressBar.VERTICAL
                    x = pBarInsets.left + progressPadding;
                    width = pBar.getWidth() 
                            - (pBarInsets.left + progressPadding 
                            + pBarInsets.right + progressPadding);
                    height = (int)(percentComplete * (pBar.getHeight()
                            - (pBarInsets.top + progressPadding
                             + pBarInsets.bottom + progressPadding)));
                    y = pBar.getHeight() - pBarInsets.bottom - height 
                            - progressPadding;

                    // When the progress bar is vertical we always paint
                    // from bottom to top, not matter what the component
                    // orientation is.
                }
            }
        } else {
            boxRect = getBox(boxRect);
            x = boxRect.x + progressPadding;
            y = boxRect.y + progressPadding;
            width = boxRect.width - progressPadding - progressPadding;
            height = boxRect.height - progressPadding - progressPadding;
        }
        context.getPainter().paintProgressBarForeground(context, g,
                x, y, width, height, pBar.getOrientation());

        if (pBar.isStringPainted() && !pBar.isIndeterminate()) {
            paintText(context, g, pBar.getString());
        }
!!!9716507.java!!!	paintText(inout context : SynthContext, inout g : Graphics, in title : String) : void
        Font font = context.getStyle().getFont(context);
        FontMetrics metrics = SwingUtilities2.getFontMetrics(progressBar, g,
                                                             font);

        if (progressBar.isStringPainted()) {
            String pBarString = progressBar.getString();
            Rectangle bounds = progressBar.getBounds();
            int strLength = context.getStyle().getGraphicsUtils(context).
                computeStringWidth(context, font, metrics, pBarString);

            // Calculate the bounds for the text.
            Rectangle textRect = new Rectangle(
                (bounds.width / 2) - (strLength / 2),
                (bounds.height -
                    (metrics.getAscent() + metrics.getDescent())) / 2,
                0, 0);

            // Progress bar isn't tall enough for the font.  Don't paint it.
            if (textRect.y < 0) {
                return;
            }

            // Paint the text.
            SynthStyle style = context.getStyle();
            g.setColor(style.getColor(context, ColorType.TEXT_FOREGROUND));
            g.setFont(style.getFont(context));
            style.getGraphicsUtils(context).paintText(context, g, title,
                                                 textRect.x, textRect.y, -1);
        }
!!!9716635.java!!!	paintBorder(inout context : SynthContext, inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        context.getPainter().paintProgressBarBorder(context, g, x, y, w, h);
!!!9716763.java!!!	propertyChange(inout e : PropertyChangeEvent) : void
        if (SynthLookAndFeel.shouldUpdateStyle(e)) {
            updateStyle((JProgressBar)e.getSource());
        }
!!!9716891.java!!!	getPreferredSize(inout c : JComponent) : Dimension
       
        Dimension	size;
        Insets		border = progressBar.getInsets();
        FontMetrics     fontSizer = progressBar.getFontMetrics(
                                                  progressBar.getFont());
        if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {
            size = new Dimension(getPreferredInnerHorizontal());   
        } else {
            size = new Dimension(getPreferredInnerVertical());
        }
        // Ensure that the progress string will fit.
        if (progressBar.isStringPainted()) {
            String progString = progressBar.getString();
            int stringHeight = fontSizer.getHeight() +
                    fontSizer.getDescent();
            if (stringHeight > size.height) {
                size.height = stringHeight;
            }
            // This is also for completeness.
            int stringWidth = SwingUtilities2.stringWidth(
                                   progressBar, fontSizer, progString);
            if (stringWidth > size.width) {
                size.width = stringWidth;
            }
        }       

        size.width += border.left + border.right;
        size.height += border.top + border.bottom;
        
        return size; 
