class OpMap
!!!5990043.java!!!	toString() : String
    return m_currentPattern;
!!!5990171.java!!!	getPatternString() : String
    return m_currentPattern;
!!!5990299.java!!!	getTokenQueue() : ObjectVector
    return m_tokenQueue;
!!!5990427.java!!!	getToken(in pos : int) : Object
    return m_tokenQueue.elementAt(pos);
!!!5990555.java!!!	getTokenQueueSize() : int
    return m_tokenQueue.size();
    
!!!5990683.java!!!	getOpMap() : OpMapVector
    return m_opMap;
!!!5990811.java!!!	shrink() : void

    int n = m_opMap.elementAt(MAPINDEX_LENGTH);
    m_opMap.setToSize(n + 4);

    m_opMap.setElementAt(0,n);
    m_opMap.setElementAt(0,n+1);
    m_opMap.setElementAt(0,n+2);


    n = m_tokenQueue.size();
    m_tokenQueue.setToSize(n + 4);

    m_tokenQueue.setElementAt(null,n);
    m_tokenQueue.setElementAt(null,n + 1);
    m_tokenQueue.setElementAt(null,n + 2);
!!!5990939.java!!!	getOp(in opPos : int) : int
    return m_opMap.elementAt(opPos);
!!!5991067.java!!!	setOp(in opPos : int, in value : int) : void
     m_opMap.setElementAt(value,opPos);
!!!5991195.java!!!	getNextOpPos(in opPos : int) : int
    return opPos + m_opMap.elementAt(opPos + 1);
!!!5991323.java!!!	getNextStepPos(in opPos : int) : int

    int stepType = getOp(opPos);

    if ((stepType >= OpCodes.AXES_START_TYPES)
            && (stepType <= OpCodes.AXES_END_TYPES))
    {
      return getNextOpPos(opPos);
    }
    else if ((stepType >= OpCodes.FIRST_NODESET_OP)
             && (stepType <= OpCodes.LAST_NODESET_OP))
    {
      int newOpPos = getNextOpPos(opPos);

      while (OpCodes.OP_PREDICATE == getOp(newOpPos))
      {
        newOpPos = getNextOpPos(newOpPos);
      }

      stepType = getOp(newOpPos);

      if (!((stepType >= OpCodes.AXES_START_TYPES)
            && (stepType <= OpCodes.AXES_END_TYPES)))
      {
        return OpCodes.ENDOP;
      }

      return newOpPos;
    }
    else
    {
      throw new RuntimeException(
        XSLMessages.createXPATHMessage(XPATHErrorResources.ER_UNKNOWN_STEP, new Object[]{new Integer(stepType).toString()})); 
      //"Programmer's assertion in getNextStepPos: unknown stepType: " + stepType);
    }
!!!5991451.java!!!	getNextOpPos(in opMap : int, in opPos : int) : int
    return opPos + opMap[opPos + 1];
!!!5991579.java!!!	getFirstPredicateOpPos(in opPos : int) : int

    int stepType = m_opMap.elementAt(opPos);

    if ((stepType >= OpCodes.AXES_START_TYPES)
            && (stepType <= OpCodes.AXES_END_TYPES))
    {
      return opPos + m_opMap.elementAt(opPos + 2);
    }
    else if ((stepType >= OpCodes.FIRST_NODESET_OP)
             && (stepType <= OpCodes.LAST_NODESET_OP))
    {
      return opPos + m_opMap.elementAt(opPos + 1);
    }
    else if(-2 == stepType)
    {
      return -2;
    }
    else
    {
      error(com.sun.org.apache.xpath.internal.res.XPATHErrorResources.ER_UNKNOWN_OPCODE,
            new Object[]{ String.valueOf(stepType) });  //"ERROR! Unknown op code: "+m_opMap[opPos]);
      return -1;
    }
!!!5991707.java!!!	error(in msg : String, inout args : Object) : void

    java.lang.String fmsg = com.sun.org.apache.xalan.internal.res.XSLMessages.createXPATHMessage(msg, args);
    

    throw new javax.xml.transform.TransformerException(fmsg);
!!!5991835.java!!!	getFirstChildPos(in opPos : int) : int
    return opPos + 2;
!!!5991963.java!!!	getArgLength(in opPos : int) : int
    return m_opMap.elementAt(opPos + MAPINDEX_LENGTH);
!!!5992091.java!!!	getArgLengthOfStep(in opPos : int) : int
    return m_opMap.elementAt(opPos + MAPINDEX_LENGTH + 1) - 3;
!!!5992219.java!!!	getFirstChildPosOfStep(in opPos : int) : int
    return opPos + 3;
!!!5992347.java!!!	getStepTestType(in opPosOfStep : int) : int
    return m_opMap.elementAt(opPosOfStep + 3);  // skip past op, len, len without predicates
!!!5992475.java!!!	getStepNS(in opPosOfStep : int) : String

    int argLenOfStep = getArgLengthOfStep(opPosOfStep);

    // System.out.println("getStepNS.argLenOfStep: "+argLenOfStep);
    if (argLenOfStep == 3)
    {
      int index = m_opMap.elementAt(opPosOfStep + 4);

      if (index >= 0)
        return (String) m_tokenQueue.elementAt(index);
      else if (OpCodes.ELEMWILDCARD == index)
        return NodeTest.WILD;
      else
        return null;
    }
    else
      return null;
!!!5992603.java!!!	getStepLocalName(in opPosOfStep : int) : String

    int argLenOfStep = getArgLengthOfStep(opPosOfStep);

    // System.out.println("getStepLocalName.argLenOfStep: "+argLenOfStep);
    int index;

    switch (argLenOfStep)
    {
    case 0 :
      index = OpCodes.EMPTY;
      break;
    case 1 :
      index = OpCodes.ELEMWILDCARD;
      break;
    case 2 :
      index = m_opMap.elementAt(opPosOfStep + 4);
      break;
    case 3 :
      index = m_opMap.elementAt(opPosOfStep + 5);
      break;
    default :
      index = OpCodes.EMPTY;
      break;  // Should assert error
    }

    // int index = (argLenOfStep == 3) ? m_opMap[opPosOfStep+5] 
    //                                  : ((argLenOfStep == 1) ? -3 : -2);
    if (index >= 0)
      return (String) m_tokenQueue.elementAt(index).toString();
    else if (OpCodes.ELEMWILDCARD == index)
      return NodeTest.WILD;
    else
      return null;
