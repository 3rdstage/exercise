class JAXPValidatorComponent
!!!5375515.java!!!	JAXPValidatorComponent(inout validatorHandler : ValidatorHandler)
        this.validator = validatorHandler;
        TypeInfoProvider tip = validatorHandler.getTypeInfoProvider();;
        if(tip==null)   tip = noInfoProvider;
        this.typeInfoProvider = tip;
        
        // configure wiring between internal components.
        xni2sax.setContentHandler(validator);
        validator.setContentHandler(sax2xni);
        this.setSide(xni2sax);

        // configure validator with proper EntityResolver/ErrorHandler.
        validator.setErrorHandler(new ErrorHandlerProxy() {
            protected XMLErrorHandler getErrorHandler() {
                XMLErrorHandler handler = fErrorReporter.getErrorHandler();
                if(handler!=null)   return handler;
                return new ErrorHandlerWrapper(DraconianErrorHandler.theInstance);
            }
        });
        validator.setResourceResolver(new LSResourceResolver() {
            public LSInput resolveResource(String type,String ns, String publicId, String systemId, String baseUri) {
                if(fEntityResolver==null)   return null;
                try {
                    XMLInputSource is = fEntityResolver.resolveEntity(
                        new XMLResourceIdentifierImpl(publicId,systemId,baseUri,systemId));
                    if(is==null)    return null;
                        
                    LSInput di = new DOMInputImpl();
                    di.setBaseURI(is.getBaseSystemId());
                    di.setByteStream(is.getByteStream());
                    di.setCharacterStream(is.getCharacterStream());
                    di.setEncoding(is.getEncoding());
                    di.setPublicId(is.getPublicId());
                    di.setSystemId(is.getSystemId());
                        
                    return di;
                } catch( IOException e ) {
                    // erors thrown by the callback is not supposed to be
                    // reported to users.
                    throw new XNIException(e);
                }
            }
        });
!!!5375643.java!!!	startElement(inout element : QName, inout attributes : XMLAttributes, inout augs : Augmentations) : void
        fCurrentAttributes = attributes;
        fCurrentAug = augs;
        xni2sax.startElement(element,attributes,null);
        fCurrentAttributes = null; // mostly to make it easy to find any bug.
!!!5375771.java!!!	endElement(inout element : QName, inout augs : Augmentations) : void
        fCurrentAug = augs;
        xni2sax.endElement(element,null);
!!!5375899.java!!!	emptyElement(inout element : QName, inout attributes : XMLAttributes, inout augs : Augmentations) : void
        startElement(element,attributes,augs);
        endElement(element,augs);
!!!5376027.java!!!	characters(inout text : XMLString, inout augs : Augmentations) : void
        // since a validator may change the contents,
        // let this one go through a validator
        fCurrentAug = augs;
        xni2sax.characters(text,null);
!!!5376155.java!!!	ignorableWhitespace(inout text : XMLString, inout augs : Augmentations) : void
        // since a validator may change the contents,
        // let this one go through a validator
        fCurrentAug = augs;
        xni2sax.ignorableWhitespace(text,null);
!!!5376283.java!!!	reset(inout componentManager : XMLComponentManager) : void
        // obtain references from the manager
        fSymbolTable = (SymbolTable)componentManager.getProperty(
            Constants.XERCES_PROPERTY_PREFIX + Constants.SYMBOL_TABLE_PROPERTY);
        
        fErrorReporter = (XMLErrorReporter)componentManager.getProperty(
            Constants.XERCES_PROPERTY_PREFIX + Constants.ERROR_REPORTER_PROPERTY);
        
!!!5377563.java!!!	updateAttributes(inout atts : Attributes) : void
        int len = atts.getLength();
        for( int i=0; i<len; i++ ) {
            String aqn = atts.getQName(i);
            int j = fCurrentAttributes.getIndex(aqn);
            String av = atts.getValue(i);
            if(j==-1) {
                // newly added attribute. add to the current attribute list.
                
                String prefix;
                int idx = aqn.indexOf(':');
                if( idx<0 ) {
                    prefix = null;
                } else {
                    prefix = symbolize(aqn.substring(0,idx));
                }
                
                j = fCurrentAttributes.addAttribute(
                    new QName(
                        prefix,
                        symbolize(atts.getLocalName(i)),
                        symbolize(aqn),
                        symbolize(atts.getURI(i))),
                    atts.getType(i),av);
            } else {
                // the attribute is present.
                if( !av.equals(fCurrentAttributes.getValue(j)) ) {
                    // but the value was changed.
                    fCurrentAttributes.setValue(j,av);
                }
            }
            
            Augmentations augs = fCurrentAttributes.getAugmentations(j);
            augs.putItem( Constants.TYPEINFO,
                typeInfoProvider.getAttributeTypeInfo(i) );
            augs.putItem( Constants.ID_ATTRIBUTE,
                typeInfoProvider.isIdAttribute(i)?Boolean.TRUE:Boolean.FALSE );
        }
        

// spec says attributes won't be removed.
//        
//        // we might remove attributes as we go through,
//        // so iterate in the reverse order.
//        for( int j=fCurrentAttributes.getLength()-1; j>=0; j-- ) {
//            String aqn = fCurrentAttributes.getQName(j);
//            int i = atts.getIndex(aqn);
//            if(i==-1) 
//                // this attribute is removed.
//                fCurrentAttributes.removeAttributeAt(j);
//        }
!!!5377691.java!!!	symbolize(in s : String) : String
        return fSymbolTable.addSymbol(s);
!!!5377819.java!!!	getRecognizedFeatures() : String
        return null;
!!!5378075.java!!!	getRecognizedProperties() : String
        return new String[]{Constants.XERCES_PROPERTY_PREFIX + Constants.ENTITY_RESOLVER_PROPERTY};
!!!5378203.java!!!	setProperty(in propertyId : String, inout value : Object) : void
        if(propertyId.equals(Constants.XERCES_PROPERTY_PREFIX + Constants.ENTITY_RESOLVER_PROPERTY)) {
            fEntityResolver = (XMLEntityResolver)value;
        }
!!!5378331.java!!!	getFeatureDefault(in featureId : String) : Boolean
        return null;
!!!5378459.java!!!	getPropertyDefault(in propertyId : String) : Object
        return null;
