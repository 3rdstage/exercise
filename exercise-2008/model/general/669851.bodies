class VariableBase
!!!4404507.java!!!	disable() : void
	_ignore = true;
!!!4404635.java!!!	addReference(inout vref : VariableRefBase) : void
	_refs.addElement(vref);
!!!4404763.java!!!	removeReference(inout vref : VariableRefBase) : void
	_refs.remove(vref);
!!!4404891.java!!!	mapRegister(inout methodGen : MethodGenerator) : void
        if (_local == null) {
            final InstructionList il = methodGen.getInstructionList();
	    final String name = getEscapedName(); // TODO: namespace ?
	    final com.sun.org.apache.bcel.internal.generic.Type varType = _type.toJCType();
            _local = methodGen.addLocalVariable2(name, varType, il.getEnd());
        }
!!!4405019.java!!!	unmapRegister(inout methodGen : MethodGenerator) : void
	if (_refs.isEmpty() && (_local != null)) {
	    _local.setEnd(methodGen.getInstructionList().getEnd());
	    methodGen.removeLocalVariable(_local);
	    _refs = null;
	    _local = null;
	}
!!!4405147.java!!!	loadInstruction() : Instruction
	final Instruction instr = _loadInstruction;
	if (_loadInstruction == null) {
	    _loadInstruction = _type.LOAD(_local.getIndex());
        }
	return _loadInstruction;
!!!4405275.java!!!	storeInstruction() : Instruction
	final Instruction instr = _storeInstruction;
	if (_storeInstruction == null) {
	    _storeInstruction = _type.STORE(_local.getIndex());
        }
	return _storeInstruction;
!!!4405403.java!!!	getExpression() : Expression
	return(_select);
!!!4405531.java!!!	toString() : String
	return("variable("+_name+")");
!!!4405659.java!!!	display(in indent : int) : void
	indent(indent);
	System.out.println("Variable " + _name);
	if (_select != null) { 
	    indent(indent + IndentIncrement);
	    System.out.println("select " + _select.toString());
	}
	displayContents(indent + IndentIncrement);
!!!4405787.java!!!	getType() : Type
	return _type;
!!!4405915.java!!!	getName() : QName
	return _name;
!!!4406043.java!!!	getEscapedName() : String
	return _escapedName;
!!!4406171.java!!!	setName(inout name : QName) : void
	_name = name;
	_escapedName = Util.escape(name.getStringRep());
!!!4406299.java!!!	isLocal() : boolean
	return _isLocal;
!!!4406427.java!!!	parseContents(inout parser : Parser) : void
	// Get the 'name attribute
	String name = getAttribute("name");

        if (name.length() > 0) {
            if (!XMLChar.isValidQName(name)) {
                ErrorMsg err = new ErrorMsg(ErrorMsg.INVALID_QNAME_ERR, name, this);
                parser.reportError(Constants.ERROR, err);           
            }   
	    setName(parser.getQNameIgnoreDefaultNs(name));
        }
        else
	    reportError(this, parser, ErrorMsg.REQUIRED_ATTR_ERR, "name");

	// Check whether variable/param of the same name is already in scope
	VariableBase other = parser.lookupVariable(_name);
	if ((other != null) && (other.getParent() == getParent())) {
	    reportError(this, parser, ErrorMsg.VARIABLE_REDEF_ERR, name);
	}
	
	select = getAttribute("select");
	if (select.length() > 0) {
	    _select = getParser().parseExpression(this, "select", null);
	    if (_select.isDummy()) {
		reportError(this, parser, ErrorMsg.REQUIRED_ATTR_ERR, "select");
		return;
	    }
	}

	// Children must be parsed first -> static scoping
	parseChildren(parser);
!!!4406555.java!!!	translateValue(inout classGen : ClassGenerator, inout methodGen : MethodGenerator) : void
	// Compile expression is 'select' attribute if present
	if (_select != null) {
	    _select.translate(classGen, methodGen);
	    // Create a CachedNodeListIterator for select expressions
	    // in a variable or parameter.
	    if (_select.getType() instanceof NodeSetType) {
	        final ConstantPoolGen cpg = classGen.getConstantPool();
	        final InstructionList il = methodGen.getInstructionList();
	    	
	        final int initCNI = cpg.addMethodref(CACHED_NODE_LIST_ITERATOR_CLASS,
					    "<init>",
					    "("
					    +NODE_ITERATOR_SIG
					    +")V");
	        il.append(new NEW(cpg.addClass(CACHED_NODE_LIST_ITERATOR_CLASS)));
	        il.append(DUP_X1);
	        il.append(SWAP);

	        il.append(new INVOKESPECIAL(initCNI));
	    }
	    _select.startIterator(classGen, methodGen);
	}
	// If not, compile result tree from parameter body if present.
	else if (hasContents()) {
	    compileResultTree(classGen, methodGen);
	}
	// If neither are present then store empty string in variable
	else {
	    final ConstantPoolGen cpg = classGen.getConstantPool();
	    final InstructionList il = methodGen.getInstructionList();
	    il.append(new PUSH(cpg, Constants.EMPTYSTRING));
	}
