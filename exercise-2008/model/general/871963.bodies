class MimeTypeParameterList
!!!6416667.java!!!	MimeTypeParameterList()
        parameters = new Hashtable();
!!!6416795.java!!!	MimeTypeParameterList(in rawdata : String)
        parameters = new Hashtable();
        
        //    now parse rawdata
        parse(rawdata);
!!!6416923.java!!!	hashCode() : int
        int code = Integer.MAX_VALUE/45; // "random" value for empty lists
        String paramName = null;
        Enumeration enum_ = this.getNames();

        while (enum_.hasMoreElements()) {
            paramName = (String)enum_.nextElement();
            code += paramName.hashCode();
            code += this.get(paramName).hashCode();
        }

        return code;
!!!6417051.java!!!	equals(inout thatObject : Object) : boolean
	//System.out.println("MimeTypeParameterList.equals("+this+","+thatObject+")");
	if (!(thatObject instanceof MimeTypeParameterList)) {
	    return false;
	}
	MimeTypeParameterList that = (MimeTypeParameterList)thatObject;
	if (this.size() != that.size()) {
	    return false;
	}
	String name = null;
	String thisValue = null;
	String thatValue = null;
	Set entries = parameters.entrySet();
	Iterator iterator = entries.iterator();
	Map.Entry entry = null;
	while (iterator.hasNext()) {
	    entry = (Map.Entry)iterator.next();
	    name = (String)entry.getKey();
	    thisValue = (String)entry.getValue();
	    thatValue = (String)that.parameters.get(name);
	    if ((thisValue == null) || (thatValue == null)) {
		// both null -> equal, only one null -> not equal
		if (thisValue != thatValue) {
		    return false;
		}
	    } else if (!thisValue.equals(thatValue)) {
	        return false;
	    }
	} // while iterator

	return true;
!!!6417179.java!!!	parse(in rawdata : String) : void
        int length = rawdata.length();
        if(length > 0) {
            int currentIndex = skipWhiteSpace(rawdata, 0);
            int lastIndex = 0;
            
            if(currentIndex < length) {
                char currentChar = rawdata.charAt(currentIndex);
                while ((currentIndex < length) && (currentChar == ';')) {
                    String name;
                    String value;
                    boolean foundit;
                    
                    //    eat the ';'
                    ++currentIndex;
                    
                    //    now parse the parameter name
                    
                    //    skip whitespace
                    currentIndex = skipWhiteSpace(rawdata, currentIndex);
                    
                    if(currentIndex < length) {
                        //    find the end of the token char run
                        lastIndex = currentIndex;
                        currentChar = rawdata.charAt(currentIndex);
                        while((currentIndex < length) && isTokenChar(currentChar)) {
                            ++currentIndex;
                            currentChar = rawdata.charAt(currentIndex);
                        }
                        name = rawdata.substring(lastIndex, currentIndex).toLowerCase();
                        
                        //    now parse the '=' that separates the name from the value
                        
                        //    skip whitespace
                        currentIndex = skipWhiteSpace(rawdata, currentIndex);
                        
                        if((currentIndex < length) && (rawdata.charAt(currentIndex) == '='))  {
                            //    eat it and parse the parameter value
                            ++currentIndex;
                            
                            //    skip whitespace
                            currentIndex = skipWhiteSpace(rawdata, currentIndex);
                            
                            if(currentIndex < length) {
                                //    now find out whether or not we have a quoted value
                                currentChar = rawdata.charAt(currentIndex);
                                if(currentChar == '"') {
                                    //    yup it's quoted so eat it and capture the quoted string
                                    ++currentIndex;
                                    lastIndex = currentIndex;
                                    
                                    if(currentIndex < length) {
                                        //    find the next unescqped quote
                                        foundit = false;
                                        while((currentIndex < length) && !foundit) {
                                            currentChar = rawdata.charAt(currentIndex);
                                            if(currentChar == '\\') {
                                                //    found an escape sequence so pass this and the next character
                                                currentIndex += 2;
                                            } else if(currentChar == '"') {
                                                //    foundit!
                                                foundit = true;
                                            } else {
                                                ++currentIndex;
                                            }
                                        }
                                        if(currentChar == '"') {
                                            value = unquote(rawdata.substring(lastIndex, currentIndex));
                                            //    eat the quote
                                            ++currentIndex;
                                        } else {
                                            throw new MimeTypeParseException("Encountered unterminated quoted parameter value.");
                                        }
                                    } else {
                                        throw new MimeTypeParseException("Encountered unterminated quoted parameter value.");
                                    }
                                } else if(isTokenChar(currentChar)) {
                                    //    nope it's an ordinary token so it ends with a non-token char
                                    lastIndex = currentIndex;
                                    foundit = false;
                                    while((currentIndex < length) && !foundit) {
                                        currentChar = rawdata.charAt(currentIndex);
                                        
                                        if(isTokenChar(currentChar)) {
                                            ++currentIndex;
                                        } else {
                                            foundit = true;
                                        }
                                    }
                                    value = rawdata.substring(lastIndex, currentIndex);
                                } else {
                                    //    it ain't a value
                                    throw new MimeTypeParseException("Unexpected character encountered at index " + currentIndex);
                                }
                                
                                //    now put the data into the hashtable
                                parameters.put(name, value);
                            } else {
                                throw new MimeTypeParseException("Couldn't find a value for parameter named " + name);
                            }
                        } else {
                            throw new MimeTypeParseException("Couldn't find the '=' that separates a parameter name from its value.");
                        }
                    } else {
                        throw new MimeTypeParseException("Couldn't find parameter name");
                    }
                    
                    //    setup the next iteration
                    currentIndex = skipWhiteSpace(rawdata, currentIndex);
                    if(currentIndex < length) {
                        currentChar = rawdata.charAt(currentIndex);
                    }
                }
                if(currentIndex < length) {
                    throw new MimeTypeParseException("More characters encountered in input than expected.");
                }
            }
        }
!!!6417307.java!!!	size() : int
        return parameters.size();
!!!6417435.java!!!	isEmpty() : boolean
        return parameters.isEmpty();
!!!6417563.java!!!	get(in name : String) : String
        return (String)parameters.get(name.trim().toLowerCase());
!!!6417691.java!!!	set(in name : String, in value : String) : void
        parameters.put(name.trim().toLowerCase(), value);
!!!6417819.java!!!	remove(in name : String) : void
        parameters.remove(name.trim().toLowerCase());
!!!6417947.java!!!	getNames() : Enumeration
        return parameters.keys();
!!!6418075.java!!!	toString() : String
        StringBuffer buffer = new StringBuffer();
        buffer.ensureCapacity(parameters.size() * 16);    //    heuristic: 8 characters per field
        
        Enumeration keys = parameters.keys();
        while(keys.hasMoreElements())
        {
            buffer.append("; ");
            
            String key = (String)keys.nextElement();
            buffer.append(key);
            buffer.append('=');
               buffer.append(quote((String)parameters.get(key)));
        }
        
        return buffer.toString();
!!!6418203.java!!!	clone() : Object
	 MimeTypeParameterList newObj = null;
	 try {
	     newObj = (MimeTypeParameterList)super.clone();
	 } catch (CloneNotSupportedException cannotHappen) {
	 }
	 newObj.parameters = (Hashtable)parameters.clone();
	 return newObj;
!!!6418331.java!!!	isTokenChar(in c : char) : boolean
        return ((c > 040) && (c < 0177)) && (TSPECIALS.indexOf(c) < 0);
!!!6418459.java!!!	skipWhiteSpace(in rawdata : String, in i : int) : int
        int length = rawdata.length();
        if (i < length) {
            char c =  rawdata.charAt(i);
            while ((i < length) && Character.isWhitespace(c)) {
                ++i;
                c = rawdata.charAt(i);
            }
        }
        
        return i;
!!!6418587.java!!!	quote(in value : String) : String
        boolean needsQuotes = false;
        
        //    check to see if we actually have to quote this thing
        int length = value.length();
        for(int i = 0; (i < length) && !needsQuotes; ++i) {
            needsQuotes = !isTokenChar(value.charAt(i));
        }
        
        if(needsQuotes) {
            StringBuffer buffer = new StringBuffer();
            buffer.ensureCapacity((int)(length * 1.5));
            
            //    add the initial quote
            buffer.append('"');
            
            //    add the properly escaped text
            for(int i = 0; i < length; ++i) {
                char c = value.charAt(i);
                if((c == '\\') || (c == '"')) {
                    buffer.append('\\');
                }
                buffer.append(c);
            }
            
            //    add the closing quote
            buffer.append('"');
            
            return buffer.toString();
        }
        else
        {
            return value;
        }
!!!6418715.java!!!	unquote(in value : String) : String
        int valueLength = value.length();
        StringBuffer buffer = new StringBuffer();
        buffer.ensureCapacity(valueLength);
        
        boolean escaped = false;
        for(int i = 0; i < valueLength; ++i) {
            char currentChar = value.charAt(i);
            if(!escaped && (currentChar != '\\')) {
                buffer.append(currentChar);
            } else if(escaped) {
                buffer.append(currentChar);
                escaped = false;
            } else {
                escaped = true;
            }
        }
        
        return buffer.toString();
