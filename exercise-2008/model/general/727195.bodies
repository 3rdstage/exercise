class XMLAttributesImpl
!!!5519003.java!!!	XMLAttributesImpl()
        this(TABLE_SIZE);
!!!5519131.java!!!	XMLAttributesImpl(in tableSize : int)
        fTableViewBuckets = tableSize;
        for (int i = 0; i < fAttributes.length; i++) {
            fAttributes[i] = new Attribute();
        }
!!!5519259.java!!!	setNamespaces(inout namespaces : boolean) : void
        fNamespaces = namespaces;
!!!5519387.java!!!	addAttribute(inout name : QName, in type : String, in value : String) : int

        int index;
        if (fLength < SIZE_LIMIT) {
            index = name.uri != null && !name.uri.equals("") 
                ? getIndexFast(name.uri, name.localpart)
                : getIndexFast(name.rawname);
    
            if (index == -1) {
                index = fLength;
                if (fLength++ == fAttributes.length) {
                    Attribute[] attributes = new Attribute[fAttributes.length + 4];
                    System.arraycopy(fAttributes, 0, attributes, 0, fAttributes.length);
                    for (int i = fAttributes.length; i < attributes.length; i++) {
                        attributes[i] = new Attribute();
                    }
                    fAttributes = attributes;
                }
            }
        }
        else if (name.uri == null || 
            name.uri.length() == 0 || 
            (index = getIndexFast(name.uri, name.localpart)) == -1) {
            
            /**
             * If attributes were removed from the list after the table
             * becomes in use this isn't reflected in the table view. It's
             * assumed that once a user starts removing attributes they're 
             * not likely to add more. We only make the view consistent if
             * the user of this class adds attributes, removes them, and
             * then adds more.
             */
            if (!fIsTableViewConsistent || fLength == SIZE_LIMIT) {
                prepareAndPopulateTableView();
                fIsTableViewConsistent = true;
            }

            int bucket = getTableViewBucket(name.rawname); 
        
            // The chain is stale. 
            // This must be a unique attribute.
            if (fAttributeTableViewChainState[bucket] != fLargeCount) {
                index = fLength;
                if (fLength++ == fAttributes.length) {
                    Attribute[] attributes = new Attribute[fAttributes.length << 1];
                    System.arraycopy(fAttributes, 0, attributes, 0, fAttributes.length);
                    for (int i = fAttributes.length; i < attributes.length; i++) {
                        attributes[i] = new Attribute();
                    }
                    fAttributes = attributes;
                }
            
                // Update table view.
                fAttributeTableViewChainState[bucket] = fLargeCount;
                fAttributes[index].next = null;
                fAttributeTableView[bucket] = fAttributes[index];
            }
            // This chain is active. 
            // We need to check if any of the attributes has the same rawname.
            else {
                // Search the table.
                Attribute found = fAttributeTableView[bucket];
                while (found != null) {
                    if (found.name.rawname == name.rawname) {
                        break;
                    }
                    found = found.next;
                }
                // This attribute is unique.
                if (found == null) {
                    index = fLength;
                    if (fLength++ == fAttributes.length) {
                        Attribute[] attributes = new Attribute[fAttributes.length << 1];
                        System.arraycopy(fAttributes, 0, attributes, 0, fAttributes.length);
                        for (int i = fAttributes.length; i < attributes.length; i++) {
                            attributes[i] = new Attribute();
                        }
                        fAttributes = attributes;
                    }
                 
                    // Update table view
                    fAttributes[index].next = fAttributeTableView[bucket];
                    fAttributeTableView[bucket] = fAttributes[index];
                }
                // Duplicate. We still need to find the index.
                else {
                    index = getIndexFast(name.rawname);
                }
            }
        }          

        // set values
        Attribute attribute = fAttributes[index];
        attribute.name.setValues(name);
        attribute.type = type;
        attribute.value = value;
        attribute.nonNormalizedValue = value;
        attribute.specified = false;

        // return
        return index;

!!!5519515.java!!!	removeAllAttributes() : void
        fLength = 0;
!!!5519643.java!!!	removeAttributeAt(in attrIndex : int) : void
        fIsTableViewConsistent = false;
        if (attrIndex < fLength - 1) {
            Attribute removedAttr = fAttributes[attrIndex];
            System.arraycopy(fAttributes, attrIndex + 1,
                             fAttributes, attrIndex, fLength - attrIndex - 1);
            // Make the discarded Attribute object available for re-use
            // by tucking it after the Attributes that are still in use
            fAttributes[fLength-1] = removedAttr;
        }
        fLength--;
!!!5519771.java!!!	setName(in attrIndex : int, inout attrName : QName) : void
        fAttributes[attrIndex].name.setValues(attrName);
!!!5519899.java!!!	getName(in attrIndex : int, inout attrName : QName) : void
        attrName.setValues(fAttributes[attrIndex].name);
!!!5520027.java!!!	setType(in attrIndex : int, in attrType : String) : void
        fAttributes[attrIndex].type = attrType;
!!!5520155.java!!!	setValue(in attrIndex : int, in attrValue : String) : void
        Attribute attribute = fAttributes[attrIndex];
        attribute.value = attrValue;
        attribute.nonNormalizedValue = attrValue;
!!!5520283.java!!!	setNonNormalizedValue(in attrIndex : int, in attrValue : String) : void
        if (attrValue == null) {
            attrValue = fAttributes[attrIndex].value;
        }
        fAttributes[attrIndex].nonNormalizedValue = attrValue;
!!!5520411.java!!!	getNonNormalizedValue(in attrIndex : int) : String
        String value = fAttributes[attrIndex].nonNormalizedValue;
        return value;
!!!5520539.java!!!	setSpecified(in attrIndex : int, inout specified : boolean) : void
        fAttributes[attrIndex].specified = specified;
!!!5520667.java!!!	isSpecified(in attrIndex : int) : boolean
        return fAttributes[attrIndex].specified;
!!!5520795.java!!!	getLength() : int
        return fLength;
!!!5520923.java!!!	getType(in index : int) : String
        if (index < 0 || index >= fLength) {
            return null;
        }
        return getReportableType(fAttributes[index].type);
!!!5521051.java!!!	getType(in qname : String) : String
        int index = getIndex(qname);
        return index != -1 ? getReportableType(fAttributes[index].type) : null;
!!!5521179.java!!!	getValue(in index : int) : String
        if (index < 0 || index >= fLength) {
            return null;
        }
        return fAttributes[index].value;
!!!5521307.java!!!	getValue(in qname : String) : String
        int index = getIndex(qname);
        return index != -1 ? fAttributes[index].value : null;
!!!5521435.java!!!	getName(in index : int) : String
        if (index < 0 || index >= fLength) {
            return null;
        }
        return fAttributes[index].name.rawname;
!!!5521563.java!!!	getIndex(in qName : String) : int
        for (int i = 0; i < fLength; i++) {
            Attribute attribute = fAttributes[i];
            if (attribute.name.rawname != null &&
                attribute.name.rawname.equals(qName)) {
                return i;
            }
        }
        return -1;
!!!5521691.java!!!	getIndex(in uri : String, in localPart : String) : int
        for (int i = 0; i < fLength; i++) {
            Attribute attribute = fAttributes[i];
            if (attribute.name.localpart != null &&
                attribute.name.localpart.equals(localPart) &&
                ((uri==attribute.name.uri) ||
                (uri!=null && attribute.name.uri!=null && attribute.name.uri.equals(uri))))
            {
                return i;
            }
        }
        return -1;
!!!5521819.java!!!	getLocalName(in index : int) : String
        if (!fNamespaces) {
            return "";
        }
        if (index < 0 || index >= fLength) {
            return null;
        }
        return fAttributes[index].name.localpart;
!!!5521947.java!!!	getQName(in index : int) : String
        if (index < 0 || index >= fLength) {
            return null;
        }
        String rawname = fAttributes[index].name.rawname;
        return rawname != null ? rawname : "";
!!!5522075.java!!!	getType(in uri : String, in localName : String) : String
        if (!fNamespaces) {
            return null;
        }
        int index = getIndex(uri, localName);
        return index != -1 ? getType(index) : null;
!!!5522203.java!!!	getIndexFast(in qName : String) : int
        for (int i = 0; i < fLength; ++i) {
            Attribute attribute = fAttributes[i];
            if (attribute.name.rawname == qName) {
                return i;
            }
        }
        return -1;
!!!5522331.java!!!	addAttributeNS(inout name : QName, in type : String, in value : String) : void
        int index = fLength;
        if (fLength++ == fAttributes.length) {
            Attribute[] attributes;
            if (fLength < SIZE_LIMIT) {
                attributes = new Attribute[fAttributes.length + 4];
            }
            else {
                attributes = new Attribute[fAttributes.length << 1];
            }
            System.arraycopy(fAttributes, 0, attributes, 0, fAttributes.length);
            for (int i = fAttributes.length; i < attributes.length; i++) {
                attributes[i] = new Attribute();
            }
            fAttributes = attributes;
        }
        
        // set values
        Attribute attribute = fAttributes[index];
        attribute.name.setValues(name);
        attribute.type = type;
        attribute.value = value;
        attribute.nonNormalizedValue = value;
        attribute.specified = false;
            
        // clear augmentations
        attribute.augs.removeAllItems();
!!!5522459.java!!!	checkDuplicatesNS() : QName
        // If the list is small check for duplicates using pairwise comparison.
        if (fLength <= SIZE_LIMIT) {
            for (int i = 0; i < fLength - 1; ++i) {
                Attribute att1 = fAttributes[i];
                for (int j = i + 1; j < fLength; ++j) {
                    Attribute att2 = fAttributes[j];
                    if (att1.name.localpart == att2.name.localpart &&
                        att1.name.uri == att2.name.uri) {
                        return att2.name;       
                    }
                }
            }
        }
        // If the list is large check duplicates using a hash table.
        else {
            // We don't want this table view to be read if someone calls 
            // addAttribute so we invalidate it up front.
            fIsTableViewConsistent = false;

            prepareTableView();

            Attribute attr;
            int bucket;

            for (int i = fLength - 1; i >= 0; --i) {
                attr = fAttributes[i];
                bucket = getTableViewBucket(attr.name.localpart, attr.name.uri);
                
                // The chain is stale. 
                // This must be a unique attribute.
                if (fAttributeTableViewChainState[bucket] != fLargeCount) {
                    fAttributeTableViewChainState[bucket] = fLargeCount;
                    attr.next = null;
                    fAttributeTableView[bucket] = attr;
                } 
                // This chain is active. 
                // We need to check if any of the attributes has the same name.
                else {
                    // Search the table.
                    Attribute found = fAttributeTableView[bucket];
                    while (found != null) {
                        if (found.name.localpart == attr.name.localpart &&
                            found.name.uri == attr.name.uri) {
                            return attr.name;
                        }
                        found = found.next;
                    }
                    
                    // Update table view
                    attr.next = fAttributeTableView[bucket];
                    fAttributeTableView[bucket] = attr;
                }
            }
        }
        return null;
!!!5522587.java!!!	getIndexFast(in uri : String, in localPart : String) : int
        for (int i = 0; i < fLength; ++i) {
            Attribute attribute = fAttributes[i];
            if (attribute.name.localpart == localPart && 
                attribute.name.uri == uri) {
                return i;
            }
        }
        return -1;
!!!5522715.java!!!	getReportableType(in type : String) : String

        if (type.charAt(0) == '(') {
            return "NMTOKEN";
        }
        return type;
!!!5522843.java!!!	getTableViewBucket(in qname : String) : int
        return (qname.hashCode() & 0x7FFFFFFF) % fTableViewBuckets;
!!!5522971.java!!!	getTableViewBucket(in localpart : String, in uri : String) : int
        if (uri == null) {
            return (localpart.hashCode() & 0x7FFFFFFF) % fTableViewBuckets;
        }
        else {
            return ((localpart.hashCode() + uri.hashCode()) 
               & 0x7FFFFFFF) % fTableViewBuckets;
        }
!!!5523099.java!!!	cleanTableView() : void
        if (++fLargeCount < 0) {
            // Overflow. We actually need to visit the chain state array.
            if (fAttributeTableViewChainState != null) {
                for (int i = fTableViewBuckets - 1; i >= 0; --i) {
                    fAttributeTableViewChainState[i] = 0;
                } 
            }
            fLargeCount = 1;
        }
!!!5523227.java!!!	prepareTableView() : void
        if (fAttributeTableView == null) {
            fAttributeTableView = new Attribute[fTableViewBuckets];
            fAttributeTableViewChainState = new int[fTableViewBuckets];
        }
        else {
            cleanTableView();
        }
!!!5523355.java!!!	prepareAndPopulateTableView() : void
        prepareTableView();
        // Need to populate the hash table with the attributes we've scanned so far.
        Attribute attr;
        int bucket;
        for (int i = 0; i < fLength; ++i) {
            attr = fAttributes[i];
            bucket = getTableViewBucket(attr.name.rawname);
            if (fAttributeTableViewChainState[bucket] != fLargeCount) {
                fAttributeTableViewChainState[bucket] = fLargeCount;
                attr.next = null;
                fAttributeTableView[bucket] = attr;
            } 
            else {
                // Update table view
                attr.next = fAttributeTableView[bucket];
                fAttributeTableView[bucket] = attr;
            }
        }
!!!5523483.java!!!	getPrefix(in index : int) : String
        if (index < 0 || index >= fLength) {
            return null;
        }
        String prefix = fAttributes[index].name.prefix;
        // REVISIT: The empty string is not entered in the symbol table!
        return prefix != null ? prefix : "";
!!!5523611.java!!!	getURI(in index : int) : String
        if (index < 0 || index >= fLength) {
            return null;
        }
        String uri = fAttributes[index].name.uri;
        return uri;                        
!!!5523739.java!!!	getValue(in uri : String, in localName : String) : String
        int index = getIndex(uri, localName);
        return index != -1 ? getValue(index) : null;
!!!5523867.java!!!	getAugmentations(in uri : String, in localName : String) : Augmentations
        int index = getIndex(uri, localName);
        return index != -1 ? fAttributes[index].augs : null;
!!!5523995.java!!!	getAugmentations(in qName : String) : Augmentations
        int index = getIndex(qName);
        return index != -1 ? fAttributes[index].augs : null;
!!!5524123.java!!!	getAugmentations(in attributeIndex : int) : Augmentations
        if (attributeIndex < 0 || attributeIndex >= fLength) {
            return null;
        }
        return fAttributes[attributeIndex].augs;
!!!5524251.java!!!	setAugmentations(in attrIndex : int, inout augs : Augmentations) : void
        fAttributes[attrIndex].augs = augs;
!!!5524379.java!!!	setURI(in attrIndex : int, in uri : String) : void
        fAttributes[attrIndex].name.uri = uri;
