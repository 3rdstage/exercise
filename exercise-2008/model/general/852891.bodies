class Choice
!!!6194331.java!!!	Choice()
        GraphicsEnvironment.checkHeadless();
	pItems = new Vector();
!!!6194459.java!!!	constructComponentName() : String
        synchronized (getClass()) {
	    return base + nameCounter++;
	}
!!!6194587.java!!!	addNotify() : void
        synchronized (getTreeLock()) {
	    if (peer == null)
	        peer = getToolkit().createChoice(this);
	    super.addNotify();
	}
!!!6194715.java!!!	getItemCount() : int
	return countItems();
!!!6194843.java!!!	countItems() : int
	return pItems.size();
!!!6194971.java!!!	getItem(in index : int) : String
	return getItemImpl(index);
!!!6195099.java!!!	getItemImpl(in index : int) : String
	return (String)pItems.elementAt(index);
!!!6195227.java!!!	add(in item : String) : void
	addItem(item);
!!!6195355.java!!!	addItem(in item : String) : void
        synchronized (this) {
	    insertNoInvalidate(item, pItems.size());
	}

	// This could change the preferred size of the Component.
	if (valid) {
	    invalidate();
	}
!!!6195483.java!!!	insertNoInvalidate(in item : String, in index : int) : void
        if (item == null) {
	    throw new 
	        NullPointerException("cannot add null item to Choice");
	}
	pItems.insertElementAt(item, index);
	ChoicePeer peer = (ChoicePeer)this.peer;
	if (peer != null) {
	    peer.addItem(item, index);
	}
	// no selection or selection shifted up
	if (selectedIndex < 0 || selectedIndex >= index) {
	    select(0);
	}
!!!6195611.java!!!	insert(in item : String, in index : int) : void
        synchronized (this) {
	    if (index < 0) {
	        throw new IllegalArgumentException("index less than zero.");
	    }
            /* if the index greater than item count, add item to the end */            
            index = Math.min(index, pItems.size());

            insertNoInvalidate(item, index);
	}

	// This could change the preferred size of the Component.
	if (valid) {
	    invalidate();
	}
!!!6195739.java!!!	remove(in item : String) : void
        synchronized (this) {
	    int index = pItems.indexOf(item);
	    if (index < 0) {
	        throw new IllegalArgumentException("item " + item +
						   " not found in choice");
	    } else {
	        removeNoInvalidate(index);
	    }
	}

	// This could change the preferred size of the Component.
	if (valid) {
	    invalidate();
	}
!!!6195867.java!!!	remove(in position : int) : void
        synchronized (this) {
	    removeNoInvalidate(position);
	}

	// This could change the preferred size of the Component.
	if (valid) {
	    invalidate();
	}
!!!6195995.java!!!	removeNoInvalidate(in position : int) : void
        pItems.removeElementAt(position);
	ChoicePeer peer = (ChoicePeer)this.peer;
	if (peer != null) {
	    peer.remove(position);
	}
	/* Adjust selectedIndex if selected item was removed. */
	if (pItems.size() == 0) {
	    selectedIndex = -1;
	} else if (selectedIndex == position) {
	    select(0);
	} else if (selectedIndex > position) {
	    select(selectedIndex-1);
	}
!!!6196123.java!!!	removeAll() : void
        synchronized (this) {
            if (peer != null) {
                ((ChoicePeer)peer).removeAll();
            }
            pItems.removeAllElements();
            selectedIndex = -1;
	}

	// This could change the preferred size of the Component.
	if (valid) {
	    invalidate();
	}
!!!6196251.java!!!	getSelectedItem() : String
	return (selectedIndex >= 0) ? getItem(selectedIndex) : null;
!!!6196379.java!!!	getSelectedObjects() : Object
	if (selectedIndex >= 0) {
            Object[] items = new Object[1];
            items[0] = getItem(selectedIndex);
            return items;
        }
        return null;
!!!6196507.java!!!	getSelectedIndex() : int
	return selectedIndex;
!!!6196635.java!!!	select(in pos : int) : void
	if ((pos >= pItems.size()) || (pos < 0)) {
	    throw new IllegalArgumentException("illegal Choice item position: " + pos);
	}
	if (pItems.size() > 0) {
	    selectedIndex = pos;
	    ChoicePeer peer = (ChoicePeer)this.peer;
	    if (peer != null) {
		peer.select(pos);
	    }
	}
!!!6196763.java!!!	select(in str : String) : void
	int index = pItems.indexOf(str);
	if (index >= 0) {
	    select(index);
	}
!!!6196891.java!!!	addItemListener(inout l : ItemListener) : void
	if (l == null) {
	   return;
	}
        itemListener = AWTEventMulticaster.add(itemListener, l);
        newEventsOnly = true;
!!!6197019.java!!!	removeItemListener(inout l : ItemListener) : void
	if (l == null) {
	    return;
	}
        itemListener = AWTEventMulticaster.remove(itemListener, l);
!!!6197147.java!!!	getItemListeners() : ItemListener
        return (ItemListener[])(getListeners(ItemListener.class));
!!!6197275.java!!!	getListeners(inout listenerType : Class) : T
	EventListener l = null;
	if  (listenerType == ItemListener.class) { 
	    l = itemListener;
	} else {
	    return super.getListeners(listenerType);
	}
	return AWTEventMulticaster.getListeners(l, listenerType);
!!!6197403.java!!!	eventEnabled(inout e : AWTEvent) : boolean
        if (e.id == ItemEvent.ITEM_STATE_CHANGED) {
            if ((eventMask & AWTEvent.ITEM_EVENT_MASK) != 0 ||
                itemListener != null) {
                return true;
            }
            return false;
        }
        return super.eventEnabled(e);
!!!6197531.java!!!	processEvent(inout e : AWTEvent) : void
        if (e instanceof ItemEvent) {
            processItemEvent((ItemEvent)e);
            return;
        }
	super.processEvent(e);
!!!6197659.java!!!	processItemEvent(inout e : ItemEvent) : void
        ItemListener listener = itemListener;
        if (listener != null) {
            listener.itemStateChanged(e);
        }
!!!6197787.java!!!	paramString() : String
	return super.paramString() + ",current=" + getSelectedItem();
!!!6197915.java!!!	writeObject(inout s : ObjectOutputStream) : void
      s.defaultWriteObject();

      AWTEventMulticaster.save(s, itemListenerK, itemListener);
      s.writeObject(null);
!!!6198043.java!!!	readObject(inout s : ObjectInputStream) : void
      GraphicsEnvironment.checkHeadless();
      s.defaultReadObject();

      Object keyOrNull;
      while(null != (keyOrNull = s.readObject())) {
	String key = ((String)keyOrNull).intern();

	if (itemListenerK == key)
	  addItemListener((ItemListener)(s.readObject()));

	else // skip value for unrecognized key
	  s.readObject();
      }
!!!6198171.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleAWTChoice();
        }
        return accessibleContext;
