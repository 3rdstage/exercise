class BasicSplitPaneUI
!!!2824091.java!!!	createUI(inout x : JComponent) : ComponentUI
        return new BasicSplitPaneUI();
!!!2824219.java!!!	loadActionMap(inout map : LazyActionMap) : void
        map.put(new Actions(Actions.NEGATIVE_INCREMENT));
	map.put(new Actions(Actions.POSITIVE_INCREMENT));
	map.put(new Actions(Actions.SELECT_MIN));
	map.put(new Actions(Actions.SELECT_MAX));
	map.put(new Actions(Actions.START_RESIZE));
	map.put(new Actions(Actions.TOGGLE_FOCUS));
	map.put(new Actions(Actions.FOCUS_OUT_FORWARD));
	map.put(new Actions(Actions.FOCUS_OUT_BACKWARD));
!!!2824347.java!!!	installUI(inout c : JComponent) : void
        splitPane = (JSplitPane) c;
        dividerLocationIsSet = false;
        dividerKeyboardResize = false;
        keepHidden = false;
        installDefaults();
        installListeners();
        installKeyboardActions();
        setLastDragLocation(-1);
!!!2824475.java!!!	installDefaults() : void
 
        LookAndFeel.installBorder(splitPane, "SplitPane.border");
        LookAndFeel.installColors(splitPane, "SplitPane.background",
                                  "SplitPane.foreground");
        LookAndFeel.installProperty(splitPane, "opaque", Boolean.TRUE);

        if (divider == null) divider = createDefaultDivider();
        divider.setBasicSplitPaneUI(this);

	Border    b = divider.getBorder();

	if (b == null || !(b instanceof UIResource)) {
	    divider.setBorder(UIManager.getBorder("SplitPaneDivider.border"));
	}

	dividerDraggingColor = UIManager.getColor("SplitPaneDivider.draggingColor");

        setOrientation(splitPane.getOrientation());

	// This plus 2 here is to provide backwards consistancy. Previously,
	// the old size did not include the 2 pixel border around the divider,
	// it now does.
        LookAndFeel.installProperty(splitPane, "dividerSize", 
				    UIManager.get("SplitPane.dividerSize"));

        divider.setDividerSize(splitPane.getDividerSize());
	dividerSize = divider.getDividerSize();
        splitPane.add(divider, JSplitPane.DIVIDER);

        setContinuousLayout(splitPane.isContinuousLayout());

        resetLayoutManager();

        /* Install the nonContinuousLayoutDivider here to avoid having to
        add/remove everything later. */
        if(nonContinuousLayoutDivider == null) {
            setNonContinuousLayoutDivider(
                                createDefaultNonContinuousLayoutDivider(),
                                true);
        } else {
            setNonContinuousLayoutDivider(nonContinuousLayoutDivider, true);
        }

	// focus forward traversal key
	if (managingFocusForwardTraversalKeys==null) {
	    managingFocusForwardTraversalKeys = new TreeSet();
	    managingFocusForwardTraversalKeys.add(
		KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0));
	}
	splitPane.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
					managingFocusForwardTraversalKeys);
	// focus backward traversal key
	if (managingFocusBackwardTraversalKeys==null) {
	    managingFocusBackwardTraversalKeys = new TreeSet();
	    managingFocusBackwardTraversalKeys.add(
		KeyStroke.getKeyStroke(KeyEvent.VK_TAB, InputEvent.SHIFT_MASK));
	}
	splitPane.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,
					managingFocusBackwardTraversalKeys);
!!!2824603.java!!!	installListeners() : void
        if ((propertyChangeListener = createPropertyChangeListener()) !=
            null) {
            splitPane.addPropertyChangeListener(propertyChangeListener);
        }

        if ((focusListener = createFocusListener()) != null) {
            splitPane.addFocusListener(focusListener);
        }
!!!2824731.java!!!	installKeyboardActions() : void
	InputMap km = getInputMap(JComponent.
				  WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

	SwingUtilities.replaceUIInputMap(splitPane, JComponent.
				       WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,
				       km);
        LazyActionMap.installLazyActionMap(splitPane, BasicSplitPaneUI.class,
                                           "SplitPane.actionMap");
!!!2824859.java!!!	getInputMap(in condition : int) : InputMap
	if (condition == JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT) {
	    return (InputMap)DefaultLookup.get(splitPane, this,
                                               "SplitPane.ancestorInputMap");
	}
	return null;
!!!2824987.java!!!	uninstallUI(inout c : JComponent) : void
        uninstallKeyboardActions();
        uninstallListeners();
        uninstallDefaults();
        dividerLocationIsSet = false;
        dividerKeyboardResize = false;
        splitPane = null;
!!!2825115.java!!!	uninstallDefaults() : void
        if(splitPane.getLayout() == layoutManager) {
            splitPane.setLayout(null);
        }

        if(nonContinuousLayoutDivider != null) {
            splitPane.remove(nonContinuousLayoutDivider);
        }

        LookAndFeel.uninstallBorder(splitPane);

	Border    b = divider.getBorder();

	if (b instanceof UIResource) {
	    divider.setBorder(null);
	}

        splitPane.remove(divider);
        divider.setBasicSplitPaneUI(null);
        layoutManager = null;
        divider = null;
        nonContinuousLayoutDivider = null;

        setNonContinuousLayoutDivider(null);

	// sets the focus forward and backward traversal keys to null
	// to restore the defaults
	splitPane.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, null);
	splitPane.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, null);
!!!2825243.java!!!	uninstallListeners() : void
        if (propertyChangeListener != null) {
            splitPane.removePropertyChangeListener(propertyChangeListener);
            propertyChangeListener = null;
        }
        if (focusListener != null) {
            splitPane.removeFocusListener(focusListener);
            focusListener = null;
        }

        keyboardUpLeftListener = null;
        keyboardDownRightListener = null;
        keyboardHomeListener = null;
        keyboardEndListener = null;
        keyboardResizeToggleListener = null;
        handler = null;
!!!2825371.java!!!	uninstallKeyboardActions() : void
	SwingUtilities.replaceUIActionMap(splitPane, null);
	SwingUtilities.replaceUIInputMap(splitPane, JComponent.
				      WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,
				      null);
!!!2825499.java!!!	createPropertyChangeListener() : PropertyChangeListener
        return getHandler();
!!!2825627.java!!!	getHandler() : Handler
        if (handler == null) {
            handler = new Handler();
        }
        return handler;
!!!2825755.java!!!	createFocusListener() : FocusListener
        return getHandler();
!!!2825883.java!!!	createKeyboardUpLeftListener() : ActionListener
        return new KeyboardUpLeftHandler();
!!!2826011.java!!!	createKeyboardDownRightListener() : ActionListener
        return new KeyboardDownRightHandler();
!!!2826139.java!!!	createKeyboardHomeListener() : ActionListener
        return new KeyboardHomeHandler();
!!!2826267.java!!!	createKeyboardEndListener() : ActionListener
        return new KeyboardEndHandler();
!!!2826395.java!!!	createKeyboardResizeToggleListener() : ActionListener
        return new KeyboardResizeToggleHandler();
!!!2826523.java!!!	getOrientation() : int
        return orientation;
!!!2826651.java!!!	setOrientation(in orientation : int) : void
        this.orientation = orientation;
!!!2826779.java!!!	isContinuousLayout() : boolean
        return continuousLayout;
!!!2826907.java!!!	setContinuousLayout(inout b : boolean) : void
        continuousLayout = b;
!!!2827035.java!!!	getLastDragLocation() : int
        return lastDragLocation;
!!!2827163.java!!!	setLastDragLocation(in l : int) : void
        lastDragLocation = l;
!!!2827291.java!!!	getKeyboardMoveIncrement() : int
	return KEYBOARD_DIVIDER_MOVE_OFFSET;
!!!2828699.java!!!	getDivider() : BasicSplitPaneDivider
        return divider;
!!!2828827.java!!!	createDefaultNonContinuousLayoutDivider() : Component
        return new Canvas() {
            public void paint(Graphics g) {
                if(!isContinuousLayout() && getLastDragLocation() != -1) {
                    Dimension      size = splitPane.getSize();

                    g.setColor(dividerDraggingColor);
                    if(orientation == JSplitPane.HORIZONTAL_SPLIT) {
                        g.fillRect(0, 0, dividerSize - 1, size.height - 1);
                    } else {
                        g.fillRect(0, 0, size.width - 1, dividerSize - 1);
                    }
                }
            }
        };
!!!2828955.java!!!	setNonContinuousLayoutDivider(inout newDivider : Component) : void
        setNonContinuousLayoutDivider(newDivider, true);
!!!2829083.java!!!	setNonContinuousLayoutDivider(inout newDivider : Component, inout rememberSizes : boolean) : void
        rememberPaneSizes = rememberSizes;
        if(nonContinuousLayoutDivider != null && splitPane != null) {
            splitPane.remove(nonContinuousLayoutDivider);
        }
        nonContinuousLayoutDivider = newDivider;
!!!2829211.java!!!	addHeavyweightDivider() : void
        if(nonContinuousLayoutDivider != null && splitPane != null) {

            /* Needs to remove all the components and re-add them! YECK! */
	    // This is all done so that the nonContinuousLayoutDivider will
	    // be drawn on top of the other components, without this, one
	    // of the heavyweights will draw over the divider!
            Component             leftC = splitPane.getLeftComponent();
            Component             rightC = splitPane.getRightComponent();
	    int                   lastLocation = splitPane.
		                              getDividerLocation();

            if(leftC != null)
                splitPane.setLeftComponent(null);
            if(rightC != null)
                splitPane.setRightComponent(null);
            splitPane.remove(divider);
            splitPane.add(nonContinuousLayoutDivider, BasicSplitPaneUI.
                          NON_CONTINUOUS_DIVIDER,
                          splitPane.getComponentCount());
            splitPane.setLeftComponent(leftC);
            splitPane.setRightComponent(rightC);
            splitPane.add(divider, JSplitPane.DIVIDER);
            if(rememberPaneSizes) {
		splitPane.setDividerLocation(lastLocation);
	    } 
        }
 
!!!2829339.java!!!	getNonContinuousLayoutDivider() : Component
        return nonContinuousLayoutDivider;
!!!2829467.java!!!	getSplitPane() : JSplitPane
        return splitPane;
!!!2829595.java!!!	createDefaultDivider() : BasicSplitPaneDivider
        return new BasicSplitPaneDivider(this);
!!!2829723.java!!!	resetToPreferredSizes(inout jc : JSplitPane) : void
        if(splitPane != null) {
            layoutManager.resetToPreferredSizes();
            splitPane.revalidate();
	    splitPane.repaint();
        }
!!!2829851.java!!!	setDividerLocation(inout jc : JSplitPane, in location : int) : void
	if (!ignoreDividerLocationChange) {
	    dividerLocationIsSet = true;
	    splitPane.revalidate();
	    splitPane.repaint();

            if (keepHidden) {		
		Insets insets = splitPane.getInsets();
		int orientation = splitPane.getOrientation(); 
		if ((orientation == JSplitPane.VERTICAL_SPLIT &&
		     location != insets.top &&
		     location != splitPane.getHeight()-divider.getHeight()-insets.top) ||
		    (orientation == JSplitPane.HORIZONTAL_SPLIT &&
		     location != insets.left &&
		     location != splitPane.getWidth()-divider.getWidth()-insets.left)) {
  		    setKeepHidden(false);
		}
	    }
	}
	else {
	    ignoreDividerLocationChange = false;
	}
!!!2829979.java!!!	getDividerLocation(inout jc : JSplitPane) : int
        if(orientation == JSplitPane.HORIZONTAL_SPLIT)
            return divider.getLocation().x;
        return divider.getLocation().y;
!!!2830107.java!!!	getMinimumDividerLocation(inout jc : JSplitPane) : int
        int       minLoc = 0;
        Component leftC = splitPane.getLeftComponent();

        if ((leftC != null) && (leftC.isVisible())) {
            Insets    insets = splitPane.getInsets();
            Dimension minSize = leftC.getMinimumSize();
            if(orientation == JSplitPane.HORIZONTAL_SPLIT) {
                minLoc = minSize.width;
            } else {
                minLoc = minSize.height;
            }
            if(insets != null) {
                if(orientation == JSplitPane.HORIZONTAL_SPLIT) {
                    minLoc += insets.left;
                } else {
                    minLoc += insets.top;
                }
            }
        }
        return minLoc;
!!!2830235.java!!!	getMaximumDividerLocation(inout jc : JSplitPane) : int
        Dimension splitPaneSize = splitPane.getSize();
        int       maxLoc = 0;
        Component rightC = splitPane.getRightComponent();

        if (rightC != null) {
            Insets    insets = splitPane.getInsets();
            Dimension minSize = new Dimension(0, 0);
            if (rightC.isVisible()) {
                minSize = rightC.getMinimumSize();
            }
            if(orientation == JSplitPane.HORIZONTAL_SPLIT) {
                maxLoc = splitPaneSize.width - minSize.width;
            } else {
                maxLoc = splitPaneSize.height - minSize.height; 
            }
            maxLoc -= dividerSize;
            if(insets != null) {
                if(orientation == JSplitPane.HORIZONTAL_SPLIT) {
                    maxLoc -= insets.right;
                } else {
                    maxLoc -= insets.top;
                }
            }
        }
        return Math.max(getMinimumDividerLocation(splitPane), maxLoc);
!!!2830363.java!!!	finishedPaintingChildren(inout jc : JSplitPane, inout g : Graphics) : void
        if(jc == splitPane && getLastDragLocation() != -1 &&
           !isContinuousLayout() && !draggingHW) {
            Dimension      size = splitPane.getSize();

            g.setColor(dividerDraggingColor);
            if(orientation == JSplitPane.HORIZONTAL_SPLIT) {
                g.fillRect(getLastDragLocation(), 0, dividerSize - 1,
                           size.height - 1);
            } else {
                g.fillRect(0, lastDragLocation, size.width - 1,
                           dividerSize - 1);
            }
        }
!!!2830491.java!!!	paint(inout g : Graphics, inout jc : JComponent) : void
	if (!painted && splitPane.getDividerLocation()<0) {
	    ignoreDividerLocationChange = true;
	    splitPane.setDividerLocation(getDividerLocation(splitPane));
	}
	painted = true;
!!!2830619.java!!!	getPreferredSize(inout jc : JComponent) : Dimension
        if(splitPane != null)
            return layoutManager.preferredLayoutSize(splitPane);
        return new Dimension(0, 0);
!!!2830747.java!!!	getMinimumSize(inout jc : JComponent) : Dimension
        if(splitPane != null)
            return layoutManager.minimumLayoutSize(splitPane);
        return new Dimension(0, 0);
!!!2830875.java!!!	getMaximumSize(inout jc : JComponent) : Dimension
        if(splitPane != null)
            return layoutManager.maximumLayoutSize(splitPane);
        return new Dimension(0, 0);
!!!2831003.java!!!	getInsets(inout jc : JComponent) : Insets
        return null;
!!!2831131.java!!!	resetLayoutManager() : void
        if(orientation == JSplitPane.HORIZONTAL_SPLIT) {
            layoutManager = new BasicHorizontalLayoutManager(0);
        } else {
            layoutManager = new BasicHorizontalLayoutManager(1);
        }
        splitPane.setLayout(layoutManager);
        layoutManager.updateComponents();
        splitPane.revalidate();
        splitPane.repaint();
!!!2831259.java!!!	setKeepHidden(inout keepHidden : boolean) : void
	this.keepHidden = keepHidden;
!!!2831387.java!!!	getKeepHidden() : boolean
	return keepHidden;
!!!2831515.java!!!	startDragging() : void
        Component       leftC = splitPane.getLeftComponent();
        Component       rightC = splitPane.getRightComponent();
        ComponentPeer   cPeer;

        beginDragDividerLocation = getDividerLocation(splitPane);
        draggingHW = false;
        if(leftC != null && (cPeer = leftC.getPeer()) != null &&
           !(cPeer instanceof LightweightPeer)) {
            draggingHW = true;
        } else if(rightC != null && (cPeer = rightC.getPeer()) != null
                  && !(cPeer instanceof LightweightPeer)) {
            draggingHW = true;
        }
        if(orientation == JSplitPane.HORIZONTAL_SPLIT) {
            setLastDragLocation(divider.getBounds().x);
            dividerSize = divider.getSize().width;
            if(!isContinuousLayout() && draggingHW) {
                nonContinuousLayoutDivider.setBounds
                        (getLastDragLocation(), 0, dividerSize,
                         splitPane.getHeight());
		      addHeavyweightDivider();
            }
        } else {
            setLastDragLocation(divider.getBounds().y);
            dividerSize = divider.getSize().height;
            if(!isContinuousLayout() && draggingHW) {
                nonContinuousLayoutDivider.setBounds
                        (0, getLastDragLocation(), splitPane.getWidth(),
                         dividerSize);
		      addHeavyweightDivider();
            }
        }
!!!2831643.java!!!	dragDividerTo(in location : int) : void
        if(getLastDragLocation() != location) {
            if(isContinuousLayout()) {
		splitPane.setDividerLocation(location);
                setLastDragLocation(location);
            } else {
                int lastLoc = getLastDragLocation();

                setLastDragLocation(location);
                if(orientation == JSplitPane.HORIZONTAL_SPLIT) {
                    if(draggingHW) {
                        nonContinuousLayoutDivider.setLocation(
                            getLastDragLocation(), 0);
                    } else {
			int   splitHeight = splitPane.getHeight();
                        splitPane.repaint(lastLoc, 0, dividerSize,
                                          splitHeight);
                        splitPane.repaint(location, 0, dividerSize,
                                          splitHeight);
                    }
                } else {
                    if(draggingHW) {
                        nonContinuousLayoutDivider.setLocation(0,
                            getLastDragLocation());
                    } else {
			int    splitWidth = splitPane.getWidth();

                        splitPane.repaint(0, lastLoc, splitWidth,
                                          dividerSize);
                        splitPane.repaint(0, location, splitWidth,
                                          dividerSize);
                    }
                }
            }
        }
!!!2831771.java!!!	finishDraggingTo(in location : int) : void
        dragDividerTo(location);
        setLastDragLocation(-1);
        if(!isContinuousLayout()) {
            Component   leftC = splitPane.getLeftComponent();
            Rectangle   leftBounds = leftC.getBounds();

	    if (draggingHW) {
		if(orientation == JSplitPane.HORIZONTAL_SPLIT) {
                    nonContinuousLayoutDivider.setLocation(-dividerSize, 0);
		}
		else {
                    nonContinuousLayoutDivider.setLocation(0, -dividerSize);
		}
		splitPane.remove(nonContinuousLayoutDivider);
	    }
	    splitPane.setDividerLocation(location);
        }
!!!2831899.java!!!	getDividerBorderSize() : int
        return 1;
