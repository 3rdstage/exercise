class BasicStroke
!!!6152987.java!!!	BasicStroke(in width : float, in cap : int, in join : int, in miterlimit : float, in dash : float, in dash_phase : float)
	if (width < 0.0f) {
	    throw new IllegalArgumentException("negative width");
	}
	if (cap != CAP_BUTT && cap != CAP_ROUND && cap != CAP_SQUARE) {
	    throw new IllegalArgumentException("illegal end cap value");
	}
	if (join == JOIN_MITER) {
	    if (miterlimit < 1.0f) {
		throw new IllegalArgumentException("miter limit < 1");
	    }
	} else if (join != JOIN_ROUND && join != JOIN_BEVEL) {
	    throw new IllegalArgumentException("illegal line join value");
	}
	if (dash != null) {
	    if (dash_phase < 0.0f) {
		throw new IllegalArgumentException("negative dash phase");
	    }
	    boolean allzero = true;
	    for (int i = 0; i < dash.length; i++) {
		float d = dash[i];
		if (d > 0.0) {
		    allzero = false;
		} else if (d < 0.0) {
		    throw new IllegalArgumentException("negative dash length");
		}
	    }
	    if (allzero) {
		throw new IllegalArgumentException("dash lengths all zero");
	    }
	}
	this.width	= width;
	this.cap	= cap;
	this.join	= join;
	this.miterlimit	= miterlimit;
        if (dash != null) {
            this.dash = (float []) dash.clone();
        }
	this.dash_phase	= dash_phase;
!!!6153115.java!!!	BasicStroke(in width : float, in cap : int, in join : int, in miterlimit : float)
	this(width, cap, join, miterlimit, null, 0.0f);
!!!6153243.java!!!	BasicStroke(in width : float, in cap : int, in join : int)
	this(width, cap, join, 10.0f, null, 0.0f);
!!!6153371.java!!!	BasicStroke(in width : float)
	this(width, CAP_SQUARE, JOIN_MITER, 10.0f, null, 0.0f);
!!!6153499.java!!!	BasicStroke()
	this(1.0f, CAP_SQUARE, JOIN_MITER, 10.0f, null, 0.0f);
!!!6153627.java!!!	createStrokedShape(inout s : Shape) : Shape
	FillAdapter filler = new FillAdapter();
	PathStroker stroker = new PathStroker(filler);
	PathDasher dasher = null;

	try {
	    PathConsumer consumer;

	    stroker.setPenDiameter(width);
	    stroker.setPenT4(null);
	    stroker.setCaps(RasterizerCaps[cap]);
	    stroker.setCorners(RasterizerCorners[join], miterlimit);
	    if (dash != null) {
		dasher = new PathDasher(stroker);
		dasher.setDash(dash, dash_phase);
		dasher.setDashT4(null);
		consumer = dasher;
	    } else {
		consumer = stroker;
	    }

	    feedConsumer(consumer, s.getPathIterator(null));
	} finally {
	    stroker.dispose();
	    if (dasher != null) {
		dasher.dispose();
	    }
	}

	return filler.getShape();
!!!6153755.java!!!	feedConsumer(inout consumer : PathConsumer, inout pi : PathIterator) : void
	try {
	    consumer.beginPath();
	    boolean pathClosed = false;
	    float mx = 0.0f;
	    float my = 0.0f;
	    float point[]  = new float[6];

	    while (!pi.isDone()) {
		int type = pi.currentSegment(point);
		if (pathClosed == true) {
		    pathClosed = false;
		    if (type != PathIterator.SEG_MOVETO) {
			// Force current point back to last moveto point
			consumer.beginSubpath(mx, my);
		    }
		}
		switch (type) {
		case PathIterator.SEG_MOVETO:
		    mx = point[0];
		    my = point[1];
		    consumer.beginSubpath(point[0], point[1]);
		    break;
		case PathIterator.SEG_LINETO:
		    consumer.appendLine(point[0], point[1]);
		    break;
		case PathIterator.SEG_QUADTO:
		    // Quadratic curves take two points
		    consumer.appendQuadratic(point[0], point[1],
					     point[2], point[3]);
		    break;
		case PathIterator.SEG_CUBICTO:
		    // Cubic curves take three points
		    consumer.appendCubic(point[0], point[1],
					 point[2], point[3],
					 point[4], point[5]);
		    break;
		case PathIterator.SEG_CLOSE:
		    consumer.closedSubpath();
		    pathClosed = true;
		    break;
		}
		pi.next();
	    }

	    consumer.endPath();
	} catch (PathException e) {
	    throw new InternalError("Unable to Stroke shape ("+
				    e.getMessage()+")");
	}
!!!6153883.java!!!	getLineWidth() : float
	return width;
!!!6154011.java!!!	getEndCap() : int
	return cap;
!!!6154139.java!!!	getLineJoin() : int
	return join;
!!!6154267.java!!!	getMiterLimit() : float
	return miterlimit;
!!!6154395.java!!!	getDashArray() : float
        if (dash == null) {
            return null;
        }

        return (float[]) dash.clone();
!!!6154523.java!!!	getDashPhase() : float
	return dash_phase;
!!!6154651.java!!!	hashCode() : int
	int hash = Float.floatToIntBits(width);
	hash = hash * 31 + join;
	hash = hash * 31 + cap;
	hash = hash * 31 + Float.floatToIntBits(miterlimit);
	if (dash != null) {
	    hash = hash * 31 + Float.floatToIntBits(dash_phase);
	    for (int i = 0; i < dash.length; i++) {
		hash = hash * 31 + Float.floatToIntBits(dash[i]);
	    }
	}
	return hash;
!!!6154779.java!!!	equals(inout obj : Object) : boolean
        if (!(obj instanceof BasicStroke)) {
            return false;
        }

        BasicStroke bs = (BasicStroke) obj;
        if (width != bs.width) {
            return false;
        }

        if (join != bs.join) {
            return false;
        }

        if (cap != bs.cap) {
            return false;
        }

        if (miterlimit != bs.miterlimit) {
            return false;
        }

        if (dash != null) {
	    if (dash_phase != bs.dash_phase) {
		return false;
	    }

	    if (!java.util.Arrays.equals(dash, bs.dash)) {
		return false;
	    }
        }
        else if (bs.dash != null) {
            return false;
        }

        return true;
