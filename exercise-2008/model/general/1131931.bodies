class SpringLayout
!!!9282587.java!!!	resetCyclicStatuses() : void
 
        cyclicSprings = new HashSet();
        acyclicSprings = new HashSet();
!!!9282715.java!!!	setParent(inout p : Container) : void
 
        resetCyclicStatuses(); 
        Constraints pc = getConstraints(p);
        
        pc.setX(Spring.constant(0));
        pc.setY(Spring.constant(0));
        // The applyDefaults() method automatically adds width and
        // height springs that delegate their calculations to the
        // getMinimumSize(), getPreferredSize() and getMaximumSize()
        // methods of the relevant component. In the case of the
        // parent this will cause an infinite loop since these
        // methods, in turn, delegate their calculations to the
        // layout manager. Check for this case and replace the
        // the springs that would cause this problem with a
        // constant springs that supply default values.
        Spring width = pc.getWidth();
        if (width instanceof Spring.WidthSpring && ((Spring.WidthSpring)width).c == p) {
            pc.setWidth(Spring.constant(0, 0, Integer.MAX_VALUE));
        }
        Spring height = pc.getHeight();
        if (height instanceof Spring.HeightSpring && ((Spring.HeightSpring)height).c == p) {
            pc.setHeight(Spring.constant(0, 0, Integer.MAX_VALUE));
        }
!!!9282843.java!!!	isCyclic(inout s : Spring) : boolean
 
        if (s == null) {
            return false;
        }
        if (cyclicSprings.contains(s)) {
            return true;
        }
        if (acyclicSprings.contains(s)) {
            return false;
        }
        cyclicSprings.add(s);
        boolean result = s.isCyclic(this);
        if (!result) {
            acyclicSprings.add(s);
            cyclicSprings.remove(s);
        }
        else {
            System.err.println(s + " is cyclic. ");
        }
        return result;
!!!9282971.java!!!	abandonCycles(inout s : Spring) : Spring
 
        return isCyclic(s) ? cyclicReference : s;
!!!9283227.java!!!	removeLayoutComponent(inout c : Component) : void
        componentConstraints.remove(c);
!!!9283355.java!!!	addInsets(in width : int, in height : int, inout p : Container) : Dimension
        Insets i = p.getInsets();
        return new Dimension(width + i.left + i.right, height + i.top + i.bottom);
!!!9283483.java!!!	minimumLayoutSize(inout parent : Container) : Dimension
        setParent(parent);
        Constraints pc = getConstraints(parent); 
        return addInsets(abandonCycles(pc.getWidth()).getMinimumValue(),
                         abandonCycles(pc.getHeight()).getMinimumValue(),
                         parent);
!!!9283611.java!!!	preferredLayoutSize(inout parent : Container) : Dimension
        setParent(parent);
        Constraints pc = getConstraints(parent); 
        return addInsets(abandonCycles(pc.getWidth()).getPreferredValue(),
                         abandonCycles(pc.getHeight()).getPreferredValue(),
                         parent);
!!!9283739.java!!!	maximumLayoutSize(inout parent : Container) : Dimension
        setParent(parent);
        Constraints pc = getConstraints(parent); 
        return addInsets(abandonCycles(pc.getWidth()).getMaximumValue(),
                         abandonCycles(pc.getHeight()).getMaximumValue(),
                         parent);
!!!9283867.java!!!	addLayoutComponent(inout component : Component, inout constraints : Object) : void
        if (constraints instanceof Constraints) {
            putConstraints(component, (Constraints)constraints);
        }
!!!9283995.java!!!	getLayoutAlignmentX(inout p : Container) : float
        return 0.5f;
!!!9284123.java!!!	getLayoutAlignmentY(inout p : Container) : float
        return 0.5f;
!!!9284379.java!!!	putConstraint(in e1 : String, inout c1 : Component, in pad : int, in e2 : String, inout c2 : Component) : void
        putConstraint(e1, c1, Spring.constant(pad), e2, c2);
!!!9284507.java!!!	putConstraint(in e1 : String, inout c1 : Component, inout s : Spring, in e2 : String, inout c2 : Component) : void
        putConstraint(e1, c1, Spring.sum(s, getConstraint(e2, c2)));
!!!9284635.java!!!	putConstraint(in e : String, inout c : Component, inout s : Spring) : void
        if (s != null) {
            getConstraints(c).setConstraint(e, s);
        }
!!!9284763.java!!!	applyDefaults(inout c : Component, inout constraints : Constraints) : Constraints
        if (constraints == null) {
           constraints = new Constraints();
        }
        if (constraints.getWidth() == null) {
            constraints.setWidth(new Spring.WidthSpring(c));
        }
        if (constraints.getHeight() == null) {
            constraints.setHeight(new Spring.HeightSpring(c));
        }
        if (constraints.getX() == null) {
            constraints.setX(Spring.constant(0));
        }
        if (constraints.getY() == null) {
            constraints.setY(Spring.constant(0));
        }
        return constraints;
!!!9284891.java!!!	putConstraints(inout component : Component, inout constraints : Constraints) : void
        componentConstraints.put(component, applyDefaults(component, constraints));
!!!9285019.java!!!	getConstraints(inout c : Component) : Constraints
       Constraints result = (Constraints)componentConstraints.get(c);
       if (result == null) {
           if (c instanceof javax.swing.JComponent) {
                Object cp = ((javax.swing.JComponent)c).getClientProperty(SpringLayout.class);
                if (cp instanceof Constraints) {
                    return applyDefaults(c, (Constraints)cp);
                }
            }
            result = new Constraints();
            putConstraints(c, result);
       }
       return result;
!!!9285147.java!!!	getConstraint(in edgeName : String, inout c : Component) : Spring
        // The interning here is unnecessary; it was added for efficiency.
        edgeName = edgeName.intern();
        return new SpringProxy(edgeName, c, this);
!!!9285275.java!!!	layoutContainer(inout parent : Container) : void
        setParent(parent);

        int n = parent.getComponentCount();
        getConstraints(parent).reset();
        for (int i = 0 ; i < n ; i++) {
            getConstraints(parent.getComponent(i)).reset();
        }

        Insets insets = parent.getInsets();
        Constraints pc = getConstraints(parent); 
        abandonCycles(pc.getX()).setValue(0);
        abandonCycles(pc.getY()).setValue(0);        
        abandonCycles(pc.getWidth()).setValue(parent.getWidth() -
                                              insets.left - insets.right);
        abandonCycles(pc.getHeight()).setValue(parent.getHeight() -
                                               insets.top - insets.bottom);
        
        for (int i = 0 ; i < n ; i++) {
	    Component c = parent.getComponent(i);
            Constraints cc = getConstraints(c); 
            int x = abandonCycles(cc.getX()).getValue();
            int y = abandonCycles(cc.getY()).getValue();
            int width = abandonCycles(cc.getWidth()).getValue();
            int height = abandonCycles(cc.getHeight()).getValue();
            c.setBounds(insets.left + x, insets.top + y, width, height);
	}
