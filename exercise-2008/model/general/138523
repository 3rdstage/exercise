format 66
"atomic" // src::java::util::concurrent::atomic
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/util/concurrent/atomic"
  java_package "java.util.concurrent.atomic"
  classview 138651 "atomic"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 205083 "AtomicBoolean"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <tt>boolean</tt> value that may be updated atomically. See the
{@link java.util.concurrent.atomic} package specification for
description of the properties of atomic variables. An
<tt>AtomicBoolean</tt> is used in applications such as atomically
updated flags, and cannot be used as a replacement for a
{@link java.lang.Boolean}.

@since 1.5
@author Doug Lea"
      classrelation 1948955 // <realization>
	relation 1948955 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1948955 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2937755 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  4654671469794556979L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2937883 "unsafe"
	class_attribute const_attribute private explicit_type "Unsafe"
	init_value "=   Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " setup to use Unsafe.compareAndSwapInt for updates"
      end

      attribute 2938011 "valueOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 166043 "initialization"
	
	cpp "" ""
	java "  static {
      try {
        valueOffset = unsafe.objectFieldOffset
            (AtomicBoolean.class.getDeclaredField(\"value\"));
      } catch (Exception ex) { throw new Error(ex); }
    }"
	php ""
	python ""
	idl ""
      end

      attribute 2938139 "value"
	volatile private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7975707 "AtomicBoolean"
	public explicit_return_type ""
	nparams 1
	  param inout name "initialValue" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>AtomicBoolean</tt> with the given initial value.

@param initialValue the initial value"
      end

      operation 7975835 "AtomicBoolean"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>AtomicBoolean</tt> with initial value <tt>false</tt>."
      end

      operation 7975963 "get"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value.

@return the current value"
      end

      operation 7976091 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "expect" explicit_type "boolean"
	  param inout name "update" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value to the given updated value
if the current value <tt>==</tt> the expected value.
@param expect the expected value
@param update the new value
@return true if successful. False return indicates that
the actual value was not equal to the expected value."
      end

      operation 7976219 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "expect" explicit_type "boolean"
	  param inout name "update" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value to the given updated value
if the current value <tt>==</tt> the expected value.
May fail spuriously.
@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 7976347 "set"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unconditionally sets to the given value.

@param newValue the new value"
      end

      operation 7976475 "getAndSet"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets to the given value and returns the previous value.

@param newValue the new value
@return the previous value"
      end

      operation 7976603 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current value.
@return the String representation of the current value."
      end
    end

    class 607259 "AtomicLong"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <tt>long</tt> value that may be updated atomically.  See the
{@link java.util.concurrent.atomic} package specification for
description of the properties of atomic variables. An
<tt>AtomicLong</tt> is used in applications such as atomically
incremented sequence numbers, and cannot be used as a replacement
for a {@link java.lang.Long}. However, this class does extend
<tt>Number</tt> to allow uniform access by tools and utilities that
deal with numerically-based classes.

@since 1.5
@author Doug Lea"
      classrelation 1949851 // <generalisation>
	relation 1949851 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1949851 // <generalisation>
	  b parent class_ref 413979 // Number
      end

      classrelation 1949979 // <realization>
	relation 1949979 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1949979 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2939675 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  1927816293512124184L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2939803 "unsafe"
	class_attribute const_attribute private explicit_type "Unsafe"
	init_value "=   Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " setup to use Unsafe.compareAndSwapLong for updates"
      end

      attribute 2939931 "valueOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2940059 "VM_SUPPORTS_LONG_CAS"
	class_attribute const_attribute package explicit_type "boolean"
	init_value "=  VMSupportsCS8()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Record whether the underlying JVM supports lockless
CompareAndSet for longs. While the unsafe.CompareAndSetLong
method works in either case, some constructions should be
handled at Java level to avoid locking user-visible locks.
"
      end

      operation 7983515 "VMSupportsCS8"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether underlying JVM supports lockless CompareAndSet
for longs. Called only once and cached in VM_SUPPORTS_LONG_CAS."
      end

      extra_member 166299 "initialization"
	
	cpp "" ""
	java "  static {
      try {
        valueOffset = unsafe.objectFieldOffset
            (AtomicLong.class.getDeclaredField(\"value\"));
      } catch(Exception ex) { throw new Error(ex); }
    }"
	php ""
	python ""
	idl ""
      end

      attribute 2940187 "value"
	volatile private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7983643 "AtomicLong"
	public explicit_return_type ""
	nparams 1
	  param in name "initialValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new AtomicLong with the given initial value.

@param initialValue the initial value"
      end

      operation 7983771 "AtomicLong"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new AtomicLong with initial value <tt>0</tt>."
      end

      operation 7983899 "get"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current value.

@return the current value"
      end

      operation 7984027 "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set to the given value.

@param newValue the new value"
      end

      operation 7984155 "getAndSet"
	public explicit_return_type "long"
	nparams 1
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set to the give value and return the old value.

@param newValue the new value
@return the previous value"
      end

      operation 7984283 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value to the given updated value
if the current value <tt>==</tt> the expected value.
@param expect the expected value
@param update the new value
@return true if successful. False return indicates that
the actual value was not equal to the expected value."
      end

      operation 7984411 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value to the given updated value
if the current value <tt>==</tt> the expected value.
May fail spuriously.
@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 7984539 "getAndIncrement"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increment by one the current value.
@return the previous value"
      end

      operation 7984667 "getAndDecrement"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrement by one the current value.
@return the previous value"
      end

      operation 7984795 "getAndAdd"
	public explicit_return_type "long"
	nparams 1
	  param in name "delta" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically add the given value to current value.
@param delta the value to add
@return the previous value"
      end

      operation 7984923 "incrementAndGet"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increment by one the current value.
@return the updated value"
      end

      operation 7985051 "decrementAndGet"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrement by one the current value.
@return the updated value"
      end

      operation 7985179 "addAndGet"
	public explicit_return_type "long"
	nparams 1
	  param in name "delta" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically add the given value to current value.
@param delta the value to add
@return the updated value"
      end

      operation 7985307 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current value.
@return the String representation of the current value."
      end

      operation 7985435 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7985563 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7985691 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7985819 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 902939 "AtomicReferenceFieldUpdater"
      abstract visibility public 
      nformals 6
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A reflection-based utility that enables atomic updates to
designated <tt>volatile</tt> reference fields of designated
classes.  This class is designed for use in atomic data structures
in which several reference fields of the same node are
independently subject to atomic updates. For example, a tree node
might be declared as

<pre>
class Node {
  private volatile Node left, right;

  private static final AtomicReferenceFieldUpdater&lt;Node, Node&gt; leftUpdater =
    AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"left\");
  private static AtomicReferenceFieldUpdater&lt;Node, Node&gt; rightUpdater =
    AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"right\");

  Node getLeft() { return left;  }
  boolean compareAndSetLeft(Node expect, Node update) {
    return leftUpdater.compareAndSet(this, expect, update);
  }
  // ... and so on
}
</pre>

<p> Note that the guarantees of the <tt>compareAndSet</tt>
method in this class are weaker than in other atomic classes. Because this
class cannot ensure that all uses of the field are appropriate for
purposes of atomic access, it can guarantee atomicity and volatile
semantics only with respect to other invocations of
<tt>compareAndSet</tt> and <tt>set</tt>.
@since 1.5
@author Doug Lea
@param <T> The type of the object holding the updatable field
@param <V> The type of the field"
      operation 7993627 "newUpdater"
	class_operation public return_type class_ref 902939 // AtomicReferenceFieldUpdater
	nparams 3
	  param inout name "tclass" type class_ref 164635 // Class
	  param inout name "vclass" type class_ref 164635 // Class
	  param in name "fieldName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U, W> ${type}<U,W> ${name}${(}${t0}<U> ${p0}, ${t1}<W> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an updater for objects with the given field.  The Class
arguments are needed to check that reflective types and generic
types match.
@param tclass the class of the objects holding the field.
@param vclass the class of the field
@param fieldName the name of the field to be updated.
@return the updater
@throws IllegalArgumentException if the field is not a volatile reference type.
@throws RuntimeException with a nested reflection-based
exception if the class does not hold field or is the wrong type."
      end

      operation 7993755 "AtomicReferenceFieldUpdater"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected do-nothing constructor for use by subclasses."
      end

      operation 7993883 "compareAndSet"
	abstract public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param inout name "expect" explicit_type "V"
	  param inout name "update" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value of the field of the given object managed
by this Updater to the given updated value if the current value
<tt>==</tt> the expected value. This method is guaranteed to be
atomic with respect to other calls to <tt>compareAndSet</tt> and
<tt>set</tt>, but not necessarily with respect to other
changes in the field.
@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 7994011 "weakCompareAndSet"
	abstract public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param inout name "expect" explicit_type "V"
	  param inout name "update" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value of the field of the given object managed
by this Updater to the given updated value if the current value
<tt>==</tt> the expected value. This method is guaranteed to be
atomic with respect to other calls to <tt>compareAndSet</tt> and
<tt>set</tt>, but not necessarily with respect to other
changes in the field, and may fail spuriously.
@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 7994139 "set"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param inout name "newValue" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the field of the given object managed by this updater. This
operation is guaranteed to act as a volatile store with respect
to subsequent invocations of <tt>compareAndSet</tt>.
@param obj An object whose field to set
@param newValue the new value"
      end

      operation 7994267 "get"
	abstract public explicit_return_type "V"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current value held in the field by the given object.
@param obj An object whose field to get
@return the current value"
      end

      operation 7994395 "getAndSet"
	public explicit_return_type "V"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param inout name "newValue" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set to the given value and return the old value.

@param obj An object whose field to get and set
@param newValue the new value
@return the previous value"
      end

      class 1001499 "AtomicReferenceFieldUpdaterImpl"
	visibility private 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 6
	actual class class_ref 902939 // AtomicReferenceFieldUpdater
	  rank 0 explicit_value "T"
	actual class class_ref 902939 // AtomicReferenceFieldUpdater
	  rank 1 explicit_value "V"
	actual class class_ref 902939 // AtomicReferenceFieldUpdater
	  rank 2 explicit_value ""
	actual class class_ref 902939 // AtomicReferenceFieldUpdater
	  rank 3 explicit_value ""
	actual class class_ref 902939 // AtomicReferenceFieldUpdater
	  rank 4 explicit_value ""
	actual class class_ref 902939 // AtomicReferenceFieldUpdater
	  rank 5 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1951259 // <realization>
	  relation 1951259 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1951259 // <realization>
	    b parent class_ref 902939 // AtomicReferenceFieldUpdater
	end

	attribute 2942363 "unsafe"
	  class_attribute const_attribute private explicit_type "Unsafe"
	  init_value "=   Unsafe.getUnsafe()"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2942491 "offset"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1951387 // tclass (<unidirectional association>)
	  relation 1951387 --->
	    a role_name "tclass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 1951387 // tclass (<unidirectional association>)
	    b parent class_ref 164635 // Class
	end

	classrelation 1951515 // vclass (<unidirectional association>)
	  relation 1951515 --->
	    a role_name "vclass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	      classrelation_ref 1951515 // vclass (<unidirectional association>)
	    b parent class_ref 164635 // Class
	end

	classrelation 1951643 // cclass (<unidirectional association>)
	  relation 1951643 --->
	    a role_name "cclass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1951643 // cclass (<unidirectional association>)
	    b parent class_ref 164635 // Class
	end

	operation 7994523 "AtomicReferenceFieldUpdaterImpl"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "tclass" type class_ref 164635 // Class
	    param inout name "vclass" type class_ref 164635 // Class
	    param in name "fieldName" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}<V> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7994651 "compareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param inout name "expect" explicit_type "V"
	    param inout name "update" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7994779 "weakCompareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param inout name "expect" explicit_type "V"
	    param inout name "update" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7994907 "set"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param inout name "newValue" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7995035 "get"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7995163 "ensureProtectedAccess"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 994331 "AtomicReference"
      visibility public 
      nformals 3
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object reference that may be updated atomically. See the {@link
java.util.concurrent.atomic} package specification for description
of the properties of atomic variables.
@since 1.5
@author Doug Lea
@param <V> The type of object referred to by this reference"
      classrelation 1933595 // <realization>
	relation 1933595 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1933595 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2929051 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -1848883965231344442L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2929179 "unsafe"
	class_attribute const_attribute private explicit_type "Unsafe"
	init_value "=   Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2929307 "valueOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 165915 "initialization"
	
	cpp "" ""
	java "  static {
      try {
        valueOffset = unsafe.objectFieldOffset
            (AtomicReference.class.getDeclaredField(\"value\"));
      } catch(Exception ex) { throw new Error(ex); }
    }"
	php ""
	python ""
	idl ""
      end

      attribute 2929435 "value"
	volatile private explicit_type "V"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7926427 "AtomicReference"
	public explicit_return_type ""
	nparams 1
	  param inout name "initialValue" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new AtomicReference with the given initial value.

@param initialValue the initial value"
      end

      operation 7926555 "AtomicReference"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new AtomicReference with null initial value."
      end

      operation 7926683 "get"
	public explicit_return_type "V"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current value.

@return the current value"
      end

      operation 7926811 "set"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "V"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set to the given value.

@param newValue the new value"
      end

      operation 7926939 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "expect" explicit_type "V"
	  param inout name "update" explicit_type "V"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value to the given updated value
if the current value <tt>==</tt> the expected value.
@param expect the expected value
@param update the new value
@return true if successful. False return indicates that
the actual value was not equal to the expected value."
      end

      operation 7927067 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "expect" explicit_type "V"
	  param inout name "update" explicit_type "V"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value to the given updated value
if the current value <tt>==</tt> the expected value.
May fail spuriously.
@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 7927195 "getAndSet"
	public explicit_return_type "V"
	nparams 1
	  param inout name "newValue" explicit_type "V"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set to the given value and return the old value.

@param newValue the new value
@return the previous value"
      end

      operation 7927323 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current value.
@return the String representation of the current value."
      end
    end

    class 994587 "AtomicInteger"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <tt>int</tt> value that may be updated atomically. See the
{@link java.util.concurrent.atomic} package specification for
description of the properties of atomic variables. An
<tt>AtomicInteger</tt> is used in applications such as atomically
incremented counters, and cannot be used as a replacement for an
{@link java.lang.Integer}. However, this class does extend
<tt>Number</tt> to allow uniform access by tools and utilities that
deal with numerically-based classes.


@since 1.5
@author Doug Lea"
      classrelation 1949083 // <generalisation>
	relation 1949083 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1949083 // <generalisation>
	  b parent class_ref 413979 // Number
      end

      classrelation 1949211 // <realization>
	relation 1949211 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1949211 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2938267 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  6214790243416807050L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2938395 "unsafe"
	class_attribute const_attribute private explicit_type "Unsafe"
	init_value "=   Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " setup to use Unsafe.compareAndSwapInt for updates"
      end

      attribute 2938523 "valueOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 166171 "initialization"
	
	cpp "" ""
	java "  static {
      try {
        valueOffset = unsafe.objectFieldOffset
            (AtomicInteger.class.getDeclaredField(\"value\"));
      } catch(Exception ex) { throw new Error(ex); }
    }"
	php ""
	python ""
	idl ""
      end

      attribute 2938651 "value"
	volatile private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7976731 "AtomicInteger"
	public explicit_return_type ""
	nparams 1
	  param in name "initialValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new AtomicInteger with the given initial value.

@param initialValue the initial value"
      end

      operation 7976859 "AtomicInteger"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new AtomicInteger with initial value <tt>0</tt>."
      end

      operation 7976987 "get"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current value.

@return the current value"
      end

      operation 7977115 "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set to the given value.

@param newValue the new value"
      end

      operation 7977243 "getAndSet"
	public explicit_return_type "int"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set to the give value and return the old value.

@param newValue the new value
@return the previous value"
      end

      operation 7977371 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value to the given updated value
if the current value <tt>==</tt> the expected value.
@param expect the expected value
@param update the new value
@return true if successful. False return indicates that
the actual value was not equal to the expected value."
      end

      operation 7977499 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value to the given updated value
if the current value <tt>==</tt> the expected value.
May fail spuriously.
@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 7977627 "getAndIncrement"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increment by one the current value.
@return the previous value"
      end

      operation 7977755 "getAndDecrement"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrement by one the current value.
@return the previous value"
      end

      operation 7977883 "getAndAdd"
	public explicit_return_type "int"
	nparams 1
	  param in name "delta" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically add the given value to current value.
@param delta the value to add
@return the previous value"
      end

      operation 7978011 "incrementAndGet"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increment by one the current value.
@return the updated value"
      end

      operation 7978139 "decrementAndGet"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrement by one the current value.
@return the updated value"
      end

      operation 7978267 "addAndGet"
	public explicit_return_type "int"
	nparams 1
	  param in name "delta" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically add the given value to current value.
@param delta the value to add
@return the updated value"
      end

      operation 7978395 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current value.
@return the String representation of the current value."
      end

      operation 7978523 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7978651 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7978779 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7978907 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1000219 "AtomicIntegerArray"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <tt>int</tt> array in which elements may be updated atomically.
See the {@link java.util.concurrent.atomic} package
specification for description of the properties of atomic
variables.
@since 1.5
@author Doug Lea"
      classrelation 1949339 // <realization>
	relation 1949339 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1949339 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2938779 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  2862133569453604235L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2938907 "unsafe"
	class_attribute const_attribute private explicit_type "Unsafe"
	init_value "=   Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " setup to use Unsafe.compareAndSwapInt for updates"
      end

      attribute 2939035 "base"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  unsafe.arrayBaseOffset(int[].class)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2939163 "scale"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  unsafe.arrayIndexScale(int[].class)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2939291 "array"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7979035 "rawIndex"
	private explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7979163 "AtomicIntegerArray"
	public explicit_return_type ""
	nparams 1
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new AtomicIntegerArray of given length.

@param length the length of the array"
      end

      operation 7979291 "AtomicIntegerArray"
	public explicit_return_type ""
	nparams 1
	  param in name "array" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new AtomicIntegerArray with the same length as, and
all elements copied from, the given array.

@param array the array to copy elements from
@throws NullPointerException if array is null"
      end

      operation 7979419 "length"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the array.

@return the length of the array"
      end

      operation 7979547 "get"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current value at position <tt>i</tt>.

@param i the index
@return the current value"
      end

      operation 7979675 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the element at position <tt>i</tt> to the given value.

@param i the index
@param newValue the new value"
      end

      operation 7979803 "getAndSet"
	public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the element at position <tt>i</tt> to the given value and return the
old value.

@param i the index
@param newValue the new value
@return the previous value"
      end

      operation 7979931 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value to the given updated value
if the current value <tt>==</tt> the expected value.

@param i the index
@param expect the expected value
@param update the new value
@return true if successful. False return indicates that
the actual value was not equal to the expected value."
      end

      operation 7980059 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value to the given updated value
if the current value <tt>==</tt> the expected value.
May fail spuriously.

@param i the index
@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 7980187 "getAndIncrement"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increment by one the element at index <tt>i</tt>.

@param i the index
@return the previous value;"
      end

      operation 7980315 "getAndDecrement"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrement by one the element at index <tt>i</tt>.

@param i the index
@return the previous value;"
      end

      operation 7980443 "getAndAdd"
	public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "delta" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically add the given value to element at index <tt>i</tt>.

@param i the index
@param delta the value to add
@return the previous value;"
      end

      operation 7980571 "incrementAndGet"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increment by one the element at index <tt>i</tt>.

@param i the index
@return the updated value;"
      end

      operation 7980699 "decrementAndGet"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrement by one the element at index <tt>i</tt>.

@param i the index
@return the updated value;"
      end

      operation 7980827 "addAndGet"
	public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "delta" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically add the given value to element at index <tt>i</tt>.

@param i the index
@param delta the value to add
@return the updated value;"
      end

      operation 7980955 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current values of array.
@return the String representation of the current values of array."
      end
    end

    class 1000347 "AtomicIntegerFieldUpdater"
      abstract visibility public 
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A reflection-based utility that enables atomic updates to
designated <tt>volatile int</tt> fields of designated classes.
This class is designed for use in atomic data structures in which
several fields of the same node are independently subject to atomic
updates.

<p> Note that the guarantees of the <tt>compareAndSet</tt> method
in this class are weaker than in other atomic classes. Because this
class cannot ensure that all uses of the field are appropriate for
purposes of atomic access, it can guarantee atomicity and volatile
semantics only with respect to other invocations of
<tt>compareAndSet</tt> and <tt>set</tt>.
@since 1.5
@author Doug Lea
@param <T> The type of the object holding the updatable field"
      operation 7981083 "newUpdater"
	class_operation public return_type class_ref 1000347 // AtomicIntegerFieldUpdater
	nparams 2
	  param inout name "tclass" type class_ref 164635 // Class
	  param in name "fieldName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<U> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an updater for objects with the given field.  The Class
argument is needed to check that reflective types and generic
types match.
@param tclass the class of the objects holding the field
@param fieldName the name of the field to be updated.
@return the updater
@throws IllegalArgumentException if the field is not a
volatile integer type.
@throws RuntimeException with a nested reflection-based
exception if the class does not hold field or is the wrong type."
      end

      operation 7981211 "AtomicIntegerFieldUpdater"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected do-nothing constructor for use by subclasses."
      end

      operation 7981339 "compareAndSet"
	abstract public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value of the field of the given object managed
by this Updater to the given updated value if the current value
<tt>==</tt> the expected value. This method is guaranteed to be
atomic with respect to other calls to <tt>compareAndSet</tt> and
<tt>set</tt>, but not necessarily with respect to other
changes in the field.
@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return true if successful.
@throws ClassCastException if <tt>obj</tt> is not an instance
of the class possessing the field established in the constructor."
      end

      operation 7981467 "weakCompareAndSet"
	abstract public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value of the field of the given object managed
by this Updater to the given updated value if the current value
<tt>==</tt> the expected value. This method is guaranteed to be
atomic with respect to other calls to <tt>compareAndSet</tt> and
<tt>set</tt>, but not necessarily with respect to other
changes in the field, and may fail spuriously.
@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return true if successful.
@throws ClassCastException if <tt>obj</tt> is not an instance
of the class possessing the field established in the constructor."
      end

      operation 7981595 "set"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the field of the given object managed by this updater. This
operation is guaranteed to act as a volatile store with respect
to subsequent invocations of <tt>compareAndSet</tt>.
@param obj An object whose field to set
@param newValue the new value"
      end

      operation 7981723 "get"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current value held in the field by the given object.
@param obj An object whose field to get
@return the current value"
      end

      operation 7981851 "getAndSet"
	public explicit_return_type "int"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set to the given value and return the old value.

@param obj An object whose field to get and set
@param newValue the new value
@return the previous value"
      end

      operation 7981979 "getAndIncrement"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increment by one the current value.
@param obj An object whose field to get and set
@return the previous value;"
      end

      operation 7982107 "getAndDecrement"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrement by one the current value.
@param obj An object whose field to get and set
@return the previous value;"
      end

      operation 7982235 "getAndAdd"
	public explicit_return_type "int"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "delta" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically add the given value to current value.
@param obj An object whose field to get and set
@param delta the value to add
@return the previous value;"
      end

      operation 7982363 "incrementAndGet"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increment by one the current value.
@param obj An object whose field to get and set
@return the updated value;"
      end

      operation 7982491 "decrementAndGet"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrement by one the current value.
@param obj An object whose field to get and set
@return the updated value;"
      end

      operation 7982619 "addAndGet"
	public explicit_return_type "int"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "delta" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically add the given value to current value.
@param obj An object whose field to get and set
@param delta the value to add
@return the updated value;"
      end

      class 1000475 "AtomicIntegerFieldUpdaterImpl"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 1000347 // AtomicIntegerFieldUpdater
	  rank 0 explicit_value "T"
	actual class class_ref 1000347 // AtomicIntegerFieldUpdater
	  rank 1 explicit_value ""
	actual class class_ref 1000347 // AtomicIntegerFieldUpdater
	  rank 2 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1949467 // <realization>
	  relation 1949467 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1949467 // <realization>
	    b parent class_ref 1000347 // AtomicIntegerFieldUpdater
	end

	attribute 2939419 "unsafe"
	  class_attribute const_attribute private explicit_type "Unsafe"
	  init_value "=   Unsafe.getUnsafe()"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2939547 "offset"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1949595 // tclass (<unidirectional association>)
	  relation 1949595 --->
	    a role_name "tclass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 1949595 // tclass (<unidirectional association>)
	    b parent class_ref 164635 // Class
	end

	classrelation 1949723 // cclass (<unidirectional association>)
	  relation 1949723 --->
	    a role_name "cclass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1949723 // cclass (<unidirectional association>)
	    b parent class_ref 164635 // Class
	end

	operation 7982747 "AtomicIntegerFieldUpdaterImpl"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "tclass" type class_ref 164635 // Class
	    param in name "fieldName" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7982875 "compareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "int"
	    param in name "update" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7983003 "weakCompareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "int"
	    param in name "update" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7983131 "set"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7983259 "get"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7983387 "ensureProtectedAccess"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 1000603 "AtomicLongArray"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <tt>long</tt> array in which elements may be updated atomically.
See the {@link java.util.concurrent.atomic} package specification
for description of the properties of atomic variables.
@since 1.5
@author Doug Lea"
      classrelation 1950107 // <realization>
	relation 1950107 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1950107 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2940315 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -2308431214976778248L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2940443 "unsafe"
	class_attribute const_attribute private explicit_type "Unsafe"
	init_value "=   Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " setup to use Unsafe.compareAndSwapInt for updates"
      end

      attribute 2940571 "base"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  unsafe.arrayBaseOffset(long[].class)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2940699 "scale"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  unsafe.arrayIndexScale(long[].class)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2940827 "array"
	const_attribute private explicit_type "long"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7985947 "rawIndex"
	private explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7986075 "AtomicLongArray"
	public explicit_return_type ""
	nparams 1
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new AtomicLongArray of given length.
@param length the length of the array"
      end

      operation 7986203 "AtomicLongArray"
	public explicit_return_type ""
	nparams 1
	  param in name "array" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new AtomicLongArray with the same length as, and
all elements copied from, the given array.

@param array the array to copy elements from
@throws NullPointerException if array is null"
      end

      operation 7986331 "length"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the array.

@return the length of the array"
      end

      operation 7986459 "get"
	public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current value at position <tt>i</tt>.

@param i the index
@return the current value"
      end

      operation 7986587 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the element at position <tt>i</tt> to the given value.

@param i the index
@param newValue the new value"
      end

      operation 7986715 "getAndSet"
	public explicit_return_type "long"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the element at position <tt>i</tt> to the given value and return the
old value.

@param i the index
@param newValue the new value
@return the previous value"
      end

      operation 7986843 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value to the given updated value
if the current value <tt>==</tt> the expected value.
@param i the index
@param expect the expected value
@param update the new value
@return true if successful. False return indicates that
the actual value was not equal to the expected value."
      end

      operation 7986971 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value to the given updated value
if the current value <tt>==</tt> the expected value.
May fail spuriously.
@param i the index
@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 7987099 "getAndIncrement"
	public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increment by one the element at index <tt>i</tt>.

@param i the index
@return the previous value;"
      end

      operation 7987227 "getAndDecrement"
	public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrement by one the element at index <tt>i</tt>.

@param i the index
@return the previous value;"
      end

      operation 7987355 "getAndAdd"
	public explicit_return_type "long"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "delta" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically add the given value to element at index <tt>i</tt>.

@param i the index
@param delta the value to add
@return the previous value;"
      end

      operation 7987483 "incrementAndGet"
	public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increment the element at index <tt>i</tt>.

@param i the index
@return the updated value;"
      end

      operation 7987611 "decrementAndGet"
	public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrement the element at index <tt>i</tt>.

@param i the index
@return the updated value;"
      end

      operation 7987739 "addAndGet"
	public explicit_return_type "long"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "delta" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically add the given value to element at index <tt>i</tt>.

@param i the index
@param delta the value to add
@return the updated value;"
      end

      operation 7987867 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current values of array.
@return the String representation of the current values of array."
      end
    end

    class 1000731 "AtomicLongFieldUpdater"
      abstract visibility public 
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A reflection-based utility that enables atomic updates to
designated <tt>volatile long</tt> fields of designated classes.
This class is designed for use in atomic data structures in which
several fields of the same node are independently subject to atomic
updates.

<p> Note that the guarantees of the <tt>compareAndSet</tt> method
in this class are weaker than in other atomic classes. Because this
class cannot ensure that all uses of the field are appropriate for
purposes of atomic access, it can guarantee atomicity and volatile
semantics only with respect to other invocations of
<tt>compareAndSet</tt> and <tt>set</tt>.

@since 1.5
@author Doug Lea
@param <T> The type of the object holding the updatable field"
      operation 7987995 "newUpdater"
	class_operation public return_type class_ref 1000731 // AtomicLongFieldUpdater
	nparams 2
	  param inout name "tclass" type class_ref 164635 // Class
	  param in name "fieldName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<U> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an updater for objects with the given field.  The Class
argument is needed to check that reflective types and generic
types match.
@param tclass the class of the objects holding the field
@param fieldName the name of the field to be updated.
@return the updater
@throws IllegalArgumentException if the field is not a
volatile long type.
@throws RuntimeException with a nested reflection-based
exception if the class does not hold field or is the wrong type."
      end

      operation 7988123 "AtomicLongFieldUpdater"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected do-nothing constructor for use by subclasses."
      end

      operation 7988251 "compareAndSet"
	abstract public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value of the field of the given object managed
by this Updater to the given updated value if the current value
<tt>==</tt> the expected value. This method is guaranteed to be
atomic with respect to other calls to <tt>compareAndSet</tt> and
<tt>set</tt>, but not necessarily with respect to other
changes in the field.
@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return true if successful.
@throws ClassCastException if <tt>obj</tt> is not an instance
of the class possessing the field established in the constructor."
      end

      operation 7988379 "weakCompareAndSet"
	abstract public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value of the field of the given object managed
by this Updater to the given updated value if the current value
<tt>==</tt> the expected value. This method is guaranteed to be
atomic with respect to other calls to <tt>compareAndSet</tt> and
<tt>set</tt>, but not necessarily with respect to other
changes in the field, and may fail spuriously.
@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return true if successful.
@throws ClassCastException if <tt>obj</tt> is not an instance
of the class possessing the field established in the constructor."
      end

      operation 7988507 "set"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the field of the given object managed by this updater. This
operation is guaranteed to act as a volatile store with respect
to subsequent invocations of <tt>compareAndSet</tt>.
@param obj An object whose field to set
@param newValue the new value"
      end

      operation 7988635 "get"
	abstract public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current value held in the field by the given object.
@param obj An object whose field to get
@return the current value"
      end

      operation 7988763 "getAndSet"
	public explicit_return_type "long"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set to the given value and return the old value.

@param obj An object whose field to get and set
@param newValue the new value
@return the previous value"
      end

      operation 7988891 "getAndIncrement"
	public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increment by one the current value.
@param obj An object whose field to get and set
@return the previous value;"
      end

      operation 7989019 "getAndDecrement"
	public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrement by one the current value.
@param obj An object whose field to get and set
@return the previous value;"
      end

      operation 7989147 "getAndAdd"
	public explicit_return_type "long"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "delta" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically add the given value to current value.
@param obj An object whose field to get and set
@param delta the value to add
@return the previous value;"
      end

      operation 7989275 "incrementAndGet"
	public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increment by one the current value.
@param obj An object whose field to get and set
@return the updated value;"
      end

      operation 7989403 "decrementAndGet"
	public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrement by one the current value.
@param obj An object whose field to get and set
@return the updated value;"
      end

      operation 7989531 "addAndGet"
	public explicit_return_type "long"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "delta" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically add the given value to current value.
@param obj An object whose field to get and set
@param delta the value to add
@return the updated value;"
      end

      class 1000859 "CASUpdater"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 1000731 // AtomicLongFieldUpdater
	  rank 0 explicit_value "T"
	actual class class_ref 1000731 // AtomicLongFieldUpdater
	  rank 1 explicit_value ""
	actual class class_ref 1000731 // AtomicLongFieldUpdater
	  rank 2 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1950235 // <realization>
	  relation 1950235 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1950235 // <realization>
	    b parent class_ref 1000731 // AtomicLongFieldUpdater
	end

	attribute 2940955 "unsafe"
	  class_attribute const_attribute private explicit_type "Unsafe"
	  init_value "=   Unsafe.getUnsafe()"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2941083 "offset"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1950363 // tclass (<unidirectional association>)
	  relation 1950363 --->
	    a role_name "tclass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 1950363 // tclass (<unidirectional association>)
	    b parent class_ref 164635 // Class
	end

	classrelation 1950491 // cclass (<unidirectional association>)
	  relation 1950491 --->
	    a role_name "cclass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1950491 // cclass (<unidirectional association>)
	    b parent class_ref 164635 // Class
	end

	operation 7989659 "CASUpdater"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "tclass" type class_ref 164635 // Class
	    param in name "fieldName" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7989787 "compareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "long"
	    param in name "update" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7989915 "weakCompareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "long"
	    param in name "update" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7990043 "set"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7990171 "get"
	  public explicit_return_type "long"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7990299 "ensureProtectedAccess"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1000987 "LockedUpdater"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 1000731 // AtomicLongFieldUpdater
	  rank 0 explicit_value "T"
	actual class class_ref 1000731 // AtomicLongFieldUpdater
	  rank 1 explicit_value ""
	actual class class_ref 1000731 // AtomicLongFieldUpdater
	  rank 2 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1950619 // <realization>
	  relation 1950619 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1950619 // <realization>
	    b parent class_ref 1000731 // AtomicLongFieldUpdater
	end

	attribute 2941211 "unsafe"
	  class_attribute const_attribute private explicit_type "Unsafe"
	  init_value "=   Unsafe.getUnsafe()"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2941339 "offset"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1950747 // tclass (<unidirectional association>)
	  relation 1950747 --->
	    a role_name "tclass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 1950747 // tclass (<unidirectional association>)
	    b parent class_ref 164635 // Class
	end

	classrelation 1950875 // cclass (<unidirectional association>)
	  relation 1950875 --->
	    a role_name "cclass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1950875 // cclass (<unidirectional association>)
	    b parent class_ref 164635 // Class
	end

	operation 7990427 "LockedUpdater"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "tclass" type class_ref 164635 // Class
	    param in name "fieldName" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7990555 "compareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "long"
	    param in name "update" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7990683 "weakCompareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "long"
	    param in name "update" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7990811 "set"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7990939 "get"
	  public explicit_return_type "long"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7991067 "ensureProtectedAccess"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 1001115 "AtomicMarkableReference"
      visibility public 
      nformals 3
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <tt>AtomicMarkableReference</tt> maintains an object reference
along with a mark bit, that can be updated atomically.
<p>
<p> Implementation note. This implementation maintains markable
references by creating internal objects representing \"boxed\"
[reference, boolean] pairs.

@since 1.5
@author Doug Lea
@param <V> The type of object referred to by this reference"
      class 1001243 "ReferenceBooleanPair"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2941467 "reference"
	  const_attribute private explicit_type "T"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2941595 "bit"
	  const_attribute private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7991195 "ReferenceBooleanPair"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "r" explicit_type "T"
	    param inout name "i" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1951003 // atomicRef (<unidirectional association>)
	relation 1951003 --->
	  a role_name "atomicRef" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ReferenceBooleanPair<V>> ${name}${value};
"
	    classrelation_ref 1951003 // atomicRef (<unidirectional association>)
	  b parent class_ref 994331 // AtomicReference
      end

      operation 7991323 "AtomicMarkableReference"
	public explicit_return_type ""
	nparams 2
	  param inout name "initialRef" explicit_type "V"
	  param inout name "initialMark" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>AtomicMarkableReference</tt> with the given
initial values.

@param initialRef the initial reference
@param initialMark the initial mark"
      end

      operation 7991451 "getReference"
	public explicit_return_type "V"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the reference.

@return the current value of the reference"
      end

      operation 7991579 "isMarked"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the mark.

@return the current value of the mark"
      end

      operation 7991707 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "markHolder" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current values of both the reference and the mark.
Typical usage is <tt>boolean[1] holder; ref = v.get(holder); </tt>.

@param markHolder an array of size of at least one. On return,
<tt>markholder[0]</tt> will hold the value of the mark.
@return the current value of the reference"
      end

      operation 7991835 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "expectedReference" explicit_type "V"
	  param inout name "newReference" explicit_type "V"
	  param inout name "expectedMark" explicit_type "boolean"
	  param inout name "newMark" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of both the reference and mark
to the given update values if the
current reference is <tt>==</tt> to the expected reference
and the current mark is equal to the expected mark.  Any given
invocation of this operation may fail (return
<tt>false</tt>) spuriously, but repeated invocation when
the current value holds the expected value and no other thread
is also attempting to set the value will eventually succeed.

@param expectedReference the expected value of the reference
@param newReference the new value for the reference
@param expectedMark the expected value of the mark
@param newMark the new value for the mark
@return true if successful"
      end

      operation 7991963 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "expectedReference" explicit_type "V"
	  param inout name "newReference" explicit_type "V"
	  param inout name "expectedMark" explicit_type "boolean"
	  param inout name "newMark" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of both the reference and mark
to the given update values if the
current reference is <tt>==</tt> to the expected reference
and the current mark is equal to the expected mark.  

@param expectedReference the expected value of the reference
@param newReference the new value for the reference
@param expectedMark the expected value of the mark
@param newMark the new value for the mark
@return true if successful"
      end

      operation 7992091 "set"
	public explicit_return_type "void"
	nparams 2
	  param inout name "newReference" explicit_type "V"
	  param inout name "newMark" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unconditionally sets the value of both the reference and mark.

@param newReference the new value for the reference
@param newMark the new value for the mark"
      end

      operation 7992219 "attemptMark"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "expectedReference" explicit_type "V"
	  param inout name "newMark" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of the mark to the given update value
if the current reference is <tt>==</tt> to the expected
reference.  Any given invocation of this operation may fail
(return <tt>false</tt>) spuriously, but repeated invocation
when the current value holds the expected value and no other
thread is also attempting to set the value will eventually
succeed.

@param expectedReference the expected value of the reference
@param newMark the new value for the mark
@return true if successful"
      end
    end

    class 1001371 "AtomicReferenceArray"
      visibility public 
      nformals 3
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An array of object references in which elements may be updated
atomically.  See the {@link java.util.concurrent.atomic} package
specification for description of the properties of atomic
variables.
@since 1.5
@author Doug Lea
@param <E> The base class of elements held in this array"
      classrelation 1951131 // <realization>
	relation 1951131 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1951131 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2941723 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -6209656149925076980L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2941851 "unsafe"
	class_attribute const_attribute private explicit_type "Unsafe"
	init_value "=   Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2941979 "base"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  unsafe.arrayBaseOffset(Object[].class)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2942107 "scale"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  unsafe.arrayIndexScale(Object[].class)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2942235 "array"
	const_attribute private explicit_type "Object"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7992347 "rawIndex"
	private explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7992475 "AtomicReferenceArray"
	public explicit_return_type ""
	nparams 1
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new AtomicReferenceArray of given length.
@param length the length of the array"
      end

      operation 7992603 "AtomicReferenceArray"
	public explicit_return_type ""
	nparams 1
	  param inout name "array" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new AtomicReferenceArray with the same length as, and
all elements copied from, the given array.

@param array the array to copy elements from
@throws NullPointerException if array is null"
      end

      operation 7992731 "length"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the array.

@return the length of the array"
      end

      operation 7992859 "get"
	public explicit_return_type "E"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current value at position <tt>i</tt>.

@param i the index
@return the current value"
      end

      operation 7992987 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "newValue" explicit_type "E"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the element at position <tt>i</tt> to the given value.

@param i the index
@param newValue the new value"
      end

      operation 7993115 "getAndSet"
	public explicit_return_type "E"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "newValue" explicit_type "E"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the element at position <tt>i</tt> to the given value and return the
old value.

@param i the index
@param newValue the new value
@return the previous value"
      end

      operation 7993243 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param inout name "expect" explicit_type "E"
	  param inout name "update" explicit_type "E"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value to the given updated value
if the current value <tt>==</tt> the expected value.
@param i the index
@param expect the expected value
@param update the new value
@return true if successful. False return indicates that
the actual value was not equal to the expected value."
      end

      operation 7993371 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param inout name "expect" explicit_type "E"
	  param inout name "update" explicit_type "E"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically set the value to the given updated value
if the current value <tt>==</tt> the expected value.
May fail spuriously.
@param i the index
@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 7993499 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current values of array.
@return the String representation of the current values of array."
      end
    end

    class 1001627 "AtomicStampedReference"
      visibility public 
      nformals 3
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <tt>AtomicStampedReference</tt> maintains an object reference
along with an integer \"stamp\", that can be updated atomically.  

<p> Implementation note. This implementation maintains stamped
references by creating internal objects representing \"boxed\"
[reference, integer] pairs.

@since 1.5
@author Doug Lea
@param <V> The type of object referred to by this reference"
      class 1001755 "ReferenceIntegerPair"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2942619 "reference"
	  const_attribute private explicit_type "T"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2942747 "integer"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7995291 "ReferenceIntegerPair"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "r" explicit_type "T"
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1951771 // atomicRef (<unidirectional association>)
	relation 1951771 --->
	  a role_name "atomicRef" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ReferenceIntegerPair<V>> ${name}${value};
"
	    classrelation_ref 1951771 // atomicRef (<unidirectional association>)
	  b parent class_ref 994331 // AtomicReference
      end

      operation 7995419 "AtomicStampedReference"
	public explicit_return_type ""
	nparams 2
	  param inout name "initialRef" explicit_type "V"
	  param in name "initialStamp" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>AtomicStampedReference</tt> with the given
initial values.

@param initialRef the initial reference
@param initialStamp the initial stamp"
      end

      operation 7995547 "getReference"
	public explicit_return_type "V"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the reference.

@return the current value of the reference"
      end

      operation 7995675 "getStamp"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the stamp.

@return the current value of the stamp"
      end

      operation 7995803 "get"
	public explicit_return_type "V"
	nparams 1
	  param in name "stampHolder" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current values of both the reference and the stamp.
Typical usage is <tt>int[1] holder; ref = v.get(holder); </tt>.

@param stampHolder an array of size of at least one.  On return,
<tt>stampholder[0]</tt> will hold the value of the stamp.
@return the current value of the reference"
      end

      operation 7995931 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "expectedReference" explicit_type "V"
	  param inout name "newReference" explicit_type "V"
	  param in name "expectedStamp" explicit_type "int"
	  param in name "newStamp" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of both the reference and stamp
to the given update values if the
current reference is <tt>==</tt> to the expected reference
and the current stamp is equal to the expected stamp.  Any given
invocation of this operation may fail (return
<tt>false</tt>) spuriously, but repeated invocation when
the current value holds the expected value and no other thread
is also attempting to set the value will eventually succeed.

@param expectedReference the expected value of the reference
@param newReference the new value for the reference
@param expectedStamp the expected value of the stamp
@param newStamp the new value for the stamp
@return true if successful"
      end

      operation 7996059 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "expectedReference" explicit_type "V"
	  param inout name "newReference" explicit_type "V"
	  param in name "expectedStamp" explicit_type "int"
	  param in name "newStamp" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of both the reference and stamp
to the given update values if the
current reference is <tt>==</tt> to the expected reference
and the current stamp is equal to the expected stamp. 

@param expectedReference the expected value of the reference
@param newReference the new value for the reference
@param expectedStamp the expected value of the stamp
@param newStamp the new value for the stamp
@return true if successful"
      end

      operation 7996187 "set"
	public explicit_return_type "void"
	nparams 2
	  param inout name "newReference" explicit_type "V"
	  param in name "newStamp" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unconditionally sets the value of both the reference and stamp.

@param newReference the new value for the reference
@param newStamp the new value for the stamp"
      end

      operation 7996315 "attemptStamp"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "expectedReference" explicit_type "V"
	  param in name "newStamp" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of the stamp to the given update value
if the current reference is <tt>==</tt> to the expected
reference.  Any given invocation of this operation may fail
(return <tt>false</tt>) spuriously, but repeated invocation
when the current value holds the expected value and no other
thread is also attempting to set the value will eventually
succeed.

@param expectedReference the expected value of the reference
@param newStamp the new value for the stamp
@return true if successful"
      end
    end
  end

  deploymentview 168987 "atomic"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 759451 "AtomicReference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
${definition}"
      associated_classes
	class_ref 994331 // AtomicReference
      end
      comment "@(#)AtomicReference.java	1.5 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 762011 "AtomicBoolean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
${definition}"
      associated_classes
	class_ref 205083 // AtomicBoolean
      end
      comment "@(#)AtomicBoolean.java	1.7 04/07/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 762139 "AtomicInteger"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
${definition}"
      associated_classes
	class_ref 994587 // AtomicInteger
      end
      comment "@(#)AtomicInteger.java	1.5 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 762267 "AtomicIntegerArray"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
import java.util.*;
${definition}"
      associated_classes
	class_ref 1000219 // AtomicIntegerArray
      end
      comment "@(#)AtomicIntegerArray.java	1.6 04/01/24

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 762395 "AtomicIntegerFieldUpdater"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
import java.lang.reflect.*;
${definition}"
      associated_classes
	class_ref 1000347 // AtomicIntegerFieldUpdater
      end
      comment "@(#)AtomicIntegerFieldUpdater.java	1.7 05/08/09

Copyright 2005 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 762523 "AtomicLong"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
${definition}"
      associated_classes
	class_ref 607259 // AtomicLong
      end
      comment "@(#)AtomicLong.java	1.6 04/02/13

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 762651 "AtomicLongArray"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
import java.util.*;
${definition}"
      associated_classes
	class_ref 1000603 // AtomicLongArray
      end
      comment "@(#)AtomicLongArray.java	1.6 04/01/24

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 762779 "AtomicLongFieldUpdater"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
import java.lang.reflect.*;
${definition}"
      associated_classes
	class_ref 1000731 // AtomicLongFieldUpdater
      end
      comment "@(#)AtomicLongFieldUpdater.java	1.8 05/08/09

Copyright 2005 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 762907 "AtomicMarkableReference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1001115 // AtomicMarkableReference
      end
      comment "@(#)AtomicMarkableReference.java	1.4 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 763035 "AtomicReferenceArray"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
import java.util.*;
${definition}"
      associated_classes
	class_ref 1001371 // AtomicReferenceArray
      end
      comment "@(#)AtomicReferenceArray.java	1.6 04/01/24

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 763163 "AtomicReferenceFieldUpdater"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
import java.lang.reflect.*;
${definition}"
      associated_classes
	class_ref 902939 // AtomicReferenceFieldUpdater
      end
      comment "@(#)AtomicReferenceFieldUpdater.java	1.9 05/08/09

Copyright 2005 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 763291 "AtomicStampedReference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1001627 // AtomicStampedReference
      end
      comment "@(#)AtomicStampedReference.java	1.4 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
