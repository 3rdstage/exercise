class HTMLAccessibleContext
!!!9895963.java!!!	HTMLAccessibleContext(inout elementInfo : ElementInfo)
	    this.elementInfo = elementInfo;
!!!9896091.java!!!	getAccessibleContext() : AccessibleContext
	    return this;
!!!9896219.java!!!	getAccessibleStateSet() : AccessibleStateSet
	    AccessibleStateSet states = new AccessibleStateSet();
	    Component comp = getTextComponent();

	    if (comp.isEnabled()) {
		states.add(AccessibleState.ENABLED);
	    }
	    if (comp instanceof JTextComponent &&
		((JTextComponent)comp).isEditable()) {
		
		states.add(AccessibleState.EDITABLE);
		states.add(AccessibleState.FOCUSABLE);
	    }
	    if (comp.isVisible()) {
		states.add(AccessibleState.VISIBLE);
	    }
	    if (comp.isShowing()) {
		states.add(AccessibleState.SHOWING);
	    }
	    return states;
!!!9896347.java!!!	getAccessibleIndexInParent() : int
	    return elementInfo.getIndexInParent();
!!!9896475.java!!!	getAccessibleChildrenCount() : int
	    return elementInfo.getChildCount();
!!!9896603.java!!!	getAccessibleChild(in i : int) : Accessible
	    ElementInfo childInfo = elementInfo.getChild(i);
	    if (childInfo != null && childInfo instanceof Accessible) {
		return (Accessible)childInfo;
	    } else {
		return null;
	    }
!!!9896731.java!!!	getLocale() : Locale
	    return editor.getLocale();
!!!9896859.java!!!	getAccessibleComponent() : AccessibleComponent
	    return this;
!!!9896987.java!!!	getBackground() : Color
	    return getTextComponent().getBackground();
!!!9897115.java!!!	setBackground(inout c : Color) : void
	    getTextComponent().setBackground(c);
!!!9897243.java!!!	getForeground() : Color
	    return getTextComponent().getForeground();
!!!9897371.java!!!	setForeground(inout c : Color) : void
	    getTextComponent().setForeground(c);
!!!9897499.java!!!	getCursor() : Cursor
	    return getTextComponent().getCursor();
!!!9897627.java!!!	setCursor(inout cursor : Cursor) : void
	    getTextComponent().setCursor(cursor);
!!!9897755.java!!!	getFont() : Font
	    return getTextComponent().getFont();
!!!9897883.java!!!	setFont(inout f : Font) : void
	    getTextComponent().setFont(f);
!!!9898011.java!!!	getFontMetrics(inout f : Font) : FontMetrics
	    return getTextComponent().getFontMetrics(f);
!!!9898139.java!!!	isEnabled() : boolean
	    return getTextComponent().isEnabled();
!!!9898267.java!!!	setEnabled(inout b : boolean) : void
	    getTextComponent().setEnabled(b);
!!!9898395.java!!!	isVisible() : boolean
	    return getTextComponent().isVisible();
!!!9898523.java!!!	setVisible(inout b : boolean) : void
	    getTextComponent().setVisible(b);
!!!9898651.java!!!	isShowing() : boolean
	    return getTextComponent().isShowing();
!!!9898779.java!!!	contains(inout p : Point) : boolean
	    Rectangle r = getBounds();
	    if (r != null) {
		return r.contains(p.x, p.y);
	    } else {
		return false;
	    }
!!!9898907.java!!!	getLocationOnScreen() : Point
	    Point editorLocation = getTextComponent().getLocationOnScreen();
	    Rectangle r = getBounds();
	    if (r != null) {
		return new Point(editorLocation.x + r.x,
				 editorLocation.y + r.y);
	    } else {
		return null;
	    }
!!!9899035.java!!!	getLocation() : Point
 
	    Rectangle r = getBounds();
	    if (r != null) {
		return new Point(r.x, r.y);
	    } else {
		return null;
	    }
!!!9899291.java!!!	getBounds() : Rectangle
	    return elementInfo.getBounds();
!!!9899547.java!!!	getSize() : Dimension
	    Rectangle r = getBounds();
	    if (r != null) {
		return new Dimension(r.width, r.height);
	    } else {
		return null;
	    }
!!!9899675.java!!!	setSize(inout d : Dimension) : void
	    Component comp = getTextComponent();
	    comp.setSize(d);
!!!9899803.java!!!	getAccessibleAt(inout p : Point) : Accessible
	    ElementInfo innerMostElement = getElementInfoAt(rootElementInfo, p);
	    if (innerMostElement instanceof Accessible) {
		return (Accessible)innerMostElement;
	    } else {
		return null;
	    }
!!!9899931.java!!!	getElementInfoAt(inout elementInfo : ElementInfo, inout p : Point) : ElementInfo
	    if (elementInfo.getBounds() == null) {
		return null;
	    }
	    if (elementInfo.getChildCount() == 0 &&
		elementInfo.getBounds().contains(p)) {
		return elementInfo;
		
	    } else {
		if (elementInfo instanceof TableElementInfo) {
		    // Handle table caption as a special case since it's the
		    // only table child that is not a table row.
		    ElementInfo captionInfo = 
			((TableElementInfo)elementInfo).getCaptionInfo();
		    if (captionInfo != null) {
			Rectangle bounds = captionInfo.getBounds();
			if (bounds != null && bounds.contains(p)) {
			    return captionInfo;
			}
		    }
		}
		for (int i = 0; i < elementInfo.getChildCount(); i++)
{
		    ElementInfo childInfo = elementInfo.getChild(i);
                    ElementInfo retValue = getElementInfoAt(childInfo, p);
                    if (retValue != null) {
                        return retValue;
                    }
		}
	    }
            return null;
!!!9900059.java!!!	isFocusTraversable() : boolean
	    Component comp = getTextComponent();
	    if (comp instanceof JTextComponent) {
		if (((JTextComponent)comp).isEditable()) {
		    return true;
		}
	    }
	    return false;
!!!9900187.java!!!	requestFocus() : void
            // TIGER - 4856191
            if (! isFocusTraversable()) {
                return;
            }

	    Component comp = getTextComponent();
	    if (comp instanceof JTextComponent) {

		comp.requestFocusInWindow();

		try {
		    if (elementInfo.validateIfNecessary()) {
			// set the caret position to the start of this component
			Element elem = elementInfo.getElement();
			((JTextComponent)comp).setCaretPosition(elem.getStartOffset());
			
			// fire a AccessibleState.FOCUSED property change event
			AccessibleContext ac = editor.getAccessibleContext();
			PropertyChangeEvent pce = new PropertyChangeEvent(this,
			    AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
			    null, AccessibleState.FOCUSED);
			ac.firePropertyChange(
			    AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
			    null, pce);
		    }
		} catch (IllegalArgumentException e) {
		    // don't fire property change event
		}
	    }
!!!9900315.java!!!	addFocusListener(inout l : FocusListener) : void
	    getTextComponent().addFocusListener(l);
!!!9900443.java!!!	removeFocusListener(inout l : FocusListener) : void
	    getTextComponent().removeFocusListener(l);
