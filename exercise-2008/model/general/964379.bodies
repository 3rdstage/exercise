class KeyPairGenerator
!!!7582107.java!!!	KeyPairGenerator(in algorithm : String)
	this.algorithm = algorithm;
!!!7582235.java!!!	getAlgorithm() : String
	return this.algorithm;
!!!7582363.java!!!	getInstance(inout instance : Instance, in algorithm : String) : KeyPairGenerator
	KeyPairGenerator kpg;
	if (instance.impl instanceof KeyPairGenerator) {
	    kpg = (KeyPairGenerator)instance.impl;
	} else {
	    KeyPairGeneratorSpi spi = (KeyPairGeneratorSpi)instance.impl;
	    kpg = new Delegate(spi, algorithm);
	}
	kpg.provider = instance.provider;
	return kpg;
!!!7582491.java!!!	getInstance(in algorithm : String) : KeyPairGenerator
	List<Service> list = 
		GetInstance.getServices("KeyPairGenerator", algorithm);
	Iterator<Service> t = list.iterator();
	if (t.hasNext() == false) {
	    throw new NoSuchAlgorithmException
	    	(algorithm + " KeyPairGenerator not available");
	}
	// find a working Spi or KeyPairGenerator subclass
	NoSuchAlgorithmException failure = null;
	do {
	    Service s = t.next();
	    try {
		Instance instance = 
		    GetInstance.getInstance(s, KeyPairGeneratorSpi.class);
		if (instance.impl instanceof KeyPairGenerator) {
		    return getInstance(instance, algorithm);
		} else {
		    return new Delegate(instance, t, algorithm);
		}
	    } catch (NoSuchAlgorithmException e) {
		if (failure == null) {
		    failure = e;
		}
	    }
	} while (t.hasNext());
	throw failure;
!!!7582619.java!!!	getInstance(in algorithm : String, in provider : String) : KeyPairGenerator
	Instance instance = GetInstance.getInstance("KeyPairGenerator", 
		KeyPairGeneratorSpi.class, algorithm, provider);
	return getInstance(instance, algorithm);
!!!7582747.java!!!	getInstance(in algorithm : String, inout provider : Provider) : KeyPairGenerator
	Instance instance = GetInstance.getInstance("KeyPairGenerator", 
		KeyPairGeneratorSpi.class, algorithm, provider);
	return getInstance(instance, algorithm);
!!!7582875.java!!!	getProvider() : Provider
	disableFailover();
	return this.provider;
!!!7583003.java!!!	disableFailover() : void
	// empty, overridden in Delegate
!!!7583131.java!!!	initialize(in keysize : int) : void
	initialize(keysize, JCAUtil.getSecureRandom());
!!!7583259.java!!!	initialize(in keysize : int, inout random : SecureRandom) : void
	// This does nothing, because either
	// 1. the implementation object returned by getInstance() is an
	//    instance of KeyPairGenerator which has its own 
	//    initialize(keysize, random) method, so the application would
	//    be calling that method directly, or
	// 2. the implementation returned by getInstance() is an instance
	//    of Delegate, in which case initialize(keysize, random) is
	//    overridden to call the corresponding SPI method.
	// (This is a special case, because the API and SPI method have the
	// same name.)
!!!7583387.java!!!	initialize(inout params : AlgorithmParameterSpec) : void
	initialize(params, JCAUtil.getSecureRandom());
!!!7583515.java!!!	initialize(inout params : AlgorithmParameterSpec, inout random : SecureRandom) : void
	// This does nothing, because either
	// 1. the implementation object returned by getInstance() is an
	//    instance of KeyPairGenerator which has its own 
	//    initialize(params, random) method, so the application would
	//    be calling that method directly, or
	// 2. the implementation returned by getInstance() is an instance
	//    of Delegate, in which case initialize(params, random) is
	//    overridden to call the corresponding SPI method.
	// (This is a special case, because the API and SPI method have the
	// same name.)
!!!7583643.java!!!	genKeyPair() : KeyPair
	return generateKeyPair();
!!!7583771.java!!!	generateKeyPair() : KeyPair
	// This does nothing (except returning null), because either:
	//
	// 1. the implementation object returned by getInstance() is an
	//    instance of KeyPairGenerator which has its own implementation
	//    of generateKeyPair (overriding this one), so the application
	//    would be calling that method directly, or
	//
	// 2. the implementation returned by getInstance() is an instance
	//    of Delegate, in which case generateKeyPair is
	//    overridden to invoke the corresponding SPI method.
	//
	// (This is a special case, because in JDK 1.1.x the generateKeyPair
	// method was used both as an API and a SPI method.)
        return null;
