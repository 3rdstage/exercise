class StringTokenizer
!!!369307.java!!!	setMaxDelimCodePoint() : void
        if (delimiters == null) {
            maxDelimCodePoint = 0;
            return;
        }

	int m = 0;
	int c;
	int count = 0;
	for (int i = 0; i < delimiters.length(); i += Character.charCount(c)) {
	    c = delimiters.charAt(i);
	    if (c >= Character.MIN_HIGH_SURROGATE && c <= Character.MAX_LOW_SURROGATE) {
		c = delimiters.codePointAt(i);
		hasSurrogates = true;
	    }
	    if (m < c)
		m = c;
	    count++;
	}
	maxDelimCodePoint = m;

	if (hasSurrogates) {
	    delimiterCodePoints = new int[count];
	    for (int i = 0, j = 0; i < count; i++, j += Character.charCount(c)) {
		c = delimiters.codePointAt(j);
		delimiterCodePoints[i] = c;
	    }
	}
!!!369435.java!!!	StringTokenizer(in str : String, in delim : String, inout returnDelims : boolean)
	currentPosition = 0;
	newPosition = -1;
	delimsChanged = false;
	this.str = str;
	maxPosition = str.length();
	delimiters = delim;
	retDelims = returnDelims;
        setMaxDelimCodePoint();
!!!369563.java!!!	StringTokenizer(in str : String, in delim : String)
	this(str, delim, false);
!!!369691.java!!!	StringTokenizer(in str : String)
	this(str, " \t\n\r\f", false);
!!!369819.java!!!	skipDelimiters(in startPos : int) : int
        if (delimiters == null)
            throw new NullPointerException();

        int position = startPos;
	while (!retDelims && position < maxPosition) {
	    if (!hasSurrogates) {
		char c = str.charAt(position);
		if ((c > maxDelimCodePoint) || (delimiters.indexOf(c) < 0))
		    break;
		position++;
	    } else {
		int c = str.codePointAt(position);
		if ((c > maxDelimCodePoint) || !isDelimiter(c)) {
		    break;
		}
		position += Character.charCount(c);
	    }
	}
        return position;
!!!369947.java!!!	scanToken(in startPos : int) : int
        int position = startPos;
        while (position < maxPosition) {
	    if (!hasSurrogates) {
		char c = str.charAt(position);
		if ((c <= maxDelimCodePoint) && (delimiters.indexOf(c) >= 0))
		    break;
		position++;
	    } else {
		int c = str.codePointAt(position);
		if ((c <= maxDelimCodePoint) && isDelimiter(c))
		    break;
		position += Character.charCount(c);
	    }
	}
	if (retDelims && (startPos == position)) {
	    if (!hasSurrogates) {
		char c = str.charAt(position);
		if ((c <= maxDelimCodePoint) && (delimiters.indexOf(c) >= 0))
		    position++;
	    } else {
		int c = str.codePointAt(position);
		if ((c <= maxDelimCodePoint) && isDelimiter(c))
		    position += Character.charCount(c);
	    }
        }
        return position;
!!!370075.java!!!	isDelimiter(in codePoint : int) : boolean
	for (int i = 0; i < delimiterCodePoints.length; i++) {
	    if (delimiterCodePoints[i] == codePoint) {
		return true;
	    }
	}
	return false;
!!!370203.java!!!	hasMoreTokens() : boolean
	/*
	 * Temporarily store this position and use it in the following
	 * nextToken() method only if the delimiters haven't been changed in
	 * that nextToken() invocation.
	 */
	newPosition = skipDelimiters(currentPosition);
	return (newPosition < maxPosition);
!!!370331.java!!!	nextToken() : String
	/* 
	 * If next position already computed in hasMoreElements() and
	 * delimiters have changed between the computation and this invocation,
	 * then use the computed value.
	 */

	currentPosition = (newPosition >= 0 && !delimsChanged) ?  
	    newPosition : skipDelimiters(currentPosition);

	/* Reset these anyway */
	delimsChanged = false;
	newPosition = -1;

	if (currentPosition >= maxPosition)
	    throw new NoSuchElementException();
	int start = currentPosition;
	currentPosition = scanToken(currentPosition);
	return str.substring(start, currentPosition);
!!!370459.java!!!	nextToken(in delim : String) : String
	delimiters = delim;

	/* delimiter string specified, so set the appropriate flag. */
	delimsChanged = true;

        setMaxDelimCodePoint();
	return nextToken();
!!!370587.java!!!	hasMoreElements() : boolean
	return hasMoreTokens();
!!!370715.java!!!	nextElement() : Object
	return nextToken();
!!!370843.java!!!	countTokens() : int
	int count = 0;
	int currpos = currentPosition;
	while (currpos < maxPosition) {
            currpos = skipDelimiters(currpos);
	    if (currpos >= maxPosition)
		break;
            currpos = scanToken(currpos);
	    count++;
	}
	return count;
