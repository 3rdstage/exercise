class Scanner
!!!341531.java!!!	boolPattern() : Pattern
        Pattern bp = boolPattern;
        if (bp == null)
            boolPattern = bp = Pattern.compile(BOOLEAN_PATTERN,
                                          Pattern.CASE_INSENSITIVE);
        return bp;
!!!341659.java!!!	buildIntegerPatternString() : String
        String radixDigits = digits.substring(0, radix);
        // \\p{javaDigit} is not guaranteed to be appropriate
        // here but what can we do? The final authority will be
        // whatever parse method is invoked, so ultimately the
        // Scanner will do the right thing
        String digit = "((?i)["+radixDigits+"]|\\p{javaDigit})";
        String groupedNumeral = "("+non0Digit+digit+"?"+digit+"?("+
                                groupSeparator+digit+digit+digit+")+)";
        // digit++ is the possessive form which is necessary for reducing
        // backtracking that would otherwise cause unacceptable performance
        String numeral = "(("+ digit+"++)|"+groupedNumeral+")";
        String javaStyleInteger = "([-+]?(" + numeral + "))";
        String negativeInteger = negativePrefix + numeral + negativeSuffix;
        String positiveInteger = positivePrefix + numeral + positiveSuffix;
        return "("+ javaStyleInteger + ")|(" + 
            positiveInteger + ")|(" + 
            negativeInteger + ")";
!!!341787.java!!!	integerPattern() : Pattern
        if (integerPattern == null) {
            integerPattern = patternCache.forName(buildIntegerPatternString());
        }
        return integerPattern;
!!!341915.java!!!	separatorPattern() : Pattern
        Pattern sp = separatorPattern;
        if (sp == null)
            separatorPattern = sp = Pattern.compile(LINE_SEPARATOR_PATTERN);
        return sp;
!!!342043.java!!!	buildFloatAndDecimalPattern() : void
        // \\p{javaDigit} may not be perfect, see above
        String digit = "([0-9]|(\\p{javaDigit}))";
        String exponent = "([eE][+-]?"+digit+"+)?";
        String groupedNumeral = "("+non0Digit+digit+"?"+digit+"?("+
                                groupSeparator+digit+digit+digit+")+)";
        // Once again digit++ is used for performance, as above
        String numeral = "(("+digit+"++)|"+groupedNumeral+")";
        String decimalNumeral = "("+numeral+"|"+numeral + 
            decimalSeparator + digit + "*+|"+ decimalSeparator + 
            digit + "++)";
        String nonNumber = "(NaN|"+nanString+"|Infinity|"+
                               infinityString+")";
        String positiveFloat = "(" + positivePrefix + decimalNumeral + 
                            positiveSuffix + exponent + ")";
        String negativeFloat = "(" + negativePrefix + decimalNumeral + 
                            negativeSuffix + exponent + ")";
        String decimal = "(([-+]?" + decimalNumeral + exponent + ")|"+ 
            positiveFloat + "|" + negativeFloat + ")";
        String hexFloat = 
            "[-+]?0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][-+]?[0-9]+)?";
        String positiveNonNumber = "(" + positivePrefix + nonNumber + 
                            positiveSuffix + ")";
        String negativeNonNumber = "(" + negativePrefix + nonNumber + 
                            negativeSuffix + ")";
        String signedNonNumber = "(([-+]?"+nonNumber+")|" +
                                 positiveNonNumber + "|" + 
                                 negativeNonNumber + ")";
        floatPattern = Pattern.compile(decimal + "|" + hexFloat + "|" +
                                       signedNonNumber);
        decimalPattern = Pattern.compile(decimal);
!!!342171.java!!!	floatPattern() : Pattern
        if (floatPattern == null) {
            buildFloatAndDecimalPattern();
        }
        return floatPattern;
!!!342299.java!!!	decimalPattern() : Pattern
        if (decimalPattern == null) {
            buildFloatAndDecimalPattern();
        }
        return decimalPattern;
!!!342427.java!!!	Scanner(inout source : Readable, inout pattern : Pattern)
        if (source == null)
            throw new NullPointerException("source");
        if (pattern == null)
            throw new NullPointerException("pattern");
        this.source = source;
        delimPattern = pattern;
        buf = CharBuffer.allocate(BUFFER_SIZE);
        buf.limit(0);
        matcher = delimPattern.matcher(buf);
        matcher.useTransparentBounds(true);
        matcher.useAnchoringBounds(false);
        useLocale(Locale.getDefault());
!!!342555.java!!!	Scanner(inout source : Readable)
        this(source, WHITESPACE_PATTERN);
!!!342683.java!!!	Scanner(inout source : InputStream)
        this(new InputStreamReader(source), WHITESPACE_PATTERN);
!!!342811.java!!!	Scanner(inout source : InputStream, in charsetName : String)
        this(makeReadable(source, charsetName), WHITESPACE_PATTERN);
!!!342939.java!!!	makeReadable(inout source : InputStream, in charsetName : String) : Readable
        if (source == null)
            throw new NullPointerException("source");
        InputStreamReader isr = null;
        try {
            isr = new InputStreamReader(source, charsetName);
        } catch (UnsupportedEncodingException uee) {
            IllegalArgumentException iae = new IllegalArgumentException();
            iae.initCause(uee);
            throw iae;
        }
        return isr;
!!!343067.java!!!	Scanner(inout source : File)
        this((ReadableByteChannel)(new FileInputStream(source).getChannel())); 
!!!343195.java!!!	Scanner(inout source : File, in charsetName : String)
        this((ReadableByteChannel)(new FileInputStream(source).getChannel()), 
             charsetName);
!!!343323.java!!!	Scanner(in source : String)
        this(new StringReader(source), WHITESPACE_PATTERN);
!!!343451.java!!!	Scanner(inout source : ReadableByteChannel)
        this(makeReadable(source), WHITESPACE_PATTERN);
!!!343579.java!!!	makeReadable(inout source : ReadableByteChannel) : Readable
        if (source == null)
            throw new NullPointerException("source");
        String defaultCharsetName = 
            java.nio.charset.Charset.defaultCharset().name();
        return Channels.newReader(source, 
                           java.nio.charset.Charset.defaultCharset().name());
!!!343707.java!!!	Scanner(inout source : ReadableByteChannel, in charsetName : String)
        this(makeReadable(source, charsetName), WHITESPACE_PATTERN);
!!!343835.java!!!	makeReadable(inout source : ReadableByteChannel, in charsetName : String) : Readable
        if (source == null)
            throw new NullPointerException("source");
        if (!Charset.isSupported(charsetName))
            throw new IllegalArgumentException(charsetName);
        return Channels.newReader(source, charsetName);
!!!343963.java!!!	saveState() : void
        savedScannerPosition = position;
!!!344091.java!!!	revertState() : void
        this.position = savedScannerPosition;
        savedScannerPosition = -1;
        skipped = false;
!!!344219.java!!!	revertState(inout b : boolean) : boolean
        this.position = savedScannerPosition;
        savedScannerPosition = -1;
        skipped = false;
        return b;
!!!344347.java!!!	cacheResult(inout p : Pattern) : void
        hasNextPattern = p;
        hasNextResult = matcher.group();
        hasNextPosition = matcher.end();
!!!344475.java!!!	clearCaches() : void
        hasNextPattern = null;
        typeCache = null;
!!!344603.java!!!	getCachedResult() : String
        position = hasNextPosition;
        hasNextPattern = null;
        typeCache = null;
        return hasNextResult;
!!!344731.java!!!	useTypeCache() : void
        if (closed)
            throw new IllegalStateException("Scanner closed");
        position = hasNextPosition;
        hasNextPattern = null;
        typeCache = null;
!!!344859.java!!!	readInput() : void
        if (buf.limit() == buf.capacity())
            makeSpace();

        // Prepare to receive data
        int p = buf.position();
        buf.position(buf.limit());
        buf.limit(buf.capacity());

        int n = 0;
        try {
            n = source.read(buf);
        } catch (IOException ioe) {
            lastException = ioe;
            n = -1;
        }

        if (n == -1) {
            sourceClosed = true;
            needInput = false;
        }

        if (n > 0)
            needInput = false;

        // Restore current position and limit for reading
        buf.limit(buf.position());
        buf.position(p);
!!!344987.java!!!	makeSpace() : boolean
        clearCaches();
        int offset = savedScannerPosition == -1 ? 
            position : savedScannerPosition;
        buf.position(offset);
        // Gain space by compacting buffer
        if (offset > 0) {
            buf.compact();
            translateSavedIndexes(offset);
            position -= offset;
            buf.flip();
            return true;
        }
        // Gain space by growing buffer
        int newSize = buf.capacity() * 2;
        CharBuffer newBuf = CharBuffer.allocate(newSize);
        newBuf.put(buf);
        newBuf.flip();
        translateSavedIndexes(offset);
        position -= offset;
        buf = newBuf;
        matcher.reset(buf);
        return true;
!!!345115.java!!!	translateSavedIndexes(in offset : int) : void
        if (savedScannerPosition != -1)
            savedScannerPosition -= offset;
!!!345243.java!!!	throwFor() : void
        skipped = false;
        if ((sourceClosed) && (position == buf.limit()))
            throw new NoSuchElementException();
        else
            throw new InputMismatchException();
!!!345371.java!!!	hasTokenInBuffer() : boolean
        matchValid = false;
        matcher.usePattern(delimPattern);
        matcher.region(position, buf.limit());

        // Skip delims first
        if (matcher.lookingAt())
            position = matcher.end();

        // If we are sitting at the end, no more tokens in buffer
        if (position == buf.limit())
            return false;

        return true;
!!!345499.java!!!	getCompleteTokenInBuffer(inout pattern : Pattern) : String
        matchValid = false;

        // Skip delims first
        matcher.usePattern(delimPattern);
        if (!skipped) { // Enforcing only one skip of leading delims
            matcher.region(position, buf.limit());
            if (matcher.lookingAt()) {
                // If more input could extend the delimiters then we must wait 
                // for more input
                if (matcher.hitEnd() && !sourceClosed) {
                    needInput = true;
                    return null;
                }
                // The delims were whole and the matcher should skip them
                skipped = true;
                position = matcher.end();
            }
        }

        // If we are sitting at the end, no more tokens in buffer
        if (position == buf.limit()) {
            if (sourceClosed)
                return null;
            needInput = true;
            return null;
        }

        // Must look for next delims. Simply attempting to match the
        // pattern at this point may find a match but it might not be
        // the first longest match because of missing input, or it might
        // match a partial token instead of the whole thing.

        // Then look for next delims
        matcher.region(position, buf.limit());
        boolean foundNextDelim = matcher.find();
        if (foundNextDelim && (matcher.end() == position)) {
            // Zero length delimiter match; we should find the next one
            // using the automatic advance past a zero length match;
            // Otherwise we have just found the same one we just skipped
            foundNextDelim = matcher.find();
        }
        if (foundNextDelim) {
            // In the rare case that more input could cause the match
            // to be lost and there is more input coming we must wait 
            // for more input. Note that hitting the end is okay as long
            // as the match cannot go away. It is the beginning of the
            // next delims we want to be sure about, we don't care if
            // they potentially extend further.
            if (matcher.requireEnd() && !sourceClosed) {
                needInput = true;
                return null;
            }
            int tokenEnd = matcher.start();
            // There is a complete token.
            if (pattern == null) {
                // Must continue with match to provide valid MatchResult
                pattern = FIND_ANY_PATTERN;
            }
            //  Attempt to match against the desired pattern
            matcher.usePattern(pattern);
            matcher.region(position, tokenEnd);
            if (matcher.matches()) {
                String s = matcher.group();
                position = matcher.end();
                return s;
            } else { // Complete token but it does not match
                return null;
            }
        }

        // If we can't find the next delims but no more input is coming,
        // then we can treat the remainder as a whole token
        if (sourceClosed) {
            if (pattern == null) {
                // Must continue with match to provide valid MatchResult
                pattern = FIND_ANY_PATTERN;
            }
            // Last token; Match the pattern here or throw
            matcher.usePattern(pattern);
            matcher.region(position, buf.limit());
            if (matcher.matches()) {
                String s = matcher.group();
                position = matcher.end();
                return s;
            }
            // Last piece does not match
            return null;
        }

        // There is a partial token in the buffer; must read more
        // to complete it
        needInput = true;
        return null;
!!!345627.java!!!	findPatternInBuffer(inout pattern : Pattern, in horizon : int) : String
        matchValid = false;
        matcher.usePattern(pattern);
        int bufferLimit = buf.limit();
        int horizonLimit = -1;
        int searchLimit = bufferLimit;
        if (horizon > 0) {
            horizonLimit = position + horizon;
            if (horizonLimit < bufferLimit)
                searchLimit = horizonLimit;
        }
        matcher.region(position, searchLimit);
        if (matcher.find()) {
            if (matcher.hitEnd() && (!sourceClosed)) {
                // The match may be longer if didn't hit horizon or real end
                if (searchLimit != horizonLimit) {
                     // Hit an artificial end; try to extend the match
                    needInput = true;
                    return null;
                }
                // The match could go away depending on what is next
                if ((searchLimit == horizonLimit) && matcher.requireEnd()) {
                    // Rare case: we hit the end of input and it happens
                    // that it is at the horizon and the end of input is 
                    // required for the match.
                    needInput = true;
                    return null;
                }
            }
            // Did not hit end, or hit real end, or hit horizon
            position = matcher.end();
            return matcher.group();
        }

        if (sourceClosed)
            return null;

        // If there is no specified horizon, or if we have not searched
        // to the specified horizon yet, get more input
        if ((horizon == 0) || (searchLimit != horizonLimit))
            needInput = true;
        return null;
!!!345755.java!!!	matchPatternInBuffer(inout pattern : Pattern) : String
        matchValid = false;
        matcher.usePattern(pattern);
        matcher.region(position, buf.limit());
        if (matcher.lookingAt()) {
            if (matcher.hitEnd() && (!sourceClosed)) {
                // Get more input and try again
                needInput = true;
                return null;
            }
            position = matcher.end();
            return matcher.group();
        }

        if (sourceClosed)
            return null;

        // Read more to find pattern
        needInput = true;
        return null;
!!!345883.java!!!	ensureOpen() : void
        if (closed)
            throw new IllegalStateException("Scanner closed");
!!!346011.java!!!	close() : void
        if (closed)
            return;
        if (source instanceof Closeable) {
            try {
                ((Closeable)source).close();
            } catch (IOException ioe) {
                lastException = ioe;
            }
        }
        sourceClosed = true;
        source = null;
        closed = true;
!!!346139.java!!!	ioException() : IOException
        return lastException;
!!!346267.java!!!	delimiter() : Pattern
        return delimPattern;
!!!346395.java!!!	useDelimiter(inout pattern : Pattern) : Scanner
        delimPattern = pattern;
        return this;
!!!346523.java!!!	useDelimiter(in pattern : String) : Scanner
        delimPattern = patternCache.forName(pattern);
        return this;
!!!346651.java!!!	locale() : Locale
        return this.locale;
!!!346779.java!!!	useLocale(inout locale : Locale) : Scanner
        if (locale.equals(this.locale))
            return this;

        this.locale = locale;
        DecimalFormat df = 
            (DecimalFormat)NumberFormat.getNumberInstance(locale);
        DecimalFormatSymbols dfs = new DecimalFormatSymbols(locale);

        // These must be literalized to avoid collision with regex
        // metacharacters such as dot or parenthesis
        groupSeparator =   "\\" + dfs.getGroupingSeparator();
        decimalSeparator = "\\" + dfs.getDecimalSeparator();

        // Quoting the nonzero length locale-specific things
        // to avoid potential conflict with metacharacters
        nanString = "\\Q" + dfs.getNaN() + "\\E";
        infinityString = "\\Q" + dfs.getInfinity() + "\\E";
        positivePrefix = df.getPositivePrefix();
        if (positivePrefix.length() > 0)
            positivePrefix = "\\Q" + positivePrefix + "\\E";
        negativePrefix = df.getNegativePrefix();
        if (negativePrefix.length() > 0)
            negativePrefix = "\\Q" + negativePrefix + "\\E";
        positiveSuffix = df.getPositiveSuffix();
        if (positiveSuffix.length() > 0)
            positiveSuffix = "\\Q" + positiveSuffix + "\\E";
        negativeSuffix = df.getNegativeSuffix();
        if (negativeSuffix.length() > 0)
            negativeSuffix = "\\Q" + negativeSuffix + "\\E";

        // Force rebuilding and recompilation of locale dependent
        // primitive patterns
        integerPattern = null;
        floatPattern = null;

        return this;
!!!346907.java!!!	radix() : int
        return this.defaultRadix;
!!!347035.java!!!	useRadix(in radix : int) : Scanner
        if ((radix < Character.MIN_RADIX) || (radix > Character.MAX_RADIX))
            throw new IllegalArgumentException("radix:"+radix);

        if (this.defaultRadix == radix)
            return this;
        this.defaultRadix = radix;
        // Force rebuilding and recompilation of radix dependent patterns
        integerPattern = null;
        return this;
!!!347163.java!!!	setRadix(in radix : int) : void
        if (this.radix != radix) {
            // Force rebuilding and recompilation of radix dependent patterns
            integerPattern = null;
            this.radix = radix;
        }
!!!347291.java!!!	match() : MatchResult
        if (!matchValid)
            throw new IllegalStateException("No match result available");
        return matcher.toMatchResult();
!!!347419.java!!!	toString() : String
        StringBuilder sb = new StringBuilder();
	sb.append("java.util.Scanner");
	sb.append("[delimiters=" + delimPattern + "]");
	sb.append("[position=" + position + "]");
	sb.append("[match valid=" + matchValid + "]");
	sb.append("[need input=" + needInput + "]");
	sb.append("[source closed=" + sourceClosed + "]");
        sb.append("[skipped=" + skipped + "]");
        sb.append("[group separator=" + groupSeparator + "]");
        sb.append("[decimal separator=" + decimalSeparator + "]");
        sb.append("[positive prefix=" + positivePrefix + "]");
	sb.append("[negative prefix=" + negativePrefix + "]");
	sb.append("[positive suffix=" + positiveSuffix + "]");
	sb.append("[negative suffix=" + negativeSuffix + "]");
	sb.append("[NaN string=" + nanString + "]");
	sb.append("[infinity string=" + infinityString + "]");
	return sb.toString();
!!!347547.java!!!	hasNext() : boolean
        ensureOpen();
        saveState();
        while (!sourceClosed) {
            if (hasTokenInBuffer())
                return revertState(true);
            readInput();
        }
        boolean result = hasTokenInBuffer();
        return revertState(result);
!!!347675.java!!!	next() : String
        ensureOpen();
        clearCaches();
        
        while (true) {
            String token = getCompleteTokenInBuffer(null);
            if (token != null) {
                matchValid = true;
                skipped = false;
                return token;
            }
            if (needInput)
                readInput();
            else
                throwFor();
        }
!!!347803.java!!!	remove() : void
        throw new UnsupportedOperationException();
!!!347931.java!!!	hasNext(in pattern : String) : boolean
        return hasNext(patternCache.forName(pattern));
!!!348059.java!!!	next(in pattern : String) : String
        return next(patternCache.forName(pattern));
!!!348187.java!!!	hasNext(inout pattern : Pattern) : boolean
        ensureOpen();
        if (pattern == null)
            throw new NullPointerException();
        hasNextPattern = null;
        saveState();

        while (true) {
            if (getCompleteTokenInBuffer(pattern) != null) {
                matchValid = true;
                cacheResult(pattern);
                return revertState(true);
            }
            if (needInput)
                readInput();
            else
                return revertState(false);
        }
!!!348315.java!!!	next(inout pattern : Pattern) : String
        ensureOpen();
        if (pattern == null)
            throw new NullPointerException();

        // Did we already find this pattern?
        if (hasNextPattern == pattern)
            return getCachedResult();
        clearCaches();

        // Search for the pattern
        while (true) {
            String token = getCompleteTokenInBuffer(pattern);
            if (token != null) {
                matchValid = true;
                skipped = false;
                return token;
            }
            if (needInput)
                readInput();
            else
                throwFor();
        }
!!!348443.java!!!	hasNextLine() : boolean
        saveState();
        String result = findWithinHorizon(
            ".*("+LINE_SEPARATOR_PATTERN+")|.+$", 0);
        revertState();
        return (result != null);
!!!348571.java!!!	nextLine() : String
        String result = findWithinHorizon(
            ".*("+LINE_SEPARATOR_PATTERN+")|.+$", 0);
        if (result == null)
            throw new NoSuchElementException("No line found");
        MatchResult mr = this.match();
        String lineSep = mr.group(1);
        if (lineSep != null)
            result = result.substring(0, result.length() - lineSep.length());
        if (result == null)
            throw new NoSuchElementException();
        else
            return result;
!!!348699.java!!!	findInLine(in pattern : String) : String
        return findInLine(patternCache.forName(pattern));
!!!348827.java!!!	findInLine(inout pattern : Pattern) : String
        ensureOpen();
        if (pattern == null)
            throw new NullPointerException();
        clearCaches();

        // Expand buffer to include the next newline or end of input
        int endPosition = 0;
        saveState();
        while (true) {
            String token = findPatternInBuffer(separatorPattern(), 0);
            if (token != null) {
                endPosition = matcher.start();
                break; // up to next newline
            }
            if (needInput) {
                readInput();
            } else {
                endPosition = buf.limit();
                break; // up to end of input
            }
        }
        revertState();
        int horizonForLine = endPosition - position;

        // Search for the pattern
        return findWithinHorizon(pattern, horizonForLine);
!!!348955.java!!!	findWithinHorizon(in pattern : String, in horizon : int) : String
        return findWithinHorizon(patternCache.forName(pattern), horizon);
!!!349083.java!!!	findWithinHorizon(inout pattern : Pattern, in horizon : int) : String
        ensureOpen();
        if (pattern == null)
            throw new NullPointerException();
        if (horizon < 0)
            throw new IllegalArgumentException("horizon < 0");
        clearCaches();

        // Search for the pattern
        while (true) {
            String token = findPatternInBuffer(pattern, horizon);
            if (token != null) {
                matchValid = true;
                return token;
            }
            if (needInput)
                readInput();
            else
                break; // up to end of input
        }
        return null;
!!!349211.java!!!	skip(inout pattern : Pattern) : Scanner
        ensureOpen();
        if (pattern == null)
            throw new NullPointerException();
        clearCaches();

        // Search for the pattern
        while (true) {
            String token = matchPatternInBuffer(pattern);
            if (token != null) {
                matchValid = true;
                position = matcher.end();
                return this;
            }
            if (needInput)
                readInput();
            else
                throw new NoSuchElementException();
        }
!!!349339.java!!!	skip(in pattern : String) : Scanner
        return skip(patternCache.forName(pattern));
!!!349467.java!!!	hasNextBoolean() : boolean
        return hasNext(boolPattern());
!!!349595.java!!!	nextBoolean() : boolean
        clearCaches();
        return Boolean.parseBoolean(next(boolPattern()));
!!!349723.java!!!	hasNextByte() : boolean
        return hasNextByte(defaultRadix);
!!!349851.java!!!	hasNextByte(in radix : int) : boolean
        setRadix(radix);
        boolean result = hasNext(integerPattern());
        if (result) { // Cache it
            try {
                String s = (matcher.group(SIMPLE_GROUP_INDEX) == null) ?
                    processIntegerToken(hasNextResult) :
                    hasNextResult;
                typeCache = Byte.parseByte(s, radix);
            } catch (NumberFormatException nfe) {
                result = false;
            }
        }
        return result;
!!!349979.java!!!	nextByte() : byte
         return nextByte(defaultRadix);
!!!350107.java!!!	nextByte(in radix : int) : byte
        // Check cached result
        if ((typeCache != null) && (typeCache instanceof Byte)) {
            byte val = ((Byte)typeCache).byteValue();
            useTypeCache();
            return val;
        }
        setRadix(radix);
        clearCaches();
        // Search for next byte
        try {
            String s = next(integerPattern());
            if (matcher.group(SIMPLE_GROUP_INDEX) == null)
                s = processIntegerToken(s);
            return Byte.parseByte(s, radix);
        } catch (NumberFormatException nfe) {
            position = matcher.start(); // don't skip bad token
            throw new InputMismatchException(nfe.getMessage());
        }
!!!350235.java!!!	hasNextShort() : boolean
        return hasNextShort(defaultRadix);
!!!350363.java!!!	hasNextShort(in radix : int) : boolean
        setRadix(radix);
        boolean result = hasNext(integerPattern());
        if (result) { // Cache it
            try {
                String s = (matcher.group(SIMPLE_GROUP_INDEX) == null) ?
                    processIntegerToken(hasNextResult) :
                    hasNextResult;
                typeCache = Short.parseShort(s, radix);
            } catch (NumberFormatException nfe) {
                result = false;
            }
        }
        return result;
!!!350491.java!!!	nextShort() : short
        return nextShort(defaultRadix);
!!!350619.java!!!	nextShort(in radix : int) : short
        // Check cached result
        if ((typeCache != null) && (typeCache instanceof Short)) {
            short val = ((Short)typeCache).shortValue();
            useTypeCache();
            return val;
        }
        setRadix(radix);
        clearCaches();
        // Search for next short
        try {
            String s = next(integerPattern());
            if (matcher.group(SIMPLE_GROUP_INDEX) == null)
                s = processIntegerToken(s);
            return Short.parseShort(s, radix);
        } catch (NumberFormatException nfe) {
            position = matcher.start(); // don't skip bad token
            throw new InputMismatchException(nfe.getMessage());
        }
!!!350747.java!!!	hasNextInt() : boolean
        return hasNextInt(defaultRadix);
!!!350875.java!!!	hasNextInt(in radix : int) : boolean
        setRadix(radix);
        boolean result = hasNext(integerPattern());
        if (result) { // Cache it
            try {
                String s = (matcher.group(SIMPLE_GROUP_INDEX) == null) ?
                    processIntegerToken(hasNextResult) :
                    hasNextResult;
                typeCache = Integer.parseInt(s, radix);
            } catch (NumberFormatException nfe) {
                result = false;
            }
        }
        return result;
!!!351003.java!!!	processIntegerToken(in token : String) : String
        String result = token.replaceAll(""+groupSeparator, "");
        boolean isNegative = false;
        int preLen = negativePrefix.length();
        if ((preLen > 0) && result.startsWith(negativePrefix)) {
            isNegative = true;
            result = result.substring(preLen);
        }
        int sufLen = negativeSuffix.length();
        if ((sufLen > 0) && result.endsWith(negativeSuffix)) {
            isNegative = true;
            result = result.substring(result.length() - sufLen,
                                      result.length());
        }
        if (isNegative)
            result = "-" + result;
        return result;
!!!351131.java!!!	nextInt() : int
        return nextInt(defaultRadix);
!!!351259.java!!!	nextInt(in radix : int) : int
        // Check cached result
        if ((typeCache != null) && (typeCache instanceof Integer)) {
            int val = ((Integer)typeCache).intValue();
            useTypeCache();
            return val;
        }
        setRadix(radix);
        clearCaches();
        // Search for next int
        try {
            String s = next(integerPattern());
            if (matcher.group(SIMPLE_GROUP_INDEX) == null)
                s = processIntegerToken(s);
            return Integer.parseInt(s, radix);
        } catch (NumberFormatException nfe) {
            position = matcher.start(); // don't skip bad token
            throw new InputMismatchException(nfe.getMessage());
        }
!!!351387.java!!!	hasNextLong() : boolean
        return hasNextLong(defaultRadix);
!!!351515.java!!!	hasNextLong(in radix : int) : boolean
        setRadix(radix);
        boolean result = hasNext(integerPattern());
        if (result) { // Cache it
            try {
                String s = (matcher.group(SIMPLE_GROUP_INDEX) == null) ?
                    processIntegerToken(hasNextResult) :
                    hasNextResult;
                typeCache = Long.parseLong(s, radix);
            } catch (NumberFormatException nfe) {
                result = false;
            }
        }
        return result;
!!!351643.java!!!	nextLong() : long
        return nextLong(defaultRadix);
!!!351771.java!!!	nextLong(in radix : int) : long
        // Check cached result
        if ((typeCache != null) && (typeCache instanceof Long)) {
            long val = ((Long)typeCache).longValue();
            useTypeCache();
            return val;
        }
        setRadix(radix);
        clearCaches();
        try {
            String s = next(integerPattern());
            if (matcher.group(SIMPLE_GROUP_INDEX) == null)
                s = processIntegerToken(s);
            return Long.parseLong(s, radix);
        } catch (NumberFormatException nfe) {
            position = matcher.start(); // don't skip bad token
            throw new InputMismatchException(nfe.getMessage());
        }
!!!351899.java!!!	processFloatToken(in token : String) : String
        String result = token.replaceAll(groupSeparator, "");
        if (!decimalSeparator.equals("\\."))
            result = result.replaceAll(decimalSeparator, ".");
        boolean isNegative = false;
        int preLen = negativePrefix.length();
        if ((preLen > 0) && result.startsWith(negativePrefix)) {
            isNegative = true;
            result = result.substring(preLen);
        }
        int sufLen = negativeSuffix.length();
        if ((sufLen > 0) && result.endsWith(negativeSuffix)) {
            isNegative = true;
            result = result.substring(result.length() - sufLen,
                                      result.length());
        }
        if (result.equals(nanString))
            result = "NaN";
        if (result.equals(infinityString))
            result = "Infinity";
        if (isNegative)
            result = "-" + result;

        // Translate non-ASCII digits
        Matcher m = NON_ASCII_DIGIT.matcher(result);
        if (m.find()) {
            StringBuilder inASCII = new StringBuilder();
            for (int i=0; i<result.length(); i++) { 
                char nextChar = result.charAt(i);
                if (Character.isDigit(nextChar)) {
                    int d = Character.digit(nextChar, 10);
                    if (d != -1)
                        inASCII.append(d);
                    else
                        inASCII.append(nextChar);
                } else {
                    inASCII.append(nextChar);
                }
            }
            result = inASCII.toString();
        }

        return result;
!!!352027.java!!!	hasNextFloat() : boolean
        setRadix(10);
        boolean result = hasNext(floatPattern());
        if (result) { // Cache it
            try {
                String s = processFloatToken(hasNextResult);
                typeCache = Float.valueOf(Float.parseFloat(s));
            } catch (NumberFormatException nfe) {
                result = false;
            }
        }
        return result;
!!!352155.java!!!	nextFloat() : float
        // Check cached result
        if ((typeCache != null) && (typeCache instanceof Float)) {
            float val = ((Float)typeCache).floatValue();
            useTypeCache();
            return val;
        }
        setRadix(10);
        clearCaches();
        try {
            return Float.parseFloat(processFloatToken(next(floatPattern())));
        } catch (NumberFormatException nfe) {
            position = matcher.start(); // don't skip bad token
            throw new InputMismatchException(nfe.getMessage());
        }
!!!352283.java!!!	hasNextDouble() : boolean
        setRadix(10);
        boolean result = hasNext(floatPattern());
        if (result) { // Cache it
            try {
                String s = processFloatToken(hasNextResult);
                typeCache = Double.valueOf(Double.parseDouble(s));
            } catch (NumberFormatException nfe) {
                result = false;
            }
        }
        return result;
!!!352411.java!!!	nextDouble() : double
        // Check cached result
        if ((typeCache != null) && (typeCache instanceof Double)) {
            double val = ((Double)typeCache).doubleValue();
            useTypeCache();
            return val;
        }
        setRadix(10);
        clearCaches();
        // Search for next float
        try {
            return Double.parseDouble(processFloatToken(next(floatPattern())));
        } catch (NumberFormatException nfe) {
            position = matcher.start(); // don't skip bad token
            throw new InputMismatchException(nfe.getMessage());
        }
!!!352539.java!!!	hasNextBigInteger() : boolean
        return hasNextBigInteger(defaultRadix);
!!!352667.java!!!	hasNextBigInteger(in radix : int) : boolean
        setRadix(radix);
        boolean result = hasNext(integerPattern());
        if (result) { // Cache it
            try {
                String s = (matcher.group(SIMPLE_GROUP_INDEX) == null) ?
                    processIntegerToken(hasNextResult) :
                    hasNextResult;
                typeCache = new BigInteger(s, radix);
            } catch (NumberFormatException nfe) {
                result = false;
            }
        }
        return result;
!!!352795.java!!!	nextBigInteger() : BigInteger
        return nextBigInteger(defaultRadix);
!!!352923.java!!!	nextBigInteger(in radix : int) : BigInteger
        // Check cached result
        if ((typeCache != null) && (typeCache instanceof BigInteger)) {
            BigInteger val = (BigInteger)typeCache;
            useTypeCache();
            return val;
        }
        setRadix(radix);
        clearCaches();
        // Search for next int
        try {
            String s = next(integerPattern());
            if (matcher.group(SIMPLE_GROUP_INDEX) == null)
                s = processIntegerToken(s);
            return new BigInteger(s, radix);
        } catch (NumberFormatException nfe) {
            position = matcher.start(); // don't skip bad token
            throw new InputMismatchException(nfe.getMessage());
        }
!!!353051.java!!!	hasNextBigDecimal() : boolean
        setRadix(10);
        boolean result = hasNext(decimalPattern());
        if (result) { // Cache it
            try {
                String s = processFloatToken(hasNextResult);
                typeCache = new BigDecimal(s);
            } catch (NumberFormatException nfe) {
                result = false;
            }
        }
        return result;
!!!353179.java!!!	nextBigDecimal() : BigDecimal
        // Check cached result
        if ((typeCache != null) && (typeCache instanceof BigDecimal)) {
            BigDecimal val = (BigDecimal)typeCache;
            useTypeCache();
            return val;
        }
        setRadix(10);
        clearCaches();
        // Search for next float
        try {
            String s = processFloatToken(next(decimalPattern()));
            return new BigDecimal(s);
        } catch (NumberFormatException nfe) {
            position = matcher.start(); // don't skip bad token
            throw new InputMismatchException(nfe.getMessage());
        }
