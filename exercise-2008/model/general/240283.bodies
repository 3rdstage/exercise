class CorbaContactInfoListImpl
!!!944027.java!!!	CorbaContactInfoListImpl(inout orb : ORB)
	this.orb = orb;
!!!944155.java!!!	CorbaContactInfoListImpl(inout orb : ORB, inout targetIOR : IOR)
	this(orb);
	setTargetIOR(targetIOR);
!!!944283.java!!!	iterator() : Iterator
	createContactInfoList();
	return new CorbaContactInfoListIteratorImpl(
            orb, this, primaryContactInfo, 
	    effectiveTargetIORContactInfoList);
!!!944411.java!!!	setTargetIOR(inout targetIOR : IOR) : void
	this.targetIOR = targetIOR;
	setEffectiveTargetIOR(targetIOR);
!!!944539.java!!!	getTargetIOR() : IOR
	return targetIOR;
!!!944667.java!!!	setEffectiveTargetIOR(inout effectiveTargetIOR : IOR) : void
	this.effectiveTargetIOR = effectiveTargetIOR;
	effectiveTargetIORContactInfoList = null;
	if (primaryContactInfo != null &&
	    orb.getORBData().getIIOPPrimaryToContactInfo() != null)
	{
	    orb.getORBData().getIIOPPrimaryToContactInfo()
		.reset(primaryContactInfo);
	}
	primaryContactInfo = null;
	setLocalSubcontract();
!!!944795.java!!!	getEffectiveTargetIOR() : IOR
	return effectiveTargetIOR;
!!!944923.java!!!	getLocalClientRequestDispatcher() : LocalClientRequestDispatcher
	return LocalClientRequestDispatcher;
!!!945051.java!!!	hashCode() : int
	    return targetIOR.hashCode();
!!!945179.java!!!	createContactInfoList() : void
	if (effectiveTargetIORContactInfoList != null) {
	    return;
	}

	effectiveTargetIORContactInfoList = new ArrayList();

	IIOPProfile iiopProfile = effectiveTargetIOR.getProfile();
	String hostname = 
	    ((IIOPProfileTemplate)iiopProfile.getTaggedProfileTemplate())
	        .getPrimaryAddress().getHost().toLowerCase();
	int    port     = 
	    ((IIOPProfileTemplate)iiopProfile.getTaggedProfileTemplate())
	        .getPrimaryAddress().getPort();
	// For use by "sticky manager" if one is registered.
	primaryContactInfo = 
	    createContactInfo(SocketInfo.IIOP_CLEAR_TEXT, hostname, port);

	if (iiopProfile.isLocal()) {
	    // NOTE: IMPORTANT:
	    // Only do local.  The APP Server interceptors check
	    // effectiveTarget.isLocal - which is determined via
	    // the IOR - so if we added other addresses then
	    // transactions and interceptors would not execute.
	    ContactInfo contactInfo = new SharedCDRContactInfoImpl(
	        orb, this, effectiveTargetIOR, 
		orb.getORBData().getGIOPAddressDisposition());
	    effectiveTargetIORContactInfoList.add(contactInfo);
	} else {
	    addRemoteContactInfos(effectiveTargetIOR,
				  effectiveTargetIORContactInfoList);
	}
!!!945307.java!!!	addRemoteContactInfos(inout effectiveTargetIOR : IOR, inout effectiveTargetIORContactInfoList : List) : void
	ContactInfo contactInfo;
	List socketInfos = orb.getORBData()
	    .getIORToSocketInfo().getSocketInfo(effectiveTargetIOR);
	Iterator iterator = socketInfos.iterator();
	while (iterator.hasNext()) {
	    SocketInfo socketInfo = (SocketInfo) iterator.next();
	    String type = socketInfo.getType();
	    String host = socketInfo.getHost().toLowerCase();
	    int    port = socketInfo.getPort();
	    contactInfo = createContactInfo(type, host, port);
	    effectiveTargetIORContactInfoList.add(contactInfo);
	}
!!!945435.java!!!	createContactInfo(in type : String, in hostname : String, in port : int) : ContactInfo
	return new SocketOrChannelContactInfoImpl(
	    orb, this, 
	    // XREVISIT - See Base Line 62
	    effectiveTargetIOR,
	    orb.getORBData().getGIOPAddressDisposition(),
	    type, hostname, port);
!!!945563.java!!!	setLocalSubcontract() : void
	if (!effectiveTargetIOR.getProfile().isLocal()) {
	    LocalClientRequestDispatcher = new NotLocalLocalCRDImpl();
	    return;
	}

	// XXX Note that this always uses the first IIOP profile to get the
	// scid.  What about multi-profile IORs?  This should perhaps be
	// tied to the current ContactInfo in some way, together with an
	// implementation of ClientDelegate that generally prefers co-located
	// ContactInfo.  This may in fact mean that we should do this at
	// the ContactInfo level, rather than the IOR/profile level.
	int scid = effectiveTargetIOR.getProfile().getObjectKeyTemplate().
	    getSubcontractId() ;
	LocalClientRequestDispatcherFactory lcsf = orb.getRequestDispatcherRegistry().getLocalClientRequestDispatcherFactory( scid ) ;
	LocalClientRequestDispatcher = lcsf.create( scid, effectiveTargetIOR ) ;
