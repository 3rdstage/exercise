class ServerRequestInfoImpl
!!!785179.java!!!	reset() : void
        super.reset();

        // Please keep these in the same order as declared above.
        
        forwardRequestRaisedInEnding = false;

        request = null;
	servant = null;
	objectId = null;
	oktemp = null;

	adapterId = null;
	adapterName = null;

	addReplyServiceContextQueue = null;
	replyMessage = null;
	targetMostDerivedInterface = null;
	dsiArguments = null;
	dsiResult = null;
	dsiException = null;
	isDynamic = false;
	objectAdapter = null;
	serverRequestId = myORB.getPIHandler().allocateServerRequestId();

	// reset cached attributes:
	cachedArguments = null;
	cachedSendingException = null;
	cachedRequestServiceContexts = null;
	cachedReplyServiceContexts = null;

        startingPointCall = CALL_RECEIVE_REQUEST_SERVICE_CONTEXT;
        intermediatePointCall = CALL_RECEIVE_REQUEST;
        endingPointCall = CALL_SEND_REPLY;
!!!785307.java!!!	ServerRequestInfoImpl(inout myORB : ORB)
 
        super( myORB ); 
        startingPointCall = CALL_RECEIVE_REQUEST_SERVICE_CONTEXT;
        intermediatePointCall = CALL_RECEIVE_REQUEST;
        endingPointCall = CALL_SEND_REPLY;
	serverRequestId = myORB.getPIHandler().allocateServerRequestId();
!!!785435.java!!!	sending_exception() : Any
        checkAccess( MID_SENDING_EXCEPTION );

	if( cachedSendingException == null ) {
	    Any result = null ;

	    if( dsiException != null ) {
		result = dsiException;
	    } else if( exception != null ) {
		result = exceptionToAny( exception );
	    } else {
		// sending_exception should not be callable if both dsiException
		// and exception are null.
		throw wrapper.exceptionUnavailable() ;
	    }

	    cachedSendingException = result;
	}

	return cachedSendingException;
!!!785563.java!!!	object_id() : byte
        checkAccess( MID_OBJECT_ID );

	if( objectId == null ) {
	    // For some reason, we never set object id.  This could be 
	    // because a servant locator caused a location forward or
	    // raised an exception.  As per ptc/00-08-06, section 21.3.14,
	    // we throw NO_RESOURCES
	    throw stdWrapper.piOperationNotSupported6() ;
	}

	// Good citizen: In the interest of efficiency, we will assume
	// interceptors will not change the resulting byte[] array.
	// Otherwise, we would need to make a clone of this array.

	return objectId;
!!!785691.java!!!	checkForNullTemplate() : void
	if (oktemp == null) {
	    // For some reason, we never set the ObjectKeyTemplate
	    // because a servant locator caused a location forward or
	    // raised an exception.  As per ptc/00-08-06, section 21.3.14,
	    // we throw NO_RESOURCES
	    throw stdWrapper.piOperationNotSupported7() ;
	}
!!!785819.java!!!	server_id() : String
	checkAccess( MID_SERVER_ID ) ;
	checkForNullTemplate() ;

	// Good citizen: In the interest of efficiency, we will assume
	// interceptors will not change the resulting byte[] array.
	// Otherwise, we would need to make a clone of this array.

	return Integer.toString( oktemp.getServerId() ) ;
!!!785947.java!!!	orb_id() : String
	checkAccess( MID_ORB_ID ) ;

	return myORB.getORBData().getORBId() ;
!!!786075.java!!!	adapter_name() : String
	checkAccess( MID_ADAPTER_NAME ) ;

	if (adapterName == null) {
	    checkForNullTemplate() ;

	    ObjectAdapterId oaid = oktemp.getObjectAdapterId() ;
	    adapterName = oaid.getAdapterName() ;
	}

	return adapterName ;
!!!786203.java!!!	adapter_id() : byte
        checkAccess( MID_ADAPTER_ID );

	if( adapterId == null ) {
	    checkForNullTemplate() ;
	    adapterId = oktemp.getAdapterId() ;
	}

	return adapterId;
!!!786331.java!!!	target_most_derived_interface() : String
        checkAccess( MID_TARGET_MOST_DERIVED_INTERFACE );
	return targetMostDerivedInterface;
!!!786459.java!!!	get_server_policy(in type : int) : Policy
	// access is currently valid for all states:
        //checkAccess( MID_GET_SERVER_POLICY );

	Policy result = null;

	if( objectAdapter != null ) {
	    result = objectAdapter.getEffectivePolicy( type );
	}

	// _REVISIT_ RTF Issue: get_server_policy spec not in sync with
	// get_effective_policy spec.

	return result;
!!!786587.java!!!	set_slot(in id : int, inout data : Any) : void
	// access is currently valid for all states:
        //checkAccess( MID_SET_SLOT );
   
        slotTable.set_slot( id, data );
!!!786715.java!!!	target_is_a(in id : String) : boolean
        checkAccess( MID_TARGET_IS_A );

	boolean result = false ;
	if( servant instanceof Servant ) {
	    result = ((Servant)servant)._is_a( id );
	} else if (StubAdapter.isStub( servant )) {
	    result = ((org.omg.CORBA.Object)servant)._is_a( id );
	} else {
	    throw wrapper.servantInvalid() ;
	}

	return result;
!!!786843.java!!!	add_reply_service_context(inout service_context : ServiceContext, inout replace : boolean) : void
	// access is currently valid for all states:
        //checkAccess( MID_ADD_REPLY_SERVICE_CONTEXT );

        if( currentExecutionPoint == EXECUTION_POINT_ENDING ) {
	    ServiceContexts scs = replyMessage.getServiceContexts();

	    // May be null.  If this is null, create a new one in its place.
	    if( scs == null ) {
		scs = new ServiceContexts( myORB );
		replyMessage.setServiceContexts( scs );
	    }

	    if( cachedReplyServiceContexts == null ) {
		cachedReplyServiceContexts = new HashMap();
	    }

	    // This is during and ending point, so we now have enough
	    // information to add the reply service context.
	    addServiceContext( cachedReplyServiceContexts, scs, 
			       service_context, replace );
	}

	// We enqueue all adds for the following reasons:
	//
	// If we are not in the ending point then we do not yet have a
	// pointer to the ServiceContexts object so we cannot access the
	// service contexts until we get to the ending point. 
	// So we enqueue this add reply service context request.
	// It is added when we do have a handle on the service contexts object.
	//
	// If we are in the ending point and we just add directly to the
	// SC container but then an interceptor raises a SystemException
	// then that add will be lost since a new container is created
	// for the SystemException response.
	//
	// Therefore we always enqueue and never dequeue (per request) so
	// that all adds will be completed.

	AddReplyServiceContextCommand addReply = 
	    new AddReplyServiceContextCommand();
	addReply.service_context = service_context;
	addReply.replace = replace;

	if( addReplyServiceContextQueue == null ) {
	    addReplyServiceContextQueue = new ArrayList();
	}

	// REVISIT: this does not add to the cache.
	enqueue( addReply );
!!!786971.java!!!	request_id() : int
        // access is currently valid for all states:
        //checkAccess( MID_REQUEST_ID );
	/*
	 * NOTE: The request id in server interceptors is NOT the
	 * same as the GIOP request id.  The ORB may be servicing several
	 * connections, each with possibly overlapping sets of request ids.
	 * Therefore we create a request id specific to interceptors.
	 */
        return serverRequestId;
!!!787099.java!!!	operation() : String
        // access is currently valid for all states:
        //checkAccess( MID_OPERATION );
        return request.getOperationName();
!!!787227.java!!!	arguments() : Parameter
        checkAccess( MID_ARGUMENTS );

	if( cachedArguments == null ) {
	    if( !isDynamic ) {
		throw stdWrapper.piOperationNotSupported1() ;
	    }

	    if( dsiArguments == null ) {
		throw stdWrapper.piOperationNotSupported8() ;
	    }

	    // If it is a DSI request then get the arguments from the DSI req
	    // and convert that into parameters.
	    cachedArguments = nvListToParameterArray( dsiArguments );
	}

        // Good citizen: In the interest of efficiency, we assume 
	// interceptors will be "good citizens" in that they will not 
	// modify the contents of the Parameter[] array.  We also assume 
	// they will not change the values of the containing Anys.

	return cachedArguments;
!!!787355.java!!!	exceptions() : TypeCode
        checkAccess( MID_EXCEPTIONS );

	// _REVISIT_ PI RTF Issue: No exception list on server side.

	throw stdWrapper.piOperationNotSupported2() ;
!!!787483.java!!!	contexts() : String
        checkAccess( MID_CONTEXTS );

	// We do not support this because our ORB does not send contexts.

	throw stdWrapper.piOperationNotSupported3() ;
!!!787611.java!!!	operation_context() : String
        checkAccess( MID_OPERATION_CONTEXT );

	// We do not support this because our ORB does not send 
	// operation_context.

	throw stdWrapper.piOperationNotSupported4() ;
!!!787739.java!!!	result() : Any
        checkAccess( MID_RESULT );

	if( !isDynamic ) {
	    throw stdWrapper.piOperationNotSupported5() ;
	}

	if( dsiResult == null ) {
	    throw wrapper.piDsiResultIsNull() ;
	}

	// Good citizen: In the interest of efficiency, we assume that
	// interceptors will not modify the contents of the result Any.
	// Otherwise, we would need to create a deep copy of the Any.

	return dsiResult;
!!!787867.java!!!	response_expected() : boolean
        // access is currently valid for all states:
        //checkAccess( MID_RESPONSE_EXPECTED );
        return !request.isOneWay();
!!!787995.java!!!	forward_reference() : Object
        checkAccess( MID_FORWARD_REFERENCE );
        // Check to make sure we are in LOCATION_FORWARD
        // state as per ptc/00-08-06, table 21-2
        // footnote 2.
        if( replyStatus != LOCATION_FORWARD.value ) {
	    throw stdWrapper.invalidPiCall1() ;
        }

	return getForwardRequestException().forward;
!!!788123.java!!!	get_request_service_context(in id : int) : ServiceContext
        checkAccess( MID_GET_REQUEST_SERVICE_CONTEXT );

	if( cachedRequestServiceContexts == null ) {
	    cachedRequestServiceContexts = new HashMap();
	}

	return getServiceContext( cachedRequestServiceContexts, 
				  request.getRequestServiceContexts(), id );
!!!788251.java!!!	get_reply_service_context(in id : int) : ServiceContext
        checkAccess( MID_GET_REPLY_SERVICE_CONTEXT );       

	if( cachedReplyServiceContexts == null ) {
	    cachedReplyServiceContexts = new HashMap();
	}

        return getServiceContext( cachedReplyServiceContexts,
				  replyMessage.getServiceContexts(), id );
!!!788379.java!!!	enqueue(inout addReply : AddReplyServiceContextCommand) : void
	int size = addReplyServiceContextQueue.size();
	boolean found = false;

	for( int i = 0; i < size; i++ ) {
	    AddReplyServiceContextCommand cmd = 
		(AddReplyServiceContextCommand)
		addReplyServiceContextQueue.get( i );

	    if( cmd.service_context.context_id == 
		addReply.service_context.context_id ) 
	    {
		found = true;
		if( addReply.replace ) {
		    addReplyServiceContextQueue.set( i, addReply );
		} else {
		    throw stdWrapper.serviceContextAddFailed( 
			new Integer( cmd.service_context.context_id ) ) ;
		}
		break;
	    }
	}

	if( !found ) {
	    addReplyServiceContextQueue.add( addReply );
	}
!!!788507.java!!!	setCurrentExecutionPoint(in executionPoint : int) : void
	super.setCurrentExecutionPoint( executionPoint );

	// If we are transitioning to ending point, we will now have a pointer
	// to the reply service contexts, so we can execute all queued
	// add reply service context requests.
	if( (executionPoint == EXECUTION_POINT_ENDING) &&
	    (addReplyServiceContextQueue != null) ) 
	{
	    int size = addReplyServiceContextQueue.size();
	    for( int i = 0; i < size; i++ ) {
		AddReplyServiceContextCommand addReply = 
		    (AddReplyServiceContextCommand)
		    addReplyServiceContextQueue.get( i );
		try {
		    add_reply_service_context( addReply.service_context, 
					       addReply.replace );
	        }
		catch( BAD_INV_ORDER e ) {
		    // _REVISIT_  The only way this can happen is if during 
		    // rrsc or rr, the interceptor tried to add with 
		    // replace=false to a service context that is present in 
		    // the reply message.  At that time there was no way for 
		    // us to check for this, so the best we can do is ignore 
		    // the original request.
		}
	    }

	    // We specifically do not empty the SC queue so that if
	    // the interceptor raises an exception the queued service contexts
	    // will be put in the exception response.
	}
!!!788635.java!!!	setInfo(inout request : CorbaMessageMediator, inout oa : ObjectAdapter, in objectId : byte, inout oktemp : ObjectKeyTemplate) : void
        this.request = request;
        this.objectId = objectId;
	this.oktemp = oktemp;
	this.objectAdapter = oa ;
	this.connection = (com.sun.corba.se.spi.legacy.connection.Connection)
	    request.getConnection();
!!!788763.java!!!	setDSIArguments(inout arguments : NVList) : void
	this.dsiArguments = arguments;
!!!788891.java!!!	setDSIException(inout exception : Any) : void
	this.dsiException = exception;

	// Clear cached exception value:
	cachedSendingException = null;
!!!789019.java!!!	setDSIResult(inout result : Any) : void
	this.dsiResult = result;
!!!789147.java!!!	setException(inout exception : Exception) : void
	super.setException( exception );

	// Make sure DSIException is null because this is the more recent one.
	this.dsiException = null;

	// Clear cached exception value:
	cachedSendingException = null;
!!!789275.java!!!	setInfo(inout servant : Object, in targetMostDerivedInterface : String) : void
        this.servant = servant;
	this.targetMostDerivedInterface = targetMostDerivedInterface;
	this.isDynamic = 
	    (servant instanceof 
	    org.omg.PortableServer.DynamicImplementation) ||
	    (servant instanceof org.omg.CORBA.DynamicImplementation);
!!!789403.java!!!	setReplyMessage(inout replyMessage : ReplyMessage) : void
	this.replyMessage = replyMessage;
!!!789531.java!!!	setReplyStatus(in replyStatus : short) : void
        super.setReplyStatus( replyStatus );
        switch( replyStatus ) {
        case SUCCESSFUL.value:
            endingPointCall = CALL_SEND_REPLY;
            break;
        case SYSTEM_EXCEPTION.value:
        case USER_EXCEPTION.value:
            endingPointCall = CALL_SEND_EXCEPTION;
            break;
        case LOCATION_FORWARD.value:
        case TRANSPORT_RETRY.value:
            endingPointCall = CALL_SEND_OTHER;
            break;
        }
!!!789659.java!!!	releaseServant() : void
        this.servant = null;
!!!789787.java!!!	setForwardRequestRaisedInEnding() : void
	this.forwardRequestRaisedInEnding = true;
!!!789915.java!!!	isForwardRequestRaisedInEnding() : boolean
	return this.forwardRequestRaisedInEnding;
!!!790043.java!!!	isDynamic() : boolean
      return this.isDynamic;
!!!790171.java!!!	checkAccess(in methodID : int) : void
        // Make sure currentPoint matches the appropriate index in the
        // validCall table:
        int validCallIndex = 0;
        switch( currentExecutionPoint ) {
        case EXECUTION_POINT_STARTING:
            validCallIndex = 0;
            break;
        case EXECUTION_POINT_INTERMEDIATE:
            validCallIndex = 1;
            break;
        case EXECUTION_POINT_ENDING:
            switch( endingPointCall ) {
            case CALL_SEND_REPLY:
                validCallIndex = 2;
                break;
            case CALL_SEND_EXCEPTION:
                validCallIndex = 3;
                break;
            case CALL_SEND_OTHER:
                validCallIndex = 4;
                break;
            }
            break;
        }
        
        // Check the validCall table:
        if( !validCall[methodID][validCallIndex] ) {
	    throw stdWrapper.invalidPiCall2() ;
        }
