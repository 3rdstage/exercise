class UpdateHandler
!!!2512411.java!!!	propertyChange(inout evt : PropertyChangeEvent) : void
            Object oldValue = evt.getOldValue();
            Object newValue = evt.getNewValue();
	    String propertyName = evt.getPropertyName();
            if ((oldValue instanceof Document) || (newValue instanceof Document)) {
                if (oldValue != null) {
                    ((Document)oldValue).removeDocumentListener(this);
		    i18nView = false;
                }
                if (newValue != null) {
                    ((Document)newValue).addDocumentListener(this);
                    if ("document" == propertyName) {
                        setView(null);
                        BasicTextUI.this.propertyChange(evt);
                        modelChanged();
                        return;
                    }
                }
                modelChanged();
            }
	    if ("focusAccelerator" == propertyName) {
		updateFocusAcceleratorBinding(true);
            } else if ("componentOrientation" == propertyName) {
                // Changes in ComponentOrientation require the views to be
                // rebuilt.
                modelChanged();
            } else if ("font" == propertyName) {
                modelChanged();
            } else if ("transferHandler" == propertyName) {
		DropTarget dropTarget = editor.getDropTarget();
		if (dropTarget instanceof UIResource) {
                    if (defaultDropTargetListener == null) {
                        defaultDropTargetListener = new TextDropTargetListener();
                    }
		    try {
			dropTarget.addDropTargetListener(defaultDropTargetListener);
		    } catch (TooManyListenersException tmle) {
			// should not happen... swing drop target is multicast
		    }
		}
	    } else if ("editable" == propertyName) {
                modelChanged();
	    }
            BasicTextUI.this.propertyChange(evt);
!!!2512539.java!!!	insertUpdate(inout e : DocumentEvent) : void
	    Document doc = e.getDocument();
	    Object o = doc.getProperty("i18n");
	    if (o instanceof Boolean) {
		Boolean i18nFlag = (Boolean) o;
		if (i18nFlag.booleanValue() != i18nView) {
		    // i18n flag changed, rebuild the view
		    i18nView = i18nFlag.booleanValue();
		    modelChanged();
		    return;
		}
	    }

	    // normal insert update
            Rectangle alloc = (painted) ? getVisibleEditorRect() : null;
            rootView.insertUpdate(e, alloc, rootView.getViewFactory());
!!!2512667.java!!!	removeUpdate(inout e : DocumentEvent) : void
            Rectangle alloc = (painted) ? getVisibleEditorRect() : null;
            rootView.removeUpdate(e, alloc, rootView.getViewFactory());
!!!2512795.java!!!	changedUpdate(inout e : DocumentEvent) : void
            Rectangle alloc = (painted) ? getVisibleEditorRect() : null;
            rootView.changedUpdate(e, alloc, rootView.getViewFactory());
!!!2512923.java!!!	addLayoutComponent(in name : String, inout comp : Component) : void
	    // not supported
!!!2513051.java!!!	removeLayoutComponent(inout comp : Component) : void
	    if (constraints != null) {
		// remove the constraint record
		constraints.remove(comp);
	    }
!!!2513179.java!!!	preferredLayoutSize(inout parent : Container) : Dimension
	    // should not be called (JComponent uses UI instead)
	    return null;
!!!2513307.java!!!	minimumLayoutSize(inout parent : Container) : Dimension
	    // should not be called (JComponent uses UI instead)
	    return null;
!!!2513435.java!!!	layoutContainer(inout parent : Container) : void
	    if ((constraints != null) && (! constraints.isEmpty())) {
		Rectangle alloc = getVisibleEditorRect();
		if (alloc != null) {
		    Document doc = editor.getDocument();
		    if (doc instanceof AbstractDocument) {
			((AbstractDocument)doc).readLock();
		    }
		    try {
			rootView.setSize(alloc.width, alloc.height);
			Enumeration components = constraints.keys();
			while (components.hasMoreElements()) {
			    Component comp = (Component) components.nextElement();
			    View v = (View) constraints.get(comp);
			    Shape ca = calculateViewPosition(alloc, v);
			    if (ca != null) {
				Rectangle compAlloc = (ca instanceof Rectangle) ? 
				    (Rectangle) ca : ca.getBounds();
				comp.setBounds(compAlloc);
			    }
			}
		    } finally {
			if (doc instanceof AbstractDocument) {
			    ((AbstractDocument)doc).readUnlock();
			}
		    }			
		}
	    }
!!!2513563.java!!!	calculateViewPosition(inout alloc : Shape, inout v : View) : Shape
	    int pos = v.getStartOffset();
	    View child = null;
	    for (View parent = rootView; (parent != null) && (parent != v); parent = child) {
		int index = parent.getViewIndex(pos, Position.Bias.Forward);
		alloc = parent.getChildAllocation(index, alloc);
		child = parent.getView(index);
	    }
	    return (child != null) ? alloc : null;
!!!2513691.java!!!	addLayoutComponent(inout comp : Component, inout constraint : Object) : void
	    if (constraint instanceof View) {
		if (constraints == null) {
		    constraints = new Hashtable(7);
		}
		constraints.put(comp, constraint);
	    }
!!!2513819.java!!!	maximumLayoutSize(inout target : Container) : Dimension
	    // should not be called (JComponent uses UI instead)
	    return null;
!!!2513947.java!!!	getLayoutAlignmentX(inout target : Container) : float
	    return 0.5f;
!!!2514075.java!!!	getLayoutAlignmentY(inout target : Container) : float
	    return 0.5f;
