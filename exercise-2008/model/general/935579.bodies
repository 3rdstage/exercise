class ByteBufferAsCharBufferL
!!!7318555.java!!!	ByteBufferAsCharBufferL(inout bb : ByteBuffer)
	// package-private

	super(-1, 0,
	      bb.remaining() >> 1,
	      bb.remaining() >> 1);
	this.bb = bb;
	// enforce limit == capacity
	int cap = this.capacity();
	this.limit(cap);
	int pos = this.position();
	assert (pos <= cap);
	offset = pos;



!!!7318683.java!!!	ByteBufferAsCharBufferL(inout bb : ByteBuffer, in mark : int, in pos : int, in lim : int, in cap : int, in off : int)


	super(mark, pos, lim, cap);
	this.bb = bb;
	offset = off;



!!!7318811.java!!!	slice() : CharBuffer

	int pos = this.position();
	int lim = this.limit();
	assert (pos <= lim);
	int rem = (pos <= lim ? lim - pos : 0);
	int off = (pos << 1) + offset;
        assert (off >= 0);
	return new ByteBufferAsCharBufferL(bb, -1, 0, rem, rem, off);
!!!7318939.java!!!	duplicate() : CharBuffer

	return new ByteBufferAsCharBufferL(bb,
						    this.markValue(),
						    this.position(),
						    this.limit(),
						    this.capacity(),
						    offset);
!!!7319067.java!!!	asReadOnlyBuffer() : CharBuffer


	return new ByteBufferAsCharBufferRL(bb,
						 this.markValue(),
						 this.position(),
						 this.limit(),
						 this.capacity(),
						 offset);



!!!7319195.java!!!	ix(in i : int) : int

	return (i << 1) + offset;
!!!7319323.java!!!	get() : char

	return Bits.getCharL(bb, ix(nextGetIndex()));
!!!7319451.java!!!	get(in i : int) : char

	return Bits.getCharL(bb, ix(checkIndex(i)));
!!!7319579.java!!!	put(in x : char) : CharBuffer


	Bits.putCharL(bb, ix(nextPutIndex()), x);
	return this;



!!!7319707.java!!!	put(in i : int, in x : char) : CharBuffer


	Bits.putCharL(bb, ix(checkIndex(i)), x);
	return this;



!!!7319835.java!!!	compact() : CharBuffer


	int pos = position();
	int lim = limit();
	assert (pos <= lim);
	int rem = (pos <= lim ? lim - pos : 0);

	ByteBuffer db = bb.duplicate();
 	db.limit(ix(lim));
	db.position(ix(0));
	ByteBuffer sb = db.slice();
	sb.position(pos << 1);
	sb.compact();
 	position(rem);
	limit(capacity());
	return this;



!!!7319963.java!!!	isDirect() : boolean

	return bb.isDirect();
!!!7320091.java!!!	isReadOnly() : boolean

	return false;
!!!7320219.java!!!	toString(in start : int, in end : int) : String

	if ((end > limit()) || (start > end))
	    throw new IndexOutOfBoundsException();
	try {
	    int len = end - start;
	    char[] ca = new char[len];
	    CharBuffer cb = CharBuffer.wrap(ca);
	    CharBuffer db = this.duplicate();
	    db.position(start);
	    db.limit(end);
	    cb.put(db);
	    return new String(ca);
	} catch (StringIndexOutOfBoundsException x) {
	    throw new IndexOutOfBoundsException();
	}
!!!7320347.java!!!	subSequence(in start : int, in end : int) : CharSequence

	int pos = position();
	int lim = limit();
	assert (pos <= lim);
	pos = (pos <= lim ? pos : lim);
	int len = lim - pos;

	if ((start < 0) || (end > len) || (start > end))
	    throw new IndexOutOfBoundsException();
	int sublen = end - start;
 	int off = offset + ((pos + start) << 1);
        assert (off >= 0);
	return new ByteBufferAsCharBufferL(bb, -1, 0, sublen, sublen, off);
!!!7320475.java!!!	order() : ByteOrder





	return ByteOrder.LITTLE_ENDIAN;

