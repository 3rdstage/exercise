class BitClass
!!!8108571.java!!!	BitClass(inout not : boolean)
            complementMe = not;
!!!8108699.java!!!	BitClass(inout newBits : boolean, inout not : boolean)
            complementMe = not;
            bits = newBits;
!!!8108827.java!!!	add(in c : int, in f : int) : Node
            if ((f & CASE_INSENSITIVE) == 0) {
                bits[c] = true;
            } else if (ASCII.isAscii(c)) {
                bits[ASCII.toUpper(c)] = true;
                bits[ASCII.toLower(c)] = true;
            } else {
                bits[Character.toLowerCase((char)c)] = true;
                bits[Character.toUpperCase((char)c)] = true;
            }
            return this;
!!!8108955.java!!!	dup(inout not : boolean) : Node
            return new BitClass(bits, not);
!!!8109083.java!!!	match(inout matcher : Matcher, in i : int, inout seq : CharSequence) : boolean
            if (i >= matcher.to) {
                matcher.hitEnd = true;
                return false;
            }
	    int c = Character.codePointAt(seq, i);
	    boolean charMatches =
		(c > 255) ? complementMe : (bits[c] ^ complementMe);
            return charMatches && next.match(matcher, i+Character.charCount(c), seq);
!!!8109211.java!!!	study(inout info : TreeInfo) : boolean
            info.minLength++;
            info.maxLength++;
            return next.study(info);
