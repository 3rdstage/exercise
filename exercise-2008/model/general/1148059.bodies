class InsertHTMLTextAction
!!!9399451.java!!!	InsertHTMLTextAction(in name : String, in html : String, inout parentTag : Tag, inout addTag : Tag)
	    this(name, html, parentTag, addTag, null, null);
!!!9399579.java!!!	InsertHTMLTextAction(in name : String, in html : String, inout parentTag : Tag, inout addTag : Tag, inout alternateParentTag : Tag, inout alternateAddTag : Tag)
	    this(name, html, parentTag, addTag, alternateParentTag,
		 alternateAddTag, true);
!!!9399707.java!!!	InsertHTMLTextAction(in name : String, in html : String, inout parentTag : Tag, inout addTag : Tag, inout alternateParentTag : Tag, inout alternateAddTag : Tag, inout adjustSelection : boolean)
	    super(name);
	    this.html = html;
	    this.parentTag = parentTag;
	    this.addTag = addTag;
	    this.alternateParentTag = alternateParentTag;
	    this.alternateAddTag = alternateAddTag;
	    this.adjustSelection = adjustSelection;
!!!9399835.java!!!	insertHTML(inout editor : JEditorPane, inout doc : HTMLDocument, in offset : int, in html : String, in popDepth : int, in pushDepth : int, inout addTag : Tag) : void
	    try {
		getHTMLEditorKit(editor).insertHTML(doc, offset, html,
						    popDepth, pushDepth,
						    addTag);
	    } catch (IOException ioe) {
		throw new RuntimeException("Unable to insert: " + ioe);
	    } catch (BadLocationException ble) {
		throw new RuntimeException("Unable to insert: " + ble);
	    }
!!!9399963.java!!!	insertAtBoundary(inout editor : JEditorPane, inout doc : HTMLDocument, in offset : int, inout insertElement : Element, in html : String, inout parentTag : Tag, inout addTag : Tag) : void
	    insertAtBoundry(editor, doc, offset, insertElement, html,
			    parentTag, addTag);
!!!9400091.java!!!	insertAtBoundry(inout editor : JEditorPane, inout doc : HTMLDocument, in offset : int, inout insertElement : Element, in html : String, inout parentTag : Tag, inout addTag : Tag) : void
	    // Find the common parent.
	    Element e;
	    Element commonParent;
	    boolean isFirst = (offset == 0);

	    if (offset > 0 || insertElement == null) {
		e = doc.getDefaultRootElement();
		while (e != null && e.getStartOffset() != offset &&
		       !e.isLeaf()) {
		    e = e.getElement(e.getElementIndex(offset));
		}
		commonParent = (e != null) ? e.getParentElement() : null;
	    }
	    else {
		// If inserting at the origin, the common parent is the
		// insertElement.
		commonParent = insertElement;
	    }
	    if (commonParent != null) {
		// Determine how many pops to do.
		int pops = 0;
		int pushes = 0;
		if (isFirst && insertElement != null) {
		    e = commonParent;
		    while (e != null && !e.isLeaf()) {
			e = e.getElement(e.getElementIndex(offset));
			pops++;
		    }
		}
		else {
		    e = commonParent;
		    offset--;
		    while (e != null && !e.isLeaf()) {
			e = e.getElement(e.getElementIndex(offset));
			pops++;
		    }

		    // And how many pushes
		    e = commonParent;
		    offset++;
		    while (e != null && e != insertElement) {
			e = e.getElement(e.getElementIndex(offset));
			pushes++;
		    }
		}
		pops = Math.max(0, pops - 1);

		// And insert!
		insertHTML(editor, doc, offset, html, pops, pushes, addTag);
	    }
!!!9400219.java!!!	insertIntoTag(inout editor : JEditorPane, inout doc : HTMLDocument, in offset : int, inout tag : Tag, inout addTag : Tag) : boolean
	    Element e = findElementMatchingTag(doc, offset, tag);
	    if (e != null && e.getStartOffset() == offset) {
		insertAtBoundary(editor, doc, offset, e, html,
				 tag, addTag);
		return true;
	    }
	    else if (offset > 0) {
		int depth = elementCountToTag(doc, offset - 1, tag);
		if (depth != -1) {
		    insertHTML(editor, doc, offset, html, depth, 0, addTag);
		    return true;
		}
	    }
	    return false;
!!!9400347.java!!!	adjustSelection(inout pane : JEditorPane, inout doc : HTMLDocument, in startOffset : int, in oldLength : int) : void
	    int newLength = doc.getLength();
	    if (newLength != oldLength && startOffset < newLength) {
		if (startOffset > 0) {
		    String text;
		    try {
			text = doc.getText(startOffset - 1, 1);
		    } catch (BadLocationException ble) {
			text = null;
		    }
		    if (text != null && text.length() > 0 &&
			text.charAt(0) == '\n') {
			pane.select(startOffset, startOffset);
		    }
		    else {
			pane.select(startOffset + 1, startOffset + 1);
		    }
		}
		else {
		    pane.select(1, 1);
		}
	    }
!!!9400475.java!!!	actionPerformed(inout ae : ActionEvent) : void
	    JEditorPane editor = getEditor(ae);
	    if (editor != null) {
		HTMLDocument doc = getHTMLDocument(editor);
		int offset = editor.getSelectionStart();
		int length = doc.getLength();
		boolean inserted;
		// Try first choice
		if (!insertIntoTag(editor, doc, offset, parentTag, addTag) &&
		    alternateParentTag != null) {
		    // Then alternate.
		    inserted = insertIntoTag(editor, doc, offset,
					     alternateParentTag,
					     alternateAddTag);
		}
		else {
		    inserted = true;
		}
		if (adjustSelection && inserted) {
		    adjustSelection(editor, doc, offset, length);
		}
	    }
