class HandleTable
!!!687643.java!!!	HandleTable(in initialCapacity : int)
	    status = new byte[initialCapacity];
	    entries = new Object[initialCapacity];
	    deps = new HandleList[initialCapacity];
!!!687771.java!!!	assign(inout obj : Object) : int
	    if (size >= entries.length) {
		grow();
	    }
	    status[size] = STATUS_UNKNOWN;
	    entries[size] = obj;
	    return size++;
!!!687899.java!!!	markDependency(in dependent : int, in target : int) : void
	    if (dependent == NULL_HANDLE || target == NULL_HANDLE) {
		return;
	    }
	    switch (status[dependent]) {

		case STATUS_UNKNOWN:
		    switch (status[target]) {
			case STATUS_OK:
			    // ignore dependencies on objs with no exception
			    break;
			    
			case STATUS_EXCEPTION:
			    // eagerly propagate exception
			    markException(dependent, 
				(ClassNotFoundException) entries[target]);
			    break;
			    
			case STATUS_UNKNOWN:
			    // add to dependency list of target
			    if (deps[target] == null) {
				deps[target] = new HandleList();
			    }
			    deps[target].add(dependent);
			    
			    // remember lowest unresolved target seen
			    if (lowDep < 0 || lowDep > target) {
				lowDep = target;
			    }
			    break;
			    
			default:
			    throw new InternalError();
		    }
		    break;

		case STATUS_EXCEPTION:
		    break;

		default:
		    throw new InternalError();
	    }
!!!688027.java!!!	markException(in handle : int, inout ex : ClassNotFoundException) : void
	    switch (status[handle]) {
		case STATUS_UNKNOWN:
		    status[handle] = STATUS_EXCEPTION;
		    entries[handle] = ex;
		    
		    // propagate exception to dependents
		    HandleList dlist = deps[handle];
		    if (dlist != null) {
			int ndeps = dlist.size();
			for (int i = 0; i < ndeps; i++) {
			    markException(dlist.get(i), ex);
			}
			deps[handle] = null;
		    }
		    break;
		    
		case STATUS_EXCEPTION:
		    break;
		    
		default:
		    throw new InternalError();
	    }
!!!688155.java!!!	finish(in handle : int) : void
	    int end;
	    if (lowDep < 0) {
		// no pending unknowns, only resolve current handle
		end = handle + 1;
	    } else if (lowDep >= handle) {
		// pending unknowns now clearable, resolve all upward handles
		end = size;
		lowDep = -1;
	    } else {
		// unresolved backrefs present, can't resolve anything yet
		return;
	    }
	    
	    // change STATUS_UNKNOWN -> STATUS_OK in selected span of handles
	    for (int i = handle; i < end; i++) {
		switch (status[i]) {
		    case STATUS_UNKNOWN:
			status[i] = STATUS_OK;
			deps[i] = null;
			break;
			
		    case STATUS_OK:
		    case STATUS_EXCEPTION:
			break;
			
		    default:
			throw new InternalError();
		}
	    }
!!!688283.java!!!	setObject(in handle : int, inout obj : Object) : void
	    switch (status[handle]) {
		case STATUS_UNKNOWN:
		case STATUS_OK:
		    entries[handle] = obj;
		    break;
		    
		case STATUS_EXCEPTION:
		    break;
		    
		default:
		    throw new InternalError();
	    }
!!!688411.java!!!	lookupObject(in handle : int) : Object
	    return (handle != NULL_HANDLE && 
		    status[handle] != STATUS_EXCEPTION) ? 
		entries[handle] : null;
!!!688539.java!!!	lookupException(in handle : int) : ClassNotFoundException
	    return (handle != NULL_HANDLE &&
		    status[handle] == STATUS_EXCEPTION) ?
		(ClassNotFoundException) entries[handle] : null;
!!!688667.java!!!	clear() : void
	    Arrays.fill(status, 0, size, (byte) 0);
	    Arrays.fill(entries, 0, size, null);
	    Arrays.fill(deps, 0, size, null);
	    lowDep = -1;
	    size = 0;
!!!688795.java!!!	size() : int
	    return size;
!!!688923.java!!!	grow() : void
	    int newCapacity = (entries.length << 1) + 1;
	    
	    byte[] newStatus = new byte[newCapacity];
	    Object[] newEntries = new Object[newCapacity];
	    HandleList[] newDeps = new HandleList[newCapacity];
	    
	    System.arraycopy(status, 0, newStatus, 0, size);
	    System.arraycopy(entries, 0, newEntries, 0, size);
	    System.arraycopy(deps, 0, newDeps, 0, size);
	    
	    status = newStatus;
	    entries = newEntries;
	    deps = newDeps;
