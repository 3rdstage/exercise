class BasicPermissionCollection
!!!1532315.java!!!	BasicPermissionCollection()
	perms = new HashMap(11);
	all_allowed = false;
!!!1532443.java!!!	add(inout permission : Permission) : void
	if (! (permission instanceof BasicPermission))
	    throw new IllegalArgumentException("invalid permission: "+
					       permission);
	if (isReadOnly())
	    throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");

	BasicPermission bp = (BasicPermission) permission;

	if (perms.size() == 0) {
	    // adding first permission
	    permClass = bp.getClass();
	} else {
	    // make sure we only add new BasicPermissions of the same class
	    if (bp.getClass() != permClass)
		throw new IllegalArgumentException("invalid permission: " +
						permission);
	}

	synchronized (this) {
	    perms.put(bp.getName(), permission);
	}

	// No sync on all_allowed; staleness OK
	if (!all_allowed) {
	    if (bp.getName().equals("*"))
		all_allowed = true;
	}
!!!1532571.java!!!	implies(inout permission : Permission) : boolean
	if (! (permission instanceof BasicPermission))
   		return false;

	BasicPermission bp = (BasicPermission) permission;

	// random subclasses of BasicPermission do not imply each other
	if (bp.getClass() != permClass)
	    return false;

	// short circuit if the "*" Permission was added
	if (all_allowed)
	    return true;

	// strategy:
	// Check for full match first. Then work our way up the
	// path looking for matches on a.b..*

	String path = bp.getName();
	//System.out.println("check "+path);

	Permission x;

	synchronized (this) {
	    x = (Permission) perms.get(path);
	}

	if (x != null) {
	    // we have a direct hit!
	    return x.implies(permission);
	}

	// work our way up the tree...
	int last, offset;

	offset = path.length()-1;

	while ((last = path.lastIndexOf(".", offset)) != -1) {

	    path = path.substring(0, last+1) + "*";
	    //System.out.println("check "+path);

	    synchronized (this) {
		x = (Permission) perms.get(path);
	    }

	    if (x != null) {
		return x.implies(permission);
	    }
	    offset = last -1;
	}

	// we don't have to check for "*" as it was already checked
	// at the top (all_allowed), so we just return false
	return false;
!!!1532699.java!!!	elements() : Enumeration
        // Convert Iterator of Map values into an Enumeration
	synchronized (this) {
	    return Collections.enumeration(perms.values());
	}
!!!1532827.java!!!	writeObject(inout out : ObjectOutputStream) : void
	// Don't call out.defaultWriteObject()

	// Copy perms into a Hashtable
	Hashtable permissions = new Hashtable(perms.size()*2);

	synchronized (this) {
	    permissions.putAll(perms);
	}

	// Write out serializable fields
        ObjectOutputStream.PutField pfields = out.putFields();
	pfields.put("all_allowed", all_allowed);
        pfields.put("permissions", permissions);
	pfields.put("permClass", permClass);
        out.writeFields();
!!!1532955.java!!!	readObject(inout in : ObjectInputStream) : void
	// Don't call defaultReadObject()

	// Read in serialized fields
	ObjectInputStream.GetField gfields = in.readFields();

	// Get permissions
	Hashtable permissions = (Hashtable)gfields.get("permissions", null);
	perms = new HashMap(permissions.size()*2);
	perms.putAll(permissions);

	// Get all_allowed
	all_allowed = gfields.get("all_allowed", false);

	// Get permClass
	permClass = (Class) gfields.get("permClass", null);

	if (permClass == null) {
	    // set permClass
	    Enumeration e = permissions.elements();
	    if (e.hasMoreElements()) {
		Permission p = (Permission)e.nextElement();
		permClass = p.getClass();
	    }
	}
