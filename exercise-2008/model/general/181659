format 66
"sql" // src::java::sql
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/sql"
  java_package "java.sql"
  classview 176411 "sql"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 979867 "Array"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The mapping in the Java programming language for the SQL type
<code>ARRAY</code>.
By default, an <code>Array</code> value is a transaction-duration 
reference to an SQL <code>ARRAY</code> value.  By default, an <code>Array</code>
object is implemented using an SQL LOCATOR(array) internally, which
means that an <code>Array</code> object contains a logical pointer
to the data in the SQL <code>ARRAY</code> value rather
than containing the <code>ARRAY</code> value's data.
<p>
The <code>Array</code> interface provides methods for bringing an SQL
<code>ARRAY</code> value's data to the client as either an array or a
<code>ResultSet</code> object.
If the elements of the SQL <code>ARRAY</code>
are a UDT, they may be custom mapped.  To create a custom mapping,
a programmer must do two things:
<ul>
<li>create a class that implements the {@link SQLData}
interface for the UDT to be custom mapped. 
<li>make an entry in a type map that contains 
  <ul>
  <li>the fully-qualified SQL type name of the UDT
  <li>the <code>Class</code> object for the class implementing
      <code>SQLData</code>
  </ul>
</ul>
<p>
When a type map with an entry for
the base type is supplied to the methods <code>getArray</code>
and <code>getResultSet</code>, the mapping
it contains will be used to map the elements of the <code>ARRAY</code> value.
If no type map is supplied, which would typically be the case,
the connection's type map is used by default.
If the connection's type map or a type map supplied to a method has no entry
for the base type, the elements are mapped according to the standard mapping.
<p>
@since 1.2 "
      operation 7695771 "getBaseTypeName"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the SQL type name of the elements in 
the array designated by this <code>Array</code> object.
If the elements are a built-in type, it returns
the database-specific type name of the elements. 
If the elements are a user-defined type (UDT),
this method returns the fully-qualified SQL type name.

@return a <code>String</code> that is the database-specific
name for a built-in base type; or the fully-qualified SQL type
name for a base type that is a UDT
@exception SQLException if an error occurs while attempting
to access the type name
@since 1.2"
      end

      operation 7695899 "getBaseType"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the JDBC type of the elements in the array designated
by this <code>Array</code> object.

@return a constant from the class {@link java.sql.Types} that is
the type code for the elements in the array designated by this
<code>Array</code> object
@exception SQLException if an error occurs while attempting
to access the base type 
@since 1.2"
      end

      operation 7696027 "getArray"
	public explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the contents of the SQL <code>ARRAY</code> value designated 
by this
<code>Array</code> object in the form of an array in the Java
programming language. This version of the method <code>getArray</code>
uses the type map associated with the connection for customizations of 
the type mappings.

@return an array in the Java programming language that contains 
the ordered elements of the SQL <code>ARRAY</code> value
designated by this <code>Array</code> object
@exception SQLException if an error occurs while attempting to
access the array
@since 1.2"
      end

      operation 7696155 "getArray"
	public explicit_return_type "Object"
	nparams 1
	  param inout name "map" type class_ref 136603 // Map
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the contents of the SQL <code>ARRAY</code> value designated by this 
<code>Array</code> object.
This method uses 
the specified <code>map</code> for type map customizations
unless the base type of the array does not match a user-defined 
type in <code>map</code>, in which case it 
uses the standard mapping. This version of the method
<code>getArray</code> uses either the given type map or the standard mapping;
it never uses the type map associated with the connection.

@param map a <code>java.util.Map</code> object that contains mappings
           of SQL type names to classes in the Java programming language
@return an array in the Java programming language that contains the ordered 
        elements of the SQL array designated by this object
@exception SQLException if an error occurs while attempting to 
                        access the array
@since 1.2"
      end

      operation 7696283 "getArray"
	public explicit_return_type "Object"
	nparams 2
	  param in name "index" explicit_type "long"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a slice of the SQL <code>ARRAY</code>
value designated by this <code>Array</code> object, beginning with the
specified <code>index</code> and containing up to <code>count</code> 
successive elements of the SQL array.  This method uses the type map
associated with the connection for customizations of the type mappings.

@param index the array index of the first element to retrieve;
             the first element is at index 1
@param count the number of successive SQL array elements to retrieve
@return an array containing up to <code>count</code> consecutive elements 
of the SQL array, beginning with element <code>index</code>
@exception SQLException if an error occurs while attempting to
access the array
@since 1.2"
      end

      operation 7696411 "getArray"
	public explicit_return_type "Object"
	nparams 3
	  param in name "index" explicit_type "long"
	  param in name "count" explicit_type "int"
	  param inout name "map" type class_ref 136603 // Map
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String,Class<?>> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retreives a slice of the SQL <code>ARRAY</code> value 
designated by this <code>Array</code> object, beginning with the specified
<code>index</code> and containing up to <code>count</code>
successive elements of the SQL array.  
<P>
This method uses 
the specified <code>map</code> for type map customizations
unless the base type of the array does not match a user-defined 
type in <code>map</code>, in which case it 
uses the standard mapping. This version of the method
<code>getArray</code> uses either the given type map or the standard mapping;
it never uses the type map associated with the connection.

@param index the array index of the first element to retrieve;
             the first element is at index 1
@param count the number of successive SQL array elements to 
retrieve
@param map a <code>java.util.Map</code> object
that contains SQL type names and the classes in
the Java programming language to which they are mapped
@return an array containing up to <code>count</code>
consecutive elements of the SQL <code>ARRAY</code> value designated by this
<code>Array</code> object, beginning with element 
<code>index</code>
@exception SQLException if an error occurs while attempting to
access the array
@since 1.2"
      end

      operation 7696539 "getResultSet"
	public return_type class_ref 980123 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a result set that contains the elements of the SQL 
<code>ARRAY</code> value
designated by this <code>Array</code> object.  If appropriate,
the elements of the array are mapped using the connection's type 
map; otherwise, the standard mapping is used.
<p>
The result set contains one row for each array element, with
two columns in each row.  The second column stores the element
value; the first column stores the index into the array for 
that element (with the first array element being at index 1). 
The rows are in ascending order corresponding to
the order of the indices.

@return a {@link ResultSet} object containing one row for each
of the elements in the array designated by this <code>Array</code>
object, with the rows in ascending order based on the indices.
@exception SQLException if an error occurs while attempting to
access the array
@since 1.2"
      end

      operation 7696667 "getResultSet"
	public return_type class_ref 980123 // ResultSet
	nparams 1
	  param inout name "map" type class_ref 136603 // Map
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a result set that contains the elements of the SQL 
<code>ARRAY</code> value designated by this <code>Array</code> object.
This method uses 
the specified <code>map</code> for type map customizations
unless the base type of the array does not match a user-defined 
type in <code>map</code>, in which case it 
uses the standard mapping. This version of the method
<code>getResultSet</code> uses either the given type map or the standard mapping;
it never uses the type map associated with the connection.
<p>
The result set contains one row for each array element, with
two columns in each row.  The second column stores the element
value; the first column stores the index into the array for 
that element (with the first array element being at index 1). 
The rows are in ascending order corresponding to
the order of the indices.

@param map contains the mapping of SQL user-defined types to 
classes in the Java programming language
@return a <code>ResultSet</code> object containing one row for each
of the elements in the array designated by this <code>Array</code>
object, with the rows in ascending order based on the indices.
@exception SQLException if an error occurs while attempting to
access the array
@since 1.2"
      end

      operation 7696795 "getResultSet"
	public return_type class_ref 980123 // ResultSet
	nparams 2
	  param in name "index" explicit_type "long"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a result set holding the elements of the subarray that
starts at index <code>index</code> and contains up to 
<code>count</code> successive elements.  This method uses
the connection's type map to map the elements of the array if
the map contains an entry for the base type. Otherwise, the
standard mapping is used.
<P>
The result set has one row for each element of the SQL array
designated by this object, with the first row containing the 
element at index <code>index</code>.  The result set has
up to <code>count</code> rows in ascending order based on the
indices.  Each row has two columns:  The second column stores
the element value; the first column stores the index into the
array for that element.

@param index the array index of the first element to retrieve;
             the first element is at index 1
@param count the number of successive SQL array elements to retrieve
@return a <code>ResultSet</code> object containing up to
<code>count</code> consecutive elements of the SQL array
designated by this <code>Array</code> object, starting at
index <code>index</code>.
@exception SQLException if an error occurs while attempting to
access the array
@since 1.2"
      end

      operation 7696923 "getResultSet"
	public return_type class_ref 980123 // ResultSet
	nparams 3
	  param in name "index" explicit_type "long"
	  param in name "count" explicit_type "int"
	  param inout name "map" type class_ref 136603 // Map
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String,Class<?>> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a result set holding the elements of the subarray that
starts at index <code>index</code> and contains up to
<code>count</code> successive elements.
This method uses 
the specified <code>map</code> for type map customizations
unless the base type of the array does not match a user-defined 
type in <code>map</code>, in which case it 
uses the standard mapping. This version of the method
<code>getResultSet</code> uses either the given type map or the standard mapping;
it never uses the type map associated with the connection.
<P>
The result set has one row for each element of the SQL array
designated by this object, with the first row containing the
element at index <code>index</code>.  The result set has   
up to <code>count</code> rows in ascending order based on the
indices.  Each row has two columns:  The second column stores  
the element value; the first column stroes the index into the
array for that element.

@param index the array index of the first element to retrieve;
             the first element is at index 1
@param count the number of successive SQL array elements to retrieve
@param map the <code>Map</code> object that contains the mapping
of SQL type names to classes in the Java(tm) programming language
@return a <code>ResultSet</code> object containing up to               
<code>count</code> consecutive elements of the SQL array
designated by this <code>Array</code> object, starting at
index <code>index</code>.
@exception SQLException if an error occurs while attempting to
access the array
@since 1.2"
      end
    end

    class 979995 "SQLException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<P>An exception that provides information on a database access
error or other errors.

<P>Each <code>SQLException</code> provides several kinds of information: 
<UL>
  <LI> a string describing the error.  This is used as the Java Exception
      message, available via the method <code>getMesage</code>.
  <LI> a \"SQLstate\" string, which follows either the XOPEN SQLstate conventions
       or the SQL 99 conventions.
      The values of the SQLState string are described in the appropriate spec.
      The <code>DatabaseMetaData</code> method <code>getSQLStateType</code>
      can be used to discover whether the driver returns the XOPEN type or
      the SQL 99 type.
  <LI> an integer error code that is specific to each vendor.  Normally this will
	 be the actual error code returned by the underlying database.
  <LI> a chain to a next Exception.  This can be used to provide additional
	 error information.
</UL>"
      classrelation 1907355 // <generalisation>
	relation 1907355 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1907355 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      operation 7697051 "SQLException"
	public explicit_return_type ""
	nparams 3
	  param in name "reason" explicit_type "String"
	  param in name "SQLState" explicit_type "String"
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a fully-specified <code>SQLException</code> object.  

@param reason a description of the exception 
@param SQLState an XOPEN or SQL 99 code identifying the exception
@param vendorCode a database vendor-specific exception code"
      end

      operation 7697179 "SQLException"
	public explicit_return_type ""
	nparams 2
	  param in name "reason" explicit_type "String"
	  param in name "SQLState" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>SQLException</code> object with the given reason and 
SQLState; the <code>vendorCode</code> field defaults to 0.

@param reason a description of the exception 
@param SQLState an XOPEN or SQL 99 code identifying the exception "
      end

      operation 7697307 "SQLException"
	public explicit_return_type ""
	nparams 1
	  param in name "reason" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>SQLException</code> object with a reason;
the <code>SQLState</code> field defaults to <code>null</code>, and 
the <code>vendorCode</code> field defaults to 0.

@param reason a description of the exception "
      end

      operation 7697435 "SQLException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>SQLException</code> object;
the <code>reason</code> field defaults to null, 
the <code>SQLState</code> field defaults to <code>null</code>, and 
the <code>vendorCode</code> field defaults to 0.
"
      end

      operation 7697563 "getSQLState"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the SQLState for this <code>SQLException</code> object.

@return the SQLState value"
      end

      operation 7697691 "getErrorCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the vendor-specific exception code
for this <code>SQLException</code> object.

@return the vendor's error code"
      end

      operation 7697819 "getNextException"
	public return_type class_ref 979995 // SQLException
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the exception chained to this 
<code>SQLException</code> object.

@return the next <code>SQLException</code> object in the chain; 
        <code>null</code> if there are none
@see #setNextException"
      end

      operation 7697947 "setNextException"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ex" type class_ref 979995 // SQLException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an <code>SQLException</code> object to the end of the chain.

@param ex the new exception that will be added to the end of
           the <code>SQLException</code> chain
@see #getNextException"
      end

      attribute 2865819 "SQLState"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
"
      end

      attribute 2865947 "vendorCode"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
"
      end

      classrelation 1907483 // next (<unidirectional association>)
	relation 1907483 --->
	  a role_name "next" private
	    comment "
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1907483 // next (<unidirectional association>)
	  b parent class_ref 979995 // SQLException
      end
    end

    class 980123 "ResultSet"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A table of data representing a database result set, which
is usually generated by executing a statement that queries the database. 

<P>A <code>ResultSet</code> object  maintains a cursor pointing
to its current row of data.  Initially the cursor is positioned 
before the first row. The <code>next</code> method moves the 
cursor to the next row, and because it returns <code>false</code>
when there are no more rows in the <code>ResultSet</code> object,
it can be used in a <code>while</code> loop to iterate through 
the result set.
<P>
A default <code>ResultSet</code> object is not updatable and
has a cursor that moves forward only.  Thus, you can
iterate through it only once and only from the first row to the
last row. It is possible to
produce <code>ResultSet</code> objects that are scrollable and/or
updatable.  The following code fragment, in which <code>con</code>
is a valid <code>Connection</code> object, illustrates how to make 
a result set that is scrollable and insensitive to updates by others, and 
that is updatable. See <code>ResultSet</code> fields for other
options.
<PRE>

      Statement stmt = con.createStatement(
                                     ResultSet.TYPE_SCROLL_INSENSITIVE,
                                     ResultSet.CONCUR_UPDATABLE);
      ResultSet rs = stmt.executeQuery(\"SELECT a, b FROM TABLE2\");
      // rs will be scrollable, will not show changes made by others,
      // and will be updatable

</PRE>
The <code>ResultSet</code> interface provides 
<i>getter</i> methods (<code>getBoolean</code>, <code>getLong</code>, and so on)
for retrieving column values from the current row.
Values can be retrieved using either the index number of the
column or the name of the column.  In general, using the 
column index will be more efficient.  Columns are numbered from 1.
For maximum portability, result set columns within each row should be
read in left-to-right order, and each column should be read only once.

<P>For the getter methods, a JDBC driver attempts
to convert the underlying data to the Java type specified in the
getter method and returns a suitable Java value.  The JDBC specification 
has a table showing the allowable mappings from SQL types to Java types
that can be used by the <code>ResultSet</code> getter methods.
<P>
<P>Column names used as input to getter methods are case
insensitive.  When a getter method is called  with
a column name and several columns have the same name, 
the value of the first matching column will be returned. 
The column name option is
designed to be used when column names are used in the SQL
query that generated the result set.
For columns that are NOT explicitly named in the query, it
is best to use column numbers. If column names are used, there is
no way for the programmer to guarantee that they actually refer to
the intended columns.
<P>
A set of updater methods were added to this interface
in the JDBC 2.0 API (JDK 1.2).
The comments regarding parameters
to the getter methods also apply to parameters to the
updater methods.
<P>
The updater methods may be used in two ways:
<ol>
<LI>to update a column value in the current row.  In a scrollable
    <code>ResultSet</code> object, the cursor can be moved backwards
    and forwards, to an absolute position, or to a position
    relative to the current row.
    The following code fragment updates the <code>NAME</code> column
    in the fifth row of the <code>ResultSet</code> object
    <code>rs</code> and then uses the method <code>updateRow</code>
    to update the data source table from which <code>rs</code> was derived.
<PRE>

      rs.absolute(5); // moves the cursor to the fifth row of rs
      rs.updateString(\"NAME\", \"AINSWORTH\"); // updates the 
         // <code>NAME</code> column of row 5 to be <code>AINSWORTH</code>
      rs.updateRow(); // updates the row in the data source

</PRE>
<LI>to insert column values into the insert row.  An updatable
    <code>ResultSet</code> object has a special row associated with
    it that serves as a staging area for building a row to be inserted.
    The following code fragment moves the cursor to the insert row, builds
    a three-column row, and inserts it into <code>rs</code> and into
    the data source table using the method <code>insertRow</code>.
<PRE>

      rs.moveToInsertRow(); // moves cursor to the insert row
      rs.updateString(1, \"AINSWORTH\"); // updates the 
         // first column of the insert row to be <code>AINSWORTH</code>
      rs.updateInt(2,35); // updates the second column to be <code>35</code>
      rs.updateBoolean(3, true); // updates the third column to <code>true</code>
      rs.insertRow();
      rs.moveToCurrentRow();

</PRE>
</ol>
<P>A <code>ResultSet</code> object is automatically closed when the
<code>Statement</code> object that
generated it is closed, re-executed, or used
to retrieve the next result from a sequence of multiple results.

<P>The number, types and properties of a <code>ResultSet</code>
object's columns are provided by the <code>ResulSetMetaData</code>
object returned by the <code>ResultSet.getMetaData</code> method.

@see Statement#executeQuery 
@see Statement#getResultSet 
@see ResultSetMetaData "
      operation 7754907 "next"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor down one row from its current position.
A <code>ResultSet</code> cursor is initially positioned
before the first row; the first call to the method
<code>next</code> makes the first row the current row; the
second call makes the second row the current row, and so on. 

<P>If an input stream is open for the current row, a call
to the method <code>next</code> will
implicitly close it. A <code>ResultSet</code> object's
warning chain is cleared when a new row is read.

@return <code>true</code> if the new current row is valid; 
<code>false</code> if there are no more rows 
@exception SQLException if a database access error occurs"
      end

      operation 7755035 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases this <code>ResultSet</code> object's database and
JDBC resources immediately instead of waiting for
this to happen when it is automatically closed.

<P><B>Note:</B> A <code>ResultSet</code> object
is automatically closed by the
<code>Statement</code> object that generated it when
that <code>Statement</code> object is closed,
re-executed, or is used to retrieve the next result from a
sequence of multiple results. A <code>ResultSet</code> object
is also automatically closed when it is garbage collected.  

@exception SQLException if a database access error occurs"
      end

      operation 7755163 "wasNull"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports whether
the last column read had a value of SQL <code>NULL</code>.
Note that you must first call one of the getter methods
on a column to try to read its value and then call
the method <code>wasNull</code> to see if the value read was
SQL <code>NULL</code>.

@return <code>true</code> if the last column value read was SQL
        <code>NULL</code> and <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7755291 "getString"
	public explicit_return_type "String"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "======================================================================
 Methods for accessing results by column index
======================================================================

Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>String</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7755419 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>boolean</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>false</code>
@exception SQLException if a database access error occurs"
      end

      operation 7755547 "getByte"
	public explicit_return_type "byte"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>byte</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7755675 "getShort"
	public explicit_return_type "short"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>short</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7755803 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
an <code>int</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7755931 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>long</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7756059 "getFloat"
	public explicit_return_type "float"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>float</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7756187 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>double</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7756315 "getBigDecimal"
	public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>java.sql.BigDecimal</code> in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@param scale the number of digits to the right of the decimal point
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if a database access error occurs
@deprecated"
      end

      operation 7756443 "getBytes"
	public explicit_return_type "byte"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>byte</code> array in the Java programming language.
The bytes represent the raw values returned by the driver.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7756571 "getDate"
	public return_type class_ref 981147 // Date
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>java.sql.Date</code> object in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7756699 "getTime"
	public return_type class_ref 981275 // Time
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>java.sql.Time</code> object in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7756827 "getTimestamp"
	public return_type class_ref 981403 // Timestamp
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>java.sql.Timestamp</code> object in the Java programming language.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7756955 "getAsciiStream"
	public return_type class_ref 179099 // InputStream
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a stream of ASCII characters. The value can then be read in chunks from the
stream. This method is particularly
suitable for retrieving large <char>LONGVARCHAR</char> values.
The JDBC driver will
do any necessary conversion from the database format into ASCII.

<P><B>Note:</B> All the data in the returned stream must be
read prior to getting the value of any other column. The next
call to a getter method implicitly closes the stream.  Also, a
stream may return <code>0</code> when the method
<code>InputStream.available</code>
is called whether there is data available or not.

@param columnIndex the first column is 1, the second is 2, ...
@return a Java input stream that delivers the database column value
as a stream of one-byte ASCII characters;
if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7757083 "getUnicodeStream"
	public return_type class_ref 179099 // InputStream
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
as a stream of two-byte Unicode characters. The first byte is
the high byte; the second byte is the low byte.

The value can then be read in chunks from the
stream. This method is particularly
suitable for retrieving large <code>LONGVARCHAR</code>values.  The 
JDBC driver will do any necessary conversion from the database
format into Unicode.

<P><B>Note:</B> All the data in the returned stream must be
read prior to getting the value of any other column. The next
call to a getter method implicitly closes the stream.  
Also, a stream may return <code>0</code> when the method 
<code>InputStream.available</code>
is called, whether there is data available or not.

@param columnIndex the first column is 1, the second is 2, ...
@return a Java input stream that delivers the database column value
        as a stream of two-byte Unicode characters;
        if the value is SQL <code>NULL</code>, the value returned is 
        <code>null</code>

@exception SQLException if a database access error occurs
@deprecated use <code>getCharacterStream</code> in place of 
             <code>getUnicodeStream</code>"
      end

      operation 7757211 "getBinaryStream"
	public return_type class_ref 179099 // InputStream
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a binary stream of
uninterpreted bytes. The value can then be read in chunks from the
stream. This method is particularly
suitable for retrieving large <code>LONGVARBINARY</code> values.

<P><B>Note:</B> All the data in the returned stream must be
read prior to getting the value of any other column. The next
call to a getter method implicitly closes the stream.  Also, a
stream may return <code>0</code> when the method 
<code>InputStream.available</code>
is called whether there is data available or not.

@param columnIndex the first column is 1, the second is 2, ...
@return a Java input stream that delivers the database column value
        as a stream of uninterpreted bytes;
        if the value is SQL <code>NULL</code>, the value returned is 
        <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7757339 "getString"
	public explicit_return_type "String"
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "======================================================================
 Methods for accessing results by column name
======================================================================

Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>String</code> in the Java programming language.

@param columnName the SQL name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7757467 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>boolean</code> in the Java programming language.

@param columnName the SQL name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>false</code>
@exception SQLException if a database access error occurs"
      end

      operation 7757595 "getByte"
	public explicit_return_type "byte"
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>byte</code> in the Java programming language.

@param columnName the SQL name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7757723 "getShort"
	public explicit_return_type "short"
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>short</code> in the Java programming language.

@param columnName the SQL name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7757851 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
an <code>int</code> in the Java programming language.

@param columnName the SQL name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7757979 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>long</code> in the Java programming language.

@param columnName the SQL name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7758107 "getFloat"
	public explicit_return_type "float"
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>float</code> in the Java programming language.

@param columnName the SQL name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7758235 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>double</code> in the Java programming language.

@param columnName the SQL name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7758363 "getBigDecimal"
	public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>java.math.BigDecimal</code> in the Java programming language.

@param columnName the SQL name of the column
@param scale the number of digits to the right of the decimal point
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if a database access error occurs
@deprecated"
      end

      operation 7758491 "getBytes"
	public explicit_return_type "byte"
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>byte</code> array in the Java programming language.
The bytes represent the raw values returned by the driver.

@param columnName the SQL name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7758619 "getDate"
	public return_type class_ref 981147 // Date
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>java.sql.Date</code> object in the Java programming language.

@param columnName the SQL name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7758747 "getTime"
	public return_type class_ref 981275 // Time
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row  
of this <code>ResultSet</code> object as
a <code>java.sql.Time</code> object in the Java programming language.

@param columnName the SQL name of the column
@return the column value; 
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7758875 "getTimestamp"
	public return_type class_ref 981403 // Timestamp
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as
a <code>java.sql.Timestamp</code> object.

@param columnName the SQL name of the column
@return the column value; if the value is SQL <code>NULL</code>, the
value returned is <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7759003 "getAsciiStream"
	public return_type class_ref 179099 // InputStream
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a stream of
ASCII characters. The value can then be read in chunks from the
stream. This method is particularly
suitable for retrieving large <code>LONGVARCHAR</code> values.
The JDBC driver will
do any necessary conversion from the database format into ASCII.

<P><B>Note:</B> All the data in the returned stream must be
read prior to getting the value of any other column. The next
call to a getter method implicitly closes the stream. Also, a
stream may return <code>0</code> when the method <code>available</code>
is called whether there is data available or not.

@param columnName the SQL name of the column
@return a Java input stream that delivers the database column value
as a stream of one-byte ASCII characters.
If the value is SQL <code>NULL</code>,
the value returned is <code>null</code>.
@exception SQLException if a database access error occurs"
      end

      operation 7759131 "getUnicodeStream"
	public return_type class_ref 179099 // InputStream
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a stream of two-byte
Unicode characters. The first byte is the high byte; the second
byte is the low byte.

The value can then be read in chunks from the
stream. This method is particularly
suitable for retrieving large <code>LONGVARCHAR</code> values.
The JDBC technology-enabled driver will
do any necessary conversion from the database format into Unicode.

<P><B>Note:</B> All the data in the returned stream must be
read prior to getting the value of any other column. The next
call to a getter method implicitly closes the stream.
Also, a stream may return <code>0</code> when the method 
<code>InputStream.available</code> is called, whether there 
is data available or not.

@param columnName the SQL name of the column
@return a Java input stream that delivers the database column value
        as a stream of two-byte Unicode characters.  
        If the value is SQL <code>NULL</code>, the value returned 
        is <code>null</code>.
@exception SQLException if a database access error occurs
@deprecated use <code>getCharacterStream</code> instead"
      end

      operation 7759259 "getBinaryStream"
	public return_type class_ref 179099 // InputStream
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a stream of uninterpreted
<code>byte</code>s.
The value can then be read in chunks from the
stream. This method is particularly
suitable for retrieving large <code>LONGVARBINARY</code>
values. 

<P><B>Note:</B> All the data in the returned stream must be
read prior to getting the value of any other column. The next
call to a getter method implicitly closes the stream. Also, a
stream may return <code>0</code> when the method <code>available</code>
is called whether there is data available or not.

@param columnName the SQL name of the column
@return a Java input stream that delivers the database column value
as a stream of uninterpreted bytes; 
if the value is SQL <code>NULL</code>, the result is <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7759387 "getWarnings"
	public return_type class_ref 980891 // SQLWarning
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "=====================================================================
 Advanced features:
=====================================================================

Retrieves the first warning reported by calls on this 
<code>ResultSet</code> object.
Subsequent warnings on this <code>ResultSet</code> object
will be chained to the <code>SQLWarning</code> object that 
this method returns.

<P>The warning chain is automatically cleared each time a new
row is read.  This method may not be called on a <code>ResultSet</code>
object that has been closed; doing so will cause an 
<code>SQLException</code> to be thrown.
<P>
<B>Note:</B> This warning chain only covers warnings caused
by <code>ResultSet</code> methods.  Any warning caused by
<code>Statement</code> methods
(such as reading OUT parameters) will be chained on the
<code>Statement</code> object. 

@return the first <code>SQLWarning</code> object reported or 
        <code>null</code> if there are none
@exception SQLException if a database access error occurs or this method is 
           called on a closed result set"
      end

      operation 7759515 "clearWarnings"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears all warnings reported on this <code>ResultSet</code> object.
After this method is called, the method <code>getWarnings</code>
returns <code>null</code> until a new warning is
reported for this <code>ResultSet</code> object.  

@exception SQLException if a database access error occurs"
      end

      operation 7759643 "getCursorName"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the name of the SQL cursor used by this <code>ResultSet</code>
object.

<P>In SQL, a result table is retrieved through a cursor that is
named. The current row of a result set can be updated or deleted
using a positioned update/delete statement that references the
cursor name. To insure that the cursor has the proper isolation
level to support update, the cursor's <code>SELECT</code> statement 
should be of the form <code>SELECT FOR UPDATE</code>. If 
<code>FOR UPDATE</code> is omitted, the positioned updates may fail.

<P>The JDBC API supports this SQL feature by providing the name of the
SQL cursor used by a <code>ResultSet</code> object.
The current row of a <code>ResultSet</code> object
is also the current row of this SQL cursor.

<P><B>Note:</B> If positioned update is not supported, a
<code>SQLException</code> is thrown.

@return the SQL name for this <code>ResultSet</code> object's cursor
@exception SQLException if a database access error occurs"
      end

      operation 7759771 "getMetaData"
	public return_type class_ref 981787 // ResultSetMetaData
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the  number, types and properties of
this <code>ResultSet</code> object's columns.

@return the description of this <code>ResultSet</code> object's columns
@exception SQLException if a database access error occurs"
      end

      operation 7759899 "getObject"
	public explicit_return_type "Object"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Gets the value of the designated column in the current row 
of this <code>ResultSet</code> object as 
an <code>Object</code> in the Java programming language.

<p>This method will return the value of the given column as a
Java object.  The type of the Java object will be the default
Java object type corresponding to the column's SQL type,
following the mapping for built-in types specified in the JDBC 
specification. If the value is an SQL <code>NULL</code>, 
the driver returns a Java <code>null</code>.

<p>This method may also be used to read database-specific
abstract data types.

In the JDBC 2.0 API, the behavior of method
<code>getObject</code> is extended to materialize  
data of SQL user-defined types.  When a column contains
a structured or distinct value, the behavior of this method is as 
if it were a call to: <code>getObject(columnIndex, 
this.getStatement().getConnection().getTypeMap())</code>.

@param columnIndex the first column is 1, the second is 2, ...
@return a <code>java.lang.Object</code> holding the column value  
@exception SQLException if a database access error occurs"
      end

      operation 7760027 "getObject"
	public explicit_return_type "Object"
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Gets the value of the designated column in the current row 
of this <code>ResultSet</code> object as 
an <code>Object</code> in the Java programming language.

<p>This method will return the value of the given column as a
Java object.  The type of the Java object will be the default
Java object type corresponding to the column's SQL type,
following the mapping for built-in types specified in the JDBC 
specification. If the value is an SQL <code>NULL</code>, 
the driver returns a Java <code>null</code>.
<P>
This method may also be used to read database-specific
abstract data types.
<P>
In the JDBC 2.0 API, the behavior of the method
<code>getObject</code> is extended to materialize  
data of SQL user-defined types.  When a column contains
a structured or distinct value, the behavior of this method is as 
if it were a call to: <code>getObject(columnIndex, 
this.getStatement().getConnection().getTypeMap())</code>.

@param columnName the SQL name of the column
@return a <code>java.lang.Object</code> holding the column value  
@exception SQLException if a database access error occurs"
      end

      operation 7760155 "findColumn"
	public explicit_return_type "int"
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------------------------------------------------

Maps the given <code>ResultSet</code> column name to its
<code>ResultSet</code> column index.

@param columnName the name of the column
@return the column index of the given column name
@exception SQLException if the <code>ResultSet</code> object
does not contain <code>columnName</code> or a database access error occurs"
      end

      operation 7760283 "getCharacterStream"
	public return_type class_ref 364827 // Reader
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------------
---------------------------------------------------------------------
 Getters and Setters
---------------------------------------------------------------------

Retrieves the value of the designated column in the current row 
of this <code>ResultSet</code> object as a
<code>java.io.Reader</code> object.
@return a <code>java.io.Reader</code> object that contains the column
value; if the value is SQL <code>NULL</code>, the value returned is
<code>null</code> in the Java programming language.
@param columnIndex the first column is 1, the second is 2, ...
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7760411 "getCharacterStream"
	public return_type class_ref 364827 // Reader
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row 
of this <code>ResultSet</code> object as a
<code>java.io.Reader</code> object.

@param columnName the name of the column
@return a <code>java.io.Reader</code> object that contains the column
value; if the value is SQL <code>NULL</code>, the value returned is
<code>null</code> in the Java programming language
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7760539 "getBigDecimal"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a
<code>java.math.BigDecimal</code> with full precision.

@param columnIndex the first column is 1, the second is 2, ...
@return the column value (full precision);
if the value is SQL <code>NULL</code>, the value returned is
<code>null</code> in the Java programming language.
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7760667 "getBigDecimal"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a
<code>java.math.BigDecimal</code> with full precision.

@param columnName the column name
@return the column value (full precision);
if the value is SQL <code>NULL</code>, the value returned is
<code>null</code> in the Java programming language.
@exception SQLException if a database access error occurs
@since 1.2
"
      end

      operation 7760795 "isBeforeFirst"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "---------------------------------------------------------------------
 Traversal/Positioning
---------------------------------------------------------------------

Retrieves whether the cursor is before the first row in 
this <code>ResultSet</code> object.

@return <code>true</code> if the cursor is before the first row;
<code>false</code> if the cursor is at any other position or the
result set contains no rows
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7760923 "isAfterLast"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the cursor is after the last row in 
this <code>ResultSet</code> object.

@return <code>true</code> if the cursor is after the last row;
<code>false</code> if the cursor is at any other position or the
result set contains no rows
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7761051 "isFirst"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the cursor is on the first row of
this <code>ResultSet</code> object.

@return <code>true</code> if the cursor is on the first row;
<code>false</code> otherwise   
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7761179 "isLast"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the cursor is on the last row of 
this <code>ResultSet</code> object.
Note: Calling the method <code>isLast</code> may be expensive
because the JDBC driver
might need to fetch ahead one row in order to determine 
whether the current row is the last row in the result set.

@return <code>true</code> if the cursor is on the last row;
<code>false</code> otherwise   
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7761307 "beforeFirst"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the front of
this <code>ResultSet</code> object, just before the
first row. This method has no effect if the result set contains no rows.

@exception SQLException if a database access error
occurs or the result set type is <code>TYPE_FORWARD_ONLY</code>
@since 1.2"
      end

      operation 7761435 "afterLast"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the end of
this <code>ResultSet</code> object, just after the
last row. This method has no effect if the result set contains no rows.
@exception SQLException if a database access error
occurs or the result set type is <code>TYPE_FORWARD_ONLY</code>
@since 1.2"
      end

      operation 7761563 "first"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the first row in
this <code>ResultSet</code> object.

@return <code>true</code> if the cursor is on a valid row;
<code>false</code> if there are no rows in the result set
@exception SQLException if a database access error
occurs or the result set type is <code>TYPE_FORWARD_ONLY</code>
@since 1.2"
      end

      operation 7761691 "last"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the last row in
this <code>ResultSet</code> object.

@return <code>true</code> if the cursor is on a valid row;
<code>false</code> if there are no rows in the result set
@exception SQLException if a database access error
occurs or the result set type is <code>TYPE_FORWARD_ONLY</code>
@since 1.2"
      end

      operation 7761819 "getRow"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the current row number.  The first row is number 1, the
second number 2, and so on.  

@return the current row number; <code>0</code> if there is no current row
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7761947 "absolute"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "row" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the given row number in
this <code>ResultSet</code> object.

<p>If the row number is positive, the cursor moves to 
the given row number with respect to the
beginning of the result set.  The first row is row 1, the second
is row 2, and so on. 

<p>If the given row number is negative, the cursor moves to
an absolute row position with respect to
the end of the result set.  For example, calling the method
<code>absolute(-1)</code> positions the 
cursor on the last row; calling the method <code>absolute(-2)</code>
moves the cursor to the next-to-last row, and so on.

<p>An attempt to position the cursor beyond the first/last row in
the result set leaves the cursor before the first row or after 
the last row.

<p><B>Note:</B> Calling <code>absolute(1)</code> is the same
as calling <code>first()</code>. Calling <code>absolute(-1)</code> 
is the same as calling <code>last()</code>.

@param row the number of the row to which the cursor should move.
       A positive number indicates the row number counting from the
       beginning of the result set; a negative number indicates the
       row number counting from the end of the result set
@return <code>true</code> if the cursor is on the result set;
<code>false</code> otherwise
@exception SQLException if a database access error
occurs, or the result set type is <code>TYPE_FORWARD_ONLY</code>
@since 1.2"
      end

      operation 7762075 "relative"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "rows" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor a relative number of rows, either positive or negative.
Attempting to move beyond the first/last row in the
result set positions the cursor before/after the
the first/last row. Calling <code>relative(0)</code> is valid, but does
not change the cursor position.

<p>Note: Calling the method <code>relative(1)</code>
is identical to calling the method <code>next()</code> and 
calling the method <code>relative(-1)</code> is identical
to calling the method <code>previous()</code>.

@param rows an <code>int</code> specifying the number of rows to
       move from the current row; a positive number moves the cursor
       forward; a negative number moves the cursor backward
@return <code>true</code> if the cursor is on a row;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs, 
           there is no current row, or the result set type is 
           <code>TYPE_FORWARD_ONLY</code>
@since 1.2"
      end

      operation 7762203 "previous"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the previous row in this
<code>ResultSet</code> object.

@return <code>true</code> if the cursor is on a valid row; 
<code>false</code> if it is off the result set
@exception SQLException if a database access error
occurs or the result set type is <code>TYPE_FORWARD_ONLY</code>
@since 1.2"
      end

      attribute 2876699 "FETCH_FORWARD"
	public explicit_type "int"
	init_value "=  1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "---------------------------------------------------------------------
 Properties
---------------------------------------------------------------------

The constant indicating that the rows in a result set will be 
processed in a forward direction; first-to-last.
This constant is used by the method <code>setFetchDirection</code>
as a hint to the driver, which the driver may ignore.
@since 1.2
"
      end

      attribute 2876827 "FETCH_REVERSE"
	public explicit_type "int"
	init_value "=  1001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that the rows in a result set will be 
processed in a reverse direction; last-to-first.
This constant is used by the method <code>setFetchDirection</code>
as a hint to the driver, which the driver may ignore.
@since 1.2
"
      end

      attribute 2876955 "FETCH_UNKNOWN"
	public explicit_type "int"
	init_value "=  1002"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that the order in which rows in a 
result set will be processed is unknown.
This constant is used by the method <code>setFetchDirection</code>
as a hint to the driver, which the driver may ignore.
"
      end

      operation 7762331 "setFetchDirection"
	public explicit_return_type "void"
	nparams 1
	  param in name "direction" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gives a hint as to the direction in which the rows in this
<code>ResultSet</code> object will be processed. 
The initial value is determined by the 
<code>Statement</code> object
that produced this <code>ResultSet</code> object.
The fetch direction may be changed at any time.

@param direction an <code>int</code> specifying the suggested
       fetch direction; one of <code>ResultSet.FETCH_FORWARD</code>, 
       <code>ResultSet.FETCH_REVERSE</code>, or
       <code>ResultSet.FETCH_UNKNOWN</code>
@exception SQLException if a database access error occurs or
the result set type is <code>TYPE_FORWARD_ONLY</code> and the fetch
direction is not <code>FETCH_FORWARD</code>
@since 1.2
@see Statement#setFetchDirection
@see #getFetchDirection"
      end

      operation 7762459 "getFetchDirection"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the fetch direction for this 
<code>ResultSet</code> object.

@return the current fetch direction for this <code>ResultSet</code> object 
@exception SQLException if a database access error occurs
@since 1.2
@see #setFetchDirection"
      end

      operation 7762587 "setFetchSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "rows" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gives the JDBC driver a hint as to the number of rows that should 
be fetched from the database when more rows are needed for this 
<code>ResultSet</code> object.
If the fetch size specified is zero, the JDBC driver 
ignores the value and is free to make its own best guess as to what
the fetch size should be.  The default value is set by the 
<code>Statement</code> object
that created the result set.  The fetch size may be changed at any time.

@param rows the number of rows to fetch
@exception SQLException if a database access error occurs or the
condition <code>0 <= rows <= Statement.getMaxRows()</code> is not satisfied
@since 1.2
@see #getFetchSize"
      end

      operation 7762715 "getFetchSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the fetch size for this 
<code>ResultSet</code> object.

@return the current fetch size for this <code>ResultSet</code> object
@exception SQLException if a database access error occurs
@since 1.2
@see #setFetchSize"
      end

      attribute 2877083 "TYPE_FORWARD_ONLY"
	public explicit_type "int"
	init_value "=  1003"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating the type for a <code>ResultSet</code> object
whose cursor may move only forward.
@since 1.2
"
      end

      attribute 2877211 "TYPE_SCROLL_INSENSITIVE"
	public explicit_type "int"
	init_value "=  1004"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating the type for a <code>ResultSet</code> object
that is scrollable but generally not sensitive to changes made by others.
@since 1.2
"
      end

      attribute 2877339 "TYPE_SCROLL_SENSITIVE"
	public explicit_type "int"
	init_value "=  1005"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating the type for a <code>ResultSet</code> object
that is scrollable and generally sensitive to changes made by others.
@since 1.2
"
      end

      operation 7762843 "getType"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the type of this <code>ResultSet</code> object.  
The type is determined by the <code>Statement</code> object
that created the result set.

@return <code>ResultSet.TYPE_FORWARD_ONLY</code>,
        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>,
        or <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@exception SQLException if a database access error occurs
@since 1.2"
      end

      attribute 2877467 "CONCUR_READ_ONLY"
	public explicit_type "int"
	init_value "=  1007"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating the concurrency mode for a
<code>ResultSet</code> object that may NOT be updated.
@since 1.2
"
      end

      attribute 2877595 "CONCUR_UPDATABLE"
	public explicit_type "int"
	init_value "=  1008"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating the concurrency mode for a
<code>ResultSet</code> object that may be updated.
@since 1.2
"
      end

      operation 7762971 "getConcurrency"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the concurrency mode of this <code>ResultSet</code> object.
The concurrency used is determined by the 
<code>Statement</code> object that created the result set.

@return the concurrency type, either
        <code>ResultSet.CONCUR_READ_ONLY</code>
        or <code>ResultSet.CONCUR_UPDATABLE</code>
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7763099 "rowUpdated"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "---------------------------------------------------------------------
 Updates
---------------------------------------------------------------------

Retrieves whether the current row has been updated.  The value returned 
depends on whether or not the result set can detect updates.

@return <code>true</code> if both (1) the row has been visibly updated
        by the owner or another and (2) updates are detected
@exception SQLException if a database access error occurs
@see DatabaseMetaData#updatesAreDetected
@since 1.2"
      end

      operation 7763227 "rowInserted"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the current row has had an insertion.
The value returned depends on whether or not this
<code>ResultSet</code> object can detect visible inserts.

@return <code>true</code> if a row has had an insertion
and insertions are detected; <code>false</code> otherwise
@exception SQLException if a database access error occurs

@see DatabaseMetaData#insertsAreDetected
@since 1.2"
      end

      operation 7763355 "rowDeleted"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a row has been deleted.  A deleted row may leave
a visible \"hole\" in a result set.  This method can be used to
detect holes in a result set.  The value returned depends on whether 
or not this <code>ResultSet</code> object can detect deletions.

@return <code>true</code> if a row was deleted and deletions are detected;
<code>false</code> otherwise
@exception SQLException if a database access error occurs

@see DatabaseMetaData#deletesAreDetected
@since 1.2"
      end

      operation 7763483 "updateNull"
	public explicit_return_type "void"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gives a nullable column a null value.

The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code>
or <code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7763611 "updateBoolean"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>boolean</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7763739 "updateByte"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>byte</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.


@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7763867 "updateShort"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>short</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7763995 "updateInt"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an <code>int</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7764123 "updateLong"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>long</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7764251 "updateFloat"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>float</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7764379 "updateDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>double</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7764507 "updateBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 178459 // BigDecimal
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.math.BigDecimal</code> 
value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7764635 "updateString"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>String</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7764763 "updateBytes"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>byte</code> array value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7764891 "updateDate"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 981147 // Date
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Date</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7765019 "updateTime"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 981275 // Time
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Time</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7765147 "updateTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 981403 // Timestamp
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Timestamp</code>
value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7765275 "updateAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 179099 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an ascii stream value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@param length the length of the stream
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7765403 "updateBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 179099 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a binary stream value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value     
@param length the length of the stream
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7765531 "updateCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 364827 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a character stream value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@param length the length of the stream
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7765659 "updateObject"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" explicit_type "Object"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an <code>Object</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@param scale for <code>java.sql.Types.DECIMA</code>
 or <code>java.sql.Types.NUMERIC</code> types,
 this is the number of digits after the decimal point.  For all other
 types this value will be ignored.
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7765787 "updateObject"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" explicit_type "Object"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an <code>Object</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7765915 "updateNull"
	public explicit_return_type "void"
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>null</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7766043 "updateBoolean"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>boolean</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7766171 "updateByte"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>byte</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7766299 "updateShort"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>short</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7766427 "updateInt"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an <code>int</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7766555 "updateLong"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>long</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7766683 "updateFloat"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>float	</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7766811 "updateDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>double</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7766939 "updateBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param inout name "x" type class_ref 178459 // BigDecimal
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.BigDecimal</code>
value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7767067 "updateString"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param in name "x" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>String</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7767195 "updateBytes"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a byte array value.

The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> 
or <code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7767323 "updateDate"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param inout name "x" type class_ref 981147 // Date
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Date</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7767451 "updateTime"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param inout name "x" type class_ref 981275 // Time
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Time</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7767579 "updateTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param inout name "x" type class_ref 981403 // Timestamp
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Timestamp</code>
value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7767707 "updateAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnName" explicit_type "String"
	  param inout name "x" type class_ref 179099 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an ascii stream value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@param length the length of the stream
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7767835 "updateBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnName" explicit_type "String"
	  param inout name "x" type class_ref 179099 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a binary stream value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@param length the length of the stream
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7767963 "updateCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnName" explicit_type "String"
	  param inout name "reader" type class_ref 364827 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a character stream value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param reader the <code>java.io.Reader</code> object containing
       the new column value
@param length the length of the stream
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7768091 "updateObject"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnName" explicit_type "String"
	  param inout name "x" explicit_type "Object"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an <code>Object</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@param scale for <code>java.sql.Types.DECIMAL</code>
 or <code>java.sql.Types.NUMERIC</code> types,
 this is the number of digits after the decimal point.  For all other
 types this value will be ignored.
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7768219 "updateObject"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param inout name "x" explicit_type "Object"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with an <code>Object</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7768347 "insertRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the contents of the insert row into this 
<code>ResultSet</code> object and into the database.  
The cursor must be on the insert row when this method is called.

@exception SQLException if a database access error occurs,
if this method is called when the cursor is not on the insert row,
or if not all of non-nullable columns in
the insert row have been given a value
@since 1.2"
      end

      operation 7768475 "updateRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the underlying database with the new contents of the
current row of this <code>ResultSet</code> object.
This method cannot be called when the cursor is on the insert row.

@exception SQLException if a database access error occurs or
if this method is called when the cursor is on the insert row
@since 1.2"
      end

      operation 7768603 "deleteRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes the current row from this <code>ResultSet</code> object 
and from the underlying database.  This method cannot be called when
the cursor is on the insert row.

@exception SQLException if a database access error occurs
or if this method is called when the cursor is on the insert row
@since 1.2"
      end

      operation 7768731 "refreshRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Refreshes the current row with its most recent value in 
the database.  This method cannot be called when
the cursor is on the insert row.

<P>The <code>refreshRow</code> method provides a way for an 
application to 
explicitly tell the JDBC driver to refetch a row(s) from the
database.  An application may want to call <code>refreshRow</code> when 
caching or prefetching is being done by the JDBC driver to
fetch the latest value of a row from the database.  The JDBC driver 
may actually refresh multiple rows at once if the fetch size is 
greater than one.

<P> All values are refetched subject to the transaction isolation 
level and cursor sensitivity.  If <code>refreshRow</code> is called after
calling an updater method, but before calling
the method <code>updateRow</code>, then the
updates made to the row are lost.  Calling the method
<code>refreshRow</code> frequently will likely slow performance.

@exception SQLException if a database access error
occurs or if this method is called when the cursor is on the insert row
@since 1.2"
      end

      operation 7768859 "cancelRowUpdates"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels the updates made to the current row in this
<code>ResultSet</code> object.
This method may be called after calling an
updater method(s) and before calling
the method <code>updateRow</code> to roll back 
the updates made to a row.  If no updates have been made or 
<code>updateRow</code> has already been called, this method has no 
effect.

@exception SQLException if a database access error
           occurs or if this method is called when the cursor is 
           on the insert row
@since 1.2"
      end

      operation 7768987 "moveToInsertRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the insert row.  The current cursor position is 
remembered while the cursor is positioned on the insert row.

The insert row is a special row associated with an updatable
result set.  It is essentially a buffer where a new row may
be constructed by calling the updater methods prior to 
inserting the row into the result set.  

Only the updater, getter,
and <code>insertRow</code> methods may be 
called when the cursor is on the insert row.  All of the columns in 
a result set must be given a value each time this method is
called before calling <code>insertRow</code>.  
An updater method must be called before a
getter method can be called on a column value.

@exception SQLException if a database access error occurs
or the result set is not updatable
@since 1.2"
      end

      operation 7769115 "moveToCurrentRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the remembered cursor position, usually the
current row.  This method has no effect if the cursor is not on 
the insert row. 

@exception SQLException if a database access error occurs
or the result set is not updatable
@since 1.2"
      end

      operation 7769243 "getStatement"
	public return_type class_ref 980763 // Statement
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>Statement</code> object that produced this 
<code>ResultSet</code> object.
If the result set was generated some other way, such as by a
<code>DatabaseMetaData</code> method, this method returns 
<code>null</code>.

@return the <code>Statment</code> object that produced 
this <code>ResultSet</code> object or <code>null</code>
if the result set was produced some other way
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7769371 "getObject"
	public explicit_return_type "Object"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "map" type class_ref 136603 // Map
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as an <code>Object</code>
in the Java programming language.
If the value is an SQL <code>NULL</code>, 
the driver returns a Java <code>null</code>.
This method uses the given <code>Map</code> object
for the custom mapping of the
SQL structured or distinct type that is being retrieved.

@param i the first column is 1, the second is 2, ...
@param map a <code>java.util.Map</code> object that contains the mapping 
from SQL type names to classes in the Java programming language
@return an <code>Object</code> in the Java programming language
representing the SQL value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7769499 "getRef"
	public return_type class_ref 981531 // Ref
	nparams 1
	  param in name "i" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>Ref</code> object
in the Java programming language.

@param i the first column is 1, the second is 2, ...
@return a <code>Ref</code> object representing an SQL <code>REF</code> 
        value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7769627 "getBlob"
	public return_type class_ref 980379 // Blob
	nparams 1
	  param in name "i" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>Blob</code> object
in the Java programming language.

@param i the first column is 1, the second is 2, ...
@return a <code>Blob</code> object representing the SQL 
        <code>BLOB</code> value in the specified column
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7769755 "getClob"
	public return_type class_ref 981659 // Clob
	nparams 1
	  param in name "i" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>Clob</code> object
in the Java programming language.

@param i the first column is 1, the second is 2, ...
@return a <code>Clob</code> object representing the SQL 
        <code>CLOB</code> value in the specified column
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7769883 "getArray"
	public return_type class_ref 979867 // Array
	nparams 1
	  param in name "i" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as an <code>Array</code> object
in the Java programming language.

@param i the first column is 1, the second is 2, ...
@return an <code>Array</code> object representing the SQL 
        <code>ARRAY</code> value in the specified column
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7770011 "getObject"
	public explicit_return_type "Object"
	nparams 2
	  param in name "colName" explicit_type "String"
	  param inout name "map" type class_ref 136603 // Map
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as an <code>Object</code>
in the Java programming language.
If the value is an SQL <code>NULL</code>, 
the driver returns a Java <code>null</code>.
This method uses the specified <code>Map</code> object for
custom mapping if appropriate.

@param colName the name of the column from which to retrieve the value
@param map a <code>java.util.Map</code> object that contains the mapping 
from SQL type names to classes in the Java programming language
@return an <code>Object</code> representing the SQL value in the 
        specified column
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7770139 "getRef"
	public return_type class_ref 981531 // Ref
	nparams 1
	  param in name "colName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>Ref</code> object
in the Java programming language.

@param colName the column name
@return a <code>Ref</code> object representing the SQL <code>REF</code> 
        value in the specified column
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7770267 "getBlob"
	public return_type class_ref 980379 // Blob
	nparams 1
	  param in name "colName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>Blob</code> object
in the Java programming language.

@param colName the name of the column from which to retrieve the value
@return a <code>Blob</code> object representing the SQL <code>BLOB</code> 
        value in the specified column
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7770395 "getClob"
	public return_type class_ref 981659 // Clob
	nparams 1
	  param in name "colName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>Clob</code> object
in the Java programming language.

@param colName the name of the column from which to retrieve the value
@return a <code>Clob</code> object representing the SQL <code>CLOB</code>
value in the specified column
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7770523 "getArray"
	public return_type class_ref 979867 // Array
	nparams 1
	  param in name "colName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as an <code>Array</code> object
in the Java programming language.

@param colName the name of the column from which to retrieve the value
@return an <code>Array</code> object representing the SQL <code>ARRAY</code> value in
        the specified column
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7770651 "getDate"
	public return_type class_ref 981147 // Date
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.sql.Date</code> object
in the Java programming language.
This method uses the given calendar to construct an appropriate millisecond
value for the date if the underlying database does not store
timezone information.

@param columnIndex the first column is 1, the second is 2, ...
@param cal the <code>java.util.Calendar</code> object
to use in constructing the date
@return the column value as a <code>java.sql.Date</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7770779 "getDate"
	public return_type class_ref 981147 // Date
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.sql.Date</code> object
in the Java programming language.
This method uses the given calendar to construct an appropriate millisecond
value for the date if the underlying database does not store
timezone information.

@param columnName the SQL name of the column from which to retrieve the value
@param cal the <code>java.util.Calendar</code> object
to use in constructing the date
@return the column value as a <code>java.sql.Date</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7770907 "getTime"
	public return_type class_ref 981275 // Time
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.sql.Time</code> object
in the Java programming language.
This method uses the given calendar to construct an appropriate millisecond
value for the time if the underlying database does not store
timezone information.

@param columnIndex the first column is 1, the second is 2, ...
@param cal the <code>java.util.Calendar</code> object
to use in constructing the time
@return the column value as a <code>java.sql.Time</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7771035 "getTime"
	public return_type class_ref 981275 // Time
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.sql.Time</code> object
in the Java programming language.
This method uses the given calendar to construct an appropriate millisecond
value for the time if the underlying database does not store
timezone information.

@param columnName the SQL name of the column
@param cal the <code>java.util.Calendar</code> object
to use in constructing the time
@return the column value as a <code>java.sql.Time</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7771163 "getTimestamp"
	public return_type class_ref 981403 // Timestamp
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object
in the Java programming language.
This method uses the given calendar to construct an appropriate millisecond
value for the timestamp if the underlying database does not store
timezone information.

@param columnIndex the first column is 1, the second is 2, ...
@param cal the <code>java.util.Calendar</code> object
to use in constructing the timestamp
@return the column value as a <code>java.sql.Timestamp</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7771291 "getTimestamp"
	public return_type class_ref 981403 // Timestamp
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object
in the Java programming language.
This method uses the given calendar to construct an appropriate millisecond
value for the timestamp if the underlying database does not store
timezone information.

@param columnName the SQL name of the column
@param cal the <code>java.util.Calendar</code> object
to use in constructing the date
@return the column value as a <code>java.sql.Timestamp</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if a database access error occurs
@since 1.2"
      end

      attribute 2877723 "HOLD_CURSORS_OVER_COMMIT"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "-------------------------- JDBC 3.0 ----------------------------------------

The constant indicating that <code>ResultSet</code> objects should not
be closed when the method <code>Connection.commit</code> is called.

@since 1.4
"
      end

      attribute 2877851 "CLOSE_CURSORS_AT_COMMIT"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that <code>ResultSet</code> objects should be
closed when the method <code>Connection.commit</code> is called.

@since 1.4
"
      end

      operation 7771419 "getURL"
	public return_type class_ref 269467 // URL
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.net.URL</code>
object in the Java programming language.

@param columnIndex the index of the column 1 is the first, 2 is the second,...
@return the column value as a <code>java.net.URL</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if a database access error occurs,
           or if a URL is malformed
@since 1.4"
      end

      operation 7771547 "getURL"
	public return_type class_ref 269467 // URL
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated column in the current row
of this <code>ResultSet</code> object as a <code>java.net.URL</code>
object in the Java programming language.

@param columnName the SQL name of the column
@return the column value as a <code>java.net.URL</code> object;
if the value is SQL <code>NULL</code>,
the value returned is <code>null</code> in the Java programming language
@exception SQLException if a database access error occurs
           or if a URL is malformed
@since 1.4"
      end

      operation 7771675 "updateRef"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 981531 // Ref
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Ref</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7771803 "updateRef"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param inout name "x" type class_ref 981531 // Ref
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Ref</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7771931 "updateBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 980379 // Blob
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Blob</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7772059 "updateBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param inout name "x" type class_ref 980379 // Blob
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Blob</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7772187 "updateClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 981659 // Clob
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Clob</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7772315 "updateClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param inout name "x" type class_ref 981659 // Clob
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Clob</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7772443 "updateArray"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 979867 // Array
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Array</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnIndex the first column is 1, the second is 2, ...
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7772571 "updateArray"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param inout name "x" type class_ref 979867 // Array
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the designated column with a <code>java.sql.Array</code> value.
The updater methods are used to update column values in the
current row or the insert row.  The updater methods do not 
update the underlying database; instead the <code>updateRow</code> or
<code>insertRow</code> methods are called to update the database.

@param columnName the name of the column
@param x the new column value
@exception SQLException if a database access error occurs
@since 1.4"
      end

      classrelation 2709915 // <dependency>
	relation 2709915 -_->
	  a default
	    classrelation_ref 2709915 // <dependency>
	  b parent class_ref 981787 // ResultSetMetaData
      end
    end

    class 980251 "BatchUpdateException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception thrown when an error
occurs during a batch update operation.  In addition to the
information provided by {@link SQLException}, a 
<code>BatchUpdateException</code> provides the update
counts for all commands that were executed successfully during the
batch update, that is, all commands that were executed before the error 
occurred.  The order of elements in an array of update counts
corresponds to the order in which commands were added to the batch.
<P>
After a command in a batch update fails to execute properly
and a <code>BatchUpdateException</code> is thrown, the driver
may or may not continue to process the remaining commands in
the batch.  If the driver continues processing after a failure,
the array returned by the method 
<code>BatchUpdateException.getUpdateCounts</code> will have 
an element for every command in the batch rather than only
elements for the commands that executed successfully before 
the error.  In the case where the driver continues processing
commands, the array element for any command
that failed is <code>Statement.EXECUTE_FAILED</code>.
<P>
@since 1.2"
      classrelation 1907611 // <generalisation>
	relation 1907611 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1907611 // <generalisation>
	  b parent class_ref 979995 // SQLException
      end

      operation 7698075 "BatchUpdateException"
	public explicit_return_type ""
	nparams 4
	  param in name "reason" explicit_type "String"
	  param in name "SQLState" explicit_type "String"
	  param in name "vendorCode" explicit_type "int"
	  param in name "updateCounts" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a fully-specified <code>BatchUpdateException</code> object,
initializing it with the given values.
@param reason a description of the error 
@param SQLState an X/OPEN code identifying the error
@param vendorCode an exception code used by a particular
database vendor
@param updateCounts an array of <code>int</code>, with each element
indicating the update count for a SQL command that executed 
successfully before the exception was thrown
@since 1.2"
      end

      operation 7698203 "BatchUpdateException"
	public explicit_return_type ""
	nparams 3
	  param in name "reason" explicit_type "String"
	  param in name "SQLState" explicit_type "String"
	  param in name "updateCounts" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BatchUpdateException</code> initialized with 
the given arguments (<code>reason</code>,
<code>SQLState</code>, and <code>updateCounts</code>) and 0 for the vendor
code.
@param reason a description of the exception 
@param SQLState an X/OPEN code identifying the exception 
@param updateCounts an array of <code>int</code>, with each element  
indicating the update count for a SQL command that executed
successfully before the exception was thrown  
@since 1.2"
      end

      operation 7698331 "BatchUpdateException"
	public explicit_return_type ""
	nparams 2
	  param in name "reason" explicit_type "String"
	  param in name "updateCounts" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BatchUpdateException</code> initialized with
<code>reason</code>, <code>updateCounts</code> and <code>null</code>
for the SQLState and 0 for the vendorCode.
@param reason a description of the exception 
@param updateCounts an array of <code>int</code>, with each element
indicating the update count for a SQL command that executed
successfully before the exception was thrown
@since 1.2"
      end

      operation 7698459 "BatchUpdateException"
	public explicit_return_type ""
	nparams 1
	  param in name "updateCounts" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BatchUpdateException</code> initialized to 
<code>null</code> for the reason and SQLState and 0 for the
vendor code.
@param updateCounts an array of <code>int</code>, with each element
indicating the update count for a SQL command that executed
successfully before the exception was thrown
@since 1.2"
      end

      operation 7698587 "BatchUpdateException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BatchUpdateException</code> object 
with the reason, SQLState, and update count initialized to
<code>null</code> and the vendor code initialized to 0.
@since 1.2"
      end

      operation 7698715 "getUpdateCounts"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the update count for each update statement in the batch
update that executed successfully before this exception occurred.
A driver that implements batch updates may or may not continue to
process the remaining commands in a batch when one of the commands
fails to execute properly. If the driver continues processing commands,
the array returned by this method will have as many elements as
there are commands in the batch; otherwise, it will contain an
update count for each command that executed successfully before
the <code>BatchUpdateException</code> was thrown.
<P>
The possible return values for this method were modified for
the Java 2 SDK, Standard Edition, version 1.3.  This was done to
accommodate the new option of continuing to process commands
in a batch update after a <code>BatchUpdateException</code> object
has been thrown.

@return an array of <code>int</code> containing the update counts
for the updates that were executed successfully before this error
occurred.  Or, if the driver continues to process commands after an
error, one of the following for every command in the batch:
<OL>
<LI>an update count
 <LI><code>Statement.SUCCESS_NO_INFO</code> to indicate that the command
    executed successfully but the number of rows affected is unknown
 <LI><code>Statement.EXECUTE_FAILED</code> to indicate that the command 
    failed to execute successfully
</OL>
@since 1.3"
      end

      attribute 2866075 "updateCounts"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The array that describes the outcome of a batch execution.
@serial
@since 1.2
"
      end
    end

    class 980379 "Blob"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The representation (mapping) in
the Java<sup><font size=-2>TM</font></sup> programming
language of an SQL 
<code>BLOB</code> value.  An SQL <code>BLOB</code> is a built-in type 
that stores a Binary Large Object as a column value in a row of 
a database table. By default drivers implement <code>Blob</code> using
an SQL <code>locator(BLOB)</code>, which means that a
<code>Blob</code> object contains a logical pointer to the
SQL <code>BLOB</code> data rather than the data itself.
A <code>Blob</code> object is valid for the duration of the
transaction in which is was created.

<P>Methods in the interfaces {@link ResultSet}, 
{@link CallableStatement}, and {@link PreparedStatement}, such as
<code>getBlob</code> and <code>setBlob</code> allow a programmer to 
access an SQL <code>BLOB</code> value.
The <code>Blob</code> interface provides methods for getting the
length of an SQL <code>BLOB</code> (Binary Large Object) value,
for materializing a <code>BLOB</code> value on the client, and for
determining the position of a pattern of bytes within a 
<code>BLOB</code> value. In addition, this interface has methods for updating
a <code>BLOB</code> value.

@since 1.2"
      operation 7698843 "length"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes in the <code>BLOB</code> value
designated by this <code>Blob</code> object.
@return length of the <code>BLOB</code> in bytes
@exception SQLException if there is an error accessing the
length of the <code>BLOB</code>
@since 1.2"
      end

      operation 7698971 "getBytes"
	public explicit_return_type "byte"
	nparams 2
	  param in name "pos" explicit_type "long"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves all or part of the <code>BLOB</code>
value that this <code>Blob</code> object represents, as an array of
bytes.  This <code>byte</code> array contains up to <code>length</code> 
consecutive bytes starting at position <code>pos</code>.

@param pos the ordinal position of the first byte in the 
       <code>BLOB</code> value to be extracted; the first byte is at
       position 1
@param length the number of consecutive bytes to be copied
@return a byte array containing up to <code>length</code> 
        consecutive bytes from the <code>BLOB</code> value designated
        by this <code>Blob</code> object, starting with the
        byte at position <code>pos</code>
@exception SQLException if there is an error accessing the
           <code>BLOB</code> value
@see #setBytes
@since 1.2"
      end

      operation 7699099 "getBinaryStream"
	public return_type class_ref 179099 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>BLOB</code> value designated by this
<code>Blob</code> instance as a stream.

@return a stream containing the <code>BLOB</code> data
@exception SQLException if there is an error accessing the
           <code>BLOB</code> value
@see #setBinaryStream
@since 1.2"
      end

      operation 7699227 "position"
	public explicit_return_type "long"
	nparams 2
	  param in name "pattern" explicit_type "byte"
	  param in name "start" explicit_type "long"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the byte position at which the specified byte array
<code>pattern</code> begins within the <code>BLOB</code>
value that this <code>Blob</code> object represents.  The
search for <code>pattern</code> begins at position
<code>start</code>.  

@param pattern the byte array for which to search
@param start the position at which to begin searching; the
       first position is 1
@return the position at which the pattern appears, else -1
@exception SQLException if there is an error accessing the 
<code>BLOB</code>
@since 1.2"
      end

      operation 7699355 "position"
	public explicit_return_type "long"
	nparams 2
	  param inout name "pattern" type class_ref 980379 // Blob
	  param in name "start" explicit_type "long"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the byte position in the <code>BLOB</code> value
designated by this <code>Blob</code> object at which 
<code>pattern</code> begins.  The search begins at position
<code>start</code>.

@param pattern the <code>Blob</code> object designating
the <code>BLOB</code> value for which to search
@param start the position in the <code>BLOB</code> value
       at which to begin searching; the first position is 1
@return the position at which the pattern begins, else -1
@exception SQLException if there is an error accessing the
           <code>BLOB</code> value
@since 1.2"
      end

      operation 7699483 "setBytes"
	public explicit_return_type "int"
	nparams 2
	  param in name "pos" explicit_type "long"
	  param in name "bytes" explicit_type "byte"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -------------------------- JDBC 3.0 -----------------------------------

Writes the given array of bytes to the <code>BLOB</code> value that
this <code>Blob</code> object represents, starting at position 
<code>pos</code>, and returns the number of bytes written.

@param pos the position in the <code>BLOB</code> object at which
       to start writing
@param bytes the array of bytes to be written to the <code>BLOB</code>
       value that this <code>Blob</code> object represents
@return the number of bytes written
@exception SQLException if there is an error accessing the
           <code>BLOB</code> value
@see #getBytes
@since 1.4"
      end

      operation 7699611 "setBytes"
	public explicit_return_type "int"
	nparams 4
	  param in name "pos" explicit_type "long"
	  param in name "bytes" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes all or part of the given <code>byte</code> array to the
<code>BLOB</code> value that this <code>Blob</code> object represents
and returns the number of bytes written.
Writing starts at position <code>pos</code> in the <code>BLOB</code>
value; <code>len</code> bytes from the given byte array are written.

@param pos the position in the <code>BLOB</code> object at which
       to start writing
@param bytes the array of bytes to be written to this <code>BLOB</code>
       object
@param offset the offset into the array <code>bytes</code> at which
       to start reading the bytes to be set
@param len the number of bytes to be written to the <code>BLOB</code>
       value from the array of bytes <code>bytes</code>
@return the number of bytes written
@exception SQLException if there is an error accessing the
           <code>BLOB</code> value
@see #getBytes
@since 1.4"
      end

      operation 7699739 "setBinaryStream"
	public return_type class_ref 183835 // OutputStream
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a stream that can be used to write to the <code>BLOB</code> 
value that this <code>Blob</code> object represents.  The stream begins
at position <code>pos</code>.

@param pos the position in the <code>BLOB</code> value at which
       to start writing
@return a <code>java.io.OutputStream</code> object to which data can 
        be written
@exception SQLException if there is an error accessing the
           <code>BLOB</code> value
@see #getBinaryStream
@since 1.4"
      end

      operation 7699867 "truncate"
	public explicit_return_type "void"
	nparams 1
	  param in name "len" explicit_type "long"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Truncates the <code>BLOB</code> value that this <code>Blob</code>
object represents to be <code>len</code> bytes in length.

@param len the length, in bytes, to which the <code>BLOB</code> value
       that this <code>Blob</code> object represents should be truncated
@exception SQLException if there is an error accessing the
           <code>BLOB</code> value
@since 1.4"
      end
    end

    class 980507 "CallableStatement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The interface used to execute SQL stored procedures.  The JDBC API 
provides a stored procedure SQL escape syntax that allows stored procedures 
to be called in a standard way for all RDBMSs. This escape syntax has one 
form that includes a result parameter and one that does not. If used, the result 
parameter must be registered as an OUT parameter. The other parameters
can be used for input, output or both. Parameters are referred to 
sequentially, by number, with the first parameter being 1.
<PRE>
  {?= call &lt;procedure-name&gt;[&lt;arg1&gt;,&lt;arg2&gt;, ...]}
  {call &lt;procedure-name&gt;[&lt;arg1&gt;,&lt;arg2&gt;, ...]}
</PRE>
<P>
IN parameter values are set using the <code>set</code> methods inherited from
{@link PreparedStatement}.  The type of all OUT parameters must be
registered prior to executing the stored procedure; their values
are retrieved after execution via the <code>get</code> methods provided here.
<P>
A <code>CallableStatement</code> can return one {@link ResultSet} object or 
multiple <code>ResultSet</code> objects.  Multiple 
<code>ResultSet</code> objects are handled using operations
inherited from {@link Statement}.
<P>
For maximum portability, a call's <code>ResultSet</code> objects and 
update counts should be processed prior to getting the values of output
parameters.
<P>

@see Connection#prepareCall
@see ResultSet "
      classrelation 1907867 // <generalisation>
	relation 1907867 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1907867 // <generalisation>
	  b parent class_ref 980635 // PreparedStatement
      end

      operation 7709467 "registerOutParameter"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the OUT parameter in ordinal position 
<code>parameterIndex</code> to the JDBC type 
<code>sqlType</code>.  All OUT parameters must be registered
before a stored procedure is executed.
<p>
The JDBC type specified by <code>sqlType</code> for an OUT
parameter determines the Java type that must be used
in the <code>get</code> method to read the value of that parameter.
<p>
If the JDBC type expected to be returned to this output parameter
is specific to this particular database, <code>sqlType</code>
should be <code>java.sql.Types.OTHER</code>.  The method 
{@link #getObject} retrieves the value.

@param parameterIndex the first parameter is 1, the second is 2, 
       and so on
@param sqlType the JDBC type code defined by <code>java.sql.Types</code>.
       If the parameter is of JDBC type <code>NUMERIC</code>
       or <code>DECIMAL</code>, the version of
       <code>registerOutParameter</code> that accepts a scale value 
       should be used.

@exception SQLException if a database access error occurs
@see Types "
      end

      operation 7709595 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the parameter in ordinal position
<code>parameterIndex</code> to be of JDBC type
<code>sqlType</code>.  This method must be called
before a stored procedure is executed.
<p>
The JDBC type specified by <code>sqlType</code> for an OUT
parameter determines the Java type that must be used
in the <code>get</code> method to read the value of that parameter.
<p>
This version of <code>registerOutParameter</code> should be
used when the parameter is of JDBC type <code>NUMERIC</code>
or <code>DECIMAL</code>.

@param parameterIndex the first parameter is 1, the second is 2,
and so on
@param sqlType the SQL type code defined by <code>java.sql.Types</code>.
@param scale the desired number of digits to the right of the
decimal point.  It must be greater than or equal to zero.
@exception SQLException if a database access error occurs
@see Types "
      end

      operation 7709723 "wasNull"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the last OUT parameter read had the value of
SQL <code>NULL</code>.  Note that this method should be called only after
calling a getter method; otherwise, there is no value to use in 
determining whether it is <code>null</code> or not.

@return <code>true</code> if the last parameter read was SQL
<code>NULL</code>; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7709851 "getString"
	public explicit_return_type "String"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>CHAR</code>, 
<code>VARCHAR</code>, or <code>LONGVARCHAR</code> parameter as a 
<code>String</code> in the Java programming language.
<p>
For the fixed-length type JDBC <code>CHAR</code>,
the <code>String</code> object
returned has exactly the same value the JDBC
<code>CHAR</code> value had in the
database, including any padding added by the database.

@param parameterIndex the first parameter is 1, the second is 2, 
and so on
@return the parameter value. If the value is SQL <code>NULL</code>, 
        the result 
        is <code>null</code>.
@exception SQLException if a database access error occurs
@see #setString"
      end

      operation 7709979 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>BIT</code> parameter as a 
<code>boolean</code> in the Java programming language.

@param parameterIndex the first parameter is 1, the second is 2, 
       and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, 
        the result is <code>false</code>.
@exception SQLException if a database access error occurs
@see #setBoolean"
      end

      operation 7710107 "getByte"
	public explicit_return_type "byte"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>TINYINT</code> parameter 
as a <code>byte</code> in the Java programming language.

@param parameterIndex the first parameter is 1, the second is 2, 
and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
is <code>0</code>.
@exception SQLException if a database access error occurs
@see #setByte"
      end

      operation 7710235 "getShort"
	public explicit_return_type "short"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>SMALLINT</code> parameter 
as a <code>short</code> in the Java programming language.

@param parameterIndex the first parameter is 1, the second is 2, 
and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
is <code>0</code>.
@exception SQLException if a database access error occurs
@see #setShort"
      end

      operation 7710363 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>INTEGER</code> parameter 
as an <code>int</code> in the Java programming language.

@param parameterIndex the first parameter is 1, the second is 2, 
and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
is <code>0</code>.
@exception SQLException if a database access error occurs
@see #setInt"
      end

      operation 7710491 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>BIGINT</code> parameter 
as a <code>long</code> in the Java programming language.

@param parameterIndex the first parameter is 1, the second is 2, 
and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
is <code>0</code>.
@exception SQLException if a database access error occurs
@see #setLong"
      end

      operation 7710619 "getFloat"
	public explicit_return_type "float"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>FLOAT</code> parameter 
as a <code>float</code> in the Java programming language.

@param parameterIndex the first parameter is 1, the second is 2, 
       and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
        is <code>0</code>.
@exception SQLException if a database access error occurs
@see #setFloat"
      end

      operation 7710747 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>DOUBLE</code> parameter as a <code>double</code>
in the Java programming language.
@param parameterIndex the first parameter is 1, the second is 2,
       and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
        is <code>0</code>.
@exception SQLException if a database access error occurs
@see #setDouble"
      end

      operation 7710875 "getBigDecimal"
	public return_type class_ref 178459 // BigDecimal
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>NUMERIC</code> parameter as a 
<code>java.math.BigDecimal</code> object with <i>scale</i> digits to
the right of the decimal point.
@param parameterIndex the first parameter is 1, the second is 2, 
       and so on
@param scale the number of digits to the right of the decimal point 
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
        is <code>null</code>. 
@exception SQLException if a database access error occurs
@deprecated use <code>getBigDecimal(int parameterIndex)</code>
            or <code>getBigDecimal(String parameterName)</code>
@see #setBigDecimal"
      end

      operation 7711003 "getBytes"
	public explicit_return_type "byte"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>BINARY</code> or 
<code>VARBINARY</code> parameter as an array of <code>byte</code> 
values in the Java programming language.
@param parameterIndex the first parameter is 1, the second is 2, 
       and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
        is <code>null</code>.
@exception SQLException if a database access error occurs
@see #setBytes"
      end

      operation 7711131 "getDate"
	public return_type class_ref 981147 // Date
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>DATE</code> parameter as a 
<code>java.sql.Date</code> object.
@param parameterIndex the first parameter is 1, the second is 2, 
       and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
        is <code>null</code>.
@exception SQLException if a database access error occurs
@see #setDate"
      end

      operation 7711259 "getTime"
	public return_type class_ref 981275 // Time
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>TIME</code> parameter as a 
<code>java.sql.Time</code> object.

@param parameterIndex the first parameter is 1, the second is 2, 
       and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
        is <code>null</code>.
@exception SQLException if a database access error occurs
@see #setTime"
      end

      operation 7711387 "getTimestamp"
	public return_type class_ref 981403 // Timestamp
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a 
<code>java.sql.Timestamp</code> object.

@param parameterIndex the first parameter is 1, the second is 2, 
       and so on
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
        is <code>null</code>.
@exception SQLException if a database access error occurs
@see #setTimestamp"
      end

      operation 7711515 "getObject"
	public explicit_return_type "Object"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------------------------------------------------------
 Advanced features:

Retrieves the value of the designated parameter as an <code>Object</code> 
in the Java programming language. If the value is an SQL <code>NULL</code>,
the driver returns a Java <code>null</code>.
<p>
This method returns a Java object whose type corresponds to the JDBC
type that was registered for this parameter using the method
<code>registerOutParameter</code>.  By registering the target JDBC
type as <code>java.sql.Types.OTHER</code>, this method can be used
to read database-specific abstract data types.

@param parameterIndex the first parameter is 1, the second is 2, 
       and so on
@return A <code>java.lang.Object</code> holding the OUT parameter value
@exception SQLException if a database access error occurs
@see Types 
@see #setObject"
      end

      operation 7711643 "getBigDecimal"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------

Retrieves the value of the designated JDBC <code>NUMERIC</code> parameter as a 
<code>java.math.BigDecimal</code> object with as many digits to the
right of the decimal point as the value contains.
@param parameterIndex the first parameter is 1, the second is 2,
and so on
@return the parameter value in full precision.  If the value is 
SQL <code>NULL</code>, the result is <code>null</code>. 
@exception SQLException if a database access error occurs
@see #setBigDecimal
@since 1.2"
      end

      operation 7711771 "getObject"
	public explicit_return_type "Object"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "map" type class_ref 136603 // Map
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object representing the value of OUT parameter 
<code>i</code> and uses <code>map</code> for the custom
mapping of the parameter value.
<p>
This method returns a Java object whose type corresponds to the
JDBC type that was registered for this parameter using the method
<code>registerOutParameter</code>.  By registering the target
JDBC type as <code>java.sql.Types.OTHER</code>, this method can
be used to read database-specific abstract data types.  
@param i the first parameter is 1, the second is 2, and so on
@param map the mapping from SQL type names to Java classes
@return a <code>java.lang.Object</code> holding the OUT parameter value
@exception SQLException if a database access error occurs
@see #setObject
@since 1.2"
      end

      operation 7711899 "getRef"
	public return_type class_ref 981531 // Ref
	nparams 1
	  param in name "i" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>REF(&lt;structured-type&gt;)</code>
parameter as a {@link Ref} object in the Java programming language.
@param i the first parameter is 1, the second is 2, 
and so on
@return the parameter value as a <code>Ref</code> object in the
Java programming language.  If the value was SQL <code>NULL</code>, the value
<code>null</code> is returned.
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7712027 "getBlob"
	public return_type class_ref 980379 // Blob
	nparams 1
	  param in name "i" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>BLOB</code> parameter as a
{@link Blob} object in the Java programming language.
@param i the first parameter is 1, the second is 2, and so on
@return the parameter value as a <code>Blob</code> object in the
Java programming language.  If the value was SQL <code>NULL</code>, the value
<code>null</code> is returned.
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7712155 "getClob"
	public return_type class_ref 981659 // Clob
	nparams 1
	  param in name "i" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>CLOB</code> parameter as a
<code>Clob</code> object in the Java programming language.
@param i the first parameter is 1, the second is 2, and
so on
@return the parameter value as a <code>Clob</code> object in the
Java programming language.  If the value was SQL <code>NULL</code>, the
value <code>null</code> is returned.
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7712283 "getArray"
	public return_type class_ref 979867 // Array
	nparams 1
	  param in name "i" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Retrieves the value of the designated JDBC <code>ARRAY</code> parameter as an
{@link Array} object in the Java programming language.
@param i the first parameter is 1, the second is 2, and 
so on
@return the parameter value as an <code>Array</code> object in
the Java programming language.  If the value was SQL <code>NULL</code>, the
value <code>null</code> is returned.
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7712411 "getDate"
	public return_type class_ref 981147 // Date
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>DATE</code> parameter as a 
<code>java.sql.Date</code> object, using
the given <code>Calendar</code> object
to construct the date.
With a <code>Calendar</code> object, the driver
can calculate the date taking into account a custom timezone and locale.
If no <code>Calendar</code> object is specified, the driver uses the
default timezone and locale.

@param parameterIndex the first parameter is 1, the second is 2, 
and so on
@param cal the <code>Calendar</code> object the driver will use
           to construct the date
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
        is <code>null</code>.
@exception SQLException if a database access error occurs
@see #setDate
@since 1.2"
      end

      operation 7712539 "getTime"
	public return_type class_ref 981275 // Time
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>TIME</code> parameter as a 
<code>java.sql.Time</code> object, using
the given <code>Calendar</code> object
to construct the time.
With a <code>Calendar</code> object, the driver
can calculate the time taking into account a custom timezone and locale.
If no <code>Calendar</code> object is specified, the driver uses the
default timezone and locale.

@param parameterIndex the first parameter is 1, the second is 2,
and so on
@param cal the <code>Calendar</code> object the driver will use
           to construct the time
@return the parameter value; if the value is SQL <code>NULL</code>, the result 
        is <code>null</code>.
@exception SQLException if a database access error occurs
@see #setTime
@since 1.2"
      end

      operation 7712667 "getTimestamp"
	public return_type class_ref 981403 // Timestamp
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a
<code>java.sql.Timestamp</code> object, using
the given <code>Calendar</code> object to construct
the <code>Timestamp</code> object.
With a <code>Calendar</code> object, the driver
can calculate the timestamp taking into account a custom timezone and locale.
If no <code>Calendar</code> object is specified, the driver uses the
default timezone and locale.


@param parameterIndex the first parameter is 1, the second is 2, 
and so on
@param cal the <code>Calendar</code> object the driver will use
           to construct the timestamp
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
        is <code>null</code>.
@exception SQLException if a database access error occurs
@see #setTimestamp
@since 1.2"
      end

      operation 7712795 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param in name "paramIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	  param in name "typeName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the designated output parameter.  This version of 
the method <code>registerOutParameter</code>
should be used for a user-defined or <code>REF</code> output parameter.  Examples
of user-defined types include: <code>STRUCT</code>, <code>DISTINCT</code>,
<code>JAVA_OBJECT</code>, and named array types.

Before executing a stored procedure call, you must explicitly
call <code>registerOutParameter</code> to register the type from
<code>java.sql.Types</code> for each
OUT parameter.  For a user-defined parameter, the fully-qualified SQL
type name of the parameter should also be given, while a <code>REF</code>
parameter requires that the fully-qualified type name of the
referenced type be given.  A JDBC driver that does not need the
type code and type name information may ignore it.   To be portable,
however, applications should always provide these values for
user-defined and <code>REF</code> parameters.

Although it is intended for user-defined and <code>REF</code> parameters,
this method may be used to register a parameter of any JDBC type.
If the parameter does not have a user-defined or <code>REF</code> type, the
<i>typeName</i> parameter is ignored.

<P><B>Note:</B> When reading the value of an out parameter, you
must use the getter method whose Java type corresponds to the
parameter's registered SQL type.

@param paramIndex the first parameter is 1, the second is 2,...
@param sqlType a value from {@link java.sql.Types}
@param typeName the fully-qualified name of an SQL structured type
@exception SQLException if a database access error occurs
@see Types
@since 1.2"
      end

      operation 7712923 "registerOutParameter"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 3.0-----------------------------

Registers the OUT parameter named 
<code>parameterName</code> to the JDBC type 
<code>sqlType</code>.  All OUT parameters must be registered
before a stored procedure is executed.
<p>
The JDBC type specified by <code>sqlType</code> for an OUT
parameter determines the Java type that must be used
in the <code>get</code> method to read the value of that parameter.
<p>
If the JDBC type expected to be returned to this output parameter
is specific to this particular database, <code>sqlType</code>
should be <code>java.sql.Types.OTHER</code>.  The method 
{@link #getObject} retrieves the value.
@param parameterName the name of the parameter
@param sqlType the JDBC type code defined by <code>java.sql.Types</code>.
If the parameter is of JDBC type <code>NUMERIC</code>
or <code>DECIMAL</code>, the version of
<code>registerOutParameter</code> that accepts a scale value 
should be used.
@exception SQLException if a database access error occurs
@since 1.4
@see Types "
      end

      operation 7713051 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterName" explicit_type "String"
	  param in name "sqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the parameter named 
<code>parameterName</code> to be of JDBC type
<code>sqlType</code>.  This method must be called
before a stored procedure is executed.
<p>
The JDBC type specified by <code>sqlType</code> for an OUT
parameter determines the Java type that must be used
in the <code>get</code> method to read the value of that parameter.
<p>
This version of <code>registerOutParameter</code> should be
used when the parameter is of JDBC type <code>NUMERIC</code>
or <code>DECIMAL</code>.
@param parameterName the name of the parameter
@param sqlType SQL type code defined by <code>java.sql.Types</code>.
@param scale the desired number of digits to the right of the
decimal point.  It must be greater than or equal to zero.
@exception SQLException if a database access error occurs
@since 1.4
@see Types "
      end

      operation 7713179 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterName" explicit_type "String"
	  param in name "sqlType" explicit_type "int"
	  param in name "typeName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the designated output parameter.  This version of 
the method <code>registerOutParameter</code>
should be used for a user-named or REF output parameter.  Examples
of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and
named array types.

Before executing a stored procedure call, you must explicitly
call <code>registerOutParameter</code> to register the type from
<code>java.sql.Types</code> for each
OUT parameter.  For a user-named parameter the fully-qualified SQL
type name of the parameter should also be given, while a REF
parameter requires that the fully-qualified type name of the
referenced type be given.  A JDBC driver that does not need the
type code and type name information may ignore it.   To be portable,
however, applications should always provide these values for
user-named and REF parameters.

Although it is intended for user-named and REF parameters,
this method may be used to register a parameter of any JDBC type.
If the parameter does not have a user-named or REF type, the
typeName parameter is ignored.

<P><B>Note:</B> When reading the value of an out parameter, you
must use the <code>getXXX</code> method whose Java type XXX corresponds to the
parameter's registered SQL type.

@param parameterName the name of the parameter
@param sqlType a value from {@link java.sql.Types}
@param typeName the fully-qualified name of an SQL structured type
@exception SQLException if a database access error occurs
@see Types
@since 1.4"
      end

      operation 7713307 "getURL"
	public return_type class_ref 269467 // URL
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the designated JDBC <code>DATALINK</code> parameter as a
<code>java.net.URL</code> object.

@param parameterIndex the first parameter is 1, the second is 2,...
@return a <code>java.net.URL</code> object that represents the 
        JDBC <code>DATALINK</code> value used as the designated
        parameter
@exception SQLException if a database access error occurs,
           or if the URL being returned is
           not a valid URL on the Java platform
@see #setURL
@since 1.4"
      end

      operation 7713435 "setURL"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param inout name "val" type class_ref 269467 // URL
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.net.URL</code> object.
The driver converts this to an SQL <code>DATALINK</code> value when
it sends it to the database.

@param parameterName the name of the parameter
@param val the parameter value
@exception SQLException if a database access error occurs,
           or if a URL is malformed
@see #getURL
@since 1.4"
      end

      operation 7713563 "setNull"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to SQL <code>NULL</code>.

<P><B>Note:</B> You must specify the parameter's SQL type.

@param parameterName the name of the parameter
@param sqlType the SQL type code defined in <code>java.sql.Types</code>
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7713691 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>boolean</code> value.
The driver converts this
to an SQL <code>BIT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs
@see #getBoolean
@since 1.4"
      end

      operation 7713819 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>byte</code> value.  
The driver converts this
to an SQL <code>TINYINT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs
@see #getByte
@since 1.4"
      end

      operation 7713947 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>short</code> value. 
The driver converts this
to an SQL <code>SMALLINT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs
@see #getShort
@since 1.4"
      end

      operation 7714075 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>int</code> value.  
The driver converts this
to an SQL <code>INTEGER</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs
@see #getInt
@since 1.4"
      end

      operation 7714203 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>long</code> value. 
The driver converts this
to an SQL <code>BIGINT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs
@see #getLong
@since 1.4"
      end

      operation 7714331 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>float</code> value. 
The driver converts this
to an SQL <code>FLOAT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs
@see #getFloat
@since 1.4"
      end

      operation 7714459 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>double</code> value.  
The driver converts this
to an SQL <code>DOUBLE</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs
@see #getDouble
@since 1.4"
      end

      operation 7714587 "setBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param inout name "x" type class_ref 178459 // BigDecimal
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given
<code>java.math.BigDecimal</code> value.  
The driver converts this to an SQL <code>NUMERIC</code> value when
it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs
@see #getBigDecimal
@since 1.4"
      end

      operation 7714715 "setString"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param in name "x" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>String</code> value. 
The driver converts this
to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value
(depending on the argument's
size relative to the driver's limits on <code>VARCHAR</code> values)
when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs
@see #getString
@since 1.4"
      end

      operation 7714843 "setBytes"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java array of bytes.  
The driver converts this to an SQL <code>VARBINARY</code> or 
<code>LONGVARBINARY</code> (depending on the argument's size relative 
to the driver's limits on <code>VARBINARY</code> values) when it sends 
it to the database.

@param parameterName the name of the parameter
@param x the parameter value 
@exception SQLException if a database access error occurs
@see #getBytes
@since 1.4"
      end

      operation 7714971 "setDate"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param inout name "x" type class_ref 981147 // Date
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Date</code> value.  
The driver converts this
to an SQL <code>DATE</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs
@see #getDate
@since 1.4"
      end

      operation 7715099 "setTime"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param inout name "x" type class_ref 981275 // Time
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Time</code> value.  
The driver converts this
to an SQL <code>TIME</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs
@see #getTime
@since 1.4"
      end

      operation 7715227 "setTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param inout name "x" type class_ref 981403 // Timestamp
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Timestamp</code> value.  
The driver
converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the
database.

@param parameterName the name of the parameter
@param x the parameter value 
@exception SQLException if a database access error occurs
@see #getTimestamp
@since 1.4"
      end

      operation 7715355 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterName" explicit_type "String"
	  param inout name "x" type class_ref 179099 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have 
the specified number of bytes.
When a very large ASCII value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code>. Data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from ASCII to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterName the name of the parameter
@param x the Java input stream that contains the ASCII parameter value
@param length the number of bytes in the stream 
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7715483 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterName" explicit_type "String"
	  param inout name "x" type class_ref 179099 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have 
the specified number of bytes.
When a very large binary value is input to a <code>LONGVARBINARY</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the stream
as needed until end-of-file is reached.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterName the name of the parameter
@param x the java input stream which contains the binary parameter value
@param length the number of bytes in the stream 
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7715611 "setObject"
	public explicit_return_type "void"
	nparams 4
	  param in name "parameterName" explicit_type "String"
	  param inout name "x" explicit_type "Object"
	  param in name "targetSqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given object. The second
argument must be an object type; for integral values, the
<code>java.lang</code> equivalent objects should be used.

<p>The given Java object will be converted to the given targetSqlType
before being sent to the database.

If the object has a custom mapping (is of a class implementing the 
interface <code>SQLData</code>),
the JDBC driver should call the method <code>SQLData.writeSQL</code> to write it 
to the SQL data stream.
If, on the other hand, the object is of a class implementing
<code>Ref</code>, <code>Blob</code>, <code>Clob</code>, <code>Struct</code>, 
or <code>Array</code>, the driver should pass it to the database as a 
value of the corresponding SQL type.
<P>
Note that this method may be used to pass datatabase-
specific abstract data types. 

@param parameterName the name of the parameter
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in java.sql.Types) to be 
sent to the database. The scale argument may further qualify this type.
@param scale for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,
         this is the number of digits after the decimal point.  For all other
         types, this value will be ignored.
@exception SQLException if a database access error occurs
@see Types
@see #getObject
@since 1.4 "
      end

      operation 7715739 "setObject"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterName" explicit_type "String"
	  param inout name "x" explicit_type "Object"
	  param in name "targetSqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given object.
This method is like the method <code>setObject</code>
above, except that it assumes a scale of zero.

@param parameterName the name of the parameter
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in java.sql.Types) to be 
                     sent to the database
@exception SQLException if a database access error occurs
@see #getObject
@since 1.4"
      end

      operation 7715867 "setObject"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param inout name "x" explicit_type "Object"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given object. 
The second parameter must be of type <code>Object</code>; therefore, the
<code>java.lang</code> equivalent objects should be used for built-in types.

<p>The JDBC specification specifies a standard mapping from
Java <code>Object</code> types to SQL types.  The given argument 
will be converted to the corresponding SQL type before being
sent to the database.

<p>Note that this method may be used to pass datatabase-
specific abstract data types, by using a driver-specific Java
type.

If the object is of a class implementing the interface <code>SQLData</code>,
the JDBC driver should call the method <code>SQLData.writeSQL</code>
to write it to the SQL data stream.
If, on the other hand, the object is of a class implementing
<code>Ref</code>, <code>Blob</code>, <code>Clob</code>, <code>Struct</code>, 
or <code>Array</code>, the driver should pass it to the database as a 
value of the corresponding SQL type.
<P>
This method throws an exception if there is an ambiguity, for example, if the
object is of a class implementing more than one of the interfaces named above.

@param parameterName the name of the parameter
@param x the object containing the input parameter value 
@exception SQLException if a database access error occurs or if the given
           <code>Object</code> parameter is ambiguous
@see #getObject
@since 1.4"
      end

      operation 7715995 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterName" explicit_type "String"
	  param inout name "reader" type class_ref 364827 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Reader</code>
object, which is the given number of characters long.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterName the name of the parameter
@param reader the <code>java.io.Reader</code> object that
       contains the UNICODE data used as the designated parameter
@param length the number of characters in the stream 
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7716123 "setDate"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterName" explicit_type "String"
	  param inout name "x" type class_ref 981147 // Date
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Date</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,
which the driver then sends to the database.  With a
a <code>Calendar</code> object, the driver can calculate the date
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterName the name of the parameter
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the date
@exception SQLException if a database access error occurs
@see #getDate
@since 1.4"
      end

      operation 7716251 "setTime"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterName" explicit_type "String"
	  param inout name "x" type class_ref 981275 // Time
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Time</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,
which the driver then sends to the database.  With a
a <code>Calendar</code> object, the driver can calculate the time
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterName the name of the parameter
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the time
@exception SQLException if a database access error occurs
@see #getTime
@since 1.4"
      end

      operation 7716379 "setTimestamp"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterName" explicit_type "String"
	  param inout name "x" type class_ref 981403 // Timestamp
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,
which the driver then sends to the database.  With a
a <code>Calendar</code> object, the driver can calculate the timestamp
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterName the name of the parameter
@param x the parameter value 
@param cal the <code>Calendar</code> object the driver will use
           to construct the timestamp
@exception SQLException if a database access error occurs
@see #getTimestamp
@since 1.4"
      end

      operation 7716507 "setNull"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterName" explicit_type "String"
	  param in name "sqlType" explicit_type "int"
	  param in name "typeName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to SQL <code>NULL</code>.
This version of the method <code>setNull</code> should
be used for user-defined types and REF type parameters.  Examples
of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and 
named array types.

<P><B>Note:</B> To be portable, applications must give the
SQL type code and the fully-qualified SQL type name when specifying
a NULL user-defined or REF parameter.  In the case of a user-defined type 
the name is the type name of the parameter itself.  For a REF 
parameter, the name is the type name of the referenced type.  If 
a JDBC driver does not need the type code or type name information, 
it may ignore it.     

Although it is intended for user-defined and Ref parameters,
this method may be used to set a null parameter of any JDBC type.
If the parameter does not have a user-defined or REF type, the given
typeName is ignored.


@param parameterName the name of the parameter
@param sqlType a value from <code>java.sql.Types</code>
@param typeName the fully-qualified name of an SQL user-defined type;
       ignored if the parameter is not a user-defined type or 
       SQL <code>REF</code> value
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7716635 "getString"
	public explicit_return_type "String"
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>CHAR</code>, <code>VARCHAR</code>, 
or <code>LONGVARCHAR</code> parameter as a <code>String</code> in 
the Java programming language.
<p>
For the fixed-length type JDBC <code>CHAR</code>,
the <code>String</code> object
returned has exactly the same value the JDBC
<code>CHAR</code> value had in the
database, including any padding added by the database.
@param parameterName the name of the parameter
@return the parameter value. If the value is SQL <code>NULL</code>, the result 
is <code>null</code>.
@exception SQLException if a database access error occurs
@see #setString
@since 1.4"
      end

      operation 7716763 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>BIT</code> parameter as a
<code>boolean</code> in the Java programming language.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
is <code>false</code>.
@exception SQLException if a database access error occurs
@see #setBoolean
@since 1.4"
      end

      operation 7716891 "getByte"
	public explicit_return_type "byte"
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>TINYINT</code> parameter as a <code>byte</code> 
in the Java programming language.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
is <code>0</code>.
@exception SQLException if a database access error occurs
@see #setByte
@since 1.4"
      end

      operation 7717019 "getShort"
	public explicit_return_type "short"
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>SMALLINT</code> parameter as a <code>short</code>
in the Java programming language.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
is <code>0</code>.
@exception SQLException if a database access error occurs
@see #setShort
@since 1.4"
      end

      operation 7717147 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>INTEGER</code> parameter as an <code>int</code>
in the Java programming language.

@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, 
        the result is <code>0</code>.
@exception SQLException if a database access error occurs
@see #setInt
@since 1.4"
      end

      operation 7717275 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>BIGINT</code> parameter as a <code>long</code>
in the Java programming language.

@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, 
        the result is <code>0</code>.
@exception SQLException if a database access error occurs
@see #setLong
@since 1.4"
      end

      operation 7717403 "getFloat"
	public explicit_return_type "float"
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>FLOAT</code> parameter as a <code>float</code>
in the Java programming language.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, 
        the result is <code>0</code>.
@exception SQLException if a database access error occurs
@see #setFloat
@since 1.4"
      end

      operation 7717531 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>DOUBLE</code> parameter as a <code>double</code>
in the Java programming language.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, 
        the result is <code>0</code>.
@exception SQLException if a database access error occurs
@see #setDouble
@since 1.4"
      end

      operation 7717659 "getBytes"
	public explicit_return_type "byte"
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>BINARY</code> or <code>VARBINARY</code> 
parameter as an array of <code>byte</code> values in the Java
programming language.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, the result is 
 <code>null</code>.
@exception SQLException if a database access error occurs
@see #setBytes
@since 1.4"
      end

      operation 7717787 "getDate"
	public return_type class_ref 981147 // Date
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>DATE</code> parameter as a 
<code>java.sql.Date</code> object.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
is <code>null</code>.
@exception SQLException if a database access error occurs
@see #setDate
@since 1.4"
      end

      operation 7717915 "getTime"
	public return_type class_ref 981275 // Time
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>TIME</code> parameter as a 
<code>java.sql.Time</code> object.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
is <code>null</code>.
@exception SQLException if a database access error occurs
@see #setTime
@since 1.4"
      end

      operation 7718043 "getTimestamp"
	public return_type class_ref 981403 // Timestamp
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>TIMESTAMP</code> parameter as a 
<code>java.sql.Timestamp</code> object.
@param parameterName the name of the parameter
@return the parameter value.  If the value is SQL <code>NULL</code>, the result 
is <code>null</code>.
@exception SQLException if a database access error occurs
@see #setTimestamp
@since 1.4"
      end

      operation 7718171 "getObject"
	public explicit_return_type "Object"
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a parameter as an <code>Object</code> in the Java 
programming language. If the value is an SQL <code>NULL</code>, the 
driver returns a Java <code>null</code>.
<p>
This method returns a Java object whose type corresponds to the JDBC
type that was registered for this parameter using the method
<code>registerOutParameter</code>.  By registering the target JDBC
type as <code>java.sql.Types.OTHER</code>, this method can be used
to read database-specific abstract data types.
@param parameterName the name of the parameter
@return A <code>java.lang.Object</code> holding the OUT parameter value.
@exception SQLException if a database access error occurs
@see Types
@see #setObject
@since 1.4"
      end

      operation 7718299 "getBigDecimal"
	public return_type class_ref 178459 // BigDecimal
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>NUMERIC</code> parameter as a 
<code>java.math.BigDecimal</code> object with as many digits to the
right of the decimal point as the value contains.
@param parameterName the name of the parameter
@return the parameter value in full precision.  If the value is 
SQL <code>NULL</code>, the result is <code>null</code>. 
@exception SQLException if a database access error occurs
@see #setBigDecimal
@since 1.4"
      end

      operation 7718427 "getObject"
	public explicit_return_type "Object"
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param inout name "map" type class_ref 136603 // Map
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object representing the value of OUT parameter 
<code>i</code> and uses <code>map</code> for the custom
mapping of the parameter value.
<p>
This method returns a Java object whose type corresponds to the
JDBC type that was registered for this parameter using the method
<code>registerOutParameter</code>.  By registering the target
JDBC type as <code>java.sql.Types.OTHER</code>, this method can
be used to read database-specific abstract data types.  
@param parameterName the name of the parameter
@param map the mapping from SQL type names to Java classes
@return a <code>java.lang.Object</code> holding the OUT parameter value
@exception SQLException if a database access error occurs
@see #setObject
@since 1.4"
      end

      operation 7718555 "getRef"
	public return_type class_ref 981531 // Ref
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>REF(&lt;structured-type&gt;)</code>
parameter as a {@link Ref} object in the Java programming language.

@param parameterName the name of the parameter
@return the parameter value as a <code>Ref</code> object in the
        Java programming language.  If the value was SQL <code>NULL</code>, 
        the value <code>null</code> is returned.
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7718683 "getBlob"
	public return_type class_ref 980379 // Blob
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>BLOB</code> parameter as a
{@link Blob} object in the Java programming language.

@param parameterName the name of the parameter
@return the parameter value as a <code>Blob</code> object in the
        Java programming language.  If the value was SQL <code>NULL</code>, 
        the value <code>null</code> is returned.
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7718811 "getClob"
	public return_type class_ref 981659 // Clob
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>CLOB</code> parameter as a
<code>Clob</code> object in the Java programming language.
@param parameterName the name of the parameter
@return the parameter value as a <code>Clob</code> object in the
        Java programming language.  If the value was SQL <code>NULL</code>, 
        the value <code>null</code> is returned.
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7718939 "getArray"
	public return_type class_ref 979867 // Array
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>ARRAY</code> parameter as an
{@link Array} object in the Java programming language.

@param parameterName the name of the parameter
@return the parameter value as an <code>Array</code> object in
        Java programming language.  If the value was SQL <code>NULL</code>, 
        the value <code>null</code> is returned.
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7719067 "getDate"
	public return_type class_ref 981147 // Date
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>DATE</code> parameter as a 
<code>java.sql.Date</code> object, using
the given <code>Calendar</code> object
to construct the date.
With a <code>Calendar</code> object, the driver
can calculate the date taking into account a custom timezone and locale.
If no <code>Calendar</code> object is specified, the driver uses the
default timezone and locale.

@param parameterName the name of the parameter
@param cal the <code>Calendar</code> object the driver will use
           to construct the date
@return the parameter value.  If the value is SQL <code>NULL</code>, 
the result is <code>null</code>.
@exception SQLException if a database access error occurs
@see #setDate
@since 1.4"
      end

      operation 7719195 "getTime"
	public return_type class_ref 981275 // Time
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>TIME</code> parameter as a 
<code>java.sql.Time</code> object, using
the given <code>Calendar</code> object
to construct the time.
With a <code>Calendar</code> object, the driver
can calculate the time taking into account a custom timezone and locale.
If no <code>Calendar</code> object is specified, the driver uses the
default timezone and locale.

@param parameterName the name of the parameter
@param cal the <code>Calendar</code> object the driver will use
           to construct the time
@return the parameter value; if the value is SQL <code>NULL</code>, the result is 
<code>null</code>.
@exception SQLException if a database access error occurs
@see #setTime
@since 1.4"
      end

      operation 7719323 "getTimestamp"
	public return_type class_ref 981403 // Timestamp
	nparams 2
	  param in name "parameterName" explicit_type "String"
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>TIMESTAMP</code> parameter as a
<code>java.sql.Timestamp</code> object, using
the given <code>Calendar</code> object to construct
the <code>Timestamp</code> object.
With a <code>Calendar</code> object, the driver
can calculate the timestamp taking into account a custom timezone and locale.
If no <code>Calendar</code> object is specified, the driver uses the
default timezone and locale.


@param parameterName the name of the parameter
@param cal the <code>Calendar</code> object the driver will use
           to construct the timestamp
@return the parameter value.  If the value is SQL <code>NULL</code>, the result is 
<code>null</code>.
@exception SQLException if a database access error occurs
@see #setTimestamp
@since 1.4"
      end

      operation 7719451 "getURL"
	public return_type class_ref 269467 // URL
	nparams 1
	  param in name "parameterName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of a JDBC <code>DATALINK</code> parameter as a
<code>java.net.URL</code> object.

@param parameterName the name of the parameter
@return the parameter value as a <code>java.net.URL</code> object in the
Java programming language.  If the value was SQL <code>NULL</code>, the
value <code>null</code> is returned.
@exception SQLException if a database access error occurs,
           or if there is a problem with the URL
@see #setURL
@since 1.4"
      end
    end

    class 980635 "PreparedStatement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that represents a precompiled SQL statement.
<P>A SQL statement is precompiled and stored in a
<code>PreparedStatement</code> object. This object can then be used to
efficiently execute this statement multiple times. 

<P><B>Note:</B> The setter methods (<code>setShort</code>, <code>setString</code>,
and so on) for setting IN parameter values
must specify types that are compatible with the defined SQL type of
the input parameter. For instance, if the IN parameter has SQL type
<code>INTEGER</code>, then the method <code>setInt</code> should be used.

<p>If arbitrary parameter type conversions are required, the method
<code>setObject</code> should be used with a target SQL type.
<P>
In the following example of setting a parameter, <code>con</code> represents
an active connection:  
<PRE>
  PreparedStatement pstmt = con.prepareStatement(\"UPDATE EMPLOYEES
                                    SET SALARY = ? WHERE ID = ?\");
  pstmt.setBigDecimal(1, 153833.00)
  pstmt.setInt(2, 110592)
</PRE>

@see Connection#prepareStatement
@see ResultSet "
      classrelation 1907739 // <generalisation>
	relation 1907739 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1907739 // <generalisation>
	  b parent class_ref 980763 // Statement
      end

      operation 7704731 "executeQuery"
	public return_type class_ref 980123 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the SQL query in this <code>PreparedStatement</code> object
and returns the <code>ResultSet</code> object generated by the query.

@return a <code>ResultSet</code> object that contains the data produced by the
        query; never <code>null</code>
@exception SQLException if a database access error occurs or the SQL
           statement does not return a <code>ResultSet</code> object"
      end

      operation 7704859 "executeUpdate"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the SQL statement in this <code>PreparedStatement</code> object,
which must be an SQL <code>INSERT</code>, <code>UPDATE</code> or
<code>DELETE</code> statement; or an SQL statement that returns nothing, 
such as a DDL statement.

@return either (1) the row count for <code>INSERT</code>, <code>UPDATE</code>,
        or <code>DELETE</code> statements
        or (2) 0 for SQL statements that return nothing
@exception SQLException if a database access error occurs or the SQL
           statement returns a <code>ResultSet</code> object"
      end

      operation 7704987 "setNull"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to SQL <code>NULL</code>.

<P><B>Note:</B> You must specify the parameter's SQL type.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param sqlType the SQL type code defined in <code>java.sql.Types</code>
@exception SQLException if a database access error occurs"
      end

      operation 7705115 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>boolean</code> value.
The driver converts this
to an SQL <code>BIT</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 7705243 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>byte</code> value.  
The driver converts this
to an SQL <code>TINYINT</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 7705371 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>short</code> value. 
The driver converts this
to an SQL <code>SMALLINT</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 7705499 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>int</code> value.  
The driver converts this
to an SQL <code>INTEGER</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 7705627 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>long</code> value. 
The driver converts this
to an SQL <code>BIGINT</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 7705755 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>float</code> value. 
The driver converts this
to an SQL <code>FLOAT</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 7705883 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>double</code> value.  
The driver converts this
to an SQL <code>DOUBLE</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 7706011 "setBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 178459 // BigDecimal
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.math.BigDecimal</code> value.  
The driver converts this to an SQL <code>NUMERIC</code> value when
it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 7706139 "setString"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>String</code> value. 
The driver converts this
to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value
(depending on the argument's
size relative to the driver's limits on <code>VARCHAR</code> values)
when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 7706267 "setBytes"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java array of bytes.  The driver converts
this to an SQL <code>VARBINARY</code> or <code>LONGVARBINARY</code>
(depending on the argument's size relative to the driver's limits on
<code>VARBINARY</code> values) when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value 
@exception SQLException if a database access error occurs"
      end

      operation 7706395 "setDate"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 981147 // Date
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Date</code> value.  
The driver converts this
to an SQL <code>DATE</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 7706523 "setTime"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 981275 // Time
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Time</code> value.  
The driver converts this
to an SQL <code>TIME</code> value when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 7706651 "setTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 981403 // Timestamp
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Timestamp</code> value.  
The driver
converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the
database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value 
@exception SQLException if a database access error occurs"
      end

      operation 7706779 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 179099 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have 
the specified number of bytes.
When a very large ASCII value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code>. Data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from ASCII to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the Java input stream that contains the ASCII parameter value
@param length the number of bytes in the stream 
@exception SQLException if a database access error occurs"
      end

      operation 7706907 "setUnicodeStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 179099 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which 
will have the specified number of bytes. A Unicode character has
two bytes, with the first byte being the high byte, and the second
being the low byte.

When a very large Unicode value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the 
stream as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from Unicode to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...  
@param x a <code>java.io.InputStream</code> object that contains the
       Unicode parameter value as two-byte Unicode characters
@param length the number of bytes in the stream 
@exception SQLException if a database access error occurs
@deprecated"
      end

      operation 7707035 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 179099 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have 
the specified number of bytes.
When a very large binary value is input to a <code>LONGVARBINARY</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the 
stream as needed until end-of-file is reached.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the java input stream which contains the binary parameter value
@param length the number of bytes in the stream 
@exception SQLException if a database access error occurs"
      end

      operation 7707163 "clearParameters"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears the current parameter values immediately.
<P>In general, parameter values remain in force for repeated use of a
statement. Setting a parameter value automatically clears its
previous value.  However, in some cases it is useful to immediately
release the resources used by the current parameter values; this can
be done by calling the method <code>clearParameters</code>.

@exception SQLException if a database access error occurs"
      end

      operation 7707291 "setObject"
	public explicit_return_type "void"
	nparams 4
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" explicit_type "Object"
	  param in name "targetSqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------------------------------------------------------
 Advanced features:

<p>Sets the value of the designated parameter with the given object. The second
argument must be an object type; for integral values, the
<code>java.lang</code> equivalent objects should be used.

<p>The given Java object will be converted to the given targetSqlType
before being sent to the database.

If the object has a custom mapping (is of a class implementing the 
interface <code>SQLData</code>),
the JDBC driver should call the method <code>SQLData.writeSQL</code> to 
write it to the SQL data stream.
If, on the other hand, the object is of a class implementing
<code>Ref</code>, <code>Blob</code>, <code>Clob</code>, <code>Struct</code>, 
or <code>Array</code>, the driver should pass it to the database as a 
value of the corresponding SQL type.

<p>Note that this method may be used to pass database-specific
abstract data types. 

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in java.sql.Types) to be 
sent to the database. The scale argument may further qualify this type.
@param scale for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,
         this is the number of digits after the decimal point.  For all other
         types, this value will be ignored.
@exception SQLException if a database access error occurs
@see Types "
      end

      operation 7707419 "setObject"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" explicit_type "Object"
	  param in name "targetSqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given object.
This method is like the method <code>setObject</code>
above, except that it assumes a scale of zero.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in java.sql.Types) to be 
                     sent to the database
@exception SQLException if a database access error occurs"
      end

      operation 7707547 "setObject"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" explicit_type "Object"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Sets the value of the designated parameter using the given object. 
The second parameter must be of type <code>Object</code>; therefore, the
<code>java.lang</code> equivalent objects should be used for built-in types.

<p>The JDBC specification specifies a standard mapping from
Java <code>Object</code> types to SQL types.  The given argument 
will be converted to the corresponding SQL type before being
sent to the database.

<p>Note that this method may be used to pass datatabase-
specific abstract data types, by using a driver-specific Java
type.

If the object is of a class implementing the interface <code>SQLData</code>,
the JDBC driver should call the method <code>SQLData.writeSQL</code>
to write it to the SQL data stream.
If, on the other hand, the object is of a class implementing
<code>Ref</code>, <code>Blob</code>, <code>Clob</code>, <code>Struct</code>, 
or <code>Array</code>, the driver should pass it to the database as a 
value of the corresponding SQL type.
<P>
This method throws an exception if there is an ambiguity, for example, if the
object is of a class implementing more than one of the interfaces named above.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the object containing the input parameter value 
@exception SQLException if a database access error occurs or the type 
           of the given object is ambiguous"
      end

      operation 7707675 "execute"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the SQL statement in this <code>PreparedStatement</code> object,
which may be any kind of SQL statement.
Some prepared statements return multiple results; the <code>execute</code>
method handles these complex statements as well as the simpler
form of statements handled by the methods <code>executeQuery</code>
and <code>executeUpdate</code>.
<P>
The <code>execute</code> method returns a <code>boolean</code> to
indicate the form of the first result.  You must call either the method
<code>getResultSet</code> or <code>getUpdateCount</code>
to retrieve the result; you must call <code>getMoreResults</code> to
move to any subsequent result(s).

@return <code>true</code> if the first result is a <code>ResultSet</code>
        object; <code>false</code> if the first result is an update
        count or there is no result
@exception SQLException if a database access error occurs or an argument
           is supplied to this method
@see Statement#execute
@see Statement#getResultSet
@see Statement#getUpdateCount
@see Statement#getMoreResults
"
      end

      operation 7707803 "addBatch"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------

Adds a set of parameters to this <code>PreparedStatement</code>
object's batch of commands.

@exception SQLException if a database access error occurs
@see Statement#addBatch
@since 1.2"
      end

      operation 7707931 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 364827 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Reader</code>
object, which is the given number of characters long.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param reader the <code>java.io.Reader</code> object that contains the 
       Unicode data
@param length the number of characters in the stream 
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7708059 "setRef"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "x" type class_ref 981531 // Ref
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given
 <code>REF(&lt;structured-type&gt;)</code> value.
The driver converts this to an SQL <code>REF</code> value when it
sends it to the database.

@param i the first parameter is 1, the second is 2, ...
@param x an SQL <code>REF</code> value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7708187 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "x" type class_ref 980379 // Blob
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Blob</code> object.
The driver converts this to an SQL <code>BLOB</code> value when it
sends it to the database.

@param i the first parameter is 1, the second is 2, ...
@param x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7708315 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "x" type class_ref 981659 // Clob
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Clob</code> object.
The driver converts this to an SQL <code>CLOB</code> value when it
sends it to the database.

@param i the first parameter is 1, the second is 2, ...
@param x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7708443 "setArray"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "x" type class_ref 979867 // Array
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Array</code> object.
The driver converts this to an SQL <code>ARRAY</code> value when it
sends it to the database.

@param i the first parameter is 1, the second is 2, ...
@param x an <code>Array</code> object that maps an SQL <code>ARRAY</code> value
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7708571 "getMetaData"
	public return_type class_ref 981787 // ResultSetMetaData
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a <code>ResultSetMetaData</code> object that contains
information about the columns of the <code>ResultSet</code> object
that will be returned when this <code>PreparedStatement</code> object 
is executed.
<P>
Because a <code>PreparedStatement</code> object is precompiled, it is
possible to know about the <code>ResultSet</code> object that it will
return without having to execute it.  Consequently, it is possible
to invoke the method <code>getMetaData</code> on a
<code>PreparedStatement</code> object rather than waiting to execute
it and then invoking the <code>ResultSet.getMetaData</code> method
on the <code>ResultSet</code> object that is returned.
<P>
<B>NOTE:</B> Using this method may be expensive for some drivers due
to the lack of underlying DBMS support.

@return the description of a <code>ResultSet</code> object's columns or
        <code>null</code> if the driver cannot return a
        <code>ResultSetMetaData</code> object
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7708699 "setDate"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 981147 // Date
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Date</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,
which the driver then sends to the database.  With 
a <code>Calendar</code> object, the driver can calculate the date
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the date
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7708827 "setTime"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 981275 // Time
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Time</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,
which the driver then sends to the database.  With 
a <code>Calendar</code> object, the driver can calculate the time
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the time
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7708955 "setTimestamp"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 981403 // Timestamp
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,
which the driver then sends to the database.  With a
 <code>Calendar</code> object, the driver can calculate the timestamp
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value 
@param cal the <code>Calendar</code> object the driver will use
           to construct the timestamp
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7709083 "setNull"
	public explicit_return_type "void"
	nparams 3
	  param in name "paramIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	  param in name "typeName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to SQL <code>NULL</code>.
This version of the method <code>setNull</code> should
be used for user-defined types and REF type parameters.  Examples
of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and 
named array types.

<P><B>Note:</B> To be portable, applications must give the
SQL type code and the fully-qualified SQL type name when specifying
a NULL user-defined or REF parameter.  In the case of a user-defined type 
the name is the type name of the parameter itself.  For a REF 
parameter, the name is the type name of the referenced type.  If 
a JDBC driver does not need the type code or type name information, 
it may ignore it.     

Although it is intended for user-defined and Ref parameters,
this method may be used to set a null parameter of any JDBC type.
If the parameter does not have a user-defined or REF type, the given
typeName is ignored.


@param paramIndex the first parameter is 1, the second is 2, ...
@param sqlType a value from <code>java.sql.Types</code>
@param typeName the fully-qualified name of an SQL user-defined type;
 ignored if the parameter is not a user-defined type or REF 
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7709211 "setURL"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 269467 // URL
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------- JDBC 3.0 -----------------------------------

Sets the designated parameter to the given <code>java.net.URL</code> value. 
The driver converts this to an SQL <code>DATALINK</code> value
when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the <code>java.net.URL</code> object to be set
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7709339 "getParameterMetaData"
	public return_type class_ref 981915 // ParameterMetaData
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number, types and properties of this 
<code>PreparedStatement</code> object's parameters.

@return a <code>ParameterMetaData</code> object that contains information
        about the number, types and properties of this 
        <code>PreparedStatement</code> object's parameters
@exception SQLException if a database access error occurs
@see ParameterMetaData
@since 1.4"
      end
    end

    class 980763 "Statement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<P>The object used for executing a static SQL statement
and returning the results it produces.
<P>
By default, only one <code>ResultSet</code> object per <code>Statement</code>
object can be open at the same time. Therefore, if the reading of one 
<code>ResultSet</code> object is interleaved
with the reading of another, each must have been generated by
different <code>Statement</code> objects. All execution methods in the
<code>Statement</code> interface implicitly close a statment's current 
<code>ResultSet</code> object if an open one exists.

@see Connection#createStatement
@see ResultSet "
      operation 7699995 "executeQuery"
	public return_type class_ref 980123 // ResultSet
	nparams 1
	  param in name "sql" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement, which returns a single 
<code>ResultSet</code> object.

@param sql an SQL statement to be sent to the database, typically a 
       static SQL <code>SELECT</code> statement
@return a <code>ResultSet</code> object that contains the data produced 
        by the given query; never <code>null</code> 
@exception SQLException if a database access error occurs or the given
           SQL statement produces anything other than a single
           <code>ResultSet</code> object"
      end

      operation 7700123 "executeUpdate"
	public explicit_return_type "int"
	nparams 1
	  param in name "sql" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement, which may be an <code>INSERT</code>, 
<code>UPDATE</code>, or <code>DELETE</code> statement or an
SQL statement that returns nothing, such as an SQL DDL statement.

@param sql an SQL <code>INSERT</code>, <code>UPDATE</code> or
<code>DELETE</code> statement or an SQL statement that returns nothing
@return either the row count for <code>INSERT</code>, <code>UPDATE</code>
or <code>DELETE</code> statements, or <code>0</code> for SQL statements 
that return nothing
@exception SQLException if a database access error occurs or the given
           SQL statement produces a <code>ResultSet</code> object"
      end

      operation 7700251 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases this <code>Statement</code> object's database 
and JDBC resources immediately instead of waiting for
this to happen when it is automatically closed.
It is generally good practice to release resources as soon as
you are finished with them to avoid tying up database
resources.
<P>
Calling the method <code>close</code> on a <code>Statement</code>
object that is already closed has no effect.
<P>
<B>Note:</B> A <code>Statement</code> object is automatically closed 
when it is garbage collected. When a <code>Statement</code> object is 
closed, its current <code>ResultSet</code> object, if one exists, is 
also closed.  

@exception SQLException if a database access error occurs"
      end

      operation 7700379 "getMaxFieldSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------------------------------------------------------

Retrieves the maximum number of bytes that can be
returned for character and binary column values in a <code>ResultSet</code> 
object produced by this <code>Statement</code> object.
This limit applies only to <code>BINARY</code>,
<code>VARBINARY</code>, <code>LONGVARBINARY</code>, <code>CHAR</code>,
<code>VARCHAR</code>, and <code>LONGVARCHAR</code>
columns.  If the limit is exceeded, the excess data is silently
discarded.

@return the current column size limit for columns storing character and 
        binary values; zero means there is no limit 
@exception SQLException if a database access error occurs
@see #setMaxFieldSize"
      end

      operation 7700507 "setMaxFieldSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the limit for the maximum number of bytes in a <code>ResultSet</code>
column storing character or binary values to
the given number of bytes.  This limit applies
only to <code>BINARY</code>, <code>VARBINARY</code>,
<code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>, and
<code>LONGVARCHAR</code> fields.  If the limit is exceeded, the excess data
is silently discarded. For maximum portability, use values
greater than 256.

@param max the new column size limit in bytes; zero means there is no limit 
@exception SQLException if a database access error occurs 
           or the condition max >= 0 is not satisfied
@see #getMaxFieldSize"
      end

      operation 7700635 "getMaxRows"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of rows that a
<code>ResultSet</code> object produced by this
<code>Statement</code> object can contain.  If this limit is exceeded, 
the excess rows are silently dropped.

@return the current maximum number of rows for a <code>ResultSet</code>
        object produced by this <code>Statement</code> object; 
        zero means there is no limit
@exception SQLException if a database access error occurs
@see #setMaxRows"
      end

      operation 7700763 "setMaxRows"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the limit for the maximum number of rows that any
<code>ResultSet</code> object can contain to the given number.
If the limit is exceeded, the excess
rows are silently dropped.

@param max the new max rows limit; zero means there is no limit 
@exception SQLException if a database access error occurs
           or the condition max >= 0 is not satisfied
@see #getMaxRows"
      end

      operation 7700891 "setEscapeProcessing"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets escape processing on or off.
If escape scanning is on (the default), the driver will do
escape substitution before sending the SQL statement to the database.

Note: Since prepared statements have usually been parsed prior
to making this call, disabling escape processing for 
<code>PreparedStatements</code> objects will have no effect.

@param enable <code>true</code> to enable escape processing;
      <code>false</code> to disable it
@exception SQLException if a database access error occurs"
      end

      operation 7701019 "getQueryTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of seconds the driver will
wait for a <code>Statement</code> object to execute. If the limit is exceeded, a
<code>SQLException</code> is thrown.

@return the current query timeout limit in seconds; zero means there is 
        no limit 
@exception SQLException if a database access error occurs
@see #setQueryTimeout"
      end

      operation 7701147 "setQueryTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the number of seconds the driver will wait for a 
<code>Statement</code> object to execute to the given number of seconds.
If the limit is exceeded, an <code>SQLException</code> is thrown.

@param seconds the new query timeout limit in seconds; zero means 
       there is no limit
@exception SQLException if a database access error occurs
           or the condition seconds >= 0 is not satisfied
@see #getQueryTimeout"
      end

      operation 7701275 "cancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels this <code>Statement</code> object if both the DBMS and
driver support aborting an SQL statement.
This method can be used by one thread to cancel a statement that
is being executed by another thread.

@exception SQLException if a database access error occurs"
      end

      operation 7701403 "getWarnings"
	public return_type class_ref 980891 // SQLWarning
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the first warning reported by calls on this <code>Statement</code> object.
Subsequent <code>Statement</code> object warnings will be chained to this
<code>SQLWarning</code> object.

<p>The warning chain is automatically cleared each time
a statement is (re)executed. This method may not be called on a closed
<code>Statement</code> object; doing so will cause an <code>SQLException</code>
to be thrown.

<P><B>Note:</B> If you are processing a <code>ResultSet</code> object, any
warnings associated with reads on that <code>ResultSet</code> object 
will be chained on it rather than on the <code>Statement</code>
object that produced it.

@return the first <code>SQLWarning</code> object or <code>null</code> 
        if there are no warnings
@exception SQLException if a database access error occurs or this 
           method is called on a closed statement"
      end

      operation 7701531 "clearWarnings"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears all the warnings reported on this <code>Statement</code>
object. After a call to this method,
the method <code>getWarnings</code> will return 
<code>null</code> until a new warning is reported for this
<code>Statement</code> object.  

@exception SQLException if a database access error occurs"
      end

      operation 7701659 "setCursorName"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the SQL cursor name to the given <code>String</code>, which 
will be used by subsequent <code>Statement</code> object 
<code>execute</code> methods. This name can then be
used in SQL positioned update or delete statements to identify the
current row in the <code>ResultSet</code> object generated by this 
statement.  If the database does not support positioned update/delete, 
this method is a noop.  To insure that a cursor has the proper isolation
level to support updates, the cursor's <code>SELECT</code> statement 
should have the form <code>SELECT FOR UPDATE</code>.  If 
<code>FOR UPDATE</code> is not present, positioned updates may fail.

<P><B>Note:</B> By definition, the execution of positioned updates and
deletes must be done by a different <code>Statement</code> object than 
the one that generated the <code>ResultSet</code> object being used for 
positioning. Also, cursor names must be unique within a connection.

@param name the new cursor name, which must be unique within
            a connection
@exception SQLException if a database access error occurs"
      end

      operation 7701787 "execute"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "sql" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------- Multiple Results --------------------------

Executes the given SQL statement, which may return multiple results.
In some (uncommon) situations, a single SQL statement may return
multiple result sets and/or update counts.  Normally you can ignore
this unless you are (1) executing a stored procedure that you know may
return multiple results or (2) you are dynamically executing an
unknown SQL string.  
<P>
The <code>execute</code> method executes an SQL statement and indicates the
form of the first result.  You must then use the methods 
<code>getResultSet</code> or <code>getUpdateCount</code>
to retrieve the result, and <code>getMoreResults</code> to
move to any subsequent result(s).

@param sql any SQL statement
@return <code>true</code> if the first result is a <code>ResultSet</code> 
        object; <code>false</code> if it is an update count or there are 
        no results
@exception SQLException if a database access error occurs
@see #getResultSet
@see #getUpdateCount
@see #getMoreResults "
      end

      operation 7701915 "getResultSet"
	public return_type class_ref 980123 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieves the current result as a <code>ResultSet</code> object. 
 This method should be called only once per result.

@return the current result as a <code>ResultSet</code> object or
<code>null</code> if the result is an update count or there are no more results
@exception SQLException if a database access error occurs
@see #execute "
      end

      operation 7702043 "getUpdateCount"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieves the current result as an update count;
 if the result is a <code>ResultSet</code> object or there are no more results, -1
 is returned. This method should be called only once per result.

@return the current result as an update count; -1 if the current result is a
<code>ResultSet</code> object or there are no more results
@exception SQLException if a database access error occurs
@see #execute "
      end

      operation 7702171 "getMoreResults"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves to this <code>Statement</code> object's next result, returns
<code>true</code> if it is a <code>ResultSet</code> object, and
implicitly closes any current <code>ResultSet</code>
object(s) obtained with the method <code>getResultSet</code>.

<P>There are no more results when the following is true:
<PRE>
    // stmt is a Statement object
    ((stmt.getMoreResults() == false) && (stmt.getUpdateCount() == -1))
</PRE>

@return <code>true</code> if the next result is a <code>ResultSet</code>
        object; <code>false</code> if it is an update count or there are 
        no more results
@exception SQLException if a database access error occurs
@see #execute "
      end

      operation 7702299 "setFetchDirection"
	public explicit_return_type "void"
	nparams 1
	  param in name "direction" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------

Gives the driver a hint as to the direction in which
rows will be processed in <code>ResultSet</code>
objects created using this <code>Statement</code> object.  The 
default value is <code>ResultSet.FETCH_FORWARD</code>.
<P>
Note that this method sets the default fetch direction for 
result sets generated by this <code>Statement</code> object.
Each result set has its own methods for getting and setting
its own fetch direction.

@param direction the initial direction for processing rows
@exception SQLException if a database access error occurs
or the given direction
is not one of <code>ResultSet.FETCH_FORWARD</code>,
<code>ResultSet.FETCH_REVERSE</code>, or <code>ResultSet.FETCH_UNKNOWN</code>
@since 1.2
@see #getFetchDirection"
      end

      operation 7702427 "getFetchDirection"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the direction for fetching rows from
database tables that is the default for result sets
generated from this <code>Statement</code> object.
If this <code>Statement</code> object has not set
a fetch direction by calling the method <code>setFetchDirection</code>,
the return value is implementation-specific.

@return the default fetch direction for result sets generated
         from this <code>Statement</code> object
@exception SQLException if a database access error occurs
@since 1.2
@see #setFetchDirection"
      end

      operation 7702555 "setFetchSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "rows" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gives the JDBC driver a hint as to the number of rows that should 
be fetched from the database when more rows are needed.  The number 
of rows specified affects only result sets created using this 
statement. If the value specified is zero, then the hint is ignored.
The default value is zero.

@param rows the number of rows to fetch
@exception SQLException if a database access error occurs, or the
       condition 0 <= <code>rows</code> <= <code>this.getMaxRows()</code> 
       is not satisfied.
@since 1.2
@see #getFetchSize"
      end

      operation 7702683 "getFetchSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of result set rows that is the default 
fetch size for <code>ResultSet</code> objects
generated from this <code>Statement</code> object.
If this <code>Statement</code> object has not set
a fetch size by calling the method <code>setFetchSize</code>,
the return value is implementation-specific.

@return the default fetch size for result sets generated
         from this <code>Statement</code> object
@exception SQLException if a database access error occurs
@since 1.2
@see #setFetchSize"
      end

      operation 7702811 "getResultSetConcurrency"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the result set concurrency for <code>ResultSet</code> objects
generated by this <code>Statement</code> object.

@return either <code>ResultSet.CONCUR_READ_ONLY</code> or
<code>ResultSet.CONCUR_UPDATABLE</code>
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7702939 "getResultSetType"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the result set type for <code>ResultSet</code> objects
generated by this <code>Statement</code> object.

@return one of <code>ResultSet.TYPE_FORWARD_ONLY</code>,
<code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or	
<code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7703067 "addBatch"
	public explicit_return_type "void"
	nparams 1
	  param in name "sql" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the given SQL command to the current list of commmands for this
<code>Statement</code> object. The commands in this list can be
executed as a batch by calling the method <code>executeBatch</code>.
<P>
<B>NOTE:</B>  This method is optional.

@param sql typically this is a static SQL <code>INSERT</code> or 
<code>UPDATE</code> statement
@exception SQLException if a database access error occurs, or the
driver does not support batch updates
@see #executeBatch
@since 1.2"
      end

      operation 7703195 "clearBatch"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empties this <code>Statement</code> object's current list of 
SQL commands.
<P>
<B>NOTE:</B>  This method is optional.

@exception SQLException if a database access error occurs or the
driver does not support batch updates
@see #addBatch
@since 1.2"
      end

      operation 7703323 "executeBatch"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a batch of commands to the database for execution and
if all commands execute successfully, returns an array of update counts.
The <code>int</code> elements of the array that is returned are ordered
to correspond to the commands in the batch, which are ordered 
according to the order in which they were added to the batch.
The elements in the array returned by the method <code>executeBatch</code>
may be one of the following:
<OL>
<LI>A number greater than or equal to zero -- indicates that the
command was processed successfully and is an update count giving the
number of rows in the database that were affected by the command's
execution
<LI>A value of <code>SUCCESS_NO_INFO</code> -- indicates that the command was
processed successfully but that the number of rows affected is
unknown
<P> 
If one of the commands in a batch update fails to execute properly,
this method throws a <code>BatchUpdateException</code>, and a JDBC
driver may or may not continue to process the remaining commands in
the batch.  However, the driver's behavior must be consistent with a
particular DBMS, either always continuing to process commands or never
continuing to process commands.  If the driver continues processing
after a failure, the array returned by the method
<code>BatchUpdateException.getUpdateCounts</code>
will contain as many elements as there are commands in the batch, and
at least one of the elements will be the following:
<P> 
<LI>A value of <code>EXECUTE_FAILED</code> -- indicates that the command failed
to execute successfully and occurs only if a driver continues to
process commands after a command fails
</OL>
<P>
A driver is not required to implement this method.
The possible implementations and return values have been modified in
the Java 2 SDK, Standard Edition, version 1.3 to
accommodate the option of continuing to proccess commands in a batch
update after a <code>BatchUpdateException</code> obejct has been thrown.

@return an array of update counts containing one element for each
command in the batch.  The elements of the array are ordered according 
to the order in which commands were added to the batch.
@exception SQLException if a database access error occurs or the
driver does not support batch statements. Throws {@link BatchUpdateException}
(a subclass of <code>SQLException</code>) if one of the commands sent to the
database fails to execute properly or attempts to return a result set.
@since 1.3"
      end

      operation 7703451 "getConnection"
	public return_type class_ref 981019 // Connection
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>Connection</code> object
that produced this <code>Statement</code> object.
@return the connection that produced this statement
@exception SQLException if a database access error occurs
@since 1.2"
      end

      attribute 2866203 "CLOSE_CURRENT_RESULT"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "--------------------------JDBC 3.0-----------------------------
 
The constant indicating that the current <code>ResultSet</code> object 
should be closed when calling <code>getMoreResults</code>.

@since 1.4
"
      end

      attribute 2866331 "KEEP_CURRENT_RESULT"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that the current <code>ResultSet</code> object
should not be closed when calling <code>getMoreResults</code>.

@since 1.4
"
      end

      attribute 2866459 "CLOSE_ALL_RESULTS"
	public explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that all <code>ResultSet</code> objects that
have previously been kept open should be closed when calling
<code>getMoreResults</code>.

@since 1.4
"
      end

      attribute 2866587 "SUCCESS_NO_INFO"
	public explicit_type "int"
	init_value "=  -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that a batch statement executed successfully
but that no count of the number of rows it affected is available.

@since 1.4
"
      end

      attribute 2866715 "EXECUTE_FAILED"
	public explicit_type "int"
	init_value "=  -3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that an error occured while executing a
batch statement.

@since 1.4
"
      end

      attribute 2866843 "RETURN_GENERATED_KEYS"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that generated keys should be made 
available for retrieval.

@since 1.4
"
      end

      attribute 2866971 "NO_GENERATED_KEYS"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that generated keys should not be made 
available for retrieval.

@since 1.4
"
      end

      operation 7703579 "getMoreResults"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "current" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves to this <code>Statement</code> object's next result, deals with
any current <code>ResultSet</code> object(s) according  to the instructions
specified by the given flag, and returns
<code>true</code> if the next result is a <code>ResultSet</code> object.

<P>There are no more results when the following is true:
<PRE>
    // stmt is a Statement object
    ((stmt.getMoreResults() == false) && (stmt.getUpdateCount() == -1))
</PRE>

@param current one of the following <code>Statement</code>
       constants indicating what should happen to current 
       <code>ResultSet</code> objects obtained using the method
       <code>getResultSet</code>:
       <code>Statement.CLOSE_CURRENT_RESULT</code>, 
       <code>Statement.KEEP_CURRENT_RESULT</code>, or
       <code>Statement.CLOSE_ALL_RESULTS</code>
@return <code>true</code> if the next result is a <code>ResultSet</code> 
        object; <code>false</code> if it is an update count or there are no 
        more results
@exception SQLException if a database access error occurs or the argument
        supplied is not one of the following:
       <code>Statement.CLOSE_CURRENT_RESULT</code>, 
       <code>Statement.KEEP_CURRENT_RESULT</code>, or
       <code>Statement.CLOSE_ALL_RESULTS</code>
@since 1.4
@see #execute"
      end

      operation 7703707 "getGeneratedKeys"
	public return_type class_ref 980123 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves any auto-generated keys created as a result of executing this
<code>Statement</code> object. If this <code>Statement</code> object did 
not generate any keys, an empty <code>ResultSet</code>
object is returned.

@return a <code>ResultSet</code> object containing the auto-generated key(s) 
        generated by the execution of this <code>Statement</code> object
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7703835 "executeUpdate"
	public explicit_return_type "int"
	nparams 2
	  param in name "sql" explicit_type "String"
	  param in name "autoGeneratedKeys" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement and signals the driver with the
given flag about whether the
auto-generated keys produced by this <code>Statement</code> object
should be made available for retrieval. 

@param sql must be an SQL <code>INSERT</code>, <code>UPDATE</code> or
       <code>DELETE</code> statement or an SQL statement that 
       returns nothing
@param autoGeneratedKeys a flag indicating whether auto-generated keys
       should be made available for retrieval;
        one of the following constants:
        <code>Statement.RETURN_GENERATED_KEYS</code>
        <code>Statement.NO_GENERATED_KEYS</code>
@return either the row count for <code>INSERT</code>, <code>UPDATE</code>
        or <code>DELETE</code> statements, or <code>0</code> for SQL 
        statements that return nothing
@exception SQLException if a database access error occurs, the given
           SQL statement returns a <code>ResultSet</code> object, or
           the given constant is not one of those allowed
@since 1.4"
      end

      operation 7703963 "executeUpdate"
	public explicit_return_type "int"
	nparams 2
	  param in name "sql" explicit_type "String"
	  param in name "columnIndexes" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement and signals the driver that the
auto-generated keys indicated in the given array should be made available
for retrieval.  The driver will ignore the array if the SQL statement
is not an <code>INSERT</code> statement.

@param sql an SQL <code>INSERT</code>, <code>UPDATE</code> or
       <code>DELETE</code> statement or an SQL statement that returns nothing,
       such as an SQL DDL statement
@param columnIndexes an array of column indexes indicating the columns
       that should be returned from the inserted row
@return either the row count for <code>INSERT</code>, <code>UPDATE</code>,
        or <code>DELETE</code> statements, or 0 for SQL statements 
        that return nothing
@exception SQLException if a database access error occurs, the SQL
           statement returns a <code>ResultSet</code> object, or the
           second argument supplied to this method is not an <code>int</code> array
           whose elements are valid column indexes 
@since 1.4"
      end

      operation 7704091 "executeUpdate"
	public explicit_return_type "int"
	nparams 2
	  param in name "sql" explicit_type "String"
	  param in name "columnNames" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement and signals the driver that the
auto-generated keys indicated in the given array should be made available
for retrieval.  The driver will ignore the array if the SQL statement
is not an <code>INSERT</code> statement.

@param sql an SQL <code>INSERT</code>, <code>UPDATE</code> or
       <code>DELETE</code> statement or an SQL statement that returns nothing
@param columnNames an array of the names of the columns that should be 
       returned from the inserted row
@return either the row count for <code>INSERT</code>, <code>UPDATE</code>,
        or <code>DELETE</code> statements, or 0 for SQL statements 
        that return nothing
@exception SQLException if a database access error occurs, the SQL
           statement returns a <code>ResultSet</code> object, or the
           second argument supplied to this method is not a <code>String</code> array
           whose elements are valid column names

@since 1.4"
      end

      operation 7704219 "execute"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "sql" explicit_type "String"
	  param in name "autoGeneratedKeys" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement, which may return multiple results,
and signals the driver that any
auto-generated keys should be made available
for retrieval.  The driver will ignore this signal if the SQL statement
is not an <code>INSERT</code> statement.
<P>
In some (uncommon) situations, a single SQL statement may return
multiple result sets and/or update counts.  Normally you can ignore
this unless you are (1) executing a stored procedure that you know may
return multiple results or (2) you are dynamically executing an
unknown SQL string.  
<P>
The <code>execute</code> method executes an SQL statement and indicates the
form of the first result.  You must then use the methods 
<code>getResultSet</code> or <code>getUpdateCount</code>
to retrieve the result, and <code>getMoreResults</code> to
move to any subsequent result(s).

@param sql any SQL statement
@param autoGeneratedKeys a constant indicating whether auto-generated 
       keys should be made available for retrieval using the method
       <code>getGeneratedKeys</code>; one of the following constants:
       <code>Statement.RETURN_GENERATED_KEYS</code> or
	      <code>Statement.NO_GENERATED_KEYS</code>
@return <code>true</code> if the first result is a <code>ResultSet</code>
        object; <code>false</code> if it is an update count or there are
        no results
@exception SQLException if a database access error occurs or the second 
        parameter supplied to this method is not 
        <code>Statement.RETURN_GENERATED_KEYS</code> or
        <code>Statement.NO_GENERATED_KEYS</code>.
@see #getResultSet
@see #getUpdateCount
@see #getMoreResults
@see #getGeneratedKeys

@since 1.4 "
      end

      operation 7704347 "execute"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "sql" explicit_type "String"
	  param in name "columnIndexes" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement, which may return multiple results,
and signals the driver that the
auto-generated keys indicated in the given array should be made available
for retrieval.  This array contains the indexes of the columns in the 
target table that contain the auto-generated keys that should be made
available. The driver will ignore the array if the given SQL statement
is not an <code>INSERT</code> statement.
<P>
Under some (uncommon) situations, a single SQL statement may return
multiple result sets and/or update counts.  Normally you can ignore
this unless you are (1) executing a stored procedure that you know may
return multiple results or (2) you are dynamically executing an
unknown SQL string.  
<P>
The <code>execute</code> method executes an SQL statement and indicates the
form of the first result.  You must then use the methods 
<code>getResultSet</code> or <code>getUpdateCount</code>
to retrieve the result, and <code>getMoreResults</code> to
move to any subsequent result(s).

@param sql any SQL statement
@param columnIndexes an array of the indexes of the columns in the 
       inserted row that should be  made available for retrieval by a
       call to the method <code>getGeneratedKeys</code>
@return <code>true</code> if the first result is a <code>ResultSet</code> 
        object; <code>false</code> if it is an update count or there 
        are no results
@exception SQLException if a database access error occurs or the 
           elements in the <code>int</code> array passed to this method
           are not valid column indexes
@see #getResultSet
@see #getUpdateCount
@see #getMoreResults

@since 1.4"
      end

      operation 7704475 "execute"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "sql" explicit_type "String"
	  param in name "columnNames" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given SQL statement, which may return multiple results,
and signals the driver that the
auto-generated keys indicated in the given array should be made available
for retrieval. This array contains the names of the columns in the 
target table that contain the auto-generated keys that should be made
available. The driver will ignore the array if the given SQL statement
is not an <code>INSERT</code> statement.
<P>
In some (uncommon) situations, a single SQL statement may return
multiple result sets and/or update counts.  Normally you can ignore
this unless you are (1) executing a stored procedure that you know may
return multiple results or (2) you are dynamically executing an
unknown SQL string.  
<P>
The <code>execute</code> method executes an SQL statement and indicates the
form of the first result.  You must then use the methods 
<code>getResultSet</code> or <code>getUpdateCount</code>
to retrieve the result, and <code>getMoreResults</code> to
move to any subsequent result(s).

@param sql any SQL statement
@param columnNames an array of the names of the columns in the inserted
       row that should be made available for retrieval by a call to the
       method <code>getGeneratedKeys</code>
@return <code>true</code> if the next result is a <code>ResultSet</code> 
        object; <code>false</code> if it is an update count or there 
        are no more results
@exception SQLException if a database access error occurs or the 
         elements of the <code>String</code> array passed to this
         method are not valid column names
@see #getResultSet
@see #getUpdateCount
@see #getMoreResults
@see #getGeneratedKeys

@since 1.4 "
      end

      operation 7704603 "getResultSetHoldability"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the result set holdability for <code>ResultSet</code> objects
generated by this <code>Statement</code> object.

@return either <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
        <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@exception SQLException if a database access error occurs

@since 1.4"
      end

      classrelation 2709787 // <dependency>
	relation 2709787 -_->
	  a default
	    classrelation_ref 2709787 // <dependency>
	  b parent class_ref 980123 // ResultSet
      end
    end

    class 980891 "SQLWarning"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<P>An exception that provides information on  database access
warnings. Warnings are silently chained to the object whose method
caused it to be reported.  
<P>
Warnings may be retrieved from <code>Connection</code>, <code>Statement</code>,
and <code>ResultSet</code> objects.  Trying to retrieve a warning on a
connection after it has been closed will cause an exception to be thrown.
Similarly, trying to retrieve a warning on a statement after it has been
closed or on a result set after it has been closed will cause 
an exception to be thrown. Note that closing a statement also 
closes a result set that it might have produced.

@see Connection#getWarnings
@see Statement#getWarnings
@see ResultSet#getWarnings "
      classrelation 1907995 // <generalisation>
	relation 1907995 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1907995 // <generalisation>
	  b parent class_ref 979995 // SQLException
      end

      operation 7746715 "SQLWarning"
	public explicit_return_type ""
	nparams 3
	  param in name "reason" explicit_type "String"
	  param in name "SQLstate" explicit_type "String"
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a fully-specified <code>SQLWarning</code> object
initialized with the given values.

@param reason a description of the warning 
@param SQLstate an XOPEN code identifying the warning
@param vendorCode a database vendor-specific warning code"
      end

      operation 7746843 "SQLWarning"
	public explicit_return_type ""
	nparams 2
	  param in name "reason" explicit_type "String"
	  param in name "SQLstate" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>SQLWarning</code> object
with the given reason and SQLState;
the vendorCode defaults to 0.

@param reason a description of the warning 
@param SQLstate an XOPEN code identifying the warning"
      end

      operation 7746971 "SQLWarning"
	public explicit_return_type ""
	nparams 1
	  param in name "reason" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>SQLWarning</code> object
with the given value for a reason; SQLstate defaults to
<code>null</code>, and vendorCode defaults to 0.

@param reason a description of the warning "
      end

      operation 7747099 "SQLWarning"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a default <code>SQLWarning</code> object.
The reason defaults to <code>null</code>, SQLState
defaults to <code>null</code>, and vendorCode defaults to 0.
"
      end

      operation 7747227 "getNextWarning"
	public return_type class_ref 980891 // SQLWarning
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the warning chained to this <code>SQLWarning</code> object.

@return the next <code>SQLException</code> in the chain; <code>null</code> if none
@see #setNextWarning"
      end

      operation 7747355 "setNextWarning"
	public explicit_return_type "void"
	nparams 1
	  param inout name "w" type class_ref 980891 // SQLWarning
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an <code>SQLWarning</code> object to the end of the chain.

@param w the new end of the <code>SQLException</code> chain
@see #getNextWarning"
      end
    end

    class 981019 "Connection"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<P>A connection (session) with a specific
database. SQL statements are executed and results are returned
within the context of a connection.
<P>
A <code>Connection</code> object's database is able to provide information
describing its tables, its supported SQL grammar, its stored
procedures, the capabilities of this connection, and so on. This
information is obtained with the <code>getMetaData</code> method.

<P><B>Note:</B> By default a <code>Connection</code> object is in
auto-commit mode, which means that it automatically commits changes 
after executing each statement. If auto-commit mode has been
disabled, the method <code>commit</code> must be called explicitly in
order to commit changes; otherwise, database changes will not be saved.
<P>
A new <code>Connection</code> object created using the JDBC 2.1 core API
has an initially empty type map associated with it. A user may enter a
custom mapping for a UDT in this type map.
When a UDT is retrieved from a data source with the
method <code>ResultSet.getObject</code>, the <code>getObject</code> method
will check the connection's type map to see if there is an entry for that
UDT.  If so, the <code>getObject</code> method will map the UDT to the
class indicated.  If there is no entry, the UDT will be mapped using the
standard mapping.
<p>
A user may create a new type map, which is a <code>java.util.Map</code>
object, make an entry in it, and pass it to the <code>java.sql</code>
methods that can perform custom mapping.  In this case, the method
will use the given type map instead of the one associated with
the connection.
<p>
For example, the following code fragment specifies that the SQL
type <code>ATHLETES</code> will be mapped to the class
<code>Athletes</code> in the Java programming language.
The code fragment retrieves the type map for the <code>Connection
</code> object <code>con</code>, inserts the entry into it, and then sets
the type map with the new entry as the connection's type map.
<pre>
     java.util.Map map = con.getTypeMap();
     map.put(\"mySchemaName.ATHLETES\", Class.forName(\"Athletes\"));
     con.setTypeMap(map);
</pre>

@see DriverManager#getConnection
@see Statement 
@see ResultSet
@see DatabaseMetaData"
      operation 7720987 "createStatement"
	public return_type class_ref 980763 // Statement
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>Statement</code> object for sending
SQL statements to the database.
SQL statements without parameters are normally
executed using <code>Statement</code> objects. If the same SQL statement 
is executed many times, it may be more efficient to use a 
<code>PreparedStatement</code> object.
<P>
Result sets created using the returned <code>Statement</code>
object will by default be type <code>TYPE_FORWARD_ONLY</code>
and have a concurrency level of <code>CONCUR_READ_ONLY</code>.

@return a new default <code>Statement</code> object 
@exception SQLException if a database access error occurs"
      end

      operation 7721115 "prepareStatement"
	public return_type class_ref 980635 // PreparedStatement
	nparams 1
	  param in name "sql" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PreparedStatement</code> object for sending
parameterized SQL statements to the database.
<P>
A SQL statement with or without IN parameters can be
pre-compiled and stored in a <code>PreparedStatement</code> object. This
object can then be used to efficiently execute this statement
multiple times.

<P><B>Note:</B> This method is optimized for handling
parametric SQL statements that benefit from precompilation. If
the driver supports precompilation,
the method <code>prepareStatement</code> will send
the statement to the database for precompilation. Some drivers
may not support precompilation. In this case, the statement may
not be sent to the database until the <code>PreparedStatement</code> 
object is executed.  This has no direct effect on users; however, it does
affect which methods throw certain <code>SQLException</code> objects.
<P>
Result sets created using the returned <code>PreparedStatement</code>
object will by default be type <code>TYPE_FORWARD_ONLY</code>
and have a concurrency level of <code>CONCUR_READ_ONLY</code>.

@param sql an SQL statement that may contain one or more '?' IN
parameter placeholders
@return a new default <code>PreparedStatement</code> object containing the
pre-compiled SQL statement 
@exception SQLException if a database access error occurs"
      end

      operation 7721243 "prepareCall"
	public return_type class_ref 980507 // CallableStatement
	nparams 1
	  param in name "sql" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CallableStatement</code> object for calling
database stored procedures.
The <code>CallableStatement</code> object provides
methods for setting up its IN and OUT parameters, and
methods for executing the call to a stored procedure.

<P><B>Note:</B> This method is optimized for handling stored
procedure call statements. Some drivers may send the call
statement to the database when the method <code>prepareCall</code>
is done; others
may wait until the <code>CallableStatement</code> object
is executed. This has no
direct effect on users; however, it does affect which method
throws certain SQLExceptions.
<P>
Result sets created using the returned <code>CallableStatement</code>
object will by default be type <code>TYPE_FORWARD_ONLY</code>
and have a concurrency level of <code>CONCUR_READ_ONLY</code>.

@param sql an SQL statement that may contain one or more '?'
parameter placeholders. Typically this  statement is a JDBC
function call escape string.
@return a new default <code>CallableStatement</code> object containing the
pre-compiled SQL statement 
@exception SQLException if a database access error occurs"
      end

      operation 7721371 "nativeSQL"
	public explicit_return_type "String"
	nparams 1
	  param in name "sql" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the given SQL statement into the system's native SQL grammar.
A driver may convert the JDBC SQL grammar into its system's
native SQL grammar prior to sending it. This method returns the
native form of the statement that the driver would have sent.

@param sql an SQL statement that may contain one or more '?'
parameter placeholders
@return the native form of this statement
@exception SQLException if a database access error occurs"
      end

      operation 7721499 "setAutoCommit"
	public explicit_return_type "void"
	nparams 1
	  param inout name "autoCommit" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this connection's auto-commit mode to the given state.
If a connection is in auto-commit mode, then all its SQL
statements will be executed and committed as individual
transactions.  Otherwise, its SQL statements are grouped into
transactions that are terminated by a call to either
the method <code>commit</code> or the method <code>rollback</code>.
By default, new connections are in auto-commit
mode.
<P>
The commit occurs when the statement completes or the next
execute occurs, whichever comes first. In the case of
statements returning a <code>ResultSet</code> object, 
the statement completes when the last row of the 
<code>ResultSet</code> object has been retrieved or the
<code>ResultSet</code> object has been closed. In advanced cases, a single
statement may return multiple results as well as output
parameter values. In these cases, the commit occurs when all results and
output parameter values have been retrieved.
<P>
<B>NOTE:</B>  If this method is called during a transaction, the
transaction is committed.

@param autoCommit <code>true</code> to enable auto-commit mode; 
        <code>false</code> to disable it
@exception SQLException if a database access error occurs
@see #getAutoCommit"
      end

      operation 7721627 "getAutoCommit"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the current auto-commit mode for this <code>Connection</code>
object.

@return the current state of this <code>Connection</code> object's 
        auto-commit mode
@exception SQLException if a database access error occurs
@see #setAutoCommit "
      end

      operation 7721755 "commit"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes all changes made since the previous
commit/rollback permanent and releases any database locks
currently held by this <code>Connection</code> object. 
This method should be
used only when auto-commit mode has been disabled.

@exception SQLException if a database access error occurs or this
           <code>Connection</code> object is in auto-commit mode
@see #setAutoCommit "
      end

      operation 7721883 "rollback"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Undoes all changes made in the current transaction
and releases any database locks currently held
by this <code>Connection</code> object. This method should be 
used only when auto-commit mode has been disabled.

@exception SQLException if a database access error occurs or this
           <code>Connection</code> object is in auto-commit mode
@see #setAutoCommit "
      end

      operation 7722011 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases this <code>Connection</code> object's database and JDBC resources
immediately instead of waiting for them to be automatically released.
<P>
Calling the method <code>close</code> on a <code>Connection</code>
object that is already closed is a no-op.
<P>
<B>Note:</B> A <code>Connection</code> object is automatically 
closed when it is garbage collected. Certain fatal errors also 
close a <code>Connection</code> object.

@exception SQLException if a database access error occurs"
      end

      operation 7722139 "isClosed"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this <code>Connection</code> object has been
closed.  A connection is closed if the method <code>close</code>
has been called on it or if certain fatal errors have occurred.
This method is guaranteed to return <code>true</code> only when
it is called after the method <code>Connection.close</code> has
been called.
<P>
This method generally cannot be called to determine whether a
connection to a database is valid or invalid.  A typical client
can determine that a connection is invalid by catching any
exceptions that might be thrown when an operation is attempted.

@return <code>true</code> if this <code>Connection</code> object 
        is closed; <code>false</code> if it is still open
@exception SQLException if a database access error occurs"
      end

      operation 7722267 "getMetaData"
	public return_type class_ref 982043 // DatabaseMetaData
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "======================================================================
 Advanced features:

Retrieves a <code>DatabaseMetaData</code> object that contains
metadata about the database to which this
<code>Connection</code> object represents a connection.
The metadata includes information about the database's
tables, its supported SQL grammar, its stored
procedures, the capabilities of this connection, and so on.

@return a <code>DatabaseMetaData</code> object for this 
        <code>Connection</code> object
@exception SQLException if a database access error occurs"
      end

      operation 7722395 "setReadOnly"
	public explicit_return_type "void"
	nparams 1
	  param inout name "readOnly" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Puts this connection in read-only mode as a hint to the driver to enable 
database optimizations.

<P><B>Note:</B> This method cannot be called during a transaction.

@param readOnly <code>true</code> enables read-only mode; 
       <code>false</code> disables it
@exception SQLException if a database access error occurs or this
           method is called during a transaction"
      end

      operation 7722523 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this <code>Connection</code> 
object is in read-only mode.

@return <code>true</code> if this <code>Connection</code> object
        is read-only; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7722651 "setCatalog"
	public explicit_return_type "void"
	nparams 1
	  param in name "catalog" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given catalog name in order to select 	
a subspace of this <code>Connection</code> object's database 
in which to work.
<P>
If the driver does not support catalogs, it will
silently ignore this request.

@param catalog the name of a catalog (subspace in this 
       <code>Connection</code> object's database) in which to work
@exception SQLException if a database access error occurs
@see #getCatalog"
      end

      operation 7722779 "getCatalog"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this <code>Connection</code> object's current catalog name.

@return the current catalog name or <code>null</code> if there is none
@exception SQLException if a database access error occurs
@see #setCatalog"
      end

      attribute 2867099 "TRANSACTION_NONE"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant indicating that transactions are not supported. 
"
      end

      attribute 2867227 "TRANSACTION_READ_UNCOMMITTED"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant indicating that
dirty reads, non-repeatable reads and phantom reads can occur.
This level allows a row changed by one transaction to be read
by another transaction before any changes in that row have been
committed (a \"dirty read\").  If any of the changes are rolled back, 
the second transaction will have retrieved an invalid row.
"
      end

      attribute 2867355 "TRANSACTION_READ_COMMITTED"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant indicating that
dirty reads are prevented; non-repeatable reads and phantom
reads can occur.  This level only prohibits a transaction
from reading a row with uncommitted changes in it.
"
      end

      attribute 2867483 "TRANSACTION_REPEATABLE_READ"
	public explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant indicating that
dirty reads and non-repeatable reads are prevented; phantom
reads can occur.  This level prohibits a transaction from
reading a row with uncommitted changes in it, and it also
prohibits the situation where one transaction reads a row,
a second transaction alters the row, and the first transaction
rereads the row, getting different values the second time
(a \"non-repeatable read\").
"
      end

      attribute 2867611 "TRANSACTION_SERIALIZABLE"
	public explicit_type "int"
	init_value "=  8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant indicating that
dirty reads, non-repeatable reads and phantom reads are prevented.
This level includes the prohibitions in
<code>TRANSACTION_REPEATABLE_READ</code> and further prohibits the 
situation where one transaction reads all rows that satisfy
a <code>WHERE</code> condition, a second transaction inserts a row that
satisfies that <code>WHERE</code> condition, and the first transaction
rereads for the same condition, retrieving the additional
\"phantom\" row in the second read.
"
      end

      operation 7722907 "setTransactionIsolation"
	public explicit_return_type "void"
	nparams 1
	  param in name "level" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to change the transaction isolation level for this
<code>Connection</code> object to the one given.
The constants defined in the interface <code>Connection</code>
are the possible transaction isolation levels.
<P>
<B>Note:</B> If this method is called during a transaction, the result
is implementation-defined.

@param level one of the following <code>Connection</code> constants:
       <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
       <code>Connection.TRANSACTION_READ_COMMITTED</code>,
       <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or
       <code>Connection.TRANSACTION_SERIALIZABLE</code>.
       (Note that <code>Connection.TRANSACTION_NONE</code> cannot be used 
       because it specifies that transactions are not supported.)
@exception SQLException if a database access error occurs
           or the given parameter is not one of the <code>Connection</code>
           constants
@see DatabaseMetaData#supportsTransactionIsolationLevel 
@see #getTransactionIsolation"
      end

      operation 7723035 "getTransactionIsolation"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this <code>Connection</code> object's current 
transaction isolation level.

@return the current transaction isolation level, which will be one
        of the following constants:
       <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>, 
       <code>Connection.TRANSACTION_READ_COMMITTED</code>,
       <code>Connection.TRANSACTION_REPEATABLE_READ</code>, 
       <code>Connection.TRANSACTION_SERIALIZABLE</code>, or
       <code>Connection.TRANSACTION_NONE</code>.
@exception SQLException if a database access error occurs
@see #setTransactionIsolation"
      end

      operation 7723163 "getWarnings"
	public return_type class_ref 980891 // SQLWarning
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the first warning reported by calls on this 
<code>Connection</code> object.  If there is more than one
warning, subsequent warnings will be chained to the first one
and can be retrieved by calling the method
<code>SQLWarning.getNextWarning</code> on the warning 
that was retrieved previously.
<P>
This method may not be
called on a closed connection; doing so will cause an
<code>SQLException</code> to be thrown.

<P><B>Note:</B> Subsequent warnings will be chained to this
SQLWarning.

@return the first <code>SQLWarning</code> object or <code>null</code>
        if there are none 
@exception SQLException if a database access error occurs or
           this method is called on a closed connection
@see SQLWarning"
      end

      operation 7723291 "clearWarnings"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears all warnings reported for this <code>Connection</code> object.	
After a call to this method, the method <code>getWarnings</code>
returns <code>null</code> until a new warning is
reported for this <code>Connection</code> object.  

@exception SQLException if a database access error occurs"
      end

      operation 7723419 "createStatement"
	public return_type class_ref 980763 // Statement
	nparams 2
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------

Creates a <code>Statement</code> object that will generate
<code>ResultSet</code> objects with the given type and concurrency.
This method is the same as the <code>createStatement</code> method
above, but it allows the default result set
type and concurrency to be overridden.

@param resultSetType a result set type; one of 
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@param resultSetConcurrency a concurrency type; one of
       <code>ResultSet.CONCUR_READ_ONLY</code> or
       <code>ResultSet.CONCUR_UPDATABLE</code>
@return a new <code>Statement</code> object that will generate
        <code>ResultSet</code> objects with the given type and
        concurrency
@exception SQLException if a database access error occurs
        or the given parameters are not <code>ResultSet</code> 
        constants indicating type and concurrency
@since 1.2"
      end

      operation 7723547 "prepareStatement"
	public return_type class_ref 980635 // PreparedStatement
	nparams 3
	  param in name "sql" explicit_type "String"
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Creates a <code>PreparedStatement</code> object that will generate
<code>ResultSet</code> objects with the given type and concurrency.
This method is the same as the <code>prepareStatement</code> method
above, but it allows the default result set
type and concurrency to be overridden.

@param sql a <code>String</code> object that is the SQL statement to
           be sent to the database; may contain one or more ? IN
           parameters
@param resultSetType a result set type; one of 
        <code>ResultSet.TYPE_FORWARD_ONLY</code>, 
        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@param resultSetConcurrency a concurrency type; one of
        <code>ResultSet.CONCUR_READ_ONLY</code> or
        <code>ResultSet.CONCUR_UPDATABLE</code>
@return a new PreparedStatement object containing the
pre-compiled SQL statement that will produce <code>ResultSet</code>
objects with the given type and concurrency
@exception SQLException if a database access error occurs
        or the given parameters are not <code>ResultSet</code> 
        constants indicating type and concurrency
@since 1.2"
      end

      operation 7723675 "prepareCall"
	public return_type class_ref 980507 // CallableStatement
	nparams 3
	  param in name "sql" explicit_type "String"
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CallableStatement</code> object that will generate
<code>ResultSet</code> objects with the given type and concurrency.
This method is the same as the <code>prepareCall</code> method
above, but it allows the default result set
type and concurrency to be overridden.

@param sql a <code>String</code> object that is the SQL statement to
           be sent to the database; may contain on or more ? parameters
@param resultSetType a result set type; one of 
        <code>ResultSet.TYPE_FORWARD_ONLY</code>, 
        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@param resultSetConcurrency a concurrency type; one of
        <code>ResultSet.CONCUR_READ_ONLY</code> or
        <code>ResultSet.CONCUR_UPDATABLE</code>
@return a new <code>CallableStatement</code> object containing the
pre-compiled SQL statement that will produce <code>ResultSet</code>
objects with the given type and concurrency
@exception SQLException if a database access error occurs
        or the given parameters are not <code>ResultSet</code> 
        constants indicating type and concurrency
@since 1.2"
      end

      operation 7723803 "getTypeMap"
	public return_type class_ref 136603 // Map
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,Class<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>Map</code> object associated with this 
<code>Connection</code> object.
Unless the application has added an entry, the type map returned 
will be empty.

@return the <code>java.util.Map</code> object associated 
        with this <code>Connection</code> object
@exception SQLException if a database access error occurs
@since 1.2
@see #setTypeMap"
      end

      operation 7723931 "setTypeMap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "map" type class_ref 136603 // Map
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Installs the given <code>TypeMap</code> object as the type map for
this <code>Connection</code> object.  The type map will be used for the
custom mapping of SQL structured types and distinct types.

@param map the <code>java.util.Map</code> object to install
       as the replacement for this <code>Connection</code>
       object's default type map
@exception SQLException if a database access error occurs or
       the given parameter is not a <code>java.util.Map</code> 
       object
@since 1.2
@see #getTypeMap"
      end

      operation 7724059 "setHoldability"
	public explicit_return_type "void"
	nparams 1
	  param in name "holdability" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 3.0-----------------------------

Changes the holdability of <code>ResultSet</code> objects
created using this <code>Connection</code> object to the given
holdability.

@param holdability a <code>ResultSet</code> holdability constant; one of
       <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
       <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@throws SQLException if a database access occurs, the given parameter
        is not a <code>ResultSet</code> constant indicating holdability,
        or the given holdability is not supported
@see #getHoldability
@see ResultSet
@since 1.4"
      end

      operation 7724187 "getHoldability"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the current holdability of <code>ResultSet</code> objects
created using this <code>Connection</code> object.

@return the holdability, one of
       <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
       <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@throws SQLException if a database access occurs
@see #setHoldability
@see ResultSet
@since 1.4"
      end

      operation 7724315 "setSavepoint"
	public return_type class_ref 982171 // Savepoint
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an unnamed savepoint in the current transaction and 
returns the new <code>Savepoint</code> object that represents it.

@return the new <code>Savepoint</code> object
@exception SQLException if a database access error occurs
           or this <code>Connection</code> object is currently in
           auto-commit mode
@see Savepoint
@since 1.4"
      end

      operation 7724443 "setSavepoint"
	public return_type class_ref 982171 // Savepoint
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a savepoint with the given name in the current transaction
and returns the new <code>Savepoint</code> object that represents it.

@param name a <code>String</code> containing the name of the savepoint
@return the new <code>Savepoint</code> object
@exception SQLException if a database access error occurs
           or this <code>Connection</code> object is currently in
           auto-commit mode
@see Savepoint
@since 1.4"
      end

      operation 7724571 "rollback"
	public explicit_return_type "void"
	nparams 1
	  param inout name "savepoint" type class_ref 982171 // Savepoint
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Undoes all changes made after the given <code>Savepoint</code> object
was set. 
<P>
This method should be used only when auto-commit has been disabled.

@param savepoint the <code>Savepoint</code> object to roll back to
@exception SQLException if a database access error occurs,
           the <code>Savepoint</code> object is no longer valid,
           or this <code>Connection</code> object is currently in
           auto-commit mode
@see Savepoint
@see #rollback
@since 1.4"
      end

      operation 7724699 "releaseSavepoint"
	public explicit_return_type "void"
	nparams 1
	  param inout name "savepoint" type class_ref 982171 // Savepoint
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the given <code>Savepoint</code> object from the current 
transaction. Any reference to the savepoint after it have been removed 
will cause an <code>SQLException</code> to be thrown.

@param savepoint the <code>Savepoint</code> object to be removed
@exception SQLException if a database access error occurs or
           the given <code>Savepoint</code> object is not a valid 
           savepoint in the current transaction
@since 1.4"
      end

      operation 7724827 "createStatement"
	public return_type class_ref 980763 // Statement
	nparams 3
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	  param in name "resultSetHoldability" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>Statement</code> object that will generate
<code>ResultSet</code> objects with the given type, concurrency,
and holdability.
This method is the same as the <code>createStatement</code> method
above, but it allows the default result set
type, concurrency, and holdability to be overridden.

@param resultSetType one of the following <code>ResultSet</code> 
       constants:
        <code>ResultSet.TYPE_FORWARD_ONLY</code>, 
        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@param resultSetConcurrency one of the following <code>ResultSet</code> 
       constants:
        <code>ResultSet.CONCUR_READ_ONLY</code> or
        <code>ResultSet.CONCUR_UPDATABLE</code>
@param resultSetHoldability one of the following <code>ResultSet</code> 
       constants:
        <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
        <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@return a new <code>Statement</code> object that will generate
        <code>ResultSet</code> objects with the given type,
        concurrency, and holdability
@exception SQLException if a database access error occurs
           or the given parameters are not <code>ResultSet</code> 
           constants indicating type, concurrency, and holdability
@see ResultSet
@since 1.4"
      end

      operation 7724955 "prepareStatement"
	public return_type class_ref 980635 // PreparedStatement
	nparams 4
	  param in name "sql" explicit_type "String"
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	  param in name "resultSetHoldability" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PreparedStatement</code> object that will generate
<code>ResultSet</code> objects with the given type, concurrency,
and holdability.
<P>
This method is the same as the <code>prepareStatement</code> method
above, but it allows the default result set
type, concurrency, and holdability to be overridden.

@param sql a <code>String</code> object that is the SQL statement to
           be sent to the database; may contain one or more ? IN
           parameters
@param resultSetType one of the following <code>ResultSet</code> 
       constants:
        <code>ResultSet.TYPE_FORWARD_ONLY</code>, 
        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@param resultSetConcurrency one of the following <code>ResultSet</code> 
       constants:
        <code>ResultSet.CONCUR_READ_ONLY</code> or
        <code>ResultSet.CONCUR_UPDATABLE</code>
@param resultSetHoldability one of the following <code>ResultSet</code> 
       constants:
        <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
        <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@return a new <code>PreparedStatement</code> object, containing the
        pre-compiled SQL statement, that will generate
        <code>ResultSet</code> objects with the given type,
        concurrency, and holdability
@exception SQLException if a database access error occurs
           or the given parameters are not <code>ResultSet</code> 
           constants indicating type, concurrency, and holdability
@see ResultSet
@since 1.4"
      end

      operation 7725083 "prepareCall"
	public return_type class_ref 980507 // CallableStatement
	nparams 4
	  param in name "sql" explicit_type "String"
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	  param in name "resultSetHoldability" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CallableStatement</code> object that will generate
<code>ResultSet</code> objects with the given type and concurrency.
This method is the same as the <code>prepareCall</code> method
above, but it allows the default result set
type, result set concurrency type and holdability to be overridden.

@param sql a <code>String</code> object that is the SQL statement to
           be sent to the database; may contain on or more ? parameters
@param resultSetType one of the following <code>ResultSet</code> 
       constants:
        <code>ResultSet.TYPE_FORWARD_ONLY</code>, 
        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@param resultSetConcurrency one of the following <code>ResultSet</code> 
       constants:
        <code>ResultSet.CONCUR_READ_ONLY</code> or
        <code>ResultSet.CONCUR_UPDATABLE</code>
@param resultSetHoldability one of the following <code>ResultSet</code> 
       constants:
        <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
        <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@return a new <code>CallableStatement</code> object, containing the
        pre-compiled SQL statement, that will generate
        <code>ResultSet</code> objects with the given type,
        concurrency, and holdability
@exception SQLException if a database access error occurs
           or the given parameters are not <code>ResultSet</code> 
           constants indicating type, concurrency, and holdability
@see ResultSet
@since 1.4"
      end

      operation 7725211 "prepareStatement"
	public return_type class_ref 980635 // PreparedStatement
	nparams 2
	  param in name "sql" explicit_type "String"
	  param in name "autoGeneratedKeys" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a default <code>PreparedStatement</code> object that has
the capability to retrieve auto-generated keys. The given constant
tells the driver whether it should make auto-generated keys
available for retrieval.  This parameter is ignored if the SQL 
statement is not an <code>INSERT</code> statement.
<P>
<B>Note:</B> This method is optimized for handling
parametric SQL statements that benefit from precompilation. If
the driver supports precompilation,
the method <code>prepareStatement</code> will send
the statement to the database for precompilation. Some drivers
may not support precompilation. In this case, the statement may
not be sent to the database until the <code>PreparedStatement</code> 
object is executed.  This has no direct effect on users; however, it does
affect which methods throw certain SQLExceptions.
<P>
Result sets created using the returned <code>PreparedStatement</code>
object will by default be type <code>TYPE_FORWARD_ONLY</code>
and have a concurrency level of <code>CONCUR_READ_ONLY</code>.

@param sql an SQL statement that may contain one or more '?' IN
       parameter placeholders
@param autoGeneratedKeys a flag indicating whether auto-generated keys 
       should be returned; one of
       <code>Statement.RETURN_GENERATED_KEYS</code> or
	      <code>Statement.NO_GENERATED_KEYS</code>  
@return a new <code>PreparedStatement</code> object, containing the
        pre-compiled SQL statement, that will have the capability of
        returning auto-generated keys
@exception SQLException if a database access error occurs
        or the given parameter is not a <code>Statement</code>
        constant indicating whether auto-generated keys should be
        returned
@since 1.4"
      end

      operation 7725339 "prepareStatement"
	public return_type class_ref 980635 // PreparedStatement
	nparams 2
	  param in name "sql" explicit_type "String"
	  param in name "columnIndexes" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a default <code>PreparedStatement</code> object capable
of returning the auto-generated keys designated by the given array.
This array contains the indexes of the columns in the target
table that contain the auto-generated keys that should be made
available. This array is ignored if the SQL 
statement is not an <code>INSERT</code> statement.
<P>
An SQL statement with or without IN parameters can be
pre-compiled and stored in a <code>PreparedStatement</code> object. This
object can then be used to efficiently execute this statement
multiple times.
<P>
<B>Note:</B> This method is optimized for handling
parametric SQL statements that benefit from precompilation. If
the driver supports precompilation,
the method <code>prepareStatement</code> will send
the statement to the database for precompilation. Some drivers
may not support precompilation. In this case, the statement may
not be sent to the database until the <code>PreparedStatement</code> 
object is executed.  This has no direct effect on users; however, it does
affect which methods throw certain SQLExceptions.
<P>
Result sets created using the returned <code>PreparedStatement</code>
object will by default be type <code>TYPE_FORWARD_ONLY</code>
and have a concurrency level of <code>CONCUR_READ_ONLY</code>.

@param sql an SQL statement that may contain one or more '?' IN
       parameter placeholders
@param columnIndexes an array of column indexes indicating the columns
       that should be returned from the inserted row or rows 
@return a new <code>PreparedStatement</code> object, containing the
        pre-compiled statement, that is capable of returning the
        auto-generated keys designated by the given array of column
        indexes
@exception SQLException if a database access error occurs

@since 1.4"
      end

      operation 7725467 "prepareStatement"
	public return_type class_ref 980635 // PreparedStatement
	nparams 2
	  param in name "sql" explicit_type "String"
	  param in name "columnNames" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a default <code>PreparedStatement</code> object capable
of returning the auto-generated keys designated by the given array.
This array contains the names of the columns in the target
table that contain the auto-generated keys that should be returned.
This array is ignored if the SQL 
statement is not an <code>INSERT</code> statement.
<P>
An SQL statement with or without IN parameters can be
pre-compiled and stored in a <code>PreparedStatement</code> object. This
object can then be used to efficiently execute this statement
multiple times.
<P>
<B>Note:</B> This method is optimized for handling
parametric SQL statements that benefit from precompilation. If
the driver supports precompilation,
the method <code>prepareStatement</code> will send
the statement to the database for precompilation. Some drivers
may not support precompilation. In this case, the statement may
not be sent to the database until the <code>PreparedStatement</code> 
object is executed.  This has no direct effect on users; however, it does
affect which methods throw certain SQLExceptions.
<P>
Result sets created using the returned <code>PreparedStatement</code>
object will by default be type <code>TYPE_FORWARD_ONLY</code>
and have a concurrency level of <code>CONCUR_READ_ONLY</code>.

@param sql an SQL statement that may contain one or more '?' IN
       parameter placeholders
@param columnNames an array of column names indicating the columns
       that should be returned from the inserted row or rows 
@return a new <code>PreparedStatement</code> object, containing the
        pre-compiled statement, that is capable of returning the
        auto-generated keys designated by the given array of column
        names
@exception SQLException if a database access error occurs

@since 1.4"
      end

      classrelation 2709531 // <dependency>
	relation 2709531 -_->
	  a default
	    classrelation_ref 2709531 // <dependency>
	  b parent class_ref 982043 // DatabaseMetaData
      end

      classrelation 2709659 // <dependency>
	relation 2709659 -_->
	  a default
	    classrelation_ref 2709659 // <dependency>
	  b parent class_ref 980763 // Statement
      end

      classrelation 2710043 // <dependency>
	relation 2710043 -_->
	  a default
	    classrelation_ref 2710043 // <dependency>
	  b parent class_ref 980635 // PreparedStatement
      end

      classrelation 2710171 // <dependency>
	relation 2710171 -_->
	  a default
	    classrelation_ref 2710171 // <dependency>
	  b parent class_ref 980507 // CallableStatement
      end
    end

    class 981147 "Date"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<P>A thin wrapper around a millisecond value that allows
JDBC to identify this as an SQL <code>DATE</code> value.  A 
milliseconds value represents the number of milliseconds that 
have passed since January 1, 1970 00:00:00.000 GMT.
<p>
To conform with the definition of SQL <code>DATE</code>, the 
millisecond values wrapped by a <code>java.sql.Date</code> instance 
must be 'normalized' by setting the 
hours, minutes, seconds, and milliseconds to zero in the particular
time zone with which the instance is associated."
      classrelation 1908251 // <generalisation>
	relation 1908251 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1908251 // <generalisation>
	  b parent class_ref 139163 // Date
      end

      operation 7748251 "Date"
	public explicit_return_type ""
	nparams 3
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "day" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Constructs a <code>Date</code> object initialized with the given
year, month, and day.
<P>
The result is undefined if a given argument is out of bounds.

@param year the year minus 1900; must be 0 to 8099. (Note that
       8099 is 9999 minus 1900.)
@param month 0 to 11
@param day 1 to 31
@deprecated instead use the constructor <code>Date(long date)</code>"
      end

      operation 7748379 "Date"
	public explicit_return_type ""
	nparams 1
	  param in name "date" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>Date</code> object using the given milliseconds 
time value.  If the given milliseconds value contains time 
information, the driver will set the time components to the
time in the default time zone (the time zone of the Java virtual
machine running the application) that corresponds to zero GMT.

@param date milliseconds since January 1, 1970, 00:00:00 GMT not
       to exceed the milliseconds representation for the year 8099.
       A negative number indicates the number of milliseconds
       before January 1, 1970, 00:00:00 GMT."
      end

      operation 7748507 "setTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "date" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets an existing <code>Date</code> object 
using the given milliseconds time value. 
If the given milliseconds value contains time information, 
the driver will set the time components to the
time in the default time zone (the time zone of the Java virtual
machine running the application) that corresponds to zero GMT.

@param date milliseconds since January 1, 1970, 00:00:00 GMT not
       to exceed the milliseconds representation for the year 8099.
       A negative number indicates the number of milliseconds
       before January 1, 1970, 00:00:00 GMT."
      end

      operation 7748635 "valueOf"
	class_operation public return_type class_ref 981147 // Date
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a string in JDBC date escape format to
a <code>Date</code> value.

@param s a <code>String</code> object representing a date in 
       in the format \"yyyy-mm-dd\"
@return a <code>java.sql.Date</code> object representing the
        given date
@throws IllegalArgumentException if the date given is not in the
        JDBC date escape format (yyyy-mm-dd)"
      end

      operation 7748763 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a date in the date escape format yyyy-mm-dd.  
<P>
NOTE:  To specify a date format for the class
<code>SimpleDateFormat</code>, use \"yyyy.MM.dd\" rather than
\"yyyy-mm-dd\".  In the context of <code>SimpleDateFormat</code>,
\"mm\" indicates minutes rather than the month.  
For example:
<PRE>

 Format Pattern                         Result
 --------------                         -------
	\"yyyy.MM.dd G 'at' hh:mm:ss z\"    ->>  1996.07.10 AD at 15:08:56 PDT
</PRE>
@return a String in yyyy-mm-dd format"
      end

      operation 7748891 "getHours"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment " Override all the time operations inherited from java.util.Date;

This method is deprecated and should not be used because SQL Date 
values do not have a time component.

@deprecated
@exception java.lang.IllegalArgumentException if this method is invoked
@see #setHours"
      end

      operation 7749019 "getMinutes"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL Date 
values do not have a time component.

@deprecated
@exception java.lang.IllegalArgumentException if this method is invoked
@see #setMinutes"
      end

      operation 7749147 "getSeconds"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL Date 
values do not have a time component.

@deprecated
@exception java.lang.IllegalArgumentException if this method is invoked
@see #setSeconds"
      end

      operation 7749275 "setHours"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL Date 
values do not have a time component.

@deprecated
@exception java.lang.IllegalArgumentException if this method is invoked
@see #getHours"
      end

      operation 7749403 "setMinutes"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL Date 
values do not have a time component.

@deprecated
@exception java.lang.IllegalArgumentException if this method is invoked
@see #getMinutes"
      end

      operation 7749531 "setSeconds"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL Date 
values do not have a time component.

@deprecated
@exception java.lang.IllegalArgumentException if this method is invoked
@see #getSeconds"
      end

      attribute 2874523 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  1511598038487230103L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Private serial version unique ID to ensure serialization
compatibility.
"
      end
    end

    class 981275 "Time"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<P>A thin wrapper around the <code>java.util.Date</code> class that allows the JDBC
API to identify this as an SQL <code>TIME</code> value. The <code>Time</code>
class adds formatting and
parsing operations to support the JDBC escape syntax for time
values. 
<p>The date components should be set to the \"zero epoch\"
value of January 1, 1970 and should not be accessed. "
      classrelation 1909275 // <generalisation>
	relation 1909275 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1909275 // <generalisation>
	  b parent class_ref 139163 // Date
      end

      operation 7782555 "Time"
	public explicit_return_type ""
	nparams 3
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Constructs a <code>Time</code> object initialized with the 
given values for the hour, minute, and second.
The driver sets the date components to January 1, 1970.
Any method that attempts to access the date components of a
<code>Time</code> object will throw a
<code>java.lang.IllegalArgumentException</code>.
<P>
The result is undefined if a given argument is out of bounds.

@param hour 0 to 23
@param minute 0 to 59
@param second 0 to 59

@deprecated Use the constructor that takes a milliseconds value
            in place of this constructor"
      end

      operation 7782683 "Time"
	public explicit_return_type ""
	nparams 1
	  param in name "time" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>Time</code> object using a milliseconds time value.

@param time milliseconds since January 1, 1970, 00:00:00 GMT;
            a negative number is milliseconds before
              January 1, 1970, 00:00:00 GMT"
      end

      operation 7782811 "setTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "time" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a <code>Time</code> object using a milliseconds time value.

@param time milliseconds since January 1, 1970, 00:00:00 GMT;
            a negative number is milliseconds before
              January 1, 1970, 00:00:00 GMT"
      end

      operation 7782939 "valueOf"
	class_operation public return_type class_ref 981275 // Time
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a string in JDBC time escape format to a <code>Time</code> value.

@param s time in format \"hh:mm:ss\"
@return a corresponding <code>Time</code> object"
      end

      operation 7783067 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a time in JDBC time escape format.  

@return a <code>String</code> in hh:mm:ss format"
      end

      operation 7783195 "getYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment " Override all the date operations inherited from java.util.Date;

This method is deprecated and should not be used because SQL <code>TIME</code> 
values do not have a year component.

@deprecated
@exception java.lang.IllegalArgumentException if this
          method is invoked
@see #setYear"
      end

      operation 7783323 "getMonth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL <code>TIME</code> 
values do not have a month component.

@deprecated
@exception java.lang.IllegalArgumentException if this
          method is invoked
@see #setMonth"
      end

      operation 7783451 "getDay"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL <code>TIME</code> 
values do not have a day component.

@deprecated
@exception java.lang.IllegalArgumentException if this
          method is invoked"
      end

      operation 7783579 "getDate"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL <code>TIME</code> 
values do not have a date component.

@deprecated
@exception java.lang.IllegalArgumentException if this
          method is invoked
@see #setDate"
      end

      operation 7783707 "setYear"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL <code>TIME</code> 
values do not have a year component.

@deprecated
@exception java.lang.IllegalArgumentException if this
          method is invoked
@see #getYear"
      end

      operation 7783835 "setMonth"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL <code>TIME</code> 
values do not have a month component.

@deprecated
@exception java.lang.IllegalArgumentException if this
          method is invoked
@see #getMonth"
      end

      operation 7783963 "setDate"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "This method is deprecated and should not be used because SQL <code>TIME</code> 
values do not have a date component.

@deprecated
@exception java.lang.IllegalArgumentException if this
          method is invoked
@see #getDate"
      end

      attribute 2878491 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  8397324403548013681L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Private serial version unique ID to ensure serialization
compatibility.
"
      end
    end

    class 981403 "Timestamp"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<P>A thin wrapper around <code>java.util.Date</code> that allows
the JDBC API to identify this as an SQL <code>TIMESTAMP</code> value.
It adds the ability
to hold the SQL <code>TIMESTAMP</code> nanos value and provides formatting and
parsing operations to support the JDBC escape syntax for timestamp values.

<P><B>Note:</B> This type is a composite of a <code>java.util.Date</code> and a
separate nanoseconds value. Only integral seconds are stored in the
<code>java.util.Date</code> component. The fractional seconds - the nanos - are
separate.  The <code>Timestamp.equals(Object)</code> method never returns 
<code>true</code> when passed a value of type <code>java.util.Date</code>
because the nanos component of a date is unknown.
As a result, the <code>Timestamp.equals(Object)</code>
method is not symmetric with respect to the
<code>java.util.Date.equals(Object)</code>
method.  Also, the <code>hashcode</code> method uses the underlying 
<code>java.util.Date</code> 
implementation and therefore does not include nanos in its computation.  
<P>
Due to the differences between the <code>Timestamp</code> class
and the <code>java.util.Date</code>
class mentioned above, it is recommended that code not view
<code>Timestamp</code> values generically as an instance of
<code>java.util.Date</code>.  The
inheritance relationship between <code>Timestamp</code>
and <code>java.util.Date</code> really 
denotes implementation inheritance, and not type inheritance.  "
      classrelation 1909403 // <generalisation>
	relation 1909403 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1909403 // <generalisation>
	  b parent class_ref 139163 // Date
      end

      operation 7784091 "Timestamp"
	public explicit_return_type ""
	nparams 7
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "date" explicit_type "int"
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	  param in name "nano" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Constructs a <code>Timestamp</code> object initialized
with the given values.

@param year the year minus 1900
@param month 0 to 11 
@param date 1 to 31
@param hour 0 to 23
@param minute 0 to 59
@param second 0 to 59
@param nano 0 to 999,999,999
@deprecated instead use the constructor <code>Timestamp(long millis)</code>
@exception IllegalArgumentException if the nano argument is out of bounds"
      end

      operation 7784219 "Timestamp"
	public explicit_return_type ""
	nparams 1
	  param in name "time" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>Timestamp</code> object 
using a milliseconds time value. The
integral seconds are stored in the underlying date value; the
fractional seconds are stored in the <code>nanos</code> field of
the <code>Timestamp</code> object.

@param time milliseconds since January 1, 1970, 00:00:00 GMT.
       A negative number is the number of milliseconds before
        January 1, 1970, 00:00:00 GMT.
@see java.util.Calendar for more information"
      end

      operation 7784347 "setTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "time" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>Timestamp</code> object to represent a point in time that is 
<tt>time</tt> milliseconds after January 1, 1970 00:00:00 GMT. 

@param time   the number of milliseconds.
@see #getTime
@see #Timestamp(long time)
@see java.util.Calendar for more information"
      end

      operation 7784475 "getTime"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT
represented by this <code>Timestamp</code> object.

@return  the number of milliseconds since January 1, 1970, 00:00:00 GMT
         represented by this date.
@see #setTime"
      end

      attribute 2878619 "nanos"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
"
      end

      operation 7784603 "valueOf"
	class_operation public return_type class_ref 981403 // Timestamp
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a <code>String</code> object in JDBC timestamp escape format to a
<code>Timestamp</code> value.

@param s timestamp in format <code>yyyy-mm-dd hh:mm:ss.fffffffff</code>
@return corresponding <code>Timestamp</code> value
@exception java.lang.IllegalArgumentException if the given argument
does not have the format <code>yyyy-mm-dd hh:mm:ss.fffffffff</code>"
      end

      operation 7784731 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a timestamp in JDBC timestamp escape format.
        <code>yyyy-mm-dd hh:mm:ss.fffffffff</code>,
where <code>ffffffffff</code> indicates nanoseconds.
<P>
NOTE: To specify a timestamp for the class 
<code>java.text.SimpleDateFormat</code>, use \"yyyy.MM.dd\" rather than
\"yyyy-mm-dd\". In the context of <code>java.text.SimpleDateFormat</code>,
\"mm\" indicates minutes rather than the month. Note that 
<code>java.text.SimpleDateFormat</code> does not allow for the
nanoseconds component of a <code>Timestamp</code> object.
For Example:
<PRE>

Format Pattern				Result
--------------				------
\"yyyy.MM.dd G 'at' hh:mm:ss z\"	-->	2002.07.10 AD at 15:08:56 PDT

</PRE>
@return a <code>String</code> object in
          <code>yyyy-mm-dd hh:mm:ss.fffffffff</code> format"
      end

      operation 7784859 "getNanos"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets this <code>Timestamp</code> object's <code>nanos</code> value.

@return this <code>Timestamp</code> object's fractional seconds component
@see #setNanos"
      end

      operation 7784987 "setNanos"
	public explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>Timestamp</code> object's <code>nanos</code> field
to the given value.

@param n the new fractional seconds component
@exception java.lang.IllegalArgumentException if the given argument
           is greater than 999999999 or less than 0
@see #getNanos"
      end

      operation 7785115 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ts" type class_ref 981403 // Timestamp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests to see if this <code>Timestamp</code> object is
equal to the given <code>Timestamp</code> object.

@param ts the <code>Timestamp</code> value to compare with
@return <code>true</code> if the given <code>Timestamp</code>
        object is equal to this <code>Timestamp</code> object;
        <code>false</code> otherwise"
      end

      operation 7785243 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ts" type class_ref 168347 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests to see if this <code>Timestamp</code> object is
equal to the given object.

This version of the method <code>equals</code> has been added
to fix the incorrect 
signature of <code>Timestamp.equals(Timestamp)</code> and to preserve backward 
compatibility with existing class files.

Note: This method is not symmetric with respect to the 
<code>equals(Object)</code> method in the base class.

@param ts the <code>Object</code> value to compare with
@return <code>true</code> if the given <code>Object</code>
        instance is equal to this <code>Timestamp</code> object;
        <code>false</code> otherwise"
      end

      operation 7785371 "before"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ts" type class_ref 981403 // Timestamp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this <code>Timestamp</code> object is
earlier than the given <code>Timestamp</code> object.

@param ts the <code>Timestamp</code> value to compare with
@return <code>true</code> if this <code>Timestamp</code> object is earlier;
       <code>false</code> otherwise"
      end

      operation 7785499 "after"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ts" type class_ref 981403 // Timestamp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this <code>Timestamp</code> object is
later than the given <code>Timestamp</code> object.

@param ts the <code>Timestamp</code> value to compare with
@return <code>true</code> if this <code>Timestamp</code> object is later;
       <code>false</code> otherwise"
      end

      operation 7785627 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "ts" type class_ref 981403 // Timestamp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>Timestamp</code> object to the given 
<code>Timestamp</code> object.

@param   ts   the <code>Timestamp</code> object to be compared to
               this <code>Timestamp</code> object
@return  the value <code>0</code> if the two <code>Timestamp</code>
         objects are equal; a value less than <code>0</code> if this 
         <code>Timestamp</code> object is before the given argument;
         and a value greater than <code>0</code> if this 
         <code>Timestamp</code> object is after the given argument.
@since   1.2"
      end

      operation 7785755 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "o" type class_ref 139163 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>Timestamp</code> object to the given
<code>Date</code>, which must be a <code>Timestamp</code>
object. If the argument is not a <code>Timestamp</code> object,
this method throws a <code>ClassCastException</code> object.
(<code>Timestamp</code> objects are
comparable only to other <code>Timestamp</code> objects.)

@param o the <code>Date</code> to be compared, which must be a
       <code>Timestamp</code> object
@return  the value <code>0</code> if this <code>Timestamp</code> object
         and the given object are equal; a value less than <code>0</code>
         if this  <code>Timestamp</code> object is before the given argument;
         and a value greater than <code>0</code> if this
         <code>Timestamp</code> object is after the given argument.

@since   1.5"
      end

      attribute 2878747 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  2745179027874758501L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 981531 "Ref"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The mapping in the Java programming language of an SQL <code>REF</code>
value, which is a reference to an SQL structured type value in the database.
<P>
SQL <code>REF</code> values are stored in a table that contains
instances of a referenceable SQL structured type, and each <code>REF</code>
value is a unique identifier for one instance in that table. 
An SQL <code>REF</code> value may be used in place of the
SQL structured type it references, either as a column value in a
table or an attribute value in a structured type.
<P>
Because an SQL <code>REF</code> value is a logical pointer to an
SQL structured type, a <code>Ref</code> object is by default also a logical
pointer. Thus, retrieving an SQL <code>REF</code> value as
a <code>Ref</code> object does not materialize
the attributes of the structured type on the client.
<P>
A <code>Ref</code> object can be stored in the database using the 
<code>PreparedStatement.setRef</code> method.

@see Struct
@since 1.2"
      operation 7754395 "getBaseTypeName"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the fully-qualified SQL name of the SQL structured type that
this <code>Ref</code> object references.

@return the fully-qualified SQL name of the referenced SQL structured type 
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7754523 "getObject"
	public explicit_return_type "Object"
	nparams 1
	  param inout name "map" type class_ref 136603 // Map
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the referenced object and maps it to a Java type
using the given type map.

@param map a <code>java.util.Map</code> object that contains 
       the mapping to use (the fully-qualified name of the SQL
       structured type being referenced and the class object for
       <code>SQLData</code> implementation to which the SQL
       structured type will be mapped)
@return  a Java <code>Object</code> that is the custom mapping for 
         the SQL structured type to which this <code>Ref</code>
         object refers
@exception SQLException if a database access error occurs
@since 1.4
@see #setObject"
      end

      operation 7754651 "getObject"
	public explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the SQL structured type instance referenced by
this <code>Ref</code> object.  If the connection's type map has an entry
for the structured type, the instance will be custom mapped to
the Java class indicated in the type map.  Otherwise, the
structured type instance will be mapped to a <code>Struct</code> object.

@return  a Java <code>Object</code> that is the mapping for 
         the SQL structured type to which this <code>Ref</code>
         object refers
@exception SQLException if a database access error occurs
@since 1.4
@see #setObject"
      end

      operation 7754779 "setObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "Object"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the structured type value that this <code>Ref</code>
object references to the given instance of <code>Object</code>.
The driver converts this to an SQL structured type when it
sends it to the database.

@param value an <code>Object</code> representing the SQL 
       structured type instance that this
       <code>Ref</code> object will reference
@exception SQLException if a database access error occurs
@since 1.4
@see #getObject()
@see #getObject(Map)
@see PreparedStatement#setObject(int, Object)
@see CallableStatement#setObject(String, Object)"
      end
    end

    class 981659 "Clob"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The mapping in the Java<sup><font size=-2>TM</font></sup> programming language 
for the SQL <code>CLOB</code> type.
An SQL <code>CLOB</code> is a built-in type
that stores a Character Large Object as a column value in a row of
a database table.
By default drivers implement a <code>Clob</code> object using an SQL
<code>locator(CLOB)</code>, which means that a <code>Clob</code> object 
contains a logical pointer to the SQL <code>CLOB</code> data rather than
the data itself. A <code>Clob</code> object is valid for the duration
of the transaction in which it was created.
<P>The <code>Clob</code> interface provides methods for getting the
length of an SQL <code>CLOB</code> (Character Large Object) value,
for materializing a <code>CLOB</code> value on the client, and for
searching for a substring or <code>CLOB</code> object within a
<code>CLOB</code> value.
Methods in the interfaces {@link ResultSet},
{@link CallableStatement}, and {@link PreparedStatement}, such as
<code>getClob</code> and <code>setClob</code> allow a programmer to
access an SQL <code>CLOB</code> value.  In addition, this interface
has methods for updating a <code>CLOB</code> value.

@since 1.2"
      operation 7719579 "length"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of characters 
in the <code>CLOB</code> value
designated by this <code>Clob</code> object.

@return length of the <code>CLOB</code> in characters
@exception SQLException if there is an error accessing the
           length of the <code>CLOB</code> value
@since 1.2"
      end

      operation 7719707 "getSubString"
	public explicit_return_type "String"
	nparams 2
	  param in name "pos" explicit_type "long"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a copy of the specified substring 
in the <code>CLOB</code> value
designated by this <code>Clob</code> object.
The substring begins at position
<code>pos</code> and has up to <code>length</code> consecutive
characters.

@param pos the first character of the substring to be extracted.
           The first character is at position 1.
@param length the number of consecutive characters to be copied
@return a <code>String</code> that is the specified substring in
        the <code>CLOB</code> value designated by this <code>Clob</code> object
@exception SQLException if there is an error accessing the
           <code>CLOB</code> value
@since 1.2"
      end

      operation 7719835 "getCharacterStream"
	public return_type class_ref 364827 // Reader
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>CLOB</code> value designated by this <code>Clob</code>
object as a <code>java.io.Reader</code> object (or as a stream of
characters).

@return a <code>java.io.Reader</code> object containing the 
        <code>CLOB</code> data
@exception SQLException if there is an error accessing the 
           <code>CLOB</code> value
@see #setCharacterStream
@since 1.2"
      end

      operation 7719963 "getAsciiStream"
	public return_type class_ref 179099 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>CLOB</code> value designated by this <code>Clob</code>
object as an ascii stream.

@return a <code>java.io.InputStream</code> object containing the 
        <code>CLOB</code> data
@exception SQLException if there is an error accessing the 
           <code>CLOB</code> value
@see #setAsciiStream
@since 1.2"
      end

      operation 7720091 "position"
	public explicit_return_type "long"
	nparams 2
	  param in name "searchstr" explicit_type "String"
	  param in name "start" explicit_type "long"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the character position at which the specified substring 
<code>searchstr</code> appears in the SQL <code>CLOB</code> value
represented by this <code>Clob</code> object.  The search 
begins at position <code>start</code>.

@param searchstr the substring for which to search 
@param start the position at which to begin searching; the first position
             is 1
@return the position at which the substring appears or -1 if it is not
        present; the first position is 1
@exception SQLException if there is an error accessing the       
           <code>CLOB</code> value
@since 1.2"
      end

      operation 7720219 "position"
	public explicit_return_type "long"
	nparams 2
	  param inout name "searchstr" type class_ref 981659 // Clob
	  param in name "start" explicit_type "long"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the character position at which the specified  
<code>Clob</code> object <code>searchstr</code> appears in this 
<code>Clob</code> object.  The search begins at position 
<code>start</code>.

@param searchstr the <code>Clob</code> object for which to search
@param start the position at which to begin searching; the first
             position is 1
@return the position at which the <code>Clob</code> object appears 
             or -1 if it is not present; the first position is 1
@exception SQLException if there is an error accessing the 
           <code>CLOB</code> value
@since 1.2"
      end

      operation 7720347 "setString"
	public explicit_return_type "int"
	nparams 2
	  param in name "pos" explicit_type "long"
	  param in name "str" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "---------------------------- jdbc 3.0 -----------------------------------

Writes the given Java <code>String</code> to the <code>CLOB</code>
value that this <code>Clob</code> object designates at the position 
<code>pos</code>.

@param pos the position at which to start writing to the <code>CLOB</code>
        value that this <code>Clob</code> object represents
@param str the string to be written to the <code>CLOB</code>
       value that this <code>Clob</code> designates
@return the number of characters written
@exception SQLException if there is an error accessing the 
           <code>CLOB</code> value

@since 1.4"
      end

      operation 7720475 "setString"
	public explicit_return_type "int"
	nparams 4
	  param in name "pos" explicit_type "long"
	  param in name "str" explicit_type "String"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> characters of <code>str</code>, starting 
at character <code>offset</code>, to the <code>CLOB</code> value
that this <code>Clob</code> represents.

@param pos the position at which to start writing to this
       <code>CLOB</code> object
@param str the string to be written to the <code>CLOB</code> 
       value that this <code>Clob</code> object represents
@param offset the offset into <code>str</code> to start reading
       the characters to be written
@param len the number of characters to be written
@return the number of characters written
@exception SQLException if there is an error accessing the 
           <code>CLOB</code> value

@since 1.4"
      end

      operation 7720603 "setAsciiStream"
	public return_type class_ref 183835 // OutputStream
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a stream to be used to write Ascii characters to the
<code>CLOB</code> value that this <code>Clob</code> object represents, 
starting at position <code>pos</code>.

@param pos the position at which to start writing to this
       <code>CLOB</code> object
@return the stream to which ASCII encoded characters can be written
@exception SQLException if there is an error accessing the 
           <code>CLOB</code> value
@see #getAsciiStream

@since 1.4"
      end

      operation 7720731 "setCharacterStream"
	public return_type class_ref 446619 // Writer
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a stream to be used to write a stream of Unicode characters 
to the <code>CLOB</code> value that this <code>Clob</code> object
represents, at position <code>pos</code>.

@param  pos the position at which to start writing to the
       <code>CLOB</code> value

@return a stream to which Unicode encoded characters can be written
@exception SQLException if there is an error accessing the 
           <code>CLOB</code> value
@see #getCharacterStream

@since 1.4"
      end

      operation 7720859 "truncate"
	public explicit_return_type "void"
	nparams 1
	  param in name "len" explicit_type "long"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Truncates the <code>CLOB</code> value that this <code>Clob</code> 
designates to have a length of <code>len</code> 
characters.
@param len the length, in bytes, to which the <code>CLOB</code> value
       should be truncated
@exception SQLException if there is an error accessing the 
           <code>CLOB</code> value

@since 1.4"
      end
    end

    class 981787 "ResultSetMetaData"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that can be used to get information about the types 
and properties of the columns in a <code>ResultSet</code> object.
The following code fragment creates the <code>ResultSet</code> object rs,
creates the <code>ResultSetMetaData</code> object rsmd, and uses rsmd
to find out how many columns rs has and whether the first column in rs
can be used in a <code>WHERE</code> clause.
<PRE>

    ResultSet rs = stmt.executeQuery(\"SELECT a, b, c FROM TABLE2\");
    ResultSetMetaData rsmd = rs.getMetaData();
    int numberOfColumns = rsmd.getColumnCount();
    boolean b = rsmd.isSearchable(1);

</PRE>"
      operation 7772699 "getColumnCount"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of columns in this <code>ResultSet</code> object.

@return the number of columns
@exception SQLException if a database access error occurs"
      end

      operation 7772827 "isAutoIncrement"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the designated column is automatically numbered, thus read-only.

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7772955 "isCaseSensitive"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether a column's case matters.

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7773083 "isSearchable"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the designated column can be used in a where clause.

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7773211 "isCurrency"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the designated column is a cash value.

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7773339 "isNullable"
	public explicit_return_type "int"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates the nullability of values in the designated column.		

@param column the first column is 1, the second is 2, ...
@return the nullability status of the given column; one of <code>columnNoNulls</code>,
         <code>columnNullable</code> or <code>columnNullableUnknown</code>
@exception SQLException if a database access error occurs"
      end

      attribute 2877979 "columnNoNulls"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that a
column does not allow <code>NULL</code> values.
"
      end

      attribute 2878107 "columnNullable"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that a
column allows <code>NULL</code> values.
"
      end

      attribute 2878235 "columnNullableUnknown"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that the
nullability of a column's values is unknown.
"
      end

      operation 7773467 "isSigned"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether values in the designated column are signed numbers.

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7773595 "getColumnDisplaySize"
	public explicit_return_type "int"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates the designated column's normal maximum width in characters.

@param column the first column is 1, the second is 2, ...
@return the normal maximum number of characters allowed as the width
         of the designated column
@exception SQLException if a database access error occurs"
      end

      operation 7773723 "getColumnLabel"
	public explicit_return_type "String"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the designated column's suggested title for use in printouts and
displays.

@param column the first column is 1, the second is 2, ...
@return the suggested column title
@exception SQLException if a database access error occurs"
      end

      operation 7773851 "getColumnName"
	public explicit_return_type "String"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the designated column's name.

@param column the first column is 1, the second is 2, ...
@return column name
@exception SQLException if a database access error occurs"
      end

      operation 7773979 "getSchemaName"
	public explicit_return_type "String"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the designated column's table's schema.

@param column the first column is 1, the second is 2, ...
@return schema name or \"\" if not applicable
@exception SQLException if a database access error occurs"
      end

      operation 7774107 "getPrecision"
	public explicit_return_type "int"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the designated column's number of decimal digits.

@param column the first column is 1, the second is 2, ...
@return precision
@exception SQLException if a database access error occurs"
      end

      operation 7774235 "getScale"
	public explicit_return_type "int"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the designated column's number of digits to right of the decimal point.

@param column the first column is 1, the second is 2, ...
@return scale
@exception SQLException if a database access error occurs"
      end

      operation 7774363 "getTableName"
	public explicit_return_type "String"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the designated column's table name. 

@param column the first column is 1, the second is 2, ...
@return table name or \"\" if not applicable
@exception SQLException if a database access error occurs"
      end

      operation 7774491 "getCatalogName"
	public explicit_return_type "String"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the designated column's table's catalog name.

@param column the first column is 1, the second is 2, ...
@return the name of the catalog for the table in which the given column
         appears or \"\" if not applicable
@exception SQLException if a database access error occurs"
      end

      operation 7774619 "getColumnType"
	public explicit_return_type "int"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the designated column's SQL type.

@param column the first column is 1, the second is 2, ...
@return SQL type from java.sql.Types
@exception SQLException if a database access error occurs
@see Types"
      end

      operation 7774747 "getColumnTypeName"
	public explicit_return_type "String"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the designated column's database-specific type name.

@param column the first column is 1, the second is 2, ...
@return type name used by the database. If the column type is
a user-defined type, then a fully-qualified type name is returned.
@exception SQLException if a database access error occurs"
      end

      operation 7774875 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the designated column is definitely not writable.

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7775003 "isWritable"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether it is possible for a write on the designated column to succeed.

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7775131 "isDefinitelyWritable"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether a write on the designated column will definitely succeed.	

@param column the first column is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7775259 "getColumnClassName"
	public explicit_return_type "String"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------------

<p>Returns the fully-qualified name of the Java class whose instances 
are manufactured if the method <code>ResultSet.getObject</code>
is called to retrieve a value 
from the column.  <code>ResultSet.getObject</code> may return a subclass of the
class returned by this method.

@param column the first column is 1, the second is 2, ...
@return the fully-qualified name of the class in the Java programming
        language that would be used by the method 
<code>ResultSet.getObject</code> to retrieve the value in the specified
column. This is the class name used for custom mapping.
@exception SQLException if a database access error occurs
@since 1.2"
      end
    end

    class 981915 "ParameterMetaData"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that can be used to get information about the types 
and properties of the parameters in a <code>PreparedStatement</code> object.

@since 1.4"
      operation 7753243 "getParameterCount"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of parameters in the <code>PreparedStatement</code> 
object for which this <code>ParameterMetaData</code> object contains
information.

@return the number of parameters
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7753371 "isNullable"
	public explicit_return_type "int"
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether null values are allowed in the designated parameter.

@param param the first parameter is 1, the second is 2, ...
@return the nullability status of the given parameter; one of 
       <code>ParameterMetaData.parameterNoNulls</code>, 
       <code>ParameterMetaData.parameterNullable</code>, or 
       <code>ParameterMetaData.parameterNullableUnknown</code>
@exception SQLException if a database access error occurs
@since 1.4"
      end

      attribute 2875803 "parameterNoNulls"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that a
parameter will not allow <code>NULL</code> values.
"
      end

      attribute 2875931 "parameterNullable"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that a
parameter will allow <code>NULL</code> values.
"
      end

      attribute 2876059 "parameterNullableUnknown"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that the
nullability of a parameter is unknown.
"
      end

      operation 7753499 "isSigned"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether values for the designated parameter can be signed numbers.

@param param the first parameter is 1, the second is 2, ...
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7753627 "getPrecision"
	public explicit_return_type "int"
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the designated parameter's number of decimal digits.

@param param the first parameter is 1, the second is 2, ...
@return precision
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7753755 "getScale"
	public explicit_return_type "int"
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the designated parameter's number of digits to right of the decimal point.

@param param the first parameter is 1, the second is 2, ...
@return scale
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7753883 "getParameterType"
	public explicit_return_type "int"
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the designated parameter's SQL type.

@param param the first parameter is 1, the second is 2, ...
@return SQL type from <code>java.sql.Types</code>
@exception SQLException if a database access error occurs
@since 1.4
@see Types"
      end

      operation 7754011 "getParameterTypeName"
	public explicit_return_type "String"
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the designated parameter's database-specific type name.

@param param the first parameter is 1, the second is 2, ...
@return type the name used by the database. If the parameter type is
a user-defined type, then a fully-qualified type name is returned.
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7754139 "getParameterClassName"
	public explicit_return_type "String"
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the fully-qualified name of the Java class whose instances 
should be passed to the method <code>PreparedStatement.setObject</code>.

@param param the first parameter is 1, the second is 2, ...
@return the fully-qualified name of the class in the Java programming
        language that would be used by the method 
        <code>PreparedStatement.setObject</code> to set the value 
        in the specified parameter. This is the class name used 
        for custom mapping.
@exception SQLException if a database access error occurs
@since 1.4"
      end

      attribute 2876187 "parameterModeUnknown"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that the mode of the parameter is unknown.
"
      end

      attribute 2876315 "parameterModeIn"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that the parameter's mode is IN.
"
      end

      attribute 2876443 "parameterModeInOut"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that the parameter's mode is INOUT.
"
      end

      attribute 2876571 "parameterModeOut"
	public explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant indicating that the parameter's mode is  OUT.
"
      end

      operation 7754267 "getParameterMode"
	public explicit_return_type "int"
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the designated parameter's mode.

@param param the first parameter is 1, the second is 2, ...
@return mode of the parameter; one of 
       <code>ParameterMetaData.parameterModeIn</code>,
       <code>ParameterMetaData.parameterModeOut</code>, or
       <code>ParameterMetaData.parameterModeInOut</code>
       <code>ParameterMetaData.parameterModeUnknown</code>.
@exception SQLException if a database access error occurs
@since 1.4"
      end
    end

    class 982043 "DatabaseMetaData"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Comprehensive information about the database as a whole.
<P>
This interface is implemented by driver vendors to let users know the capabilities
of a Database Management System (DBMS) in combination with 
the driver based on JDBC<sup><font size=-2>TM</font></sup> technology 
(\"JDBC driver\") that is used with it.  Different relational DBMSs often support
different features, implement features in different ways, and use different
data types.  In addition, a driver may implement a feature on top of what the 
DBMS offers.  Information returned by methods in this interface applies
to the capabilities of a particular driver and a particular DBMS working
together. Note that as used in this documentation, the term \"database\" is
used generically to refer to both the driver and DBMS.
<P>
A user for this interface is commonly a tool that needs to discover how to
deal with the underlying DBMS.  This is especially true for applications
that are intended to be used with more than one DBMS. For example, a tool might use the method 
<code>getTypeInfo</code> to find out what data types can be used in a
<code>CREATE TABLE</code> statement.  Or a user might call the method
<code>supportsCorrelatedSubqueries</code> to see if it is possible to use
a correlated subquery or <code>supportsBatchUpdates</code> to see if it is 
possible to use batch updates. 
<P>
Some <code>DatabaseMetaData</code> methods return lists of information
in the form of <code>ResultSet</code> objects.
Regular <code>ResultSet</code> methods, such as
<code>getString</code> and <code>getInt</code>, can be used 
to retrieve the data from these <code>ResultSet</code> objects.  If 
a given form of metadata is not available, the <code>ResultSet</code>
getter methods throw an <code>SQLException</code>.
<P>
Some <code>DatabaseMetaData</code> methods take arguments that are 
String patterns.  These arguments all have names such as fooPattern.  
Within a pattern String, \"%\" means match any substring of 0 or more 
characters, and \"_\" means match any one character. Only metadata 
entries matching the search pattern are returned. If a search pattern 
argument is set to <code>null</code>, that argument's criterion will 
be dropped from the search.
<P>
A method that gets information about a feature that the driver does not
support will throw an <code>SQLException</code>.
In the case of methods that return a <code>ResultSet</code>
object, either a <code>ResultSet</code> object (which may be empty) is 
returned or an <code>SQLException</code> is thrown."
      operation 7725595 "allProceduresAreCallable"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------------------------------------------------------
 First, a variety of minor information about the target database.

Retrieves whether the current user can call all the procedures 
returned by the method <code>getProcedures</code>.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7725723 "allTablesAreSelectable"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the current user can use all the tables returned 
by the method <code>getTables</code> in a <code>SELECT</code> 
statement.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7725851 "getURL"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the URL for this DBMS.

@return the URL for this DBMS or <code>null</code> if it cannot be 
         generated
@exception SQLException if a database access error occurs"
      end

      operation 7725979 "getUserName"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the user name as known to this database.

@return the database user name
@exception SQLException if a database access error occurs"
      end

      operation 7726107 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database is in read-only mode.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7726235 "nullsAreSortedHigh"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether <code>NULL</code> values are sorted high.
Sorted high means that <code>NULL</code> values
sort higher than any other value in a domain.  In an ascending order,
if this method returns <code>true</code>,  <code>NULL</code> values
will appear at the end. By contrast, the method 
<code>nullsAreSortedAtEnd</code> indicates whether <code>NULL</code> values
are sorted at the end regardless of sort order.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7726363 "nullsAreSortedLow"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether <code>NULL</code> values are sorted low.
Sorted low means that <code>NULL</code> values
sort lower than any other value in a domain.  In an ascending order,
if this method returns <code>true</code>,  <code>NULL</code> values
will appear at the beginning. By contrast, the method 
<code>nullsAreSortedAtStart</code> indicates whether <code>NULL</code> values
are sorted at the beginning regardless of sort order.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7726491 "nullsAreSortedAtStart"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether <code>NULL</code> values are sorted at the start regardless 
of sort order.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7726619 "nullsAreSortedAtEnd"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether <code>NULL</code> values are sorted at the end regardless of 
sort order.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7726747 "getDatabaseProductName"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the name of this database product.

@return database product name
@exception SQLException if a database access error occurs"
      end

      operation 7726875 "getDatabaseProductVersion"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the version number of this database product.

@return database version number
@exception SQLException if a database access error occurs"
      end

      operation 7727003 "getDriverName"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the name of this JDBC driver.

@return JDBC driver name
@exception SQLException if a database access error occurs"
      end

      operation 7727131 "getDriverVersion"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the version number of this JDBC driver as a <code>String</code>.

@return JDBC driver version
@exception SQLException if a database access error occurs"
      end

      operation 7727259 "getDriverMajorVersion"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this JDBC driver's major version number.

@return JDBC driver major version"
      end

      operation 7727387 "getDriverMinorVersion"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this JDBC driver's minor version number.

@return JDBC driver minor version number"
      end

      operation 7727515 "usesLocalFiles"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database stores tables in a local file.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7727643 "usesLocalFilePerTable"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database uses a file for each table.

@return <code>true</code> if this database uses a local file for each table;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7727771 "supportsMixedCaseIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case unquoted SQL identifiers as
case sensitive and as a result stores them in mixed case.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7727899 "storesUpperCaseIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case unquoted SQL identifiers as
case insensitive and stores them in upper case.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7728027 "storesLowerCaseIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case unquoted SQL identifiers as
case insensitive and stores them in lower case.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7728155 "storesMixedCaseIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case unquoted SQL identifiers as
case insensitive and stores them in mixed case.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7728283 "supportsMixedCaseQuotedIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case quoted SQL identifiers as
case sensitive and as a result stores them in mixed case.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7728411 "storesUpperCaseQuotedIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case quoted SQL identifiers as
case insensitive and stores them in upper case.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7728539 "storesLowerCaseQuotedIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case quoted SQL identifiers as
case insensitive and stores them in lower case.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7728667 "storesMixedCaseQuotedIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database treats mixed case quoted SQL identifiers as
case insensitive and stores them in mixed case.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7728795 "getIdentifierQuoteString"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the string used to quote SQL identifiers.
This method returns a space \" \" if identifier quoting is not supported.

@return the quoting string or a space if quoting is not supported
@exception SQLException if a database access error occurs"
      end

      operation 7728923 "getSQLKeywords"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a comma-separated list of all of this database's SQL keywords
that are NOT also SQL92 keywords.

@return the list of this database's keywords that are not also
        SQL92 keywords
@exception SQLException if a database access error occurs"
      end

      operation 7729051 "getNumericFunctions"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a comma-separated list of math functions available with
this database.  These are the Open /Open CLI math function names used in 
the JDBC function escape clause.

@return the list of math functions supported by this database
@exception SQLException if a database access error occurs"
      end

      operation 7729179 "getStringFunctions"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a comma-separated list of string functions available with
this database.  These are the  Open Group CLI string function names used 
in the JDBC function escape clause.

@return the list of string functions supported by this database 
@exception SQLException if a database access error occurs"
      end

      operation 7729307 "getSystemFunctions"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a comma-separated list of system functions available with
this database.  These are the  Open Group CLI system function names used 
in the JDBC function escape clause.

@return a list of system functions supported by this database
@exception SQLException if a database access error occurs"
      end

      operation 7729435 "getTimeDateFunctions"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a comma-separated list of the time and date functions available 
with this database.

@return the list of time and date functions supported by this database
@exception SQLException if a database access error occurs"
      end

      operation 7729563 "getSearchStringEscape"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the string that can be used to escape wildcard characters.
This is the string that can be used to escape '_' or '%' in
the catalog search parameters that are a pattern (and therefore use one
of the wildcard characters).

<P>The '_' character represents any single character;
the '%' character represents any sequence of zero or 
more characters.

@return the string used to escape wildcard characters
@exception SQLException if a database access error occurs"
      end

      operation 7729691 "getExtraNameCharacters"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves all the \"extra\" characters that can be used in unquoted
identifier names (those beyond a-z, A-Z, 0-9 and _).

@return the string containing the extra characters 
@exception SQLException if a database access error occurs"
      end

      operation 7729819 "supportsAlterTableWithAddColumn"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------------------------------------------------
 Functions describing which features are supported.

Retrieves whether this database supports <code>ALTER TABLE</code>
with add column.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7729947 "supportsAlterTableWithDropColumn"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports <code>ALTER TABLE</code>
with drop column.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7730075 "supportsColumnAliasing"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports column aliasing.

<P>If so, the SQL AS clause can be used to provide names for
computed columns or to provide alias names for columns as
required.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7730203 "nullPlusNonNullIsNull"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports concatenations between 
<code>NULL</code> and non-<code>NULL</code> values being 
<code>NULL</code>.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7730331 "supportsConvert"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the <code>CONVERT</code>
function between SQL types.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7730459 "supportsConvert"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "fromType" explicit_type "int"
	  param in name "toType" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the <code>CONVERT</code>
for two given SQL types.

@param fromType the type to convert from; one of the type codes from
       the class <code>java.sql.Types</code>
@param toType the type to convert to; one of the type codes from 
       the class <code>java.sql.Types</code>
@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs
@see Types"
      end

      operation 7730587 "supportsTableCorrelationNames"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports table correlation names.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7730715 "supportsDifferentTableCorrelationNames"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether, when table correlation names are supported, they 
are restricted to being different from the names of the tables.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7730843 "supportsExpressionsInOrderBy"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports expressions in 
<code>ORDER BY</code> lists.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7730971 "supportsOrderByUnrelated"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports using a column that is
not in the <code>SELECT</code> statement in an
<code>ORDER BY</code> clause.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7731099 "supportsGroupBy"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports some form of 
<code>GROUP BY</code> clause.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7731227 "supportsGroupByUnrelated"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports using a column that is
not in the <code>SELECT</code> statement in a
<code>GROUP BY</code> clause.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7731355 "supportsGroupByBeyondSelect"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports using columns not included in
the <code>SELECT</code> statement in a <code>GROUP BY</code> clause 
provided that all of the columns in the <code>SELECT</code> statement
are included in the <code>GROUP BY</code> clause.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7731483 "supportsLikeEscapeClause"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports specifying a
<code>LIKE</code> escape clause.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7731611 "supportsMultipleResultSets"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports getting multiple 
<code>ResultSet</code> objects from a single call to the
method <code>execute</code>.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7731739 "supportsMultipleTransactions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database allows having multiple 
transactions open at once (on different connections).

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7731867 "supportsNonNullableColumns"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether columns in this database may be defined as non-nullable.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7731995 "supportsMinimumSQLGrammar"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the ODBC Minimum SQL grammar.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7732123 "supportsCoreSQLGrammar"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the ODBC Core SQL grammar.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7732251 "supportsExtendedSQLGrammar"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the ODBC Extended SQL grammar.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7732379 "supportsANSI92EntryLevelSQL"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the ANSI92 entry level SQL 
grammar.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7732507 "supportsANSI92IntermediateSQL"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the ANSI92 intermediate SQL grammar supported.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7732635 "supportsANSI92FullSQL"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the ANSI92 full SQL grammar supported.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7732763 "supportsIntegrityEnhancementFacility"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the SQL Integrity 
Enhancement Facility.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7732891 "supportsOuterJoins"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports some form of outer join.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7733019 "supportsFullOuterJoins"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports full nested outer joins.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7733147 "supportsLimitedOuterJoins"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database provides limited support for outer 
joins.  (This will be <code>true</code> if the method 
<code>supportsFullOuterJoins</code> returns <code>true</code>).

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7733275 "getSchemaTerm"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the database vendor's preferred term for \"schema\".

@return the vendor term for \"schema\"
@exception SQLException if a database access error occurs"
      end

      operation 7733403 "getProcedureTerm"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the database vendor's preferred term for \"procedure\".

@return the vendor term for \"procedure\"
@exception SQLException if a database access error occurs"
      end

      operation 7733531 "getCatalogTerm"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the database vendor's preferred term for \"catalog\".

@return the vendor term for \"catalog\"
@exception SQLException if a database access error occurs"
      end

      operation 7733659 "isCatalogAtStart"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a catalog appears at the start of a fully qualified 
table name.  If not, the catalog appears at the end.

@return <code>true</code> if the catalog name appears at the beginning
        of a fully qualified table name; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7733787 "getCatalogSeparator"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>String</code> that this database uses as the 
separator between a catalog and table name.

@return the separator string
@exception SQLException if a database access error occurs"
      end

      operation 7733915 "supportsSchemasInDataManipulation"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a schema name can be used in a data manipulation statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7734043 "supportsSchemasInProcedureCalls"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a schema name can be used in a procedure call statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7734171 "supportsSchemasInTableDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a schema name can be used in a table definition statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7734299 "supportsSchemasInIndexDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a schema name can be used in an index definition statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7734427 "supportsSchemasInPrivilegeDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a schema name can be used in a privilege definition statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7734555 "supportsCatalogsInDataManipulation"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a catalog name can be used in a data manipulation statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7734683 "supportsCatalogsInProcedureCalls"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a catalog name can be used in a procedure call statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7734811 "supportsCatalogsInTableDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a catalog name can be used in a table definition statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7734939 "supportsCatalogsInIndexDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a catalog name can be used in an index definition statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7735067 "supportsCatalogsInPrivilegeDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a catalog name can be used in a privilege definition statement.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7735195 "supportsPositionedDelete"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports positioned <code>DELETE</code>
statements.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7735323 "supportsPositionedUpdate"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports positioned <code>UPDATE</code>
statements.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7735451 "supportsSelectForUpdate"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports <code>SELECT FOR UPDATE</code>
statements.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7735579 "supportsStoredProcedures"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports stored procedure calls 
that use the stored procedure escape syntax.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7735707 "supportsSubqueriesInComparisons"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports subqueries in comparison 
expressions.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7735835 "supportsSubqueriesInExists"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports subqueries in 
<code>EXISTS</code> expressions.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7735963 "supportsSubqueriesInIns"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports subqueries in 
<code>IN</code> statements.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7736091 "supportsSubqueriesInQuantifieds"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports subqueries in quantified 
expressions.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7736219 "supportsCorrelatedSubqueries"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports correlated subqueries.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7736347 "supportsUnion"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports SQL <code>UNION</code>.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7736475 "supportsUnionAll"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports SQL <code>UNION ALL</code>.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7736603 "supportsOpenCursorsAcrossCommit"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports keeping cursors open 
across commits. 

@return <code>true</code> if cursors always remain open;
      <code>false</code> if they might not remain open
@exception SQLException if a database access error occurs"
      end

      operation 7736731 "supportsOpenCursorsAcrossRollback"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports keeping cursors open 
across rollbacks.

@return <code>true</code> if cursors always remain open;
      <code>false</code> if they might not remain open
@exception SQLException if a database access error occurs"
      end

      operation 7736859 "supportsOpenStatementsAcrossCommit"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports keeping statements open 
across commits.

@return <code>true</code> if statements always remain open;
      <code>false</code> if they might not remain open
@exception SQLException if a database access error occurs"
      end

      operation 7736987 "supportsOpenStatementsAcrossRollback"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports keeping statements open 
across rollbacks.

@return <code>true</code> if statements always remain open;
      <code>false</code> if they might not remain open
@exception SQLException if a database access error occurs"
      end

      operation 7737115 "getMaxBinaryLiteralLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------------------------------------------------------
 The following group of methods exposes various limitations 
 based on the target database with the current driver.
 Unless otherwise specified, a result of zero means there is no
 limit, or the limit is not known.

Retrieves the maximum number of hex characters this database allows in an 
inline binary literal.

@return max the maximum length (in hex characters) for a binary literal;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7737243 "getMaxCharLiteralLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters this database allows 
for a character literal.

@return the maximum number of characters allowed for a character literal;
     a result of zero means that there is no limit or the limit is 
     not known
@exception SQLException if a database access error occurs"
      end

      operation 7737371 "getMaxColumnNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters this database allows
for a column name.

@return the maximum number of characters allowed for a column name;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7737499 "getMaxColumnsInGroupBy"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of columns this database allows in a 
<code>GROUP BY</code> clause.

@return the maximum number of columns allowed;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7737627 "getMaxColumnsInIndex"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of columns this database allows in an index.

@return the maximum number of columns allowed;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7737755 "getMaxColumnsInOrderBy"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of columns this database allows in an 
<code>ORDER BY</code> clause.

@return the maximum number of columns allowed;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7737883 "getMaxColumnsInSelect"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of columns this database allows in a 
<code>SELECT</code> list.

@return the maximum number of columns allowed;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7738011 "getMaxColumnsInTable"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of columns this database allows in a table.

@return the maximum number of columns allowed;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7738139 "getMaxConnections"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of concurrent connections to this
database that are possible.

@return the maximum number of active connections possible at one time;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7738267 "getMaxCursorNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters that this database allows in a
cursor name.

@return the maximum number of characters allowed in a cursor name;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7738395 "getMaxIndexLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of bytes this database allows for an 
index, including all of the parts of the index.

@return the maximum number of bytes allowed; this limit includes the 
     composite of all the constituent parts of the index;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7738523 "getMaxSchemaNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters that this database allows in a
schema name.

@return the maximum number of characters allowed in a schema name;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7738651 "getMaxProcedureNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters that this database allows in a
procedure name.

@return the maximum number of characters allowed in a procedure name;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7738779 "getMaxCatalogNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters that this database allows in a
catalog name.

@return the maximum number of characters allowed in a catalog name;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7738907 "getMaxRowSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of bytes this database allows in
a single row.

@return the maximum number of bytes allowed for a row; a result of 
        zero means that there is no limit or the limit is not known
@exception SQLException if a database access error occurs"
      end

      operation 7739035 "doesMaxRowSizeIncludeBlobs"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the return value for the method 
<code>getMaxRowSize</code> includes the SQL data types 
<code>LONGVARCHAR</code> and <code>LONGVARBINARY</code>.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7739163 "getMaxStatementLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters this database allows in
an SQL statement.

@return the maximum number of characters allowed for an SQL statement;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7739291 "getMaxStatements"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of active statements to this database
that can be open at the same time.

@return the maximum number of statements that can be open at one time;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7739419 "getMaxTableNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters this database allows in
a table name.

@return the maximum number of characters allowed for a table name;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7739547 "getMaxTablesInSelect"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of tables this database allows in a
<code>SELECT</code> statement.

@return the maximum number of tables allowed in a <code>SELECT</code> 
        statement; a result of zero means that there is no limit or 
        the limit is not known
@exception SQLException if a database access error occurs"
      end

      operation 7739675 "getMaxUserNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of characters this database allows in
a user name.

@return the maximum number of characters allowed for a user name;
     a result of zero means that there is no limit or the limit 
     is not known
@exception SQLException if a database access error occurs"
      end

      operation 7739803 "getDefaultTransactionIsolation"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------------------------------------------------------

Retrieves this database's default transaction isolation level.  The
possible values are defined in <code>java.sql.Connection</code>.

@return the default isolation level 
@exception SQLException if a database access error occurs
@see Connection"
      end

      operation 7739931 "supportsTransactions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports transactions. If not, invoking the
method <code>commit</code> is a noop, and the isolation level is 
<code>TRANSACTION_NONE</code>.

@return <code>true</code> if transactions are supported; 
        <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7740059 "supportsTransactionIsolationLevel"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "level" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the given transaction isolation level.

@param level one of the transaction isolation levels defined in 
        <code>java.sql.Connection</code>
@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs
@see Connection"
      end

      operation 7740187 "supportsDataDefinitionAndDataManipulationTransactions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports both data definition and 
data manipulation statements within a transaction.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7740315 "supportsDataManipulationTransactionsOnly"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports only data manipulation 
statements within a transaction.

@return <code>true</code> if so; <code>false</code> otherwise
@exception SQLException if a database access error occurs"
      end

      operation 7740443 "dataDefinitionCausesTransactionCommit"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a data definition statement within a transaction forces
the transaction to commit.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7740571 "dataDefinitionIgnoredInTransactions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database ignores a data definition statement 
within a transaction.

@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs"
      end

      operation 7740699 "getProcedures"
	public return_type class_ref 980123 // ResultSet
	nparams 3
	  param in name "catalog" explicit_type "String"
	  param in name "schemaPattern" explicit_type "String"
	  param in name "procedureNamePattern" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the stored procedures available in the given
catalog.
<P>
Only procedure descriptions matching the schema and
procedure name criteria are returned.  They are ordered by
<code>PROCEDURE_SCHEM</code> and <code>PROCEDURE_NAME</code>.

<P>Each procedure description has the the following columns:
 <OL>
	<LI><B>PROCEDURE_CAT</B> String => procedure catalog (may be <code>null</code>)
	<LI><B>PROCEDURE_SCHEM</B> String => procedure schema (may be <code>null</code>)
	<LI><B>PROCEDURE_NAME</B> String => procedure name
 <LI> reserved for future use
 <LI> reserved for future use
 <LI> reserved for future use
	<LI><B>REMARKS</B> String => explanatory comment on the procedure
	<LI><B>PROCEDURE_TYPE</B> short => kind of procedure:
     <UL>
     <LI> procedureResultUnknown - May return a result
     <LI> procedureNoResult - Does not return a result
     <LI> procedureReturnsResult - Returns a result
     </UL>
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema name pattern; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param procedureNamePattern a procedure name pattern; must match the
       procedure name as it is stored in the database 
@return <code>ResultSet</code> - each row is a procedure description 
@exception SQLException if a database access error occurs
@see #getSearchStringEscape "
      end

      attribute 2867739 "procedureResultUnknown"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that it is not known whether the procedure returns
a result.
<P>
A possible value for column <code>PROCEDURE_TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getProcedures</code>.
"
      end

      attribute 2867867 "procedureNoResult"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the procedure does not return a result.
<P>
A possible value for column <code>PROCEDURE_TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getProcedures</code>.
"
      end

      attribute 2867995 "procedureReturnsResult"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the procedure returns a result.
<P>
A possible value for column <code>PROCEDURE_TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getProcedures</code>.
"
      end

      operation 7740827 "getProcedureColumns"
	public return_type class_ref 980123 // ResultSet
	nparams 4
	  param in name "catalog" explicit_type "String"
	  param in name "schemaPattern" explicit_type "String"
	  param in name "procedureNamePattern" explicit_type "String"
	  param in name "columnNamePattern" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the given catalog's stored procedure parameter
and result columns.

<P>Only descriptions matching the schema, procedure and
parameter name criteria are returned.  They are ordered by
PROCEDURE_SCHEM and PROCEDURE_NAME. Within this, the return value,
if any, is first. Next are the parameter descriptions in call
order. The column descriptions follow in column number order.

<P>Each row in the <code>ResultSet</code> is a parameter description or
column description with the following fields:
 <OL>
	<LI><B>PROCEDURE_CAT</B> String => procedure catalog (may be <code>null</code>)
	<LI><B>PROCEDURE_SCHEM</B> String => procedure schema (may be <code>null</code>)
	<LI><B>PROCEDURE_NAME</B> String => procedure name
	<LI><B>COLUMN_NAME</B> String => column/parameter name 
	<LI><B>COLUMN_TYPE</B> Short => kind of column/parameter:
     <UL>
     <LI> procedureColumnUnknown - nobody knows
     <LI> procedureColumnIn - IN parameter
     <LI> procedureColumnInOut - INOUT parameter
     <LI> procedureColumnOut - OUT parameter
     <LI> procedureColumnReturn - procedure return value
     <LI> procedureColumnResult - result column in <code>ResultSet</code>
     </UL>
 <LI><B>DATA_TYPE</B> int => SQL type from java.sql.Types
	<LI><B>TYPE_NAME</B> String => SQL type name, for a UDT type the
 type name is fully qualified
	<LI><B>PRECISION</B> int => precision
	<LI><B>LENGTH</B> int => length in bytes of data
	<LI><B>SCALE</B> short => scale
	<LI><B>RADIX</B> short => radix
	<LI><B>NULLABLE</B> short => can it contain NULL.
     <UL>
     <LI> procedureNoNulls - does not allow NULL values
     <LI> procedureNullable - allows NULL values
     <LI> procedureNullableUnknown - nullability unknown
     </UL>
	<LI><B>REMARKS</B> String => comment describing parameter/column
 </OL>

<P><B>Note:</B> Some databases may not return the column
descriptions for a procedure. Additional columns beyond
REMARKS can be defined by the database.

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema name pattern; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param procedureNamePattern a procedure name pattern; must match the
       procedure name as it is stored in the database 
@param columnNamePattern a column name pattern; must match the column name
       as it is stored in the database 
@return <code>ResultSet</code> - each row describes a stored procedure parameter or 
     column
@exception SQLException if a database access error occurs
@see #getSearchStringEscape "
      end

      attribute 2868123 "procedureColumnUnknown"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that type of the column is unknown.
<P>
A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code> 
returned by the method <code>getProcedureColumns</code>.
"
      end

      attribute 2868251 "procedureColumnIn"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the column stores IN parameters.
<P>
A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code> 
returned by the method <code>getProcedureColumns</code>.
"
      end

      attribute 2868379 "procedureColumnInOut"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the column stores INOUT parameters.
<P>
A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code> 
returned by the method <code>getProcedureColumns</code>.
"
      end

      attribute 2868507 "procedureColumnOut"
	public explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the column stores OUT parameters.
<P>
A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code> 
returned by the method <code>getProcedureColumns</code>.
"
      end

      attribute 2868635 "procedureColumnReturn"
	public explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the column stores return values.
<P>
A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code> 
returned by the method <code>getProcedureColumns</code>.
"
      end

      attribute 2868763 "procedureColumnResult"
	public explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the column stores results.
<P>
A possible value for the column
<code>COLUMN_TYPE</code>
in the <code>ResultSet</code> 
returned by the method <code>getProcedureColumns</code>.
"
      end

      attribute 2868891 "procedureNoNulls"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that <code>NULL</code> values are not allowed.
<P>
A possible value for the column
<code>NULLABLE</code>
in the <code>ResultSet</code> object
returned by the method <code>getProcedureColumns</code>.
"
      end

      attribute 2869019 "procedureNullable"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that <code>NULL</code> values are allowed.
<P>
A possible value for the column
<code>NULLABLE</code>
in the <code>ResultSet</code> object
returned by the method <code>getProcedureColumns</code>.
"
      end

      attribute 2869147 "procedureNullableUnknown"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that whether <code>NULL</code> values are allowed
is unknown.
<P>
A possible value for the column
<code>NULLABLE</code>
in the <code>ResultSet</code> object
returned by the method <code>getProcedureColumns</code>.
"
      end

      operation 7740955 "getTables"
	public return_type class_ref 980123 // ResultSet
	nparams 4
	  param in name "catalog" explicit_type "String"
	  param in name "schemaPattern" explicit_type "String"
	  param in name "tableNamePattern" explicit_type "String"
	  param in name "types" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the tables available in the given catalog.
Only table descriptions matching the catalog, schema, table
name and type criteria are returned.  They are ordered by
TABLE_TYPE, TABLE_SCHEM and TABLE_NAME.
<P>
Each table description has the following columns:
 <OL>
	<LI><B>TABLE_CAT</B> String => table catalog (may be <code>null</code>)
	<LI><B>TABLE_SCHEM</B> String => table schema (may be <code>null</code>)
	<LI><B>TABLE_NAME</B> String => table name
	<LI><B>TABLE_TYPE</B> String => table type.  Typical types are \"TABLE\",
			\"VIEW\",	\"SYSTEM TABLE\", \"GLOBAL TEMPORARY\", 
			\"LOCAL TEMPORARY\", \"ALIAS\", \"SYNONYM\".
	<LI><B>REMARKS</B> String => explanatory comment on the table
 <LI><B>TYPE_CAT</B> String => the types catalog (may be <code>null</code>)
 <LI><B>TYPE_SCHEM</B> String => the types schema (may be <code>null</code>)
 <LI><B>TYPE_NAME</B> String => type name (may be <code>null</code>)
 <LI><B>SELF_REFERENCING_COL_NAME</B> String => name of the designated 
                 \"identifier\" column of a typed table (may be <code>null</code>)
	<LI><B>REF_GENERATION</B> String => specifies how values in 
                 SELF_REFERENCING_COL_NAME are created. Values are
                 \"SYSTEM\", \"USER\", \"DERIVED\". (may be <code>null</code>)	
 </OL>

<P><B>Note:</B> Some databases may not return information for
all tables.

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema name pattern; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param tableNamePattern a table name pattern; must match the
       table name as it is stored in the database 
@param types a list of table types to include; <code>null</code> returns all types 
@return <code>ResultSet</code> - each row is a table description
@exception SQLException if a database access error occurs
@see #getSearchStringEscape "
      end

      operation 7741083 "getSchemas"
	public return_type class_ref 980123 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the schema names available in this database.  The results
are ordered by schema name.

<P>The schema column is:
 <OL>
	<LI><B>TABLE_SCHEM</B> String => schema name
 <LI><B>TABLE_CATALOG</B> String => catalog name (may be <code>null</code>)
 </OL>

@return a <code>ResultSet</code> object in which each row is a 
        schema decription 
@exception SQLException if a database access error occurs"
      end

      operation 7741211 "getCatalogs"
	public return_type class_ref 980123 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the catalog names available in this database.  The results
are ordered by catalog name.

<P>The catalog column is:
 <OL>
	<LI><B>TABLE_CAT</B> String => catalog name
 </OL>

@return a <code>ResultSet</code> object in which each row has a 
        single <code>String</code> column that is a catalog name 
@exception SQLException if a database access error occurs"
      end

      operation 7741339 "getTableTypes"
	public return_type class_ref 980123 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the table types available in this database.  The results
are ordered by table type.

<P>The table type is:
 <OL>
	<LI><B>TABLE_TYPE</B> String => table type.  Typical types are \"TABLE\",
			\"VIEW\",	\"SYSTEM TABLE\", \"GLOBAL TEMPORARY\", 
			\"LOCAL TEMPORARY\", \"ALIAS\", \"SYNONYM\".
 </OL>

@return a <code>ResultSet</code> object in which each row has a 
        single <code>String</code> column that is a table type 
@exception SQLException if a database access error occurs"
      end

      operation 7741467 "getColumns"
	public return_type class_ref 980123 // ResultSet
	nparams 4
	  param in name "catalog" explicit_type "String"
	  param in name "schemaPattern" explicit_type "String"
	  param in name "tableNamePattern" explicit_type "String"
	  param in name "columnNamePattern" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of table columns available in 
the specified catalog.

<P>Only column descriptions matching the catalog, schema, table
and column name criteria are returned.  They are ordered by
<code>TABLE_SCHEM</code>, <code>TABLE_NAME</code>, and 
<code>ORDINAL_POSITION</code>.

<P>Each column description has the following columns:
 <OL>
	<LI><B>TABLE_CAT</B> String => table catalog (may be <code>null</code>)
	<LI><B>TABLE_SCHEM</B> String => table schema (may be <code>null</code>)
	<LI><B>TABLE_NAME</B> String => table name
	<LI><B>COLUMN_NAME</B> String => column name
	<LI><B>DATA_TYPE</B> int => SQL type from java.sql.Types
	<LI><B>TYPE_NAME</B> String => Data source dependent type name,
 for a UDT the type name is fully qualified
	<LI><B>COLUMN_SIZE</B> int => column size.  For char or date
	    types this is the maximum number of characters, for numeric or
	    decimal types this is precision.
	<LI><B>BUFFER_LENGTH</B> is not used.
	<LI><B>DECIMAL_DIGITS</B> int => the number of fractional digits
	<LI><B>NUM_PREC_RADIX</B> int => Radix (typically either 10 or 2)
	<LI><B>NULLABLE</B> int => is NULL allowed.
     <UL>
     <LI> columnNoNulls - might not allow <code>NULL</code> values
     <LI> columnNullable - definitely allows <code>NULL</code> values
     <LI> columnNullableUnknown - nullability unknown
     </UL>
	<LI><B>REMARKS</B> String => comment describing column (may be <code>null</code>)
	<LI><B>COLUMN_DEF</B> String => default value (may be <code>null</code>)
	<LI><B>SQL_DATA_TYPE</B> int => unused
	<LI><B>SQL_DATETIME_SUB</B> int => unused
	<LI><B>CHAR_OCTET_LENGTH</B> int => for char types the 
      maximum number of bytes in the column
	<LI><B>ORDINAL_POSITION</B> int	=> index of column in table 
     (starting at 1)
	<LI><B>IS_NULLABLE</B> String => \"NO\" means column definitely 
     does not allow NULL values; \"YES\" means the column might 
     allow NULL values.  An empty string means nobody knows.
 <LI><B>SCOPE_CATLOG</B> String => catalog of table that is the scope
     of a reference attribute (<code>null</code> if DATA_TYPE isn't REF)
 <LI><B>SCOPE_SCHEMA</B> String => schema of table that is the scope
     of a reference attribute (<code>null</code> if the DATA_TYPE isn't REF)
 <LI><B>SCOPE_TABLE</B> String => table name that this the scope
     of a reference attribure (<code>null</code> if the DATA_TYPE isn't REF)
 <LI><B>SOURCE_DATA_TYPE</B> short => source type of a distinct type or user-generated
     Ref type, SQL type from java.sql.Types (<code>null</code> if DATA_TYPE 
     isn't DISTINCT or user-generated REF)
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema name pattern; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param tableNamePattern a table name pattern; must match the
       table name as it is stored in the database 
@param columnNamePattern a column name pattern; must match the column
       name as it is stored in the database
@return <code>ResultSet</code> - each row is a column description
@exception SQLException if a database access error occurs
@see #getSearchStringEscape "
      end

      attribute 2869275 "columnNoNulls"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the column might not allow <code>NULL</code> values.
<P>
A possible value for the column
<code>NULLABLE</code>
in the <code>ResultSet</code> returned by the method
<code>getColumns</code>.
"
      end

      attribute 2869403 "columnNullable"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the column definitely allows <code>NULL</code> values.
<P>
A possible value for the column
<code>NULLABLE</code>
in the <code>ResultSet</code> returned by the method
<code>getColumns</code>.
"
      end

      attribute 2869531 "columnNullableUnknown"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the nullability of columns is unknown.
<P>
A possible value for the column
<code>NULLABLE</code>
in the <code>ResultSet</code> returned by the method
<code>getColumns</code>.
"
      end

      operation 7741595 "getColumnPrivileges"
	public return_type class_ref 980123 // ResultSet
	nparams 4
	  param in name "catalog" explicit_type "String"
	  param in name "schema" explicit_type "String"
	  param in name "table" explicit_type "String"
	  param in name "columnNamePattern" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the access rights for a table's columns.

<P>Only privileges matching the column name criteria are
returned.  They are ordered by COLUMN_NAME and PRIVILEGE.

<P>Each privilige description has the following columns:
 <OL>
	<LI><B>TABLE_CAT</B> String => table catalog (may be <code>null</code>)
	<LI><B>TABLE_SCHEM</B> String => table schema (may be <code>null</code>)
	<LI><B>TABLE_NAME</B> String => table name
	<LI><B>COLUMN_NAME</B> String => column name
	<LI><B>GRANTOR</B> => grantor of access (may be <code>null</code>)
	<LI><B>GRANTEE</B> String => grantee of access
	<LI><B>PRIVILEGE</B> String => name of access (SELECT, 
     INSERT, UPDATE, REFRENCES, ...)
	<LI><B>IS_GRANTABLE</B> String => \"YES\" if grantee is permitted 
     to grant to others; \"NO\" if not; <code>null</code> if unknown 
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schema a schema name; must match the schema name as it is
       stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param table a table name; must match the table name as it is
       stored in the database 
@param columnNamePattern a column name pattern; must match the column
       name as it is stored in the database
@return <code>ResultSet</code> - each row is a column privilege description
@exception SQLException if a database access error occurs
@see #getSearchStringEscape "
      end

      operation 7741723 "getTablePrivileges"
	public return_type class_ref 980123 // ResultSet
	nparams 3
	  param in name "catalog" explicit_type "String"
	  param in name "schemaPattern" explicit_type "String"
	  param in name "tableNamePattern" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the access rights for each table available
in a catalog. Note that a table privilege applies to one or
more columns in the table. It would be wrong to assume that
this privilege applies to all columns (this may be true for
some systems but is not true for all.)

<P>Only privileges matching the schema and table name
criteria are returned.  They are ordered by TABLE_SCHEM,
TABLE_NAME, and PRIVILEGE.

<P>Each privilige description has the following columns:
 <OL>
	<LI><B>TABLE_CAT</B> String => table catalog (may be <code>null</code>)
	<LI><B>TABLE_SCHEM</B> String => table schema (may be <code>null</code>)
	<LI><B>TABLE_NAME</B> String => table name
	<LI><B>GRANTOR</B> => grantor of access (may be <code>null</code>)
	<LI><B>GRANTEE</B> String => grantee of access
	<LI><B>PRIVILEGE</B> String => name of access (SELECT, 
     INSERT, UPDATE, REFRENCES, ...)
	<LI><B>IS_GRANTABLE</B> String => \"YES\" if grantee is permitted 
     to grant to others; \"NO\" if not; <code>null</code> if unknown 
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema name pattern; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param tableNamePattern a table name pattern; must match the
       table name as it is stored in the database 
@return <code>ResultSet</code> - each row is a table privilege description
@exception SQLException if a database access error occurs
@see #getSearchStringEscape "
      end

      operation 7741851 "getBestRowIdentifier"
	public return_type class_ref 980123 // ResultSet
	nparams 5
	  param in name "catalog" explicit_type "String"
	  param in name "schema" explicit_type "String"
	  param in name "table" explicit_type "String"
	  param in name "scope" explicit_type "int"
	  param inout name "nullable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of a table's optimal set of columns that
uniquely identifies a row. They are ordered by SCOPE.

<P>Each column description has the following columns:
 <OL>
	<LI><B>SCOPE</B> short => actual scope of result
     <UL>
     <LI> bestRowTemporary - very temporary, while using row
     <LI> bestRowTransaction - valid for remainder of current transaction
     <LI> bestRowSession - valid for remainder of current session
     </UL>
	<LI><B>COLUMN_NAME</B> String => column name
	<LI><B>DATA_TYPE</B> int => SQL data type from java.sql.Types
	<LI><B>TYPE_NAME</B> String => Data source dependent type name,
 for a UDT the type name is fully qualified
	<LI><B>COLUMN_SIZE</B> int => precision
	<LI><B>BUFFER_LENGTH</B> int => not used
	<LI><B>DECIMAL_DIGITS</B> short	 => scale
	<LI><B>PSEUDO_COLUMN</B> short => is this a pseudo column 
     like an Oracle ROWID
     <UL>
     <LI> bestRowUnknown - may or may not be pseudo column
     <LI> bestRowNotPseudo - is NOT a pseudo column
     <LI> bestRowPseudo - is a pseudo column
     </UL>
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schema a schema name; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param table a table name; must match the table name as it is stored 
       in the database 
@param scope the scope of interest; use same values as SCOPE
@param nullable include columns that are nullable.
@return <code>ResultSet</code> - each row is a column description 
@exception SQLException if a database access error occurs"
      end

      attribute 2869659 "bestRowTemporary"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the scope of the best row identifier is
very temporary, lasting only while the
row is being used.
<P>
A possible value for the column
<code>SCOPE</code>
in the <code>ResultSet</code> object
returned by the method <code>getBestRowIdentifier</code>.
"
      end

      attribute 2869787 "bestRowTransaction"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the scope of the best row identifier is
the remainder of the current transaction.
<P>
A possible value for the column
<code>SCOPE</code>
in the <code>ResultSet</code> object
returned by the method <code>getBestRowIdentifier</code>.
"
      end

      attribute 2869915 "bestRowSession"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the scope of the best row identifier is
the remainder of the current session.
<P>
A possible value for the column
<code>SCOPE</code>
in the <code>ResultSet</code> object
returned by the method <code>getBestRowIdentifier</code>.
"
      end

      attribute 2870043 "bestRowUnknown"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the best row identifier may or may not be a pseudo column.
<P>
A possible value for the column
<code>PSEUDO_COLUMN</code>
in the <code>ResultSet</code> object
returned by the method <code>getBestRowIdentifier</code>.
"
      end

      attribute 2870171 "bestRowNotPseudo"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the best row identifier is NOT a pseudo column.
<P>
A possible value for the column
<code>PSEUDO_COLUMN</code>
in the <code>ResultSet</code> object
returned by the method <code>getBestRowIdentifier</code>.
"
      end

      attribute 2870299 "bestRowPseudo"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the best row identifier is a pseudo column.
<P>
A possible value for the column
<code>PSEUDO_COLUMN</code>
in the <code>ResultSet</code> object
returned by the method <code>getBestRowIdentifier</code>.
"
      end

      operation 7741979 "getVersionColumns"
	public return_type class_ref 980123 // ResultSet
	nparams 3
	  param in name "catalog" explicit_type "String"
	  param in name "schema" explicit_type "String"
	  param in name "table" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of a table's columns that are automatically
updated when any value in a row is updated.  They are
unordered.

<P>Each column description has the following columns:
 <OL>
	<LI><B>SCOPE</B> short => is not used
	<LI><B>COLUMN_NAME</B> String => column name
	<LI><B>DATA_TYPE</B> int => SQL data type from <code>java.sql.Types</code>
	<LI><B>TYPE_NAME</B> String => Data source-dependent type name
	<LI><B>COLUMN_SIZE</B> int => precision
	<LI><B>BUFFER_LENGTH</B> int => length of column value in bytes
	<LI><B>DECIMAL_DIGITS</B> short	 => scale
	<LI><B>PSEUDO_COLUMN</B> short => whether this is pseudo column 
     like an Oracle ROWID
     <UL>
     <LI> versionColumnUnknown - may or may not be pseudo column
     <LI> versionColumnNotPseudo - is NOT a pseudo column
     <LI> versionColumnPseudo - is a pseudo column
     </UL>
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schema a schema name; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param table a table name; must match the table name as it is stored 
       in the database 
@return a <code>ResultSet</code> object in which each row is a 
        column description 
@exception SQLException if a database access error occurs"
      end

      attribute 2870427 "versionColumnUnknown"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that this version column may or may not be a pseudo column.
<P>
A possible value for the column
<code>PSEUDO_COLUMN</code>
in the <code>ResultSet</code> object
returned by the method <code>getVersionColumns</code>.
"
      end

      attribute 2870555 "versionColumnNotPseudo"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that this version column is NOT a pseudo column.
<P>
A possible value for the column
<code>PSEUDO_COLUMN</code>
in the <code>ResultSet</code> object
returned by the method <code>getVersionColumns</code>.
"
      end

      attribute 2870683 "versionColumnPseudo"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that this version column is a pseudo column.
<P>
A possible value for the column
<code>PSEUDO_COLUMN</code>
in the <code>ResultSet</code> object
returned by the method <code>getVersionColumns</code>.
"
      end

      operation 7742107 "getPrimaryKeys"
	public return_type class_ref 980123 // ResultSet
	nparams 3
	  param in name "catalog" explicit_type "String"
	  param in name "schema" explicit_type "String"
	  param in name "table" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the given table's primary key columns.  They
are ordered by COLUMN_NAME.

<P>Each primary key column description has the following columns:
 <OL>
	<LI><B>TABLE_CAT</B> String => table catalog (may be <code>null</code>)
	<LI><B>TABLE_SCHEM</B> String => table schema (may be <code>null</code>)
	<LI><B>TABLE_NAME</B> String => table name
	<LI><B>COLUMN_NAME</B> String => column name
	<LI><B>KEY_SEQ</B> short => sequence number within primary key
	<LI><B>PK_NAME</B> String => primary key name (may be <code>null</code>)
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schema a schema name; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param table a table name; must match the table name as it is stored 
       in the database 
@return <code>ResultSet</code> - each row is a primary key column description 
@exception SQLException if a database access error occurs"
      end

      operation 7742235 "getImportedKeys"
	public return_type class_ref 980123 // ResultSet
	nparams 3
	  param in name "catalog" explicit_type "String"
	  param in name "schema" explicit_type "String"
	  param in name "table" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the primary key columns that are
referenced by a table's foreign key columns (the primary keys
imported by a table).  They are ordered by PKTABLE_CAT,
PKTABLE_SCHEM, PKTABLE_NAME, and KEY_SEQ.

<P>Each primary key column description has the following columns:
 <OL>
	<LI><B>PKTABLE_CAT</B> String => primary key table catalog 
     being imported (may be <code>null</code>)
	<LI><B>PKTABLE_SCHEM</B> String => primary key table schema
     being imported (may be <code>null</code>)
	<LI><B>PKTABLE_NAME</B> String => primary key table name
     being imported
	<LI><B>PKCOLUMN_NAME</B> String => primary key column name
     being imported
	<LI><B>FKTABLE_CAT</B> String => foreign key table catalog (may be <code>null</code>)
	<LI><B>FKTABLE_SCHEM</B> String => foreign key table schema (may be <code>null</code>)
	<LI><B>FKTABLE_NAME</B> String => foreign key table name
	<LI><B>FKCOLUMN_NAME</B> String => foreign key column name
	<LI><B>KEY_SEQ</B> short => sequence number within a foreign key
	<LI><B>UPDATE_RULE</B> short => What happens to a
      foreign key when the primary key is updated:
     <UL>
     <LI> importedNoAction - do not allow update of primary 
              key if it has been imported
     <LI> importedKeyCascade - change imported key to agree 
              with primary key update
     <LI> importedKeySetNull - change imported key to <code>NULL</code>
              if its primary key has been updated
     <LI> importedKeySetDefault - change imported key to default values 
              if its primary key has been updated
     <LI> importedKeyRestrict - same as importedKeyNoAction 
                                (for ODBC 2.x compatibility)
     </UL>
	<LI><B>DELETE_RULE</B> short => What happens to 
     the foreign key when primary is deleted.
     <UL>
     <LI> importedKeyNoAction - do not allow delete of primary 
              key if it has been imported
     <LI> importedKeyCascade - delete rows that import a deleted key
     <LI> importedKeySetNull - change imported key to NULL if 
              its primary key has been deleted
     <LI> importedKeyRestrict - same as importedKeyNoAction 
                                (for ODBC 2.x compatibility)
     <LI> importedKeySetDefault - change imported key to default if 
              its primary key has been deleted
     </UL>
	<LI><B>FK_NAME</B> String => foreign key name (may be <code>null</code>)
	<LI><B>PK_NAME</B> String => primary key name (may be <code>null</code>)
	<LI><B>DEFERRABILITY</B> short => can the evaluation of foreign key 
     constraints be deferred until commit
     <UL>
     <LI> importedKeyInitiallyDeferred - see SQL92 for definition
     <LI> importedKeyInitiallyImmediate - see SQL92 for definition 
     <LI> importedKeyNotDeferrable - see SQL92 for definition 
     </UL>
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schema a schema name; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param table a table name; must match the table name as it is stored 
       in the database 
@return <code>ResultSet</code> - each row is a primary key column description 
@exception SQLException if a database access error occurs
@see #getExportedKeys "
      end

      attribute 2870811 "importedKeyCascade"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "For the column <code>UPDATE_RULE</code>,
indicates that
when the primary key is updated, the foreign key (imported key)
is changed to agree with it.
For the column <code>DELETE_RULE</code>,
it indicates that
when the primary key is deleted, rows that imported that key
are deleted.
<P>
A possible value for the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code> in the
<code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.
"
      end

      attribute 2870939 "importedKeyRestrict"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "For the column <code>UPDATE_RULE</code>, indicates that
a primary key may not be updated if it has been imported by
another table as a foreign key.
For the column <code>DELETE_RULE</code>, indicates that
a primary key may not be deleted if it has been imported by
another table as a foreign key.
<P>
A possible value for the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code> in the
<code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.
"
      end

      attribute 2871067 "importedKeySetNull"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "For the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code>, indicates that
when the primary key is updated or deleted, the foreign key (imported key)
is changed to <code>NULL</code>.
<P>
A possible value for the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code> in the
<code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.
"
      end

      attribute 2871195 "importedKeyNoAction"
	public explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "For the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code>, indicates that
if the primary key has been imported, it cannot be updated or deleted.
<P>
A possible value for the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code> in the
<code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.
"
      end

      attribute 2871323 "importedKeySetDefault"
	public explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "For the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code>, indicates that
if the primary key is updated or deleted, the foreign key (imported key)
is set to the default value.
<P>
A possible value for the columns <code>UPDATE_RULE</code>
and <code>DELETE_RULE</code> in the
<code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.
"
      end

      attribute 2871451 "importedKeyInitiallyDeferred"
	public explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates deferrability.  See SQL-92 for a definition.
<P>
A possible value for the column <code>DEFERRABILITY</code>
in the <code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.
"
      end

      attribute 2871579 "importedKeyInitiallyImmediate"
	public explicit_type "int"
	init_value "=  6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates deferrability.  See SQL-92 for a definition.
<P>
A possible value for the column <code>DEFERRABILITY</code>
in the <code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.
"
      end

      attribute 2871707 "importedKeyNotDeferrable"
	public explicit_type "int"
	init_value "=  7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates deferrability.  See SQL-92 for a definition.
<P>
A possible value for the column <code>DEFERRABILITY</code>
in the <code>ResultSet</code> objects returned by the methods
<code>getImportedKeys</code>,  <code>getExportedKeys</code>,
and <code>getCrossReference</code>.
"
      end

      operation 7742363 "getExportedKeys"
	public return_type class_ref 980123 // ResultSet
	nparams 3
	  param in name "catalog" explicit_type "String"
	  param in name "schema" explicit_type "String"
	  param in name "table" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the foreign key columns that reference the
given table's primary key columns (the foreign keys exported by a
table).  They are ordered by FKTABLE_CAT, FKTABLE_SCHEM,
FKTABLE_NAME, and KEY_SEQ.

<P>Each foreign key column description has the following columns:
 <OL>
	<LI><B>PKTABLE_CAT</B> String => primary key table catalog (may be <code>null</code>)
	<LI><B>PKTABLE_SCHEM</B> String => primary key table schema (may be <code>null</code>)
	<LI><B>PKTABLE_NAME</B> String => primary key table name
	<LI><B>PKCOLUMN_NAME</B> String => primary key column name
	<LI><B>FKTABLE_CAT</B> String => foreign key table catalog (may be <code>null</code>)
     being exported (may be <code>null</code>)
	<LI><B>FKTABLE_SCHEM</B> String => foreign key table schema (may be <code>null</code>)
     being exported (may be <code>null</code>)
	<LI><B>FKTABLE_NAME</B> String => foreign key table name
     being exported
	<LI><B>FKCOLUMN_NAME</B> String => foreign key column name
     being exported
	<LI><B>KEY_SEQ</B> short => sequence number within foreign key
	<LI><B>UPDATE_RULE</B> short => What happens to 
      foreign key when primary is updated:
     <UL>
     <LI> importedNoAction - do not allow update of primary 
              key if it has been imported
     <LI> importedKeyCascade - change imported key to agree 
              with primary key update
     <LI> importedKeySetNull - change imported key to <code>NULL</code> if 
              its primary key has been updated
     <LI> importedKeySetDefault - change imported key to default values 
              if its primary key has been updated
     <LI> importedKeyRestrict - same as importedKeyNoAction 
                                (for ODBC 2.x compatibility)
     </UL>
	<LI><B>DELETE_RULE</B> short => What happens to 
     the foreign key when primary is deleted.
     <UL>
     <LI> importedKeyNoAction - do not allow delete of primary 
              key if it has been imported
     <LI> importedKeyCascade - delete rows that import a deleted key
     <LI> importedKeySetNull - change imported key to <code>NULL</code> if 
              its primary key has been deleted
     <LI> importedKeyRestrict - same as importedKeyNoAction 
                                (for ODBC 2.x compatibility)
     <LI> importedKeySetDefault - change imported key to default if 
              its primary key has been deleted
     </UL>
	<LI><B>FK_NAME</B> String => foreign key name (may be <code>null</code>)
	<LI><B>PK_NAME</B> String => primary key name (may be <code>null</code>)
	<LI><B>DEFERRABILITY</B> short => can the evaluation of foreign key 
     constraints be deferred until commit
     <UL>
     <LI> importedKeyInitiallyDeferred - see SQL92 for definition
     <LI> importedKeyInitiallyImmediate - see SQL92 for definition 
     <LI> importedKeyNotDeferrable - see SQL92 for definition 
     </UL>
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in this database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schema a schema name; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param table a table name; must match the table name as it is stored 
       in this database 
@return a <code>ResultSet</code> object in which each row is a 
        foreign key column description 
@exception SQLException if a database access error occurs
@see #getImportedKeys "
      end

      operation 7742491 "getCrossReference"
	public return_type class_ref 980123 // ResultSet
	nparams 6
	  param in name "primaryCatalog" explicit_type "String"
	  param in name "primarySchema" explicit_type "String"
	  param in name "primaryTable" explicit_type "String"
	  param in name "foreignCatalog" explicit_type "String"
	  param in name "foreignSchema" explicit_type "String"
	  param in name "foreignTable" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the foreign key columns in the given foreign key
table that reference the primary key columns of the given primary key
table (describe how one table imports another's key). This
should normally return a single foreign key/primary key pair because
most tables import a foreign key from a table only once.  They
are ordered by FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME, and
KEY_SEQ.

<P>Each foreign key column description has the following columns:
 <OL>
	<LI><B>PKTABLE_CAT</B> String => primary key table catalog (may be <code>null</code>)
	<LI><B>PKTABLE_SCHEM</B> String => primary key table schema (may be <code>null</code>)
	<LI><B>PKTABLE_NAME</B> String => primary key table name
	<LI><B>PKCOLUMN_NAME</B> String => primary key column name
	<LI><B>FKTABLE_CAT</B> String => foreign key table catalog (may be <code>null</code>)
     being exported (may be <code>null</code>)
	<LI><B>FKTABLE_SCHEM</B> String => foreign key table schema (may be <code>null</code>)
     being exported (may be <code>null</code>)
	<LI><B>FKTABLE_NAME</B> String => foreign key table name
     being exported
	<LI><B>FKCOLUMN_NAME</B> String => foreign key column name
     being exported
	<LI><B>KEY_SEQ</B> short => sequence number within foreign key
	<LI><B>UPDATE_RULE</B> short => What happens to 
      foreign key when primary is updated:
     <UL>
     <LI> importedNoAction - do not allow update of primary 
              key if it has been imported
     <LI> importedKeyCascade - change imported key to agree 
              with primary key update
     <LI> importedKeySetNull - change imported key to <code>NULL</code> if 
              its primary key has been updated
     <LI> importedKeySetDefault - change imported key to default values 
              if its primary key has been updated
     <LI> importedKeyRestrict - same as importedKeyNoAction 
                                (for ODBC 2.x compatibility)
     </UL>
	<LI><B>DELETE_RULE</B> short => What happens to 
     the foreign key when primary is deleted.
     <UL>
     <LI> importedKeyNoAction - do not allow delete of primary 
              key if it has been imported
     <LI> importedKeyCascade - delete rows that import a deleted key
     <LI> importedKeySetNull - change imported key to <code>NULL</code> if 
              its primary key has been deleted
     <LI> importedKeyRestrict - same as importedKeyNoAction 
                                (for ODBC 2.x compatibility)
     <LI> importedKeySetDefault - change imported key to default if 
              its primary key has been deleted
     </UL>
	<LI><B>FK_NAME</B> String => foreign key name (may be <code>null</code>)
	<LI><B>PK_NAME</B> String => primary key name (may be <code>null</code>)
	<LI><B>DEFERRABILITY</B> short => can the evaluation of foreign key 
     constraints be deferred until commit
     <UL>
     <LI> importedKeyInitiallyDeferred - see SQL92 for definition
     <LI> importedKeyInitiallyImmediate - see SQL92 for definition 
     <LI> importedKeyNotDeferrable - see SQL92 for definition 
     </UL>
 </OL>

@param primaryCatalog a catalog name; must match the catalog name
as it is stored in the database; \"\" retrieves those without a
catalog; <code>null</code> means drop catalog name from the selection criteria 
@param primarySchema a schema name; must match the schema name as
it is stored in the database; \"\" retrieves those without a schema;
<code>null</code> means drop schema name from the selection criteria 
@param primaryTable the name of the table that exports the key; must match
the table name as it is stored in the database
@param foreignCatalog a catalog name; must match the catalog name as
it is stored in the database; \"\" retrieves those without a
catalog; <code>null</code> means drop catalog name from the selection criteria
@param foreignSchema a schema name; must match the schema name as it
is stored in the database; \"\" retrieves those without a schema;
<code>null</code> means drop schema name from the selection criteria 
@param foreignTable the name of the table that imports the key; must match
the table name as it is stored in the database
@return <code>ResultSet</code> - each row is a foreign key column description 
@exception SQLException if a database access error occurs
@see #getImportedKeys "
      end

      operation 7742619 "getTypeInfo"
	public return_type class_ref 980123 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of all the standard SQL types supported by
this database. They are ordered by DATA_TYPE and then by how
closely the data type maps to the corresponding JDBC SQL type.

<P>Each type description has the following columns:
 <OL>
	<LI><B>TYPE_NAME</B> String => Type name
	<LI><B>DATA_TYPE</B> int => SQL data type from java.sql.Types
	<LI><B>PRECISION</B> int => maximum precision
	<LI><B>LITERAL_PREFIX</B> String => prefix used to quote a literal 
     (may be <code>null</code>)
	<LI><B>LITERAL_SUFFIX</B> String => suffix used to quote a literal 
(may be <code>null</code>)
	<LI><B>CREATE_PARAMS</B> String => parameters used in creating 
     the type (may be <code>null</code>)
	<LI><B>NULLABLE</B> short => can you use NULL for this type.
     <UL>
     <LI> typeNoNulls - does not allow NULL values
     <LI> typeNullable - allows NULL values
     <LI> typeNullableUnknown - nullability unknown
     </UL>
	<LI><B>CASE_SENSITIVE</B> boolean=> is it case sensitive.
	<LI><B>SEARCHABLE</B> short => can you use \"WHERE\" based on this type:
     <UL>
     <LI> typePredNone - No support
     <LI> typePredChar - Only supported with WHERE .. LIKE
     <LI> typePredBasic - Supported except for WHERE .. LIKE
     <LI> typeSearchable - Supported for all WHERE ..
     </UL>
	<LI><B>UNSIGNED_ATTRIBUTE</B> boolean => is it unsigned.
	<LI><B>FIXED_PREC_SCALE</B> boolean => can it be a money value.
	<LI><B>AUTO_INCREMENT</B> boolean => can it be used for an 
     auto-increment value.
	<LI><B>LOCAL_TYPE_NAME</B> String => localized version of type name 
     (may be <code>null</code>)
	<LI><B>MINIMUM_SCALE</B> short => minimum scale supported
	<LI><B>MAXIMUM_SCALE</B> short => maximum scale supported
	<LI><B>SQL_DATA_TYPE</B> int => unused
	<LI><B>SQL_DATETIME_SUB</B> int => unused
	<LI><B>NUM_PREC_RADIX</B> int => usually 2 or 10
 </OL>

@return a <code>ResultSet</code> object in which each row is an SQL 
        type description 
@exception SQLException if a database access error occurs"
      end

      attribute 2871835 "typeNoNulls"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a <code>NULL</code> value is NOT allowed for this
data type.
<P>
A possible value for column <code>NULLABLE</code> in the
<code>ResultSet</code> object returned by the method
<code>getTypeInfo</code>.
"
      end

      attribute 2871963 "typeNullable"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a <code>NULL</code> value is allowed for this
data type.
<P>
A possible value for column <code>NULLABLE</code> in the
<code>ResultSet</code> object returned by the method
<code>getTypeInfo</code>.
"
      end

      attribute 2872091 "typeNullableUnknown"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that it is not known whether a <code>NULL</code> value 
is allowed for this data type.
<P>
A possible value for column <code>NULLABLE</code> in the
<code>ResultSet</code> object returned by the method
<code>getTypeInfo</code>.
"
      end

      attribute 2872219 "typePredNone"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that <code>WHERE</code> search clauses are not supported
for this type.
<P>
A possible value for column <code>SEARCHABLE</code> in the
<code>ResultSet</code> object returned by the method
<code>getTypeInfo</code>.
"
      end

      attribute 2872347 "typePredChar"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the only <code>WHERE</code> search clause that can
be based on this type is <code>WHERE . . . LIKE</code>.
<P>
A possible value for column <code>SEARCHABLE</code> in the
<code>ResultSet</code> object returned by the method
<code>getTypeInfo</code>.
"
      end

      attribute 2872475 "typePredBasic"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that one can base all <code>WHERE</code> search clauses 
except <code>WHERE . . . LIKE</code> on this data type.
<P>
A possible value for column <code>SEARCHABLE</code> in the
<code>ResultSet</code> object returned by the method
<code>getTypeInfo</code>.
"
      end

      attribute 2872603 "typeSearchable"
	public explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that all <code>WHERE</code> search clauses can be 
based on this type.
<P>
A possible value for column <code>SEARCHABLE</code> in the
<code>ResultSet</code> object returned by the method
<code>getTypeInfo</code>.
"
      end

      operation 7742747 "getIndexInfo"
	public return_type class_ref 980123 // ResultSet
	nparams 5
	  param in name "catalog" explicit_type "String"
	  param in name "schema" explicit_type "String"
	  param in name "table" explicit_type "String"
	  param inout name "unique" explicit_type "boolean"
	  param inout name "approximate" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the given table's indices and statistics. They are
ordered by NON_UNIQUE, TYPE, INDEX_NAME, and ORDINAL_POSITION.

<P>Each index column description has the following columns:
 <OL>
	<LI><B>TABLE_CAT</B> String => table catalog (may be <code>null</code>)
	<LI><B>TABLE_SCHEM</B> String => table schema (may be <code>null</code>)
	<LI><B>TABLE_NAME</B> String => table name
	<LI><B>NON_UNIQUE</B> boolean => Can index values be non-unique. 
     false when TYPE is tableIndexStatistic
	<LI><B>INDEX_QUALIFIER</B> String => index catalog (may be <code>null</code>); 
     <code>null</code> when TYPE is tableIndexStatistic
	<LI><B>INDEX_NAME</B> String => index name; <code>null</code> when TYPE is 
     tableIndexStatistic
	<LI><B>TYPE</B> short => index type:
     <UL>
     <LI> tableIndexStatistic - this identifies table statistics that are
          returned in conjuction with a table's index descriptions
     <LI> tableIndexClustered - this is a clustered index
     <LI> tableIndexHashed - this is a hashed index
     <LI> tableIndexOther - this is some other style of index
     </UL>
	<LI><B>ORDINAL_POSITION</B> short => column sequence number 
     within index; zero when TYPE is tableIndexStatistic
	<LI><B>COLUMN_NAME</B> String => column name; <code>null</code> when TYPE is 
     tableIndexStatistic
	<LI><B>ASC_OR_DESC</B> String => column sort sequence, \"A\" => ascending, 
     \"D\" => descending, may be <code>null</code> if sort sequence is not supported; 
     <code>null</code> when TYPE is tableIndexStatistic	
	<LI><B>CARDINALITY</B> int => When TYPE is tableIndexStatistic, then 
     this is the number of rows in the table; otherwise, it is the 
     number of unique values in the index.
	<LI><B>PAGES</B> int => When TYPE is  tableIndexStatisic then 
     this is the number of pages used for the table, otherwise it 
     is the number of pages used for the current index.
	<LI><B>FILTER_CONDITION</B> String => Filter condition, if any.  
     (may be <code>null</code>)
 </OL>

@param catalog a catalog name; must match the catalog name as it
       is stored in this database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schema a schema name; must match the schema name
       as it is stored in this database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param table a table name; must match the table name as it is stored 
       in this database 
@param unique when true, return only indices for unique values; 
    when false, return indices regardless of whether unique or not 
@param approximate when true, result is allowed to reflect approximate 
    or out of data values; when false, results are requested to be 
    accurate
@return <code>ResultSet</code> - each row is an index column description 
@exception SQLException if a database access error occurs"
      end

      attribute 2872731 "tableIndexStatistic"
	public explicit_type "short"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that this column contains table statistics that
are returned in conjunction with a table's index descriptions.
<P>
A possible value for column <code>TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getIndexInfo</code>.
"
      end

      attribute 2872859 "tableIndexClustered"
	public explicit_type "short"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that this table index is a clustered index.
<P>
A possible value for column <code>TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getIndexInfo</code>.
"
      end

      attribute 2872987 "tableIndexHashed"
	public explicit_type "short"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that this table index is a hashed index.
<P>
A possible value for column <code>TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getIndexInfo</code>.
"
      end

      attribute 2873115 "tableIndexOther"
	public explicit_type "short"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that this table index is not a clustered
index, a hashed index, or table statistics;
it is something other than these.
<P>
A possible value for column <code>TYPE</code> in the
<code>ResultSet</code> object returned by the method
<code>getIndexInfo</code>.
"
      end

      operation 7742875 "supportsResultSetType"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------

Retrieves whether this database supports the given result set type.

@param type defined in <code>java.sql.ResultSet</code>
@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs
@see Connection
@since 1.2"
      end

      operation 7743003 "supportsResultSetConcurrency"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "type" explicit_type "int"
	  param in name "concurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the given concurrency type 
in combination with the given result set type.

@param type defined in <code>java.sql.ResultSet</code>
@param concurrency type defined in <code>java.sql.ResultSet</code>
@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs
@see Connection
@since 1.2"
      end

      operation 7743131 "ownUpdatesAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Retrieves whether for the given type of <code>ResultSet</code> object,
the result set's own updates are visible.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if updates are visible for the given result set type;
       <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7743259 "ownDeletesAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a result set's own deletes are visible.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if deletes are visible for the given result set type;
       <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7743387 "ownInsertsAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a result set's own inserts are visible.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if inserts are visible for the given result set type;
       <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7743515 "othersUpdatesAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether updates made by others are visible.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if updates made by others
       are visible for the given result set type;
       <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7743643 "othersDeletesAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether deletes made by others are visible.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if deletes made by others
       are visible for the given result set type;
       <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7743771 "othersInsertsAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether inserts made by others are visible.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if inserts made by others
        are visible for the given result set type;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7743899 "updatesAreDetected"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether or not a visible row update can be detected by 
calling the method <code>ResultSet.rowUpdated</code>.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if changes are detected by the result set type;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7744027 "deletesAreDetected"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether or not a visible row delete can be detected by 
calling the method <code>ResultSet.rowDeleted</code>.  If the method
<code>deletesAreDetected</code> returns <code>false</code>, it means that
deleted rows are removed from the result set.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if deletes are detected by the given result set type;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7744155 "insertsAreDetected"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether or not a visible row insert can be detected
by calling the method <code>ResultSet.rowInserted</code>.

@param type the <code>ResultSet</code> type; one of
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@return <code>true</code> if changes are detected by the specified result
        set type; <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7744283 "supportsBatchUpdates"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports batch updates.

@return <code>true</code> if this database supports batch upcates;
        <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7744411 "getUDTs"
	public return_type class_ref 980123 // ResultSet
	nparams 4
	  param in name "catalog" explicit_type "String"
	  param in name "schemaPattern" explicit_type "String"
	  param in name "typeNamePattern" explicit_type "String"
	  param in name "types" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the user-defined types (UDTs) defined 
in a particular schema.  Schema-specific UDTs may have type 
<code>JAVA_OBJECT</code>, <code>STRUCT</code>, 
or <code>DISTINCT</code>.

<P>Only types matching the catalog, schema, type name and type  
criteria are returned.  They are ordered by DATA_TYPE, TYPE_SCHEM 
and TYPE_NAME.  The type name parameter may be a fully-qualified 
name.  In this case, the catalog and schemaPattern parameters are
ignored.

<P>Each type description has the following columns:
 <OL>
	<LI><B>TYPE_CAT</B> String => the type's catalog (may be <code>null</code>)
	<LI><B>TYPE_SCHEM</B> String => type's schema (may be <code>null</code>)
	<LI><B>TYPE_NAME</B> String => type name
 <LI><B>CLASS_NAME</B> String => Java class name
	<LI><B>DATA_TYPE</B> int => type value defined in java.sql.Types.  
    One of JAVA_OBJECT, STRUCT, or DISTINCT
	<LI><B>REMARKS</B> String => explanatory comment on the type
 <LI><B>BASE_TYPE</B> short => type code of the source type of a 
    DISTINCT type or the type that implements the user-generated
    reference type of the SELF_REFERENCING_COLUMN of a structured
    type as defined in java.sql.Types (<code>null</code> if DATA_TYPE is not
    DISTINCT or not STRUCT with REFERENCE_GENERATION = USER_DEFINED) 
 </OL>

<P><B>Note:</B> If the driver does not support UDTs, an empty
result set is returned.

@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema pattern name; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param typeNamePattern a type name pattern; must match the type name
       as it is stored in the database; may be a fully qualified name 
@param types a list of user-defined types (JAVA_OBJECT, 
       STRUCT, or DISTINCT) to include; <code>null</code> returns all types 
@return <code>ResultSet</code> object in which each row describes a UDT
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7744539 "getConnection"
	public return_type class_ref 981019 // Connection
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the connection that produced this metadata object.
<P>
@return the connection that produced this metadata object
@exception SQLException if a database access error occurs
@since 1.2"
      end

      operation 7744667 "supportsSavepoints"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------------- JDBC 3.0 -------------------------

Retrieves whether this database supports savepoints.

@return <code>true</code> if savepoints are supported; 
        <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7744795 "supportsNamedParameters"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports named parameters to callable 
statements.

@return <code>true</code> if named parameters are supported; 
        <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7744923 "supportsMultipleOpenResults"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether it is possible to have multiple <code>ResultSet</code> objects
returned from a <code>CallableStatement</code> object
simultaneously.

@return <code>true</code> if a <code>CallableStatement</code> object
        can return multiple <code>ResultSet</code> objects
        simultaneously; <code>false</code> otherwise
@exception SQLException if a datanase access error occurs
@since 1.4"
      end

      operation 7745051 "supportsGetGeneratedKeys"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether auto-generated keys can be retrieved after 
a statement has been executed.

@return <code>true</code> if auto-generated keys can be retrieved
        after a statement has executed; <code>false</code> otherwise
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7745179 "getSuperTypes"
	public return_type class_ref 980123 // ResultSet
	nparams 3
	  param in name "catalog" explicit_type "String"
	  param in name "schemaPattern" explicit_type "String"
	  param in name "typeNamePattern" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the user-defined type (UDT) hierarchies defined in a 
particular schema in this database. Only the immediate super type/ 
sub type relationship is modeled.
<P>
Only supertype information for UDTs matching the catalog, 
schema, and type name is returned. The type name parameter
may be a fully-qualified name. When the UDT name supplied is a 
fully-qualified name, the catalog and schemaPattern parameters are 
ignored. 
<P>
If a UDT does not have a direct super type, it is not listed here.
A row of the <code>ResultSet</code> object returned by this method
describes the designated UDT and a direct supertype. A row has the following 
columns:
 <OL>
 <LI><B>TYPE_CAT</B> String => the UDT's catalog (may be <code>null</code>)
 <LI><B>TYPE_SCHEM</B> String => UDT's schema (may be <code>null</code>)
 <LI><B>TYPE_NAME</B> String => type name of the UDT
 <LI><B>SUPERTYPE_CAT</B> String => the direct super type's catalog 
                          (may be <code>null</code>)
 <LI><B>SUPERTYPE_SCHEM</B> String => the direct super type's schema 
                            (may be <code>null</code>)
 <LI><B>SUPERTYPE_NAME</B> String => the direct super type's name
 </OL>

<P><B>Note:</B> If the driver does not support type hierarchies, an 
empty result set is returned.

@param catalog a catalog name; \"\" retrieves those without a catalog;
       <code>null</code> means drop catalog name from the selection criteria
@param schemaPattern a schema name pattern; \"\" retrieves those 
       without a schema
@param typeNamePattern a UDT name pattern; may be a fully-qualified
       name
@return a <code>ResultSet</code> object in which a row gives information
        about the designated UDT
@throws SQLException if a database access error occurs
@since 1.4"
      end

      operation 7745307 "getSuperTables"
	public return_type class_ref 980123 // ResultSet
	nparams 3
	  param in name "catalog" explicit_type "String"
	  param in name "schemaPattern" explicit_type "String"
	  param in name "tableNamePattern" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the table hierarchies defined in a particular 
schema in this database.

<P>Only supertable information for tables matching the catalog, schema
and table name are returned. The table name parameter may be a fully-
qualified name, in which case, the catalog and schemaPattern parameters
are ignored. If a table does not have a super table, it is not listed here.
Supertables have to be defined in the same catalog and schema as the 
sub tables. Therefore, the type description does not need to include
this information for the supertable.

<P>Each type description has the following columns:
 <OL>
 <LI><B>TABLE_CAT</B> String => the type's catalog (may be <code>null</code>)
 <LI><B>TABLE_SCHEM</B> String => type's schema (may be <code>null</code>)
 <LI><B>TABLE_NAME</B> String => type name
 <LI><B>SUPERTABLE_NAME</B> String => the direct super type's name
 </OL>

<P><B>Note:</B> If the driver does not support type hierarchies, an 
empty result set is returned.

@param catalog a catalog name; \"\" retrieves those without a catalog;
       <code>null</code> means drop catalog name from the selection criteria
@param schemaPattern a schema name pattern; \"\" retrieves those 
       without a schema
@param tableNamePattern a table name pattern; may be a fully-qualified
       name
@return a <code>ResultSet</code> object in which each row is a type description
@throws SQLException if a database access error occurs
@since 1.4"
      end

      attribute 2873243 "attributeNoNulls"
	public explicit_type "short"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that <code>NULL</code> values might not be allowed.
<P>
A possible value for the column
<code>NULLABLE</code> in the <code>ResultSet</code> object
returned by the method <code>getAttributes</code>.
"
      end

      attribute 2873371 "attributeNullable"
	public explicit_type "short"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that <code>NULL</code> values are definitely allowed.
<P>
A possible value for the column <code>NULLABLE</code>
in the <code>ResultSet</code> object
returned by the method <code>getAttributes</code>.
"
      end

      attribute 2873499 "attributeNullableUnknown"
	public explicit_type "short"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that whether <code>NULL</code> values are allowed is not
known. 
<P>
A possible value for the column <code>NULLABLE</code>
in the <code>ResultSet</code> object
returned by the method <code>getAttributes</code>.
"
      end

      operation 7745435 "getAttributes"
	public return_type class_ref 980123 // ResultSet
	nparams 4
	  param in name "catalog" explicit_type "String"
	  param in name "schemaPattern" explicit_type "String"
	  param in name "typeNamePattern" explicit_type "String"
	  param in name "attributeNamePattern" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of the given attribute of the given type 
for a user-defined type (UDT) that is available in the given schema 
and catalog.
<P>
Descriptions are returned only for attributes of UDTs matching the 
catalog, schema, type, and attribute name criteria. They are ordered by
TYPE_SCHEM, TYPE_NAME and ORDINAL_POSITION. This description
does not contain inherited attributes.
<P>
The <code>ResultSet</code> object that is returned has the following 
columns:
<OL>
 <LI><B>TYPE_CAT</B> String => type catalog (may be <code>null</code>)
	<LI><B>TYPE_SCHEM</B> String => type schema (may be <code>null</code>)
	<LI><B>TYPE_NAME</B> String => type name
	<LI><B>ATTR_NAME</B> String => attribute name
	<LI><B>DATA_TYPE</B> int => attribute type SQL type from java.sql.Types
	<LI><B>ATTR_TYPE_NAME</B> String => Data source dependent type name.
 For a UDT, the type name is fully qualified. For a REF, the type name is 
 fully qualified and represents the target type of the reference type.
	<LI><B>ATTR_SIZE</B> int => column size.  For char or date
	    types this is the maximum number of characters; for numeric or
	    decimal types this is precision.
	<LI><B>DECIMAL_DIGITS</B> int => the number of fractional digits
	<LI><B>NUM_PREC_RADIX</B> int => Radix (typically either 10 or 2)
	<LI><B>NULLABLE</B> int => whether NULL is allowed
     <UL>
     <LI> attributeNoNulls - might not allow NULL values
     <LI> attributeNullable - definitely allows NULL values
     <LI> attributeNullableUnknown - nullability unknown
     </UL>
	<LI><B>REMARKS</B> String => comment describing column (may be <code>null</code>)
	<LI><B>ATTR_DEF</B> String => default value (may be <code>null</code>)
	<LI><B>SQL_DATA_TYPE</B> int => unused
	<LI><B>SQL_DATETIME_SUB</B> int => unused
	<LI><B>CHAR_OCTET_LENGTH</B> int => for char types the 
      maximum number of bytes in the column
	<LI><B>ORDINAL_POSITION</B> int	=> index of column in table 
     (starting at 1)
	<LI><B>IS_NULLABLE</B> String => \"NO\" means column definitely 
     does not allow NULL values; \"YES\" means the column might 
     allow NULL values.  An empty string means unknown.
 <LI><B>SCOPE_CATALOG</B> String => catalog of table that is the
     scope of a reference attribute (<code>null</code> if DATA_TYPE isn't REF)
 <LI><B>SCOPE_SCHEMA</B> String => schema of table that is the 
     scope of a reference attribute (<code>null</code> if DATA_TYPE isn't REF)
 <LI><B>SCOPE_TABLE</B> String => table name that is the scope of a 
     reference attribute (<code>null</code> if the DATA_TYPE isn't REF)
<LI><B>SOURCE_DATA_TYPE</B> short => source type of a distinct type or user-generated
     Ref type,SQL type from java.sql.Types (<code>null</code> if DATA_TYPE 
     isn't DISTINCT or user-generated REF)
 </OL>
@param catalog a catalog name; must match the catalog name as it
       is stored in the database; \"\" retrieves those without a catalog;
       <code>null</code> means that the catalog name should not be used to narrow
       the search
@param schemaPattern a schema name pattern; must match the schema name
       as it is stored in the database; \"\" retrieves those without a schema;
       <code>null</code> means that the schema name should not be used to narrow
       the search
@param typeNamePattern a type name pattern; must match the
       type name as it is stored in the database 
@param attributeNamePattern an attribute name pattern; must match the attribute
       name as it is declared in the database
@return a <code>ResultSet</code> object in which each row is an 
        attribute description
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7745563 "supportsResultSetHoldability"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "holdability" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports the given result set holdability.

@param holdability one of the following constants:
         <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
         <code>ResultSet.CLOSE_CURSORS_AT_COMMIT<code>
@return <code>true</code> if so; <code>false</code> otherwise 
@exception SQLException if a database access error occurs
@see Connection
@since 1.4"
      end

      operation 7745691 "getResultSetHoldability"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the default holdability of this <code>ResultSet</code>
object.

@return the default holdability; either 
        <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
        <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7745819 "getDatabaseMajorVersion"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the major version number of the underlying database.

@return the underlying database's major version
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7745947 "getDatabaseMinorVersion"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the minor version number of the underlying database.

@return underlying database's minor version
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7746075 "getJDBCMajorVersion"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the major JDBC version number for this
driver.

@return JDBC version major number
@exception SQLException if a database access error occurs
@since 1.4"
      end

      operation 7746203 "getJDBCMinorVersion"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the minor JDBC version number for this
driver.

@return JDBC version minor number
@exception SQLException if a database access error occurs
@since 1.4"
      end

      attribute 2873627 "sqlStateXOpen"
	public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the value is an
X/Open (now know as Open Group) SQL CLI SQLSTATE value.
<P>
A possible return value for the method
<code>SQLException.getSQLState</code>.
@since 1.4
"
      end

      attribute 2873755 "sqlStateSQL99"
	public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the value is an SQL99 SQLSTATE value.
<P>
A possible return value for the method
<code>SQLException.getSQLState</code>.
@since 1.4
"
      end

      operation 7746331 "getSQLStateType"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the SQLSTATE returned by <code>SQLException.getSQLState</code>
is X/Open (now known as Open Group) SQL CLI or SQL99.
@return the type of SQLSTATE; one of:
       sqlStateXOpen or
       sqlStateSQL99
@throws SQLException if a database access error occurs 
@since 1.4"
      end

      operation 7746459 "locatorsUpdateCopy"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether updates made to a LOB are made on a copy or directly 
to the LOB.
@return <code>true</code> if updates are made to a copy of the LOB;
        <code>false</code> if updates are made directly to the LOB
@throws SQLException if a database access error occurs
@since 1.4"
      end

      operation 7746587 "supportsStatementPooling"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this database supports statement pooling.

@return <code>true</code> if so; <code>false</code> otherwise
@throws SQLExcpetion if a database access error occurs
@since 1.4"
      end
    end

    class 982171 "Savepoint"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The representation of a savepoint, which is a point within
the current transaction that can be referenced from the 
<code>Connection.rollback</code> method. When a transaction
is rolled back to a savepoint all changes made after that
savepoint are undone.
<p>
Savepoints can be either named or unnamed. Unnamed savepoints
are identified by an ID generated by the underlying data source.

@since 1.4"
      operation 7775387 "getSavepointId"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the generated ID for the savepoint that this 
<code>Savepoint</code> object represents.
@return the numeric ID of this savepoint
@exception SQLException if this is a named savepoint
@since 1.4"
      end

      operation 7775515 "getSavepointName"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the name of the savepoint that this <code>Savepoint</code>
object represents.
@return the name of this savepoint
@exception SQLException if this is an un-named savepoint
@since 1.4"
      end
    end

    class 982299 "DataTruncation"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception that reports a
DataTruncation warning (on reads) or throws a DataTruncation exception
(on writes) when JDBC unexpectedly truncates a data value.

<P>The SQLstate for a <code>DataTruncation</code> is <code>01004</code>."
      classrelation 1908123 // <generalisation>
	relation 1908123 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1908123 // <generalisation>
	  b parent class_ref 980891 // SQLWarning
      end

      operation 7747483 "DataTruncation"
	public explicit_return_type ""
	nparams 5
	  param in name "index" explicit_type "int"
	  param inout name "parameter" explicit_type "boolean"
	  param inout name "read" explicit_type "boolean"
	  param in name "dataSize" explicit_type "int"
	  param in name "transferSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>DataTruncation</code> object 
with the SQLState initialized
to 01004, the reason set to \"Data truncation\", the
vendorCode set to the SQLException default, and
the other fields set to the given values.

@param index The index of the parameter or column value
@param parameter true if a parameter value was truncated
@param read true if a read was truncated
@param dataSize the original size of the data
@param transferSize the size after truncation "
      end

      operation 7747611 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the index of the column or parameter that was truncated.

<P>This may be -1 if the column or parameter index is unknown, in 
which case the <code>parameter</code> and <code>read</code> fields should be ignored.

@return the index of the truncated paramter or column value"
      end

      operation 7747739 "getParameter"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the value truncated was a parameter value or
a column value.

@return <code>true</code> if the value truncated was a parameter;
        <code>false</code> if it was a column value"
      end

      operation 7747867 "getRead"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the value was truncated on a read.

@return <code>true</code> if the value was truncated when read from
        the database; <code>false</code> if the data was truncated on a write"
      end

      operation 7747995 "getDataSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of bytes of data that should have been transferred.
This number may be approximate if data conversions were being
performed.  The value may be <code>-1</code> if the size is unknown.

@return the number of bytes of data that should have been transferred"
      end

      operation 7748123 "getTransferSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of bytes of data actually transferred.
The value may be <code>-1</code> if the size is unknown.

@return the number of bytes of data actually transferred"
      end

      attribute 2873883 "index"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
"
      end

      attribute 2874011 "parameter"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
"
      end

      attribute 2874139 "read"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
"
      end

      attribute 2874267 "dataSize"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
"
      end

      attribute 2874395 "transferSize"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
"
      end
    end

    class 982427 "Driver"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The interface that every driver class must implement.
<P>The Java SQL framework allows for multiple database drivers.

<P>Each driver should supply a class that implements
the Driver interface.

<P>The DriverManager will try to load as many drivers as it can
find and then for any given connection request, it will ask each
driver in turn to try to connect to the target URL.

<P>It is strongly recommended that each Driver class should be
small and standalone so that the Driver class can be loaded and
queried without bringing in vast quantities of supporting code.

<P>When a Driver class is loaded, it should create an instance of
itself and register it with the DriverManager. This means that a
user can load and register a driver by calling
<pre>
  <code>Class.forName(\"foo.bah.Driver\")</code>
</pre>

@see DriverManager
@see Connection "
      operation 7749659 "connect"
	public return_type class_ref 981019 // Connection
	nparams 2
	  param in name "url" explicit_type "String"
	  param inout name "info" type class_ref 154907 // Properties
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to make a database connection to the given URL.
The driver should return \"null\" if it realizes it is the wrong kind
of driver to connect to the given URL.  This will be common, as when
the JDBC driver manager is asked to connect to a given URL it passes
the URL to each loaded driver in turn.

<P>The driver should throw an <code>SQLException</code> if it is the right 
driver to connect to the given URL but has trouble connecting to
the database.

<P>The <code>java.util.Properties</code> argument can be used to pass
arbitrary string tag/value pairs as connection arguments.
Normally at least \"user\" and \"password\" properties should be
included in the <code>Properties</code> object.

@param url the URL of the database to which to connect
@param info a list of arbitrary string tag/value pairs as
connection arguments. Normally at least a \"user\" and
\"password\" property should be included.
@return a <code>Connection</code> object that represents a
        connection to the URL
@exception SQLException if a database access error occurs"
      end

      operation 7749787 "acceptsURL"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "url" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the driver thinks that it can open a connection
to the given URL.  Typically drivers will return <code>true</code> if they
understand the subprotocol specified in the URL and <code>false</code> if
they do not.

@param url the URL of the database
@return <code>true</code> if this driver understands the given URL;
        <code>false</code> otherwise  
@exception SQLException if a database access error occurs"
      end

      operation 7749915 "getPropertyInfo"
	public return_type class_ref 982555 // DriverPropertyInfo
	nparams 2
	  param in name "url" explicit_type "String"
	  param inout name "info" type class_ref 154907 // Properties
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets information about the possible properties for this driver.
<P>
The <code>getPropertyInfo</code> method is intended to allow a generic 
GUI tool to discover what properties it should prompt 
a human for in order to get 
enough information to connect to a database.  Note that depending on
the values the human has supplied so far, additional values may become
necessary, so it may be necessary to iterate though several calls
to the <code>getPropertyInfo</code> method.

@param url the URL of the database to which to connect
@param info a proposed list of tag/value pairs that will be sent on
         connect open
@return an array of <code>DriverPropertyInfo</code> objects describing 
         possible properties.  This array may be an empty array if 
         no properties are required.
@exception SQLException if a database access error occurs"
      end

      operation 7750043 "getMajorVersion"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the driver's major version number. Initially this should be 1.

@return this driver's major version number"
      end

      operation 7750171 "getMinorVersion"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the driver's minor version number. Initially this should be 0.
@return this driver's minor version number"
      end

      operation 7750299 "jdbcCompliant"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports whether this driver is a genuine JDBC
Compliant<sup><font size=-2>TM</font></sup> driver.
A driver may only report <code>true</code> here if it passes the JDBC
compliance tests; otherwise it is required to return <code>false</code>.
<P>
JDBC compliance requires full support for the JDBC API and full support
for SQL 92 Entry Level.  It is expected that JDBC compliant drivers will
be available for all the major commercial databases.
<P>
This method is not intended to encourage the development of non-JDBC
compliant drivers, but is a recognition of the fact that some vendors
are interested in using the JDBC API and framework for lightweight
databases that do not support full database functionality, or for
special databases such as document information retrieval where a SQL
implementation may not be feasible.
@return <code>true</code> if this driver is JDBC Compliant; <code>false</code>
        otherwise"
      end
    end

    class 982555 "DriverPropertyInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>Driver properties for making a connection. The
<code>DriverPropertyInfo</code> class is of interest only to advanced programmers
who need to interact with a Driver via the method
<code>getDriverProperties</code> to discover
and supply properties for connections."
      operation 7753115 "DriverPropertyInfo"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "value" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>DriverPropertyInfo</code> object with a name and value;
other members default to their initial values.

@param name the name of the property
@param value the current value, which may be null"
      end

      attribute 2875163 "name"
	public explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The name of the property.
"
      end

      attribute 2875291 "description"
	public explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A brief description of the property, which may be null.
"
      end

      attribute 2875419 "required"
	public explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>required</code> field is <code>true</code> if a value must be 
supplied for this property
during <code>Driver.connect</code> and <code>false</code> otherwise.
"
      end

      attribute 2875547 "value"
	public explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>value</code> field specifies the current value of 
the property, based on a combination of the information
supplied to the method <code>getPropertyInfo</code>, the
Java environment, and the driver-supplied default values.  This field
may be null if no value is known.
"
      end

      attribute 2875675 "choices"
	public explicit_type "String"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "An array of possible values if the value for the field 
<code>DriverPropertyInfo.value</code> may be selected
from a particular set of values; otherwise null.
"
      end
    end

    class 982683 "DriverManager"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<P>The basic service for managing a set of JDBC drivers.<br>
<B>NOTE:</B> The {@link <code>DataSource</code>} interface, new in the
JDBC 2.0 API, provides another way to connect to a data source.
The use of a <code>DataSource</code> object is the preferred means of
connecting to a data source. 

<P>As part of its initialization, the <code>DriverManager</code> class will
attempt to load the driver classes referenced in the \"jdbc.drivers\"
system property. This allows a user to customize the JDBC Drivers
used by their applications. For example in your
~/.hotjava/properties file you might specify:
<pre>
<CODE>jdbc.drivers=foo.bah.Driver:wombat.sql.Driver:bad.taste.ourDriver</CODE>
</pre>

A program can also explicitly load JDBC drivers at any time. For
example, the my.sql.Driver is loaded with the following statement:
<pre>
<CODE>Class.forName(\"my.sql.Driver\");</CODE>
</pre>

<P>When the method <code>getConnection</code> is called,
the <code>DriverManager</code> will attempt to
locate a suitable driver from amongst those loaded at
initialization and those loaded explicitly using the same classloader
as the current applet or application.
<P>
Starting with the Java 2 SDK, Standard Edition, version 1.3, a
logging stream can be set only if the proper
permission has been granted.  Normally this will be done with
the tool PolicyTool, which can be used to grant <code>permission
java.sql.SQLPermission \"setLog\"</code>.
@see Driver
@see Connection "
      classrelation 1908379 // SET_LOG_PERMISSION (<unidirectional association>)
	relation 1908379 --->
	  a role_name "SET_LOG_PERMISSION" init_value "=  
        new SQLPermission(\"setLog\")" class_relation const_relation package
	    comment "
The <code>SQLPermission</code> constant that allows the 
setting of the logging stream.
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1908379 // SET_LOG_PERMISSION (<unidirectional association>)
	  b parent class_ref 982811 // SQLPermission
      end

      operation 7750427 "getLogWriter"
	class_operation public return_type class_ref 221595 // PrintWriter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------JDBC 2.0-----------------------------

Retrieves the log writer.  

The <code>getLogWriter</code> and <code>setLogWriter</code> 
methods should be used instead
of the <code>get/setlogStream</code> methods, which are deprecated.
@return a <code>java.io.PrintWriter</code> object 
@see #setLogWriter
@since 1.2"
      end

      operation 7750555 "setLogWriter"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 221595 // PrintWriter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the logging/tracing <code>PrintWriter</code> object
that is used by the <code>DriverManager</code> and all drivers.
<P>
There is a minor versioning problem created by the introduction
of the method <code>setLogWriter</code>.  The 
method <code>setLogWriter</code> cannot create a <code>PrintStream</code> object
that will be returned by <code>getLogStream</code>---the Java platform does
not provide a backward conversion.  As a result, a new application
that uses <code>setLogWriter</code> and also uses a JDBC 1.0 driver that uses
<code>getLogStream</code> will likely not see debugging information written 
by that driver.
<P>
In the Java 2 SDK, Standard Edition, version 1.3 release, this method checks
to see that there is an <code>SQLPermission</code> object before setting
the logging stream.  If a <code>SecurityManager</code> exists and its
<code>checkPermission</code> method denies setting the log writer, this
method throws a <code>java.lang.SecurityException</code>.

@param out the new logging/tracing <code>PrintStream</code> object;
     <code>null</code> to disable logging and tracing
@throws SecurityException
   if a security manager exists and its
   <code>checkPermission</code> method denies
   setting the log writer

@see SecurityManager#checkPermission
@see #getLogWriter
@since 1.2"
      end

      operation 7750683 "getConnection"
	class_operation public return_type class_ref 981019 // Connection
	nparams 2
	  param in name "url" explicit_type "String"
	  param inout name "info" type class_ref 154907 // Properties
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "---------------------------------------------------------------

Attempts to establish a connection to the given database URL.
The <code>DriverManager</code> attempts to select an appropriate driver from
the set of registered JDBC drivers.

@param url a database url of the form 
<code> jdbc:<em>subprotocol</em>:<em>subname</em></code>
@param info a list of arbitrary string tag/value pairs as
connection arguments; normally at least a \"user\" and
\"password\" property should be included
@return a Connection to the URL 
@exception SQLException if a database access error occurs"
      end

      operation 7750811 "getConnection"
	class_operation public return_type class_ref 981019 // Connection
	nparams 3
	  param in name "url" explicit_type "String"
	  param in name "user" explicit_type "String"
	  param in name "password" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to establish a connection to the given database URL.
The <code>DriverManager</code> attempts to select an appropriate driver from
the set of registered JDBC drivers.

@param url a database url of the form 
<code>jdbc:<em>subprotocol</em>:<em>subname</em></code>
@param user the database user on whose behalf the connection is being
  made
@param password the user's password
@return a connection to the URL 
@exception SQLException if a database access error occurs"
      end

      operation 7750939 "getConnection"
	class_operation public return_type class_ref 981019 // Connection
	nparams 1
	  param in name "url" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to establish a connection to the given database URL.
The <code>DriverManager</code> attempts to select an appropriate driver from
the set of registered JDBC drivers.

@param url a database url of the form 
 <code> jdbc:<em>subprotocol</em>:<em>subname</em></code>
@return a connection to the URL 
@exception SQLException if a database access error occurs"
      end

      operation 7751067 "getDriver"
	class_operation public return_type class_ref 982427 // Driver
	nparams 1
	  param in name "url" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to locate a driver that understands the given URL.
The <code>DriverManager</code> attempts to select an appropriate driver from
the set of registered JDBC drivers. 

@param url a database URL of the form 
    <code>jdbc:<em>subprotocol</em>:<em>subname</em></code>
@return a <code>Driver</code> object representing a driver
that can connect to the given URL 
@exception SQLException if a database access error occurs"
      end

      operation 7751195 "registerDriver"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "driver" type class_ref 982427 // Driver
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the given driver with the <code>DriverManager</code>.
A newly-loaded driver class should call
the method <code>registerDriver</code> to make itself
known to the <code>DriverManager</code>.

@param driver the new JDBC Driver that is to be registered with the
              <code>DriverManager</code>
@exception SQLException if a database access error occurs"
      end

      operation 7751323 "deregisterDriver"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "driver" type class_ref 982427 // Driver
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Drops a driver from the <code>DriverManager</code>'s list.  Applets can only
deregister drivers from their own classloaders.

@param driver the JDBC Driver to drop 
@exception SQLException if a database access error occurs"
      end

      operation 7751451 "getDrivers"
	class_operation public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Driver> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an Enumeration with all of the currently loaded JDBC drivers
to which the current caller has access.

<P><B>Note:</B> The classname of a driver can be found using
<CODE>d.getClass().getName()</CODE>

@return the list of JDBC Drivers loaded by the caller's class loader"
      end

      operation 7751579 "setLoginTimeout"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum time in seconds that a driver will wait
while attempting to connect to a database.  

@param seconds the login time limit in seconds
@see #getLoginTimeout"
      end

      operation 7751707 "getLoginTimeout"
	class_operation public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the maximum time in seconds that a driver can wait
when attempting to log in to a database.

@return the driver login time limit in seconds
@see #setLoginTimeout"
      end

      operation 7751835 "setLogStream"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 162843 // PrintStream
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the logging/tracing PrintStream that is used
by the <code>DriverManager</code>
and all drivers.
<P>
In the Java 2 SDK, Standard Edition, version 1.3 release, this method checks
to see that there is an <code>SQLPermission</code> object before setting
the logging stream.  If a <code>SecurityManager</code> exists and its
<code>checkPermission</code> method denies setting the log writer, this
method throws a <code>java.lang.SecurityException</code>.

@param out the new logging/tracing PrintStream; to disable, set to <code>null</code>
@deprecated
@throws SecurityException if a security manager exists and its
   <code>checkPermission</code> method denies setting the log stream

@see SecurityManager#checkPermission
@see #getLogStream"
      end

      operation 7751963 "getLogStream"
	class_operation public return_type class_ref 162843 // PrintStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Retrieves the logging/tracing PrintStream that is used by the <code>DriverManager</code>
and all drivers.

@return the logging/tracing PrintStream; if disabled, is <code>null</code>
@deprecated
@see #setLogStream"
      end

      operation 7752091 "println"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a message to the current JDBC log stream.

@param message a log or tracing message"
      end

      operation 7752219 "getCallerClass"
	class_operation private return_type class_ref 164635 // Class
	nparams 2
	  param inout name "callerClassLoader" type class_ref 163611 // ClassLoader
	  param in name "driverClassName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------------------------------------------------------
 Returns the class object that would be created if the code calling the 
 driver manager had loaded the driver class, or null if the class
 is inaccessible."
      end

      operation 7752347 "loadInitialDrivers"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7752475 "getConnection"
	class_operation private return_type class_ref 981019 // Connection
	nparams 3
	  param in name "url" explicit_type "String"
	  param inout name "info" type class_ref 154907 // Properties
	  param inout name "callerCL" type class_ref 163611 // ClassLoader
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Worker method called by the public getConnection() methods."
      end

      operation 7752603 "initialize"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Class initialization."
      end

      operation 7752731 "DriverManager"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Prevent the DriverManager class from being instantiated."
      end

      classrelation 1908507 // drivers (<unidirectional association>)
	relation 1908507 --->
	  a role_name "drivers" init_value "=  new java.util.Vector()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1908507 // drivers (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      attribute 2874651 "loginTimeout"
	class_attribute private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1908635 // logWriter (<unidirectional association>)
	relation 1908635 --->
	  a role_name "logWriter" init_value "=  null" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1908635 // logWriter (<unidirectional association>)
	  b parent class_ref 221595 // PrintWriter
      end

      classrelation 1908763 // logStream (<unidirectional association>)
	relation 1908763 --->
	  a role_name "logStream" init_value "=  null" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1908763 // logStream (<unidirectional association>)
	  b parent class_ref 162843 // PrintStream
      end

      attribute 2874779 "initialized"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2874907 "logSync"
	class_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7752859 "getCallerClassLoader"
	class_operation private return_type class_ref 163611 // ClassLoader
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the caller's class loader, or null if none"
      end
    end

    class 982811 "SQLPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The permission for which the <code>SecurityManager</code> will check
when code that is running in an applet calls the 
<code>DriverManager.setLogWriter</code> method or the
<code>DriverManager.setLogStream</code> (deprecated) method.
If there is no <code>SQLPermission</code> object, these methods
throw a <code>java.lang.SecurityException</code> as a runtime exception.
<P> 
A <code>SQLPermission</code> object contains
a name (also referred to as a \"target name\") but no actions
list; there is either a named permission or there is not.
The target name is the name of the permission (see below). The
naming convention follows the  hierarchical property naming convention.
In addition, an asterisk
may appear at the end of the name, following a \".\", or by itself, to
signify a wildcard match. For example: <code>loadLibrary.*</code>
or <code>*</code> is valid,
but <code>*loadLibrary</code> or <code>a*b</code> is not valid.
<P>
The following table lists all the possible <code>SQLPermission</code> target names.
Currently, the only name allowed is <code>setLog</code>.
The table gives a description of what the permission allows
and a discussion of the risks of granting code the permission.
<P>

<table border=1 cellpadding=5 summary=\"permission target name, what the permission allows, and associated risks\">
<tr>
<th>Permission Target Name</th>
<th>What the Permission Allows</th>
<th>Risks of Allowing this Permission</th>
</tr>

<tr>
  <td>setLog</td>
  <td>Setting of the logging stream</td>
  <td>This is a dangerous permission to grant.
The contents of the log may contain usernames and passwords,
SQL statements, and SQL data.</td>
</tr>

</table>

The person running an applet decides what permissions to allow
and will run the <code>Policy Tool</code> to create an
<code>SQLPermission</code> in a policy file.  A programmer does
not use a constructor directly to create an instance of <code>SQLPermission</code>
but rather uses a tool.
@since 1.3
@see java.security.BasicPermission
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager
"
      classrelation 1909147 // <generalisation>
	relation 1909147 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1909147 // <generalisation>
	  b parent class_ref 285083 // BasicPermission
      end

      operation 7781915 "SQLPermission"
	public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SQLPermission</code> object with the specified name.
The name is the symbolic name of the <code>SQLPermission</code>; currently,
the only name allowed is \"setLog\".

@param name the name of this <code>SQLPermission</code> object, which must
            be <code>setLog</code>"
      end

      operation 7782043 "SQLPermission"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "actions" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SQLPermission</code> object with the specified name.
The name is the symbolic name of the <code>SQLPermission</code>; the
actions <code>String</code> is currently unused and should be
<code>null</code>.

@param name the name of this <code>SQLPermission</code> object, which must
            be <code>setLog</code>
@param actions should be <code>null</code>"
      end

      attribute 2878363 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -1439323187199563495L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Private serial version unique ID to ensure serialization
compatibility.
"
      end
    end

    class 982939 "DriverInfo"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " DriverInfo is a package-private support class."
      classrelation 1908891 // driver (<unidirectional association>)
	relation 1908891 --->
	  a role_name "driver" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1908891 // driver (<unidirectional association>)
	  b parent class_ref 982427 // Driver
      end

      classrelation 1909019 // driverClass (<unidirectional association>)
	relation 1909019 --->
	  a role_name "driverClass" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1909019 // driverClass (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      attribute 2875035 "driverClassName"
	package explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7752987 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 983067 "SQLData"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The interface used for the custom mapping of an SQL user-defined type (UDT) to
a class in the Java programming language. The class object for a class
implementing the <code>SQLData</code> interface will be entered in the
appropriate <code>Connection</code> object's type map along with the SQL
name of the UDT for which it is a custom mapping.
<P>
Typically, a <code>SQLData</code> implementation
will define a field for each attribute of an SQL structured type or a
single field for an SQL <code>DISTINCT</code> type. When the UDT is
retrieved from a data source with the <code>ResultSet.getObject</code>
method, it will be mapped as an instance of this class.  A programmer
can operate on this class instance just as on any other object in the
Java programming language and then store any changes made to it by
calling the <code>PreparedStatement.setObject</code> method,
which will map it back to the SQL type.
<p>
It is expected that the implementation of the class for a custom
mapping will be done by a tool.  In a typical implementation, the
programmer would simply supply the name of the SQL UDT, the name of
the class to which it is being mapped, and the names of the fields to
which each of the attributes of the UDT is to be mapped.  The tool will use
this information to implement the <code>SQLData.readSQL</code> and
<code>SQLData.writeSQL</code> methods.  The <code>readSQL</code> method
calls the appropriate <code>SQLInput</code> methods to read
each attribute from an <code>SQLInput</code> object, and the
<code>writeSQL</code> method calls <code>SQLOutput</code> methods
to write each attribute back to the data source via an
<code>SQLOutput</code> object.
<P>
An application programmer will not normally call <code>SQLData</code> methods
directly, and the <code>SQLInput</code> and <code>SQLOutput</code> methods
are called internally by <code>SQLData</code> methods, not by application code.

@since 1.2"
      operation 7775643 "getSQLTypeName"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the fully-qualified 
name of the SQL user-defined type that this object represents.
This method is called by the JDBC driver to get the name of the
UDT instance that is being mapped to this instance of 
<code>SQLData</code>.

@return the type name that was passed to the method <code>readSql</code>
           when this object was constructed and populated
@exception SQLException if there is a database access error
@since 1.2"
      end

      operation 7775771 "readSQL"
	public explicit_return_type "void"
	nparams 2
	  param inout name "stream" type class_ref 983195 // SQLInput
	  param in name "typeName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Populates this object with data read from the database.
The implementation of the method must follow this protocol:
<UL> 
<LI>It must read each of the attributes or elements of the SQL
type  from the given input stream.  This is done 
by calling a method of the input stream to read each
item, in the order that they appear in the SQL definition
of the type.  
<LI>The method <code>readSQL</code> then
assigns the data to appropriate fields or 
elements (of this or other objects).
Specifically, it must call the appropriate <i>reader</i> method 
(<code>SQLInput.readString</code>, <code>SQLInput.readBigDecimal</code>,
and so on) method(s) to do the following:
for a distinct type, read its single data element;
for a structured type, read a value for each attribute of the SQL type.
</UL>  
The JDBC driver initializes the input stream with a type map
before calling this method, which is used by the appropriate
<code>SQLInput</code> reader method on the stream.

@param stream the <code>SQLInput</code> object from which to read the data for
the value that is being custom mapped
@param typeName the SQL type name of the value on the data stream
@exception SQLException if there is a database access error
@see SQLInput"
      end

      operation 7775899 "writeSQL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 983323 // SQLOutput
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes this object to the given SQL data stream, converting it back to
its SQL value in the data source.
The implementation of the method must follow this protocol:<BR>
It must write each of the attributes of the SQL type
to the given output stream.  This is done by calling a 
method of the output stream to write each item, in the order that 
they appear in the SQL definition of the type.
Specifically, it must call the appropriate <code>SQLOutput</code> writer
method(s) (<code>writeInt</code>, <code>writeString</code>, and so on)
to do the following: for a Distinct Type, write its single data element;
for a Structured Type, write a value for each attribute of the SQL type.

@param stream the <code>SQLOutput</code> object to which to write the data for
the value that was custom mapped
@exception SQLException if there is a database access error
@see SQLOutput
@since 1.2"
      end
    end

    class 983195 "SQLInput"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An input stream that contains a stream of values representing an 
instance of an SQL structured type or an SQL distinct type.
This interface, used only for custom mapping, is used by the driver
behind the scenes, and a programmer never directly invokes
<code>SQLInput</code> methods. The <i>reader</i> methods 
(<code>readLong</code>, <code>readBytes</code>, and so on) 
provide a way to read the values in an <code>SQLInput</code> object.
The method <code>wasNull</code> is used to determine whether the 
the last value read was SQL <code>NULL</code>.
<P>When the method <code>getObject</code> is called with an
object of a class implementing the interface <code>SQLData</code>,
the JDBC driver calls the method <code>SQLData.getSQLType</code>
to determine the SQL type of the user-defined type (UDT)
being custom mapped. The driver
creates an instance of <code>SQLInput</code>, populating it with the
attributes of the UDT.  The driver then passes the input
stream to the method <code>SQLData.readSQL</code>, which in turn 
calls the <code>SQLInput</code> reader methods 
in its implementation for reading the
attributes from the input stream.
@since 1.2"
      operation 7776027 "readString"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Methods for reading attributes from the stream of SQL data.
 These methods correspond to the column-accessor methods of
 java.sql.ResultSet.
================================================================

Reads the next attribute in the stream and returns it as a <code>String</code> 
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7776155 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>boolean</code> 
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>false</code>
@exception SQLException if a database access error occurs"
      end

      operation 7776283 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>byte</code> 
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7776411 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>short</code> 
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7776539 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as an <code>int</code> 
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7776667 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>long</code> 
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7776795 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>float</code> 
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7776923 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>double</code> 
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
@exception SQLException if a database access error occurs"
      end

      operation 7777051 "readBigDecimal"
	public return_type class_ref 178459 // BigDecimal
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>java.math.BigDecimal</code> 
object in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7777179 "readBytes"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as an array of bytes
in the Java programming language.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7777307 "readDate"
	public return_type class_ref 981147 // Date
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>java.sql.Date</code> object.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7777435 "readTime"
	public return_type class_ref 981275 // Time
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>java.sql.Time</code> object.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7777563 "readTimestamp"
	public return_type class_ref 981403 // Timestamp
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a <code>java.sql.Timestamp</code> object.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7777691 "readCharacterStream"
	public return_type class_ref 364827 // Reader
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a stream of Unicode characters.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7777819 "readAsciiStream"
	public return_type class_ref 179099 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a stream of ASCII characters.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7777947 "readBinaryStream"
	public return_type class_ref 179099 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream and returns it as a stream of uninterpreted
bytes.

@return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
@exception SQLException if a database access error occurs"
      end

      operation 7778075 "readObject"
	public explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Methods for reading items of SQL user-defined types from the stream.
================================================================

Reads the datum at the head of the stream and returns it as an
<code>Object</code> in the Java programming language.  The
actual type of the object returned is determined by the default type
mapping, and any customizations present in this stream's type map.

<P>A type map is registered with the stream by the JDBC driver before the
stream is passed to the application.

<P>When the datum at the head of the stream is an SQL <code>NULL</code>, 
the method returns <code>null</code>.  If the datum is an SQL structured or distinct
type, it determines the SQL type of the datum at the head of the stream. 
If the stream's type map has an entry for that SQL type, the driver
constructs an object of the appropriate class and calls the method 
<code>SQLData.readSQL</code> on that object, which reads additional data from the 
stream, using the protocol described for that method.

@return the datum at the head of the stream as an <code>Object</code> in the
Java programming language;<code>null</code> if the datum is SQL <code>NULL</code>
@exception SQLException if a database access error occurs"
      end

      operation 7778203 "readRef"
	public return_type class_ref 981531 // Ref
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an SQL <code>REF</code> value from the stream and returns it as a
<code>Ref</code> object in the Java programming language.

@return a <code>Ref</code> object representing the SQL <code>REF</code> value
at the head of the stream; <code>null</code> if the value read is 
SQL <code>NULL</code>
@exception SQLException if a database access error occurs"
      end

      operation 7778331 "readBlob"
	public return_type class_ref 980379 // Blob
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an SQL <code>BLOB</code> value from the stream and returns it as a
<code>Blob</code> object in the Java programming language.

@return a <code>Blob</code> object representing data of the SQL <code>BLOB</code> value
at the head of the stream; <code>null</code> if the value read is 
SQL <code>NULL</code>
@exception SQLException if a database access error occurs"
      end

      operation 7778459 "readClob"
	public return_type class_ref 981659 // Clob
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an SQL <code>CLOB</code> value from the stream and returns it as a
<code>Clob</code> object in the Java programming language.

@return a <code>Clob</code> object representing data of the SQL <code>CLOB</code> value
at the head of the stream; <code>null</code> if the value read is 
SQL <code>NULL</code>
@exception SQLException if a database access error occurs"
      end

      operation 7778587 "readArray"
	public return_type class_ref 979867 // Array
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an SQL <code>ARRAY</code> value from the stream and returns it as an
<code>Array</code> object in the Java programming language.

@return an <code>Array</code> object representing data of the SQL
<code>ARRAY</code> value at the head of the stream; <code>null</code>
if the value read is SQL <code>NULL</code>
@exception SQLException if a database access error occurs"
      end

      operation 7778715 "wasNull"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether the last value read was SQL <code>NULL</code>.

@return <code>true</code> if the most recently read SQL value was SQL
<code>NULL</code>; <code>false</code> otherwise
@exception SQLException if a database access error occurs
"
      end

      operation 7778843 "readURL"
	public return_type class_ref 269467 // URL
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "---------------------------- JDBC 3.0 -------------------------

Reads an SQL <code>DATALINK</code> value from the stream and returns it as a
<code>java.net.URL</code> object in the Java programming language.

@return a <code>java.net.URL</code> object.
@exception SQLException if a database access error occurs,
           or if a URL is malformed
@since 1.4"
      end
    end

    class 983323 "SQLOutput"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The output stream for writing the attributes of a user-defined
type back to the database.  This interface, used 
only for custom mapping, is used by the driver, and its
methods are never directly invoked by a programmer.
<p>When an object of a class implementing the interface
<code>SQLData</code> is passed as an argument to an SQL statement, the
JDBC driver calls the method <code>SQLData.getSQLType</code> to
determine the  kind of SQL
datum being passed to the database.
The driver then creates an instance of <code>SQLOutput</code> and
passes it to the method <code>SQLData.writeSQL</code>.
The method <code>writeSQL</code> in turn calls the
appropriate <code>SQLOutput</code> <i>writer</i> methods 
<code>writeBoolean</code>, <code>writeCharacterStream</code>, and so on)
to write data from the <code>SQLData</code> object to
the <code>SQLOutput</code> output stream as the 
representation of an SQL user-defined type.
@since 1.2"
      operation 7778971 "writeString"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Methods for writing attributes to the stream of SQL data.
 These methods correspond to the column-accessor methods of
 java.sql.ResultSet.
================================================================

Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7779099 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a Java boolean.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7779227 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a Java byte.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7779355 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a Java short.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7779483 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a Java int.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7779611 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a Java long.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7779739 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a Java float.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7779867 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a Java double.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7779995 "writeBigDecimal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 178459 // BigDecimal
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a java.math.BigDecimal object.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7780123 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as an array of bytes.
Writes the next attribute to the stream as a <code>String</code>
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7780251 "writeDate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 981147 // Date
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a java.sql.Date object.
Writes the next attribute to the stream as a <code>java.sql.Date</code> object
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7780379 "writeTime"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 981275 // Time
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a java.sql.Time object.
Writes the next attribute to the stream as a <code>java.sql.Date</code> object
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7780507 "writeTimestamp"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 981403 // Timestamp
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a java.sql.Timestamp object.
Writes the next attribute to the stream as a <code>java.sql.Date</code> object
in the Java programming language.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7780635 "writeCharacterStream"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 364827 // Reader
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a stream of Unicode characters.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7780763 "writeAsciiStream"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 179099 // InputStream
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a stream of ASCII characters.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7780891 "writeBinaryStream"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 179099 // InputStream
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the next attribute to the stream as a stream of uninterpreted
bytes.

@param x the value to pass to the database
@exception SQLException if a database access error occurs"
      end

      operation 7781019 "writeObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 983067 // SQLData
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Methods for writing items of SQL user-defined types to the stream.
 These methods pass objects to the database as values of SQL
 Structured Types, Distinct Types, Constructed Types, and Locator
 Types.  They decompose the Java object(s) and write leaf data
 items using the methods above.
================================================================

Writes to the stream the data contained in the given 
<code>SQLData</code> object.
When the <code>SQLData</code> object is <code>null</code>, this
method writes an SQL <code>NULL</code> to the stream.  
Otherwise, it calls the <code>SQLData.writeSQL</code>
method of the given object, which 
writes the object's attributes to the stream.
The implementation of the method <code>SQLData.writeSQ</code>
calls the appropriate <code>SQLOutput</code> writer method(s)
for writing each of the object's attributes in order.
The attributes must be read from an <code>SQLInput</code>
input stream and written to an <code>SQLOutput</code>
output stream in the same order in which they were
listed in the SQL definition of the user-defined type.

@param x the object representing data of an SQL structured or
distinct type
@exception SQLException if a database access error occurs"
      end

      operation 7781147 "writeRef"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 981531 // Ref
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an SQL <code>REF</code> value to the stream.

@param x a <code>Ref</code> object representing data of an SQL
<code>REF</code> value
@exception SQLException if a database access error occurs"
      end

      operation 7781275 "writeBlob"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 980379 // Blob
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an SQL <code>BLOB</code> value to the stream.

@param x a <code>Blob</code> object representing data of an SQL
<code>BLOB</code> value

@exception SQLException if a database access error occurs"
      end

      operation 7781403 "writeClob"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 981659 // Clob
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an SQL <code>CLOB</code> value to the stream.

@param x a <code>Clob</code> object representing data of an SQL
<code>CLOB</code> value

@exception SQLException if a database access error occurs"
      end

      operation 7781531 "writeStruct"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 983451 // Struct
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an SQL structured type value to the stream.

@param x a <code>Struct</code> object representing data of an SQL
structured type 

@exception SQLException if a database access error occurs"
      end

      operation 7781659 "writeArray"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 979867 // Array
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an SQL <code>ARRAY</code> value to the stream.

@param x an <code>Array</code> object representing data of an SQL
<code>ARRAY</code> type

@exception SQLException if a database access error occurs"
      end

      operation 7781787 "writeURL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 269467 // URL
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------- JDBC 3.0 ------------------------
 
Writes a SQL <code>DATALINK</code> value to the stream.

@param x a <code>java.net.URL</code> object representing the data
of SQL DATALINK type

@exception SQLException if a database access error occurs
@since 1.4"
      end
    end

    class 983451 "Struct"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>The standard mapping in the Java programming language for an SQL
structured type. A <code>Struct</code> object contains a
value for each attribute of the SQL structured type that
it represents.
By default, an instance of<code>Struct</code> is valid as long as the 
application has a reference to it.
@since 1.2"
      operation 7782171 "getSQLTypeName"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the SQL type name of the SQL structured type
that this <code>Struct</code> object represents.

@return the fully-qualified type name of the SQL structured 
         type for which this <code>Struct</code> object
         is the generic representation
@exception SQLException if a database access error occurs"
      end

      operation 7782299 "getAttributes"
	public explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces the ordered values of the attributes of the SQL 
structurec type that this <code>Struct</code> object represents.
This method uses the type map associated with the 
connection for customizations of the type mappings.
If there is no
entry in the connection's type map that matches the structured
type that this <code>Struct</code> object represents,
the driver uses the standard mapping.
<p>
Conceptually, this method calls the method
<code>getObject</code> on each attribute
of the structured type and returns a Java array containing 
the result.

@return an array containing the ordered attribute values
@exception SQLException if a database access error occurs"
      end

      operation 7782427 "getAttributes"
	public explicit_return_type "Object"
	nparams 1
	  param inout name "map" type class_ref 136603 // Map
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<String,Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces the ordered values of the attributes of the SQL 
structurec type that this <code>Struct</code> object represents.
This method uses the given type map
for customizations of the type mappings.
If there is no
entry in the given type map that matches the structured
type that this <code>Struct</code> object represents,
the driver uses the standard mapping. This method never
uses the type map associated with the connection.
<p>
Conceptually, this method calls the method
<code>getObject</code> on each attribute
of the structured type and returns a Java array containing
the result.

@param map a mapping of SQL type names to Java classes
@return an array containing the ordered attribute values
@exception SQLException if a database access error occurs"
      end
    end

    class 983579 "Types"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<P>The class that defines the constants that are used to identify generic
SQL types, called JDBC types.
The actual type constant values are equivalent to those in XOPEN.
<p>
This class is never instantiated."
      attribute 2878875 "BIT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=   -7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>BIT</code>.
"
      end

      attribute 2879003 "TINYINT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=   -6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>TINYINT</code>.
"
      end

      attribute 2879131 "SMALLINT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=    5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>SMALLINT</code>.
"
      end

      attribute 2879259 "INTEGER"
	class_attribute const_attribute public explicit_type "int"
	init_value "=    4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>INTEGER</code>.
"
      end

      attribute 2879387 "BIGINT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=   -5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>BIGINT</code>.
"
      end

      attribute 2879515 "FLOAT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=    6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>FLOAT</code>.
"
      end

      attribute 2879643 "REAL"
	class_attribute const_attribute public explicit_type "int"
	init_value "=    7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>REAL</code>.
"
      end

      attribute 2879771 "DOUBLE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=    8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>DOUBLE</code>.
"
      end

      attribute 2879899 "NUMERIC"
	class_attribute const_attribute public explicit_type "int"
	init_value "=    2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>NUMERIC</code>.
"
      end

      attribute 2880027 "DECIMAL"
	class_attribute const_attribute public explicit_type "int"
	init_value "=    3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>DECIMAL</code>.
"
      end

      attribute 2880155 "CHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value "=    1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>CHAR</code>.
"
      end

      attribute 2880283 "VARCHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value "=   12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>VARCHAR</code>.
"
      end

      attribute 2880411 "LONGVARCHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value "=   -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>LONGVARCHAR</code>.
"
      end

      attribute 2880539 "DATE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=   91"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>DATE</code>.
"
      end

      attribute 2880667 "TIME"
	class_attribute const_attribute public explicit_type "int"
	init_value "=   92"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>TIME</code>.
"
      end

      attribute 2880795 "TIMESTAMP"
	class_attribute const_attribute public explicit_type "int"
	init_value "=   93"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>TIMESTAMP</code>.
"
      end

      attribute 2880923 "BINARY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=   -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>BINARY</code>.
"
      end

      attribute 2881051 "VARBINARY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=   -3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>VARBINARY</code>.
"
      end

      attribute 2881179 "LONGVARBINARY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=   -4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>LONGVARBINARY</code>.
"
      end

      attribute 2881307 "NULL"
	class_attribute const_attribute public explicit_type "int"
	init_value "=    0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<P>The constant in the Java programming language, sometimes referred
to as a type code, that identifies the generic SQL type 
<code>NULL</code>.
"
      end

      attribute 2881435 "OTHER"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1111"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant in the Java programming language that indicates
that the SQL type is database-specific and
gets mapped to a Java object that can be accessed via
the methods <code>getObject</code> and <code>setObject</code>.
"
      end

      attribute 2881563 "JAVA_OBJECT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
<code>JAVA_OBJECT</code>.
@since 1.2
"
      end

      attribute 2881691 "DISTINCT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
<code>DISTINCT</code>.
@since 1.2
"
      end

      attribute 2881819 "STRUCT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2002"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
<code>STRUCT</code>.
@since 1.2
"
      end

      attribute 2881947 "ARRAY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2003"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
<code>ARRAY</code>.
@since 1.2
"
      end

      attribute 2882075 "BLOB"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2004"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
<code>BLOB</code>.
@since 1.2
"
      end

      attribute 2882203 "CLOB"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2005"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
<code>CLOB</code>.
@since 1.2
"
      end

      attribute 2882331 "REF"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2006"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant in the Java programming language, sometimes referred to
as a type code, that identifies the generic SQL type
<code>REF</code>.
@since 1.2
"
      end

      attribute 2882459 "DATALINK"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  70"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant in the Java programming language, somtimes referred to
as a type code, that identifies the generic SQL type <code>DATALINK</code>.

@since 1.4
"
      end

      attribute 2882587 "BOOLEAN"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant in the Java programming language, somtimes referred to
as a type code, that identifies the generic SQL type <code>BOOLEAN</code>.

@since 1.4
"
      end

      operation 7785883 "Types"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Prevent instantiation"
      end
    end
  end

  deploymentview 168731 "sql"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 749339 "Array"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 979867 // Array
      end
      comment "@(#)Array.java	1.23 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 749467 "SQLException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 979995 // SQLException
      end
      comment "@(#)SQLException.java	1.27 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 749595 "BatchUpdateException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 980251 // BatchUpdateException
      end
      comment "@(#)BatchUpdateException.java	1.23 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 749723 "Blob"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 980379 // Blob
      end
      comment "@(#)Blob.java	1.28 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 749851 "Statement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 980763 // Statement
      end
      comment "@(#)Statement.java	1.40 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 749979 "PreparedStatement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.math.BigDecimal;
import java.util.Calendar;
${definition}"
      associated_classes
	class_ref 980635 // PreparedStatement
      end
      comment "@(#)PreparedStatement.java	1.44 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 750107 "CallableStatement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.math.BigDecimal;
import java.util.Calendar;
${definition}"
      associated_classes
	class_ref 980507 // CallableStatement
      end
      comment "@(#)CallableStatement.java	1.47 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 750235 "Clob"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 981659 // Clob
      end
      comment "@(#)Clob.java	1.29 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 750363 "Connection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 981019 // Connection
      end
      comment "@(#)Connection.java	1.43 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 750491 "DatabaseMetaData"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 982043 // DatabaseMetaData
      end
      comment "@(#)DatabaseMetaData.java	1.53 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 750619 "SQLWarning"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 980891 // SQLWarning
      end
      comment "@(#)SQLWarning.java	1.25 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 750747 "DataTruncation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 982299 // DataTruncation
      end
      comment "@(#)DataTruncation.java	1.22 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 750875 "Date"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 981147 // Date
      end
      comment "@(#)Date.java	1.33 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 751003 "Driver"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 982427 // Driver
      end
      comment "@(#)Driver.java	1.23 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 751131 "DriverManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 982683 // DriverManager
	class_ref 982939 // DriverInfo
      end
      comment "@(#)DriverManager.java	1.42 04/05/18 

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 751259 "DriverPropertyInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 982555 // DriverPropertyInfo
      end
      comment "@(#)DriverPropertyInfo.java	1.21 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 751387 "ParameterMetaData"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 981915 // ParameterMetaData
      end
      comment "@(#)ParameterMetaData.java	1.11 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 751515 "Ref"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 981531 // Ref
      end
      comment "@(#)Ref.java	1.27 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 751643 "ResultSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.math.BigDecimal;
import java.util.Calendar;
${definition}"
      associated_classes
	class_ref 980123 // ResultSet
      end
      comment "@(#)ResultSet.java	1.49 04/06/28

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 751771 "ResultSetMetaData"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 981787 // ResultSetMetaData
      end
      comment "@(#)ResultSetMetaData.java	1.27 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 751899 "Savepoint"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 982171 // Savepoint
      end
      comment "@(#)Savepoint.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 752027 "SQLData"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 983067 // SQLData
      end
      comment "@(#)SQLData.java	1.20 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 752155 "SQLInput"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 983195 // SQLInput
      end
      comment "@(#)SQLInput.java	1.25 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 752283 "SQLOutput"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 983323 // SQLOutput
      end
      comment "@(#)SQLOutput.java	1.20 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 752411 "SQLPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
${definition}"
      associated_classes
	class_ref 982811 // SQLPermission
      end
      comment "@(#)SQLPermission.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 752539 "Struct"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 983451 // Struct
      end
      comment "@(#)Struct.java	1.22 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 752667 "Time"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 981275 // Time
      end
      comment "@(#)Time.java	1.32 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 752795 "Timestamp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 981403 // Timestamp
      end
      comment "@(#)Timestamp.java	1.58 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 752923 "Types"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 983579 // Types
      end
      comment "@(#)Types.java	1.25 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
