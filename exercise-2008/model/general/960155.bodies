class SecureRandom
!!!7606939.java!!!	SecureRandom()
	/*
	 * This call to our superclass constructor will result in a call
	 * to our own <code>setSeed</code> method, which will return
	 * immediately when it is passed zero.
	 */
	super(0);
	getDefaultPRNG(false, null);
!!!7607067.java!!!	SecureRandom(in seed : byte)
	super(0);
	getDefaultPRNG(true, seed);
!!!7607195.java!!!	getDefaultPRNG(inout setSeed : boolean, in seed : byte) : void
	String prng = getPrngAlgorithm();
	if (prng == null) {
	    // bummer, get the SUN implementation
	    prng = "SHA1PRNG";
	    this.secureRandomSpi = new sun.security.provider.SecureRandom();
	    this.provider = new sun.security.provider.Sun();
	    if (setSeed) {
		this.secureRandomSpi.engineSetSeed(seed);
	    }
	} else {
	    try {
		SecureRandom random = SecureRandom.getInstance(prng);
		this.secureRandomSpi = random.getSecureRandomSpi();
		this.provider = random.getProvider();
		if (setSeed) {
		    this.secureRandomSpi.engineSetSeed(seed);
		}
	    } catch (NoSuchAlgorithmException nsae) {
		// never happens, because we made sure the algorithm exists
	    }
	}
	// set algorithm if SecureRandom not subclassed (JDK 1.1 style)
	if (getClass() == SecureRandom.class) {
	    this.algorithm = prng;
	}
!!!7607323.java!!!	SecureRandom(inout secureRandomSpi : SecureRandomSpi, inout provider : Provider)
	this(secureRandomSpi, provider, null);
!!!7607451.java!!!	SecureRandom(inout secureRandomSpi : SecureRandomSpi, inout provider : Provider, in algorithm : String)
	super(0);
	this.secureRandomSpi = secureRandomSpi;
	this.provider = provider;
	this.algorithm = algorithm;
!!!7607579.java!!!	getInstance(in algorithm : String) : SecureRandom
	Instance instance = GetInstance.getInstance("SecureRandom", 
	    SecureRandomSpi.class, algorithm);
	return new SecureRandom((SecureRandomSpi)instance.impl,
	    instance.provider, algorithm);
!!!7607707.java!!!	getInstance(in algorithm : String, in provider : String) : SecureRandom
	Instance instance = GetInstance.getInstance("SecureRandom", 
	    SecureRandomSpi.class, algorithm, provider);
	return new SecureRandom((SecureRandomSpi)instance.impl,
	    instance.provider, algorithm);
!!!7607835.java!!!	getInstance(in algorithm : String, inout provider : Provider) : SecureRandom
	Instance instance = GetInstance.getInstance("SecureRandom", 
	    SecureRandomSpi.class, algorithm, provider);
	return new SecureRandom((SecureRandomSpi)instance.impl,
	    instance.provider, algorithm);
!!!7607963.java!!!	getSecureRandomSpi() : SecureRandomSpi
	return secureRandomSpi;
!!!7608091.java!!!	getProvider() : Provider
	return provider;
!!!7608219.java!!!	getAlgorithm() : String
	return (algorithm != null) ? algorithm : "unknown";
!!!7608347.java!!!	setSeed(in seed : byte) : void
	secureRandomSpi.engineSetSeed(seed);
!!!7608475.java!!!	setSeed(in seed : long) : void
	/* 
	 * Ignore call from super constructor (as well as any other calls
	 * unfortunate enough to be passing 0).  It's critical that we
	 * ignore call from superclass constructor, as digest has not
	 * yet been initialized at that point.
	 */
	if (seed != 0) {
	    secureRandomSpi.engineSetSeed(longToByteArray(seed));
	}
!!!7608603.java!!!	nextBytes(in bytes : byte) : void
	secureRandomSpi.engineNextBytes(bytes);
!!!7608731.java!!!	next(in numBits : int) : int
	int numBytes = (numBits+7)/8;
	byte b[] = new byte[numBytes];
	int next = 0;
 
	nextBytes(b);
	for (int i = 0; i < numBytes; i++)
	    next = (next << 8) + (b[i] & 0xFF);
 
	return next >>> (numBytes*8 - numBits);
!!!7608859.java!!!	getSeed(in numBytes : int) : byte
	if (seedGenerator == null)
	    seedGenerator = new SecureRandom();
	return seedGenerator.generateSeed(numBytes);
!!!7608987.java!!!	generateSeed(in numBytes : int) : byte
	return secureRandomSpi.engineGenerateSeed(numBytes);
!!!7609115.java!!!	longToByteArray(in l : long) : byte
	byte[] retVal = new byte[8];

	for (int i = 0; i < 8; i++) {
	    retVal[i] = (byte) l;
	    l >>= 8;
	}

	return retVal;
!!!7609243.java!!!	getPrngAlgorithm() : String
	List provs = Providers.getProviderList().providers();
	for (Iterator t = provs.iterator(); t.hasNext();) {
	    Provider p = (Provider)t.next();
	    for (Iterator u = p.getServices().iterator(); u.hasNext();) {
		Service s = (Service)u.next();
		if (s.getType().equals("SecureRandom")) {
		    return s.getAlgorithm();
		}
	    }
	}
	return null;
