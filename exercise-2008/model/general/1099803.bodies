class AbstractCellEditor
!!!8831131.java!!!	isCellEditable(inout e : EventObject) : boolean
 
	return true; 
!!!8831259.java!!!	shouldSelectCell(inout anEvent : EventObject) : boolean
 
	return true; 
!!!8831387.java!!!	stopCellEditing() : boolean
 
	fireEditingStopped(); 
	return true;
!!!8831515.java!!!	cancelCellEditing() : void
 
	fireEditingCanceled(); 
!!!8831643.java!!!	addCellEditorListener(inout l : CellEditorListener) : void
	listenerList.add(CellEditorListener.class, l);
!!!8831771.java!!!	removeCellEditorListener(inout l : CellEditorListener) : void
	listenerList.remove(CellEditorListener.class, l);
!!!8831899.java!!!	getCellEditorListeners() : CellEditorListener
        return (CellEditorListener[])listenerList.getListeners(
                CellEditorListener.class);
!!!8832027.java!!!	fireEditingStopped() : void
	// Guaranteed to return a non-null array
	Object[] listeners = listenerList.getListenerList();
	// Process the listeners last to first, notifying
	// those that are interested in this event
	for (int i = listeners.length-2; i>=0; i-=2) {
	    if (listeners[i]==CellEditorListener.class) {
		// Lazily create the event:
		if (changeEvent == null)
		    changeEvent = new ChangeEvent(this);
		((CellEditorListener)listeners[i+1]).editingStopped(changeEvent);
	    }	       
	}
!!!8832155.java!!!	fireEditingCanceled() : void
	// Guaranteed to return a non-null array
	Object[] listeners = listenerList.getListenerList();
	// Process the listeners last to first, notifying
	// those that are interested in this event
	for (int i = listeners.length-2; i>=0; i-=2) {
	    if (listeners[i]==CellEditorListener.class) {
		// Lazily create the event:
		if (changeEvent == null)
		    changeEvent = new ChangeEvent(this);
		((CellEditorListener)listeners[i+1]).editingCanceled(changeEvent);
	    }	       
	}
