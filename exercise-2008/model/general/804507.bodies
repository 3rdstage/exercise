class ToUnknownStream
!!!5755931.java!!!	ToUnknownStream()
        m_handler = new ToXMLStream();
!!!5756059.java!!!	asContentHandler() : ContentHandler
        /* don't return the real handler ( m_handler ) because
         * that would expose the real handler to the outside.
         * Keep m_handler private so it can be internally swapped
         * to an HTML handler.
         */
        return this;
!!!5756187.java!!!	close() : void
        m_handler.close();
!!!5756315.java!!!	getOutputFormat() : Properties
        return m_handler.getOutputFormat();
!!!5756443.java!!!	getOutputStream() : OutputStream
        return m_handler.getOutputStream();
!!!5756571.java!!!	getWriter() : Writer
        return m_handler.getWriter();
!!!5756699.java!!!	reset() : boolean
        return m_handler.reset();
!!!5756827.java!!!	serialize(inout node : Node) : void
        if (m_firstTagNotEmitted)
        {
            flush();
        }
        m_handler.serialize(node);
!!!5756955.java!!!	setEscaping(inout escape : boolean) : boolean
        return m_handler.setEscaping(escape);
!!!5757083.java!!!	setOutputFormat(inout format : Properties) : void
        m_handler.setOutputFormat(format);
!!!5757211.java!!!	setOutputStream(inout output : OutputStream) : void
        m_handler.setOutputStream(output);
!!!5757339.java!!!	setWriter(inout writer : Writer) : void
        m_handler.setWriter(writer);
!!!5757467.java!!!	addAttribute(in uri : String, in localName : String, in rawName : String, in type : String, in value : String) : void
        if (m_firstTagNotEmitted)
        {
            flush();
        }
        m_handler.addAttribute(uri, localName, rawName, type, value);
!!!5757595.java!!!	addAttribute(in rawName : String, in value : String) : void
        if (m_firstTagNotEmitted)
        {
            flush();
        }
        m_handler.addAttribute(rawName, value);
 
!!!5757723.java!!!	addUniqueAttribute(in rawName : String, in value : String, in flags : int) : void
        if (m_firstTagNotEmitted)
        {
            flush();
        }
        m_handler.addUniqueAttribute(rawName, value, flags);
 
!!!5757851.java!!!	characters(in chars : String) : void
        final int length = chars.length();
        if (length > m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);  
!!!5757979.java!!!	endElement(in elementName : String) : void
        if (m_firstTagNotEmitted)
        {
            flush();
        }
        m_handler.endElement(elementName);
!!!5758107.java!!!	startPrefixMapping(in prefix : String, in uri : String) : void
        this.startPrefixMapping(prefix,uri, true);
!!!5758235.java!!!	namespaceAfterStartElement(in prefix : String, in uri : String) : void
  
        // hack for XSLTC with finding URI for default namespace
        if (m_firstTagNotEmitted && m_firstElementURI == null && m_firstElementName != null)
        {
            String prefix1 = getPrefixPart(m_firstElementName);
            if (prefix1 == null && EMPTYSTRING.equals(prefix))
            {
                // the elements URI is not known yet, and it
                // doesn't have a prefix, and we are currently
                // setting the uri for prefix "", so we have
                // the uri for the element... lets remember it
                m_firstElementURI = uri;
            }
        }         
        startPrefixMapping(prefix,uri, false);          
!!!5758363.java!!!	startPrefixMapping(in prefix : String, in uri : String, inout shouldFlush : boolean) : boolean
        boolean pushed = false;
        if (m_firstTagNotEmitted)
        {
            if (m_firstElementName != null && shouldFlush)
            {
                /* we've already seen a startElement, and this is a prefix mapping
                 * for the up coming element, so flush the old element
                 * then send this event on its way.
                 */
                flush();
                pushed = m_handler.startPrefixMapping(prefix, uri, shouldFlush);
            } 
            else 
            {           
                if (m_namespacePrefix == null)
                {
                    m_namespacePrefix = new Vector();
                    m_namespaceURI = new Vector();
                }
                m_namespacePrefix.addElement(prefix);
                m_namespaceURI.addElement(uri);
            
                if (m_firstElementURI == null)
                {
                    if (prefix.equals(m_firstElementPrefix))
                        m_firstElementURI = uri;
                }
            }

        }
        else
        {
           pushed = m_handler.startPrefixMapping(prefix, uri, shouldFlush);
        }
        return pushed;
!!!5758491.java!!!	setVersion(in version : String) : void
        m_handler.setVersion(version);

        // Cache call to setVersion()
        //       super.setVersion(version);
        m_setVersion_called = true;
!!!5758619.java!!!	startDocument() : void
        m_needToCallStartDocument = true;
!!!5758747.java!!!	startElement(in qName : String) : void
        this.startElement(null, null, qName, null);
!!!5758875.java!!!	startElement(in namespaceURI : String, in localName : String, in qName : String) : void
        this.startElement(namespaceURI, localName, qName, null);
!!!5759003.java!!!	startElement(in namespaceURI : String, in localName : String, in elementName : String, inout atts : Attributes) : void
        /* we are notified of the start of an element */
        if (m_firstTagNotEmitted)
        {
            /* we have not yet sent the first element on its way */
            if (m_firstElementName != null) 
            {
                /* this is not the first element, but a later one.
                 * But we have the old element pending, so flush it out,
                 * then send this one on its way. 
                 */
                flush();
                m_handler.startElement(namespaceURI, localName, elementName,  atts);                
            }
            else
            {
                /* this is the very first element that we have seen, 
                 * so save it for flushing later.  We may yet get to know its
                 * URI due to added attributes.
                 */
                 
                m_wrapped_handler_not_initialized = true;
                m_firstElementName = elementName;
                
                // null if not known
                m_firstElementPrefix = getPrefixPartUnknown(elementName);
                
                // null if not known
                m_firstElementURI = namespaceURI;
                
                // null if not known
                m_firstElementLocalName = localName;

                if (m_tracer != null)
                    firePseudoElement(elementName);
                    
                /* we don't want to call our own addAttributes, which
                 * merely delegates to the wrapped handler, but we want to
                 * add these attributes to m_attributes. So me must call super.
                 * addAttributes() In this case m_attributes is only used for the
                 * first element, after that this class totally delegates to the
                 * wrapped handler which is either XML or HTML.
                 */
                if (atts != null)   
                    super.addAttributes(atts);
                
                // if there are attributes, then lets make the flush()
                // call the startElement on the handler and send the
                // attributes on their way.
                if (atts != null)   
                    flush();
                
            }
        }
        else
        {
            // this is not the first element, but a later one, so just
            // send it on its way.
            m_handler.startElement(namespaceURI, localName, elementName,  atts);
        }
!!!5759131.java!!!	comment(in comment : String) : void
        if (m_firstTagNotEmitted && m_firstElementName != null)
        {
            emitFirstTag();
        }
        else if (m_needToCallStartDocument)
        {
            m_handler.startDocument();
            m_needToCallStartDocument = false;
        }

        m_handler.comment(comment);
!!!5759259.java!!!	getDoctypePublic() : String

        return m_handler.getDoctypePublic();
!!!5759387.java!!!	getDoctypeSystem() : String
        return m_handler.getDoctypeSystem();
!!!5759515.java!!!	getEncoding() : String
        return m_handler.getEncoding();
!!!5759643.java!!!	getIndent() : boolean
        return m_handler.getIndent();
!!!5759771.java!!!	getIndentAmount() : int
        return m_handler.getIndentAmount();
!!!5759899.java!!!	getMediaType() : String
        return m_handler.getMediaType();
!!!5760027.java!!!	getOmitXMLDeclaration() : boolean
        return m_handler.getOmitXMLDeclaration();
!!!5760155.java!!!	getStandalone() : String
        return m_handler.getStandalone();
!!!5760283.java!!!	getVersion() : String
        return m_handler.getVersion();
!!!5760411.java!!!	setDoctype(in system : String, in pub : String) : void
        m_handler.setDoctypePublic(pub);
        m_handler.setDoctypeSystem(system);
!!!5760539.java!!!	setDoctypePublic(in doctype : String) : void
        m_handler.setDoctypePublic(doctype);
        m_setDoctypePublic_called = true;
!!!5760667.java!!!	setDoctypeSystem(in doctype : String) : void
        m_handler.setDoctypeSystem(doctype);
        m_setDoctypeSystem_called = true;
!!!5760795.java!!!	setEncoding(in encoding : String) : void
        m_handler.setEncoding(encoding);
!!!5760923.java!!!	setIndent(inout indent : boolean) : void
        m_handler.setIndent(indent);
!!!5761051.java!!!	setIndentAmount(in value : int) : void
        m_handler.setIndentAmount(value);
!!!5761179.java!!!	setMediaType(in mediaType : String) : void
        m_handler.setMediaType(mediaType);
        m_setMediaType_called = true;
!!!5761307.java!!!	setOmitXMLDeclaration(inout b : boolean) : void
        m_handler.setOmitXMLDeclaration(b);
!!!5761435.java!!!	setStandalone(in standalone : String) : void
        m_handler.setStandalone(standalone);
!!!5761563.java!!!	attributeDecl(in arg0 : String, in arg1 : String, in arg2 : String, in arg3 : String, in arg4 : String) : void
        m_handler.attributeDecl(arg0, arg1, arg2, arg3, arg4);
!!!5761691.java!!!	elementDecl(in arg0 : String, in arg1 : String) : void
        if (m_firstTagNotEmitted)
        {
            emitFirstTag();
        }
        m_handler.elementDecl(arg0, arg1);
!!!5761819.java!!!	externalEntityDecl(in name : String, in publicId : String, in systemId : String) : void
        if (m_firstTagNotEmitted)
        {
            flush();
        }
        m_handler.externalEntityDecl(name, publicId, systemId);
!!!5761947.java!!!	internalEntityDecl(in arg0 : String, in arg1 : String) : void
        if (m_firstTagNotEmitted)
        {
            flush();
        }
        m_handler.internalEntityDecl(arg0, arg1);
!!!5762075.java!!!	characters(in characters : char, in offset : int, in length : int) : void
        if (m_firstTagNotEmitted)
        {
            flush();
        }

        m_handler.characters(characters, offset, length);

!!!5762203.java!!!	endDocument() : void
        if (m_firstTagNotEmitted)
        {
            flush();
        }

        m_handler.endDocument();
        
    
!!!5762331.java!!!	endElement(in namespaceURI : String, in localName : String, in qName : String) : void
        if (m_firstTagNotEmitted)
        {
            flush();
            if (namespaceURI == null && m_firstElementURI != null)
                namespaceURI = m_firstElementURI;


            if (localName == null && m_firstElementLocalName != null)
                localName = m_firstElementLocalName;
        }
        
        m_handler.endElement(namespaceURI, localName, qName);
!!!5762459.java!!!	endPrefixMapping(in prefix : String) : void
        m_handler.endPrefixMapping(prefix);
!!!5762587.java!!!	ignorableWhitespace(in ch : char, in start : int, in length : int) : void
        if (m_firstTagNotEmitted)
        {
            flush();
        }
        m_handler.ignorableWhitespace(ch, start, length);
!!!5762715.java!!!	processingInstruction(in target : String, in data : String) : void
        if (m_firstTagNotEmitted)
        {
            flush();
        }

        m_handler.processingInstruction(target, data);
!!!5762843.java!!!	setDocumentLocator(inout locator : Locator) : void
        m_handler.setDocumentLocator(locator);
!!!5762971.java!!!	skippedEntity(in name : String) : void
        m_handler.skippedEntity(name);
!!!5763099.java!!!	comment(in ch : char, in start : int, in length : int) : void
        if (m_firstTagNotEmitted)
        {
            flush();
        }

        m_handler.comment(ch, start, length);
!!!5763227.java!!!	endCDATA() : void

        m_handler.endCDATA();
!!!5763355.java!!!	endDTD() : void

        m_handler.endDTD();
!!!5763483.java!!!	endEntity(in name : String) : void
        if (m_firstTagNotEmitted)
        {
            emitFirstTag();
        }
        m_handler.endEntity(name);
!!!5763611.java!!!	startCDATA() : void
        m_handler.startCDATA();
!!!5763739.java!!!	startDTD(in name : String, in publicId : String, in systemId : String) : void
        m_handler.startDTD(name, publicId, systemId);
!!!5763867.java!!!	startEntity(in name : String) : void
        m_handler.startEntity(name);
!!!5763995.java!!!	initStreamOutput() : void

        // Try to rule out if this is an not to be an HTML document based on prefix
        boolean firstElementIsHTML = isFirstElemHTML();

        if (firstElementIsHTML)
        {
            // create an HTML output handler, and initialize it

            // keep a reference to the old handler, ... it will soon be gone
            SerializationHandler oldHandler = m_handler;

            /* We have to make sure we get an output properties with the proper
             * defaults for the HTML method.  The easiest way to do this is to
             * have the OutputProperties class do it.
             */

            Properties htmlProperties =
                OutputPropertiesFactory.getDefaultMethodProperties(Method.HTML);
            Serializer serializer =
                SerializerFactory.getSerializer(htmlProperties);

            // The factory should be returning a ToStream
            // Don't know what to do if it doesn't
            // i.e. the user has over-ridden the content-handler property
            // for html
            m_handler = (SerializationHandler) serializer;
            //m_handler = new ToHTMLStream();

            Writer writer = oldHandler.getWriter();

            if (null != writer)
                m_handler.setWriter(writer);
            else
            {
                OutputStream os = oldHandler.getOutputStream();

                if (null != os)
                    m_handler.setOutputStream(os);
            }

            // need to copy things from the old handler to the new one here

            //            if (_setVersion_called)
            //            {
            m_handler.setVersion(oldHandler.getVersion());
            //            }
            //            if (_setDoctypeSystem_called)
            //            {
            m_handler.setDoctypeSystem(oldHandler.getDoctypeSystem());
            //            }
            //            if (_setDoctypePublic_called)
            //            {
            m_handler.setDoctypePublic(oldHandler.getDoctypePublic());
            //            }
            //            if (_setMediaType_called)
            //            {
            m_handler.setMediaType(oldHandler.getMediaType());
            //            }
            
            m_handler.setTransformer(oldHandler.getTransformer());
        }

        /* Now that we have a real wrapped handler (XML or HTML) lets
         * pass any cached calls to it
         */
        // Call startDocument() if necessary
        if (m_needToCallStartDocument)
        {
            m_handler.startDocument();
            m_needToCallStartDocument = false;
        }

        // the wrapped handler is now fully initialized
        m_wrapped_handler_not_initialized = false;
!!!5764123.java!!!	emitFirstTag() : void
   
        if (m_firstElementName != null)
        {
            if (m_wrapped_handler_not_initialized)
            {
                initStreamOutput();
                m_wrapped_handler_not_initialized = false;
            }
            // Output first tag
            m_handler.startElement(m_firstElementURI, null, m_firstElementName, m_attributes);
            // don't need the collected attributes of the first element anymore.
            m_attributes = null;

            // Output namespaces of first tag
            if (m_namespacePrefix != null)
            {
                final int n = m_namespacePrefix.size();
                for (int i = 0; i < n; i++)
                {
                    final String prefix =
                        (String) m_namespacePrefix.elementAt(i);
                    final String uri = (String) m_namespaceURI.elementAt(i);
                    m_handler.startPrefixMapping(prefix, uri, false);
                }
                m_namespacePrefix = null;
                m_namespaceURI = null;
            }
            m_firstTagNotEmitted = false;
        }
!!!5764251.java!!!	getLocalNameUnknown(in value : String) : String
        int idx = value.lastIndexOf(':');
        if (idx >= 0)
            value = value.substring(idx + 1);
        idx = value.lastIndexOf('@');
        if (idx >= 0)
            value = value.substring(idx + 1);
        return (value);
!!!5764379.java!!!	getPrefixPartUnknown(in qname : String) : String
        final int index = qname.indexOf(':');
        return (index > 0) ? qname.substring(0, index) : EMPTYSTRING;
!!!5764507.java!!!	isFirstElemHTML() : boolean
        boolean isHTML;

        // is the first tag html, not considering the prefix ?
        isHTML =
            getLocalNameUnknown(m_firstElementName).equalsIgnoreCase("html");

        // Try to rule out if this is not to be an HTML document based on URI
        if (isHTML
            && m_firstElementURI != null
            && !EMPTYSTRING.equals(m_firstElementURI))
        {
            // the <html> element has a non-trivial namespace
            isHTML = false;
        }
        // Try to rule out if this is an not to be an HTML document based on prefix
        if (isHTML && m_namespacePrefix != null)
        {
            /* the first element has a name of "html", but lets check the prefix.
             * If the prefix points to a namespace with a URL that is not ""
             * then the doecument doesn't start with an <html> tag, and isn't html
             */
            final int max = m_namespacePrefix.size();
            for (int i = 0; i < max; i++)
            {
                final String prefix = (String) m_namespacePrefix.elementAt(i);
                final String uri = (String) m_namespaceURI.elementAt(i);

                if (m_firstElementPrefix != null
                    && m_firstElementPrefix.equals(prefix)
                    && !EMPTYSTRING.equals(uri))
                {
                    // The first element has a prefix, so it can't be <html>
                    isHTML = false;
                    break;
                }
            }

        }
        return isHTML;
!!!5764635.java!!!	asDOMSerializer() : DOMSerializer
        return m_handler.asDOMSerializer();
!!!5764763.java!!!	setCdataSectionElements(inout URI_and_localNames : Vector) : void
        m_handler.setCdataSectionElements(URI_and_localNames);
!!!5764891.java!!!	addAttributes(inout atts : Attributes) : void
        m_handler.addAttributes(atts);
!!!5765019.java!!!	getNamespaceMappings() : NamespaceMappings
        NamespaceMappings mappings = null;
        if (m_handler != null)
        {
            mappings = m_handler.getNamespaceMappings();
        }
        return mappings;
!!!5765147.java!!!	flushPending() : void
 
        flush();
      
        m_handler.flushPending();
!!!5765275.java!!!	flush() : void
        try
        {
        if (m_firstTagNotEmitted)
        {
            emitFirstTag();
        }
        if (m_needToCallStartDocument)
        {
            m_handler.startDocument();
            m_needToCallStartDocument = false;
        }
        }
        catch(SAXException e)
        {
            throw new RuntimeException(e.toString());
        }
          
    
!!!5765403.java!!!	getPrefix(in namespaceURI : String) : String
        return m_handler.getPrefix(namespaceURI);
!!!5765531.java!!!	entityReference(in entityName : String) : void
        m_handler.entityReference(entityName);
!!!5765659.java!!!	getNamespaceURI(in qname : String, inout isElement : boolean) : String
        return m_handler.getNamespaceURI(qname, isElement);
!!!5765787.java!!!	getNamespaceURIFromPrefix(in prefix : String) : String
        return m_handler.getNamespaceURIFromPrefix(prefix);
!!!5765915.java!!!	setTransformer(inout t : Transformer) : void
       
        m_handler.setTransformer(t);
        if ((t instanceof SerializerTrace) &&
            (((SerializerTrace) t).hasTraceListeners())) {
           m_tracer = (SerializerTrace) t;
        } else {
           m_tracer = null;
        }        
!!!5766043.java!!!	getTransformer() : Transformer
        return m_handler.getTransformer();
!!!5766171.java!!!	setContentHandler(inout ch : ContentHandler) : void
        m_handler.setContentHandler(ch);
!!!5766299.java!!!	setSourceLocator(inout locator : SourceLocator) : void
        m_handler.setSourceLocator(locator);
!!!5766427.java!!!	firePseudoElement(in elementName : String) : void
        
        if (m_tracer != null) {
            StringBuffer sb = new StringBuffer();
                
            sb.append('<');
            sb.append(elementName);
            
            // convert the StringBuffer to a char array and
            // emit the trace event that these characters "might"
            // be written
            char ch[] = sb.toString().toCharArray();
            m_tracer.fireGenerateEvent(
                SerializerTrace.EVENTTYPE_OUTPUT_PSEUDO_CHARACTERS,
                ch,
                0,
                ch.length);
        }
