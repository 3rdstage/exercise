class ProcessMonitorThread
!!!408091.java!!!	ProcessMonitorThread(inout ServerTable : HashMap, in SleepTime : int)
        serverTable = ServerTable;
        sleepTime = SleepTime;
!!!408219.java!!!	run() : void
        while( true ) {
            try {
                // Sleep's for a specified time, before checking
                // the Servers health. This will repeat as long as
                // the ServerManager (ORBD) is up and running.
                Thread.sleep( sleepTime );
            } catch( java.lang.InterruptedException e ) {
                break;
            }
            Iterator serverList;
            synchronized ( serverTable ) {
                // Check each ServerTableEntry to make sure that they
                // are in the right state.
                serverList = serverTable.values().iterator();
            }
            try {
                checkServerHealth( serverList );
            } catch( ConcurrentModificationException e ) { 
                break;
            }
        }
!!!408347.java!!!	checkServerHealth(inout serverList : Iterator) : void
        if( serverList == null ) return;
        while (serverList.hasNext( ) ) {
            ServerTableEntry entry = (ServerTableEntry) serverList.next();
            entry.checkProcessHealth( );
        }
!!!408475.java!!!	start(inout serverTable : HashMap) : void
 
	int sleepTime = ORBConstants.DEFAULT_SERVER_POLLING_TIME;

	String pollingTime = System.getProperties().getProperty( 
	    ORBConstants.SERVER_POLLING_TIME ); 

	if ( pollingTime != null ) {
	    try {
		sleepTime = Integer.parseInt( pollingTime ); 
	    } catch (Exception e ) {
		// Too late to complain, Just use the default 
		// sleepTime
	    }
	}

	instance = new ProcessMonitorThread( serverTable, 
	    sleepTime );
	instance.setDaemon( true );
	instance.start();
!!!408603.java!!!	interruptThread() : void
        instance.interrupt();
