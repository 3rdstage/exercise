class InstructionContextImpl
!!!3925531.java!!!	InstructionContextImpl(inout inst : InstructionHandle)
			if (inst == null) throw new AssertionViolatedException("Cannot instantiate InstructionContextImpl from NULL.");
		
			instruction = inst;
			inFrames = new java.util.HashMap();
			outFrames = new java.util.HashMap();
!!!3925659.java!!!	getTag() : int
			return TAG;
!!!3925787.java!!!	setTag(in tag : int) : void
			TAG = tag;
!!!3925915.java!!!	getExceptionHandlers() : ExceptionHandler
			return exceptionhandlers.getExceptionHandlers(getInstruction());
!!!3926043.java!!!	getOutFrame(inout execChain : ArrayList) : Frame
			executionPredecessors = execChain;

			Frame org;

			InstructionContext jsr = lastExecutionJSR();

			org = (Frame) outFrames.get(jsr);

			if (org == null){
				throw new AssertionViolatedException("outFrame not set! This:\n"+this+"\nExecutionChain: "+getExecutionChain()+"\nOutFrames: '"+outFrames+"'.");
			}
			return org.getClone();
!!!3926171.java!!!	execute(inout inFrame : Frame, inout execPreds : ArrayList, inout icv : InstConstraintVisitor, inout ev : ExecutionVisitor) : boolean

			executionPredecessors = (ArrayList) execPreds.clone();

			//sanity check
			if ( (lastExecutionJSR() == null) && (subroutines.subroutineOf(getInstruction()) != subroutines.getTopLevel() ) ){
				throw new AssertionViolatedException("Huh?! Am I '"+this+"' part of a subroutine or not?");
			}
			if ( (lastExecutionJSR() != null) && (subroutines.subroutineOf(getInstruction()) == subroutines.getTopLevel() ) ){
				throw new AssertionViolatedException("Huh?! Am I '"+this+"' part of a subroutine or not?");
			}

			Frame inF = (Frame) inFrames.get(lastExecutionJSR());
			if (inF == null){// no incoming frame was set, so set it.
				inFrames.put(lastExecutionJSR(), inFrame);
				inF = inFrame;
			}
			else{// if there was an "old" inFrame
				if (inF.equals(inFrame)){ //shortcut: no need to merge equal frames.
					return false;
				}
				if (! mergeInFrames(inFrame)){
					return false;
				}
			}
			
			// Now we're sure the inFrame has changed!
			
			// new inFrame is already merged in, see above.		
			Frame workingFrame = inF.getClone();

			try{
				// This verifies the InstructionConstraint for the current
				// instruction, but does not modify the workingFrame object.
//InstConstraintVisitor icv = InstConstraintVisitor.getInstance(VerifierFactory.getVerifier(method_gen.getClassName()));
				icv.setFrame(workingFrame);
				getInstruction().accept(icv);
			}
			catch(StructuralCodeConstraintException ce){
				ce.extendMessage("","\nInstructionHandle: "+getInstruction()+"\n");
				ce.extendMessage("","\nExecution Frame:\n"+workingFrame);
				extendMessageWithFlow(ce);
				throw ce;
			}

			// This executes the Instruction.
			// Therefore the workingFrame object is modified.
//ExecutionVisitor ev = ExecutionVisitor.getInstance(VerifierFactory.getVerifier(method_gen.getClassName()));
			ev.setFrame(workingFrame);
			getInstruction().accept(ev);
			//getInstruction().accept(ExecutionVisitor.withFrame(workingFrame));
			outFrames.put(lastExecutionJSR(), workingFrame);

			return true;	// new inFrame was different from old inFrame so merging them
										// yielded a different this.inFrame.
!!!3926299.java!!!	toString() : String
		//TODO: Put information in the brackets, e.g.
		//      Is this an ExceptionHandler? Is this a RET? Is this the start of
		//      a subroutine?
			String ret = getInstruction().toString(false)+"\t[InstructionContext]";
			return ret;
!!!3926427.java!!!	mergeInFrames(inout inFrame : Frame) : boolean
			// TODO: Can be performance-improved.
			Frame inF = (Frame) inFrames.get(lastExecutionJSR());
			OperandStack oldstack = inF.getStack().getClone();
			LocalVariables oldlocals = inF.getLocals().getClone();
			try{
				inF.getStack().merge(inFrame.getStack());
				inF.getLocals().merge(inFrame.getLocals());
			}
			catch (StructuralCodeConstraintException sce){
				extendMessageWithFlow(sce);
				throw sce;
			}
			if (	oldstack.equals(inF.getStack()) &&
						oldlocals.equals(inF.getLocals()) ){
				return false;
			}
			else{
				return true;
			}
!!!3926555.java!!!	getExecutionChain() : String
			String s = this.toString();
			for (int i=executionPredecessors.size()-1; i>=0; i--){
				s = executionPredecessors.get(i)+"\n" + s;
			}
			return s;
!!!3926683.java!!!	extendMessageWithFlow(inout e : StructuralCodeConstraintException) : void
			String s = "Execution flow:\n";
			e.extendMessage("", s+getExecutionChain());
!!!3926811.java!!!	getInstruction() : InstructionHandle
			return instruction;
!!!3926939.java!!!	lastExecutionJSR() : InstructionContextImpl
			
			int size = executionPredecessors.size();
			int retcount = 0;
			
			for (int i=size-1; i>=0; i--){
				InstructionContextImpl current = (InstructionContextImpl) (executionPredecessors.get(i));
				Instruction currentlast = current.getInstruction().getInstruction();
				if (currentlast instanceof RET) retcount++;
				if (currentlast instanceof JsrInstruction){
					retcount--;
					if (retcount == -1) return current;
				}
			}
			return null;
!!!3927067.java!!!	getSuccessors() : InstructionContext
			return contextsOf(_getSuccessors());
!!!3927195.java!!!	_getSuccessors() : InstructionHandle
			final InstructionHandle[] empty = new InstructionHandle[0];
			final InstructionHandle[] single = new InstructionHandle[1];
			final InstructionHandle[] pair = new InstructionHandle[2];
		
			Instruction inst = getInstruction().getInstruction();
		
			if (inst instanceof RET){
				Subroutine s = subroutines.subroutineOf(getInstruction());
				if (s==null){ //return empty; // RET in dead code. "empty" would be the correct answer, but we know something about the surrounding project...
					throw new AssertionViolatedException("Asking for successors of a RET in dead code?!");
				}
//TODO: remove
throw new AssertionViolatedException("DID YOU REALLY WANT TO ASK FOR RET'S SUCCS?");
/*
				InstructionHandle[] jsrs = s.getEnteringJsrInstructions();
				InstructionHandle[] ret = new InstructionHandle[jsrs.length];
				for (int i=0; i<jsrs.length; i++){
					ret[i] = jsrs[i].getNext();
				}
				return ret;
*/
			}
		
			// Terminates method normally.
			if (inst instanceof ReturnInstruction){
				return empty;
			}
		
			// Terminates method abnormally, because JustIce mandates
			// subroutines not to be protected by exception handlers.
			if (inst instanceof ATHROW){
				return empty;
			}
		
			// See method comment.
			if (inst instanceof JsrInstruction){
				single[0] = ((JsrInstruction) inst).getTarget();
				return single;
			}

			if (inst instanceof GotoInstruction){
				single[0] = ((GotoInstruction) inst).getTarget();
				return single;
			}

			if (inst instanceof BranchInstruction){
				if (inst instanceof Select){
					// BCEL's getTargets() returns only the non-default targets,
					// thanks to Eli Tilevich for reporting.
					InstructionHandle[] matchTargets = ((Select) inst).getTargets();
					InstructionHandle[] ret = new InstructionHandle[matchTargets.length+1];
					ret[0] = ((Select) inst).getTarget();
					System.arraycopy(matchTargets, 0, ret, 1, matchTargets.length);
					return ret;
				}
				else{
					pair[0] = getInstruction().getNext();
					pair[1] = ((BranchInstruction) inst).getTarget();
					return pair;
				}
			}

			// default case: Fall through.		
			single[0] = getInstruction().getNext();
			return single;
