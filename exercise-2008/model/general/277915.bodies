class Long
!!!7002651.java!!!	toString(in i : long, in radix : int) : String
        if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)
	    radix = 10;
        if (radix == 10)
            return toString(i);
        char[] buf = new char[65];
        int charPos = 64;
        boolean negative = (i < 0);

        if (!negative) {
            i = -i;
        }

        while (i <= -radix) {
            buf[charPos--] = Integer.digits[(int)(-(i % radix))];
            i = i / radix;
        }
        buf[charPos] = Integer.digits[(int)(-i)];

        if (negative) { 
            buf[--charPos] = '-';
        }

        return new String(buf, charPos, (65 - charPos));
!!!7002779.java!!!	toHexString(in i : long) : String
	return toUnsignedString(i, 4);
!!!7002907.java!!!	toOctalString(in i : long) : String
	return toUnsignedString(i, 3);
!!!7003035.java!!!	toBinaryString(in i : long) : String
	return toUnsignedString(i, 1);
!!!7003163.java!!!	toUnsignedString(in i : long, in shift : int) : String
	char[] buf = new char[64];
	int charPos = 64;
	int radix = 1 << shift;
	long mask = radix - 1;
	do {
	    buf[--charPos] = Integer.digits[(int)(i & mask)];
	    i >>>= shift;
	} while (i != 0);
	return new String(buf, charPos, (64 - charPos));
!!!7003291.java!!!	toString(in i : long) : String
        if (i == Long.MIN_VALUE)
            return "-9223372036854775808";
        int size = (i < 0) ? stringSize(-i) + 1 : stringSize(i);
        char[] buf = new char[size];
        getChars(i, size, buf);
        return new String(0, size, buf);
!!!7003419.java!!!	getChars(in i : long, in index : int, in buf : char) : void
        long q;
        int r;
        int charPos = index;
        char sign = 0;

        if (i < 0) {
            sign = '-';
            i = -i;
        }

        // Get 2 digits/iteration using longs until quotient fits into an int
        while (i > Integer.MAX_VALUE) { 
            q = i / 100;
            // really: r = i - (q * 100);
            r = (int)(i - ((q << 6) + (q << 5) + (q << 2)));
            i = q;
            buf[--charPos] = Integer.DigitOnes[r];
            buf[--charPos] = Integer.DigitTens[r];
        }

        // Get 2 digits/iteration using ints
        int q2;
        int i2 = (int)i;
        while (i2 >= 65536) {
            q2 = i2 / 100;
            // really: r = i2 - (q * 100);
            r = i2 - ((q2 << 6) + (q2 << 5) + (q2 << 2));
            i2 = q2;
            buf[--charPos] = Integer.DigitOnes[r];
            buf[--charPos] = Integer.DigitTens[r];
        }

        // Fall thru to fast mode for smaller numbers
        // assert(i2 <= 65536, i2);
        for (;;) {
            q2 = (i2 * 52429) >>> (16+3);
            r = i2 - ((q2 << 3) + (q2 << 1));  // r = i2-(q2*10) ...
            buf[--charPos] = Integer.digits[r];
            i2 = q2;
            if (i2 == 0) break;
        }
        if (sign != 0) {
            buf[--charPos] = sign;
        }
!!!7003547.java!!!	stringSize(in x : long) : int
        long p = 10;
        for (int i=1; i<19; i++) {
            if (x < p)
                return i;
            p = 10*p;
        }
        return 19;
!!!7003675.java!!!	parseLong(in s : String, in radix : int) : long
        if (s == null) {
            throw new NumberFormatException("null");
        }

	if (radix < Character.MIN_RADIX) {
	    throw new NumberFormatException("radix " + radix +
					    " less than Character.MIN_RADIX");
	}
	if (radix > Character.MAX_RADIX) {
	    throw new NumberFormatException("radix " + radix +
					    " greater than Character.MAX_RADIX");
	}

	long result = 0;
	boolean negative = false;
	int i = 0, max = s.length();
	long limit;
	long multmin;
	int digit;

	if (max > 0) {
	    if (s.charAt(0) == '-') {
		negative = true;
		limit = Long.MIN_VALUE;
		i++;
	    } else {
		limit = -Long.MAX_VALUE;
	    }
	    multmin = limit / radix;
            if (i < max) {
                digit = Character.digit(s.charAt(i++),radix);
		if (digit < 0) {
		    throw NumberFormatException.forInputString(s);
		} else {
		    result = -digit;
		}
	    }
	    while (i < max) {
		// Accumulating negatively avoids surprises near MAX_VALUE
		digit = Character.digit(s.charAt(i++),radix);
		if (digit < 0) {
		    throw NumberFormatException.forInputString(s);
		}
		if (result < multmin) {
		    throw NumberFormatException.forInputString(s);
		}
		result *= radix;
		if (result < limit + digit) {
		    throw NumberFormatException.forInputString(s);
		}
		result -= digit;
	    }
	} else {
	    throw NumberFormatException.forInputString(s);
	}
	if (negative) {
	    if (i > 1) {
		return result;
	    } else {	/* Only got "-" */
		throw NumberFormatException.forInputString(s);
	    }
	} else {
	    return -result;
	}
!!!7003803.java!!!	parseLong(in s : String) : long
	return parseLong(s, 10);
!!!7003931.java!!!	valueOf(in s : String, in radix : int) : Long
	return new Long(parseLong(s, radix));
!!!7004059.java!!!	valueOf(in s : String) : Long
	return new Long(parseLong(s, 10));
!!!7004315.java!!!	valueOf(in l : long) : Long
	final int offset = 128;
	if (l >= -128 && l <= 127) { // will cache
	    return LongCache.cache[(int)l + offset];
	}
        return new Long(l);
!!!7004443.java!!!	decode(in nm : String) : Long
        int radix = 10;
        int index = 0;
        boolean negative = false;
        Long result;

        // Handle minus sign, if present
        if (nm.startsWith("-")) {
            negative = true;
            index++;
        }

        // Handle radix specifier, if present
	if (nm.startsWith("0x", index) || nm.startsWith("0X", index)) {
	    index += 2;
            radix = 16;
	}
	else if (nm.startsWith("#", index)) {
	    index ++;
            radix = 16;
	}
	else if (nm.startsWith("0", index) && nm.length() > 1 + index) {
	    index ++;
            radix = 8;
	}

        if (nm.startsWith("-", index))
            throw new NumberFormatException("Negative sign in wrong position");

        try {
            result = Long.valueOf(nm.substring(index), radix);
            result = negative ? new Long((long)-result.longValue()) : result;
        } catch (NumberFormatException e) {
            // If number is Long.MIN_VALUE, we'll end up here. The next line
            // handles this case, and causes any genuine format error to be
            // rethrown.
            String constant = negative ? new String("-" + nm.substring(index))
                                       : nm.substring(index);
            result = Long.valueOf(constant, radix);
        }
        return result;
!!!7004571.java!!!	Long(in value : long)
	this.value = value;
!!!7004699.java!!!	Long(in s : String)
	this.value = parseLong(s, 10);
!!!7004827.java!!!	byteValue() : byte
	return (byte)value;
!!!7004955.java!!!	shortValue() : short
	return (short)value;
!!!7005083.java!!!	intValue() : int
	return (int)value;
!!!7005211.java!!!	longValue() : long
	return (long)value;
!!!7005339.java!!!	floatValue() : float
	return (float)value;
!!!7005467.java!!!	doubleValue() : double
	return (double)value;
!!!7005595.java!!!	toString() : String
	return String.valueOf(value);
!!!7005723.java!!!	hashCode() : int
	return (int)(value ^ (value >>> 32));
!!!7005851.java!!!	equals(inout obj : Object) : boolean
	if (obj instanceof Long) {
	    return value == ((Long)obj).longValue();
	}
	return false;
!!!7005979.java!!!	getLong(in nm : String) : Long
	return getLong(nm, null);
!!!7006107.java!!!	getLong(in nm : String, in val : long) : Long
        Long result = Long.getLong(nm, null);
        return (result == null) ? new Long(val) : result;
!!!7006235.java!!!	getLong(in nm : String, inout val : Long) : Long
        String v = null;
        try {
            v = System.getProperty(nm);
        } catch (IllegalArgumentException e) {
        } catch (NullPointerException e) {
        }
	if (v != null) {
	    try {
		return Long.decode(v);
	    } catch (NumberFormatException e) {
	    }
	}
	return val;
!!!7006363.java!!!	compareTo(inout anotherLong : Long) : int
	long thisVal = this.value;
	long anotherVal = anotherLong.value;
	return (thisVal<anotherVal ? -1 : (thisVal==anotherVal ? 0 : 1));
!!!7006491.java!!!	highestOneBit(in i : long) : long
        // HD, Figure 3-1
        i |= (i >>  1);
        i |= (i >>  2);
        i |= (i >>  4);
        i |= (i >>  8);
        i |= (i >> 16);
        i |= (i >> 32);
        return i - (i >>> 1);
!!!7006619.java!!!	lowestOneBit(in i : long) : long
        // HD, Section 2-1
        return i & -i;
!!!7006747.java!!!	numberOfLeadingZeros(in i : long) : int
        // HD, Figure 5-6
         if (i == 0)
            return 64;
        int n = 1;
	int x = (int)(i >>> 32);
        if (x == 0) { n += 32; x = (int)i; }
        if (x >>> 16 == 0) { n += 16; x <<= 16; }
        if (x >>> 24 == 0) { n +=  8; x <<=  8; }
        if (x >>> 28 == 0) { n +=  4; x <<=  4; }
        if (x >>> 30 == 0) { n +=  2; x <<=  2; }
        n -= x >>> 31;
        return n;
!!!7006875.java!!!	numberOfTrailingZeros(in i : long) : int
        // HD, Figure 5-14
	int x, y;
	if (i == 0) return 64;
	int n = 63;
	y = (int)i; if (y != 0) { n = n -32; x = y; } else x = (int)(i>>>32);
	y = x <<16; if (y != 0) { n = n -16; x = y; }
	y = x << 8; if (y != 0) { n = n - 8; x = y; }
	y = x << 4; if (y != 0) { n = n - 4; x = y; }
	y = x << 2; if (y != 0) { n = n - 2; x = y; }
	return n - ((x << 1) >>> 31);
!!!7007003.java!!!	bitCount(in i : long) : int
        // HD, Figure 5-14
	i = i - ((i >>> 1) & 0x5555555555555555L);
	i = (i & 0x3333333333333333L) + ((i >>> 2) & 0x3333333333333333L);
	i = (i + (i >>> 4)) & 0x0f0f0f0f0f0f0f0fL;
	i = i + (i >>> 8);
	i = i + (i >>> 16);
	i = i + (i >>> 32);
	return (int)i & 0x7f;
!!!7007131.java!!!	rotateLeft(in i : long, in distance : int) : long
        return (i << distance) | (i >>> -distance);
!!!7007259.java!!!	rotateRight(in i : long, in distance : int) : long
        return (i >>> distance) | (i << -distance);
!!!7007387.java!!!	reverse(in i : long) : long
        // HD, Figure 7-1
	i = (i & 0x5555555555555555L) << 1 | (i >>> 1) & 0x5555555555555555L;
	i = (i & 0x3333333333333333L) << 2 | (i >>> 2) & 0x3333333333333333L;
	i = (i & 0x0f0f0f0f0f0f0f0fL) << 4 | (i >>> 4) & 0x0f0f0f0f0f0f0f0fL;
	i = (i & 0x00ff00ff00ff00ffL) << 8 | (i >>> 8) & 0x00ff00ff00ff00ffL;
	i = (i << 48) | ((i & 0xffff0000L) << 16) |
	    ((i >>> 16) & 0xffff0000L) | (i >>> 48);
	return i;
!!!7007515.java!!!	signum(in i : long) : int
        // HD, Section 2-7
        return (int) ((i >> 63) | (-i >>> 63));
!!!7007643.java!!!	reverseBytes(in i : long) : long
        i = (i & 0x00ff00ff00ff00ffL) << 8 | (i >>> 8) & 0x00ff00ff00ff00ffL;
        return (i << 48) | ((i & 0xffff0000L) << 16) |
            ((i >>> 16) & 0xffff0000L) | (i >>> 48);
