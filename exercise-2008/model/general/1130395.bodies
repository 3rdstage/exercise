class LightWeightPopup
!!!9244955.java!!!	getLightWeightPopup(inout owner : Component, inout contents : Component, in ownerX : int, in ownerY : int) : Popup
            LightWeightPopup popup = getRecycledLightWeightPopup();

            if (popup == null) {
                popup = new LightWeightPopup();
            }
            popup.reset(owner, contents, ownerX, ownerY);
            if (!popup.fitsOnScreen() || 
                 popup.overlappedByOwnedWindow()) {
                popup.hide();
                return null;
            }
            return popup;
!!!9245083.java!!!	getLightWeightPopupCache() : List
            List cache = (List)SwingUtilities.appContextGet(
                                   lightWeightPopupCacheKey);
            if (cache == null) {
                cache = new ArrayList();
                SwingUtilities.appContextPut(lightWeightPopupCacheKey, cache);
            }
            return cache;
!!!9245211.java!!!	recycleLightWeightPopup(inout popup : LightWeightPopup) : void
            synchronized (LightWeightPopup.class) {
                List lightPopupCache = getLightWeightPopupCache();
                if (lightPopupCache.size() < MAX_CACHE_SIZE) {
                    lightPopupCache.add(popup);
                }
            }
!!!9245339.java!!!	getRecycledLightWeightPopup() : LightWeightPopup
            synchronized (LightWeightPopup.class) {
                List lightPopupCache = getLightWeightPopupCache();
                int c;
                if((c = lightPopupCache.size()) > 0) {
                    LightWeightPopup r = (LightWeightPopup)lightPopupCache.
                                               get(0);
                    lightPopupCache.remove(0);
                    return r;
                }
                return null;
            }
!!!9245467.java!!!	hide() : void
            super.hide();

            Container component = (Container)getComponent();

            component.removeAll();
            recycleLightWeightPopup(this);
!!!9245595.java!!!	show() : void
	    Container parent = null;

	    if (owner != null) {
		parent = (owner instanceof Container? (Container)owner : owner.getParent());
            }

            // Try to find a JLayeredPane and Window to add 
            for (Container p = parent; p != null; p = p.getParent()) {
                if (p instanceof JRootPane) {
                    if (p.getParent() instanceof JInternalFrame) {
                        continue;
                    }
                    parent = ((JRootPane)p).getLayeredPane();
                    // Continue, so that if there is a higher JRootPane, we'll
                    // pick it up.
                } else if(p instanceof Window) {
                    if (parent == null) {
                        parent = p;
                    }
                    break;
                } else if (p instanceof JApplet) {
                    // Painting code stops at Applets, we don't want
                    // to add to a Component above an Applet otherwise
                    // you'll never see it painted.
                    break;
                }
            }

            Point p = SwingUtilities.convertScreenLocationToParent(parent, x,
                                                                   y);
            Component component = getComponent();

            component.setLocation(p.x, p.y);
            if (parent instanceof JLayeredPane) {
                ((JLayeredPane)parent).add(component,
                                           JLayeredPane.POPUP_LAYER, 0);
            } else {
                parent.add(component);
            }
!!!9245723.java!!!	createComponent(inout owner : Component) : Component
            JComponent component = new JPanel(new BorderLayout(), true);

            component.setOpaque(true);
            return component;
!!!9245851.java!!!	reset(inout owner : Component, inout contents : Component, in ownerX : int, in ownerY : int) : void
            super.reset(owner, contents, ownerX, ownerY);

            JComponent component = (JComponent)getComponent();

            component.setLocation(ownerX, ownerY);
            component.add(contents, BorderLayout.CENTER);
            contents.invalidate();
            pack();
