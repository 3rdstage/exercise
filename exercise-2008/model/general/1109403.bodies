class DefaultEditorKit
!!!8941851.java!!!	getContentType() : String
        return "text/plain";
!!!8941979.java!!!	getViewFactory() : ViewFactory
        return null;
!!!8942107.java!!!	getActions() : Action
        return defaultActions;
!!!8942235.java!!!	createCaret() : Caret
        return null;
!!!8942363.java!!!	createDefaultDocument() : Document
        return new PlainDocument();
!!!8942491.java!!!	read(inout in : InputStream, inout doc : Document, in pos : int) : void

        read(new InputStreamReader(in), doc, pos);
!!!8942619.java!!!	write(inout out : OutputStream, inout doc : Document, in pos : int, in len : int) : void
	OutputStreamWriter osw = new OutputStreamWriter(out);

        write(osw, doc, pos, len);
	osw.flush();
!!!8942747.java!!!	getInputAttributes() : MutableAttributeSet
        return null;
!!!8942875.java!!!	read(inout in : Reader, inout doc : Document, in pos : int) : void

        char[] buff = new char[4096];
        int nch;
	boolean lastWasCR = false;
	boolean isCRLF = false;
	boolean isCR = false;
	int last;
	boolean wasEmpty = (doc.getLength() == 0);
        AttributeSet attr = getInputAttributes();

	// Read in a block at a time, mapping \r\n to \n, as well as single
        // \r's to \n's. If a \r\n is encountered, \r\n will be set as the
        // newline string for the document, if \r is encountered it will
        // be set as the newline character, otherwise the newline property
        // for the document will be removed.
        while ((nch = in.read(buff, 0, buff.length)) != -1) {
	    last = 0;
	    for(int counter = 0; counter < nch; counter++) {
		switch(buff[counter]) {
		case '\r':
		    if (lastWasCR) {
			isCR = true;
			if (counter == 0) {
                            doc.insertString(pos, "\n", attr);
			    pos++;
			}
			else {
			    buff[counter - 1] = '\n';
			}
		    }
		    else {
			lastWasCR = true;
		    }
		    break;
		case '\n':
		    if (lastWasCR) {
			if (counter > (last + 1)) {
			    doc.insertString(pos, new String(buff, last,
                                            counter - last - 1), attr);
			    pos += (counter - last - 1);
			}
			// else nothing to do, can skip \r, next write will
			// write \n
			lastWasCR = false;
			last = counter;
			isCRLF = true;
		    }
		    break;
		default:
		    if (lastWasCR) {
			isCR = true;
			if (counter == 0) {
                            doc.insertString(pos, "\n", attr);
			    pos++;
			}
			else {
			    buff[counter - 1] = '\n';
			}
			lastWasCR = false;
		    }
		    break;
		}
	    }
	    if (last < nch) {
		if(lastWasCR) {
		    if (last < (nch - 1)) {
			doc.insertString(pos, new String(buff, last,
                                         nch - last - 1), attr);
			pos += (nch - last - 1);
		    }
		}
		else {
		    doc.insertString(pos, new String(buff, last,
                                     nch - last), attr);
		    pos += (nch - last);
		}
	    }
        }
	if (lastWasCR) {
            doc.insertString(pos, "\n", attr);
	    isCR = true;
	}
	if (wasEmpty) {
	    if (isCRLF) {
		doc.putProperty(EndOfLineStringProperty, "\r\n");
	    }
	    else if (isCR) {
		doc.putProperty(EndOfLineStringProperty, "\r");
	    }
	    else {
		doc.putProperty(EndOfLineStringProperty, "\n");
	    }
	}
!!!8943003.java!!!	write(inout out : Writer, inout doc : Document, in pos : int, in len : int) : void

	if ((pos < 0) || ((pos + len) > doc.getLength())) {
	    throw new BadLocationException("DefaultEditorKit.write", pos);
	}
        Segment data = new Segment();
        int nleft = len;
        int offs = pos;
	Object endOfLineProperty = doc.getProperty(EndOfLineStringProperty);
	if (endOfLineProperty == null) {
	    try {
		endOfLineProperty = System.getProperty("line.separator");
	    } catch (SecurityException se) { }
	}
	String endOfLine;
	if (endOfLineProperty instanceof String) {
	    endOfLine = (String)endOfLineProperty;
	}
	else {
	    endOfLine = null;
	}
	if (endOfLineProperty != null && !endOfLine.equals("\n")) {
	    // There is an end of line string that isn't \n, have to iterate
	    // through and find all \n's and translate to end of line string.
	    while (nleft > 0) {
		int n = Math.min(nleft, 4096);
		doc.getText(offs, n, data);
		int last = data.offset;
		char[] array = data.array;
		int maxCounter = last + data.count;
		for (int counter = last; counter < maxCounter; counter++) {
		    if (array[counter] == '\n') {
			if (counter > last) {
			    out.write(array, last, counter - last);
			}
			out.write(endOfLine);
			last = counter + 1;
		    }
		}
		if (maxCounter > last) {
		    out.write(array, last, maxCounter - last);
		}
		offs += n;
		nleft -= n;
	    }
	}
	else {
	    // Just write out text, will already have \n, no mapping to
	    // do.
	    while (nleft > 0) {
		int n = Math.min(nleft, 4096);
		doc.getText(offs, n, data);
		out.write(data.array, data.offset, data.count);
		offs += n;
		nleft -= n;
	    }
	}
	out.flush();
