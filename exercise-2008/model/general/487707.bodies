class BasicRootPaneUI
!!!3007771.java!!!	createUI(inout c : JComponent) : ComponentUI
        return rootPaneUI;
!!!3007899.java!!!	installUI(inout c : JComponent) : void
 
        installDefaults((JRootPane)c);
        installComponents((JRootPane)c);
        installListeners((JRootPane)c);
        installKeyboardActions((JRootPane)c);
!!!3008027.java!!!	uninstallUI(inout c : JComponent) : void
 
        uninstallDefaults((JRootPane)c);
        uninstallComponents((JRootPane)c);
        uninstallListeners((JRootPane)c);
        uninstallKeyboardActions((JRootPane)c);
!!!3008155.java!!!	installDefaults(inout c : JRootPane) : void
        LookAndFeel.installProperty(c, "opaque", Boolean.FALSE);
!!!3008411.java!!!	installListeners(inout root : JRootPane) : void
	root.addPropertyChangeListener(this);
!!!3008539.java!!!	installKeyboardActions(inout root : JRootPane) : void
	InputMap km = getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW, root);
	SwingUtilities.replaceUIInputMap(root,
                JComponent.WHEN_IN_FOCUSED_WINDOW, km);
        km = getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,
                root);
        SwingUtilities.replaceUIInputMap(root,
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, km);

        LazyActionMap.installLazyActionMap(root, BasicRootPaneUI.class,
                "RootPane.actionMap");
	updateDefaultButtonBindings(root);
!!!3008923.java!!!	uninstallListeners(inout root : JRootPane) : void
	root.removePropertyChangeListener(this);
!!!3009051.java!!!	uninstallKeyboardActions(inout root : JRootPane) : void
	SwingUtilities.replaceUIInputMap(root, JComponent.
				       WHEN_IN_FOCUSED_WINDOW, null);
	SwingUtilities.replaceUIActionMap(root, null);
!!!3009179.java!!!	getInputMap(in condition : int, inout c : JComponent) : InputMap
        if (condition == JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT) {
            return (InputMap)DefaultLookup.get(c, this,
                                       "RootPane.ancestorInputMap");
        }

	if (condition == JComponent.WHEN_IN_FOCUSED_WINDOW) {
	    return createInputMap(condition, c);
	}
	return null;
!!!3009307.java!!!	createInputMap(in condition : int, inout c : JComponent) : ComponentInputMap
	return new RootPaneInputMap(c);
!!!3009435.java!!!	loadActionMap(inout map : LazyActionMap) : void
	map.put(new Actions(Actions.PRESS));
	map.put(new Actions(Actions.RELEASE));
	map.put(new Actions(Actions.POST_POPUP));
!!!3009563.java!!!	updateDefaultButtonBindings(inout root : JRootPane) : void
	InputMap km = SwingUtilities.getUIInputMap(root, JComponent.
					       WHEN_IN_FOCUSED_WINDOW);
	while (km != null && !(km instanceof RootPaneInputMap)) {
	    km = km.getParent();
	}
	if (km != null) {
	    km.clear();
	    if (root.getDefaultButton() != null) {
		Object[] bindings = (Object[])DefaultLookup.get(root, this,
                           "RootPane.defaultButtonWindowKeyBindings");
		if (bindings != null) {
		    LookAndFeel.loadKeyBindings(km, bindings);
		}
	    }
	}
!!!3009691.java!!!	propertyChange(inout e : PropertyChangeEvent) : void
	if(e.getPropertyName().equals("defaultButton")) {
	    JRootPane rootpane = (JRootPane)e.getSource();
	    updateDefaultButtonBindings(rootpane);
	    if (rootpane.getClientProperty("temporaryDefaultButton") == null) {
		rootpane.putClientProperty("initialDefaultButton", e.getNewValue());
	    }
	}
