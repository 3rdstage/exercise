class RMIClassLoader
!!!7543963.java!!!	loadClass(in name : String) : Class
	return loadClass((String) null, name);
!!!7544091.java!!!	loadClass(inout codebase : URL, in name : String) : Class
	return provider.loadClass(
	    codebase != null ? codebase.toString() : null, name, null);
!!!7544219.java!!!	loadClass(in codebase : String, in name : String) : Class
	return provider.loadClass(codebase, name, null);
!!!7544347.java!!!	loadClass(in codebase : String, in name : String, inout defaultLoader : ClassLoader) : Class
	return provider.loadClass(codebase, name, defaultLoader);
!!!7544475.java!!!	loadProxyClass(in codebase : String, in interfaces : String, inout defaultLoader : ClassLoader) : Class
	return provider.loadProxyClass(codebase, interfaces, defaultLoader);
!!!7544603.java!!!	getClassLoader(in codebase : String) : ClassLoader
	return provider.getClassLoader(codebase);
!!!7544731.java!!!	getClassAnnotation(inout cl : Class) : String
	return provider.getClassAnnotation(cl);
!!!7544859.java!!!	getDefaultProviderInstance() : RMIClassLoaderSpi
	SecurityManager sm = System.getSecurityManager();
	if (sm != null) {
	    sm.checkPermission(new RuntimePermission("setFactory"));
	}
	return defaultProvider;
!!!7544987.java!!!	getSecurityContext(inout loader : ClassLoader) : Object
	return sun.rmi.server.LoaderHandler.getSecurityContext(loader);
!!!7545115.java!!!	newDefaultProviderInstance() : RMIClassLoaderSpi
	return new RMIClassLoaderSpi() {
	    public Class loadClass(String codebase, String name,
				   ClassLoader defaultLoader)
		throws MalformedURLException, ClassNotFoundException
	    {
		return sun.rmi.server.LoaderHandler.loadClass(
		    codebase, name, defaultLoader);
	    }
    
	    public Class loadProxyClass(String codebase, String[] interfaces,
					ClassLoader defaultLoader)
		throws MalformedURLException, ClassNotFoundException
	    {
		return sun.rmi.server.LoaderHandler.loadProxyClass(
		    codebase, interfaces, defaultLoader);
	    }

	    public ClassLoader getClassLoader(String codebase)
		throws MalformedURLException
	    {
		return sun.rmi.server.LoaderHandler.getClassLoader(codebase);
	    }

	    public String getClassAnnotation(Class<?> cl) {
		return sun.rmi.server.LoaderHandler.getClassAnnotation(cl);
	    }
	};
!!!7545243.java!!!	initializeProvider() : RMIClassLoaderSpi
	/*
	 * First check for the system property being set:
	 */
	String providerClassName =
	    System.getProperty("java.rmi.server.RMIClassLoaderSpi");

	if (providerClassName != null) {
	    if (providerClassName.equals("default")) {
		return defaultProvider;
	    }

	    try {
		Class providerClass =
		    Class.forName(providerClassName, false,
				  ClassLoader.getSystemClassLoader());
		return (RMIClassLoaderSpi) providerClass.newInstance();

	    } catch (ClassNotFoundException e) {
		throw new NoClassDefFoundError(e.getMessage());
	    } catch (IllegalAccessException e) {
		throw new IllegalAccessError(e.getMessage());
	    } catch (InstantiationException e) {
		throw new InstantiationError(e.getMessage());
	    } catch (ClassCastException e) {
		Error error = new LinkageError(
		    "provider class not assignable to RMIClassLoaderSpi");
		error.initCause(e);
		throw error;
	    }
	}

	/*
	 * Next look for a provider configuration file intalled:
	 */
	Iterator iter = Service.providers(RMIClassLoaderSpi.class,
					  ClassLoader.getSystemClassLoader());
	if (iter.hasNext()) {
	    try {
		return (RMIClassLoaderSpi) iter.next();
	    } catch (ClassCastException e) {
		Error error = new LinkageError(
		    "provider class not assignable to RMIClassLoaderSpi");
		error.initCause(e);
		throw error;
	    }
	}

	/*
	 * Finally, return the canonical instance of the default provider.
	 */
	return defaultProvider;
