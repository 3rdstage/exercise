class HeavyweightFocusRequest
!!!6220059.java!!!	HeavyweightFocusRequest()
            heavyweight = null;
            lightweightRequests = null;
!!!6220187.java!!!	HeavyweightFocusRequest(inout heavyweight : Component, inout descendant : Component, inout temporary : boolean)
            if (dbg.on) {
                dbg.assertion(heavyweight != null);
            }

            this.heavyweight = heavyweight;
            this.lightweightRequests = new LinkedList();
            addLightweightRequest(descendant, temporary);
!!!6220315.java!!!	addLightweightRequest(inout descendant : Component, inout temporary : boolean) : boolean
            if (dbg.on) {
                dbg.assertion(this != HeavyweightFocusRequest.
                              CLEAR_GLOBAL_FOCUS_OWNER);
                dbg.assertion(descendant != null);
            }

            Component lastDescendant = ((lightweightRequests.size() > 0)
                ? ((LightweightFocusRequest)lightweightRequests.getLast()).
                  component
                : null);

            if (descendant != lastDescendant) {
                // Not a duplicate request
                lightweightRequests.add
                    (new LightweightFocusRequest(descendant, temporary));
                return true;
            } else {
                return false;
            }
!!!6220443.java!!!	getFirstLightweightRequest() : LightweightFocusRequest
            if (this == CLEAR_GLOBAL_FOCUS_OWNER) {
                return null;
            }
            return (LightweightFocusRequest)lightweightRequests.getFirst();
!!!6220571.java!!!	toString() : String
            boolean first = true;
            String str = "HeavyweightFocusRequest[heavweight=" + heavyweight +
                ",lightweightRequests=";
            if (lightweightRequests == null) {
                str += null;
            } else {
                str += "[";
                for (Iterator iter = lightweightRequests.iterator();
                     iter.hasNext(); )
                {
                    if (first) {
                        first = false;
                    } else {
                        str += ",";
                    }
                    str += iter.next();
                }
                str += "]";
            }
            str += "]";
            return str;
