class SequenceInputStream
!!!6906395.java!!!	SequenceInputStream(inout e : Enumeration)
	this.e = e;
	try {
	    nextStream();
	} catch (IOException ex) {
	    // This should never happen
	    throw new Error("panic");
	}
!!!6906523.java!!!	SequenceInputStream(inout s1 : InputStream, inout s2 : InputStream)
	Vector	v = new Vector(2);

	v.addElement(s1);
	v.addElement(s2);
	e = v.elements();
	try {
	    nextStream();
	} catch (IOException ex) {
	    // This should never happen
	    throw new Error("panic");
	}
!!!6906651.java!!!	nextStream() : void
	if (in != null) {
	    in.close();
	}

        if (e.hasMoreElements()) {
            in = (InputStream) e.nextElement();
            if (in == null)
                throw new NullPointerException();
        }
        else in = null;

!!!6906779.java!!!	available() : int
	if(in == null) {
	    return 0; // no way to signal EOF from available()
	}
	return in.available();
!!!6906907.java!!!	read() : int
	if (in == null) {
	    return -1;
	}
	int c = in.read();
	if (c == -1) {
	    nextStream();
	    return read();
	}
	return c;
!!!6907035.java!!!	read(in b : byte, in off : int, in len : int) : int
	if (in == null) {
	    return -1;
	} else if (b == null) {
	    throw new NullPointerException();
	} else if ((off < 0) || (off > b.length) || (len < 0) ||
		   ((off + len) > b.length) || ((off + len) < 0)) {
	    throw new IndexOutOfBoundsException();
	} else if (len == 0) {
	    return 0;
	}

	int n = in.read(b, off, len);
	if (n <= 0) {
	    nextStream();
	    return read(b, off, len);
	}
	return n;
!!!6907163.java!!!	close() : void
	do {
	    nextStream();
	} while (in != null);
