class BasicToolBarUI
!!!3047067.java!!!	createUI(inout c : JComponent) : ComponentUI
	return new BasicToolBarUI();
!!!3047195.java!!!	installUI(inout c : JComponent) : void
	toolBar = (JToolBar) c;

	// Set defaults
        installDefaults();
	installComponents();
        installListeners();
	installKeyboardActions();

        // Initialize instance vars
        dockingSensitivity = 0;
        floating = false;
        floatingX = floatingY = 0;
        floatingToolBar = null;

	setOrientation( toolBar.getOrientation() );
        LookAndFeel.installProperty(c, "opaque", Boolean.TRUE);

	if ( c.getClientProperty( FOCUSED_COMP_INDEX ) != null )
	{
	    focusedCompIndex = ( (Integer) ( c.getClientProperty( FOCUSED_COMP_INDEX ) ) ).intValue();
	}
!!!3047323.java!!!	uninstallUI(inout c : JComponent) : void

        // Clear defaults
        uninstallDefaults();
	uninstallComponents();
        uninstallListeners();
	uninstallKeyboardActions();

        // Clear instance vars
	if (isFloating() == true)
	    setFloating(false, null);

        floatingToolBar = null;
        dragWindow = null;
        dockingSource = null;

        c.putClientProperty( FOCUSED_COMP_INDEX, new Integer( focusedCompIndex ) );
!!!3047451.java!!!	installDefaults() : void
 	LookAndFeel.installBorder(toolBar,"ToolBar.border");	
	LookAndFeel.installColorsAndFont(toolBar,
					      "ToolBar.background",
					      "ToolBar.foreground",
					      "ToolBar.font");
	// Toolbar specific defaults
	if ( dockingColor == null || dockingColor instanceof UIResource )
	    dockingColor = UIManager.getColor("ToolBar.dockingBackground");
	if ( floatingColor == null || floatingColor instanceof UIResource )
	    floatingColor = UIManager.getColor("ToolBar.floatingBackground");
	if ( dockingBorderColor == null || 
	     dockingBorderColor instanceof UIResource )
	    dockingBorderColor = UIManager.getColor("ToolBar.dockingForeground");
	if ( floatingBorderColor == null || 
	     floatingBorderColor instanceof UIResource )
	    floatingBorderColor = UIManager.getColor("ToolBar.floatingForeground");

	// ToolBar rollover button borders
	Object rolloverProp = toolBar.getClientProperty( IS_ROLLOVER );
        if (rolloverProp == null) {
            rolloverProp = UIManager.get("ToolBar.isRollover");
        }
	if ( rolloverProp != null ) {
	    rolloverBorders = ((Boolean)rolloverProp).booleanValue();
	}

	if (rolloverBorder == null) {
	    rolloverBorder = createRolloverBorder();
	}
	if (nonRolloverBorder == null) {
	    nonRolloverBorder = createNonRolloverBorder();
	}
	if (nonRolloverToggleBorder == null) {
	    nonRolloverToggleBorder = createNonRolloverToggleBorder();
	}


	setRolloverBorders( isRolloverBorders() );
!!!3047579.java!!!	uninstallDefaults() : void
	LookAndFeel.uninstallBorder(toolBar);
        dockingColor = null;
        floatingColor = null;
        dockingBorderColor = null;
        floatingBorderColor = null;

	installNormalBorders(toolBar);

	rolloverBorder = null;
	nonRolloverBorder = null;
	nonRolloverToggleBorder = null;
!!!3047963.java!!!	installListeners() : void
        dockingListener = createDockingListener( );

        if ( dockingListener != null )
        {
	    toolBar.addMouseMotionListener( dockingListener );
	    toolBar.addMouseListener( dockingListener );
	}

	propertyListener = createPropertyListener();  // added in setFloating
	if (propertyListener != null) {
	    toolBar.addPropertyChangeListener(propertyListener);
	}

	toolBarContListener = createToolBarContListener();
        if ( toolBarContListener != null ) {
	    toolBar.addContainerListener( toolBarContListener );
	}

	toolBarFocusListener = createToolBarFocusListener();

        if ( toolBarFocusListener != null )
        {
	    // Put focus listener on all components in toolbar
	    Component[] components = toolBar.getComponents();

	    for ( int i = 0; i < components.length; ++i )
	    {
	        components[ i ].addFocusListener( toolBarFocusListener );
	    }
	}
!!!3048091.java!!!	uninstallListeners() : void
        if ( dockingListener != null )
        {
	    toolBar.removeMouseMotionListener(dockingListener);
	    toolBar.removeMouseListener(dockingListener);

            dockingListener = null;
	}

	if ( propertyListener != null )
	{
	    toolBar.removePropertyChangeListener(propertyListener);
	    propertyListener = null;  // removed in setFloating
	}

	if ( toolBarContListener != null )
	{
	    toolBar.removeContainerListener( toolBarContListener );
	    toolBarContListener = null;
	}

        if ( toolBarFocusListener != null )
        {
	    // Remove focus listener from all components in toolbar
	    Component[] components = toolBar.getComponents();

	    for ( int i = 0; i < components.length; ++i )
	    {
	        components[ i ].removeFocusListener( toolBarFocusListener );
	    }

	    toolBarFocusListener = null;
	}
        handler = null;
!!!3048219.java!!!	installKeyboardActions() : void
	InputMap km = getInputMap(JComponent.
				  WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

	SwingUtilities.replaceUIInputMap(toolBar, JComponent.
					 WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,
					 km);

    LazyActionMap.installLazyActionMap(toolBar, BasicToolBarUI.class,
            "ToolBar.actionMap");
!!!3048347.java!!!	getInputMap(in condition : int) : InputMap
	if (condition == JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT) {
	    return (InputMap)DefaultLookup.get(toolBar, this,
                    "ToolBar.ancestorInputMap");
	}
	return null;
!!!3048475.java!!!	loadActionMap(inout map : LazyActionMap) : void
        map.put(new Actions(Actions.NAVIGATE_RIGHT));
        map.put(new Actions(Actions.NAVIGATE_LEFT));
        map.put(new Actions(Actions.NAVIGATE_UP));
        map.put(new Actions(Actions.NAVIGATE_DOWN));
!!!3048603.java!!!	uninstallKeyboardActions() : void
	SwingUtilities.replaceUIActionMap(toolBar, null);
	SwingUtilities.replaceUIInputMap(toolBar, JComponent.
					 WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,
					 null);
!!!3048731.java!!!	navigateFocusedComp(in direction : int) : void
        int nComp = toolBar.getComponentCount();
	int j;

        switch ( direction )
	{
	    case EAST:
	    case SOUTH:

		if ( focusedCompIndex < 0 || focusedCompIndex >= nComp ) break;

		j = focusedCompIndex + 1;

		while ( j != focusedCompIndex )
		{
		    if ( j >= nComp ) j = 0;
		    Component comp = toolBar.getComponentAtIndex( j++ );

		    if ( comp != null && comp.isFocusTraversable() && comp.isEnabled() )
		    {
		        comp.requestFocus();
			break;
		    }
		}

	        break;

	    case WEST:
	    case NORTH:

		if ( focusedCompIndex < 0 || focusedCompIndex >= nComp ) break;

		j = focusedCompIndex - 1;

		while ( j != focusedCompIndex )
		{
		    if ( j < 0 ) j = nComp - 1;
		    Component comp = toolBar.getComponentAtIndex( j-- );

		    if ( comp != null && comp.isFocusTraversable() && comp.isEnabled() )
		    {
		        comp.requestFocus();
			break;
		    }
		}

	        break;

	    default:
	        break;
	}
!!!3048859.java!!!	createRolloverBorder() : Border
        Object border = UIManager.get("ToolBar.rolloverBorder");
        if (border != null) {
            return (Border)border;
        }
	UIDefaults table = UIManager.getLookAndFeelDefaults();
	return new CompoundBorder(new BasicBorders.RolloverButtonBorder(
					   table.getColor("controlShadow"),
                                           table.getColor("controlDkShadow"),
                                           table.getColor("controlHighlight"),
                                           table.getColor("controlLtHighlight")),
				  new BasicBorders.RolloverMarginBorder());
!!!3048987.java!!!	createNonRolloverBorder() : Border
        Object border = UIManager.get("ToolBar.nonrolloverBorder");
        if (border != null) {
            return (Border)border;
        }
	UIDefaults table = UIManager.getLookAndFeelDefaults();
	return new CompoundBorder(new BasicBorders.ButtonBorder(
					   table.getColor("Button.shadow"),
                                           table.getColor("Button.darkShadow"),
                                           table.getColor("Button.light"),
                                           table.getColor("Button.highlight")),
				  new BasicBorders.RolloverMarginBorder());
!!!3049115.java!!!	createNonRolloverToggleBorder() : Border
	UIDefaults table = UIManager.getLookAndFeelDefaults();
	return new CompoundBorder(new BasicBorders.RadioButtonBorder(
 					   table.getColor("ToggleButton.shadow"),
                                           table.getColor("ToggleButton.darkShadow"),
                                           table.getColor("ToggleButton.light"),
                                           table.getColor("ToggleButton.highlight")),
				  new BasicBorders.RolloverMarginBorder());
!!!3049243.java!!!	createFloatingFrame(inout toolbar : JToolBar) : JFrame
	Window window = SwingUtilities.getWindowAncestor(toolbar);
	JFrame frame = new JFrame(toolbar.getName(),
				  (window != null) ? window.getGraphicsConfiguration() : null) {
	    // Override createRootPane() to automatically resize
	    // the frame when contents change
	    protected JRootPane createRootPane() {
		JRootPane rootPane = new JRootPane() {
		    private boolean packing = false;

		    public void validate() {
			super.validate();
			if (!packing) {
			    packing = true;
			    pack();
			    packing = false;
			}
		    }
		};
		rootPane.setOpaque(true);
		return rootPane;
	    }
	};
        frame.getRootPane().setName("ToolBar.FloatingFrame");
	frame.setResizable(false);
	WindowListener wl = createFrameListener();
	frame.addWindowListener(wl);
        return frame;
!!!3049371.java!!!	createFloatingWindow(inout toolbar : JToolBar) : RootPaneContainer
	class ToolBarDialog extends JDialog {
	    public ToolBarDialog(Frame owner, String title, boolean modal) {
		super(owner, title, modal);
	    }

	    public ToolBarDialog(Dialog owner, String title, boolean modal) {
		super(owner, title, modal);
	    }

	    // Override createRootPane() to automatically resize
	    // the frame when contents change
	    protected JRootPane createRootPane() {
		JRootPane rootPane = new JRootPane() {
		    private boolean packing = false;

		    public void validate() {
			super.validate();
			if (!packing) {
			    packing = true;
			    pack();
			    packing = false;
			}
		    }
		};
		rootPane.setOpaque(true);
		return rootPane;
	    }
	}

	JDialog dialog;
	Window window = SwingUtilities.getWindowAncestor(toolbar);
	if (window instanceof Frame) {
	    dialog = new ToolBarDialog((Frame)window, toolbar.getName(), false);
	} else if (window instanceof Dialog) {
	    dialog = new ToolBarDialog((Dialog)window, toolbar.getName(), false);
	} else {
	    dialog = new ToolBarDialog((Frame)null, toolbar.getName(), false);
	}

        dialog.getRootPane().setName("ToolBar.FloatingWindow");
	dialog.setTitle(toolbar.getName());
	dialog.setResizable(false);
	WindowListener wl = createFrameListener();
	dialog.addWindowListener(wl);
        return dialog;
!!!3049499.java!!!	createDragWindow(inout toolbar : JToolBar) : DragWindow
	Window frame = null;
	if(toolBar != null) {
	    Container p;
	    for(p = toolBar.getParent() ; p != null && !(p instanceof Window) ;
		p = p.getParent());
	    if(p != null && p instanceof Window)
		frame = (Window) p;
	}
	if(floatingToolBar == null) {
	    floatingToolBar = createFloatingWindow(toolBar);
	}
	if (floatingToolBar instanceof Window) frame = (Window) floatingToolBar;
	DragWindow dragWindow = new DragWindow(frame);
	return dragWindow;
!!!3049627.java!!!	isRolloverBorders() : boolean
        return rolloverBorders;
!!!3049755.java!!!	setRolloverBorders(inout rollover : boolean) : void
        rolloverBorders = rollover;
	    
	if ( rolloverBorders )	{
	    installRolloverBorders( toolBar );
	} else	{
	    installNonRolloverBorders( toolBar );
	}
!!!3049883.java!!!	installRolloverBorders(inout c : JComponent) : void
	// Put rollover borders on buttons
	Component[] components = c.getComponents();

	for ( int i = 0; i < components.length; ++i ) {
	    if ( components[ i ] instanceof JComponent ) {
		( (JComponent)components[ i ] ).updateUI();
		setBorderToRollover( components[ i ] );
	    }
	}
!!!3050011.java!!!	installNonRolloverBorders(inout c : JComponent) : void
	// Put non-rollover borders on buttons. These borders reduce the margin.
	Component[] components = c.getComponents();

	for ( int i = 0; i < components.length; ++i ) {
	    if ( components[ i ] instanceof JComponent ) {
		( (JComponent)components[ i ] ).updateUI();
		setBorderToNonRollover( components[ i ] );
	    }
	}
!!!3050139.java!!!	installNormalBorders(inout c : JComponent) : void
	// Put back the normal borders on buttons
	Component[] components = c.getComponents();

	for ( int i = 0; i < components.length; ++i ) {
	    setBorderToNormal( components[ i ] );
	}
!!!3050267.java!!!	setBorderToRollover(inout c : Component) : void
        if (c instanceof AbstractButton) {
	    AbstractButton b = (AbstractButton)c;
	    
	    Border border = (Border)borderTable.get(b);
	    if (border == null || border instanceof UIResource) {
		borderTable.put(b, b.getBorder());
	    }

	    // Only set the border if its the default border
	    if (b.getBorder() instanceof UIResource) {
		b.setBorder(getRolloverBorder(b));
	    }

	    rolloverTable.put(b, b.isRolloverEnabled()?
			      Boolean.TRUE: Boolean.FALSE);
	    b.setRolloverEnabled(true);
	}
!!!3050395.java!!!	getRolloverBorder(inout b : AbstractButton) : Border
        Object borderProvider = UIManager.get("ToolBar.rolloverBorderProvider");
        if(borderProvider == null) {
            return rolloverBorder;
        }
        
        return ((BorderProvider) borderProvider).getRolloverBorder(b);
!!!3050523.java!!!	setBorderToNonRollover(inout c : Component) : void
        if (c instanceof AbstractButton) {
	    AbstractButton b = (AbstractButton)c;
	    
	    Border border = (Border)borderTable.get(b);
	    if (border == null || border instanceof UIResource) {
		borderTable.put(b, b.getBorder());
	    }

	    // Only set the border if its the default border
	    if (b.getBorder() instanceof UIResource) {
		if (b instanceof JToggleButton) {
		    ((JToggleButton)b).setBorder(nonRolloverToggleBorder);
		} else {
		    b.setBorder(nonRolloverBorder);
		}
	    }
	    rolloverTable.put(b, b.isRolloverEnabled()?
			      Boolean.TRUE: Boolean.FALSE);
	    b.setRolloverEnabled(false);
	}
!!!3050651.java!!!	setBorderToNormal(inout c : Component) : void
        if (c instanceof AbstractButton) {
	    AbstractButton b = (AbstractButton)c;

	    Border border = (Border)borderTable.remove(b);
	    b.setBorder(border);

	    Boolean value = (Boolean)rolloverTable.remove(b);
	    if (value != null) {
		b.setRolloverEnabled(value.booleanValue());
	    }
	}
!!!3050779.java!!!	setFloatingLocation(in x : int, in y : int) : void
	floatingX = x;
	floatingY = y;
!!!3050907.java!!!	isFloating() : boolean
	return floating;
!!!3051035.java!!!	setFloating(inout b : boolean, inout p : Point) : void
 	if (toolBar.isFloatable() == true) {
	    if (dragWindow != null)
		dragWindow.setVisible(false);
	    this.floating = b;
	    if (b == true)
	    {
		if (dockingSource == null)
		{
		    dockingSource = toolBar.getParent();
		    dockingSource.remove(toolBar);
		}
		constraintBeforeFloating = calculateConstraint();
		if ( propertyListener != null )
                    UIManager.addPropertyChangeListener( propertyListener );
		if (floatingToolBar == null)
		    floatingToolBar = createFloatingWindow(toolBar);
		floatingToolBar.getContentPane().add(toolBar,BorderLayout.CENTER);
		if (floatingToolBar instanceof Window) ((Window)floatingToolBar).pack();
		if (floatingToolBar instanceof Window) ((Window)floatingToolBar).setLocation(floatingX, floatingY);
		if (floatingToolBar instanceof Window) ((Window)floatingToolBar).show();
	    } else {
		if (floatingToolBar == null)
		    floatingToolBar = createFloatingWindow(toolBar);
		if (floatingToolBar instanceof Window) ((Window)floatingToolBar).setVisible(false);
		floatingToolBar.getContentPane().remove(toolBar);
		String constraint = getDockingConstraint(dockingSource,
							 p);
		if (constraint == null) {
		    constraint = BorderLayout.NORTH;
		}
		int orientation = mapConstraintToOrientation(constraint);
		setOrientation(orientation);
		if (dockingSource== null)
		    dockingSource = toolBar.getParent();
		if ( propertyListener != null )
		    UIManager.removePropertyChangeListener( propertyListener );
		dockingSource.add(constraint, toolBar);
	    }
 	    dockingSource.invalidate();
 	    Container dockingSourceParent = dockingSource.getParent();
	    if (dockingSourceParent != null) 
		dockingSourceParent.validate();
	    dockingSource.repaint();
	}
!!!3051163.java!!!	mapConstraintToOrientation(in constraint : String) : int
	int orientation = toolBar.getOrientation();

	if ( constraint != null )
	{
	    if ( constraint.equals(BorderLayout.EAST) || constraint.equals(BorderLayout.WEST) )
	        orientation = JToolBar.VERTICAL;
	    else if ( constraint.equals(BorderLayout.NORTH) || constraint.equals(BorderLayout.SOUTH) )
	        orientation = JToolBar.HORIZONTAL;
	}

	return orientation;
!!!3051291.java!!!	setOrientation(in orientation : int) : void
	
        toolBar.setOrientation( orientation );

	if (dragWindow !=null)
	    dragWindow.setOrientation(orientation);
!!!3051419.java!!!	getDockingColor() : Color
	return dockingColor;
!!!3051547.java!!!	setDockingColor(inout c : Color) : void
	this.dockingColor = c;
!!!3051675.java!!!	getFloatingColor() : Color
	return floatingColor;
!!!3051803.java!!!	setFloatingColor(inout c : Color) : void
	this.floatingColor = c;
!!!3051931.java!!!	isBlocked(inout comp : Component, inout constraint : Object) : boolean
	if (comp instanceof Container) {
	    Container cont = (Container)comp;
	    LayoutManager lm = cont.getLayout();
	    if (lm instanceof BorderLayout) {
		BorderLayout blm = (BorderLayout)lm;
		Component c = blm.getLayoutComponent(cont, constraint);
		return (c != null && c != toolBar);
	    }
	}
	return false;
!!!3052059.java!!!	canDock(inout c : Component, inout p : Point) : boolean
	return (p != null && getDockingConstraint(c, p) != null);
!!!3052187.java!!!	calculateConstraint() : String
	String constraint = null;
	LayoutManager lm = dockingSource.getLayout();
	if (lm instanceof BorderLayout) {
	    constraint = (String)((BorderLayout)lm).getConstraints(toolBar);
	}
	return (constraint != null) ? constraint : constraintBeforeFloating;
!!!3052315.java!!!	getDockingConstraint(inout c : Component, inout p : Point) : String
	if (p == null) return constraintBeforeFloating;
	if (c.contains(p)) {
	    dockingSensitivity = (toolBar.getOrientation() == JToolBar.HORIZONTAL)
						? toolBar.getSize().height
						: toolBar.getSize().width;
	    // North  (Base distance on height for now!)
	    if (p.y < dockingSensitivity && !isBlocked(c, BorderLayout.NORTH)) {
		return BorderLayout.NORTH;
	    }
	    // East  (Base distance on height for now!)
	    if (p.x >= c.getWidth() - dockingSensitivity && !isBlocked(c, BorderLayout.EAST)) {
		return BorderLayout.EAST;
	    }
	    // West  (Base distance on height for now!)
	    if (p.x < dockingSensitivity && !isBlocked(c, BorderLayout.WEST)) {
		return BorderLayout.WEST;
	    }
	    if (p.y >= c.getHeight() - dockingSensitivity && !isBlocked(c, BorderLayout.SOUTH)) {
		return BorderLayout.SOUTH;
	    }
	}
	return null;
!!!3052443.java!!!	dragTo(inout position : Point, inout origin : Point) : void
	if (toolBar.isFloatable() == true)
	{
	  try
	  {
	    if (dragWindow == null)
		dragWindow = createDragWindow(toolBar);
	    Point offset = dragWindow.getOffset();
	    if (offset == null) {
		Dimension size = toolBar.getPreferredSize();
		offset = new Point(size.width/2, size.height/2);
		dragWindow.setOffset(offset);
	    }
	    Point global = new Point(origin.x+ position.x,
				     origin.y+position.y);
	    Point dragPoint = new Point(global.x- offset.x, 
					global.y- offset.y);
	    if (dockingSource == null)
		dockingSource = toolBar.getParent();
		constraintBeforeFloating = calculateConstraint();	    
	    Point dockingPosition = dockingSource.getLocationOnScreen();
	    Point comparisonPoint = new Point(global.x-dockingPosition.x,
					      global.y-dockingPosition.y);
	    if (canDock(dockingSource, comparisonPoint)) {
		dragWindow.setBackground(getDockingColor());	
		String constraint = getDockingConstraint(dockingSource,
							 comparisonPoint);
		int orientation = mapConstraintToOrientation(constraint);
		dragWindow.setOrientation(orientation);
		dragWindow.setBorderColor(dockingBorderColor);
	    } else {
		dragWindow.setBackground(getFloatingColor());
		dragWindow.setBorderColor(floatingBorderColor);
	    }
	    
	    dragWindow.setLocation(dragPoint.x, dragPoint.y);
	    if (dragWindow.isVisible() == false) {
		Dimension size = toolBar.getPreferredSize();
		dragWindow.setSize(size.width, size.height);
		dragWindow.show();
	    }
	  }
	  catch ( IllegalComponentStateException e )
	  {
	  }
	}
!!!3052571.java!!!	floatAt(inout position : Point, inout origin : Point) : void
	if(toolBar.isFloatable() == true)
	{
	  try
	  {
	    Point offset = dragWindow.getOffset();
	    if (offset == null) {
		offset = position;
		dragWindow.setOffset(offset);
	    }
	    Point global = new Point(origin.x+ position.x,
				     origin.y+position.y);
	    setFloatingLocation(global.x-offset.x, 
				global.y-offset.y);
	    if (dockingSource != null) { 
		Point dockingPosition = dockingSource.getLocationOnScreen();
		Point comparisonPoint = new Point(global.x-dockingPosition.x,
						  global.y-dockingPosition.y);
		if (canDock(dockingSource, comparisonPoint)) {
		    setFloating(false, comparisonPoint);
		} else {
		    setFloating(true, null);
		}
	    } else {
		setFloating(true, null);
	    }
	    dragWindow.setOffset(null);
	  }
	  catch ( IllegalComponentStateException e )
	  {
	  }
	}
!!!3052699.java!!!	getHandler() : Handler
        if (handler == null) {
            handler = new Handler();
        }
        return handler;
!!!3052827.java!!!	createToolBarContListener() : ContainerListener
        return getHandler();
!!!3052955.java!!!	createToolBarFocusListener() : FocusListener
        return getHandler();
!!!3053083.java!!!	createPropertyListener() : PropertyChangeListener
        return getHandler();
!!!3053211.java!!!	createDockingListener() : MouseInputListener
        getHandler().tb = toolBar;
        return getHandler();
!!!3053339.java!!!	createFrameListener() : WindowListener
	return new FrameListener();
!!!3053467.java!!!	paintDragWindow(inout g : Graphics) : void
        g.setColor(dragWindow.getBackground());	    
        int w = dragWindow.getWidth();
        int h = dragWindow.getHeight();
        g.fillRect(0, 0, w, h);
        g.setColor(dragWindow.getBorderColor());
        g.drawRect(0, 0, w - 1, h - 1);	    
