class NoCallStackClassLoader
!!!8409627.java!!!	NoCallStackClassLoader(in className : String, in byteCode : byte, in referencedClassNames : String, inout referencedClassLoader : ClassLoader, inout protectionDomain : ProtectionDomain)
	this(new String[] {className}, new byte[][] {byteCode},
	     referencedClassNames, referencedClassLoader, protectionDomain);
!!!8409755.java!!!	NoCallStackClassLoader(in classNames : String, in byteCodes : byte, in referencedClassNames : String, inout referencedClassLoader : ClassLoader, inout protectionDomain : ProtectionDomain)
	super(null);

	/* Validation. */
	if (classNames == null || classNames.length == 0
	    || byteCodes == null || classNames.length != byteCodes.length
	    || referencedClassNames == null || protectionDomain == null)
	    throw new IllegalArgumentException();
	for (int i = 0; i < classNames.length; i++) {
	    if (classNames[i] == null || byteCodes[i] == null)
		throw new IllegalArgumentException();
	}
	for (int i = 0; i < referencedClassNames.length; i++) {
	    if (referencedClassNames[i] == null)
		throw new IllegalArgumentException();
	}

	this.classNames = classNames;
	this.byteCodes = byteCodes;
	this.referencedClassNames = referencedClassNames;
	this.referencedClassLoader = referencedClassLoader;
	this.protectionDomain = protectionDomain;
!!!8409883.java!!!	findClass(in name : String) : Class
	for (int i = 0; i < classNames.length; i++) {
	    if (name.equals(classNames[i])) {
		return defineClass(classNames[i], byteCodes[i], 0,
				   byteCodes[i].length, protectionDomain);
	    }
	}

	/* If the referencedClassLoader is null, it is the bootstrap
	 * class loader, and there's no point in delegating to it
	 * because it's already our parent class loader.
	 */
	if (referencedClassLoader != null) {
	    for (int i = 0; i < referencedClassNames.length; i++) {
		if (name.equals(referencedClassNames[i]))
		    return referencedClassLoader.loadClass(name);
	    }
	}

	throw new ClassNotFoundException(name);
!!!8410011.java!!!	stringToBytes(in s : String) : byte
	final int slen = s.length();
	byte[] bytes = new byte[slen];
	for (int i = 0; i < slen; i++)
	    bytes[i] = (byte) s.charAt(i);
	return bytes;
