class Zone
!!!9891739.java!!!	Zone(inout elem : Element, inout start : Position, inout end : Position)
            super(elem, ZoneView.this.getAxis());
	    this.start = start;
	    this.end = end;
!!!9891867.java!!!	load() : void
	    if (! isLoaded()) {
		setEstimatedMajorSpan(true);
		Element e = getElement();
		ViewFactory f = getViewFactory();
		int index0 = e.getElementIndex(getStartOffset());
		int index1 = e.getElementIndex(getEndOffset());
		View[] added = new View[index1 - index0 + 1];
		for (int i = index0; i <= index1; i++) {
		    added[i - index0] = f.create(e.getElement(i));
		}
		replace(0, 0, added);

		zoneWasLoaded(this);
	    }
!!!9891995.java!!!	unload() : void
	    setEstimatedMajorSpan(true);
	    removeAll();
!!!9892123.java!!!	isLoaded() : boolean
	    return (getViewCount() != 0);
!!!9892251.java!!!	loadChildren(inout f : ViewFactory) : void
	    // mark the major span as estimated
	    setEstimatedMajorSpan(true);

	    // estimate the span
	    Element elem = getElement();
	    int index0 = elem.getElementIndex(getStartOffset());
	    int index1 = elem.getElementIndex(getEndOffset());
	    int nChildren = index1 - index0;

	    // replace this with something real
	    //setSpan(getMajorAxis(), nChildren * 10);

	    View first = f.create(elem.getElement(index0));
	    first.setParent(this);
	    float w = first.getPreferredSpan(X_AXIS);
	    float h = first.getPreferredSpan(Y_AXIS);
	    if (getMajorAxis() == X_AXIS) {
		w *= nChildren;
	    } else {
		h += nChildren;
	    }

	    setSize(w, h);
!!!9892379.java!!!	flushRequirementChanges() : void
	    if (isLoaded()) {
		super.flushRequirementChanges();
	    }
!!!9892507.java!!!	getViewIndex(in pos : int, inout b : Bias) : int
	    boolean isBackward = (b == Position.Bias.Backward);
	    pos = (isBackward) ? Math.max(0, pos - 1) : pos;
	    Element elem = getElement();
	    int index1 = elem.getElementIndex(pos);
	    int index0 = elem.getElementIndex(getStartOffset());
	    return index1 - index0;
!!!9892635.java!!!	updateChildren(inout ec : ElementChange, inout e : DocumentEvent, inout f : ViewFactory) : boolean
	    // the structure of this element changed.
	    Element[] removedElems = ec.getChildrenRemoved();
	    Element[] addedElems = ec.getChildrenAdded();
	    Element elem = getElement();
	    int index0 = elem.getElementIndex(getStartOffset());
	    int index1 = elem.getElementIndex(getEndOffset()-1);
	    int index = ec.getIndex();
	    if ((index >= index0) && (index <= index1)) {
		// The change is in this zone
		int replaceIndex = index - index0;
		int nadd = Math.min(index1 - index0 + 1, addedElems.length);
		int nremove = Math.min(index1 - index0 + 1, removedElems.length);
		View[] added = new View[nadd];
		for (int i = 0; i < nadd; i++) {
		    added[i] = f.create(addedElems[i]);
		}
		replace(replaceIndex, nremove, added);
	    }
	    return true;
!!!9892763.java!!!	getAttributes() : AttributeSet
	    return ZoneView.this.getAttributes();
!!!9892891.java!!!	paint(inout g : Graphics, inout a : Shape) : void
	    load();
	    super.paint(g, a);
!!!9893019.java!!!	viewToModel(in x : float, in y : float, inout a : Shape, inout bias : Bias) : int
	    load();
	    return super.viewToModel(x, y, a, bias);
!!!9893147.java!!!	modelToView(in pos : int, inout a : Shape, inout b : Bias) : Shape
	    load();
	    return super.modelToView(pos, a, b);
!!!9893275.java!!!	getStartOffset() : int
	    return start.getOffset();
!!!9893403.java!!!	getEndOffset() : int
	    return end.getOffset();
!!!9893531.java!!!	insertUpdate(inout e : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
	    if (isLoaded()) {
		super.insertUpdate(e, a, f);
	    }
!!!9893659.java!!!	removeUpdate(inout e : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
	    if (isLoaded()) {
		super.removeUpdate(e, a, f);
	    }
!!!9893787.java!!!	changedUpdate(inout e : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
	    if (isLoaded()) {
		super.changedUpdate(e, a, f);
	    }
