format 66
"reflect" // src::java::lang::reflect
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/lang/reflect"
  java_package "java.lang.reflect"
  classview 134683 "reflect"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 170651 "Method"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>Method</code> provides information about, and access to, a single method
on a class or interface.  The reflected method may be a class method
or an instance method (including an abstract method).

<p>A <code>Method</code> permits widening conversions to occur when matching the
actual parameters to invoke with the underlying method's formal
parameters, but it throws an <code>IllegalArgumentException</code> if a
narrowing conversion would occur.

@see Member
@see java.lang.Class
@see java.lang.Class#getMethods()
@see java.lang.Class#getMethod(String, Class[])
@see java.lang.Class#getDeclaredMethods()
@see java.lang.Class#getDeclaredMethod(String, Class[])

@author Kenneth Russell
@author Nakul Saraiya"
      classrelation 1801115 // <generalisation>
	relation 1801115 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1801115 // <generalisation>
	  b parent class_ref 923931 // AccessibleObject
      end

      classrelation 1801243 // <realization>
	relation 1801243 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1801243 // <realization>
	  b parent class_ref 910747 // GenericDeclaration
      end

      classrelation 1801371 // <realization>
	relation 1801371 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1801371 // <realization>
	  b parent class_ref 221211 // Member
      end

      classrelation 1801499 // clazz (<unidirectional association>)
	relation 1801499 --->
	  a role_name "clazz" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1801499 // clazz (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      attribute 2751003 "slot"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2751131 "name"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " This is guaranteed to be interned by the VM in the 1.4
 reflection implementation"
      end

      classrelation 1801627 // returnType (<unidirectional association>)
	relation 1801627 --->
	  a role_name "returnType" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1801627 // returnType (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      classrelation 1801755 // parameterTypes (<unidirectional association>)
	relation 1801755 --->
	  a role_name "parameterTypes" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1801755 // parameterTypes (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      classrelation 1801883 // exceptionTypes (<unidirectional association>)
	relation 1801883 --->
	  a role_name "exceptionTypes" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1801883 // exceptionTypes (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      attribute 2751259 "modifiers"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2751387 "signature"
	private explicit_type "String"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Generics and annotations support"
      end

      attribute 2751515 "genericInfo"
	private explicit_type "MethodRepository"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " generic info repository; lazily initialized"
      end

      attribute 2751643 "annotations"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2751771 "parameterAnnotations"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2751899 "annotationDefault"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2752027 "methodAccessor"
	volatile private explicit_type "MethodAccessor"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1802011 // root (<unidirectional association>)
	relation 1802011 --->
	  a role_name "root" private
	    comment " For sharing of MethodAccessors. This branching structure is
 currently only two levels deep (i.e., one root Method and
 potentially many Method objects pointing to it.)
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1802011 // root (<unidirectional association>)
	  b parent class_ref 170651 // Method
      end

      classrelation 1802139 // securityCheckTargetClassCache (<unidirectional association>)
	relation 1802139 --->
	  a role_name "securityCheckTargetClassCache" volatile private
	    comment " More complicated security check cache needed here than for
 Class.newInstance() and Constructor.newInstance()
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1802139 // securityCheckTargetClassCache (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      operation 7128987 "getGenericSignature"
	private explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Generics infrastructure"
      end

      operation 7129115 "getFactory"
	private explicit_return_type "GenericsFactory"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessor for factory"
      end

      operation 7129243 "getGenericInfo"
	private explicit_return_type "MethodRepository"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessor for generic info repository"
      end

      operation 7129371 "Method"
	package explicit_return_type ""
	nparams 11
	  param inout name "declaringClass" type class_ref 164635 // Class
	  param in name "name" explicit_type "String"
	  param inout name "parameterTypes" type class_ref 164635 // Class
	  param inout name "returnType" type class_ref 164635 // Class
	  param inout name "checkedExceptions" type class_ref 164635 // Class
	  param in name "modifiers" explicit_type "int"
	  param in name "slot" explicit_type "int"
	  param in name "signature" explicit_type "String"
	  param in name "annotations" explicit_type "byte"
	  param in name "parameterAnnotations" explicit_type "byte"
	  param in name "annotationDefault" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8}[] ${p8}, ${t9}[] ${p9}, ${t10}[] ${p10}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private constructor used by ReflectAccess to enable
instantiation of these objects in Java code from the java.lang
package via sun.reflect.LangReflectAccess."
      end

      operation 7129499 "copy"
	package return_type class_ref 170651 // Method
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private routine (exposed to java.lang.Class via
ReflectAccess) which returns a copy of this Method. The copy's
\"root\" field points to this Method."
      end

      operation 7129627 "getDeclaringClass"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Class</code> object representing the class or interface
that declares the method represented by this <code>Method</code> object."
      end

      operation 7129755 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the method represented by this <code>Method</code> 
object, as a <code>String</code>."
      end

      operation 7129883 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java language modifiers for the method represented
by this <code>Method</code> object, as an integer. The <code>Modifier</code> class should
be used to decode the modifiers.

@see Modifier"
      end

      operation 7130011 "getTypeParameters"
	public return_type class_ref 910875 // TypeVariable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Method>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>TypeVariable</tt> objects that represent the
type variables declared by the generic declaration represented by this
<tt>GenericDeclaration</tt> object, in declaration order.  Returns an
array of length 0 if the underlying generic declaration declares no type
variables.

@return an array of <tt>TypeVariable</tt> objects that represent
    the type variables declared by this generic declaration
@throws GenericSignatureFormatError if the generic
    signature of this generic declaration does not conform to
    the format specified in the Java Virtual Machine Specification,
    3rd edition
@since 1.5"
      end

      operation 7130139 "getReturnType"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Class</code> object that represents the formal return type
of the method represented by this <code>Method</code> object.

@return the return type for the method this object represents"
      end

      operation 7130267 "getGenericReturnType"
	public return_type class_ref 911003 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>Type</tt> object that represents the formal return 
type of the method represented by this <tt>Method</tt> object.

<p>If the return type is a parameterized type,
the <tt>Type</tt> object returned must accurately reflect
the actual type parameters used in the source code.

<p>If the return type is a type variable or a parameterized type, it
is created. Otherwise, it is resolved.

@return  a <tt>Type</tt> object that represents the formal return 
    type of the underlying  method
@throws GenericSignatureFormatError
    if the generic method signature does not conform to the format
    specified in the Java Virtual Machine Specification, 3rd edition
@throws TypeNotPresentException if the underlying method's
    return type refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if the
    underlying method's return typed refers to a parameterized
    type that cannot be instantiated for any reason
@since 1.5"
      end

      operation 7130395 "getParameterTypes"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>Class</code> objects that represent the formal
parameter types, in declaration order, of the method
represented by this <code>Method</code> object.  Returns an array of length
0 if the underlying method takes no parameters.

@return the parameter types for the method this object
represents"
      end

      operation 7130523 "getGenericParameterTypes"
	public return_type class_ref 911003 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>Type</tt> objects that represent the formal
parameter types, in declaration order, of the method represented by
this <tt>Method</tt> object. Returns an array of length 0 if the
underlying method takes no parameters.

<p>If a formal parameter type is a parameterized type,
the <tt>Type</tt> object returned for it must accurately reflect
the actual type parameters used in the source code.

<p>If a formal parameter type is a type variable or a parameterized 
type, it is created. Otherwise, it is resolved.

@return an array of Types that represent the formal
    parameter types of the underlying method, in declaration order
@throws GenericSignatureFormatError
    if the generic method signature does not conform to the format
    specified in the Java Virtual Machine Specification, 3rd edition
@throws TypeNotPresentException if any of the parameter
    types of the underlying method refers to a non-existent type
    declaration
@throws MalformedParameterizedTypeException if any of
    the underlying method's parameter types refer to a parameterized
    type that cannot be instantiated for any reason
@since 1.5"
      end

      operation 7130651 "getExceptionTypes"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>Class</code> objects that represent 
the types of the exceptions declared to be thrown
by the underlying method
represented by this <code>Method</code> object.  Returns an array of length
0 if the method declares no exceptions in its <code>throws</code> clause.

@return the exception types declared as being thrown by the
method this object represents"
      end

      operation 7130779 "getGenericExceptionTypes"
	public return_type class_ref 911003 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>Type</tt> objects that represent the 
exceptions declared to be thrown by this <tt>Method</tt> object. 
Returns an array of length 0 if the underlying method declares
no exceptions in its <tt>throws</tt> clause.  

<p>If an exception type is a parameterized type, the <tt>Type</tt>
object returned for it must accurately reflect the actual type
parameters used in the source code.

<p>If an exception type is a type variable or a parameterized 
type, it is created. Otherwise, it is resolved.

@return an array of Types that represent the exception types
    thrown by the underlying method
@throws GenericSignatureFormatError
    if the generic method signature does not conform to the format
    specified in the Java Virtual Machine Specification, 3rd edition
@throws TypeNotPresentException if the underlying method's
    <tt>throws</tt> clause refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if
    the underlying method's <tt>throws</tt> clause refers to a
    parameterized type that cannot be instantiated for any reason
@since 1.5"
      end

      operation 7130907 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>Method</code> against the specified object.  Returns
true if the objects are the same.  Two <code>Methods</code> are the same if
they were declared by the same class and have the same name
and formal parameter types and return type."
      end

      operation 7131035 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for this <code>Method</code>.  The hashcode is computed
as the exclusive-or of the hashcodes for the underlying
method's declaring class name and the method's name."
      end

      operation 7131163 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this <code>Method</code>.  The string is
formatted as the method access modifiers, if any, followed by
the method return type, followed by a space, followed by the
class declaring the method, followed by a period, followed by
the method name, followed by a parenthesized, comma-separated
list of the method's formal parameter types. If the method
throws checked exceptions, the parameter list is followed by a
space, followed by the word throws followed by a
comma-separated list of the thrown exception types.
For example:
<pre>
   public boolean java.lang.Object.equals(java.lang.Object)
</pre>

<p>The access modifiers are placed in canonical order as
specified by \"The Java Language Specification\".  This is
<tt>public</tt>, <tt>protected</tt> or <tt>private</tt> first,
and then other modifiers in the following order:
<tt>abstract</tt>, <tt>static</tt>, <tt>final</tt>,
<tt>synchronized</tt> <tt>native</tt>."
      end

      operation 7131291 "toGenericString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this <code>Method</code>, including
type parameters.  The string is formatted as the method access
modifiers, if any, followed by an angle-bracketed
comma-separated list of the method's type parameters, if any,
followed by the method's generic return type, followed by a
space, followed by the class declaring the method, followed by
a period, followed by the method name, followed by a
parenthesized, comma-separated list of the method's generic
formal parameter types. A space is used to separate access
modifiers from one another and from the type parameters or
return type.  If there are no type parameters, the type
parameter list is elided; if the type parameter list is
present, a space separates the list from the class name.  If
the method is declared to throw exceptions, the parameter list
is followed by a space, followed by the word throws followed by
a comma-separated list of the generic thrown exception types.
If there are no type parameters, the type parameter list is
elided.

<p>The access modifiers are placed in canonical order as
specified by \"The Java Language Specification\".  This is
<tt>public</tt>, <tt>protected</tt> or <tt>private</tt> first,
and then other modifiers in the following order:
<tt>abstract</tt>, <tt>static</tt>, <tt>final</tt>,
<tt>synchronized</tt> <tt>native</tt>.

@return a string describing this <code>Method</code>,
include type parameters

@since 1.5"
      end

      operation 7131419 "invoke"
	public explicit_return_type "Object"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param inout name "" explicit_type "Object...args"
	nexceptions 3
	  exception class_ref 306331 // IllegalAccessException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 220187 // InvocationTargetException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes the underlying method represented by this <code>Method</code> 
object, on the specified object with the specified parameters.
Individual parameters are automatically unwrapped to match
primitive formal parameters, and both primitive and reference
parameters are subject to method invocation conversions as
necessary.

<p>If the underlying method is static, then the specified <code>obj</code> 
argument is ignored. It may be null.

<p>If the number of formal parameters required by the underlying method is
0, the supplied <code>args</code> array may be of length 0 or null.

<p>If the underlying method is an instance method, it is invoked
using dynamic method lookup as documented in The Java Language
Specification, Second Edition, section 15.12.4.4; in particular,
overriding based on the runtime type of the target object will occur.

<p>If the underlying method is static, the class that declared
the method is initialized if it has not already been initialized.

<p>If the method completes normally, the value it returns is
returned to the caller of invoke; if the value has a primitive
type, it is first appropriately wrapped in an object. However,
if the value has the type of an array of a primitive type, the
elements of the array are <i>not</i> wrapped in objects; in
other words, an array of primitive type is returned.  If the
underlying method return type is void, the invocation returns
null.

@param obj  the object the underlying method is invoked from
@param args the arguments used for the method call
@return the result of dispatching the method represented by
this object on <code>obj</code> with parameters
<code>args</code>

@exception IllegalAccessException    if this <code>Method</code> object
             enforces Java language access control and the underlying
             method is inaccessible.
@exception IllegalArgumentException  if the method is an
             instance method and the specified object argument
             is not an instance of the class or interface
             declaring the underlying method (or of a subclass
             or implementor thereof); if the number of actual
             and formal parameters differ; if an unwrapping
             conversion for primitive arguments fails; or if,
             after possible unwrapping, a parameter value
             cannot be converted to the corresponding formal
             parameter type by a method invocation conversion.
@exception InvocationTargetException if the underlying method
             throws an exception.
@exception NullPointerException      if the specified object is null
             and the method is an instance method.
@exception ExceptionInInitializerError if the initialization
provoked by this method fails."
      end

      operation 7131547 "isBridge"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this method is a bridge
method; returns <tt>false</tt> otherwise.

@return true if and only if this method is a bridge
method as defined by the Java Language Specification.
@since 1.5"
      end

      operation 7131675 "isVarArgs"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this method was declared to take
a variable number of arguments; returns <tt>false</tt>
otherwise.

@return <tt>true</tt> if an only if this method was declared to
take a variable number of arguments.
@since 1.5"
      end

      operation 7131803 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this method is a synthetic
method; returns <tt>false</tt> otherwise.

@return true if and only if this method is a synthetic
method as defined by the Java Language Specification.
@since 1.5"
      end

      operation 7131931 "acquireMethodAccessor"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NOTE that there is no synchronization used here. It is correct
 (though not efficient) to generate more than one MethodAccessor
 for a given Method. However, avoiding synchronization will
 probably make the implementation more scalable."
      end

      operation 7132059 "getMethodAccessor"
	package explicit_return_type "MethodAccessor"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns MethodAccessor for this Method object, not looking up
 the chain to the root"
      end

      operation 7132187 "setMethodAccessor"
	package explicit_return_type "void"
	nparams 1
	  param inout name "accessor" explicit_type "MethodAccessor"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the MethodAccessor for this Method object and
 (recursively) its root"
      end

      operation 7132315 "getAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1802267 // EMPTY_ANNOTATION_ARRAY (<unidirectional association>)
	relation 1802267 --->
	  a role_name "EMPTY_ANNOTATION_ARRAY" multiplicity "[]" init_value "= new Annotation[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1802267 // EMPTY_ANNOTATION_ARRAY (<unidirectional association>)
	  b parent class_ref 911259 // Annotation
      end

      operation 7132443 "getDeclaredAnnotations"
	public return_type class_ref 911259 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1802395 // declaredAnnotations (<unidirectional association>)
	relation 1802395 --->
	  a role_name "declaredAnnotations" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class, Annotation> ${name}${value};
"
	    classrelation_ref 1802395 // declaredAnnotations (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      operation 7132571 "declaredAnnotations"
	private return_type class_ref 136603 // Map
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Class, Annotation> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7132699 "getDefaultValue"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default value for the annotation member represented by
this <tt>Method</tt> instance.  If the member is of a primitive type,
an instance of the corresponding wrapper type is returned. Returns
null if no default is associated with the member, or if the method
instance does not represent a declared member of an annotation type.

@return the default value for the annotation member represented
    by this <tt>Method</tt> instance.
@throws TypeNotPresentException if the annotation is of type
    {@link Class} and no definition can be found for the
    default class value.
@since  1.5"
      end

      operation 7132827 "getParameterAnnotations"
	public return_type class_ref 911259 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of arrays that represent the annotations on the formal
parameters, in declaration order, of the method represented by
this <tt>Method</tt> object. (Returns an array of length zero if the
underlying method is parameterless.  If the method has one or more
parameters, a nested array of length zero is returned for each parameter
with no annotations.) The annotation objects contained in the returned
arrays are serializable.  The caller of this method is free to modify
the returned arrays; it will have no effect on the arrays returned to
other callers.

@return an array of arrays that represent the annotations on the formal
   parameters, in declaration order, of the method represented by this
   Method object
@since 1.5"
      end
    end

    class 218395 "Constructor"
      visibility public 
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>Constructor</code> provides information about, and access to, a single
constructor for a class.

<p><code>Constructor</code> permits widening conversions to occur when matching the
actual parameters to newInstance() with the underlying
constructor's formal parameters, but throws an
<code>IllegalArgumentException</code> if a narrowing conversion would occur.

@see Member
@see java.lang.Class
@see java.lang.Class#getConstructors()
@see java.lang.Class#getConstructor(Class[])
@see java.lang.Class#getDeclaredConstructors()

@author	Kenneth Russell
@author	Nakul Saraiya"
      classrelation 1798299 // <generalisation>
	relation 1798299 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1798299 // <generalisation>
	  b parent class_ref 923931 // AccessibleObject
      end

      classrelation 1798427 // <realization>
	relation 1798427 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1798427 // <realization>
	  b parent class_ref 910747 // GenericDeclaration
      end

      classrelation 1798555 // <realization>
	relation 1798555 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1798555 // <realization>
	  b parent class_ref 221211 // Member
      end

      classrelation 1798683 // clazz (<unidirectional association>)
	relation 1798683 --->
	  a role_name "clazz" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 1798683 // clazz (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      attribute 2748955 "slot"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1798811 // parameterTypes (<unidirectional association>)
	relation 1798811 --->
	  a role_name "parameterTypes" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1798811 // parameterTypes (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      classrelation 1798939 // exceptionTypes (<unidirectional association>)
	relation 1798939 --->
	  a role_name "exceptionTypes" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1798939 // exceptionTypes (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      attribute 2749083 "modifiers"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2749211 "signature"
	private explicit_type "String"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Generics and annotations support"
      end

      attribute 2749339 "genericInfo"
	private explicit_type "ConstructorRepository"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " generic info repository; lazily initialized"
      end

      attribute 2749467 "annotations"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2749595 "parameterAnnotations"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7118875 "getFactory"
	private explicit_return_type "GenericsFactory"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Generics infrastructure
 Accessor for factory"
      end

      operation 7119003 "getGenericInfo"
	private explicit_return_type "ConstructorRepository"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessor for generic info repository"
      end

      attribute 2749723 "constructorAccessor"
	volatile private explicit_type "ConstructorAccessor"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1799067 // root (<unidirectional association>)
	relation 1799067 --->
	  a role_name "root" private
	    comment " For sharing of ConstructorAccessors. This branching structure
 is currently only two levels deep (i.e., one root Constructor
 and potentially many Constructor objects pointing to it.)
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 1799067 // root (<unidirectional association>)
	  b parent class_ref 218395 // Constructor
      end

      operation 7119131 "Constructor"
	package explicit_return_type ""
	nparams 8
	  param inout name "declaringClass" type class_ref 164635 // Class
	  param inout name "parameterTypes" type class_ref 164635 // Class
	  param inout name "checkedExceptions" type class_ref 164635 // Class
	  param in name "modifiers" explicit_type "int"
	  param in name "slot" explicit_type "int"
	  param in name "signature" explicit_type "String"
	  param in name "annotations" explicit_type "byte"
	  param in name "parameterAnnotations" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}, ${t7}[] ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private constructor used by ReflectAccess to enable
instantiation of these objects in Java code from the java.lang
package via sun.reflect.LangReflectAccess."
      end

      operation 7119259 "copy"
	package return_type class_ref 218395 // Constructor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private routine (exposed to java.lang.Class via
ReflectAccess) which returns a copy of this Constructor. The copy's
\"root\" field points to this Constructor."
      end

      operation 7119387 "getDeclaringClass"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Class</code> object representing the class that declares
the constructor represented by this <code>Constructor</code> object."
      end

      operation 7119515 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this constructor, as a string.  This is
always the same as the simple name of the constructor's declaring
class."
      end

      operation 7119643 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java language modifiers for the constructor
represented by this <code>Constructor</code> object, as an integer. The
<code>Modifier</code> class should be used to decode the modifiers.

@see Modifier"
      end

      operation 7119771 "getTypeParameters"
	public return_type class_ref 910875 // TypeVariable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Constructor<T>>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>TypeVariable</tt> objects that represent the
type variables declared by the generic declaration represented by this
<tt>GenericDeclaration</tt> object, in declaration order.  Returns an
array of length 0 if the underlying generic declaration declares no type
variables.

@return an array of <tt>TypeVariable</tt> objects that represent
    the type variables declared by this generic declaration
@throws GenericSignatureFormatError if the generic
    signature of this generic declaration does not conform to
    the format specified in the Java Virtual Machine Specification,
    3rd edition
@since 1.5"
      end

      operation 7119899 "getParameterTypes"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>Class</code> objects that represent the formal
parameter types, in declaration order, of the constructor
represented by this <code>Constructor</code> object.  Returns an array of
length 0 if the underlying constructor takes no parameters.

@return the parameter types for the constructor this object
represents"
      end

      operation 7120027 "getGenericParameterTypes"
	public return_type class_ref 911003 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>Type</tt> objects that represent the formal
parameter types, in declaration order, of the method represented by
this <tt>Constructor</tt> object. Returns an array of length 0 if the
underlying method takes no parameters.

<p>If a formal parameter type is a parameterized type,
the <tt>Type</tt> object returned for it must accurately reflect
the actual type parameters used in the source code.

<p>If a formal parameter type is a type variable or a parameterized 
type, it is created. Otherwise, it is resolved.

@return an array of <tt>Type</tt>s that represent the formal
    parameter types of the underlying method, in declaration order
@throws GenericSignatureFormatError
    if the generic method signature does not conform to the format
    specified in the Java Virtual Machine Specification, 3rd edition
@throws TypeNotPresentException if any of the parameter
    types of the underlying method refers to a non-existent type
    declaration
@throws MalformedParameterizedTypeException if any of
    the underlying method's parameter types refer to a parameterized
    type that cannot be instantiated for any reason
@since 1.5"
      end

      operation 7120155 "getExceptionTypes"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>Class</code> objects that represent the types
of exceptions declared to be thrown by the underlying constructor
represented by this <code>Constructor</code> object.  Returns an array of
length 0 if the constructor declares no exceptions in its <code>throws</code> clause.

@return the exception types declared as being thrown by the
constructor this object represents"
      end

      operation 7120283 "getGenericExceptionTypes"
	public return_type class_ref 911003 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>Type</tt> objects that represent the 
exceptions declared to be thrown by this <tt>Constructor</tt> object. 
Returns an array of length 0 if the underlying method declares
no exceptions in its <tt>throws</tt> clause.  

<p>If an exception type is a parameterized type, the <tt>Type</tt>
object returned for it must accurately reflect the actual type
parameters used in the source code.

<p>If an exception type is a type variable or a parameterized 
type, it is created. Otherwise, it is resolved.

@return an array of Types that represent the exception types
    thrown by the underlying method
@throws GenericSignatureFormatError
    if the generic method signature does not conform to the format
    specified in the Java Virtual Machine Specification, 3rd edition
@throws TypeNotPresentException if the underlying method's
    <tt>throws</tt> clause refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if
    the underlying method's <tt>throws</tt> clause refers to a
    parameterized type that cannot be instantiated for any reason
@since 1.5"
      end

      operation 7120411 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>Constructor</code> against the specified object.
Returns true if the objects are the same.  Two <code>Constructor</code> objects are
the same if they were declared by the same class and have the
same formal parameter types."
      end

      operation 7120539 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for this <code>Constructor</code>. The hashcode is
the same as the hashcode for the underlying constructor's
declaring class name."
      end

      operation 7120667 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this <code>Constructor</code>.  The string is
formatted as the constructor access modifiers, if any,
followed by the fully-qualified name of the declaring class,
followed by a parenthesized, comma-separated list of the
constructor's formal parameter types.  For example:
<pre>
   public java.util.Hashtable(int,float)
</pre>

<p>The only possible modifiers for constructors are the access
modifiers <tt>public</tt>, <tt>protected</tt> or
<tt>private</tt>.  Only one of these may appear, or none if the
constructor has default (package) access."
      end

      operation 7120795 "toGenericString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this <code>Constructor</code>,
including type parameters.  The string is formatted as the
constructor access modifiers, if any, followed by an
angle-bracketed comma separated list of the constructor's type
parameters, if any, followed by the fully-qualified name of the
declaring class, followed by a parenthesized, comma-separated
list of the constructor's generic formal parameter types.  A
space is used to separate access modifiers from one another and
from the type parameters or return type.  If there are no type
parameters, the type parameter list is elided; if the type
parameter list is present, a space separates the list from the
class name.  If the constructor is declared to throw
exceptions, the parameter list is followed by a space, followed
by the word &quot;<tt>throws</tt>&quot; followed by a
comma-separated list of the thrown exception types.

<p>The only possible modifiers for constructors are the access
modifiers <tt>public</tt>, <tt>protected</tt> or
<tt>private</tt>.  Only one of these may appear, or none if the
constructor has default (package) access.

@return a string describing this <code>Constructor</code>,
include type parameters

@since 1.5"
      end

      operation 7120923 "newInstance"
	public explicit_return_type "T"
	nparams 1
	  param inout name "initargs" explicit_type "Object"
	nexceptions 4
	  exception class_ref 220059 // InstantiationException
	  exception class_ref 306331 // IllegalAccessException
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 220187 // InvocationTargetException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ... ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Uses the constructor represented by this <code>Constructor</code> object to
create and initialize a new instance of the constructor's
declaring class, with the specified initialization parameters.
Individual parameters are automatically unwrapped to match
primitive formal parameters, and both primitive and reference
parameters are subject to method invocation conversions as necessary.

<p>If the number of formal parameters required by the underlying constructor
is 0, the supplied <code>initargs</code> array may be of length 0 or null.

<p>If the required access and argument checks succeed and the
instantiation will proceed, the constructor's declaring class
is initialized if it has not already been initialized.

<p>If the constructor completes normally, returns the newly
created and initialized instance.

@param initargs array of objects to be passed as arguments to
the constructor call; values of primitive types are wrapped in
a wrapper object of the appropriate type (e.g. a <tt>float</tt>
in a {@link java.lang.Float Float})

@return a new object created by calling the constructor
this object represents

@exception IllegalAccessException    if this <code>Constructor</code> object
             enforces Java language access control and the underlying
             constructor is inaccessible.
@exception IllegalArgumentException  if the number of actual
             and formal parameters differ; if an unwrapping
             conversion for primitive arguments fails; or if,
             after possible unwrapping, a parameter value
             cannot be converted to the corresponding formal
             parameter type by a method invocation conversion; if
             this constructor pertains to an enum type.
@exception InstantiationException    if the class that declares the
             underlying constructor represents an abstract class.
@exception InvocationTargetException if the underlying constructor
             throws an exception.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails."
      end

      operation 7121051 "isVarArgs"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this constructor was declared to take
a variable number of arguments; returns <tt>false</tt>
otherwise.

@return <tt>true</tt> if an only if this constructor was declared to
take a variable number of arguments.
@since 1.5"
      end

      operation 7121179 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this constructor is a synthetic
constructor; returns <tt>false</tt> otherwise.

@return true if and only if this constructor is a synthetic
constructor as defined by the Java Language Specification.
@since 1.5"
      end

      operation 7121307 "acquireConstructorAccessor"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NOTE that there is no synchronization used here. It is correct
 (though not efficient) to generate more than one
 ConstructorAccessor for a given Constructor. However, avoiding
 synchronization will probably make the implementation more
 scalable."
      end

      operation 7121435 "getConstructorAccessor"
	package explicit_return_type "ConstructorAccessor"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns ConstructorAccessor for this Constructor object, not
 looking up the chain to the root"
      end

      operation 7121563 "setConstructorAccessor"
	package explicit_return_type "void"
	nparams 1
	  param inout name "accessor" explicit_type "ConstructorAccessor"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the ConstructorAccessor for this Constructor object and
 (recursively) its root"
      end

      operation 7121691 "getSlot"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7121819 "getSignature"
	package explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7121947 "getRawAnnotations"
	package explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7122075 "getRawParameterAnnotations"
	package explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7122203 "getAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1799195 // EMPTY_ANNOTATION_ARRAY (<unidirectional association>)
	relation 1799195 --->
	  a role_name "EMPTY_ANNOTATION_ARRAY" multiplicity "[]" init_value "= new Annotation[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1799195 // EMPTY_ANNOTATION_ARRAY (<unidirectional association>)
	  b parent class_ref 911259 // Annotation
      end

      operation 7122331 "getDeclaredAnnotations"
	public return_type class_ref 911259 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1799323 // declaredAnnotations (<unidirectional association>)
	relation 1799323 --->
	  a role_name "declaredAnnotations" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class, Annotation> ${name}${value};
"
	    classrelation_ref 1799323 // declaredAnnotations (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      operation 7122459 "declaredAnnotations"
	private return_type class_ref 136603 // Map
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Class, Annotation> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7122587 "getParameterAnnotations"
	public return_type class_ref 911259 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of arrays that represent the annotations on the formal
parameters, in declaration order, of the method represented by
this <tt>Method</tt> object. (Returns an array of length zero if the
underlying method is parameterless.  If the method has one or more
parameters, a nested array of length zero is returned for each parameter
with no annotations.) The annotation objects contained in the returned
arrays are serializable.  The caller of this method is free to modify
the returned arrays; it will have no effect on the arrays returned to
other callers.

@return an array of arrays that represent the annotations on the formal
   parameters, in declaration order, of the method represented by this
   Method object
@since 1.5"
      end
    end

    class 220187 "InvocationTargetException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "InvocationTargetException is a checked exception that wraps
an exception thrown by an invoked method or constructor.

<p>As of release 1.4, this exception has been retrofitted to conform to
the general purpose exception-chaining mechanism.  The \"target exception\"
that is provided at construction time and accessed via the
{@link #getTargetException()} method is now known as the <i>cause</i>,
and may be accessed via the {@link Throwable#getCause()} method,
as well as the aforementioned \"legacy method.\"

@see Method
@see Constructor"
      classrelation 1800731 // <generalisation>
	relation 1800731 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1800731 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      attribute 2750875 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  4085088731926701167L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JDK 1.1.X for interoperability
"
      end

      classrelation 1800859 // target (<unidirectional association>)
	relation 1800859 --->
	  a role_name "target" private
	    comment "
This field holds the target if the 
InvocationTargetException(Throwable target) constructor was
used to instantiate the object

@serial 


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1800859 // target (<unidirectional association>)
	  b parent class_ref 164251 // Throwable
      end

      operation 7128347 "InvocationTargetException"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InvocationTargetException</code> with 
<code>null</code> as the target exception."
      end

      operation 7128475 "InvocationTargetException"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a InvocationTargetException with a target exception.

@param target the target exception"
      end

      operation 7128603 "InvocationTargetException"
	public explicit_return_type ""
	nparams 2
	  param inout name "target" type class_ref 164251 // Throwable
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a InvocationTargetException with a target exception
and a detail message.

@param target the target exception
@param s      the detail message"
      end

      operation 7128731 "getTargetException"
	public return_type class_ref 164251 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the thrown target exception.

<p>This method predates the general-purpose exception chaining facility.
The {@link Throwable#getCause()} method is now the preferred means of
obtaining this information.

@return the thrown target exception (cause of this exception)."
      end

      operation 7128859 "getCause"
	public return_type class_ref 164251 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cause of this exception (the thrown target exception,
which may be <tt>null</tt>).

@return  the cause of this exception.
@since   1.4"
      end
    end

    class 220443 "Field"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>Field</code> provides information about, and dynamic access to, a
single field of a class or an interface.  The reflected field may
be a class (static) field or an instance field.

<p>A <code>Field</code> permits widening conversions to occur during a get or
set access operation, but throws an <code>IllegalArgumentException</code> if a
narrowing conversion would occur.

@see Member
@see java.lang.Class
@see java.lang.Class#getFields()
@see java.lang.Class#getField(String)
@see java.lang.Class#getDeclaredFields()
@see java.lang.Class#getDeclaredField(String)

@author Kenneth Russell
@author Nakul Saraiya"
      classrelation 1799451 // <generalisation>
	relation 1799451 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1799451 // <generalisation>
	  b parent class_ref 923931 // AccessibleObject
      end

      classrelation 1799579 // <realization>
	relation 1799579 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1799579 // <realization>
	  b parent class_ref 221211 // Member
      end

      classrelation 1799707 // clazz (<unidirectional association>)
	relation 1799707 --->
	  a role_name "clazz" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1799707 // clazz (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      attribute 2749851 "slot"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2749979 "name"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " This is guaranteed to be interned by the VM in the 1.4
 reflection implementation"
      end

      classrelation 1799835 // type (<unidirectional association>)
	relation 1799835 --->
	  a role_name "type" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1799835 // type (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      attribute 2750107 "modifiers"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2750235 "signature"
	private explicit_type "String"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Generics and annotations support"
      end

      attribute 2750363 "genericInfo"
	private explicit_type "FieldRepository"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " generic info repository; lazily initialized"
      end

      attribute 2750491 "annotations"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2750619 "fieldAccessor"
	private explicit_type "FieldAccessor"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Cached field accessor created without override"
      end

      attribute 2750747 "overrideFieldAccessor"
	private explicit_type "FieldAccessor"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Cached field accessor created with override"
      end

      classrelation 1799963 // root (<unidirectional association>)
	relation 1799963 --->
	  a role_name "root" private
	    comment " For sharing of FieldAccessors. This branching structure is
 currently only two levels deep (i.e., one root Field and
 potentially many Field objects pointing to it.)
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1799963 // root (<unidirectional association>)
	  b parent class_ref 220443 // Field
      end

      classrelation 1800091 // securityCheckTargetClassCache (<unidirectional association>)
	relation 1800091 --->
	  a role_name "securityCheckTargetClassCache" volatile private
	    comment " More complicated security check cache needed here than for
 Class.newInstance() and Constructor.newInstance()
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1800091 // securityCheckTargetClassCache (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      operation 7122715 "getGenericSignature"
	private explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Generics infrastructure"
      end

      operation 7122843 "getFactory"
	private explicit_return_type "GenericsFactory"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessor for factory"
      end

      operation 7122971 "getGenericInfo"
	private explicit_return_type "FieldRepository"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessor for generic info repository"
      end

      operation 7123099 "Field"
	package explicit_return_type ""
	nparams 7
	  param inout name "declaringClass" type class_ref 164635 // Class
	  param in name "name" explicit_type "String"
	  param inout name "type" type class_ref 164635 // Class
	  param in name "modifiers" explicit_type "int"
	  param in name "slot" explicit_type "int"
	  param in name "signature" explicit_type "String"
	  param in name "annotations" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private constructor used by ReflectAccess to enable
instantiation of these objects in Java code from the java.lang
package via sun.reflect.LangReflectAccess."
      end

      operation 7123227 "copy"
	package return_type class_ref 220443 // Field
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private routine (exposed to java.lang.Class via
ReflectAccess) which returns a copy of this Field. The copy's
\"root\" field points to this Field."
      end

      operation 7123355 "getDeclaringClass"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Class</code> object representing the class or interface
that declares the field represented by this <code>Field</code> object."
      end

      operation 7123483 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the field represented by this <code>Field</code> object."
      end

      operation 7123611 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java language modifiers for the field represented
by this <code>Field</code> object, as an integer. The <code>Modifier</code> class should
be used to decode the modifiers.

@see Modifier"
      end

      operation 7123739 "isEnumConstant"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this field represents an element of
an enumerated type; returns <tt>false</tt> otherwise.

@return <tt>true</tt> if and only if this field represents an element of
an enumerated type.
@since 1.5"
      end

      operation 7123867 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this field is a synthetic
field; returns <tt>false</tt> otherwise.

@return true if and only if this field is a synthetic
field as defined by the Java Language Specification.
@since 1.5"
      end

      operation 7123995 "getType"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Class</code> object that identifies the
declared type for the field represented by this
<code>Field</code> object.

@return a <code>Class</code> object identifying the declared
type of the field represented by this object"
      end

      operation 7124123 "getGenericType"
	public return_type class_ref 911003 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>Type</tt> object that represents the declared type for
the field represented by this <tt>Field</tt> object.

<p>If the <tt>Type</tt> is a parameterized type, the
<tt>Type</tt> object returned must accurately reflect the
actual type parameters used in the source code.

<p>If an the  type of the underlying field is a type variable or a
parameterized type, it is created. Otherwise, it is resolved.

@return a <tt>Type</tt> object that represents the declared type for
    the field represented by this <tt>Field</tt> object
@throws GenericSignatureFormatError if the generic field
    signature does not conform to the format specified in the Java
    Virtual Machine Specification, 3rd edition
@throws TypeNotPresentException if the generic type
    signature of the underlying field refers to a non-existent
    type declaration
@throws MalformedParameterizedTypeException if the generic
    signature of the underlying field refers to a parameterized type
    that cannot be instantiated for any reason
@since 1.5"
      end

      operation 7124251 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>Field</code> against the specified object.  Returns
true if the objects are the same.  Two <code>Field</code> objects are the same if
they were declared by the same class and have the same name
and type."
      end

      operation 7124379 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for this <code>Field</code>.  This is computed as the
exclusive-or of the hashcodes for the underlying field's
declaring class name and its name."
      end

      operation 7124507 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this <code>Field</code>.  The format is
the access modifiers for the field, if any, followed
by the field type, followed by a space, followed by
the fully-qualified name of the class declaring the field,
followed by a period, followed by the name of the field.
For example:
<pre>
   public static final int java.lang.Thread.MIN_PRIORITY
   private int java.io.FileDescriptor.fd
</pre>

<p>The modifiers are placed in canonical order as specified by
\"The Java Language Specification\".  This is <tt>public</tt>,
<tt>protected</tt> or <tt>private</tt> first, and then other
modifiers in the following order: <tt>static</tt>, <tt>final</tt>,
<tt>transient</tt>, <tt>volatile</tt>."
      end

      operation 7124635 "toGenericString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this <code>Field</code>, including
its generic type.  The format is the access modifiers for the
field, if any, followed by the generic field type, followed by
a space, followed by the fully-qualified name of the class
declaring the field, followed by a period, followed by the name
of the field.

<p>The modifiers are placed in canonical order as specified by
\"The Java Language Specification\".  This is <tt>public</tt>,
<tt>protected</tt> or <tt>private</tt> first, and then other
modifiers in the following order: <tt>static</tt>, <tt>final</tt>,
<tt>transient</tt>, <tt>volatile</tt>.

@return a string describing this <code>Field</code>, including
its generic type

@since 1.5"
      end

      operation 7124763 "get"
	public explicit_return_type "Object"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the field represented by this <code>Field</code>, on
the specified object. The value is automatically wrapped in an
object if it has a primitive type.

<p>The underlying field's value is obtained as follows:

<p>If the underlying field is a static field, the <code>obj</code> argument
is ignored; it may be null.

<p>Otherwise, the underlying field is an instance field.  If the
specified <code>obj</code> argument is null, the method throws a
<code>NullPointerException.</code> If the specified object is not an
instance of the class or interface declaring the underlying
field, the method throws an <code>IllegalArgumentException</code>.

<p>If this <code>Field</code> object enforces Java language access control, and
the underlying field is inaccessible, the method throws an
<code>IllegalAccessException</code>.
If the underlying field is static, the class that declared the
field is initialized if it has not already been initialized. 

<p>Otherwise, the value is retrieved from the underlying instance
or static field.  If the field has a primitive type, the value
is wrapped in an object before being returned, otherwise it is
returned as is.

<p>If the field is hidden in the type of <code>obj</code>,
the field's value is obtained according to the preceding rules.

@param obj object from which the represented field's value is
to be extracted
@return the value of the represented field in object
<tt>obj</tt>; primitive values are wrapped in an appropriate
object before being returned

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof).
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails."
      end

      operation 7124891 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a static or instance <code>boolean</code> field.

@param obj the object to extract the <code>boolean</code> value
from
@return the value of the <code>boolean</code> field

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not 
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor 
             thereof), or if the field value cannot be
             converted to the type <code>boolean</code> by a 
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#get"
      end

      operation 7125019 "getByte"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a static or instance <code>byte</code> field.

@param obj the object to extract the <code>byte</code> value
from
@return the value of the <code>byte</code> field

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not 
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor 
             thereof), or if the field value cannot be
             converted to the type <code>byte</code> by a 
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#get"
      end

      operation 7125147 "getChar"
	public explicit_return_type "char"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a static or instance field of type
<code>char</code> or of another primitive type convertible to
type <code>char</code> via a widening conversion.

@param obj the object to extract the <code>char</code> value
from
@return the value of the field converted to type <code>char</code>

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not 
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor 
             thereof), or if the field value cannot be
             converted to the type <code>char</code> by a 
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see Field#get"
      end

      operation 7125275 "getShort"
	public explicit_return_type "short"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a static or instance field of type
<code>short</code> or of another primitive type convertible to
type <code>short</code> via a widening conversion.

@param obj the object to extract the <code>short</code> value
from
@return the value of the field converted to type <code>short</code>

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not 
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor 
             thereof), or if the field value cannot be
             converted to the type <code>short</code> by a 
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#get"
      end

      operation 7125403 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a static or instance field of type
<code>int</code> or of another primitive type convertible to
type <code>int</code> via a widening conversion.

@param obj the object to extract the <code>int</code> value
from
@return the value of the field converted to type <code>int</code>

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not 
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor 
             thereof), or if the field value cannot be
             converted to the type <code>int</code> by a 
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#get"
      end

      operation 7125531 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a static or instance field of type
<code>long</code> or of another primitive type convertible to
type <code>long</code> via a widening conversion.

@param obj the object to extract the <code>long</code> value
from
@return the value of the field converted to type <code>long</code>

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not 
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor 
             thereof), or if the field value cannot be
             converted to the type <code>long</code> by a 
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#get"
      end

      operation 7125659 "getFloat"
	public explicit_return_type "float"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a static or instance field of type
<code>float</code> or of another primitive type convertible to
type <code>float</code> via a widening conversion.

@param obj the object to extract the <code>float</code> value
from
@return the value of the field converted to type <code>float</code>

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not 
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor 
             thereof), or if the field value cannot be
             converted to the type <code>float</code> by a 
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see Field#get"
      end

      operation 7125787 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a static or instance field of type
<code>double</code> or of another primitive type convertible to
type <code>double</code> via a widening conversion.

@param obj the object to extract the <code>double</code> value
from
@return the value of the field converted to type <code>double</code>

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not 
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor 
             thereof), or if the field value cannot be
             converted to the type <code>double</code> by a 
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#get"
      end

      operation 7125915 "set"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param inout name "value" explicit_type "Object"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the field represented by this <code>Field</code> object on the
specified object argument to the specified new value. The new
value is automatically unwrapped if the underlying field has a
primitive type.

<p>The operation proceeds as follows:

<p>If the underlying field is static, the <code>obj</code> argument is
ignored; it may be null.

<p>Otherwise the underlying field is an instance field.  If the
specified object argument is null, the method throws a
<code>NullPointerException</code>.  If the specified object argument is not
an instance of the class or interface declaring the underlying
field, the method throws an <code>IllegalArgumentException</code>.

<p>If this <code>Field</code> object enforces Java language access control, and
the underlying field is inaccessible, the method throws an
<code>IllegalAccessException</code>.

<p>If the underlying field is final, the method throws an
<code>IllegalAccessException</code> unless
<code>setAccessible(true)</code> has succeeded for this field
and this field is non-static. Setting a final field in this way
is meaningful only during deserialization or reconstruction of
instances of classes with blank final fields, before they are
made available for access by other parts of a program. Use in
any other context may have unpredictable effects, including cases
in which other parts of a program continue to use the original
value of this field.

<p>If the underlying field is of a primitive type, an unwrapping
conversion is attempted to convert the new value to a value of
a primitive type.  If this attempt fails, the method throws an
<code>IllegalArgumentException</code>.

<p>If, after possible unwrapping, the new value cannot be
converted to the type of the underlying field by an identity or
widening conversion, the method throws an
<code>IllegalArgumentException</code>.

<p>If the underlying field is static, the class that declared the
field is initialized if it has not already been initialized.

<p>The field is set to the possibly unwrapped and widened new value.

<p>If the field is hidden in the type of <code>obj</code>,
the field's value is set according to the preceding rules.

@param obj the object whose field should be modified
@param value the new value for the field of <code>obj</code>
being modified

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof), 
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails."
      end

      operation 7126043 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param inout name "z" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a field as a <code>boolean</code> on the specified object.
This method is equivalent to
<code>set(obj, zObj)</code>,
where <code>zObj</code> is a <code>Boolean</code> object and 
<code>zObj.booleanValue() == z</code>.

@param obj the object whose field should be modified
@param z   the new value for the field of <code>obj</code>
being modified

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof), 
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set"
      end

      operation 7126171 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param in name "b" explicit_type "byte"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a field as a <code>byte</code> on the specified object.
This method is equivalent to
<code>set(obj, bObj)</code>,
where <code>bObj</code> is a <code>Byte</code> object and 
<code>bObj.byteValue() == b</code>.

@param obj the object whose field should be modified
@param b   the new value for the field of <code>obj</code>
being modified

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof), 
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set"
      end

      operation 7126299 "setChar"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param in name "c" explicit_type "char"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a field as a <code>char</code> on the specified object.
This method is equivalent to
<code>set(obj, cObj)</code>,
where <code>cObj</code> is a <code>Character</code> object and 
<code>cObj.charValue() == c</code>.

@param obj the object whose field should be modified
@param c   the new value for the field of <code>obj</code>
being modified

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof), 
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set"
      end

      operation 7126427 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param in name "s" explicit_type "short"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a field as a <code>short</code> on the specified object.
This method is equivalent to
<code>set(obj, sObj)</code>,
where <code>sObj</code> is a <code>Short</code> object and 
<code>sObj.shortValue() == s</code>.

@param obj the object whose field should be modified
@param s   the new value for the field of <code>obj</code>
being modified

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof), 
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set"
      end

      operation 7126555 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param in name "i" explicit_type "int"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a field as an <code>int</code> on the specified object.
This method is equivalent to
<code>set(obj, iObj)</code>,
where <code>iObj</code> is a <code>Integer</code> object and 
<code>iObj.intValue() == i</code>.

@param obj the object whose field should be modified
@param i   the new value for the field of <code>obj</code>
being modified

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof), 
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set"
      end

      operation 7126683 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param in name "l" explicit_type "long"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a field as a <code>long</code> on the specified object.
This method is equivalent to
<code>set(obj, lObj)</code>,
where <code>lObj</code> is a <code>Long</code> object and 
<code>lObj.longValue() == l</code>.

@param obj the object whose field should be modified
@param l   the new value for the field of <code>obj</code>
being modified

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof), 
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set"
      end

      operation 7126811 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param in name "f" explicit_type "float"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a field as a <code>float</code> on the specified object.
This method is equivalent to
<code>set(obj, fObj)</code>,
where <code>fObj</code> is a <code>Float</code> object and 
<code>fObj.floatValue() == f</code>.

@param obj the object whose field should be modified
@param f   the new value for the field of <code>obj</code>
being modified

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof), 
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set"
      end

      operation 7126939 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "Object"
	  param in name "d" explicit_type "double"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a field as a <code>double</code> on the specified object.
This method is equivalent to
<code>set(obj, dObj)</code>,
where <code>dObj</code> is a <code>Double</code> object and 
<code>dObj.doubleValue() == d</code>.

@param obj the object whose field should be modified
@param d   the new value for the field of <code>obj</code>
being modified

@exception IllegalAccessException    if the underlying field
             is inaccessible.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof), 
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set"
      end

      operation 7127067 "getFieldAccessor"
	private explicit_return_type "FieldAccessor"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convenience routine which performs security checks"
      end

      operation 7127195 "acquireFieldAccessor"
	private explicit_return_type "FieldAccessor"
	nparams 1
	  param inout name "overrideFinalCheck" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NOTE that there is no synchronization used here. It is correct
 (though not efficient) to generate more than one FieldAccessor
 for a given Field. However, avoiding synchronization will
 probably make the implementation more scalable."
      end

      operation 7127323 "getFieldAccessor"
	private explicit_return_type "FieldAccessor"
	nparams 1
	  param inout name "overrideFinalCheck" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns FieldAccessor for this Field object, not looking up
 the chain to the root"
      end

      operation 7127451 "setFieldAccessor"
	private explicit_return_type "void"
	nparams 2
	  param inout name "accessor" explicit_type "FieldAccessor"
	  param inout name "overrideFinalCheck" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the FieldAccessor for this Field object and
 (recursively) its root"
      end

      operation 7127579 "doSecurityCheck"
	private explicit_return_type "void"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NOTE: be very careful if you change the stack depth of this
 routine. The depth of the \"getCallerClass\" call is hardwired so
 that the compiler can have an easier time if this gets inlined."
      end

      operation 7127707 "getTypeName"
	class_operation package explicit_return_type "String"
	nparams 1
	  param inout name "type" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to paper over array type names"
      end

      operation 7127835 "getAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1800219 // EMPTY_ANNOTATION_ARRAY (<unidirectional association>)
	relation 1800219 --->
	  a role_name "EMPTY_ANNOTATION_ARRAY" multiplicity "[]" init_value "= new Annotation[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1800219 // EMPTY_ANNOTATION_ARRAY (<unidirectional association>)
	  b parent class_ref 911259 // Annotation
      end

      operation 7127963 "getDeclaredAnnotations"
	public return_type class_ref 911259 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1800347 // declaredAnnotations (<unidirectional association>)
	relation 1800347 --->
	  a role_name "declaredAnnotations" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class, Annotation> ${name}${value};
"
	    classrelation_ref 1800347 // declaredAnnotations (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      operation 7128091 "declaredAnnotations"
	private return_type class_ref 136603 // Map
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Class, Annotation> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 221211 "Member"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Member is an interface that reflects identifying information about
a single member (a field or a method) or a constructor.

@see	java.lang.Class
@see	Field
@see	Method
@see	Constructor

@author Nakul Saraiya"
      attribute 2748699 "PUBLIC"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Identifies the set of all public members of a class or interface,
including inherited members.
@see java.lang.SecurityManager#checkMemberAccess
"
      end

      attribute 2748827 "DECLARED"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Identifies the set of declared members of a class or interface.
Inherited members are not included.
@see java.lang.SecurityManager#checkMemberAccess
"
      end

      operation 7118363 "getDeclaringClass"
	public return_type class_ref 164635 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Class object representing the class or interface
that declares the member or constructor represented by this Member.

@return an object representing the declaring class of the
underlying member"
      end

      operation 7118491 "getName"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the simple name of the underlying member or constructor
represented by this Member.

@return the simple name of the underlying member"
      end

      operation 7118619 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java language modifiers for the member or
constructor represented by this Member, as an integer.  The
Modifier class should be used to decode the modifiers in
the integer.

@return the Java language modifiers for the underlying member
@see Modifier"
      end

      operation 7118747 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this member was introduced by
the compiler; returns <tt>false</tt> otherwise.

@return true if and only if this member was introduced by
the compiler.
@since 1.5"
      end
    end

    class 288411 "InvocationHandler"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>InvocationHandler</code> is the interface implemented by
the <i>invocation handler</i> of a proxy instance.

<p>Each proxy instance has an associated invocation handler.
When a method is invoked on a proxy instance, the method
invocation is encoded and dispatched to the <code>invoke</code>
method of its invocation handler.

@author	Peter Jones
@version	1.9, 03/12/19
@see		Proxy
@since	JDK1.3"
      operation 1552155 "invoke"
	public explicit_return_type "Object"
	nparams 3
	  param inout name "proxy" explicit_type "Object"
	  param inout name "method" type class_ref 170651 // Method
	  param inout name "args" explicit_type "Object"
	nexceptions 1
	  exception class_ref 164251 // Throwable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Processes a method invocation on a proxy instance and returns
the result.  This method will be invoked on an invocation handler
when a method is invoked on a proxy instance that it is
associated with.

@param	proxy the proxy instance that the method was invoked on

@param	method the <code>Method</code> instance corresponding to
the interface method invoked on the proxy instance.  The declaring
class of the <code>Method</code> object will be the interface that
the method was declared in, which may be a superinterface of the
proxy interface that the proxy class inherits the method through.

@param	args an array of objects containing the values of the
arguments passed in the method invocation on the proxy instance,
or <code>null</code> if interface method takes no arguments.
Arguments of primitive types are wrapped in instances of the
appropriate primitive wrapper class, such as
<code>java.lang.Integer</code> or <code>java.lang.Boolean</code>.

@return	the value to return from the method invocation on the
proxy instance.  If the declared return type of the interface
method is a primitive type, then the value returned by
this method must be an instance of the corresponding primitive
wrapper class; otherwise, it must be a type assignable to the
declared return type.  If the value returned by this method is
<code>null</code> and the interface method's return type is
primitive, then a <code>NullPointerException</code> will be
thrown by the method invocation on the proxy instance.  If the
value returned by this method is otherwise not compatible with
the interface method's declared return type as described above,
a <code>ClassCastException</code> will be thrown by the method
invocation on the proxy instance.

@throws	Throwable the exception to throw from the method
invocation on the proxy instance.  The exception's type must be
assignable either to any of the exception types declared in the
<code>throws</code> clause of the interface method or to the
unchecked exception types <code>java.lang.RuntimeException</code>
or <code>java.lang.Error</code>.  If a checked exception is
thrown by this method that is not assignable to any of the
exception types declared in the <code>throws</code> clause of
the interface method, then an
{@link UndeclaredThrowableException} containing the
exception that was thrown by this method will be thrown by the
method invocation on the proxy instance.

@see	UndeclaredThrowableException"
      end
    end

    class 289179 "Proxy"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>Proxy</code> provides static methods for creating dynamic proxy
classes and instances, and it is also the superclass of all
dynamic proxy classes created by those methods.

<p>To create a proxy for some interface <code>Foo</code>:
<pre>
    InvocationHandler handler = new MyInvocationHandler(...);
    Class proxyClass = Proxy.getProxyClass(
        Foo.class.getClassLoader(), new Class[] { Foo.class });
    Foo f = (Foo) proxyClass.
        getConstructor(new Class[] { InvocationHandler.class }).
        newInstance(new Object[] { handler });
</pre>
or more simply:
<pre>
    Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(),
                                         new Class[] { Foo.class },
                                         handler);
</pre>

<p>A <i>dynamic proxy class</i> (simply referred to as a <i>proxy
class</i> below) is a class that implements a list of interfaces
specified at runtime when the class is created, with behavior as
described below.

A <i>proxy interface</i> is such an interface that is implemented
by a proxy class.

A <i>proxy instance</i> is an instance of a proxy class.

Each proxy instance has an associated <i>invocation handler</i>
object, which implements the interface {@link InvocationHandler}.
A method invocation on a proxy instance through one of its proxy
interfaces will be dispatched to the {@link InvocationHandler#invoke
invoke} method of the instance's invocation handler, passing the proxy
instance, a <code>java.lang.reflect.Method</code> object identifying
the method that was invoked, and an array of type <code>Object</code>
containing the arguments.  The invocation handler processes the
encoded method invocation as appropriate and the result that it
returns will be returned as the result of the method invocation on
the proxy instance.

<p>A proxy class has the following properties:

<ul>
<li>Proxy classes are public, final, and not abstract.

<li>The unqualified name of a proxy class is unspecified.  The space
of class names that begin with the string <code>\"$Proxy\"</code>
should be, however, reserved for proxy classes.

<li>A proxy class extends <code>java.lang.reflect.Proxy</code>.

<li>A proxy class implements exactly the interfaces specified at its
creation, in the same order.

<li>If a proxy class implements a non-public interface, then it will
be defined in the same package as that interface.  Otherwise, the
package of a proxy class is also unspecified.  Note that package
sealing will not prevent a proxy class from being successfully defined
in a particular package at runtime, and neither will classes already
defined by the same class loader and the same package with particular
signers.

<li>Since a proxy class implements all of the interfaces specified at
its creation, invoking <code>getInterfaces</code> on its
<code>Class</code> object will return an array containing the same
list of interfaces (in the order specified at its creation), invoking
<code>getMethods</code> on its <code>Class</code> object will return
an array of <code>Method</code> objects that include all of the
methods in those interfaces, and invoking <code>getMethod</code> will
find methods in the proxy interfaces as would be expected.

<li>The {@link Proxy#isProxyClass Proxy.isProxyClass} method will
return true if it is passed a proxy class-- a class returned by
<code>Proxy.getProxyClass</code> or the class of an object returned by
<code>Proxy.newProxyInstance</code>-- and false otherwise.

<li>The <code>java.security.ProtectionDomain</code> of a proxy class
is the same as that of system classes loaded by the bootstrap class
loader, such as <code>java.lang.Object</code>, because the code for a
proxy class is generated by trusted system code.  This protection
domain will typically be granted
<code>java.security.AllPermission</code>.

<li>Each proxy class has one public constructor that takes one argument,
an implementation of the interface {@link InvocationHandler}, to set
the invocation handler for a proxy instance.  Rather than having to use
the reflection API to access the public constructor, a proxy instance
can be also be created by calling the {@link Proxy#newProxyInstance
Proxy.newInstance} method, which combines the actions of calling
{@link Proxy#getProxyClass Proxy.getProxyClass} with invoking the
constructor with an invocation handler.
</ul>

<p>A proxy instance has the following properties:

<ul>
<li>Given a proxy instance <code>proxy</code> and one of the
interfaces implemented by its proxy class <code>Foo</code>, the
following expression will return true:
<pre>
    <code>proxy instanceof Foo</code>
</pre>
and the following cast operation will succeed (rather than throwing
a <code>ClassCastException</code>):
<pre>
    <code>(Foo) proxy</code>
</pre>

<li>Each proxy instance has an associated invocation handler, the one
that was passed to its constructor.  The static
{@link Proxy#getInvocationHandler Proxy.getInvocationHandler} method
will return the invocation handler associated with the proxy instance
passed as its argument.

<li>An interface method invocation on a proxy instance will be
encoded and dispatched to the invocation handler's {@link
InvocationHandler#invoke invoke} method as described in the
documentation for that method.

<li>An invocation of the <code>hashCode</code>,
<code>equals</code>, or <code>toString</code> methods declared in
<code>java.lang.Object</code> on a proxy instance will be encoded and
dispatched to the invocation handler's <code>invoke</code> method in
the same manner as interface method invocations are encoded and
dispatched, as described above.  The declaring class of the
<code>Method</code> object passed to <code>invoke</code> will be
<code>java.lang.Object</code>.  Other public methods of a proxy
instance inherited from <code>java.lang.Object</code> are not
overridden by a proxy class, so invocations of those methods behave
like they do for instances of <code>java.lang.Object</code>.
</ul>

<h3>Methods Duplicated in Multiple Proxy Interfaces</h3>

<p>When two or more interfaces of a proxy class contain a method with
the same name and parameter signature, the order of the proxy class's
interfaces becomes significant.  When such a <i>duplicate method</i>
is invoked on a proxy instance, the <code>Method</code> object passed
to the invocation handler will not necessarily be the one whose
declaring class is assignable from the reference type of the interface
that the proxy's method was invoked through.  This limitation exists
because the corresponding method implementation in the generated proxy
class cannot determine which interface it was invoked through.
Therefore, when a duplicate method is invoked on a proxy instance,
the <code>Method</code> object for the method in the foremost interface
that contains the method (either directly or inherited through a
superinterface) in the proxy class's list of interfaces is passed to
the invocation handler's <code>invoke</code> method, regardless of the
reference type through which the method invocation occurred.

<p>If a proxy interface contains a method with the same name and
parameter signature as the <code>hashCode</code>, <code>equals</code>,
or <code>toString</code> methods of <code>java.lang.Object</code>,
when such a method is invoked on a proxy instance, the
<code>Method</code> object passed to the invocation handler will have
<code>java.lang.Object</code> as its declaring class.  In other words,
the public, non-final methods of <code>java.lang.Object</code>
logically precede all of the proxy interfaces for the determination of
which <code>Method</code> object to pass to the invocation handler.

<p>Note also that when a duplicate method is dispatched to an
invocation handler, the <code>invoke</code> method may only throw
checked exception types that are assignable to one of the exception
types in the <code>throws</code> clause of the method in <i>all</i> of
the proxy interfaces that it can be invoked through.  If the
<code>invoke</code> method throws a checked exception that is not
assignable to any of the exception types declared by the method in one
of the proxy interfaces that it can be invoked through, then an
unchecked <code>UndeclaredThrowableException</code> will be thrown by
the invocation on the proxy instance.  This restriction means that not
all of the exception types returned by invoking
<code>getExceptionTypes</code> on the <code>Method</code> object
passed to the <code>invoke</code> method can necessarily be thrown
successfully by the <code>invoke</code> method.

@author	Peter Jones
@version	1.21, 05/09/15
@see		InvocationHandler
@since	1.3"
      classrelation 1802651 // <realization>
	relation 1802651 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1802651 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2754331 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -2222568056686623797L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2754459 "proxyClassNamePrefix"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"$Proxy\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " prefix for all proxy class names "
      end

      classrelation 1802779 // constructorParams (<unidirectional association>)
	relation 1802779 --->
	  a role_name "constructorParams" multiplicity "[]" init_value "= 
	{ InvocationHandler.class }" class_relation const_relation private
	    comment " parameter types of a proxy class constructor 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1802779 // constructorParams (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      classrelation 1802907 // loaderToCache (<unidirectional association>)
	relation 1802907 --->
	  a role_name "loaderToCache" init_value "=  new WeakHashMap()" class_relation private
	    comment " maps a class loader to the proxy class cache for that loader 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1802907 // loaderToCache (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      attribute 2754587 "pendingGenerationMarker"
	class_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " marks that a particular proxy class is currently being generated "
      end

      attribute 2754715 "nextUniqueNumber"
	class_attribute private explicit_type "long"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " next number to use for generation of unique proxy class names "
      end

      attribute 2754843 "nextUniqueNumberLock"
	class_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1803035 // proxyClasses (<unidirectional association>)
	relation 1803035 --->
	  a role_name "proxyClasses" init_value "= 
	Collections.synchronizedMap(new WeakHashMap())" class_relation private
	    comment " set of all generated proxy classes, for isProxyClass implementation 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1803035 // proxyClasses (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      classrelation 1803163 // h (<unidirectional association>)
	relation 1803163 --->
	  a role_name "h" protected
	    comment "
the invocation handler for this proxy instance.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1803163 // h (<unidirectional association>)
	  b parent class_ref 288411 // InvocationHandler
      end

      operation 7135131 "Proxy"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prohibits instantiation."
      end

      operation 7135259 "Proxy"
	protected explicit_return_type ""
	nparams 1
	  param inout name "h" type class_ref 288411 // InvocationHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>Proxy</code> instance from a subclass
(typically, a dynamic proxy class) with the specified value
for its invocation handler.

@param   h the invocation handler for this proxy instance"
      end

      operation 7135387 "getProxyClass"
	class_operation public return_type class_ref 164635 // Class
	nparams 2
	  param inout name "loader" type class_ref 163611 // ClassLoader
	  param inout name "interfaces" explicit_type "Class<?>..."
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>java.lang.Class</code> object for a proxy class
given a class loader and an array of interfaces.  The proxy class
will be defined by the specified class loader and will implement
all of the supplied interfaces.  If a proxy class for the same
permutation of interfaces has already been defined by the class
loader, then the existing proxy class will be returned; otherwise,
a proxy class for those interfaces will be generated dynamically
and defined by the class loader.

<p>There are several restrictions on the parameters that may be
passed to <code>Proxy.getProxyClass</code>:

<ul>
<li>All of the <code>Class</code> objects in the
<code>interfaces</code> array must represent interfaces, not
classes or primitive types.

<li>No two elements in the <code>interfaces</code> array may
refer to identical <code>Class</code> objects.

<li>All of the interface types must be visible by name through the
specified class loader.  In other words, for class loader
<code>cl</code> and every interface <code>i</code>, the following
expression must be true:
<pre>
    Class.forName(i.getName(), false, cl) == i
</pre>

<li>All non-public interfaces must be in the same package;
otherwise, it would not be possible for the proxy class to
implement all of the interfaces, regardless of what package it is
defined in.

<li>For any set of member methods of the specified interfaces
that have the same signature:
<ul>
<li>If the return type of any of the methods is a primitive
type or void, then all of the methods must have that same
return type.
<li>Otherwise, one of the methods must have a return type that
is assignable to all of the return types of the rest of the
methods.
</ul>

<li>The resulting proxy class must not exceed any limits imposed
on classes by the virtual machine.  For example, the VM may limit
the number of interfaces that a class may implement to 65535; in
that case, the size of the <code>interfaces</code> array must not
exceed 65535.
</ul>

<p>If any of these restrictions are violated,
<code>Proxy.getProxyClass</code> will throw an
<code>IllegalArgumentException</code>.  If the <code>interfaces</code>
array argument or any of its elements are <code>null</code>, a
<code>NullPointerException</code> will be thrown.

<p>Note that the order of the specified proxy interfaces is
significant: two requests for a proxy class with the same combination
of interfaces but in a different order will result in two distinct
proxy classes.

@param	loader the class loader to define the proxy class
@param	interfaces the list of interfaces for the proxy class
		to implement
@return	a proxy class that is defined in the specified class loader
		and that implements the specified interfaces
@throws	IllegalArgumentException if any of the restrictions on the
		parameters that may be passed to <code>getProxyClass</code>
		are violated
@throws	NullPointerException if the <code>interfaces</code> array
		argument or any of its elements are <code>null</code>"
      end

      operation 7135515 "newProxyInstance"
	class_operation public explicit_return_type "Object"
	nparams 3
	  param inout name "loader" type class_ref 163611 // ClassLoader
	  param inout name "interfaces" type class_ref 164635 // Class
	  param inout name "h" type class_ref 288411 // InvocationHandler
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?>[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an instance of a proxy class for the specified interfaces
that dispatches method invocations to the specified invocation
handler.  This method is equivalent to:
<pre>
    Proxy.getProxyClass(loader, interfaces).
        getConstructor(new Class[] { InvocationHandler.class }).
        newInstance(new Object[] { handler });
</pre>

<p><code>Proxy.newProxyInstance</code> throws
<code>IllegalArgumentException</code> for the same reasons that
<code>Proxy.getProxyClass</code> does.

@param	loader the class loader to define the proxy class
@param	interfaces the list of interfaces for the proxy class
		to implement
@param   h the invocation handler to dispatch method invocations to
@return	a proxy instance with the specified invocation handler of a
		proxy class that is defined by the specified class loader
		and that implements the specified interfaces
@throws	IllegalArgumentException if any of the restrictions on the
		parameters that may be passed to <code>getProxyClass</code>
		are violated
@throws	NullPointerException if the <code>interfaces</code> array
		argument or any of its elements are <code>null</code>, or
		if the invocation handler, <code>h</code>, is
		<code>null</code>"
      end

      operation 7135643 "isProxyClass"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if and only if the specified class was dynamically
generated to be a proxy class using the <code>getProxyClass</code>
method or the <code>newProxyInstance</code> method.

<p>The reliability of this method is important for the ability
to use it to make security decisions, so its implementation should
not just test if the class in question extends <code>Proxy</code>.

@param	cl the class to test
@return  <code>true</code> if the class is a proxy class and
		<code>false</code> otherwise
@throws	NullPointerException if <code>cl</code> is <code>null</code>"
      end

      operation 7135771 "getInvocationHandler"
	class_operation public return_type class_ref 288411 // InvocationHandler
	nparams 1
	  param inout name "proxy" explicit_type "Object"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the invocation handler for the specified proxy instance.

@param	proxy the proxy instance to return the invocation handler for
@return	the invocation handler for the proxy instance
@throws	IllegalArgumentException if the argument is not a
		proxy instance"
      end

      operation 7135899 "defineClass0"
	class_operation private return_type class_ref 164635 // Class
	nparams 5
	  param inout name "loader" type class_ref 163611 // ClassLoader
	  param in name "name" explicit_type "String"
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 910747 "GenericDeclaration"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A common interface for all entities that declare type variables.

@since 1.5"
      operation 6959899 "getTypeParameters"
	public return_type class_ref 910875 // TypeVariable
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>TypeVariable</tt> objects that
represent the type variables declared by the generic
declaration represented by this <tt>GenericDeclaration</tt>
object, in declaration order.  Returns an array of length 0 if
the underlying generic declaration declares no type variables.

@return an array of <tt>TypeVariable</tt> objects that represent
    the type variables declared by this generic declaration
@throws GenericSignatureFormatError if the generic
    signature of this generic declaration does not conform to
    the format specified in the Java Virtual Machine Specification,
    3rd edition"
      end
    end

    class 910875 "TypeVariable"
      visibility public stereotype "interface"
      nformals 3
      formal name "D" type "" explicit_default_value ""
        explicit_extends ""
      formal name "D" type "" explicit_default_value ""
        explicit_extends ""
      formal name "D" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "TypeVariable is the common superinterface for type variables of kinds.
A type variable is created the first time it is needed by a reflective
method, as specified in this package.  If a type variable t is referenced
by a type (i.e, class, interface or annotation type) T, and T is declared
by the nth enclosing class of T (see JLS 8.1.2), then the creation of t
requires the resolution (see JVMS 5) of the ith enclosing class of T,
for i = 0 to n, inclusive. Creating a type variable must not cause the
creation of its bounds. Repeated creation of a type variable has no effect.

<p>Multiple objects may be instantiated at run-time to
represent a given type variable. Even though a type variable is
created only once, this does not imply any requirement to cache
instances representing the type variable. However, all instances
representing a type variable must be equal() to each other.
As a consequence, users of type variables must not rely on the identity 
of instances of classes implementing this interface.

<p>The type parameter D represents the type of generic declaration
that declared the underlying type variable.

@since 1.5"
      classrelation 1803547 // <generalisation>
	relation 1803547 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1803547 // <generalisation>
	  b parent class_ref 911003 // Type
      end

      operation 7138075 "getBounds"
	public return_type class_ref 911003 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>Type</tt> objects representing the 
upper bound(s) of this type variable.  Note that if no upper bound is
explicitly declared, the upper bound is <tt>Object</tt>.

<p>For each upper bound B: <ul> <li>if B is a parameterized
type or a type variable, it is created, (see {@link
java.lang.reflect.ParameterizedType ParameterizedType} for the
details of the creation process for parameterized types).
<li>Otherwise, B is resolved.  </ul>

@throws TypeNotPresentException  if any of the
    bounds refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if any of the 
    bounds refer to a parameterized type that cannot be instantiated 
    for any reason
@return an array of <tt>Type</tt>s representing the upper
    bound(s) of this type variable"
      end

      operation 7138203 "getGenericDeclaration"
	public explicit_return_type "D"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <tt>GenericDeclaration</tt> object representing the 
generic declaration declared this type variable.

@return the generic declaration declared for this type variable.

@since 1.5"
      end

      operation 7138331 "getName"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this type variable, as it occurs in the source code.

@return the name of this type variable, as it appears in the source code"
      end
    end

    class 911003 "Type"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Type is the common superinterface for all types in the Java
programming language. These include raw types, parameterized types,
array types, type variables and primitive types.

@since 1.5"
    end

    class 911131 "AnnotatedElement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Represents an annotated element of the program currently running in this
VM.  This interface allows annotations to be read reflectively.  All
annotations returned by methods in this interface are immutable and
serializable.  It is permissible for the caller to modify the
arrays returned by accessors for array-valued enum members; it will
have no affect on the arrays returned to other callers.

<p>If an annotation returned by a method in this interface contains
(directly or indirectly) a {@link Class}-valued member referring to
a class that is not accessible in this VM, attempting to read the class
by calling the relevant Class-returning method on the returned annotation
will result in a {@link TypeNotPresentException}.

<p>Similarly, attempting to read an enum-valued member will result in
a {@link EnumConstantNotPresentException} if the enum constant in the
annotation is no longer present in the enum type.

<p>Finally, Attempting to read a member whose definition has evolved
incompatibly will result in a {@link
java.lang.annotation.AnnotationTypeMismatchException} or an
{@link java.lang.annotation.IncompleteAnnotationException}.

@since 1.5
@author Josh Bloch"
      operation 6960027 "isAnnotationPresent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "annotationType" type class_ref 164635 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Annotation> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if an annotation for the specified type
is present on this element, else false.  This method
is designed primarily for convenient access to marker annotations.

@param annotationType the Class object corresponding to the
       annotation type
@return true if an annotation for the specified annotation
    type is present on this element, else false
@throws NullPointerException if annotationType is null
@since 1.5"
      end

      operation 6960155 "getAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationType" type class_ref 164635 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this element's annotation for the specified type if
such an annotation is present, else null.

@param annotationType the Class object corresponding to the 
       annotation type
@return this element's annotation for the specified annotation type if
    present on this element, else null
@throws NullPointerException if annotationType is null
@since 1.5"
      end

      operation 6960283 "getAnnotations"
	public return_type class_ref 911259 // Annotation
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all annotations present on this element.  (Returns an array
of length zero if this element has no annotations.)  The caller of
this method is free to modify the returned array; it will have no
effect on the arrays returned to other callers.

@return all annotations present on this element
@since 1.5"
      end

      operation 6960411 "getDeclaredAnnotations"
	public return_type class_ref 911259 // Annotation
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all annotations that are directly present on this
element.  Unlike the other methods in this interface, this method
ignores inherited annotations.  (Returns an array of length zero if
no annotations are directly present on this element.)  The caller of
this method is free to modify the returned array; it will have no
effect on the arrays returned to other callers.

@return All annotations directly present on this element
@since 1.5"
      end
    end

    class 923931 "AccessibleObject"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The AccessibleObject class is the base class for Field, Method and
Constructor objects.  It provides the ability to flag a reflected
object as suppressing default Java language access control checks
when it is used.  The access checks--for public, default (package)
access, protected, and private members--are performed when Fields,
Methods or Constructors are used to set or get fields, to invoke
methods, or to create and initialize new instances of classes,
respectively.

<p>Setting the <tt>accessible</tt> flag in a reflected object
permits sophisticated applications with sufficient privilege, such
as Java Object Serialization or other persistence mechanisms, to
manipulate objects in a manner that would normally be prohibited.

@see Field
@see Method
@see Constructor
@see ReflectPermission

@since 1.2"
      classrelation 1797915 // <realization>
	relation 1797915 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1797915 // <realization>
	  b parent class_ref 911131 // AnnotatedElement
      end

      classrelation 1798043 // ACCESS_PERMISSION (<unidirectional association>)
	relation 1798043 --->
	  a role_name "ACCESS_PERMISSION" init_value "= 
	new ReflectPermission(\"suppressAccessChecks\")" class_relation const_relation private
	    comment "
The Permission object that is used to check whether a client
has sufficient privilege to defeat Java language access
control checks.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1798043 // ACCESS_PERMISSION (<unidirectional association>)
	  b parent class_ref 285211 // Permission
      end

      operation 7114139 "setAccessible"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "array" type class_ref 923931 // AccessibleObject
	  param inout name "flag" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to set the <tt>accessible</tt> flag for an
array of objects with a single security check (for efficiency).

<p>First, if there is a security manager, its
<code>checkPermission</code> method is called with a
<code>ReflectPermission(\"suppressAccessChecks\")</code> permission.

<p>A <code>SecurityException</code> is raised if <code>flag</code> is
<code>true</code> but accessibility of any of the elements of the input
<code>array</code> may not be changed (for example, if the element
object is a {@link Constructor} object for the class {@link
java.lang.Class}).  In the event of such a SecurityException, the
accessibility of objects is set to <code>flag</code> for array elements
upto (and excluding) the element for which the exception occurred; the
accessibility of elements beyond (and including) the element for which
the exception occurred is unchanged.

@param array the array of AccessibleObjects
@param flag  the new value for the <tt>accessible</tt> flag
             in each object
@throws SecurityException if the request is denied.
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission"
      end

      operation 7114267 "setAccessible"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the <tt>accessible</tt> flag for this object to
the indicated boolean value.  A value of <tt>true</tt> indicates that
the reflected object should suppress Java language access
checking when it is used.  A value of <tt>false</tt> indicates 
that the reflected object should enforce Java language access checks.

<p>First, if there is a security manager, its
<code>checkPermission</code> method is called with a
<code>ReflectPermission(\"suppressAccessChecks\")</code> permission.

<p>A <code>SecurityException</code> is raised if <code>flag</code> is
<code>true</code> but accessibility of this object may not be changed
(for example, if this element object is a {@link Constructor} object for
the class {@link java.lang.Class}).

<p>A <code>SecurityException</code> is raised if this object is a {@link
java.lang.reflect.Constructor} object for the class
<code>java.lang.Class</code>, and <code>flag</code> is true.

@param flag the new value for the <tt>accessible</tt> flag
@throws SecurityException if the request is denied.
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission"
      end

      operation 7114395 "setAccessible0"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 923931 // AccessibleObject
	  param inout name "flag" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check that you aren't exposing java.lang.Class.<init>. "
      end

      operation 7114523 "isAccessible"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the value of the <tt>accessible</tt> flag for this object.

@return the value of the object's <tt>accessible</tt> flag"
      end

      operation 7114651 "AccessibleObject"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor: only used by the Java Virtual Machine."
      end

      classrelation 1798171 // securityCheckCache (<unidirectional association>)
	relation 1798171 --->
	  a role_name "securityCheckCache" volatile package
	    comment " Cache for security checks.
 For non-public members or members in package-private classes,
 it is necessary to perform somewhat expensive security checks.
 If the security check succeeds for a given class, it will
 always succeed (it is not affected by the granting or revoking
 of permissions); we speed up the check in the common case by
 remembering the last Class for which the check succeeded.  This
 field is used by Field, Method, and Constructor.

 NOTE: for security purposes, this field must not be visible
 outside this package.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1798171 // securityCheckCache (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      attribute 2748443 "override"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Indicates whether language-level access checks are overridden
 by this object. Initializes to \"false\". This field is used by
 Field, Method, and Constructor.

 NOTE: for security purposes, this field must not be visible
 outside this package."
      end

      attribute 2748571 "reflectionFactory"
	class_attribute const_attribute package explicit_type "ReflectionFactory"
	init_value "=  (ReflectionFactory)
        AccessController.doPrivileged
            (new sun.reflect.ReflectionFactory.GetReflectionFactoryAction())"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Reflection factory used by subclasses for creating field,
 method, and constructor accessors. Note that this is called
 very early in the bootstrapping process."
      end

      operation 7114779 "getAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7114907 "isAnnotationPresent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "annotationClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Annotation> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7115035 "getAnnotations"
	public return_type class_ref 911259 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7115163 "getDeclaredAnnotations"
	public return_type class_ref 911259 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 924059 "Array"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Array</code> class provides static methods to dynamically create and
access Java arrays.

<p><code>Array</code> permits widening conversions to occur during a get or set
operation, but throws an <code>IllegalArgumentException</code> if a narrowing
conversion would occur.

@author Nakul Saraiya"
      operation 7115291 "Array"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.  Class Array is not instantiable."
      end

      operation 7115419 "newInstance"
	class_operation public explicit_return_type "Object"
	nparams 2
	  param inout name "componentType" type class_ref 164635 // Class
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 913819 // NegativeArraySizeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new array with the specified component type and
length.
Invoking this method is equivalent to creating an array
as follows:
<blockquote>
<pre>
int[] x = {length};
Array.newInstance(componentType, x);
</pre>
</blockquote>

@param componentType the <code>Class</code> object representing the
component type of the new array
@param length the length of the new array
@return the new array
@exception NullPointerException if the specified
<code>componentType</code> parameter is null
@exception IllegalArgumentException if componentType is Void.TYPE
@exception NegativeArraySizeException if the specified <code>length</code> 
is negative"
      end

      operation 7115547 "newInstance"
	class_operation public explicit_return_type "Object"
	nparams 2
	  param inout name "componentType" type class_ref 164635 // Class
	  param in name "dimensions" explicit_type "int"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 913819 // NegativeArraySizeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new array
with the specified component type and dimensions. 
If <code>componentType</code>
represents a non-array class or interface, the new array
has <code>dimensions.length</code> dimensions and&nbsp;
<code>componentType&nbsp;</code> as its component type. If
<code>componentType</code> represents an array class, the
number of dimensions of the new array is equal to the sum
of <code>dimensions.length</code> and the number of
dimensions of <code>componentType</code>. In this case, the
component type of the new array is the component type of
<code>componentType</code>.

<p>The number of dimensions of the new array must not
exceed the number of array dimensions supported by the
implementation (typically 255).

@param componentType the <code>Class</code> object representing the component
type of the new array
@param dimensions an array of <code>int</code> types representing the dimensions of
the new array
@return the new array
@exception NullPointerException if the specified 
<code>componentType</code> argument is null
@exception IllegalArgumentException if the specified <code>dimensions</code> 
argument is a zero-dimensional array, or if the number of
requested dimensions exceeds the limit on the number of array dimensions 
supported by the implementation (typically 255), or if componentType 
is Void.TYPE.
@exception NegativeArraySizeException if any of the components in
the specified <code>dimensions</code> argument is negative."
      end

      operation 7115675 "getLength"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "array" explicit_type "Object"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the specified array object, as an <code>int</code>.

@param array the array
@return the length of the array
@exception IllegalArgumentException if the object argument is not
an array"
      end

      operation 7115803 "get"
	class_operation public explicit_return_type "Object"
	nparams 2
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object.  The value is automatically wrapped in an object
if it has a primitive type.

@param array the array
@param index the index
@return the (possibly wrapped) value of the indexed component in
the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to the
length of the specified array"
      end

      operation 7115931 "getBoolean"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as a <code>boolean</code>.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get"
      end

      operation 7116059 "getByte"
	class_operation public explicit_return_type "byte"
	nparams 2
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as a <code>byte</code>.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get"
      end

      operation 7116187 "getChar"
	class_operation public explicit_return_type "char"
	nparams 2
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as a <code>char</code>.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get"
      end

      operation 7116315 "getShort"
	class_operation public explicit_return_type "short"
	nparams 2
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as a <code>short</code>.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get"
      end

      operation 7116443 "getInt"
	class_operation public explicit_return_type "int"
	nparams 2
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as an <code>int</code>.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get"
      end

      operation 7116571 "getLong"
	class_operation public explicit_return_type "long"
	nparams 2
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as a <code>long</code>.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get"
      end

      operation 7116699 "getFloat"
	class_operation public explicit_return_type "float"
	nparams 2
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as a <code>float</code>.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get"
      end

      operation 7116827 "getDouble"
	class_operation public explicit_return_type "double"
	nparams 2
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as a <code>double</code>.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get"
      end

      operation 7116955 "set"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	  param inout name "value" explicit_type "Object"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified new value.  The new value is first
automatically unwrapped if the array has a primitive component
type.
@param array the array
@param index the index into the array
@param value the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the array component type is primitive and
an unwrapping conversion fails
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to
the length of the specified array"
      end

      operation 7117083 "setBoolean"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	  param inout name "z" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified <code>boolean</code> value.
@param array the array
@param index the index into the array
@param z the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set"
      end

      operation 7117211 "setByte"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	  param in name "b" explicit_type "byte"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified <code>byte</code> value.
@param array the array
@param index the index into the array
@param b the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set"
      end

      operation 7117339 "setChar"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	  param in name "c" explicit_type "char"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified <code>char</code> value.
@param array the array
@param index the index into the array
@param c the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set"
      end

      operation 7117467 "setShort"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	  param in name "s" explicit_type "short"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified <code>short</code> value.
@param array the array
@param index the index into the array
@param s the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set"
      end

      operation 7117595 "setInt"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	  param in name "i" explicit_type "int"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified <code>int</code> value.
@param array the array
@param index the index into the array
@param i the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set"
      end

      operation 7117723 "setLong"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	  param in name "l" explicit_type "long"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified <code>long</code> value.
@param array the array
@param index the index into the array
@param l the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set"
      end

      operation 7117851 "setFloat"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	  param in name "f" explicit_type "float"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified <code>float</code> value.
@param array the array
@param index the index into the array
@param f the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set"
      end

      operation 7117979 "setDouble"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" explicit_type "Object"
	  param in name "index" explicit_type "int"
	  param in name "d" explicit_type "double"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified <code>double</code> value.
@param array the array
@param index the index into the array
@param d the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified <code>index</code> 
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set"
      end

      operation 7118107 "newArray"
	class_operation private explicit_return_type "Object"
	nparams 2
	  param inout name "componentType" type class_ref 164635 // Class
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 913819 // NegativeArraySizeException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private"
      end

      operation 7118235 "multiNewArray"
	class_operation private explicit_return_type "Object"
	nparams 2
	  param inout name "componentType" type class_ref 164635 // Class
	  param in name "dimensions" explicit_type "int"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 913819 // NegativeArraySizeException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 924187 "GenericArrayType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<tt>GenericArrayType</tt> represents an array type whose component
type is either a parameterized type or a type variable.
@since 1.5"
      classrelation 1800475 // <generalisation>
	relation 1800475 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1800475 // <generalisation>
	  b parent class_ref 911003 // Type
      end

      operation 7128219 "getGenericComponentType"
	public return_type class_ref 911003 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>Type</tt> object representing the component type
of this array. This method creates the component type of the
array.  See the declaration of {@link
java.lang.reflect.ParameterizedType ParameterizedType} for the
semantics of the creation process for parameterized types and
see {@link java.lang.reflect.TypeVariable TypeVariable} for the
creation process for type variables.

@return  a <tt>Type</tt> object representing the component type
    of this array
@throws TypeNotPresentException if the underlying array type's
    component type refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if  the
    underlying array type's component type refers to a
    parameterized type that cannot be instantiated for any reason"
      end
    end

    class 924315 "GenericSignatureFormatError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when a syntactically malformed signature attribute is
encountered by a reflective method that needs to interpret the
generic signature information for a type, method or constructor.

@since 1.5"
      classrelation 1800603 // <generalisation>
	relation 1800603 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1800603 // <generalisation>
	  b parent class_ref 528411 // ClassFormatError
      end
    end

    class 924443 "MalformedParameterizedTypeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when a semantically malformed parameterized type is
encountered by a reflective method that needs to instantiate it.
For example, if the number of type arguments to a parameterized type
is wrong.

@since 1.5"
      classrelation 1800987 // <generalisation>
	relation 1800987 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1800987 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end
    end

    class 924571 "Modifier"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The Modifier class provides <code>static</code> methods and
constants to decode class and member access modifiers.  The sets of
modifiers are represented as integers with distinct bit positions
representing different modifiers.  The values for the constants
representing the modifiers are taken from <a
href=\"http://java.sun.com/docs/books/vmspec/2nd-edition/html/VMSpecTOC.doc.html\"><i>The
Java</i><sup><small>TM</small></sup> <i>Virtual Machine Specification, Second
edition</i></a> tables 
<a href=\"http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#75734\">4.1</a>,
<a href=\"http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#88358\">4.4</a>,
<a href=\"http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#75568\">4.5</a>, and 
<a href=\"http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#88478\">4.7</a>.

@see Class#getModifiers()
@see Member#getModifiers()

@author Nakul Saraiya
@author Kenneth Russell"
      extra_member 162587 "initialization"
	
	cpp "" ""
	java "  static {
        sun.reflect.ReflectionFactory factory =
            (sun.reflect.ReflectionFactory) AccessController.doPrivileged(
                new ReflectionFactory.GetReflectionFactoryAction()
            );
        factory.setLangReflectAccess(new java.lang.reflect.ReflectAccess());
    }"
	php ""
	python ""
	idl ""
      end

      operation 7132955 "isPublic"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return <tt>true</tt> if the integer argument includes the
<tt>public</tt> modifier, <tt>false</tt> otherwise.

@param 	mod a set of modifiers
@return <tt>true</tt> if <code>mod</code> includes the
<tt>public</tt> modifier; <tt>false</tt> otherwise."
      end

      operation 7133083 "isPrivate"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return <tt>true</tt> if the integer argument includes the
<tt>private</tt> modifier, <tt>false</tt> otherwise.

@param 	mod a set of modifiers
@return <tt>true</tt> if <code>mod</code> includes the
<tt>private</tt> modifier; <tt>false</tt> otherwise."
      end

      operation 7133211 "isProtected"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return <tt>true</tt> if the integer argument includes the
<tt>protected</tt> modifier, <tt>false</tt> otherwise.

@param 	mod a set of modifiers
@return <tt>true</tt> if <code>mod</code> includes the
<tt>protected</tt> modifier; <tt>false</tt> otherwise."
      end

      operation 7133339 "isStatic"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return <tt>true</tt> if the integer argument includes the
<tt>static</tt> modifier, <tt>false</tt> otherwise.

@param 	mod a set of modifiers
@return <tt>true</tt> if <code>mod</code> includes the
<tt>static</tt> modifier; <tt>false</tt> otherwise."
      end

      operation 7133467 "isFinal"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return <tt>true</tt> if the integer argument includes the
<tt>final</tt> modifier, <tt>false</tt> otherwise.

@param 	mod a set of modifiers
@return <tt>true</tt> if <code>mod</code> includes the
<tt>final</tt> modifier; <tt>false</tt> otherwise."
      end

      operation 7133595 "isSynchronized"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return <tt>true</tt> if the integer argument includes the
<tt>synchronized</tt> modifier, <tt>false</tt> otherwise.

@param 	mod a set of modifiers
@return <tt>true</tt> if <code>mod</code> includes the
<tt>synchronized</tt> modifier; <tt>false</tt> otherwise."
      end

      operation 7133723 "isVolatile"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return <tt>true</tt> if the integer argument includes the
<tt>volatile</tt> modifier, <tt>false</tt> otherwise.

@param 	mod a set of modifiers
@return <tt>true</tt> if <code>mod</code> includes the
<tt>volatile</tt> modifier; <tt>false</tt> otherwise."
      end

      operation 7133851 "isTransient"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return <tt>true</tt> if the integer argument includes the
<tt>transient</tt> modifier, <tt>false</tt> otherwise.

@param 	mod a set of modifiers
@return <tt>true</tt> if <code>mod</code> includes the
<tt>transient</tt> modifier; <tt>false</tt> otherwise."
      end

      operation 7133979 "isNative"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return <tt>true</tt> if the integer argument includes the
<tt>native</tt> modifier, <tt>false</tt> otherwise.

@param 	mod a set of modifiers
@return <tt>true</tt> if <code>mod</code> includes the
<tt>native</tt> modifier; <tt>false</tt> otherwise."
      end

      operation 7134107 "isInterface"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return <tt>true</tt> if the integer argument includes the
<tt>interface</tt> modifier, <tt>false</tt> otherwise.

@param 	mod a set of modifiers
@return <tt>true</tt> if <code>mod</code> includes the
<tt>interface</tt> modifier; <tt>false</tt> otherwise."
      end

      operation 7134235 "isAbstract"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return <tt>true</tt> if the integer argument includes the
<tt>abstract</tt> modifier, <tt>false</tt> otherwise.

@param 	mod a set of modifiers
@return <tt>true</tt> if <code>mod</code> includes the
<tt>abstract</tt> modifier; <tt>false</tt> otherwise."
      end

      operation 7134363 "isStrict"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return <tt>true</tt> if the integer argument includes the
<tt>strictfp</tt> modifier, <tt>false</tt> otherwise.

@param 	mod a set of modifiers
@return <tt>true</tt> if <code>mod</code> includes the
<tt>strictfp</tt> modifier; <tt>false</tt> otherwise."
      end

      operation 7134491 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string describing the access modifier flags in
the specified modifier. For example:
<blockquote><pre>
   public final synchronized strictfp
</pre></blockquote>
The modifier names are returned in an order consistent with the
suggested modifier orderings given in <a
href=\"http://java.sun.com/docs/books/jls/second_edition/html/j.title.doc.html\"><em>The
Java Language Specification, Second Edition</em></a> sections
<a href=\"http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#21613\">&sect;8.1.1</a>, 
<a href=\"http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#78091\">&sect;8.3.1</a>, 
<a href=\"http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#78188\">&sect;8.4.3</a>, 
<a href=\"http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#42018\">&sect;8.8.3</a>, and
<a href=\"http://java.sun.com/docs/books/jls/second_edition/html/interfaces.doc.html#235947\">&sect;9.1.1</a>.  
The full modifier ordering used by this method is:
<blockquote> <code> 
public protected private abstract static final transient
volatile synchronized native strictfp
interface </code> </blockquote> 
The <code>interface</code> modifier discussed in this class is
not a true modifier in the Java language and it appears after
all other modifiers listed by this method.  This method may
return a string of modifiers that are not valid modifiers of a
Java entity; in other words, no checking is done on the
possible validity of the combination of modifiers represented
by the input.

@param	mod a set of modifiers
@return	a string representation of the set of modifiers
represented by <code>mod</code>"
      end

      attribute 2752155 "PUBLIC"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x00000001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Access modifier flag constants from <em>The Java Virtual
Machine Specification, Second Edition</em>, tables 4.1, 4.4,
4.5, and 4.7.


The <code>int</code> value representing the <code>public</code> 
modifier.
"
      end

      attribute 2752283 "PRIVATE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x00000002"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>int</code> value representing the <code>private</code> 
modifier.
"
      end

      attribute 2752411 "PROTECTED"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x00000004"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>int</code> value representing the <code>protected</code> 
modifier.
"
      end

      attribute 2752539 "STATIC"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x00000008"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>int</code> value representing the <code>static</code> 
modifier.
"
      end

      attribute 2752667 "FINAL"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x00000010"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>int</code> value representing the <code>final</code> 
modifier.
"
      end

      attribute 2752795 "SYNCHRONIZED"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x00000020"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>int</code> value representing the <code>synchronized</code> 
modifier.
"
      end

      attribute 2752923 "VOLATILE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x00000040"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>int</code> value representing the <code>volatile</code> 
modifier.
"
      end

      attribute 2753051 "TRANSIENT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x00000080"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>int</code> value representing the <code>transient</code> 
modifier.
"
      end

      attribute 2753179 "NATIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x00000100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>int</code> value representing the <code>native</code> 
modifier.
"
      end

      attribute 2753307 "INTERFACE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x00000200"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>int</code> value representing the <code>interface</code> 
modifier.
"
      end

      attribute 2753435 "ABSTRACT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x00000400"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>int</code> value representing the <code>abstract</code> 
modifier.
"
      end

      attribute 2753563 "STRICT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x00000800"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>int</code> value representing the <code>strictfp</code> 
modifier.
"
      end

      attribute 2753691 "BRIDGE"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0x00000040"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bits not (yet) exposed in the public API either because they
 have different meanings for fields and methods and there is no
 way to distinguish between the two in this class, or because
 they are not Java programming language keywords"
      end

      attribute 2753819 "VARARGS"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0x00000080"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2753947 "SYNTHETIC"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0x00001000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2754075 "ANNOTATION"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0x00002000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2754203 "ENUM"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0x00004000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7134619 "isSynthetic"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 924699 "ParameterizedType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "ParameterizedType represents a parameterized type such as
Collection&lt;String&gt;.

<p>A parameterized type is created the first time it is needed by a
reflective method, as specified in this package. When a
parameterized type p is created, the generic type declaration that
p instantiates is resolved, and all type arguments of p are created
recursively. See {@link java.lang.reflect.TypeVariable
TypeVariable} for details on the creation process for type
variables. Repeated creation of a parameterized type has no effect.

<p>Instances of classes that implement this interface must implement
an equals() method that equates any two instances that share the
same generic type declaration and have equal type parameters.

@since 1.5"
      classrelation 1802523 // <generalisation>
	relation 1802523 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1802523 // <generalisation>
	  b parent class_ref 911003 // Type
      end

      operation 7134747 "getActualTypeArguments"
	public return_type class_ref 911003 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>Type</tt> objects representing the actual type
arguments to this type.

<p>Note that in some cases, the returned array be empty. This can occur
if this type represents a non-parameterized type nested within
a parameterized type.

@return an array of <tt>Type</tt> objects representing the actual type
    arguments to this type
@throws <tt>TypeNotPresentException</tt> if any of the
    actual type arguments refers to a non-existent type declaration
@throws <tt>MalformedParameterizedTypeException</tt> if any of the 
    actual type parameters refer to a parameterized type that cannot
    be instantiated for any reason
@since 1.5"
      end

      operation 7134875 "getRawType"
	public return_type class_ref 911003 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <tt>Type</tt> object representing the class or interface
that declared this type.

@return the <tt>Type</tt> object representing the class or interface
    that declared this type
@since 1.5"
      end

      operation 7135003 "getOwnerType"
	public return_type class_ref 911003 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>Type</tt> object representing the type that this type
is a member of.  For example, if this type is {@code O<T>.I<S>},
return a representation of {@code O<T>}.

<p>If this type is a top-level type, <tt>null</tt> is returned.

@return a <tt>Type</tt> object representing the type that 
    this type is a member of. If this type is a top-level type, 
    <tt>null</tt> is returned
@throws <tt>TypeNotPresentException</tt> if the owner type
    refers to a non-existent type declaration
@throws <tt>MalformedParameterizedTypeException</tt> if the owner type
    refers to a parameterized type that cannot be instantiated 
    for any reason
@since 1.5"
      end
    end

    class 924827 "ReflectAccess"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Package-private class implementing the
sun.reflect.LangReflectAccess interface, allowing the java.lang
package to instantiate objects in this package. "
      operation 7136027 "newField"
	public return_type class_ref 220443 // Field
	nparams 7
	  param inout name "declaringClass" type class_ref 164635 // Class
	  param in name "name" explicit_type "String"
	  param inout name "type" type class_ref 164635 // Class
	  param in name "modifiers" explicit_type "int"
	  param in name "slot" explicit_type "int"
	  param in name "signature" explicit_type "String"
	  param in name "annotations" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7136155 "newMethod"
	public return_type class_ref 170651 // Method
	nparams 11
	  param inout name "declaringClass" type class_ref 164635 // Class
	  param in name "name" explicit_type "String"
	  param inout name "parameterTypes" type class_ref 164635 // Class
	  param inout name "returnType" type class_ref 164635 // Class
	  param inout name "checkedExceptions" type class_ref 164635 // Class
	  param in name "modifiers" explicit_type "int"
	  param in name "slot" explicit_type "int"
	  param in name "signature" explicit_type "String"
	  param in name "annotations" explicit_type "byte"
	  param in name "parameterAnnotations" explicit_type "byte"
	  param in name "annotationDefault" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8}[] ${p8}, ${t9}[] ${p9}, ${t10}[] ${p10}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7136283 "newConstructor"
	public return_type class_ref 218395 // Constructor
	nparams 8
	  param inout name "declaringClass" type class_ref 164635 // Class
	  param inout name "parameterTypes" type class_ref 164635 // Class
	  param inout name "checkedExceptions" type class_ref 164635 // Class
	  param in name "modifiers" explicit_type "int"
	  param in name "slot" explicit_type "int"
	  param in name "signature" explicit_type "String"
	  param in name "annotations" explicit_type "byte"
	  param in name "parameterAnnotations" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}, ${t7}[] ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7136411 "getMethodAccessor"
	public explicit_return_type "MethodAccessor"
	nparams 1
	  param inout name "m" type class_ref 170651 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7136539 "setMethodAccessor"
	public explicit_return_type "void"
	nparams 2
	  param inout name "m" type class_ref 170651 // Method
	  param inout name "accessor" explicit_type "MethodAccessor"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7136667 "getConstructorAccessor"
	public explicit_return_type "ConstructorAccessor"
	nparams 1
	  param inout name "c" type class_ref 218395 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7136795 "setConstructorAccessor"
	public explicit_return_type "void"
	nparams 2
	  param inout name "c" type class_ref 218395 // Constructor
	  param inout name "accessor" explicit_type "ConstructorAccessor"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7136923 "getConstructorSlot"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 218395 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7137051 "getConstructorSignature"
	public explicit_return_type "String"
	nparams 1
	  param inout name "c" type class_ref 218395 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7137179 "getConstructorAnnotations"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "c" type class_ref 218395 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7137307 "getConstructorParameterAnnotations"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "c" type class_ref 218395 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7137435 "copyMethod"
	public return_type class_ref 170651 // Method
	nparams 1
	  param inout name "arg" type class_ref 170651 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Copying routines, needed to quickly fabricate new Field,
 Method, and Constructor objects from templates"
      end

      operation 7137563 "copyField"
	public return_type class_ref 220443 // Field
	nparams 1
	  param inout name "arg" type class_ref 220443 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7137691 "copyConstructor"
	public return_type class_ref 218395 // Constructor
	nparams 1
	  param inout name "arg" type class_ref 218395 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 925083 "ReflectPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The Permission class for reflective operations.  A
ReflectPermission is a <em>named permission</em> and has no
actions.  The only name currently defined is <tt>suppressAccessChecks</tt>,
which allows suppressing the standard Java language access checks
-- for public, default (package) access, protected, and private
members -- performed by reflected objects at their point of use.
<P>
The following table
provides a summary description of what the permission allows,
and discusses the risks of granting code the permission.
<P>

<table border=1 cellpadding=5 summary=\"Table shows permission target name, what the permission allows, and associated risks\">
<tr>
<th>Permission Target Name</th>
<th>What the Permission Allows</th>
<th>Risks of Allowing this Permission</th>
</tr>

<tr>
  <td>suppressAccessChecks</td>
  <td>ability to access
fields and invoke methods in a class. Note that this includes
not only public, but protected and private fields and methods as well.</td>
  <td>This is dangerous in that information (possibly confidential) and
methods normally unavailable would be accessible to malicious code.</td>
</tr>

</table>

@see java.security.Permission
@see java.security.BasicPermission
@see AccessibleObject
@see Field#get
@see Field#set
@see Method#invoke
@see Constructor#newInstance

@since 1.2"
      classrelation 1803419 // <generalisation>
	relation 1803419 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1803419 // <generalisation>
	  b parent class_ref 285083 // BasicPermission
      end

      attribute 2754971 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7412737110241507485L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7137819 "ReflectPermission"
	public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ReflectPermission with the specified name.

@param name the name of the ReflectPermission

@throws  NullPointerException
         If <tt>name</tt> is <tt>null</tt>

@throws  IllegalArgumentException
         If <tt>name</tt> is empty"
      end

      operation 7137947 "ReflectPermission"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "actions" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ReflectPermission with the specified name and actions.
The actions should be null; they are ignored.

@param name the name of the ReflectPermission

@param actions should be null

@throws  NullPointerException
         If <tt>name</tt> is <tt>null</tt>

@throws  IllegalArgumentException
         If <tt>name</tt> is empty"
      end
    end

    class 925211 "UndeclaredThrowableException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown by a method invocation on a proxy instance if its invocation
handler's {@link InvocationHandler#invoke invoke} method throws a
checked exception (a <code>Throwable</code> that is not assignable
to <code>RuntimeException</code> or <code>Error</code>) that
is not assignable to any of the exception types declared in the
<code>throws</code> clause of the method that was invoked on the
proxy instance and dispatched to the invocation handler.

<p>An <code>UndeclaredThrowableException</code> instance contains
the undeclared checked exception that was thrown by the invocation
handler, and it can be retrieved with the
<code>getUndeclaredThrowable()</code> method.
<code>UndeclaredThrowableException</code> extends
<code>RuntimeException</code>, so it is an unchecked exception
that wraps a checked exception.

<p>As of release 1.4, this exception has been retrofitted to
conform to the general purpose exception-chaining mechanism.  The
\"undeclared checked exception that was thrown by the invocation
handler\" that may be provided at construction time and accessed via
the {@link #getUndeclaredThrowable()} method is now known as the
<i>cause</i>, and may be accessed via the {@link
Throwable#getCause()} method, as well as the aforementioned \"legacy
method.\"

@author	Peter Jones
@version	1.13, 04/02/19
@see		InvocationHandler
@since	JDK1.3"
      classrelation 1803675 // <generalisation>
	relation 1803675 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1803675 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end

      attribute 2755099 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  330127114055056639L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1803803 // undeclaredThrowable (<unidirectional association>)
	relation 1803803 --->
	  a role_name "undeclaredThrowable" private
	    comment "
the undeclared checked exception that was thrown
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1803803 // undeclaredThrowable (<unidirectional association>)
	  b parent class_ref 164251 // Throwable
      end

      operation 7138459 "UndeclaredThrowableException"
	public explicit_return_type ""
	nparams 1
	  param inout name "undeclaredThrowable" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>UndeclaredThrowableException</code> with the
specified <code>Throwable</code>.

@param	undeclaredThrowable the undeclared checked exception
		that was thrown"
      end

      operation 7138587 "UndeclaredThrowableException"
	public explicit_return_type ""
	nparams 2
	  param inout name "undeclaredThrowable" type class_ref 164251 // Throwable
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>UndeclaredThrowableException</code> with the
specified <code>Throwable</code> and a detail message.

@param	undeclaredThrowable the undeclared checked exception
		that was thrown
@param	s the detail message"
      end

      operation 7138715 "getUndeclaredThrowable"
	public return_type class_ref 164251 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Throwable</code> instance wrapped in this
<code>UndeclaredThrowableException</code>, which may be <tt>null</tt>.

<p>This method predates the general-purpose exception chaining facility.
The {@link Throwable#getCause()} method is now the preferred means of
obtaining this information.

@return the undeclared checked exception that was thrown"
      end

      operation 7138843 "getCause"
	public return_type class_ref 164251 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cause of this exception (the <code>Throwable</code>
instance wrapped in this <code>UndeclaredThrowableException</code>,
which may be <tt>null</tt>).

@return  the cause of this exception.
@since   1.4"
      end
    end

    class 925339 "WildcardType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "WildcardType represents a wildcard type expression, such as
<tt>?</tt>, <tt>? extends Number</tt>, or <tt>? super Integer</tt>.

@since 1.5"
      classrelation 1803931 // <generalisation>
	relation 1803931 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1803931 // <generalisation>
	  b parent class_ref 911003 // Type
      end

      operation 7138971 "getUpperBounds"
	public return_type class_ref 911003 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>Type</tt> objects representing the  upper
bound(s) of this type variable.  Note that if no upper bound is
explicitly declared, the upper bound is <tt>Object</tt>.

<p>For each upper bound B :
<ul>
 <li>if B is a parameterized type or a type variable, it is created,
 (see {@link java.lang.reflect.ParameterizedType ParameterizedType} 
 for the details of the creation process for parameterized types).
 <li>Otherwise, B is resolved. 
</ul>

@return an array of Types representing the upper bound(s) of this 
    type variable
@throws TypeNotPresentException if any of the
    bounds refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if any of the 
    bounds refer to a parameterized type that cannot be instantiated 
    for any reason"
      end

      operation 7139099 "getLowerBounds"
	public return_type class_ref 911003 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>Type</tt> objects representing the 
lower bound(s) of this type variable.  Note that if no lower bound is
explicitly declared, the lower bound is the type of <tt>null</tt>.
In this case, a zero length array is returned.

<p>For each lower bound B :
<ul>
  <li>if B is a parameterized type or a type variable, it is created,
 (see {@link java.lang.reflect.ParameterizedType ParameterizedType} 
 for the details of the creation process for parameterized types).
  <li>Otherwise, B is resolved.
</ul>

@return an array of Types representing the lower bound(s) of this 
    type variable
@throws TypeNotPresentException if any of the
    bounds refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if any of the 
    bounds refer to a parameterized type that cannot be instantiated 
    for any reason"
      end
    end
  end

  deploymentview 138779 "reflect"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 216603 "InvocationHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 288411 // InvocationHandler
      end
      comment "@(#)InvocationHandler.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 680475 "GenericDeclaration"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 910747 // GenericDeclaration
      end
      comment "@(#)GenericDeclaration.java	1.3 04/04/20

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 680603 "Type"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 911003 // Type
      end
      comment "@(#)Type.java	1.2 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 680731 "AnnotatedElement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Annotation;
${definition}"
      associated_classes
	class_ref 911131 // AnnotatedElement
      end
      comment "@(#)AnnotatedElement.java	1.3 04/02/03

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 694299 "AccessibleObject"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import sun.reflect.ReflectionFactory;
import java.lang.annotation.Annotation;
${definition}"
      associated_classes
	class_ref 923931 // AccessibleObject
      end
      comment "@(#)AccessibleObject.java	1.26 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 694427 "Array"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 924059 // Array
      end
      comment "@(#)Array.java	1.21 04/04/20

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 694555 "Member"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 221211 // Member
      end
      comment "@(#)Member.java	1.16 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 694683 "Constructor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.reflect.ConstructorAccessor;
import sun.reflect.Reflection;
import sun.reflect.generics.repository.ConstructorRepository;
import sun.reflect.generics.factory.CoreReflectionFactory;
import sun.reflect.generics.factory.GenericsFactory;
import sun.reflect.generics.scope.ConstructorScope;
import java.lang.annotation.Annotation;
import java.util.Map;
import sun.reflect.annotation.AnnotationParser;
${definition}"
      associated_classes
	class_ref 218395 // Constructor
      end
      comment "@(#)Constructor.java	1.49 04/05/04

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 694811 "Field"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.reflect.FieldAccessor;
import sun.reflect.Reflection;
import sun.reflect.generics.repository.FieldRepository;
import sun.reflect.generics.factory.CoreReflectionFactory;
import sun.reflect.generics.factory.GenericsFactory;
import sun.reflect.generics.scope.ClassScope;
import java.lang.annotation.Annotation;
import java.util.Map;
import sun.reflect.annotation.AnnotationParser;
${definition}"
      associated_classes
	class_ref 220443 // Field
      end
      comment "@(#)Field.java	1.42 04/05/11

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 694939 "GenericArrayType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 924187 // GenericArrayType
      end
      comment "@(#)GenericArrayType.java	1.3 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 695067 "GenericSignatureFormatError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 924315 // GenericSignatureFormatError
      end
      comment "@(#)GenericSignatureFormatError.java	1.2 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 695195 "InvocationTargetException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 220187 // InvocationTargetException
      end
      comment "@(#)InvocationTargetException.java	1.19 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 695323 "MalformedParameterizedTypeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 924443 // MalformedParameterizedTypeException
      end
      comment "@(#)MalformedParameterizedTypeException.java	1.2 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 695451 "Method"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.reflect.MethodAccessor;
import sun.reflect.Reflection;
import sun.reflect.generics.repository.MethodRepository;
import sun.reflect.generics.factory.CoreReflectionFactory;
import sun.reflect.generics.factory.GenericsFactory;
import sun.reflect.generics.scope.MethodScope;
import sun.reflect.annotation.AnnotationType;
import sun.reflect.annotation.AnnotationParser;
import java.lang.annotation.Annotation;
import java.lang.annotation.AnnotationFormatError;
import java.nio.ByteBuffer;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 170651 // Method
      end
      comment "@(#)Method.java	1.50 04/06/22

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 695579 "Modifier"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import sun.reflect.LangReflectAccess;
import sun.reflect.ReflectionFactory;
${definition}"
      associated_classes
	class_ref 924571 // Modifier
      end
      comment "@(#)Modifier.java	1.27 04/02/17

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 695707 "ParameterizedType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 924699 // ParameterizedType
      end
      comment "@(#)ParameterizedType.java	1.4 04/02/06

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 695835 "Proxy"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.Reference;
import java.lang.ref.WeakReference;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import sun.misc.ProxyGenerator;
${definition}"
      associated_classes
	class_ref 289179 // Proxy
      end
      comment "@(#)Proxy.java	1.21 05/09/15

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 695963 "ReflectAccess"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.reflect.MethodAccessor;
import sun.reflect.ConstructorAccessor;
${definition}"
      associated_classes
	class_ref 924827 // ReflectAccess
      end
      comment "@(#)ReflectAccess.java	1.12 04/01/28

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 696091 "ReflectPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 925083 // ReflectPermission
      end
      comment "@(#)ReflectPermission.java	1.21 04/03/01

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 696219 "TypeVariable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 910875 // TypeVariable
      end
      comment "@(#)TypeVariable.java	1.3 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 696347 "UndeclaredThrowableException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 925211 // UndeclaredThrowableException
      end
      comment "@(#)UndeclaredThrowableException.java	1.13 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 696475 "WildcardType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 925339 // WildcardType
      end
      comment "@(#)WildcardType.java	1.3 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
