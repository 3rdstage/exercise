class BasicTransferable
!!!2535835.java!!!	BasicTransferable(in plainData : String, in htmlData : String)
	this.plainData = plainData;
	this.htmlData = htmlData;
!!!2535963.java!!!	getTransferDataFlavors() : DataFlavor
	DataFlavor[] richerFlavors = getRicherFlavors();
	int nRicher = (richerFlavors != null) ? richerFlavors.length : 0;
	int nHTML = (isHTMLSupported()) ? htmlFlavors.length : 0;
	int nPlain = (isPlainSupported()) ? plainFlavors.length: 0;
	int nString = (isPlainSupported()) ? stringFlavors.length : 0;
	int nFlavors = nRicher + nHTML + nPlain + nString;
	DataFlavor[] flavors = new DataFlavor[nFlavors];
	
	// fill in the array
	int nDone = 0;
	if (nRicher > 0) {
	    System.arraycopy(richerFlavors, 0, flavors, nDone, nRicher);
	    nDone += nRicher;
	}
	if (nHTML > 0) {
	    System.arraycopy(htmlFlavors, 0, flavors, nDone, nHTML);
	    nDone += nHTML;
	}
	if (nPlain > 0) {
	    System.arraycopy(plainFlavors, 0, flavors, nDone, nPlain);
	    nDone += nPlain;
	}
	if (nString > 0) {
	    System.arraycopy(stringFlavors, 0, flavors, nDone, nString);
	    nDone += nString;
	}
	return flavors;
!!!2536091.java!!!	isDataFlavorSupported(inout flavor : DataFlavor) : boolean
	DataFlavor[] flavors = getTransferDataFlavors();
        for (int i = 0; i < flavors.length; i++) {
	    if (flavors[i].equals(flavor)) {
	        return true;
	    }
	}
	return false;
!!!2536219.java!!!	getTransferData(inout flavor : DataFlavor) : Object
	DataFlavor[] richerFlavors = getRicherFlavors();
	if (isRicherFlavor(flavor)) {
	    return getRicherData(flavor);
	} else if (isHTMLFlavor(flavor)) {
	    String data = getHTMLData();
	    data = (data == null) ? "" : data;
	    if (String.class.equals(flavor.getRepresentationClass())) {
		return data;
	    } else if (Reader.class.equals(flavor.getRepresentationClass())) {
		return new StringReader(data);
	    } else if (InputStream.class.equals(flavor.getRepresentationClass())) {
		return new StringBufferInputStream(data);
	    }
	    // fall through to unsupported
	} else if (isPlainFlavor(flavor)) {
	    String data = getPlainData();
	    data = (data == null) ? "" : data;
	    if (String.class.equals(flavor.getRepresentationClass())) {
		return data;
	    } else if (Reader.class.equals(flavor.getRepresentationClass())) {
		return new StringReader(data);
	    } else if (InputStream.class.equals(flavor.getRepresentationClass())) {
		return new StringBufferInputStream(data);
	    }
	    // fall through to unsupported

	} else if (isStringFlavor(flavor)) {
	    String data = getPlainData();
	    data = (data == null) ? "" : data;
	    return data;
	}
	throw new UnsupportedFlavorException(flavor);
!!!2536347.java!!!	isRicherFlavor(inout flavor : DataFlavor) : boolean
	DataFlavor[] richerFlavors = getRicherFlavors();
	int nFlavors = (richerFlavors != null) ? richerFlavors.length : 0;
	for (int i = 0; i < nFlavors; i++) {
	    if (richerFlavors[i].equals(flavor)) {
		return true;
	    }
	}
	return false;
!!!2536475.java!!!	getRicherFlavors() : DataFlavor
	return null;
!!!2536603.java!!!	getRicherData(inout flavor : DataFlavor) : Object
	return null;
!!!2536731.java!!!	isHTMLFlavor(inout flavor : DataFlavor) : boolean
	DataFlavor[] flavors = htmlFlavors;
        for (int i = 0; i < flavors.length; i++) {
	    if (flavors[i].equals(flavor)) {
	        return true;
	    }
	}
	return false;
!!!2536859.java!!!	isHTMLSupported() : boolean
	return htmlData != null;
!!!2536987.java!!!	getHTMLData() : String
	return htmlData;
!!!2537115.java!!!	isPlainFlavor(inout flavor : DataFlavor) : boolean
	DataFlavor[] flavors = plainFlavors;
        for (int i = 0; i < flavors.length; i++) {
	    if (flavors[i].equals(flavor)) {
	        return true;
	    }
	}
	return false;
!!!2537243.java!!!	isPlainSupported() : boolean
	return plainData != null;
!!!2537371.java!!!	getPlainData() : String
	return plainData;
!!!2537499.java!!!	isStringFlavor(inout flavor : DataFlavor) : boolean
	DataFlavor[] flavors = stringFlavors;
        for (int i = 0; i < flavors.length; i++) {
	    if (flavors[i].equals(flavor)) {
	        return true;
	    }
	}
	return false;
