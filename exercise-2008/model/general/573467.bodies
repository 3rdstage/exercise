class CharBuffer
!!!7311515.java!!!	CharBuffer(in mark : int, in pos : int, in lim : int, in cap : int, in hb : char, in offset : int)

	super(mark, pos, lim, cap);
	this.hb = hb;
	this.offset = offset;
!!!7311643.java!!!	CharBuffer(in mark : int, in pos : int, in lim : int, in cap : int)
	// package-private
	this(mark, pos, lim, cap, null, 0);
!!!7311771.java!!!	allocate(in capacity : int) : CharBuffer

	if (capacity < 0)
	    throw new IllegalArgumentException();
	return new HeapCharBuffer(capacity, capacity);
!!!7311899.java!!!	wrap(in array : char, in offset : int, in length : int) : CharBuffer

	try {
	    return new HeapCharBuffer(array, offset, length);
	} catch (IllegalArgumentException x) {
	    throw new IndexOutOfBoundsException();
	}
!!!7312027.java!!!	wrap(in array : char) : CharBuffer

	return wrap(array, 0, array.length);
!!!7312155.java!!!	read(inout target : CharBuffer) : int

        // Determine the number of bytes n that can be transferred
        int targetRemaining = target.remaining();
        int remaining = remaining();
        if (remaining == 0)
            return -1;
        int n = Math.min(remaining, targetRemaining);
        int limit = limit();
        // Set source limit to prevent target overflow
        if (targetRemaining < remaining)
            limit(position() + n);
        try {
            if (n > 0)
                target.put(this);
        } finally {
            limit(limit); // restore real limit
        }
        return n;
!!!7312283.java!!!	wrap(inout csq : CharSequence, in start : int, in end : int) : CharBuffer

	try {
	    return new StringCharBuffer(csq, start, end);
	} catch (IllegalArgumentException x) {
	    throw new IndexOutOfBoundsException();
	}
!!!7312411.java!!!	wrap(inout csq : CharSequence) : CharBuffer

	return wrap(csq, 0, csq.length());
!!!7313435.java!!!	get(in dst : char, in offset : int, in length : int) : CharBuffer

	checkBounds(offset, length, dst.length);
	if (length > remaining())
	    throw new BufferUnderflowException();
	int end = offset + length;
	for (int i = offset; i < end; i++)
	    dst[i] = get();
	return this;
!!!7313563.java!!!	get(in dst : char) : CharBuffer

	return get(dst, 0, dst.length);
!!!7313691.java!!!	put(inout src : CharBuffer) : CharBuffer

	if (src == this)
	    throw new IllegalArgumentException();
	int n = src.remaining();
	if (n > remaining())
	    throw new BufferOverflowException();
	for (int i = 0; i < n; i++)
	    put(src.get());
	return this;
!!!7313819.java!!!	put(in src : char, in offset : int, in length : int) : CharBuffer

	checkBounds(offset, length, src.length);
	if (length > remaining())
	    throw new BufferOverflowException();
	int end = offset + length;
	for (int i = offset; i < end; i++)
	    this.put(src[i]);
	return this;
!!!7313947.java!!!	put(in src : char) : CharBuffer

	return put(src, 0, src.length);
!!!7314075.java!!!	put(in src : String, in start : int, in end : int) : CharBuffer

	checkBounds(start, end - start, src.length());
	for (int i = start; i < end; i++)
	    this.put(src.charAt(i));
	return this;
!!!7314203.java!!!	put(in src : String) : CharBuffer

	return put(src, 0, src.length());
!!!7314331.java!!!	hasArray() : boolean

	return (hb != null) && !isReadOnly;
!!!7314459.java!!!	array() : char

	if (hb == null)
	    throw new UnsupportedOperationException();
	if (isReadOnly)
	    throw new ReadOnlyBufferException();
	return hb;
!!!7314587.java!!!	arrayOffset() : int

	if (hb == null)
	    throw new UnsupportedOperationException();
	if (isReadOnly)
	    throw new ReadOnlyBufferException();
	return offset;
!!!7314971.java!!!	hashCode() : int

	int h = 1;
	int p = position();
	for (int i = limit() - 1; i >= p; i--)
	    h = 31 * h + (int)get(i);
	return h;
!!!7315099.java!!!	equals(inout ob : Object) : boolean

	if (!(ob instanceof CharBuffer))
	    return false;
	CharBuffer that = (CharBuffer)ob;
	if (this.remaining() != that.remaining())
	    return false;
	int p = this.position();
	for (int i = this.limit() - 1, j = that.limit() - 1; i >= p; i--, j--) {
	    char v1 = this.get(i);
	    char v2 = that.get(j);
	    if (v1 != v2) {
		if ((v1 != v1) && (v2 != v2))	// For float and double
		    continue;
		return false;
	    }
	}
	return true;
!!!7315227.java!!!	compareTo(inout that : CharBuffer) : int

	int n = this.position() + Math.min(this.remaining(), that.remaining());
	for (int i = this.position(), j = that.position(); i < n; i++, j++) {
	    char v1 = this.get(i);
	    char v2 = that.get(j);
	    if (v1 == v2)
		continue;
	    if ((v1 != v1) && (v2 != v2)) 	// For float and double
		continue;
	    if (v1 < v2)
		return -1;
	    return +1;
	}
	return this.remaining() - that.remaining();
!!!7315355.java!!!	toString() : String

	return toString(position(), limit());
!!!7315611.java!!!	length() : int

	return remaining();
!!!7315739.java!!!	charAt(in index : int) : char

        return get(position() + checkIndex(index, 1));
!!!7315995.java!!!	append(inout csq : CharSequence) : CharBuffer

	if (csq == null)
	    return put("null");
	else
	    return put(csq.toString());
!!!7316123.java!!!	append(inout csq : CharSequence, in start : int, in end : int) : CharBuffer

	CharSequence cs = (csq == null ? "null" : csq);
	return put(cs.subSequence(start, end).toString());
!!!7316251.java!!!	append(in c : char) : CharBuffer

	return put(c);
