class MultiTabbedPaneUI
!!!9605147.java!!!	getUIs() : ComponentUI
        return MultiLookAndFeel.uisToArray(uis);
!!!9605275.java!!!	tabForCoordinate(inout a : JTabbedPane, in b : int, in c : int) : int
        int returnValue = 
            ((TabbedPaneUI) (uis.elementAt(0))).tabForCoordinate(a,b,c);
        for (int i = 1; i < uis.size(); i++) {
            ((TabbedPaneUI) (uis.elementAt(i))).tabForCoordinate(a,b,c);
        }
        return returnValue;
!!!9605403.java!!!	getTabBounds(inout a : JTabbedPane, in b : int) : Rectangle
        Rectangle returnValue = 
            ((TabbedPaneUI) (uis.elementAt(0))).getTabBounds(a,b);
        for (int i = 1; i < uis.size(); i++) {
            ((TabbedPaneUI) (uis.elementAt(i))).getTabBounds(a,b);
        }
        return returnValue;
!!!9605531.java!!!	getTabRunCount(inout a : JTabbedPane) : int
        int returnValue = 
            ((TabbedPaneUI) (uis.elementAt(0))).getTabRunCount(a);
        for (int i = 1; i < uis.size(); i++) {
            ((TabbedPaneUI) (uis.elementAt(i))).getTabRunCount(a);
        }
        return returnValue;
!!!9605659.java!!!	contains(inout a : JComponent, in b : int, in c : int) : boolean
        boolean returnValue = 
            ((ComponentUI) (uis.elementAt(0))).contains(a,b,c);
        for (int i = 1; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).contains(a,b,c);
        }
        return returnValue;
!!!9605787.java!!!	update(inout a : Graphics, inout b : JComponent) : void
        for (int i = 0; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).update(a,b);
        }
!!!9605915.java!!!	createUI(inout a : JComponent) : ComponentUI
        ComponentUI mui = new MultiTabbedPaneUI();
        return MultiLookAndFeel.createUIs(mui,
                                          ((MultiTabbedPaneUI) mui).uis,
                                          a);
!!!9606043.java!!!	installUI(inout a : JComponent) : void
        for (int i = 0; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).installUI(a);
        }
!!!9606171.java!!!	uninstallUI(inout a : JComponent) : void
        for (int i = 0; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).uninstallUI(a);
        }
!!!9606299.java!!!	paint(inout a : Graphics, inout b : JComponent) : void
        for (int i = 0; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).paint(a,b);
        }
!!!9606427.java!!!	getPreferredSize(inout a : JComponent) : Dimension
        Dimension returnValue = 
            ((ComponentUI) (uis.elementAt(0))).getPreferredSize(a);
        for (int i = 1; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).getPreferredSize(a);
        }
        return returnValue;
!!!9606555.java!!!	getMinimumSize(inout a : JComponent) : Dimension
        Dimension returnValue = 
            ((ComponentUI) (uis.elementAt(0))).getMinimumSize(a);
        for (int i = 1; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).getMinimumSize(a);
        }
        return returnValue;
!!!9606683.java!!!	getMaximumSize(inout a : JComponent) : Dimension
        Dimension returnValue = 
            ((ComponentUI) (uis.elementAt(0))).getMaximumSize(a);
        for (int i = 1; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).getMaximumSize(a);
        }
        return returnValue;
!!!9606811.java!!!	getAccessibleChildrenCount(inout a : JComponent) : int
        int returnValue = 
            ((ComponentUI) (uis.elementAt(0))).getAccessibleChildrenCount(a);
        for (int i = 1; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).getAccessibleChildrenCount(a);
        }
        return returnValue;
!!!9606939.java!!!	getAccessibleChild(inout a : JComponent, in b : int) : Accessible
        Accessible returnValue = 
            ((ComponentUI) (uis.elementAt(0))).getAccessibleChild(a,b);
        for (int i = 1; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).getAccessibleChild(a,b);
        }
        return returnValue;
