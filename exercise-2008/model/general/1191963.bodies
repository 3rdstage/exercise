class MarkVector
!!!9837339.java!!!	MarkVector()
	    super();
!!!9837467.java!!!	MarkVector(in size : int)
	    super(size);
!!!9837595.java!!!	allocateArray(in len : int) : Object
	    return new MarkData[len];
!!!9837723.java!!!	getArrayLength() : int
	    MarkData[] marks = (MarkData[]) getArray();
	    return marks.length;
!!!9837851.java!!!	size() : int
	    int len = getArrayLength() - (getGapEnd() - getGapStart());
	    return len;
!!!9837979.java!!!	insertElementAt(inout m : MarkData, in index : int) : void
	    oneMark[0] = m;
	    replace(index, 0, oneMark, 1);
!!!9838107.java!!!	addElement(inout m : MarkData) : void
	    insertElementAt(m, size());
!!!9838235.java!!!	elementAt(in index : int) : MarkData
	    int g0 = getGapStart();
	    int g1 = getGapEnd();
	    MarkData[] array = (MarkData[]) getArray();
	    if (index < g0) {
		// below gap
		return array[index];
	    } else {
		// above gap
		index += g1 - g0;
		return array[index];
	    }
!!!9838363.java!!!	replaceRange(in start : int, in end : int, inout marks : Object) : void
	    int g0 = getGapStart();
	    int g1 = getGapEnd();
	    int index = start;
	    int newIndex = 0;
	    Object[] array = (Object[]) getArray();
	    if (start >= g0) {
		// Completely passed gap
		index += (g1 - g0);
		end += (g1 - g0);
	    }
	    else if (end >= g0) {
		// straddles gap
		end += (g1 - g0);
		while (index < g0) {
		    array[index++] = marks[newIndex++];
		}
		index = g1;
	    }
	    else {
		// below gap
		while (index < end) {
		    array[index++] = marks[newIndex++];
		}
	    }
	    while (index < end) {
		array[index++] = marks[newIndex++];
	    }
