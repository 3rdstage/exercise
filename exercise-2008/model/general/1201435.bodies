class StringValue
!!!9933211.java!!!	parseCssValue(in value : String) : Object
	    StringValue sv = new StringValue();
	    sv.svalue = value;
	    return sv;
!!!9933339.java!!!	fromStyleConstants(inout key : StyleConstants, inout value : Object) : Object
	    if (key == StyleConstants.Italic) {
		if (value.equals(Boolean.TRUE)) {
		    return parseCssValue("italic");
		}
		return parseCssValue("");
	    } else if (key == StyleConstants.Underline) {
		if (value.equals(Boolean.TRUE)) {
		    return parseCssValue("underline");
		} 
		return parseCssValue("");
	    } else if (key == StyleConstants.Alignment) {
		int align = ((Integer)value).intValue();
		String ta;
		switch(align) {
		case StyleConstants.ALIGN_LEFT:
		    ta = "left";
		    break;
		case StyleConstants.ALIGN_RIGHT:
		    ta = "right";
		    break;
		case StyleConstants.ALIGN_CENTER:
		    ta = "center";
		    break;
		case StyleConstants.ALIGN_JUSTIFIED:
		    ta = "justify";
		    break;
		default:
		    ta = "left";
		}
		return parseCssValue(ta);
	    } else if (key == StyleConstants.StrikeThrough) {
		if (value.equals(Boolean.TRUE)) {
		    return parseCssValue("line-through");
		} 
		return parseCssValue("");
	    } else if (key == StyleConstants.Superscript) {
		if (value.equals(Boolean.TRUE)) {
		    return parseCssValue("super");
		}
		return parseCssValue("");
	    } else if (key == StyleConstants.Subscript) {
		if (value.equals(Boolean.TRUE)) {
		    return parseCssValue("sub");
		}
		return parseCssValue("");
	    }
	    return null;
!!!9933467.java!!!	toStyleConstants(inout key : StyleConstants, inout v : View) : Object
	    if (key == StyleConstants.Italic) {
		if (svalue.indexOf("italic") >= 0) {
		    return Boolean.TRUE;
		}
		return Boolean.FALSE;
	    } else if (key == StyleConstants.Underline) {
		if (svalue.indexOf("underline") >= 0) {
		    return Boolean.TRUE;
		} 
		return Boolean.FALSE;
	    } else if (key == StyleConstants.Alignment) {
		if (svalue.equals("right")) {
		    return new Integer(StyleConstants.ALIGN_RIGHT);
		} else if (svalue.equals("center")) {
		    return new Integer(StyleConstants.ALIGN_CENTER);
		} else if  (svalue.equals("justify")) {
		    return new Integer(StyleConstants.ALIGN_JUSTIFIED);
		}
		return new Integer(StyleConstants.ALIGN_LEFT);
	    } else if (key == StyleConstants.StrikeThrough) {
		if (svalue.indexOf("line-through") >= 0) {
		    return Boolean.TRUE;
		} 
		return Boolean.FALSE;
	    } else if (key == StyleConstants.Superscript) {
		if (svalue.indexOf("super") >= 0) {
		    return Boolean.TRUE;
		} 
		return Boolean.FALSE;
	    } else if (key == StyleConstants.Subscript) {
		if (svalue.indexOf("sub") >= 0) {
		    return Boolean.TRUE;
		} 
		return Boolean.FALSE;
	    }
	    return null;
!!!9933595.java!!!	isItalic() : boolean
	    return (svalue.indexOf("italic") != -1);
!!!9933723.java!!!	isStrike() : boolean
	    return (svalue.indexOf("line-through") != -1);
!!!9933851.java!!!	isUnderline() : boolean
	    return (svalue.indexOf("underline") != -1);
!!!9933979.java!!!	isSub() : boolean
	    return (svalue.indexOf("sub") != -1);
!!!9934107.java!!!	isSup() : boolean
	    return (svalue.indexOf("sup") != -1);
