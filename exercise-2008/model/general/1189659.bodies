class AbstractWriter
!!!9806619.java!!!	AbstractWriter(inout w : Writer, inout doc : Document)
	this(w, doc, 0, doc.getLength());
!!!9806747.java!!!	AbstractWriter(inout w : Writer, inout doc : Document, in pos : int, in len : int)
	this.doc = doc;
	it = new ElementIterator(doc.getDefaultRootElement());
	out = w;
	startOffset = pos;
	endOffset = pos + len;
	Object docNewline = doc.getProperty(DefaultEditorKit.
				       EndOfLineStringProperty);
	if (docNewline instanceof String) {
	    setLineSeparator((String)docNewline);
	}
	else {
	    String newline = null;
	    try {
		newline = System.getProperty("line.separator");
	    } catch (SecurityException se) {}
	    if (newline == null) {
		// Should not get here, but if we do it means we could not
		// find a newline string, use \n in this case.
		newline = "\n";
	    }
	    setLineSeparator(newline);
	}
	canWrapLines = true;
!!!9806875.java!!!	AbstractWriter(inout w : Writer, inout root : Element)
	this(w, root, 0, root.getEndOffset());
!!!9807003.java!!!	AbstractWriter(inout w : Writer, inout root : Element, in pos : int, in len : int)
	this.doc = root.getDocument();
	it = new ElementIterator(root);
	out = w;
	startOffset = pos;
	endOffset = pos + len;
	canWrapLines = true;
!!!9807131.java!!!	getStartOffset() : int
	return startOffset;
!!!9807259.java!!!	getEndOffset() : int
	return endOffset;
!!!9807387.java!!!	getElementIterator() : ElementIterator
	return it;
!!!9807515.java!!!	getWriter() : Writer
	return out;
!!!9807643.java!!!	getDocument() : Document
	return doc;
!!!9807771.java!!!	inRange(inout next : Element) : boolean
	int startOffset = getStartOffset();
	int endOffset = getEndOffset();
	if ((next.getStartOffset() >= startOffset && 
	     next.getStartOffset()  < endOffset) ||
	    (startOffset >= next.getStartOffset() &&
	     startOffset < next.getEndOffset())) {
	    return true;
	}
	return false;
!!!9808027.java!!!	getText(inout elem : Element) : String
	return doc.getText(elem.getStartOffset(),
			   elem.getEndOffset() - elem.getStartOffset());
!!!9808155.java!!!	text(inout elem : Element) : void
	int start = Math.max(getStartOffset(), elem.getStartOffset());
	int end = Math.min(getEndOffset(), elem.getEndOffset());
	if (start < end) {
	    if (segment == null) {
		segment = new Segment();
	    }
	    getDocument().getText(start, end - start, segment);
	    if (segment.count > 0) {
		write(segment.array, segment.offset, segment.count);
	    }
	}
!!!9808283.java!!!	setLineLength(in l : int) : void
	maxLineLength = l;
!!!9808411.java!!!	getLineLength() : int
	return maxLineLength;
!!!9808539.java!!!	setCurrentLineLength(in length : int) : void
	currLength = length;
	isLineEmpty = (currLength == 0);
!!!9808667.java!!!	getCurrentLineLength() : int
	return currLength;
!!!9808795.java!!!	isLineEmpty() : boolean
	return isLineEmpty;
!!!9808923.java!!!	setCanWrapLines(inout newValue : boolean) : void
	canWrapLines = newValue;
!!!9809051.java!!!	getCanWrapLines() : boolean
	return canWrapLines;
!!!9809179.java!!!	setIndentSpace(in space : int) : void
	indentSpace = space;
!!!9809307.java!!!	getIndentSpace() : int
	return indentSpace;
!!!9809435.java!!!	setLineSeparator(in value : String) : void
	lineSeparator = value;
!!!9809563.java!!!	getLineSeparator() : String
	return lineSeparator;
!!!9809691.java!!!	incrIndent() : void
	// Only increment to a certain point.
	if (offsetIndent > 0) {
	    offsetIndent++;
	}
	else {
	    if (++indentLevel * getIndentSpace() >= getLineLength()) {
		offsetIndent++;
		--indentLevel;
	    }
	}
!!!9809819.java!!!	decrIndent() : void
	if (offsetIndent > 0) {
	    --offsetIndent;
	}
	else {
	    indentLevel--;
	}
!!!9809947.java!!!	getIndentLevel() : int
	return indentLevel;
!!!9810075.java!!!	indent() : void
	int max = getIndentLevel() * getIndentSpace();
	if (indentChars == null || max > indentChars.length) {
	    indentChars = new char[max];
	    for (int counter = 0; counter < max; counter++) {
		indentChars[counter] = ' ';
	    }
	}
	int length = getCurrentLineLength();
	boolean wasEmpty = isLineEmpty();
	output(indentChars, 0, max);
	if (wasEmpty && length == 0) {
	    isLineEmpty = true;
	}
!!!9810203.java!!!	write(in ch : char) : void
	if (tempChars == null) {
	    tempChars = new char[128];
	}
	tempChars[0] = ch;
	write(tempChars, 0, 1);
!!!9810331.java!!!	write(in content : String) : void
	if (content == null) {
	    return;
	}
	int size = content.length();
	if (tempChars == null || tempChars.length < size) {
	    tempChars = new char[size];
	}
	content.getChars(0, size, tempChars, 0);
	write(tempChars, 0, size);
!!!9810459.java!!!	writeLineSeparator() : void
	String newline = getLineSeparator();
	int length = newline.length();
	if (newlineChars == null || newlineChars.length < length) {
	    newlineChars = new char[length];
	}
	newline.getChars(0, length, newlineChars, 0);
	output(newlineChars, 0, length);
	setCurrentLineLength(0);
!!!9810587.java!!!	write(in chars : char, in startIndex : int, in length : int) : void
	if (!getCanWrapLines()) {
	    // We can not break string, just track if a newline
	    // is in it.
	    int lastIndex = startIndex;
	    int endIndex = startIndex + length;
	    int newlineIndex = indexOf(chars, NEWLINE, startIndex, endIndex);
	    while (newlineIndex != -1) {
		if (newlineIndex > lastIndex) {
		    output(chars, lastIndex, newlineIndex - lastIndex);
		}
		writeLineSeparator();
		lastIndex = newlineIndex + 1;
		newlineIndex = indexOf(chars, '\n', lastIndex, endIndex);
	    }
	    if (lastIndex < endIndex) {
		output(chars, lastIndex, endIndex - lastIndex);
	    }
	}
	else {
	    // We can break chars if the length exceeds maxLength.
	    int lastIndex = startIndex;
	    int endIndex = startIndex + length;
	    int lineLength = getCurrentLineLength();
	    int maxLength = getLineLength();

	    while (lastIndex < endIndex) {
		int newlineIndex = indexOf(chars, NEWLINE, lastIndex,
					   endIndex);
		boolean needsNewline = false;
                boolean forceNewLine = false;

		lineLength = getCurrentLineLength();
		if (newlineIndex != -1 && (lineLength +
			      (newlineIndex - lastIndex)) < maxLength) {
		    if (newlineIndex > lastIndex) {
			output(chars, lastIndex, newlineIndex - lastIndex);
		    }
		    lastIndex = newlineIndex + 1;
                    forceNewLine = true;
		}
		else if (newlineIndex == -1 && (lineLength +
				(endIndex - lastIndex)) < maxLength) {
		    if (endIndex > lastIndex) {
			output(chars, lastIndex, endIndex - lastIndex);
		    }
		    lastIndex = endIndex;
		}
		else {
		    // Need to break chars, find a place to split chars at,
		    // from lastIndex to endIndex,
		    // or maxLength - lineLength whichever is smaller
		    int breakPoint = -1;
		    int maxBreak = Math.min(endIndex - lastIndex,
					    maxLength - lineLength - 1);
		    int counter = 0;
		    while (counter < maxBreak) {
			if (Character.isWhitespace(chars[counter +
							lastIndex])) {
			    breakPoint = counter;
			}
			counter++;
		    }
		    if (breakPoint != -1) {
			// Found a place to break at.
			breakPoint += lastIndex + 1;
			output(chars, lastIndex, breakPoint - lastIndex);
			lastIndex = breakPoint;
                        needsNewline = true;
		    }
		    else {
			// No where good to break.

                        // find the next whitespace, or write out the
                        // whole string.
			    // maxBreak will be negative if current line too
			    // long.
			    counter = Math.max(0, maxBreak);
			    maxBreak = endIndex - lastIndex;
			    while (counter < maxBreak) {
				if (Character.isWhitespace(chars[counter +
								lastIndex])) {
				    breakPoint = counter;
				    break;
				}
				counter++;
			    }
			    if (breakPoint == -1) {
				output(chars, lastIndex, endIndex - lastIndex);
				breakPoint = endIndex;
			    }
			    else {
				breakPoint += lastIndex;
				if (chars[breakPoint] == NEWLINE) {
				    output(chars, lastIndex, breakPoint++ -
					   lastIndex);
                                forceNewLine = true;
				}
				else {
				    output(chars, lastIndex, ++breakPoint -
					      lastIndex);
                                needsNewline = true;
				}
			    }
			    lastIndex = breakPoint;
			}
		    }
		if (forceNewLine || needsNewline || lastIndex < endIndex) {
		    writeLineSeparator();
                    if (lastIndex < endIndex || !forceNewLine) {
			indent();
		    }
		}
	    }
	}
!!!9810715.java!!!	writeAttributes(inout attr : AttributeSet) : void

	Enumeration names = attr.getAttributeNames();
	while (names.hasMoreElements()) {
	    Object name = names.nextElement();
	    write(" " + name + "=" + attr.getAttribute(name));
	}
!!!9810843.java!!!	output(in content : char, in start : int, in length : int) : void
	getWriter().write(content, start, length);
	setCurrentLineLength(getCurrentLineLength() + length);
!!!9810971.java!!!	indexOf(in chars : char, in sChar : char, in startIndex : int, in endIndex : int) : int
	while(startIndex < endIndex) {
	    if (chars[startIndex] == sChar) {
		return startIndex;
	    }
	    startIndex++;
	}
	return -1;
