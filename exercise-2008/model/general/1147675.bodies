class NavigateLinkAction
!!!9400987.java!!!	NavigateLinkAction(in actionName : String)
            super(actionName);
	    if ("previous-link-action".equals(actionName)) {
		focusBack = true;
	    }
!!!9401115.java!!!	caretUpdate(inout e : CaretEvent) : void
	    if (foundLink) {
		foundLink = false;
		// TODO: The AccessibleContext for the editor should register
		// as a listener for CaretEvents and forward the events to
		// assistive technologies listening for such events.
		Object src = e.getSource();
		if (src instanceof JTextComponent) {
		    ((JTextComponent)src).getAccessibleContext().firePropertyChange(
                        AccessibleContext.ACCESSIBLE_HYPERTEXT_OFFSET,
		        new Integer(prevHypertextOffset),
		        new Integer(e.getDot()));
		}
	    }
!!!9401243.java!!!	actionPerformed(inout e : ActionEvent) : void
            JTextComponent comp = getTextComponent(e);
	    if (comp == null || comp.isEditable()) {
		return;
	    }
	    Document doc = comp.getDocument();
	    if (doc == null) {
		return;
	    }
	    // TODO: Should start successive iterations from the
	    // current caret position.
	    ElementIterator ei = new ElementIterator(doc);

	    int currentOffset = comp.getCaretPosition();
	    int prevStartOffset = -1;
	    int prevEndOffset = -1;
		
	    // highlight the next link or object after the current caret position
	    Element nextElement = null;
	    while ((nextElement = ei.next()) != null) {
		String name = nextElement.getName();
		AttributeSet attr = nextElement.getAttributes();
		
		Object href = getAttrValue(attr, HTML.Attribute.HREF);
		if (!(name.equals(HTML.Tag.OBJECT.toString())) && href == null) {
		    continue;
		}
		
		int elementOffset = nextElement.getStartOffset();
		if (focusBack) {
		    if (elementOffset >= currentOffset &&
			prevStartOffset >= 0) {

			foundLink = true;
			comp.setCaretPosition(prevStartOffset);
			moveCaretPosition(comp, prevStartOffset, 
					  prevEndOffset);
			prevHypertextOffset = prevStartOffset;
			return;
		    }
		} else { // focus forward
		    if (elementOffset > currentOffset) {

			foundLink = true;
			comp.setCaretPosition(elementOffset);
			moveCaretPosition(comp, elementOffset,
					  nextElement.getEndOffset());
			prevHypertextOffset = elementOffset;
			return;
		    } 
		}
		prevStartOffset = nextElement.getStartOffset();
		prevEndOffset = nextElement.getEndOffset();
	    }
            if (focusBack && prevStartOffset >= 0) {
                foundLink = true;
                comp.setCaretPosition(prevStartOffset);
                moveCaretPosition(comp, prevStartOffset, 
                                  prevEndOffset);
                prevHypertextOffset = prevStartOffset;
                return;
            }
!!!9401371.java!!!	moveCaretPosition(inout comp : JTextComponent, in mark : int, in dot : int) : void
	    Highlighter h = comp.getHighlighter();
	    if (h != null) {
		int p0 = Math.min(dot, mark);
		int p1 = Math.max(dot, mark);
		try {
		    if (selectionTag != null) {
			h.changeHighlight(selectionTag, p0, p1);
		    } else {
			Highlighter.HighlightPainter p = focusPainter;
			selectionTag = h.addHighlight(p0, p1, p);
		    }
		} catch (BadLocationException e) {
		}
	    }
