class List
!!!6299803.java!!!	List()
	this(0, false);
!!!6299931.java!!!	List(in rows : int)
    	this(rows, false);
!!!6300059.java!!!	List(in rows : int, inout multipleMode : boolean)
        GraphicsEnvironment.checkHeadless();
	this.rows = (rows != 0) ? rows : DEFAULT_VISIBLE_ROWS;
	this.multipleMode = multipleMode;
!!!6300187.java!!!	constructComponentName() : String
        synchronized (getClass()) {
	    return base + nameCounter++;
	}
!!!6300315.java!!!	addNotify() : void
        synchronized (getTreeLock()) {
	    if (peer == null)
	        peer = getToolkit().createList(this);
	    super.addNotify();
	}
!!!6300443.java!!!	removeNotify() : void
    	synchronized (getTreeLock()) {
	    ListPeer peer = (ListPeer)this.peer;
	    if (peer != null) {
		selected = peer.getSelectedIndexes();
	    }
	    super.removeNotify();
	}
!!!6300571.java!!!	getItemCount() : int
	return countItems();
!!!6300699.java!!!	countItems() : int
	return items.size();
!!!6300827.java!!!	getItem(in index : int) : String
	return getItemImpl(index);
!!!6300955.java!!!	getItemImpl(in index : int) : String
	return (String)items.elementAt(index);
!!!6301083.java!!!	getItems() : String
	String itemCopies[] = new String[items.size()];
    	items.copyInto(itemCopies);
	return itemCopies;
!!!6301211.java!!!	add(in item : String) : void
	addItem(item);
!!!6301339.java!!!	addItem(in item : String) : void
	addItem(item, -1);
!!!6301467.java!!!	add(in item : String, in index : int) : void
	addItem(item, index);
!!!6301595.java!!!	addItem(in item : String, in index : int) : void
	if (index < -1 || index >= items.size()) {
	    index = -1;
	}

        if (item == null) {
            item = "";
        }

	if (index == -1) {
	    items.addElement(item);
	} else {
	    items.insertElementAt(item, index);
	}

	ListPeer peer = (ListPeer)this.peer;
	if (peer != null) {
	    peer.addItem(item, index);
	}
!!!6301723.java!!!	replaceItem(in newValue : String, in index : int) : void
	remove(index);
	add(newValue, index);
!!!6301851.java!!!	removeAll() : void
	clear();
!!!6301979.java!!!	clear() : void
	ListPeer peer = (ListPeer)this.peer;
	if (peer != null) {
	    peer.clear();
	}
	items = new Vector();
	selected = new int[0];
!!!6302107.java!!!	remove(in item : String) : void
    	int index = items.indexOf(item);
    	if (index < 0) {
	    throw new IllegalArgumentException("item " + item +
					       " not found in list");
	} else {
	    remove(index);
	}
!!!6302235.java!!!	remove(in position : int) : void
	delItem(position);
!!!6302363.java!!!	delItem(in position : int) : void
	delItems(position, position);
!!!6302491.java!!!	getSelectedIndex() : int
	int sel[] = getSelectedIndexes();
	return (sel.length == 1) ? sel[0] : -1;
!!!6302619.java!!!	getSelectedIndexes() : int
	ListPeer peer = (ListPeer)this.peer;
	if (peer != null) {
	    selected = ((ListPeer)peer).getSelectedIndexes();
	}
	return (int[])selected.clone();
!!!6302747.java!!!	getSelectedItem() : String
	int index = getSelectedIndex();
	return (index < 0) ? null : getItem(index);
!!!6302875.java!!!	getSelectedItems() : String
	int sel[] = getSelectedIndexes();
	String str[] = new String[sel.length];
	for (int i = 0 ; i < sel.length ; i++) {
	    str[i] = getItem(sel[i]);
	}
	return str;
!!!6303003.java!!!	getSelectedObjects() : Object
        return getSelectedItems();
!!!6303131.java!!!	select(in index : int) : void
        // Bug #4059614: select can't be synchronized while calling the peer, 
        // because it is called from the Window Thread.  It is sufficient to 
        // synchronize the code that manipulates 'selected' except for the 
        // case where the peer changes.  To handle this case, we simply 
        // repeat the selection process. 
         
        ListPeer peer; 
        do { 
            peer = (ListPeer)this.peer; 
            if (peer != null) { 
                peer.select(index); 
                return; 
            } 
             
            synchronized(this) 
            { 
                boolean alreadySelected = false; 
 
                for (int i = 0 ; i < selected.length ; i++) { 
                    if (selected[i] == index) { 
                        alreadySelected = true; 
                        break; 
                    } 
                } 
 
                if (!alreadySelected) { 
                    if (!multipleMode) { 
                        selected = new int[1]; 
                        selected[0] = index; 
                    } else { 
                        int newsel[] = new int[selected.length + 1]; 
                        System.arraycopy(selected, 0, newsel, 0, 
                                         selected.length); 
                        newsel[selected.length] = index; 
                        selected = newsel; 
                    } 
                } 
            } 
        } while (peer != this.peer); 
!!!6303259.java!!!	deselect(in index : int) : void
	ListPeer peer = (ListPeer)this.peer;
	if (peer != null) {
	    peer.deselect(index);
	}

	for (int i = 0 ; i < selected.length ; i++) {
	    if (selected[i] == index) {
		int newsel[] = new int[selected.length - 1];
		System.arraycopy(selected, 0, newsel, 0, i);
		System.arraycopy(selected, i+1, newsel, i, selected.length - (i+1));
		selected = newsel;
		return;
	    }
	}
!!!6303387.java!!!	isIndexSelected(in index : int) : boolean
	return isSelected(index);
!!!6303515.java!!!	isSelected(in index : int) : boolean
	int sel[] = getSelectedIndexes();
	for (int i = 0 ; i < sel.length ; i++) {
	    if (sel[i] == index) {
		return true;
	    }
	}
	return false;
!!!6303643.java!!!	getRows() : int
	return rows;
!!!6303771.java!!!	isMultipleMode() : boolean
	return allowsMultipleSelections();
!!!6303899.java!!!	allowsMultipleSelections() : boolean
	return multipleMode;
!!!6304027.java!!!	setMultipleMode(inout b : boolean) : void
    	setMultipleSelections(b);
!!!6304155.java!!!	setMultipleSelections(inout b : boolean) : void
	if (b != multipleMode) {
	    multipleMode = b;
	    ListPeer peer = (ListPeer)this.peer;
	    if (peer != null) {
		peer.setMultipleSelections(b);
	    }
	}
!!!6304283.java!!!	getVisibleIndex() : int
	return visibleIndex;
!!!6304411.java!!!	makeVisible(in index : int) : void
	visibleIndex = index;
	ListPeer peer = (ListPeer)this.peer;
	if (peer != null) {
	    peer.makeVisible(index);
	}
!!!6304539.java!!!	getPreferredSize(in rows : int) : Dimension
	return preferredSize(rows);
!!!6304667.java!!!	preferredSize(in rows : int) : Dimension
        synchronized (getTreeLock()) {
	    ListPeer peer = (ListPeer)this.peer;
	    return (peer != null) ?
		       peer.preferredSize(rows) :
		       super.preferredSize();
        }
!!!6304795.java!!!	getPreferredSize() : Dimension
	return preferredSize();
!!!6304923.java!!!	preferredSize() : Dimension
        synchronized (getTreeLock()) {
	    return (rows > 0) ?
		       preferredSize(rows) :
		       super.preferredSize();
        }
!!!6305051.java!!!	getMinimumSize(in rows : int) : Dimension
	return minimumSize(rows);
!!!6305179.java!!!	minimumSize(in rows : int) : Dimension
        synchronized (getTreeLock()) {
	    ListPeer peer = (ListPeer)this.peer;
	    return (peer != null) ?
		       peer.minimumSize(rows) :
		       super.minimumSize();
        }
!!!6305307.java!!!	getMinimumSize() : Dimension
	return minimumSize();
!!!6305435.java!!!	minimumSize() : Dimension
        synchronized (getTreeLock()) {
	    return (rows > 0) ? minimumSize(rows) : super.minimumSize();
        }
!!!6305563.java!!!	addItemListener(inout l : ItemListener) : void
	if (l == null) {
	    return;
	}
        itemListener = AWTEventMulticaster.add(itemListener, l);
        newEventsOnly = true;
!!!6305691.java!!!	removeItemListener(inout l : ItemListener) : void
	if (l == null) {
	    return;
	}
        itemListener = AWTEventMulticaster.remove(itemListener, l);
!!!6305819.java!!!	getItemListeners() : ItemListener
        return (ItemListener[])(getListeners(ItemListener.class)); 
!!!6305947.java!!!	addActionListener(inout l : ActionListener) : void
	if (l == null) {
	    return;
	}
	actionListener = AWTEventMulticaster.add(actionListener, l);
        newEventsOnly = true;
!!!6306075.java!!!	removeActionListener(inout l : ActionListener) : void
	if (l == null) {
	    return;
	}
	actionListener = AWTEventMulticaster.remove(actionListener, l);
!!!6306203.java!!!	getActionListeners() : ActionListener
        return (ActionListener[])(getListeners(ActionListener.class));
!!!6306331.java!!!	getListeners(inout listenerType : Class) : T
 
	EventListener l = null; 
	if  (listenerType == ActionListener.class) { 
	    l = actionListener;
	} else if  (listenerType == ItemListener.class) { 
	    l = itemListener;
	} else {
	    return super.getListeners(listenerType);
	}
	return AWTEventMulticaster.getListeners(l, listenerType);
!!!6306459.java!!!	eventEnabled(inout e : AWTEvent) : boolean
        switch(e.id) {
          case ActionEvent.ACTION_PERFORMED:
            if ((eventMask & AWTEvent.ACTION_EVENT_MASK) != 0 ||
                actionListener != null) {
                return true;
            }
            return false;
          case ItemEvent.ITEM_STATE_CHANGED:
            if ((eventMask & AWTEvent.ITEM_EVENT_MASK) != 0 ||
                itemListener != null) {
                return true;
            }
            return false;
          default:
            break;
        }
        return super.eventEnabled(e);
!!!6306587.java!!!	processEvent(inout e : AWTEvent) : void
        if (e instanceof ItemEvent) {
            processItemEvent((ItemEvent)e);
            return;
        } else if (e instanceof ActionEvent) {
            processActionEvent((ActionEvent)e);
            return;
        }
	super.processEvent(e);
!!!6306715.java!!!	processItemEvent(inout e : ItemEvent) : void
        ItemListener listener = itemListener;
        if (listener != null) {
            listener.itemStateChanged(e);
        }
!!!6306843.java!!!	processActionEvent(inout e : ActionEvent) : void
        ActionListener listener = actionListener;
        if (listener != null) {
            listener.actionPerformed(e);
        }
!!!6306971.java!!!	paramString() : String
	return super.paramString() + ",selected=" + getSelectedItem();
!!!6307099.java!!!	delItems(in start : int, in end : int) : void
	for (int i = end; i >= start; i--) {
	    items.removeElementAt(i);
	}
	ListPeer peer = (ListPeer)this.peer;
	if (peer != null) {
	    peer.delItems(start, end);
	}
!!!6307227.java!!!	writeObject(inout s : ObjectOutputStream) : void
      synchronized (this) {
	ListPeer peer = (ListPeer)this.peer;
	if (peer != null) {
	  selected = peer.getSelectedIndexes();
	}
      }
      s.defaultWriteObject();

      AWTEventMulticaster.save(s, itemListenerK, itemListener);
      AWTEventMulticaster.save(s, actionListenerK, actionListener);
      s.writeObject(null);
!!!6307355.java!!!	readObject(inout s : ObjectInputStream) : void
      GraphicsEnvironment.checkHeadless();
      s.defaultReadObject();

      Object keyOrNull;
      while(null != (keyOrNull = s.readObject())) {
	String key = ((String)keyOrNull).intern();

	if (itemListenerK == key)
	  addItemListener((ItemListener)(s.readObject()));

	else if (actionListenerK == key)
	  addActionListener((ActionListener)(s.readObject()));

	else // skip value for unrecognized key
	  s.readObject();
      }
!!!6307483.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleAWTList();
        }
        return accessibleContext;
