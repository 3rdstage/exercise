class CharsetEncoder
!!!7506715.java!!!	CharsetEncoder(inout cs : Charset, in averageBytesPerChar : float, in maxBytesPerChar : float, in replacement : byte)

	this.charset = cs;
	if (averageBytesPerChar <= 0.0f)
	    throw new IllegalArgumentException("Non-positive "
					       + "averageBytesPerChar");
	if (maxBytesPerChar <= 0.0f)
	    throw new IllegalArgumentException("Non-positive "
					       + "maxBytesPerChar");
	if (!Charset.atBugLevel("1.4")) {
	    if (averageBytesPerChar > maxBytesPerChar)
		throw new IllegalArgumentException("averageBytesPerChar"
						   + " exceeds "
						   + "maxBytesPerChar");
	}
	this.replacement = replacement;
	this.averageBytesPerChar = averageBytesPerChar;
	this.maxBytesPerChar = maxBytesPerChar;
	replaceWith(replacement);
!!!7506843.java!!!	CharsetEncoder(inout cs : Charset, in averageBytesPerChar : float, in maxBytesPerChar : float)

	this(cs,
	     averageBytesPerChar, maxBytesPerChar,
	     new byte[] { (byte)'?' });
!!!7506971.java!!!	charset() : Charset

	return charset;
!!!7507099.java!!!	replacement() : byte

	return replacement;
!!!7507227.java!!!	replaceWith(in newReplacement : byte) : CharsetEncoder

	if (newReplacement == null)
	    throw new IllegalArgumentException("Null replacement");
	int len = newReplacement.length;
	if (len == 0)
	    throw new IllegalArgumentException("Empty replacement");
	if (len > maxBytesPerChar)
	    throw new IllegalArgumentException("Replacement too long");

	if (!isLegalReplacement(newReplacement))
	    throw new IllegalArgumentException("Illegal replacement");

	this.replacement = newReplacement;
	implReplaceWith(newReplacement);
	return this;
!!!7507355.java!!!	implReplaceWith(in newReplacement : byte) : void

!!!7507483.java!!!	isLegalReplacement(in repl : byte) : boolean

	WeakReference wr = cachedDecoder;
	CharsetDecoder dec = null;
	if ((wr == null) || ((dec = (CharsetDecoder)wr.get()) == null)) {
	    dec = charset().newDecoder();
	    dec.onMalformedInput(CodingErrorAction.REPORT);
	    dec.onUnmappableCharacter(CodingErrorAction.REPORT);
	    cachedDecoder = new WeakReference(dec);
	} else {
	    dec.reset();
	}
	ByteBuffer bb = ByteBuffer.wrap(repl);
	// We need to perform double, not float, arithmetic; otherwise
	// we lose low order bits when src is larger than 2**24.
	CharBuffer cb = CharBuffer.allocate((int)(bb.remaining()
						  * (double)dec.maxCharsPerByte()));
	CoderResult cr = dec.decode(bb, cb, true);
	return !cr.isError();
!!!7507611.java!!!	malformedInputAction() : CodingErrorAction

	return malformedInputAction;
!!!7507739.java!!!	onMalformedInput(inout newAction : CodingErrorAction) : CharsetEncoder

	if (newAction == null)
	    throw new IllegalArgumentException("Null action");
	malformedInputAction = newAction;
	implOnMalformedInput(newAction);
	return this;
!!!7507995.java!!!	unmappableCharacterAction() : CodingErrorAction

	return unmappableCharacterAction;
!!!7508123.java!!!	onUnmappableCharacter(inout newAction : CodingErrorAction) : CharsetEncoder

	if (newAction == null)
	    throw new IllegalArgumentException("Null action");
	unmappableCharacterAction = newAction;
	implOnUnmappableCharacter(newAction);
	return this;
!!!7508379.java!!!	averageBytesPerChar() : float

	return averageBytesPerChar;
!!!7508507.java!!!	maxBytesPerChar() : float

	return maxBytesPerChar;
!!!7508635.java!!!	encode(inout in : CharBuffer, inout out : ByteBuffer, inout endOfInput : boolean) : CoderResult

	int newState = endOfInput ? ST_END : ST_CODING;
	if ((state != ST_RESET) && (state != ST_CODING)
	    && !(endOfInput && (state == ST_END)))
	    throwIllegalStateException(state, newState);
	state = newState;

	for (;;) {

	    CoderResult cr;
	    try {
		cr = encodeLoop(in, out);
	    } catch (BufferUnderflowException x) {
		throw new CoderMalfunctionError(x);
	    } catch (BufferOverflowException x) {
		throw new CoderMalfunctionError(x);
	    }

	    if (cr.isOverflow())
		return cr;

	    if (cr.isUnderflow()) {
		if (endOfInput && in.hasRemaining()) {
		    cr = CoderResult.malformedForLength(in.remaining());
		    // Fall through to malformed-input case
		} else {
		    return cr;
		}
	    }

	    CodingErrorAction action = null;
	    if (cr.isMalformed())
		action = malformedInputAction;
	    else if (cr.isUnmappable())
		action = unmappableCharacterAction;
	    else
		assert false : cr.toString();

	    if (action == CodingErrorAction.REPORT)
		return cr;

	    if (action == CodingErrorAction.REPLACE) {
		if (out.remaining() < replacement.length)
		    return CoderResult.OVERFLOW;
		out.put(replacement);
	    }

	    if ((action == CodingErrorAction.IGNORE)
		|| (action == CodingErrorAction.REPLACE)) {
		// Skip erroneous input either way
		in.position(in.position() + cr.length());
		continue;
	    }

	    assert false;
	}

!!!7508763.java!!!	flush(inout out : ByteBuffer) : CoderResult

	if (state != ST_END)
	    throwIllegalStateException(state, ST_FLUSHED);
	state = ST_FLUSHED;
	return implFlush(out);
!!!7508891.java!!!	implFlush(inout out : ByteBuffer) : CoderResult

	return CoderResult.UNDERFLOW;
!!!7509019.java!!!	reset() : CharsetEncoder

	implReset();
	state = ST_RESET;
	return this;
!!!7509403.java!!!	encode(inout in : CharBuffer) : ByteBuffer

	int n = (int)(in.remaining() * averageBytesPerChar());
	ByteBuffer out = ByteBuffer.allocate(n);

	if (n == 0)
	    return out;
	reset();
	for (;;) {
	    CoderResult cr;
	    if (in.hasRemaining())
		cr = encode(in, out, true);
	    else
		cr = flush(out);
	    if (cr.isUnderflow())
		break;
	    if (cr.isOverflow()) {
		n *= 2;
		ByteBuffer o = ByteBuffer.allocate(n);
		out.flip();
		o.put(out);
		out = o;
		continue;
	    }
	    cr.throwException();
	}
	out.flip();
	return out;
!!!7509531.java!!!	canEncode(inout cb : CharBuffer) : boolean

	if (state == ST_FLUSHED)
	    reset();
	else if (state != ST_RESET)
	    throwIllegalStateException(state, ST_CODING);
	CodingErrorAction ma = malformedInputAction();
	CodingErrorAction ua = unmappableCharacterAction();
	try {
	    onMalformedInput(CodingErrorAction.REPORT);
	    onUnmappableCharacter(CodingErrorAction.REPORT);
	    encode(cb);
	} catch (CharacterCodingException x) {
	    return false;
	} finally {
	    onMalformedInput(ma);
	    onUnmappableCharacter(ua);
	    reset();
	}
	return true;
!!!7509659.java!!!	canEncode(in c : char) : boolean

	CharBuffer cb = CharBuffer.allocate(1);
	cb.put(c);
	cb.flip();
	return canEncode(cb);
!!!7509787.java!!!	canEncode(inout cs : CharSequence) : boolean

	CharBuffer cb;
	if (cs instanceof CharBuffer)
	    cb = ((CharBuffer)cs).duplicate();
	else
	    cb = CharBuffer.wrap(cs.toString());
	return canEncode(cb);
!!!7509915.java!!!	throwIllegalStateException(in from : int, in to : int) : void

	throw new IllegalStateException("Current state = " + stateNames[from]
					+ ", new state = " + stateNames[to]);
