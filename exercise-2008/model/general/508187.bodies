class CInput
!!!3142939.java!!!	CInput(inout input : Reader)
	if (CUtility.DEBUG)
	  {
	    CUtility._assert(null != input);
	  }

	/* Initialize input stream. */
	m_input = new java.io.BufferedReader(input);

	/* Initialize buffers and index counters. */
	m_line = null;
	m_line_read = 0;
	m_line_index = 0;

	/* Initialize state variables. */
	m_eof_reached = false;
	m_line_number = 0;
	m_pushback_line = false;
!!!3143067.java!!!	getLine() : boolean
	String lineStr;
	int elem;
	
	/* Has EOF already been reached? */
	if (m_eof_reached)
	  {
	    return EOF;
	  }
	
	/* Pushback current line? */
	if (m_pushback_line)
	  {
	    m_pushback_line = false;

	    /* Check for empty line. */
	    for (elem = 0; elem < m_line_read; ++elem)
	      {
		if (false == CUtility.isspace(m_line[elem]))
		  {
		    break;
		  }
	      }

	    /* Nonempty? */
	    if (elem < m_line_read)
	      {
		m_line_index = 0;
		return NOT_EOF;
	      }
	  }

	while (true)
	  {
	    if (null == (lineStr = m_input.readLine()))
	      {
		m_eof_reached = true;
		m_line_index = 0;
		return EOF;
	      }
	    m_line = (lineStr + "\n").toCharArray();
	    m_line_read=m_line.length;
	    ++m_line_number;
	    
	    /* Check for empty lines and discard them. */
	    elem = 0;
	    while (CUtility.isspace(m_line[elem])) 
	      {
		++elem;
		if (elem == m_line_read)
		  {
		    break;
		  }
	      }
	    
	    if (elem < m_line_read)
	      {
		break;
	      }
	  }

	m_line_index = 0;
	return NOT_EOF;
