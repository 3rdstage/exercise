class FHTreeStateNode
!!!10053019.java!!!	FHTreeStateNode(inout userObject : Object, in childIndex : int, in row : int)
	    super(userObject);
	    this.childIndex = childIndex;
	    this.row = row;
!!!10053147.java!!!	setParent(inout parent : MutableTreeNode) : void
	    super.setParent(parent);
	    if(parent != null) {
		path = ((FHTreeStateNode)parent).getTreePath().
		            pathByAddingChild(getUserObject());
		addMapping(this);
	    }
!!!10053275.java!!!	remove(in childIndex : int) : void
	    FHTreeStateNode     node = (FHTreeStateNode)getChildAt(childIndex);

	    node.removeFromMapping();
	    super.remove(childIndex);
!!!10053403.java!!!	setUserObject(inout o : Object) : void
	    super.setUserObject(o);
	    if(path != null) {
		FHTreeStateNode      parent = (FHTreeStateNode)getParent();

		if(parent != null)
		    resetChildrenPaths(parent.getTreePath());
		else
		    resetChildrenPaths(null);
	    }
!!!10053531.java!!!	getChildIndex() : int
	    return childIndex;
!!!10053659.java!!!	getTreePath() : TreePath
	    return path;
!!!10053787.java!!!	getChildAtModelIndex(in index : int) : FHTreeStateNode
	    // PENDING: Make this a binary search!
	    for(int counter = getChildCount() - 1; counter >= 0; counter--)
		if(((FHTreeStateNode)getChildAt(counter)).childIndex == index)
		    return (FHTreeStateNode)getChildAt(counter);
	    return null;
!!!10053915.java!!!	isVisible() : boolean
	    FHTreeStateNode         parent = (FHTreeStateNode)getParent();

	    if(parent == null)
		return true;
	    return (parent.isExpanded() && parent.isVisible());
!!!10054043.java!!!	getRow() : int
	    return row;
!!!10054171.java!!!	getRowToModelIndex(in index : int) : int
	    FHTreeStateNode      child;
	    int                  lastRow = getRow() + 1;
	    int                  retValue = lastRow;

	    // This too could be a binary search!
	    for(int counter = 0, maxCounter = getChildCount();
		counter < maxCounter; counter++) {
		child = (FHTreeStateNode)getChildAt(counter);
		if(child.childIndex >= index) {
		    if(child.childIndex == index)
			return child.row;
		    if(counter == 0)
			return getRow() + 1 + index;
		    return child.row - (child.childIndex - index);
		}
	    }
	    // YECK!
	    return getRow() + 1 + getTotalChildCount() -
		             (childCount - index);
!!!10054299.java!!!	getTotalChildCount() : int
	    if(isExpanded()) {
		FHTreeStateNode      parent = (FHTreeStateNode)getParent();
		int                  pIndex;

		if(parent != null && (pIndex = parent.getIndex(this)) + 1 <
		   parent.getChildCount()) {
		    // This node has a created sibling, to calc total
		    // child count directly from that!
		    FHTreeStateNode  nextSibling = (FHTreeStateNode)parent.
			                   getChildAt(pIndex + 1);

		    return nextSibling.row - row -
			   (nextSibling.childIndex - childIndex);
		}
		else {
 		    int retCount = childCount;

		    for(int counter = getChildCount() - 1; counter >= 0;
			counter--) {
			retCount += ((FHTreeStateNode)getChildAt(counter))
			                          .getTotalChildCount();
		    }
		    return retCount;
		}
	    }
	    return 0;
!!!10054427.java!!!	isExpanded() : boolean
	    return isExpanded;
!!!10054555.java!!!	getVisibleLevel() : int
	    if (isRootVisible()) {
		return getLevel();
	    } else {
		return getLevel() - 1;
	    }
!!!10054683.java!!!	resetChildrenPaths(inout parentPath : TreePath) : void
	    removeMapping(this);
	    if(parentPath == null)
		path = new TreePath(getUserObject());
	    else
		path = parentPath.pathByAddingChild(getUserObject());
	    addMapping(this);
	    for(int counter = getChildCount() - 1; counter >= 0; counter--)
		((FHTreeStateNode)getChildAt(counter)).
		               resetChildrenPaths(path);
!!!10054811.java!!!	removeFromMapping() : void
	    if(path != null) {
		removeMapping(this);
		for(int counter = getChildCount() - 1; counter >= 0; counter--)
		    ((FHTreeStateNode)getChildAt(counter)).removeFromMapping();
	    }
!!!10054939.java!!!	createChildFor(inout userObject : Object) : FHTreeStateNode
	    int      newChildIndex = treeModel.getIndexOfChild
		                     (getUserObject(), userObject);

	    if(newChildIndex < 0)
		return null;

	    FHTreeStateNode     aNode;
	    FHTreeStateNode     child = createNodeForValue(userObject,
							   newChildIndex);
	    int                 childRow;

	    if(isVisible()) {
		childRow = getRowToModelIndex(newChildIndex);
	    }
	    else {
		childRow = -1;
	    }
	    child.row = childRow;
	    for(int counter = 0, maxCounter = getChildCount();
		counter < maxCounter; counter++) {
		aNode = (FHTreeStateNode)getChildAt(counter);
		if(aNode.childIndex > newChildIndex) {
		    insert(child, counter);
		    return child;
		}
	    }
	    add(child);
	    return child;
!!!10055067.java!!!	adjustRowBy(in amount : int) : void
	    row += amount;
	    if(isExpanded) {
		for(int counter = getChildCount() - 1; counter >= 0;
		    counter--)
		    ((FHTreeStateNode)getChildAt(counter)).adjustRowBy(amount);
	    }
!!!10055195.java!!!	adjustRowBy(in amount : int, in startIndex : int) : void
	    // Could check isVisible, but probably isn't worth it.
	    if(isExpanded) {
		// children following startIndex.
		for(int counter = getChildCount() - 1; counter >= startIndex;
		    counter--)
		    ((FHTreeStateNode)getChildAt(counter)).adjustRowBy(amount);
	    }
	    // Parent
	    FHTreeStateNode        parent = (FHTreeStateNode)getParent();

	    if(parent != null) {
		parent.adjustRowBy(amount, parent.getIndex(this) + 1);
	    }
!!!10055323.java!!!	didExpand() : void
	    int               nextRow = setRowAndChildren(row);
	    FHTreeStateNode   parent = (FHTreeStateNode)getParent();
	    int               childRowCount = nextRow - row - 1;

	    if(parent != null) {
		parent.adjustRowBy(childRowCount, parent.getIndex(this) + 1);
	    }
	    adjustRowCountBy(childRowCount);
!!!10055451.java!!!	setRowAndChildren(in nextRow : int) : int
	    row = nextRow;

	    if(!isExpanded())
		return row + 1;

	    int              lastRow = row + 1;
	    int              lastModelIndex = 0;
	    FHTreeStateNode  child;
	    int              maxCounter = getChildCount();

	    for(int counter = 0; counter < maxCounter; counter++) {
		child = (FHTreeStateNode)getChildAt(counter);
		lastRow += (child.childIndex - lastModelIndex);
		lastModelIndex = child.childIndex + 1;
		if(child.isExpanded) {
		    lastRow = child.setRowAndChildren(lastRow);
		}
		else {
		    child.row = lastRow++;
		}
	    }
	    return lastRow + childCount - lastModelIndex;
!!!10055579.java!!!	resetChildrenRowsFrom(in newRow : int, in childIndex : int, in modelIndex : int) : void
	    int              lastRow = newRow;
	    int              lastModelIndex = modelIndex;
	    FHTreeStateNode  node;
	    int              maxCounter = getChildCount();

	    for(int counter = childIndex; counter < maxCounter; counter++) {
		node = (FHTreeStateNode)getChildAt(counter);
		lastRow += (node.childIndex - lastModelIndex);
		lastModelIndex = node.childIndex + 1;
		if(node.isExpanded) {
		    lastRow = node.setRowAndChildren(lastRow);
		}
		else {
		    node.row = lastRow++;
		}
	    }
	    lastRow += childCount - lastModelIndex;
	    node = (FHTreeStateNode)getParent();
	    if(node != null) {
		node.resetChildrenRowsFrom(lastRow, node.getIndex(this) + 1,
					   this.childIndex + 1);
	    }
	    else { // This is the root, reset total ROWCOUNT!
		rowCount = lastRow;
	    }
!!!10055707.java!!!	makeVisible() : void
	    FHTreeStateNode       parent = (FHTreeStateNode)getParent();

	    if(parent != null)
		parent.expandParentAndReceiver();
!!!10055835.java!!!	expandParentAndReceiver() : void
	    FHTreeStateNode       parent = (FHTreeStateNode)getParent();

	    if(parent != null)
		parent.expandParentAndReceiver();
	    expand();
!!!10055963.java!!!	expand() : void
	    if(!isExpanded && !isLeaf()) {
		boolean            visible = isVisible();

		isExpanded = true;
		childCount = treeModel.getChildCount(getUserObject());

		if(visible) {
		    didExpand();
		}

		// Update the selection model.
		if(visible && treeSelectionModel != null) {
		    treeSelectionModel.resetRowSelection();
		}
	    }
!!!10056091.java!!!	collapse(inout adjustRows : boolean) : void
	    if(isExpanded) {
		if(isVisible() && adjustRows) {
		    int              childCount = getTotalChildCount();

		    isExpanded = false;
		    adjustRowCountBy(-childCount);
		    // We can do this because adjustRowBy won't descend
		    // the children.
		    adjustRowBy(-childCount, 0);
		}
		else
		    isExpanded = false;

		if(adjustRows && isVisible() && treeSelectionModel != null)
		    treeSelectionModel.resetRowSelection();
	    }
!!!10056219.java!!!	isLeaf() : boolean
            TreeModel model = getModel();

            return (model != null) ? model.isLeaf(this.getUserObject()) :
                   true;
!!!10056347.java!!!	addNode(inout newChild : FHTreeStateNode) : void
	    boolean         added = false;
	    int             childIndex = newChild.getChildIndex();

	    for(int counter = 0, maxCounter = getChildCount();
		counter < maxCounter; counter++) {
		if(((FHTreeStateNode)getChildAt(counter)).getChildIndex() >
		   childIndex) {
		    added = true;
		    insert(newChild, counter);
		    counter = maxCounter;
		}
	    }
	    if(!added)
		add(newChild);
!!!10056475.java!!!	removeChildAtModelIndex(in modelIndex : int, inout isChildVisible : boolean) : void
	    FHTreeStateNode     childNode = getChildAtModelIndex(modelIndex);

	    if(childNode != null) {
		int          row = childNode.getRow();
		int          index = getIndex(childNode);

		childNode.collapse(false);
		remove(index);
		adjustChildIndexs(index, -1);
		childCount--;
		if(isChildVisible) {
		    // Adjust the rows.
		    resetChildrenRowsFrom(row, index, modelIndex);
		}
	    }
	    else {
		int                  maxCounter = getChildCount();
		FHTreeStateNode      aChild;

		for(int counter = 0; counter < maxCounter; counter++) {
		    aChild = (FHTreeStateNode)getChildAt(counter);
		    if(aChild.childIndex >= modelIndex) {
			if(isChildVisible) {
			    adjustRowBy(-1, counter);
			    adjustRowCountBy(-1);
			}
			// Since matched and children are always sorted by
			// index, no need to continue testing with the
			// above.
			for(; counter < maxCounter; counter++)
			    ((FHTreeStateNode)getChildAt(counter)).
				              childIndex--;
			childCount--;
			return;
		    }
		}
		// No children to adjust, but it was a child, so we still need
		// to adjust nodes after this one.
		if(isChildVisible) {
		    adjustRowBy(-1, maxCounter);
		    adjustRowCountBy(-1);
		}
		childCount--;
	    }
!!!10056603.java!!!	adjustChildIndexs(in index : int, in amount : int) : void
	    for(int counter = index, maxCounter = getChildCount();
		counter < maxCounter; counter++) {
		((FHTreeStateNode)getChildAt(counter)).childIndex += amount;
	    }
!!!10056731.java!!!	childInsertedAtModelIndex(in index : int, inout isExpandedAndVisible : boolean) : void
	    FHTreeStateNode                aChild;
	    int                            maxCounter = getChildCount();

	    for(int counter = 0; counter < maxCounter; counter++) {
		aChild = (FHTreeStateNode)getChildAt(counter);
		if(aChild.childIndex >= index) {
		    if(isExpandedAndVisible) {
			adjustRowBy(1, counter);
			adjustRowCountBy(1);
		    }
		    /* Since matched and children are always sorted by
		       index, no need to continue testing with the above. */
		    for(; counter < maxCounter; counter++)
			((FHTreeStateNode)getChildAt(counter)).childIndex++;
		    childCount++;
		    return;
		}
	    }
	    // No children to adjust, but it was a child, so we still need
	    // to adjust nodes after this one.
	    if(isExpandedAndVisible) {
		adjustRowBy(1, maxCounter);
		adjustRowCountBy(1);
	    }
	    childCount++;
!!!10056859.java!!!	getPathForRow(in row : int, in nextRow : int, inout info : SearchInfo) : boolean
	    if(this.row == row) {
		info.node = this;
		info.isNodeParentNode = false;
		info.childIndex = childIndex;
		return true;
	    }

	    FHTreeStateNode            child;
	    FHTreeStateNode            lastChild = null;

	    for(int counter = 0, maxCounter = getChildCount();
		counter < maxCounter; counter++) {
		child = (FHTreeStateNode)getChildAt(counter);
		if(child.row > row) {
		    if(counter == 0) {
			// No node exists for it, and is first.
			info.node = this;
			info.isNodeParentNode = true;
			info.childIndex = row - this.row - 1;
			return true;
		    }
		    else {
			// May have been in last childs bounds.
			int          lastChildEndRow = 1 + child.row -
			             (child.childIndex - lastChild.childIndex);

			if(row < lastChildEndRow) {
			    return lastChild.getPathForRow(row,
						       lastChildEndRow, info);
			}
			// Between last child and child, but not in last child
			info.node = this;
			info.isNodeParentNode = true;
			info.childIndex = row - lastChildEndRow +
			                        lastChild.childIndex + 1;
			return true;
		    }
		}
		lastChild = child;
	    }

	    // Not in children, but we should have it, offset from
	    // nextRow.
	    if(lastChild != null) {
		int        lastChildEndRow = nextRow -
		                  (childCount - lastChild.childIndex) + 1;

		if(row < lastChildEndRow) {
		    return lastChild.getPathForRow(row, lastChildEndRow, info);
		}
		// Between last child and child, but not in last child
		info.node = this;
		info.isNodeParentNode = true;
		info.childIndex = row - lastChildEndRow +
		                             lastChild.childIndex + 1;
		return true;
	    }
	    else {
		// No children.
		int         retChildIndex = row - this.row - 1;

		if(retChildIndex >= childCount) {
		    return false;
		}
		info.node = this;
		info.isNodeParentNode = true;
		info.childIndex = retChildIndex;
		return true;
	    }
!!!10056987.java!!!	getCountTo(in stopIndex : int) : int
	    FHTreeStateNode    aChild;
	    int                retCount = stopIndex + 1;

	    for(int counter = 0, maxCounter = getChildCount();
		counter < maxCounter; counter++) {
		aChild = (FHTreeStateNode)getChildAt(counter);
		if(aChild.childIndex >= stopIndex)
		    counter = maxCounter;
		else
		    retCount += aChild.getTotalChildCount();
	    }
	    if(parent != null)
		return retCount + ((FHTreeStateNode)getParent())
		                   .getCountTo(childIndex);
	    if(!isRootVisible())
		return (retCount - 1);
	    return retCount;
!!!10057115.java!!!	getNumExpandedChildrenTo(in stopIndex : int) : int
	    FHTreeStateNode    aChild;
	    int                retCount = stopIndex;

	    for(int counter = 0, maxCounter = getChildCount();
		counter < maxCounter; counter++) {
		aChild = (FHTreeStateNode)getChildAt(counter);
		if(aChild.childIndex >= stopIndex)
		    return retCount;
		else {
		    retCount += aChild.getTotalChildCount();
		}
	    }
	    return retCount;
