class IndexColorModel
!!!6663067.java!!!	IndexColorModel(in bits : int, in size : int, in r : byte, in g : byte, in b : byte)
	super(bits, opaqueBits,
              ColorSpace.getInstance(ColorSpace.CS_sRGB),
              false, false, OPAQUE,
              ColorModel.getDefaultTransferType(bits));
        if (bits < 1 || bits > 16) {
            throw new IllegalArgumentException("Number of bits must be between"
                                               +" 1 and 16.");
        }
	setRGBs(size, r, g, b, null);
!!!6663195.java!!!	IndexColorModel(in bits : int, in size : int, in r : byte, in g : byte, in b : byte, in trans : int)
	super(bits, opaqueBits,
              ColorSpace.getInstance(ColorSpace.CS_sRGB),
              false, false, OPAQUE,
              ColorModel.getDefaultTransferType(bits));
        if (bits < 1 || bits > 16) {
            throw new IllegalArgumentException("Number of bits must be between"
                                               +" 1 and 16.");
        }
	setRGBs(size, r, g, b, null);
	setTransparentPixel(trans);
!!!6663323.java!!!	IndexColorModel(in bits : int, in size : int, in r : byte, in g : byte, in b : byte, in a : byte)
        super (bits, alphaBits,
               ColorSpace.getInstance(ColorSpace.CS_sRGB),
               true, false, TRANSLUCENT,
               ColorModel.getDefaultTransferType(bits));
        if (bits < 1 || bits > 16) {
            throw new IllegalArgumentException("Number of bits must be between"
                                               +" 1 and 16.");
        }
        setRGBs (size, r, g, b, a);
!!!6663451.java!!!	IndexColorModel(in bits : int, in size : int, in cmap : byte, in start : int, inout hasalpha : boolean)
	this(bits, size, cmap, start, hasalpha, -1);
        if (bits < 1 || bits > 16) {
            throw new IllegalArgumentException("Number of bits must be between"
                                               +" 1 and 16.");
        }
!!!6663579.java!!!	IndexColorModel(in bits : int, in size : int, in cmap : byte, in start : int, inout hasalpha : boolean, in trans : int)
	// REMIND: This assumes the ordering: RGB[A]
	super(bits, opaqueBits,
              ColorSpace.getInstance(ColorSpace.CS_sRGB),
              false, false, OPAQUE,
              ColorModel.getDefaultTransferType(bits));

        if (bits < 1 || bits > 16) {
            throw new IllegalArgumentException("Number of bits must be between"
                                               +" 1 and 16.");
        }
        if (size < 1) {
            throw new IllegalArgumentException("Map size ("+size+
                                               ") must be >= 1");
        }
	map_size = size;
	rgb = new int[calcRealMapSize(bits, size)];
	int j = start;
	int alpha = 0xff;
	boolean allgray = true;
        int transparency = OPAQUE;
	for (int i = 0; i < size; i++) {
	    int r = cmap[j++] & 0xff;
	    int g = cmap[j++] & 0xff;
	    int b = cmap[j++] & 0xff;
	    allgray = allgray && (r == g) && (g == b);
	    if (hasalpha) {
		alpha = cmap[j++] & 0xff;
		if (alpha != 0xff) {
		    if (alpha == 0x00) {
			if (transparency == OPAQUE) {
			    transparency = BITMASK;
			}
			if (transparent_index < 0) {
			    transparent_index = i;
			}
		    } else {
			transparency = TRANSLUCENT;
		    }
		    allgray = false;
		}
	    }
	    rgb[i] = (alpha << 24) | (r << 16) | (g << 8) | b;
	}
	this.allgrayopaque = allgray;
	setTransparency(transparency);
	setTransparentPixel(trans);
!!!6663707.java!!!	IndexColorModel(in bits : int, in size : int, in cmap : int, in start : int, inout hasalpha : boolean, in trans : int, in transferType : int)
	// REMIND: This assumes the ordering: RGB[A]
	super(bits, opaqueBits,
              ColorSpace.getInstance(ColorSpace.CS_sRGB),
              false, false, OPAQUE,
              transferType);

        if (bits < 1 || bits > 16) {
            throw new IllegalArgumentException("Number of bits must be between"
                                               +" 1 and 16.");
        }
        if (size < 1) {
            throw new IllegalArgumentException("Map size ("+size+
                                               ") must be >= 1");
        }
        if ((transferType != DataBuffer.TYPE_BYTE) &&
            (transferType != DataBuffer.TYPE_USHORT)) {
            throw new IllegalArgumentException("transferType must be either" +
                "DataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT");
        }

	setRGBs(size, cmap, start, hasalpha);
        setTransparentPixel(trans);
!!!6663835.java!!!	IndexColorModel(in bits : int, in size : int, in cmap : int, in start : int, in transferType : int, inout validBits : BigInteger)
        super (bits, alphaBits,
               ColorSpace.getInstance(ColorSpace.CS_sRGB),
               true, false, TRANSLUCENT,
               transferType);
        
        if (bits < 1 || bits > 16) {
            throw new IllegalArgumentException("Number of bits must be between"
                                               +" 1 and 16.");
        }
        if (size < 1) {
            throw new IllegalArgumentException("Map size ("+size+
                                               ") must be >= 1");
        }
        if ((transferType != DataBuffer.TYPE_BYTE) &&
            (transferType != DataBuffer.TYPE_USHORT)) {
            throw new IllegalArgumentException("transferType must be either" +
                "DataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT");
        }

        if (validBits != null) {
            // Check to see if it is all valid
            for (int i=0; i < size; i++) {
                if (!validBits.testBit(i)) {
                    this.validBits = validBits;
                    break;
                }
            }
        }
        
	setRGBs(size, cmap, start, true);
!!!6663963.java!!!	setRGBs(in size : int, in r : byte, in g : byte, in b : byte, in a : byte) : void
        if (size < 1) {
            throw new IllegalArgumentException("Map size ("+size+
                                               ") must be >= 1");
        }
	map_size = size;
	rgb = new int[calcRealMapSize(pixel_bits, size)];
	int alpha = 0xff;
        int transparency = OPAQUE;
	boolean allgray = true;
	for (int i = 0; i < size; i++) {
	    int rc = r[i] & 0xff;
	    int gc = g[i] & 0xff;
	    int bc = b[i] & 0xff;
	    allgray = allgray && (rc == gc) && (gc == bc);
	    if (a != null) {
		alpha = a[i] & 0xff;
		if (alpha != 0xff) {
		    if (alpha == 0x00) {
			if (transparency == OPAQUE) {
			    transparency = BITMASK;
			}
			if (transparent_index < 0) {
			    transparent_index = i;
			}
		    } else {
			transparency = TRANSLUCENT;
		    }
		    allgray = false;
		}
	    }
	    rgb[i] = (alpha << 24) | (rc << 16) | (gc << 8) | bc;
	}
	this.allgrayopaque = allgray;
	setTransparency(transparency);
!!!6664091.java!!!	setRGBs(in size : int, in cmap : int, in start : int, inout hasalpha : boolean) : void
	map_size = size;
	rgb = new int[calcRealMapSize(pixel_bits, size)];
	int j = start;
        int transparency = OPAQUE;
	boolean allgray = true;
	BigInteger validBits = this.validBits;
	for (int i = 0; i < size; i++, j++) {
	    if (validBits != null && !validBits.testBit(i)) {
		continue;
	    }
	    int cmaprgb = cmap[j];
	    int r = (cmaprgb >> 16) & 0xff;
	    int g = (cmaprgb >>  8) & 0xff;
	    int b = (cmaprgb      ) & 0xff;
	    allgray = allgray && (r == g) && (g == b);
	    if (hasalpha) {
		int alpha = cmaprgb >>> 24;
		if (alpha != 0xff) {
		    if (alpha == 0x00) {
			if (transparency == OPAQUE) {
			    transparency = BITMASK;
			}
			if (transparent_index < 0) {
			    transparent_index = i;
			}
		    } else {
			transparency = TRANSLUCENT;
		    }
		    allgray = false;
		}
	    } else {
		cmaprgb |= 0xff000000;
	    }
	    rgb[i] = cmaprgb;
	}
	this.allgrayopaque = allgray;
	setTransparency(transparency);
!!!6664219.java!!!	calcRealMapSize(in bits : int, in size : int) : int
	int newSize = Math.max(1 << bits, size);
	return Math.max(newSize, 256);
!!!6664347.java!!!	getAllValid() : BigInteger
	int numbytes = (map_size+7)/8;
	byte[] valid = new byte[numbytes];
	java.util.Arrays.fill(valid, (byte)0xff);
	valid[0] = (byte)(0xff >>> (numbytes*8 - map_size));

	return new BigInteger(1, valid);
!!!6664475.java!!!	getTransparency() : int
        return transparency;
!!!6664603.java!!!	getComponentSize() : int
        if (nBits == null) {
            if (supportsAlpha) {
                nBits = new int[4];
                nBits[3] = 8;
            }
            else {
                nBits = new int[3];
            }
            nBits[0] = nBits[1] = nBits[2] = 8;
        }
        return nBits;
!!!6664731.java!!!	getMapSize() : int
        return map_size;
!!!6664859.java!!!	getTransparentPixel() : int
	return transparent_index;
!!!6664987.java!!!	getReds(in r : byte) : void
	for (int i = 0; i < map_size; i++) {
	    r[i] = (byte) (rgb[i] >> 16);
	}
!!!6665115.java!!!	getGreens(in g : byte) : void
	for (int i = 0; i < map_size; i++) {
	    g[i] = (byte) (rgb[i] >> 8);
	}
!!!6665243.java!!!	getBlues(in b : byte) : void
        for (int i = 0; i < map_size; i++) {
            b[i] = (byte) rgb[i];
        }
!!!6665371.java!!!	getAlphas(in a : byte) : void
        for (int i = 0; i < map_size; i++) {
            a[i] = (byte) (rgb[i] >> 24);
        }
!!!6665499.java!!!	getRGBs(in rgb : int) : void
        System.arraycopy(this.rgb, 0, rgb, 0, map_size);
!!!6665627.java!!!	setTransparentPixel(in trans : int) : void
	if (trans >= 0 && trans < map_size) {
	    rgb[trans] &= 0x00ffffff;
	    transparent_index = trans;
	    allgrayopaque = false;
	    if (this.transparency == OPAQUE) {
		setTransparency(BITMASK);
	    }
	}
!!!6665755.java!!!	setTransparency(in transparency : int) : void
	if (this.transparency != transparency) {
	    this.transparency = transparency;
	    if (transparency == OPAQUE) {
		supportsAlpha = false;
		numComponents = 3;
		nBits = opaqueBits;
	    } else {
		supportsAlpha = true;
		numComponents = 4;
		nBits = alphaBits;
	    }
	}
!!!6665883.java!!!	getRed(in pixel : int) : int
	return (rgb[pixel] >> 16) & 0xff;
!!!6666011.java!!!	getGreen(in pixel : int) : int
	return (rgb[pixel] >> 8) & 0xff;
!!!6666139.java!!!	getBlue(in pixel : int) : int
	return rgb[pixel] & 0xff;
!!!6666267.java!!!	getAlpha(in pixel : int) : int
	return (rgb[pixel] >> 24) & 0xff;
!!!6666395.java!!!	getRGB(in pixel : int) : int
	return rgb[pixel];
!!!6666523.java!!!	getDataElements(in rgb : int, inout pixel : Object) : Object
        int red = (rgb>>16) & 0xff;
        int green = (rgb>>8) & 0xff;
        int blue  = rgb & 0xff;
        int alpha = (rgb>>>24);
        int pix = 0;

	for (int i = CACHESIZE - 2; i >= 0; i -= 2) {
	    if ((pix = lookupcache[i]) == 0) {
		break;
	    }
	    if (rgb == lookupcache[i+1]) {
		return installpixel(pixel, ~pix);
	    }
	}

	if (allgrayopaque) {
	    int minDist = 256;
	    int d;
	    int gray = (int) (red*77 + green*150 + blue*29 + 128)/256;

	    for (int i = 0; i < map_size; i++) {
		if (this.rgb[i] == 0x0) {
		    // For allgrayopaque colormaps, entries are 0
		    // iff they are an invalid color and should be
		    // ignored during color searches.
		    continue;
		}
		d = (this.rgb[i] & 0xff) - gray;
		if (d < 0) d = -d;
		if (d < minDist) {
		    pix = i;
		    if (d == 0) {
			break;
		    }
		    minDist = d;
		}
	    }
	} else if (alpha == 0) {
            // Return transparent pixel if we have one
            if (transparent_index >= 0) {
                pix = transparent_index;
            }
            else {
                // Search for smallest alpha
		int smallestAlpha = 256;
                for (int i = 0; i < map_size; i++) {
		    int a = this.rgb[i] >>> 24;
		    if (smallestAlpha > alpha &&
			(validBits == null || validBits.testBit(i)))
		    {
			smallestAlpha = alpha;
			pix = i;
                    }
                }
            }
        } else {
            // a heuristic which says find the closest color,
            // after finding the closest alpha
            // if user wants different behavior, they can derive
            // a class and override this method
            // SLOW --- but accurate
            // REMIND - need a native implementation, and inverse color-map
            int smallestError = 255 * 255 * 255;   // largest possible
	    int smallestAlphaError = 255;

	    if (false && red == green && green == blue) {
		// Grayscale
	    }

            for (int i=0; i < map_size; i++) {
		int lutrgb = this.rgb[i];
		if (lutrgb == rgb) {
		    pix = i;
		    break;
		}
                int tmp = (lutrgb>>>24) - alpha;
		if (tmp < 0) {
		    tmp = -tmp;
		}
		if (tmp <= smallestAlphaError) {
		    smallestAlphaError = tmp;
		    tmp = ((lutrgb>>16) & 0xff) - red;
		    int currentError = tmp * tmp;
		    if (currentError < smallestError) {
			tmp = ((lutrgb>>8) & 0xff) - green;
			currentError += tmp * tmp;
			if (currentError < smallestError) {
			    tmp = (lutrgb & 0xff) - blue;
			    currentError += tmp * tmp;
			    if (currentError < smallestError &&
				(validBits == null || validBits.testBit(i)))
			    {
				pix = i;
				smallestError = currentError;
			    }
			}
		    }
		}
            }
        }
	System.arraycopy(lookupcache, 2, lookupcache, 0, CACHESIZE - 2);
	lookupcache[CACHESIZE - 1] = rgb;
	lookupcache[CACHESIZE - 2] = ~pix;
	return installpixel(pixel, pix);
!!!6666651.java!!!	installpixel(inout pixel : Object, in pix : int) : Object
        switch (transferType) {
        case DataBuffer.TYPE_INT:
	    int[] intObj;
	    if (pixel == null) {
		pixel = intObj = new int[1];
	    } else {
		intObj = (int[]) pixel;
	    }
	    intObj[0] = pix;
            break;
        case DataBuffer.TYPE_BYTE:
	    byte[] byteObj;
	    if (pixel == null) {
		pixel = byteObj = new byte[1];
	    } else {
		byteObj = (byte[]) pixel;
	    }
	    byteObj[0] = (byte) pix;
            break;
        case DataBuffer.TYPE_USHORT:
	    short[] shortObj;
	    if (pixel == null) {
		pixel = shortObj = new short[1];
	    } else {
		shortObj = (short[]) pixel;
	    }
	    shortObj[0] = (short) pix;
            break;
        default:
            throw new UnsupportedOperationException("This method has not been "+
                             "implemented for transferType " + transferType);
        }
        return pixel;
!!!6666779.java!!!	getComponents(in pixel : int, in components : int, in offset : int) : int
        if (components == null) {
            components = new int[offset+numComponents];
        }

        // REMIND: Needs to change if different color space
        components[offset+0] = getRed(pixel);
        components[offset+1] = getGreen(pixel);
        components[offset+2] = getBlue(pixel);
        if (supportsAlpha && (components.length-offset) > 3) {
            components[offset+3] = getAlpha(pixel);
        }
        
        return components;
!!!6666907.java!!!	getComponents(inout pixel : Object, in components : int, in offset : int) : int
        int intpixel;
        switch (transferType) {
            case DataBuffer.TYPE_BYTE:
               byte bdata[] = (byte[])pixel;
               intpixel = bdata[0] & 0xff;
            break;
            case DataBuffer.TYPE_USHORT:
               short sdata[] = (short[])pixel;
               intpixel = sdata[0] & 0xffff;
            break;
            case DataBuffer.TYPE_INT:
               int idata[] = (int[])pixel;
               intpixel = idata[0];
            break;
            default:
               throw new UnsupportedOperationException("This method has not been "+
                   "implemented for transferType " + transferType);
        }
        return getComponents(intpixel, components, offset);
!!!6667035.java!!!	getDataElement(in components : int, in offset : int) : int
        int rgb = (components[offset+0]<<16)
            | (components[offset+1]<<8) | (components[offset+2]);
        if (supportsAlpha) {
            rgb |= (components[offset+3]<<24);
        }
        else {
            rgb |= 0xff000000;
        }
        Object inData = getDataElements(rgb, null);
        int pixel;
        switch (transferType) {
            case DataBuffer.TYPE_BYTE:
               byte bdata[] = (byte[])inData;
               pixel = bdata[0] & 0xff;
            break;
            case DataBuffer.TYPE_USHORT:
               short sdata[] = (short[])inData;
               pixel = sdata[0];
            break;
            case DataBuffer.TYPE_INT:
               int idata[] = (int[])inData;
               pixel = idata[0];
            break;
            default:
               throw new UnsupportedOperationException("This method has not been "+
                   "implemented for transferType " + transferType);
        }
        return pixel;
!!!6667163.java!!!	getDataElements(in components : int, in offset : int, inout pixel : Object) : Object
        int rgb = (components[offset+0]<<16) | (components[offset+1]<<8)
            | (components[offset+2]);
        if (supportsAlpha) {
            rgb |= (components[offset+3]<<24);
        }
        else {
            rgb &= 0xff000000;
        }
        return getDataElements(rgb, pixel);
!!!6667291.java!!!	createCompatibleWritableRaster(in w : int, in h : int) : WritableRaster
        WritableRaster raster;

        if (pixel_bits == 1 || pixel_bits == 2 || pixel_bits == 4) {
            // TYPE_BINARY
            raster = Raster.createPackedRaster(DataBuffer.TYPE_BYTE,
                                               w, h, 1, pixel_bits, null);
        }
        else if (pixel_bits <= 8) {
            raster = Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,
                                                  w,h,1,null);
        }
        else if (pixel_bits <= 16) {
            raster = Raster.createInterleavedRaster(DataBuffer.TYPE_USHORT,
                                                  w,h,1,null);
        }
        else {
            throw new
                UnsupportedOperationException("This method is not supported "+
                                              " for pixel bits > 16.");
        }
        return raster;
!!!6667419.java!!!	isCompatibleRaster(inout raster : Raster) : boolean

	int size = raster.getSampleModel().getSampleSize(0);
        return ((raster.getTransferType() == transferType) &&
		(raster.getNumBands() == 1) && ((1 << size) >= map_size));
!!!6667547.java!!!	createCompatibleSampleModel(in w : int, in h : int) : SampleModel
        int[] off = new int[1];
        off[0] = 0;
        if (pixel_bits == 1 || pixel_bits == 2 || pixel_bits == 4) {
            return new MultiPixelPackedSampleModel(transferType, w, h,
                                                   pixel_bits);
        }
        else {
            return new ComponentSampleModel(transferType, w, h, 1, w,
                                            off);
        }
!!!6667675.java!!!	isCompatibleSampleModel(inout sm : SampleModel) : boolean
        // fix 4238629
        if (! (sm instanceof ComponentSampleModel) &&
            ! (sm instanceof MultiPixelPackedSampleModel)   ) {
            return false;
        }

        // Transfer type must be the same
        if (sm.getTransferType() != transferType) {
            return false;
        }

        if (sm.getNumBands() != 1) {
            return false;
        }
        
        return true;
!!!6667803.java!!!	convertToIntDiscrete(inout raster : Raster, inout forceARGB : boolean) : BufferedImage
        ColorModel cm;

        if (!isCompatibleRaster(raster)) {
            throw new IllegalArgumentException("This raster is not compatible" +
                 "with this IndexColorModel.");
        }
        if (forceARGB || transparency == TRANSLUCENT) {
            cm = ColorModel.getRGBdefault();
        }
        else if (transparency == BITMASK) {
            cm = new DirectColorModel(25, 0xff0000, 0x00ff00, 0x0000ff,
                                      0x1000000);
        }
        else {
            cm = new DirectColorModel(24, 0xff0000, 0x00ff00, 0x0000ff);
        }

        int w = raster.getWidth();
        int h = raster.getHeight();
        WritableRaster discreteRaster = 
                  cm.createCompatibleWritableRaster(w, h);
        Object obj = null;
        int[] data = null;

        int rX = raster.getMinX();
        int rY = raster.getMinY();

        for (int y=0; y < h; y++, rY++) {
            obj = raster.getDataElements(rX, rY, w, 1, obj);
            if (obj instanceof int[]) {
                data = (int[])obj;
            } else {
                data = DataBuffer.toIntArray(obj);
            }
            for (int x=0; x < w; x++) {
                data[x] = rgb[data[x]];
            }
            discreteRaster.setDataElements(0, y, w, 1, data);
        }
        
        return new BufferedImage(cm, discreteRaster, false, null);
!!!6667931.java!!!	isValid(in pixel : int) : boolean
	return ((pixel >= 0 && pixel < map_size) &&
		(validBits == null || validBits.testBit(pixel)));
!!!6668059.java!!!	isValid() : boolean
        return (validBits == null);
!!!6668187.java!!!	getValidPixels() : BigInteger
        if (validBits == null) {
            return getAllValid();
        }
        else {
            return validBits;
        }
!!!6668315.java!!!	finalize() : void
	sun.awt.image.BufImgSurfaceData.freeNativeICMData(this);
!!!6668443.java!!!	toString() : String
       return new String("IndexColorModel: #pixelBits = "+pixel_bits
                         + " numComponents = "+numComponents
                         + " color space = "+colorSpace
                         + " transparency = "+transparency
                         + " transIndex   = "+transparent_index
                         + " has alpha = "+supportsAlpha
                         + " isAlphaPre = "+isAlphaPremultiplied
                         );
