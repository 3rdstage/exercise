class JmxMBeanServer
!!!3184027.java!!!	JmxMBeanServer(in domain : String, inout outer : MBeanServer, inout delegate : MBeanServerDelegate)
	this(domain,outer,delegate,null,null,false);
!!!3184155.java!!!	JmxMBeanServer(in domain : String, inout outer : MBeanServer, inout delegate : MBeanServerDelegate, inout interceptors : boolean)
	this(domain,outer,delegate,null,null,false);
!!!3184283.java!!!	JmxMBeanServer(in domain : String, inout outer : MBeanServer, inout delegate : MBeanServerDelegate, inout instantiator : MBeanInstantiator, inout metadata : MetaData, inout interceptors : boolean)

	if (instantiator == null) {
	    final ModifiableClassLoaderRepository
		clr = new ClassLoaderRepositorySupport();
	    instantiator = new MBeanInstantiatorImpl(clr);
	}
	this.secureClr = new 
	  SecureClassLoaderRepository(instantiator.getClassLoaderRepository());
	if (metadata == null)
	    metadata = new MetaDataImpl(instantiator);
	if (delegate == null) 
	    delegate = new MBeanServerDelegateImpl();
	if (outer == null)
	    outer = this;
	
	this.instantiator = instantiator;
	this.meta         = metadata;
	this.mBeanServerDelegateObject = delegate;
	this.outerShell   = outer;

	final Repository repository = new RepositorySupport(domain);
	this.mbsInterceptor = 
	    new DefaultMBeanServerInterceptor(outer, delegate, instantiator, 
					      metadata, repository);
	this.interceptorsEnabled = interceptors;
	initialize();
!!!3184411.java!!!	interceptorsEnabled() : boolean
	return interceptorsEnabled;
!!!3184539.java!!!	getMBeanInstantiator() : MBeanInstantiator
	if (interceptorsEnabled) return instantiator;
	else throw new UnsupportedOperationException(
	               "MBeanServerInterceptors are disabled.");
!!!3184667.java!!!	getMetaData() : MetaData

	return meta;
!!!3184795.java!!!	createMBean(in className : String, inout name : ObjectName) : ObjectInstance
 

	return mbsInterceptor.createMBean(className,
					  cloneObjectName(name),
					  (Object[]) null,
					  (String[]) null);
!!!3184923.java!!!	createMBean(in className : String, inout name : ObjectName, inout loaderName : ObjectName) : ObjectInstance
 
	
	return mbsInterceptor.createMBean(className,
					  cloneObjectName(name),
					  loaderName,
 					  (Object[]) null,
					  (String[]) null);
!!!3185051.java!!!	createMBean(in className : String, inout name : ObjectName, inout params : Object, in signature : String) : ObjectInstance
 
	
	return mbsInterceptor.createMBean(className, cloneObjectName(name),
					  params, signature);
!!!3185179.java!!!	createMBean(in className : String, inout name : ObjectName, inout loaderName : ObjectName, inout params : Object, in signature : String) : ObjectInstance
 
     
        return mbsInterceptor.createMBean(className, cloneObjectName(name),
					  loaderName, params, signature);
!!!3185307.java!!!	registerMBean(inout object : Object, inout name : ObjectName) : ObjectInstance
 
	
	return mbsInterceptor.registerMBean(object, cloneObjectName(name));
!!!3185435.java!!!	unregisterMBean(inout name : ObjectName) : void
	// Now handled by the delegate itself..
        // if (name.equals(MBeanServerDelegateObjectName)) {
        //    throw new RuntimeOperationsException(
        //          new IllegalArgumentException(
	//               "The MBeanDelegate MBean cannot be unregistered"));
        // }  
	mbsInterceptor.unregisterMBean(cloneObjectName(name));
!!!3185563.java!!!	getObjectInstance(inout name : ObjectName) : ObjectInstance

	return mbsInterceptor.getObjectInstance(cloneObjectName(name));
!!!3185691.java!!!	queryMBeans(inout name : ObjectName, inout query : QueryExp) : Set
	
	return mbsInterceptor.queryMBeans(cloneObjectName(name), query);
!!!3185819.java!!!	queryNames(inout name : ObjectName, inout query : QueryExp) : Set

        return mbsInterceptor.queryNames(cloneObjectName(name), query); 
!!!3185947.java!!!	isRegistered(inout name : ObjectName) : boolean

        return mbsInterceptor.isRegistered(name);
!!!3186075.java!!!	getMBeanCount() : Integer
 

        return mbsInterceptor.getMBeanCount();
!!!3186203.java!!!	getAttribute(inout name : ObjectName, in attribute : String) : Object
 

	return mbsInterceptor.getAttribute(cloneObjectName(name), attribute);
!!!3186331.java!!!	getAttributes(inout name : ObjectName, in attributes : String) : AttributeList
 
  
	return mbsInterceptor.getAttributes(cloneObjectName(name), attributes);
   
!!!3186459.java!!!	setAttribute(inout name : ObjectName, inout attribute : Attribute) : void
 
	
	mbsInterceptor.setAttribute(cloneObjectName(name),
				    cloneAttribute(attribute));
!!!3186587.java!!!	setAttributes(inout name : ObjectName, inout attributes : AttributeList) : AttributeList
 
	
	return mbsInterceptor.setAttributes(cloneObjectName(name),
					    cloneAttributeList(attributes));
!!!3186715.java!!!	invoke(inout name : ObjectName, in operationName : String, inout params : Object, in signature : String) : Object
 
        return mbsInterceptor.invoke(cloneObjectName(name), operationName,
				     params, signature);
!!!3186843.java!!!	getDefaultDomain() : String
 
        return mbsInterceptor.getDefaultDomain();
!!!3186971.java!!!	getDomains() : String
        return mbsInterceptor.getDomains();
!!!3187099.java!!!	addNotificationListener(inout name : ObjectName, inout listener : NotificationListener, inout filter : NotificationFilter, inout handback : Object) : void

	mbsInterceptor.addNotificationListener(cloneObjectName(name), listener,
					       filter, handback);
!!!3187227.java!!!	addNotificationListener(inout name : ObjectName, inout listener : ObjectName, inout filter : NotificationFilter, inout handback : Object) : void
	
        mbsInterceptor.addNotificationListener(cloneObjectName(name), listener,
					       filter, handback);
!!!3187355.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : NotificationListener) : void
	
	mbsInterceptor.removeNotificationListener(cloneObjectName(name),
						  listener);
!!!3187483.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : NotificationListener, inout filter : NotificationFilter, inout handback : Object) : void
	
	mbsInterceptor.removeNotificationListener(cloneObjectName(name),
						  listener, filter, handback);
!!!3187611.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : ObjectName) : void

	mbsInterceptor.removeNotificationListener(cloneObjectName(name),
						  listener);
!!!3187739.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : ObjectName, inout filter : NotificationFilter, inout handback : Object) : void

	mbsInterceptor.removeNotificationListener(cloneObjectName(name),
						  listener, filter, handback);
!!!3187867.java!!!	getMBeanInfo(inout name : ObjectName) : MBeanInfo
 
	
	return mbsInterceptor.getMBeanInfo(cloneObjectName(name));
!!!3187995.java!!!	instantiate(in className : String) : Object
 

	/* Permission check */
	checkMBeanPermission(className, null, null, "instantiate");

	return instantiator.instantiate(className);
!!!3188123.java!!!	instantiate(in className : String, inout loaderName : ObjectName) : Object
     
         
	/* Permission check */
	checkMBeanPermission(className, null, null, "instantiate");

	ClassLoader myLoader = outerShell.getClass().getClassLoader();
    	return instantiator.instantiate(className, loaderName, myLoader);
!!!3188251.java!!!	instantiate(in className : String, inout params : Object, in signature : String) : Object
 

	/* Permission check */
	checkMBeanPermission(className, null, null, "instantiate");

	ClassLoader myLoader = outerShell.getClass().getClassLoader();
	return instantiator.instantiate(className, params, signature,
					myLoader);
!!!3188379.java!!!	instantiate(in className : String, inout loaderName : ObjectName, inout params : Object, in signature : String) : Object
 

	/* Permission check */
	checkMBeanPermission(className, null, null, "instantiate");

	ClassLoader myLoader = outerShell.getClass().getClassLoader();
	return instantiator.instantiate(className,loaderName,params,signature,
					myLoader);
!!!3188507.java!!!	isInstanceOf(inout name : ObjectName, in className : String) : boolean

	return mbsInterceptor.isInstanceOf(cloneObjectName(name), className);
!!!3188635.java!!!	deserialize(inout name : ObjectName, in data : byte) : ObjectInputStream

	/* Permission check */
	// This call requires MBeanPermission 'getClassLoaderFor'
	final ClassLoader loader = getClassLoaderFor(name);

	return instantiator.deserialize(loader, data);
!!!3188763.java!!!	deserialize(in className : String, in data : byte) : ObjectInputStream

        if (className == null) {
            throw new  RuntimeOperationsException(
					new IllegalArgumentException(),
					"Null className passed in parameter");
        }

	/* Permission check */
	// This call requires MBeanPermission 'getClassLoaderRepository'
	final ClassLoaderRepository clr = getClassLoaderRepository();

	Class theClass;
	try {
	    if (clr == null) throw new ClassNotFoundException(className);
	    theClass = clr.loadClass(className);
	} catch (ClassNotFoundException e) {
	    throw new ReflectionException(e,
					  "The given class could not be " +
					  "loaded by the default loader " +
					  "repository");
	}

	return instantiator.deserialize(theClass.getClassLoader(), data);
!!!3188891.java!!!	deserialize(in className : String, inout loaderName : ObjectName, in data : byte) : ObjectInputStream

	// Clone ObjectName
	//
	loaderName = cloneObjectName(loaderName);

	/* Permission check */
	// Make this call just to force the 'getClassLoader'
	// permission check
	try {
	    getClassLoader(loaderName);
	} catch (SecurityException e) {
	    throw e;
	} catch (Exception e) {
	}

	ClassLoader myLoader = outerShell.getClass().getClassLoader();
        return instantiator.deserialize(className, loaderName, data, myLoader);
!!!3189019.java!!!	initialize() : void
	if (instantiator == null) throw new 
	    IllegalStateException("instantiator must not be null.");
	
	// Registers the MBeanServer identification MBean
	try {
	    mBeanServerDelegateObjectName = 
		new  ObjectName(ServiceName.DELEGATE) ;

	    AccessController.doPrivileged(new PrivilegedExceptionAction() {
		public Object run() throws Exception {
		    mbsInterceptor.registerMBean(mBeanServerDelegateObject,
						 mBeanServerDelegateObjectName);
		    return null;
		}
	    });
	} catch (SecurityException e) {
	    if (isDebugOn()) {
		debug("new", "Unexpected security exception occured: " + 
		      e);       
	    }   
	    mBeanServerDelegateObjectName = null;
	    throw e;
	} catch (Exception e) {
	    if (isDebugOn()) {
		debug("new", "Unexpected exception occured: " + 
		      e.getClass().getName());       
	    }   
	    mBeanServerDelegateObjectName = null;
	    throw new
		IllegalStateException("Can't register delegate.");
	}


	/* Add my class loader to the repository
	   This can be null if my class loader is the bootstrap
	   class loader.  The ClassLoaderRepository knows how
	   to handle that case.  */
	ClassLoader myLoader = outerShell.getClass().getClassLoader();
	final ModifiableClassLoaderRepository loaders = 
	    instantiator.getClassLoaderRepository();
	if (loaders != null) {
	    loaders.addClassLoader(myLoader);

	    /* Add the system class loader, so that if the MBean server is
	       loaded by the bootstrap class loader we can still load
	       MBeans from the classpath using
	       createMBean(className, objectName).
	       
	       If this class (JmxMBeanServer) was not loaded by the
	       system class loader or a parent of it, then the caller
	       must have RuntimePermission("getClassLoader") for the
	       getSystemClassLoader() call to succeed.  If the caller
	       does not have that permission, any call to
	       Class.getClassLoader() will fail.  Since there are lots
	       of those in JMX, we better throw the exception now.

	       This permission question is irrelevant when JMX is part
	       of J2SE (as of 1.5). */
	    ClassLoader systemLoader = ClassLoader.getSystemClassLoader();
	    if (systemLoader != myLoader)
		loaders.addClassLoader(systemLoader);
	}
!!!3189147.java!!!	getMBeanServerInterceptor() : MBeanServerInterceptor
	if (interceptorsEnabled) return mbsInterceptor;
	else throw new UnsupportedOperationException(
	               "MBeanServerInterceptors are disabled.");
!!!3189275.java!!!	setMBeanServerInterceptor(inout interceptor : MBeanServerInterceptor) : void
	if (!interceptorsEnabled) throw new UnsupportedOperationException(
	               "MBeanServerInterceptors are disabled.");
	if (interceptor == null) throw new
	    IllegalArgumentException("MBeanServerInterceptor is null");
	mbsInterceptor = interceptor;
!!!3189403.java!!!	getClassLoaderFor(inout mbeanName : ObjectName) : ClassLoader
	return mbsInterceptor.getClassLoaderFor(cloneObjectName(mbeanName));
!!!3189531.java!!!	getClassLoader(inout loaderName : ObjectName) : ClassLoader
	return mbsInterceptor.getClassLoader(cloneObjectName(loaderName));
!!!3189659.java!!!	getClassLoaderRepository() : ClassLoaderRepository
	/* Permission check */
	checkMBeanPermission(null, null, null, "getClassLoaderRepository");
	return secureClr;
!!!3189787.java!!!	getMBeanServerDelegate() : MBeanServerDelegate
	return mBeanServerDelegateObject;
!!!3189915.java!!!	newMBeanServerDelegate() : MBeanServerDelegate
	return new MBeanServerDelegateImpl();
!!!3190043.java!!!	newMBeanServer(in defaultDomain : String, inout outer : MBeanServer, inout delegate : MBeanServerDelegate, inout interceptors : boolean) : MBeanServer
	return new JmxMBeanServer(defaultDomain,outer,delegate,interceptors);
!!!3190171.java!!!	cloneObjectName(inout name : ObjectName) : ObjectName
	if (name != null) {
	    return ObjectName.getInstance(name);
	}
	return name;
!!!3190299.java!!!	cloneAttribute(inout attribute : Attribute) : Attribute
	if (attribute != null) {
	    if (!attribute.getClass().equals(Attribute.class)) {
		return new Attribute(attribute.getName(), attribute.getValue());
	    }
	}
	return attribute;
!!!3190427.java!!!	cloneAttributeList(inout list : AttributeList) : AttributeList
	if (list != null) {
	    if (!list.getClass().equals(AttributeList.class)) {
		// Create new attribute list
		//
		AttributeList newList = new AttributeList(list.size());

		// Iterate through list and replace non JMX attributes
		//
		for (Iterator i = list.iterator(); i.hasNext(); ) {
		    Attribute attribute = (Attribute) i.next();
		    newList.add(cloneAttribute(attribute));
		}
		return newList;
	    } else {
		// Iterate through list and replace non JMX attributes
		//
		for (int i = 0; i < list.size(); i++) {
		    Attribute attribute = (Attribute) list.get(i);
		    if (!attribute.getClass().equals(Attribute.class)) {
			list.set(i, cloneAttribute(attribute));
		    }
		}
		return list;
	    }
	}
	return list;
!!!3190555.java!!!	checkMBeanPermission(in classname : String, in member : String, inout objectName : ObjectName, in actions : String) : void
	SecurityManager sm = System.getSecurityManager();
	if (sm != null) {
	    Permission perm = new MBeanPermission(classname,
						  member,
						  objectName,
						  actions);
	    sm.checkPermission(perm);
	}
!!!3190683.java!!!	isTraceOn() : boolean
        return Trace.isSelected(Trace.LEVEL_TRACE, Trace.INFO_MBEANSERVER);
!!!3190811.java!!!	trace(in clz : String, in func : String, in info : String) : void
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_MBEANSERVER, clz, func, info);
!!!3190939.java!!!	trace(in func : String, in info : String) : void
        trace(dbgTag, func, info);
!!!3191067.java!!!	isDebugOn() : boolean
        return Trace.isSelected(Trace.LEVEL_DEBUG, Trace.INFO_MBEANSERVER);
!!!3191195.java!!!	debug(in clz : String, in func : String, in info : String) : void
        Trace.send(Trace.LEVEL_DEBUG, Trace.INFO_MBEANSERVER, clz, func, info);
!!!3191323.java!!!	debug(in func : String, in info : String) : void
        debug(dbgTag, func, info);
