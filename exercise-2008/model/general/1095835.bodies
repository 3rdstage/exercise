class BaseRowSet
!!!8764827.java!!!	BaseRowSet()
	// allocate the listeners collection
	listeners = new Vector();
!!!8764955.java!!!	initParams() : void
        params = new Hashtable();
!!!8765083.java!!!	addRowSetListener(inout listener : RowSetListener) : void
	listeners.add(listener);
!!!8765211.java!!!	removeRowSetListener(inout listener : RowSetListener) : void
	listeners.remove(listener);     
!!!8765339.java!!!	checkforRowSetInterface() : void
        if ((this instanceof javax.sql.RowSet) == false) {                
            throw new SQLException("The class extending abstract class BaseRowSet " +
                "must implement javax.sql.RowSet or one of it's sub-interfaces.");
        }     
!!!8765467.java!!!	notifyCursorMoved() : void
       
        checkforRowSetInterface();
	if (listeners.isEmpty() == false) {
            RowSetEvent event = new RowSetEvent((RowSet)this);
            for (Iterator i = listeners.iterator(); i.hasNext(); ) { 
                ((RowSetListener)i.next()).cursorMoved(event);
            }
	}
!!!8765595.java!!!	notifyRowChanged() : void
        checkforRowSetInterface();
	if (listeners.isEmpty() == false) {
		RowSetEvent event = new RowSetEvent((RowSet)this);
		for (Iterator i = listeners.iterator(); i.hasNext(); ) {
			((RowSetListener)i.next()).rowChanged(event);
		}
	}
!!!8765723.java!!!	notifyRowSetChanged() : void
        checkforRowSetInterface();
	if (listeners.isEmpty() == false) {
		RowSetEvent event = new RowSetEvent((RowSet)this);
		for (Iterator i = listeners.iterator(); i.hasNext(); ) {
			((RowSetListener)i.next()).rowSetChanged(event);
		}
	}
!!!8765851.java!!!	getCommand() : String
        return command;
!!!8765979.java!!!	setCommand(in cmd : String) : void
	// cmd equal to null or
	// cmd with length 0 (implies url =="")
	// are not independent events.
	
	if(cmd == null) {
	   command = null;
	} else if (cmd.length() == 0) {
            throw new SQLException("Invalid command string detected. " +
            "Cannot be of length less than 0");
        } else { 
            // "unbind" any parameters from any previous command.
            if(params == null){
                 throw new SQLException("Set initParams() before setCommand");
            }
            params.clear();
            command = new String(cmd);
	}
	
!!!8766107.java!!!	getUrl() : String
        return URL;
!!!8766235.java!!!	setUrl(in url : String) : void
	
	if(url == null) {
	   url = null;
	} else if (url.length() < 1) {
            throw new SQLException("Invalid url string detected. " +
            "Cannot be of length less than 1");
        } else { 
            URL = new String(url);
	}
	
        dataSource = null;
        
!!!8766363.java!!!	getDataSourceName() : String
        return dataSource;
!!!8766491.java!!!	setDataSourceName(in name : String) : void
        
        
        if (name == null) {
            dataSource = null;
        } else if (name.equals("")) {
           throw new SQLException("DataSource name cannot be empty string");
        } else {
           dataSource = new String(name);
        }

        URL = null;
!!!8766619.java!!!	getUsername() : String
        return username;
!!!8766747.java!!!	setUsername(in name : String) : void
        if(name == null)
        {
	   username = null;
        } else {
           username = new String(name);
	}
!!!8766875.java!!!	getPassword() : String
        return password;
!!!8767003.java!!!	setPassword(in pass : String) : void
	if(pass == null)
	{
	   password = null;
	} else {
           password = new String(pass);
	}
!!!8767131.java!!!	setType(in type : int) : void
        
        if ((type != ResultSet.TYPE_FORWARD_ONLY) && 
           (type != ResultSet.TYPE_SCROLL_INSENSITIVE) &&
           (type != ResultSet.TYPE_SCROLL_SENSITIVE)) {
                throw new SQLException("Invalid type of RowSet set. Must be either " +
                "ResultSet.TYPE_FORWARD_ONLY or ResultSet.TYPE_SCROLL_INSENSITIVE " +
                "or ResultSet.TYPE_SCROLL_SENSITIVE.");
        }               
        this.rowSetType = type;
!!!8767259.java!!!	getType() : int
        return rowSetType;
!!!8767387.java!!!	setConcurrency(in concurrency : int) : void
        
        
        if((concurrency != ResultSet.CONCUR_READ_ONLY) && 
           (concurrency != ResultSet.CONCUR_UPDATABLE)) {
                throw new SQLException("Invalid concurrency set. Must be either " +
                "ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE.");
        }        
        this.concurrency = concurrency;
!!!8767515.java!!!	isReadOnly() : boolean
        return readOnly;
!!!8767643.java!!!	setReadOnly(inout value : boolean) : void
        readOnly = value;
!!!8767771.java!!!	getTransactionIsolation() : int
        return isolation;
!!!8767899.java!!!	setTransactionIsolation(in level : int) : void
        if ((level != Connection.TRANSACTION_NONE) && 
           (level != Connection.TRANSACTION_READ_COMMITTED) &&
           (level != Connection.TRANSACTION_READ_UNCOMMITTED) &&
           (level != Connection.TRANSACTION_REPEATABLE_READ) &&
           (level != Connection.TRANSACTION_SERIALIZABLE))
            {
                throw new SQLException("Invalid transaction isolation set. Must " +
                "be either " +
                "Connection.TRANSACTION_NONE or " +
                "Connection.TRANSACTION_READ_UNCOMMITTED or " +
                "Connection.TRANSACTION_READ_COMMITTED or " +
                "Connection.RRANSACTION_REPEATABLE_READ or " +
                "Connection.TRANSACTION_SERIALIZABLE");
            }          
        this.isolation = level;
!!!8768027.java!!!	getTypeMap() : Map
        return map;
!!!8768155.java!!!	setTypeMap(inout map : Map) : void
        this.map = map;
!!!8768283.java!!!	getMaxFieldSize() : int
    
        return maxFieldSize;
!!!8768411.java!!!	setMaxFieldSize(in max : int) : void
        if (max < 0) {
            throw new SQLException("Invalid max field size set. Cannot be of " +
            "value: " + max);
        }             
        maxFieldSize = max;
!!!8768539.java!!!	getMaxRows() : int
         
        return maxRows;
!!!8768667.java!!!	setMaxRows(in max : int) : void
        if (max < 0) {
            throw new SQLException("Invalid max row size set. Cannot be of " +
                "value: " + max);   
        } else if (max < this.getFetchSize()) {
            throw new SQLException("Invalid max row size set. Cannot be less " +
                "than the fetchSize.");        
        }
        this.maxRows = max;
!!!8768795.java!!!	setEscapeProcessing(inout enable : boolean) : void
        escapeProcessing = enable;
!!!8768923.java!!!	getQueryTimeout() : int
        return queryTimeout; 
!!!8769051.java!!!	setQueryTimeout(in seconds : int) : void
        if (seconds < 0) {
            throw new SQLException("Invalid query timeout value set. Cannot be " +
            "of value: " + seconds);
        }        
        this.queryTimeout = seconds;
!!!8769179.java!!!	getShowDeleted() : boolean
        return showDeleted; 
!!!8769307.java!!!	setShowDeleted(inout value : boolean) : void
        showDeleted = value;
!!!8769435.java!!!	getEscapeProcessing() : boolean
        return escapeProcessing;
!!!8769563.java!!!	setFetchDirection(in direction : int) : void
    	// Changed the condition checking to the below as there were two
    	// conditions that had to be checked
    	// 1. RowSet is TYPE_FORWARD_ONLY and direction is not FETCH_FORWARD
    	// 2. Direction is not one of the valid values
    	
        if (((getType() == ResultSet.TYPE_FORWARD_ONLY) && (direction != ResultSet.FETCH_FORWARD)) ||
            ((direction != ResultSet.FETCH_FORWARD) &&
            (direction != ResultSet.FETCH_REVERSE) &&
            (direction != ResultSet.FETCH_UNKNOWN))) {
            throw new SQLException("Invalid Fetch Direction");
        }
        fetchDir = direction;
!!!8769691.java!!!	getFetchDirection() : int
    
    	//Added the following code to throw a 
    	//SQL Exception if the fetchDir is not 
    	//set properly.Bug id:4914155
        
        // This checking is not necessary!
    	
    	/*
         if((fetchDir != ResultSet.FETCH_FORWARD) &&
    	   (fetchDir != ResultSet.FETCH_REVERSE) &&
    	   (fetchDir != ResultSet.FETCH_UNKNOWN)) {
    	    throw new SQLException("Fetch Direction Invalid");
    	 }   
         */
        return (fetchDir);
!!!8769819.java!!!	setFetchSize(in rows : int) : void
    	//Added this checking as maxRows can be 0 when this function is called
    	//maxRows = 0 means rowset can hold any number of rows, os this checking
    	// is needed to take care of this condition.
    	if (getMaxRows() == 0 && rows >= 0)  {
    	    fetchSize = rows;
    	    return;
    	}
        if ((rows < 0) || (rows > getMaxRows())) {
            throw new SQLException("Invalid fetch size set. Cannot be of " +
            "value: " + rows);   
        }        
        fetchSize = rows;
!!!8769947.java!!!	getFetchSize() : int
        return fetchSize;
!!!8770075.java!!!	getConcurrency() : int
        
        return concurrency;
!!!8770203.java!!!	checkParamIndex(in idx : int) : void
                
        if ((idx < 1)) {
            throw new SQLException("Invalid Parameter Index");
        }
!!!8770331.java!!!	setNull(in parameterIndex : int, in sqlType : int) : void
        Object nullVal[];
        checkParamIndex(parameterIndex);
        
        nullVal = new Object[2];
        nullVal[0] = null;
        nullVal[1] = new Integer(sqlType);

       if (params == null){
            throw new SQLException("Set initParams() before setNull");
       }
        
        params.put(new Integer(parameterIndex - 1), nullVal);
!!!8770459.java!!!	setNull(in parameterIndex : int, in sqlType : int, in typeName : String) : void
        
        Object nullVal[];
        checkParamIndex(parameterIndex);
        
        nullVal = new Object[3];
        nullVal[0] = null;
        nullVal[1] = new Integer(sqlType);
        nullVal[2] = new String(typeName);

       if(params == null){
            throw new SQLException("Set initParams() before setNull");
       }
        
        params.put(new Integer(parameterIndex - 1), nullVal);
!!!8770587.java!!!	setBoolean(in parameterIndex : int, inout x : boolean) : void
        checkParamIndex(parameterIndex);

       if(params == null){
            throw new SQLException("Set initParams() before setNull");
       }
        
        params.put(new Integer(parameterIndex - 1), new Boolean(x));
!!!8770715.java!!!	setByte(in parameterIndex : int, in x : byte) : void
        checkParamIndex(parameterIndex);

       if(params == null){
            throw new SQLException("Set initParams() before setByte");
       }
        
        params.put(new Integer(parameterIndex - 1), new Byte(x));
!!!8770843.java!!!	setShort(in parameterIndex : int, in x : short) : void
        checkParamIndex(parameterIndex);

        if(params == null){
             throw new SQLException("Set initParams() before setShort");
        }
        
        params.put(new Integer(parameterIndex - 1), new Short(x));
!!!8770971.java!!!	setInt(in parameterIndex : int, in x : int) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setInt");
        }
        params.put(new Integer(parameterIndex - 1), new Integer(x));
!!!8771099.java!!!	setLong(in parameterIndex : int, in x : long) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setLong");
        }
        params.put(new Integer(parameterIndex - 1), new Long(x));
!!!8771227.java!!!	setFloat(in parameterIndex : int, in x : float) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setFloat");
        }
        params.put(new Integer(parameterIndex - 1), new Float(x));
!!!8771355.java!!!	setDouble(in parameterIndex : int, in x : double) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setDouble");
        }
        params.put(new Integer(parameterIndex - 1), new Double(x));
!!!8771483.java!!!	setBigDecimal(in parameterIndex : int, inout x : BigDecimal) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setBigDecimal");
        }
        params.put(new Integer(parameterIndex - 1), x);
!!!8771611.java!!!	setString(in parameterIndex : int, in x : String) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setString");
        }
        params.put(new Integer(parameterIndex - 1), x);    
!!!8771739.java!!!	setBytes(in parameterIndex : int, in x : byte) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setBytes");
        }
        params.put(new Integer(parameterIndex - 1), x);
!!!8771867.java!!!	setDate(in parameterIndex : int, inout x : Date) : void
        checkParamIndex(parameterIndex);
	
        if(params == null){
             throw new SQLException("Set initParams() before setDate");
        }
        params.put(new Integer(parameterIndex - 1), x);
!!!8771995.java!!!	setTime(in parameterIndex : int, inout x : Time) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setTime");
        }
        
        params.put(new Integer(parameterIndex - 1), x);
!!!8772123.java!!!	setTimestamp(in parameterIndex : int, inout x : Timestamp) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setTimestamp");
        }
        
        params.put(new Integer(parameterIndex - 1), x);
!!!8772251.java!!!	setAsciiStream(in parameterIndex : int, inout x : InputStream, in length : int) : void
        Object asciiStream[];
        checkParamIndex(parameterIndex);

        asciiStream = new Object[3];
        asciiStream[0] = x;
        asciiStream[1] = new Integer(length);
        asciiStream[2] = new Integer(ASCII_STREAM_PARAM);
        
        if(params == null){
             throw new SQLException("Set initParams() before setAsciiStream");
        }
        
        params.put(new Integer(parameterIndex - 1), asciiStream);        
!!!8772379.java!!!	setBinaryStream(in parameterIndex : int, inout x : InputStream, in length : int) : void
        Object binaryStream[];
        checkParamIndex(parameterIndex);

        binaryStream = new Object[3];
        binaryStream[0] = x;
        binaryStream[1] = new Integer(length);
        binaryStream[2] = new Integer(BINARY_STREAM_PARAM);
        if(params == null){
             throw new SQLException("Set initParams() before setBinaryStream");
        }
        
        params.put(new Integer(parameterIndex - 1), binaryStream);
!!!8772507.java!!!	setUnicodeStream(in parameterIndex : int, inout x : InputStream, in length : int) : void
        Object unicodeStream[];
        checkParamIndex(parameterIndex);

        unicodeStream = new Object[3];
        unicodeStream[0] = x;
        unicodeStream[1] = new Integer(length);
        unicodeStream[2] = new Integer(UNICODE_STREAM_PARAM);
        if(params == null){
             throw new SQLException("Set initParams() before setUnicodeStream");
        }
        params.put(new Integer(parameterIndex - 1), unicodeStream);
!!!8772635.java!!!	setCharacterStream(in parameterIndex : int, inout reader : Reader, in length : int) : void
        Object charStream[];
        checkParamIndex(parameterIndex);

        charStream = new Object[2];
        charStream[0] = reader;
        charStream[1] = new Integer(length);
        if(params == null){
             throw new SQLException("Set initParams() before setCharacterStream");
        }
        params.put(new Integer(parameterIndex - 1), charStream);
!!!8772763.java!!!	setObject(in parameterIndex : int, inout x : Object, in targetSqlType : int, in scale : int) : void
        Object obj[];
        checkParamIndex(parameterIndex);

        obj = new Object[3];
        obj[0] = x;
        obj[1] = new Integer(targetSqlType);
        obj[2] = new Integer(scale);
        if(params == null){
             throw new SQLException("Set initParams() before setObject");
        }
        params.put(new Integer(parameterIndex - 1), obj);
!!!8772891.java!!!	setObject(in parameterIndex : int, inout x : Object, in targetSqlType : int) : void
        Object obj[];
        checkParamIndex(parameterIndex);

        obj = new Object[2];
        obj[0] = x;
        obj[1] = new Integer(targetSqlType);
        if (params == null){
             throw new SQLException("Set initParams() before setObject");
        }
        params.put(new Integer(parameterIndex - 1), obj);
!!!8773019.java!!!	setObject(in parameterIndex : int, inout x : Object) : void
        checkParamIndex(parameterIndex);
        if (params == null) {
             throw new SQLException("Set initParams() before setObject");
        }
        params.put(new Integer(parameterIndex - 1), x);
!!!8773147.java!!!	setRef(in parameterIndex : int, inout ref : Ref) : void
        checkParamIndex(parameterIndex);
        if (params == null) {
             throw new SQLException("Set initParams() before setRef");
        }
        params.put(new Integer(parameterIndex - 1), new SerialRef(ref));
!!!8773275.java!!!	setBlob(in parameterIndex : int, inout x : Blob) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setBlob");
        }
        params.put(new Integer(parameterIndex - 1), new SerialBlob(x));
!!!8773403.java!!!	setClob(in parameterIndex : int, inout x : Clob) : void
 
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setClob");
        }
        params.put(new Integer(parameterIndex - 1), new SerialClob(x));    
!!!8773531.java!!!	setArray(in parameterIndex : int, inout array : Array) : void
        checkParamIndex(parameterIndex);
        if (params == null){
             throw new SQLException("Set initParams() before setArray");
        }
        params.put(new Integer(parameterIndex - 1), new SerialArray(array));    
!!!8773659.java!!!	setDate(in parameterIndex : int, inout x : Date, inout cal : Calendar) : void
        Object date[];
        checkParamIndex(parameterIndex);
        
        date = new Object[2];
        date[0] = x;
        date[1] = cal;
        if(params == null){
             throw new SQLException("Set initParams() before setDate");
        }
        params.put(new Integer(parameterIndex - 1), date);
!!!8773787.java!!!	setTime(in parameterIndex : int, inout x : Time, inout cal : Calendar) : void
        Object time[];
        checkParamIndex(parameterIndex);
        
        time = new Object[2];
        time[0] = x;
        time[1] = cal;
        if(params == null){
             throw new SQLException("Set initParams() before setTime");
        }
        params.put(new Integer(parameterIndex - 1), time);
!!!8773915.java!!!	setTimestamp(in parameterIndex : int, inout x : Timestamp, inout cal : Calendar) : void
        Object timestamp[];
        checkParamIndex(parameterIndex);

        timestamp = new Object[2];
        timestamp[0] = x;
        timestamp[1] = cal;
        if(params == null){
             throw new SQLException("Set initParams() before setTimestamp");
        }
        params.put(new Integer(parameterIndex - 1), timestamp);
!!!8774043.java!!!	clearParameters() : void
        params.clear();
!!!8774171.java!!!	getParams() : Object
        if (params == null) {
                    
            initParams();
            Object [] paramsArray = new Object[params.size()];
            return paramsArray;
            
        } else {
            // The parameters may be set in random order
            // but all must be set, check to verify all
            // have been set till the last parameter
            // else throw exception.

            Object[] paramsArray = new Object[params.size()];
            for (int i = 0; i < params.size(); i++) {
               paramsArray[i] = params.get(new Integer(i));
               if (paramsArray[i] == null) {
                 throw new SQLException("missing parameter: " + (i + 1));  
               } //end if
            } //end for
            return paramsArray;

        } //end if
   
