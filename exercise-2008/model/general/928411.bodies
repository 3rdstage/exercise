class HttpURLConnection
!!!7197595.java!!!	getHeaderFieldKey(in n : int) : String
	return null;
!!!7197723.java!!!	setFixedLengthStreamingMode(in contentLength : int) : void
	if (connected) {
	    throw new IllegalStateException ("Already connected");
	}
	if (chunkLength != -1) {
	    throw new IllegalStateException ("Chunked encoding streaming mode set");
	}
	if (contentLength < 0) {
	    throw new IllegalArgumentException ("invalid content length");
	}
	fixedContentLength = contentLength;
!!!7197851.java!!!	setChunkedStreamingMode(in chunklen : int) : void
	if (connected) {
	    throw new IllegalStateException ("Can't set streaming mode: already connected");
	}
	if (fixedContentLength != -1) {
	    throw new IllegalStateException ("Fixed length streaming mode set");
	}
	chunkLength = chunklen <=0? DEFAULT_CHUNK_SIZE : chunklen;
!!!7197979.java!!!	getHeaderField(in n : int) : String
	return null;
!!!7198107.java!!!	HttpURLConnection(inout u : URL)
	super(u);
!!!7198235.java!!!	setFollowRedirects(inout set : boolean) : void
	SecurityManager sec = System.getSecurityManager();
	if (sec != null) {
	    // seems to be the best check here...
	    sec.checkSetFactory();
	}
	followRedirects = set;
!!!7198363.java!!!	getFollowRedirects() : boolean
	return followRedirects;
!!!7198491.java!!!	setInstanceFollowRedirects(inout followRedirects : boolean) : void
 	instanceFollowRedirects = followRedirects;
!!!7198619.java!!!	getInstanceFollowRedirects() : boolean
         return instanceFollowRedirects;
!!!7198747.java!!!	setRequestMethod(in method : String) : void
	if (connected) {
	    throw new ProtocolException("Can't reset method: already connected");
	}
	// This restriction will prevent people from using this class to 
	// experiment w/ new HTTP methods using java.  But it should 
	// be placed for security - the request String could be
	// arbitrarily long.

	for (int i = 0; i < methods.length; i++) {
	    if (methods[i].equals(method)) {
		this.method = method;
		return;
	    }
	}
	throw new ProtocolException("Invalid HTTP method: " + method);
!!!7198875.java!!!	getRequestMethod() : String
	return method;
!!!7199003.java!!!	getResponseCode() : int
	/*
	 * We're got the response code already
	 */
	if (responseCode != -1) {
	    return responseCode;
	}

	/*
	 * Ensure that we have connected to the server. Record
	 * exception as we need to re-throw it if there isn't
	 * a status line.
	 */
	Exception exc = null;
	try {
            getInputStream();
	} catch (Exception e) {
	    exc = e;
	}

	/*
 	 * If we can't a status-line then re-throw any exception
	 * that getInputStream threw.
	 */
	String statusLine = getHeaderField(0);
	if (statusLine == null) {
	    if (exc != null) {
		if (exc instanceof RuntimeException)
                    throw (RuntimeException)exc;
                else
                    throw (IOException)exc;
	    }
	    return -1;
	}

	/*
	 * Examine the status-line - should be formatted as per
 	 * section 6.1 of RFC 2616 :-
	 *
	 * Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase
 	 *
	 * If status line can't be parsed return -1.
	 */
	if (statusLine.startsWith("HTTP/1.")) {
	    int codePos = statusLine.indexOf(' ');
	    if (codePos > 0) {

		int phrasePos = statusLine.indexOf(' ', codePos+1);
		if (phrasePos > 0 && phrasePos < statusLine.length()) {
		    responseMessage = statusLine.substring(phrasePos+1);
		}

		// deviation from RFC 2616 - don't reject status line
		// if SP Reason-Phrase is not included.
		if (phrasePos < 0) 
		    phrasePos = statusLine.length();

		try {
		    responseCode = Integer.parseInt
                            (statusLine.substring(codePos+1, phrasePos));	
		    return responseCode;
		} catch (NumberFormatException e) { }
	    }
	}
	return -1;
!!!7199131.java!!!	getResponseMessage() : String
	getResponseCode();
	return responseMessage;
!!!7199259.java!!!	getHeaderFieldDate(in name : String, in Default : long) : long
	String dateString = getHeaderField(name);
	try {
	    dateString.trim();
	    if (dateString.indexOf("GMT") == -1) {
	        dateString = dateString+" GMT";
	    }
	    return Date.parse(dateString);
	} catch (Exception e) {
	}
	return Default;
!!!7199643.java!!!	getPermission() : Permission
	int port = url.getPort();
	port = port < 0 ? 80 : port;
	String host = url.getHost() + ":" + port;
	Permission permission = new SocketPermission(host, "connect");
	return permission;
!!!7199771.java!!!	getErrorStream() : InputStream
	return null;
