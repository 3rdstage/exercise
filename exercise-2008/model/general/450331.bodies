class FlowStrategy
!!!2750875.java!!!	insertUpdate(inout fv : FlowView, inout e : DocumentEvent, inout alloc : Rectangle) : void
	    if (alloc != null) {
		Component host = fv.getContainer();
		if (host != null) {
		    host.repaint(alloc.x, alloc.y, alloc.width, alloc.height);
		}
	    } else {
		fv.preferenceChanged(null, true, true);
	    }
!!!2751003.java!!!	removeUpdate(inout fv : FlowView, inout e : DocumentEvent, inout alloc : Rectangle) : void
	    if (alloc != null) {
		Component host = fv.getContainer();
		if (host != null) {
		    host.repaint(alloc.x, alloc.y, alloc.width, alloc.height);
		}
	    } else {
		fv.preferenceChanged(null, true, true);
	    }
!!!2751131.java!!!	changedUpdate(inout fv : FlowView, inout e : DocumentEvent, inout alloc : Rectangle) : void
	    if (alloc != null) {
		Component host = fv.getContainer();
		if (host != null) {
		    host.repaint(alloc.x, alloc.y, alloc.width, alloc.height);
		}
	    } else {
		fv.preferenceChanged(null, true, true);
	    }
!!!2751259.java!!!	getLogicalView(inout fv : FlowView) : View
	    return fv.layoutPool;
!!!2751387.java!!!	layout(inout fv : FlowView) : void
	    int p0 = fv.getStartOffset(); 
	    int p1 = fv.getEndOffset();

	    // we want to preserve all views from the logicalView from being 
	    // removed
	    View lv = getLogicalView(fv);
	    int n = lv.getViewCount();
	    for( int i = 0; i < n; i++ ) {
		View v = lv.getView(i);
		v.setParent(lv);
	    }
	    fv.removeAll();
	    for (int rowIndex = 0; p0 < p1; rowIndex++) {
		View row = fv.createRow();
		fv.append(row);
		
		// layout the row to the current span.  If nothing fits,
		// force something.
		int next = layoutRow(fv, rowIndex, p0);
		if (row.getViewCount() == 0) {
		    row.append(createView(fv, p0, Integer.MAX_VALUE, rowIndex));
		    next = row.getEndOffset();
		}
		if (next <= p0) {
		    throw new StateInvariantError("infinite loop in formatting");
		} else {
		    p0 = next;
		}
	    }
!!!2751515.java!!!	layoutRow(inout fv : FlowView, in rowIndex : int, in pos : int) : int
	    View row = fv.getView(rowIndex);
	    int x = fv.getFlowStart(rowIndex);
	    int spanLeft = fv.getFlowSpan(rowIndex);
	    int end = fv.getEndOffset();
	    TabExpander te = (fv instanceof TabExpander) ? (TabExpander)fv : null;

	    // Indentation.
	    int preX = x;
	    int availableSpan = spanLeft;
	    preX = x;
	    
	    final int flowAxis = fv.getFlowAxis();
	    boolean forcedBreak = false;
	    while (pos < end  && spanLeft >= 0) {
		View v = createView(fv, pos, spanLeft, rowIndex);
		if ((v == null) 
                    || (spanLeft == 0 
                        &&  v.getPreferredSpan(flowAxis) > 0)) {
		    break;
		}
		
		int chunkSpan;
		if ((flowAxis == X_AXIS) && (v instanceof TabableView)) {
		    chunkSpan = (int) ((TabableView)v).getTabbedSpan(x, te);
		} else {
		    chunkSpan = (int) v.getPreferredSpan(flowAxis);
		}

		// If a forced break is necessary, break
		if (v.getBreakWeight(flowAxis, pos, spanLeft) >= ForcedBreakWeight) {
		    int n = row.getViewCount();
		    if (n > 0) {
			/* If this is a forced break and it's not the only view
			 * the view should be replaced with a call to breakView.
			 * If it's it only view, it should be used directly.  In
			 * either case no more children should be added beyond this
			 * view.
			 */
			v = v.breakView(flowAxis, pos, x, spanLeft);
			if (v != null) {
			    if ((flowAxis == X_AXIS) && (v instanceof TabableView)) {
				chunkSpan = (int) ((TabableView)v).getTabbedSpan(x, te);
			    } else {
				chunkSpan = (int) v.getPreferredSpan(flowAxis);
			    }
			} else {
			    chunkSpan = 0;
			}
		    }
		    forcedBreak = true;
		}
		
		spanLeft -= chunkSpan;
		x += chunkSpan;
		if (v != null) {
		    row.append(v);
		    pos = v.getEndOffset();
		}
		if (forcedBreak) {
		    break;
		}
		
	    }
	    if (spanLeft < 0) {
		// This row is too long and needs to be adjusted.
		adjustRow(fv, rowIndex, availableSpan, preX);
	    } else if (row.getViewCount() == 0) {
		// Impossible spec... put in whatever is left.
		View v = createView(fv, pos, Integer.MAX_VALUE, rowIndex);
		row.append(v);
	    }
	    return row.getEndOffset();
!!!2751643.java!!!	adjustRow(inout fv : FlowView, in rowIndex : int, in desiredSpan : int, in x : int) : void
	    final int flowAxis = fv.getFlowAxis();
	    View r = fv.getView(rowIndex);
	    int n = r.getViewCount();
	    int span = 0;
	    int bestWeight = BadBreakWeight;
	    int bestSpan = 0;
	    int bestIndex = -1;
	    int bestOffset = 0;
	    View v;
	    for (int i = 0; i < n; i++) {
		v = r.getView(i);
		int spanLeft = desiredSpan - span;
		
		int w = v.getBreakWeight(flowAxis, x + span, spanLeft);
		if ((w >= bestWeight) && (w > BadBreakWeight)) {
		    bestWeight = w;
		    bestIndex = i;
		    bestSpan = span;
		    if (w >= ForcedBreakWeight) {
			// it's a forced break, so there is
			// no point in searching further.
			break;
		    }
		}
		span += v.getPreferredSpan(flowAxis);
	    }
	    if (bestIndex < 0) {
		// there is nothing that can be broken, leave
		// it in it's current state.
		return;
	    }

	    // Break the best candidate view, and patch up the row.
	    int spanLeft = desiredSpan - bestSpan;
	    v = r.getView(bestIndex);
	    v = v.breakView(flowAxis, v.getStartOffset(), x + bestSpan, spanLeft);
	    View[] va = new View[1];
	    va[0] = v;
	    View lv = getLogicalView(fv);
	    for (int i = bestIndex; i < n; i++) {
		View tmpView = r.getView(i);
		if (contains(lv,tmpView)) {
		    tmpView.setParent(lv);
		} else if (tmpView.getViewCount() > 0) {
		    recursiveReparent(tmpView, lv);
		}
	    }
	    r.replace(bestIndex, n - bestIndex, va);
!!!2751771.java!!!	recursiveReparent(inout v : View, inout logicalView : View) : void
	    int n = v.getViewCount();
	    for (int i = 0; i < n; i++) {
		View tmpView = v.getView(i);
		if (contains(logicalView,tmpView)) {
		    tmpView.setParent(logicalView);
		} else {
		    recursiveReparent(tmpView, logicalView);
		}
	    }
!!!2751899.java!!!	contains(inout logicalView : View, inout v : View) : boolean
	    int n = logicalView.getViewCount();
	    for (int i = 0; i < n; i++) {
		if (logicalView.getView(i) == v) {
		    return true;
		}
	    }
	    return false;
!!!2752027.java!!!	createView(inout fv : FlowView, in startOffset : int, in spanLeft : int, in rowIndex : int) : View
	    // Get the child view that contains the given starting position
	    View lv = getLogicalView(fv);
	    int childIndex = lv.getViewIndex(startOffset, Position.Bias.Forward);
	    View v = lv.getView(childIndex);
	    if (startOffset==v.getStartOffset()) {
		// return the entire view
		return v;
	    }
	    
	    // return a fragment.
	    v = v.createFragment(startOffset, v.getEndOffset());
	    return v;
