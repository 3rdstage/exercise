class MotifInternalFrameUI
!!!2675099.java!!!	createUI(inout w : JComponent) : ComponentUI
        return new MotifInternalFrameUI((JInternalFrame)w);
!!!2675227.java!!!	MotifInternalFrameUI(inout w : JInternalFrame)
        super(w);
!!!2675355.java!!!	installUI(inout c : JComponent) : void
        super.installUI(c);
        setColors((JInternalFrame)c);
!!!2675483.java!!!	installDefaults() : void
	Border frameBorder = frame.getBorder();
        frame.setLayout(internalFrameLayout = createLayoutManager());
        if (frameBorder == null || frameBorder instanceof UIResource) {
            frame.setBorder(new MotifBorders.InternalFrameBorder(frame));
        }	
!!!2675611.java!!!	installKeyboardActions() : void
      super.installKeyboardActions();
      // We replace the 
      // we use JPopup in our TitlePane so need escape support
      closeMenuKey = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
!!!2675739.java!!!	uninstallDefaults() : void
        LookAndFeel.uninstallBorder(frame);
        frame.setLayout(null);
        internalFrameLayout = null;
!!!2675867.java!!!	getFrame() : JInternalFrame
      return frame;
!!!2675995.java!!!	createNorthPane(inout w : JInternalFrame) : JComponent
        titlePane = new MotifInternalFrameTitlePane(w);
        return titlePane;
!!!2676123.java!!!	getMaximumSize(inout x : JComponent) : Dimension
        return Toolkit.getDefaultToolkit().getScreenSize();
!!!2676251.java!!!	uninstallKeyboardActions() : void
      super.uninstallKeyboardActions();
      if (isKeyBindingRegistered()){
	JInternalFrame.JDesktopIcon di = frame.getDesktopIcon();
	SwingUtilities.replaceUIActionMap(di, null);
	SwingUtilities.replaceUIInputMap(di, JComponent.WHEN_IN_FOCUSED_WINDOW,
					 null);
      }
!!!2676379.java!!!	setupMenuOpenKey() : void
	super.setupMenuOpenKey();
	ActionMap map = SwingUtilities.getUIActionMap(frame);
	if (map != null) {
	    // BasicInternalFrameUI creates an action with the same name, we override
	    // it as MotifInternalFrameTitlePane has a titlePane ivar that shadows the
	    // titlePane ivar in BasicInternalFrameUI, making supers action throw
	    // an NPE for us.
	    map.put("showSystemMenu", new AbstractAction(){
		public void actionPerformed(ActionEvent e){
		    titlePane.showSystemMenu();
		}
		public boolean isEnabled(){
		    return isKeyBindingActive();
		}
	    });
	}
!!!2676507.java!!!	setupMenuCloseKey() : void
	ActionMap map = SwingUtilities.getUIActionMap(frame);
	if (map != null) {
	    map.put("hideSystemMenu", new AbstractAction(){
		public void actionPerformed(ActionEvent e){
		    titlePane.hideSystemMenu();
		}
		public boolean isEnabled(){
		    return isKeyBindingActive();
		}
	    });
	}

	// Set up the bindings for the DesktopIcon, it is odd that
	// we install them, and not the desktop icon.
	JInternalFrame.JDesktopIcon di = frame.getDesktopIcon();
	InputMap diInputMap = SwingUtilities.getUIInputMap
	                  (di, JComponent.WHEN_IN_FOCUSED_WINDOW);
	if (diInputMap == null) {
	    Object[] bindings = (Object[])UIManager.get
		                          ("DesktopIcon.windowBindings");
	    if (bindings != null) {
		diInputMap = LookAndFeel.makeComponentInputMap(di, bindings);

		SwingUtilities.replaceUIInputMap(di, JComponent.
					       WHEN_IN_FOCUSED_WINDOW,
					       diInputMap);
	    }
	}
	ActionMap diActionMap = SwingUtilities.getUIActionMap(di);
	if (diActionMap == null) {
	    diActionMap = new ActionMapUIResource();
	    diActionMap.put("hideSystemMenu", new AbstractAction(){
		public void actionPerformed(ActionEvent e){
		    JInternalFrame.JDesktopIcon icon = getFrame().
			             getDesktopIcon();
		    MotifDesktopIconUI micon = (MotifDesktopIconUI)icon.
			                       getUI();
		    micon.hideSystemMenu();
		}
		public boolean isEnabled(){
		    return isKeyBindingActive();
		}
	    });
	    SwingUtilities.replaceUIActionMap(di, diActionMap);
	}
!!!2676635.java!!!	activateFrame(inout f : JInternalFrame) : void
        super.activateFrame(f);
        setColors(f);
!!!2676763.java!!!	deactivateFrame(inout f : JInternalFrame) : void
        setColors(f);
        super.deactivateFrame(f);
!!!2676891.java!!!	setColors(inout frame : JInternalFrame) : void
        if (frame.isSelected()) {
            color = UIManager.getColor("InternalFrame.activeTitleBackground");
        } else {
            color = UIManager.getColor("InternalFrame.inactiveTitleBackground");
        }
        highlight = color.brighter();
        shadow = color.darker().darker();
        titlePane.setColors(color, highlight, shadow);
