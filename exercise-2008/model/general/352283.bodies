class JFIFThumbUncompressed
!!!1984667.java!!!	JFIFThumbUncompressed(inout buffer : JPEGBuffer, in width : int, in height : int, in skip : int, in name : String)
            super(buffer);
            thumbWidth = width;
            thumbHeight = height;
            // Now skip the thumbnail data
            buffer.skipData(skip);
            this.name = name;
!!!1984795.java!!!	JFIFThumbUncompressed(inout node : Node, in name : String)

            thumbWidth = 0;
            thumbHeight = 0;
            this.name = name;
            NamedNodeMap attrs = node.getAttributes();
            int count = attrs.getLength();
            if (count > 2) {
                throw new IIOInvalidTreeException
                    (name +" node cannot have > 2 attributes", node);
            }
            if (count != 0) {
                int value = getAttributeValue(node, attrs, "thumbWidth", 
                                              0, 255, false);
                thumbWidth = (value != -1) ? value : thumbWidth;
                value = getAttributeValue(node, attrs, "thumbHeight", 
                                          0, 255, false);
                thumbHeight = (value != -1) ? value : thumbHeight;
            }
!!!1984923.java!!!	JFIFThumbUncompressed(inout thumb : BufferedImage)
            thumbnail = thumb;
            thumbWidth = thumb.getWidth();
            thumbHeight = thumb.getHeight();
            name = null;  // not used when writing
!!!1985051.java!!!	readByteBuffer(inout iis : ImageInputStream, in data : byte, inout reader : JPEGImageReader, in workPortion : float, in workOffset : float) : void
            int progInterval = Math.max((int)(data.length/20/workPortion),
                                        1);
            for (int offset = 0; 
                 offset < data.length;) {
                int len = Math.min(progInterval, data.length-offset);
                iis.read(data, offset, len);
                offset += progInterval;
                float percentDone = ((float) offset* 100) 
                    / data.length
                    * workPortion + workOffset;
                if (percentDone > 100.0F) {
                    percentDone = 100.0F;
                }
                reader.thumbnailProgress (percentDone);
            }
!!!1985179.java!!!	getWidth() : int
            return thumbWidth;
!!!1985307.java!!!	getHeight() : int
            return thumbHeight;
!!!1985435.java!!!	getNativeNode() : IIOMetadataNode
            IIOMetadataNode node = new IIOMetadataNode(name);
            node.setAttribute("thumbWidth", Integer.toString(thumbWidth));
            node.setAttribute("thumbHeight", Integer.toString(thumbHeight));
            return node;
!!!1985563.java!!!	write(inout ios : ImageOutputStream, inout writer : JPEGImageWriter) : void
            if ((thumbWidth > MAX_THUMB_WIDTH) 
                || (thumbHeight > MAX_THUMB_HEIGHT)) {
                writer.warningOccurred(JPEGImageWriter.WARNING_THUMB_CLIPPED);
            }
            thumbWidth = Math.min(thumbWidth, MAX_THUMB_WIDTH);
            thumbHeight = Math.min(thumbHeight, MAX_THUMB_HEIGHT);
            ios.write(thumbWidth);
            ios.write(thumbHeight);
!!!1985691.java!!!	writePixels(inout ios : ImageOutputStream, inout writer : JPEGImageWriter) : void
            if ((thumbWidth > MAX_THUMB_WIDTH) 
                || (thumbHeight > MAX_THUMB_HEIGHT)) {
                writer.warningOccurred(JPEGImageWriter.WARNING_THUMB_CLIPPED);
            }
            thumbWidth = Math.min(thumbWidth, MAX_THUMB_WIDTH);
            thumbHeight = Math.min(thumbHeight, MAX_THUMB_HEIGHT);
            int [] data = thumbnail.getRaster().getPixels(0, 0, 
                                                          thumbWidth, 
                                                          thumbHeight, 
                                                          (int []) null);
            writeThumbnailData(ios, data, writer);
!!!1985819.java!!!	print() : void
            System.out.print(name + " width: ");
            System.out.println(thumbWidth);
            System.out.print(name + " height: ");
            System.out.println(thumbHeight);
