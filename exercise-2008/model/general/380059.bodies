class InputMap
!!!2722203.java!!!	setParent(inout map : InputMap) : void
	this.parent = map;
!!!2722331.java!!!	getParent() : InputMap
	return parent;
!!!2722459.java!!!	put(inout keyStroke : KeyStroke, inout actionMapKey : Object) : void
	if (keyStroke == null) {
	    return;
	}
	if (actionMapKey == null) {
	    remove(keyStroke);
	}
	else {
	    if (arrayTable == null) {
		arrayTable = new ArrayTable();
	    }
	    arrayTable.put(keyStroke, actionMapKey);
	}
!!!2722587.java!!!	get(inout keyStroke : KeyStroke) : Object
	if (arrayTable == null) {
	    InputMap    parent = getParent();

	    if (parent != null) {
		return parent.get(keyStroke);
	    }
	    return null;
	}
	Object value = arrayTable.get(keyStroke);

	if (value == null) {
	    InputMap    parent = getParent();

	    if (parent != null) {
		return parent.get(keyStroke);
	    }
	}
	return value;
!!!2722715.java!!!	remove(inout key : KeyStroke) : void
	if (arrayTable != null) {
	    arrayTable.remove(key);
	}
!!!2722843.java!!!	clear() : void
	if (arrayTable != null) {
	    arrayTable.clear();
	}
!!!2722971.java!!!	keys() : KeyStroke
	if (arrayTable == null) {
	    return null;
	}
	KeyStroke[] keys = new KeyStroke[arrayTable.size()];
	arrayTable.getKeys(keys);
	return keys;
!!!2723099.java!!!	size() : int
	if (arrayTable == null) {
	    return 0;
	}
	return arrayTable.size();
!!!2723227.java!!!	allKeys() : KeyStroke
	int             count = size();
	InputMap        parent = getParent();

	if (count == 0) {
	    if (parent != null) {
		return parent.allKeys();
	    }
	    return keys();
	}
	if (parent == null) {
	    return keys();
	}
	KeyStroke[]    keys = keys();
	KeyStroke[]    pKeys =  parent.allKeys();

	if (pKeys == null) {
	    return keys;
	}
	if (keys == null) {
	    // Should only happen if size() != keys.length, which should only
	    // happen if mutated from multiple threads (or a bogus subclass).
	    return pKeys;
	}

	HashMap        keyMap = new HashMap();
	int            counter;

	for (counter = keys.length - 1; counter >= 0; counter--) {
	    keyMap.put(keys[counter], keys[counter]);
	}
	for (counter = pKeys.length - 1; counter >= 0; counter--) {
	    keyMap.put(pKeys[counter], pKeys[counter]);
	}

	KeyStroke[]    allKeys = new KeyStroke[keyMap.size()];

	return (KeyStroke[])keyMap.keySet().toArray(allKeys);
!!!2723355.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();

        ArrayTable.writeArrayTable(s, arrayTable);
!!!2723483.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();
	for (int counter = s.readInt() - 1; counter >= 0; counter--) {
	    put((KeyStroke)s.readObject(), s.readObject());
	}
