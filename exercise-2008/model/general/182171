format 66
"modelmbean" // src::javax::management::modelmbean
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "javax/management/modelmbean"
  java_package "javax.management.modelmbean"
  classview 176923 "modelmbean"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 1034779 "DescriptorSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents the metadata set for a ModelMBean element.  A
descriptor is part of the ModelMBeanInfo,
ModelMBeanNotificationInfo, ModelMBeanAttributeInfo,
ModelMBeanConstructorInfo, and ModelMBeanParameterInfo.
<P>
A descriptor consists of a collection of fields.  Each field is in
fieldname=fieldvalue format.  Field names are not case sensitive,
case will be preserved on field values.
<P>
All field names and values are not predefined. New fields can be
defined and added by any program.  Some fields have been predefined
for consistency of implementation and support by the
ModelMBeanInfo, ModelMBeanAttributeInfo, ModelMBeanConstructorInfo,
ModelMBeanNotificationInfo, ModelMBeanOperationInfo and ModelMBean
classes.

@since 1.5"
      classrelation 2042523 // <realization>
	relation 2042523 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2042523 // <realization>
	  b parent class_ref 1030299 // Descriptor
      end

      attribute 3032859 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  8071560848919417985L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form"
      end

      attribute 3032987 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -6292969195866300415L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version for new serial form"
      end

      classrelation 2042651 // oldSerialPersistentFields (<unidirectional association>)
	relation 2042651 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "= 
    {
      new ObjectStreamField(\"descriptor\", HashMap.class),
      new ObjectStreamField(\"currClass\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2042651 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      classrelation 2042779 // newSerialPersistentFields (<unidirectional association>)
	relation 2042779 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "= 
    {
      new ObjectStreamField(\"descriptor\", HashMap.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2042779 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3033115 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual serial version and serial form"
      end

      classrelation 2042907 // serialPersistentFields (<unidirectional association>)
	relation 2042907 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField descriptor HashMap The collection of fields representing this descriptor

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2042907 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3033243 "serialForm"
	class_attribute const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 169627 "initialization"
	
	cpp "" ""
	java "  static {
	String form = null;
	boolean compat = false;
	try {
	    GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
	    form = (String) AccessController.doPrivileged(act);
	    compat = \"1.0\".equals(form);  // form may be null
	} catch (Exception e) {
	    // OK: No compat with 1.0
	}
	serialForm = form;
	if (compat) {
	    serialPersistentFields = oldSerialPersistentFields;
	    serialVersionUID = oldSerialVersionUID;
	} else {
	    serialPersistentFields = newSerialPersistentFields;
	    serialVersionUID = newSerialVersionUID;
	}
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 2043035 // descriptorMap (<unidirectional association>)
	relation 2043035 --->
	  a role_name "descriptorMap" private
	    comment " END Serialization compatibility stuff
 Spec says that field names are case-insensitive, but that case
is preserved.  This means that we need to be able to map from a
name that may differ in case to the actual name that is used in
the HashMap.  Thus, descriptorMap is a TreeMap with a Comparator
that ignores case.

Previous versions of this class had a field called \"descriptor\"
of type HashMap where the keys were directly Strings.  This is
hard to reconcile with the required semantics, so we fabricate
that field virtually during serialization and deserialization
but keep the real information in descriptorMap.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Object> ${name}${value};
"
	    classrelation_ref 2043035 // descriptorMap (<unidirectional association>)
	  b parent class_ref 140827 // SortedMap
      end

      attribute 3033371 "DEFAULT_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3033499 "currClass"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"DescriptorSupport\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8285723 "DescriptorSupport"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Descriptor default constructor.
Default initial descriptor size is 20.  It will grow as needed.<br>
Note that the created empty descriptor is not a valid descriptor
(the method {@link #isValid isValid} returns <CODE>false</CODE>)"
      end

      operation 8285851 "DescriptorSupport"
	public explicit_return_type ""
	nparams 1
	  param in name "initNumFields" explicit_type "int"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Descriptor constructor.  Takes as parameter the initial
capacity of the Map that stores the descriptor fields.
Capacity will grow as needed.<br> Note that the created empty
descriptor is not a valid descriptor (the method {@link
#isValid isValid} returns <CODE>false</CODE>).

@param initNumFields The initial capacity of the Map that
stores the descriptor fields.

@exception RuntimeOperationsException for illegal value for
initNumFields (&lt;= 0)
@exception MBeanException Wraps a distributed communication Exception."
      end

      operation 8285979 "DescriptorSupport"
	public explicit_return_type ""
	nparams 1
	  param inout name "inDescr" type class_ref 1034779 // DescriptorSupport
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Descriptor constructor taking a Descriptor as parameter.
Creates a new descriptor initialized to the values of the
descriptor passed in parameter.

@param inDescr the descriptor to be used to initialize the
constructed descriptor. If it is null or contains no descriptor
fields, an empty Descriptor will be created."
      end

      operation 8286107 "DescriptorSupport"
	public explicit_return_type ""
	nparams 1
	  param in name "inStr" explicit_type "String"
	nexceptions 3
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	  exception class_ref 1034907 // XMLParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Descriptor constructor taking an XML String.</p>

<p>The format of the XML string is not defined, but an
implementation must ensure that the string returned by
{@link #toXMLString() toXMLString()} on an existing
descriptor can be used to instantiate an equivalent
descriptor using this constructor.</p>

<p>In this implementation, all field values will be created
as Strings.  If the field values are not Strings, the
programmer will have to reset or convert these fields
correctly.</p>

@param inStr An XML-formatted string used to populate this
Descriptor.  The format is not defined, but any
implementation must ensure that the string returned by
method {@link #toXMLString toXMLString} on an existing
descriptor can be used to instantiate an equivalent
descriptor when instantiated using this constructor.

@exception RuntimeOperationsException If the String inStr
passed in parameter is null
@exception XMLParseException XML parsing problem while parsing
the input String
@exception MBeanException Wraps a distributed communication Exception.

 At some stage we should rewrite this code to be cleverer.  Using
a StringTokenizer as we do means, first, that we accept a lot of
bogus strings without noticing they are bogus, and second, that we
split the string being parsed at characters like > even if they
occur in the middle of a field value. "
      end

      operation 8286235 "DescriptorSupport"
	public explicit_return_type ""
	nparams 2
	  param in name "fieldNames" explicit_type "String"
	  param inout name "fieldValues" explicit_type "Object"
	nexceptions 1
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor taking field names and field values.  The array and
array elements cannot be null.

@param fieldNames String array of field names.  No elements of
this array can be null.
@param fieldValues Object array of the corresponding field
values.  Elements of the array can be null. The
<code>fieldValue</code> must be valid for the
<code>fieldName</code> (as defined in method {@link #isValid
isValid})

<p>Note: array sizes of parameters should match. If both arrays
are null or empty, then an empty descriptor is created.</p>

@exception RuntimeOperationsException for illegal value for
field Names or field Values.  The array lengths must be equal.
If the descriptor construction fails for any reason, this
exception will be thrown.
"
      end

      operation 8286363 "DescriptorSupport"
	public explicit_return_type ""
	nparams 1
	  param in name "fields" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor taking fields in the <i>fieldName=fieldValue</i>
format.

@param fields String array with each element containing a
field name and value.  If this array is null or empty, then the
default constructor will be executed. Null strings or empty
strings will be ignored.

<p>All field values should be Strings.  If the field values are
not Strings, the programmer will have to reset or convert these
fields correctly.

<p>Note: Each string should be of the form
<i>fieldName=fieldValue</i>.

@exception RuntimeOperationsException for illegal value for
field Names or field Values.  The field must contain an
\"=\". \"=fieldValue\", \"fieldName\", and \"fieldValue\" are illegal.
FieldName cannot be null.  \"fieldName=\" will cause the value to
be null.  If the descriptor construction fails for any reason,
this exception will be thrown.
"
      end

      operation 8286491 "init"
	private explicit_return_type "void"
	nparams 1
	  param inout name "initMap" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8286619 "getFieldValue"
	public explicit_return_type "Object"
	nparams 1
	  param in name "inFieldName" explicit_type "String"
	nexceptions 1
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Implementation of the Descriptor interface

Returns the value for a specific fieldname.

@param inFieldName The field name in question; if not found,
null is returned.

@return An Object representing the field value

@exception RuntimeOperationsException for illegal value (null
or empty string) for field Names."
      end

      operation 8286747 "setField"
	public explicit_return_type "void"
	nparams 2
	  param in name "inFieldName" explicit_type "String"
	  param inout name "fieldValue" explicit_type "Object"
	nexceptions 1
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the string value for a specific fieldname. The value
must be valid for the field (as defined in method {@link
#isValid isValid}).  If the field does not exist, it is
added to the Descriptor.  If it does exist, the
value is replaced.

@param inFieldName The field name to be set. Must
not be null or empty string.
@param fieldValue The field value to be set for the field
name. Can be null or empty string.

@exception RuntimeOperationsException for illegal value for
field Names.
"
      end

      operation 8286875 "getFields"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the fields in the descriptor. The order is not the
order in which the fields were set.

@return String array of fields in the format
<i>fieldName=fieldValue</i>. If there are no fields in the
descriptor, then an empty String array is returned. If a
fieldValue is not a String then the toString() method is called
on it and its returned value is used as the value for the field
enclosed in parenthesis.

@see #setFields"
      end

      operation 8287003 "getFieldNames"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the fields names in the descriptor. The order is
not the order in which the fields were set.

@return String array of fields names. If the descriptor is
empty, you will get an empty array.
"
      end

      operation 8287131 "getFieldValues"
	public explicit_return_type "Object"
	nparams 1
	  param in name "fieldNames" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the field values in the descriptor as an array of
Objects. The returned values are in the same order as the
fieldNames String array parameter.

@param fieldNames String array of the names of the fields that
the values should be returned for.<br>
If the array is empty then an empty array will be returned.<br>
If the array is 'null' then all values will be returned. The
order is not the order in which the fields were set.<br>
If a field name in the array does not exist, then null is
returned for the matching array element being returned.

@return Object array of field values. If the descriptor is
empty, you will get an empty array."
      end

      operation 8287259 "setFields"
	public explicit_return_type "void"
	nparams 2
	  param in name "fieldNames" explicit_type "String"
	  param inout name "fieldValues" explicit_type "Object"
	nexceptions 1
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets all Fields in the list to the new value with the same
index in the fieldValue array.  Array sizes must match.  The
field value will be validated before it is set (by calling the
method {@link #isValid isValid}).  If it is not valid, then an
exception will be thrown.  If the arrays are empty, then no
change will take effect.

@param fieldNames String array of field names. The array and
array elements cannot be null.
@param fieldValues Object array of the corresponding field
values.  The array cannot be null.  Elements of the array can
be null.

@exception RuntimeOperationsException for illegal value for
field Names or field Values.  Neither can be null.  The array
lengths must be equal.

@see #getFields"
      end

      operation 8287387 "clone"
	public explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new Descriptor which is a duplicate of the Descriptor.

@exception RuntimeOperationsException for illegal value for
field Names or field Values.  If the descriptor construction
fails for any reason, this exception will be thrown."
      end

      operation 8287515 "removeField"
	public explicit_return_type "void"
	nparams 1
	  param in name "fieldName" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a field from the descriptor.

@param fieldName String name of the field to be removed.
If the field is not found no exception is thrown."
      end

      operation 8287643 "isValid"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if all of the fields have legal values given their
names.
<P>
This implementation does not support  interoperating with a directory
or lookup service. Thus, conforming to the specification, no checking is
done on the <i>\"export\"</i> field.
<P>
Otherwise this implementation returns false if:
<P>
<UL>
<LI> name and descriptorType fieldNames are not defined, or
null, or empty, or not String
<LI> class, role, getMethod, setMethod fieldNames, if defined,
are null or not String
<LI> persistPeriod, currencyTimeLimit, lastUpdatedTimeStamp,
lastReturnedTimeStamp if defined, are null, or not a Numeric
String or not a Numeric Value >= -1
<LI> log fieldName, if defined, is null, or not a Boolean or
not a String with value \"t\", \"f\", \"true\", \"false\". These String
values must not be case sensitive.
<LI> visibility fieldName, if defined, is null, or not a
Numeric String or a not Numeric Value >= 1 and <= 4
<LI> severity fieldName, if defined, is null, or not a Numeric
String or not a Numeric Value >= 0 and <= 6<br>
<LI> persistPolicy fieldName, if defined, is null, or not a
following String :<br>
  \"OnUpdate\", \"OnTimer\", \"NoMoreOftenThan\", \"Always\",
  \"Never\". These String values must not be case sensitive.<br>
</UL>

@exception RuntimeOperationsException If the validity checking
fails for any reason, this exception will be thrown."
      end

      operation 8287771 "validateField"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "fldName" explicit_type "String"
	  param inout name "fldValue" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " worker routine for isValid()
 name is not null
 descriptorType is not null
 getMethod and setMethod are not null
 persistPeriod is numeric
 currencyTimeLimit is numeric
 lastUpdatedTimeStamp is numeric
 visibility is 1-4
 severity is 0-6
 log is T or F
 role is not null
 class is not null
 lastReturnedTimeStamp is numeric"
      end

      operation 8287899 "toXMLString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns an XML String representing the descriptor.</p>

<p>The format is not defined, but an implementation must
ensure that the string returned by this method can be
used to build an equivalent descriptor when instantiated
using the constructor {@link #DescriptorSupport(String)
DescriptorSupport(String inStr)}.</p>

<p>Fields which are not String objects will have toString()
called on them to create the value. The value will be
enclosed in parentheses.  It is not guaranteed that you can
reconstruct these objects unless they have been
specifically set up to support toString() in a meaningful
format and have a matching constructor that accepts a
String in the same format.</p>

<p>If the descriptor is empty the following String is
returned: &lt;Descriptor&gt;&lt;/Descriptor&gt;</p>

@return the XML string.

@exception RuntimeOperationsException for illegal value for
field Names or field Values.  If the XML formated string
construction fails for any reason, this exception will be
thrown."
      end

      attribute 3033627 "entities"
	class_attribute const_attribute private explicit_type "String"
	multiplicity "[]"
	init_value "=  {
	\" &#32;\",
	\"\\\"&quot;\",
	\"<&lt;\",
	\">&gt;\",
	\"&&amp;\",
	\"\\r&#13;\",
	\"\\t&#9;\",
	\"\\n&#10;\",
	\"\\f&#12;\",
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 2043163 // entityToCharMap (<unidirectional association>)
	relation 2043163 --->
	  a role_name "entityToCharMap" init_value "= 
	new HashMap<String,Character>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,Character> ${name}${value};
"
	    classrelation_ref 2043163 // entityToCharMap (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      attribute 3033755 "charToEntityMap"
	class_attribute const_attribute private explicit_type "String"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 169755 "initialization"
	
	cpp "" ""
	java "  static {
	char maxChar = 0;
	for (int i = 0; i < entities.length; i++) {
	    final char c = entities[i].charAt(0);
	    if (c > maxChar)
		maxChar = c;
	}
	charToEntityMap = new String[maxChar + 1];
	for (int i = 0; i < entities.length; i++) {
	    final char c = entities[i].charAt(0);
	    final String entity = entities[i].substring(1);
	    charToEntityMap[c] = entity;
	    entityToCharMap.put(entity, new Character(c));
	}
    }"
	php ""
	python ""
	idl ""
      end

      operation 8288027 "isMagic"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8288155 "quote"
	class_operation private explicit_return_type "String"
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Quote the string so that it will be acceptable to the (String)
constructor.  Since the parsing code in that constructor is fairly
stupid, we're obliged to quote apparently innocuous characters like
space, <, and >.  In a future version, we should rewrite the parser
and only quote \" plus either \\ or & (depending on the quote syntax)."
      end

      operation 8288283 "unquote"
	class_operation private explicit_return_type "String"
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 1034907 // XMLParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8288411 "makeFieldValue"
	class_operation private explicit_return_type "String"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make the string that will go inside \"...\" for a value that is not
a plain String.
@throws RuntimeOperationsException if the value cannot be encoded."
      end

      operation 8288539 "parseQuotedFieldValue"
	class_operation private explicit_return_type "Object"
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 1034907 // XMLParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse a field value from the XML produced by toXMLString().
Given a descriptor XML containing <field name=\"nnn\" value=\"vvv\">,
the argument to this method will be \"vvv\" (a string including the
containing quote characters).  If vvv begins and ends with parentheses,
then it may contain:
- the characters \"null\", in which case the result is null;
- a value of the form \"some.class.name/xxx\", in which case the
result is equivalent to `new some.class.name(\"xxx\")';
- some other string, in which case the result is that string,
without the parentheses."
      end

      operation 8288667 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <pv>a human readable string representing the
descriptor</pv>.  The string will be in the format of
\"fieldName=fieldValue,fieldName2=fieldValue2,...\"<br>

If there are no fields in the descriptor, then an empty String
is returned.<br>

If a fieldValue is an object then the toString() method is
called on it and its returned value is used as the value for
the field enclosed in parenthesis.

@exception RuntimeOperationsException for illegal value for
field Names or field Values.  If the descriptor string fails
for any reason, this exception will be thrown."
      end

      operation 8288795 "toNumeric"
	private explicit_return_type "long"
	nparams 1
	  param in name "inStr" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " utility to convert to int, returns -2 if bogus."
      end

      operation 8288923 "tracing"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Trace and debug functions"
      end

      operation 8289051 "trace"
	private explicit_return_type "void"
	nparams 3
	  param in name "inClass" explicit_type "String"
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8289179 "trace"
	private explicit_return_type "void"
	nparams 2
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8289307 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link DescriptorSupport} from an {@link
ObjectInputStream}."
      end

      operation 8289435 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link DescriptorSupport} to an {@link ObjectOutputStream}.

 If you set jmx.serial.form to \"1.2.0\" or \"1.2.1\", then we are
bug-compatible with those versions.  Specifically, field names
are forced to lower-case before being written.  This
contradicts the spec, which, though it does not mention
serialization explicitly, does say that the case of field names
is preserved.  But in 1.2.0 and 1.2.1, this requirement was not
met.  Instead, field names in the descriptor map were forced to
lower case.  Those versions expect this to have happened to a
descriptor they deserialize and e.g. getFieldValue will not
find a field whose name is spelt with a different case."
      end
    end

    class 1034907 "XMLParseException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when an XML formatted string is being parsed into ModelMBean objects
or when XML formatted strings are being created from ModelMBean objects.

It is also used to wrapper exceptions from XML parsers that may be used.

@since 1.5"
      classrelation 2051099 // <generalisation>
	relation 2051099 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2051099 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      attribute 3039003 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -7780049316655891976L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form "
      end

      attribute 3039131 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  3176664577895105181L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version for new serial form "
      end

      classrelation 2051227 // oldSerialPersistentFields (<unidirectional association>)
	relation 2051227 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"msgStr\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2051227 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      classrelation 2051355 // newSerialPersistentFields (<unidirectional association>)
	relation 2051355 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "=  { }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2051355 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3039259 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual serial version and serial form"
      end

      classrelation 2051483 // serialPersistentFields (<unidirectional association>)
	relation 2051483 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2051483 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3039387 "compat"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 170907 "initialization"
	
	cpp "" ""
	java "  static {
	try {
	    PrivilegedAction act = new GetPropertyAction(\"jmx.serial.form\");
	    String form = (String) AccessController.doPrivileged(act);
	    compat = (form != null && form.equals(\"1.0\"));
	} catch (Exception e) {
	    // OK: No compat with 1.0
	}
	if (compat) {
	    serialPersistentFields = oldSerialPersistentFields;
	    serialVersionUID = oldSerialVersionUID;
	} else {
	    serialPersistentFields = newSerialPersistentFields;
	    serialVersionUID = newSerialVersionUID;
	}
    }"
	php ""
	python ""
	idl ""
      end

      operation 8310811 "XMLParseException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " END Serialization compatibility stuff

Default constructor ."
      end

      operation 8310939 "XMLParseException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor taking a string.

@param s the detail message."
      end

      operation 8311067 "XMLParseException"
	public explicit_return_type ""
	nparams 2
	  param inout name "e" type class_ref 165403 // Exception
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor taking a string and an exception.

@param e the nested exception.
@param s the detail message."
      end

      operation 8311195 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes an {@link XMLParseException} from an {@link ObjectInputStream}."
      end

      operation 8311323 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes an {@link XMLParseException} to an {@link ObjectOutputStream}."
      end
    end

    class 1035035 "InvalidTargetObjectTypeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Exception thrown when an invalid target object type is specified.
   

@since 1.5"
      classrelation 2043291 // <generalisation>
	relation 2043291 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2043291 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      attribute 3033883 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  3711724570458346634L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form "
      end

      attribute 3034011 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  1190536278266811217L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version for new serial form "
      end

      classrelation 2043419 // oldSerialPersistentFields (<unidirectional association>)
	relation 2043419 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"msgStr\", String.class),
      new ObjectStreamField(\"relatedExcept\", Exception.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2043419 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      classrelation 2043547 // newSerialPersistentFields (<unidirectional association>)
	relation 2043547 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"exception\", Exception.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2043547 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3034139 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual serial version and serial form"
      end

      classrelation 2043675 // serialPersistentFields (<unidirectional association>)
	relation 2043675 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField exception Exception Encapsulated {@link Exception}

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2043675 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3034267 "compat"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 169883 "initialization"
	
	cpp "" ""
	java "  static {
	try {
	    PrivilegedAction act = new GetPropertyAction(\"jmx.serial.form\");
	    String form = (String) AccessController.doPrivileged(act);
	    compat = (form != null && form.equals(\"1.0\"));
	} catch (Exception e) {
	    // OK: No compat with 1.0
	}
	if (compat) {
	    serialPersistentFields = oldSerialPersistentFields;
	    serialVersionUID = oldSerialVersionUID;
	} else {
	    serialPersistentFields = newSerialPersistentFields;
	    serialVersionUID = newSerialVersionUID;
	}
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 2043803 // exception (<unidirectional association>)
	relation 2043803 --->
	  a role_name "exception" package
	    comment " END Serialization compatibility stuff

@serial Encapsulated {@link Exception}

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2043803 // exception (<unidirectional association>)
	  b parent class_ref 165403 // Exception
      end

      operation 8289563 "InvalidTargetObjectTypeException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor."
      end

      operation 8289691 "InvalidTargetObjectTypeException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor from a string.

@param s String value that will be incorporated in the message for
   this exception. "
      end

      operation 8289819 "InvalidTargetObjectTypeException"
	public explicit_return_type ""
	nparams 2
	  param inout name "e" type class_ref 165403 // Exception
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor taking an exception and a string.

@param e Exception that we may have caught to reissue as an
   InvalidTargetObjectTypeException.  The message will be used, and we may want to
   consider overriding the printStackTrace() methods to get data
   pointing back to original throw stack. 
@param s String value that will be incorporated in message for
   this exception. "
      end

      operation 8289947 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes an {@link InvalidTargetObjectTypeException} from an {@link ObjectInputStream}."
      end

      operation 8290075 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes an {@link InvalidTargetObjectTypeException} to an {@link ObjectOutputStream}."
      end
    end

    class 1035163 "ModelMBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface must be implemented by the ModelMBeans. An implementation of this interface 
must be shipped with every JMX Agent. 
<P>
Java resources wishing to be manageable instantiate the ModelMBean using the MBeanServer's 
createMBean method.  The resource then sets the ModelMBeanInfo (with Descriptors) for the ModelMBean
instance. The attributes and operations exposed via the ModelMBeanInfo for the ModelMBean are accessible
from MBeans, connectors/adaptors like other MBeans. Through the ModelMBeanInfo Descriptors, values and methods in
the managed application can be defined and mapped to attributes and operations of the ModelMBean.
This mapping can be defined during development in an XML formatted file or dynamically and
programmatically at runtime. 
<P>
Every ModelMBean which is instantiated in the MBeanServer becomes manageable: 
its attributes and operations
become remotely accessible through the connectors/adaptors connected to that MBeanServer. 
A Java object cannot be registered in the MBeanServer unless it is a JMX compliant MBean.
By instantiating a ModelMBean, resources are guaranteed that the MBean is valid.
<P>
MBeanException and RuntimeOperationsException must be thrown on every public method.  This allows 
for wrapping exceptions from distributed communications (RMI, EJB, etc.).  These exceptions do
not have to be thrown by the implementation except in the scenarios described in the specification 
and javadoc.

@since 1.5"
      classrelation 2043931 // <generalisation>
	relation 2043931 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2043931 // <generalisation>
	  b parent class_ref 516891 // DynamicMBean
      end

      classrelation 2044059 // <generalisation>
	relation 2044059 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2044059 // <generalisation>
	  b parent class_ref 1033115 // PersistentMBean
      end

      classrelation 2044315 // <generalisation>
	relation 2044315 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2044315 // <generalisation>
	  b parent class_ref 1035291 // ModelMBeanNotificationBroadcaster
      end

      operation 8290971 "setModelMBeanInfo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inModelMBeanInfo" type class_ref 1035419 // ModelMBeanInfo
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a ModelMBean object using ModelMBeanInfo passed in. 
This method makes it possible to set a customized ModelMBeanInfo on
the ModelMBean as long as it is not registered with the MBeanServer.
<br>
Once the ModelMBean's ModelMBeanInfo (with Descriptors) are 
customized and set on the ModelMBean, the  ModelMBean can be 
registered with the MBeanServer.
<P>
If the ModelMBean is currently registered, this method throws
a {@link javax.management.RuntimeOperationsException} wrapping an
{@link IllegalStateException}

@param inModelMBeanInfo The ModelMBeanInfo object to be used 
       by the ModelMBean.    
	 
@exception MBeanException Wraps a distributed communication 
       Exception. 
@exception RuntimeOperationsException 
<ul><li>Wraps an {@link IllegalArgumentException} if
        the MBeanInfo passed in parameter is null.</li>
    <li>Wraps an {@link IllegalStateException} if the ModelMBean 
        is currently registered in the MBeanServer.</li>
</ul>
"
      end

      operation 8291099 "setManagedResource"
	public explicit_return_type "void"
	nparams 2
	  param inout name "mr" explicit_type "Object"
	  param in name "mr_type" explicit_type "String"
	nexceptions 4
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	  exception class_ref 511643 // InstanceNotFoundException
	  exception class_ref 1035035 // InvalidTargetObjectTypeException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the instance handle of the object against which to
execute all methods in this ModelMBean management interface
(MBeanInfo and Descriptors).

@param mr Object that is the managed resource
@param mr_type The type of reference for the managed resource.  Can be: ObjectReference,
              Handle, IOR, EJBHandle, RMIReference.
              If the MBeanServer cannot process the mr_type passed in, an InvalidTargetTypeException
              will be thrown.
    

@exception MBeanException The initializer of the object has thrown an exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException: 
      The managed resource type passed in parameter is null.
@exception InstanceNotFoundException The managed resource object could not be found
@exception InvalidTargetObjectTypeException The managed resource type cannot be processed by the 
ModelMBean or JMX Agent."
      end
    end

    class 1035291 "ModelMBeanNotificationBroadcaster"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface must be implemented by the ModelMBeans. An implementation of this interface 
must be shipped with every JMX Agent. 
<P>
Java resources wishing to be manageable instantiate the ModelMBean using the MBeanServer's 
createMBean method.  The resource then sets the ModelMBeanInfo (with Descriptors) for the ModelMBean
instance. The attributes and operations exposed via the ModelMBeanInfo for the ModelMBean are accessible
from MBeans, connectors/adaptors like other MBeans. Through the ModelMBeanInfo Descriptors, values and methods in
the managed application can be defined and mapped to attributes and operations of the ModelMBean.
This mapping can be defined during development in an XML formatted file or dynamically and
programmatically at runtime. 
<P>
Every ModelMBean which is instantiated in the MBeanServer becomes manageable: 
its attributes and operations
become remotely accessible through the connectors/adaptors connected to that MBeanServer. 
A Java object cannot be registered in the MBeanServer unless it is a JMX compliant MBean.
By instantiating a ModelMBean, resources are guaranteed that the MBean is valid.
<P>
MBeanException and RuntimeOperationsException must be thrown on every public method.  This allows 
for wrapping exceptions from distributed communications (RMI, EJB, etc.).  These exceptions do
not have to be thrown by the implementation except in the scenarios described in the specification 
and javadoc.

@since 1.5"
      classrelation 2044187 // <generalisation>
	relation 2044187 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2044187 // <generalisation>
	  b parent class_ref 516507 // NotificationBroadcaster
      end

      operation 8290203 "sendNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ntfyObj" type class_ref 513819 // Notification
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a Notification which is passed in to the registered
Notification listeners on the ModelMBean as a
jmx.modelmbean.generic notification.

@param ntfyObj The notification which is to be passed to
the 'handleNotification' method of the listener object.

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException: 
      The Notification object passed in parameter is null.
"
      end

      operation 8290331 "sendNotification"
	public explicit_return_type "void"
	nparams 1
	  param in name "ntfyText" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a Notification which contains the text string that is passed in
to the registered Notification listeners on the ModelMBean.

@param ntfyText The text which is to be passed in the Notification to the 'handleNotification'
method of the listener object.  
the constructed Notification will be:
  type        \"jmx.modelmbean.generic\"
  source      this ModelMBean instance
  sequence    1


@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException: 
      The Notification text string passed in parameter is null.
"
      end

      operation 8290459 "sendAttributeChangeNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "notification" type class_ref 1028891 // AttributeChangeNotification
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends an attributeChangeNotification which is passed in to
the registered attributeChangeNotification listeners on the
ModelMBean.

@param notification The notification which is to be passed
to the 'handleNotification' method of the listener object.

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException: The AttributeChangeNotification object passed in parameter is null.
"
      end

      operation 8290587 "sendAttributeChangeNotification"
	public explicit_return_type "void"
	nparams 2
	  param inout name "oldValue" type class_ref 512155 // Attribute
	  param inout name "newValue" type class_ref 512155 // Attribute
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends an attributeChangeNotification which contains the old value and new value for the
attribute to the registered AttributeChangeNotification listeners on the ModelMBean.
<P>
@param oldValue The original value for the Attribute
@param newValue The current value for the Attribute
<P>
<PRE>  
The constructed attributeChangeNotification will be:
  type        \"jmx.attribute.change\"
  source      this ModelMBean instance
  sequence    1
  attributeName oldValue.getName()
  attributeType oldValue's class
  attributeOldValue oldValue.getValue()
  attributeNewValue newValue.getValue()
</PRE>

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException: An Attribute object passed in parameter is null
or the names of the two Attribute objects in parameter are not the same."
      end

      operation 8290715 "addAttributeChangeNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 512411 // NotificationListener
	  param in name "attributeName" explicit_type "String"
	  param inout name "handback" explicit_type "Object"
	nexceptions 3
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	  exception class_ref 216859 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers an object which implements the NotificationListener interface as a listener.  This
object's 'handleNotification()' method will be invoked when any attributeChangeNotification is issued through
or by the ModelMBean.  This does not include other Notifications.  They must be registered
for independently. An AttributeChangeNotification will be generated for this attributeName.

@param listener The listener object which will handles notifications emitted by the registered MBean.
@param attributeName The name of the ModelMBean attribute for which to receive change notifications.
     If null, then all attribute changes will cause an attributeChangeNotification to be issued.
@param handback The context to be sent to the listener with the notification when a notification is emitted.

@exception IllegalArgumentException The listener cannot be null.
@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException The attribute name passed in parameter does not exist.

@see #removeAttributeChangeNotificationListener"
      end

      operation 8290843 "removeAttributeChangeNotificationListener"
	public explicit_return_type "void"
	nparams 2
	  param inout name "listener" type class_ref 512411 // NotificationListener
	  param in name "attributeName" explicit_type "String"
	nexceptions 3
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	  exception class_ref 512667 // ListenerNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener for attributeChangeNotifications from the RequiredModelMBean.

@param listener The listener name which was handling notifications emitted by the registered MBean.
This method will remove all information related to this listener.
@param attributeName The attribute for which the listener no longer wants to receive attributeChangeNotifications.
If null the listener will be removed for all attributeChangeNotifications. 

@exception ListenerNotFoundException The listener is not registered in the MBean or is null.
@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException If the inAttributeName parameter does not
correspond to an attribute name.

@see #addAttributeChangeNotificationListener"
      end
    end

    class 1035419 "ModelMBeanInfo"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface is implemented by the ModelMBeanInfo for every ModelMBean. An implementation of this interface 
must be shipped with every JMX Agent. 
<P>
Java resources wishing to be manageable instantiate the ModelMBean using the MBeanServer's 
createMBean method.  The resource then sets the ModelMBeanInfo and Descriptors for the ModelMBean
instance. The attributes, operations, and notifications exposed via the ModelMBeanInfo for the 
ModelMBean comprise the management interface and are accessible
from MBeans, connectors/adaptors like other MBeans. Through the Descriptors, values and methods in
the managed application can be defined and mapped to attributes and operations of the ModelMBean.
This mapping can be defined during development in a file or dynamically and
programmatically at runtime. 
<P>
Every ModelMBean which is instantiated in the MBeanServer becomes manageable: 
its attributes, operations, and notifications
become remotely accessible through the connectors/adaptors connected to that MBeanServer. 
A Java object cannot be registered in the MBeanServer unless it is a JMX compliant MBean.
By instantiating a ModelMBean, resources are guaranteed that the MBean is valid.

MBeanException and RuntimeOperationsException must be thrown on every public method.  This allows 
 for wrapping exceptions from distributed communications (RMI, EJB, etc.)

@since 1.5"
      operation 8295323 "getDescriptors"
	public return_type class_ref 1030299 // Descriptor
	nparams 1
	  param in name "inDescriptorType" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Descriptor array consisting of all 
Descriptors for the ModelMBeanInfo of type inDescriptorType.

@param inDescriptorType value of descriptorType field that must be set for the descriptor
to be returned.  Must be \"mbean\", \"attribute\", \"operation\", \"constructor\" or \"notification\".
If it is null or empty then all types will be returned.

@return Descriptor array containing all descriptors for the ModelMBean if type inDescriptorType.

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException when the descriptorType in parameter is
not one of: \"mbean\", \"attribute\", \"operation\", \"constructor\", \"notification\", empty or null.

@see #setDescriptors"
      end

      operation 8295451 "setDescriptors"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inDescriptors" type class_ref 1030299 // Descriptor
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds or replaces descriptors in the ModelMBeanInfo.

@param inDescriptors The descriptors to be set in the ModelMBeanInfo. Null
elements of the list will be ignored.  All descriptors must have name and descriptorType fields.

@exception RuntimeOperationsException Wraps an IllegalArgumentException for a null or invalid descriptor.
@exception MBeanException Wraps a distributed communication Exception.

@see #getDescriptors"
      end

      operation 8295579 "getDescriptor"
	public return_type class_ref 1030299 // Descriptor
	nparams 2
	  param in name "inDescriptorName" explicit_type "String"
	  param in name "inDescriptorType" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Descriptor requested by name and descriptorType.

@param inDescriptorName The name of the descriptor.
@param inDescriptorType The type of the descriptor being
requested.  If this is null or empty then all types are
searched. Valid types are 'mbean', 'attribute', 'constructor'
'operation', and 'notification'. This value will be equal to
the 'descriptorType' field in the descriptor that is returned.

@return Descriptor containing the descriptor for the ModelMBean
with the same name and descriptorType.  If no descriptor is
found, null is returned.

@exception MBeanException Wraps a distributed communication Exception. 
@exception RuntimeOperationsException Wraps an IllegalArgumentException for a null descriptor name or null or invalid type.
The type must be \"mbean\",\"attribute\", \"constructor\", \"operation\", or \"notification\".

@see #setDescriptor"
      end

      operation 8295707 "setDescriptor"
	public explicit_return_type "void"
	nparams 2
	  param inout name "inDescriptor" type class_ref 1030299 // Descriptor
	  param in name "inDescriptorType" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets descriptors in the info array of type inDescriptorType
for the ModelMBean.  The setDescriptor method of the
corresponding ModelMBean*Info will be called to set the
specified descriptor.

@param inDescriptor The descriptor to be set in the
ModelMBean. It must NOT be null.  All descriptors must have
name and descriptorType fields.
@param inDescriptorType The type of the descriptor being
set. If this is null then the descriptorType field in the
descriptor is used. If specified this value must be set in
the descriptorType field in the descriptor. Must be
\"mbean\",\"attribute\", \"constructor\", \"operation\", or
\"notification\".

@exception RuntimeOperationsException Wraps an
IllegalArgumentException for illegal or null arguments or
if the name field of the descriptor is not found in the
corresponding MBeanAttributeInfo or MBeanConstructorInfo or
MBeanNotificationInfo or MBeanOperationInfo.
@exception MBeanException Wraps a distributed communication
Exception.

@see #getDescriptor"
      end

      operation 8295835 "getMBeanDescriptor"
	public return_type class_ref 1030299 // Descriptor
	nparams 0
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ModelMBean's descriptor which contains MBean wide policies.  This descriptor contains
metadata about the MBean and default policies for persistence and caching.
<P>
The fields in the descriptor are defined, but not limited to, the following: 
<PRE>
name           : MBean name  
descriptorType : must be \"mbean\"   
displayName    : name of attribute to be used in displays 
persistPolicy  : OnUpdate|OnTimer|NoMoreOftenThan|Always|Never  
persistLocation : The fully qualified directory name where the MBean should be persisted (if appropriate)
persistFile    : File name into which the MBean should be persisted
persistPeriod  : seconds - frequency of persist cycle for OnTime and NoMoreOftenThan PersistPolicy 
currencyTimeLimit : how long value is valid, &lt;0 never, =0 always, &gt;0 seconds  
log            : where t: log all notifications f: log no notifications
logfile        : fully qualified filename to log events to
visibility     : 1-4 where 1: always visible 4: rarely visible
export         : name to be used to export/expose this MBean so that it is findable by
                 other JMX Agents.   
presentationString : xml formatted string to allow presentation of data to be associated with the MBean. 
</PRE>
<P>
The default descriptor is: name=mbeanName,descriptorType=mbean, displayName=this.getClassName(), 
	persistPolicy=never,log=F,export=F,visibility=1
If the descriptor does not contain all these fields, they will be added with these default values.

<p><b>Note:</b> because of inconsistencies in previous versions of
this specification, it is recommended not to use negative or zero
values for <code>currencyTimeLimit</code>.  To indicate that a
cached value is never valid, omit the
<code>currencyTimeLimit</code> field.  To indicate that it is
always valid, use a very large number for this field.</p>

@return the MBean descriptor.

@exception MBeanException Wraps a distributed communication
Exception.

@exception RuntimeOperationsException a {@link
RuntimeException} occurred while getting the descriptor.

@see #setMBeanDescriptor"
      end

      operation 8295963 "setMBeanDescriptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inDescriptor" type class_ref 1030299 // Descriptor
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the ModelMBean's descriptor.  This descriptor contains default, MBean wide 
metadata about the MBean and default policies for persistence and caching. This operation
does a complete replacement of the descriptor, no merging is done. If the descriptor to
set to is null then the default descriptor will be created.
The default descriptor is: name=mbeanName,descriptorType=mbean, displayName=this.getClassName(), 
	persistPolicy=never,log=F,export=F,visibility=1
If the descriptor does not contain all these fields, they will be added with these default values.

See {@link #getMBeanDescriptor getMBeanDescriptor} method javadoc for description of valid field names.

@param inDescriptor the descriptor to set.

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException  for invalid descriptor. 


@see #getMBeanDescriptor"
      end

      operation 8296091 "getAttribute"
	public return_type class_ref 1035547 // ModelMBeanAttributeInfo
	nparams 1
	  param in name "inName" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a ModelMBeanAttributeInfo requested by name.

@param inName The name of the ModelMBeanAttributeInfo to get.
If no ModelMBeanAttributeInfo exists for this name null is returned.

@return the attribute info for the named attribute, or null
if there is none.

@exception MBeanException Wraps a distributed communication
Exception.
@exception RuntimeOperationsException Wraps an
IllegalArgumentException for a null attribute name.
"
      end

      operation 8296219 "getOperation"
	public return_type class_ref 1035803 // ModelMBeanOperationInfo
	nparams 1
	  param in name "inName" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a ModelMBeanOperationInfo requested by name.

@param inName The name of the ModelMBeanOperationInfo to get.
If no ModelMBeanOperationInfo exists for this name null is returned.

@return the operation info for the named operation, or null
if there is none.

@exception MBeanException Wraps a distributed communication Exception. 
@exception RuntimeOperationsException Wraps an IllegalArgumentException for a null operation name.
"
      end

      operation 8296347 "getNotification"
	public return_type class_ref 1035931 // ModelMBeanNotificationInfo
	nparams 1
	  param in name "inName" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a ModelMBeanNotificationInfo requested by name.

@param inName The name of the ModelMBeanNotificationInfo to get.
If no ModelMBeanNotificationInfo exists for this name null is returned.

@return the info for the named notification, or null if there
is none.

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an IllegalArgumentException for a null notification name.
"
      end

      operation 8296475 "clone"
	public return_type class_ref 168347 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a copy of this object."
      end

      operation 8296603 "getAttributes"
	public return_type class_ref 514971 // MBeanAttributeInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of attributes exposed for management. 
Each attribute is described by an <CODE>MBeanAttributeInfo</CODE> object.

@return  An array of <CODE>MBeanAttributeInfo</CODE> objects."
      end

      operation 8296731 "getClassName"
	public return_type class_ref 179611 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the Java class of the MBean described by
this <CODE>MBeanInfo</CODE>.

@return the Java class name."
      end

      operation 8296859 "getConstructors"
	public return_type class_ref 515099 // MBeanConstructorInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of the public constructors  of the MBean. 
Each constructor is described by an <CODE>MBeanConstructorInfo</CODE> object.

@return  An array of <CODE>MBeanConstructorInfo</CODE> objects."
      end

      operation 8296987 "getDescription"
	public return_type class_ref 179611 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a human readable description of the MBean.

@return the description."
      end

      operation 8297115 "getNotifications"
	public return_type class_ref 516635 // MBeanNotificationInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of the notifications emitted by the MBean. 
Each notification is described by an <CODE>MBeanNotificationInfo</CODE> object.
<P>
In addition to any notification specified by the application, 
a ModelMBean may always send also two additional notifications:
<UL>  
<LI> One with descriptor name \"GENERIC\" and displayName \"jmx.modelmbean.generic\" 
<LI> Second is a standard attribute change notification
     with descriptor name \"ATTRIBUTE_CHANGE\" and displayName \"jmx.attribute.change\"
</UL>
Thus any implementation of ModelMBeanInfo should always add those two notifications
in addition to those specified by the application.

@return  An array of <CODE>MBeanNotificationInfo</CODE> objects."
      end

      operation 8297243 "getOperations"
	public return_type class_ref 1031323 // MBeanOperationInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of operations  of the MBean. 
Each operation is described by an <CODE>MBeanOperationInfo</CODE> object.

@return  An array of <CODE>MBeanOperationInfo</CODE> objects."
      end
    end

    class 1035547 "ModelMBeanAttributeInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The ModelMBeanAttributeInfo object describes an attribute of the ModelMBean.
It is a subclass of MBeanAttributeInfo with the addition of an associated Descriptor
and an implementation of the DescriptorAccess interface.
<P>
The fields in the descriptor are defined, but not limited to, the following: <P>
<PRE>
name           : attribute name  
descriptorType : must be \"attribute\"   
value          : current value for attribute 
default        : default value for attribute 
displayName    : name of attribute to be used in displays 
getMethod      : name of operation descriptor for get method  
setMethod      : name of operation descriptor for set method 
protocolMap    : object which implements the Descriptor interface: mappings must be appropriate for the attribute
                 and entries can be updated or augmented at runtime.
persistPolicy  : OnUpdate|OnTimer|NoMoreOftenThan|Always|Never  
persistPeriod  : seconds - frequency of persist cycle. Used when persistPolicy is\"OnTimer\" or \"NoMoreOftenThan\".  
currencyTimeLimit : how long value is valid, &lt;0 never, =0 always, &gt;0 seconds
lastUpdatedTimeStamp : when value was set  
visibility     : 1-4 where 1: always visible 4: rarely visible  
presentationString : xml formatted string to allow presentation of data 
</PRE>
The default descriptor contains the name, descriptorType and displayName fields.

<p><b>Note:</b> because of inconsistencies in previous versions of
this specification, it is recommended not to use negative or zero
values for <code>currencyTimeLimit</code>.  To indicate that a
cached value is never valid, omit the
<code>currencyTimeLimit</code> field.  To indicate that it is
always valid, use a very large number for this field.</p>

@since 1.5"
      classrelation 2044443 // <generalisation>
	relation 2044443 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2044443 // <generalisation>
	  b parent class_ref 514971 // MBeanAttributeInfo
      end

      classrelation 2044571 // <realization>
	relation 2044571 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2044571 // <realization>
	  b parent class_ref 1030555 // DescriptorAccess
      end

      classrelation 2044699 // <realization>
	relation 2044699 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2044699 // <realization>
	  b parent class_ref 339867 // Cloneable
      end

      attribute 3034395 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7098036920755973145L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form "
      end

      attribute 3034523 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  6181543027787327345L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version for new serial form "
      end

      classrelation 2044827 // oldSerialPersistentFields (<unidirectional association>)
	relation 2044827 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"attrDescriptor\", Descriptor.class),
      new ObjectStreamField(\"currClass\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2044827 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      classrelation 2044955 // newSerialPersistentFields (<unidirectional association>)
	relation 2044955 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"attrDescriptor\", Descriptor.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2044955 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3034651 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual serial version and serial form"
      end

      classrelation 2045083 // serialPersistentFields (<unidirectional association>)
	relation 2045083 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField attrDescriptor Descriptor The {@link Descriptor} containing the metadata corresponding to
             this attribute

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2045083 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3034779 "compat"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 170011 "initialization"
	
	cpp "" ""
	java "  static {
	try {
	    PrivilegedAction act = new GetPropertyAction(\"jmx.serial.form\");
	    String form = (String) AccessController.doPrivileged(act);
	    compat = (form != null && form.equals(\"1.0\"));
	} catch (Exception e) {
	    // OK: No compat with 1.0
	}
	if (compat) {
	    serialPersistentFields = oldSerialPersistentFields;
	    serialVersionUID = oldSerialVersionUID;
	} else {
	    serialPersistentFields = newSerialPersistentFields;
	    serialVersionUID = newSerialVersionUID;
	}
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 2045211 // attrDescriptor (<unidirectional association>)
	relation 2045211 --->
	  a role_name "attrDescriptor" init_value "=  createDefaultDescriptor()" private
	    comment " END Serialization compatibility stuff

@serial The {@link Descriptor} containing the metadata corresponding to
this attribute

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2045211 // attrDescriptor (<unidirectional association>)
	  b parent class_ref 1030299 // Descriptor
      end

      attribute 3034907 "currClass"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"ModelMBeanAttributeInfo\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8291227 "ModelMBeanAttributeInfo"
	public explicit_return_type ""
	nparams 4
	  param in name "name" explicit_type "String"
	  param in name "description" explicit_type "String"
	  param inout name "getter" type class_ref 170651 // Method
	  param inout name "setter" type class_ref 170651 // Method
	nexceptions 1
	  exception class_ref 512923 // IntrospectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanAttributeInfo object with a default descriptor.

@param name The name of the attribute.
@param description A human readable description of the attribute. Optional.
@param getter The method used for reading the attribute value.
         May be null if the property is write-only.
@param setter The method used for writing the attribute value.
         May be null if the attribute is read-only.
@exception IntrospectionException There is a consistency problem in the definition of this attribute.
"
      end

      operation 8291355 "ModelMBeanAttributeInfo"
	public explicit_return_type ""
	nparams 5
	  param in name "name" explicit_type "String"
	  param in name "description" explicit_type "String"
	  param inout name "getter" type class_ref 170651 // Method
	  param inout name "setter" type class_ref 170651 // Method
	  param inout name "descriptor" type class_ref 1030299 // Descriptor
	nexceptions 1
	  exception class_ref 512923 // IntrospectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanAttributeInfo object. 

@param name The name of the attribute.
@param description A human readable description of the attribute. Optional.
@param getter The method used for reading the attribute value.
         May be null if the property is write-only.
@param setter The method used for writing the attribute value.
         May be null if the attribute is read-only.
@param descriptor An instance of Descriptor containing the appropriate metadata
                  for this instance of the Attribute. If it is null, then a default descriptor will be created.
If the descriptor does not contain the field \"displayName\" this field is added in the descriptor with its default value.

@exception IntrospectionException There is a consistency problem in the definition of this attribute.
@exception RuntimeOperationsException Wraps an IllegalArgumentException. The descriptor is invalid, or descriptor field \"name\" is not
equal  to name parameter, or descriptor field \"DescriptorType\" is not equal to \"attribute\". 
"
      end

      operation 8291483 "ModelMBeanAttributeInfo"
	public explicit_return_type ""
	nparams 6
	  param in name "name" explicit_type "String"
	  param in name "type" explicit_type "String"
	  param in name "description" explicit_type "String"
	  param inout name "isReadable" explicit_type "boolean"
	  param inout name "isWritable" explicit_type "boolean"
	  param inout name "isIs" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanAttributeInfo object with a default descriptor.

@param name The name of the attribute
@param type The type or class name of the attribute
@param description A human readable description of the attribute.
@param isReadable True if the attribute has a getter method, false otherwise.
@param isWritable True if the attribute has a setter method, false otherwise.
@param isIs True if the attribute has an \"is\" getter, false otherwise.
"
      end

      operation 8291611 "ModelMBeanAttributeInfo"
	public explicit_return_type ""
	nparams 7
	  param in name "name" explicit_type "String"
	  param in name "type" explicit_type "String"
	  param in name "description" explicit_type "String"
	  param inout name "isReadable" explicit_type "boolean"
	  param inout name "isWritable" explicit_type "boolean"
	  param inout name "isIs" explicit_type "boolean"
	  param inout name "descriptor" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanAttributeInfo object with a default descriptor.

@param name The name of the attribute
@param type The type or class name of the attribute
@param description A human readable description of the attribute.
@param isReadable True if the attribute has a getter method, false otherwise.
@param isWritable True if the attribute has a setter method, false otherwise.
@param isIs True if the attribute has an \"is\" getter, false otherwise.
@param descriptor An instance of Descriptor containing the appropriate metadata
                  for this instance of the Attribute. If it is null then a default descriptor will be created.
If the descriptor does not contain the field \"displayName\" this field is added in the descriptor with its default value.

@exception RuntimeOperationsException Wraps an IllegalArgumentException. The descriptor is invalid, or descriptor field \"name\" is not
equal  to name parameter,  or descriptor field \"DescriptorType\" is not equal to \"attribute\".
"
      end

      operation 8291739 "ModelMBeanAttributeInfo"
	public explicit_return_type ""
	nparams 1
	  param inout name "inInfo" type class_ref 1035547 // ModelMBeanAttributeInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ModelMBeanAttributeInfo object from this ModelMBeanAttributeInfo Object.
A default descriptor will be created.

@param inInfo the ModelMBeanAttributeInfo to be duplicated"
      end

      operation 8291867 "getDescriptor"
	public return_type class_ref 1030299 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a copy of the associated Descriptor for the
ModelMBeanAttributeInfo.

@return Descriptor associated with the
ModelMBeanAttributeInfo object.

@see #setDescriptor"
      end

      operation 8291995 "setDescriptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inDescriptor" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets associated Descriptor (full replace) for the
ModelMBeanAttributeDescriptor.  If the new Descriptor is
null, then the associated Descriptor reverts to a default
descriptor.  The Descriptor is validated before it is
assigned.  If the new Descriptor is invalid, then a
RuntimeOperationsException wrapping an
IllegalArgumentException is thrown.

@param inDescriptor replaces the Descriptor associated with the 
ModelMBeanAttributeInfo

@exception RuntimeOperationsException Wraps an
IllegalArgumentException for an invalid Descriptor

@see #getDescriptor"
      end

      operation 8292123 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a new ModelMBeanAttributeInfo which is a duplicate of this ModelMBeanAttributeInfo.

@exception RuntimeOperationsException for illegal value for field Names or field Values.
             If the descriptor construction fails for any reason, this exception will be thrown."
      end

      operation 8292251 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a human-readable version of the
ModelMBeanAttributeInfo instance."
      end

      operation 8292379 "createDefaultDescriptor"
	private return_type class_ref 1030299 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a Descriptor with default values set: 
 descriptorType=attribute,name=this.getName(),displayName=this.getName(),
		persistPolicy=never,visibility=1"
      end

      operation 8292507 "isValid"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "inDesc" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests that the descriptor is valid and adds appropriate default fields not already
specified. Field values must be correct for field names. 
Descriptor must have the same name as the attribute,the descriptorType field must be \"attribute\",
The following fields will be defaulted if they are not already set:
displayName=this.getName(),persistPolicy=never,visibility=1"
      end

      operation 8292635 "tracing"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " SUN Trace and debug functions"
      end

      operation 8292763 "trace"
	private explicit_return_type "void"
	nparams 3
	  param in name "inClass" explicit_type "String"
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8292891 "trace"
	private explicit_return_type "void"
	nparams 2
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8293019 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link ModelMBeanAttributeInfo} from an {@link ObjectInputStream}."
      end

      operation 8293147 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link ModelMBeanAttributeInfo} to an {@link ObjectOutputStream}."
      end
    end

    class 1035675 "ModelMBeanConstructorInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The ModelMBeanConstructorInfo object describes a constructor of the ModelMBean.
It is a subclass of MBeanConstructorInfo with the addition of an associated Descriptor
and an implementation of the DescriptorAccess interface.
<P>
<PRE>
The fields in the descriptor are defined, but not limited to, the following: <P>
name           : constructor name 
descriptorType : must be \"operation\"  
role           : must be \"constructor\"
displayName    : human readable name of constructor 
visibility            : 1-4 where 1: always visible 4: rarely visible 
presentationString :  xml formatted string to describe how to present operation 
</PRE>
The persistPolicy and currencyTimeLimit fields are not valid for the constructor.
The default descriptor will have the name, descriptorType, displayName and role fields.

@since 1.5"
      classrelation 2045339 // <generalisation>
	relation 2045339 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2045339 // <generalisation>
	  b parent class_ref 515099 // MBeanConstructorInfo
      end

      classrelation 2045467 // <realization>
	relation 2045467 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2045467 // <realization>
	  b parent class_ref 1030555 // DescriptorAccess
      end

      classrelation 2045595 // <realization>
	relation 2045595 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2045595 // <realization>
	  b parent class_ref 339867 // Cloneable
      end

      attribute 3035035 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -4440125391095574518L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form "
      end

      attribute 3035163 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  3862947819818064362L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version for new serial form "
      end

      classrelation 2045723 // oldSerialPersistentFields (<unidirectional association>)
	relation 2045723 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"consDescriptor\", Descriptor.class),
      new ObjectStreamField(\"currClass\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2045723 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      classrelation 2045851 // newSerialPersistentFields (<unidirectional association>)
	relation 2045851 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"consDescriptor\", Descriptor.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2045851 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3035291 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual serial version and serial form"
      end

      classrelation 2045979 // serialPersistentFields (<unidirectional association>)
	relation 2045979 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField consDescriptor Descriptor The {@link Descriptor} containing the metadata for this instance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2045979 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3035419 "compat"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 170139 "initialization"
	
	cpp "" ""
	java "  static {
	try {
	    PrivilegedAction act = new GetPropertyAction(\"jmx.serial.form\");
	    String form = (String) AccessController.doPrivileged(act);
	    compat = (form != null && form.equals(\"1.0\"));
	} catch (Exception e) {
	    // OK: No compat with 1.0
	}
	if (compat) {
	    serialPersistentFields = oldSerialPersistentFields;
	    serialVersionUID = oldSerialVersionUID;
	} else {
	    serialPersistentFields = newSerialPersistentFields;
	    serialVersionUID = newSerialVersionUID;
	}
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 2046107 // consDescriptor (<unidirectional association>)
	relation 2046107 --->
	  a role_name "consDescriptor" init_value "=  createDefaultDescriptor()" private
	    comment " END Serialization compatibility stuff

@serial The {@link Descriptor} containing the metadata for this instance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2046107 // consDescriptor (<unidirectional association>)
	  b parent class_ref 1030299 // Descriptor
      end

      attribute 3035547 "currClass"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"ModelMBeanConstructorInfo\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8293275 "ModelMBeanConstructorInfo"
	public explicit_return_type ""
	nparams 2
	  param in name "description" explicit_type "String"
	  param inout name "constructorMethod" type class_ref 218395 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a MBeanConstructorInfo object with a default descriptor.

@param description A human readable description of the constructor.
@param constructorMethod The java.lang.reflect.Method object
describing the MBean constructor."
      end

      operation 8293403 "ModelMBeanConstructorInfo"
	public explicit_return_type ""
	nparams 3
	  param in name "description" explicit_type "String"
	  param inout name "constructorMethod" type class_ref 218395 // Constructor
	  param inout name "descriptor" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a MBeanConstructorInfo object.

@param description A human readable description of the constructor.
@param constructorMethod The java.lang.reflect.Method object
describing the ModelMBean constructor.
@param descriptor An instance of Descriptor containing the
appropriate metadata for this instance of the
ModelMBeanConstructorInfo.  If it is null, then a default
descriptor will be created.If the descriptor does not
contain the field \"displayName\" this fields is added in the
descriptor with its default value.

@exception RuntimeOperationsException Wraps an
IllegalArgumentException. The descriptor is invalid, or
descriptor field \"name\" is not equal to name parameter, or
descriptor field \"DescriptorType\" is not equal to
\"operation\" or descriptor field \"role\" is not equal to
\"constructor\"."
      end

      operation 8293531 "ModelMBeanConstructorInfo"
	public explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "String"
	  param in name "description" explicit_type "String"
	  param inout name "signature" type class_ref 1031195 // MBeanParameterInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanConstructorInfo object with a default descriptor.

@param name The name of the constructor.
@param description A human readable description of the constructor.
@param signature MBeanParameterInfo object array describing the parameters(arguments) of the constructor."
      end

      operation 8293659 "ModelMBeanConstructorInfo"
	public explicit_return_type ""
	nparams 4
	  param in name "name" explicit_type "String"
	  param in name "description" explicit_type "String"
	  param inout name "signature" type class_ref 1031195 // MBeanParameterInfo
	  param inout name "descriptor" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a MBeanConstructorInfo object.

@param name The name of the constructor.
@param description A human readable description of the constructor.
@param signature MBeanParameterInfo objects describing the parameters(arguments) of the constructor.
@param descriptor An instance of Descriptor containing the appropriate metadata
                  for this instance of the MBeanConstructorInfo. If it is null then a default descriptor will be created.
If the descriptor does not contain the field \"displayName\" this field is added in the descriptor with its default value.

@exception RuntimeOperationsException Wraps an IllegalArgumentException. The descriptor is invalid, or descriptor field \"name\" 
is not equal to name parameter, or descriptor field \"DescriptorType\" is not equal to \"operation\" or descriptor field \"role\" 
is not equal to \"constructor\"."
      end

      operation 8293787 "ModelMBeanConstructorInfo"
	package explicit_return_type ""
	nparams 1
	  param inout name "old" type class_ref 1035675 // ModelMBeanConstructorInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ModelMBeanConstructorInfo object from this ModelMBeanConstructor Object.

@param old the ModelMBeanConstructorInfo to be duplicated
"
      end

      operation 8293915 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a new ModelMBeanConstructorInfo which is a duplicate of this ModelMBeanConstructorInfo.
"
      end

      operation 8294043 "getDescriptor"
	public return_type class_ref 1030299 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the associated Descriptor.

@return Descriptor associated with the
ModelMBeanConstructorInfo object.

@see #setDescriptor"
      end

      operation 8294171 "setDescriptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inDescriptor" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets associated Descriptor (full replace) of
ModelMBeanConstructorInfo.  If the new Descriptor is null,
then the associated Descriptor reverts to a default
descriptor.  The Descriptor is validated before it is
assigned.  If the new Descriptor is invalid, then a
RuntimeOperationsException wrapping an
IllegalArgumentException is thrown.

@param inDescriptor replaces the Descriptor associated with
the ModelMBeanConstructor. If the descriptor does not
contain the field \"displayName\" this field is added in the
descriptor with its default value.

@exception RuntimeOperationsException Wraps an
IllegalArgumentException.  The descriptor is invalid, or
descriptor field \"name\" is not equal to name parameter, or
descriptor field \"DescriptorType\" is not equal to
\"operation\" or descriptor field \"role\" is not equal to
\"constructor\".

@see #getDescriptor"
      end

      operation 8294299 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string containing the entire contents of the ModelMBeanConstructorInfo in human readable form."
      end

      operation 8294427 "createDefaultDescriptor"
	private return_type class_ref 1030299 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates default descriptor for constructor as follows:
descriptorType=operation,role=constructor,
name=this.getName(),displayname=this.getName(),visibility=1"
      end

      operation 8294555 "isValid"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "inDesc" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests that the descriptor is valid and adds appropriate default fields not already
specified. Field values must be correct for field names. 
Descriptor must have the same name as the operation,the descriptorType field must 
be \"operation\", the role field must be set to \"constructor\".
The following fields will be defaulted if they are not already set:
displayName=this.getName()"
      end

      operation 8294683 "tracing"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " SUN Trace and debug functions"
      end

      operation 8294811 "trace"
	private explicit_return_type "void"
	nparams 3
	  param in name "inClass" explicit_type "String"
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8294939 "trace"
	private explicit_return_type "void"
	nparams 2
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8295067 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link ModelMBeanConstructorInfo} from an {@link ObjectInputStream}."
      end

      operation 8295195 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link ModelMBeanConstructorInfo} to an {@link ObjectOutputStream}."
      end
    end

    class 1035803 "ModelMBeanOperationInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The ModelMBeanOperationInfo object describes a management operation of the ModelMBean.
It is a subclass of MBeanOperationInfo with the addition of an associated Descriptor
and an implementation of the DescriptorAccess interface.
<P>
<PRE>
The fields in the descriptor are defined, but not limited to, the following: 
name           : operation name 
descriptorType : must be \"operation\"    
class          : class where method is defined (fully qualified) 
role           : must be \"operation\", \"getter\", or \"setter
targetObject   : object on which to execute this method          
targetType     : type of object reference for targetObject. Can be: ObjectReference | Handle | EJBHandle | IOR | RMIReference.
value          : cached value for operation                   
currencyTimeLimit : how long cached value is valid               
lastUpdatedTimeStamp : when cached value was set                
visibility            : 1-4 where 1: always visible 4: rarely visible 
presentationString :  xml formatted string to describe how to present operation 
</PRE>
The default descriptor will have name, descriptorType, displayName and role fields set.

<p><b>Note:</b> because of inconsistencies in previous versions of
this specification, it is recommended not to use negative or zero
values for <code>currencyTimeLimit</code>.  To indicate that a
cached value is never valid, omit the
<code>currencyTimeLimit</code> field.  To indicate that it is
always valid, use a very large number for this field.</p>

@since 1.5"
      classrelation 2049051 // <generalisation>
	relation 2049051 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2049051 // <generalisation>
	  b parent class_ref 1031323 // MBeanOperationInfo
      end

      classrelation 2049179 // <realization>
	relation 2049179 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2049179 // <realization>
	  b parent class_ref 1030555 // DescriptorAccess
      end

      attribute 3037723 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  9087646304346171239L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form "
      end

      attribute 3037851 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  6532732096650090465L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version for new serial form "
      end

      classrelation 2049307 // oldSerialPersistentFields (<unidirectional association>)
	relation 2049307 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"operationDescriptor\", Descriptor.class),
      new ObjectStreamField(\"currClass\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2049307 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      classrelation 2049435 // newSerialPersistentFields (<unidirectional association>)
	relation 2049435 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"operationDescriptor\", Descriptor.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2049435 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3037979 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual serial version and serial form"
      end

      classrelation 2049563 // serialPersistentFields (<unidirectional association>)
	relation 2049563 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField operationDescriptor Descriptor The descriptor containing the appropriate metadata for this instance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2049563 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3038107 "compat"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 170523 "initialization"
	
	cpp "" ""
	java "  static {
	try {
	    PrivilegedAction act = new GetPropertyAction(\"jmx.serial.form\");
	    String form = (String) AccessController.doPrivileged(act);
	    compat = (form != null && form.equals(\"1.0\"));
	} catch (Exception e) {
	    // OK: No compat with 1.0
	}
	if (compat) {
	    serialPersistentFields = oldSerialPersistentFields;
	    serialVersionUID = oldSerialVersionUID;
	} else {
	    serialPersistentFields = newSerialPersistentFields;
	    serialVersionUID = newSerialVersionUID;
	}
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 2049691 // operationDescriptor (<unidirectional association>)
	relation 2049691 --->
	  a role_name "operationDescriptor" init_value "=  createDefaultDescriptor()" private
	    comment " END Serialization compatibility stuff

@serial The descriptor containing the appropriate metadata for this instance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2049691 // operationDescriptor (<unidirectional association>)
	  b parent class_ref 1030299 // Descriptor
      end

      attribute 3038235 "currClass"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"ModelMBeanOperationInfo\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8302363 "ModelMBeanOperationInfo"
	public explicit_return_type ""
	nparams 2
	  param in name "description" explicit_type "String"
	  param inout name "operationMethod" type class_ref 170651 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanOperationInfo object with a default
descriptor.

@param operationMethod The java.lang.reflect.Method object
describing the MBean operation.
@param description A human readable description of the operation."
      end

      operation 8302491 "ModelMBeanOperationInfo"
	public explicit_return_type ""
	nparams 3
	  param in name "description" explicit_type "String"
	  param inout name "operationMethod" type class_ref 170651 // Method
	  param inout name "descriptor" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanOperationInfo object.

@param operationMethod The java.lang.reflect.Method object
describing the MBean operation.
@param description A human readable description of the
operation.
@param descriptor An instance of Descriptor containing the
appropriate metadata for this instance of the
ModelMBeanOperationInfo.  If it is null a default
descriptor will be created. If the descriptor does not
contain the fields \"displayName\" or \"role\" these fields are
added in the descriptor with their default values.

@exception RuntimeOperationsException Wraps an
IllegalArgumentException. The descriptor is invalid, or
descriptor field \"name\" is not equal to operation name, or
descriptor field \"DescriptorType\" is not equal to
\"operation\", or descriptor field \"role\" is not equal to
\"operation\".
"
      end

      operation 8302619 "ModelMBeanOperationInfo"
	public explicit_return_type ""
	nparams 5
	  param in name "name" explicit_type "String"
	  param in name "description" explicit_type "String"
	  param inout name "signature" type class_ref 1031195 // MBeanParameterInfo
	  param in name "type" explicit_type "String"
	  param in name "impact" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanOperationInfo object with a default descriptor.

@param name The name of the method.
@param description A human readable description of the operation.
@param signature MBeanParameterInfo objects describing the parameters(arguments) of the method.
@param type The type of the method's return value.
@param impact The impact of the method, one of INFO, ACTION, ACTION_INFO, UNKNOWN."
      end

      operation 8302747 "ModelMBeanOperationInfo"
	public explicit_return_type ""
	nparams 6
	  param in name "name" explicit_type "String"
	  param in name "description" explicit_type "String"
	  param inout name "signature" type class_ref 1031195 // MBeanParameterInfo
	  param in name "type" explicit_type "String"
	  param in name "impact" explicit_type "int"
	  param inout name "descriptor" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanOperationInfo object.

@param name The name of the method.
@param description A human readable description of the operation.
@param signature MBeanParameterInfo objects describing the parameters(arguments) of the method.
@param type The type of the method's return value.
@param impact The impact of the method, one of INFO, ACTION, ACTION_INFO, UNKNOWN.
@param descriptor An instance of Descriptor containing the appropriate metadata.
for this instance of the MBeanOperationInfo.If it is null then a default descriptor will be created.
If the descriptor does not contain the fields 
\"displayName\" or \"role\" these fields are added in the descriptor with their default values.

@exception RuntimeOperationsException Wraps an IllegalArgumentException. The descriptor is invalid, or descriptor field \"name\" 
is not equal to operation name, or descriptor field \"DescriptorType\" is not equal to \"operation\", or descriptor field \"role\" is not equal to 
\"operation\"."
      end

      operation 8302875 "ModelMBeanOperationInfo"
	public explicit_return_type ""
	nparams 1
	  param inout name "inInfo" type class_ref 1035803 // ModelMBeanOperationInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ModelMBeanOperationInfo object from this ModelMBeanOperation Object.

@param inInfo the ModelMBeanOperationInfo to be duplicated
"
      end

      operation 8303003 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a new ModelMBeanOperationInfo which is a duplicate of this ModelMBeanOperationInfo.
"
      end

      operation 8303131 "getDescriptor"
	public return_type class_ref 1030299 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the associated Descriptor of the
ModelMBeanOperationInfo.

@return Descriptor associated with the
ModelMBeanOperationInfo object.

@see #setDescriptor"
      end

      operation 8303259 "setDescriptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inDescriptor" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets associated Descriptor (full replace) for the
ModelMBeanOperationInfo If the new Descriptor is null, then
the associated Descriptor reverts to a default descriptor.
The Descriptor is validated before it is assigned.  If the
new Descriptor is invalid, then a
RuntimeOperationsException wrapping an
IllegalArgumentException is thrown.

@param inDescriptor replaces the Descriptor associated with the 
ModelMBeanOperation.	 	 

@exception RuntimeOperationsException Wraps an
IllegalArgumentException for invalid Descriptor.

@see #getDescriptor"
      end

      operation 8303387 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string containing the entire contents of the ModelMBeanOperationInfo in human readable form."
      end

      operation 8303515 "createDefaultDescriptor"
	private return_type class_ref 1030299 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates default descriptor for operation as follows:
descriptorType=operation,role=operation, name=this.getName(),displayname=this.getName()."
      end

      operation 8303643 "isValid"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "inDesc" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests that the descriptor is valid and adds appropriate
default fields not already specified.  Field values must be
correct for field names.  descriptorType field must be
\"operation\".  We do not check the targetType because a
custom implementation of ModelMBean could recognize
additional types beyond the \"standard\" ones.  The following
fields will be defaulted if they are not already set:
role=operation,displayName=this.getName()"
      end

      operation 8303771 "tracing"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " SUN Trace and debug functions"
      end

      operation 8303899 "trace"
	private explicit_return_type "void"
	nparams 3
	  param in name "inClass" explicit_type "String"
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8304027 "trace"
	private explicit_return_type "void"
	nparams 2
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8304155 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link ModelMBeanOperationInfo} from an {@link ObjectInputStream}."
      end

      operation 8304283 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link ModelMBeanOperationInfo} to an {@link ObjectOutputStream}."
      end
    end

    class 1035931 "ModelMBeanNotificationInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The ModelMBeanNotificationInfo object describes a notification emitted 
by a ModelMBean.
It is a subclass of MBeanNotificationInfo with the addition of an 
associated Descriptor and an implementation of the Descriptor interface.
<P>
The fields in the descriptor are defined, but not limited to, 
the following: 
<PRE>
name           : notification name 
descriptorType : must be \"notification\"
severity       : 0-6 where 0: unknown; 1: non-recoverable;
                 2: critical, failure; 3: major, severe;
                 4: minor, marginal, error; 5: warning;
                 6: normal, cleared, informative
messageID      : unique key for message text (to allow translation,
                 analysis)
messageText    : text of notification
log            : T - log message F - do not log message
logfile        : string fully qualified file name appropriate for 
                 operating system
visibility     : 1-4 where 1: always visible 4: rarely visible
presentationString : xml formatted string to allow presentation of data
</PRE>
The default descriptor contains the name, descriptorType, displayName  
and severity(=6) fields.

@since 1.5

 Sun Microsystems, Sept. 2002: Revisited for JMX 1.2 (DF)"
      classrelation 2048155 // <generalisation>
	relation 2048155 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2048155 // <generalisation>
	  b parent class_ref 516635 // MBeanNotificationInfo
      end

      classrelation 2048283 // <realization>
	relation 2048283 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2048283 // <realization>
	  b parent class_ref 1030555 // DescriptorAccess
      end

      classrelation 2048411 // <realization>
	relation 2048411 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2048411 // <realization>
	  b parent class_ref 339867 // Cloneable
      end

      attribute 3037083 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -5211564525059047097L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form 
 depends on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form "
      end

      attribute 3037211 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -7445681389570207141L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version for new serial form "
      end

      classrelation 2048539 // oldSerialPersistentFields (<unidirectional association>)
	relation 2048539 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"notificationDescriptor\", Descriptor.class),
      new ObjectStreamField(\"currClass\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2048539 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      classrelation 2048667 // newSerialPersistentFields (<unidirectional association>)
	relation 2048667 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"notificationDescriptor\", Descriptor.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2048667 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3037339 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual serial version and serial form"
      end

      classrelation 2048795 // serialPersistentFields (<unidirectional association>)
	relation 2048795 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField notificationDescriptor Descriptor The descriptor 
  containing the appropriate metadata for this instance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2048795 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3037467 "compat"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 170395 "initialization"
	
	cpp "" ""
	java "  static {
	try {
	    PrivilegedAction act = new GetPropertyAction(\"jmx.serial.form\");
	    String form = (String) AccessController.doPrivileged(act);
	    compat = (form != null && form.equals(\"1.0\"));
	} catch (Exception e) {
	    // OK: No compat with 1.0
	}
	if (compat) {
	    serialPersistentFields = oldSerialPersistentFields;
	    serialVersionUID = oldSerialVersionUID;
	} else {
	    serialPersistentFields = newSerialPersistentFields;
	    serialVersionUID = newSerialVersionUID;
	}
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 2048923 // notificationDescriptor (<unidirectional association>)
	relation 2048923 --->
	  a role_name "notificationDescriptor" private
	    comment " END Serialization compatibility stuff

@serial The descriptor containing the appropriate metadata for 
        this instance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2048923 // notificationDescriptor (<unidirectional association>)
	  b parent class_ref 1030299 // Descriptor
      end

      attribute 3037595 "currClass"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"ModelMBeanNotificationInfo\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8300315 "ModelMBeanNotificationInfo"
	public explicit_return_type ""
	nparams 3
	  param in name "notifTypes" explicit_type "String"
	  param in name "name" explicit_type "String"
	  param in name "description" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanNotificationInfo object with a default 
descriptor.

@param notifTypes The array of strings (in dot notation) containing 
    the notification types that may be emitted.
@param name The name of the Notification class.
@param description A human readable description of the 
    Notification. Optional."
      end

      operation 8300443 "ModelMBeanNotificationInfo"
	public explicit_return_type ""
	nparams 4
	  param in name "notifTypes" explicit_type "String"
	  param in name "name" explicit_type "String"
	  param in name "description" explicit_type "String"
	  param inout name "descriptor" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanNotificationInfo object.

@param notifTypes The array of strings (in dot notation) 
       containing the notification types that may be emitted.
@param name The name of the Notification class.
@param description A human readable description of the Notification.
       Optional.
@param descriptor An instance of Descriptor containing the 
       appropriate metadata for this instance of the 
       MBeanNotificationInfo. If it is null a default descriptor 
       will be created. If the descriptor does not contain the 
       fields \"displayName\" or \"severity\" these fields are added
       in the  descriptor with their default values.

@exception RuntimeOperationsException Wraps an 
   {@link IllegalArgumentException}. The descriptor is invalid, or 
   descriptor field \"name\" is not equal to parameter name, or 
   descriptor field \"DescriptorType\" is not equal to \"notification\".
"
      end

      operation 8300571 "ModelMBeanNotificationInfo"
	public explicit_return_type ""
	nparams 1
	  param inout name "inInfo" type class_ref 1035931 // ModelMBeanNotificationInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ModelMBeanNotificationInfo object from this 
ModelMBeanNotfication Object.

@param inInfo the ModelMBeanNotificationInfo to be duplicated
"
      end

      operation 8300699 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a new ModelMBeanNotificationInfo which is a 
duplicate of this ModelMBeanNotificationInfo."
      end

      operation 8300827 "getDescriptor"
	public return_type class_ref 1030299 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the associated Descriptor for the
ModelMBeanNotificationInfo.

@return Descriptor associated with the
ModelMBeanNotificationInfo object.

@see #setDescriptor"
      end

      operation 8300955 "setDescriptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inDescriptor" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets associated Descriptor (full replace) for the
ModelMBeanNotificationInfo If the new Descriptor is null,
then the associated Descriptor reverts to a default
descriptor.  The Descriptor is validated before it is
assigned.  If the new Descriptor is invalid, then a
RuntimeOperationsException wrapping an
IllegalArgumentException is thrown.

@param inDescriptor replaces the Descriptor associated with the 
ModelMBeanNotification interface

@exception RuntimeOperationsException Wraps an
{@link IllegalArgumentException} for invalid Descriptor.

@see #getDescriptor"
      end

      operation 8301083 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a human readable string containing 
ModelMBeanNotificationInfo.

@return a string describing this object."
      end

      operation 8301211 "createDefaultDescriptor"
	private return_type class_ref 1030299 // Descriptor
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates default descriptor for notification as follows:
descriptorType=notification,
name=this.getName(),displayname=this.getName(),severity=6"
      end

      operation 8301339 "isValid"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "inDesc" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests that the descriptor is valid and adds appropriate default 
fields not already specified. Field values must be correct for 
field names. 
Descriptor must have the same name as the notification, 
the descriptorType field must be \"notification\","
      end

      operation 8301467 "setDefaults"
	private return_type class_ref 1030299 // Descriptor
	nparams 1
	  param inout name "descriptor" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The following fields will be defaulted if they are not already 
set:
displayName=this.getName(),severity=6
@return the given descriptor, possibly modified."
      end

      operation 8301595 "applyDescriptor"
	private explicit_return_type "void"
	nparams 2
	  param inout name "descriptor" type class_ref 1030299 // Descriptor
	  param in name "ftag" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the given descriptor as this.notificationDescriptor.
Creates a default descriptor if the given descriptor is null.
If the given descriptor is null, check its validity.
If it is valid, clones it and set the defaults fields 
\"displayName\" and \"severity\", if not present.
If it is not valid, throws an exception.
This method is called both by the constructors and by
setDescriptor().
@see #setDefaults
@see #setDescriptor"
      end

      operation 8301723 "tracing"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " SUN Trace and debug functions"
      end

      operation 8301851 "trace"
	private explicit_return_type "void"
	nparams 3
	  param in name "inClass" explicit_type "String"
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8301979 "trace"
	private explicit_return_type "void"
	nparams 2
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8302107 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link ModelMBeanNotificationInfo} from an 
{@link ObjectInputStream}."
      end

      operation 8302235 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link ModelMBeanNotificationInfo} to an 
{@link ObjectOutputStream}."
      end
    end

    class 1036059 "ModelMBeanInfoSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents the meta data for ModelMBeans.  Descriptors have been added on the meta data objects.
<P>
Java resources wishing to be manageable instantiate the ModelMBean using the MBeanServer's 
createMBean method.  The resource then sets the ModelMBeanInfo and Descriptors for the ModelMBean
instance. The attributes and operations exposed via the ModelMBeanInfo for the ModelMBean are accessible
from MBeans, connectors/adaptors like other MBeans. Through the Descriptors, values and methods in
the managed application can be defined and mapped to attributes and operations of the ModelMBean.
This mapping can be defined during development in a file or dynamically and
programmatically at runtime. 
<P>
Every ModelMBean which is instantiated in the MBeanServer becomes manageable: 
its attributes and operations
become remotely accessible through the connectors/adaptors connected to that MBeanServer. 
A Java object cannot be registered in the MBeanServer unless it is a JMX compliant MBean.
By instantiating a ModelMBean, resources are guaranteed that the MBean is valid.

MBeanException and RuntimeOperationsException must be thrown on every public method.  This allows 
 for wrapping exceptions from distributed communications (RMI, EJB, etc.)

@since 1.5"
      classrelation 2046235 // <generalisation>
	relation 2046235 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2046235 // <generalisation>
	  b parent class_ref 512795 // MBeanInfo
      end

      classrelation 2046363 // <realization>
	relation 2046363 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2046363 // <realization>
	  b parent class_ref 1035419 // ModelMBeanInfo
      end

      classrelation 2046491 // <realization>
	relation 2046491 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2046491 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 3035675 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -3944083498453227709L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form "
      end

      attribute 3035803 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -1935722590756516193L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version for new serial form "
      end

      classrelation 2046619 // oldSerialPersistentFields (<unidirectional association>)
	relation 2046619 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"modelMBeanDescriptor\", Descriptor.class),
      new ObjectStreamField(\"mmbAttributes\", MBeanAttributeInfo[].class),
      new ObjectStreamField(\"mmbConstructors\", MBeanConstructorInfo[].class),
      new ObjectStreamField(\"mmbNotifications\", MBeanNotificationInfo[].class),
      new ObjectStreamField(\"mmbOperations\", MBeanOperationInfo[].class),
      new ObjectStreamField(\"currClass\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2046619 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      classrelation 2046747 // newSerialPersistentFields (<unidirectional association>)
	relation 2046747 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "=  
    {
      new ObjectStreamField(\"modelMBeanDescriptor\", Descriptor.class),
      new ObjectStreamField(\"modelMBeanAttributes\", MBeanAttributeInfo[].class),
      new ObjectStreamField(\"modelMBeanConstructors\", MBeanConstructorInfo[].class),
      new ObjectStreamField(\"modelMBeanNotifications\", MBeanNotificationInfo[].class),
      new ObjectStreamField(\"modelMBeanOperations\", MBeanOperationInfo[].class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2046747 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3035931 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual serial version and serial form"
      end

      classrelation 2046875 // serialPersistentFields (<unidirectional association>)
	relation 2046875 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField modelMBeanDescriptor Descriptor The descriptor containing MBean wide policy
@serialField modelMBeanAttributes ModelMBeanAttributeInfo[] The array of {@link ModelMBeanAttributeInfo} objects which
             have descriptors 
@serialField modelMBeanConstructors MBeanConstructorInfo[] The array of {@link ModelMBeanConstructorInfo} objects which
             have descriptors 
@serialField modelMBeanNotifications MBeanNotificationInfo[] The array of {@link ModelMBeanNotificationInfo} objects which
             have descriptors 
@serialField modelMBeanOperations MBeanOperationInfo[] The array of {@link ModelMBeanOperationInfo} objects which
             have descriptors 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2046875 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      attribute 3036059 "compat"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 170267 "initialization"
	
	cpp "" ""
	java "  static {
	try {
	    PrivilegedAction act = new GetPropertyAction(\"jmx.serial.form\");
	    String form = (String) AccessController.doPrivileged(act);
	    compat = (form != null && form.equals(\"1.0\"));
	} catch (Exception e) {
	    // OK: No compat with 1.0
	}
	if (compat) {
	    serialPersistentFields = oldSerialPersistentFields;
	    serialVersionUID = oldSerialVersionUID;
	} else {
	    serialPersistentFields = newSerialPersistentFields;
	    serialVersionUID = newSerialVersionUID;
	}
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 2047003 // modelMBeanDescriptor (<unidirectional association>)
	relation 2047003 --->
	  a role_name "modelMBeanDescriptor" init_value "=  null" private
	    comment " END Serialization compatibility stuff

@serial The descriptor containing MBean wide policy

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2047003 // modelMBeanDescriptor (<unidirectional association>)
	  b parent class_ref 1030299 // Descriptor
      end

      classrelation 2047131 // modelMBeanAttributes (<unidirectional association>)
	relation 2047131 --->
	  a role_name "modelMBeanAttributes" multiplicity "[]" private
	    comment " The following fields always have the same values as the
fields inherited from MBeanInfo and are retained only for
compatibility.  By rewriting the serialization code we could
get rid of them.

These fields can't be final because they are assigned to by
readObject().  

@serial The array of {@link ModelMBeanAttributeInfo} objects which
        have descriptors 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2047131 // modelMBeanAttributes (<unidirectional association>)
	  b parent class_ref 514971 // MBeanAttributeInfo
      end

      classrelation 2047259 // modelMBeanConstructors (<unidirectional association>)
	relation 2047259 --->
	  a role_name "modelMBeanConstructors" multiplicity "[]" private
	    comment "
@serial The array of {@link ModelMBeanConstructorInfo} objects which
        have descriptors 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2047259 // modelMBeanConstructors (<unidirectional association>)
	  b parent class_ref 515099 // MBeanConstructorInfo
      end

      classrelation 2047387 // modelMBeanNotifications (<unidirectional association>)
	relation 2047387 --->
	  a role_name "modelMBeanNotifications" multiplicity "[]" private
	    comment "
@serial The array of {@link ModelMBeanNotificationInfo} objects which
        have descriptors 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2047387 // modelMBeanNotifications (<unidirectional association>)
	  b parent class_ref 516635 // MBeanNotificationInfo
      end

      classrelation 2047515 // modelMBeanOperations (<unidirectional association>)
	relation 2047515 --->
	  a role_name "modelMBeanOperations" multiplicity "[]" private
	    comment "
@serial The array of {@link ModelMBeanOperationInfo} objects which
        have descriptors 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2047515 // modelMBeanOperations (<unidirectional association>)
	  b parent class_ref 1031323 // MBeanOperationInfo
      end

      attribute 3036187 "ATTR"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"attribute\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3036315 "OPER"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"operation\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3036443 "NOTF"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"notification\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3036571 "CONS"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"constructor\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3036699 "MMB"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"mbean\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3036827 "ALL"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"all\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3036955 "currClass"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"ModelMBeanInfoSupport\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8297371 "ModelMBeanInfoSupport"
	public explicit_return_type ""
	nparams 1
	  param inout name "mbi" type class_ref 1035419 // ModelMBeanInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ModelMBeanInfoSupport which is a duplicate of the one
passed in.

@param mbi the ModelMBeanInfo instance from which the ModelMBeanInfo
being created is initialized."
      end

      operation 8297499 "ModelMBeanInfoSupport"
	public explicit_return_type ""
	nparams 6
	  param in name "className" explicit_type "String"
	  param in name "description" explicit_type "String"
	  param inout name "attributes" type class_ref 1035547 // ModelMBeanAttributeInfo
	  param inout name "constructors" type class_ref 1035675 // ModelMBeanConstructorInfo
	  param inout name "operations" type class_ref 1035803 // ModelMBeanOperationInfo
	  param inout name "notifications" type class_ref 1035931 // ModelMBeanNotificationInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a ModelMBeanInfoSupport with the provided information,
but the descriptor is a default.
The default descriptor is: name=mbeanName, descriptorType=mbean,
displayName=ClassName, persistPolicy=never, log=F, visibility=1

@param className classname of the MBean
@param description human readable description of the
ModelMBean
@param attributes array of ModelMBeanAttributeInfo objects
which have descriptors
@param constructors array of ModelMBeanConstructorInfo
objects which have descriptors
@param operations array of ModelMBeanOperationInfo objects
which have descriptors
@param notifications array of ModelMBeanNotificationInfo
objects which have descriptors"
      end

      operation 8297627 "ModelMBeanInfoSupport"
	public explicit_return_type ""
	nparams 7
	  param in name "className" explicit_type "String"
	  param in name "description" explicit_type "String"
	  param inout name "attributes" type class_ref 1035547 // ModelMBeanAttributeInfo
	  param inout name "constructors" type class_ref 1035675 // ModelMBeanConstructorInfo
	  param inout name "operations" type class_ref 1035803 // ModelMBeanOperationInfo
	  param inout name "notifications" type class_ref 1035931 // ModelMBeanNotificationInfo
	  param inout name "mbeandescriptor" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a ModelMBeanInfoSupport with the provided information
and the descriptor given in parameter.

@param className classname of the MBean
@param description human readable description of the
ModelMBean
@param attributes array of ModelMBeanAttributeInfo objects
which have descriptors
@param constructors array of ModelMBeanConstructorInfo
objects which have descriptor
@param operations array of ModelMBeanOperationInfo objects
which have descriptor
@param notifications array of ModelMBeanNotificationInfo
objects which have descriptor
@param mbeandescriptor descriptor to be used as the
MBeanDescriptor containing MBean wide policy. If the
descriptor is null, a default descriptor will be constructed.
The default descriptor is:
name=className, descriptorType=mbean, displayName=className,
persistPolicy=never, log=F, visibility=1.  If the
descriptor does not contain all these fields, they will be
added with these default values.

@exception RuntimeOperationsException Wraps an
IllegalArgumentException for invalid descriptor passed in
parameter.  (see {@link #getMBeanDescriptor
getMBeanDescriptor} for the definition of a valid MBean
descriptor.)"
      end

      classrelation 2047643 // NO_ATTRIBUTES (<unidirectional association>)
	relation 2047643 --->
	  a role_name "NO_ATTRIBUTES" multiplicity "[]" init_value "= 
	new ModelMBeanAttributeInfo[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2047643 // NO_ATTRIBUTES (<unidirectional association>)
	  b parent class_ref 1035547 // ModelMBeanAttributeInfo
      end

      classrelation 2047771 // NO_CONSTRUCTORS (<unidirectional association>)
	relation 2047771 --->
	  a role_name "NO_CONSTRUCTORS" multiplicity "[]" init_value "= 
	new ModelMBeanConstructorInfo[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2047771 // NO_CONSTRUCTORS (<unidirectional association>)
	  b parent class_ref 1035675 // ModelMBeanConstructorInfo
      end

      classrelation 2047899 // NO_NOTIFICATIONS (<unidirectional association>)
	relation 2047899 --->
	  a role_name "NO_NOTIFICATIONS" multiplicity "[]" init_value "= 
	new ModelMBeanNotificationInfo[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2047899 // NO_NOTIFICATIONS (<unidirectional association>)
	  b parent class_ref 1035931 // ModelMBeanNotificationInfo
      end

      classrelation 2048027 // NO_OPERATIONS (<unidirectional association>)
	relation 2048027 --->
	  a role_name "NO_OPERATIONS" multiplicity "[]" init_value "= 
	new ModelMBeanOperationInfo[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2048027 // NO_OPERATIONS (<unidirectional association>)
	  b parent class_ref 1035803 // ModelMBeanOperationInfo
      end

      operation 8297755 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Java doc inherited from MOdelMBeanInfo interface "
      end

      operation 8297883 "getDescriptors"
	public return_type class_ref 1030299 // Descriptor
	nparams 1
	  param in name "inDescriptorType" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8298011 "setDescriptors"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inDescriptors" type class_ref 1030299 // Descriptor
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8298139 "getDescriptor"
	public return_type class_ref 1030299 // Descriptor
	nparams 1
	  param in name "inDescriptorName" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Descriptor requested by name.

@param inDescriptorName The name of the descriptor.

@return Descriptor containing a descriptor for the ModelMBean with the same name.
If no descriptor is found, null is returned.

@exception MBeanException Wraps a distributed communication Exception. 
@exception RuntimeOperationsException Wraps an IllegalArgumentException for null name. 

@see #setDescriptor"
      end

      operation 8298267 "getDescriptor"
	public return_type class_ref 1030299 // Descriptor
	nparams 2
	  param in name "inDescriptorName" explicit_type "String"
	  param in name "inDescriptorType" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8298395 "setDescriptor"
	public explicit_return_type "void"
	nparams 2
	  param inout name "inDescriptor" type class_ref 1030299 // Descriptor
	  param in name "inDescriptorType" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8298523 "getAttribute"
	public return_type class_ref 1035547 // ModelMBeanAttributeInfo
	nparams 1
	  param in name "inName" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8298651 "getOperation"
	public return_type class_ref 1035803 // ModelMBeanOperationInfo
	nparams 1
	  param in name "inName" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8298779 "getConstructor"
	public return_type class_ref 1035675 // ModelMBeanConstructorInfo
	nparams 1
	  param in name "inName" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ModelMBeanConstructorInfo requested by name.
If no ModelMBeanConstructorInfo exists for this name null is returned.

@param inName the name of the constructor.

@return the constructor info for the named constructor, or null
if there is none.

@exception MBeanException Wraps a distributed communication Exception. 
@exception RuntimeOperationsException Wraps an IllegalArgumentException for a null constructor name."
      end

      operation 8298907 "getNotification"
	public return_type class_ref 1035931 // ModelMBeanNotificationInfo
	nparams 1
	  param in name "inName" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8299035 "getMBeanDescriptor"
	public return_type class_ref 1030299 // Descriptor
	nparams 0
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8299163 "setMBeanDescriptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inMBeanDescriptor" type class_ref 1030299 // Descriptor
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8299291 "createDefaultDescriptor"
	private return_type class_ref 1030299 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The default descriptor is:
name=mbeanName,descriptorType=mbean, displayName=this.getClassName(), 
	persistPolicy=never,log=F,visibility=1"
      end

      operation 8299419 "isValidDescriptor"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "inDesc" type class_ref 1030299 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates the ModelMBeanDescriptor 
If the descriptor does not contain all these fields,
they will be added with these default values.
name=mbeanName,descriptorType=mbean, displayName=this.getClassName(), 
	persistPolicy=never,log=F,visibility=1

Will return false if the MBeanDescriptor has a null name or descriptorType."
      end

      operation 8299547 "addDefaultFields"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8299675 "tracing"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " SUN Trace and debug functions"
      end

      operation 8299803 "trace"
	private explicit_return_type "void"
	nparams 3
	  param in name "inClass" explicit_type "String"
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8299931 "trace"
	private explicit_return_type "void"
	nparams 2
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8300059 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link ModelMBeanInfoSupport} from an {@link ObjectInputStream}."
      end

      operation 8300187 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link ModelMBeanInfoSupport} to an {@link ObjectOutputStream}."
      end
    end

    class 1036187 "RequiredModelMBean"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is the implementation of a ModelMBean. An appropriate
implementation of a ModelMBean must be shipped with every JMX Agent
and the class must be named RequiredModelMBean.
<P>
Java resources wishing to be manageable instantiate the
RequiredModelMBean using the MBeanServer's createMBean method.
The resource then sets the MBeanInfo and Descriptors for the
RequiredModelMBean instance. The attributes and operations exposed
via the ModelMBeanInfo for the ModelMBean are accessible
from MBeans, connectors/adaptors like other MBeans. Through the
Descriptors, values and methods in the managed application can be
defined and mapped to attributes and operations of the ModelMBean.
This mapping can be defined in an XML formatted file or dynamically and
programmatically at runtime.
<P>
Every RequiredModelMBean which is instantiated in the MBeanServer
becomes manageable:<br>
its attributes and operations become remotely accessible through the
connectors/adaptors connected to that MBeanServer.
<P>
A Java object cannot be registered in the MBeanServer unless it is a
JMX compliant MBean. By instantiating a RequiredModelMBean, resources
are guaranteed that the MBean is valid.

MBeanException and RuntimeOperationsException must be thrown on every
public method.  This allows for wrapping exceptions from distributed
communications (RMI, EJB, etc.)

@since 1.5"
      classrelation 2049819 // <realization>
	relation 2049819 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2049819 // <realization>
	  b parent class_ref 1035163 // ModelMBean
      end

      classrelation 2049947 // <realization>
	relation 2049947 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2049947 // <realization>
	  b parent class_ref 517019 // MBeanRegistration
      end

      classrelation 2050075 // <realization>
	relation 2050075 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2050075 // <realization>
	  b parent class_ref 516379 // NotificationEmitter
      end

      classrelation 2050203 // modelMBeanInfo (<unidirectional association>)
	relation 2050203 --->
	  a role_name "modelMBeanInfo" package
	    comment " attributes                        
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2050203 // modelMBeanInfo (<unidirectional association>)
	  b parent class_ref 1035419 // ModelMBeanInfo
      end

      classrelation 2050331 // generalBroadcaster (<unidirectional association>)
	relation 2050331 --->
	  a role_name "generalBroadcaster" init_value "=  null" private
	    comment " Notification broadcaster for any notification to be sent
from the application through the RequiredModelMBean.  
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2050331 // generalBroadcaster (<unidirectional association>)
	  b parent class_ref 516763 // NotificationBroadcasterSupport
      end

      classrelation 2050459 // attributeBroadcaster (<unidirectional association>)
	relation 2050459 --->
	  a role_name "attributeBroadcaster" init_value "=  null" private
	    comment " Notification broadcaster for attribute change notifications 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2050459 // attributeBroadcaster (<unidirectional association>)
	  b parent class_ref 516763 // NotificationBroadcasterSupport
      end

      attribute 3038363 "managedResource"
	private explicit_type "Object"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " handle, name, or reference for instance on which the actual invoke
and operations will be executed "
      end

      attribute 3038491 "currClass"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"RequiredModelMBean\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3038619 "registered"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " records the registering in MBeanServer "
      end

      classrelation 2050587 // server (<unidirectional association>)
	relation 2050587 --->
	  a role_name "server" init_value "=  null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2050587 // server (<unidirectional association>)
	  b parent class_ref 513179 // MBeanServer
      end

      operation 8304411 "RequiredModelMBean"
	public explicit_return_type ""
	nparams 0
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " constructors                      

Constructs an <CODE>RequiredModelMBean</CODE> with an empty
ModelMBeanInfo.
<P>
The RequiredModelMBean's MBeanInfo and Descriptors
can be customized using the {@link #setModelMBeanInfo} method.
After the RequiredModelMBean's MBeanInfo and Descriptors are
customized, the RequiredModelMBean can be registered with
the MBeanServer.

@exception MBeanException Wraps a distributed communication Exception.

@exception RuntimeOperationsException Wraps a {@link
RuntimeException} during the construction of the object."
      end

      operation 8304539 "RequiredModelMBean"
	public explicit_return_type ""
	nparams 1
	  param inout name "mbi" type class_ref 1035419 // ModelMBeanInfo
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a RequiredModelMBean object using ModelMBeanInfo passed in.
As long as the RequiredModelMBean is not registered
with the MBeanServer yet, the RequiredModelMBean's MBeanInfo and
Descriptors can be customized using the {@link #setModelMBeanInfo}
method.
After the RequiredModelMBean's MBeanInfo and Descriptors are
customized, the RequiredModelMBean can be registered with the
MBeanServer.

@param mbi The ModelMBeanInfo object to be used by the
           RequiredModelMBean. The given ModelMBeanInfo is cloned
           and modified as specified by {@link #setModelMBeanInfo}

@exception MBeanException Wraps a distributed communication Exception.
@exception RuntimeOperationsException Wraps an
   {link java.lang.IllegalArgumentException}:
	        The MBeanInfo passed in parameter is null.
"
      end

      operation 8304667 "setModelMBeanInfo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mbi" type class_ref 1035419 // ModelMBeanInfo
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " initializers                      

Initializes a ModelMBean object using ModelMBeanInfo passed in.
This method makes it possible to set a customized ModelMBeanInfo on
the ModelMBean as long as it is not registered with the MBeanServer.
<br>
Once the ModelMBean's ModelMBeanInfo (with Descriptors) are
customized and set on the ModelMBean, the  ModelMBean be
registered with the MBeanServer.
<P>
If the ModelMBean is currently registered, this method throws
a {@link javax.management.RuntimeOperationsException} wrapping an
{@link IllegalStateException}
<P>
If the given <var>inModelMBeanInfo</var> does not contain any
{@link ModelMBeanNotificationInfo} for the <code>GENERIC</code>
or <code>ATTRIBUTE_CHANGE</code> notifications, then the
RequiredModelMBean will supply its own default
{@link ModelMBeanNotificationInfo ModelMBeanNotificationInfo}s for
those missing notifications.

@param mbi The ModelMBeanInfo object to be used
       by the ModelMBean.
	
@exception MBeanException Wraps a distributed communication
       Exception.
@exception RuntimeOperationsException
<ul><li>Wraps an {@link IllegalArgumentException} if
        the MBeanInfo passed in parameter is null.</li>
    <li>Wraps an {@link IllegalStateException} if the ModelMBean
        is currently registered in the MBeanServer.</li>
</ul>
"
      end

      operation 8304795 "setManagedResource"
	public explicit_return_type "void"
	nparams 2
	  param inout name "mr" explicit_type "Object"
	  param in name "mr_type" explicit_type "String"
	nexceptions 4
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	  exception class_ref 511643 // InstanceNotFoundException
	  exception class_ref 1035035 // InvalidTargetObjectTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the instance handle of the object against which to
execute all methods in this ModelMBean management interface
(MBeanInfo and Descriptors).

@param mr Object that is the managed resource
@param mr_type The type of reference for the managed resource.
    <br>Can be: \"ObjectReference\", \"Handle\", \"IOR\", \"EJBHandle\",
        or \"RMIReference\".
    <br>In this implementation only \"ObjectReference\" is supported.

@exception MBeanException The initializer of the object has
           thrown an exception.
@exception InstanceNotFoundException The managed resource
           object could not be found
@exception InvalidTargetObjectTypeException The managed
           resource type should be \"ObjectReference\".
@exception RuntimeOperationsException Wraps a {@link
           RuntimeException} when setting the resource."
      end

      operation 8304923 "load"
	public explicit_return_type "void"
	nparams 0
	nexceptions 3
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	  exception class_ref 511643 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Instantiates this MBean instance with the data found for
the MBean in the persistent store.  The data loaded could include
attribute and operation values.</p>

<p>This method should be called during construction or
initialization of this instance, and before the MBean is
registered with the MBeanServer.</p>

<p>If the implementation of this class does not support
persistence, an {@link MBeanException} wrapping a {@link
ServiceNotFoundException} is thrown.</p>

@exception MBeanException Wraps another exception, or
persistence is not supported
@exception RuntimeOperationsException Wraps exceptions from the
persistence mechanism
@exception InstanceNotFoundException Could not find or load
this MBean from persistent storage"
      end

      operation 8305051 "store"
	public explicit_return_type "void"
	nparams 0
	nexceptions 3
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	  exception class_ref 511643 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Captures the current state of this MBean instance and writes
it out to the persistent store.  The state stored could include
attribute and operation values.</p>

<p>If the implementation of this class does not support
persistence, an {@link MBeanException} wrapping a {@link
ServiceNotFoundException} is thrown.</p>

<p>Persistence policy from the MBean and attribute descriptor
is used to guide execution of this method. The MBean should be
stored if 'persistPolicy' field is:</p>

<PRE>  != \"never\"
  = \"always\"
  = \"onTimer\" and now > 'lastPersistTime' + 'persistPeriod'
  = \"NoMoreOftenThan\" and now > 'lastPersistTime' + 'persistPeriod'
</PRE>

<p>Do not store the MBean if 'persistPolicy' field is:</p>
<PRE>
   = \"never\"
   = \"onUpdate\"
   = \"onTimer\" && now < 'lastPersistTime' + 'persistPeriod'
</PRE>

@exception MBeanException Wraps another exception, or
persistence is not supported
@exception RuntimeOperationsException Wraps exceptions from the
persistence mechanism
@exception InstanceNotFoundException Could not find/access the
persistent store"
      end

      operation 8305179 "resolveForCacheValue"
	private explicit_return_type "Object"
	nparams 1
	  param inout name "descr" type class_ref 1030299 // Descriptor
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " DynamicMBean Interface            

The resolveForCacheValue method checks the descriptor passed in to
see if there is a valid cached value in the descriptor.
The valid value will be in the 'value' field if there is one.
If the 'currencyTimeLimit' field in the descriptor is:
<ul>
  <li><b>&lt;0</b> Then the value is not cached and is never valid.
        Null is returned. The 'value' and 'lastUpdatedTimeStamp'
        fields are cleared.</li>
  <li><b>=0</b> Then the value is always cached and always valid.
        The 'value' field is returned.
        The 'lastUpdatedTimeStamp' field is not checked.</li>
  <li><b>&gt;0</b> Represents the number of seconds that the
        'value' field is valid.
        The 'value' field is no longer valid when
        'lastUpdatedTimeStamp' + 'currencyTimeLimit' &gt; Now.</li>
</ul>
<li>When 'value' is valid, 'valid' is returned.</li>
<li>When 'value' is no longer valid then null is returned and
    'value' and 'lastUpdatedTimeStamp' fields are cleared.</li>
"
      end

      operation 8305307 "getMBeanInfo"
	public return_type class_ref 512795 // MBeanInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the attributes, operations, constructors and notifications
that this RequiredModelMBean exposes for management.

@return  An instance of ModelMBeanInfo allowing retrieval all
         attributes, operations, and Notifications of this MBean.
"
      end

      operation 8305435 "printModelMBeanInfo"
	private explicit_return_type "String"
	nparams 1
	  param inout name "info" type class_ref 1035419 // ModelMBeanInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8305563 "echo"
	private explicit_return_type "void"
	nparams 1
	  param in name "txt" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8305691 "invoke"
	public explicit_return_type "Object"
	nparams 3
	  param in name "opName" explicit_type "String"
	  param inout name "opArgs" explicit_type "Object"
	  param in name "sig" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 511003 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes a method on or through a RequiredModelMBean and returns
the result of the method execution.
<P>
If the given method to be invoked, together with the provided
signature, matches one of RequiredModelMbean
accessible methods, this one will be call. Otherwise the call to
the given method will be tried on the managed resource.
<P>
The last value returned by an operation may be cached in
the operation's descriptor which
is in the ModelMBeanOperationInfo's descriptor.
The valid value will be in the 'value' field if there is one.
If the 'currencyTimeLimit' field in the descriptor is:
<UL>
<LI><b>&lt;0</b> Then the value is not cached and is never valid.
     The operation method is invoked.
     The 'value' and 'lastUpdatedTimeStamp' fields are cleared.</LI>
<LI><b>=0</b> Then the value is always cached and always valid.
     The 'value' field is returned. If there is no 'value' field
     then the operation method is invoked for the attribute.
     The 'lastUpdatedTimeStamp' field and `value' fields are set to
     the operation's return value and the current time stamp.</LI>
<LI><b>&gt;0</b> Represents the number of seconds that the 'value'
     field is valid.
     The 'value' field is no longer valid when
     'lastUpdatedTimeStamp' + 'currencyTimeLimit' &gt; Now.
     <UL>
        <LI>When 'value' is valid, 'value' is returned.</LI>
        <LI>When 'value' is no longer valid then the operation
            method is invoked. The 'lastUpdatedTimeStamp' field
            and `value' fields are updated.</lI>
     </UL>
</LI>
</UL>

<p><b>Note:</b> because of inconsistencies in previous versions of
this specification, it is recommended not to use negative or zero
values for <code>currencyTimeLimit</code>.  To indicate that a
cached value is never valid, omit the
<code>currencyTimeLimit</code> field.  To indicate that it is
always valid, use a very large number for this field.</p>

@param opName The name of the method to be invoked. The
    name can be the fully qualified method name including the
    classname, or just the method name if the classname is
    defined in the 'class' field of the operation descriptor.
@param opArgs An array containing the parameters to be set
    when the operation is invoked
@param sig An array containing the signature of the
    operation. The class objects will be loaded using the same
    class loader as the one used for loading the MBean on which
    the operation was invoked.

@return  The object returned by the method, which represents the
    result of invoking the method on the specified managed resource.

@exception MBeanException  Wraps one of the following Exceptions:
<UL>
<LI> An Exception thrown by the managed object's invoked method.</LI>
<LI> {@link ServiceNotFoundException}: No ModelMBeanOperationInfo or
     no descriptor defined for the specified operation or the managed
     resource is null.</LI>
<LI> {@link InvalidTargetObjectTypeException}: The 'targetType'
     field value is not 'objectReference'.</LI>
</UL>
@exception ReflectionException  Wraps an {@link java.lang.Exception}
     thrown while trying to invoke the method.
@exception RuntimeOperationsException Wraps an
     {@link IllegalArgumentException} Method name is null.



The requirement to be able to invoke methods on the
RequiredModelMBean class itself makes this method considerably
more complicated than it might otherwise be.  Note that, unlike
earlier versions, we do not allow you to invoke such methods if
they are not explicitly mentioned in the ModelMBeanInfo.  Doing
so was potentially a security problem, and certainly very
surprising.

We do not look for the method in the RequiredModelMBean class
itself if:
(a) there is a \"targetObject\" field in the Descriptor for the
operation; or
(b) there is a \"class\" field in the Descriptor for the operation
and the named class is not RequiredModelMBean or one of its
superinterfaces; or
(c) the name of the operation is not the name of a method in
RequiredModelMBean (this is just an optimization).

In cases (a) and (b), if you have gone to the trouble of adding
those fields specifically for this operation then presumably you
do not want RequiredModelMBean's methods to be called.

We have to pay attention to class loading issues.  If the
\"class\" field is present, the named class has to be resolved
relative to RequiredModelMBean's class loader to test the
condition (b) above, and relative to the managed resource's
class loader to ensure that the managed resource is in fact of
the named class (or a subclass).  The class names in the sig
array likewise have to be resolved, first against
RequiredModelMBean's class loader, then against the managed
resource's class loader.  There is no point in using any other
loader because when we call Method.invoke we must call it on
a Method that is implemented by the target object."
      end

      operation 8305819 "resolveMethod"
	class_operation private return_type class_ref 170651 // Method
	nparams 3
	  param inout name "targetClass" type class_ref 164635 // Class
	  param in name "opMethodName" explicit_type "String"
	  param in name "sig" explicit_type "String"
	nexceptions 1
	  exception class_ref 511003 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 2050715 // primitiveClasses (<unidirectional association>)
	relation 2050715 --->
	  a role_name "primitiveClasses" multiplicity "[]" init_value "=  {
	int.class, long.class, boolean.class, double.class,
	float.class, short.class, byte.class, char.class,
    }" class_relation const_relation private
	    comment " Map e.g. \"int\" to int.class.  Goodness knows how many time this
particular wheel has been reinvented.  
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2050715 // primitiveClasses (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      classrelation 2050843 // primitiveClassMap (<unidirectional association>)
	relation 2050843 --->
	  a role_name "primitiveClassMap" init_value "= 
	new HashMap()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2050843 // primitiveClassMap (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      extra_member 170651 "initialization"
	
	cpp "" ""
	java "  static {
	for (int i = 0; i < primitiveClasses.length; i++) {
	    final Class c = primitiveClasses[i];
	    primitiveClassMap.put(c.getName(), c);
	}
    }"
	php ""
	python ""
	idl ""
      end

      operation 8305947 "findRMMBMethod"
	class_operation private return_type class_ref 170651 // Method
	nparams 4
	  param in name "opMethodName" explicit_type "String"
	  param inout name "targetObjectField" explicit_type "Object"
	  param in name "opClassName" explicit_type "String"
	  param in name "sig" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Find a method in RequiredModelMBean as determined by the given
parameters.  Return null if there is none, or if the parameters
exclude using it.  Called from invoke. "
      end

      operation 8306075 "invokeMethod"
	private explicit_return_type "Object"
	nparams 4
	  param in name "opName" explicit_type "String"
	  param inout name "method" type class_ref 170651 // Method
	  param inout name "targetObject" explicit_type "Object"
	  param inout name "opArgs" explicit_type "Object"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 511003 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke the given method, and throw the somewhat unpredictable
appropriate exception if the method itself gets an exception."
      end

      operation 8306203 "cacheResult"
	private explicit_return_type "void"
	nparams 3
	  param inout name "opInfo" type class_ref 1035803 // ModelMBeanOperationInfo
	  param inout name "opDescr" type class_ref 1030299 // Descriptor
	  param inout name "result" explicit_type "Object"
	nexceptions 1
	  exception class_ref 511387 // MBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cache the result of an operation in the descriptor, if that is
called for by the descriptor's configuration.  Note that we
don't remember operation parameters when caching the result, so
this is unlikely to be useful if there are any."
      end

      classrelation 2050971 // rmmbMethodNames (<unidirectional association>)
	relation 2050971 --->
	  a role_name "rmmbMethodNames" class_relation private
	    comment "
Determine whether the given name is the name of a public method
in this class.  This is only an optimization: it prevents us
from trying to do argument type lookups and reflection on a
method that will obviously fail because it has the wrong name.

The first time this method is called we do the reflection, and
every other time we reuse the remembered values.

It's conceivable that the (possibly malicious) first caller
doesn't have the required permissions to do reflection, in
which case we don't touch anything so as not to interfere
with a later permissionful caller.

<String>"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2050971 // rmmbMethodNames (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      operation 8306331 "isRMMBMethodName"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8306459 "getAttribute"
	public explicit_return_type "Object"
	nparams 1
	  param in name "attrName" explicit_type "String"
	nexceptions 3
	  exception class_ref 511899 // AttributeNotFoundException
	  exception class_ref 511387 // MBeanException
	  exception class_ref 511003 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of a specific attribute defined for this
ModelMBean.
The last value returned by an attribute may be cached in the
attribute's descriptor.
The valid value will be in the 'value' field if there is one.
If the 'currencyTimeLimit' field in the descriptor is:
<UL>
<LI>  <b>&lt;0</b> Then the value is not cached and is never valid.
      The getter method is invoked for the attribute.
      The 'value' and 'lastUpdatedTimeStamp' fields are cleared.</LI>
<LI>  <b>=0</b> Then the value is always cached and always valid.
      The 'value' field is returned. If there is no'value' field
      then the getter method is invoked for the attribute.
      The 'lastUpdatedTimeStamp' field and `value' fields are set
      to the attribute's value and the current time stamp.</LI>
<LI>  <b>&gt;0</b> Represents the number of seconds that the 'value'
      field is valid.
      The 'value' field is no longer valid when
      'lastUpdatedTimeStamp' + 'currencyTimeLimit' &gt; Now.
  <UL>
       <LI>When 'value' is valid, 'value' is returned.</LI>
       <LI>When 'value' is no longer valid then the getter
           method is invoked for the attribute.
           The 'lastUpdatedTimeStamp' field and `value' fields
           are updated.</LI>
  </UL></LI>
</UL>

<p><b>Note:</b> because of inconsistencies in previous versions of
this specification, it is recommended not to use negative or zero
values for <code>currencyTimeLimit</code>.  To indicate that a
cached value is never valid, omit the
<code>currencyTimeLimit</code> field.  To indicate that it is
always valid, use a very large number for this field.</p>

<p>If the 'getMethod' field contains the name of a valid
operation descriptor, then the method described by the
operation descriptor is executed.  The response from the
method is returned as the value of the attribute.  If the
operation fails or the returned value is not of the same
type as the attribute, an exception will be thrown.  If no
'getMethod' field is defined then the default value of the
attribute is returned. In this implementation, in every
case where the getMethod needs to be called, because the
method is invoked through the standard \"invoke\" method and
thus needs operationInfo, an operation must be specified
for that getMethod so that the invocation works correctly.</p>

@param attrName A String specifying the name of the
attribute to be retrieved. It must match the name of a
ModelMBeanAttributeInfo.

@return The value of the retrieved attribute from the
descriptor 'value' field or from the invocation of the
operation in the 'getMethod' field of the descriptor.

@exception AttributeNotFoundException The specified attribute is
   not accessible in the MBean.
   The following cases may result in an AttributeNotFoundException:
   <UL>
     <LI> No ModelMBeanInfo was found for the Model MBean.</LI>
     <LI> No ModelMBeanAttributeInfo was found for the specified
          attribute name.</LI>
     <LI> The ModelMBeanAttributeInfo isReadable method returns
          'false'.</LI>
   </UL>
@exception MBeanException  Wraps one of the following Exceptions:
   <UL>
     <LI> {@link InvalidAttributeValueException}: A wrong value type
          was received from the attribute's getter method or
          no 'getMethod' field defined in the descriptor for
          the attribute and no default value exists.</LI>
     <LI> {@link ServiceNotFoundException}: No
          ModelMBeanOperationInfo defined for the attribute's
          getter method or no descriptor associated with the
          ModelMBeanOperationInfo or the managed resource is
          null.</LI>
     <LI> {@link InvalidTargetObjectTypeException} The 'targetType'
          field value is not 'objectReference'.</LI>
     <LI> An Exception thrown by the managed object's getter.</LI>
   </UL>
@exception ReflectionException  Wraps an {@link java.lang.Exception}
   thrown while trying to invoke the getter.
@exception RuntimeOperationsException Wraps an
   {@link IllegalArgumentException}: The attribute name in
   parameter is null.

@see #setAttribute(javax.management.Attribute)"
      end

      operation 8306587 "getAttributes"
	public return_type class_ref 512027 // AttributeList
	nparams 1
	  param in name "attrNames" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the values of several attributes in the ModelMBean.
Executes a getAttribute for each attribute name in the
attrNames array passed in.

@param attrNames A String array of names of the attributes
to be retrieved.

@return The array of the retrieved attributes.

@exception RuntimeOperationsException Wraps an
{@link IllegalArgumentException}: The object name in parameter is
null or attributes in parameter is null.

@see #setAttributes(javax.management.AttributeList)"
      end

      operation 8306715 "setAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "attribute" type class_ref 512155 // Attribute
	nexceptions 4
	  exception class_ref 511899 // AttributeNotFoundException
	  exception class_ref 512283 // InvalidAttributeValueException
	  exception class_ref 511387 // MBeanException
	  exception class_ref 511003 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specific attribute of a named ModelMBean.

If the 'setMethod' field of the attribute's descriptor
contains the name of a valid operation descriptor, then the
method described by the operation descriptor is executed.
In this implementation, the operation descriptor must be specified
correctly and assigned to the modelMBeanInfo so that the 'setMethod'
works correctly.
The response from the method is set as the value of the attribute
in the descriptor.

<p>If currencyTimeLimit is &gt; 0, then the new value for the
attribute is cached in the attribute descriptor's
'value' field and the 'lastUpdatedTimeStamp' field is set to
the current time stamp.

<p>If the persist field of the attribute's descriptor is not null
then Persistence policy from the attribute descriptor is used to
guide storing the attribute in a persistent store.
<br>Store the MBean if 'persistPolicy' field is:
<UL>
<Li> != \"never\"</Li>
<Li> = \"always\"</Li>
<Li> = \"onUpdate\"</Li>
<Li> = \"onTimer\" and now &gt; 'lastPersistTime' + 'persistPeriod'</Li>
<Li> = \"NoMoreOftenThan\" and now &gt; 'lastPersistTime' +
        'persistPeriod'</Li>
</UL>
Do not store the MBean if 'persistPolicy' field is:
<UL>
<Li> = \"never\"</Li>
<Li> = \"onTimer\" && now &lt; 'lastPersistTime' + 'persistPeriod'</Li>
<Li> = \"NoMoreOftenThan\" and now &lt; 'lastPersistTime' +
       'persistPeriod'</Li>
</UL>

<p>The ModelMBeanInfo of the Model MBean is stored in a file.

@param attribute The Attribute instance containing the name of
       the attribute to be set and the value it is to be set to.


@exception AttributeNotFoundException The specified attribute is
  not accessible in the MBean.
  <br>The following cases may result in an AttributeNotFoundException:
  <UL>
    <LI> No ModelMBeanAttributeInfo is found for the specified
         attribute.</LI>
    <LI> The ModelMBeanAttributeInfo's isWritable method returns
         'false'.</LI>
  </UL>
@exception InvalidAttributeValueException No descriptor is defined
  for the specified attribute.
@exception MBeanException Wraps one of the following Exceptions:
  <UL>
    <LI> An Exception thrown by the managed object's setter.</LI>
    <LI> A {@link ServiceNotFoundException} if no `setMethod` field
         is defined in the descriptor for the attribute or the
         managed resource is null.</LI>
    <LI> {@link InvalidTargetObjectTypeException} The 'targetType'
         field value is not 'objectReference'.</LI>
    <LI> An Exception thrown by the managed object's getter.</LI>
  </UL>
@exception ReflectionException  Wraps an {@link java.lang.Exception}
  thrown while trying to invoke the setter.
@exception RuntimeOperationsException Wraps an
  {@link IllegalArgumentException}: The attribute in parameter is
  null.

@see #getAttribute(java.lang.String)"
      end

      operation 8306843 "setAttributes"
	public return_type class_ref 512027 // AttributeList
	nparams 1
	  param inout name "attributes" type class_ref 512027 // AttributeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the values of an array of attributes of this ModelMBean.
Executes the setAttribute() method for each attribute in the list.

@param attributes A list of attributes: The identification of the
attributes to be set and  the values they are to be set to.

@return  The array of attributes that were set, with their new
   values in Attribute instances.

@exception RuntimeOperationsException Wraps an
  {@link IllegalArgumentException}: The object name in parameter
  is null or attributes in parameter is null.

@see #getAttributes"
      end

      operation 8306971 "createDefaultModelMBeanInfo"
	private return_type class_ref 1035419 // ModelMBeanInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8307099 "writeToLog"
	private explicit_return_type "void"
	nparams 2
	  param in name "logFileName" explicit_type "String"
	  param in name "logEntry" explicit_type "String"
	nexceptions 1
	  exception class_ref 165403 // Exception
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NotificationBroadcaster Interface "
      end

      operation 8307227 "addNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 512411 // NotificationListener
	  param inout name "filter" type class_ref 512539 // NotificationFilter
	  param inout name "handback" explicit_type "Object"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers an object which implements the NotificationListener
interface as a listener.  This
object's 'handleNotification()' method will be invoked when any
notification is issued through or by the ModelMBean.  This does
not include attributeChangeNotifications.  They must be registered
for independently.

@param listener The listener object which will handles
       notifications emitted by the registered MBean.
@param filter The filter object. If null, no filtering will be
       performed before handling notifications.
@param handback The context to be sent to the listener with
       the notification when a notification is emitted.

@exception IllegalArgumentException The listener cannot be null.

@see #removeNotificationListener"
      end

      operation 8307355 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 512411 // NotificationListener
	nexceptions 1
	  exception class_ref 512667 // ListenerNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener for Notifications from the RequiredModelMBean.

@param listener The listener name which was handling notifications
   emitted by the registered MBean.
   This method will remove all information related to this listener.

@exception ListenerNotFoundException The listener is not registered
   in the MBean or is null.

@see #addNotificationListener"
      end

      operation 8307483 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 512411 // NotificationListener
	  param inout name "filter" type class_ref 512539 // NotificationFilter
	  param inout name "handback" explicit_type "Object"
	nexceptions 1
	  exception class_ref 512667 // ListenerNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8307611 "sendNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ntfyObj" type class_ref 513819 // Notification
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8307739 "sendNotification"
	public explicit_return_type "void"
	nparams 1
	  param in name "ntfyText" explicit_type "String"
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8307867 "hasNotification"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "info" type class_ref 1035419 // ModelMBeanInfo
	  param in name "notifName" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns `true' if the notification `notifName' is found
in `info'. (bug 4744667)"
      end

      operation 8307995 "makeGenericInfo"
	class_operation private return_type class_ref 1035931 // ModelMBeanNotificationInfo
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a default ModelMBeanNotificationInfo for GENERIC
notification.  (bug 4744667)"
      end

      operation 8308123 "makeAttributeChangeInfo"
	class_operation private return_type class_ref 1035931 // ModelMBeanNotificationInfo
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a default ModelMBeanNotificationInfo for ATTRIBUTE_CHANGE
notification.  (bug 4744667)"
      end

      operation 8308251 "getNotificationInfo"
	public return_type class_ref 516635 // MBeanNotificationInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of Notifications always generated by the
RequiredModelMBean.
<P>

RequiredModelMBean may always send also two additional notifications:
<UL>
  <LI> One with descriptor <code>\"name=GENERIC,descriptorType=notification,log=T,severity=6,displayName=jmx.modelmbean.generic\"</code></LI>
  <LI> Second is a standard attribute change notification
       with descriptor <code>\"name=ATTRIBUTE_CHANGE,descriptorType=notification,log=T,severity=6,displayName=jmx.attribute.change\"</code></LI>
</UL>
Thus these two notifications are always added to those specified
by the application.

@return MBeanNotificationInfo[]
"
      end

      operation 8308379 "addAttributeChangeNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "inlistener" type class_ref 512411 // NotificationListener
	  param in name "inAttributeName" explicit_type "String"
	  param inout name "inhandback" explicit_type "Object"
	nexceptions 3
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8308507 "removeAttributeChangeNotificationListener"
	public explicit_return_type "void"
	nparams 2
	  param inout name "inlistener" type class_ref 512411 // NotificationListener
	  param in name "inAttributeName" explicit_type "String"
	nexceptions 3
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	  exception class_ref 512667 // ListenerNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8308635 "sendAttributeChangeNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ntfyObj" type class_ref 1028891 // AttributeChangeNotification
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8308763 "sendAttributeChangeNotification"
	public explicit_return_type "void"
	nparams 2
	  param inout name "inOldVal" type class_ref 512155 // Attribute
	  param inout name "inNewVal" type class_ref 512155 // Attribute
	nexceptions 2
	  exception class_ref 511387 // MBeanException
	  exception class_ref 1030427 // RuntimeOperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8308891 "getClassLoaderRepository"
	protected return_type class_ref 514331 // ClassLoaderRepository
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the Class Loader Repository used to perform class loading.
Subclasses may wish to redefine this method in order to return
the appropriate {@link javax.management.loading.ClassLoaderRepository}
that should be used in this object.

@return the Class Loader Repository.

@since.unbundled JMX 1.1"
      end

      operation 8309019 "loadClass"
	private return_type class_ref 164635 // Class
	nparams 1
	  param in name "className" explicit_type "String"
	nexceptions 1
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8309147 "preRegister"
	public return_type class_ref 510875 // ObjectName
	nparams 2
	  param inout name "server" type class_ref 513179 // MBeanServer
	  param inout name "name" type class_ref 510875 // ObjectName
	nexceptions 1
	  exception class_ref 165403 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " MBeanRegistration Interface       

Allows the MBean to perform any operations it needs before
being registered in the MBean server.  If the name of the MBean
is not specified, the MBean can provide a name for its
registration.  If any exception is raised, the MBean will not be
registered in the MBean server.
<P>
In order to ensure proper run-time semantics of RequireModelMBean,
Any subclass of RequiredModelMBean overloading or overriding this
method should call <code>super.preRegister(server, name)</code>
in its own <code>preRegister</code> implementation.

@param server The MBean server in which the MBean will be registered.

@param name The object name of the MBean.  This name is null if
the name parameter to one of the <code>createMBean</code> or
<code>registerMBean</code> methods in the {@link MBeanServer}
interface is null.  In that case, this method must return a
non-null ObjectName for the new MBean.

@return The name under which the MBean is to be registered.
This value must not be null.  If the <code>name</code>
parameter is not null, it will usually but not necessarily be
the returned value.

@exception java.lang.Exception This exception will be caught by
the MBean server and re-thrown as an
{@link javax.management.MBeanRegistrationException
MBeanRegistrationException}."
      end

      operation 8309275 "postRegister"
	public explicit_return_type "void"
	nparams 1
	  param inout name "registrationDone" type class_ref 392091 // Boolean
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows the MBean to perform any operations needed after having been
registered in the MBean server or after the registration has failed.
<P>
In order to ensure proper run-time semantics of RequireModelMBean,
Any subclass of RequiredModelMBean overloading or overriding this
method should call <code>super.postRegister(registrationDone)</code>
in its own <code>postRegister</code> implementation.

@param registrationDone Indicates whether or not the MBean has
been successfully registered in the MBean server. The value
false means that the registration phase has failed."
      end

      operation 8309403 "preDeregister"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 165403 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows the MBean to perform any operations it needs before
being unregistered by the MBean server.
<P>
In order to ensure proper run-time semantics of RequireModelMBean,
Any subclass of RequiredModelMBean overloading or overriding this
method should call <code>super.preDeregister()</code> in its own
<code>preDeregister</code> implementation.

@exception java.lang.Exception This exception will be caught by
the MBean server and re-thrown as an
{@link javax.management.MBeanRegistrationException
MBeanRegistrationException}."
      end

      operation 8309531 "postDeregister"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows the MBean to perform any operations needed after having been
unregistered in the MBean server.
<P>
In order to ensure proper run-time semantics of RequireModelMBean,
Any subclass of RequiredModelMBean overloading or overriding this
method should call <code>super.postDeregister()</code> in its own
<code>postDeregister</code> implementation."
      end

      operation 8309659 "tracing"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " SUN Trace and debug functions"
      end

      operation 8309787 "trace"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "inClass" explicit_type "String"
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8309915 "traceX"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "inMethod" explicit_type "String"
	  param inout name "x" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8310043 "trace"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8310171 "error"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8310299 "debugging"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8310427 "debug"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "inClass" explicit_type "String"
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8310555 "debug"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "inMethod" explicit_type "String"
	  param in name "inText" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8310683 "debug"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "inMethod" explicit_type "String"
	  param inout name "x" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 3038747 "primitiveTypes"
	class_attribute const_attribute private explicit_type "String"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3038875 "primitiveWrappers"
	class_attribute const_attribute private explicit_type "String"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 170779 "initialization"
	
	cpp "" ""
	java "  static {
        primitiveTypes = new String[] {
            Boolean.TYPE.getName(),
            Byte.TYPE.getName(),
            Character.TYPE.getName(),
            Short.TYPE.getName(),
            Integer.TYPE.getName(),
            Long.TYPE.getName(),
            Float.TYPE.getName(),
            Double.TYPE.getName(),
            Void.TYPE.getName()
        };
        primitiveWrappers = new String[] {
            Boolean.class.getName(),
            Byte.class.getName(),
            Character.class.getName(),
            Short.class.getName(),
            Integer.class.getName(),
            Long.class.getName(),
            Float.class.getName(),
            Double.class.getName(),
            Void.class.getName()
        };
    }"
	php ""
	python ""
	idl ""
      end
    end
  end

  deploymentview 170011 "modelmbean"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 787227 "DescriptorSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.lang.reflect.Constructor;
import java.security.AccessController;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import javax.management.RuntimeOperationsException;
import javax.management.MBeanException;
import com.sun.jmx.mbeanserver.GetPropertyAction;
import com.sun.jmx.trace.Trace;
import java.util.Collections;
import java.util.SortedMap;
import java.util.TreeMap;
import sun.reflect.misc.ReflectUtil;
${definition}"
      associated_classes
	class_ref 1034779 // DescriptorSupport
      end
      comment "@(#)file      DescriptorSupport.java
@(#)author    IBM Corp.
@(#)version   1.54
@(#)lastedit      07/07/24


Copyright IBM Corp. 1999-2000.  All rights reserved.

The program is provided \"as is\" without any warranty express or implied,
including the warranty of non-infringement and the implied warranties of
merchantibility and fitness for a particular purpose. IBM will not be
liable for any damages suffered by you or any third party claim against
you regarding the Program.

Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.

Copyright 2005 Sun Microsystems, Inc.  Tous droits reserves.
Ce logiciel est propriete de Sun Microsystems, Inc.
Distribue par des licences qui en restreignent l'utilisation.
"
    end

    artifact 787355 "InvalidTargetObjectTypeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
import java.security.PrivilegedAction;
import com.sun.jmx.mbeanserver.GetPropertyAction;
${definition}"
      associated_classes
	class_ref 1035035 // InvalidTargetObjectTypeException
      end
      comment "@(#)file      InvalidTargetObjectTypeException.java
@(#)author    IBM Corp.
@(#)version   1.26
@(#)lastedit      03/12/19


Copyright IBM Corp. 1999-2000.  All rights reserved.

The program is provided \"as is\" without any warranty express or implied,
including the warranty of non-infringement and the implied warranties of
merchantibility and fitness for a particular purpose. IBM will not be
liable for any damages suffered by you or any third party claim against 
you regarding the Program.

Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.

Copyright 2004 Sun Microsystems, Inc.  Tous droits reserves.
Ce logiciel est propriete de Sun Microsystems, Inc.
Distribue par des licences qui en restreignent l'utilisation. 
"
    end

    artifact 787483 "ModelMBeanNotificationBroadcaster"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.*;
import javax.management.InstanceNotFoundException;
${definition}"
      associated_classes
	class_ref 1035291 // ModelMBeanNotificationBroadcaster
      end
      comment "@(#)file      ModelMBeanNotificationBroadcaster.java
@(#)author    IBM Corp.
@(#)version   1.21
@(#)lastedit      04/02/10


Copyright IBM Corp. 1999-2000.  All rights reserved.

The program is provided \"as is\" without any warranty express or implied,
including the warranty of non-infringement and the implied warranties of
merchantibility and fitness for a particular purpose. IBM will not be
liable for any damages suffered by you or any third party claim against 
you regarding the Program.

Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.

Copyright 2004 Sun Microsystems, Inc.  Tous droits reserves.
Ce logiciel est propriete de Sun Microsystems, Inc.
Distribue par des licences qui en restreignent l'utilisation. 
"
    end

    artifact 787611 "ModelMBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.*;
import javax.management.InstanceNotFoundException;
${definition}"
      associated_classes
	class_ref 1035163 // ModelMBean
      end
      comment "@(#)file      ModelMBean.java
@(#)author    IBM Corp.
@(#)version   1.21
@(#)lastedit      04/02/10


Copyright IBM Corp. 1999-2000.  All rights reserved.

The program is provided \"as is\" without any warranty express or implied,
including the warranty of non-infringement and the implied warranties of
merchantibility and fitness for a particular purpose. IBM will not be
liable for any damages suffered by you or any third party claim against 
you regarding the Program.

Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.

Copyright 2004 Sun Microsystems, Inc.  Tous droits reserves.
Ce logiciel est propriete de Sun Microsystems, Inc.
Distribue par des licences qui en restreignent l'utilisation. 
"
    end

    artifact 787739 "ModelMBeanAttributeInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.lang.reflect.*;
import java.security.AccessController;
import java.security.PrivilegedAction;
import javax.management.Descriptor;
import javax.management.DescriptorAccess;
import javax.management.*;
import com.sun.jmx.mbeanserver.GetPropertyAction;
import com.sun.jmx.trace.Trace;
${definition}"
      associated_classes
	class_ref 1035547 // ModelMBeanAttributeInfo
      end
      comment "@(#)file      ModelMBeanAttributeInfo.java
@(#)author    IBM Corp.
@(#)version   1.34
@(#)lastedit      04/02/10


Copyright IBM Corp. 1999-2000.  All rights reserved.

The program is provided \"as is\" without any warranty express or implied,
including the warranty of non-infringement and the implied warranties of
merchantibility and fitness for a particular purpose. IBM will not be
liable for any damages suffered by you or any third party claim against 
you regarding the Program.

Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.

Copyright 2004 Sun Microsystems, Inc.  Tous droits reserves.
Ce logiciel est propriete de Sun Microsystems, Inc.
Distribue par des licences qui en restreignent l'utilisation. 
"
    end

    artifact 787867 "ModelMBeanConstructorInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
import java.security.PrivilegedAction;
import javax.management.Descriptor;
import javax.management.DescriptorAccess;
import javax.management.*;
import java.lang.reflect.*;
import com.sun.jmx.mbeanserver.GetPropertyAction;
import com.sun.jmx.trace.Trace;
${definition}"
      associated_classes
	class_ref 1035675 // ModelMBeanConstructorInfo
      end
      comment "@(#)file      ModelMBeanConstructorInfo.java
@(#)author    IBM Corp.
@(#)version   1.33
@(#)lastedit      03/12/19


Copyright IBM Corp. 1999-2000.  All rights reserved.

The program is provided \"as is\" without any warranty express or implied,
including the warranty of non-infringement and the implied warranties of
merchantibility and fitness for a particular purpose. IBM will not be
liable for any damages suffered by you or any third party claim against 
you regarding the Program.

Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.

Copyright 2004 Sun Microsystems, Inc.  Tous droits reserves.
Ce logiciel est propriete de Sun Microsystems, Inc.
Distribue par des licences qui en restreignent l'utilisation. 
"
    end

    artifact 787995 "ModelMBeanInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.Descriptor;
import javax.management.DescriptorAccess;
import javax.management.*;
import javax.management.RuntimeOperationsException;
import javax.management.MBeanException;
${definition}"
      associated_classes
	class_ref 1035419 // ModelMBeanInfo
      end
      comment "@(#)file      ModelMBeanInfo.java
@(#)author    IBM Corp.
@(#)version   1.24
@(#)lastedit      04/02/10


Copyright IBM Corp. 1999-2000.  All rights reserved.

The program is provided \"as is\" without any warranty express or implied,
including the warranty of non-infringement and the implied warranties of
merchantibility and fitness for a particular purpose. IBM will not be
liable for any damages suffered by you or any third party claim against 
you regarding the Program.

Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.

Copyright 2004 Sun Microsystems, Inc.  Tous droits reserves.
Ce logiciel est propriete de Sun Microsystems, Inc.
Distribue par des licences qui en restreignent l'utilisation. 
"
    end

    artifact 788123 "ModelMBeanInfoSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.io.Serializable;
import java.security.AccessController;
import java.security.PrivilegedAction;
import javax.management.Descriptor;
import javax.management.DescriptorAccess;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanConstructorInfo;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.MBeanNotificationInfo;
import javax.management.MBeanOperationInfo;
import javax.management.RuntimeOperationsException;
import com.sun.jmx.mbeanserver.GetPropertyAction;
import com.sun.jmx.trace.Trace;
${definition}"
      associated_classes
	class_ref 1036059 // ModelMBeanInfoSupport
      end
      comment "@(#)file      ModelMBeanInfoSupport.java
@(#)author    IBM Corp.
@(#)version   1.38
@(#)lastedit      04/02/10

Copyright IBM Corp. 1999-2000.  All rights reserved.

The program is provided \"as is\" without any warranty express or implied,
including the warranty of non-infringement and the implied warranties of
merchantibility and fitness for a particular purpose. IBM will not be
liable for any damages suffered by you or any third party claim against 
you regarding the Program.

Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.

Copyright 2004 Sun Microsystems, Inc.  Tous droits reserves.
Ce logiciel est propriete de Sun Microsystems, Inc.
Distribue par des licences qui en restreignent l'utilisation. 
"
    end

    artifact 788251 "ModelMBeanNotificationInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
import java.security.PrivilegedAction;
import javax.management.Descriptor;
import javax.management.DescriptorAccess;
import javax.management.*;
import com.sun.jmx.mbeanserver.GetPropertyAction;
import com.sun.jmx.trace.Trace;
${definition}"
      associated_classes
	class_ref 1035931 // ModelMBeanNotificationInfo
      end
      comment "@(#)file      ModelMBeanNotificationInfo.java
@(#)author    IBM Corp.
@(#)version   1.35
@(#)lastedit      04/02/10


Copyright IBM Corp. 1999-2000.  All rights reserved.

The program is provided \"as is\" without any warranty express or implied,
including the warranty of non-infringement and the implied warranties of
merchantibility and fitness for a particular purpose. IBM will not be
liable for any damages suffered by you or any third party claim against 
you regarding the Program.

Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.

Copyright 2004 Sun Microsystems, Inc.  Tous droits reserves.
Ce logiciel est propriete de Sun Microsystems, Inc.
Distribue par des licences qui en restreignent l'utilisation. 
"
    end

    artifact 788379 "ModelMBeanOperationInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
import java.security.PrivilegedAction;
import javax.management.Descriptor;
import javax.management.DescriptorAccess;
import javax.management.*;
import java.lang.reflect.*;
import com.sun.jmx.mbeanserver.GetPropertyAction;
import com.sun.jmx.trace.Trace;
${definition}"
      associated_classes
	class_ref 1035803 // ModelMBeanOperationInfo
      end
      comment "@(#)file      ModelMBeanOperationInfo.java
@(#)author    IBM Corp.
@(#)version   1.35
@(#)lastedit      03/12/19


Copyright IBM Corp. 1999-2000.  All rights reserved.

The program is provided \"as is\" without any warranty express or implied,
including the warranty of non-infringement and the implied warranties of
merchantibility and fitness for a particular purpose. IBM will not be
liable for any damages suffered by you or any third party claim against 
you regarding the Program.

Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.

Copyright 2004 Sun Microsystems, Inc.  Tous droits reserves.
Ce logiciel est propriete de Sun Microsystems, Inc.
Distribue par des licences qui en restreignent l'utilisation. 
"
    end

    artifact 788507 "RequiredModelMBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Method;
import java.lang.reflect.InvocationTargetException;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.io.PrintStream;
import java.io.FileOutputStream;
import javax.management.Attribute;
import javax.management.AttributeList;
import javax.management.AttributeChangeNotification;
import javax.management.AttributeChangeNotificationFilter;
import javax.management.AttributeNotFoundException;
import javax.management.Descriptor;
import javax.management.DescriptorAccess;
import javax.management.InstanceNotFoundException;
import javax.management.InvalidAttributeValueException;
import javax.management.ListenerNotFoundException;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanConstructorInfo;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.MBeanNotificationInfo;
import javax.management.MBeanOperationInfo;
import javax.management.MBeanRegistration;
import javax.management.MBeanRegistrationException;
import javax.management.MBeanServer;
import javax.management.MBeanServerFactory;
import javax.management.Notification;
import javax.management.NotificationBroadcasterSupport;
import javax.management.NotificationFilter;
import javax.management.NotificationListener;
import javax.management.ObjectName;
import javax.management.ReflectionException;
import javax.management.RuntimeErrorException;
import javax.management.RuntimeMBeanException;
import javax.management.RuntimeOperationsException;
import javax.management.ServiceNotFoundException;
import javax.management.NotificationEmitter;
import javax.management.loading.ClassLoaderRepository;
import sun.reflect.misc.MethodUtil;
import sun.reflect.misc.ReflectUtil;
import com.sun.jmx.trace.Trace;
${definition}"
      associated_classes
	class_ref 1036187 // RequiredModelMBean
      end
      comment "@(#)file      RequiredModelMBean.java
@(#)author    Sun Microsystems, Inc.
@(#)version   1.55
@(#)lastedit      07/07/24

Copyright IBM Corp. 1999-2000.  All rights reserved.

The program is provided \"as is\" without any warranty express or implied,
including the warranty of non-infringement and the implied warranties of
merchantibility and fitness for a particular purpose. IBM will not be
liable for any damages suffered by you or any third party claim against
you regarding the Program.

Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.

Copyright 2005 Sun Microsystems, Inc.  Tous droits reserves.
Ce logiciel est propriete de Sun Microsystems, Inc.
Distribue par des licences qui en restreignent l'utilisation.
"
    end

    artifact 788635 "XMLParseException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
import java.security.PrivilegedAction;
import com.sun.jmx.mbeanserver.GetPropertyAction;
${definition}"
      associated_classes
	class_ref 1034907 // XMLParseException
      end
      comment "@(#)file      XMLParseException.java
@(#)author    IBM Corp.
@(#)version   1.23
@(#)lastedit      03/12/19


Copyright IBM Corp. 1999-2000.  All rights reserved.

The program is provided \"as is\" without any warranty express or implied,
including the warranty of non-infringement and the implied warranties of
merchantibility and fitness for a particular purpose. IBM will not be
liable for any damages suffered by you or any third party claim against 
you regarding the Program.

Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.

Copyright 2004 Sun Microsystems, Inc.  Tous droits reserves.
Ce logiciel est propriete de Sun Microsystems, Inc.
Distribue par des licences qui en restreignent l'utilisation. 
"
    end
  end
end
