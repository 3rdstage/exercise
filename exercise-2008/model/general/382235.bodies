class JColorChooser
!!!8919835.java!!!	showDialog(inout component : Component, in title : String, inout initialColor : Color) : Color

        final JColorChooser pane = new JColorChooser(initialColor != null?
                                               initialColor : Color.white);

        ColorTracker ok = new ColorTracker(pane);
        JDialog dialog = createDialog(component, title, true, pane, ok, null);

        dialog.show(); // blocks until user brings dialog down...

        return ok.getColor();
!!!8919963.java!!!	createDialog(inout c : Component, in title : String, inout modal : boolean, inout chooserPane : JColorChooser, inout okListener : ActionListener, inout cancelListener : ActionListener) : JDialog

        Window window = JOptionPane.getWindowForComponent(c);
	ColorChooserDialog dialog;
        if (window instanceof Frame) {
            dialog = new ColorChooserDialog((Frame)window, title, modal, c, chooserPane,
					    okListener, cancelListener);
        } else {
            dialog = new ColorChooserDialog((Dialog)window, title, modal, c, chooserPane,
					    okListener, cancelListener);
        }
	return dialog;
!!!8920091.java!!!	JColorChooser()
        this(Color.white);
!!!8920219.java!!!	JColorChooser(inout initialColor : Color)
	this( new DefaultColorSelectionModel(initialColor) );

!!!8920347.java!!!	JColorChooser(inout model : ColorSelectionModel)
	selectionModel = model;
        updateUI();
	dragEnabled = false;
!!!8920475.java!!!	getUI() : ColorChooserUI
        return (ColorChooserUI)ui;
!!!8920603.java!!!	setUI(inout ui : ColorChooserUI) : void
        super.setUI(ui);
!!!8920731.java!!!	updateUI() : void
        setUI((ColorChooserUI)UIManager.getUI(this));
!!!8920859.java!!!	getUIClassID() : String
        return uiClassID;
!!!8920987.java!!!	getColor() : Color
        return selectionModel.getSelectedColor();
!!!8921115.java!!!	setColor(inout color : Color) : void
        selectionModel.setSelectedColor(color);

!!!8921243.java!!!	setColor(in r : int, in g : int, in b : int) : void
        setColor(new Color(r,g,b));
!!!8921371.java!!!	setColor(in c : int) : void
        setColor((c >> 16) & 0xFF, (c >> 8) & 0xFF, c & 0xFF);
!!!8921499.java!!!	setDragEnabled(inout b : boolean) : void
        if (b && GraphicsEnvironment.isHeadless()) {
            throw new HeadlessException();
        }
	dragEnabled = b;
!!!8921627.java!!!	getDragEnabled() : boolean
	return dragEnabled;
!!!8921755.java!!!	setPreviewPanel(inout preview : JComponent) : void

        if (previewPanel != preview) {
	    JComponent oldPreview = previewPanel;
	    previewPanel = preview;
            firePropertyChange(JColorChooser.PREVIEW_PANEL_PROPERTY, oldPreview, preview);
        }
!!!8921883.java!!!	getPreviewPanel() : JComponent
        return previewPanel;
!!!8922011.java!!!	addChooserPanel(inout panel : AbstractColorChooserPanel) : void
        AbstractColorChooserPanel[] oldPanels = getChooserPanels();
        AbstractColorChooserPanel[] newPanels = new AbstractColorChooserPanel[oldPanels.length+1];
	System.arraycopy(oldPanels, 0, newPanels, 0, oldPanels.length);
	newPanels[newPanels.length-1] = panel;
	setChooserPanels(newPanels);
!!!8922139.java!!!	removeChooserPanel(inout panel : AbstractColorChooserPanel) : AbstractColorChooserPanel


	int containedAt = -1;

        for (int i = 0; i < chooserPanels.length; i++) {
  	    if (chooserPanels[i] == panel) {
	        containedAt = i;
		break;
	    }
	}
	if (containedAt == -1) {
	    throw new IllegalArgumentException("chooser panel not in this chooser");
	}

        AbstractColorChooserPanel[] newArray = new AbstractColorChooserPanel[chooserPanels.length-1];

	if (containedAt == chooserPanels.length-1) {  // at end
	    System.arraycopy(chooserPanels, 0, newArray, 0, newArray.length);
	}
	else if (containedAt == 0) {  // at start
	    System.arraycopy(chooserPanels, 1, newArray, 0, newArray.length);
	}
	else {  // in middle
	    System.arraycopy(chooserPanels, 0, newArray, 0, containedAt);
	    System.arraycopy(chooserPanels, containedAt+1,
			     newArray, containedAt, (chooserPanels.length - containedAt - 1));
	}

	setChooserPanels(newArray);

	return panel;
!!!8922267.java!!!	setChooserPanels(inout panels : AbstractColorChooserPanel) : void
        AbstractColorChooserPanel[] oldValue = chooserPanels;
	chooserPanels = panels;
	firePropertyChange(CHOOSER_PANELS_PROPERTY, oldValue, panels);
!!!8922395.java!!!	getChooserPanels() : AbstractColorChooserPanel
        return chooserPanels;
!!!8922523.java!!!	getSelectionModel() : ColorSelectionModel
        return selectionModel;
!!!8922651.java!!!	setSelectionModel(inout newModel : ColorSelectionModel) : void
        ColorSelectionModel oldModel = selectionModel;
	selectionModel = newModel;
	firePropertyChange(JColorChooser.SELECTION_MODEL_PROPERTY, oldModel, newModel);
!!!8922779.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();
        if (getUIClassID().equals(uiClassID)) {
            byte count = JComponent.getWriteObjCounter(this);
            JComponent.setWriteObjCounter(this, --count);
            if (count == 0 && ui != null) {
                ui.installUI(this);
            }
        }
!!!8922907.java!!!	paramString() : String
	StringBuffer chooserPanelsString = new StringBuffer("");
	for (int i=0; i<chooserPanels.length; i++) {
	    chooserPanelsString.append("[" + chooserPanels[i].toString()
				       + "]");
	}
        String previewPanelString = (previewPanel != null ?
				     previewPanel.toString() : "");

        return super.paramString() +
        ",chooserPanels=" + chooserPanelsString.toString() +
        ",previewPanel=" + previewPanelString;
!!!8923035.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJColorChooser();
        }
        return accessibleContext;
