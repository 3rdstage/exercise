class SampleModel
!!!6599195.java!!!	SampleModel(in dataType : int, in w : int, in h : int, in numBands : int)
        float size = (float)w*h;
        if (w <= 0 || h <= 0) {
            throw new IllegalArgumentException("Width ("+w+") and height ("+
                                               h+") must be > 0");
        }
        if (size >= Integer.MAX_VALUE) {
            throw new IllegalArgumentException("Dimensions (width="+w+
                                               " height="+h+") are too large");
        }

        if (dataType < DataBuffer.TYPE_BYTE ||
            (dataType > DataBuffer.TYPE_DOUBLE &&
             dataType != DataBuffer.TYPE_UNDEFINED))
        {
            throw new IllegalArgumentException("Unsupported dataType: "+
                                               dataType);
        }

        if (numBands <= 0) {
            throw new IllegalArgumentException("Number of bands must be > 0");
        }
        
	this.dataType = dataType;
	this.width = w;
	this.height = h;
	this.numBands = numBands;
!!!6599323.java!!!	getWidth() : int
	 return width;
!!!6599451.java!!!	getHeight() : int
	 return height;
!!!6599579.java!!!	getNumBands() : int
	 return numBands;
!!!6599835.java!!!	getDataType() : int
	return dataType;
!!!6599963.java!!!	getTransferType() : int
        return dataType;
!!!6600091.java!!!	getPixel(in x : int, in y : int, in iArray : int, inout data : DataBuffer) : int

	int pixels[];

	if (iArray != null)
	    pixels = iArray;
	else
	    pixels = new int[numBands];

	for (int i=0; i<numBands; i++) {
	    pixels[i] = getSample(x, y, i, data);
	}

	return pixels;
!!!6600347.java!!!	getDataElements(in x : int, in y : int, in w : int, in h : int, inout obj : Object, inout data : DataBuffer) : Object

	int type = getTransferType();
	int numDataElems = getNumDataElements();
	int cnt = 0;
	Object o = null;

	switch(type) {

	case DataBuffer.TYPE_BYTE:

	    byte[] btemp;
	    byte[] bdata;

	    if (obj == null)
		bdata = new byte[numDataElems*w*h];
	    else
		bdata = (byte[])obj;

	    for (int i=y; i<y+h; i++) {
		for (int j=x; j<x+w; j++) {
		    o = getDataElements(j, i, o, data);
		    btemp = (byte[])o;
		    for (int k=0; k<numDataElems; k++) {
			bdata[cnt++] = btemp[k];
		    }
		}
	    }
	    obj = (Object)bdata;
	    break;

	case DataBuffer.TYPE_USHORT:
	case DataBuffer.TYPE_SHORT:

	    short[] sdata;
	    short[] stemp;

	    if (obj == null)
		sdata = new short[numDataElems*w*h];
	    else
		sdata = (short[])obj;

	    for (int i=y; i<y+h; i++) {
		for (int j=x; j<x+w; j++) {
		    o = getDataElements(j, i, o, data);
		    stemp = (short[])o;
		    for (int k=0; k<numDataElems; k++) {
			sdata[cnt++] = stemp[k];
		    }
		}
	    }

	    obj = (Object)sdata;
	    break;

	case DataBuffer.TYPE_INT:

	    int[] idata;
	    int[] itemp;

	    if (obj == null)
		idata = new int[numDataElems*w*h];
	    else
		idata = (int[])obj;

	    for (int i=y; i<y+h; i++) {
		for (int j=x; j<x+w; j++) {
		    o = getDataElements(j, i, o, data);
		    itemp = (int[])o;
		    for (int k=0; k<numDataElems; k++) {
			idata[cnt++] = itemp[k];
		    }
		}
	    }

	    obj = (Object)idata;
	    break;

	case DataBuffer.TYPE_FLOAT:

	    float[] fdata;
	    float[] ftemp;

	    if (obj == null)
		fdata = new float[numDataElems*w*h];
	    else
		fdata = (float[])obj;

	    for (int i=y; i<y+h; i++) {
		for (int j=x; j<x+w; j++) {
		    o = getDataElements(j, i, o, data);
		    ftemp = (float[])o;
		    for (int k=0; k<numDataElems; k++) {
			fdata[cnt++] = ftemp[k];
		    }
		}
	    }

	    obj = (Object)fdata;
	    break;

	case DataBuffer.TYPE_DOUBLE:

	    double[] ddata;
	    double[] dtemp;

	    if (obj == null)
		ddata = new double[numDataElems*w*h];
	    else
		ddata = (double[])obj;

	    for (int i=y; i<y+h; i++) {
		for (int j=x; j<x+w; j++) {
		    o = getDataElements(j, i, o, data);
		    dtemp = (double[])o;
		    for (int k=0; k<numDataElems; k++) {
			ddata[cnt++] = dtemp[k];
		    }
		}
	    }

	    obj = (Object)ddata;
	    break;
	}

	return obj;
!!!6600603.java!!!	setDataElements(in x : int, in y : int, in w : int, in h : int, inout obj : Object, inout data : DataBuffer) : void

	int cnt = 0;
	Object o = null;
	int type = getTransferType();
	int numDataElems = getNumDataElements();

	switch(type) {

	case DataBuffer.TYPE_BYTE:

	    byte[] barray = (byte[])obj;
	    byte[] btemp = new byte[numDataElems];

	    for (int i=y; i<y+h; i++) {
		for (int j=x; j<x+w; j++) {
		    for (int k=0; k<numDataElems; k++) {
			btemp[k] = barray[cnt++];
		    }

		    setDataElements(j, i, btemp, data);
		}
	    }
	    break;

	case DataBuffer.TYPE_USHORT:
	case DataBuffer.TYPE_SHORT:

	    short[] sarray = (short[])obj;
	    short[] stemp = new short[numDataElems];

	    for (int i=y; i<y+h; i++) {
		for (int j=x; j<x+w; j++) {
		    for (int k=0; k<numDataElems; k++) {
			stemp[k] = sarray[cnt++];
		    }

		    setDataElements(j, i, stemp, data);
		}
	    }
	    break;

	case DataBuffer.TYPE_INT:

	    int[] iArray = (int[])obj;
	    int[] itemp = new int[numDataElems];

	    for (int i=y; i<y+h; i++) {
		for (int j=x; j<x+w; j++) {
		    for (int k=0; k<numDataElems; k++) {
			itemp[k] = iArray[cnt++];
		    }

		    setDataElements(j, i, itemp, data);
		}
	    }
	    break;

	case DataBuffer.TYPE_FLOAT:

	    float[] fArray = (float[])obj;
	    float[] ftemp = new float[numDataElems];

	    for (int i=y; i<y+h; i++) {
		for (int j=x; j<x+w; j++) {
		    for (int k=0; k<numDataElems; k++) {
			ftemp[k] = fArray[cnt++];
		    }

		    setDataElements(j, i, ftemp, data);
		}
	    }
	    break;

	case DataBuffer.TYPE_DOUBLE:

	    double[] dArray = (double[])obj;
	    double[] dtemp = new double[numDataElems];

	    for (int i=y; i<y+h; i++) {
		for (int j=x; j<x+w; j++) {
		    for (int k=0; k<numDataElems; k++) {
			dtemp[k] = dArray[cnt++];
		    }

		    setDataElements(j, i, dtemp, data);
		}
	    }
	    break;
	}

!!!6600731.java!!!	getPixel(in x : int, in y : int, in fArray : float, inout data : DataBuffer) : float

	float pixels[];

	if (fArray != null)
	    pixels = fArray;
	else
	    pixels = new float[numBands];

	for (int i=0; i<numBands; i++)
	    pixels[i] = getSampleFloat(x, y, i, data);

	return pixels;
!!!6600859.java!!!	getPixel(in x : int, in y : int, in dArray : double, inout data : DataBuffer) : double

	double pixels[];

	if(dArray != null)
	    pixels = dArray;
	else
	    pixels = new double[numBands];

	for (int i=0; i<numBands; i++)
	    pixels[i] = getSampleDouble(x, y, i, data);

	return pixels;
!!!6600987.java!!!	getPixels(in x : int, in y : int, in w : int, in h : int, in iArray : int, inout data : DataBuffer) : int

	int pixels[];
	int Offset=0;

	if (iArray != null)
	    pixels = iArray;
	else
	    pixels = new int[numBands * w * h];

	for (int i=y; i<(h+y); i++) {
	    for (int j=x; j<(w+x); j++) {
		for(int k=0; k<numBands; k++) {
		    pixels[Offset++] = getSample(j, i, k, data);
		}
	    }
	}

	return pixels;
!!!6601115.java!!!	getPixels(in x : int, in y : int, in w : int, in h : int, in fArray : float, inout data : DataBuffer) : float

	float pixels[];
	int Offset = 0;

	if (fArray != null)
	    pixels = fArray;
	else
	    pixels = new float[numBands * w * h];

	for (int i=y; i<(h+y); i++) {
	    for(int j=x; j<(w+x); j++) {
		for(int k=0; k<numBands; k++) {
		    pixels[Offset++] = getSampleFloat(j, i, k, data);
		}
	    }
	}

	return pixels;
!!!6601243.java!!!	getPixels(in x : int, in y : int, in w : int, in h : int, in dArray : double, inout data : DataBuffer) : double
	double pixels[];
	int    Offset = 0;

	if (dArray != null)
	    pixels = dArray;
	else
	    pixels = new double[numBands * w * h];

        // Fix 4217412
	for (int i=y; i<(h+y); i++) {
	    for (int j=x; j<(w+x); j++) {
		for (int k=0; k<numBands; k++) {
		    pixels[Offset++] = getSampleDouble(j, i, k, data);
		}
	    }
	}

	return pixels;
!!!6601499.java!!!	getSampleFloat(in x : int, in y : int, in b : int, inout data : DataBuffer) : float

	float sample;
	sample = (float) getSample(x, y, b, data);
	return sample;
!!!6601627.java!!!	getSampleDouble(in x : int, in y : int, in b : int, inout data : DataBuffer) : double

	double sample;

	sample = (double) getSample(x, y, b, data);
	return sample;
!!!6601755.java!!!	getSamples(in x : int, in y : int, in w : int, in h : int, in b : int, in iArray : int, inout data : DataBuffer) : int
	int pixels[];
	int Offset=0;

	if (iArray != null)
	    pixels = iArray;
	else
	    pixels = new int[w * h];

	for(int i=y; i<(h+y); i++) {
	    for (int j=x; j<(w+x); j++) {
		pixels[Offset++] = getSample(j, i, b, data);
	    }
	}

	return pixels;
!!!6601883.java!!!	getSamples(in x : int, in y : int, in w : int, in h : int, in b : int, in fArray : float, inout data : DataBuffer) : float
	float pixels[];
	int   Offset=0;

	if (fArray != null)
	    pixels = fArray;
	else
	    pixels = new float[w * h];

	for (int i=y; i<(h+y); i++) {
	    for (int j=x; j<(w+x); j++) {
		pixels[Offset++] = getSampleFloat(j, i, b, data);
	    }
	}

	return pixels;
!!!6602011.java!!!	getSamples(in x : int, in y : int, in w : int, in h : int, in b : int, in dArray : double, inout data : DataBuffer) : double
	double pixels[];
	int    Offset=0;

	if (dArray != null)
	    pixels = dArray;
	else
	    pixels = new double[w * h];

	for (int i=y; i<(y+h); i++) {
	    for (int j=x; j<(x+w); j++) {
		pixels[Offset++] = getSampleDouble(j, i, b, data);
	    }
	}

	return pixels;
!!!6602139.java!!!	setPixel(in x : int, in y : int, in iArray : int, inout data : DataBuffer) : void

	for (int i=0; i<numBands; i++)
	    setSample(x, y, i, iArray[i], data);
!!!6602267.java!!!	setPixel(in x : int, in y : int, in fArray : float, inout data : DataBuffer) : void

	for (int i=0; i<numBands; i++)
	    setSample(x, y, i, fArray[i], data);
!!!6602395.java!!!	setPixel(in x : int, in y : int, in dArray : double, inout data : DataBuffer) : void

	for (int i=0; i<numBands; i++)
	    setSample(x, y, i, dArray[i], data);
!!!6602523.java!!!	setPixels(in x : int, in y : int, in w : int, in h : int, in iArray : int, inout data : DataBuffer) : void
	int Offset=0;

	for (int i=y; i<(y+h); i++) {
	    for (int j=x; j<(x+w); j++) {
		for (int k=0; k<numBands; k++) {
		    setSample(j, i, k, iArray[Offset++], data);
		}
	    }
	}
!!!6602651.java!!!	setPixels(in x : int, in y : int, in w : int, in h : int, in fArray : float, inout data : DataBuffer) : void
	int Offset=0;

	for (int i=y; i<(y+h); i++) {
	    for (int j=x; j<(x+w); j++) {
		for(int k=0; k<numBands; k++) {
		    setSample(j, i, k, fArray[Offset++], data);
		}
	    }
	}
!!!6602779.java!!!	setPixels(in x : int, in y : int, in w : int, in h : int, in dArray : double, inout data : DataBuffer) : void
	int Offset=0;

	for (int i=y; i<(y+h); i++) {
	    for (int j=x; j<(x+w); j++) {
		for (int k=0; k<numBands; k++) {
		    setSample(j, i, k, dArray[Offset++], data);
		}
	    }
	}
!!!6603035.java!!!	setSample(in x : int, in y : int, in b : int, in s : float, inout data : DataBuffer) : void
	int sample = (int)s;

	setSample(x, y, b, sample, data);
!!!6603163.java!!!	setSample(in x : int, in y : int, in b : int, in s : double, inout data : DataBuffer) : void
	int sample = (int)s;

	setSample(x, y, b, sample, data);
!!!6603291.java!!!	setSamples(in x : int, in y : int, in w : int, in h : int, in b : int, in iArray : int, inout data : DataBuffer) : void

	int Offset=0;

	for (int i=y; i<(y+h); i++) {
	    for (int j=x; j<(x+w); j++) {
		setSample(j, i, b, iArray[Offset++], data);
	    }
	}
!!!6603419.java!!!	setSamples(in x : int, in y : int, in w : int, in h : int, in b : int, in fArray : float, inout data : DataBuffer) : void
	int Offset=0;

	for (int i=y; i<(y+h); i++) {
	    for (int j=x; j<(x+w); j++) {
		setSample(j, i, b, fArray[Offset++], data);
	    }
	}
!!!6603547.java!!!	setSamples(in x : int, in y : int, in w : int, in h : int, in b : int, in dArray : double, inout data : DataBuffer) : void
	int Offset=0;

	for (int i=y; i<(y+h); i++) {
	    for (int j=x; j<(x+w); j++) {
		setSample(j, i, b, dArray[Offset++], data);
	    }
	}
