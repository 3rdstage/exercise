class Method
!!!7128987.java!!!	getGenericSignature() : String
return signature;
!!!7129115.java!!!	getFactory() : GenericsFactory
	// create scope and factory
	return CoreReflectionFactory.make(this, MethodScope.make(this)); 
!!!7129243.java!!!	getGenericInfo() : MethodRepository
	// lazily initialize repository if necessary
	if (genericInfo == null) {
	    // create and cache generic info repository
	    genericInfo = MethodRepository.make(getGenericSignature(), 
						getFactory());
	}
	return genericInfo; //return cached repository
!!!7129371.java!!!	Method(inout declaringClass : Class, in name : String, inout parameterTypes : Class, inout returnType : Class, inout checkedExceptions : Class, in modifiers : int, in slot : int, in signature : String, in annotations : byte, in parameterAnnotations : byte, in annotationDefault : byte)
        this.clazz = declaringClass;
        this.name = name;
        this.parameterTypes = parameterTypes;
        this.returnType = returnType;
        this.exceptionTypes = checkedExceptions;
        this.modifiers = modifiers;
        this.slot = slot;
        this.signature = signature;
        this.annotations = annotations;
        this.parameterAnnotations = parameterAnnotations;
        this.annotationDefault = annotationDefault;
!!!7129499.java!!!	copy() : Method
        // This routine enables sharing of MethodAccessor objects
        // among Method objects which refer to the same underlying
        // method in the VM. (All of this contortion is only necessary
        // because of the "accessibility" bit in AccessibleObject,
        // which implicitly requires that new java.lang.reflect
        // objects be fabricated for each reflective call on Class
        // objects.)
        Method res = new Method(clazz, name, parameterTypes, returnType,
                                exceptionTypes, modifiers, slot, signature,
                                annotations, parameterAnnotations, annotationDefault);
        res.root = this;
        // Might as well eagerly propagate this if already present
        res.methodAccessor = methodAccessor;
        return res;
!!!7129627.java!!!	getDeclaringClass() : Class
	return clazz;
!!!7129755.java!!!	getName() : String
	return name;
!!!7129883.java!!!	getModifiers() : int
	return modifiers;
!!!7130011.java!!!	getTypeParameters() : TypeVariable
	if (getGenericSignature() != null)
	    return (TypeVariable<Method>[])getGenericInfo().getTypeParameters();
	else
	    return (TypeVariable<Method>[])new TypeVariable[0];
!!!7130139.java!!!	getReturnType() : Class
	return returnType;
!!!7130267.java!!!	getGenericReturnType() : Type
      if (getGenericSignature() != null) {
	return getGenericInfo().getReturnType();
      } else { return getReturnType();}
!!!7130395.java!!!	getParameterTypes() : Class
	return (Class<?>[]) parameterTypes.clone();
!!!7130523.java!!!	getGenericParameterTypes() : Type
	if (getGenericSignature() != null)
	    return getGenericInfo().getParameterTypes();
	else
	    return getParameterTypes();
!!!7130651.java!!!	getExceptionTypes() : Class
	return (Class<?>[]) exceptionTypes.clone();
!!!7130779.java!!!	getGenericExceptionTypes() : Type
	  Type[] result;
	  if (getGenericSignature() != null &&
	      ((result = getGenericInfo().getExceptionTypes()).length > 0))
	      return result;
	  else
	      return getExceptionTypes();
!!!7130907.java!!!	equals(inout obj : Object) : boolean
	if (obj != null && obj instanceof Method) {
	    Method other = (Method)obj;
	    if ((getDeclaringClass() == other.getDeclaringClass())
		&& (getName() == other.getName())) {
		if (!returnType.equals(other.getReturnType()))
		    return false;
		/* Avoid unnecessary cloning */
		Class[] params1 = parameterTypes;
		Class[] params2 = other.parameterTypes;
		if (params1.length == params2.length) {
		    for (int i = 0; i < params1.length; i++) {
			if (params1[i] != params2[i])
			    return false;
		    }
		    return true;
		}
	    }
	}
	return false;
!!!7131035.java!!!	hashCode() : int
	return getDeclaringClass().getName().hashCode() ^ getName().hashCode();
!!!7131163.java!!!	toString() : String
	try {
	    StringBuffer sb = new StringBuffer();
	    int mod = getModifiers();
	    if (mod != 0) {
		sb.append(Modifier.toString(mod) + " ");
	    }
	    sb.append(Field.getTypeName(getReturnType()) + " ");
	    sb.append(Field.getTypeName(getDeclaringClass()) + ".");
	    sb.append(getName() + "(");
	    Class[] params = parameterTypes; // avoid clone
	    for (int j = 0; j < params.length; j++) {
		sb.append(Field.getTypeName(params[j]));
		if (j < (params.length - 1))
		    sb.append(",");
	    }
	    sb.append(")");
	    Class[] exceptions = exceptionTypes; // avoid clone
	    if (exceptions.length > 0) {
		sb.append(" throws ");
		for (int k = 0; k < exceptions.length; k++) {
		    sb.append(exceptions[k].getName());
		    if (k < (exceptions.length - 1))
			sb.append(",");
		}
	    }
	    return sb.toString();
	} catch (Exception e) {
	    return "<" + e + ">";
	}
!!!7131291.java!!!	toGenericString() : String
	try {
	    StringBuilder sb = new StringBuilder();
	    int mod = getModifiers();
	    if (mod != 0) {
		sb.append(Modifier.toString(mod) + " ");
	    }
	    Type[] typeparms = getTypeParameters();
	    if (typeparms.length > 0) {
		boolean first = true;
		sb.append("<");
		for(Type typeparm: typeparms) {
		    if (!first)
			sb.append(",");
		    if (typeparm instanceof Class)
			sb.append(((Class)typeparm).getName());
		    else
			sb.append(typeparm.toString());
		    first = false;
		}
		sb.append("> ");
	    }

	    Type genRetType = getGenericReturnType();
	    sb.append( ((genRetType instanceof Class)?
			Field.getTypeName((Class)genRetType):genRetType.toString())  + " ");

	    sb.append(Field.getTypeName(getDeclaringClass()) + ".");
	    sb.append(getName() + "(");
	    Type[] params = getGenericParameterTypes();
	    for (int j = 0; j < params.length; j++) {
		sb.append((params[j] instanceof Class)?
			  Field.getTypeName((Class)params[j]):
			  (params[j].toString()) );
		if (j < (params.length - 1))
		    sb.append(",");
	    }
	    sb.append(")");
	    Type[] exceptions = getGenericExceptionTypes();
	    if (exceptions.length > 0) {
		sb.append(" throws ");
		for (int k = 0; k < exceptions.length; k++) {
		    sb.append((exceptions[k] instanceof Class)?
			      ((Class)exceptions[k]).getName():
			      exceptions[k].toString());
		    if (k < (exceptions.length - 1))
			sb.append(",");
		}
	    }
	    return sb.toString();
	} catch (Exception e) {
	    return "<" + e + ">";
	}
!!!7131419.java!!!	invoke(inout obj : Object, inout  : Object...args) : Object
        if (!override) {
            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {
                Class caller = Reflection.getCallerClass(1);
                Class targetClass = ((obj == null || !Modifier.isProtected(modifiers))
                                     ? clazz
                                     : obj.getClass());
                if (securityCheckCache != caller ||
                    targetClass != securityCheckTargetClassCache) {
                    Reflection.ensureMemberAccess(caller, clazz, obj, modifiers);
                    securityCheckCache = caller;
                    securityCheckTargetClassCache = targetClass;
                }
            }
        }
        if (methodAccessor == null) acquireMethodAccessor();
        return methodAccessor.invoke(obj, args);
!!!7131547.java!!!	isBridge() : boolean
        return (getModifiers() & Modifier.BRIDGE) != 0;
!!!7131675.java!!!	isVarArgs() : boolean
        return (getModifiers() & Modifier.VARARGS) != 0;
!!!7131803.java!!!	isSynthetic() : boolean
        return Modifier.isSynthetic(getModifiers());
!!!7131931.java!!!	acquireMethodAccessor() : void
        // First check to see if one has been created yet, and take it
        // if so
        MethodAccessor tmp = null;
        if (root != null) tmp = root.getMethodAccessor();
        if (tmp != null) {
            methodAccessor = tmp;
            return;
        }
        // Otherwise fabricate one and propagate it up to the root
        tmp = reflectionFactory.newMethodAccessor(this);
        setMethodAccessor(tmp);
!!!7132059.java!!!	getMethodAccessor() : MethodAccessor
        return methodAccessor;
!!!7132187.java!!!	setMethodAccessor(inout accessor : MethodAccessor) : void
        methodAccessor = accessor;
        // Propagate up
        if (root != null) {
            root.setMethodAccessor(accessor);
        }
!!!7132315.java!!!	getAnnotation(inout annotationClass : Class) : T
        if (annotationClass == null)
            throw new NullPointerException();

        return (T) declaredAnnotations().get(annotationClass);
!!!7132443.java!!!	getDeclaredAnnotations() : Annotation
        return declaredAnnotations().values().toArray(EMPTY_ANNOTATION_ARRAY);
!!!7132571.java!!!	declaredAnnotations() : Map
        if (declaredAnnotations == null) {
            declaredAnnotations = AnnotationParser.parseAnnotations(
                annotations, sun.misc.SharedSecrets.getJavaLangAccess().
                getConstantPool(getDeclaringClass()),
                getDeclaringClass());
        }
        return declaredAnnotations;
!!!7132699.java!!!	getDefaultValue() : Object
        if  (annotationDefault == null)
            return null;
        Class memberType = AnnotationType.invocationHandlerReturnType(
            getReturnType());
        Object result = AnnotationParser.parseMemberValue(
            memberType, ByteBuffer.wrap(annotationDefault),
            sun.misc.SharedSecrets.getJavaLangAccess().
                getConstantPool(getDeclaringClass()),
            getDeclaringClass());
        if (result instanceof sun.reflect.annotation.ExceptionProxy)
            throw new AnnotationFormatError("Invalid default: " + this);
        return result;
!!!7132827.java!!!	getParameterAnnotations() : Annotation
        int numParameters = parameterTypes.length;
        if (parameterAnnotations == null)
            return new Annotation[numParameters][0];

        Annotation[][] result = AnnotationParser.parseParameterAnnotations(
            parameterAnnotations,
            sun.misc.SharedSecrets.getJavaLangAccess().
                getConstantPool(getDeclaringClass()),
            getDeclaringClass());
        if (result.length != numParameters)
            throw new java.lang.annotation.AnnotationFormatError(
                "Parameter annotations don't match number of parameters");
        return result;
