class Attributes
!!!8004635.java!!!	Attributes()
	this(11);
!!!8004763.java!!!	Attributes(in size : int)
	map = new HashMap(size);
!!!8004891.java!!!	Attributes(inout attr : Attributes)
	map = new HashMap(attr);
!!!8005019.java!!!	get(inout name : Object) : Object
	return map.get(name);
!!!8005147.java!!!	getValue(in name : String) : String
        return (String)get(new Attributes.Name((String)name));
!!!8005275.java!!!	getValue(inout name : Name) : String
	return (String)get(name);
!!!8005403.java!!!	put(inout name : Object, inout value : Object) : Object
        return map.put((Attributes.Name)name, (String)value);
!!!8005531.java!!!	putValue(in name : String, in value : String) : String
	return (String)put(new Name(name), value);
!!!8005659.java!!!	remove(inout name : Object) : Object
	return map.remove(name);
!!!8005787.java!!!	containsValue(inout value : Object) : boolean
	return map.containsValue(value);
!!!8005915.java!!!	containsKey(inout name : Object) : boolean
	return map.containsKey(name);
!!!8006043.java!!!	putAll(inout attr : Map) : void
	// ## javac bug?
	if (!Attributes.class.isInstance(attr))
	    throw new ClassCastException();
	for (Map.Entry<?,?> me : (attr).entrySet())
	    put(me.getKey(), me.getValue());
!!!8006171.java!!!	clear() : void
	map.clear();
!!!8006299.java!!!	size() : int
	return map.size();
!!!8006427.java!!!	isEmpty() : boolean
	return map.isEmpty();
!!!8006555.java!!!	keySet() : Set
	return map.keySet();
!!!8006683.java!!!	values() : Collection
	return map.values();
!!!8006811.java!!!	entrySet() : Set
	return map.entrySet();
!!!8006939.java!!!	equals(inout o : Object) : boolean
	return map.equals(o);
!!!8007067.java!!!	hashCode() : int
	return map.hashCode();
!!!8007195.java!!!	clone() : Object
	return new Attributes(this);
!!!8007323.java!!!	write(inout os : DataOutputStream) : void
	Iterator it = entrySet().iterator();
	while (it.hasNext()) {
	    Map.Entry e = (Map.Entry)it.next();
            StringBuffer buffer = new StringBuffer(
                                        ((Name)e.getKey()).toString());
	    buffer.append(": ");

            String value = (String)e.getValue();
            if (value != null) {
                byte[] vb = value.getBytes("UTF8");
                value = new String(vb, 0, 0, vb.length);
            }
            buffer.append(value);

	    buffer.append("\r\n");
            Manifest.make72Safe(buffer);
            os.writeBytes(buffer.toString());
	}
	os.writeBytes("\r\n");
!!!8007451.java!!!	writeMain(inout out : DataOutputStream) : void
	// write out the *-Version header first, if it exists
	String vername = Name.MANIFEST_VERSION.toString();
	String version = getValue(vername);
	if (version == null) {
	    vername = Name.SIGNATURE_VERSION.toString();
	    version = getValue(vername);
	}

	if (version != null) {
	    out.writeBytes(vername+": "+version+"\r\n");
	}

	// write out all attributes except for the version
	// we wrote out earlier
	Iterator it = entrySet().iterator();
	while (it.hasNext()) {
	    Map.Entry e = (Map.Entry)it.next();
	    String name = ((Name)e.getKey()).toString();
	    if ((version != null) && ! (name.equalsIgnoreCase(vername))) {

                StringBuffer buffer = new StringBuffer(name);
		buffer.append(": ");

                String value = (String)e.getValue();
                if (value != null) {
                    byte[] vb = value.getBytes("UTF8");
                    value = new String(vb, 0, 0, vb.length);
                }
                buffer.append(value);

		buffer.append("\r\n");
                Manifest.make72Safe(buffer);
                out.writeBytes(buffer.toString());
	    }
	}
	out.writeBytes("\r\n");
!!!8007579.java!!!	read(inout is : FastInputStream, in lbuf : byte) : void
	String name = null, value = null;
        byte[] lastline = null;

	int len;
	while ((len = is.readLine(lbuf)) != -1) {
            boolean lineContinued = false;
	    if (lbuf[--len] != '\n') {
		throw new IOException("line too long");
	    }
	    if (len > 0 && lbuf[len-1] == '\r') {
		--len;
	    }
	    if (len == 0) {
		break;
	    }
	    int i = 0;
	    if (lbuf[0] == ' ') {
		// continuation of previous line
		if (name == null) {
		    throw new IOException("misplaced continuation line");
		}
                lineContinued = true;
                byte[] buf = new byte[lastline.length + len - 1];
                System.arraycopy(lastline, 0, buf, 0, lastline.length);
                System.arraycopy(lbuf, 1, buf, lastline.length, len - 1);
                if (is.peek() == ' ') {
                    lastline = buf;
                    continue;
                }
		value = new String(buf, 0, buf.length, "UTF8");
                lastline = null;
	    } else {
                while (lbuf[i++] != ':') {
                    if (i >= len) {
			throw new IOException("invalid header field");
                    }
                }
                if (lbuf[i++] != ' ') {
		    throw new IOException("invalid header field");
                }
                name = new String(lbuf, 0, 0, i - 2);
                if (is.peek() == ' ') {
                    lastline = new byte[len - i];
                    System.arraycopy(lbuf, i, lastline, 0, len - i);
                    continue;
                }
                value = new String(lbuf, i, len - i, "UTF8");
            }
	    try {
		if ((putValue(name, value) != null) && (!lineContinued)) {
                    Logger.getLogger("java.util.jar").warning(
                                     "Duplicate name in Manifest: " + name);
                } 
	    } catch (IllegalArgumentException e) {
		throw new IOException("invalid header field name: " + name);
	    }
	}
