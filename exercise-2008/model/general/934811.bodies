class ShortBuffer
!!!7363355.java!!!	ShortBuffer(in mark : int, in pos : int, in lim : int, in cap : int, in hb : short, in offset : int)

	super(mark, pos, lim, cap);
	this.hb = hb;
	this.offset = offset;
!!!7363483.java!!!	ShortBuffer(in mark : int, in pos : int, in lim : int, in cap : int)
	// package-private
	this(mark, pos, lim, cap, null, 0);
!!!7363611.java!!!	allocate(in capacity : int) : ShortBuffer

	if (capacity < 0)
	    throw new IllegalArgumentException();
	return new HeapShortBuffer(capacity, capacity);
!!!7363739.java!!!	wrap(in array : short, in offset : int, in length : int) : ShortBuffer

	try {
	    return new HeapShortBuffer(array, offset, length);
	} catch (IllegalArgumentException x) {
	    throw new IndexOutOfBoundsException();
	}
!!!7363867.java!!!	wrap(in array : short) : ShortBuffer

	return wrap(array, 0, array.length);
!!!7364891.java!!!	get(in dst : short, in offset : int, in length : int) : ShortBuffer

	checkBounds(offset, length, dst.length);
	if (length > remaining())
	    throw new BufferUnderflowException();
	int end = offset + length;
	for (int i = offset; i < end; i++)
	    dst[i] = get();
	return this;
!!!7365019.java!!!	get(in dst : short) : ShortBuffer

	return get(dst, 0, dst.length);
!!!7365147.java!!!	put(inout src : ShortBuffer) : ShortBuffer

	if (src == this)
	    throw new IllegalArgumentException();
	int n = src.remaining();
	if (n > remaining())
	    throw new BufferOverflowException();
	for (int i = 0; i < n; i++)
	    put(src.get());
	return this;
!!!7365275.java!!!	put(in src : short, in offset : int, in length : int) : ShortBuffer

	checkBounds(offset, length, src.length);
	if (length > remaining())
	    throw new BufferOverflowException();
	int end = offset + length;
	for (int i = offset; i < end; i++)
	    this.put(src[i]);
	return this;
!!!7365403.java!!!	put(in src : short) : ShortBuffer

	return put(src, 0, src.length);
!!!7365531.java!!!	hasArray() : boolean

	return (hb != null) && !isReadOnly;
!!!7365659.java!!!	array() : short

	if (hb == null)
	    throw new UnsupportedOperationException();
	if (isReadOnly)
	    throw new ReadOnlyBufferException();
	return hb;
!!!7365787.java!!!	arrayOffset() : int

	if (hb == null)
	    throw new UnsupportedOperationException();
	if (isReadOnly)
	    throw new ReadOnlyBufferException();
	return offset;
!!!7366171.java!!!	toString() : String

	StringBuffer sb = new StringBuffer();
	sb.append(getClass().getName());
	sb.append("[pos=");
	sb.append(position());
	sb.append(" lim=");
	sb.append(limit());
	sb.append(" cap=");
	sb.append(capacity());
	sb.append("]");
	return sb.toString();
!!!7366299.java!!!	hashCode() : int

	int h = 1;
	int p = position();
	for (int i = limit() - 1; i >= p; i--)
	    h = 31 * h + (int)get(i);
	return h;
!!!7366427.java!!!	equals(inout ob : Object) : boolean

	if (!(ob instanceof ShortBuffer))
	    return false;
	ShortBuffer that = (ShortBuffer)ob;
	if (this.remaining() != that.remaining())
	    return false;
	int p = this.position();
	for (int i = this.limit() - 1, j = that.limit() - 1; i >= p; i--, j--) {
	    short v1 = this.get(i);
	    short v2 = that.get(j);
	    if (v1 != v2) {
		if ((v1 != v1) && (v2 != v2))	// For float and double
		    continue;
		return false;
	    }
	}
	return true;
!!!7366555.java!!!	compareTo(inout that : ShortBuffer) : int

	int n = this.position() + Math.min(this.remaining(), that.remaining());
	for (int i = this.position(), j = that.position(); i < n; i++, j++) {
	    short v1 = this.get(i);
	    short v2 = that.get(j);
	    if (v1 == v2)
		continue;
	    if ((v1 != v1) && (v2 != v2)) 	// For float and double
		continue;
	    if (v1 < v2)
		return -1;
	    return +1;
	}
	return this.remaining() - that.remaining();
