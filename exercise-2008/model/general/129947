format 66
"util" // src::java::util
  revision 5
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/util"
  java_package "java.util"
  classview 130715 "util"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 134939 "AbstractCollection"
      abstract visibility public 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 135067 // Collection
        rank 0 explicit_value "E"
      actual class class_ref 135067 // Collection
        rank 1 explicit_value ""
      actual class class_ref 135067 // Collection
        rank 2 explicit_value ""
      actual class class_ref 135067 // Collection
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides a skeletal implementation of the <tt>Collection</tt>
interface, to minimize the effort required to implement this interface. <p>

To implement an unmodifiable collection, the programmer needs only to
extend this class and provide implementations for the <tt>iterator</tt> and
<tt>size</tt> methods.  (The iterator returned by the <tt>iterator</tt>
method must implement <tt>hasNext</tt> and <tt>next</tt>.)<p>

To implement a modifiable collection, the programmer must additionally
override this class's <tt>add</tt> method (which otherwise throws an
<tt>UnsupportedOperationException</tt>), and the iterator returned by the
<tt>iterator</tt> method must additionally implement its <tt>remove</tt>
method.<p>

The programmer should generally provide a void (no argument) and
<tt>Collection</tt> constructor, as per the recommendation in the
<tt>Collection</tt> interface specification.<p>

The documentation for each non-abstract methods in this class describes its
implementation in detail.  Each of these methods may be overridden if
the collection being implemented admits a more efficient implementation.<p>

This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@author  Neal Gafter
@version 1.24, 01/18/03
@see Collection
@since 1.2"
      classrelation 132251 // <realization>
	relation 132251 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 132251 // <realization>
	  b parent class_ref 135067 // Collection
      end

      operation 140059 "AbstractCollection"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sole constructor.  (For invocation by subclass constructors, typically
implicit.)"
      end

      operation 140187 "iterator"
	abstract public return_type class_ref 135323 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query Operations

Returns an iterator over the elements contained in this collection.

@return an iterator over the elements contained in this collection."
      end

      operation 140315 "size"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this collection.  If the collection
contains more than <tt>Integer.MAX_VALUE</tt> elements, returns
<tt>Integer.MAX_VALUE</tt>.

@return the number of elements in this collection."
      end

      operation 140443 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this collection contains no elements.<p>

This implementation returns <tt>size() == 0</tt>.

@return <tt>true</tt> if this collection contains no elements."
      end

      operation 140571 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this collection contains the specified
element.  More formally, returns <tt>true</tt> if and only if this
collection contains at least one element <tt>e</tt> such that
<tt>(o==null ? e==null : o.equals(e))</tt>.<p>

This implementation iterates over the elements in the collection,
checking each element in turn for equality with the specified element.

@param o object to be checked for containment in this collection.
@return <tt>true</tt> if this collection contains the specified element."
      end

      operation 140699 "toArray"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this collection.  If
the collection makes any guarantees as to what order its elements are
returned by its iterator, this method must return the elements in the
same order.  The returned array will be \"safe\" in that no references to
it are maintained by the collection.  (In other words, this method must
allocate a new array even if the collection is backed by an Array).
The caller is thus free to modify the returned array.<p>

This implementation allocates the array to be returned, and iterates
over the elements in the collection, storing each object reference in
the next consecutive element of the array, starting with element 0.

@return an array containing all of the elements in this collection."
      end

      operation 140827 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this collection; 
the runtime type of the returned array is that of the specified array.  
If the collection fits in the specified array, it is returned therein.
Otherwise, a new array is allocated with the runtime type of the
specified array and the size of this collection.<p>

If the collection fits in the specified array with room to spare (i.e.,
the array has more elements than the collection), the element in the
array immediately following the end of the collection is set to
<tt>null</tt>.  This is useful in determining the length of the
collection <i>only</i> if the caller knows that the collection does
not contain any <tt>null</tt> elements.)<p>

If this collection makes any guarantees as to what order its elements
are returned by its iterator, this method must return the elements in
the same order. <p>

This implementation checks if the array is large enough to contain the
collection; if not, it allocates a new array of the correct size and
type (using reflection).  Then, it iterates over the collection,
storing each object reference in the next consecutive element of the
array, starting with element 0.  If the array is larger than the
collection, a <tt>null</tt> is stored in the first location after the
end of the collection.

@param  a the array into which the elements of the collection are to
	       be stored, if it is big enough; otherwise, a new array of the
	       same runtime type is allocated for this purpose.
@return an array containing the elements of the collection.

@throws NullPointerException if the specified array is <tt>null</tt>.

@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in this
        collection."
      end

      operation 140955 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modification Operations

Ensures that this collection contains the specified element (optional
operation).  Returns <tt>true</tt> if the collection changed as a
result of the call.  (Returns <tt>false</tt> if this collection does
not permit duplicates and already contains the specified element.)
Collections that support this operation may place limitations on what
elements may be added to the collection.  In particular, some
collections will refuse to add <tt>null</tt> elements, and others will
impose restrictions on the type of elements that may be added.
Collection classes should clearly specify in their documentation any
restrictions on what elements may be added.<p>

This implementation always throws an
<tt>UnsupportedOperationException</tt>.

@param o element whose presence in this collection is to be ensured.
@return <tt>true</tt> if the collection changed as a result of the call.

@throws UnsupportedOperationException if the <tt>add</tt> method is not
		  supported by this collection.

@throws NullPointerException if this collection does not permit
		  <tt>null</tt> elements, and the specified element is
		  <tt>null</tt>.

@throws ClassCastException if the class of the specified element
		  prevents it from being added to this collection.

@throws IllegalArgumentException if some aspect of this element
           prevents it from being added to this collection."
      end

      operation 141083 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this
collection, if it is present (optional operation).  More formally,
removes an element <tt>e</tt> such that <tt>(o==null ? e==null :
o.equals(e))</tt>, if the collection contains one or more such
elements.  Returns <tt>true</tt> if the collection contained the
specified element (or equivalently, if the collection changed as a
result of the call).<p>

This implementation iterates over the collection looking for the
specified element.  If it finds the element, it removes the element
from the collection using the iterator's remove method.<p>

Note that this implementation throws an
<tt>UnsupportedOperationException</tt> if the iterator returned by this
collection's iterator method does not implement the <tt>remove</tt>
method and this collection contains the specified object.

@param o element to be removed from this collection, if present.
@return <tt>true</tt> if the collection contained the specified
        element.
@throws UnsupportedOperationException if the <tt>remove</tt> method is
		  not supported by this collection."
      end

      operation 141211 "containsAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bulk Operations

Returns <tt>true</tt> if this collection contains all of the elements
in the specified collection. <p>

This implementation iterates over the specified collection, checking
each element returned by the iterator in turn to see if it's
contained in this collection.  If all elements are so contained
<tt>true</tt> is returned, otherwise <tt>false</tt>.

@param c collection to be checked for containment in this collection.
@return <tt>true</tt> if this collection contains all of the elements
	       in the specified collection.
@throws NullPointerException if the specified collection is null.

@see #contains(Object)"
      end

      operation 141339 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds all of the elements in the specified collection to this collection
(optional operation).  The behavior of this operation is undefined if
the specified collection is modified while the operation is in
progress.  (This implies that the behavior of this call is undefined if
the specified collection is this collection, and this collection is
nonempty.) <p>

This implementation iterates over the specified collection, and adds
each object returned by the iterator to this collection, in turn.<p>

Note that this implementation will throw an
<tt>UnsupportedOperationException</tt> unless <tt>add</tt> is
overridden (assuming the specified collection is non-empty).

@param c collection whose elements are to be added to this collection.
@return <tt>true</tt> if this collection changed as a result of the
        call.
@throws UnsupportedOperationException if this collection does not
        support the <tt>addAll</tt> method.
@throws NullPointerException if the specified collection is null.

@see #add(Object)"
      end

      operation 141467 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this collection all of its elements that are contained in
the specified collection (optional operation). <p>

This implementation iterates over this collection, checking each
element returned by the iterator in turn to see if it's contained
in the specified collection.  If it's so contained, it's removed from
this collection with the iterator's <tt>remove</tt> method.<p>

Note that this implementation will throw an
<tt>UnsupportedOperationException</tt> if the iterator returned by the
<tt>iterator</tt> method does not implement the <tt>remove</tt> method
and this collection contains one or more elements in common with the
specified collection.

@param c elements to be removed from this collection.
@return <tt>true</tt> if this collection changed as a result of the
        call.
@throws UnsupportedOperationException if the <tt>removeAll</tt> method
	       is not supported by this collection.
@throws NullPointerException if the specified collection is null.

@see #remove(Object)
@see #contains(Object)"
      end

      operation 141595 "retainAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retains only the elements in this collection that are contained in the
specified collection (optional operation).  In other words, removes
from this collection all of its elements that are not contained in the
specified collection. <p>

This implementation iterates over this collection, checking each
element returned by the iterator in turn to see if it's contained
in the specified collection.  If it's not so contained, it's removed
from this collection with the iterator's <tt>remove</tt> method.<p>

Note that this implementation will throw an
<tt>UnsupportedOperationException</tt> if the iterator returned by the
<tt>iterator</tt> method does not implement the <tt>remove</tt> method
and this collection contains one or more elements not present in the
specified collection.

@param c elements to be retained in this collection.
@return <tt>true</tt> if this collection changed as a result of the
        call.
@throws UnsupportedOperationException if the <tt>retainAll</tt> method
	       is not supported by this Collection.
@throws NullPointerException if the specified collection is null.

@see #remove(Object)
@see #contains(Object)"
      end

      operation 141723 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this collection (optional operation).
The collection will be empty after this call returns (unless it throws
an exception).<p>

This implementation iterates over this collection, removing each
element using the <tt>Iterator.remove</tt> operation.  Most
implementations will probably choose to override this method for
efficiency.<p>

Note that this implementation will throw an
<tt>UnsupportedOperationException</tt> if the iterator returned by this
collection's <tt>iterator</tt> method does not implement the
<tt>remove</tt> method and this collection is non-empty.

@throws UnsupportedOperationException if the <tt>clear</tt> method is
		  not supported by this collection."
      end

      operation 141851 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  String conversion

Returns a string representation of this collection.  The string
representation consists of a list of the collection's elements in the
order they are returned by its iterator, enclosed in square brackets
(<tt>\"[]\"</tt>).  Adjacent elements are separated by the characters
<tt>\", \"</tt> (comma and space).  Elements are converted to strings as
by <tt>String.valueOf(Object)</tt>.<p>

This implementation creates an empty string buffer, appends a left
square bracket, and iterates over the collection appending the string
representation of each element in turn.  After appending each element
except the last, the string <tt>\", \"</tt> is appended.  Finally a right
bracket is appended.  A string is obtained from the string buffer, and
returned.

@return a string representation of this collection."
      end
    end

    class 135067 "Collection"
      visibility public stereotype "interface"
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The root interface in the <i>collection hierarchy</i>.  A collection
represents a group of objects, known as its <i>elements</i>.  Some
collections allow duplicate elements and others do not.  Some are ordered
and others unordered.  The JDK does not provide any <i>direct</i>
implementations of this interface: it provides implementations of more
specific subinterfaces like <tt>Set</tt> and <tt>List</tt>.  This interface
is typically used to pass collections around and manipulate them where
maximum generality is desired.

<p><i>Bags</i> or <i>multisets</i> (unordered collections that may contain
duplicate elements) should implement this interface directly.

<p>All general-purpose <tt>Collection</tt> implementation classes (which
typically implement <tt>Collection</tt> indirectly through one of its
subinterfaces) should provide two \"standard\" constructors: a void (no
arguments) constructor, which creates an empty collection, and a
constructor with a single argument of type <tt>Collection</tt>, which
creates a new collection with the same elements as its argument.  In
effect, the latter constructor allows the user to copy any collection,
producing an equivalent collection of the desired implementation type.
There is no way to enforce this convention (as interfaces cannot contain
constructors) but all of the general-purpose <tt>Collection</tt>
implementations in the Java platform libraries comply.

<p>The \"destructive\" methods contained in this interface, that is, the
methods that modify the collection on which they operate, are specified to
throw <tt>UnsupportedOperationException</tt> if this collection does not
support the operation.  If this is the case, these methods may, but are not
required to, throw an <tt>UnsupportedOperationException</tt> if the
invocation would have no effect on the collection.  For example, invoking
the {@link #addAll(Collection)} method on an unmodifiable collection may,
but is not required to, throw the exception if the collection to be added
is empty.

<p>Some collection implementations have restrictions on the elements that
they may contain.  For example, some implementations prohibit null elements,
and some have restrictions on the types of their elements.  Attempting to
add an ineligible element throws an unchecked exception, typically
<tt>NullPointerException</tt> or <tt>ClassCastException</tt>.  Attempting
to query the presence of an ineligible element may throw an exception,
or it may simply return false; some implementations will exhibit the former
behavior and some will exhibit the latter.  More generally, attempting an
operation on an ineligible element whose completion would not result in
the insertion of an ineligible element into the collection may throw an
exception or it may succeed, at the option of the implementation.
Such exceptions are marked as \"optional\" in the specification for this
interface. 

<p>This interface is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

<p>Many methods in Collections Framework interfaces are defined in
terms of the {@link Object#equals(Object) equals} method.  For example,
the specification for the {@link #contains(Object) contains(Object o)}
method says: \"returns <tt>true</tt> if and only if this collection
contains at least one element <tt>e</tt> such that
<tt>(o==null ? e==null : o.equals(e))</tt>.\"  This specification should
<i>not</i> be construed to imply that invoking <tt>Collection.contains</tt>
with a non-null argument <tt>o</tt> will cause <tt>o.equals(e)</tt> to be
invoked for any element <tt>e</tt>.  Implementations are free to implement
optimizations whereby the <tt>equals</tt> invocation is avoided, for
example, by first comparing the hash codes of the two elements.  (The
{@link Object#hashCode()} specification guarantees that two objects with
unequal hash codes cannot be equal.)  More generally, implementations of
the various Collections Framework interfaces are free to take advantage of
the specified behavior of underlying {@link Object} methods wherever the
implementor deems it appropriate.

@author  Josh Bloch
@author  Neal Gafter
@version 1.49, 06/28/04
@see	    Set
@see	    List
@see	    Map
@see	    SortedSet
@see	    SortedMap
@see	    HashSet
@see	    TreeSet
@see	    ArrayList
@see	    LinkedList
@see	    Vector
@see     Collections
@see	    Arrays
@see	    AbstractCollection
@since 1.2"
      operation 138139 "size"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query Operations

Returns the number of elements in this collection.  If this collection
contains more than <tt>Integer.MAX_VALUE</tt> elements, returns
<tt>Integer.MAX_VALUE</tt>.

@return the number of elements in this collection"
      end

      operation 138267 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this collection contains no elements.

@return <tt>true</tt> if this collection contains no elements"
      end

      operation 138395 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this collection contains the specified
element.  More formally, returns <tt>true</tt> if and only if this
collection contains at least one element <tt>e</tt> such that
<tt>(o==null ? e==null : o.equals(e))</tt>.

@param o element whose presence in this collection is to be tested.
@return <tt>true</tt> if this collection contains the specified
        element
@throws ClassCastException if the type of the specified element
	       is incompatible with this collection (optional).
@throws NullPointerException if the specified element is null and this
        collection does not support null elements (optional)."
      end

      operation 138523 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this collection.  There are no
guarantees concerning the order in which the elements are returned
(unless this collection is an instance of some class that provides a
guarantee).

@return an <tt>Iterator</tt> over the elements in this collection"
      end

      operation 138651 "toArray"
	public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this collection.  If
the collection makes any guarantees as to what order its elements are
returned by its iterator, this method must return the elements in the
same order.<p>

The returned array will be \"safe\" in that no references to it are
maintained by this collection.  (In other words, this method must
allocate a new array even if this collection is backed by an array).
The caller is thus free to modify the returned array.<p>

This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this collection"
      end

      operation 138779 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this collection; 
the runtime type of the returned array is that of the specified array.  
If the collection fits in the specified array, it is returned therein.  
Otherwise, a new array is allocated with the runtime type of the 
specified array and the size of this collection.<p>

If this collection fits in the specified array with room to spare
(i.e., the array has more elements than this collection), the element
in the array immediately following the end of the collection is set to
<tt>null</tt>.  This is useful in determining the length of this
collection <i>only</i> if the caller knows that this collection does
not contain any <tt>null</tt> elements.)<p>

If this collection makes any guarantees as to what order its elements
are returned by its iterator, this method must return the elements in
the same order.<p>

Like the <tt>toArray</tt> method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs<p>

Suppose <tt>l</tt> is a <tt>List</tt> known to contain only strings.
The following code can be used to dump the list into a newly allocated
array of <tt>String</tt>:

<pre>
    String[] x = (String[]) v.toArray(new String[0]);
</pre><p>

Note that <tt>toArray(new Object[0])</tt> is identical in function to
<tt>toArray()</tt>.

@param a the array into which the elements of this collection are to be
       stored, if it is big enough; otherwise, a new array of the same
       runtime type is allocated for this purpose.
@return an array containing the elements of this collection

@throws ArrayStoreException the runtime type of the specified array is
        not a supertype of the runtime type of every element in this
        collection.
@throws NullPointerException if the specified array is <tt>null</tt>."
      end

      operation 138907 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modification Operations

Ensures that this collection contains the specified element (optional
operation).  Returns <tt>true</tt> if this collection changed as a
result of the call.  (Returns <tt>false</tt> if this collection does
not permit duplicates and already contains the specified element.)<p>

Collections that support this operation may place limitations on what
elements may be added to this collection.  In particular, some
collections will refuse to add <tt>null</tt> elements, and others will
impose restrictions on the type of elements that may be added.
Collection classes should clearly specify in their documentation any
restrictions on what elements may be added.<p>

If a collection refuses to add a particular element for any reason
other than that it already contains the element, it <i>must</i> throw
an exception (rather than returning <tt>false</tt>).  This preserves
the invariant that a collection always contains the specified element
after this call returns.

@param o element whose presence in this collection is to be ensured.
@return <tt>true</tt> if this collection changed as a result of the
        call

@throws UnsupportedOperationException <tt>add</tt> is not supported by
        this collection.
@throws ClassCastException class of the specified element prevents it
        from being added to this collection.
@throws NullPointerException if the specified element is null and this
        collection does not support null elements.
@throws IllegalArgumentException some aspect of this element prevents
        it from being added to this collection."
      end

      operation 139035 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this
collection, if it is present (optional operation).  More formally,
removes an element <tt>e</tt> such that <tt>(o==null ?  e==null :
o.equals(e))</tt>, if this collection contains one or more such
elements.  Returns true if this collection contained the specified
element (or equivalently, if this collection changed as a result of the
call).

@param o element to be removed from this collection, if present.
@return <tt>true</tt> if this collection changed as a result of the
        call

@throws ClassCastException if the type of the specified element
	       is incompatible with this collection (optional).
@throws NullPointerException if the specified element is null and this
        collection does not support null elements (optional).
@throws UnsupportedOperationException remove is not supported by this
        collection."
      end

      operation 139163 "containsAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bulk Operations

Returns <tt>true</tt> if this collection contains all of the elements
in the specified collection.

@param  c collection to be checked for containment in this collection.
@return <tt>true</tt> if this collection contains all of the elements
	       in the specified collection
@throws ClassCastException if the types of one or more elements
        in the specified collection are incompatible with this
        collection (optional).
@throws NullPointerException if the specified collection contains one
        or more null elements and this collection does not support null
        elements (optional).
@throws NullPointerException if the specified collection is
        <tt>null</tt>.
@see    #contains(Object)"
      end

      operation 139291 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds all of the elements in the specified collection to this collection
(optional operation).  The behavior of this operation is undefined if
the specified collection is modified while the operation is in progress.
(This implies that the behavior of this call is undefined if the
specified collection is this collection, and this collection is
nonempty.)

@param c elements to be inserted into this collection.
@return <tt>true</tt> if this collection changed as a result of the
        call

@throws UnsupportedOperationException if this collection does not
        support the <tt>addAll</tt> method.
@throws ClassCastException if the class of an element of the specified
	       collection prevents it from being added to this collection.
@throws NullPointerException if the specified collection contains one
        or more null elements and this collection does not support null
        elements, or if the specified collection is <tt>null</tt>.
@throws IllegalArgumentException some aspect of an element of the
	       specified collection prevents it from being added to this
	       collection.
@see #add(Object)"
      end

      operation 139419 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Removes all this collection's elements that are also contained in the
specified collection (optional operation).  After this call returns,
this collection will contain no elements in common with the specified
collection.

@param c elements to be removed from this collection.
@return <tt>true</tt> if this collection changed as a result of the
        call

@throws UnsupportedOperationException if the <tt>removeAll</tt> method
	       is not supported by this collection.
@throws ClassCastException if the types of one or more elements
        in this collection are incompatible with the specified
        collection (optional).
@throws NullPointerException if this collection contains one or more
        null elements and the specified collection does not support
        null elements (optional).
@throws NullPointerException if the specified collection is
        <tt>null</tt>.
@see #remove(Object)
@see #contains(Object)"
      end

      operation 139547 "retainAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retains only the elements in this collection that are contained in the
specified collection (optional operation).  In other words, removes from
this collection all of its elements that are not contained in the
specified collection.

@param c elements to be retained in this collection.
@return <tt>true</tt> if this collection changed as a result of the
        call

@throws UnsupportedOperationException if the <tt>retainAll</tt> method
	       is not supported by this Collection.
@throws ClassCastException if the types of one or more elements
        in this collection are incompatible with the specified
        collection (optional).
@throws NullPointerException if this collection contains one or more
        null elements and the specified collection does not support null 
        elements (optional).
@throws NullPointerException if the specified collection is
        <tt>null</tt>.
@see #remove(Object)
@see #contains(Object)"
      end

      operation 139675 "clear"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this collection (optional operation).
This collection will be empty after this method returns unless it
throws an exception.

@throws UnsupportedOperationException if the <tt>clear</tt> method is
        not supported by this collection."
      end

      operation 139803 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison and hashing

Compares the specified object with this collection for equality. <p>

While the <tt>Collection</tt> interface adds no stipulations to the
general contract for the <tt>Object.equals</tt>, programmers who
implement the <tt>Collection</tt> interface \"directly\" (in other words,
create a class that is a <tt>Collection</tt> but is not a <tt>Set</tt>
or a <tt>List</tt>) must exercise care if they choose to override the
<tt>Object.equals</tt>.  It is not necessary to do so, and the simplest
course of action is to rely on <tt>Object</tt>'s implementation, but
the implementer may wish to implement a \"value comparison\" in place of
the default \"reference comparison.\"  (The <tt>List</tt> and
<tt>Set</tt> interfaces mandate such value comparisons.)<p>

The general contract for the <tt>Object.equals</tt> method states that
equals must be symmetric (in other words, <tt>a.equals(b)</tt> if and
only if <tt>b.equals(a)</tt>).  The contracts for <tt>List.equals</tt>
and <tt>Set.equals</tt> state that lists are only equal to other lists,
and sets to other sets.  Thus, a custom <tt>equals</tt> method for a
collection class that implements neither the <tt>List</tt> nor
<tt>Set</tt> interface must return <tt>false</tt> when this collection
is compared to any list or set.  (By the same logic, it is not possible
to write a class that correctly implements both the <tt>Set</tt> and
<tt>List</tt> interfaces.)

@param o Object to be compared for equality with this collection.
@return <tt>true</tt> if the specified object is equal to this
collection

@see Object#equals(Object)
@see Set#equals(Object)
@see List#equals(Object)"
      end

      operation 139931 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this collection.  While the
<tt>Collection</tt> interface adds no stipulations to the general
contract for the <tt>Object.hashCode</tt> method, programmers should
take note that any class that overrides the <tt>Object.equals</tt>
method must also override the <tt>Object.hashCode</tt> method in order
to satisfy the general contract for the <tt>Object.hashCode</tt>method.
In particular, <tt>c1.equals(c2)</tt> implies that
<tt>c1.hashCode()==c2.hashCode()</tt>.

@return the hash code value for this collection

@see Object#hashCode()
@see Object#equals(Object)"
      end
    end

    class 135323 "Iterator"
      visibility public stereotype "interface"
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An iterator over a collection.  Iterator takes the place of Enumeration in
the Java collections framework.  Iterators differ from enumerations in two
ways: <ul>
	<li> Iterators allow the caller to remove elements from the
	     underlying collection during the iteration with well-defined
	     semantics.
	<li> Method names have been improved.
</ul><p>

This interface is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@version 1.24, 01/17/04
@see Collection
@see ListIterator
@see Enumeration
@since 1.2"
      operation 146843 "hasNext"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if the iteration has more elements. (In other
words, returns <tt>true</tt> if <tt>next</tt> would return an element
rather than throwing an exception.)

@return <tt>true</tt> if the iterator has more elements."
      end

      operation 146971 "next"
	public explicit_return_type "E"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next element in the iteration.  Calling this method
repeatedly until the {@link #hasNext()} method returns false will
return each element in the underlying collection exactly once.

@return the next element in the iteration.
@exception NoSuchElementException iteration has no more elements."
      end

      operation 147099 "remove"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Removes from the underlying collection the last element returned by the
iterator (optional operation).  This method can be called only once per
call to <tt>next</tt>.  The behavior of an iterator is unspecified if
the underlying collection is modified while the iteration is in
progress in any way other than by calling this method.

@exception UnsupportedOperationException if the <tt>remove</tt>
		  operation is not supported by this Iterator.

@exception IllegalStateException if the <tt>next</tt> method has not
		  yet been called, or the <tt>remove</tt> method has already
		  been called after the last call to the <tt>next</tt>
		  method."
      end
    end

    class 135451 "AbstractList"
      abstract visibility public 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 8
      actual class class_ref 134939 // AbstractCollection
        rank 0 explicit_value "E"
      actual class class_ref 134939 // AbstractCollection
        rank 1 explicit_value ""
      actual class class_ref 134939 // AbstractCollection
        rank 2 explicit_value ""
      actual class class_ref 134939 // AbstractCollection
        rank 3 explicit_value ""
      actual class class_ref 135579 // List
        rank 0 explicit_value "E"
      actual class class_ref 135579 // List
        rank 1 explicit_value ""
      actual class class_ref 135579 // List
        rank 2 explicit_value ""
      actual class class_ref 135579 // List
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides a skeletal implementation of the <tt>List</tt>
interface to minimize the effort required to implement this interface
backed by a \"random access\" data store (such as an array).  For sequential
access data (such as a linked list), <tt>AbstractSequentialList</tt> should
be used in preference to this class.<p>

To implement an unmodifiable list, the programmer needs only to extend this
class and provide implementations for the <tt>get(int index)</tt> and
<tt>size()</tt> methods.<p>

To implement a modifiable list, the programmer must additionally override
the <tt>set(int index, Object element)</tt> method (which otherwise throws
an <tt>UnsupportedOperationException</tt>.  If the list is variable-size
the programmer must additionally override the <tt>add(int index, Object
element)</tt> and <tt>remove(int index)</tt> methods.<p>

The programmer should generally provide a void (no argument) and collection
constructor, as per the recommendation in the <tt>Collection</tt> interface
specification.<p>

Unlike the other abstract collection implementations, the programmer does
<i>not</i> have to provide an iterator implementation; the iterator and
list iterator are implemented by this class, on top the \"random access\"
methods: <tt>get(int index)</tt>, <tt>set(int index, Object element)</tt>,
<tt>set(int index, Object element)</tt>, <tt>add(int index, Object
element)</tt> and <tt>remove(int index)</tt>.<p>

The documentation for each non-abstract methods in this class describes its
implementation in detail.  Each of these methods may be overridden if the
collection being implemented admits a more efficient implementation.<p>

This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@author  Neal Gafter
@version 1.37, 01/18/03
@see Collection
@see List
@see AbstractSequentialList
@see AbstractCollection
@since 1.2"
      classrelation 132379 // <realization>
	relation 132379 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 132379 // <realization>
	  b parent class_ref 134939 // AbstractCollection
      end

      classrelation 132635 // <realization>
	relation 132635 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 132635 // <realization>
	  b parent class_ref 135579 // List
      end

      operation 145179 "AbstractList"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sole constructor.  (For invocation by subclass constructors, typically
implicit.)"
      end

      operation 145307 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified element to the end of this List (optional
operation). <p>

This implementation calls <tt>add(size(), o)</tt>.<p>

Note that this implementation throws an
<tt>UnsupportedOperationException</tt> unless <tt>add(int, Object)</tt>
is overridden.

@param o element to be appended to this list.

@return <tt>true</tt> (as per the general contract of
<tt>Collection.add</tt>).

@throws UnsupportedOperationException if the <tt>add</tt> method is not
		  supported by this Set.

@throws ClassCastException if the class of the specified element
		  prevents it from being added to this set.

@throws IllegalArgumentException some aspect of this element prevents
           it from being added to this collection."
      end

      operation 145435 "get"
	abstract public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the element at the specified position in this list.

@param index index of element to return.

@return the element at the specified position in this list.
@throws IndexOutOfBoundsException if the given index is out of range
		  (<tt>index &lt; 0 || index &gt;= size()</tt>)."
      end

      operation 145563 "set"
	public explicit_return_type "E"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the element at the specified position in this list with the
specified element (optional operation). <p>

This implementation always throws an
<tt>UnsupportedOperationException</tt>.

@param index index of element to replace.
@param element element to be stored at the specified position.
@return the element previously at the specified position.

@throws UnsupportedOperationException if the <tt>set</tt> method is not
		  supported by this List.
@throws ClassCastException if the class of the specified element
		  prevents it from being added to this list.
@throws IllegalArgumentException if some aspect of the specified
		  element prevents it from being added to this list.

@throws IndexOutOfBoundsException if the specified index is out of
           range (<tt>index &lt; 0 || index &gt;= size()</tt>)."
      end

      operation 145691 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the specified position in this list
(optional operation).  Shifts the element currently at that position
(if any) and any subsequent elements to the right (adds one to their
indices).<p>

This implementation always throws an UnsupportedOperationException.

@param index index at which the specified element is to be inserted.
@param element element to be inserted.

@throws UnsupportedOperationException if the <tt>add</tt> method is not
		  supported by this list.
@throws ClassCastException if the class of the specified element
		  prevents it from being added to this list.
@throws IllegalArgumentException if some aspect of the specified
		  element prevents it from being added to this list.
@throws IndexOutOfBoundsException index is out of range (<tt>index &lt;
		  0 || index &gt; size()</tt>)."
      end

      operation 145819 "remove"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the element at the specified position in this list (optional
operation).  Shifts any subsequent elements to the left (subtracts one
from their indices).  Returns the element that was removed from the
list.<p>

This implementation always throws an
<tt>UnsupportedOperationException</tt>.

@param index the index of the element to remove.
@return the element previously at the specified position.

@throws UnsupportedOperationException if the <tt>remove</tt> method is
		  not supported by this list.
@throws IndexOutOfBoundsException if the specified index is out of
		  range (<tt>index &lt; 0 || index &gt;= size()</tt>)."
      end

      operation 145947 "indexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Search Operations

Returns the index in this list of the first occurence of the specified
element, or -1 if the list does not contain this element.  More
formally, returns the lowest index <tt>i</tt> such that <tt>(o==null ?
get(i)==null : o.equals(get(i)))</tt>, or -1 if there is no such
index.<p>

This implementation first gets a list iterator (with
<tt>listIterator()</tt>).  Then, it iterates over the list until the
specified element is found or the end of the list is reached.

@param o element to search for.

@return the index in this List of the first occurence of the specified
	       element, or -1 if the List does not contain this element."
      end

      operation 146075 "lastIndexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index in this list of the last occurence of the specified
element, or -1 if the list does not contain this element.  More
formally, returns the highest index <tt>i</tt> such that <tt>(o==null ?
get(i)==null : o.equals(get(i)))</tt>, or -1 if there is no such
index.<p>

This implementation first gets a list iterator that points to the end
of the list (with listIterator(size())).  Then, it iterates backwards
over the list until the specified element is found, or the beginning of
the list is reached.

@param o element to search for.

@return the index in this list of the last occurence of the specified
	       element, or -1 if the list does not contain this element."
      end

      operation 146203 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bulk Operations

Removes all of the elements from this collection (optional operation).
The collection will be empty after this call returns (unless it throws
an exception).<p>

This implementation calls <tt>removeRange(0, size())</tt>.<p>

Note that this implementation throws an
<tt>UnsupportedOperationException</tt> unless <tt>remove(int
index)</tt> or <tt>removeRange(int fromIndex, int toIndex)</tt> is
overridden.

@throws UnsupportedOperationException if the <tt>clear</tt> method is
		  not supported by this Collection."
      end

      operation 146331 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts all of the elements in the specified collection into this list
at the specified position (optional operation).  Shifts the element
currently at that position (if any) and any subsequent elements to the
right (increases their indices).  The new elements will appear in the
list in the order that they are returned by the specified collection's
iterator.  The behavior of this operation is unspecified if the
specified collection is modified while the operation is in progress.
(Note that this will occur if the specified collection is this list,
and it's nonempty.)<p>

This implementation gets an iterator over the specified collection and
iterates over it, inserting the elements obtained from the iterator
into this list at the appropriate position, one at a time, using
<tt>add(int, Object)</tt>.  Many implementations will override this
method for efficiency.<p>

Note that this implementation throws an
<tt>UnsupportedOperationException</tt> unless <tt>add(int, Object)</tt>
is overridden.

@return <tt>true</tt> if this list changed as a result of the call.
@param index index at which to insert the first element from the
		    specified collection.
@param c elements to be inserted into this List.

@throws UnsupportedOperationException if the <tt>addAll</tt> method is
		  not supported by this list.

@throws ClassCastException if the class of an element of the specified
		  collection prevents it from being added to this List.

@throws IllegalArgumentException some aspect an element of the
		  specified collection prevents it from being added to this
		  List.

@throws IndexOutOfBoundsException index out of range (<tt>index &lt; 0
           || index &gt; size()</tt>).

@throws NullPointerException if the specified collection is null."
      end

      operation 146459 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Iterators

Returns an iterator over the elements in this list in proper
sequence. <p>

This implementation returns a straightforward implementation of the
iterator interface, relying on the backing list's <tt>size()</tt>,
<tt>get(int)</tt>, and <tt>remove(int)</tt> methods.<p>

Note that the iterator returned by this method will throw an
<tt>UnsupportedOperationException</tt> in response to its
<tt>remove</tt> method unless the list's <tt>remove(int)</tt> method is
overridden.<p>

This implementation can be made to throw runtime exceptions in the face
of concurrent modification, as described in the specification for the
(protected) <tt>modCount</tt> field.

@return an iterator over the elements in this list in proper sequence.

@see #modCount"
      end

      operation 146587 "listIterator"
	public return_type class_ref 135707 // ListIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator of the elements in this list (in proper sequence).
This implementation returns <tt>listIterator(0)</tt>.

@return an iterator of the elements in this list (in proper sequence).

@see #listIterator(int)"
      end

      operation 146715 "listIterator"
	public return_type class_ref 135707 // ListIterator
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list iterator of the elements in this list (in proper
sequence), starting at the specified position in the list.  The
specified index indicates the first element that would be returned by
an initial call to the <tt>next</tt> method.  An initial call to
the <tt>previous</tt> method would return the element with the
specified index minus one.<p>

This implementation returns a straightforward implementation of the
<tt>ListIterator</tt> interface that extends the implementation of the
<tt>Iterator</tt> interface returned by the <tt>iterator()</tt> method.
The <tt>ListIterator</tt> implementation relies on the backing list's
<tt>get(int)</tt>, <tt>set(int, Object)</tt>, <tt>add(int, Object)</tt>
and <tt>remove(int)</tt> methods.<p>

Note that the list iterator returned by this implementation will throw
an <tt>UnsupportedOperationException</tt> in response to its
<tt>remove</tt>, <tt>set</tt> and <tt>add</tt> methods unless the
list's <tt>remove(int)</tt>, <tt>set(int, Object)</tt>, and
<tt>add(int, Object)</tt> methods are overridden.<p>

This implementation can be made to throw runtime exceptions in the
face of concurrent modification, as described in the specification for
the (protected) <tt>modCount</tt> field.

@param index index of the first element to be returned from the list
		    iterator (by a call to the <tt>next</tt> method).

@return a list iterator of the elements in this list (in proper
	       sequence), starting at the specified position in the list.

@throws IndexOutOfBoundsException if the specified index is out of
		  range (<tt>index &lt; 0 || index &gt; size()</tt>).

@see #modCount"
      end

      class 135835 "Itr"
	visibility private 
	nactuals 4
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "E"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 132763 // <realization>
	  relation 132763 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 132763 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	attribute 130843 "cursor"
	  package explicit_type "int"
	  init_value "=  0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Index of element to be returned by subsequent call to next.
"
	end

	attribute 130971 "lastRet"
	  package explicit_type "int"
	  init_value "=  -1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Index of element returned by most recent call to next or
previous.  Reset to -1 if this element is deleted by a call
to remove.
"
	end

	attribute 131099 "expectedModCount"
	  package explicit_type "int"
	  init_value "=  modCount"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The modCount value that the iterator believes that the backing
List should have.  If this expectation is violated, the iterator
has detected concurrent modification.
"
	end

	operation 147227 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 147355 "next"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 147483 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 147611 "checkForComodification"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 135963 "ListItr"
	visibility private 
	nactuals 8
	actual class class_ref 135451 // AbstractList
	  rank 0 explicit_value ""
	actual class class_ref 135451 // AbstractList
	  rank 1 explicit_value ""
	actual class class_ref 135451 // AbstractList
	  rank 2 explicit_value ""
	actual class class_ref 135451 // AbstractList
	  rank 3 explicit_value ""
	actual class class_ref 135707 // ListIterator
	  rank 0 explicit_value "E"
	actual class class_ref 135707 // ListIterator
	  rank 1 explicit_value ""
	actual class class_ref 135707 // ListIterator
	  rank 2 explicit_value ""
	actual class class_ref 135707 // ListIterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 132891 // <generalisation>
	  relation 132891 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 132891 // <generalisation>
	    b parent class_ref 135835 // Itr
	end

	classrelation 133147 // <realization>
	  relation 133147 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 133147 // <realization>
	    b parent class_ref 135707 // ListIterator
	end

	operation 148891 "ListItr"
	  package explicit_return_type ""
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 149019 "hasPrevious"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 149147 "previous"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 149275 "nextIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 149403 "previousIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 149531 "set"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "o" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 149659 "add"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "o" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 149787 "subList"
	public return_type class_ref 135579 // List
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this list between <tt>fromIndex</tt>,
inclusive, and <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex</tt> and
<tt>toIndex</tt> are equal, the returned list is empty.)  The returned
list is backed by this list, so changes in the returned list are
reflected in this list, and vice-versa.  The returned list supports all
of the optional list operations supported by this list.<p>

This method eliminates the need for explicit range operations (of the
sort that commonly exist for arrays).  Any operation that expects a
list can be used as a range operation by operating on a subList view
instead of a whole list.  For example, the following idiom removes a
range of elements from a list:
<pre>
    list.subList(from, to).clear();
</pre>
Similar idioms may be constructed for <tt>indexOf</tt> and
<tt>lastIndexOf</tt>, and all of the algorithms in the
<tt>Collections</tt> class can be applied to a subList.<p>

The semantics of the list returned by this method become undefined if
the backing list (i.e., this list) is <i>structurally modified</i> in
any way other than via the returned list.  (Structural modifications are
those that change the size of the list, or otherwise perturb it in such
a fashion that iterations in progress may yield incorrect results.)<p>

This implementation returns a list that subclasses
<tt>AbstractList</tt>.  The subclass stores, in private fields, the
offset of the subList within the backing list, the size of the subList
(which can change over its lifetime), and the expected
<tt>modCount</tt> value of the backing list.  There are two variants
of the subclass, one of which implements <tt>RandomAccess</tt>.
If this list implements <tt>RandomAccess</tt> the returned list will
be an instance of the subclass that implements <tt>RandomAccess</tt>.<p>

The subclass's <tt>set(int, Object)</tt>, <tt>get(int)</tt>,
<tt>add(int, Object)</tt>, <tt>remove(int)</tt>, <tt>addAll(int,
Collection)</tt> and <tt>removeRange(int, int)</tt> methods all
delegate to the corresponding methods on the backing abstract list,
after bounds-checking the index and adjusting for the offset.  The
<tt>addAll(Collection c)</tt> method merely returns <tt>addAll(size,
c)</tt>.<p>

The <tt>listIterator(int)</tt> method returns a \"wrapper object\" over a
list iterator on the backing list, which is created with the
corresponding method on the backing list.  The <tt>iterator</tt> method
merely returns <tt>listIterator()</tt>, and the <tt>size</tt> method
merely returns the subclass's <tt>size</tt> field.<p>

All methods first check to see if the actual <tt>modCount</tt> of the
backing list is equal to its expected value, and throw a
<tt>ConcurrentModificationException</tt> if it is not.

@param fromIndex low endpoint (inclusive) of the subList.
@param toIndex high endpoint (exclusive) of the subList.
@return a view of the specified range within this list.
@throws IndexOutOfBoundsException endpoint index value out of range
        <tt>(fromIndex &lt; 0 || toIndex &gt; size)</tt>
@throws IllegalArgumentException endpoint indices out of order
<tt>(fromIndex &gt; toIndex)</tt> "
      end

      operation 149915 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison and hashing

Compares the specified object with this list for equality.  Returns
<tt>true</tt> if and only if the specified object is also a list, both
lists have the same size, and all corresponding pairs of elements in
the two lists are <i>equal</i>.  (Two elements <tt>e1</tt> and
<tt>e2</tt> are <i>equal</i> if <tt>(e1==null ? e2==null :
e1.equals(e2))</tt>.)  In other words, two lists are defined to be
equal if they contain the same elements in the same order.<p>

This implementation first checks if the specified object is this
list. If so, it returns <tt>true</tt>; if not, it checks if the
specified object is a list. If not, it returns <tt>false</tt>; if so,
it iterates over both lists, comparing corresponding pairs of elements.
If any comparison returns <tt>false</tt>, this method returns
<tt>false</tt>.  If either iterator runs out of elements before the
other it returns <tt>false</tt> (as the lists are of unequal length);
otherwise it returns <tt>true</tt> when the iterations complete.

@param o the object to be compared for equality with this list.

@return <tt>true</tt> if the specified object is equal to this list."
      end

      operation 150043 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this list. <p>

This implementation uses exactly the code that is used to define the
list hash function in the documentation for the <tt>List.hashCode</tt>
method.

@return the hash code value for this list."
      end

      operation 150171 "removeRange"
	protected explicit_return_type "void"
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this list all of the elements whose index is between
<tt>fromIndex</tt>, inclusive, and <tt>toIndex</tt>, exclusive.
Shifts any succeeding elements to the left (reduces their index).  This
call shortens the ArrayList by <tt>(toIndex - fromIndex)</tt>
elements.  (If <tt>toIndex==fromIndex</tt>, this operation has no
effect.)<p>

This method is called by the <tt>clear</tt> operation on this list
and its subLists.  Overriding this method to take advantage of
the internals of the list implementation can <i>substantially</i>
improve the performance of the <tt>clear</tt> operation on this list
and its subLists.<p>

This implementation gets a list iterator positioned before
<tt>fromIndex</tt>, and repeatedly calls <tt>ListIterator.next</tt>
followed by <tt>ListIterator.remove</tt> until the entire range has
been removed.  <b>Note: if <tt>ListIterator.remove</tt> requires linear
time, this implementation requires quadratic time.</b>

@param fromIndex index of first element to be removed.
@param toIndex index after last element to be removed."
      end

      attribute 131227 "modCount"
	protected explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of times this list has been <i>structurally modified</i>.
Structural modifications are those that change the size of the
list, or otherwise perturb it in such a fashion that iterations in
progress may yield incorrect results.<p>

This field is used by the iterator and list iterator implementation
returned by the <tt>iterator</tt> and <tt>listIterator</tt> methods.
If the value of this field changes unexpectedly, the iterator (or list
iterator) will throw a <tt>ConcurrentModificationException</tt> in
response to the <tt>next</tt>, <tt>remove</tt>, <tt>previous</tt>,
<tt>set</tt> or <tt>add</tt> operations.  This provides
<i>fail-fast</i> behavior, rather than non-deterministic behavior in
the face of concurrent modification during iteration.<p>

<b>Use of this field by subclasses is optional.</b> If a subclass
wishes to provide fail-fast iterators (and list iterators), then it
merely has to increment this field in its <tt>add(int, Object)</tt> and
<tt>remove(int)</tt> methods (and any other methods that it overrides
that result in structural modifications to the list).  A single call to
<tt>add(int, Object)</tt> or <tt>remove(int)</tt> must add no more than
one to this field, or the iterators (and list iterators) will throw
bogus <tt>ConcurrentModificationExceptions</tt>.  If an implementation
does not wish to provide fail-fast iterators, this field may be
ignored.
"
      end
    end

    class 135579 "List"
      visibility public stereotype "interface"
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 135067 // Collection
        rank 0 explicit_value "E"
      actual class class_ref 135067 // Collection
        rank 1 explicit_value ""
      actual class class_ref 135067 // Collection
        rank 2 explicit_value ""
      actual class class_ref 135067 // Collection
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An ordered collection (also known as a <i>sequence</i>).  The user of this
interface has precise control over where in the list each element is
inserted.  The user can access elements by their integer index (position in
the list), and search for elements in the list.<p>

Unlike sets, lists typically allow duplicate elements.  More formally,
lists typically allow pairs of elements <tt>e1</tt> and <tt>e2</tt>
such that <tt>e1.equals(e2)</tt>, and they typically allow multiple
null elements if they allow null elements at all.  It is not inconceivable
that someone might wish to implement a list that prohibits duplicates, by
throwing runtime exceptions when the user attempts to insert them, but we
expect this usage to be rare.<p>

The <tt>List</tt> interface places additional stipulations, beyond those
specified in the <tt>Collection</tt> interface, on the contracts of the
<tt>iterator</tt>, <tt>add</tt>, <tt>remove</tt>, <tt>equals</tt>, and
<tt>hashCode</tt> methods.  Declarations for other inherited methods are
also included here for convenience.<p>

The <tt>List</tt> interface provides four methods for positional (indexed)
access to list elements.  Lists (like Java arrays) are zero based.  Note
that these operations may execute in time proportional to the index value
for some implementations (the <tt>LinkedList</tt> class, for
example). Thus, iterating over the elements in a list is typically
preferable to indexing through it if the caller does not know the
implementation.<p>

The <tt>List</tt> interface provides a special iterator, called a
<tt>ListIterator</tt>, that allows element insertion and replacement, and
bidirectional access in addition to the normal operations that the
<tt>Iterator</tt> interface provides.  A method is provided to obtain a
list iterator that starts at a specified position in the list.<p>

The <tt>List</tt> interface provides two methods to search for a specified
object.  From a performance standpoint, these methods should be used with
caution.  In many implementations they will perform costly linear
searches.<p>

The <tt>List</tt> interface provides two methods to efficiently insert and
remove multiple elements at an arbitrary point in the list.<p>

Note: While it is permissible for lists to contain themselves as elements,
extreme caution is advised: the <tt>equals</tt> and <tt>hashCode</tt>
methods are no longer well defined on a such a list.

<p>Some list implementations have restrictions on the elements that
they may contain.  For example, some implementations prohibit null elements,
and some have restrictions on the types of their elements.  Attempting to
add an ineligible element throws an unchecked exception, typically
<tt>NullPointerException</tt> or <tt>ClassCastException</tt>.  Attempting
to query the presence of an ineligible element may throw an exception,
or it may simply return false; some implementations will exhibit the former
behavior and some will exhibit the latter.  More generally, attempting an
operation on an ineligible element whose completion would not result in
the insertion of an ineligible element into the list may throw an
exception or it may succeed, at the option of the implementation.
Such exceptions are marked as \"optional\" in the specification for this
interface. 

<p>This interface is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@author  Neal Gafter
@version 1.44, 12/19/03
@see Collection
@see Set
@see ArrayList
@see LinkedList
@see Vector
@see Arrays#asList(Object[])
@see Collections#nCopies(int, Object)
@see Collections#EMPTY_LIST
@see AbstractList
@see AbstractSequentialList
@since 1.2"
      classrelation 132507 // <realization>
	relation 132507 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 132507 // <realization>
	  b parent class_ref 135067 // Collection
      end

      operation 141979 "size"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query Operations

Returns the number of elements in this list.  If this list contains
more than <tt>Integer.MAX_VALUE</tt> elements, returns
<tt>Integer.MAX_VALUE</tt>.

@return the number of elements in this list."
      end

      operation 142107 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this list contains no elements.

@return <tt>true</tt> if this list contains no elements."
      end

      operation 142235 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Returns <tt>true</tt> if this list contains the specified element.
More formally, returns <tt>true</tt> if and only if this list contains
at least one element <tt>e</tt> such that
<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.

@param o element whose presence in this list is to be tested.
@return <tt>true</tt> if this list contains the specified element.
@throws ClassCastException if the type of the specified element
	       is incompatible with this list (optional).
@throws NullPointerException if the specified element is null and this
        list does not support null elements (optional)."
      end

      operation 142363 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this list in proper sequence.

@return an iterator over the elements in this list in proper sequence."
      end

      operation 142491 "toArray"
	public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this list in proper
sequence.  Obeys the general contract of the
<tt>Collection.toArray</tt> method.

@return an array containing all of the elements in this list in proper
	       sequence.
@see Arrays#asList(Object[])"
      end

      operation 142619 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this list in proper
sequence; the runtime type of the returned array is that of the
specified array.  Obeys the general contract of the
<tt>Collection.toArray(Object[])</tt> method.

@param a the array into which the elements of this list are to
		be stored, if it is big enough; otherwise, a new array of the
		same runtime type is allocated for this purpose.
@return  an array containing the elements of this list.

@throws ArrayStoreException if the runtime type of the specified array
		  is not a supertype of the runtime type of every element in
		  this list.
@throws NullPointerException if the specified array is <tt>null</tt>."
      end

      operation 142747 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modification Operations

Appends the specified element to the end of this list (optional
operation). <p>

Lists that support this operation may place limitations on what
elements may be added to this list.  In particular, some
lists will refuse to add null elements, and others will impose
restrictions on the type of elements that may be added.  List
classes should clearly specify in their documentation any restrictions
on what elements may be added.

@param o element to be appended to this list.
@return <tt>true</tt> (as per the general contract of the
           <tt>Collection.add</tt> method).

@throws UnsupportedOperationException if the <tt>add</tt> method is not
		  supported by this list.
@throws ClassCastException if the class of the specified element
		  prevents it from being added to this list.
@throws NullPointerException if the specified element is null and this
          list does not support null elements.
@throws IllegalArgumentException if some aspect of this element
           prevents it from being added to this list."
      end

      operation 142875 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the first occurrence in this list of the specified element 
(optional operation).  If this list does not contain the element, it is
unchanged.  More formally, removes the element with the lowest index i
such that <tt>(o==null ? get(i)==null : o.equals(get(i)))</tt> (if
such an element exists).

@param o element to be removed from this list, if present.
@return <tt>true</tt> if this list contained the specified element.
@throws ClassCastException if the type of the specified element
	          is incompatible with this list (optional).
@throws NullPointerException if the specified element is null and this
           list does not support null elements (optional).
@throws UnsupportedOperationException if the <tt>remove</tt> method is
		  not supported by this list."
      end

      operation 143003 "containsAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bulk Modification Operations


Returns <tt>true</tt> if this list contains all of the elements of the
specified collection.

@param  c collection to be checked for containment in this list.
@return <tt>true</tt> if this list contains all of the elements of the
	       specified collection.
@throws ClassCastException if the types of one or more elements
        in the specified collection are incompatible with this
        list (optional).
@throws NullPointerException if the specified collection contains one
        or more null elements and this list does not support null
        elements (optional).
@throws NullPointerException if the specified collection is
        <tt>null</tt>.
@see #contains(Object)"
      end

      operation 143131 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all of the elements in the specified collection to the end of
this list, in the order that they are returned by the specified
collection's iterator (optional operation).  The behavior of this
operation is unspecified if the specified collection is modified while
the operation is in progress.  (Note that this will occur if the
specified collection is this list, and it's nonempty.)

@param c collection whose elements are to be added to this list.
@return <tt>true</tt> if this list changed as a result of the call.

@throws UnsupportedOperationException if the <tt>addAll</tt> method is
        not supported by this list.
@throws ClassCastException if the class of an element in the specified
	       collection prevents it from being added to this list.
@throws NullPointerException if the specified collection contains one
        or more null elements and this list does not support null
        elements, or if the specified collection is <tt>null</tt>.
@throws IllegalArgumentException if some aspect of an element in the
        specified collection prevents it from being added to this
        list.
@see #add(Object)"
      end

      operation 143259 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "c" type class_ref 135067 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts all of the elements in the specified collection into this
list at the specified position (optional operation).  Shifts the
element currently at that position (if any) and any subsequent
elements to the right (increases their indices).  The new elements
will appear in this list in the order that they are returned by the
specified collection's iterator.  The behavior of this operation is
unspecified if the specified collection is modified while the
operation is in progress.  (Note that this will occur if the specified
collection is this list, and it's nonempty.)

@param index index at which to insert first element from the specified
	            collection.
@param c elements to be inserted into this list.
@return <tt>true</tt> if this list changed as a result of the call.

@throws UnsupportedOperationException if the <tt>addAll</tt> method is
		  not supported by this list.
@throws ClassCastException if the class of one of elements of the
		  specified collection prevents it from being added to this
		  list.
@throws NullPointerException if the specified collection contains one
          or more null elements and this list does not support null
          elements, or if the specified collection is <tt>null</tt>.
@throws IllegalArgumentException if some aspect of one of elements of
		  the specified collection prevents it from being added to
		  this list.
@throws IndexOutOfBoundsException if the index is out of range (index
		  &lt; 0 || index &gt; size())."
      end

      operation 143387 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this list all the elements that are contained in the
specified collection (optional operation).

@param c collection that defines which elements will be removed from
         this list.
@return <tt>true</tt> if this list changed as a result of the call.

@throws UnsupportedOperationException if the <tt>removeAll</tt> method
		  is not supported by this list.
@throws ClassCastException if the types of one or more elements
           in this list are incompatible with the specified
           collection (optional).
@throws NullPointerException if this list contains one or more
           null elements and the specified collection does not support
           null elements (optional).
@throws NullPointerException if the specified collection is
           <tt>null</tt>.
@see #remove(Object)
@see #contains(Object)"
      end

      operation 143515 "retainAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retains only the elements in this list that are contained in the
specified collection (optional operation).  In other words, removes
from this list all the elements that are not contained in the specified
collection.

@param c collection that defines which elements this set will retain.

@return <tt>true</tt> if this list changed as a result of the call.

@throws UnsupportedOperationException if the <tt>retainAll</tt> method
		  is not supported by this list.
@throws ClassCastException if the types of one or more elements
           in this list are incompatible with the specified
           collection (optional).
@throws NullPointerException if this list contains one or more
           null elements and the specified collection does not support
           null elements (optional).
@throws NullPointerException if the specified collection is
        <tt>null</tt>.
@see #remove(Object)
@see #contains(Object)"
      end

      operation 143643 "clear"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this list (optional operation).  This
list will be empty after this call returns (unless it throws an
exception).

@throws UnsupportedOperationException if the <tt>clear</tt> method is
		  not supported by this list."
      end

      operation 143771 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison and hashing

Compares the specified object with this list for equality.  Returns
<tt>true</tt> if and only if the specified object is also a list, both
lists have the same size, and all corresponding pairs of elements in
the two lists are <i>equal</i>.  (Two elements <tt>e1</tt> and
<tt>e2</tt> are <i>equal</i> if <tt>(e1==null ? e2==null :
e1.equals(e2))</tt>.)  In other words, two lists are defined to be
equal if they contain the same elements in the same order.  This
definition ensures that the equals method works properly across
different implementations of the <tt>List</tt> interface.

@param o the object to be compared for equality with this list.
@return <tt>true</tt> if the specified object is equal to this list."
      end

      operation 143899 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this list.  The hash code of a list
is defined to be the result of the following calculation:
<pre>
 hashCode = 1;
 Iterator i = list.iterator();
 while (i.hasNext()) {
     Object obj = i.next();
     hashCode = 31*hashCode + (obj==null ? 0 : obj.hashCode());
 }
</pre>
This ensures that <tt>list1.equals(list2)</tt> implies that
<tt>list1.hashCode()==list2.hashCode()</tt> for any two lists,
<tt>list1</tt> and <tt>list2</tt>, as required by the general
contract of <tt>Object.hashCode</tt>.

@return the hash code value for this list.
@see Object#hashCode()
@see Object#equals(Object)
@see #equals(Object)"
      end

      operation 144027 "get"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Positional Access Operations

Returns the element at the specified position in this list.

@param index index of element to return.
@return the element at the specified position in this list.

@throws IndexOutOfBoundsException if the index is out of range (index
		  &lt; 0 || index &gt;= size())."
      end

      operation 144155 "set"
	public explicit_return_type "E"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the element at the specified position in this list with the
specified element (optional operation).

@param index index of element to replace.
@param element element to be stored at the specified position.
@return the element previously at the specified position.

@throws UnsupportedOperationException if the <tt>set</tt> method is not
		  supported by this list.
@throws    ClassCastException if the class of the specified element
		  prevents it from being added to this list.
@throws    NullPointerException if the specified element is null and
           this list does not support null elements.
@throws    IllegalArgumentException if some aspect of the specified
		  element prevents it from being added to this list.
@throws    IndexOutOfBoundsException if the index is out of range
		  (index &lt; 0 || index &gt;= size())."
      end

      operation 144283 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the specified position in this list
(optional operation).  Shifts the element currently at that position
(if any) and any subsequent elements to the right (adds one to their
indices).

@param index index at which the specified element is to be inserted.
@param element element to be inserted.

@throws UnsupportedOperationException if the <tt>add</tt> method is not
		  supported by this list.
@throws    ClassCastException if the class of the specified element
		  prevents it from being added to this list.
@throws    NullPointerException if the specified element is null and
           this list does not support null elements.
@throws    IllegalArgumentException if some aspect of the specified
		  element prevents it from being added to this list.
@throws    IndexOutOfBoundsException if the index is out of range
		  (index &lt; 0 || index &gt; size())."
      end

      operation 144411 "remove"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the element at the specified position in this list (optional
operation).  Shifts any subsequent elements to the left (subtracts one
from their indices).  Returns the element that was removed from the
list.

@param index the index of the element to removed.
@return the element previously at the specified position.

@throws UnsupportedOperationException if the <tt>remove</tt> method is
		  not supported by this list.
@throws IndexOutOfBoundsException if the index is out of range (index
           &lt; 0 || index &gt;= size())."
      end

      operation 144539 "indexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Search Operations

Returns the index in this list of the first occurrence of the specified
element, or -1 if this list does not contain this element.
More formally, returns the lowest index <tt>i</tt> such that
<tt>(o==null ? get(i)==null : o.equals(get(i)))</tt>,
or -1 if there is no such index.

@param o element to search for.
@return the index in this list of the first occurrence of the specified
	       element, or -1 if this list does not contain this element.
@throws ClassCastException if the type of the specified element
	       is incompatible with this list (optional).
@throws NullPointerException if the specified element is null and this
        list does not support null elements (optional)."
      end

      operation 144667 "lastIndexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index in this list of the last occurrence of the specified
element, or -1 if this list does not contain this element.
More formally, returns the highest index <tt>i</tt> such that
<tt>(o==null ? get(i)==null : o.equals(get(i)))</tt>,
or -1 if there is no such index.

@param o element to search for.
@return the index in this list of the last occurrence of the specified
	       element, or -1 if this list does not contain this element.
@throws ClassCastException if the type of the specified element
	       is incompatible with this list (optional).
@throws NullPointerException if the specified element is null and this
        list does not support null elements (optional)."
      end

      operation 144795 "listIterator"
	public return_type class_ref 135707 // ListIterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " List Iterators

Returns a list iterator of the elements in this list (in proper
sequence).

@return a list iterator of the elements in this list (in proper
	       sequence)."
      end

      operation 144923 "listIterator"
	public return_type class_ref 135707 // ListIterator
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list iterator of the elements in this list (in proper
sequence), starting at the specified position in this list.  The
specified index indicates the first element that would be returned by
an initial call to the <tt>next</tt> method.  An initial call to
the <tt>previous</tt> method would return the element with the
specified index minus one.

@param index index of first element to be returned from the
		    list iterator (by a call to the <tt>next</tt> method).
@return a list iterator of the elements in this list (in proper
	       sequence), starting at the specified position in this list.
@throws IndexOutOfBoundsException if the index is out of range (index
        &lt; 0 || index &gt; size())."
      end

      operation 145051 "subList"
	public return_type class_ref 135579 // List
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " View

Returns a view of the portion of this list between the specified
<tt>fromIndex</tt>, inclusive, and <tt>toIndex</tt>, exclusive.  (If
<tt>fromIndex</tt> and <tt>toIndex</tt> are equal, the returned list is
empty.)  The returned list is backed by this list, so non-structural
changes in the returned list are reflected in this list, and vice-versa.
The returned list supports all of the optional list operations supported
by this list.<p>

This method eliminates the need for explicit range operations (of
the sort that commonly exist for arrays).   Any operation that expects
a list can be used as a range operation by passing a subList view
instead of a whole list.  For example, the following idiom
removes a range of elements from a list:
<pre>
	    list.subList(from, to).clear();
</pre>
Similar idioms may be constructed for <tt>indexOf</tt> and
<tt>lastIndexOf</tt>, and all of the algorithms in the
<tt>Collections</tt> class can be applied to a subList.<p>

The semantics of the list returned by this method become undefined if
the backing list (i.e., this list) is <i>structurally modified</i> in
any way other than via the returned list.  (Structural modifications are
those that change the size of this list, or otherwise perturb it in such
a fashion that iterations in progress may yield incorrect results.)

@param fromIndex low endpoint (inclusive) of the subList.
@param toIndex high endpoint (exclusive) of the subList.
@return a view of the specified range within this list.

@throws IndexOutOfBoundsException for an illegal endpoint index value
    (fromIndex &lt; 0 || toIndex &gt; size || fromIndex &gt; toIndex)."
      end
    end

    class 135707 "ListIterator"
      visibility public stereotype "interface"
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 135323 // Iterator
        rank 0 explicit_value "E"
      actual class class_ref 135323 // Iterator
        rank 1 explicit_value ""
      actual class class_ref 135323 // Iterator
        rank 2 explicit_value ""
      actual class class_ref 135323 // Iterator
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
An iterator for lists that allows the programmer 
to traverse the list in either direction, modify 
the list during iteration, and obtain the iterator's 
current position in the list. A <TT>ListIterator</TT> 
has no current element; its <I>cursor position</I> always 
lies between the element that would be returned by a call 
to <TT>previous()</TT> and the element that would be 
returned by a call to <TT>next()</TT>. In a list of 
length <TT>n</TT>, there are <TT>n+1</TT> valid 
index values, from <TT>0</TT> to <TT>n</TT>, inclusive. 
<PRE>

         Element(0)   Element(1)   Element(2)   ... Element(n)   
       ^            ^            ^            ^               ^
Index: 0            1            2            3               n+1

</PRE>
<P>
Note that the {@link #remove} and {@link #set(Object)} methods are
<i>not</i> defined in terms of the cursor position;  they are defined to
operate on the last element returned by a call to {@link #next} or {@link
#previous()}.
<P>
This interface is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@version 1.23, 12/19/03
@see Collection
@see List
@see Iterator
@see Enumeration
@since   1.2"
      classrelation 133019 // <realization>
	relation 133019 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 133019 // <realization>
	  b parent class_ref 135323 // Iterator
      end

      operation 147739 "hasNext"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query Operations

Returns <tt>true</tt> if this list iterator has more elements when
traversing the list in the forward direction. (In other words, returns
<tt>true</tt> if <tt>next</tt> would return an element rather than
throwing an exception.)

@return <tt>true</tt> if the list iterator has more elements when
		traversing the list in the forward direction."
      end

      operation 147867 "next"
	public explicit_return_type "E"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next element in the list.  This method may be called
repeatedly to iterate through the list, or intermixed with calls to
<tt>previous</tt> to go back and forth.  (Note that alternating calls
to <tt>next</tt> and <tt>previous</tt> will return the same element
repeatedly.)

@return the next element in the list.
@exception NoSuchElementException if the iteration has no next element."
      end

      operation 147995 "hasPrevious"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this list iterator has more elements when
traversing the list in the reverse direction.  (In other words, returns
<tt>true</tt> if <tt>previous</tt> would return an element rather than
throwing an exception.)

@return <tt>true</tt> if the list iterator has more elements when
	       traversing the list in the reverse direction."
      end

      operation 148123 "previous"
	public explicit_return_type "E"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the previous element in the list.  This method may be called
repeatedly to iterate through the list backwards, or intermixed with
calls to <tt>next</tt> to go back and forth.  (Note that alternating
calls to <tt>next</tt> and <tt>previous</tt> will return the same
element repeatedly.)

@return the previous element in the list.

@exception NoSuchElementException if the iteration has no previous
           element."
      end

      operation 148251 "nextIndex"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the element that would be returned by a subsequent
call to <tt>next</tt>. (Returns list size if the list iterator is at the
end of the list.)

@return the index of the element that would be returned by a subsequent
	       call to <tt>next</tt>, or list size if list iterator is at end
	       of list. "
      end

      operation 148379 "previousIndex"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the element that would be returned by a subsequent
call to <tt>previous</tt>. (Returns -1 if the list iterator is at the
beginning of the list.)

@return the index of the element that would be returned by a subsequent
	       call to <tt>previous</tt>, or -1 if list iterator is at
	       beginning of list."
      end

      operation 148507 "remove"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modification Operations

Removes from the list the last element that was returned by
<tt>next</tt> or <tt>previous</tt> (optional operation).  This call can
only be made once per call to <tt>next</tt> or <tt>previous</tt>.  It
can be made only if <tt>ListIterator.add</tt> has not been called after
the last call to <tt>next</tt> or <tt>previous</tt>.

@exception UnsupportedOperationException if the <tt>remove</tt>
		  operation is not supported by this list iterator.
@exception IllegalStateException neither <tt>next</tt> nor
		  <tt>previous</tt> have been called, or <tt>remove</tt> or
		  <tt>add</tt> have been called after the last call to *
		  <tt>next</tt> or <tt>previous</tt>."
      end

      operation 148635 "set"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the last element returned by <tt>next</tt> or
<tt>previous</tt> with the specified element (optional operation).
This call can be made only if neither <tt>ListIterator.remove</tt> nor
<tt>ListIterator.add</tt> have been called after the last call to
<tt>next</tt> or <tt>previous</tt>.

@param o the element with which to replace the last element returned by
         <tt>next</tt> or <tt>previous</tt>.
@exception UnsupportedOperationException if the <tt>set</tt> operation
		  is not supported by this list iterator.
@exception ClassCastException if the class of the specified element
		  prevents it from being added to this list.
@exception IllegalArgumentException if some aspect of the specified
		  element prevents it from being added to this list.
@exception IllegalStateException if neither <tt>next</tt> nor
	          <tt>previous</tt> have been called, or <tt>remove</tt> or
		  <tt>add</tt> have been called after the last call to
		  <tt>next</tt> or <tt>previous</tt>."
      end

      operation 148763 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into the list (optional operation).  The
element is inserted immediately before the next element that would be
returned by <tt>next</tt>, if any, and after the next element that
would be returned by <tt>previous</tt>, if any.  (If the list contains
no elements, the new element becomes the sole element on the list.)
The new element is inserted before the implicit cursor: a subsequent
call to <tt>next</tt> would be unaffected, and a subsequent call to
<tt>previous</tt> would return the new element.  (This call increases
by one the value that would be returned by a call to <tt>nextIndex</tt>
or <tt>previousIndex</tt>.)

@param o the element to insert.
@exception UnsupportedOperationException if the <tt>add</tt> method is
		  not supported by this list iterator.

@exception ClassCastException if the class of the specified element
		  prevents it from being added to this list.

@exception IllegalArgumentException if some aspect of this element
           prevents it from being added to this list."
      end
    end

    class 136091 "SubList"
      visibility package 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 135451 // AbstractList
        rank 0 explicit_value "E"
      actual class class_ref 135451 // AbstractList
        rank 1 explicit_value ""
      actual class class_ref 135451 // AbstractList
        rank 2 explicit_value ""
      actual class class_ref 135451 // AbstractList
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 133275 // <realization>
	relation 133275 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 133275 // <realization>
	  b parent class_ref 135451 // AbstractList
      end

      classrelation 133403 // l (<unidirectional association>)
	relation 133403 --->
	  a role_name "l" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 133403 // l (<unidirectional association>)
	  b parent class_ref 135451 // AbstractList
      end

      attribute 131355 "offset"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 131483 "size"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 131611 "expectedModCount"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 150299 "SubList"
	package explicit_return_type ""
	nparams 3
	  param inout name "list" type class_ref 135451 // AbstractList
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 150427 "set"
	public explicit_return_type "E"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 150555 "get"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 150683 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 150811 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 150939 "remove"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 151067 "removeRange"
	protected explicit_return_type "void"
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 151195 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 151323 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 151451 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 151579 "listIterator"
	public return_type class_ref 135707 // ListIterator
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 151707 "subList"
	public return_type class_ref 135579 // List
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 151835 "rangeCheck"
	private explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 151963 "checkForComodification"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 136219 "RandomAccessSubList"
      visibility package 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 136091 // SubList
        rank 0 explicit_value "E"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 133531 // <realization>
	relation 133531 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 133531 // <realization>
	  b parent class_ref 136091 // SubList
      end

      classrelation 133659 // <realization>
	relation 133659 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 133659 // <realization>
	  b parent class_ref 136347 // RandomAccess
      end

      operation 152091 "RandomAccessSubList"
	package explicit_return_type ""
	nparams 3
	  param inout name "list" type class_ref 135451 // AbstractList
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 152219 "subList"
	public return_type class_ref 135579 // List
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 136347 "RandomAccess"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Marker interface used by <tt>List</tt> implementations to indicate that
they support fast (generally constant time) random access.  The primary
purpose of this interface is to allow generic algorithms to alter their
behavior to provide good performance when applied to either random or
sequential access lists.

<p>The best algorithms for manipulating random access lists (such as
<tt>ArrayList</tt>) can produce quadratic behavior when applied to
sequential access lists (such as <tt>LinkedList</tt>).  Generic list
algorithms are encouraged to check whether the given list is an
<tt>instanceof</tt> this interface before applying an algorithm that would
provide poor performance if it were applied to a sequential access list,
and to alter their behavior if necessary to guarantee acceptable
performance.

<p>It is recognized that the distinction between random and sequential
access is often fuzzy.  For example, some <tt>List</tt> implementations
provide asymptotically linear access times if they get huge, but constant
access times in practice.  Such a <tt>List</tt> implementation
should generally implement this interface.  As a rule of thumb, a
<tt>List</tt> implementation should implement this interface if,
for typical instances of the class, this loop:
<pre>
    for (int i=0, n=list.size(); i &lt; n; i++)
        list.get(i);
</pre>
runs faster than this loop:
<pre>
    for (Iterator i=list.iterator(); i.hasNext(); )
        i.next();
</pre>

<p>This interface is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.
"
    end

    class 136475 "AbstractMap"
      abstract visibility public 
      nformals 8
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 8
      actual class class_ref 136603 // Map
        rank 0 explicit_value "K"
      actual class class_ref 136603 // Map
        rank 1 explicit_value "V"
      actual class class_ref 136603 // Map
        rank 2 explicit_value ""
      actual class class_ref 136603 // Map
        rank 3 explicit_value ""
      actual class class_ref 136603 // Map
        rank 4 explicit_value ""
      actual class class_ref 136603 // Map
        rank 5 explicit_value ""
      actual class class_ref 136603 // Map
        rank 6 explicit_value ""
      actual class class_ref 136603 // Map
        rank 7 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides a skeletal implementation of the <tt>Map</tt>
interface, to minimize the effort required to implement this interface. <p>

To implement an unmodifiable map, the programmer needs only to extend this
class and provide an implementation for the <tt>entrySet</tt> method, which
returns a set-view of the map's mappings.  Typically, the returned set
will, in turn, be implemented atop <tt>AbstractSet</tt>.  This set should
not support the <tt>add</tt> or <tt>remove</tt> methods, and its iterator
should not support the <tt>remove</tt> method.<p>

To implement a modifiable map, the programmer must additionally override
this class's <tt>put</tt> method (which otherwise throws an
<tt>UnsupportedOperationException</tt>), and the iterator returned by
<tt>entrySet().iterator()</tt> must additionally implement its
<tt>remove</tt> method.<p>

The programmer should generally provide a void (no argument) and map
constructor, as per the recommendation in the <tt>Map</tt> interface
specification.<p>

The documentation for each non-abstract methods in this class describes its
implementation in detail.  Each of these methods may be overridden if the
map being implemented admits a more efficient implementation.<p>

This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@author  Neal Gafter
@version 1.42, 02/19/04
@see Map
@see Collection
@since 1.2"
      classrelation 133787 // <realization>
	relation 133787 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 133787 // <realization>
	  b parent class_ref 136603 // Map
      end

      operation 154779 "AbstractMap"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sole constructor.  (For invocation by subclass constructors, typically
implicit.)"
      end

      operation 154907 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query Operations

Returns the number of key-value mappings in this map.  If the map
contains more than <tt>Integer.MAX_VALUE</tt> elements, returns
<tt>Integer.MAX_VALUE</tt>.<p>

This implementation returns <tt>entrySet().size()</tt>.

@return the number of key-value mappings in this map."
      end

      operation 155035 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains no key-value mappings. <p>

This implementation returns <tt>size() == 0</tt>.

@return <tt>true</tt> if this map contains no key-value mappings."
      end

      operation 155163 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map maps one or more keys to this value.
More formally, returns <tt>true</tt> if and only if this map contains
at least one mapping to a value <tt>v</tt> such that <tt>(value==null ?
v==null : value.equals(v))</tt>.  This operation will probably require
time linear in the map size for most implementations of map.<p>

This implementation iterates over entrySet() searching for an entry
with the specified value.  If such an entry is found, <tt>true</tt> is
returned.  If the iteration terminates without finding such an entry,
<tt>false</tt> is returned.  Note that this implementation requires
linear time in the size of the map.

@param value value whose presence in this map is to be tested.

@return <tt>true</tt> if this map maps one or more keys to this value."
      end

      operation 155291 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains a mapping for the specified
key. <p>

This implementation iterates over <tt>entrySet()</tt> searching for an
entry with the specified key.  If such an entry is found, <tt>true</tt>
is returned.  If the iteration terminates without finding such an
entry, <tt>false</tt> is returned.  Note that this implementation
requires linear time in the size of the map; many implementations will
override this method.

@param key key whose presence in this map is to be tested.
@return <tt>true</tt> if this map contains a mapping for the specified
           key.

@throws NullPointerException if the key is <tt>null</tt> and this map
           does not permit <tt>null</tt> keys."
      end

      operation 155419 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which this map maps the specified key.  Returns
<tt>null</tt> if the map contains no mapping for this key.  A return
value of <tt>null</tt> does not <i>necessarily</i> indicate that the
map contains no mapping for the key; it's also possible that the map
explicitly maps the key to <tt>null</tt>.  The containsKey operation
may be used to distinguish these two cases. <p>

This implementation iterates over <tt>entrySet()</tt> searching for an
entry with the specified key.  If such an entry is found, the entry's
value is returned.  If the iteration terminates without finding such an
entry, <tt>null</tt> is returned.  Note that this implementation
requires linear time in the size of the map; many implementations will
override this method.

@param key key whose associated value is to be returned.
@return the value to which this map maps the specified key.

@throws NullPointerException if the key is <tt>null</tt> and this map
		  does not permit <tt>null</tt> keys.

@see #containsKey(Object)"
      end

      operation 155547 "put"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modification Operations

Associates the specified value with the specified key in this map
(optional operation).  If the map previously contained a mapping for
this key, the old value is replaced.<p>

This implementation always throws an
<tt>UnsupportedOperationException</tt>.

@param key key with which the specified value is to be associated.
@param value value to be associated with the specified key.

@return previous value associated with specified key, or <tt>null</tt>
	       if there was no mapping for key.  (A <tt>null</tt> return can
	       also indicate that the map previously associated <tt>null</tt>
	       with the specified key, if the implementation supports
	       <tt>null</tt> values.)

@throws UnsupportedOperationException if the <tt>put</tt> operation is
	          not supported by this map.

@throws ClassCastException if the class of the specified key or value
	          prevents it from being stored in this map.

@throws IllegalArgumentException if some aspect of this key or value *
           prevents it from being stored in this map.

@throws NullPointerException if this map does not permit <tt>null</tt>
           keys or values, and the specified key or value is
           <tt>null</tt>."
      end

      operation 155675 "remove"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the mapping for this key from this map if present (optional
operation). <p>

This implementation iterates over <tt>entrySet()</tt> searching for an
entry with the specified key.  If such an entry is found, its value is
obtained with its <tt>getValue</tt> operation, the entry is removed
from the Collection (and the backing map) with the iterator's
<tt>remove</tt> operation, and the saved value is returned.  If the
iteration terminates without finding such an entry, <tt>null</tt> is
returned.  Note that this implementation requires linear time in the
size of the map; many implementations will override this method.<p>

Note that this implementation throws an
<tt>UnsupportedOperationException</tt> if the <tt>entrySet</tt> iterator
does not support the <tt>remove</tt> method and this map contains a
mapping for the specified key.

@param key key whose mapping is to be removed from the map.
@return previous value associated with specified key, or <tt>null</tt>
	       if there was no entry for key.  (A <tt>null</tt> return can
	       also indicate that the map previously associated <tt>null</tt>
	       with the specified key, if the implementation supports
	       <tt>null</tt> values.)
@throws UnsupportedOperationException if the <tt>remove</tt> operation
		  is not supported by this map."
      end

      operation 155803 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bulk Operations

Copies all of the mappings from the specified map to this map
(optional operation).  These mappings will replace any mappings that
this map had for any of the keys currently in the specified map.<p>

This implementation iterates over the specified map's
<tt>entrySet()</tt> collection, and calls this map's <tt>put</tt>
operation once for each entry returned by the iteration.<p>

Note that this implementation throws an
<tt>UnsupportedOperationException</tt> if this map does not support
the <tt>put</tt> operation and the specified map is nonempty.

@param t mappings to be stored in this map.

@throws UnsupportedOperationException if the <tt>putAll</tt> operation
		  is not supported by this map.

@throws ClassCastException if the class of a key or value in the
	          specified map prevents it from being stored in this map.

@throws IllegalArgumentException if some aspect of a key or value in
	          the specified map prevents it from being stored in this map.
@throws NullPointerException if the specified map is <tt>null</tt>, or if
        this map does not permit <tt>null</tt> keys or values, and the
        specified map contains <tt>null</tt> keys or values."
      end

      operation 155931 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all mappings from this map (optional operation). <p>

This implementation calls <tt>entrySet().clear()</tt>.

Note that this implementation throws an
<tt>UnsupportedOperationException</tt> if the <tt>entrySet</tt>
does not support the <tt>clear</tt> operation.

@throws    UnsupportedOperationException clear is not supported
		  by this map."
      end

      classrelation 133915 // keySet (<unidirectional association>)
	relation 133915 --->
	  a role_name "keySet" init_value "=  null" volatile package
	    comment " Views

Each of these fields are initialized to contain an instance of the
appropriate view the first time this view is requested.  The views are
stateless, so there's no reason to create more than one of each.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K> ${name}${value};
"
	    classrelation_ref 133915 // keySet (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      classrelation 134043 // values (<unidirectional association>)
	relation 134043 --->
	  a role_name "values" init_value "=  null" volatile package
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	    classrelation_ref 134043 // values (<unidirectional association>)
	  b parent class_ref 135067 // Collection
      end

      operation 156059 "keySet"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Set view of the keys contained in this map.  The Set is
backed by the map, so changes to the map are reflected in the Set,
and vice-versa.  (If the map is modified while an iteration over
the Set is in progress, the results of the iteration are undefined.)
The Set supports element removal, which removes the corresponding entry
from the map, via the Iterator.remove, Set.remove,  removeAll
retainAll, and clear operations.  It does not support the add or
addAll operations.<p>

This implementation returns a Set that subclasses
AbstractSet.  The subclass's iterator method returns a \"wrapper
object\" over this map's entrySet() iterator.  The size method delegates
to this map's size method and the contains method delegates to this
map's containsKey method.<p>

The Set is created the first time this method is called,
and returned in response to all subsequent calls.  No synchronization
is performed, so there is a slight chance that multiple calls to this
method will not all return the same Set.

@return a Set view of the keys contained in this map."
      end

      operation 156187 "values"
	public return_type class_ref 135067 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a collection view of the values contained in this map.  The
collection is backed by the map, so changes to the map are reflected in
the collection, and vice-versa.  (If the map is modified while an
iteration over the collection is in progress, the results of the
iteration are undefined.)  The collection supports element removal,
which removes the corresponding entry from the map, via the
<tt>Iterator.remove</tt>, <tt>Collection.remove</tt>,
<tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations.
It does not support the <tt>add</tt> or <tt>addAll</tt> operations.<p>

This implementation returns a collection that subclasses abstract
collection.  The subclass's iterator method returns a \"wrapper object\"
over this map's <tt>entrySet()</tt> iterator.  The size method
delegates to this map's size method and the contains method delegates
to this map's containsValue method.<p>

The collection is created the first time this method is called, and
returned in response to all subsequent calls.  No synchronization is
performed, so there is a slight chance that multiple calls to this
method will not all return the same Collection.

@return a collection view of the values contained in this map."
      end

      operation 156315 "entrySet"
	abstract public return_type class_ref 136731 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a set view of the mappings contained in this map.  Each element
in this set is a Map.Entry.  The set is backed by the map, so changes
to the map are reflected in the set, and vice-versa.  (If the map is
modified while an iteration over the set is in progress, the results of
the iteration are undefined.)  The set supports element removal, which
removes the corresponding entry from the map, via the
<tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>,
<tt>retainAll</tt> and <tt>clear</tt> operations.  It does not support
the <tt>add</tt> or <tt>addAll</tt> operations.

@return a set view of the mappings contained in this map."
      end

      operation 156443 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison and hashing

Compares the specified object with this map for equality.  Returns
<tt>true</tt> if the given object is also a map and the two maps
represent the same mappings.  More formally, two maps <tt>t1</tt> and
<tt>t2</tt> represent the same mappings if
<tt>t1.keySet().equals(t2.keySet())</tt> and for every key <tt>k</tt>
in <tt>t1.keySet()</tt>, <tt> (t1.get(k)==null ? t2.get(k)==null :
t1.get(k).equals(t2.get(k))) </tt>.  This ensures that the
<tt>equals</tt> method works properly across different implementations
of the map interface.<p>

This implementation first checks if the specified object is this map;
if so it returns <tt>true</tt>.  Then, it checks if the specified
object is a map whose size is identical to the size of this set; if
not, it returns <tt>false</tt>.  If so, it iterates over this map's
<tt>entrySet</tt> collection, and checks that the specified map
contains each mapping that this map contains.  If the specified map
fails to contain such a mapping, <tt>false</tt> is returned.  If the
iteration completes, <tt>true</tt> is returned.

@param o object to be compared for equality with this map.
@return <tt>true</tt> if the specified object is equal to this map."
      end

      operation 156571 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this map.  The hash code of a map is
defined to be the sum of the hash codes of each entry in the map's
<tt>entrySet()</tt> view.  This ensures that <tt>t1.equals(t2)</tt>
implies that <tt>t1.hashCode()==t2.hashCode()</tt> for any two maps
<tt>t1</tt> and <tt>t2</tt>, as required by the general contract of
Object.hashCode.<p>

This implementation iterates over <tt>entrySet()</tt>, calling
<tt>hashCode</tt> on each element (entry) in the Collection, and adding
up the results.

@return the hash code value for this map.
@see Map.Entry#hashCode()
@see Object#hashCode()
@see Object#equals(Object)
@see Set#equals(Object)"
      end

      operation 156699 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this map.  The string representation
consists of a list of key-value mappings in the order returned by the
map's <tt>entrySet</tt> view's iterator, enclosed in braces
(<tt>\"{}\"</tt>).  Adjacent mappings are separated by the characters
<tt>\", \"</tt> (comma and space).  Each key-value mapping is rendered as
the key followed by an equals sign (<tt>\"=\"</tt>) followed by the
associated value.  Keys and values are converted to strings as by
<tt>String.valueOf(Object)</tt>.<p>

This implementation creates an empty string buffer, appends a left
brace, and iterates over the map's <tt>entrySet</tt> view, appending
the string representation of each <tt>map.entry</tt> in turn.  After
appending each entry except the last, the string <tt>\", \"</tt> is
appended.  Finally a right brace is appended.  A string is obtained
from the stringbuffer, and returned.

@return a String representation of this map."
      end

      operation 156827 "clone"
	protected explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  explicit_exception "CloneNotSupportedException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow copy of this <tt>AbstractMap</tt> instance: the keys
and values themselves are not cloned.

@return a shallow copy of this map."
      end

      class 136987 "SimpleEntry"
	visibility package 
	nformals 4
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 12
	actual class class_ref 136603 // Map
	  rank 0 explicit_value "K"
	actual class class_ref 136603 // Map
	  rank 1 explicit_value "V"
	actual class class_ref 136603 // Map
	  rank 2 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 3 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 4 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 5 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 6 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 7 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 0 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 1 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 2 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 134171 // <realization>
	  relation 134171 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 134171 // <realization>
	    b parent class_ref 136859 // Entry
	end

	attribute 131739 "key"
	  package explicit_type "K"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 131867 "value"
	  package explicit_type "V"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 156955 "SimpleEntry"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 157083 "SimpleEntry"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "e" type class_ref 136859 // Entry
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 157211 "getKey"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 157339 "getValue"
	  public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 157467 "setValue"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 157595 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 157723 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 157851 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 157979 "eq"
	  class_operation private explicit_return_type "boolean"
	  nparams 2
	    param inout name "o1" explicit_type "Object"
	    param inout name "o2" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 136603 "Map"
      visibility public stereotype "interface"
      nformals 8
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that maps keys to values.  A map cannot contain duplicate keys;
each key can map to at most one value.

<p>This interface takes the place of the <tt>Dictionary</tt> class, which
was a totally abstract class rather than an interface.

<p>The <tt>Map</tt> interface provides three <i>collection views</i>, which
allow a map's contents to be viewed as a set of keys, collection of values,
or set of key-value mappings.  The <i>order</i> of a map is defined as
the order in which the iterators on the map's collection views return their
elements.  Some map implementations, like the <tt>TreeMap</tt> class, make
specific guarantees as to their order; others, like the <tt>HashMap</tt>
class, do not.

<p>Note: great care must be exercised if mutable objects are used as map
keys.  The behavior of a map is not specified if the value of an object is
changed in a manner that affects equals comparisons while the object is a
key in the map.  A special case of this prohibition is that it is not
permissible for a map to contain itself as a key.  While it is permissible
for a map to contain itself as a value, extreme caution is advised: the
equals and hashCode methods are no longer well defined on a such a map.

<p>All general-purpose map implementation classes should provide two
\"standard\" constructors: a void (no arguments) constructor which creates an
empty map, and a constructor with a single argument of type <tt>Map</tt>,
which creates a new map with the same key-value mappings as its argument.
In effect, the latter constructor allows the user to copy any map,
producing an equivalent map of the desired class.  There is no way to
enforce this recommendation (as interfaces cannot contain constructors) but
all of the general-purpose map implementations in the JDK comply.

<p>The \"destructive\" methods contained in this interface, that is, the
methods that modify the map on which they operate, are specified to throw
<tt>UnsupportedOperationException</tt> if this map does not support the
operation.  If this is the case, these methods may, but are not required
to, throw an <tt>UnsupportedOperationException</tt> if the invocation would
have no effect on the map.  For example, invoking the {@link #putAll(Map)}
method on an unmodifiable map may, but is not required to, throw the
exception if the map whose mappings are to be \"superimposed\" is empty.

<p>Some map implementations have restrictions on the keys and values they
may contain.  For example, some implementations prohibit null keys and
values, and some have restrictions on the types of their keys.  Attempting
to insert an ineligible key or value throws an unchecked exception,
typically <tt>NullPointerException</tt> or <tt>ClassCastException</tt>.
Attempting to query the presence of an ineligible key or value may throw an
exception, or it may simply return false; some implementations will exhibit
the former behavior and some will exhibit the latter.  More generally,
attempting an operation on an ineligible key or value whose completion
would not result in the insertion of an ineligible element into the map may
throw an exception or it may succeed, at the option of the implementation.
Such exceptions are marked as \"optional\" in the specification for this
interface.

<p>This interface is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

<p>Many methods in Collections Framework interfaces are defined
in terms of the {@link Object#equals(Object) equals} method.  For
example, the specification for the {@link #containsKey(Object)
contains(Object key)} method says: \"returns <tt>true</tt> if and
only if this map contain a mapping for a key <tt>k</tt> such that
<tt>(key==null ? k==null : key.equals(k))</tt>.\" This specification should
<i>not</i> be construed to imply that invoking <tt>Map.containsKey</tt>
with a non-null argument <tt>key</tt> will cause <tt>key.equals(k)</tt> to
be invoked for any key <tt>k</tt>.  Implementations are free to
implement optimizations whereby the <tt>equals</tt> invocation is avoided,
for example, by first comparing the hash codes of the two keys.  (The
{@link Object#hashCode()} specification guarantees that two objects with
unequal hash codes cannot be equal.)  More generally, implementations of
the various Collections Framework interfaces are free to take advantage of
the specified behavior of underlying {@link Object} methods wherever the
implementor deems it appropriate.

@author  Josh Bloch
@version 1.48, 06/28/04
@see HashMap
@see TreeMap
@see Hashtable
@see SortedMap
@see Collection
@see Set
@since 1.2"
      operation 152347 "size"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query Operations

Returns the number of key-value mappings in this map.  If the
map contains more than <tt>Integer.MAX_VALUE</tt> elements, returns
<tt>Integer.MAX_VALUE</tt>.

@return the number of key-value mappings in this map."
      end

      operation 152475 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains no key-value mappings.

@return <tt>true</tt> if this map contains no key-value mappings."
      end

      operation 152603 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains a mapping for the specified
key.  More formally, returns <tt>true</tt> if and only if
this map contains a mapping for a key <tt>k</tt> such that
<tt>(key==null ? k==null : key.equals(k))</tt>.  (There can be
at most one such mapping.)

@param key key whose presence in this map is to be tested.
@return <tt>true</tt> if this map contains a mapping for the specified
        key.

@throws ClassCastException if the key is of an inappropriate type for
		  this map (optional).
@throws NullPointerException if the key is <tt>null</tt> and this map
           does not permit <tt>null</tt> keys (optional)."
      end

      operation 152731 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map maps one or more keys to the
specified value.  More formally, returns <tt>true</tt> if and only if
this map contains at least one mapping to a value <tt>v</tt> such that
<tt>(value==null ? v==null : value.equals(v))</tt>.  This operation
will probably require time linear in the map size for most
implementations of the <tt>Map</tt> interface.

@param value value whose presence in this map is to be tested.
@return <tt>true</tt> if this map maps one or more keys to the
        specified value.
@throws ClassCastException if the value is of an inappropriate type for
		  this map (optional).
@throws NullPointerException if the value is <tt>null</tt> and this map
           does not permit <tt>null</tt> values (optional)."
      end

      operation 152859 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which this map maps the specified key.  Returns
<tt>null</tt> if the map contains no mapping for this key.  A return
value of <tt>null</tt> does not <i>necessarily</i> indicate that the
map contains no mapping for the key; it's also possible that the map
explicitly maps the key to <tt>null</tt>.  The <tt>containsKey</tt>
operation may be used to distinguish these two cases.

<p>More formally, if this map contains a mapping from a key
<tt>k</tt> to a value <tt>v</tt> such that <tt>(key==null ? k==null :
key.equals(k))</tt>, then this method returns <tt>v</tt>; otherwise
it returns <tt>null</tt>.  (There can be at most one such mapping.)

@param key key whose associated value is to be returned.
@return the value to which this map maps the specified key, or
	       <tt>null</tt> if the map contains no mapping for this key.

@throws ClassCastException if the key is of an inappropriate type for
		  this map (optional).
@throws NullPointerException if the key is <tt>null</tt> and this map
		  does not permit <tt>null</tt> keys (optional).

@see #containsKey(Object)"
      end

      operation 152987 "put"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modification Operations

Associates the specified value with the specified key in this map
(optional operation).  If the map previously contained a mapping for
this key, the old value is replaced by the specified value.  (A map
<tt>m</tt> is said to contain a mapping for a key <tt>k</tt> if and only
if {@link #containsKey(Object) m.containsKey(k)} would return
<tt>true</tt>.)) 

@param key key with which the specified value is to be associated.
@param value value to be associated with the specified key.
@return previous value associated with specified key, or <tt>null</tt>
	       if there was no mapping for key.  A <tt>null</tt> return can
	       also indicate that the map previously associated <tt>null</tt>
	       with the specified key, if the implementation supports
	       <tt>null</tt> values.

@throws UnsupportedOperationException if the <tt>put</tt> operation is
	          not supported by this map.
@throws ClassCastException if the class of the specified key or value
	          prevents it from being stored in this map.
@throws IllegalArgumentException if some aspect of this key or value
	          prevents it from being stored in this map.
@throws NullPointerException if this map does not permit <tt>null</tt>
           keys or values, and the specified key or value is
           <tt>null</tt>."
      end

      operation 153115 "remove"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the mapping for this key from this map if it is present
(optional operation).   More formally, if this map contains a mapping
from key <tt>k</tt> to value <tt>v</tt> such that
<code>(key==null ?  k==null : key.equals(k))</code>, that mapping
is removed.  (The map can contain at most one such mapping.)

<p>Returns the value to which the map previously associated the key, or
<tt>null</tt> if the map contained no mapping for this key.  (A
<tt>null</tt> return can also indicate that the map previously
associated <tt>null</tt> with the specified key if the implementation
supports <tt>null</tt> values.)  The map will not contain a mapping for
the specified  key once the call returns.

@param key key whose mapping is to be removed from the map.
@return previous value associated with specified key, or <tt>null</tt>
	       if there was no mapping for key.

@throws ClassCastException if the key is of an inappropriate type for
		  this map (optional).
@throws NullPointerException if the key is <tt>null</tt> and this map
           does not permit <tt>null</tt> keys (optional).
@throws UnsupportedOperationException if the <tt>remove</tt> method is
        not supported by this map."
      end

      operation 153243 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 136603 // Map
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bulk Operations

Copies all of the mappings from the specified map to this map
(optional operation).  The effect of this call is equivalent to that
of calling {@link #put(Object,Object) put(k, v)} on this map once
for each mapping from key <tt>k</tt> to value <tt>v</tt> in the 
specified map.  The behavior of this operation is unspecified if the
specified map is modified while the operation is in progress.

@param t Mappings to be stored in this map.

@throws UnsupportedOperationException if the <tt>putAll</tt> method is
		  not supported by this map.

@throws ClassCastException if the class of a key or value in the
	          specified map prevents it from being stored in this map.

@throws IllegalArgumentException some aspect of a key or value in the
	          specified map prevents it from being stored in this map.
@throws NullPointerException if the specified map is <tt>null</tt>, or if
        this map does not permit <tt>null</tt> keys or values, and the
        specified map contains <tt>null</tt> keys or values."
      end

      operation 153371 "clear"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all mappings from this map (optional operation).

@throws UnsupportedOperationException clear is not supported by this
		  map."
      end

      operation 153499 "keySet"
	public return_type class_ref 136731 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Views

Returns a set view of the keys contained in this map.  The set is
backed by the map, so changes to the map are reflected in the set, and
vice-versa.  If the map is modified while an iteration over the set is
in progress (except through the iterator's own <tt>remove</tt>
operation), the results of the iteration are undefined.  The set
supports element removal, which removes the corresponding mapping from
the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,
<tt>removeAll</tt> <tt>retainAll</tt>, and <tt>clear</tt> operations.
It does not support the add or <tt>addAll</tt> operations.

@return a set view of the keys contained in this map."
      end

      operation 153627 "values"
	public return_type class_ref 135067 // Collection
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a collection view of the values contained in this map.  The
collection is backed by the map, so changes to the map are reflected in
the collection, and vice-versa.  If the map is modified while an
iteration over the collection is in progress (except through the
iterator's own <tt>remove</tt> operation), the results of the
iteration are undefined.  The collection supports element removal,
which removes the corresponding mapping from the map, via the
<tt>Iterator.remove</tt>, <tt>Collection.remove</tt>,
<tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations.
It does not support the add or <tt>addAll</tt> operations.

@return a collection view of the values contained in this map."
      end

      class 136859 "Entry"
	visibility public stereotype "interface"
	nformals 4
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 153883 "getKey"
	  public explicit_return_type "K"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the key corresponding to this entry.

@return the key corresponding to this entry.
@throws IllegalStateException implementations may, but are not
        required to, throw this exception if the entry has been
        removed from the backing map"
	end

	operation 154011 "getValue"
	  public explicit_return_type "V"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the value corresponding to this entry.  If the mapping
has been removed from the backing map (by the iterator's
<tt>remove</tt> operation), the results of this call are undefined.

@return the value corresponding to this entry.
@throws IllegalStateException implementations may, but are not
        required to, throw this exception if the entry has been
        removed from the backing map"
	end

	operation 154139 "setValue"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "value" explicit_type "V"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Replaces the value corresponding to this entry with the specified
value (optional operation).  (Writes through to the map.)  The
behavior of this call is undefined if the mapping has already been
removed from the map (by the iterator's <tt>remove</tt> operation).

@param value new value to be stored in this entry.
@return old value corresponding to the entry.

@throws UnsupportedOperationException if the <tt>put</tt> operation
	      is not supported by the backing map.
@throws ClassCastException if the class of the specified value
	      prevents it from being stored in the backing map.
@throws    IllegalArgumentException if some aspect of this value
	      prevents it from being stored in the backing map.
@throws NullPointerException if the backing map does not permit
	      <tt>null</tt> values, and the specified value is
	      <tt>null</tt>.
@throws IllegalStateException implementations may, but are not
        required to, throw this exception if the entry has been
        removed from the backing map"
	end

	operation 154267 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Compares the specified object with this entry for equality.
Returns <tt>true</tt> if the given object is also a map entry and
the two entries represent the same mapping.  More formally, two
entries <tt>e1</tt> and <tt>e2</tt> represent the same mapping
if<pre>
    (e1.getKey()==null ?
     e2.getKey()==null : e1.getKey().equals(e2.getKey()))  &&
    (e1.getValue()==null ?
     e2.getValue()==null : e1.getValue().equals(e2.getValue()))
</pre>
This ensures that the <tt>equals</tt> method works properly across
different implementations of the <tt>Map.Entry</tt> interface.

@param o object to be compared for equality with this map entry.
@return <tt>true</tt> if the specified object is equal to this map
        entry."
	end

	operation 154395 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the hash code value for this map entry.  The hash code
of a map entry <tt>e</tt> is defined to be: <pre>
    (e.getKey()==null   ? 0 : e.getKey().hashCode()) ^
    (e.getValue()==null ? 0 : e.getValue().hashCode())
</pre>
This ensures that <tt>e1.equals(e2)</tt> implies that
<tt>e1.hashCode()==e2.hashCode()</tt> for any two Entries
<tt>e1</tt> and <tt>e2</tt>, as required by the general
contract of <tt>Object.hashCode</tt>.

@return the hash code value for this map entry.
@see Object#hashCode()
@see Object#equals(Object)
@see #equals(Object)"
	end
      end

      operation 153755 "entrySet"
	public return_type class_ref 136731 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K, V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a set view of the mappings contained in this map.  Each element
in the returned set is a {@link Map.Entry}.  The set is backed by the
map, so changes to the map are reflected in the set, and vice-versa.
If the map is modified while an iteration over the set is in progress
(except through the iterator's own <tt>remove</tt> operation, or through
the <tt>setValue</tt> operation on a map entry returned by the iterator)
the results of the iteration are undefined.  The set supports element
removal, which removes the corresponding mapping from the map, via the
<tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>,
<tt>retainAll</tt> and <tt>clear</tt> operations.  It does not support
the <tt>add</tt> or <tt>addAll</tt> operations.

@return a set view of the mappings contained in this map."
      end

      operation 154523 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison and hashing

Compares the specified object with this map for equality.  Returns
<tt>true</tt> if the given object is also a map and the two Maps
represent the same mappings.  More formally, two maps <tt>t1</tt> and
<tt>t2</tt> represent the same mappings if
<tt>t1.entrySet().equals(t2.entrySet())</tt>.  This ensures that the
<tt>equals</tt> method works properly across different implementations
of the <tt>Map</tt> interface.

@param o object to be compared for equality with this map.
@return <tt>true</tt> if the specified object is equal to this map."
      end

      operation 154651 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this map.  The hash code of a map
is defined to be the sum of the hashCodes of each entry in the map's
entrySet view.  This ensures that <tt>t1.equals(t2)</tt> implies
that <tt>t1.hashCode()==t2.hashCode()</tt> for any two maps
<tt>t1</tt> and <tt>t2</tt>, as required by the general
contract of Object.hashCode.

@return the hash code value for this map.
@see Map.Entry#hashCode()
@see Object#hashCode()
@see Object#equals(Object)
@see #equals(Object)"
      end
    end

    class 136731 "Set"
      visibility public stereotype "interface"
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 135067 // Collection
        rank 0 explicit_value "E"
      actual class class_ref 135067 // Collection
        rank 1 explicit_value ""
      actual class class_ref 135067 // Collection
        rank 2 explicit_value ""
      actual class class_ref 135067 // Collection
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A collection that contains no duplicate elements.  More formally, sets
contain no pair of elements <code>e1</code> and <code>e2</code> such that
<code>e1.equals(e2)</code>, and at most one null element.  As implied by
its name, this interface models the mathematical <i>set</i> abstraction.<p>

The <tt>Set</tt> interface places additional stipulations, beyond those
inherited from the <tt>Collection</tt> interface, on the contracts of all
constructors and on the contracts of the <tt>add</tt>, <tt>equals</tt> and
<tt>hashCode</tt> methods.  Declarations for other inherited methods are
also included here for convenience.  (The specifications accompanying these
declarations have been tailored to the <tt>Set</tt> interface, but they do
not contain any additional stipulations.)<p>

The additional stipulation on constructors is, not surprisingly,
that all constructors must create a set that contains no duplicate elements
(as defined above).<p>

Note: Great care must be exercised if mutable objects are used as set
elements.  The behavior of a set is not specified if the value of an object
is changed in a manner that affects equals comparisons while the object is
an element in the set.  A special case of this prohibition is that it is
not permissible for a set to contain itself as an element.

<p>Some set implementations have restrictions on the elements that
they may contain.  For example, some implementations prohibit null elements,
and some have restrictions on the types of their elements.  Attempting to
add an ineligible element throws an unchecked exception, typically
<tt>NullPointerException</tt> or <tt>ClassCastException</tt>.  Attempting
to query the presence of an ineligible element may throw an exception,
or it may simply return false; some implementations will exhibit the former
behavior and some will exhibit the latter.  More generally, attempting an
operation on an ineligible element whose completion would not result in
the insertion of an ineligible element into the set may throw an
exception or it may succeed, at the option of the implementation.
Such exceptions are marked as \"optional\" in the specification for this
interface. 

<p>This interface is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@author  Neal Gafter
@version 1.35, 02/19/04
@see Collection
@see List
@see SortedSet
@see HashSet
@see TreeSet
@see AbstractSet
@see Collections#singleton(java.lang.Object)
@see Collections#EMPTY_SET
@since 1.2"
      classrelation 134939 // <realization>
	relation 134939 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 134939 // <realization>
	  b parent class_ref 135067 // Collection
      end

      operation 160539 "size"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query Operations

Returns the number of elements in this set (its cardinality).  If this
set contains more than <tt>Integer.MAX_VALUE</tt> elements, returns
<tt>Integer.MAX_VALUE</tt>.

@return the number of elements in this set (its cardinality)."
      end

      operation 160667 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this set contains no elements.

@return <tt>true</tt> if this set contains no elements."
      end

      operation 160795 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this set contains the specified element.  More
formally, returns <tt>true</tt> if and only if this set contains an
element <code>e</code> such that <code>(o==null ? e==null :
o.equals(e))</code>.

@param o element whose presence in this set is to be tested.
@return <tt>true</tt> if this set contains the specified element.
@throws ClassCastException if the type of the specified element
	       is incompatible with this set (optional).
@throws NullPointerException if the specified element is null and this
        set does not support null elements (optional)."
      end

      operation 160923 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this set.  The elements are
returned in no particular order (unless this set is an instance of some
class that provides a guarantee).

@return an iterator over the elements in this set."
      end

      operation 161051 "toArray"
	public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this set.
Obeys the general contract of the <tt>Collection.toArray</tt> method.

@return an array containing all of the elements in this set."
      end

      operation 161179 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this set; the 
runtime type of the returned array is that of the specified array. 
Obeys the general contract of the 
<tt>Collection.toArray(Object[])</tt> method.

@param a the array into which the elements of this set are to
		be stored, if it is big enough; otherwise, a new array of the
		same runtime type is allocated for this purpose.
@return an array containing the elements of this set.
@throws    ArrayStoreException the runtime type of a is not a supertype
           of the runtime type of every element in this set.
@throws NullPointerException if the specified array is <tt>null</tt>."
      end

      operation 161307 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modification Operations

Adds the specified element to this set if it is not already present
(optional operation).  More formally, adds the specified element,
<code>o</code>, to this set if this set contains no element
<code>e</code> such that <code>(o==null ? e==null :
o.equals(e))</code>.  If this set already contains the specified
element, the call leaves this set unchanged and returns <tt>false</tt>.
In combination with the restriction on constructors, this ensures that
sets never contain duplicate elements.<p>

The stipulation above does not imply that sets must accept all
elements; sets may refuse to add any particular element, including
<tt>null</tt>, and throwing an exception, as described in the
specification for <tt>Collection.add</tt>.  Individual set
implementations should clearly document any restrictions on the
elements that they may contain.

@param o element to be added to this set.
@return <tt>true</tt> if this set did not already contain the specified
        element.

@throws UnsupportedOperationException if the <tt>add</tt> method is not
	       supported by this set.
@throws ClassCastException if the class of the specified element
	       prevents it from being added to this set.
@throws NullPointerException if the specified element is null and this
        set does not support null elements.
@throws IllegalArgumentException if some aspect of the specified element
        prevents it from being added to this set."
      end

      operation 161435 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified element from this set if it is present (optional
operation).  More formally, removes an element <code>e</code> such that
<code>(o==null ?  e==null : o.equals(e))</code>, if the set contains
such an element.  Returns <tt>true</tt> if the set contained the
specified element (or equivalently, if the set changed as a result of
the call).  (The set will not contain the specified element once the
call returns.)

@param o object to be removed from this set, if present.
@return true if the set contained the specified element.
@throws ClassCastException if the type of the specified element
	       is incompatible with this set (optional).
@throws NullPointerException if the specified element is null and this
        set does not support null elements (optional).
@throws UnsupportedOperationException if the <tt>remove</tt> method is
        not supported by this set."
      end

      operation 161563 "containsAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bulk Operations

Returns <tt>true</tt> if this set contains all of the elements of the
specified collection.  If the specified collection is also a set, this
method returns <tt>true</tt> if it is a <i>subset</i> of this set.

@param  c collection to be checked for containment in this set.
@return <tt>true</tt> if this set contains all of the elements of the
	       specified collection.
@throws ClassCastException if the types of one or more elements
        in the specified collection are incompatible with this
        set (optional).
@throws NullPointerException if the specified collection contains one
        or more null elements and this set does not support null
        elements (optional).
@throws NullPointerException if the specified collection is
        <tt>null</tt>.
@see    #contains(Object)"
      end

      operation 161691 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds all of the elements in the specified collection to this set if
they're not already present (optional operation).  If the specified
collection is also a set, the <tt>addAll</tt> operation effectively
modifies this set so that its value is the <i>union</i> of the two
sets.  The behavior of this operation is unspecified if the specified
collection is modified while the operation is in progress.

@param c collection whose elements are to be added to this set.
@return <tt>true</tt> if this set changed as a result of the call.

@throws UnsupportedOperationException if the <tt>addAll</tt> method is
		  not supported by this set.
@throws ClassCastException if the class of some element of the
		  specified collection prevents it from being added to this
		  set.
@throws NullPointerException if the specified collection contains one
          or more null elements and this set does not support null
          elements, or if the specified collection is <tt>null</tt>.
@throws IllegalArgumentException if some aspect of some element of the
		  specified collection prevents it from being added to this
		  set.
@see #add(Object)"
      end

      operation 161819 "retainAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retains only the elements in this set that are contained in the
specified collection (optional operation).  In other words, removes
from this set all of its elements that are not contained in the
specified collection.  If the specified collection is also a set, this
operation effectively modifies this set so that its value is the
<i>intersection</i> of the two sets.

@param c collection that defines which elements this set will retain.
@return <tt>true</tt> if this collection changed as a result of the
        call.
@throws UnsupportedOperationException if the <tt>retainAll</tt> method
		  is not supported by this Collection.
@throws ClassCastException if the types of one or more elements in this
           set are incompatible with the specified collection
           (optional).
@throws NullPointerException if this set contains a null element and
           the specified collection does not support null elements
           (optional). 
@throws NullPointerException if the specified collection is
          <tt>null</tt>.
@see #remove(Object)"
      end

      operation 161947 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this set all of its elements that are contained in the
specified collection (optional operation).  If the specified
collection is also a set, this operation effectively modifies this
set so that its value is the <i>asymmetric set difference</i> of
the two sets.

@param  c collection that defines which elements will be removed from
          this set.
@return <tt>true</tt> if this set changed as a result of the call.

@throws UnsupportedOperationException if the <tt>removeAll</tt>
		  method is not supported by this Collection.
@throws ClassCastException if the types of one or more elements in this
           set are incompatible with the specified collection
           (optional).
@throws NullPointerException if this set contains a null element and
           the specified collection does not support null elements
           (optional). 
@throws NullPointerException if the specified collection is
          <tt>null</tt>.
@see    #remove(Object)"
      end

      operation 162075 "clear"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this set (optional operation).
This set will be empty after this call returns (unless it throws an
exception).

@throws UnsupportedOperationException if the <tt>clear</tt> method
		  is not supported by this set."
      end

      operation 162203 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison and hashing

Compares the specified object with this set for equality.  Returns
<tt>true</tt> if the specified object is also a set, the two sets
have the same size, and every member of the specified set is
contained in this set (or equivalently, every member of this set is
contained in the specified set).  This definition ensures that the
equals method works properly across different implementations of the
set interface.

@param o Object to be compared for equality with this set.
@return <tt>true</tt> if the specified Object is equal to this set."
      end

      operation 162331 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Returns the hash code value for this set.  The hash code of a set is
defined to be the sum of the hash codes of the elements in the set,
where the hashcode of a <tt>null</tt> element is defined to be zero.
This ensures that <code>s1.equals(s2)</code> implies that
<code>s1.hashCode()==s2.hashCode()</code> for any two sets
<code>s1</code> and <code>s2</code>, as required by the general
contract of the <tt>Object.hashCode</tt> method.

@return the hash code value for this set.
@see Object#hashCode()
@see Object#equals(Object)
@see Set#equals(Object)"
      end
    end

    class 137115 "AbstractQueue"
      abstract visibility public 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 8
      actual class class_ref 134939 // AbstractCollection
        rank 0 explicit_value "E"
      actual class class_ref 134939 // AbstractCollection
        rank 1 explicit_value ""
      actual class class_ref 134939 // AbstractCollection
        rank 2 explicit_value ""
      actual class class_ref 134939 // AbstractCollection
        rank 3 explicit_value ""
      actual class class_ref 137243 // Queue
        rank 0 explicit_value "E"
      actual class class_ref 137243 // Queue
        rank 1 explicit_value ""
      actual class class_ref 137243 // Queue
        rank 2 explicit_value ""
      actual class class_ref 137243 // Queue
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides skeletal implementations of some {@link Queue}
operations. The implementations in this class are appropriate when
the base implementation does <em>not</em> allow <tt>null</tt>
elements.  Methods {@link #add add}, {@link #remove remove}, and
{@link #element element} are based on {@link #offer offer}, {@link
#poll poll}, and {@link #peek peek}, respectively but throw
exceptions instead of indicating failure via <tt>false</tt> or
<tt>null</tt> returns.

<p> A <tt>Queue</tt> implementation that extends this class must
minimally define a method {@link Queue#offer} which does not permit
insertion of <tt>null</tt> elements, along with methods {@link
Queue#peek}, {@link Queue#poll}, {@link Collection#size}, and a
{@link Collection#iterator} supporting {@link
Iterator#remove}. Typically, additional methods will be overridden
as well. If these requirements cannot be met, consider instead
subclassing {@link AbstractCollection}.

<p>This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.
 
@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 134299 // <realization>
	relation 134299 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 134299 // <realization>
	  b parent class_ref 134939 // AbstractCollection
      end

      classrelation 134555 // <realization>
	relation 134555 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 134555 // <realization>
	  b parent class_ref 137243 // Queue
      end

      operation 158747 "AbstractQueue"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for use by subclasses."
      end

      operation 158875 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to this queue. This implementation
returns <tt>true</tt> if <tt>offer</tt> succeeds, else
throws an IllegalStateException. 

@param o the element
@return <tt>true</tt> (as per the general contract of
        <tt>Collection.add</tt>).

@throws NullPointerException if the specified element is <tt>null</tt>
@throws IllegalStateException if element cannot be added"
      end

      operation 159003 "remove"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue.
This implementation returns the result of <tt>poll</tt>
unless the queue is empty.

@return the head of this queue.
@throws NoSuchElementException if this queue is empty."
      end

      operation 159131 "element"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves, but does not remove, the head of this queue.  
This implementation returns the result of <tt>peek</tt>
unless the queue is empty.

@return the head of this queue.
@throws NoSuchElementException if this queue is empty."
      end

      operation 159259 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this collection.
The collection will be empty after this call returns.
<p>This implementation repeatedly invokes {@link #poll poll} until it
returns <tt>null</tt>."
      end

      operation 159387 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds all of the elements in the specified collection to this
queue.  Attempts to addAll of a queue to itself result in
<tt>IllegalArgumentException</tt>. Further, the behavior of
this operation is undefined if the specified collection is
modified while the operation is in progress.

<p>This implementation iterates over the specified collection,
and adds each element returned by the iterator to this
collection, in turn.  A runtime exception encountered while
trying to add an element (including, in particular, a
<tt>null</tt> element) may result in only some of the elements
having been successfully added when the associated exception is
thrown.

@param c collection whose elements are to be added to this collection.
@return <tt>true</tt> if this collection changed as a result of the
        call.
@throws NullPointerException if the specified collection or
any of its elements are null.
@throws IllegalArgumentException if c is this queue.

@see #add(Object)"
      end
    end

    class 137243 "Queue"
      visibility public stereotype "interface"
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 135067 // Collection
        rank 0 explicit_value "E"
      actual class class_ref 135067 // Collection
        rank 1 explicit_value ""
      actual class class_ref 135067 // Collection
        rank 2 explicit_value ""
      actual class class_ref 135067 // Collection
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A collection designed for holding elements prior to processing.
Besides basic {@link java.util.Collection Collection} operations, queues provide
additional insertion, extraction, and inspection operations.

<p>Queues typically, but do not necessarily, order elements in a
FIFO (first-in-first-out) manner.  Among the exceptions are
priority queues, which order elements according to a supplied
comparator, or the elements' natural ordering, and LIFO queues (or
stacks) which order the elements LIFO (last-in-first-out).
Whatever the ordering used, the <em>head</em> of the queue is that
element which would be removed by a call to {@link #remove() } or
{@link #poll()}.  In a FIFO queue, all new elements are inserted at
the <em> tail</em> of the queue. Other kinds of queues may use
different placement rules.  Every <tt>Queue</tt> implementation
must specify its ordering properties.

<p>The {@link #offer offer} method inserts an element if possible,
otherwise returning <tt>false</tt>.  This differs from the {@link
java.util.Collection#add Collection.add} method, which can fail to
add an element only by throwing an unchecked exception.  The
<tt>offer</tt> method is designed for use when failure is a normal,
rather than exceptional occurrence, for example, in fixed-capacity
(or &quot;bounded&quot;) queues.

<p>The {@link #remove()} and {@link #poll()} methods remove and
return the head of the queue.
Exactly which element is removed from the queue is a
function of the queue's ordering policy, which differs from
implementation to implementation. The <tt>remove()</tt> and
<tt>poll()</tt> methods differ only in their behavior when the
queue is empty: the <tt>remove()</tt> method throws an exception,
while the <tt>poll()</tt> method returns <tt>null</tt>.

<p>The {@link #element()} and {@link #peek()} methods return, but do
not remove, the head of the queue.

<p>The <tt>Queue</tt> interface does not define the <i>blocking queue
methods</i>, which are common in concurrent programming.  These methods,
which wait for elements to appear or for space to become available, are
defined in the {@link java.util.concurrent.BlockingQueue} interface, which
extends this interface.

<p><tt>Queue</tt> implementations generally do not allow insertion
of <tt>null</tt> elements, although some implementations, such as
{@link LinkedList}, do not prohibit insertion of <tt>null</tt>.
Even in the implementations that permit it, <tt>null</tt> should
not be inserted into a <tt>Queue</tt>, as <tt>null</tt> is also
used as a special return value by the <tt>poll</tt> method to
indicate that the queue contains no elements.

<p><tt>Queue</tt> implementations generally do not define
element-based versions of methods <tt>equals</tt> and
<tt>hashCode</tt> but instead inherit the identity based versions
from class <tt>Object</tt>, because element-based equality is not
always well-defined for queues with the same elements but different
ordering properties.


<p>This interface is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@see java.util.Collection
@see LinkedList
@see PriorityQueue
@see java.util.concurrent.LinkedBlockingQueue
@see java.util.concurrent.BlockingQueue
@see java.util.concurrent.ArrayBlockingQueue
@see java.util.concurrent.LinkedBlockingQueue
@see java.util.concurrent.PriorityBlockingQueue
@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 134427 // <realization>
	relation 134427 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 134427 // <realization>
	  b parent class_ref 135067 // Collection
      end

      operation 158107 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue, if possible.  When
using queues that may impose insertion restrictions (for
example capacity bounds), method <tt>offer</tt> is generally
preferable to method {@link Collection#add}, which can fail to
insert an element only by throwing an exception.

@param o the element to insert.
@return <tt>true</tt> if it was possible to add the element to
this queue, else <tt>false</tt>"
      end

      operation 158235 "poll"
	public explicit_return_type "E"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, or <tt>null</tt>
if this queue is empty.

@return the head of this queue, or <tt>null</tt> if this
        queue is empty."
      end

      operation 158363 "remove"
	public explicit_return_type "E"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue.  This method
differs from the <tt>poll</tt> method in that it throws an
exception if this queue is empty.

@return the head of this queue.
@throws NoSuchElementException if this queue is empty."
      end

      operation 158491 "peek"
	public explicit_return_type "E"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves, but does not remove, the head of this queue,
returning <tt>null</tt> if this queue is empty.

@return the head of this queue, or <tt>null</tt> if this queue
is empty."
      end

      operation 158619 "element"
	public explicit_return_type "E"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves, but does not remove, the head of this queue.  This method
differs from the <tt>peek</tt> method only in that it throws an
exception if this queue is empty.

@return the head of this queue.
@throws NoSuchElementException if this queue is empty."
      end
    end

    class 137371 "AbstractSequentialList"
      abstract visibility public 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 135451 // AbstractList
        rank 0 explicit_value "E"
      actual class class_ref 135451 // AbstractList
        rank 1 explicit_value ""
      actual class class_ref 135451 // AbstractList
        rank 2 explicit_value ""
      actual class class_ref 135451 // AbstractList
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides a skeletal implementation of the <tt>List</tt>
interface to minimize the effort required to implement this interface
backed by a \"sequential access\" data store (such as a linked list).  For
random access data (such as an array), <tt>AbstractList</tt> should be used
in preference to this class.<p>

This class is the opposite of the <tt>AbstractList</tt> class in the sense
that it implements the \"random access\" methods (<tt>get(int index)</tt>,
<tt>set(int index, Object element)</tt>, <tt>set(int index, Object
element)</tt>, <tt>add(int index, Object element)</tt> and <tt>remove(int
index)</tt>) on top of the list's list iterator, instead of the other way
around.<p>

To implement a list the programmer needs only to extend this class and
provide implementations for the <tt>listIterator</tt> and <tt>size</tt>
methods.  For an unmodifiable list, the programmer need only implement the
list iterator's <tt>hasNext</tt>, <tt>next</tt>, <tt>hasPrevious</tt>,
<tt>previous</tt> and <tt>index</tt> methods.<p>

For a modifiable list the programmer should additionally implement the list
iterator's <tt>set</tt> method.  For a variable-size list the programmer
should additionally implement the list iterator's <tt>remove</tt> and
<tt>add</tt> methods.<p>

The programmer should generally provide a void (no argument) and collection
constructor, as per the recommendation in the <tt>Collection</tt> interface
specification.<p>

This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@author  Neal Gafter
@version 1.33, 02/19/04
@see Collection
@see List
@see AbstractList
@see AbstractCollection
@since 1.2"
      classrelation 134683 // <realization>
	relation 134683 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 134683 // <realization>
	  b parent class_ref 135451 // AbstractList
      end

      operation 159515 "AbstractSequentialList"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sole constructor.  (For invocation by subclass constructors, typically
implicit.)"
      end

      operation 159643 "get"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the element at the specified position in this list. <p>

This implementation first gets a list iterator pointing to the indexed
element (with <tt>listIterator(index)</tt>).  Then, it gets the element
using <tt>ListIterator.next</tt> and returns it.
@param index index of element to return.

@return the element at the specified position in this list.  
@throws IndexOutOfBoundsException if the specified index is out of
        range (<tt>index &lt; 0 || index &gt;= size()</tt>)."
      end

      operation 159771 "set"
	public explicit_return_type "E"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the element at the specified position in this list with the
specified element. <p>

This implementation first gets a list iterator pointing to the
indexed element (with <tt>listIterator(index)</tt>).  Then, it gets
the current element using <tt>ListIterator.next</tt> and replaces it
with <tt>ListIterator.set</tt>.<p>

Note that this implementation will throw an
UnsupportedOperationException if list iterator does not implement
the set operation.

@param index index of element to replace.
@param element element to be stored at the specified position.
@return the element previously at the specified position.
@throws    UnsupportedOperationException set is not supported
		  by this list.
@throws    NullPointerException this list does not permit null
		  elements and one of the elements of <code>c</code> is null.
@throws    ClassCastException class of the specified element
		  prevents it from being added to this list.
@throws    IllegalArgumentException some aspect of the specified
		  element prevents it from being added to this list.
@throws    IndexOutOfBoundsException index out of range
		  <tt>(index &lt; 0 || index &gt;= size()</tt>).
@throws    IllegalArgumentException fromIndex &gt; toIndex."
      end

      operation 159899 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the specified position in this list.
Shifts the element currently at that position (if any) and any
subsequent elements to the right (adds one to their indices).<p>

This implementation first gets a list iterator pointing to the
indexed element (with <tt>listIterator(index)</tt>).  Then, it inserts
the specified element with <tt>ListIterator.add</tt>.<p>

Note that this implementation will throw an
<tt>UnsupportedOperationException</tt> if list iterator does not
implement the <tt>add</tt> operation.

@param index index at which the specified element is to be inserted.
@param element element to be inserted.
@throws UnsupportedOperationException if the <tt>add</tt> operation is
		  not supported by this list.
@throws NullPointerException this list does not permit <tt>null</tt>
		  elements and one of the elements of <code>c</code> is
		  <tt>null</tt>.
@throws    ClassCastException if the class of the specified element
		  prevents it from being added to this list.
@throws    IllegalArgumentException if some aspect of the specified
		  element prevents it from being added to this list.
@throws IndexOutOfBoundsException if the specified index is out of
           range (<tt>index &lt; 0 || index &gt; size()</tt>)."
      end

      operation 160027 "remove"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the element at the specified position in this list.  Shifts any
subsequent elements to the left (subtracts one from their indices).<p>

This implementation first gets a list iterator pointing to the
indexed element (with <tt>listIterator(index)</tt>).  Then, it removes
the element with <tt>ListIterator.remove</tt>.<p>

Note that this implementation will throw an
<tt>UnsupportedOperationException</tt> if list iterator does not
implement the <tt>remove</tt> operation.

@param  index index of the element to be removed from the List.
@return the element that was removed from the list.
@throws UnsupportedOperationException if the <tt>remove</tt> operation
		  is not supported by this list.
@throws IndexOutOfBoundsException if the specified index is out of
		  range (index &lt; 0 || index &gt;= size())."
      end

      operation 160155 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bulk Operations

Inserts all of the elements in the specified collection into this
list at the specified position.  Shifts the element currently at that
position (if any) and any subsequent elements to the right (increases
their indices).  The new elements will appear in the list in the order
that they are returned by the specified collection's iterator.  The
behavior of this operation is unspecified if the specified collection
is modified while the operation is in progress.  (Note that this will
occur if the specified collection is this list, and it's nonempty.)
Optional operation.<p>

This implementation gets an iterator over the specified collection and
a list iterator over this list pointing to the indexed element (with
<tt>listIterator(index)</tt>).  Then, it iterates over the specified
collection, inserting the elements obtained from the iterator into this
list, one at a time, using <tt>ListIterator.add</tt> followed by
<tt>ListIterator.next</tt> (to skip over the added element).<p>

Note that this implementation will throw an
<tt>UnsupportedOperationException</tt> if the list iterator returned by
the <tt>listIterator</tt> method does not implement the <tt>add</tt>
operation.

@return <tt>true</tt> if this list changed as a result of the call.
@param index index at which to insert first element from the specified
		    collection.
@param c elements to be inserted into this list.
@throws UnsupportedOperationException if the <tt>addAll</tt> operation
		  is not supported by this list.
@throws NullPointerException this list does not permit <tt>null</tt>
		  elements and one of the elements of the specified collection
		  is <tt>null</tt>.
@throws    ClassCastException if the class of the specified element
		  prevents it from being added to this list.
@throws    IllegalArgumentException if some aspect of the specified
		  element prevents it from being added to this list.
@throws IndexOutOfBoundsException if the specified index is out of
           range (<tt>index &lt; 0 || index &gt; size()</tt>).
@throws NullPointerException if the specified collection is null."
      end

      operation 160283 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Iterators

Returns an iterator over the elements in this list (in proper
sequence).<p> 

This implementation merely returns a list iterator over the list.

@return an iterator over the elements in this list (in proper sequence)."
      end

      operation 160411 "listIterator"
	abstract public return_type class_ref 135707 // ListIterator
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list iterator over the elements in this list (in proper
sequence).

@param  index index of first element to be returned from the list 
		iterator (by a call to the <code>next</code> method)
@return a list iterator over the elements in this list (in proper
     sequence)."
      end
    end

    class 137499 "AbstractSet"
      abstract visibility public 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 8
      actual class class_ref 134939 // AbstractCollection
        rank 0 explicit_value "E"
      actual class class_ref 134939 // AbstractCollection
        rank 1 explicit_value ""
      actual class class_ref 134939 // AbstractCollection
        rank 2 explicit_value ""
      actual class class_ref 134939 // AbstractCollection
        rank 3 explicit_value ""
      actual class class_ref 136731 // Set
        rank 0 explicit_value "E"
      actual class class_ref 136731 // Set
        rank 1 explicit_value ""
      actual class class_ref 136731 // Set
        rank 2 explicit_value ""
      actual class class_ref 136731 // Set
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides a skeletal implementation of the <tt>Set</tt>
interface to minimize the effort required to implement this
interface. <p>

The process of implementing a set by extending this class is identical
to that of implementing a Collection by extending AbstractCollection,
except that all of the methods and constructors in subclasses of this
class must obey the additional constraints imposed by the <tt>Set</tt>
interface (for instance, the add method must not permit addition of
multiple instances of an object to a set).<p>

Note that this class does not override any of the implementations from
the <tt>AbstractCollection</tt> class.  It merely adds implementations
for <tt>equals</tt> and <tt>hashCode</tt>.<p>

This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@author  Neal Gafter
@version 1.26, 02/19/04
@see Collection
@see AbstractCollection
@see Set
@since 1.2"
      classrelation 134811 // <realization>
	relation 134811 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 134811 // <realization>
	  b parent class_ref 134939 // AbstractCollection
      end

      classrelation 135067 // <realization>
	relation 135067 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 135067 // <realization>
	  b parent class_ref 136731 // Set
      end

      operation 162459 "AbstractSet"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sole constructor.  (For invocation by subclass constructors, typically
implicit.)"
      end

      operation 162587 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison and hashing

Compares the specified object with this set for equality.  Returns
<tt>true</tt> if the given object is also a set, the two sets have
the same size, and every member of the given set is contained in
this set.  This ensures that the <tt>equals</tt> method works
properly across different implementations of the <tt>Set</tt>
interface.<p>

This implementation first checks if the specified object is this
set; if so it returns <tt>true</tt>.  Then, it checks if the
specified object is a set whose size is identical to the size of
this set; if not, it returns false.  If so, it returns
<tt>containsAll((Collection) o)</tt>.

@param o Object to be compared for equality with this set.
@return <tt>true</tt> if the specified object is equal to this set."
      end

      operation 162715 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this set.  The hash code of a set is
defined to be the sum of the hash codes of the elements in the set.
This ensures that <tt>s1.equals(s2)</tt> implies that
<tt>s1.hashCode()==s2.hashCode()</tt> for any two sets <tt>s1</tt>
and <tt>s2</tt>, as required by the general contract of
Object.hashCode.<p>

This implementation enumerates over the set, calling the
<tt>hashCode</tt> method on each element in the collection, and
adding up the results.

@return the hash code value for this set."
      end

      operation 162843 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this set all of its elements that are contained in
the specified collection (optional operation).<p>

This implementation determines which is the smaller of this set
and the specified collection, by invoking the <tt>size</tt>
method on each.  If this set has fewer elements, then the
implementation iterates over this set, checking each element
returned by the iterator in turn to see if it is contained in
the specified collection.  If it is so contained, it is removed
from this set with the iterator's <tt>remove</tt> method.  If
the specified collection has fewer elements, then the
implementation iterates over the specified collection, removing
from this set each element returned by the iterator, using this
set's <tt>remove</tt> method.<p>

Note that this implementation will throw an
<tt>UnsupportedOperationException</tt> if the iterator returned by the
<tt>iterator</tt> method does not implement the <tt>remove</tt> method.

@param c elements to be removed from this set.
@return <tt>true</tt> if this set changed as a result of the call.

@throws    UnsupportedOperationException removeAll is not supported
           by this set.
@throws    NullPointerException if the specified collection is null.
@see #remove(Object)
@see #contains(Object)"
      end
    end

    class 137627 "ArrayList"
      visibility public 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 8
      actual class class_ref 135451 // AbstractList
        rank 0 explicit_value "E"
      actual class class_ref 135451 // AbstractList
        rank 1 explicit_value ""
      actual class class_ref 135451 // AbstractList
        rank 2 explicit_value ""
      actual class class_ref 135451 // AbstractList
        rank 3 explicit_value ""
      actual class class_ref 135579 // List
        rank 0 explicit_value "E"
      actual class class_ref 135579 // List
        rank 1 explicit_value ""
      actual class class_ref 135579 // List
        rank 2 explicit_value ""
      actual class class_ref 135579 // List
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Resizable-array implementation of the <tt>List</tt> interface.  Implements
all optional list operations, and permits all elements, including
<tt>null</tt>.  In addition to implementing the <tt>List</tt> interface,
this class provides methods to manipulate the size of the array that is
used internally to store the list.  (This class is roughly equivalent to
<tt>Vector</tt>, except that it is unsynchronized.)<p>

The <tt>size</tt>, <tt>isEmpty</tt>, <tt>get</tt>, <tt>set</tt>,
<tt>iterator</tt>, and <tt>listIterator</tt> operations run in constant
time.  The <tt>add</tt> operation runs in <i>amortized constant time</i>,
that is, adding n elements requires O(n) time.  All of the other operations
run in linear time (roughly speaking).  The constant factor is low compared
to that for the <tt>LinkedList</tt> implementation.<p>

Each <tt>ArrayList</tt> instance has a <i>capacity</i>.  The capacity is
the size of the array used to store the elements in the list.  It is always
at least as large as the list size.  As elements are added to an ArrayList,
its capacity grows automatically.  The details of the growth policy are not
specified beyond the fact that adding an element has constant amortized
time cost.<p> 

An application can increase the capacity of an <tt>ArrayList</tt> instance
before adding a large number of elements using the <tt>ensureCapacity</tt>
operation.  This may reduce the amount of incremental reallocation.<p>

<strong>Note that this implementation is not synchronized.</strong> If
multiple threads access an <tt>ArrayList</tt> instance concurrently, and at
least one of the threads modifies the list structurally, it <i>must</i> be
synchronized externally.  (A structural modification is any operation that
adds or deletes one or more elements, or explicitly resizes the backing
array; merely setting the value of an element is not a structural
modification.)  This is typically accomplished by synchronizing on some
object that naturally encapsulates the list.  If no such object exists, the
list should be \"wrapped\" using the <tt>Collections.synchronizedList</tt>
method.  This is best done at creation time, to prevent accidental
unsynchronized access to the list:
<pre>
	List list = Collections.synchronizedList(new ArrayList(...));
</pre><p>

The iterators returned by this class's <tt>iterator</tt> and
<tt>listIterator</tt> methods are <i>fail-fast</i>: if list is structurally
modified at any time after the iterator is created, in any way except
through the iterator's own remove or add methods, the iterator will throw a
ConcurrentModificationException.  Thus, in the face of concurrent
modification, the iterator fails quickly and cleanly, rather than risking
arbitrary, non-deterministic behavior at an undetermined time in the
future.<p>

Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw <tt>ConcurrentModificationException</tt> on a best-effort basis. 
Therefore, it would be wrong to write a program that depended on this
exception for its correctness: <i>the fail-fast behavior of iterators
should be used only to detect bugs.</i><p>

This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@author  Neal Gafter
@version 1.50, 09/02/05
@see	    Collection
@see	    List
@see	    LinkedList
@see	    Vector
@see	    Collections#synchronizedList(List)
@since   1.2"
      classrelation 135195 // <realization>
	relation 135195 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 135195 // <realization>
	  b parent class_ref 135451 // AbstractList
      end

      classrelation 135323 // <realization>
	relation 135323 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 135323 // <realization>
	  b parent class_ref 135579 // List
      end

      classrelation 135451 // <realization>
	relation 135451 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 135451 // <realization>
	  b parent class_ref 136347 // RandomAccess
      end

      classrelation 135707 // <realization>
	relation 135707 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 135707 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 131995 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  8683452581122892189L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 132123 "elementData"
	private explicit_type "E"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The array buffer into which the elements of the ArrayList are stored.
The capacity of the ArrayList is the length of this array buffer.
"
      end

      attribute 132251 "size"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The size of the ArrayList (the number of elements it contains).

@serial
"
      end

      operation 162971 "ArrayList"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty list with the specified initial capacity.

@param   initialCapacity   the initial capacity of the list.
@exception IllegalArgumentException if the specified initial capacity
           is negative"
      end

      operation 163099 "ArrayList"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty list with an initial capacity of ten."
      end

      operation 163227 "ArrayList"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a list containing the elements of the specified
collection, in the order they are returned by the collection's
iterator.  The <tt>ArrayList</tt> instance has an initial capacity of
110% the size of the specified collection.

@param c the collection whose elements are to be placed into this list.
@throws NullPointerException if the specified collection is null."
      end

      operation 163355 "trimToSize"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Trims the capacity of this <tt>ArrayList</tt> instance to be the
list's current size.  An application can use this operation to minimize
the storage of an <tt>ArrayList</tt> instance."
      end

      operation 163483 "ensureCapacity"
	public explicit_return_type "void"
	nparams 1
	  param in name "minCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increases the capacity of this <tt>ArrayList</tt> instance, if
necessary, to ensure  that it can hold at least the number of elements
specified by the minimum capacity argument. 

@param   minCapacity   the desired minimum capacity."
      end

      operation 163611 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this list.

@return  the number of elements in this list."
      end

      operation 163739 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this list has no elements.

@return  <tt>true</tt> if this list has no elements;
         <tt>false</tt> otherwise."
      end

      operation 163867 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "elem" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this list contains the specified element.

@param elem element whose presence in this List is to be tested.
@return  <code>true</code> if the specified element is present;
		<code>false</code> otherwise."
      end

      operation 163995 "indexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "elem" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches for the first occurence of the given argument, testing 
for equality using the <tt>equals</tt> method. 

@param   elem   an object.
@return  the index of the first occurrence of the argument in this
         list; returns <tt>-1</tt> if the object is not found.
@see     Object#equals(Object)"
      end

      operation 164123 "lastIndexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "elem" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the last occurrence of the specified object in
this list.

@param   elem   the desired element.
@return  the index of the last occurrence of the specified object in
         this list; returns -1 if the object is not found."
      end

      operation 164251 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow copy of this <tt>ArrayList</tt> instance.  (The
elements themselves are not copied.)

@return  a clone of this <tt>ArrayList</tt> instance."
      end

      operation 164379 "toArray"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this list
in the correct order.

@return an array containing all of the elements in this list
	       in the correct order."
      end

      operation 164507 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this list in the
correct order; the runtime type of the returned array is that of the
specified array.  If the list fits in the specified array, it is
returned therein.  Otherwise, a new array is allocated with the runtime
type of the specified array and the size of this list.<p>

If the list fits in the specified array with room to spare (i.e., the
array has more elements than the list), the element in the array
immediately following the end of the collection is set to
<tt>null</tt>.  This is useful in determining the length of the list
<i>only</i> if the caller knows that the list does not contain any
<tt>null</tt> elements.

@param a the array into which the elements of the list are to
		be stored, if it is big enough; otherwise, a new array of the
		same runtime type is allocated for this purpose.
@return an array containing the elements of the list.
@throws ArrayStoreException if the runtime type of a is not a supertype
        of the runtime type of every element in this list."
      end

      operation 164635 "get"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Positional Access Operations

Returns the element at the specified position in this list.

@param  index index of element to return.
@return the element at the specified position in this list.
@throws    IndexOutOfBoundsException if index is out of range <tt>(index
		  &lt; 0 || index &gt;= size())</tt>."
      end

      operation 164763 "set"
	public explicit_return_type "E"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the element at the specified position in this list with
the specified element.

@param index index of element to replace.
@param element element to be stored at the specified position.
@return the element previously at the specified position.
@throws    IndexOutOfBoundsException if index out of range
		  <tt>(index &lt; 0 || index &gt;= size())</tt>."
      end

      operation 164891 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified element to the end of this list.

@param o element to be appended to this list.
@return <tt>true</tt> (as per the general contract of Collection.add)."
      end

      operation 165019 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the specified position in this
list. Shifts the element currently at that position (if any) and
any subsequent elements to the right (adds one to their indices).

@param index index at which the specified element is to be inserted.
@param element element to be inserted.
@throws    IndexOutOfBoundsException if index is out of range
		  <tt>(index &lt; 0 || index &gt; size())</tt>."
      end

      operation 165147 "remove"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the element at the specified position in this list.
Shifts any subsequent elements to the left (subtracts one from their
indices).

@param index the index of the element to removed.
@return the element that was removed from the list.
@throws    IndexOutOfBoundsException if index out of range <tt>(index
		  &lt; 0 || index &gt;= size())</tt>."
      end

      operation 165275 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this
list, if it is present (optional operation).  More formally,
removes an element <tt>e</tt> such that <tt>(o==null ? e==null :
o.equals(e))</tt>, if the list contains one or more such
elements.  Returns <tt>true</tt> if the list contained the
specified element (or equivalently, if the list changed as a
result of the call).<p>

@param o element to be removed from this list, if present.
@return <tt>true</tt> if the list contained the specified element."
      end

      operation 165403 "fastRemove"
	private explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private remove method that skips bounds checking and does not
return the value removed."
      end

      operation 165531 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this list.  The list will
be empty after this call returns."
      end

      operation 165659 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all of the elements in the specified Collection to the end of
this list, in the order that they are returned by the
specified Collection's Iterator.  The behavior of this operation is
undefined if the specified Collection is modified while the operation
is in progress.  (This implies that the behavior of this call is
undefined if the specified Collection is this list, and this
list is nonempty.)

@param c the elements to be inserted into this list.
@return <tt>true</tt> if this list changed as a result of the call.
@throws    NullPointerException if the specified collection is null."
      end

      operation 165787 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts all of the elements in the specified Collection into this
list, starting at the specified position.  Shifts the element
currently at that position (if any) and any subsequent elements to
the right (increases their indices).  The new elements will appear
in the list in the order that they are returned by the
specified Collection's iterator.

@param index index at which to insert first element
		    from the specified collection.
@param c elements to be inserted into this list.
@return <tt>true</tt> if this list changed as a result of the call.
@throws    IndexOutOfBoundsException if index out of range <tt>(index
		  &lt; 0 || index &gt; size())</tt>.
@throws    NullPointerException if the specified Collection is null."
      end

      operation 165915 "removeRange"
	protected explicit_return_type "void"
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this List all of the elements whose index is between
fromIndex, inclusive and toIndex, exclusive.  Shifts any succeeding
elements to the left (reduces their index).
This call shortens the list by <tt>(toIndex - fromIndex)</tt> elements.
(If <tt>toIndex==fromIndex</tt>, this operation has no effect.)

@param fromIndex index of first element to be removed.
@param toIndex index after last element to be removed."
      end

      operation 166043 "RangeCheck"
	private explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if the given index is in range.  If not, throw an appropriate
runtime exception.  This method does *not* check if the index is
negative: It is always used immediately prior to an array access,
which throws an ArrayIndexOutOfBoundsException if index is negative."
      end

      operation 166171 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectOutputStream"
	nexceptions 1
	  explicit_exception "java.io.IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state of the <tt>ArrayList</tt> instance to a stream (that
is, serialize it).

@serialData The length of the array backing the <tt>ArrayList</tt>
            instance is emitted (int), followed by all of its elements
            (each an <tt>Object</tt>) in the proper order."
      end

      operation 166299 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectInputStream"
	nexceptions 2
	  explicit_exception "java.io.IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the <tt>ArrayList</tt> instance from a stream (that is,
deserialize it)."
      end
    end

    class 138011 "Arrays"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class contains various methods for manipulating arrays (such as
sorting and searching).  This class also contains a static factory 
that allows arrays to be viewed as lists.

<p>The methods in this class all throw a <tt>NullPointerException</tt> if
the specified array reference is null, except where noted.

<p>The documentation for the methods contained in this class includes
briefs description of the <i>implementations</i>.  Such descriptions should
be regarded as <i>implementation notes</i>, rather than parts of the
<i>specification</i>.  Implementors should feel free to substitute other
algorithms, so long as the specification itself is adhered to.  (For
example, the algorithm used by <tt>sort(Object[])</tt> does not have to be
a mergesort, but it does have to be <i>stable</i>.)

<p>This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@author  Neal Gafter
@version 1.59, 04/01/04
@see     Comparable
@see     Comparator
@since   1.2"
      operation 166427 "Arrays"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Suppresses default constructor, ensuring non-instantiability."
      end

      operation 166555 "sort"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "a" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sorting

Sorts the specified array of longs into ascending numerical order.
The sorting algorithm is a tuned quicksort, adapted from Jon
L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\",
Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
1993).  This algorithm offers n*log(n) performance on many data sets
that cause other quicksorts to degrade to quadratic performance.

@param a the array to be sorted."
      end

      operation 166683 "sort"
	class_operation public explicit_return_type "void"
	nparams 3
	  param in name "a" explicit_type "long"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified range of the specified array of longs into
ascending numerical order.  The range to be sorted extends from index
<tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
(If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)

<p>The sorting algorithm is a tuned quicksort, adapted from Jon
L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\",
Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
1993).  This algorithm offers n*log(n) performance on many data sets
that cause other quicksorts to degrade to quadratic performance.

@param a the array to be sorted.
@param fromIndex the index of the first element (inclusive) to be
       sorted.
@param toIndex the index of the last element (exclusive) to be sorted.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
<tt>toIndex &gt; a.length</tt>"
      end

      operation 166811 "sort"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "a" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified array of ints into ascending numerical order.
The sorting algorithm is a tuned quicksort, adapted from Jon
L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\",
Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
1993).  This algorithm offers n*log(n) performance on many data sets
that cause other quicksorts to degrade to quadratic performance.

@param a the array to be sorted."
      end

      operation 166939 "sort"
	class_operation public explicit_return_type "void"
	nparams 3
	  param in name "a" explicit_type "int"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified range of the specified array of ints into
ascending numerical order.  The range to be sorted extends from index
<tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
(If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)<p>

The sorting algorithm is a tuned quicksort, adapted from Jon
L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\",
Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
1993).  This algorithm offers n*log(n) performance on many data sets
that cause other quicksorts to degrade to quadratic performance.

@param a the array to be sorted.
@param fromIndex the index of the first element (inclusive) to be
       sorted.
@param toIndex the index of the last element (exclusive) to be sorted.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>"
      end

      operation 167067 "sort"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "a" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified array of shorts into ascending numerical order.
The sorting algorithm is a tuned quicksort, adapted from Jon
L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\",
Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
1993).  This algorithm offers n*log(n) performance on many data sets
that cause other quicksorts to degrade to quadratic performance.

@param a the array to be sorted."
      end

      operation 167195 "sort"
	class_operation public explicit_return_type "void"
	nparams 3
	  param in name "a" explicit_type "short"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified range of the specified array of shorts into
ascending numerical order.  The range to be sorted extends from index
<tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
(If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)<p>

The sorting algorithm is a tuned quicksort, adapted from Jon
L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\",
Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
1993).  This algorithm offers n*log(n) performance on many data sets
that cause other quicksorts to degrade to quadratic performance.

@param a the array to be sorted.
@param fromIndex the index of the first element (inclusive) to be
       sorted.
@param toIndex the index of the last element (exclusive) to be sorted.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>"
      end

      operation 167323 "sort"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "a" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified array of chars into ascending numerical order.
The sorting algorithm is a tuned quicksort, adapted from Jon
L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\",
Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
1993).  This algorithm offers n*log(n) performance on many data sets
that cause other quicksorts to degrade to quadratic performance.

@param a the array to be sorted."
      end

      operation 167451 "sort"
	class_operation public explicit_return_type "void"
	nparams 3
	  param in name "a" explicit_type "char"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified range of the specified array of chars into
ascending numerical order.  The range to be sorted extends from index
<tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
(If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)<p>

The sorting algorithm is a tuned quicksort, adapted from Jon
L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\",
Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
1993).  This algorithm offers n*log(n) performance on many data sets
that cause other quicksorts to degrade to quadratic performance.

@param a the array to be sorted.
@param fromIndex the index of the first element (inclusive) to be
       sorted.
@param toIndex the index of the last element (exclusive) to be sorted.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>"
      end

      operation 167579 "sort"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "a" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified array of bytes into ascending numerical order.
The sorting algorithm is a tuned quicksort, adapted from Jon
L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\",
Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
1993).  This algorithm offers n*log(n) performance on many data sets
that cause other quicksorts to degrade to quadratic performance.

@param a the array to be sorted."
      end

      operation 167707 "sort"
	class_operation public explicit_return_type "void"
	nparams 3
	  param in name "a" explicit_type "byte"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified range of the specified array of bytes into
ascending numerical order.  The range to be sorted extends from index
<tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
(If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)<p>

The sorting algorithm is a tuned quicksort, adapted from Jon
L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\",
Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
1993).  This algorithm offers n*log(n) performance on many data sets
that cause other quicksorts to degrade to quadratic performance.

@param a the array to be sorted.
@param fromIndex the index of the first element (inclusive) to be
       sorted.
@param toIndex the index of the last element (exclusive) to be sorted.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>"
      end

      operation 167835 "sort"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified array of doubles into ascending numerical order.
<p>
The <code>&lt;</code> relation does not provide a total order on
all floating-point values; although they are distinct numbers
<code>-0.0 == 0.0</code> is <code>true</code> and a NaN value
compares neither less than, greater than, nor equal to any
floating-point value, even itself.  To allow the sort to
proceed, instead of using the <code>&lt;</code> relation to
determine ascending numerical order, this method uses the total
order imposed by {@link Double#compareTo}.  This ordering
differs from the <code>&lt;</code> relation in that
<code>-0.0</code> is treated as less than <code>0.0</code> and
NaN is considered greater than any other floating-point value.
For the purposes of sorting, all NaN values are considered
equivalent and equal.
<p>
The sorting algorithm is a tuned quicksort, adapted from Jon
L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\",
Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
1993).  This algorithm offers n*log(n) performance on many data sets
that cause other quicksorts to degrade to quadratic performance.

@param a the array to be sorted."
      end

      operation 167963 "sort"
	class_operation public explicit_return_type "void"
	nparams 3
	  param in name "a" explicit_type "double"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified range of the specified array of doubles into
ascending numerical order.  The range to be sorted extends from index
<tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
(If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)
<p>
The <code>&lt;</code> relation does not provide a total order on
all floating-point values; although they are distinct numbers
<code>-0.0 == 0.0</code> is <code>true</code> and a NaN value
compares neither less than, greater than, nor equal to any
floating-point value, even itself.  To allow the sort to
proceed, instead of using the <code>&lt;</code> relation to
determine ascending numerical order, this method uses the total
order imposed by {@link Double#compareTo}.  This ordering
differs from the <code>&lt;</code> relation in that
<code>-0.0</code> is treated as less than <code>0.0</code> and
NaN is considered greater than any other floating-point value.
For the purposes of sorting, all NaN values are considered
equivalent and equal.
<p>
The sorting algorithm is a tuned quicksort, adapted from Jon
L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\",
Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
1993).  This algorithm offers n*log(n) performance on many data sets
that cause other quicksorts to degrade to quadratic performance.

@param a the array to be sorted.
@param fromIndex the index of the first element (inclusive) to be
       sorted.
@param toIndex the index of the last element (exclusive) to be sorted.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>"
      end

      operation 168091 "sort"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "a" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified array of floats into ascending numerical order.
<p>
The <code>&lt;</code> relation does not provide a total order on
all floating-point values; although they are distinct numbers
<code>-0.0f == 0.0f</code> is <code>true</code> and a NaN value
compares neither less than, greater than, nor equal to any
floating-point value, even itself.  To allow the sort to
proceed, instead of using the <code>&lt;</code> relation to
determine ascending numerical order, this method uses the total
order imposed by {@link Float#compareTo}.  This ordering
differs from the <code>&lt;</code> relation in that
<code>-0.0f</code> is treated as less than <code>0.0f</code> and
NaN is considered greater than any other floating-point value.
For the purposes of sorting, all NaN values are considered
equivalent and equal.
<p>
The sorting algorithm is a tuned quicksort, adapted from Jon
L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\",
Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
1993).  This algorithm offers n*log(n) performance on many data sets
that cause other quicksorts to degrade to quadratic performance.

@param a the array to be sorted."
      end

      operation 168219 "sort"
	class_operation public explicit_return_type "void"
	nparams 3
	  param in name "a" explicit_type "float"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified range of the specified array of floats into
ascending numerical order.  The range to be sorted extends from index
<tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
(If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)
<p>
The <code>&lt;</code> relation does not provide a total order on
all floating-point values; although they are distinct numbers
<code>-0.0f == 0.0f</code> is <code>true</code> and a NaN value
compares neither less than, greater than, nor equal to any
floating-point value, even itself.  To allow the sort to
proceed, instead of using the <code>&lt;</code> relation to
determine ascending numerical order, this method uses the total
order imposed by {@link Float#compareTo}.  This ordering
differs from the <code>&lt;</code> relation in that
<code>-0.0f</code> is treated as less than <code>0.0f</code> and
NaN is considered greater than any other floating-point value.
For the purposes of sorting, all NaN values are considered
equivalent and equal.
<p>
The sorting algorithm is a tuned quicksort, adapted from Jon
L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\",
Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
1993).  This algorithm offers n*log(n) performance on many data sets
that cause other quicksorts to degrade to quadratic performance.

@param a the array to be sorted.
@param fromIndex the index of the first element (inclusive) to be
       sorted.
@param toIndex the index of the last element (exclusive) to be sorted.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>"
      end

      operation 168347 "sort2"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "a" explicit_type "double"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 168475 "sort2"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "a" explicit_type "float"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 168603 "sort1"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "long"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The code for each of the seven primitive types is largely identical.
C'est la vie.


Sorts the specified sub-array of longs into ascending order."
      end

      operation 168731 "swap"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "long"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps x[a] with x[b]."
      end

      operation 168859 "vecswap"
	class_operation private explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "long"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)]."
      end

      operation 168987 "med3"
	class_operation private explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "long"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the median of the three indexed longs."
      end

      operation 169115 "sort1"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified sub-array of integers into ascending order."
      end

      operation 169243 "swap"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps x[a] with x[b]."
      end

      operation 169371 "vecswap"
	class_operation private explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)]."
      end

      operation 169499 "med3"
	class_operation private explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the median of the three indexed integers."
      end

      operation 169627 "sort1"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "short"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified sub-array of shorts into ascending order."
      end

      operation 169755 "swap"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "short"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps x[a] with x[b]."
      end

      operation 169883 "vecswap"
	class_operation private explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "short"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)]."
      end

      operation 170011 "med3"
	class_operation private explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "short"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the median of the three indexed shorts."
      end

      operation 170139 "sort1"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified sub-array of chars into ascending order."
      end

      operation 170267 "swap"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "char"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps x[a] with x[b]."
      end

      operation 170395 "vecswap"
	class_operation private explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "char"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)]."
      end

      operation 170523 "med3"
	class_operation private explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "char"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the median of the three indexed chars."
      end

      operation 170651 "sort1"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified sub-array of bytes into ascending order."
      end

      operation 170779 "swap"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "byte"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps x[a] with x[b]."
      end

      operation 170907 "vecswap"
	class_operation private explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "byte"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)]."
      end

      operation 171035 "med3"
	class_operation private explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "byte"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the median of the three indexed bytes."
      end

      operation 171163 "sort1"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "double"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified sub-array of doubles into ascending order."
      end

      operation 171291 "swap"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "double"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps x[a] with x[b]."
      end

      operation 171419 "vecswap"
	class_operation private explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)]."
      end

      operation 171547 "med3"
	class_operation private explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the median of the three indexed doubles."
      end

      operation 171675 "sort1"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "float"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified sub-array of floats into ascending order."
      end

      operation 171803 "swap"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "float"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps x[a] with x[b]."
      end

      operation 171931 "vecswap"
	class_operation private explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "float"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)]."
      end

      operation 172059 "med3"
	class_operation private explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "float"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the median of the three indexed floats."
      end

      operation 172187 "sort"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "a" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified array of objects into ascending order, according to
the <i>natural ordering</i> of its elements.  All elements in the array
must implement the <tt>Comparable</tt> interface.  Furthermore, all
elements in the array must be <i>mutually comparable</i> (that is,
<tt>e1.compareTo(e2)</tt> must not throw a <tt>ClassCastException</tt>
for any elements <tt>e1</tt> and <tt>e2</tt> in the array).<p>

This sort is guaranteed to be <i>stable</i>:  equal elements will
not be reordered as a result of the sort.<p>

The sorting algorithm is a modified mergesort (in which the merge is
omitted if the highest element in the low sublist is less than the
lowest element in the high sublist).  This algorithm offers guaranteed
n*log(n) performance.

@param a the array to be sorted.
@throws  ClassCastException if the array contains elements that are not
		<i>mutually comparable</i> (for example, strings and integers).
@see Comparable"
      end

      operation 172315 "sort"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "a" explicit_type "Object"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified range of the specified array of objects into
ascending order, according to the <i>natural ordering</i> of its
elements.  The range to be sorted extends from index
<tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.
(If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)  All
elements in this range must implement the <tt>Comparable</tt>
interface.  Furthermore, all elements in this range must be <i>mutually
comparable</i> (that is, <tt>e1.compareTo(e2)</tt> must not throw a
<tt>ClassCastException</tt> for any elements <tt>e1</tt> and
<tt>e2</tt> in the array).<p>

This sort is guaranteed to be <i>stable</i>:  equal elements will
not be reordered as a result of the sort.<p>

The sorting algorithm is a modified mergesort (in which the merge is
omitted if the highest element in the low sublist is less than the
lowest element in the high sublist).  This algorithm offers guaranteed
n*log(n) performance.

@param a the array to be sorted.
@param fromIndex the index of the first element (inclusive) to be
       sorted.
@param toIndex the index of the last element (exclusive) to be sorted.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>
@throws    ClassCastException if the array contains elements that are
		  not <i>mutually comparable</i> (for example, strings and
		  integers).
@see Comparable"
      end

      attribute 132379 "INSERTIONSORT_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tuning parameter: list size at or below which insertion sort will be
used in preference to mergesort or quicksort.
"
      end

      operation 172443 "cloneSubarray"
	class_operation private explicit_return_type "T"
	nparams 3
	  param inout name "a" explicit_type "T"
	  param in name "from" explicit_type "int"
	  param in name "to" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clones an array within the specified bounds.
This method assumes that a is an array."
      end

      operation 172571 "mergeSort"
	class_operation private explicit_return_type "void"
	nparams 5
	  param inout name "src" explicit_type "Object"
	  param inout name "dest" explicit_type "Object"
	  param in name "low" explicit_type "int"
	  param in name "high" explicit_type "int"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Src is the source array that starts at index 0
Dest is the (possibly larger) array destination with a possible offset
low is the index in dest to start sorting
high is the end index in dest to end sorting
off is the offset to generate corresponding low, high in src"
      end

      operation 172699 "swap"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "x" explicit_type "Object"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps x[a] with x[b]."
      end

      operation 172827 "sort"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "a" explicit_type "T"
	  param inout name "c" type class_ref 138139 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}[] ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified array of objects according to the order induced by
the specified comparator.  All elements in the array must be
<i>mutually comparable</i> by the specified comparator (that is,
<tt>c.compare(e1, e2)</tt> must not throw a <tt>ClassCastException</tt>
for any elements <tt>e1</tt> and <tt>e2</tt> in the array).<p>

This sort is guaranteed to be <i>stable</i>:  equal elements will
not be reordered as a result of the sort.<p>

The sorting algorithm is a modified mergesort (in which the merge is
omitted if the highest element in the low sublist is less than the
lowest element in the high sublist).  This algorithm offers guaranteed
n*log(n) performance. 

@param a the array to be sorted.
@param c the comparator to determine the order of the array.  A
       <tt>null</tt> value indicates that the elements' <i>natural
       ordering</i> should be used.
@throws  ClassCastException if the array contains elements that are
		not <i>mutually comparable</i> using the specified comparator.
@see Comparator"
      end

      operation 172955 "sort"
	class_operation public explicit_return_type "void"
	nparams 4
	  param inout name "a" explicit_type "T"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	  param inout name "c" type class_ref 138139 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<? super T> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified range of the specified array of objects according
to the order induced by the specified comparator.  The range to be
sorted extends from index <tt>fromIndex</tt>, inclusive, to index
<tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the
range to be sorted is empty.)  All elements in the range must be
<i>mutually comparable</i> by the specified comparator (that is,
<tt>c.compare(e1, e2)</tt> must not throw a <tt>ClassCastException</tt>
for any elements <tt>e1</tt> and <tt>e2</tt> in the range).<p>

This sort is guaranteed to be <i>stable</i>:  equal elements will
not be reordered as a result of the sort.<p>

The sorting algorithm is a modified mergesort (in which the merge is
omitted if the highest element in the low sublist is less than the
lowest element in the high sublist).  This algorithm offers guaranteed
n*log(n) performance. 

@param a the array to be sorted.
@param fromIndex the index of the first element (inclusive) to be
       sorted.
@param toIndex the index of the last element (exclusive) to be sorted.
@param c the comparator to determine the order of the array.  A
       <tt>null</tt> value indicates that the elements' <i>natural
       ordering</i> should be used.
@throws ClassCastException if the array contains elements that are not
	       <i>mutually comparable</i> using the specified comparator.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>
@see Comparator"
      end

      operation 173083 "mergeSort"
	class_operation private explicit_return_type "void"
	nparams 6
	  param inout name "src" explicit_type "Object"
	  param inout name "dest" explicit_type "Object"
	  param in name "low" explicit_type "int"
	  param in name "high" explicit_type "int"
	  param in name "off" explicit_type "int"
	  param inout name "c" type class_ref 138139 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Src is the source array that starts at index 0
Dest is the (possibly larger) array destination with a possible offset
low is the index in dest to start sorting
high is the end index in dest to end sorting
off is the offset into src corresponding to low in dest"
      end

      operation 173211 "rangeCheck"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "arrayLen" explicit_type "int"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check that fromIndex and toIndex are in range, and throw an
appropriate exception if they aren't."
      end

      operation 173339 "binarySearch"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "long"
	  param in name "key" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Searching

Searches the specified array of longs for the specified value using the
binary search algorithm.  The array <strong>must</strong> be sorted (as
by the <tt>sort</tt> method, above) prior to making this call.  If it
is not sorted, the results are undefined.  If the array contains
multiple elements with the specified value, there is no guarantee which
one will be found.

@param a the array to be searched.
@param key the value to be searched for.
@return index of the search key, if it is contained in the list;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the list: the index of the first
	       element greater than the key, or <tt>list.size()</tt>, if all
	       elements in the list are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
@see #sort(long[])"
      end

      operation 173467 "binarySearch"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "key" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches the specified array of ints for the specified value using the
binary search algorithm.  The array <strong>must</strong> be sorted (as
by the <tt>sort</tt> method, above) prior to making this call.  If it
is not sorted, the results are undefined.  If the array contains
multiple elements with the specified value, there is no guarantee which
one will be found.

@param a the array to be searched.
@param key the value to be searched for.
@return index of the search key, if it is contained in the list;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the list: the index of the first
	       element greater than the key, or <tt>list.size()</tt>, if all
	       elements in the list are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
@see #sort(int[])"
      end

      operation 173595 "binarySearch"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "short"
	  param in name "key" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches the specified array of shorts for the specified value using
the binary search algorithm.  The array <strong>must</strong> be sorted
(as by the <tt>sort</tt> method, above) prior to making this call.  If
it is not sorted, the results are undefined.  If the array contains
multiple elements with the specified value, there is no guarantee which
one will be found.

@param a the array to be searched.
@param key the value to be searched for.
@return index of the search key, if it is contained in the list;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the list: the index of the first
	       element greater than the key, or <tt>list.size()</tt>, if all
	       elements in the list are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
@see #sort(short[])"
      end

      operation 173723 "binarySearch"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "char"
	  param in name "key" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches the specified array of chars for the specified value using the
binary search algorithm.  The array <strong>must</strong> be sorted (as
by the <tt>sort</tt> method, above) prior to making this call.  If it
is not sorted, the results are undefined.  If the array contains
multiple elements with the specified value, there is no guarantee which
one will be found.

@param a the array to be searched.
@param key the value to be searched for.
@return index of the search key, if it is contained in the list;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the list: the index of the first
	       element greater than the key, or <tt>list.size()</tt>, if all
	       elements in the list are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
@see #sort(char[])"
      end

      operation 173851 "binarySearch"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "byte"
	  param in name "key" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches the specified array of bytes for the specified value using the
binary search algorithm.  The array <strong>must</strong> be sorted (as
by the <tt>sort</tt> method, above) prior to making this call.  If it
is not sorted, the results are undefined.  If the array contains
multiple elements with the specified value, there is no guarantee which
one will be found.

@param a the array to be searched.
@param key the value to be searched for.
@return index of the search key, if it is contained in the list;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the list: the index of the first
	       element greater than the key, or <tt>list.size()</tt>, if all
	       elements in the list are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
@see #sort(byte[])"
      end

      operation 173979 "binarySearch"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "double"
	  param in name "key" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches the specified array of doubles for the specified value using
the binary search algorithm.  The array <strong>must</strong> be sorted
(as by the <tt>sort</tt> method, above) prior to making this call.  If
it is not sorted, the results are undefined.  If the array contains
multiple elements with the specified value, there is no guarantee which
one will be found.  This method considers all NaN values to be 
equivalent and equal.

@param a the array to be searched.
@param key the value to be searched for.
@return index of the search key, if it is contained in the list;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the list: the index of the first
	       element greater than the key, or <tt>list.size()</tt>, if all
	       elements in the list are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
@see #sort(double[])"
      end

      operation 174107 "binarySearch"
	class_operation private explicit_return_type "int"
	nparams 4
	  param in name "a" explicit_type "double"
	  param in name "key" explicit_type "double"
	  param in name "low" explicit_type "int"
	  param in name "high" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 174235 "binarySearch"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "float"
	  param in name "key" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches the specified array of floats for the specified value using
the binary search algorithm.  The array <strong>must</strong> be sorted
(as by the <tt>sort</tt> method, above) prior to making this call.  If
it is not sorted, the results are undefined.  If the array contains
multiple elements with the specified value, there is no guarantee which
one will be found.  This method considers all NaN values to be 
equivalent and equal.

@param a the array to be searched.
@param key the value to be searched for.
@return index of the search key, if it is contained in the list;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the list: the index of the first
	       element greater than the key, or <tt>list.size()</tt>, if all
	       elements in the list are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
@see #sort(float[])"
      end

      operation 174363 "binarySearch"
	class_operation private explicit_return_type "int"
	nparams 4
	  param in name "a" explicit_type "float"
	  param in name "key" explicit_type "float"
	  param in name "low" explicit_type "int"
	  param in name "high" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 174491 "binarySearch"
	class_operation public explicit_return_type "int"
	nparams 2
	  param inout name "a" explicit_type "Object"
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches the specified array for the specified object using the binary
search algorithm.  The array must be sorted into ascending order
according to the <i>natural ordering</i> of its elements (as by
<tt>Sort(Object[]</tt>), above) prior to making this call.  If it is
not sorted, the results are undefined.
(If the array contains elements that are not  mutually comparable (for
example,strings and integers), it <i>cannot</i> be sorted according 
to the natural order of its elements, hence results are undefined.)
 If the array contains multiple
elements equal to the specified object, there is no guarantee which
one will be found.

@param a the array to be searched.
@param key the value to be searched for.
@return index of the search key, if it is contained in the list;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the list: the index of the first
	       element greater than the key, or <tt>list.size()</tt>, if all
	       elements in the list are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
@throws ClassCastException if the search key in not comparable to the
        elements of the array.
@see Comparable
@see #sort(Object[])"
      end

      operation 174619 "binarySearch"
	class_operation public explicit_return_type "int"
	nparams 3
	  param inout name "a" explicit_type "T"
	  param inout name "key" explicit_type "T"
	  param inout name "c" type class_ref 138139 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}<? super T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches the specified array for the specified object using the binary
search algorithm.  The array must be sorted into ascending order
according to the specified comparator (as by the <tt>Sort(Object[],
Comparator)</tt> method, above), prior to making this call.  If it is
not sorted, the results are undefined. 
If the array contains multiple
elements equal to the specified object, there is no guarantee which one
will be found.

@param a the array to be searched.
@param key the value to be searched for.
@param c the comparator by which the array is ordered.  A
       <tt>null</tt> value indicates that the elements' <i>natural
       ordering</i> should be used.
@return index of the search key, if it is contained in the list;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the list: the index of the first
	       element greater than the key, or <tt>list.size()</tt>, if all
	       elements in the list are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
@throws ClassCastException if the array contains elements that are not
	       <i>mutually comparable</i> using the specified comparator,
	       or the search key in not mutually comparable with the
	       elements of the array using this comparator.
@see Comparable
@see #sort(Object[], Comparator)"
      end

      operation 174747 "equals"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "a" explicit_type "long"
	  param in name "a2" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Equality Testing

Returns <tt>true</tt> if the two specified arrays of longs are
<i>equal</i> to one another.  Two arrays are considered equal if both
arrays contain the same number of elements, and all corresponding pairs
of elements in the two arrays are equal.  In other words, two arrays
are equal if they contain the same elements in the same order.  Also,
two array references are considered equal if both are <tt>null</tt>.<p>

@param a one array to be tested for equality.
@param a2 the other array to be tested for equality.
@return <tt>true</tt> if the two arrays are equal."
      end

      operation 174875 "equals"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "a2" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if the two specified arrays of ints are
<i>equal</i> to one another.  Two arrays are considered equal if both
arrays contain the same number of elements, and all corresponding pairs
of elements in the two arrays are equal.  In other words, two arrays
are equal if they contain the same elements in the same order.  Also,
two array references are considered equal if both are <tt>null</tt>.<p>

@param a one array to be tested for equality.
@param a2 the other array to be tested for equality.
@return <tt>true</tt> if the two arrays are equal."
      end

      operation 175003 "equals"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "a" explicit_type "short"
	  param in name "a2" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if the two specified arrays of shorts are
<i>equal</i> to one another.  Two arrays are considered equal if both
arrays contain the same number of elements, and all corresponding pairs
of elements in the two arrays are equal.  In other words, two arrays
are equal if they contain the same elements in the same order.  Also,
two array references are considered equal if both are <tt>null</tt>.<p>

@param a one array to be tested for equality.
@param a2 the other array to be tested for equality.
@return <tt>true</tt> if the two arrays are equal."
      end

      operation 175131 "equals"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "a" explicit_type "char"
	  param in name "a2" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if the two specified arrays of chars are
<i>equal</i> to one another.  Two arrays are considered equal if both
arrays contain the same number of elements, and all corresponding pairs
of elements in the two arrays are equal.  In other words, two arrays
are equal if they contain the same elements in the same order.  Also,
two array references are considered equal if both are <tt>null</tt>.<p>

@param a one array to be tested for equality.
@param a2 the other array to be tested for equality.
@return <tt>true</tt> if the two arrays are equal."
      end

      operation 175259 "equals"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "a" explicit_type "byte"
	  param in name "a2" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if the two specified arrays of bytes are
<i>equal</i> to one another.  Two arrays are considered equal if both
arrays contain the same number of elements, and all corresponding pairs
of elements in the two arrays are equal.  In other words, two arrays
are equal if they contain the same elements in the same order.  Also,
two array references are considered equal if both are <tt>null</tt>.<p>

@param a one array to be tested for equality.
@param a2 the other array to be tested for equality.
@return <tt>true</tt> if the two arrays are equal."
      end

      operation 175387 "equals"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "a" explicit_type "boolean"
	  param inout name "a2" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if the two specified arrays of booleans are
<i>equal</i> to one another.  Two arrays are considered equal if both
arrays contain the same number of elements, and all corresponding pairs
of elements in the two arrays are equal.  In other words, two arrays
are equal if they contain the same elements in the same order.  Also,
two array references are considered equal if both are <tt>null</tt>.<p>

@param a one array to be tested for equality.
@param a2 the other array to be tested for equality.
@return <tt>true</tt> if the two arrays are equal."
      end

      operation 175515 "equals"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "a" explicit_type "double"
	  param in name "a2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if the two specified arrays of doubles are
<i>equal</i> to one another.  Two arrays are considered equal if both
arrays contain the same number of elements, and all corresponding pairs
of elements in the two arrays are equal.  In other words, two arrays
are equal if they contain the same elements in the same order.  Also,
two array references are considered equal if both are <tt>null</tt>.<p>

Two doubles <tt>d1</tt> and <tt>d2</tt> are considered equal if:
<pre>    <tt>new Double(d1).equals(new Double(d2))</tt></pre>
(Unlike the <tt>==</tt> operator, this method considers
<tt>NaN</tt> equals to itself, and 0.0d unequal to -0.0d.)

@param a one array to be tested for equality.
@param a2 the other array to be tested for equality.
@return <tt>true</tt> if the two arrays are equal.
@see Double#equals(Object)"
      end

      operation 175643 "equals"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "a" explicit_type "float"
	  param in name "a2" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if the two specified arrays of floats are
<i>equal</i> to one another.  Two arrays are considered equal if both
arrays contain the same number of elements, and all corresponding pairs
of elements in the two arrays are equal.  In other words, two arrays
are equal if they contain the same elements in the same order.  Also,
two array references are considered equal if both are <tt>null</tt>.<p>

Two floats <tt>f1</tt> and <tt>f2</tt> are considered equal if:
<pre>    <tt>new Float(f1).equals(new Float(f2))</tt></pre>
(Unlike the <tt>==</tt> operator, this method considers
<tt>NaN</tt> equals to itself, and 0.0f unequal to -0.0f.)

@param a one array to be tested for equality.
@param a2 the other array to be tested for equality.
@return <tt>true</tt> if the two arrays are equal.
@see Float#equals(Object)"
      end

      operation 175771 "equals"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "a" explicit_type "Object"
	  param inout name "a2" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if the two specified arrays of Objects are
<i>equal</i> to one another.  The two arrays are considered equal if
both arrays contain the same number of elements, and all corresponding
pairs of elements in the two arrays are equal.  Two objects <tt>e1</tt>
and <tt>e2</tt> are considered <i>equal</i> if <tt>(e1==null ? e2==null
: e1.equals(e2))</tt>.  In other words, the two arrays are equal if
they contain the same elements in the same order.  Also, two array
references are considered equal if both are <tt>null</tt>.<p>

@param a one array to be tested for equality.
@param a2 the other array to be tested for equality.
@return <tt>true</tt> if the two arrays are equal."
      end

      operation 175899 "fill"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "a" explicit_type "long"
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Filling

Assigns the specified long value to each element of the specified array
of longs.

@param a the array to be filled.
@param val the value to be stored in all elements of the array."
      end

      operation 176027 "fill"
	class_operation public explicit_return_type "void"
	nparams 4
	  param in name "a" explicit_type "long"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified long value to each element of the specified 
range of the specified array of longs.  The range to be filled
extends from index <tt>fromIndex</tt>, inclusive, to index
<tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the 
range to be filled is empty.)

@param a the array to be filled.
@param fromIndex the index of the first element (inclusive) to be
       filled with the specified value.
@param toIndex the index of the last element (exclusive) to be
       filled with the specified value.
@param val the value to be stored in all elements of the array.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>"
      end

      operation 176155 "fill"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified int value to each element of the specified array
of ints.

@param a the array to be filled.
@param val the value to be stored in all elements of the array."
      end

      operation 176283 "fill"
	class_operation public explicit_return_type "void"
	nparams 4
	  param in name "a" explicit_type "int"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified int value to each element of the specified 
range of the specified array of ints.  The range to be filled
extends from index <tt>fromIndex</tt>, inclusive, to index
<tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the 
range to be filled is empty.)

@param a the array to be filled.
@param fromIndex the index of the first element (inclusive) to be
       filled with the specified value.
@param toIndex the index of the last element (exclusive) to be
       filled with the specified value.
@param val the value to be stored in all elements of the array.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>"
      end

      operation 176411 "fill"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "a" explicit_type "short"
	  param in name "val" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified short value to each element of the specified array
of shorts.

@param a the array to be filled.
@param val the value to be stored in all elements of the array."
      end

      operation 176539 "fill"
	class_operation public explicit_return_type "void"
	nparams 4
	  param in name "a" explicit_type "short"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	  param in name "val" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified short value to each element of the specified 
range of the specified array of shorts.  The range to be filled
extends from index <tt>fromIndex</tt>, inclusive, to index
<tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the 
range to be filled is empty.)

@param a the array to be filled.
@param fromIndex the index of the first element (inclusive) to be
       filled with the specified value.
@param toIndex the index of the last element (exclusive) to be
       filled with the specified value.
@param val the value to be stored in all elements of the array.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>"
      end

      operation 176667 "fill"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "a" explicit_type "char"
	  param in name "val" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified char value to each element of the specified array
of chars.

@param a the array to be filled.
@param val the value to be stored in all elements of the array."
      end

      operation 176795 "fill"
	class_operation public explicit_return_type "void"
	nparams 4
	  param in name "a" explicit_type "char"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	  param in name "val" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified char value to each element of the specified 
range of the specified array of chars.  The range to be filled
extends from index <tt>fromIndex</tt>, inclusive, to index
<tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the 
range to be filled is empty.)

@param a the array to be filled.
@param fromIndex the index of the first element (inclusive) to be
       filled with the specified value.
@param toIndex the index of the last element (exclusive) to be
       filled with the specified value.
@param val the value to be stored in all elements of the array.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>"
      end

      operation 176923 "fill"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "a" explicit_type "byte"
	  param in name "val" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified byte value to each element of the specified array
of bytes.

@param a the array to be filled.
@param val the value to be stored in all elements of the array."
      end

      operation 177051 "fill"
	class_operation public explicit_return_type "void"
	nparams 4
	  param in name "a" explicit_type "byte"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	  param in name "val" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified byte value to each element of the specified 
range of the specified array of bytes.  The range to be filled
extends from index <tt>fromIndex</tt>, inclusive, to index
<tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the 
range to be filled is empty.)

@param a the array to be filled.
@param fromIndex the index of the first element (inclusive) to be
       filled with the specified value.
@param toIndex the index of the last element (exclusive) to be
       filled with the specified value.
@param val the value to be stored in all elements of the array.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>"
      end

      operation 177179 "fill"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "a" explicit_type "boolean"
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified boolean value to each element of the specified
array of booleans.

@param a the array to be filled.
@param val the value to be stored in all elements of the array."
      end

      operation 177307 "fill"
	class_operation public explicit_return_type "void"
	nparams 4
	  param inout name "a" explicit_type "boolean"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified boolean value to each element of the specified 
range of the specified array of booleans.  The range to be filled
extends from index <tt>fromIndex</tt>, inclusive, to index
<tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the 
range to be filled is empty.)

@param a the array to be filled.
@param fromIndex the index of the first element (inclusive) to be
       filled with the specified value.
@param toIndex the index of the last element (exclusive) to be
       filled with the specified value.
@param val the value to be stored in all elements of the array.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>"
      end

      operation 177435 "fill"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "a" explicit_type "double"
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified double value to each element of the specified
array of doubles.

@param a the array to be filled.
@param val the value to be stored in all elements of the array."
      end

      operation 177563 "fill"
	class_operation public explicit_return_type "void"
	nparams 4
	  param in name "a" explicit_type "double"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified double value to each element of the specified 
range of the specified array of doubles.  The range to be filled
extends from index <tt>fromIndex</tt>, inclusive, to index
<tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the 
range to be filled is empty.)

@param a the array to be filled.
@param fromIndex the index of the first element (inclusive) to be
       filled with the specified value.
@param toIndex the index of the last element (exclusive) to be
       filled with the specified value.
@param val the value to be stored in all elements of the array.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>"
      end

      operation 177691 "fill"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "a" explicit_type "float"
	  param in name "val" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified float value to each element of the specified array
of floats.

@param a the array to be filled.
@param val the value to be stored in all elements of the array."
      end

      operation 177819 "fill"
	class_operation public explicit_return_type "void"
	nparams 4
	  param in name "a" explicit_type "float"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	  param in name "val" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified float value to each element of the specified 
range of the specified array of floats.  The range to be filled
extends from index <tt>fromIndex</tt>, inclusive, to index
<tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the 
range to be filled is empty.)

@param a the array to be filled.
@param fromIndex the index of the first element (inclusive) to be
       filled with the specified value.
@param toIndex the index of the last element (exclusive) to be
       filled with the specified value.
@param val the value to be stored in all elements of the array.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>"
      end

      operation 177947 "fill"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "a" explicit_type "Object"
	  param inout name "val" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified Object reference to each element of the specified
array of Objects.

@param a the array to be filled.
@param val the value to be stored in all elements of the array."
      end

      operation 178075 "fill"
	class_operation public explicit_return_type "void"
	nparams 4
	  param inout name "a" explicit_type "Object"
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	  param inout name "val" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the specified Object reference to each element of the specified 
range of the specified array of Objects.  The range to be filled
extends from index <tt>fromIndex</tt>, inclusive, to index
<tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the 
range to be filled is empty.)

@param a the array to be filled.
@param fromIndex the index of the first element (inclusive) to be
       filled with the specified value.
@param toIndex the index of the last element (exclusive) to be
       filled with the specified value.
@param val the value to be stored in all elements of the array.
@throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
@throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
	       <tt>toIndex &gt; a.length</tt>"
      end

      operation 178203 "asList"
	class_operation public return_type class_ref 135579 // List
	nparams 1
	  param inout name "" explicit_type "T...a"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Misc

Returns a fixed-size list backed by the specified array.  (Changes to
the returned list \"write through\" to the array.)  This method acts
as bridge between array-based and collection-based APIs, in
combination with <tt>Collection.toArray</tt>.  The returned list is
serializable and implements {@link RandomAccess}.

<p>This method also provides a convenient way to create a fixed-size
list initialized to contain several elements:
<pre>
    List<String> stooges = Arrays.asList(\"Larry\", \"Moe\", \"Curly\");
</pre>

@param a the array by which the list will be backed.
@return a list view of the specified array.
@see Collection#toArray()"
      end

      class 138267 "ArrayList"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135451 // AbstractList
	  rank 0 explicit_value "E"
	actual class class_ref 135451 // AbstractList
	  rank 1 explicit_value ""
	actual class class_ref 135451 // AbstractList
	  rank 2 explicit_value ""
	actual class class_ref 135451 // AbstractList
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 135835 // <realization>
	  relation 135835 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 135835 // <realization>
	    b parent class_ref 135451 // AbstractList
	end

	classrelation 135963 // <realization>
	  relation 135963 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 135963 // <realization>
	    b parent class_ref 136347 // RandomAccess
	end

	classrelation 136091 // <realization>
	  relation 136091 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 136091 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 132507 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  -2764017481108945198L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 132635 "a"
	  private explicit_type "Object"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 178331 "ArrayList"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "array" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 178459 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 178587 "toArray"
	  public explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 178715 "get"
	  public explicit_return_type "E"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 178843 "set"
	  public explicit_return_type "E"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "element" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 178971 "indexOf"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 179099 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 179227 "hashCode"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code based on the contents of the specified array.
For any two <tt>long</tt> arrays <tt>a</tt> and <tt>b</tt>
such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
<tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

<p>The value returned by this method is the same value that would be
obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
method on a {@link List} containing a sequence of {@link Long}
instances representing the elements of <tt>a</tt> in the same order.
If <tt>a</tt> is <tt>null</tt>, this method returns 0.

@param a the array whose hash value to compute
@return a content-based hash code for <tt>a</tt>
@since 1.5"
      end

      operation 179355 "hashCode"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code based on the contents of the specified array.
For any two non-null <tt>int</tt> arrays <tt>a</tt> and <tt>b</tt>
such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
<tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

<p>The value returned by this method is the same value that would be
obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
method on a {@link List} containing a sequence of {@link Integer}
instances representing the elements of <tt>a</tt> in the same order.
If <tt>a</tt> is <tt>null</tt>, this method returns 0.

@param a the array whose hash value to compute
@return a content-based hash code for <tt>a</tt>
@since 1.5"
      end

      operation 179483 "hashCode"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code based on the contents of the specified array.
For any two <tt>short</tt> arrays <tt>a</tt> and <tt>b</tt>
such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
<tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

<p>The value returned by this method is the same value that would be
obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
method on a {@link List} containing a sequence of {@link Short}
instances representing the elements of <tt>a</tt> in the same order.
If <tt>a</tt> is <tt>null</tt>, this method returns 0.

@param a the array whose hash value to compute
@return a content-based hash code for <tt>a</tt>
@since 1.5"
      end

      operation 179611 "hashCode"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code based on the contents of the specified array.
For any two <tt>char</tt> arrays <tt>a</tt> and <tt>b</tt>
such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
<tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

<p>The value returned by this method is the same value that would be
obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
method on a {@link List} containing a sequence of {@link Character}
instances representing the elements of <tt>a</tt> in the same order.
If <tt>a</tt> is <tt>null</tt>, this method returns 0.

@param a the array whose hash value to compute
@return a content-based hash code for <tt>a</tt>
@since 1.5"
      end

      operation 179739 "hashCode"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code based on the contents of the specified array.
For any two <tt>byte</tt> arrays <tt>a</tt> and <tt>b</tt>
such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
<tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

<p>The value returned by this method is the same value that would be
obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
method on a {@link List} containing a sequence of {@link Byte}
instances representing the elements of <tt>a</tt> in the same order.
If <tt>a</tt> is <tt>null</tt>, this method returns 0.

@param a the array whose hash value to compute
@return a content-based hash code for <tt>a</tt>
@since 1.5"
      end

      operation 179867 "hashCode"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "a" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code based on the contents of the specified array.
For any two <tt>boolean</tt> arrays <tt>a</tt> and <tt>b</tt>
such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
<tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

<p>The value returned by this method is the same value that would be
obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
method on a {@link List} containing a sequence of {@link Boolean}
instances representing the elements of <tt>a</tt> in the same order.
If <tt>a</tt> is <tt>null</tt>, this method returns 0.

@param a the array whose hash value to compute
@return a content-based hash code for <tt>a</tt>
@since 1.5"
      end

      operation 179995 "hashCode"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code based on the contents of the specified array.
For any two <tt>float</tt> arrays <tt>a</tt> and <tt>b</tt>
such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
<tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

<p>The value returned by this method is the same value that would be
obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
method on a {@link List} containing a sequence of {@link Float}
instances representing the elements of <tt>a</tt> in the same order.
If <tt>a</tt> is <tt>null</tt>, this method returns 0.

@param a the array whose hash value to compute
@return a content-based hash code for <tt>a</tt>
@since 1.5"
      end

      operation 180123 "hashCode"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code based on the contents of the specified array.
For any two <tt>double</tt> arrays <tt>a</tt> and <tt>b</tt>
such that <tt>Arrays.equals(a, b)</tt>, it is also the case that
<tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

<p>The value returned by this method is the same value that would be
obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}
method on a {@link List} containing a sequence of {@link Double}
instances representing the elements of <tt>a</tt> in the same order.
If <tt>a</tt> is <tt>null</tt>, this method returns 0.

@param a the array whose hash value to compute
@return a content-based hash code for <tt>a</tt>
@since 1.5"
      end

      operation 180251 "hashCode"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "a" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code based on the contents of the specified array.  If
the array contains other arrays as elements, the hash code is based on
their identities rather than their contents.  It is therefore
acceptable to invoke this method on an array that contains itself as an
element,  either directly or indirectly through one or more levels of
arrays.

<p>For any two arrays <tt>a</tt> and <tt>b</tt> such that
<tt>Arrays.equals(a, b)</tt>, it is also the case that
<tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.

<p>The value returned by this method is equal to the value that would
be returned by <tt>Arrays.asList(a).hashCode()</tt>, unless <tt>a</tt>
is <tt>null</tt>, in which case <tt>0</tt> is returned.

@param a the array whose content-based hash code to compute
@return a content-based hash code for <tt>a</tt>
@see #deepHashCode(Object[])
@since 1.5"
      end

      operation 180379 "deepHashCode"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "a" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code based on the \"deep contents\" of the specified
array.  If the array contains other arrays as elements, the
hash code is based on their contents and so on, ad infinitum.
It is therefore unacceptable to invoke this method on an array that
contains itself as an element, either directly or indirectly through
one or more levels of arrays.  The behavior of such an invocation is
undefined.

<p>For any two arrays <tt>a</tt> and <tt>b</tt> such that
<tt>Arrays.deepEquals(a, b)</tt>, it is also the case that
<tt>Arrays.deepHashCode(a) == Arrays.deepHashCode(b)</tt>.

<p>The computation of the value returned by this method is similar to
that of the value returned by {@link List#hashCode()} on a list
containing the same elements as <tt>a</tt> in the same order, with one
difference: If an element <tt>e</tt> of <tt>a</tt> is itself an array,
its hash code is computed not by calling <tt>e.hashCode()</tt>, but as
by calling the appropriate overloading of <tt>Arrays.hashCode(e)</tt>
if <tt>e</tt> is an array of a primitive type, or as by calling
<tt>Arrays.deepHashCode(e)</tt> recursively if <tt>e</tt> is an array
of a reference type.  If <tt>a</tt> is <tt>null</tt>, this method
returns 0.

@param a the array whose deep-content-based hash code to compute
@return a deep-content-based hash code for <tt>a</tt>
@see #hashCode(Object[])
@since 1.5"
      end

      operation 180507 "deepEquals"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "a1" explicit_type "Object"
	  param inout name "a2" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if the two specified arrays are <i>deeply
equal</i> to one another.  Unlike the @link{#equals{Object[],Object[])
method, this method is appropriate for use with nested arrays of
arbitrary depth.

<p>Two array references are considered deeply equal if both
are <tt>null</tt>, or if they refer to arrays that contain the same
number of elements and all corresponding pairs of elements in the two
arrays are deeply equal.

<p>Two possibly <tt>null</tt> elements <tt>e1</tt> and <tt>e2</tt> are
deeply equal if any of the following conditions hold:
<ul>
   <li> <tt>e1</tt> and <tt>e2</tt> are both arrays of object reference
        types, and <tt>Arrays.deepEquals(e1, e2) would return true</tt>
   <li> <tt>e1</tt> and <tt>e2</tt> are arrays of the same primitive
        type, and the appropriate overloading of
        <tt>Arrays.equals(e1, e2)</tt> would return true.
   <li> <tt>e1 == e2</tt>
   <li> <tt>e1.equals(e2)</tt> would return true.
</ul>
Note that this definition permits <tt>null</tt> elements at any depth.

<p>If either of the specified arrays contain themselves as elements
either directly or indirectly through one or more levels of arrays,
the behavior of this method is undefined.

@param a1 one array to be tested for equality
@param a2 the other array to be tested for equality
@return <tt>true</tt> if the two arrays are equal
@see #equals(Object[],Object[])
@since 1.5"
      end

      operation 180635 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "a" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the contents of the specified array.
The string representation consists of a list of the array's elements,
enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are
separated by the characters <tt>\", \"</tt> (a comma followed by a
space).  Elements are converted to strings as by
<tt>String.valueOf(long)</tt>.  Returns <tt>\"null\"</tt> if <tt>a</tt>
is <tt>null</tt>.

@param a the array whose string representation to return
@return a string representation of <tt>a</tt>
@since 1.5"
      end

      operation 180763 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "a" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the contents of the specified array.
The string representation consists of a list of the array's elements,
enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are
separated by the characters <tt>\", \"</tt> (a comma followed by a
space).  Elements are converted to strings as by
<tt>String.valueOf(int)</tt>.  Returns <tt>\"null\"</tt> if <tt>a</tt> is
<tt>null</tt>.

@param a the array whose string representation to return
@return a string representation of <tt>a</tt>
@since 1.5"
      end

      operation 180891 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "a" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the contents of the specified array.
The string representation consists of a list of the array's elements,
enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are
separated by the characters <tt>\", \"</tt> (a comma followed by a
space).  Elements are converted to strings as by
<tt>String.valueOf(short)</tt>.  Returns <tt>\"null\"</tt> if <tt>a</tt>
is <tt>null</tt>.

@param a the array whose string representation to return
@return a string representation of <tt>a</tt>
@since 1.5"
      end

      operation 181019 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "a" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the contents of the specified array.
The string representation consists of a list of the array's elements,
enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are
separated by the characters <tt>\", \"</tt> (a comma followed by a
space).  Elements are converted to strings as by
<tt>String.valueOf(char)</tt>.  Returns <tt>\"null\"</tt> if <tt>a</tt>
is <tt>null</tt>.

@param a the array whose string representation to return
@return a string representation of <tt>a</tt>
@since 1.5"
      end

      operation 181147 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "a" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the contents of the specified array.
The string representation consists of a list of the array's elements,
enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements
are separated by the characters <tt>\", \"</tt> (a comma followed
by a space).  Elements are converted to strings as by
<tt>String.valueOf(byte)</tt>.  Returns <tt>\"null\"</tt> if
<tt>a</tt> is <tt>null</tt>.

@param a the array whose string representation to return
@return a string representation of <tt>a</tt>
@since 1.5"
      end

      operation 181275 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "a" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the contents of the specified array.
The string representation consists of a list of the array's elements,
enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are
separated by the characters <tt>\", \"</tt> (a comma followed by a
space).  Elements are converted to strings as by
<tt>String.valueOf(boolean)</tt>.  Returns <tt>\"null\"</tt> if
<tt>a</tt> is <tt>null</tt>.

@param a the array whose string representation to return
@return a string representation of <tt>a</tt>
@since 1.5"
      end

      operation 181403 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "a" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the contents of the specified array.
The string representation consists of a list of the array's elements,
enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are
separated by the characters <tt>\", \"</tt> (a comma followed by a
space).  Elements are converted to strings as by
<tt>String.valueOf(float)</tt>.  Returns <tt>\"null\"</tt> if <tt>a</tt>
is <tt>null</tt>.

@param a the array whose string representation to return
@return a string representation of <tt>a</tt>
@since 1.5"
      end

      operation 181531 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the contents of the specified array.
The string representation consists of a list of the array's elements,
enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are
separated by the characters <tt>\", \"</tt> (a comma followed by a
space).  Elements are converted to strings as by
<tt>String.valueOf(double)</tt>.  Returns <tt>\"null\"</tt> if <tt>a</tt>
is <tt>null</tt>.

@param a the array whose string representation to return
@return a string representation of <tt>a</tt>
@since 1.5"
      end

      operation 181659 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "a" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the contents of the specified array.
If the array contains other arrays as elements, they are converted to
strings by the {@link Object#toString} method inherited from
<tt>Object</tt>, which describes their <i>identities</i> rather than
their contents.

<p>The value returned by this method is equal to the value that would
be returned by <tt>Arrays.asList(a).toString()</tt>, unless <tt>a</tt>
is <tt>null</tt>, in which case <tt>\"null\"</tt> is returned.

@param a the array whose string representation to return
@return a string representation of <tt>a</tt>
@see #deepToString(Object[])
@since 1.5"
      end

      operation 181787 "deepToString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "a" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the \"deep contents\" of the specified
array.  If the array contains other arrays as elements, the string
representation contains their contents and so on.  This method is
designed for converting multidimensional arrays to strings.

<p>The string representation consists of a list of the array's
elements, enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent
elements are separated by the characters <tt>\", \"</tt> (a comma
followed  by a space).  Elements are converted to strings as by
<tt>String.valueOf(Object)</tt>, unless they are themselves
arrays.

<p>If an element <tt>e</tt> is an array of a primitive type, it is
converted to a string as by invoking the appropriate overloading of
<tt>Arrays.toString(e)</tt>.  If an element <tt>e</tt> is an array of a
reference type, it is converted to a string as by invoking
this method recursively.

<p>To avoid infinite recursion, if the specified array contains itself
as an element, or contains an indirect reference to itself through one
or more levels of arrays, the self-reference is converted to the string
<tt>\"[...]\"</tt>.  For example, an array containing only a reference
to itself would be rendered as <tt>\"[[...]]\"</tt>.

<p>This method returns <tt>\"null\"</tt> if the specified array
is <tt>null</tt>.

@param a the array whose string representation to return
@return a string representation of <tt>a</tt>
@see #toString(Object[])
@since 1.5"
      end

      operation 181915 "deepToString"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "a" explicit_type "Object"
	  param inout name "buf" explicit_type "StringBuilder"
	  param inout name "dejaVu" type class_ref 136731 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}<Object[]> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 138139 "Comparator"
      visibility public stereotype "interface"
      nformals 4
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A comparison function, which imposes a <i>total ordering</i> on some
collection of objects.  Comparators can be passed to a sort method (such as
<tt>Collections.sort</tt>) to allow precise control over the sort order.
Comparators can also be used to control the order of certain data
structures (such as <tt>TreeSet</tt> or <tt>TreeMap</tt>).<p>

The ordering imposed by a Comparator <tt>c</tt> on a set of elements
<tt>S</tt> is said to be <i>consistent with equals</i> if and only if
<tt>(compare((Object)e1, (Object)e2)==0)</tt> has the same boolean value as
<tt>e1.equals((Object)e2)</tt> for every <tt>e1</tt> and <tt>e2</tt> in
<tt>S</tt>.<p>

Caution should be exercised when using a comparator capable of imposing an
ordering inconsistent with equals to order a sorted set (or sorted map).
Suppose a sorted set (or sorted map) with an explicit Comparator <tt>c</tt>
is used with elements (or keys) drawn from a set <tt>S</tt>.  If the
ordering imposed by <tt>c</tt> on <tt>S</tt> is inconsistent with equals,
the sorted set (or sorted map) will behave \"strangely.\"  In particular the
sorted set (or sorted map) will violate the general contract for set (or
map), which is defined in terms of <tt>equals</tt>.<p>

For example, if one adds two keys <tt>a</tt> and <tt>b</tt> such that
<tt>(a.equals((Object)b) && c.compare((Object)a, (Object)b) != 0)</tt> to a
sorted set with comparator <tt>c</tt>, the second <tt>add</tt> operation
will return false (and the size of the sorted set will not increase)
because <tt>a</tt> and <tt>b</tt> are equivalent from the sorted set's
perspective.<p>

Note: It is generally a good idea for comparators to implement
<tt>java.io.Serializable</tt>, as they may be used as ordering methods in
serializable data structures (like <tt>TreeSet</tt>, <tt>TreeMap</tt>).  In
order for the data structure to serialize successfully, the comparator (if
provided) must implement <tt>Serializable</tt>.<p>

For the mathematically inclined, the <i>relation</i> that defines
the <i>total order</i> that a given comparator <tt>c</tt> imposes on a
given set of objects <tt>S</tt> is:<pre>
      {(x, y) such that c.compare((Object)x, (Object)y) &lt;= 0}.
</pre> The <i>quotient</i> for this total order is:<pre>
      {(x, y) such that c.compare((Object)x, (Object)y) == 0}.
</pre>

It follows immediately from the contract for <tt>compare</tt> that the
quotient is an <i>equivalence relation</i> on <tt>S</tt>, and that the
natural ordering is a <i>total order</i> on <tt>S</tt>.  When we say that
the ordering imposed by <tt>c</tt> on <tt>S</tt> is <i>consistent with
equals</i>, we mean that the quotient for the natural ordering is the
equivalence relation defined by the objects' <tt>equals(Object)</tt>
method(s):<pre>
      {(x, y) such that x.equals((Object)y)}.
</pre><p>

This interface is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@author  Neal Gafter
@version 1.22, 12/19/03
@see Comparable
@see Arrays#sort(Object[], Comparator)
@see TreeMap
@see TreeSet
@see SortedMap
@see SortedSet
@see java.io.Serializable
@since 1.2"
      operation 242203 "compare"
	public explicit_return_type "int"
	nparams 2
	  param inout name "o1" explicit_type "T"
	  param inout name "o2" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares its two arguments for order.  Returns a negative integer,
zero, or a positive integer as the first argument is less than, equal
to, or greater than the second.<p>

The implementor must ensure that <tt>sgn(compare(x, y)) ==
-sgn(compare(y, x))</tt> for all <tt>x</tt> and <tt>y</tt>.  (This
implies that <tt>compare(x, y)</tt> must throw an exception if and only
if <tt>compare(y, x)</tt> throws an exception.)<p>

The implementor must also ensure that the relation is transitive:
<tt>((compare(x, y)&gt;0) &amp;&amp; (compare(y, z)&gt;0))</tt> implies
<tt>compare(x, z)&gt;0</tt>.<p>

Finally, the implementer must ensure that <tt>compare(x, y)==0</tt>
implies that <tt>sgn(compare(x, z))==sgn(compare(y, z))</tt> for all
<tt>z</tt>.<p>

It is generally the case, but <i>not</i> strictly required that 
<tt>(compare(x, y)==0) == (x.equals(y))</tt>.  Generally speaking,
any comparator that violates this condition should clearly indicate
this fact.  The recommended language is \"Note: this comparator
imposes orderings that are inconsistent with equals.\"

@param o1 the first object to be compared.
@param o2 the second object to be compared.
@return a negative integer, zero, or a positive integer as the
	       first argument is less than, equal to, or greater than the
	       second. 
@throws ClassCastException if the arguments' types prevent them from
	       being compared by this Comparator."
      end

      operation 242331 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Indicates whether some other object is &quot;equal to&quot; this
Comparator.  This method must obey the general contract of
<tt>Object.equals(Object)</tt>.  Additionally, this method can return
<tt>true</tt> <i>only</i> if the specified Object is also a comparator
and it imposes the same ordering as this comparator.  Thus,
<code>comp1.equals(comp2)</code> implies that <tt>sgn(comp1.compare(o1,
o2))==sgn(comp2.compare(o1, o2))</tt> for every object reference
<tt>o1</tt> and <tt>o2</tt>.<p>

Note that it is <i>always</i> safe <i>not</i> to override
<tt>Object.equals(Object)</tt>.  However, overriding this method may,
in some cases, improve performance by allowing programs to determine
that two distinct Comparators impose the same order.

@param   obj   the reference object with which to compare.
@return  <code>true</code> only if the specified object is also
		a comparator and it imposes the same ordering as this
		comparator.
@see     java.lang.Object#equals(java.lang.Object)
@see java.lang.Object#hashCode()"
      end
    end

    class 138395 "BitSet"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class implements a vector of bits that grows as needed. Each 
component of the bit set has a <code>boolean</code> value. The 
bits of a <code>BitSet</code> are indexed by nonnegative integers. 
Individual indexed bits can be examined, set, or cleared. One 
<code>BitSet</code> may be used to modify the contents of another 
<code>BitSet</code> through logical AND, logical inclusive OR, and 
logical exclusive OR operations.
<p>
By default, all bits in the set initially have the value 
<code>false</code>. 
<p>
Every bit set has a current size, which is the number of bits 
of space currently in use by the bit set. Note that the size is
related to the implementation of a bit set, so it may change with
implementation. The length of a bit set relates to logical length
of a bit set and is defined independently of implementation.
<p>
Unless otherwise noted, passing a null parameter to any of the
methods in a <code>BitSet</code> will result in a
<code>NullPointerException</code>.

A <code>BitSet</code> is not safe for multithreaded use without
external synchronization.

@author  Arthur van Hoff
@author  Michael McCloskey
@version 1.60, 02/19/04
@since   JDK1.0"
      classrelation 136347 // <realization>
	relation 136347 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 136347 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 132763 "ADDRESS_BITS_PER_UNIT"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "BitSets are packed into arrays of \"units.\"  Currently a unit is a long,
which consists of 64 bits, requiring 6 address bits.  The choice of unit
is determined purely by performance concerns.
"
      end

      attribute 132891 "BITS_PER_UNIT"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1 << ADDRESS_BITS_PER_UNIT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 133019 "BIT_INDEX_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  BITS_PER_UNIT - 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 133147 "WORD_MASK"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  0xffffffffffffffffL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Used to shift left or right for a partial word mask "
      end

      attribute 133275 "bits"
	private explicit_type "long"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The bits in this BitSet.  The ith bit is stored in bits[i/64] at
bit position i % 64 (where bit position 0 refers to the least
significant bit and 63 refers to the most significant bit).
INVARIANT: The words in bits[] above unitsInUse-1 are zero.

@serial

 this should be called unit[]"
      end

      attribute 133403 "unitsInUse"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of units in the logical size of this BitSet.
INVARIANT: unitsInUse is nonnegative.
INVARIANT: bits[unitsInUse-1] is nonzero unless unitsInUse is zero.
"
      end

      attribute 133531 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7997698588986878753L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.0.2 for interoperability "
      end

      operation 182043 "unitIndex"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "bitIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a bit index return unit index containing it."
      end

      operation 182171 "bit"
	class_operation private explicit_return_type "long"
	nparams 1
	  param in name "bitIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a bit index, return a unit that masks that bit in its unit."
      end

      operation 182299 "recalculateUnitsInUse"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the field unitsInUse with the logical size in units of the bit
set.  WARNING:This function assumes that the number of units actually
in use is less than or equal to the current value of unitsInUse!"
      end

      operation 182427 "BitSet"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new bit set. All bits are initially <code>false</code>."
      end

      operation 182555 "BitSet"
	public explicit_return_type ""
	nparams 1
	  param in name "nbits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a bit set whose initial size is large enough to explicitly
represent bits with indices in the range <code>0</code> through
<code>nbits-1</code>. All bits are initially <code>false</code>. 

@param     nbits   the initial size of the bit set.
@exception NegativeArraySizeException if the specified initial size
              is negative."
      end

      operation 182683 "ensureCapacity"
	private explicit_return_type "void"
	nparams 1
	  param in name "unitsRequired" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that the BitSet can hold enough units.
@param	unitsRequired the minimum acceptable number of units."
      end

      operation 182811 "flip"
	public explicit_return_type "void"
	nparams 1
	  param in name "bitIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the bit at the specified index to the complement of its
current value.

@param   bitIndex the index of the bit to flip.
@exception IndexOutOfBoundsException if the specified index is negative.
@since   1.4"
      end

      operation 182939 "flip"
	public explicit_return_type "void"
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets each bit from the specified fromIndex(inclusive) to the
specified toIndex(exclusive) to the complement of its current
value.

@param     fromIndex   index of the first bit to flip.
@param     toIndex index after the last bit to flip.
@exception IndexOutOfBoundsException if <tt>fromIndex</tt> is negative,
           or <tt>toIndex</tt> is negative, or <tt>fromIndex</tt> is
           larger than <tt>toIndex</tt>.
@since   1.4"
      end

      operation 183067 "bitsRightOf"
	class_operation private explicit_return_type "long"
	nparams 1
	  param in name "x" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a long that has all bits that are less significant
than the specified index set to 1. All other bits are 0."
      end

      operation 183195 "bitsLeftOf"
	class_operation private explicit_return_type "long"
	nparams 1
	  param in name "x" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a long that has all the bits that are more significant
than or equal to the specified index set to 1. All other bits are 0."
      end

      operation 183323 "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "bitIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the bit at the specified index to <code>true</code>.

@param     bitIndex   a bit index.
@exception IndexOutOfBoundsException if the specified index is negative.
@since     JDK1.0"
      end

      operation 183451 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "bitIndex" explicit_type "int"
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the bit at the specified index to the specified value.

@param     bitIndex   a bit index.
@param     value a boolean value to set.
@exception IndexOutOfBoundsException if the specified index is negative.
@since     1.4"
      end

      operation 183579 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the bits from the specified fromIndex(inclusive) to the
specified toIndex(exclusive) to <code>true</code>.

@param     fromIndex   index of the first bit to be set.
@param     toIndex index after the last bit to be set.
@exception IndexOutOfBoundsException if <tt>fromIndex</tt> is negative,
           or <tt>toIndex</tt> is negative, or <tt>fromIndex</tt> is
           larger than <tt>toIndex</tt>.
@since     1.4"
      end

      operation 183707 "set"
	public explicit_return_type "void"
	nparams 3
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the bits from the specified fromIndex(inclusive) to the
specified toIndex(exclusive) to the specified value.

@param     fromIndex   index of the first bit to be set.
@param     toIndex index after the last bit to be set
@param     value value to set the selected bits to
@exception IndexOutOfBoundsException if <tt>fromIndex</tt> is negative,
           or <tt>toIndex</tt> is negative, or <tt>fromIndex</tt> is
           larger than <tt>toIndex</tt>.
@since     1.4"
      end

      operation 183835 "clear"
	public explicit_return_type "void"
	nparams 1
	  param in name "bitIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the bit specified by the index to <code>false</code>.

@param     bitIndex   the index of the bit to be cleared.
@exception IndexOutOfBoundsException if the specified index is negative.
@since     JDK1.0"
      end

      operation 183963 "clear"
	public explicit_return_type "void"
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the bits from the specified fromIndex(inclusive) to the
specified toIndex(exclusive) to <code>false</code>.

@param     fromIndex   index of the first bit to be cleared.
@param     toIndex index after the last bit to be cleared. 
@exception IndexOutOfBoundsException if <tt>fromIndex</tt> is negative,
           or <tt>toIndex</tt> is negative, or <tt>fromIndex</tt> is
           larger than <tt>toIndex</tt>.
@since     1.4"
      end

      operation 184091 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets all of the bits in this BitSet to <code>false</code>.

@since   1.4"
      end

      operation 184219 "get"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "bitIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the bit with the specified index. The value 
is <code>true</code> if the bit with the index <code>bitIndex</code> 
is currently set in this <code>BitSet</code>; otherwise, the result 
is <code>false</code>.

@param     bitIndex   the bit index.
@return    the value of the bit with the specified index.
@exception IndexOutOfBoundsException if the specified index is negative."
      end

      operation 184347 "get"
	public return_type class_ref 138395 // BitSet
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <tt>BitSet</tt> composed of bits from this <tt>BitSet</tt>
from <tt>fromIndex</tt>(inclusive) to <tt>toIndex</tt>(exclusive).

@param     fromIndex   index of the first bit to include.
@param     toIndex     index after the last bit to include.
@return    a new <tt>BitSet</tt> from a range of this <tt>BitSet</tt>.
@exception IndexOutOfBoundsException if <tt>fromIndex</tt> is negative,
           or <tt>toIndex</tt> is negative, or <tt>fromIndex</tt> is
           larger than <tt>toIndex</tt>.
@since   1.4"
      end

      operation 184475 "getBits"
	private explicit_return_type "long"
	nparams 1
	  param in name "j" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unit of this bitset at index j as if this bitset had an
infinite amount of storage."
      end

      operation 184603 "nextSetBit"
	public explicit_return_type "int"
	nparams 1
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first bit that is set to <code>true</code>
that occurs on or after the specified starting index. If no such
bit exists then -1 is returned.

To iterate over the <code>true</code> bits in a <code>BitSet</code>,
use the following loop:

for(int i=bs.nextSetBit(0); i>=0; i=bs.nextSetBit(i+1)) {
    // operate on index i here
}

@param   fromIndex the index to start checking from (inclusive).
@return  the index of the next set bit.
@throws  IndexOutOfBoundsException if the specified index is negative.
@since   1.4"
      end

      operation 184731 "trailingZeroCnt"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 133659 "trailingZeroTable"
	class_attribute const_attribute private explicit_type "byte"
	multiplicity "[]"
	init_value "=  {
      -25, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "trailingZeroTable[i] is the number of trailing zero bits in the binary
representation of i.
"
      end

      operation 184859 "nextClearBit"
	public explicit_return_type "int"
	nparams 1
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first bit that is set to <code>false</code>
that occurs on or after the specified starting index.

@param   fromIndex the index to start checking from (inclusive).
@return  the index of the next clear bit.
@throws  IndexOutOfBoundsException if the specified index is negative.
@since   1.4"
      end

      operation 184987 "length"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the \"logical size\" of this <code>BitSet</code>: the index of
the highest set bit in the <code>BitSet</code> plus one. Returns zero
if the <code>BitSet</code> contains no set bits.

@return  the logical size of this <code>BitSet</code>.
@since   1.2"
      end

      operation 185115 "bitLen"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "w" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "bitLen(val) is the number of bits in val."
      end

      operation 185243 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this <code>BitSet</code> contains no bits that are set
to <code>true</code>.

@return    boolean indicating whether this <code>BitSet</code> is empty.
@since     1.4"
      end

      operation 185371 "intersects"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "set" type class_ref 138395 // BitSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the specified <code>BitSet</code> has any bits set to
<code>true</code> that are also set to <code>true</code> in this
<code>BitSet</code>.

@param	set <code>BitSet</code> to intersect with
@return  boolean indicating whether this <code>BitSet</code> intersects
         the specified <code>BitSet</code>.
@since   1.4"
      end

      operation 185499 "cardinality"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bits set to <tt>true</tt> in this
<code>BitSet</code>.

@return  the number of bits set to <tt>true</tt> in this
         <code>BitSet</code>.
@since   1.4"
      end

      operation 185627 "bitCount"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bits set in val.
For a derivation of this algorithm, see
\"Algorithms and data structures with applications to 
 graphics and geometry\", by Jurg Nievergelt and Klaus Hinrichs,
 Prentice Hall, 1993."
      end

      operation 185755 "and"
	public explicit_return_type "void"
	nparams 1
	  param inout name "set" type class_ref 138395 // BitSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a logical <b>AND</b> of this target bit set with the 
argument bit set. This bit set is modified so that each bit in it 
has the value <code>true</code> if and only if it both initially 
had the value <code>true</code> and the corresponding bit in the 
bit set argument also had the value <code>true</code>. 

@param   set   a bit set. "
      end

      operation 185883 "or"
	public explicit_return_type "void"
	nparams 1
	  param inout name "set" type class_ref 138395 // BitSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a logical <b>OR</b> of this bit set with the bit set 
argument. This bit set is modified so that a bit in it has the 
value <code>true</code> if and only if it either already had the 
value <code>true</code> or the corresponding bit in the bit set 
argument has the value <code>true</code>.

@param   set   a bit set."
      end

      operation 186011 "xor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "set" type class_ref 138395 // BitSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a logical <b>XOR</b> of this bit set with the bit set 
argument. This bit set is modified so that a bit in it has the 
value <code>true</code> if and only if one of the following 
statements holds: 
<ul>
<li>The bit initially has the value <code>true</code>, and the 
    corresponding bit in the argument has the value <code>false</code>.
<li>The bit initially has the value <code>false</code>, and the 
    corresponding bit in the argument has the value <code>true</code>. 
</ul>

@param   set   a bit set."
      end

      operation 186139 "andNot"
	public explicit_return_type "void"
	nparams 1
	  param inout name "set" type class_ref 138395 // BitSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears all of the bits in this <code>BitSet</code> whose corresponding
bit is set in the specified <code>BitSet</code>.

@param     set the <code>BitSet</code> with which to mask this
           <code>BitSet</code>.
@since     JDK1.2"
      end

      operation 186267 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code value for this bit set. The has code 
depends only on which bits have been set within this 
<code>BitSet</code>. The algorithm used to compute it may 
be described as follows.<p>
Suppose the bits in the <code>BitSet</code> were to be stored 
in an array of <code>long</code> integers called, say, 
<code>bits</code>, in such a manner that bit <code>k</code> is 
set in the <code>BitSet</code> (for nonnegative values of 
<code>k</code>) if and only if the expression 
<pre>((k&gt;&gt;6) &lt; bits.length) && ((bits[k&gt;&gt;6] & (1L &lt;&lt; (bit & 0x3F))) != 0)</pre>
is true. Then the following definition of the <code>hashCode</code> 
method would be a correct implementation of the actual algorithm:
<pre>
public int hashCode() {
     long h = 1234;
     for (int i = bits.length; --i &gt;= 0; ) {
          h ^= bits[i] * (i + 1);
     }
     return (int)((h &gt;&gt; 32) ^ h);
}</pre>
Note that the hash code values change if the set of bits is altered.
<p>Overrides the <code>hashCode</code> method of <code>Object</code>.

@return  a hash code value for this bit set."
      end

      operation 186395 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bits of space actually in use by this 
<code>BitSet</code> to represent bit values. 
The maximum element in the set is the size - 1st element.

@return  the number of bits currently in this bit set."
      end

      operation 186523 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this object against the specified object.
The result is <code>true</code> if and only if the argument is 
not <code>null</code> and is a <code>Bitset</code> object that has 
exactly the same set of bits set to <code>true</code> as this bit 
set. That is, for every nonnegative <code>int</code> index <code>k</code>, 
<pre>((BitSet)obj).get(k) == this.get(k)</pre>
must be true. The current sizes of the two bit sets are not compared. 
<p>Overrides the <code>equals</code> method of <code>Object</code>.

@param   obj   the object to compare with.
@return  <code>true</code> if the objects are the same;
         <code>false</code> otherwise.
@see     java.util.BitSet#size()"
      end

      operation 186651 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cloning this <code>BitSet</code> produces a new <code>BitSet</code> 
that is equal to it.
The clone of the bit set is another bit set that has exactly the 
same bits set to <code>true</code> as this bit set and the same 
current size. 
<p>Overrides the <code>clone</code> method of <code>Object</code>.

@return  a clone of this bit set.
@see     java.util.BitSet#size()"
      end

      operation 186779 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" explicit_type "java.io.ObjectInputStream"
	nexceptions 2
	  explicit_exception "IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This override of readObject makes sure unitsInUse is set properly
when deserializing a bitset
"
      end

      operation 186907 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this bit set. For every index 
for which this <code>BitSet</code> contains a bit in the set 
state, the decimal representation of that index is included in 
the result. Such indices are listed in order from lowest to 
highest, separated by \",&nbsp;\" (a comma and a space) and 
surrounded by braces, resulting in the usual mathematical 
notation for a set of integers.<p>
Overrides the <code>toString</code> method of <code>Object</code>.
<p>Example:
<pre>
BitSet drPepper = new BitSet();</pre>
Now <code>drPepper.toString()</code> returns \"<code>{}</code>\".<p>
<pre>
drPepper.set(2);</pre>
Now <code>drPepper.toString()</code> returns \"<code>{2}</code>\".<p>
<pre>
drPepper.set(4);
drPepper.set(10);</pre>
Now <code>drPepper.toString()</code> returns \"<code>{2, 4, 10}</code>\".

@return  a string representation of this bit set."
      end
    end

    class 138523 "Calendar"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Calendar</code> class is an abstract class that provides methods
for converting between a specific instant in time and a set of {@link
#fields calendar fields} such as <code>YEAR</code>, <code>MONTH</code>,
<code>DAY_OF_MONTH</code>, <code>HOUR</code>, and so on, and for
manipulating the calendar fields, such as getting the date of the next
week. An instant in time can be represented by a millisecond value that is
an offset from the <a name=\"Epoch\"><em>Epoch</em></a>, January 1, 1970
00:00:00.000 GMT (Gregorian).

<p>The class also provides additional fields and methods for
implementing a concrete calendar system outside the package. Those
fields and methods are defined as <code>protected</code>.

<p>
Like other locale-sensitive classes, <code>Calendar</code> provides a
class method, <code>getInstance</code>, for getting a generally useful
object of this type. <code>Calendar</code>'s <code>getInstance</code> method
returns a <code>Calendar</code> object whose
calendar fields have been initialized with the current date and time:
<blockquote>
<pre>
    Calendar rightNow = Calendar.getInstance();
</pre>
</blockquote>

<p>A <code>Calendar</code> object can produce all the calendar field values
needed to implement the date-time formatting for a particular language and
calendar style (for example, Japanese-Gregorian, Japanese-Traditional).
<code>Calendar</code> defines the range of values returned by
certain calendar fields, as well as their meaning.  For example,
the first month of the calendar system has value <code>MONTH ==
JANUARY</code> for all calendars.  Other values are defined by the
concrete subclass, such as <code>ERA</code>.  See individual field
documentation and subclass documentation for details.

<h4>Getting and Setting Calendar Field Values</h4>

<p>The calendar field values can be set by calling the <code>set</code>
methods. Any field values set in a <code>Calendar</code> will not be
interpreted until it needs to calculate its time value (milliseconds from
the Epoch) or values of the calendar fields. Calling the
<code>get</code>, <code>getTimeInMillis</code>, <code>getTime</code>,
<code>add</code> and <code>roll</code> involves such calculation.

<h4>Leniency</h4>

<p><code>Calendar</code> has two modes for interpreting the calendar
fields, <em>lenient</em> and <em>non-lenient</em>.  When a
<code>Calendar</code> is in lenient mode, it accepts a wider range of
calendar field values than it produces.  When a <code>Calendar</code>
recomputes calendar field values for return by <code>get()</code>, all of
the calendar fields are normalized. For example, a lenient
<code>GregorianCalendar</code> interprets <code>MONTH == JANUARY</code>,
<code>DAY_OF_MONTH == 32</code> as February 1.

<p>When a <code>Calendar</code> is in non-lenient mode, it throws an
exception if there is any inconsistency in its calendar fields. For
example, a <code>GregorianCalendar</code> always produces
<code>DAY_OF_MONTH</code> values between 1 and the length of the month. A
non-lenient <code>GregorianCalendar</code> throws an exception upon
calculating its time or calendar field values if any out-of-range field
value has been set.

<h4>First Week</h4>

<code>Calendar</code> defines a locale-specific seven day week using two
parameters: the first day of the week and the minimal days in first week
(from 1 to 7).  These numbers are taken from the locale resource data when a
<code>Calendar</code> is constructed.  They may also be specified explicitly
through the methods for setting their values.

<p>When setting or getting the <code>WEEK_OF_MONTH</code> or
<code>WEEK_OF_YEAR</code> fields, <code>Calendar</code> must determine the
first week of the month or year as a reference point.  The first week of a
month or year is defined as the earliest seven day period beginning on
<code>getFirstDayOfWeek()</code> and containing at least
<code>getMinimalDaysInFirstWeek()</code> days of that month or year.  Weeks
numbered ..., -1, 0 precede the first week; weeks numbered 2, 3,... follow
it.  Note that the normalized numbering returned by <code>get()</code> may be
different.  For example, a specific <code>Calendar</code> subclass may
designate the week before week 1 of a year as week <code><i>n</i></code> of
the previous year.

<h4>Calendar Fields Resolution</h4>

When computing a date and time from the calendar fields, there
may be insufficient information for the computation (such as only
year and month with no day of month), or there may be inconsistent
information (such as Tuesday, July 15, 1996 (Gregorian) -- July 15,
1996 is actually a Monday). <code>Calendar</code> will resolve
calendar field values to determine the date and time in the
following way.

<p>If there is any conflict in calendar field values,
<code>Calendar</code> gives priorities to calendar fields that have been set
more recently. The following are the default combinations of the
calendar fields. The most recent combination, as determined by the
most recently set single field, will be used.

<p><a name=\"date_resolution\">For the date fields</a>:
<blockquote>
<pre>
YEAR + MONTH + DAY_OF_MONTH
YEAR + MONTH + WEEK_OF_MONTH + DAY_OF_WEEK
YEAR + MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK
YEAR + DAY_OF_YEAR
YEAR + DAY_OF_WEEK + WEEK_OF_YEAR
</pre></blockquote>

<a name=\"time_resolution\">For the time of day fields</a>:
<blockquote>
<pre>
HOUR_OF_DAY
AM_PM + HOUR
</pre></blockquote>

<p>If there are any calendar fields whose values haven't been set in the selected
field combination, <code>Calendar</code> uses their default values. The default
value of each field may vary by concrete calendar systems. For example, in
<code>GregorianCalendar</code>, the default of a field is the same as that
of the start of the Epoch: i.e., <code>YEAR = 1970</code>, <code>MONTH =
JANUARY</code>, <code>DAY_OF_MONTH = 1</code>, etc.

<p>
<strong>Note:</strong> There are certain possible ambiguities in
interpretation of certain singular times, which are resolved in the
following ways:
<ol>
    <li> 23:59 is the last minute of the day and 00:00 is the first
         minute of the next day. Thus, 23:59 on Dec 31, 1999 &lt; 00:00 on
         Jan 1, 2000 &lt; 00:01 on Jan 1, 2000.

    <li> Although historically not precise, midnight also belongs to \"am\",
         and noon belongs to \"pm\", so on the same day,
         12:00 am (midnight) &lt; 12:01 am, and 12:00 pm (noon) &lt; 12:01 pm
</ol>

<p>
The date or time format strings are not part of the definition of a
calendar, as those must be modifiable or overridable by the user at
runtime. Use {@link DateFormat}
to format dates.

<h4>Field Manipulation</h4>

The calendar fields can be changed using three methods:
<code>set()</code>, <code>add()</code>, and <code>roll()</code>.</p>

<p><strong><code>set(f, value)</code></strong> changes calendar field
<code>f</code> to <code>value</code>.  In addition, it sets an
internal member variable to indicate that calendar field <code>f</code> has
been changed. Although calendar field <code>f</code> is changed immediately,
the calendar's time value in milliseconds is not recomputed until the next call to
<code>get()</code>, <code>getTime()</code>, <code>getTimeInMillis()</code>,
<code>add()</code>, or <code>roll()</code> is made. Thus, multiple calls to
<code>set()</code> do not trigger multiple, unnecessary
computations. As a result of changing a calendar field using
<code>set()</code>, other calendar fields may also change, depending on the
calendar field, the calendar field value, and the calendar system. In addition,
<code>get(f)</code> will not necessarily return <code>value</code> set by
the call to the <code>set</code> method
after the calendar fields have been recomputed. The specifics are determined by
the concrete calendar class.</p>

<p><em>Example</em>: Consider a <code>GregorianCalendar</code>
originally set to August 31, 1999. Calling <code>set(Calendar.MONTH,
Calendar.SEPTEMBER)</code> sets the date to September 31,
1999. This is a temporary internal representation that resolves to
October 1, 1999 if <code>getTime()</code>is then called. However, a
call to <code>set(Calendar.DAY_OF_MONTH, 30)</code> before the call to
<code>getTime()</code> sets the date to September 30, 1999, since
no recomputation occurs after <code>set()</code> itself.</p>

<p><strong><code>add(f, delta)</code></strong> adds <code>delta</code>
to field <code>f</code>.  This is equivalent to calling <code>set(f,
get(f) + delta)</code> with two adjustments:</p>

<blockquote>
  <p><strong>Add rule 1</strong>. The value of field <code>f</code>
  after the call minus the value of field <code>f</code> before the
  call is <code>delta</code>, modulo any overflow that has occurred in
  field <code>f</code>. Overflow occurs when a field value exceeds its
  range and, as a result, the next larger field is incremented or
  decremented and the field value is adjusted back into its range.</p>

  <p><strong>Add rule 2</strong>. If a smaller field is expected to be
  invariant, but it is impossible for it to be equal to its
  prior value because of changes in its minimum or maximum after field
  <code>f</code> is changed or other constraints, such as time zone
  offset changes, then its value is adjusted to be as close
  as possible to its expected value. A smaller field represents a
  smaller unit of time. <code>HOUR</code> is a smaller field than
  <code>DAY_OF_MONTH</code>. No adjustment is made to smaller fields
  that are not expected to be invariant. The calendar system
  determines what fields are expected to be invariant.</p>
</blockquote>

<p>In addition, unlike <code>set()</code>, <code>add()</code> forces
an immediate recomputation of the calendar's milliseconds and all
fields.</p>

<p><em>Example</em>: Consider a <code>GregorianCalendar</code>
originally set to August 31, 1999. Calling <code>add(Calendar.MONTH,
13)</code> sets the calendar to September 30, 2000. <strong>Add rule
1</strong> sets the <code>MONTH</code> field to September, since
adding 13 months to August gives September of the next year. Since
<code>DAY_OF_MONTH</code> cannot be 31 in September in a
<code>GregorianCalendar</code>, <strong>add rule 2</strong> sets the
<code>DAY_OF_MONTH</code> to 30, the closest possible value. Although
it is a smaller field, <code>DAY_OF_WEEK</code> is not adjusted by
rule 2, since it is expected to change when the month changes in a
<code>GregorianCalendar</code>.</p>

<p><strong><code>roll(f, delta)</code></strong> adds
<code>delta</code> to field <code>f</code> without changing larger
fields. This is equivalent to calling <code>add(f, delta)</code> with
the following adjustment:</p>

<blockquote>
  <p><strong>Roll rule</strong>. Larger fields are unchanged after the
  call. A larger field represents a larger unit of
  time. <code>DAY_OF_MONTH</code> is a larger field than
  <code>HOUR</code>.</p>
</blockquote>

<p><em>Example</em>: See {@link java.util.GregorianCalendar#roll(int, int)}.

<p><strong>Usage model</strong>. To motivate the behavior of
<code>add()</code> and <code>roll()</code>, consider a user interface
component with increment and decrement buttons for the month, day, and
year, and an underlying <code>GregorianCalendar</code>. If the
interface reads January 31, 1999 and the user presses the month
increment button, what should it read? If the underlying
implementation uses <code>set()</code>, it might read March 3, 1999. A
better result would be February 28, 1999. Furthermore, if the user
presses the month increment button again, it should read March 31,
1999, not March 28, 1999. By saving the original date and using either
<code>add()</code> or <code>roll()</code>, depending on whether larger
fields should be affected, the user interface can behave as most users
will intuitively expect.</p>

@see          java.lang.System#currentTimeMillis()
@see          Date
@see          GregorianCalendar
@see          TimeZone
@see          java.text.DateFormat
@version      1.81, 07/26/04
@author Mark Davis, David Goldsmith, Chen-Lieh Huang, Alan Liu
@since JDK1.1"
      classrelation 136475 // <realization>
	relation 136475 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 136475 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 133787 "ERA"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Data flow in Calendar
 ---------------------
 The current time is represented in two ways by Calendar: as UTC
 milliseconds from the epoch (1 January 1970 0:00 UTC), and as local
 fields such as MONTH, HOUR, AM_PM, etc.  It is possible to compute the
 millis from the fields, and vice versa.  The data needed to do this
 conversion is encapsulated by a TimeZone object owned by the Calendar.
 The data provided by the TimeZone object may also be overridden if the
 user sets the ZONE_OFFSET and/or DST_OFFSET fields directly. The class
 keeps track of what information was most recently set by the caller, and
 uses that to compute any other information as needed.
 If the user sets the fields using set(), the data flow is as follows.
 This is implemented by the Calendar subclass's computeTime() method.
 During this process, certain fields may be ignored.  The disambiguation
 algorithm for resolving which fields to pay attention to is described
 in the class documentation.
   local fields (YEAR, MONTH, DATE, HOUR, MINUTE, etc.)
           |
           | Using Calendar-specific algorithm
           V
   local standard millis
           |
           | Using TimeZone or user-set ZONE_OFFSET / DST_OFFSET
           V
   UTC millis (in time data member)
 If the user sets the UTC millis using setTime() or setTimeInMillis(),
 the data flow is as follows.  This is implemented by the Calendar
 subclass's computeFields() method.
   UTC millis (in time data member)
           |
           | Using TimeZone getOffset()
           V
   local standard millis
           |
           | Using Calendar-specific algorithm
           V
   local fields (YEAR, MONTH, DATE, HOUR, MINUTE, etc.)
 In general, a round trip from fields, through local and UTC millis, and
 back out to fields is made when necessary.  This is implemented by the
 complete() method.  Resolving a partial set of fields into a UTC millis
 value allows all remaining fields to be generated from that value.  If
 the Calendar is lenient, the fields are also renormalized to standard
 ranges when they are regenerated.

Field number for <code>get</code> and <code>set</code> indicating the
era, e.g., AD or BC in the Julian calendar. This is a calendar-specific
value; see subclass documentation.

@see GregorianCalendar#AD
@see GregorianCalendar#BC
"
      end

      attribute 133915 "YEAR"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating the
year. This is a calendar-specific value; see subclass documentation.
"
      end

      attribute 134043 "MONTH"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating the
month. This is a calendar-specific value. The first month of the year is
<code>JANUARY</code> which is 0; the last depends on the number of months in a year.

@see #JANUARY
@see #FEBRUARY
@see #MARCH
@see #APRIL
@see #MAY
@see #JUNE
@see #JULY
@see #AUGUST
@see #SEPTEMBER
@see #OCTOBER
@see #NOVEMBER
@see #DECEMBER
@see #UNDECIMBER
"
      end

      attribute 134171 "WEEK_OF_YEAR"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating the
week number within the current year.  The first week of the year, as
defined by <code>getFirstDayOfWeek()</code> and
<code>getMinimalDaysInFirstWeek()</code>, has value 1.  Subclasses define
the value of <code>WEEK_OF_YEAR</code> for days before the first week of
the year.

@see #getFirstDayOfWeek
@see #getMinimalDaysInFirstWeek
"
      end

      attribute 134299 "WEEK_OF_MONTH"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating the
week number within the current month.  The first week of the month, as
defined by <code>getFirstDayOfWeek()</code> and
<code>getMinimalDaysInFirstWeek()</code>, has value 1.  Subclasses define
the value of <code>WEEK_OF_MONTH</code> for days before the first week of
the month.

@see #getFirstDayOfWeek
@see #getMinimalDaysInFirstWeek
"
      end

      attribute 134427 "DATE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating the
day of the month. This is a synonym for <code>DAY_OF_MONTH</code>.
The first day of the month has value 1.

@see #DAY_OF_MONTH
"
      end

      attribute 134555 "DAY_OF_MONTH"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating the
day of the month. This is a synonym for <code>DATE</code>.
The first day of the month has value 1.

@see #DATE
"
      end

      attribute 134683 "DAY_OF_YEAR"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating the day
number within the current year.  The first day of the year has value 1.
"
      end

      attribute 134811 "DAY_OF_WEEK"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating the day
of the week.  This field takes values <code>SUNDAY</code>,
<code>MONDAY</code>, <code>TUESDAY</code>, <code>WEDNESDAY</code>,
<code>THURSDAY</code>, <code>FRIDAY</code>, and <code>SATURDAY</code>.

@see #SUNDAY
@see #MONDAY
@see #TUESDAY
@see #WEDNESDAY
@see #THURSDAY
@see #FRIDAY
@see #SATURDAY
"
      end

      attribute 134939 "DAY_OF_WEEK_IN_MONTH"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating the
ordinal number of the day of the week within the current month. Together
with the <code>DAY_OF_WEEK</code> field, this uniquely specifies a day
within a month.  Unlike <code>WEEK_OF_MONTH</code> and
<code>WEEK_OF_YEAR</code>, this field's value does <em>not</em> depend on
<code>getFirstDayOfWeek()</code> or
<code>getMinimalDaysInFirstWeek()</code>.  <code>DAY_OF_MONTH 1</code>
through <code>7</code> always correspond to <code>DAY_OF_WEEK_IN_MONTH
1</code>; <code>8</code> through <code>14</code> correspond to
<code>DAY_OF_WEEK_IN_MONTH 2</code>, and so on.
<code>DAY_OF_WEEK_IN_MONTH 0</code> indicates the week before
<code>DAY_OF_WEEK_IN_MONTH 1</code>.  Negative values count back from the
end of the month, so the last Sunday of a month is specified as
<code>DAY_OF_WEEK = SUNDAY, DAY_OF_WEEK_IN_MONTH = -1</code>.  Because
negative values count backward they will usually be aligned differently
within the month than positive values.  For example, if a month has 31
days, <code>DAY_OF_WEEK_IN_MONTH -1</code> will overlap
<code>DAY_OF_WEEK_IN_MONTH 5</code> and the end of <code>4</code>.

@see #DAY_OF_WEEK
@see #WEEK_OF_MONTH
"
      end

      attribute 135067 "AM_PM"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating
whether the <code>HOUR</code> is before or after noon.
E.g., at 10:04:15.250 PM the <code>AM_PM</code> is <code>PM</code>.

@see #AM
@see #PM
@see #HOUR
"
      end

      attribute 135195 "HOUR"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating the
hour of the morning or afternoon. <code>HOUR</code> is used for the
12-hour clock (0 - 11). Noon and midnight are represented by 0, not by 12.
E.g., at 10:04:15.250 PM the <code>HOUR</code> is 10.

@see #AM_PM
@see #HOUR_OF_DAY
"
      end

      attribute 135323 "HOUR_OF_DAY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating the
hour of the day. <code>HOUR_OF_DAY</code> is used for the 24-hour clock.
E.g., at 10:04:15.250 PM the <code>HOUR_OF_DAY</code> is 22.

@see #HOUR
"
      end

      attribute 135451 "MINUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating the
minute within the hour.
E.g., at 10:04:15.250 PM the <code>MINUTE</code> is 4.
"
      end

      attribute 135579 "SECOND"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating the
second within the minute.
E.g., at 10:04:15.250 PM the <code>SECOND</code> is 15.
"
      end

      attribute 135707 "MILLISECOND"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating the
millisecond within the second.
E.g., at 10:04:15.250 PM the <code>MILLISECOND</code> is 250.
"
      end

      attribute 135835 "ZONE_OFFSET"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code>
indicating the raw offset from GMT in milliseconds.
<p>
This field reflects the correct GMT offset value of the time
zone of this <code>Calendar</code> if the
<code>TimeZone</code> implementation subclass supports
historical GMT offset changes.
"
      end

      attribute 135963 "DST_OFFSET"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field number for <code>get</code> and <code>set</code> indicating the
daylight savings offset in milliseconds.
<p>
This field reflects the correct daylight saving offset value of
the time zone of this <code>Calendar</code> if the
<code>TimeZone</code> implementation subclass supports
historical Daylight Saving Time schedule changes.
"
      end

      attribute 136091 "FIELD_COUNT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  17"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of distinct fields recognized by <code>get</code> and <code>set</code>.
Field numbers range from <code>0..FIELD_COUNT-1</code>.
"
      end

      attribute 136219 "SUNDAY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #DAY_OF_WEEK} field indicating
Sunday.
"
      end

      attribute 136347 "MONDAY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #DAY_OF_WEEK} field indicating
Monday.
"
      end

      attribute 136475 "TUESDAY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #DAY_OF_WEEK} field indicating
Tuesday.
"
      end

      attribute 136603 "WEDNESDAY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #DAY_OF_WEEK} field indicating
Wednesday.
"
      end

      attribute 136731 "THURSDAY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #DAY_OF_WEEK} field indicating
Thursday.
"
      end

      attribute 136859 "FRIDAY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #DAY_OF_WEEK} field indicating
Friday.
"
      end

      attribute 136987 "SATURDAY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #DAY_OF_WEEK} field indicating
Saturday.
"
      end

      attribute 137115 "JANUARY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #MONTH} field indicating the
first month of the year.
"
      end

      attribute 137243 "FEBRUARY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #MONTH} field indicating the
second month of the year.
"
      end

      attribute 137371 "MARCH"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #MONTH} field indicating the
third month of the year.
"
      end

      attribute 137499 "APRIL"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #MONTH} field indicating the
fourth month of the year.
"
      end

      attribute 137627 "MAY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #MONTH} field indicating the
fifth month of the year.
"
      end

      attribute 137755 "JUNE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #MONTH} field indicating the
sixth month of the year.
"
      end

      attribute 137883 "JULY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #MONTH} field indicating the
seventh month of the year.
"
      end

      attribute 138011 "AUGUST"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #MONTH} field indicating the
eighth month of the year.
"
      end

      attribute 138139 "SEPTEMBER"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #MONTH} field indicating the
ninth month of the year.
"
      end

      attribute 138267 "OCTOBER"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #MONTH} field indicating the
tenth month of the year.
"
      end

      attribute 138395 "NOVEMBER"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #MONTH} field indicating the
eleventh month of the year.
"
      end

      attribute 138523 "DECEMBER"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #MONTH} field indicating the
twelfth month of the year.
"
      end

      attribute 138651 "UNDECIMBER"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #MONTH} field indicating the
thirteenth month of the year. Although <code>GregorianCalendar</code>
does not use this value, lunar calendars do.
"
      end

      attribute 138779 "AM"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #AM_PM} field indicating the
period of the day from midnight to just before noon.
"
      end

      attribute 138907 "PM"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #AM_PM} field indicating the
period of the day from noon to just before midnight.
"
      end

      attribute 139035 "fields"
	protected explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Internal notes:
 Calendar contains two kinds of time representations: current \"time\" in
 milliseconds, and a set of calendar \"fields\" representing the current time.
 The two representations are usually in sync, but can get out of sync
 as follows.
 1. Initially, no fields are set, and the time is invalid.
 2. If the time is set, all fields are computed and in sync.
 3. If a single field is set, the time is invalid.
 Recomputation of the time and fields happens when the object needs
 to return a result to the user, or use a result for a computation.

The calendar field values for the currently set time for this calendar.
This is an array of <code>FIELD_COUNT</code> integers, with index values
<code>ERA</code> through <code>DST_OFFSET</code>.
@serial
"
      end

      attribute 139163 "isSet"
	protected explicit_type "boolean"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The flags which tell if a specified calendar field for the calendar is set.
A new object has no fields set.  After the first call to a method
which generates the fields, they all remain set after that.
This is an array of <code>FIELD_COUNT</code> booleans, with index values
<code>ERA</code> through <code>DST_OFFSET</code>.
@serial
"
      end

      attribute 139291 "stamp"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Pseudo-time-stamps which specify when each field was set. There
are two special values, UNSET and COMPUTED. Values from
MINIMUM_USER_SET to Integer.MAX_VALUE are legal user set values.
"
      end

      attribute 139419 "time"
	protected explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The currently set time for this calendar, expressed in milliseconds after
January 1, 1970, 0:00:00 GMT.
@see #isTimeSet
@serial
"
      end

      attribute 139547 "isTimeSet"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True if then the value of <code>time</code> is valid.
The time is made invalid by a change to an item of <code>field[]</code>.
@see #time
@serial
"
      end

      attribute 139675 "areFieldsSet"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True if <code>fields[]</code> are in sync with the currently set time.
If false, then the next attempt to get the value of a field will
force a recomputation of all fields from the current value of
<code>time</code>.
@serial
"
      end

      attribute 139803 "areAllFieldsSet"
	package explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True if all fields have been set.
@serial
"
      end

      attribute 139931 "lenient"
	private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<code>True</code> if this calendar allows out-of-range field values during computation
of <code>time</code> from <code>fields[]</code>.
@see #setLenient
@see #isLenient
@serial
"
      end

      classrelation 136859 // zone (<unidirectional association>)
	relation 136859 --->
	  a role_name "zone" private
	    comment "
The <code>TimeZone</code> used by this calendar. <code>Calendar</code>
uses the time zone data to translate between locale and GMT time.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 136859 // zone (<unidirectional association>)
	  b parent class_ref 138779 // TimeZone
      end

      attribute 140059 "sharedZone"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<code>True</code> if zone references to a shared TimeZone object.
"
      end

      attribute 140187 "firstDayOfWeek"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The first day of the week, with possible values <code>SUNDAY</code>,
<code>MONDAY</code>, etc.  This is a locale-dependent value.
@serial
"
      end

      attribute 140315 "minimalDaysInFirstWeek"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of days required for the first week in a month or year,
with possible values from 1 to 7.  This is a locale-dependent value.
@serial
"
      end

      classrelation 136987 // cachedLocaleData (<unidirectional association>)
	relation 136987 --->
	  a role_name "cachedLocaleData" init_value "=  new Hashtable<Locale, int[]>(3)" class_relation private
	    comment "
Cache to hold the firstDayOfWeek and minimalDaysInFirstWeek
of a Locale.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Locale, int[]> ${name}${value};
"
	    classrelation_ref 136987 // cachedLocaleData (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end

      attribute 140443 "UNSET"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Special values of stamp[]

The corresponding fields[] has no value.
"
      end

      attribute 140571 "COMPUTED"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The value of the corresponding fields[] has been calculated internally.
"
      end

      attribute 140699 "MINIMUM_USER_STAMP"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The value of the corresponding fields[] has been set externally. Stamp
values which are greater than 1 represents the (pseudo) time when the
corresponding fields[] value was set.
"
      end

      attribute 140827 "ALL_FIELDS"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << FIELD_COUNT) - 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The mask value that represents all of the fields.
"
      end

      attribute 140955 "nextStamp"
	private explicit_type "int"
	init_value "=  MINIMUM_USER_STAMP"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The next available value for <code>stamp[]</code>, an internal array.
This actually should not be written out to the stream, and will probably
be removed from the stream in the near future.  In the meantime,
a value of <code>MINIMUM_USER_STAMP</code> should be used.
@serial
"
      end

      attribute 141083 "currentSerialVersion"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the internal serial version which says which version was written
 - 0 (default) for version up to JDK 1.1.5
 - 1 for version from JDK 1.1.6, which writes a correct 'time' value
     as well as compatible values for other fields.  This is a
     transitional format.
 - 2 (not implemented yet) a future version, in which fields[],
     areFieldsSet, and isTimeSet become transient, and isSet[] is
     removed. In JDK 1.1.6 we write a format compatible with version 2."
      end

      attribute 141211 "serialVersionOnStream"
	private explicit_type "int"
	init_value "=  currentSerialVersion"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The version of the serialized data on the stream.  Possible values:
<dl>
<dt><b>0</b> or not present on stream</dt>
<dd>
JDK 1.1.5 or earlier.
</dd>
<dt><b>1</b></dt>
<dd>
JDK 1.1.6 or later.  Writes a correct 'time' value
as well as compatible values for other fields.  This is a
transitional format.
</dd>
</dl>
When streaming out this class, the most recent format
and the highest allowable <code>serialVersionOnStream</code>
is written.
@serial
@since JDK1.1.6
"
      end

      attribute 141339 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -1807547505821590642L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Proclaim serialization compatibility with JDK 1.1"
      end

      attribute 141467 "ERA_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << ERA)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Mask values for calendar fields"
      end

      attribute 141595 "YEAR_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << YEAR)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 141723 "MONTH_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << MONTH)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 141851 "WEEK_OF_YEAR_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << WEEK_OF_YEAR)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 141979 "WEEK_OF_MONTH_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << WEEK_OF_MONTH)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142107 "DAY_OF_MONTH_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << DAY_OF_MONTH)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142235 "DATE_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  DAY_OF_MONTH_MASK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142363 "DAY_OF_YEAR_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << DAY_OF_YEAR)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142491 "DAY_OF_WEEK_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << DAY_OF_WEEK)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142619 "DAY_OF_WEEK_IN_MONTH_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << DAY_OF_WEEK_IN_MONTH)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142747 "AM_PM_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << AM_PM)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142875 "HOUR_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << HOUR)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143003 "HOUR_OF_DAY_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << HOUR_OF_DAY)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143131 "MINUTE_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << MINUTE)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143259 "SECOND_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << SECOND)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143387 "MILLISECOND_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << MILLISECOND)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143515 "ZONE_OFFSET_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << ZONE_OFFSET)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143643 "DST_OFFSET_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  (1 << DST_OFFSET)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 187035 "Calendar"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Calendar with the default time zone
and locale.
@see     TimeZone#getDefault"
      end

      operation 187163 "Calendar"
	protected explicit_return_type ""
	nparams 2
	  param inout name "zone" type class_ref 138779 // TimeZone
	  param inout name "aLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a calendar with the specified time zone and locale.

@param zone the time zone to use
@param aLocale the locale for the week data"
      end

      operation 187291 "getInstance"
	class_operation public return_type class_ref 138523 // Calendar
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a calendar using the default time zone and locale. The
<code>Calendar</code> returned is based on the current time
in the default time zone with the default locale.

@return a Calendar."
      end

      operation 187419 "getInstance"
	class_operation public return_type class_ref 138523 // Calendar
	nparams 1
	  param inout name "zone" type class_ref 138779 // TimeZone
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a calendar using the specified time zone and default locale.
The <code>Calendar</code> returned is based on the current time
in the given time zone with the default locale. 

@param zone the time zone to use
@return a Calendar."
      end

      operation 187547 "getInstance"
	class_operation public return_type class_ref 138523 // Calendar
	nparams 1
	  param inout name "aLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a calendar using the default time zone and specified locale.
The <code>Calendar</code> returned is based on the current time
in the default time zone with the given locale.

@param aLocale the locale for the week data
@return a Calendar."
      end

      operation 187675 "getInstance"
	class_operation public return_type class_ref 138523 // Calendar
	nparams 2
	  param inout name "zone" type class_ref 138779 // TimeZone
	  param inout name "aLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a calendar with the specified time zone and locale.
The <code>Calendar</code> returned is based on the current time
in the given time zone with the given locale.

@param zone the time zone to use
@param aLocale the locale for the week data
@return a Calendar."
      end

      operation 187803 "createCalendar"
	class_operation private return_type class_ref 138523 // Calendar
	nparams 2
	  param inout name "zone" type class_ref 138779 // TimeZone
	  param inout name "aLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 187931 "getAvailableLocales"
	class_operation public return_type class_ref 138907 // Locale
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all locales for which the <code>getInstance</code>
methods of this class can return localized instances.
The array returned must contain at least a <code>Locale</code>
instance equal to {@link java.util.Locale#US Locale.US}.

@return An array of locales for which localized
        <code>Calendar</code> instances are available."
      end

      operation 188059 "computeTime"
	abstract protected explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the current calendar field values in {@link #fields fields[]}
to the millisecond time value
{@link #time}.

@see #complete()
@see #computeFields()"
      end

      operation 188187 "computeFields"
	abstract protected explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the current millisecond time value {@link #time}
to calendar field values in {@link #fields fields[]}.
This allows you to sync up the calendar field values with
a new time that is set for the calendar.  The time is <em>not</em>
recomputed first; to recompute the time, then the fields, call the
{@link #complete()} method.

@see #computeTime()"
      end

      operation 188315 "getTime"
	public return_type class_ref 139163 // Date
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Date</code> object representing this
<code>Calendar</code>'s time value (millisecond offset from the <a
href=\"#Epoch\">Epoch</a>\").

@return a <code>Date</code> representing the time value.
@see #setTime(Date)
@see #getTimeInMillis()"
      end

      operation 188443 "setTime"
	public explicit_return_type "void"
	nparams 1
	  param inout name "date" type class_ref 139163 // Date
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this Calendar's time with the given <code>Date</code>.
<p>
Note: Calling <code>setTime()</code> with
<code>Date(Long.MAX_VALUE)</code> or <code>Date(Long.MIN_VALUE)</code>
may yield incorrect field values from <code>get()</code>.

@param date the given Date.
@see #getTime()
@see #setTimeInMillis(long)"
      end

      operation 188571 "getTimeInMillis"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this Calendar's time value in milliseconds. 

@return the current time as UTC milliseconds from the epoch.
@see #getTime()
@see #setTimeInMillis(long)"
      end

      operation 188699 "setTimeInMillis"
	public explicit_return_type "void"
	nparams 1
	  param in name "millis" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this Calendar's current time from the given long value.

@param millis the new time in UTC milliseconds from the epoch.
@see #setTime(Date)
@see #getTimeInMillis()"
      end

      operation 188827 "get"
	public explicit_return_type "int"
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the given calendar field. In lenient mode,
all calendar fields are normalized. In non-lenient mode, all
calendar fields are validated and this method throws an
exception if any calendar fields have out-of-range values. The
normalization and validation are handled by the
{@link #complete()} method, which process is calendar
system dependent.

@param field the given calendar field.
@return the value for the given calendar field.
@throws ArrayIndexOutOfBoundsException if the specified field is out of range
            (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).
@see #set(int,int)
@see #complete()"
      end

      operation 188955 "internalGet"
	protected explicit_return_type "int"
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the given calendar field. This method does
not involve normalization or validation of the field value.

@param field the given calendar field.
@return the value for the given calendar field.
@see #get(int)"
      end

      operation 189083 "internalSet"
	package explicit_return_type "void"
	nparams 2
	  param in name "field" explicit_type "int"
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the given calendar field. This method does
not affect any setting state of the field in this
<code>Calendar</code> instance.

@throws IndexOutOfBoundsException if the specified field is out of range
            (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).
@see #areFieldsSet
@see #isTimeSet
@see #areAllFieldsSet
@see #set(int,int)"
      end

      operation 189211 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "field" explicit_type "int"
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given calendar field to the given value. The value is not
interpreted by this method regardless of the leniency mode.

@param field the given calendar field.
@param value the value to be set for the given calendar field.
@throws ArrayIndexOutOfBoundsException if the specified field is out of range
            (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).
in non-lenient mode.
@see #set(int,int,int)
@see #set(int,int,int,int,int)
@see #set(int,int,int,int,int,int)
@see #get(int)"
      end

      operation 189339 "set"
	public explicit_return_type "void"
	nparams 3
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "date" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the values for the calendar fields <code>YEAR</code>,
<code>MONTH</code>, and <code>DAY_OF_MONTH</code>.
Previous values of other calendar fields are retained.  If this is not desired,
call {@link #clear()} first.

@param year the value used to set the <code>YEAR</code> calendar field.
@param month the value used to set the <code>MONTH</code> calendar field.
Month value is 0-based. e.g., 0 for January.
@param date the value used to set the <code>DAY_OF_MONTH</code> calendar field.
@see #set(int,int)
@see #set(int,int,int,int,int)
@see #set(int,int,int,int,int,int)"
      end

      operation 189467 "set"
	public explicit_return_type "void"
	nparams 5
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "date" explicit_type "int"
	  param in name "hourOfDay" explicit_type "int"
	  param in name "minute" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the values for the calendar fields <code>YEAR</code>,
<code>MONTH</code>, <code>DAY_OF_MONTH</code>,
<code>HOUR_OF_DAY</code>, and <code>MINUTE</code>.
Previous values of other fields are retained.  If this is not desired,
call {@link #clear()} first.

@param year the value used to set the <code>YEAR</code> calendar field.
@param month the value used to set the <code>MONTH</code> calendar field.
Month value is 0-based. e.g., 0 for January.
@param date the value used to set the <code>DAY_OF_MONTH</code> calendar field.
@param hourOfDay the value used to set the <code>HOUR_OF_DAY</code> calendar field.
@param minute the value used to set the <code>MINUTE</code> calendar field.
@see #set(int,int)
@see #set(int,int,int)
@see #set(int,int,int,int,int,int)"
      end

      operation 189595 "set"
	public explicit_return_type "void"
	nparams 6
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "date" explicit_type "int"
	  param in name "hourOfDay" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the values for the fields <code>YEAR</code>, <code>MONTH</code>,
<code>DAY_OF_MONTH</code>, <code>HOUR</code>, <code>MINUTE</code>, and
<code>SECOND</code>.
Previous values of other fields are retained.  If this is not desired,
call {@link #clear()} first.

@param year the value used to set the <code>YEAR</code> calendar field.
@param month the value used to set the <code>MONTH</code> calendar field.
Month value is 0-based. e.g., 0 for January.
@param date the value used to set the <code>DAY_OF_MONTH</code> calendar field.
@param hourOfDay the value used to set the <code>HOUR_OF_DAY</code> calendar field.
@param minute the value used to set the <code>MINUTE</code> calendar field.
@param second the value used to set the <code>SECOND</code> calendar field.
@see #set(int,int)
@see #set(int,int,int)
@see #set(int,int,int,int,int)"
      end

      operation 189723 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets all the calendar field values and the time value
(millisecond offset from the <a href=\"#Epoch\">Epoch</a>) of
this <code>Calendar</code> undefined. This means that {@link
#isSet(int) isSet()} will return <code>false</code> for all the
calendar fields, and the date and time calculations will treat
the fields as if they had never been set. A
<code>Calendar</code> implementation class may use its specific
default field values for date/time calculations. For example,
<code>GregorianCalendar</code> uses 1970 if the
<code>YEAR</code> field value is undefined.

@see #clear(int)"
      end

      operation 189851 "clear"
	public explicit_return_type "void"
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given calendar field value and the time value
(millisecond offset from the <a href=\"#Epoch\">Epoch</a>) of
this <code>Calendar</code> undefined. This means that {@link
#isSet(int) isSet(field)} will return <code>false</code>, and
the date and time calculations will treat the field as if it
had never been set. A <code>Calendar</code> implementation
class may use the field's specific default value for date and
time calculations.

<p>The {@link #HOUR_OF_DAY}, {@link #HOUR} and {@link #AM_PM}
fields are handled independently and the <a
href=\"#time_resolution\">the resolution rule for the time of
day</a> is applied. Clearing one of the fields doesn't reset
the hour of day value of this <code>Calendar</code>. Use {@link
#set(int,int) set(Calendar.HOUR_OF_DAY, 0)} to reset the hour
value.

@param field the calendar field to be cleared.
@see #clear()"
      end

      operation 189979 "isSet"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the given calendar field has a value set,
including cases that the value has been set by internal fields
calculations triggered by a <code>get</code> method call.

@return <code>true</code> if the given calendar field has a value set;
<code>false</code> otherwise."
      end

      operation 190107 "complete"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fills in any unset fields in the calendar fields. First, the {@link
#computeTime()} method is called if the time value (millisecond offset
from the <a href=\"#Epoch\">Epoch</a>) has not been calculated from
calendar field values. Then, the {@link #computeFields()} method is
called to calculate all calendar field values."
      end

      operation 190235 "isExternallySet"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the value of the specified calendar field has been set
externally by calling one of the setter methods rather than by the
internal time calculation.

@return <code>true</code> if the field has been set externally,
<code>false</code> otherwise.
@exception IndexOutOfBoundsException if the specified
               <code>field</code> is out of range
              (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).
@see #selectFields()
@see #setFieldsComputed(int)"
      end

      operation 190363 "getSetStateFields"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a field mask (bit mask) indicating all calendar fields that
have the state of externally or internally set.

@return a bit mask indicating set state fields"
      end

      operation 190491 "setFieldsComputed"
	package explicit_return_type "void"
	nparams 1
	  param in name "fieldMask" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the state of the specified calendar fields to
<em>computed</em>. This state means that the specified calendar fields
have valid values that have been set by internal time calculation
rather than by calling one of the setter methods.

@param fieldMask the field to be marked as computed.
@exception IndexOutOfBoundsException if the specified
               <code>field</code> is out of range
              (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).
@see #isExternallySet(int)
@see #selectFields()"
      end

      operation 190619 "setFieldsNormalized"
	package explicit_return_type "void"
	nparams 1
	  param in name "fieldMask" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the state of the calendar fields that are <em>not</em> specified
by <code>fieldMask</code> to <em>unset</em>. If <code>fieldMask</code>
specifies all the calendar fields, then the state of this
<code>Calendar</code> becomes that all the calendar fields are in sync
with the time value (millisecond offset from the Epoch).

@param fieldMask the field mask indicating which calendar fields are in
sync with the time value.
@exception IndexOutOfBoundsException if the specified
               <code>field</code> is out of range
              (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).
@see #isExternallySet(int)
@see #selectFields()"
      end

      operation 190747 "isPartiallyNormalized"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the calendar fields are partially in sync with the time
value."
      end

      operation 190875 "isFullyNormalized"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the calendar fields are fully in sync with the time
value."
      end

      operation 191003 "setUnnormalized"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks this Calendar as not sync'd."
      end

      operation 191131 "isFieldSet"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param in name "fieldMask" explicit_type "int"
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the specified <code>field</code> is on in the
<code>fieldMask</code>."
      end

      operation 191259 "selectFields"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a field mask indicating which calendar field values
to be used to calculate the time value. The calendar fields are
returned as a bit mask, each bit of which corresponds to a field, i.e.,
the mask value of <code>field</code> is <code>(1 &lt;&lt;
field)</code>. For example, 0x26 represents the <code>YEAR</code>,
<code>MONTH</code>, and <code>DAY_OF_MONTH</code> fields (i.e., 0x26 is
equal to
<code>(1&lt;&lt;YEAR)|(1&lt;&lt;MONTH)|(1&lt;&lt;DAY_OF_MONTH))</code>.

<p>This method supports the calendar fields resolution as described in
the class description. If the bit mask for a given field is on and its
field has not been set (i.e., <code>isSet(field)</code> is
<code>false</code>), then the default value of the field has to be
used, which case means that the field has been selected because the
selected combination involves the field.

@return a bit mask of selected fields
@see #isExternallySet(int)
@see #setInternallySetState(int)"
      end

      operation 191387 "aggregateStamp"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "stamp_a" explicit_type "int"
	  param in name "stamp_b" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pseudo-time-stamp for two fields, given their
individual pseudo-time-stamps.  If either of the fields
is unset, then the aggregate is unset.  Otherwise, the
aggregate is the later of the two stamps."
      end

      operation 191515 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>Calendar</code> to the specified
<code>Object</code>.  The result is <code>true</code> if and only if
the argument is a <code>Calendar</code> object of the same calendar
system that represents the same time value (millisecond offset from the
<a href=\"#Epoch\">Epoch</a>) under the same
<code>Calendar</code> parameters as this object.

<p>The <code>Calendar</code> parameters are the values represented
by the <code>isLenient</code>, <code>getFirstDayOfWeek</code>,
<code>getMinimalDaysInFirstWeek</code> and <code>getTimeZone</code>
methods. If there is any difference in those parameters
between the two <code>Calendar</code>s, this method returns
<code>false</code>.

<p>Use the {@link #compareTo(Calendar) compareTo} method to
compare only the time values.

@param obj the object to compare with.
@return <code>true</code> if this object is equal to <code>obj</code>;
<code>false</code> otherwise."
      end

      operation 191643 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this calendar.

@return a hash code value for this object. 
@since 1.2"
      end

      operation 191771 "before"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "when" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this <code>Calendar</code> represents a time
before the time represented by the specified
<code>Object</code>. This method is equivalent to:
<pre><blockquote>
        compareTo(when) < 0
</blockquote></pre>
if and only if <code>when</code> is a <code>Calendar</code>
instance. Otherwise, the method returns <code>false</code>.

@param when the <code>Object</code> to be compared
@return <code>true</code> if the time of this
<code>Calendar</code> is before the time represented by
<code>when</code>; <code>false</code> otherwise.
@see	#compareTo(Calendar)"
      end

      operation 191899 "after"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "when" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this <code>Calendar</code> represents a time
after the time represented by the specified
<code>Object</code>. This method is equivalent to:
<pre><blockquote>
        compareTo(when) > 0
</blockquote></pre>
if and only if <code>when</code> is a <code>Calendar</code>
instance. Otherwise, the method returns <code>false</code>.

@param when the <code>Object</code> to be compared
@return <code>true</code> if the time of this <code>Calendar</code> is
after the time represented by <code>when</code>; <code>false</code>
otherwise.
@see	#compareTo(Calendar)"
      end

      operation 192027 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "anotherCalendar" type class_ref 138523 // Calendar
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the time values (millisecond offsets from the <a
href=\"#Epoch\">Epoch</a>) represented by two
<code>Calendar</code> objects.

@param anotherCalendar the <code>Calendar</code> to be compared.
@return the value <code>0</code> if the time represented by the argument
is equal to the time represented by this <code>Calendar</code>; a value
less than <code>0</code> if the time of this <code>Calendar</code> is
before the time represented by the argument; and a value greater than
<code>0</code> if the time of this <code>Calendar</code> is after the
time represented by the argument.
@exception NullPointerException if the specified <code>Calendar</code> is
           <code>null</code>.
@exception IllegalArgumentException if the time value of the
specified <code>Calendar</code> object can't be obtained due to
any invalid calendar values.
@since   1.5"
      end

      operation 192155 "add"
	abstract public explicit_return_type "void"
	nparams 2
	  param in name "field" explicit_type "int"
	  param in name "amount" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds or subtracts the specified amount of time to the given calendar field,
based on the calendar's rules. For example, to subtract 5 days from
the current time of the calendar, you can achieve it by calling:
<p><code>add(Calendar.DAY_OF_MONTH, -5)</code>.

@param field the calendar field.
@param amount the amount of date or time to be added to the field.
@see #roll(int,int)
@see #set(int,int)"
      end

      operation 192283 "roll"
	abstract public explicit_return_type "void"
	nparams 2
	  param in name "field" explicit_type "int"
	  param inout name "up" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds or subtracts (up/down) a single unit of time on the given time 
field without changing larger fields. For example, to roll the current 
date up by one day, you can achieve it by calling:
<p>roll(Calendar.DATE, true).
When rolling on the year or Calendar.YEAR field, it will roll the year
value in the range between 1 and the value returned by calling
<code>getMaximum(Calendar.YEAR)</code>.
When rolling on the month or Calendar.MONTH field, other fields like
date might conflict and, need to be changed. For instance,
rolling the month on the date 01/31/96 will result in 02/29/96.
When rolling on the hour-in-day or Calendar.HOUR_OF_DAY field, it will
roll the hour value in the range between 0 and 23, which is zero-based.

@param field the time field.
@param up indicates if the value of the specified time field is to be
rolled up or rolled down. Use true if rolling up, false otherwise.
@see Calendar#add(int,int)
@see Calendar#set(int,int)"
      end

      operation 192411 "roll"
	public explicit_return_type "void"
	nparams 2
	  param in name "field" explicit_type "int"
	  param in name "amount" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified (signed) amount to the specified calendar field
without changing larger fields.  A negative amount means to roll
down.

<p>NOTE:  This default implementation on <code>Calendar</code> just repeatedly calls the
version of {@link #roll(int,boolean) roll()} that rolls by one unit.  This may not
always do the right thing.  For example, if the <code>DAY_OF_MONTH</code> field is 31,
rolling through February will leave it set to 28.  The <code>GregorianCalendar</code>
version of this function takes care of this problem.  Other subclasses
should also provide overrides of this function that do the right thing.

@param field the calendar field.
@param amount the signed amount to add to the calendar <code>field</code>.
@since 1.2
@see #roll(int,boolean)
@see #add(int,int)
@see #set(int,int)"
      end

      operation 192539 "setTimeZone"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 138779 // TimeZone
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time zone with the given time zone value.

@param value the given time zone."
      end

      operation 192667 "getTimeZone"
	public return_type class_ref 138779 // TimeZone
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the time zone.

@return the time zone object associated with this calendar."
      end

      operation 192795 "getZone"
	package return_type class_ref 138779 // TimeZone
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the time zone (without cloning)."
      end

      operation 192923 "setZoneShared"
	package explicit_return_type "void"
	nparams 1
	  param inout name "shared" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the sharedZone flag to <code>shared</code>."
      end

      operation 193051 "setLenient"
	public explicit_return_type "void"
	nparams 1
	  param inout name "lenient" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies whether or not date/time interpretation is to be lenient.  With
lenient interpretation, a date such as \"February 942, 1996\" will be
treated as being equivalent to the 941st day after February 1, 1996.
With strict (non-lenient) interpretation, such dates will cause an exception to be
thrown. The default is lenient.

@param lenient <code>true</code> if the lenient mode is to be turned
on; <code>false</code> if it is to be turned off.
@see #isLenient()
@see java.text.DateFormat#setLenient"
      end

      operation 193179 "isLenient"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether date/time interpretation is to be lenient.

@return <code>true</code> if the interpretation mode of this calendar is lenient;
<code>false</code> otherwise.
@see #setLenient(boolean)"
      end

      operation 193307 "setFirstDayOfWeek"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets what the first day of the week is; e.g., <code>SUNDAY</code> in the U.S.,
<code>MONDAY</code> in France.

@param value the given first day of the week.
@see #getFirstDayOfWeek()
@see #getMinimalDaysInFirstWeek()"
      end

      operation 193435 "getFirstDayOfWeek"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets what the first day of the week is; e.g., <code>SUNDAY</code> in the U.S.,
<code>MONDAY</code> in France.

@return the first day of the week.
@see #setFirstDayOfWeek(int)
@see #getMinimalDaysInFirstWeek()"
      end

      operation 193563 "setMinimalDaysInFirstWeek"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets what the minimal days required in the first week of the year are;
For example, if the first week is defined as one that contains the first
day of the first month of a year, call this method with value 1. If it
must be a full week, use value 7.

@param value the given minimal days required in the first week
of the year.
@see #getMinimalDaysInFirstWeek()"
      end

      operation 193691 "getMinimalDaysInFirstWeek"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets what the minimal days required in the first week of the year are;
e.g., if the first week is defined as one that contains the first day
of the first month of a year, this method returns 1. If
the minimal days required must be a full week, this method
returns 7.

@return the minimal days required in the first week of the year.
@see #setMinimalDaysInFirstWeek(int)"
      end

      operation 193819 "getMinimum"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "field" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum value for the given calendar field of this
<code>Calendar</code> instance. The minimum value is defined as
the smallest value returned by the {@link #get(int) get} method
for any possible time value.  The minimum value depends on
calendar system specific parameters of the instance.

@param field the calendar field.
@return the minimum value for the given calendar field.
@see #getMaximum(int)
@see #getGreatestMinimum(int)
@see #getLeastMaximum(int)
@see #getActualMinimum(int)
@see #getActualMaximum(int)"
      end

      operation 193947 "getMaximum"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "field" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum value for the given calendar field of this
<code>Calendar</code> instance. The maximum value is defined as
the largest value returned by the {@link #get(int) get} method
for any possible time value. The maximum value depends on
calendar system specific parameters of the instance.

@param field the calendar field.
@return the maximum value for the given calendar field.
@see #getMinimum(int)
@see #getGreatestMinimum(int)
@see #getLeastMaximum(int)
@see #getActualMinimum(int)
@see #getActualMaximum(int)"
      end

      operation 194075 "getGreatestMinimum"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "field" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the highest minimum value for the given calendar field
of this <code>Calendar</code> instance. The highest minimum
value is defined as the largest value returned by {@link
#getActualMinimum(int)} for any possible time value. The
greatest minimum value depends on calendar system specific
parameters of the instance.

@param field the calendar field.
@return the highest minimum value for the given calendar field.
@see #getMinimum(int)
@see #getMaximum(int)
@see #getLeastMaximum(int)
@see #getActualMinimum(int)
@see #getActualMaximum(int)"
      end

      operation 194203 "getLeastMaximum"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "field" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lowest maximum value for the given calendar field
of this <code>Calendar</code> instance. The lowest maximum
value is defined as the smallest value returned by {@link
#getActualMaximum(int)} for any possible time value. The least
maximum value depends on calendar system specific parameters of
the instance. For example, a <code>Calendar</code> for the
Gregorian calendar system returns 28 for the
<code>DAY_OF_MONTH</code> field, because the 28th is the last
day of the shortest month of this calendar, February in a
common year.

@param field the calendar field.
@return the lowest maximum value for the given calendar field.
@see #getMinimum(int)
@see #getMaximum(int)
@see #getGreatestMinimum(int)
@see #getActualMinimum(int)
@see #getActualMaximum(int)"
      end

      operation 194331 "getActualMinimum"
	public explicit_return_type "int"
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum value that the specified calendar field
could have, given the time value of this <code>Calendar</code>.

<p>The default implementation of this method uses an iterative
algorithm to determine the actual minimum value for the
calendar field. Subclasses should, if possible, override this
with a more efficient implementation - in many cases, they can
simply return <code>getMinimum()</code>.

@param field the calendar field
@return the minimum of the given calendar field for the time
value of this <code>Calendar</code>
@see #getMinimum(int)
@see #getMaximum(int)
@see #getGreatestMinimum(int)
@see #getLeastMaximum(int)
@see #getActualMaximum(int)
@since 1.2"
      end

      operation 194459 "getActualMaximum"
	public explicit_return_type "int"
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum value that the specified calendar field
could have, given the time value of this
<code>Calendar</code>. For example, the actual maximum value of
the <code>MONTH</code> field is 12 in some years, and 13 in
other years in the Hebrew calendar system.

<p>The default implementation of this method uses an iterative
algorithm to determine the actual maximum value for the
calendar field. Subclasses should, if possible, override this
with a more efficient implementation.

@param field the calendar field
@return the maximum of the given calendar field for the time
value of this <code>Calendar</code>
@see #getMinimum(int)
@see #getMaximum(int)
@see #getGreatestMinimum(int)
@see #getLeastMaximum(int)
@see #getActualMinimum(int)
@since 1.2"
      end

      operation 194587 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a copy of this object.

@return a copy of this object."
      end

      attribute 143771 "FIELD_NAME"
	class_attribute const_attribute private explicit_type "String"
	multiplicity "[]"
	init_value "=  {
        \"ERA\", \"YEAR\", \"MONTH\", \"WEEK_OF_YEAR\", \"WEEK_OF_MONTH\", \"DAY_OF_MONTH\",
        \"DAY_OF_YEAR\", \"DAY_OF_WEEK\", \"DAY_OF_WEEK_IN_MONTH\", \"AM_PM\", \"HOUR\",
        \"HOUR_OF_DAY\", \"MINUTE\", \"SECOND\", \"MILLISECOND\", \"ZONE_OFFSET\",
        \"DST_OFFSET\"
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 194715 "getFieldName"
	class_operation package explicit_return_type "String"
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the specified calendar field.

@param field the calendar field
@return the calendar field name
@exception IndexOutOfBoundsException if <code>field</code> is negative,
equal to or greater then <code>FIELD_COUNT</code>."
      end

      operation 194843 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string representation of this calendar. This method 
is intended to be used only for debugging purposes, and the 
format of the returned string may vary between implementations. 
The returned string may be empty but may not be <code>null</code>.

@return  a string representation of this calendar."
      end

      operation 194971 "appendValue"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "sb" explicit_type "StringBuilder"
	  param in name "item" explicit_type "String"
	  param inout name "valid" explicit_type "boolean"
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " =======================privates==============================="
      end

      operation 195099 "setWeekCountData"
	private explicit_return_type "void"
	nparams 1
	  param inout name "desiredLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Both firstDayOfWeek and minimalDaysInFirstWeek are locale-dependent.
They are used to figure out the week count for a specific date for
a given locale. These must be set when a Calendar is constructed.
@param desiredLocale the given locale."
      end

      operation 195227 "updateTime"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Recomputes the time and updates the status fields isTimeSet
and areFieldsSet.  Callers should check isTimeSet and only
call this method if isTimeSet is false."
      end

      operation 195355 "compareTo"
	private explicit_return_type "int"
	nparams 1
	  param in name "t" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 195483 "getMillisOf"
	class_operation private explicit_return_type "long"
	nparams 1
	  param inout name "calendar" type class_ref 138523 // Calendar
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 195611 "adjustStamp"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adjusts the stamp[] values before nextStamp overflow. nextStamp
is set to the next stamp value upon the return."
      end

      operation 195739 "invalidateWeekFields"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the WEEK_OF_MONTH and WEEK_OF_YEAR fields to new values with the
new parameter value if they have been calculated internally."
      end

      operation 195867 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" explicit_type "ObjectOutputStream"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state of this object to a stream (i.e., serialize it).

Ideally, <code>Calendar</code> would only write out its state data and
the current time, and not write any field data out, such as
<code>fields[]</code>, <code>isTimeSet</code>, <code>areFieldsSet</code>,
and <code>isSet[]</code>.  <code>nextStamp</code> also should not be part
of the persistent state. Unfortunately, this didn't happen before JDK 1.1
shipped. To be compatible with JDK 1.1, we will always have to write out
the field values and state flags.  However, <code>nextStamp</code> can be
removed from the serialization stream; this will probably happen in the
near future."
      end

      operation 195995 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" explicit_type "ObjectInputStream"
	nexceptions 2
	  explicit_exception "IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes this object from a stream (i.e., deserialize it)."
      end
    end

    class 138779 "TimeZone"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>TimeZone</code> represents a time zone offset, and also figures out daylight
savings.

<p>
Typically, you get a <code>TimeZone</code> using <code>getDefault</code>
which creates a <code>TimeZone</code> based on the time zone where the program
is running. For example, for a program running in Japan, <code>getDefault</code>
creates a <code>TimeZone</code> object based on Japanese Standard Time.

<p>
You can also get a <code>TimeZone</code> using <code>getTimeZone</code>
along with a time zone ID. For instance, the time zone ID for the
U.S. Pacific Time zone is \"America/Los_Angeles\". So, you can get a
U.S. Pacific Time <code>TimeZone</code> object with:
<blockquote><pre>
TimeZone tz = TimeZone.getTimeZone(\"America/Los_Angeles\");
</pre></blockquote>
You can use the <code>getAvailableIDs</code> method to iterate through
all the supported time zone IDs. You can then choose a
supported ID to get a <code>TimeZone</code>.
If the time zone you want is not represented by one of the
supported IDs, then a custom time zone ID can be specified to
produce a TimeZone. The syntax of a custom time zone ID is:

<blockquote><pre>
<a name=\"CustomID\"><i>CustomID:</i></a>
        <code>GMT</code> <i>Sign</i> <i>Hours</i> <code>:</code> <i>Minutes</i>
        <code>GMT</code> <i>Sign</i> <i>Hours</i> <i>Minutes</i>
        <code>GMT</code> <i>Sign</i> <i>Hours</i>
<i>Sign:</i> one of
        <code>+ -</code>
<i>Hours:</i>
        <i>Digit</i>
        <i>Digit</i> <i>Digit</i>
<i>Minutes:</i>
        <i>Digit</i> <i>Digit</i>
<i>Digit:</i> one of
        <code>0 1 2 3 4 5 6 7 8 9</code>
</pre></blockquote>

<i>Hours</i> must be between 0 to 23 and <i>Minutes</i> must be
between 00 to 59.  For example, \"GMT+10\" and \"GMT+0010\" mean ten
hours and ten minutes ahead of GMT, respectively.
<p>
The format is locale independent and digits must be taken from the
Basic Latin block of the Unicode standard. No daylight saving time
transition schedule can be specified with a custom time zone ID. If
the specified string doesn't match the syntax, <code>\"GMT\"</code>
is used.
<p>
When creating a <code>TimeZone</code>, the specified custom time
zone ID is normalized in the following syntax:
<blockquote><pre>
<a name=\"NormalizedCustomID\"><i>NormalizedCustomID:</i></a>
        <code>GMT</code> <i>Sign</i> <i>TwoDigitHours</i> <code>:</code> <i>Minutes</i>
<i>Sign:</i> one of
        <code>+ -</code>
<i>TwoDigitHours:</i>
        <i>Digit</i> <i>Digit</i>
<i>Minutes:</i>
        <i>Digit</i> <i>Digit</i>
<i>Digit:</i> one of
        <code>0 1 2 3 4 5 6 7 8 9</code>
</pre></blockquote>
For example, TimeZone.getTimeZone(\"GMT-8\").getID() returns \"GMT-08:00\".

<h4>Three-letter time zone IDs</h4>

For compatibility with JDK 1.1.x, some other three-letter time zone IDs
(such as \"PST\", \"CTT\", \"AST\") are also supported. However, <strong>their
use is deprecated</strong> because the same abbreviation is often used
for multiple time zones (for example, \"CST\" could be U.S. \"Central Standard
Time\" and \"China Standard Time\"), and the Java platform can then only
recognize one of them.


@see          Calendar
@see          GregorianCalendar
@see          SimpleTimeZone
@version      1.70 01/24/06
@author       Mark Davis, David Goldsmith, Chen-Lieh Huang, Alan Liu
@since        JDK1.1"
      classrelation 172571 // <realization>
	relation 172571 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 172571 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      operation 353307 "TimeZone"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sole constructor.  (For invocation by subclass constructors, typically
implicit.)"
      end

      attribute 193179 "SHORT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A style specifier for <code>getDisplayName()</code> indicating
a short name, such as \"PST.\"
@see #LONG
@since 1.2
"
      end

      attribute 193307 "LONG"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A style specifier for <code>getDisplayName()</code> indicating
a long name, such as \"Pacific Standard Time.\"
@see #SHORT
@since 1.2
"
      end

      attribute 193435 "ONE_MINUTE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  60*1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Constants used internally; unit is milliseconds"
      end

      attribute 193563 "ONE_HOUR"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  60*ONE_MINUTE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 193691 "ONE_DAY"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  24*ONE_HOUR"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 172827 // cachedLocaleData (<unidirectional association>)
	relation 172827 --->
	  a role_name "cachedLocaleData" init_value "=  new Hashtable(3)" class_relation private
	    comment "
Cache to hold the SimpleDateFormat objects for a Locale.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 172827 // cachedLocaleData (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end

      attribute 193819 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  3581463369166924961L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Proclaim serialization compatibility with JDK 1.1"
      end

      operation 353435 "getOffset"
	abstract public explicit_return_type "int"
	nparams 6
	  param in name "era" explicit_type "int"
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "day" explicit_type "int"
	  param in name "dayOfWeek" explicit_type "int"
	  param in name "milliseconds" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the time zone offset, for current date, modified in case of
daylight savings. This is the offset to add to UTC to get local time.
<p>
This method returns a historically correct offset if an
underlying <code>TimeZone</code> implementation subclass
supports historical Daylight Saving Time schedule and GMT
offset changes.

@param era the era of the given date.
@param year the year in the given date.
@param month the month in the given date.
Month is 0-based. e.g., 0 for January.
@param day the day-in-month of the given date.
@param dayOfWeek the day-of-week of the given date.
@param milliseconds the milliseconds in day in <em>standard</em>
local time.

@return the offset in milliseconds to add to GMT to get local time.

@see Calendar#ZONE_OFFSET
@see Calendar#DST_OFFSET"
      end

      operation 353563 "getOffset"
	public explicit_return_type "int"
	nparams 1
	  param in name "date" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the offset of this time zone from UTC at the specified
date. If Daylight Saving Time is in effect at the specified
date, the offset value is adjusted with the amount of daylight
saving.
<p>
This method returns a historically correct offset value if an
underlying TimeZone implementation subclass supports historical
Daylight Saving Time schedule and GMT offset changes.

@param date the date represented in milliseconds since January 1, 1970 00:00:00 GMT
@return the amount of time in milliseconds to add to UTC to get local time.

@see Calendar#ZONE_OFFSET
@see Calendar#DST_OFFSET
@since 1.4"
      end

      operation 353691 "getOffsets"
	package explicit_return_type "int"
	nparams 2
	  param in name "date" explicit_type "long"
	  param in name "offsets" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the raw GMT offset and the amount of daylight saving of this
time zone at the given time.
@param date the milliseconds (since January 1, 1970,
00:00:00.000 GMT) at which the time zone offset and daylight
saving amount are found
@param offset an array of int where the raw GMT offset
(offset[0]) and daylight saving amount (offset[1]) are stored,
or null if those values are not needed. The method assumes that
the length of the given array is two or larger.
@return the total amount of the raw GMT offset and daylight
saving at the specified date.

@see Calendar#ZONE_OFFSET
@see Calendar#DST_OFFSET"
      end

      operation 353819 "setRawOffset"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "offsetMillis" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the base time zone offset to GMT.
This is the offset to add to UTC to get local time.
<p>
If an underlying <code>TimeZone</code> implementation subclass
supports historical GMT offset changes, the specified GMT
offset is set as the latest GMT offset and the difference from
the known latest GMT offset value is used to adjust all
historical GMT offset values.

@param offsetMillis the given base time zone offset to GMT."
      end

      operation 353947 "getRawOffset"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the amount of time in milliseconds to add to UTC to get
standard time in this time zone. Because this value is not
affected by daylight saving time, it is called <I>raw
offset</I>.
<p>
If an underlying <code>TimeZone</code> implementation subclass
supports historical GMT offset changes, the method returns the
raw offset value of the current date. In Honolulu, for example,
its raw offset changed from GMT-10:30 to GMT-10:00 in 1947, and
this method always returns -36000000 milliseconds (i.e., -10
hours).

@return the amount of raw offset time in milliseconds to add to UTC.
@see Calendar#ZONE_OFFSET"
      end

      operation 354075 "getID"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the ID of this time zone.
@return the ID of this time zone."
      end

      operation 354203 "setID"
	public explicit_return_type "void"
	nparams 1
	  param in name "ID" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time zone ID. This does not change any other data in
the time zone object.
@param ID the new time zone ID."
      end

      operation 354331 "getDisplayName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a name of this time zone suitable for presentation to the user
in the default locale.
This method returns the long name, not including daylight savings.
If the display name is not available for the locale,
then this method returns a string in the 
<a href=\"#NormalizedCustomID\">normalized custom ID format</a>.
@return the human-readable name of this time zone in the default locale.
@since 1.2"
      end

      operation 354459 "getDisplayName"
	public explicit_return_type "String"
	nparams 1
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a name of this time zone suitable for presentation to the user
in the specified locale.
This method returns the long name, not including daylight savings.
If the display name is not available for the locale,
then this method returns a string in the 
<a href=\"#NormalizedCustomID\">normalized custom ID format</a>.
@param locale the locale in which to supply the display name.
@return the human-readable name of this time zone in the given locale
or in the default locale if the given locale is not recognized.
@since 1.2"
      end

      operation 354587 "getDisplayName"
	public explicit_return_type "String"
	nparams 2
	  param inout name "daylight" explicit_type "boolean"
	  param in name "style" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a name of this time zone suitable for presentation to the user
in the default locale.
If the display name is not available for the locale, then this
method returns a string in the 
<a href=\"#NormalizedCustomID\">normalized custom ID format</a>.
@param daylight if true, return the daylight savings name.
@param style either <code>LONG</code> or <code>SHORT</code>
@return the human-readable name of this time zone in the default locale.
@since 1.2"
      end

      operation 354715 "getDisplayName"
	public explicit_return_type "String"
	nparams 3
	  param inout name "daylight" explicit_type "boolean"
	  param in name "style" explicit_type "int"
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a name of this time zone suitable for presentation to the user
in the specified locale.
If the display name is not available for the locale,
then this method returns a string in the 
<a href=\"#NormalizedCustomID\">normalized custom ID format</a>.
@param daylight if true, return the daylight savings name.
@param style either <code>LONG</code> or <code>SHORT</code>
@param locale the locale in which to supply the display name.
@return the human-readable name of this time zone in the given locale
or in the default locale if the given locale is not recognized.
@exception IllegalArgumentException style is invalid.
@since 1.2"
      end

      class 156443 "DisplayNames"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 172955 // CACHE (<unidirectional association>)
	  relation 172955 --->
	    a role_name "CACHE" init_value "= 
	    new ConcurrentHashMap<String, SoftReference<Map<Locale, String[]>>>()" class_relation const_relation private
	      comment " Cache for managing display names per timezone per locale
 The structure is:
   Map(key=id, value=SoftReference(Map(key=locale, value=displaynames)))
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, SoftReference<Map<Locale, String[]>>> ${name}${value};
"
	      classrelation_ref 172955 // CACHE (<unidirectional association>)
	    b parent class_ref 136603 // Map
	end
      end

      operation 354843 "getDisplayNames"
	class_operation private explicit_return_type "String"
	nparams 2
	  param in name "id" explicit_type "String"
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 354971 "retrieveDisplayNames"
	class_operation private explicit_return_type "String"
	nparams 2
	  param in name "id" explicit_type "String"
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 355099 "getDSTSavings"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the amount of time to be added to local standard time
to get local wall clock time.
<p>
The default implementation always returns 3600000 milliseconds
(i.e., one hour) if this time zone observes Daylight Saving
Time. Otherwise, 0 (zero) is returned.
<p>
If an underlying TimeZone implementation subclass supports
historical Daylight Saving Time changes, this method returns
the known latest daylight saving value.

@return the amount of saving time in milliseconds
@since 1.4"
      end

      operation 355227 "useDaylightTime"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Queries if this time zone uses daylight savings time.
<p>
If an underlying <code>TimeZone</code> implementation subclass
supports historical Daylight Saving Time schedule changes, the
method refers to the latest Daylight Saving Time schedule
information.

@return true if this time zone uses daylight savings time,
false, otherwise."
      end

      operation 355355 "inDaylightTime"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "date" type class_ref 139163 // Date
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Queries if the given date is in daylight savings time in
this time zone.
@param date the given Date.
@return true if the given date is in daylight savings time,
false, otherwise."
      end

      operation 355483 "getTimeZone"
	class_operation public return_type class_ref 138779 // TimeZone
	nparams 1
	  param in name "ID" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>TimeZone</code> for the given ID.

@param ID the ID for a <code>TimeZone</code>, either an abbreviation
such as \"PST\", a full name such as \"America/Los_Angeles\", or a custom
ID such as \"GMT-8:00\". Note that the support of abbreviations is
for JDK 1.1.x compatibility only and full names should be used.

@return the specified <code>TimeZone</code>, or the GMT zone if the given ID
cannot be understood."
      end

      operation 355611 "getTimeZone"
	class_operation private return_type class_ref 138779 // TimeZone
	nparams 2
	  param in name "ID" explicit_type "String"
	  param inout name "fallback" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 355739 "getAvailableIDs"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "rawOffset" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the available IDs according to the given time zone offset.
@param rawOffset the given time zone GMT offset.
@return an array of IDs, where the time zone for that ID has
the specified GMT offset. For example, \"America/Phoenix\" and \"America/Denver\"
both have GMT-07:00, but differ in daylight savings behavior."
      end

      operation 355867 "getAvailableIDs"
	class_operation public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets all the available IDs supported.
@return an array of IDs."
      end

      operation 355995 "getSystemTimeZoneID"
	class_operation private explicit_return_type "String"
	nparams 2
	  param in name "javaHome" explicit_type "String"
	  param in name "country" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the platform defined TimeZone ID."
      end

      operation 356123 "getSystemGMTOffsetID"
	class_operation private explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the custom time zone ID based on the GMT offset of the
platform. (e.g., \"GMT+08:00\")"
      end

      operation 356251 "getDefault"
	class_operation public return_type class_ref 138779 // TimeZone
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the default <code>TimeZone</code> for this host.
The source of the default <code>TimeZone</code> 
may vary with implementation.
@return a default <code>TimeZone</code>.
@see #setDefault"
      end

      operation 356379 "getDefaultRef"
	class_operation package return_type class_ref 138779 // TimeZone
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the reference to the default TimeZone object. This
method doesn't create a clone."
      end

      operation 356507 "setDefaultZone"
	class_operation private return_type class_ref 138779 // TimeZone
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 356635 "hasPermission"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 356763 "setDefault"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "zone" type class_ref 138779 // TimeZone
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>TimeZone</code> that is
returned by the <code>getDefault</code> method.  If <code>zone</code>
is null, reset the default to the value it had originally when the
VM first started.
@param zone the new default time zone
@see #getDefault"
      end

      operation 356891 "hasSameRules"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 138779 // TimeZone
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this zone has the same rule and offset as another zone.
That is, if this zone differs only in ID, if at all.  Returns false
if the other zone is null.
@param other the <code>TimeZone</code> object to be compared with
@return true if the other zone is not null and is the same as this one,
with the possible exception of the ID
@since 1.2"
      end

      operation 357019 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a copy of this <code>TimeZone</code>.

@return a clone of this <code>TimeZone</code>"
      end

      classrelation 173083 // NO_TIMEZONE (<unidirectional association>)
	relation 173083 --->
	  a role_name "NO_TIMEZONE" init_value "=  null" class_relation const_relation package
	    comment "
The null constant as a TimeZone.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 173083 // NO_TIMEZONE (<unidirectional association>)
	  b parent class_ref 138779 // TimeZone
      end

      attribute 193947 "ID"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " =======================privates===============================

The string identifier of this <code>TimeZone</code>.  This is a
programmatic identifier used internally to look up <code>TimeZone</code>
objects from the system table and also to map them to their localized
display names.  <code>ID</code> values are unique in the system
table but may not be for dynamically created zones.
@serial
"
      end

      classrelation 173211 // defaultTimeZone (<unidirectional association>)
	relation 173211 --->
	  a role_name "defaultTimeZone" class_relation volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 173211 // defaultTimeZone (<unidirectional association>)
	  b parent class_ref 138779 // TimeZone
      end

      classrelation 173339 // defaultZoneTL (<unidirectional association>)
	relation 173339 --->
	  stereotype "InheritableThreadLocal"
	  a role_name "defaultZoneTL" init_value "=  new InheritableThreadLocal<TimeZone>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 173339 // defaultZoneTL (<unidirectional association>)
	  b parent class_ref 138779 // TimeZone
      end

      attribute 194075 "GMT_ID"
	class_attribute const_attribute package explicit_type "String"
	init_value "=  \"GMT\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 194203 "GMT_ID_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 357147 "parseCustomTimeZone"
	class_operation private return_type class_ref 138779 // TimeZone
	nparams 1
	  param in name "id" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses a custom time zone identifier and returns a corresponding zone.
This method doesn't support the RFC 822 time zone format. (e.g., +hhmm)

@param id a string of the <a href=\"#CustomID\">custom ID form</a>.
@return a newly created TimeZone with the given offset and
no daylight saving time, or null if the id cannot be parsed."
      end
    end

    class 138907 "Locale"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
A <code>Locale</code> object represents a specific geographical, political,
or cultural region. An operation that requires a <code>Locale</code> to perform
its task is called <em>locale-sensitive</em> and uses the <code>Locale</code>
to tailor information for the user. For example, displaying a number
is a locale-sensitive operation--the number should be formatted
according to the customs/conventions of the user's native country,
region, or culture.

<P>
Create a <code>Locale</code> object using the constructors in this class:
<blockquote>
<pre>
Locale(String language)
Locale(String language, String country)
Locale(String language, String country, String variant)
</pre>
</blockquote>
The language argument is a valid <STRONG>ISO Language Code.</STRONG>
These codes are the lower-case, two-letter codes as defined by ISO-639.
You can find a full list of these codes at a number of sites, such as:
<BR><a href =\"http://www.loc.gov/standards/iso639-2/englangn.html\">
<code>http://www.loc.gov/standards/iso639-2/englangn.html</code></a>

<P>
The country argument is a valid <STRONG>ISO Country Code.</STRONG> These
codes are the upper-case, two-letter codes as defined by ISO-3166.
You can find a full list of these codes at a number of sites, such as:
<BR><a href=\"http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html\">
<code>http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html</code></a>

<P>
The variant argument is a vendor or browser-specific code.
For example, use WIN for Windows, MAC for Macintosh, and POSIX for POSIX.
Where there are two variants, separate them with an underscore, and
put the most important one first. For example, a Traditional Spanish collation
might construct a locale with parameters for language, country and variant as:
\"es\", \"ES\", \"Traditional_WIN\".

<P>
Because a <code>Locale</code> object is just an identifier for a region,
no validity check is performed when you construct a <code>Locale</code>.
If you want to see whether particular resources are available for the
<code>Locale</code> you construct, you must query those resources. For
example, ask the <code>NumberFormat</code> for the locales it supports
using its <code>getAvailableLocales</code> method.
<BR><STRONG>Note:</STRONG> When you ask for a resource for a particular
locale, you get back the best available match, not necessarily
precisely what you asked for. For more information, look at
{@link ResourceBundle}.

<P>
The <code>Locale</code> class provides a number of convenient constants
that you can use to create <code>Locale</code> objects for commonly used
locales. For example, the following creates a <code>Locale</code> object
for the United States:
<blockquote>
<pre>
Locale.US
</pre>
</blockquote>

<P>
Once you've created a <code>Locale</code> you can query it for information about
itself. Use <code>getCountry</code> to get the ISO Country Code and
<code>getLanguage</code> to get the ISO Language Code. You can
use <code>getDisplayCountry</code> to get the
name of the country suitable for displaying to the user. Similarly,
you can use <code>getDisplayLanguage</code> to get the name of
the language suitable for displaying to the user. Interestingly,
the <code>getDisplayXXX</code> methods are themselves locale-sensitive
and have two versions: one that uses the default locale and one
that uses the locale specified as an argument.

<P>
The Java 2 platform provides a number of classes that perform locale-sensitive
operations. For example, the <code>NumberFormat</code> class formats
numbers, currency, or percentages in a locale-sensitive manner. Classes
such as <code>NumberFormat</code> have a number of convenience methods
for creating a default object of that type. For example, the
<code>NumberFormat</code> class provides these three convenience methods
for creating a default <code>NumberFormat</code> object:
<blockquote>
<pre>
NumberFormat.getInstance()
NumberFormat.getCurrencyInstance()
NumberFormat.getPercentInstance()
</pre>
</blockquote>
These methods have two variants; one with an explicit locale
and one without; the latter using the default locale.
<blockquote>
<pre>
NumberFormat.getInstance(myLocale)
NumberFormat.getCurrencyInstance(myLocale)
NumberFormat.getPercentInstance(myLocale)
</pre>
</blockquote>
A <code>Locale</code> is the mechanism for identifying the kind of object
(<code>NumberFormat</code>) that you would like to get. The locale is
<STRONG>just</STRONG> a mechanism for identifying objects,
<STRONG>not</STRONG> a container for the objects themselves.

@see         ResourceBundle
@see         java.text.Format
@see         java.text.NumberFormat
@see         java.text.Collator
@author      Mark Davis
@since       1.1"
      classrelation 166299 // <realization>
	relation 166299 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 166299 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 166427 // ENGLISH (<unidirectional association>)
	relation 166427 --->
	  a role_name "ENGLISH" init_value "=  new Locale(\"en\",\"\",\"\")" class_relation const_relation public
	    comment " Useful constant for language.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 166427 // ENGLISH (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 166555 // FRENCH (<unidirectional association>)
	relation 166555 --->
	  a role_name "FRENCH" init_value "=  new Locale(\"fr\",\"\",\"\")" class_relation const_relation public
	    comment " Useful constant for language.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 166555 // FRENCH (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 166683 // GERMAN (<unidirectional association>)
	relation 166683 --->
	  a role_name "GERMAN" init_value "=  new Locale(\"de\",\"\",\"\")" class_relation const_relation public
	    comment " Useful constant for language.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 166683 // GERMAN (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 166811 // ITALIAN (<unidirectional association>)
	relation 166811 --->
	  a role_name "ITALIAN" init_value "=  new Locale(\"it\",\"\",\"\")" class_relation const_relation public
	    comment " Useful constant for language.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 166811 // ITALIAN (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 166939 // JAPANESE (<unidirectional association>)
	relation 166939 --->
	  a role_name "JAPANESE" init_value "=  new Locale(\"ja\",\"\",\"\")" class_relation const_relation public
	    comment " Useful constant for language.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 166939 // JAPANESE (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 167067 // KOREAN (<unidirectional association>)
	relation 167067 --->
	  a role_name "KOREAN" init_value "=  new Locale(\"ko\",\"\",\"\")" class_relation const_relation public
	    comment " Useful constant for language.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 167067 // KOREAN (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 167195 // CHINESE (<unidirectional association>)
	relation 167195 --->
	  a role_name "CHINESE" init_value "=  new Locale(\"zh\",\"\",\"\")" class_relation const_relation public
	    comment " Useful constant for language.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 167195 // CHINESE (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 167323 // SIMPLIFIED_CHINESE (<unidirectional association>)
	relation 167323 --->
	  a role_name "SIMPLIFIED_CHINESE" init_value "=  new Locale(\"zh\",\"CN\",\"\")" class_relation const_relation public
	    comment " Useful constant for language.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 167323 // SIMPLIFIED_CHINESE (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 167451 // TRADITIONAL_CHINESE (<unidirectional association>)
	relation 167451 --->
	  a role_name "TRADITIONAL_CHINESE" init_value "=  new Locale(\"zh\",\"TW\",\"\")" class_relation const_relation public
	    comment " Useful constant for language.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 167451 // TRADITIONAL_CHINESE (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 167579 // FRANCE (<unidirectional association>)
	relation 167579 --->
	  a role_name "FRANCE" init_value "=  new Locale(\"fr\",\"FR\",\"\")" class_relation const_relation public
	    comment " Useful constant for country.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 167579 // FRANCE (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 167707 // GERMANY (<unidirectional association>)
	relation 167707 --->
	  a role_name "GERMANY" init_value "=  new Locale(\"de\",\"DE\",\"\")" class_relation const_relation public
	    comment " Useful constant for country.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 167707 // GERMANY (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 167835 // ITALY (<unidirectional association>)
	relation 167835 --->
	  a role_name "ITALY" init_value "=  new Locale(\"it\",\"IT\",\"\")" class_relation const_relation public
	    comment " Useful constant for country.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 167835 // ITALY (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 167963 // JAPAN (<unidirectional association>)
	relation 167963 --->
	  a role_name "JAPAN" init_value "=  new Locale(\"ja\",\"JP\",\"\")" class_relation const_relation public
	    comment " Useful constant for country.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 167963 // JAPAN (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 168091 // KOREA (<unidirectional association>)
	relation 168091 --->
	  a role_name "KOREA" init_value "=  new Locale(\"ko\",\"KR\",\"\")" class_relation const_relation public
	    comment " Useful constant for country.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 168091 // KOREA (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 168219 // CHINA (<unidirectional association>)
	relation 168219 --->
	  a role_name "CHINA" init_value "=  new Locale(\"zh\",\"CN\",\"\")" class_relation const_relation public
	    comment " Useful constant for country.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 168219 // CHINA (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 168347 // PRC (<unidirectional association>)
	relation 168347 --->
	  a role_name "PRC" init_value "=  new Locale(\"zh\",\"CN\",\"\")" class_relation const_relation public
	    comment " Useful constant for country.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 168347 // PRC (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 168475 // TAIWAN (<unidirectional association>)
	relation 168475 --->
	  a role_name "TAIWAN" init_value "=  new Locale(\"zh\",\"TW\",\"\")" class_relation const_relation public
	    comment " Useful constant for country.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 168475 // TAIWAN (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 168603 // UK (<unidirectional association>)
	relation 168603 --->
	  a role_name "UK" init_value "=  new Locale(\"en\",\"GB\",\"\")" class_relation const_relation public
	    comment " Useful constant for country.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 168603 // UK (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 168731 // US (<unidirectional association>)
	relation 168731 --->
	  a role_name "US" init_value "=  new Locale(\"en\",\"US\",\"\")" class_relation const_relation public
	    comment " Useful constant for country.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 168731 // US (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 168859 // CANADA (<unidirectional association>)
	relation 168859 --->
	  a role_name "CANADA" init_value "=  new Locale(\"en\",\"CA\",\"\")" class_relation const_relation public
	    comment " Useful constant for country.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 168859 // CANADA (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      classrelation 168987 // CANADA_FRENCH (<unidirectional association>)
	relation 168987 --->
	  a role_name "CANADA_FRENCH" init_value "=  new Locale(\"fr\",\"CA\",\"\")" class_relation const_relation public
	    comment " Useful constant for country.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 168987 // CANADA_FRENCH (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      attribute 180507 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  9149081749638150636L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " serialization ID
"
      end

      operation 320923 "Locale"
	public explicit_return_type ""
	nparams 3
	  param in name "language" explicit_type "String"
	  param in name "country" explicit_type "String"
	  param in name "variant" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a locale from language, country, variant.
NOTE:  ISO 639 is not a stable standard; some of the language codes it defines
(specifically iw, ji, and in) have changed.  This constructor accepts both the
old codes (iw, ji, and in) and the new codes (he, yi, and id), but all other
API on Locale will return only the OLD codes.
@param language lowercase two-letter ISO-639 code.
@param country uppercase two-letter ISO-3166 code.
@param variant vendor and browser specific code. See class description.
@exception NullPointerException thrown if any argument is null."
      end

      operation 321051 "Locale"
	public explicit_return_type ""
	nparams 2
	  param in name "language" explicit_type "String"
	  param in name "country" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a locale from language, country.
NOTE:  ISO 639 is not a stable standard; some of the language codes it defines
(specifically iw, ji, and in) have changed.  This constructor accepts both the
old codes (iw, ji, and in) and the new codes (he, yi, and id), but all other
API on Locale will return only the OLD codes.
@param language lowercase two-letter ISO-639 code.
@param country uppercase two-letter ISO-3166 code.
@exception NullPointerException thrown if either argument is null."
      end

      operation 321179 "Locale"
	public explicit_return_type ""
	nparams 1
	  param in name "language" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a locale from a language code.
NOTE:  ISO 639 is not a stable standard; some of the language codes it defines
(specifically iw, ji, and in) have changed.  This constructor accepts both the
old codes (iw, ji, and in) and the new codes (he, yi, and id), but all other
API on Locale will return only the OLD codes.
@param language lowercase two-letter ISO-639 code.
@exception NullPointerException thrown if argument is null.
@since 1.4"
      end

      operation 321307 "getDefault"
	class_operation public return_type class_ref 138907 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value of the default locale for this instance
of the Java Virtual Machine.
<p>
The Java Virtual Machine sets the default locale during startup
based on the host environment. It is used by many locale-sensitive
methods if no locale is explicitly specified.
It can be changed using the
{@link #setDefault(java.util.Locale) setDefault} method.

@return the default locale for this instance of the Java Virtual Machine"
      end

      operation 321435 "setDefault"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "newLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the default locale for this instance of the Java Virtual Machine.
This does not affect the host locale.
<p>
If there is a security manager, its <code>checkPermission</code>
method is called with a <code>PropertyPermission(\"user.language\", \"write\")</code>
permission before the default locale is changed.
<p>
The Java Virtual Machine sets the default locale during startup
based on the host environment. It is used by many locale-sensitive
methods if no locale is explicitly specified.
<p>
Since changing the default locale may affect many different areas
of functionality, this method should only be used if the caller
is prepared to reinitialize locale-sensitive code running
within the same Java Virtual Machine, such as the user interface.

@throws SecurityException
       if a security manager exists and its
       <code>checkPermission</code> method doesn't allow the operation.
@throws NullPointerException if <code>newLocale</code> is null
@param newLocale the new default locale
@see SecurityManager#checkPermission
@see java.util.PropertyPermission"
      end

      operation 321563 "getAvailableLocales"
	class_operation public return_type class_ref 138907 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all installed locales.
The array returned must contain at least a <code>Locale</code>
instance equal to {@link java.util.Locale#US Locale.US}.

@return An array of installed locales."
      end

      operation 321691 "getISOCountries"
	class_operation public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of all 2-letter country codes defined in ISO 3166.
Can be used to create Locales."
      end

      operation 321819 "getISOLanguages"
	class_operation public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of all 2-letter language codes defined in ISO 639.
Can be used to create Locales.
[NOTE:  ISO 639 is not a stable standard-- some languages' codes have changed.
The list this function returns includes both the new and the old codes for the
languages whose codes have changed.]"
      end

      operation 321947 "getLanguage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the language code for this locale, which will either be the empty string
or a lowercase ISO 639 code.
<p>NOTE:  ISO 639 is not a stable standard-- some languages' codes have changed.
Locale's constructor recognizes both the new and the old codes for the languages
whose codes have changed, but this function always returns the old code.  If you
want to check for a specific language whose code has changed, don't do <pre>
if (locale.getLanguage().equals(\"he\")
   ...
</pre>Instead, do<pre>
if (locale.getLanguage().equals(new Locale(\"he\", \"\", \"\").getLanguage())
   ...</pre>
@see #getDisplayLanguage"
      end

      operation 322075 "getCountry"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the country/region code for this locale, which will
either be the empty string or an uppercase ISO 3166 2-letter code.
@see #getDisplayCountry"
      end

      operation 322203 "getVariant"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the variant code for this locale.
@see #getDisplayVariant"
      end

      operation 322331 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Getter for the programmatic name of the entire locale,
with the language, country and variant separated by underbars.
Language is always lower case, and country is always upper case.
If the language is missing, the string will begin with an underbar.
If both the language and country fields are missing, this function
will return the empty string, even if the variant field is filled in
(you can't have a locale with just a variant-- the variant must accompany
a valid language or country code).
Examples: \"en\", \"de_DE\", \"_GB\", \"en_US_WIN\", \"de__POSIX\", \"fr__MAC\"
@see #getDisplayName"
      end

      operation 322459 "getISO3Language"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 154011 // MissingResourceException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a three-letter abbreviation for this locale's language.  If the locale
doesn't specify a language, this will be the empty string.  Otherwise, this will
be a lowercase ISO 639-2/T language code.
The ISO 639-2 language codes can be found on-line at
  <a href=\"http://www.loc.gov/standards/iso639-2/englangn.html\"><code>http://www.loc.gov/standards/iso639-2/englangn.html</code></a>
@exception MissingResourceException Throws MissingResourceException if the
three-letter language abbreviation is not available for this locale."
      end

      operation 322587 "getISO3Country"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 154011 // MissingResourceException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a three-letter abbreviation for this locale's country.  If the locale
doesn't specify a country, this will be the empty string.  Otherwise, this will
be an uppercase ISO 3166 3-letter country code.
The ISO 3166-2 country codes can be found on-line at
  <a href=\"http://www.davros.org/misc/iso3166.txt\"><code>http://www.davros.org/misc/iso3166.txt</code></a>
@exception MissingResourceException Throws MissingResourceException if the
three-letter country abbreviation is not available for this locale."
      end

      operation 322715 "getDisplayLanguage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a name for the locale's language that is appropriate for display to the
user.
If possible, the name returned will be localized for the default locale.
For example, if the locale is fr_FR and the default locale
is en_US, getDisplayLanguage() will return \"French\"; if the locale is en_US and
the default locale is fr_FR, getDisplayLanguage() will return \"anglais\".
If the name returned cannot be localized for the default locale,
(say, we don't have a Japanese name for Croatian),
this function falls back on the English name, and uses the ISO code as a last-resort
value.  If the locale doesn't specify a language, this function returns the empty string."
      end

      operation 322843 "getDisplayLanguage"
	public explicit_return_type "String"
	nparams 1
	  param inout name "inLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a name for the locale's language that is appropriate for display to the
user.
If possible, the name returned will be localized according to inLocale.
For example, if the locale is fr_FR and inLocale
is en_US, getDisplayLanguage() will return \"French\"; if the locale is en_US and
inLocale is fr_FR, getDisplayLanguage() will return \"anglais\".
If the name returned cannot be localized according to inLocale,
(say, we don't have a Japanese name for Croatian),
this function falls back on the default locale, on the English name, and finally
on the ISO code as a last-resort value.  If the locale doesn't specify a language,
this function returns the empty string."
      end

      operation 322971 "getDisplayCountry"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a name for the locale's country that is appropriate for display to the
user.
If possible, the name returned will be localized for the default locale.
For example, if the locale is fr_FR and the default locale
is en_US, getDisplayCountry() will return \"France\"; if the locale is en_US and
the default locale is fr_FR, getDisplayLanguage() will return \"Etats-Unis\".
If the name returned cannot be localized for the default locale,
(say, we don't have a Japanese name for Croatia),
this function falls back on the English name, and uses the ISO code as a last-resort
value.  If the locale doesn't specify a country, this function returns the empty string."
      end

      operation 323099 "getDisplayCountry"
	public explicit_return_type "String"
	nparams 1
	  param inout name "inLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a name for the locale's country that is appropriate for display to the
user.
If possible, the name returned will be localized according to inLocale.
For example, if the locale is fr_FR and inLocale
is en_US, getDisplayCountry() will return \"France\"; if the locale is en_US and
inLocale is fr_FR, getDisplayLanguage() will return \"Etats-Unis\".
If the name returned cannot be localized according to inLocale.
(say, we don't have a Japanese name for Croatia),
this function falls back on the default locale, on the English name, and finally
on the ISO code as a last-resort value.  If the locale doesn't specify a country,
this function returns the empty string."
      end

      operation 323227 "getDisplayVariant"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a name for the locale's variant code that is appropriate for display to the
user.  If possible, the name will be localized for the default locale.  If the locale
doesn't specify a variant code, this function returns the empty string."
      end

      operation 323355 "getDisplayVariant"
	public explicit_return_type "String"
	nparams 1
	  param inout name "inLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a name for the locale's variant code that is appropriate for display to the
user.  If possible, the name will be localized for inLocale.  If the locale
doesn't specify a variant code, this function returns the empty string."
      end

      operation 323483 "getDisplayName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a name for the locale that is appropriate for display to the
user.  This will be the values returned by getDisplayLanguage(), getDisplayCountry(),
and getDisplayVariant() assembled into a single string.  The display name will have
one of the following forms:<p><blockquote>
language (country, variant)<p>
language (country)<p>
language (variant)<p>
country (variant)<p>
language<p>
country<p>
variant<p></blockquote>
depending on which fields are specified in the locale.  If the language, country,
and variant fields are all empty, this function returns the empty string."
      end

      operation 323611 "getDisplayName"
	public explicit_return_type "String"
	nparams 1
	  param inout name "inLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a name for the locale that is appropriate for display to the
user.  This will be the values returned by getDisplayLanguage(), getDisplayCountry(),
and getDisplayVariant() assembled into a single string.  The display name will have
one of the following forms:<p><blockquote>
language (country, variant)<p>
language (country)<p>
language (variant)<p>
country (variant)<p>
language<p>
country<p>
variant<p></blockquote>
depending on which fields are specified in the locale.  If the language, country,
and variant fields are all empty, this function returns the empty string."
      end

      operation 323739 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides Cloneable"
      end

      operation 323867 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Override hashCode.
Since Locales are often used in hashtables, caches the value
for speed."
      end

      operation 323995 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Overrides

Returns true if this Locale is equal to another object.  A Locale is
deemed equal to another Locale with identical language, country,
and variant, and unequal to all other objects.

@return true if this Locale is equal to the specified object."
      end

      attribute 180635 "language"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ================= privates =====================================
 XXX instance and class variables. For now keep these separate, since it is
 faster to match. Later, make into single string.

@serial
@see #getLanguage
"
      end

      attribute 180763 "country"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
@see #getCountry
"
      end

      attribute 180891 "variant"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
@see #getVariant
"
      end

      attribute 181019 "hashcode"
	volatile private explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Placeholder for the object's hash code.  Always -1.
@serial

 lazy evaluate"
      end

      attribute 181147 "hashCodeValue"
	volatile private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Calculated hashcode to fix 4518797.
"
      end

      classrelation 169115 // defaultLocale (<unidirectional association>)
	relation 169115 --->
	  a role_name "defaultLocale" init_value "=  null" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 169115 // defaultLocale (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      operation 324123 "getDisplayVariantArray"
	private explicit_return_type "String"
	nparams 1
	  param inout name "bundle" type class_ref 153371 // ResourceBundle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an array of the display names of the variant.
@param bundle the ResourceBundle to use to get the display names
@return an array of display names, possible of zero length."
      end

      operation 324251 "formatList"
	class_operation private explicit_return_type "String"
	nparams 2
	  param in name "patterns" explicit_type "String"
	  param in name "stringList" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format a list with an array of patterns.
@param patterns an array of three patterns. The first pattern is not
used. The second pattern should create a MessageFormat taking 0-3 arguments
and formatting them into a list. The third pattern should take 2 arguments
and is used by composeList. If patterns is null, then a the list is
formatted by concatenation with the delimiter ','.
@param stringList the list of strings to be formatted.
@return a string representing the list."
      end

      operation 324379 "composeList"
	class_operation private explicit_return_type "String"
	nparams 2
	  param inout name "format" explicit_type "MessageFormat"
	  param in name "list" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a list of strings, return a list shortened to three elements.
Shorten it by applying the given format to the first two elements
recursively.
@param format a format which takes two arguments
@param list a list of strings
@return if the list is three elements or shorter, the same list;
otherwise, a new list of three elements."
      end

      operation 324507 "readResolve"
	private explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  explicit_exception "java.io.ObjectStreamException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replace the deserialized Locale object with a newly
created object. Older language codes are replaced with newer ISO
codes. The country and variant codes are replaced with internalized
String copies."
      end

      attribute 181275 "isoLanguages"
	class_attribute private explicit_type "String"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "List of all 2-letter language codes currently defined in ISO 639.
(Because the Java VM specification turns an array constant into executable code
that generates the array element by element, we keep the array in compressed
form in a single string and build the array from it at run time when requested.)
[We're now also using this table to store a mapping from 2-letter ISO language codes
to 3-letter ISO language codes.  Each group of characters consists of a comma, a
2-letter code, and a 3-letter code.  We look up a 3-letter code by searching for
a comma followed by a 2-letter code and then getting the three letters following
the 2-letter code.]
"
      end

      attribute 181403 "compressedIsoLanguages"
	class_attribute const_attribute private explicit_type "String"
	init_value "= 
        \",aaaar,ababk,aeave,afafr,akaka,amamh,anarg,arara,asasm,avava\"
      + \",ayaym,azaze,babak,bebel,bgbul,bhbih,bibis,bmbam,bnben,bobod\"
      + \",brbre,bsbos,cacat,ceche,chcha,cocos,crcre,csces,cuchu,cvchv\"
      + \",cycym,dadan,dedeu,dvdiv,dzdzo,eeewe,elell,eneng,eoepo,esspa\"
      + \",etest,eueus,fafas,ffful,fifin,fjfij,fofao,frfra,fyfry,gagle\"
      + \",gdgla,glglg,gngrn,guguj,gvglv,hahau,heheb,hihin,hohmo,hrhrv\"
      + \",hthat,huhun,hyhye,hzher,iaina,idind,ieile,igibo,iiiii,ikipk\"
      + \",inind,ioido,isisl,itita,iuiku,iwheb,jajpn,jiyid,jvjav,kakat\"
      + \",kgkon,kikik,kjkua,kkkaz,klkal,kmkhm,knkan,kokor,krkau,kskas\"
      + \",kukur,kvkom,kwcor,kykir,lalat,lbltz,lglug,lilim,lnlin,lolao\"
      + \",ltlit,lulub,lvlav,mgmlg,mhmah,mimri,mkmkd,mlmal,mnmon,momol\"
      + \",mrmar,msmsa,mtmlt,mymya,nanau,nbnob,ndnde,nenep,ngndo,nlnld\"
      + \",nnnno,nonor,nrnbl,nvnav,nynya,ococi,ojoji,omorm,orori,ososs\"
      + \",papan,pipli,plpol,pspus,ptpor,quque,rmroh,rnrun,roron,rurus\"
      + \",rwkin,sasan,scsrd,sdsnd,sesme,sgsag,sisin,skslk,slslv,smsmo\"
      + \",snsna,sosom,sqsqi,srsrp,ssssw,stsot,susun,svswe,swswa,tatam\"
      + \",tetel,tgtgk,ththa,titir,tktuk,tltgl,tntsn,toton,trtur,tstso\"
      + \",tttat,twtwi,tytah,uguig,ukukr,ururd,uzuzb,veven,vivie,vovol\"
      + \",wawln,wowol,xhxho,yiyid,yoyor,zazha,zhzho,zuzul\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 181531 "isoCountries"
	class_attribute private explicit_type "String"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "List of all 2-letter country codes currently defined in ISO 3166.
(Because the Java VM specification turns an array constant into executable code
that generates the array element by element, we keep the array in compressed
form in a single string and build the array from it at run time when requested.)
[We're now also using this table to store a mapping from 2-letter ISO country codes
to 3-letter ISO country codes.  Each group of characters consists of a comma, a
2-letter code, and a 3-letter code.  We look up a 3-letter code by searching for
a comma followed by a 2-letter code and then getting the three letters following
the 2-letter code.]
"
      end

      attribute 181659 "compressedIsoCountries"
	class_attribute const_attribute private explicit_type "String"
	init_value "= 
        \",ADAND,AEARE,AFAFG,AGATG,AIAIA,ALALB,AMARM,ANANT,AOAGO,AQATA\"
      + \",ARARG,ASASM,ATAUT,AUAUS,AWABW,AXALA,AZAZE,BABIH,BBBRB,BDBGD,BEBEL\"
      + \",BFBFA,BGBGR,BHBHR,BIBDI,BJBEN,BMBMU,BNBRN,BOBOL,BRBRA,BSBHS\"
      + \",BTBTN,BVBVT,BWBWA,BYBLR,BZBLZ,CACAN,CCCCK,CDCOD,CFCAF,CGCOG\"
      + \",CHCHE,CICIV,CKCOK,CLCHL,CMCMR,CNCHN,COCOL,CRCRI,CSSCG,CUCUB\"
      + \",CVCPV,CXCXR,CYCYP,CZCZE,DEDEU,DJDJI,DKDNK,DMDMA,DODOM,DZDZA\"
      + \",ECECU,EEEST,EGEGY,EHESH,ERERI,ESESP,ETETH,FIFIN,FJFJI,FKFLK\"
      + \",FMFSM,FOFRO,FRFRA,GAGAB,GBGBR,GDGRD,GEGEO,GFGUF,GHGHA,GIGIB\"
      + \",GLGRL,GMGMB,GNGIN,GPGLP,GQGNQ,GRGRC,GSSGS,GTGTM,GUGUM,GWGNB\"
      + \",GYGUY,HKHKG,HMHMD,HNHND,HRHRV,HTHTI,HUHUN,IDIDN,IEIRL,ILISR\"
      + \",ININD,IOIOT,IQIRQ,IRIRN,ISISL,ITITA,JMJAM,JOJOR,JPJPN,KEKEN\"
      + \",KGKGZ,KHKHM,KIKIR,KMCOM,KNKNA,KPPRK,KRKOR,KWKWT,KYCYM,KZKAZ\"
      + \",LALAO,LBLBN,LCLCA,LILIE,LKLKA,LRLBR,LSLSO,LTLTU,LULUX,LVLVA\"
      + \",LYLBY,MAMAR,MCMCO,MDMDA,MGMDG,MHMHL,MKMKD,MLMLI,MMMMR,MNMNG\"
      + \",MOMAC,MPMNP,MQMTQ,MRMRT,MSMSR,MTMLT,MUMUS,MVMDV,MWMWI,MXMEX\"
      + \",MYMYS,MZMOZ,NANAM,NCNCL,NENER,NFNFK,NGNGA,NINIC,NLNLD,NONOR\"
      + \",NPNPL,NRNRU,NUNIU,NZNZL,OMOMN,PAPAN,PEPER,PFPYF,PGPNG,PHPHL\"
      + \",PKPAK,PLPOL,PMSPM,PNPCN,PRPRI,PSPSE,PTPRT,PWPLW,PYPRY,QAQAT\"
      + \",REREU,ROROU,RURUS,RWRWA,SASAU,SBSLB,SCSYC,SDSDN,SESWE,SGSGP\"
      + \",SHSHN,SISVN,SJSJM,SKSVK,SLSLE,SMSMR,SNSEN,SOSOM,SRSUR,STSTP\"
      + \",SVSLV,SYSYR,SZSWZ,TCTCA,TDTCD,TFATF,TGTGO,THTHA,TJTJK,TKTKL\"
      + \",TLTLS,TMTKM,TNTUN,TOTON,TRTUR,TTTTO,TVTUV,TWTWN,TZTZA,UAUKR\"
      + \",UGUGA,UMUMI,USUSA,UYURY,UZUZB,VAVAT,VCVCT,VEVEN,VGVGB,VIVIR\"
      + \",VNVNM,VUVUT,WFWLF,WSWSM,YEYEM,YTMYT,ZAZAF,ZMZMB,ZWZWE\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 324635 "toLowerCase"
	private explicit_return_type "String"
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Locale needs its own, locale insensitive version of toLowerCase to
avoid circularity problems between Locale and String.
The most straightforward algorithm is used. Look at optimizations later."
      end

      operation 324763 "toUpperCase"
	private explicit_return_type "String"
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Locale needs its own, locale insensitive version of toUpperCase to
avoid circularity problems between Locale and String.
The most straightforward algorithm is used. Look at optimizations later."
      end

      operation 324891 "findStringMatch"
	private explicit_return_type "String"
	nparams 3
	  param in name "languages" explicit_type "String"
	  param in name "desiredLanguage" explicit_type "String"
	  param in name "fallbackLanguage" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 325019 "convertOldISOCodes"
	private explicit_return_type "String"
	nparams 1
	  param in name "language" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 139035 "Hashtable"
      visibility public 
      nformals 8
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 16
      actual class class_ref 145179 // Dictionary
        rank 0 explicit_value "K"
      actual class class_ref 145179 // Dictionary
        rank 1 explicit_value "V"
      actual class class_ref 145179 // Dictionary
        rank 2 explicit_value ""
      actual class class_ref 145179 // Dictionary
        rank 3 explicit_value ""
      actual class class_ref 145179 // Dictionary
        rank 4 explicit_value ""
      actual class class_ref 145179 // Dictionary
        rank 5 explicit_value ""
      actual class class_ref 145179 // Dictionary
        rank 6 explicit_value ""
      actual class class_ref 145179 // Dictionary
        rank 7 explicit_value ""
      actual class class_ref 136603 // Map
        rank 0 explicit_value "K"
      actual class class_ref 136603 // Map
        rank 1 explicit_value "V"
      actual class class_ref 136603 // Map
        rank 2 explicit_value ""
      actual class class_ref 136603 // Map
        rank 3 explicit_value ""
      actual class class_ref 136603 // Map
        rank 4 explicit_value ""
      actual class class_ref 136603 // Map
        rank 5 explicit_value ""
      actual class class_ref 136603 // Map
        rank 6 explicit_value ""
      actual class class_ref 136603 // Map
        rank 7 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class implements a hashtable, which maps keys to values. Any 
non-<code>null</code> object can be used as a key or as a value. <p>

To successfully store and retrieve objects from a hashtable, the 
objects used as keys must implement the <code>hashCode</code> 
method and the <code>equals</code> method. <p>

An instance of <code>Hashtable</code> has two parameters that affect its
performance: <i>initial capacity</i> and <i>load factor</i>.  The
<i>capacity</i> is the number of <i>buckets</i> in the hash table, and the
<i>initial capacity</i> is simply the capacity at the time the hash table
is created.  Note that the hash table is <i>open</i>: in the case of a \"hash
collision\", a single bucket stores multiple entries, which must be searched
sequentially.  The <i>load factor</i> is a measure of how full the hash
table is allowed to get before its capacity is automatically increased.
The initial capacity and load factor parameters are merely hints to 
the implementation.  The exact details as to when and whether the rehash 
method is invoked are implementation-dependent.<p>

Generally, the default load factor (.75) offers a good tradeoff between
time and space costs.  Higher values decrease the space overhead but
increase the time cost to look up an entry (which is reflected in most
<tt>Hashtable</tt> operations, including <tt>get</tt> and <tt>put</tt>).<p>

The initial capacity controls a tradeoff between wasted space and the
need for <code>rehash</code> operations, which are time-consuming.
No <code>rehash</code> operations will <i>ever</i> occur if the initial
capacity is greater than the maximum number of entries the
<tt>Hashtable</tt> will contain divided by its load factor.  However,
setting the initial capacity too high can waste space.<p>

If many entries are to be made into a <code>Hashtable</code>, 
creating it with a sufficiently large capacity may allow the 
entries to be inserted more efficiently than letting it perform 
automatic rehashing as needed to grow the table. <p>

This example creates a hashtable of numbers. It uses the names of 
the numbers as keys:
<p><blockquote><pre>
    Hashtable numbers = new Hashtable();
    numbers.put(\"one\", new Integer(1));
    numbers.put(\"two\", new Integer(2));
    numbers.put(\"three\", new Integer(3));
</pre></blockquote>
<p>
To retrieve a number, use the following code: 
<p><blockquote><pre>
    Integer n = (Integer)numbers.get(\"two\");
    if (n != null) {
        System.out.println(\"two = \" + n);
    }
</pre></blockquote>
<p>
As of the Java 2 platform v1.2, this class has been retrofitted to
implement Map, so that it becomes a part of Java's collection framework.
Unlike the new collection implementations, Hashtable is synchronized.<p>

The Iterators returned by the iterator and listIterator methods
of the Collections returned by all of Hashtable's \"collection view methods\"
are <em>fail-fast</em>: if the Hashtable is structurally modified
at any time after the Iterator is created, in any way except through the
Iterator's own remove or add methods, the Iterator will throw a
ConcurrentModificationException.  Thus, in the face of concurrent
modification, the Iterator fails quickly and cleanly, rather than risking
arbitrary, non-deterministic behavior at an undetermined time in the future.
The Enumerations returned by Hashtable's keys and values methods are
<em>not</em> fail-fast.

<p>Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw <tt>ConcurrentModificationException</tt> on a best-effort basis. 
Therefore, it would be wrong to write a program that depended on this
exception for its correctness: <i>the fail-fast behavior of iterators
should be used only to detect bugs.</i><p>

This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Arthur van Hoff
@author  Josh Bloch
@author  Neal Gafter
@version 1.105, 12/19/03
@see     Object#equals(java.lang.Object)
@see     Object#hashCode()
@see     Hashtable#rehash()
@see     Collection
@see	    Map
@see	    HashMap
@see	    TreeMap
@since JDK1.0"
      classrelation 158747 // <realization>
	relation 158747 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 158747 // <realization>
	  b parent class_ref 145179 // Dictionary
      end

      classrelation 158875 // <realization>
	relation 158875 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 158875 // <realization>
	  b parent class_ref 136603 // Map
      end

      classrelation 159131 // <realization>
	relation 159131 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 159131 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 159259 // table (<unidirectional association>)
	relation 159259 --->
	  a role_name "table" multiplicity "[]" private
	    comment "
The hash table data.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 159259 // table (<unidirectional association>)
	  b parent class_ref 136859 // Entry
      end

      attribute 174363 "count"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The total number of entries in the hash table.
"
      end

      attribute 174491 "threshold"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The table is rehashed when its size exceeds this threshold.  (The
value of this field is (int)(capacity * loadFactor).)

@serial
"
      end

      attribute 174619 "loadFactor"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The load factor for the hashtable.

@serial
"
      end

      attribute 174747 "modCount"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of times this Hashtable has been structurally modified
Structural modifications are those that change the number of entries in
the Hashtable or otherwise modify its internal structure (e.g.,
rehash).  This field is used to make iterators on Collection-views of
the Hashtable fail-fast.  (See ConcurrentModificationException).
"
      end

      attribute 174875 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  1421746759512286392L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.0.2 for interoperability "
      end

      operation 291483 "Hashtable"
	public explicit_return_type ""
	nparams 2
	  param in name "initialCapacity" explicit_type "int"
	  param in name "loadFactor" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty hashtable with the specified initial 
capacity and the specified load factor.

@param      initialCapacity   the initial capacity of the hashtable.
@param      loadFactor        the load factor of the hashtable.
@exception  IllegalArgumentException  if the initial capacity is less
            than zero, or if the load factor is nonpositive."
      end

      operation 291611 "Hashtable"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty hashtable with the specified initial capacity
and default load factor, which is <tt>0.75</tt>.

@param     initialCapacity   the initial capacity of the hashtable.
@exception IllegalArgumentException if the initial capacity is less
             than zero."
      end

      operation 291739 "Hashtable"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty hashtable with a default initial capacity (11)
and load factor, which is <tt>0.75</tt>. "
      end

      operation 291867 "Hashtable"
	public explicit_return_type ""
	nparams 1
	  param inout name "t" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new hashtable with the same mappings as the given 
Map.  The hashtable is created with an initial capacity sufficient to
hold the mappings in the given Map and a default load factor, which is
<tt>0.75</tt>.

@param t the map whose mappings are to be placed in this map.
@throws NullPointerException if the specified map is null.
@since   1.2"
      end

      operation 291995 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of keys in this hashtable.

@return  the number of keys in this hashtable."
      end

      operation 292123 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this hashtable maps no keys to values.

@return  <code>true</code> if this hashtable maps no keys to values;
         <code>false</code> otherwise."
      end

      operation 292251 "keys"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the keys in this hashtable.

@return  an enumeration of the keys in this hashtable.
@see     Enumeration
@see     #elements()
@see	#keySet()
@see	Map"
      end

      operation 292379 "elements"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the values in this hashtable.
Use the Enumeration methods on the returned object to fetch the elements
sequentially.

@return  an enumeration of the values in this hashtable.
@see     java.util.Enumeration
@see     #keys()
@see	#values()
@see	Map"
      end

      operation 292507 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if some key maps into the specified value in this hashtable.
This operation is more expensive than the <code>containsKey</code>
method.<p>

Note that this method is identical in functionality to containsValue,
(which is part of the Map interface in the collections framework).

@param      value   a value to search for.
@return     <code>true</code> if and only if some key maps to the
            <code>value</code> argument in this hashtable as 
            determined by the <tt>equals</tt> method;
            <code>false</code> otherwise.
@exception  NullPointerException  if the value is <code>null</code>.
@see        #containsKey(Object)
@see        #containsValue(Object)
@see	   Map"
      end

      operation 292635 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this Hashtable maps one or more keys to this value.<p>

Note that this method is identical in functionality to contains
(which predates the Map interface).

@param value value whose presence in this Hashtable is to be tested.
@return <tt>true</tt> if this map maps one or more keys to the
        specified value.
@throws NullPointerException  if the value is <code>null</code>.
@see	   Map
@since 1.2"
      end

      operation 292763 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the specified object is a key in this hashtable.

@param   key   possible key.
@return  <code>true</code> if and only if the specified object 
         is a key in this hashtable, as determined by the 
         <tt>equals</tt> method; <code>false</code> otherwise.
@throws  NullPointerException  if the key is <code>null</code>.
@see     #contains(Object)"
      end

      operation 292891 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which the specified key is mapped in this hashtable.

@param   key   a key in the hashtable.
@return  the value to which the key is mapped in this hashtable;
         <code>null</code> if the key is not mapped to any value in
         this hashtable.
@throws  NullPointerException  if the key is <code>null</code>.
@see     #put(Object, Object)"
      end

      operation 293019 "rehash"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increases the capacity of and internally reorganizes this 
hashtable, in order to accommodate and access its entries more 
efficiently.  This method is called automatically when the 
number of keys in the hashtable exceeds this hashtable's capacity 
and load factor. "
      end

      operation 293147 "put"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Maps the specified <code>key</code> to the specified 
<code>value</code> in this hashtable. Neither the key nor the 
value can be <code>null</code>. <p>

The value can be retrieved by calling the <code>get</code> method 
with a key that is equal to the original key. 

@param      key     the hashtable key.
@param      value   the value.
@return     the previous value of the specified key in this hashtable,
            or <code>null</code> if it did not have one.
@exception  NullPointerException  if the key or value is
              <code>null</code>.
@see     Object#equals(Object)
@see     #get(Object)"
      end

      operation 293275 "remove"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the key (and its corresponding value) from this 
hashtable. This method does nothing if the key is not in the hashtable.

@param   key   the key that needs to be removed.
@return  the value to which the key had been mapped in this hashtable,
         or <code>null</code> if the key did not have a mapping.
@throws  NullPointerException  if the key is <code>null</code>."
      end

      operation 293403 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 136603 // Map
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies all of the mappings from the specified Map to this Hashtable
These mappings will replace any mappings that this Hashtable had for any
of the keys currently in the specified Map. 

@param t Mappings to be stored in this map.
@throws NullPointerException if the specified map is null.
@since 1.2"
      end

      operation 293531 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears this hashtable so that it contains no keys. "
      end

      operation 293659 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a shallow copy of this hashtable. All the structure of the 
hashtable itself is copied, but the keys and values are not cloned. 
This is a relatively expensive operation.

@return  a clone of the hashtable."
      end

      operation 293787 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <tt>Hashtable</tt> object 
in the form of a set of entries, enclosed in braces and separated 
by the ASCII characters \"<tt>,&nbsp;</tt>\" (comma and space). Each 
entry is rendered as the key, an equals sign <tt>=</tt>, and the 
associated element, where the <tt>toString</tt> method is used to 
convert the key and element to strings. <p>Overrides to 
<tt>toString</tt> method of <tt>Object</tt>.

@return  a string representation of this hashtable."
      end

      operation 293915 "getEnumeration"
	private return_type class_ref 144411 // Enumeration
	nparams 1
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 294043 "getIterator"
	private return_type class_ref 135323 // Iterator
	nparams 1
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 159387 // keySet (<unidirectional association>)
	relation 159387 --->
	  a role_name "keySet" init_value "=  null" volatile private
	    comment " Views

Each of these fields are initialized to contain an instance of the
appropriate view the first time this view is requested.  The views are
stateless, so there's no reason to create more than one of each.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K> ${name}${value};
"
	    classrelation_ref 159387 // keySet (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      classrelation 159515 // entrySet (<unidirectional association>)
	relation 159515 --->
	  a role_name "entrySet" init_value "=  null" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	    classrelation_ref 159515 // entrySet (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      classrelation 159643 // values (<unidirectional association>)
	relation 159643 --->
	  a role_name "values" init_value "=  null" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	    classrelation_ref 159643 // values (<unidirectional association>)
	  b parent class_ref 135067 // Collection
      end

      operation 294171 "keySet"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Set view of the keys contained in this Hashtable.  The Set
is backed by the Hashtable, so changes to the Hashtable are reflected
in the Set, and vice-versa.  The Set supports element removal
(which removes the corresponding entry from the Hashtable), but not
element addition.

@return a set view of the keys contained in this map.
@since 1.2"
      end

      class 149787 "KeySet"
	visibility private 
	nactuals 4
	actual class class_ref 137499 // AbstractSet
	  rank 0 explicit_value "K"
	actual class class_ref 137499 // AbstractSet
	  rank 1 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 2 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 159771 // <realization>
	  relation 159771 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 159771 // <realization>
	    b parent class_ref 137499 // AbstractSet
	end

	operation 294299 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 294427 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 294555 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 294683 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 294811 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 294939 "entrySet"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Set view of the entries contained in this Hashtable.
Each element in this collection is a Map.Entry.  The Set is
backed by the Hashtable, so changes to the Hashtable are reflected in
the Set, and vice-versa.  The Set supports element removal
(which removes the corresponding entry from the Hashtable),
but not element addition.

@return a set view of the mappings contained in this map.
@see   Map.Entry
@since 1.2"
      end

      class 149915 "EntrySet"
	visibility private 
	nactuals 4
	actual class class_ref 137499 // AbstractSet
	  rank 0 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 1 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 2 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 159899 // <generalisation>
	  relation 159899 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 159899 // <generalisation>
	    b parent class_ref 137499 // AbstractSet
	end

	operation 295067 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<Map.Entry<K,V>>"
	end

	operation 295195 "add"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 295323 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 295451 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 295579 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 295707 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 295835 "values"
	public return_type class_ref 135067 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Collection view of the values contained in this Hashtable.
The Collection is backed by the Hashtable, so changes to the Hashtable
are reflected in the Collection, and vice-versa.  The Collection
supports element removal (which removes the corresponding entry from
the Hashtable), but not element addition.

@return a collection view of the values contained in this map.
@since 1.2"
      end

      class 150043 "ValueCollection"
	visibility private 
	nactuals 4
	actual class class_ref 134939 // AbstractCollection
	  rank 0 explicit_value "V"
	actual class class_ref 134939 // AbstractCollection
	  rank 1 explicit_value ""
	actual class class_ref 134939 // AbstractCollection
	  rank 2 explicit_value ""
	actual class class_ref 134939 // AbstractCollection
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 160027 // <realization>
	  relation 160027 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 160027 // <realization>
	    b parent class_ref 134939 // AbstractCollection
	end

	operation 295963 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 296091 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 296219 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 296347 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 296475 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison and hashing

Compares the specified Object with this Map for equality,
as per the definition in the Map interface.

@param  o object to be compared for equality with this Hashtable
@return true if the specified Object is equal to this Map.
@see Map#equals(Object)
@since 1.2"
      end

      operation 296603 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this Map as per the definition in the
Map interface.

@see Map#hashCode()
@since 1.2"
      end

      operation 296731 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectOutputStream"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state of the Hashtable to a stream (i.e., serialize it).

@serialData The <i>capacity</i> of the Hashtable (the length of the
		   bucket array) is emitted (int), followed  by the
		   <i>size</i> of the Hashtable (the number of key-value
		   mappings), followed by the key (Object) and value (Object)
		   for each key-value mapping represented by the Hashtable
		   The key-value mappings are emitted in no particular order."
      end

      operation 296859 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectInputStream"
	nexceptions 2
	  explicit_exception "IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the Hashtable from a stream (i.e., deserialize it)."
      end

      operation 296987 "reconstitutionPut"
	private explicit_return_type "void"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	nexceptions 1
	  explicit_exception "StreamCorruptedException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The put method used by readObject. This is provided because put
is overridable and should not be called in readObject since the
subclass will not yet be initialized.

<p>This differs from the regular put method in several ways. No
checking for rehashing is necessary since the number of elements
initially in the table is known. The modCount is not incremented
because we are creating a new instance. Also, no return value
is needed."
      end
    end

    class 139163 "Date"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The class <code>Date</code> represents a specific instant
in time, with millisecond precision.
<p>
Prior to JDK&nbsp;1.1, the class <code>Date</code> had two additional
functions.  It allowed the interpretation of dates as year, month, day, hour,
minute, and second values.  It also allowed the formatting and parsing
of date strings.  Unfortunately, the API for these functions was not
amenable to internationalization.  As of JDK&nbsp;1.1, the
<code>Calendar</code> class should be used to convert between dates and time
fields and the <code>DateFormat</code> class should be used to format and
parse date strings.
The corresponding methods in <code>Date</code> are deprecated.
<p>
Although the <code>Date</code> class is intended to reflect 
coordinated universal time (UTC), it may not do so exactly, 
depending on the host environment of the Java Virtual Machine. 
Nearly all modern operating systems assume that 1&nbsp;day&nbsp;=
24&nbsp;&times;&nbsp;60&nbsp;&times;&nbsp;60&nbsp;= 86400 seconds 
in all cases. In UTC, however, about once every year or two there 
is an extra second, called a \"leap second.\" The leap 
second is always added as the last second of the day, and always 
on December 31 or June 30. For example, the last minute of the 
year 1995 was 61 seconds long, thanks to an added leap second. 
Most computer clocks are not accurate enough to be able to reflect 
the leap-second distinction. 
<p>
Some computer standards are defined in terms of Greenwich mean 
time (GMT), which is equivalent to universal time (UT).  GMT is 
the \"civil\" name for the standard; UT is the 
\"scientific\" name for the same standard. The 
distinction between UTC and UT is that UTC is based on an atomic 
clock and UT is based on astronomical observations, which for all 
practical purposes is an invisibly fine hair to split. Because the 
earth's rotation is not uniform (it slows down and speeds up 
in complicated ways), UT does not always flow uniformly. Leap 
seconds are introduced as needed into UTC so as to keep UTC within 
0.9 seconds of UT1, which is a version of UT with certain 
corrections applied. There are other time and date systems as 
well; for example, the time scale used by the satellite-based 
global positioning system (GPS) is synchronized to UTC but is 
<i>not</i> adjusted for leap seconds. An interesting source of 
further information is the U.S. Naval Observatory, particularly 
the Directorate of Time at:
<blockquote><pre>
    <a href=http://tycho.usno.navy.mil>http://tycho.usno.navy.mil</a>
</pre></blockquote>
<p>
and their definitions of \"Systems of Time\" at:
<blockquote><pre>
    <a href=http://tycho.usno.navy.mil/systime.html>http://tycho.usno.navy.mil/systime.html</a>
</pre></blockquote>
<p>
In all methods of class <code>Date</code> that accept or return 
year, month, date, hours, minutes, and seconds values, the 
following representations are used: 
<ul>
<li>A year <i>y</i> is represented by the integer 
    <i>y</i>&nbsp;<code>-&nbsp;1900</code>. 
<li>A month is represented by an integer from 0 to 11; 0 is January, 
    1 is February, and so forth; thus 11 is December. 
<li>A date (day of month) is represented by an integer from 1 to 31 
    in the usual manner. 
<li>An hour is represented by an integer from 0 to 23. Thus, the hour 
    from midnight to 1 a.m. is hour 0, and the hour from noon to 1 
    p.m. is hour 12. 
<li>A minute is represented by an integer from 0 to 59 in the usual manner.
<li>A second is represented by an integer from 0 to 61; the values 60 and 
    61 occur only for leap seconds and even then only in Java 
    implementations that actually track leap seconds correctly. Because 
    of the manner in which leap seconds are currently introduced, it is 
    extremely unlikely that two leap seconds will occur in the same 
    minute, but this specification follows the date and time conventions 
    for ISO C.
</ul>
<p>
In all cases, arguments given to methods for these purposes need 
not fall within the indicated ranges; for example, a date may be 
specified as January 32 and is interpreted as meaning February 1.

@author  James Gosling
@author  Arthur van Hoff
@author  Alan Liu
@version 1.81, 03/20/07
@see     java.text.DateFormat
@see     java.util.Calendar
@see     java.util.TimeZone
@since   JDK1.0"
      classrelation 151707 // <realization>
	relation 151707 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 151707 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 155035 "gcal"
	class_attribute const_attribute private explicit_type "BaseCalendar"
	init_value "= 
				CalendarSystem.getGregorianCalendar()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 155163 "jcal"
	class_attribute private explicit_type "BaseCalendar"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 155291 "fastTime"
	private explicit_type "long"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 155419 "cdate"
	private explicit_type "BaseCalendar.Date"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If cdate is null, then fastTime indicates the time in millis.
If cdate.isNormalized() is true, then fastTime and cdate are in
synch. Otherwise, fastTime is ignored, and cdate indicates the
time.
"
      end

      attribute 155547 "defaultCenturyStart"
	class_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Initialized just before the value is used. See parse()."
      end

      attribute 155675 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7523967970034938905L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from modified java.util.Date for
interoperability with JDK1.1. The Date was modified to write
and read only the UTC time.
"
      end

      operation 245403 "Date"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a <code>Date</code> object and initializes it so that 
it represents the time at which it was allocated, measured to the 
nearest millisecond. 

@see     java.lang.System#currentTimeMillis()"
      end

      operation 245531 "Date"
	public explicit_return_type ""
	nparams 1
	  param in name "date" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a <code>Date</code> object and initializes it to 
represent the specified number of milliseconds since the 
standard base time known as \"the epoch\", namely January 1, 
1970, 00:00:00 GMT. 

@param   date   the milliseconds since January 1, 1970, 00:00:00 GMT.
@see     java.lang.System#currentTimeMillis()"
      end

      operation 245659 "Date"
	public explicit_return_type ""
	nparams 3
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "date" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Allocates a <code>Date</code> object and initializes it so that 
it represents midnight, local time, at the beginning of the day 
specified by the <code>year</code>, <code>month</code>, and 
<code>date</code> arguments. 

@param   year    the year minus 1900.
@param   month   the month between 0-11.
@param   date    the day of the month between 1-31.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.set(year + 1900, month, date)</code>
or <code>GregorianCalendar(year + 1900, month, date)</code>."
      end

      operation 245787 "Date"
	public explicit_return_type ""
	nparams 5
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "date" explicit_type "int"
	  param in name "hrs" explicit_type "int"
	  param in name "min" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Allocates a <code>Date</code> object and initializes it so that 
it represents the instant at the start of the minute specified by 
the <code>year</code>, <code>month</code>, <code>date</code>, 
<code>hrs</code>, and <code>min</code> arguments, in the local 
time zone. 

@param   year    the year minus 1900.
@param   month   the month between 0-11.
@param   date    the day of the month between 1-31.
@param   hrs     the hours between 0-23.
@param   min     the minutes between 0-59.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.set(year + 1900, month, date,
hrs, min)</code> or <code>GregorianCalendar(year + 1900,
month, date, hrs, min)</code>."
      end

      operation 245915 "Date"
	public explicit_return_type ""
	nparams 6
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "date" explicit_type "int"
	  param in name "hrs" explicit_type "int"
	  param in name "min" explicit_type "int"
	  param in name "sec" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Allocates a <code>Date</code> object and initializes it so that 
it represents the instant at the start of the second specified 
by the <code>year</code>, <code>month</code>, <code>date</code>, 
<code>hrs</code>, <code>min</code>, and <code>sec</code> arguments, 
in the local time zone. 

@param   year    the year minus 1900.
@param   month   the month between 0-11.
@param   date    the day of the month between 1-31.
@param   hrs     the hours between 0-23.
@param   min     the minutes between 0-59.
@param   sec     the seconds between 0-59.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.set(year + 1900, month, date,
hrs, min, sec)</code> or <code>GregorianCalendar(year + 1900,
month, date, hrs, min, sec)</code>."
      end

      operation 246043 "Date"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Allocates a <code>Date</code> object and initializes it so that 
it represents the date and time indicated by the string 
<code>s</code>, which is interpreted as if by the 
{@link Date#parse} method. 

@param   s   a string representation of the date.
@see     java.text.DateFormat
@see     java.util.Date#parse(java.lang.String)
@deprecated As of JDK version 1.1,
replaced by <code>DateFormat.parse(String s)</code>."
      end

      operation 246171 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a copy of this object."
      end

      operation 246299 "UTC"
	class_operation public explicit_return_type "long"
	nparams 6
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "date" explicit_type "int"
	  param in name "hrs" explicit_type "int"
	  param in name "min" explicit_type "int"
	  param in name "sec" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Determines the date and time based on the arguments. The 
arguments are interpreted as a year, month, day of the month, 
hour of the day, minute within the hour, and second within the 
minute, exactly as for the <tt>Date</tt> constructor with six 
arguments, except that the arguments are interpreted relative 
to UTC rather than to the local time zone. The time indicated is 
returned represented as the distance, measured in milliseconds, 
of that time from the epoch (00:00:00 GMT on January 1, 1970).

@param   year    the year minus 1900.
@param   month   the month between 0-11.
@param   date    the day of the month between 1-31.
@param   hrs     the hours between 0-23.
@param   min     the minutes between 0-59.
@param   sec     the seconds between 0-59.
@return  the number of milliseconds since January 1, 1970, 00:00:00 GMT for
         the date and time specified by the arguments. 
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.set(year + 1900, month, date,
hrs, min, sec)</code> or <code>GregorianCalendar(year + 1900,
month, date, hrs, min, sec)</code>, using a UTC
<code>TimeZone</code>, followed by <code>Calendar.getTime().getTime()</code>."
      end

      operation 246427 "parse"
	class_operation public explicit_return_type "long"
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Attempts to interpret the string <tt>s</tt> as a representation 
of a date and time. If the attempt is successful, the time 
indicated is returned represented as the distance, measured in 
milliseconds, of that time from the epoch (00:00:00 GMT on 
January 1, 1970). If the attempt fails, an 
<tt>IllegalArgumentException</tt> is thrown.
<p>
It accepts many syntaxes; in particular, it recognizes the IETF 
standard date syntax: \"Sat, 12 Aug 1995 13:30:00 GMT\". It also 
understands the continental U.S. time-zone abbreviations, but for 
general use, a time-zone offset should be used: \"Sat, 12 Aug 1995 
13:30:00 GMT+0430\" (4 hours, 30 minutes west of the Greenwich 
meridian). If no time zone is specified, the local time zone is 
assumed. GMT and UTC are considered equivalent.
<p>
The string <tt>s</tt> is processed from left to right, looking for 
data of interest. Any material in <tt>s</tt> that is within the 
ASCII parenthesis characters <tt>(</tt> and <tt>)</tt> is ignored. 
Parentheses may be nested. Otherwise, the only characters permitted 
within <tt>s</tt> are these ASCII characters:
<blockquote><pre>
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
0123456789,+-:/</pre></blockquote>
and whitespace characters.<p>
A consecutive sequence of decimal digits is treated as a decimal 
number:<ul>
<li>If a number is preceded by <tt>+</tt> or <tt>-</tt> and a year 
    has already been recognized, then the number is a time-zone 
    offset. If the number is less than 24, it is an offset measured 
    in hours. Otherwise, it is regarded as an offset in minutes, 
    expressed in 24-hour time format without punctuation. A 
    preceding <tt>-</tt> means a westward offset. Time zone offsets 
    are always relative to UTC (Greenwich). Thus, for example, 
    <tt>-5</tt> occurring in the string would mean \"five hours west 
    of Greenwich\" and <tt>+0430</tt> would mean \"four hours and 
    thirty minutes east of Greenwich.\" It is permitted for the 
    string to specify <tt>GMT</tt>, <tt>UT</tt>, or <tt>UTC</tt> 
    redundantly-for example, <tt>GMT-5</tt> or <tt>utc+0430</tt>.
<li>The number is regarded as a year number if one of the
    following conditions is true:
<ul>
    <li>The number is equal to or greater than 70 and followed by a
        space, comma, slash, or end of string
    <li>The number is less than 70, and both a month and a day of
        the month have already been recognized</li>
</ul>
    If the recognized year number is less than 100, it is
    interpreted as an abbreviated year relative to a century of
    which dates are within 80 years before and 19 years after
    the time when the Date class is initialized.
    After adjusting the year number, 1900 is subtracted from
    it. For example, if the current year is 1999 then years in
    the range 19 to 99 are assumed to mean 1919 to 1999, while
    years from 0 to 18 are assumed to mean 2000 to 2018.  Note
    that this is slightly different from the interpretation of
    years less than 100 that is used in {@link java.text.SimpleDateFormat}.
<li>If the number is followed by a colon, it is regarded as an hour, 
    unless an hour has already been recognized, in which case it is 
    regarded as a minute.
<li>If the number is followed by a slash, it is regarded as a month 
    (it is decreased by 1 to produce a number in the range <tt>0</tt> 
    to <tt>11</tt>), unless a month has already been recognized, in 
    which case it is regarded as a day of the month.
<li>If the number is followed by whitespace, a comma, a hyphen, or 
    end of string, then if an hour has been recognized but not a 
    minute, it is regarded as a minute; otherwise, if a minute has 
    been recognized but not a second, it is regarded as a second; 
    otherwise, it is regarded as a day of the month. </ul><p>
A consecutive sequence of letters is regarded as a word and treated 
as follows:<ul>
<li>A word that matches <tt>AM</tt>, ignoring case, is ignored (but 
    the parse fails if an hour has not been recognized or is less 
    than <tt>1</tt> or greater than <tt>12</tt>).
<li>A word that matches <tt>PM</tt>, ignoring case, adds <tt>12</tt> 
    to the hour (but the parse fails if an hour has not been 
    recognized or is less than <tt>1</tt> or greater than <tt>12</tt>).
<li>Any word that matches any prefix of <tt>SUNDAY, MONDAY, TUESDAY, 
    WEDNESDAY, THURSDAY, FRIDAY</tt>, or <tt>SATURDAY</tt>, ignoring 
    case, is ignored. For example, <tt>sat, Friday, TUE</tt>, and 
    <tt>Thurs</tt> are ignored.
<li>Otherwise, any word that matches any prefix of <tt>JANUARY, 
    FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, 
    OCTOBER, NOVEMBER</tt>, or <tt>DECEMBER</tt>, ignoring case, and 
    considering them in the order given here, is recognized as
    specifying a month and is converted to a number (<tt>0</tt> to 
    <tt>11</tt>). For example, <tt>aug, Sept, april</tt>, and 
    <tt>NOV</tt> are recognized as months. So is <tt>Ma</tt>, which 
    is recognized as <tt>MARCH</tt>, not <tt>MAY</tt>.
<li>Any word that matches <tt>GMT, UT</tt>, or <tt>UTC</tt>, ignoring 
    case, is treated as referring to UTC. 
<li>Any word that matches <tt>EST, CST, MST</tt>, or <tt>PST</tt>, 
    ignoring case, is recognized as referring to the time zone in 
    North America that is five, six, seven, or eight hours west of 
    Greenwich, respectively. Any word that matches <tt>EDT, CDT, 
    MDT</tt>, or <tt>PDT</tt>, ignoring case, is recognized as 
    referring to the same time zone, respectively, during daylight 
    saving time.</ul><p>
Once the entire string s has been scanned, it is converted to a time 
result in one of two ways. If a time zone or time-zone offset has been 
recognized, then the year, month, day of month, hour, minute, and 
second are interpreted in UTC and then the time-zone offset is 
applied. Otherwise, the year, month, day of month, hour, minute, and 
second are interpreted in the local time zone.

@param   s   a string to be parsed as a date.
@return  the number of milliseconds since January 1, 1970, 00:00:00 GMT
         represented by the string argument.
@see     java.text.DateFormat
@deprecated As of JDK version 1.1,
replaced by <code>DateFormat.parse(String s)</code>."
      end

      attribute 155803 "wtb"
	class_attribute const_attribute private explicit_type "String"
	multiplicity "[]"
	init_value "=  {
        \"am\", \"pm\",
        \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\",
        \"saturday\", \"sunday\",
        \"january\", \"february\", \"march\", \"april\", \"may\", \"june\",
        \"july\", \"august\", \"september\", \"october\", \"november\", \"december\",
        \"gmt\", \"ut\", \"utc\", \"est\", \"edt\", \"cst\", \"cdt\",
        \"mst\", \"mdt\", \"pst\", \"pdt\"
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 155931 "ttb"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value "=  {
        14, 1, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        10000 + 0, 10000 + 0, 10000 + 0,    // GMT/UT/UTC
        10000 + 5 * 60, 10000 + 4 * 60,     // EST/EDT
        10000 + 6 * 60, 10000 + 5 * 60,     // CST/CDT
        10000 + 7 * 60, 10000 + 6 * 60,     // MST/MDT
        10000 + 8 * 60, 10000 + 7 * 60      // PST/PDT
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 246555 "getYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns a value that is the result of subtracting 1900 from the 
year that contains or begins with the instant in time represented 
by this <code>Date</code> object, as interpreted in the local 
time zone.

@return  the year represented by this date, minus 1900.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.get(Calendar.YEAR) - 1900</code>."
      end

      operation 246683 "setYear"
	public explicit_return_type "void"
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the year of this <tt>Date</tt> object to be the specified 
value plus 1900. This <code>Date</code> object is modified so 
that it represents a point in time within the specified year, 
with the month, date, hour, minute, and second the same as 
before, as interpreted in the local time zone. (Of course, if 
the date was February 29, for example, and the year is set to a 
non-leap year, then the new date will be treated as if it were 
on March 1.)

@param   year    the year value.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.set(Calendar.YEAR, year + 1900)</code>."
      end

      operation 246811 "getMonth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns a number representing the month that contains or begins 
with the instant in time represented by this <tt>Date</tt> object. 
The value returned is between <code>0</code> and <code>11</code>, 
with the value <code>0</code> representing January.

@return  the month represented by this date.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.get(Calendar.MONTH)</code>."
      end

      operation 246939 "setMonth"
	public explicit_return_type "void"
	nparams 1
	  param in name "month" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the month of this date to the specified value. This 
<tt>Date</tt> object is modified so that it represents a point 
in time within the specified month, with the year, date, hour, 
minute, and second the same as before, as interpreted in the 
local time zone. If the date was October 31, for example, and 
the month is set to June, then the new date will be treated as 
if it were on July 1, because June has only 30 days.

@param   month   the month value between 0-11.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.set(Calendar.MONTH, int month)</code>."
      end

      operation 247067 "getDate"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the day of the month represented by this <tt>Date</tt> object. 
The value returned is between <code>1</code> and <code>31</code> 
representing the day of the month that contains or begins with the 
instant in time represented by this <tt>Date</tt> object, as 
interpreted in the local time zone.

@return  the day of the month represented by this date.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.get(Calendar.DAY_OF_MONTH)</code>.
@deprecated"
      end

      operation 247195 "setDate"
	public explicit_return_type "void"
	nparams 1
	  param in name "date" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the day of the month of this <tt>Date</tt> object to the 
specified value. This <tt>Date</tt> object is modified so that 
it represents a point in time within the specified day of the 
month, with the year, month, hour, minute, and second the same 
as before, as interpreted in the local time zone. If the date 
was April 30, for example, and the date is set to 31, then it 
will be treated as if it were on May 1, because April has only 
30 days.

@param   date   the day of the month value between 1-31.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.set(Calendar.DAY_OF_MONTH, int date)</code>."
      end

      operation 247323 "getDay"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the day of the week represented by this date. The 
returned value (<tt>0</tt> = Sunday, <tt>1</tt> = Monday, 
<tt>2</tt> = Tuesday, <tt>3</tt> = Wednesday, <tt>4</tt> = 
Thursday, <tt>5</tt> = Friday, <tt>6</tt> = Saturday) 
represents the day of the week that contains or begins with 
the instant in time represented by this <tt>Date</tt> object, 
as interpreted in the local time zone.

@return  the day of the week represented by this date.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.get(Calendar.DAY_OF_WEEK)</code>."
      end

      operation 247451 "getHours"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the hour represented by this <tt>Date</tt> object. The 
returned value is a number (<tt>0</tt> through <tt>23</tt>) 
representing the hour within the day that contains or begins 
with the instant in time represented by this <tt>Date</tt> 
object, as interpreted in the local time zone.

@return  the hour represented by this date.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.get(Calendar.HOUR_OF_DAY)</code>."
      end

      operation 247579 "setHours"
	public explicit_return_type "void"
	nparams 1
	  param in name "hours" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the hour of this <tt>Date</tt> object to the specified value. 
This <tt>Date</tt> object is modified so that it represents a point 
in time within the specified hour of the day, with the year, month, 
date, minute, and second the same as before, as interpreted in the 
local time zone.

@param   hours   the hour value.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.set(Calendar.HOUR_OF_DAY, int hours)</code>."
      end

      operation 247707 "getMinutes"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the number of minutes past the hour represented by this date, 
as interpreted in the local time zone. 
The value returned is between <code>0</code> and <code>59</code>.

@return  the number of minutes past the hour represented by this date.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.get(Calendar.MINUTE)</code>."
      end

      operation 247835 "setMinutes"
	public explicit_return_type "void"
	nparams 1
	  param in name "minutes" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the minutes of this <tt>Date</tt> object to the specified value. 
This <tt>Date</tt> object is modified so that it represents a point 
in time within the specified minute of the hour, with the year, month, 
date, hour, and second the same as before, as interpreted in the 
local time zone.

@param   minutes   the value of the minutes.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.set(Calendar.MINUTE, int minutes)</code>."
      end

      operation 247963 "getSeconds"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the number of seconds past the minute represented by this date.
The value returned is between <code>0</code> and <code>61</code>. The
values <code>60</code> and <code>61</code> can only occur on those 
Java Virtual Machines that take leap seconds into account.

@return  the number of seconds past the minute represented by this date.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.get(Calendar.SECOND)</code>."
      end

      operation 248091 "setSeconds"
	public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the seconds of this <tt>Date</tt> to the specified value. 
This <tt>Date</tt> object is modified so that it represents a 
point in time within the specified second of the minute, with 
the year, month, date, hour, and minute the same as before, as 
interpreted in the local time zone.

@param   seconds   the seconds value.
@see     java.util.Calendar
@deprecated As of JDK version 1.1,
replaced by <code>Calendar.set(Calendar.SECOND, int seconds)</code>. "
      end

      operation 248219 "getTime"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT
represented by this <tt>Date</tt> object.

@return  the number of milliseconds since January 1, 1970, 00:00:00 GMT
         represented by this date."
      end

      operation 248347 "getTimeImpl"
	private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 248475 "setTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "time" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>Date</code> object to represent a point in time that is 
<code>time</code> milliseconds after January 1, 1970 00:00:00 GMT. 

@param   time   the number of milliseconds."
      end

      operation 248603 "before"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "when" type class_ref 139163 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this date is before the specified date.

@param   when   a date.
@return  <code>true</code> if and only if the instant of time 
           represented by this <tt>Date</tt> object is strictly 
           earlier than the instant represented by <tt>when</tt>;
         <code>false</code> otherwise.
@exception NullPointerException if <code>when</code> is null."
      end

      operation 248731 "after"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "when" type class_ref 139163 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this date is after the specified date.

@param   when   a date.
@return  <code>true</code> if and only if the instant represented 
         by this <tt>Date</tt> object is strictly later than the 
         instant represented by <tt>when</tt>; 
         <code>false</code> otherwise.
@exception NullPointerException if <code>when</code> is null."
      end

      operation 248859 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two dates for equality.
The result is <code>true</code> if and only if the argument is 
not <code>null</code> and is a <code>Date</code> object that 
represents the same point in time, to the millisecond, as this object.
<p>
Thus, two <code>Date</code> objects are equal if and only if the 
<code>getTime</code> method returns the same <code>long</code> 
value for both. 

@param   obj   the object to compare with.
@return  <code>true</code> if the objects are the same;
         <code>false</code> otherwise.
@see     java.util.Date#getTime()"
      end

      operation 248987 "getMillisOf"
	class_operation package explicit_return_type "long"
	nparams 1
	  param inout name "date" type class_ref 139163 // Date
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the millisecond value of this <code>Date</code> object
without affecting its internal state."
      end

      operation 249115 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "anotherDate" type class_ref 139163 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two Dates for ordering.

@param   anotherDate   the <code>Date</code> to be compared.
@return  the value <code>0</code> if the argument Date is equal to
         this Date; a value less than <code>0</code> if this Date
         is before the Date argument; and a value greater than
     <code>0</code> if this Date is after the Date argument.
@since   1.2
@exception NullPointerException if <code>anotherDate</code> is null."
      end

      operation 249243 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code value for this object. The result is the 
exclusive OR of the two halves of the primitive <tt>long</tt> 
value returned by the {@link Date#getTime} 
method. That is, the hash code is the value of the expression:
<blockquote><pre>
(int)(this.getTime()^(this.getTime() >>> 32))</pre></blockquote>

@return  a hash code value for this object. "
      end

      operation 249371 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this <code>Date</code> object to a <code>String</code> 
of the form:
<blockquote><pre>
dow mon dd hh:mm:ss zzz yyyy</pre></blockquote>
where:<ul>
<li><tt>dow</tt> is the day of the week (<tt>Sun, Mon, Tue, Wed, 
    Thu, Fri, Sat</tt>).
<li><tt>mon</tt> is the month (<tt>Jan, Feb, Mar, Apr, May, Jun, 
    Jul, Aug, Sep, Oct, Nov, Dec</tt>).
<li><tt>dd</tt> is the day of the month (<tt>01</tt> through 
    <tt>31</tt>), as two decimal digits.
<li><tt>hh</tt> is the hour of the day (<tt>00</tt> through 
    <tt>23</tt>), as two decimal digits.
<li><tt>mm</tt> is the minute within the hour (<tt>00</tt> through 
    <tt>59</tt>), as two decimal digits.
<li><tt>ss</tt> is the second within the minute (<tt>00</tt> through 
    <tt>61</tt>, as two decimal digits.
<li><tt>zzz</tt> is the time zone (and may reflect daylight saving 
    time). Standard time zone abbreviations include those 
    recognized by the method <tt>parse</tt>. If time zone 
    information is not available, then <tt>zzz</tt> is empty - 
    that is, it consists of no characters at all.
<li><tt>yyyy</tt> is the year, as four decimal digits.
</ul>

@return  a string representation of this date. 
@see     java.util.Date#toLocaleString()
@see     java.util.Date#toGMTString()"
      end

      operation 249499 "convertToAbbr"
	class_operation private explicit_return_type "StringBuilder"
	nparams 2
	  param inout name "sb" explicit_type "StringBuilder"
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the given name to its 3-letter abbreviation (e.g.,
\"monday\" -> \"Mon\") and stored the abbreviation in the given
<code>StringBuilder</code>."
      end

      operation 249627 "toLocaleString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Creates a string representation of this <tt>Date</tt> object in an 
implementation-dependent form. The intent is that the form should 
be familiar to the user of the Java application, wherever it may 
happen to be running. The intent is comparable to that of the 
\"<code>%c</code>\" format supported by the <code>strftime()</code> 
function of ISO&nbsp;C. 

@return  a string representation of this date, using the locale
         conventions.
@see     java.text.DateFormat
@see     java.util.Date#toString()
@see     java.util.Date#toGMTString()
@deprecated As of JDK version 1.1,
replaced by <code>DateFormat.format(Date date)</code>."
      end

      operation 249755 "toGMTString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Creates a string representation of this <tt>Date</tt> object of 
the form:
<blockquote<pre>
d mon yyyy hh:mm:ss GMT</pre></blockquote>
where:<ul>
<li><i>d</i> is the day of the month (<tt>1</tt> through <tt>31</tt>), 
    as one or two decimal digits.
<li><i>mon</i> is the month (<tt>Jan, Feb, Mar, Apr, May, Jun, Jul, 
    Aug, Sep, Oct, Nov, Dec</tt>).
<li><i>yyyy</i> is the year, as four decimal digits.
<li><i>hh</i> is the hour of the day (<tt>00</tt> through <tt>23</tt>), 
    as two decimal digits.
<li><i>mm</i> is the minute within the hour (<tt>00</tt> through 
    <tt>59</tt>), as two decimal digits.
<li><i>ss</i> is the second within the minute (<tt>00</tt> through 
    <tt>61</tt>), as two decimal digits.
<li><i>GMT</i> is exactly the ASCII letters \"<tt>GMT</tt>\" to indicate 
    Greenwich Mean Time.
</ul><p>
The result does not depend on the local time zone.

@return  a string representation of this date, using the Internet GMT
         conventions.
@see     java.text.DateFormat
@see     java.util.Date#toString()
@see     java.util.Date#toLocaleString()
@deprecated As of JDK version 1.1,
replaced by <code>DateFormat.format(Date date)</code>, using a
GMT <code>TimeZone</code>."
      end

      operation 249883 "getTimezoneOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the offset, measured in minutes, for the local time zone 
relative to UTC that is appropriate for the time represented by 
this <code>Date</code> object. 
<p>
For example, in Massachusetts, five time zones west of Greenwich:
<blockquote><pre>
new Date(96, 1, 14).getTimezoneOffset() returns 300</pre></blockquote>
because on February 14, 1996, standard time (Eastern Standard Time) 
is in use, which is offset five hours from UTC; but:
<blockquote><pre>
new Date(96, 5, 1).getTimezoneOffset() returns 240</pre></blockquote>
because on June 1, 1996, daylight saving time (Eastern Daylight Time) 
is in use, which is offset only four hours from UTC.<p>
This method produces the same result as if it computed:
<blockquote><pre>
(this.getTime() - UTC(this.getYear(), 
                      this.getMonth(), 
                      this.getDate(),
                      this.getHours(), 
                      this.getMinutes(), 
                      this.getSeconds())) / (60 * 1000)
</pre></blockquote>

@return  the time-zone offset, in minutes, for the current time zone.
@see     java.util.Calendar#ZONE_OFFSET
@see     java.util.Calendar#DST_OFFSET
@see     java.util.TimeZone#getDefault
@deprecated As of JDK version 1.1,
replaced by <code>-(Calendar.get(Calendar.ZONE_OFFSET) +
Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)</code>."
      end

      operation 250011 "getCalendarDate"
	private explicit_return_type "BaseCalendar.Date"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 250139 "normalize"
	private explicit_return_type "BaseCalendar.Date"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 250267 "normalize"
	private explicit_return_type "BaseCalendar.Date"
	nparams 1
	  param inout name "date" explicit_type "BaseCalendar.Date"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " fastTime and the returned data are in sync upon return."
      end

      operation 250395 "getCalendarSystem"
	class_operation private explicit_return_type "BaseCalendar"
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Gregorian or Julian calendar system to use with the
given date. Use Gregorian from October 15, 1582.

@param year normalized calendar year (not -1900)
@return the CalendarSystem to use for the specified date"
      end

      operation 250523 "getCalendarSystem"
	class_operation private explicit_return_type "BaseCalendar"
	nparams 1
	  param in name "t" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 250651 "getCalendarSystem"
	class_operation private explicit_return_type "BaseCalendar"
	nparams 1
	  param inout name "cdate" explicit_type "BaseCalendar.Date"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 250779 "getJulianCalendar"
	class_operation private explicit_return_type "BaseCalendar"
	nparams 0
	
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 250907 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "ObjectOutputStream"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state of this object to a stream (i.e., serialize it).

@serialData The value returned by <code>getTime()</code>
		   is emitted (long).  This represents the offset from
            January 1, 1970, 00:00:00 GMT in milliseconds."
      end

      operation 251035 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "ObjectInputStream"
	nexceptions 2
	  explicit_exception "IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute this object from a stream (i.e., deserialize it)."
      end
    end

    class 139291 "Collections"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class consists exclusively of static methods that operate on or return
collections.  It contains polymorphic algorithms that operate on
collections, \"wrappers\", which return a new collection backed by a
specified collection, and a few other odds and ends.

<p>The methods of this class all throw a <tt>NullPointerException</tt>
if the collections or class objects provided to them are null.

<p>The documentation for the polymorphic algorithms contained in this class
generally includes a brief description of the <i>implementation</i>.  Such
descriptions should be regarded as <i>implementation notes</i>, rather than
parts of the <i>specification</i>.  Implementors should feel free to
substitute other algorithms, so long as the specification itself is adhered
to.  (For example, the algorithm used by <tt>sort</tt> does not have to be
a mergesort, but it does have to be <i>stable</i>.)

<p>The \"destructive\" algorithms contained in this class, that is, the
algorithms that modify the collection on which they operate, are specified
to throw <tt>UnsupportedOperationException</tt> if the collection does not
support the appropriate mutation primitive(s), such as the <tt>set</tt>
method.  These algorithms may, but are not required to, throw this
exception if an invocation would have no effect on the collection.  For
example, invoking the <tt>sort</tt> method on an unmodifiable list that is
already sorted may or may not throw <tt>UnsupportedOperationException</tt>.

<p>This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@author  Neal Gafter
@version 1.90, 12/17/05
@see	    Collection
@see	    Set
@see	    List
@see	    Map
@since   1.2"
      operation 196123 "Collections"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Suppresses default constructor, ensuring non-instantiability."
      end

      attribute 143899 "BINARYSEARCH_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  5000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Algorithms

Tuning parameters for algorithms - Many of the List algorithms have
two implementations, one of which is appropriate for RandomAccess
lists, the other for \"sequential.\"  Often, the random access variant
yields better performance on small sequential access lists.  The
tuning  parameters below determine the cutoff point for what constitutes
a \"small\" sequential access list for each algorithm.  The values below
were empirically determined to work well for LinkedList. Hopefully
they should be reasonable for other sequential access List
implementations.  Those doing performance work on this code would
do well to validate the values of these parameters from time to time.
(The first word of each tuning parameter name is the algorithm to which
it applies.)
"
      end

      attribute 144027 "REVERSE_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value "=    18"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 144155 "SHUFFLE_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value "=     5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 144283 "FILL_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value "=    25"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 144411 "ROTATE_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value "=   100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 144539 "COPY_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value "=    10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 144667 "REPLACEALL_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value "=    11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 144795 "INDEXOFSUBLIST_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value "=    35"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 196251 "sort"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "list" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Comparable<? super T>> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified list into ascending order, according to the
<i>natural ordering</i> of its elements.  All elements in the list must
implement the <tt>Comparable</tt> interface.  Furthermore, all elements
in the list must be <i>mutually comparable</i> (that is,
<tt>e1.compareTo(e2)</tt> must not throw a <tt>ClassCastException</tt>
for any elements <tt>e1</tt> and <tt>e2</tt> in the list).<p>

This sort is guaranteed to be <i>stable</i>:  equal elements will
not be reordered as a result of the sort.<p>

The specified list must be modifiable, but need not be resizable.<p>

The sorting algorithm is a modified mergesort (in which the merge is
omitted if the highest element in the low sublist is less than the
lowest element in the high sublist).  This algorithm offers guaranteed
n log(n) performance. 

This implementation dumps the specified list into an array, sorts
the array, and iterates over the list resetting each element
from the corresponding position in the array.  This avoids the
n<sup>2</sup> log(n) performance that would result from attempting
to sort a linked list in place.

@param  list the list to be sorted.
@throws ClassCastException if the list contains elements that are not
	       <i>mutually comparable</i> (for example, strings and integers).
@throws UnsupportedOperationException if the specified list's
	       list-iterator does not support the <tt>set</tt> operation.
@see Comparable"
      end

      operation 196379 "sort"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "list" type class_ref 135579 // List
	  param inout name "c" type class_ref 138139 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sorts the specified list according to the order induced by the
specified comparator.  All elements in the list must be <i>mutually
comparable</i> using the specified comparator (that is,
<tt>c.compare(e1, e2)</tt> must not throw a <tt>ClassCastException</tt>
for any elements <tt>e1</tt> and <tt>e2</tt> in the list).<p>

This sort is guaranteed to be <i>stable</i>:  equal elements will
not be reordered as a result of the sort.<p>

The sorting algorithm is a modified mergesort (in which the merge is
omitted if the highest element in the low sublist is less than the
lowest element in the high sublist).  This algorithm offers guaranteed
n log(n) performance. 

The specified list must be modifiable, but need not be resizable.
This implementation dumps the specified list into an array, sorts
the array, and iterates over the list resetting each element
from the corresponding position in the array.  This avoids the
n<sup>2</sup> log(n) performance that would result from attempting
to sort a linked list in place.

@param  list the list to be sorted.
@param  c the comparator to determine the order of the list.  A
       <tt>null</tt> value indicates that the elements' <i>natural
       ordering</i> should be used.
@throws ClassCastException if the list contains elements that are not
	       <i>mutually comparable</i> using the specified comparator.
@throws UnsupportedOperationException if the specified list's
	       list-iterator does not support the <tt>set</tt> operation.
@see Comparator"
      end

      operation 196507 "binarySearch"
	class_operation public explicit_return_type "int"
	nparams 2
	  param inout name "list" type class_ref 135579 // List
	  param inout name "key" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Comparable<? super T>> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches the specified list for the specified object using the binary
search algorithm.  The list must be sorted into ascending order
according to the <i>natural ordering</i> of its elements (as by the
<tt>sort(List)</tt> method, above) prior to making this call.  If it is
not sorted, the results are undefined.  If the list contains multiple
elements equal to the specified object, there is no guarantee which one
will be found.<p>

This method runs in log(n) time for a \"random access\" list (which
provides near-constant-time positional access).  If the specified list
does not implement the {@link RandomAccess} interface and is large,
this method will do an iterator-based binary search that performs
O(n) link traversals and O(log n) element comparisons.

@param  list the list to be searched.
@param  key the key to be searched for.
@return index of the search key, if it is contained in the list;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the list: the index of the first
	       element greater than the key, or <tt>list.size()</tt>, if all
	       elements in the list are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
@throws ClassCastException if the list contains elements that are not
	       <i>mutually comparable</i> (for example, strings and
	       integers), or the search key in not mutually comparable
	       with the elements of the list.
@see    Comparable
@see #sort(List)"
      end

      operation 196635 "indexedBinarySearch"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "list" type class_ref 135579 // List
	  param inout name "key" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Comparable<? super T>> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 196763 "iteratorBinarySearch"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "list" type class_ref 135579 // List
	  param inout name "key" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Comparable<? super T>> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 196891 "get"
	class_operation private explicit_return_type "T"
	nparams 2
	  param inout name "i" type class_ref 135707 // ListIterator
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the ith element from the given list by repositioning the specified
list listIterator."
      end

      operation 197019 "binarySearch"
	class_operation public explicit_return_type "int"
	nparams 3
	  param inout name "list" type class_ref 135579 // List
	  param inout name "key" explicit_type "T"
	  param inout name "c" type class_ref 138139 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends T> ${p0}, ${t1} ${p1}, ${t2}<? super T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches the specified list for the specified object using the binary
search algorithm.  The list must be sorted into ascending order
according to the specified comparator (as by the <tt>Sort(List,
Comparator)</tt> method, above), prior to making this call.  If it is
not sorted, the results are undefined.  If the list contains multiple
elements equal to the specified object, there is no guarantee which one
will be found.<p>

This method runs in log(n) time for a \"random access\" list (which
provides near-constant-time positional access).  If the specified list
does not implement the {@link RandomAccess} interface and is large,
this method will do an iterator-based binary search that performs
O(n) link traversals and O(log n) element comparisons.

@param  list the list to be searched.
@param  key the key to be searched for.
@param  c the comparator by which the list is ordered.  A
       <tt>null</tt> value indicates that the elements' <i>natural
       ordering</i> should be used.
@return index of the search key, if it is contained in the list;
	       otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The
	       <i>insertion point</i> is defined as the point at which the
	       key would be inserted into the list: the index of the first
	       element greater than the key, or <tt>list.size()</tt>, if all
	       elements in the list are less than the specified key.  Note
	       that this guarantees that the return value will be &gt;= 0 if
	       and only if the key is found.
@throws ClassCastException if the list contains elements that are not
	       <i>mutually comparable</i> using the specified comparator,
	       or the search key in not mutually comparable with the
	       elements of the list using this comparator.
@see    Comparable
@see #sort(List, Comparator)"
      end

      operation 197147 "indexedBinarySearch"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "l" type class_ref 135579 // List
	  param inout name "key" explicit_type "T"
	  param inout name "c" type class_ref 138139 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends T> ${p0}, ${t1} ${p1}, ${t2}<? super T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 197275 "iteratorBinarySearch"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "l" type class_ref 135579 // List
	  param inout name "key" explicit_type "T"
	  param inout name "c" type class_ref 138139 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends T> ${p0}, ${t1} ${p1}, ${t2}<? super T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 139419 "SelfComparable"
	visibility private stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 197403 "reverse"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "list" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reverses the order of the elements in the specified list.<p>

This method runs in linear time.

@param  list the list whose elements are to be reversed.
@throws UnsupportedOperationException if the specified list or
        its list-iterator does not support the <tt>set</tt> method."
      end

      operation 197531 "shuffle"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "list" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Randomly permutes the specified list using a default source of
randomness.  All permutations occur with approximately equal
likelihood.<p>

The hedge \"approximately\" is used in the foregoing description because
default source of randomness is only approximately an unbiased source
of independently chosen bits. If it were a perfect source of randomly
chosen bits, then the algorithm would choose permutations with perfect
uniformity.<p>

This implementation traverses the list backwards, from the last element
up to the second, repeatedly swapping a randomly selected element into
the \"current position\".  Elements are randomly selected from the
portion of the list that runs from the first element to the current
position, inclusive.<p>

This method runs in linear time.  If the specified list does not
implement the {@link RandomAccess} interface and is large, this
implementation dumps the specified list into an array before shuffling
it, and dumps the shuffled array back into the list.  This avoids the
quadratic behavior that would result from shuffling a \"sequential
access\" list in place.

@param  list the list to be shuffled.
@throws UnsupportedOperationException if the specified list or
        its list-iterator does not support the <tt>set</tt> method."
      end

      classrelation 137243 // r (<unidirectional association>)
	relation 137243 --->
	  a role_name "r" init_value "=  new Random()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 137243 // r (<unidirectional association>)
	  b parent class_ref 139547 // Random
      end

      operation 197659 "shuffle"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "list" type class_ref 135579 // List
	  param inout name "rnd" type class_ref 139547 // Random
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Randomly permute the specified list using the specified source of
randomness.  All permutations occur with equal likelihood
assuming that the source of randomness is fair.<p>

This implementation traverses the list backwards, from the last element
up to the second, repeatedly swapping a randomly selected element into
the \"current position\".  Elements are randomly selected from the
portion of the list that runs from the first element to the current
position, inclusive.<p>

This method runs in linear time.  If the specified list does not
implement the {@link RandomAccess} interface and is large, this
implementation dumps the specified list into an array before shuffling
it, and dumps the shuffled array back into the list.  This avoids the
quadratic behavior that would result from shuffling a \"sequential
access\" list in place.

@param  list the list to be shuffled.
@param  rnd the source of randomness to use to shuffle the list.
@throws UnsupportedOperationException if the specified list or its
        list-iterator does not support the <tt>set</tt> operation."
      end

      operation 197787 "swap"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "list" type class_ref 135579 // List
	  param in name "i" explicit_type "int"
	  param in name "j" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps the elements at the specified positions in the specified list.
(If the specified positions are equal, invoking this method leaves
the list unchanged.)

@param list The list in which to swap elements.
@param i the index of one element to be swapped.
@param j the index of the other element to be swapped.
@throws IndexOutOfBoundsException if either <tt>i</tt> or <tt>j</tt>
        is out of range (i &lt; 0 || i &gt;= list.size()
        || j &lt; 0 || j &gt;= list.size()).
@since 1.4"
      end

      operation 197915 "swap"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "arr" explicit_type "Object"
	  param in name "i" explicit_type "int"
	  param in name "j" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps the two specified elements in the specified array."
      end

      operation 198043 "fill"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "list" type class_ref 135579 // List
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? super T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces all of the elements of the specified list with the specified
element. <p>

This method runs in linear time.

@param  list the list to be filled with the specified element.
@param  obj The element with which to fill the specified list.
@throws UnsupportedOperationException if the specified list or its
	       list-iterator does not support the <tt>set</tt> operation."
      end

      operation 198171 "copy"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 135579 // List
	  param inout name "src" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? super T> ${p0}, ${t1}<? extends T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies all of the elements from one list into another.  After the
operation, the index of each copied element in the destination list
will be identical to its index in the source list.  The destination
list must be at least as long as the source list.  If it is longer, the
remaining elements in the destination list are unaffected. <p>

This method runs in linear time.

@param  dest The destination list.
@param  src The source list.
@throws IndexOutOfBoundsException if the destination list is too small
        to contain the entire source List.
@throws UnsupportedOperationException if the destination list's
        list-iterator does not support the <tt>set</tt> operation."
      end

      operation 198299 "min"
	class_operation public explicit_return_type "T"
	nparams 1
	  param inout name "coll" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Object & Comparable<? super T>> ${type} ${name}${(}${t0}<? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum element of the given collection, according to the
<i>natural ordering</i> of its elements.  All elements in the
collection must implement the <tt>Comparable</tt> interface.
Furthermore, all elements in the collection must be <i>mutually
comparable</i> (that is, <tt>e1.compareTo(e2)</tt> must not throw a
<tt>ClassCastException</tt> for any elements <tt>e1</tt> and
<tt>e2</tt> in the collection).<p>

This method iterates over the entire collection, hence it requires
time proportional to the size of the collection.

@param  coll the collection whose minimum element is to be determined.
@return the minimum element of the given collection, according
        to the <i>natural ordering</i> of its elements.
@throws ClassCastException if the collection contains elements that are
	       not <i>mutually comparable</i> (for example, strings and
	       integers).
@throws NoSuchElementException if the collection is empty.
@see Comparable"
      end

      operation 198427 "min"
	class_operation public explicit_return_type "T"
	nparams 2
	  param inout name "coll" type class_ref 135067 // Collection
	  param inout name "comp" type class_ref 138139 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends T> ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum element of the given collection, according to the
order induced by the specified comparator.  All elements in the
collection must be <i>mutually comparable</i> by the specified
comparator (that is, <tt>comp.compare(e1, e2)</tt> must not throw a
<tt>ClassCastException</tt> for any elements <tt>e1</tt> and
<tt>e2</tt> in the collection).<p>

This method iterates over the entire collection, hence it requires
time proportional to the size of the collection.

@param  coll the collection whose minimum element is to be determined.
@param  comp the comparator with which to determine the minimum element.
        A <tt>null</tt> value indicates that the elements' <i>natural
        ordering</i> should be used.
@return the minimum element of the given collection, according
        to the specified comparator.
@throws ClassCastException if the collection contains elements that are
	       not <i>mutually comparable</i> using the specified comparator.
@throws NoSuchElementException if the collection is empty.
@see Comparable"
      end

      operation 198555 "max"
	class_operation public explicit_return_type "T"
	nparams 1
	  param inout name "coll" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Object & Comparable<? super T>> ${type} ${name}${(}${t0}<? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum element of the given collection, according to the
<i>natural ordering</i> of its elements.  All elements in the
collection must implement the <tt>Comparable</tt> interface.
Furthermore, all elements in the collection must be <i>mutually
comparable</i> (that is, <tt>e1.compareTo(e2)</tt> must not throw a
<tt>ClassCastException</tt> for any elements <tt>e1</tt> and
<tt>e2</tt> in the collection).<p>

This method iterates over the entire collection, hence it requires
time proportional to the size of the collection.

@param  coll the collection whose maximum element is to be determined.
@return the maximum element of the given collection, according
        to the <i>natural ordering</i> of its elements.
@throws ClassCastException if the collection contains elements that are
	       not <i>mutually comparable</i> (for example, strings and
        integers).
@throws NoSuchElementException if the collection is empty.
@see Comparable"
      end

      operation 198683 "max"
	class_operation public explicit_return_type "T"
	nparams 2
	  param inout name "coll" type class_ref 135067 // Collection
	  param inout name "comp" type class_ref 138139 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends T> ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum element of the given collection, according to the
order induced by the specified comparator.  All elements in the
collection must be <i>mutually comparable</i> by the specified
comparator (that is, <tt>comp.compare(e1, e2)</tt> must not throw a
<tt>ClassCastException</tt> for any elements <tt>e1</tt> and
<tt>e2</tt> in the collection).<p>

This method iterates over the entire collection, hence it requires
time proportional to the size of the collection.

@param  coll the collection whose maximum element is to be determined.
@param  comp the comparator with which to determine the maximum element.
        A <tt>null</tt> value indicates that the elements' <i>natural
       ordering</i> should be used.
@return the maximum element of the given collection, according
        to the specified comparator.
@throws ClassCastException if the collection contains elements that are
	       not <i>mutually comparable</i> using the specified comparator.
@throws NoSuchElementException if the collection is empty.
@see Comparable"
      end

      operation 198811 "rotate"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "list" type class_ref 135579 // List
	  param in name "distance" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Rotates the elements in the specified list by the specified distance.
After calling this method, the element at index <tt>i</tt> will be
the element previously at index <tt>(i - distance)</tt> mod
<tt>list.size()</tt>, for all values of <tt>i</tt> between <tt>0</tt>
and <tt>list.size()-1</tt>, inclusive.  (This method has no effect on
the size of the list.)

<p>For example, suppose <tt>list</tt> comprises<tt> [t, a, n, k, s]</tt>.
After invoking <tt>Collections.rotate(list, 1)</tt> (or
<tt>Collections.rotate(list, -4)</tt>), <tt>list</tt> will comprise
<tt>[s, t, a, n, k]</tt>.

<p>Note that this method can usefully be applied to sublists to
move one or more elements within a list while preserving the
order of the remaining elements.  For example, the following idiom
moves the element at index <tt>j</tt> forward to position
<tt>k</tt> (which must be greater than or equal to <tt>j</tt>):
<pre>
    Collections.rotate(list.subList(j, k+1), -1);
</pre>
To make this concrete, suppose <tt>list</tt> comprises
<tt>[a, b, c, d, e]</tt>.  To move the element at index <tt>1</tt>
(<tt>b</tt>) forward two positions, perform the following invocation:
<pre>
    Collections.rotate(l.subList(1, 4), -1);
</pre>
The resulting list is <tt>[a, c, d, b, e]</tt>.

<p>To move more than one element forward, increase the absolute value
of the rotation distance.  To move elements backward, use a positive
shift distance.

<p>If the specified list is small or implements the {@link
RandomAccess} interface, this implementation exchanges the first
element into the location it should go, and then repeatedly exchanges
the displaced element into the location it should go until a displaced
element is swapped into the first element.  If necessary, the process
is repeated on the second and successive elements, until the rotation
is complete.  If the specified list is large and doesn't implement the
<tt>RandomAccess</tt> interface, this implementation breaks the
list into two sublist views around index <tt>-distance mod size</tt>.
Then the {@link #reverse(List)} method is invoked on each sublist view,
and finally it is invoked on the entire list.  For a more complete
description of both algorithms, see Section 2.3 of Jon Bentley's
<i>Programming Pearls</i> (Addison-Wesley, 1986).

@param list the list to be rotated.
@param distance the distance to rotate the list.  There are no
       constraints on this value; it may be zero, negative, or
       greater than <tt>list.size()</tt>.
@throws UnsupportedOperationException if the specified list or
        its list-iterator does not support the <tt>set</tt> method.
@since 1.4"
      end

      operation 198939 "rotate1"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "list" type class_ref 135579 // List
	  param in name "distance" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 199067 "rotate2"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "list" type class_ref 135579 // List
	  param in name "distance" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 199195 "replaceAll"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param inout name "list" type class_ref 135579 // List
	  param inout name "oldVal" explicit_type "T"
	  param inout name "newVal" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces all occurrences of one specified value in a list with another.
More formally, replaces with <tt>newVal</tt> each element <tt>e</tt>
in <tt>list</tt> such that
<tt>(oldVal==null ? e==null : oldVal.equals(e))</tt>.
(This method has no effect on the size of the list.)

@param list the list in which replacement is to occur.
@param oldVal the old value to be replaced.
@param newVal the new value with which <tt>oldVal</tt> is to be
       replaced.
@return <tt>true</tt> if <tt>list</tt> contained one or more elements
        <tt>e</tt> such that
        <tt>(oldVal==null ?  e==null : oldVal.equals(e))</tt>.
@throws UnsupportedOperationException if the specified list or
        its list-iterator does not support the <tt>set</tt> method.
@since  1.4"
      end

      operation 199323 "indexOfSubList"
	class_operation public explicit_return_type "int"
	nparams 2
	  param inout name "source" type class_ref 135579 // List
	  param inout name "target" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the starting position of the first occurrence of the specified
target list within the specified source list, or -1 if there is no
such occurrence.  More formally, returns the lowest index <tt>i</tt>
such that <tt>source.subList(i, i+target.size()).equals(target)</tt>,
or -1 if there is no such index.  (Returns -1 if
<tt>target.size() > source.size()</tt>.)

<p>This implementation uses the \"brute force\" technique of scanning
over the source list, looking for a match with the target at each
location in turn.

@param source the list in which to search for the first occurrence
       of <tt>target</tt>.
@param target the list to search for as a subList of <tt>source</tt>.
@return the starting position of the first occurrence of the specified
        target list within the specified source list, or -1 if there
        is no such occurrence.
@since  1.4"
      end

      operation 199451 "lastIndexOfSubList"
	class_operation public explicit_return_type "int"
	nparams 2
	  param inout name "source" type class_ref 135579 // List
	  param inout name "target" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the starting position of the last occurrence of the specified
target list within the specified source list, or -1 if there is no such
occurrence.  More formally, returns the highest index <tt>i</tt>
such that <tt>source.subList(i, i+target.size()).equals(target)</tt>,
or -1 if there is no such index.  (Returns -1 if
<tt>target.size() > source.size()</tt>.)

<p>This implementation uses the \"brute force\" technique of iterating
over the source list, looking for a match with the target at each
location in turn.

@param source the list in which to search for the last occurrence
       of <tt>target</tt>.
@param target the list to search for as a subList of <tt>source</tt>.
@return the starting position of the last occurrence of the specified
        target list within the specified source list, or -1 if there
        is no such occurrence.
@since  1.4"
      end

      operation 199579 "unmodifiableCollection"
	class_operation public return_type class_ref 135067 // Collection
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Unmodifiable Wrappers

Returns an unmodifiable view of the specified collection.  This method
allows modules to provide users with \"read-only\" access to internal
collections.  Query operations on the returned collection \"read through\"
to the specified collection, and attempts to modify the returned
collection, whether direct or via its iterator, result in an
<tt>UnsupportedOperationException</tt>.<p>

The returned collection does <i>not</i> pass the hashCode and equals
operations through to the backing collection, but relies on
<tt>Object</tt>'s <tt>equals</tt> and <tt>hashCode</tt> methods.  This
is necessary to preserve the contracts of these operations in the case
that the backing collection is a set or a list.<p>

The returned collection will be serializable if the specified collection
is serializable. 

@param  c the collection for which an unmodifiable view is to be
	       returned.
@return an unmodifiable view of the specified collection."
      end

      class 139675 "UnmodifiableCollection"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135067 // Collection
	  rank 0 explicit_value "E"
	actual class class_ref 135067 // Collection
	  rank 1 explicit_value ""
	actual class class_ref 135067 // Collection
	  rank 2 explicit_value ""
	actual class class_ref 135067 // Collection
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 137371 // <realization>
	  relation 137371 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 137371 // <realization>
	    b parent class_ref 135067 // Collection
	end

	classrelation 137499 // <realization>
	  relation 137499 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 137499 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 144923 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  1820017752578914078L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " use serialVersionUID from JDK 1.2.2 for interoperability"
	end

	classrelation 137627 // c (<unidirectional association>)
	  relation 137627 --->
	    a role_name "c" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends E> ${name}${value};
"
	      classrelation_ref 137627 // c (<unidirectional association>)
	    b parent class_ref 135067 // Collection
	end

	operation 199707 "UnmodifiableCollection"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "c" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 199835 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 199963 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 200091 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 200219 "toArray"
	  public explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 200347 "toArray"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 200475 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 200603 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 200731 "add"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 200859 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 200987 "containsAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "coll" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 201115 "addAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "coll" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 201243 "removeAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "coll" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 201371 "retainAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "coll" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 201499 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 201627 "unmodifiableSet"
	class_operation public return_type class_ref 136731 // Set
	nparams 1
	  param inout name "s" type class_ref 136731 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an unmodifiable view of the specified set.  This method allows
modules to provide users with \"read-only\" access to internal sets.
Query operations on the returned set \"read through\" to the specified
set, and attempts to modify the returned set, whether direct or via its
iterator, result in an <tt>UnsupportedOperationException</tt>.<p>

The returned set will be serializable if the specified set
is serializable. 

@param  s the set for which an unmodifiable view is to be returned.
@return an unmodifiable view of the specified set."
      end

      class 139803 "UnmodifiableSet"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 139675 // UnmodifiableCollection
	  rank 0 explicit_value "E"
	actual class class_ref 136731 // Set
	  rank 0 explicit_value "E"
	actual class class_ref 136731 // Set
	  rank 1 explicit_value ""
	actual class class_ref 136731 // Set
	  rank 2 explicit_value ""
	actual class class_ref 136731 // Set
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 137755 // <realization>
	  relation 137755 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 137755 // <realization>
	    b parent class_ref 139675 // UnmodifiableCollection
	end

	classrelation 137883 // <realization>
	  relation 137883 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 137883 // <realization>
	    b parent class_ref 136731 // Set
	end

	classrelation 138011 // <realization>
	  relation 138011 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 138011 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 145051 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  -9215047833775013803L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 201755 "UnmodifiableSet"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "s" type class_ref 136731 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 201883 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 202011 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 202139 "unmodifiableSortedSet"
	class_operation public return_type class_ref 139931 // SortedSet
	nparams 1
	  param inout name "s" type class_ref 139931 // SortedSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an unmodifiable view of the specified sorted set.  This method
allows modules to provide users with \"read-only\" access to internal
sorted sets.  Query operations on the returned sorted set \"read
through\" to the specified sorted set.  Attempts to modify the returned
sorted set, whether direct, via its iterator, or via its
<tt>subSet</tt>, <tt>headSet</tt>, or <tt>tailSet</tt> views, result in
an <tt>UnsupportedOperationException</tt>.<p>

The returned sorted set will be serializable if the specified sorted set
is serializable. 

@param s the sorted set for which an unmodifiable view is to be
       returned. 
@return an unmodifiable view of the specified sorted set."
      end

      class 140059 "UnmodifiableSortedSet"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 139803 // UnmodifiableSet
	  rank 0 explicit_value "E"
	actual class class_ref 139931 // SortedSet
	  rank 0 explicit_value "E"
	actual class class_ref 139931 // SortedSet
	  rank 1 explicit_value ""
	actual class class_ref 139931 // SortedSet
	  rank 2 explicit_value ""
	actual class class_ref 139931 // SortedSet
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 138139 // <realization>
	  relation 138139 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 138139 // <realization>
	    b parent class_ref 139803 // UnmodifiableSet
	end

	classrelation 138395 // <realization>
	  relation 138395 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 138395 // <realization>
	    b parent class_ref 139931 // SortedSet
	end

	classrelation 138523 // <realization>
	  relation 138523 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 138523 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 145179 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  -4929149591599911165L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 138651 // ss (<unidirectional association>)
	  relation 138651 --->
	    a role_name "ss" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 138651 // ss (<unidirectional association>)
	    b parent class_ref 139931 // SortedSet
	end

	operation 203035 "UnmodifiableSortedSet"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "s" type class_ref 139931 // SortedSet
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 203163 "comparator"
	  public return_type class_ref 138139 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 203291 "subSet"
	  public return_type class_ref 139931 // SortedSet
	  nparams 2
	    param inout name "fromElement" explicit_type "E"
	    param inout name "toElement" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 203419 "headSet"
	  public return_type class_ref 139931 // SortedSet
	  nparams 1
	    param inout name "toElement" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 203547 "tailSet"
	  public return_type class_ref 139931 // SortedSet
	  nparams 1
	    param inout name "fromElement" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 203675 "first"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 203803 "last"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 203931 "unmodifiableList"
	class_operation public return_type class_ref 135579 // List
	nparams 1
	  param inout name "list" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an unmodifiable view of the specified list.  This method allows
modules to provide users with \"read-only\" access to internal
lists.  Query operations on the returned list \"read through\" to the
specified list, and attempts to modify the returned list, whether
direct or via its iterator, result in an
<tt>UnsupportedOperationException</tt>.<p>

The returned list will be serializable if the specified list
is serializable. Similarly, the returned list will implement
{@link RandomAccess} if the specified list does.

@param  list the list for which an unmodifiable view is to be returned.
@return an unmodifiable view of the specified list."
      end

      class 140187 "UnmodifiableList"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 139675 // UnmodifiableCollection
	  rank 0 explicit_value "E"
	actual class class_ref 135579 // List
	  rank 0 explicit_value "E"
	actual class class_ref 135579 // List
	  rank 1 explicit_value ""
	actual class class_ref 135579 // List
	  rank 2 explicit_value ""
	actual class class_ref 135579 // List
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 138779 // <realization>
	  relation 138779 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 138779 // <realization>
	    b parent class_ref 139675 // UnmodifiableCollection
	end

	classrelation 138907 // <realization>
	  relation 138907 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 138907 // <realization>
	    b parent class_ref 135579 // List
	end

	attribute 145307 "serialVersionUID"
	  class_attribute const_attribute package explicit_type "long"
	  init_value "=  -283967356065247728L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 139035 // list (<unidirectional association>)
	  relation 139035 --->
	    a role_name "list" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends E> ${name}${value};
"
	      classrelation_ref 139035 // list (<unidirectional association>)
	    b parent class_ref 135579 // List
	end

	operation 204059 "UnmodifiableList"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "list" type class_ref 135579 // List
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 204187 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 204315 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 204443 "get"
	  public explicit_return_type "E"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 204571 "set"
	  public explicit_return_type "E"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "element" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 204699 "add"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "element" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 204827 "remove"
	  public explicit_return_type "E"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 204955 "indexOf"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 205083 "lastIndexOf"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 205211 "addAll"
	  public explicit_return_type "boolean"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "c" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 205339 "listIterator"
	  public return_type class_ref 135707 // ListIterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 205467 "listIterator"
	  public return_type class_ref 135707 // ListIterator
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 205595 "subList"
	  public return_type class_ref 135579 // List
	  nparams 2
	    param in name "fromIndex" explicit_type "int"
	    param in name "toIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 205723 "readResolve"
	  private explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "UnmodifiableRandomAccessList instances are serialized as
UnmodifiableList instances to allow them to be deserialized
in pre-1.4 JREs (which do not have UnmodifiableRandomAccessList).
This method inverts the transformation.  As a beneficial
side-effect, it also grafts the RandomAccess marker onto
UnmodifiableList instances that were serialized in pre-1.4 JREs.

Note: Unfortunately, UnmodifiableRandomAccessList instances
serialized in 1.4.1 and deserialized in 1.4 will become
UnmodifiableList instances, as this method was missing in 1.4."
	end
      end

      class 140315 "UnmodifiableRandomAccessList"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 140187 // UnmodifiableList
	  rank 0 explicit_value "E"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 139163 // <realization>
	  relation 139163 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 139163 // <realization>
	    b parent class_ref 140187 // UnmodifiableList
	end

	classrelation 139291 // <realization>
	  relation 139291 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 139291 // <realization>
	    b parent class_ref 136347 // RandomAccess
	end

	operation 205851 "UnmodifiableRandomAccessList"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "list" type class_ref 135579 // List
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 205979 "subList"
	  public return_type class_ref 135579 // List
	  nparams 2
	    param in name "fromIndex" explicit_type "int"
	    param in name "toIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 145435 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  -2542308836966382001L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 206107 "writeReplace"
	  private explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Allows instances to be deserialized in pre-1.4 JREs (which do
not have UnmodifiableRandomAccessList).  UnmodifiableList has
a readResolve method that inverts this transformation upon
deserialization."
	end
      end

      operation 206235 "unmodifiableMap"
	class_operation public return_type class_ref 136603 // Map
	nparams 1
	  param inout name "m" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an unmodifiable view of the specified map.  This method
allows modules to provide users with \"read-only\" access to internal
maps.  Query operations on the returned map \"read through\"
to the specified map, and attempts to modify the returned
map, whether direct or via its collection views, result in an
<tt>UnsupportedOperationException</tt>.<p>

The returned map will be serializable if the specified map
is serializable. 

@param  m the map for which an unmodifiable view is to be returned.
@return an unmodifiable view of the specified map."
      end

      class 140443 "UnmodifiableMap"
	visibility private 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 8
	actual class class_ref 136603 // Map
	  rank 0 explicit_value "K"
	actual class class_ref 136603 // Map
	  rank 1 explicit_value "V"
	actual class class_ref 136603 // Map
	  rank 2 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 3 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 4 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 5 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 6 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 7 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 139419 // <realization>
	  relation 139419 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 139419 // <realization>
	    b parent class_ref 136603 // Map
	end

	classrelation 139547 // <realization>
	  relation 139547 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 139547 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 145563 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  -1034234728574286014L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " use serialVersionUID from JDK 1.2.2 for interoperability"
	end

	classrelation 139675 // m (<unidirectional association>)
	  relation 139675 --->
	    a role_name "m" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends K, ? extends V> ${name}${value};
"
	      classrelation_ref 139675 // m (<unidirectional association>)
	    b parent class_ref 136603 // Map
	end

	operation 206363 "UnmodifiableMap"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "m" type class_ref 136603 // Map
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 206491 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 206619 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 206747 "containsKey"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 206875 "containsValue"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "val" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 207003 "get"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 207131 "put"
	  public explicit_return_type "V"
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 207259 "remove"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 207387 "putAll"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "t" type class_ref 136603 // Map
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 207515 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 139803 // keySet (<unidirectional association>)
	  relation 139803 --->
	    a role_name "keySet" init_value "=  null" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K> ${name}${value};
"
	      classrelation_ref 139803 // keySet (<unidirectional association>)
	    b parent class_ref 136731 // Set
	end

	classrelation 139931 // entrySet (<unidirectional association>)
	  relation 139931 --->
	    a role_name "entrySet" init_value "=  null" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	      classrelation_ref 139931 // entrySet (<unidirectional association>)
	    b parent class_ref 136731 // Set
	end

	classrelation 140059 // values (<unidirectional association>)
	  relation 140059 --->
	    a role_name "values" init_value "=  null" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	      classrelation_ref 140059 // values (<unidirectional association>)
	    b parent class_ref 135067 // Collection
	end

	operation 207643 "keySet"
	  public return_type class_ref 136731 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 207771 "entrySet"
	  public return_type class_ref 136731 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 207899 "values"
	  public return_type class_ref 135067 // Collection
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 208027 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 208155 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 208283 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	class 140571 "UnmodifiableEntrySet"
	  visibility package 
	  nformals 2
	  formal name "K" type "" explicit_default_value ""
	    explicit_extends ""
	  formal name "V" type "" explicit_default_value ""
	    explicit_extends ""
	  nactuals 1
	  actual class class_ref 139803 // UnmodifiableSet
	    rank 0 explicit_value "Map.Entry<K,V>"
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 140187 // <realization>
	    relation 140187 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 140187 // <realization>
	      b parent class_ref 139803 // UnmodifiableSet
	  end

	  attribute 145691 "serialVersionUID"
	    class_attribute const_attribute private explicit_type "long"
	    init_value "=  7854390611657943733L"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  operation 208411 "UnmodifiableEntrySet"
	    package explicit_return_type ""
	    nparams 1
	      param inout name "s" type class_ref 136731 // Set
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends Map.Entry<? extends K, ? extends V>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 208539 "iterator"
	    public return_type class_ref 135323 // Iterator
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 208667 "toArray"
	    public explicit_return_type "Object"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 208795 "toArray"
	    public explicit_return_type "T"
	    nparams 1
	      param inout name "a" explicit_type "T"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 208923 "contains"
	    public explicit_return_type "boolean"
	    nparams 1
	      param inout name "o" explicit_type "Object"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment "This method is overridden to protect the backing set against
an object with a nefarious equals function that senses
that the equality-candidate is Map.Entry and calls its
setValue method."
	  end

	  operation 209051 "containsAll"
	    public explicit_return_type "boolean"
	    nparams 1
	      param inout name "coll" type class_ref 135067 // Collection
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment "The next two methods are overridden to protect against
an unscrupulous List whose contains(Object o) method senses
when o is a Map.Entry, and calls o.setValue."
	  end

	  operation 209179 "equals"
	    public explicit_return_type "boolean"
	    nparams 1
	      param inout name "o" explicit_type "Object"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  class 140699 "UnmodifiableEntry"
	    visibility private 
	    nformals 2
	    formal name "K" type "" explicit_default_value ""
	      explicit_extends ""
	    formal name "V" type "" explicit_default_value ""
	      explicit_extends ""
	    nactuals 12
	    actual class class_ref 136603 // Map
	      rank 0 explicit_value "K"
	    actual class class_ref 136603 // Map
	      rank 1 explicit_value "V"
	    actual class class_ref 136603 // Map
	      rank 2 explicit_value ""
	    actual class class_ref 136603 // Map
	      rank 3 explicit_value ""
	    actual class class_ref 136603 // Map
	      rank 4 explicit_value ""
	    actual class class_ref 136603 // Map
	      rank 5 explicit_value ""
	    actual class class_ref 136603 // Map
	      rank 6 explicit_value ""
	    actual class class_ref 136603 // Map
	      rank 7 explicit_value ""
	    actual class class_ref 136859 // Entry
	      rank 0 explicit_value ""
	    actual class class_ref 136859 // Entry
	      rank 1 explicit_value ""
	    actual class class_ref 136859 // Entry
	      rank 2 explicit_value ""
	    actual class class_ref 136859 // Entry
	      rank 3 explicit_value ""
	    cpp_decl ""
	    java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	    php_decl ""
	    python_2_2 python_decl ""
	    idl_decl ""
	    explicit_switch_type ""
	    
	    classrelation 140315 // <realization>
	      relation 140315 -_-|>
		stereotype "bind"
		a public
		  java "${type}"
		  classrelation_ref 140315 // <realization>
		b parent class_ref 136859 // Entry
	    end

	    classrelation 140443 // e (<unidirectional association>)
	      relation 140443 --->
		a role_name "e" private
		  java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends K, ? extends V> ${name}${value};
"
		  classrelation_ref 140443 // e (<unidirectional association>)
		b parent class_ref 136859 // Entry
	    end

	    operation 209307 "UnmodifiableEntry"
	      package explicit_return_type ""
	      nparams 1
	        param inout name "e" type class_ref 136859 // Entry
	      
	      preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	      
	      
	      
	    end

	    operation 209435 "getKey"
	      public explicit_return_type "K"
	      nparams 0
	      
	      preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	      
	      
	      
	    end

	    operation 209563 "getValue"
	      public explicit_return_type "V"
	      nparams 0
	      
	      preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	      
	      
	      
	    end

	    operation 209691 "setValue"
	      public explicit_return_type "V"
	      nparams 1
	        param inout name "value" explicit_type "V"
	      
	      preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	      
	      
	      
	    end

	    operation 209819 "hashCode"
	      public explicit_return_type "int"
	      nparams 0
	      
	      preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	      
	      
	      
	    end

	    operation 209947 "equals"
	      public explicit_return_type "boolean"
	      nparams 1
	        param inout name "o" explicit_type "Object"
	      
	      preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	      
	      
	      
	    end

	    operation 210075 "toString"
	      public explicit_return_type "String"
	      nparams 0
	      
	      preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	      
	      
	      
	    end
	  end
	end
      end

      operation 210203 "unmodifiableSortedMap"
	class_operation public return_type class_ref 140827 // SortedMap
	nparams 1
	  param inout name "m" type class_ref 140827 // SortedMap
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${t0}<K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an unmodifiable view of the specified sorted map.  This method
allows modules to provide users with \"read-only\" access to internal
sorted maps.  Query operations on the returned sorted map \"read through\"
to the specified sorted map.  Attempts to modify the returned
sorted map, whether direct, via its collection views, or via its
<tt>subMap</tt>, <tt>headMap</tt>, or <tt>tailMap</tt> views, result in
an <tt>UnsupportedOperationException</tt>.<p>

The returned sorted map will be serializable if the specified sorted map
is serializable. 

@param m the sorted map for which an unmodifiable view is to be
       returned. 
@return an unmodifiable view of the specified sorted map."
      end

      class 140955 "UnmodifiableSortedMap"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 10
	actual class class_ref 140443 // UnmodifiableMap
	  rank 0 explicit_value "K"
	actual class class_ref 140443 // UnmodifiableMap
	  rank 1 explicit_value "V"
	actual class class_ref 140827 // SortedMap
	  rank 0 explicit_value "K"
	actual class class_ref 140827 // SortedMap
	  rank 1 explicit_value "V"
	actual class class_ref 140827 // SortedMap
	  rank 2 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 3 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 4 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 5 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 6 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 7 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 140571 // <realization>
	  relation 140571 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 140571 // <realization>
	    b parent class_ref 140443 // UnmodifiableMap
	end

	classrelation 140827 // <realization>
	  relation 140827 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 140827 // <realization>
	    b parent class_ref 140827 // SortedMap
	end

	classrelation 140955 // <realization>
	  relation 140955 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 140955 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 145819 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  -8806743815996713206L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 141083 // sm (<unidirectional association>)
	  relation 141083 --->
	    a role_name "sm" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K, ? extends V> ${name}${value};
"
	      classrelation_ref 141083 // sm (<unidirectional association>)
	    b parent class_ref 140827 // SortedMap
	end

	operation 211099 "UnmodifiableSortedMap"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "m" type class_ref 140827 // SortedMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 211227 "comparator"
	  public return_type class_ref 138139 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 211355 "subMap"
	  public return_type class_ref 140827 // SortedMap
	  nparams 2
	    param inout name "fromKey" explicit_type "K"
	    param inout name "toKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 211483 "headMap"
	  public return_type class_ref 140827 // SortedMap
	  nparams 1
	    param inout name "toKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 211611 "tailMap"
	  public return_type class_ref 140827 // SortedMap
	  nparams 1
	    param inout name "fromKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 211739 "firstKey"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 211867 "lastKey"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 211995 "synchronizedCollection"
	class_operation public return_type class_ref 135067 // Collection
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Synch Wrappers

Returns a synchronized (thread-safe) collection backed by the specified
collection.  In order to guarantee serial access, it is critical that
<strong>all</strong> access to the backing collection is accomplished
through the returned collection.<p>

It is imperative that the user manually synchronize on the returned
collection when iterating over it:
<pre>
 Collection c = Collections.synchronizedCollection(myCollection);
    ...
 synchronized(c) {
     Iterator i = c.iterator(); // Must be in the synchronized block
     while (i.hasNext())
        foo(i.next());
 }
</pre>
Failure to follow this advice may result in non-deterministic behavior.

<p>The returned collection does <i>not</i> pass the <tt>hashCode</tt>
and <tt>equals</tt> operations through to the backing collection, but
relies on <tt>Object</tt>'s equals and hashCode methods.  This is
necessary to preserve the contracts of these operations in the case
that the backing collection is a set or a list.<p>

The returned collection will be serializable if the specified collection
is serializable. 

@param  c the collection to be \"wrapped\" in a synchronized collection.
@return a synchronized view of the specified collection."
      end

      operation 212123 "synchronizedCollection"
	class_operation package return_type class_ref 135067 // Collection
	nparams 2
	  param inout name "c" type class_ref 135067 // Collection
	  param inout name "mutex" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 141083 "SynchronizedCollection"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135067 // Collection
	  rank 0 explicit_value "E"
	actual class class_ref 135067 // Collection
	  rank 1 explicit_value ""
	actual class class_ref 135067 // Collection
	  rank 2 explicit_value ""
	actual class class_ref 135067 // Collection
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 141211 // <realization>
	  relation 141211 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 141211 // <realization>
	    b parent class_ref 135067 // Collection
	end

	classrelation 141339 // <realization>
	  relation 141339 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 141339 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 145947 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  3053995032091335093L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " use serialVersionUID from JDK 1.2.2 for interoperability"
	end

	classrelation 141467 // c (<unidirectional association>)
	  relation 141467 --->
	    a role_name "c" package
	      comment " Backing Collection"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 141467 // c (<unidirectional association>)
	    b parent class_ref 135067 // Collection
	end

	attribute 146075 "mutex"
	  package explicit_type "Object"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Object on which to synchronize"
	end

	operation 212251 "SynchronizedCollection"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "c" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 212379 "SynchronizedCollection"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "c" type class_ref 135067 // Collection
	    param inout name "mutex" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 212507 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 212635 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 212763 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 212891 "toArray"
	  public explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 213019 "toArray"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 213147 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 213275 "add"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 213403 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 213531 "containsAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "coll" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 213659 "addAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "coll" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 213787 "removeAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "coll" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 213915 "retainAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "coll" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 214043 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 214171 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 214299 "writeObject"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "s" explicit_type "ObjectOutputStream"
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 214427 "synchronizedSet"
	class_operation public return_type class_ref 136731 // Set
	nparams 1
	  param inout name "s" type class_ref 136731 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a synchronized (thread-safe) set backed by the specified
set.  In order to guarantee serial access, it is critical that
<strong>all</strong> access to the backing set is accomplished
through the returned set.<p>

It is imperative that the user manually synchronize on the returned
set when iterating over it:
<pre>
 Set s = Collections.synchronizedSet(new HashSet());
     ...
 synchronized(s) {
     Iterator i = s.iterator(); // Must be in the synchronized block
     while (i.hasNext())
         foo(i.next());
 }
</pre>
Failure to follow this advice may result in non-deterministic behavior.

<p>The returned set will be serializable if the specified set is
serializable.

@param  s the set to be \"wrapped\" in a synchronized set.
@return a synchronized view of the specified set."
      end

      operation 214555 "synchronizedSet"
	class_operation package return_type class_ref 136731 // Set
	nparams 2
	  param inout name "s" type class_ref 136731 // Set
	  param inout name "mutex" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 141211 "SynchronizedSet"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 141083 // SynchronizedCollection
	  rank 0 explicit_value "E"
	actual class class_ref 136731 // Set
	  rank 0 explicit_value "E"
	actual class class_ref 136731 // Set
	  rank 1 explicit_value ""
	actual class class_ref 136731 // Set
	  rank 2 explicit_value ""
	actual class class_ref 136731 // Set
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 141595 // <realization>
	  relation 141595 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 141595 // <realization>
	    b parent class_ref 141083 // SynchronizedCollection
	end

	classrelation 141723 // <realization>
	  relation 141723 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 141723 // <realization>
	    b parent class_ref 136731 // Set
	end

	attribute 146203 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  487447009682186044L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 214683 "SynchronizedSet"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "s" type class_ref 136731 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 214811 "SynchronizedSet"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "s" type class_ref 136731 // Set
	    param inout name "mutex" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 214939 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 215067 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 215195 "synchronizedSortedSet"
	class_operation public return_type class_ref 139931 // SortedSet
	nparams 1
	  param inout name "s" type class_ref 139931 // SortedSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a synchronized (thread-safe) sorted set backed by the specified
sorted set.  In order to guarantee serial access, it is critical that
<strong>all</strong> access to the backing sorted set is accomplished
through the returned sorted set (or its views).<p>

It is imperative that the user manually synchronize on the returned
sorted set when iterating over it or any of its <tt>subSet</tt>,
<tt>headSet</tt>, or <tt>tailSet</tt> views.
<pre>
 SortedSet s = Collections.synchronizedSortedSet(new HashSortedSet());
     ...
 synchronized(s) {
     Iterator i = s.iterator(); // Must be in the synchronized block
     while (i.hasNext())
         foo(i.next());
 }
</pre>
or:
<pre>
 SortedSet s = Collections.synchronizedSortedSet(new HashSortedSet());
 SortedSet s2 = s.headSet(foo);
     ...
 synchronized(s) {  // Note: s, not s2!!!
     Iterator i = s2.iterator(); // Must be in the synchronized block
     while (i.hasNext())
         foo(i.next());
 }
</pre>
Failure to follow this advice may result in non-deterministic behavior.

<p>The returned sorted set will be serializable if the specified
sorted set is serializable.

@param  s the sorted set to be \"wrapped\" in a synchronized sorted set.
@return a synchronized view of the specified sorted set."
      end

      class 141339 "SynchronizedSortedSet"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 141211 // SynchronizedSet
	  rank 0 explicit_value "E"
	actual class class_ref 139931 // SortedSet
	  rank 0 explicit_value "E"
	actual class class_ref 139931 // SortedSet
	  rank 1 explicit_value ""
	actual class class_ref 139931 // SortedSet
	  rank 2 explicit_value ""
	actual class class_ref 139931 // SortedSet
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 141851 // <realization>
	  relation 141851 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 141851 // <realization>
	    b parent class_ref 141211 // SynchronizedSet
	end

	classrelation 141979 // <realization>
	  relation 141979 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 141979 // <realization>
	    b parent class_ref 139931 // SortedSet
	end

	attribute 146331 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  8695801310862127406L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 142107 // ss (<unidirectional association>)
	  relation 142107 --->
	    a role_name "ss" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 142107 // ss (<unidirectional association>)
	    b parent class_ref 139931 // SortedSet
	end

	operation 215323 "SynchronizedSortedSet"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "s" type class_ref 139931 // SortedSet
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 215451 "SynchronizedSortedSet"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "s" type class_ref 139931 // SortedSet
	    param inout name "mutex" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 215579 "comparator"
	  public return_type class_ref 138139 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 215707 "subSet"
	  public return_type class_ref 139931 // SortedSet
	  nparams 2
	    param inout name "fromElement" explicit_type "E"
	    param inout name "toElement" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 215835 "headSet"
	  public return_type class_ref 139931 // SortedSet
	  nparams 1
	    param inout name "toElement" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 215963 "tailSet"
	  public return_type class_ref 139931 // SortedSet
	  nparams 1
	    param inout name "fromElement" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 216091 "first"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 216219 "last"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 216347 "synchronizedList"
	class_operation public return_type class_ref 135579 // List
	nparams 1
	  param inout name "list" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a synchronized (thread-safe) list backed by the specified
list.  In order to guarantee serial access, it is critical that
<strong>all</strong> access to the backing list is accomplished
through the returned list.<p>

It is imperative that the user manually synchronize on the returned
list when iterating over it:
<pre>
 List list = Collections.synchronizedList(new ArrayList());
     ...
 synchronized(list) {
     Iterator i = list.iterator(); // Must be in synchronized block
     while (i.hasNext())
         foo(i.next());
 }
</pre>
Failure to follow this advice may result in non-deterministic behavior.

<p>The returned list will be serializable if the specified list is
serializable.

@param  list the list to be \"wrapped\" in a synchronized list.
@return a synchronized view of the specified list."
      end

      operation 216475 "synchronizedList"
	class_operation package return_type class_ref 135579 // List
	nparams 2
	  param inout name "list" type class_ref 135579 // List
	  param inout name "mutex" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 141467 "SynchronizedList"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 141083 // SynchronizedCollection
	  rank 0 explicit_value "E"
	actual class class_ref 135579 // List
	  rank 0 explicit_value "E"
	actual class class_ref 135579 // List
	  rank 1 explicit_value ""
	actual class class_ref 135579 // List
	  rank 2 explicit_value ""
	actual class class_ref 135579 // List
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 142235 // <realization>
	  relation 142235 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 142235 // <realization>
	    b parent class_ref 141083 // SynchronizedCollection
	end

	classrelation 142363 // <realization>
	  relation 142363 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 142363 // <realization>
	    b parent class_ref 135579 // List
	end

	attribute 146459 "serialVersionUID"
	  class_attribute const_attribute package explicit_type "long"
	  init_value "=  -7754090372962971524L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 142491 // list (<unidirectional association>)
	  relation 142491 --->
	    a role_name "list" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 142491 // list (<unidirectional association>)
	    b parent class_ref 135579 // List
	end

	operation 216603 "SynchronizedList"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "list" type class_ref 135579 // List
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 216731 "SynchronizedList"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "list" type class_ref 135579 // List
	    param inout name "mutex" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 216859 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 216987 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 217115 "get"
	  public explicit_return_type "E"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 217243 "set"
	  public explicit_return_type "E"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "element" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 217371 "add"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "element" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 217499 "remove"
	  public explicit_return_type "E"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 217627 "indexOf"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 217755 "lastIndexOf"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 217883 "addAll"
	  public explicit_return_type "boolean"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "c" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 218011 "listIterator"
	  public return_type class_ref 135707 // ListIterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 218139 "listIterator"
	  public return_type class_ref 135707 // ListIterator
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 218267 "subList"
	  public return_type class_ref 135579 // List
	  nparams 2
	    param in name "fromIndex" explicit_type "int"
	    param in name "toIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 218395 "readResolve"
	  private explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "SynchronizedRandomAccessList instances are serialized as
SynchronizedList instances to allow them to be deserialized
in pre-1.4 JREs (which do not have SynchronizedRandomAccessList).
This method inverts the transformation.  As a beneficial
side-effect, it also grafts the RandomAccess marker onto
SynchronizedList instances that were serialized in pre-1.4 JREs.

Note: Unfortunately, SynchronizedRandomAccessList instances
serialized in 1.4.1 and deserialized in 1.4 will become
SynchronizedList instances, as this method was missing in 1.4."
	end
      end

      class 141595 "SynchronizedRandomAccessList"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 141467 // SynchronizedList
	  rank 0 explicit_value "E"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 142619 // <realization>
	  relation 142619 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 142619 // <realization>
	    b parent class_ref 141467 // SynchronizedList
	end

	classrelation 142747 // <realization>
	  relation 142747 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 142747 // <realization>
	    b parent class_ref 136347 // RandomAccess
	end

	operation 218523 "SynchronizedRandomAccessList"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "list" type class_ref 135579 // List
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 218651 "SynchronizedRandomAccessList"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "list" type class_ref 135579 // List
	    param inout name "mutex" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 218779 "subList"
	  public return_type class_ref 135579 // List
	  nparams 2
	    param in name "fromIndex" explicit_type "int"
	    param in name "toIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 146587 "serialVersionUID"
	  class_attribute const_attribute package explicit_type "long"
	  init_value "=  1530674583602358482L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 218907 "writeReplace"
	  private explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Allows instances to be deserialized in pre-1.4 JREs (which do
not have SynchronizedRandomAccessList).  SynchronizedList has
a readResolve method that inverts this transformation upon
deserialization."
	end
      end

      operation 219035 "synchronizedMap"
	class_operation public return_type class_ref 136603 // Map
	nparams 1
	  param inout name "m" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a synchronized (thread-safe) map backed by the specified
map.  In order to guarantee serial access, it is critical that
<strong>all</strong> access to the backing map is accomplished
through the returned map.<p>

It is imperative that the user manually synchronize on the returned
map when iterating over any of its collection views:
<pre>
 Map m = Collections.synchronizedMap(new HashMap());
     ...
 Set s = m.keySet();  // Needn't be in synchronized block
     ...
 synchronized(m) {  // Synchronizing on m, not s!
     Iterator i = s.iterator(); // Must be in synchronized block
     while (i.hasNext())
         foo(i.next());
 }
</pre>
Failure to follow this advice may result in non-deterministic behavior.

<p>The returned map will be serializable if the specified map is
serializable.

@param  m the map to be \"wrapped\" in a synchronized map.
@return a synchronized view of the specified map."
      end

      class 141723 "SynchronizedMap"
	visibility private 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 8
	actual class class_ref 136603 // Map
	  rank 0 explicit_value "K"
	actual class class_ref 136603 // Map
	  rank 1 explicit_value "V"
	actual class class_ref 136603 // Map
	  rank 2 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 3 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 4 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 5 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 6 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 7 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 142875 // <realization>
	  relation 142875 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 142875 // <realization>
	    b parent class_ref 136603 // Map
	end

	classrelation 143003 // <realization>
	  relation 143003 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 143003 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 146715 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  1978198479659022715L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " use serialVersionUID from JDK 1.2.2 for interoperability"
	end

	classrelation 143131 // m (<unidirectional association>)
	  relation 143131 --->
	    a role_name "m" private
	      comment " Backing Map"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 143131 // m (<unidirectional association>)
	    b parent class_ref 136603 // Map
	end

	attribute 146843 "mutex"
	  package explicit_type "Object"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Object on which to synchronize"
	end

	operation 219163 "SynchronizedMap"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "m" type class_ref 136603 // Map
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 219291 "SynchronizedMap"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "m" type class_ref 136603 // Map
	    param inout name "mutex" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 219419 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 219547 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 219675 "containsKey"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 219803 "containsValue"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "value" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 219931 "get"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 220059 "put"
	  public explicit_return_type "V"
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 220187 "remove"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 220315 "putAll"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "map" type class_ref 136603 // Map
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 220443 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 143259 // keySet (<unidirectional association>)
	  relation 143259 --->
	    a role_name "keySet" init_value "=  null" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K> ${name}${value};
"
	      classrelation_ref 143259 // keySet (<unidirectional association>)
	    b parent class_ref 136731 // Set
	end

	classrelation 143387 // entrySet (<unidirectional association>)
	  relation 143387 --->
	    a role_name "entrySet" init_value "=  null" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	      classrelation_ref 143387 // entrySet (<unidirectional association>)
	    b parent class_ref 136731 // Set
	end

	classrelation 143515 // values (<unidirectional association>)
	  relation 143515 --->
	    a role_name "values" init_value "=  null" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	      classrelation_ref 143515 // values (<unidirectional association>)
	    b parent class_ref 135067 // Collection
	end

	operation 220571 "keySet"
	  public return_type class_ref 136731 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 220699 "entrySet"
	  public return_type class_ref 136731 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 220827 "values"
	  public return_type class_ref 135067 // Collection
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 220955 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 221083 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 221211 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 221339 "writeObject"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "s" explicit_type "ObjectOutputStream"
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 221467 "synchronizedSortedMap"
	class_operation public return_type class_ref 140827 // SortedMap
	nparams 1
	  param inout name "m" type class_ref 140827 // SortedMap
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a synchronized (thread-safe) sorted map backed by the specified
sorted map.  In order to guarantee serial access, it is critical that
<strong>all</strong> access to the backing sorted map is accomplished
through the returned sorted map (or its views).<p>

It is imperative that the user manually synchronize on the returned
sorted map when iterating over any of its collection views, or the
collections views of any of its <tt>subMap</tt>, <tt>headMap</tt> or
<tt>tailMap</tt> views.
<pre>
 SortedMap m = Collections.synchronizedSortedMap(new HashSortedMap());
     ...
 Set s = m.keySet();  // Needn't be in synchronized block
     ...
 synchronized(m) {  // Synchronizing on m, not s!
     Iterator i = s.iterator(); // Must be in synchronized block
     while (i.hasNext())
         foo(i.next());
 }
</pre>
or:
<pre>
 SortedMap m = Collections.synchronizedSortedMap(new HashSortedMap());
 SortedMap m2 = m.subMap(foo, bar);
     ...
 Set s2 = m2.keySet();  // Needn't be in synchronized block
     ...
 synchronized(m) {  // Synchronizing on m, not m2 or s2!
     Iterator i = s.iterator(); // Must be in synchronized block
     while (i.hasNext())
         foo(i.next());
 }
</pre>
Failure to follow this advice may result in non-deterministic behavior.

<p>The returned sorted map will be serializable if the specified
sorted map is serializable.

@param  m the sorted map to be \"wrapped\" in a synchronized sorted map.
@return a synchronized view of the specified sorted map."
      end

      class 141851 "SynchronizedSortedMap"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 10
	actual class class_ref 141723 // SynchronizedMap
	  rank 0 explicit_value "K"
	actual class class_ref 141723 // SynchronizedMap
	  rank 1 explicit_value "V"
	actual class class_ref 140827 // SortedMap
	  rank 0 explicit_value "K"
	actual class class_ref 140827 // SortedMap
	  rank 1 explicit_value "V"
	actual class class_ref 140827 // SortedMap
	  rank 2 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 3 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 4 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 5 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 6 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 7 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 143643 // <realization>
	  relation 143643 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 143643 // <realization>
	    b parent class_ref 141723 // SynchronizedMap
	end

	classrelation 143771 // <realization>
	  relation 143771 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 143771 // <realization>
	    b parent class_ref 140827 // SortedMap
	end

	attribute 146971 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  -8798146769416483793L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 143899 // sm (<unidirectional association>)
	  relation 143899 --->
	    a role_name "sm" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 143899 // sm (<unidirectional association>)
	    b parent class_ref 140827 // SortedMap
	end

	operation 221595 "SynchronizedSortedMap"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "m" type class_ref 140827 // SortedMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 221723 "SynchronizedSortedMap"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "m" type class_ref 140827 // SortedMap
	    param inout name "mutex" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 221851 "comparator"
	  public return_type class_ref 138139 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 221979 "subMap"
	  public return_type class_ref 140827 // SortedMap
	  nparams 2
	    param inout name "fromKey" explicit_type "K"
	    param inout name "toKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 222107 "headMap"
	  public return_type class_ref 140827 // SortedMap
	  nparams 1
	    param inout name "toKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 222235 "tailMap"
	  public return_type class_ref 140827 // SortedMap
	  nparams 1
	    param inout name "fromKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 222363 "firstKey"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 222491 "lastKey"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 222619 "checkedCollection"
	class_operation public return_type class_ref 135067 // Collection
	nparams 2
	  param inout name "c" type class_ref 135067 // Collection
	  param inout name "type" explicit_type "Class<E>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type}<E> ${name}${(}${t0}<E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Dynamically typesafe collection wrappers

Returns a dynamically typesafe view of the specified collection.  Any
attempt to insert an element of the wrong type will result in an
immediate <tt>ClassCastException</tt>.  Assuming a collection contains
no incorrectly typed elements prior to the time a dynamically typesafe
view is generated, and that all subsequent access to the collection
takes place through the view, it is <i>guaranteed</i> that the
collection cannot contain an incorrectly typed element.

<p>The generics mechanism in the language provides compile-time
(static) type checking, but it is possible to defeat this mechanism
with unchecked casts.  Usually this is not a problem, as the compiler
issues warnings on all such unchecked operations.  There are, however,
times when static type checking alone is not sufficient.  For example,
suppose a collection is passed to a third-party library and it is
imperative that the library code not corrupt the collection by
inserting an element of the wrong type.

<p>Another use of dynamically typesafe views is debugging.  Suppose a
program fails with a <tt>ClassCastException</tt>, indicating that an
incorrectly typed element was put into a parameterized collection.
Unfortunately, the exception can occur at any time after the erroneous
element is inserted, so it typically provides little or no information
as to the real source of the problem.  If the problem is reproducible,
one can quickly determine its source by temporarily modifying the
program to wrap the collection with a dynamically typesafe view.
For example, this declaration:
<pre>
    Collection&lt;String&gt; c = new HashSet&lt;String&gt;();
</pre>
may be replaced temporarily by this one:
<pre>
    Collection&lt;String&gt; c = Collections.checkedCollection(
        new HashSet&lt;String&gt;(), String.class);
</pre>
Running the program again will cause it to fail at the point where
an incorrectly typed element is inserted into the collection, clearly
identifying the source of the problem.  Once the problem is fixed, the
modified declaration may be reverted back to the original.

<p>The returned collection does <i>not</i> pass the hashCode and equals
operations through to the backing collection, but relies on
<tt>Object</tt>'s <tt>equals</tt> and <tt>hashCode</tt> methods.  This
is necessary to preserve the contracts of these operations in the case
that the backing collection is a set or a list.

<p>The returned collection will be serializable if the specified
collection is serializable.

@param c the collection for which a dynamically typesafe view is to be
            returned
@param type the type of element that <tt>c</tt> is permitted to hold
@return a dynamically typesafe view of the specified collection
@since 1.5"
      end

      class 141979 "CheckedCollection"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135067 // Collection
	  rank 0 explicit_value "E"
	actual class class_ref 135067 // Collection
	  rank 1 explicit_value ""
	actual class class_ref 135067 // Collection
	  rank 2 explicit_value ""
	actual class class_ref 135067 // Collection
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 144027 // <realization>
	  relation 144027 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 144027 // <realization>
	    b parent class_ref 135067 // Collection
	end

	classrelation 144155 // <realization>
	  relation 144155 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 144155 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 147099 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  1578914078182001775L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 144283 // c (<unidirectional association>)
	  relation 144283 --->
	    a role_name "c" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 144283 // c (<unidirectional association>)
	    b parent class_ref 135067 // Collection
	end

	attribute 147227 "type"
	  const_attribute package explicit_type "E"
	  stereotype "Class"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 222747 "typeCheck"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 222875 "CheckedCollection"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "c" type class_ref 135067 // Collection
	    param inout name "type" explicit_type "Class<E>"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 223003 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 223131 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 223259 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 223387 "toArray"
	  public explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 223515 "toArray"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 223643 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 223771 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 223899 "containsAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "coll" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 224027 "removeAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "coll" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 224155 "retainAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "coll" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 224283 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 224411 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 224539 "add"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 224667 "addAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "coll" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 147355 "zeroLengthElementArray"
	  private explicit_type "E"
	  multiplicity "[]"
	  init_value "=  null"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Lazily initialized"
	end

	operation 224795 "zeroLengthElementArray"
	  package explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "We don't need locking or volatile, because it's OK if we create 
several zeroLengthElementArrays, and they're immutable."
	end
      end

      operation 224923 "checkedSet"
	class_operation public return_type class_ref 136731 // Set
	nparams 2
	  param inout name "s" type class_ref 136731 // Set
	  param inout name "type" explicit_type "Class<E>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type}<E> ${name}${(}${t0}<E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a dynamically typesafe view of the specified set.
Any attempt to insert an element of the wrong type will result in
an immediate <tt>ClassCastException</tt>.  Assuming a set contains
no incorrectly typed elements prior to the time a dynamically typesafe
view is generated, and that all subsequent access to the set
takes place through the view, it is <i>guaranteed</i> that the
set cannot contain an incorrectly typed element.

<p>A discussion of the use of dynamically typesafe views may be
found in the documentation for the {@link #checkedCollection checkedCollection}
method.

<p>The returned set will be serializable if the specified set is
serializable.

@param s the set for which a dynamically typesafe view is to be
            returned
@param type the type of element that <tt>s</tt> is permitted to hold
@return a dynamically typesafe view of the specified set
@since 1.5"
      end

      class 142107 "CheckedSet"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 141979 // CheckedCollection
	  rank 0 explicit_value "E"
	actual class class_ref 136731 // Set
	  rank 0 explicit_value "E"
	actual class class_ref 136731 // Set
	  rank 1 explicit_value ""
	actual class class_ref 136731 // Set
	  rank 2 explicit_value ""
	actual class class_ref 136731 // Set
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 144411 // <realization>
	  relation 144411 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 144411 // <realization>
	    b parent class_ref 141979 // CheckedCollection
	end

	classrelation 144539 // <realization>
	  relation 144539 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 144539 // <realization>
	    b parent class_ref 136731 // Set
	end

	classrelation 144667 // <realization>
	  relation 144667 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 144667 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 147483 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  4694047833775013803L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 225051 "CheckedSet"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "s" type class_ref 136731 // Set
	    param inout name "elementType" explicit_type "Class<E>"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 225179 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 225307 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 225435 "checkedSortedSet"
	class_operation public return_type class_ref 139931 // SortedSet
	nparams 2
	  param inout name "s" type class_ref 139931 // SortedSet
	  param inout name "type" explicit_type "Class<E>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type}<E> ${name}${(}${t0}<E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a dynamically typesafe view of the specified sorted set.  Any
attempt to insert an element of the wrong type will result in an
immediate <tt>ClassCastException</tt>.  Assuming a sorted set contains
no incorrectly typed elements prior to the time a dynamically typesafe
view is generated, and that all subsequent access to the sorted set
takes place through the view, it is <i>guaranteed</i> that the sorted
set cannot contain an incorrectly typed element.

<p>A discussion of the use of dynamically typesafe views may be
found in the documentation for the {@link #checkedCollection checkedCollection}
method.

<p>The returned sorted set will be serializable if the specified sorted
set is serializable.

@param s the sorted set for which a dynamically typesafe view is to be
            returned
@param type the type of element that <tt>s</tt> is permitted to hold
@return a dynamically typesafe view of the specified sorted set
@since 1.5"
      end

      class 142235 "CheckedSortedSet"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 142107 // CheckedSet
	  rank 0 explicit_value "E"
	actual class class_ref 139931 // SortedSet
	  rank 0 explicit_value "E"
	actual class class_ref 139931 // SortedSet
	  rank 1 explicit_value ""
	actual class class_ref 139931 // SortedSet
	  rank 2 explicit_value ""
	actual class class_ref 139931 // SortedSet
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 144795 // <realization>
	  relation 144795 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 144795 // <realization>
	    b parent class_ref 142107 // CheckedSet
	end

	classrelation 144923 // <realization>
	  relation 144923 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 144923 // <realization>
	    b parent class_ref 139931 // SortedSet
	end

	classrelation 145051 // <realization>
	  relation 145051 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 145051 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 147611 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  1599911165492914959L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 145179 // ss (<unidirectional association>)
	  relation 145179 --->
	    a role_name "ss" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 145179 // ss (<unidirectional association>)
	    b parent class_ref 139931 // SortedSet
	end

	operation 225563 "CheckedSortedSet"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "s" type class_ref 139931 // SortedSet
	    param inout name "type" explicit_type "Class<E>"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 225691 "comparator"
	  public return_type class_ref 138139 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 225819 "first"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 225947 "last"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 226075 "subSet"
	  public return_type class_ref 139931 // SortedSet
	  nparams 2
	    param inout name "fromElement" explicit_type "E"
	    param inout name "toElement" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 226203 "headSet"
	  public return_type class_ref 139931 // SortedSet
	  nparams 1
	    param inout name "toElement" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 226331 "tailSet"
	  public return_type class_ref 139931 // SortedSet
	  nparams 1
	    param inout name "fromElement" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 226459 "checkedList"
	class_operation public return_type class_ref 135579 // List
	nparams 2
	  param inout name "list" type class_ref 135579 // List
	  param inout name "type" explicit_type "Class<E>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type}<E> ${name}${(}${t0}<E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a dynamically typesafe view of the specified list.
Any attempt to insert an element of the wrong type will result in
an immediate <tt>ClassCastException</tt>.  Assuming a list contains
no incorrectly typed elements prior to the time a dynamically typesafe
view is generated, and that all subsequent access to the list
takes place through the view, it is <i>guaranteed</i> that the
list cannot contain an incorrectly typed element.

<p>A discussion of the use of dynamically typesafe views may be
found in the documentation for the {@link #checkedCollection checkedCollection}
method.

<p>The returned list will be serializable if the specified list is
serializable.

@param list the list for which a dynamically typesafe view is to be
            returned
@param type the type of element that <tt>list</tt> is permitted to hold
@return a dynamically typesafe view of the specified list
@since 1.5"
      end

      class 142363 "CheckedList"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 141979 // CheckedCollection
	  rank 0 explicit_value "E"
	actual class class_ref 135579 // List
	  rank 0 explicit_value "E"
	actual class class_ref 135579 // List
	  rank 1 explicit_value ""
	actual class class_ref 135579 // List
	  rank 2 explicit_value ""
	actual class class_ref 135579 // List
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 145307 // <realization>
	  relation 145307 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 145307 // <realization>
	    b parent class_ref 141979 // CheckedCollection
	end

	classrelation 145435 // <realization>
	  relation 145435 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 145435 // <realization>
	    b parent class_ref 135579 // List
	end

	attribute 147739 "serialVersionUID"
	  class_attribute const_attribute package explicit_type "long"
	  init_value "=  65247728283967356L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 145563 // list (<unidirectional association>)
	  relation 145563 --->
	    a role_name "list" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 145563 // list (<unidirectional association>)
	    b parent class_ref 135579 // List
	end

	operation 226587 "CheckedList"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "list" type class_ref 135579 // List
	    param inout name "type" explicit_type "Class<E>"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 226715 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 226843 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 226971 "get"
	  public explicit_return_type "E"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 227099 "remove"
	  public explicit_return_type "E"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 227227 "indexOf"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 227355 "lastIndexOf"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 227483 "set"
	  public explicit_return_type "E"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "element" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 227611 "add"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "element" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 227739 "addAll"
	  public explicit_return_type "boolean"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "c" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 227867 "listIterator"
	  public return_type class_ref 135707 // ListIterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 227995 "listIterator"
	  public return_type class_ref 135707 // ListIterator
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 228123 "subList"
	  public return_type class_ref 135579 // List
	  nparams 2
	    param in name "fromIndex" explicit_type "int"
	    param in name "toIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 142491 "CheckedRandomAccessList"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 142363 // CheckedList
	  rank 0 explicit_value "E"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 145691 // <realization>
	  relation 145691 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 145691 // <realization>
	    b parent class_ref 142363 // CheckedList
	end

	classrelation 145819 // <realization>
	  relation 145819 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 145819 // <realization>
	    b parent class_ref 136347 // RandomAccess
	end

	attribute 147867 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  1638200125423088369L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 228251 "CheckedRandomAccessList"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "list" type class_ref 135579 // List
	    param inout name "type" explicit_type "Class<E>"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 228379 "subList"
	  public return_type class_ref 135579 // List
	  nparams 2
	    param in name "fromIndex" explicit_type "int"
	    param in name "toIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 228507 "checkedMap"
	class_operation public return_type class_ref 136603 // Map
	nparams 3
	  param inout name "m" type class_ref 136603 // Map
	  param inout name "keyType" explicit_type "Class<K>"
	  param inout name "valueType" explicit_type "Class<V>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K, V> ${type}<K, V> ${name}${(}${t0}<K, V> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a dynamically typesafe view of the specified map.  Any attempt
to insert a mapping whose key or value have the wrong type will result
in an immediate <tt>ClassCastException</tt>.  Similarly, any attempt to
modify the value currently associated with a key will result in an
immediate <tt>ClassCastException</tt>, whether the modification is
attempted directly through the map itself, or through a {@link
Map.Entry} instance obtained from the map's {@link Map#entrySet()
entry set} view.

<p>Assuming a map contains no incorrectly typed keys or values
prior to the time a dynamically typesafe view is generated, and
that all subsequent access to the map takes place through the view
(or one of its collection views), it is <i>guaranteed</i> that the
map cannot contain an incorrectly typed key or value.

<p>A discussion of the use of dynamically typesafe views may be
found in the documentation for the {@link #checkedCollection checkedCollection}
method.

<p>The returned map will be serializable if the specified map is
serializable.

@param m the map for which a dynamically typesafe view is to be
            returned
@param keyType the type of key that <tt>m</tt> is permitted to hold
@param valueType the type of value that <tt>m</tt> is permitted to hold
@return a dynamically typesafe view of the specified map
@since 1.5"
      end

      class 142619 "CheckedMap"
	visibility private 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 8
	actual class class_ref 136603 // Map
	  rank 0 explicit_value "K"
	actual class class_ref 136603 // Map
	  rank 1 explicit_value "V"
	actual class class_ref 136603 // Map
	  rank 2 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 3 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 4 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 5 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 6 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 7 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 145947 // <realization>
	  relation 145947 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 145947 // <realization>
	    b parent class_ref 136603 // Map
	end

	classrelation 146075 // <realization>
	  relation 146075 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 146075 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 147995 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  5742860141034234728L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 146203 // m (<unidirectional association>)
	  relation 146203 --->
	    a role_name "m" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K, V> ${name}${value};
"
	      classrelation_ref 146203 // m (<unidirectional association>)
	    b parent class_ref 136603 // Map
	end

	attribute 148123 "keyType"
	  const_attribute package explicit_type "K"
	  stereotype "Class"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 148251 "valueType"
	  const_attribute package explicit_type "V"
	  stereotype "Class"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 228635 "typeCheck"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "key" explicit_type "Object"
	    param inout name "value" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 228763 "CheckedMap"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "m" type class_ref 136603 // Map
	    param inout name "keyType" explicit_type "Class<K>"
	    param inout name "valueType" explicit_type "Class<V>"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K, V> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 228891 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 229019 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 229147 "containsKey"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 229275 "containsValue"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "v" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 229403 "get"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 229531 "remove"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 229659 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 229787 "keySet"
	  public return_type class_ref 136731 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 229915 "values"
	  public return_type class_ref 135067 // Collection
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 230043 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 230171 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 230299 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 230427 "put"
	  public explicit_return_type "V"
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 230555 "putAll"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "t" type class_ref 136603 // Map
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 148379 "zeroLengthKeyArray"
	  private explicit_type "K"
	  multiplicity "[]"
	  init_value "=  null"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Lazily initialized"
	end

	attribute 148507 "zeroLengthValueArray"
	  private explicit_type "V"
	  multiplicity "[]"
	  init_value "=  null"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 230683 "zeroLengthKeyArray"
	  private explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "We don't need locking or volatile, because it's OK if we create 
several zeroLengthValueArrays, and they're immutable."
	end

	operation 230811 "zeroLengthValueArray"
	  private explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 146331 // entrySet (<unidirectional association>)
	  relation 146331 --->
	    a role_name "entrySet" init_value "=  null" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	      classrelation_ref 146331 // entrySet (<unidirectional association>)
	    b parent class_ref 136731 // Set
	end

	operation 230939 "entrySet"
	  public return_type class_ref 136731 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	class 142747 "CheckedEntrySet"
	  visibility package 
	  nformals 2
	  formal name "K" type "" explicit_default_value ""
	    explicit_extends ""
	  formal name "V" type "" explicit_default_value ""
	    explicit_extends ""
	  nactuals 4
	  actual class class_ref 136731 // Set
	    rank 0 explicit_value "Map.Entry<K,V>"
	  actual class class_ref 136731 // Set
	    rank 1 explicit_value ""
	  actual class class_ref 136731 // Set
	    rank 2 explicit_value ""
	  actual class class_ref 136731 // Set
	    rank 3 explicit_value ""
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 146459 // <realization>
	    relation 146459 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 146459 // <realization>
	      b parent class_ref 136731 // Set
	  end

	  classrelation 146587 // s (<unidirectional association>)
	    relation 146587 --->
	      a role_name "s" package
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
		classrelation_ref 146587 // s (<unidirectional association>)
	      b parent class_ref 136731 // Set
	  end

	  attribute 148635 "valueType"
	    package explicit_type "V"
	    stereotype "Class"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  operation 231067 "CheckedEntrySet"
	    package explicit_return_type ""
	    nparams 2
	      param inout name "s" type class_ref 136731 // Set
	      param inout name "valueType" explicit_type "Class<V>"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Map.Entry<K, V>> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 231195 "size"
	    public explicit_return_type "int"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 231323 "isEmpty"
	    public explicit_return_type "boolean"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 231451 "toString"
	    public explicit_return_type "String"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 231579 "hashCode"
	    public explicit_return_type "int"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 231707 "remove"
	    public explicit_return_type "boolean"
	    nparams 1
	      param inout name "o" explicit_type "Object"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 231835 "removeAll"
	    public explicit_return_type "boolean"
	    nparams 1
	      param inout name "coll" type class_ref 135067 // Collection
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 231963 "retainAll"
	    public explicit_return_type "boolean"
	    nparams 1
	      param inout name "coll" type class_ref 135067 // Collection
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 232091 "clear"
	    public explicit_return_type "void"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 232219 "add"
	    public explicit_return_type "boolean"
	    nparams 1
	      param inout name "o" type class_ref 136859 // Entry
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K, V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 232347 "addAll"
	    public explicit_return_type "boolean"
	    nparams 1
	      param inout name "coll" type class_ref 135067 // Collection
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Map.Entry<K, V>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 232475 "iterator"
	    public return_type class_ref 135323 // Iterator
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 232603 "toArray"
	    public explicit_return_type "Object"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 232731 "toArray"
	    public explicit_return_type "T"
	    nparams 1
	      param inout name "a" explicit_type "T"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 232859 "contains"
	    public explicit_return_type "boolean"
	    nparams 1
	      param inout name "o" explicit_type "Object"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment "This method is overridden to protect the backing set against
an object with a nefarious equals function that senses
that the equality-candidate is Map.Entry and calls its
setValue method."
	  end

	  operation 232987 "containsAll"
	    public explicit_return_type "boolean"
	    nparams 1
	      param inout name "coll" type class_ref 135067 // Collection
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment "The next two methods are overridden to protect against
an unscrupulous collection whose contains(Object o) method
senses when o is a Map.Entry, and calls o.setValue."
	  end

	  operation 233115 "equals"
	    public explicit_return_type "boolean"
	    nparams 1
	      param inout name "o" explicit_type "Object"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  class 142875 "CheckedEntry"
	    visibility private 
	    nformals 2
	    formal name "K" type "" explicit_default_value ""
	      explicit_extends ""
	    formal name "V" type "" explicit_default_value ""
	      explicit_extends ""
	    nactuals 12
	    actual class class_ref 136603 // Map
	      rank 0 explicit_value "K"
	    actual class class_ref 136603 // Map
	      rank 1 explicit_value "V"
	    actual class class_ref 136603 // Map
	      rank 2 explicit_value ""
	    actual class class_ref 136603 // Map
	      rank 3 explicit_value ""
	    actual class class_ref 136603 // Map
	      rank 4 explicit_value ""
	    actual class class_ref 136603 // Map
	      rank 5 explicit_value ""
	    actual class class_ref 136603 // Map
	      rank 6 explicit_value ""
	    actual class class_ref 136603 // Map
	      rank 7 explicit_value ""
	    actual class class_ref 136859 // Entry
	      rank 0 explicit_value ""
	    actual class class_ref 136859 // Entry
	      rank 1 explicit_value ""
	    actual class class_ref 136859 // Entry
	      rank 2 explicit_value ""
	    actual class class_ref 136859 // Entry
	      rank 3 explicit_value ""
	    cpp_decl ""
	    java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	    php_decl ""
	    python_2_2 python_decl ""
	    idl_decl ""
	    explicit_switch_type ""
	    
	    classrelation 146715 // <realization>
	      relation 146715 -_-|>
		stereotype "bind"
		a public
		  java "${type}"
		  classrelation_ref 146715 // <realization>
		b parent class_ref 136859 // Entry
	    end

	    classrelation 146843 // e (<unidirectional association>)
	      relation 146843 --->
		a role_name "e" private
		  java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K, V> ${name}${value};
"
		  classrelation_ref 146843 // e (<unidirectional association>)
		b parent class_ref 136859 // Entry
	    end

	    attribute 148763 "valueType"
	      private explicit_type "V"
	      stereotype "Class"
	      cpp_decl ""
	      java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      php_decl ""
	      python_decl ""
	      idl_decl ""
	    end

	    operation 233243 "CheckedEntry"
	      package explicit_return_type ""
	      nparams 2
	        param inout name "e" type class_ref 136859 // Entry
	        param inout name "valueType" explicit_type "Class<V>"
	      
	      preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K, V> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	      
	      
	      
	    end

	    operation 233371 "getKey"
	      public explicit_return_type "K"
	      nparams 0
	      
	      preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	      
	      
	      
	    end

	    operation 233499 "getValue"
	      public explicit_return_type "V"
	      nparams 0
	      
	      preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	      
	      
	      
	    end

	    operation 233627 "hashCode"
	      public explicit_return_type "int"
	      nparams 0
	      
	      preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	      
	      
	      
	    end

	    operation 233755 "toString"
	      public explicit_return_type "String"
	      nparams 0
	      
	      preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	      
	      
	      
	    end

	    operation 233883 "setValue"
	      public explicit_return_type "V"
	      nparams 1
	        param inout name "value" explicit_type "V"
	      
	      preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	      
	      
	      
	    end

	    operation 234011 "equals"
	      public explicit_return_type "boolean"
	      nparams 1
	        param inout name "o" explicit_type "Object"
	      
	      preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	      
	      
	      
	    end
	  end
	end
      end

      operation 234139 "checkedSortedMap"
	class_operation public return_type class_ref 140827 // SortedMap
	nparams 3
	  param inout name "m" type class_ref 140827 // SortedMap
	  param inout name "keyType" explicit_type "Class<K>"
	  param inout name "valueType" explicit_type "Class<V>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${t0}<K, V> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a dynamically typesafe view of the specified sorted map.  Any
attempt to insert a mapping whose key or value have the wrong type will
result in an immediate <tt>ClassCastException</tt>.  Similarly, any
attempt to modify the value currently associated with a key will result
in an immediate <tt>ClassCastException</tt>, whether the modification
is attempted directly through the map itself, or through a {@link
Map.Entry} instance obtained from the map's {@link Map#entrySet() entry
set} view.

<p>Assuming a map contains no incorrectly typed keys or values
prior to the time a dynamically typesafe view is generated, and
that all subsequent access to the map takes place through the view
(or one of its collection views), it is <i>guaranteed</i> that the
map cannot contain an incorrectly typed key or value.

<p>A discussion of the use of dynamically typesafe views may be
found in the documentation for the {@link #checkedCollection checkedCollection}
method.

<p>The returned map will be serializable if the specified map is
serializable.

@param m the map for which a dynamically typesafe view is to be
            returned
@param keyType the type of key that <tt>m</tt> is permitted to hold
@param valueType the type of value that <tt>m</tt> is permitted to hold
@return a dynamically typesafe view of the specified map
@since 1.5"
      end

      class 143003 "CheckedSortedMap"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 10
	actual class class_ref 142619 // CheckedMap
	  rank 0 explicit_value "K"
	actual class class_ref 142619 // CheckedMap
	  rank 1 explicit_value "V"
	actual class class_ref 140827 // SortedMap
	  rank 0 explicit_value "K"
	actual class class_ref 140827 // SortedMap
	  rank 1 explicit_value "V"
	actual class class_ref 140827 // SortedMap
	  rank 2 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 3 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 4 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 5 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 6 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 7 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 146971 // <realization>
	  relation 146971 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 146971 // <realization>
	    b parent class_ref 142619 // CheckedMap
	end

	classrelation 147099 // <realization>
	  relation 147099 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 147099 // <realization>
	    b parent class_ref 140827 // SortedMap
	end

	classrelation 147227 // <realization>
	  relation 147227 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 147227 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 148891 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  1599671320688067438L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 147355 // sm (<unidirectional association>)
	  relation 147355 --->
	    a role_name "sm" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K, V> ${name}${value};
"
	      classrelation_ref 147355 // sm (<unidirectional association>)
	    b parent class_ref 140827 // SortedMap
	end

	operation 234267 "CheckedSortedMap"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "m" type class_ref 140827 // SortedMap
	    param inout name "keyType" explicit_type "Class<K>"
	    param inout name "valueType" explicit_type "Class<V>"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K, V> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 234395 "comparator"
	  public return_type class_ref 138139 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 234523 "firstKey"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 234651 "lastKey"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 234779 "subMap"
	  public return_type class_ref 140827 // SortedMap
	  nparams 2
	    param inout name "fromKey" explicit_type "K"
	    param inout name "toKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 234907 "headMap"
	  public return_type class_ref 140827 // SortedMap
	  nparams 1
	    param inout name "toKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 235035 "tailMap"
	  public return_type class_ref 140827 // SortedMap
	  nparams 1
	    param inout name "fromKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 147483 // EMPTY_SET (<unidirectional association>)
	relation 147483 --->
	  a role_name "EMPTY_SET" init_value "=  new EmptySet()" class_relation const_relation public
	    comment " Miscellaneous

The empty set (immutable).  This set is serializable.

@see #emptySet()

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 147483 // EMPTY_SET (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      operation 235163 "emptySet"
	class_operation public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the empty set (immutable).  This set is serializable.
Unlike the like-named field, this method is parameterized.

<p>This example illustrates the type-safe way to obtain an empty set:
<pre>
    Set&lt;String&gt; s = Collections.emptySet();
</pre>
Implementation note:  Implementations of this method need not
create a separate <tt>Set</tt> object for each call.   Using this
method is likely to have comparable cost to using the like-named
field.  (Unlike this method, the field does not provide type safety.)

@see #EMPTY_SET
@since 1.5"
      end

      class 143131 "EmptySet"
	visibility private 
	nactuals 4
	actual class class_ref 137499 // AbstractSet
	  rank 0 explicit_value "any"
	actual class class_ref 137499 // AbstractSet
	  rank 1 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 2 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 147611 // <realization>
	  relation 147611 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 147611 // <realization>
	    b parent class_ref 137499 // AbstractSet
	end

	classrelation 147739 // <realization>
	  relation 147739 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 147739 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 149019 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  1582296315990362920L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " use serialVersionUID from JDK 1.2.2 for interoperability"
	end

	operation 235291 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 235419 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 235547 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 235675 "readResolve"
	  private explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Preserves singleton property"
	end
      end

      classrelation 147867 // EMPTY_LIST (<unidirectional association>)
	relation 147867 --->
	  a role_name "EMPTY_LIST" init_value "=  new EmptyList()" class_relation const_relation public
	    comment "
The empty list (immutable).  This list is serializable.

@see #emptyList()

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 147867 // EMPTY_LIST (<unidirectional association>)
	  b parent class_ref 135579 // List
      end

      operation 235803 "emptyList"
	class_operation public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the empty list (immutable).  This list is serializable.

<p>This example illustrates the type-safe way to obtain an empty list:
<pre>
    List&lt;String&gt; s = Collections.emptyList();
</pre>
Implementation note:  Implementations of this method need not
create a separate <tt>List</tt> object for each call.   Using this
method is likely to have comparable cost to using the like-named
field.  (Unlike this method, the field does not provide type safety.)

@see #EMPTY_LIST
@since 1.5"
      end

      class 143259 "EmptyList"
	visibility private 
	nactuals 4
	actual class class_ref 135451 // AbstractList
	  rank 0 explicit_value "any"
	actual class class_ref 135451 // AbstractList
	  rank 1 explicit_value ""
	actual class class_ref 135451 // AbstractList
	  rank 2 explicit_value ""
	actual class class_ref 135451 // AbstractList
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 147995 // <realization>
	  relation 147995 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 147995 // <realization>
	    b parent class_ref 135451 // AbstractList
	end

	classrelation 148123 // <realization>
	  relation 148123 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 148123 // <realization>
	    b parent class_ref 136347 // RandomAccess
	end

	classrelation 148251 // <realization>
	  relation 148251 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 148251 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 149147 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  8842843931221139166L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " use serialVersionUID from JDK 1.2.2 for interoperability"
	end

	operation 235931 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 236059 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 236187 "get"
	  public explicit_return_type "Object"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 236315 "readResolve"
	  private explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Preserves singleton property"
	end
      end

      classrelation 148379 // EMPTY_MAP (<unidirectional association>)
	relation 148379 --->
	  a role_name "EMPTY_MAP" init_value "=  new EmptyMap()" class_relation const_relation public
	    comment "
The empty map (immutable).  This map is serializable.

@see #emptyMap()
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 148379 // EMPTY_MAP (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      operation 236443 "emptyMap"
	class_operation public return_type class_ref 136603 // Map
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the empty map (immutable).  This map is serializable.

<p>This example illustrates the type-safe way to obtain an empty set:
<pre>
    Map&lt;String, Date&gt; s = Collections.emptyMap();
</pre>
Implementation note:  Implementations of this method need not
create a separate <tt>Map</tt> object for each call.   Using this
method is likely to have comparable cost to using the like-named
field.  (Unlike this method, the field does not provide type safety.)

@see #EMPTY_MAP
@since 1.5"
      end

      class 143387 "EmptyMap"
	visibility private 
	nactuals 8
	actual class class_ref 136475 // AbstractMap
	  rank 0 explicit_value "any"
	actual class class_ref 136475 // AbstractMap
	  rank 1 explicit_value "any"
	actual class class_ref 136475 // AbstractMap
	  rank 2 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 3 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 4 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 5 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 6 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 7 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 148507 // <realization>
	  relation 148507 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 148507 // <realization>
	    b parent class_ref 136475 // AbstractMap
	end

	classrelation 148635 // <realization>
	  relation 148635 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 148635 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 149275 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  6428348081105594320L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 236571 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 236699 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 236827 "containsKey"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 236955 "containsValue"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "value" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 237083 "get"
	  public explicit_return_type "Object"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 237211 "keySet"
	  public return_type class_ref 136731 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 237339 "values"
	  public return_type class_ref 135067 // Collection
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 237467 "entrySet"
	  public return_type class_ref 136731 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<Object,Object>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 237595 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 237723 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 237851 "readResolve"
	  private explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Preserves singleton property"
	end
      end

      operation 237979 "singleton"
	class_operation public return_type class_ref 136731 // Set
	nparams 1
	  param inout name "o" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable set containing only the specified object.
The returned set is serializable.

@param o the sole object to be stored in the returned set.
@return an immutable set containing only the specified object."
      end

      class 143515 "SingletonSet"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 137499 // AbstractSet
	  rank 0 explicit_value "E"
	actual class class_ref 137499 // AbstractSet
	  rank 1 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 2 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 148763 // <realization>
	  relation 148763 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 148763 // <realization>
	    b parent class_ref 137499 // AbstractSet
	end

	classrelation 148891 // <realization>
	  relation 148891 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 148891 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 149403 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  3193687207550431679L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " use serialVersionUID from JDK 1.2.2 for interoperability"
	end

	attribute 149531 "element"
	  const_attribute private explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 238107 "SingletonSet"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "o" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 238235 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 238363 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 238491 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 238619 "singletonList"
	class_operation public return_type class_ref 135579 // List
	nparams 1
	  param inout name "o" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable list containing only the specified object.
The returned list is serializable.

@param o the sole object to be stored in the returned list.
@return an immutable list containing only the specified object.
@since 1.3"
      end

      class 143643 "SingletonList"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135451 // AbstractList
	  rank 0 explicit_value "E"
	actual class class_ref 135451 // AbstractList
	  rank 1 explicit_value ""
	actual class class_ref 135451 // AbstractList
	  rank 2 explicit_value ""
	actual class class_ref 135451 // AbstractList
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 149019 // <realization>
	  relation 149019 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 149019 // <realization>
	    b parent class_ref 135451 // AbstractList
	end

	classrelation 149147 // <realization>
	  relation 149147 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 149147 // <realization>
	    b parent class_ref 136347 // RandomAccess
	end

	classrelation 149275 // <realization>
	  relation 149275 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 149275 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 149659 "serialVersionUID"
	  class_attribute const_attribute package explicit_type "long"
	  init_value "=  3093736618740652951L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 149787 "element"
	  const_attribute private explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 238747 "SingletonList"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "obj" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 238875 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 239003 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 239131 "get"
	  public explicit_return_type "E"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 239259 "singletonMap"
	class_operation public return_type class_ref 136603 // Map
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable map, mapping only the specified key to the
specified value.  The returned map is serializable.

@param key the sole key to be stored in the returned map.
@param value the value to which the returned map maps <tt>key</tt>.
@return an immutable map containing only the specified key-value
        mapping.
@since 1.3"
      end

      class 143771 "SingletonMap"
	visibility private 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 8
	actual class class_ref 136475 // AbstractMap
	  rank 0 explicit_value "K"
	actual class class_ref 136475 // AbstractMap
	  rank 1 explicit_value "V"
	actual class class_ref 136475 // AbstractMap
	  rank 2 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 3 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 4 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 5 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 6 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 7 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 149403 // <realization>
	  relation 149403 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 149403 // <realization>
	    b parent class_ref 136475 // AbstractMap
	end

	classrelation 149531 // <realization>
	  relation 149531 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 149531 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 149915 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  -6979724477215052911L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 150043 "k"
	  const_attribute private explicit_type "K"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 150171 "v"
	  const_attribute private explicit_type "V"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 239387 "SingletonMap"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 239515 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 239643 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 239771 "containsKey"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 239899 "containsValue"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "value" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 240027 "get"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 149659 // keySet (<unidirectional association>)
	  relation 149659 --->
	    a role_name "keySet" init_value "=  null" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K> ${name}${value};
"
	      classrelation_ref 149659 // keySet (<unidirectional association>)
	    b parent class_ref 136731 // Set
	end

	classrelation 149787 // entrySet (<unidirectional association>)
	  relation 149787 --->
	    a role_name "entrySet" init_value "=  null" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	      classrelation_ref 149787 // entrySet (<unidirectional association>)
	    b parent class_ref 136731 // Set
	end

	classrelation 149915 // values (<unidirectional association>)
	  relation 149915 --->
	    a role_name "values" init_value "=  null" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	      classrelation_ref 149915 // values (<unidirectional association>)
	    b parent class_ref 135067 // Collection
	end

	operation 240155 "keySet"
	  public return_type class_ref 136731 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 240283 "entrySet"
	  public return_type class_ref 136731 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 240411 "values"
	  public return_type class_ref 135067 // Collection
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	class 143899 "ImmutableEntry"
	  visibility private 
	  nformals 2
	  formal name "K" type "" explicit_default_value ""
	    explicit_extends ""
	  formal name "V" type "" explicit_default_value ""
	    explicit_extends ""
	  nactuals 12
	  actual class class_ref 136603 // Map
	    rank 0 explicit_value "K"
	  actual class class_ref 136603 // Map
	    rank 1 explicit_value "V"
	  actual class class_ref 136603 // Map
	    rank 2 explicit_value ""
	  actual class class_ref 136603 // Map
	    rank 3 explicit_value ""
	  actual class class_ref 136603 // Map
	    rank 4 explicit_value ""
	  actual class class_ref 136603 // Map
	    rank 5 explicit_value ""
	  actual class class_ref 136603 // Map
	    rank 6 explicit_value ""
	  actual class class_ref 136603 // Map
	    rank 7 explicit_value ""
	  actual class class_ref 136859 // Entry
	    rank 0 explicit_value ""
	  actual class class_ref 136859 // Entry
	    rank 1 explicit_value ""
	  actual class class_ref 136859 // Entry
	    rank 2 explicit_value ""
	  actual class class_ref 136859 // Entry
	    rank 3 explicit_value ""
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 150043 // <realization>
	    relation 150043 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 150043 // <realization>
	      b parent class_ref 136859 // Entry
	  end

	  attribute 150299 "k"
	    const_attribute package explicit_type "K"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  attribute 150427 "v"
	    const_attribute package explicit_type "V"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  operation 240539 "ImmutableEntry"
	    package explicit_return_type ""
	    nparams 2
	      param inout name "key" explicit_type "K"
	      param inout name "value" explicit_type "V"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 240667 "getKey"
	    public explicit_return_type "K"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 240795 "getValue"
	    public explicit_return_type "V"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 240923 "setValue"
	    public explicit_return_type "V"
	    nparams 1
	      param inout name "value" explicit_type "V"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 241051 "equals"
	    public explicit_return_type "boolean"
	    nparams 1
	      param inout name "o" explicit_type "Object"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 241179 "hashCode"
	    public explicit_return_type "int"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 241307 "toString"
	    public explicit_return_type "String"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end
      end

      operation 241435 "nCopies"
	class_operation public return_type class_ref 135579 // List
	nparams 2
	  param in name "n" explicit_type "int"
	  param inout name "o" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable list consisting of <tt>n</tt> copies of the
specified object.  The newly allocated data object is tiny (it contains
a single reference to the data object).  This method is useful in
combination with the <tt>List.addAll</tt> method to grow lists.
The returned list is serializable.

@param  n the number of elements in the returned list.
@param  o the element to appear repeatedly in the returned list.
@return an immutable list consisting of <tt>n</tt> copies of the
	       specified object.
@throws IllegalArgumentException if n &lt; 0.
@see    List#addAll(Collection)
@see    List#addAll(int, Collection)"
      end

      class 144027 "CopiesList"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135451 // AbstractList
	  rank 0 explicit_value "E"
	actual class class_ref 135451 // AbstractList
	  rank 1 explicit_value ""
	actual class class_ref 135451 // AbstractList
	  rank 2 explicit_value ""
	actual class class_ref 135451 // AbstractList
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 150171 // <realization>
	  relation 150171 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 150171 // <realization>
	    b parent class_ref 135451 // AbstractList
	end

	classrelation 150299 // <realization>
	  relation 150299 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 150299 // <realization>
	    b parent class_ref 136347 // RandomAccess
	end

	classrelation 150427 // <realization>
	  relation 150427 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 150427 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 150555 "serialVersionUID"
	  class_attribute const_attribute package explicit_type "long"
	  init_value "=  2739099268398711800L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 150683 "n"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 150811 "element"
	  package explicit_type "E"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 241563 "CopiesList"
	  package explicit_return_type ""
	  nparams 2
	    param in name "n" explicit_type "int"
	    param inout name "o" explicit_type "E"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 241691 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 241819 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 241947 "get"
	  public explicit_return_type "E"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 242075 "reverseOrder"
	class_operation public return_type class_ref 138139 // Comparator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a comparator that imposes the reverse of the <i>natural
ordering</i> on a collection of objects that implement the
<tt>Comparable</tt> interface.  (The natural ordering is the ordering
imposed by the objects' own <tt>compareTo</tt> method.)  This enables a
simple idiom for sorting (or maintaining) collections (or arrays) of
objects that implement the <tt>Comparable</tt> interface in
reverse-natural-order.  For example, suppose a is an array of
strings. Then: <pre>
		Arrays.sort(a, Collections.reverseOrder());
</pre> sorts the array in reverse-lexicographic (alphabetical) order.<p>

The returned comparator is serializable.

@return a comparator that imposes the reverse of the <i>natural
	       ordering</i> on a collection of objects that implement
	       the <tt>Comparable</tt> interface.
@see Comparable"
      end

      classrelation 150555 // REVERSE_ORDER (<unidirectional association>)
	relation 150555 --->
	  a role_name "REVERSE_ORDER" init_value "=  new ReverseComparator()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 150555 // REVERSE_ORDER (<unidirectional association>)
	  b parent class_ref 138139 // Comparator
      end

      class 144155 "ReverseComparator"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 138139 // Comparator
	  rank 0 explicit_value "Comparable<Object>"
	actual class class_ref 138139 // Comparator
	  rank 1 explicit_value ""
	actual class class_ref 138139 // Comparator
	  rank 2 explicit_value ""
	actual class class_ref 138139 // Comparator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 150683 // <realization>
	  relation 150683 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 150683 // <realization>
	    b parent class_ref 138139 // Comparator
	end

	classrelation 150811 // <realization>
	  relation 150811 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 150811 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 150939 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  7207038068494060240L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " use serialVersionUID from JDK 1.2.2 for interoperability"
	end

	operation 242459 "compare"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "c1" explicit_type "Comparable<Object>"
	    param inout name "c2" explicit_type "Comparable<Object>"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 242587 "reverseOrder"
	class_operation public return_type class_ref 138139 // Comparator
	nparams 1
	  param inout name "cmp" type class_ref 138139 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a comparator that imposes the reverse ordering of the specified
comparator.  If the specified comparator is null, this method is
equivalent to {@link #reverseOrder()} (in other words, it returns a
comparator that imposes the reverse of the <i>natural ordering</i> on a
collection of objects that implement the Comparable interface).

<p>The returned comparator is serializable (assuming the specified
comparator is also serializable or null).

@return a comparator that imposes the reverse ordering of the
    specified comparator.
@since 1.5"
      end

      class 144283 "ReverseComparator2"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 138139 // Comparator
	  rank 0 explicit_value "T"
	actual class class_ref 138139 // Comparator
	  rank 1 explicit_value ""
	actual class class_ref 138139 // Comparator
	  rank 2 explicit_value ""
	actual class class_ref 138139 // Comparator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 150939 // <realization>
	  relation 150939 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 150939 // <realization>
	    b parent class_ref 138139 // Comparator
	end

	classrelation 151067 // <realization>
	  relation 151067 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 151067 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 151067 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  4374092139857L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 151195 // cmp (<unidirectional association>)
	  relation 151195 --->
	    a role_name "cmp" private
	      comment "
The comparator specified in the static factory.  This will never
be null, as the static factory returns a ReverseComparator
instance if its argument is null.

@serial

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 151195 // cmp (<unidirectional association>)
	    b parent class_ref 138139 // Comparator
	end

	operation 242715 "ReverseComparator2"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "cmp" type class_ref 138139 // Comparator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 242843 "compare"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "t1" explicit_type "T"
	    param inout name "t2" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 242971 "enumeration"
	class_operation public return_type class_ref 144411 // Enumeration
	nparams 1
	  param in name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}final ${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration over the specified collection.  This provides
interoperability with legacy APIs that require an enumeration
as input.

@param c the collection for which an enumeration is to be returned.
@return an enumeration over the specified collection.
@see Enumeration"
      end

      operation 243099 "list"
	class_operation public return_type class_ref 137627 // ArrayList
	nparams 1
	  param inout name "e" type class_ref 144411 // Enumeration
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array list containing the elements returned by the
specified enumeration in the order they are returned by the
enumeration.  This method provides interoperability between
legacy APIs that return enumerations and new APIs that require
collections.

@param e enumeration providing elements for the returned
         array list
@return an array list containing the elements returned
        by the specified enumeration.
@since 1.4
@see Enumeration
@see ArrayList"
      end

      operation 243227 "eq"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "o1" explicit_type "Object"
	  param inout name "o2" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the specified arguments are equal, or both null."
      end

      operation 243355 "frequency"
	class_operation public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 135067 // Collection
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in the specified collection equal to the
specified object.  More formally, returns the number of elements
<tt>e</tt> in the collection such that
<tt>(o == null ? e == null : o.equals(e))</tt>.

@param c the collection in which to determine the frequency
    of <tt>o</tt>
@param o the object whose frequency is to be determined
@throws NullPointerException if <tt>c</tt> is null
@since 1.5"
      end

      operation 243483 "disjoint"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "c1" type class_ref 135067 // Collection
	  param inout name "c2" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if the two specified collections have no
elements in common.

<p>Care must be exercised if this method is used on collections that
do not comply with the general contract for <tt>Collection</tt>.
Implementations may elect to iterate over either collection and test
for containment in the other collection (or to perform any equivalent
computation).  If either collection uses a nonstandard equality test
(as does a {@link SortedSet} whose ordering is not <i>compatible with
equals</i>, or the key set of an {@link IdentityHashMap}), both
collections must use the same nonstandard equality test, or the
result of this method is undefined.

<p>Note that it is permissible to pass the same collection in both
parameters, in which case the method will return true if and only if
the collection is empty.

@param c1 a collection
@param c2 a collection
@throws NullPointerException if either collection is null
@since 1.5"
      end

      operation 243611 "addAll"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "c" type class_ref 135067 // Collection
	  param inout name "" explicit_type "T...a"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? super T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds all of the specified elements to the specified collection.
Elements to be added may be specified individually or as an array.
The behavior of this convenience method is identical to that of
<tt>c.addAll(Arrays.asList(elements))</tt>, but this method is likely
to run significantly faster under most implementations.

<p>When elements are specified individually, this method provides a
convenient way to add a few elements to an existing collection:
<pre>
    Collections.addAll(flavors, \"Peaches 'n Plutonium\", \"Rocky Racoon\");
</pre>

@param c the collection into which <tt>elements</tt> are to be inserted
@param a the elements to insert into <tt>c</tt>
@return <tt>true</tt> if the collection changed as a result of the call
@throws UnsupportedOperationException if <tt>c</tt> does not support
        the <tt>add</tt> method
@throws NullPointerException if <tt>elements</tt> contains one or more
        null values and <tt>c</tt> does not support null elements, or
        if <tt>c</tt> or <tt>elements</tt> are <tt>null</tt>
@throws IllegalArgumentException if some aspect of a value in
        <tt>elements</tt> prevents it from being added to <tt>c</tt>
@see Collection#addAll(Collection)
@since 1.5"
      end
    end

    class 139547 "Random"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An instance of this class is used to generate a stream of 
pseudorandom numbers. The class uses a 48-bit seed, which is 
modified using a linear congruential formula. (See Donald Knuth, 
<i>The Art of Computer Programming, Volume 2</i>, Section 3.2.1.) 
<p>
If two instances of <code>Random</code> are created with the same 
seed, and the same sequence of method calls is made for each, they 
will generate and return identical sequences of numbers. In order to 
guarantee this property, particular algorithms are specified for the 
class <tt>Random</tt>. Java implementations must use all the algorithms 
shown here for the class <tt>Random</tt>, for the sake of absolute 
portability of Java code. However, subclasses of class <tt>Random</tt> 
are permitted to use other algorithms, so long as they adhere to the 
general contracts for all the methods.
<p>
The algorithms implemented by class <tt>Random</tt> use a 
<tt>protected</tt> utility method that on each invocation can supply 
up to 32 pseudorandomly generated bits.
<p>
Many applications will find the <code>random</code> method in 
class <code>Math</code> simpler to use.

@author  Frank Yellin
@version 1.43, 01/12/04
@see     java.lang.Math#random()
@since   JDK1.0"
      classrelation 171419 // <realization>
	relation 171419 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 171419 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 186011 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  3905348978240129619L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.1 for interoperability "
      end

      attribute 186139 "seed"
	private explicit_type "AtomicLong"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The internal state associated with this pseudorandom number generator.
(The specs for the methods in this class describe the ongoing
computation of this value.)

@serial
"
      end

      attribute 186267 "multiplier"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  0x5DEECE66DL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 186395 "addend"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  0xBL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 186523 "mask"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  (1L << 48) - 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 336795 "Random"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new random number generator. This constructor sets
the seed of the random number generator to a value very likely
to be distinct from any other invocation of this constructor."
      end

      attribute 186651 "seedUniquifier"
	class_attribute volatile private explicit_type "long"
	init_value "=  8682522807148012L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 336923 "Random"
	public explicit_return_type ""
	nparams 1
	  param in name "seed" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new random number generator using a single 
<code>long</code> seed:
<blockquote><pre>
public Random(long seed) { setSeed(seed); }</pre></blockquote>
Used by method <tt>next</tt> to hold 
the state of the pseudorandom number generator.

@param   seed   the initial seed.
@see     java.util.Random#setSeed(long)"
      end

      operation 337051 "setSeed"
	public explicit_return_type "void"
	nparams 1
	  param in name "seed" explicit_type "long"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the seed of this random number generator using a single 
<code>long</code> seed. The general contract of <tt>setSeed</tt> 
is that it alters the state of this random number generator
object so as to be in exactly the same state as if it had just 
been created with the argument <tt>seed</tt> as a seed. The method 
<tt>setSeed</tt> is implemented by class Random as follows:
<blockquote><pre>
synchronized public void setSeed(long seed) {
      this.seed = (seed ^ 0x5DEECE66DL) & ((1L << 48) - 1);
      haveNextNextGaussian = false;
}</pre></blockquote>
The implementation of <tt>setSeed</tt> by class <tt>Random</tt> 
happens to use only 48 bits of the given seed. In general, however, 
an overriding method may use all 64 bits of the long argument
as a seed value. 

Note: Although the seed value is an AtomicLong, this method
      must still be synchronized to ensure correct semantics
      of haveNextNextGaussian.

@param   seed   the initial seed."
      end

      operation 337179 "next"
	protected explicit_return_type "int"
	nparams 1
	  param in name "bits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the next pseudorandom number. Subclass should
override this, as this is used by all other methods.<p>
The general contract of <tt>next</tt> is that it returns an 
<tt>int</tt> value and if the argument bits is between <tt>1</tt> 
and <tt>32</tt> (inclusive), then that many low-order bits of the 
returned value will be (approximately) independently chosen bit 
values, each of which is (approximately) equally likely to be 
<tt>0</tt> or <tt>1</tt>. The method <tt>next</tt> is implemented 
by class <tt>Random</tt> as follows:
<blockquote><pre>
synchronized protected int next(int bits) {
      seed = (seed * 0x5DEECE66DL + 0xBL) & ((1L << 48) - 1);
      return (int)(seed >>> (48 - bits));
}</pre></blockquote>
This is a linear congruential pseudorandom number generator, as 
defined by D. H. Lehmer and described by Donald E. Knuth in <i>The 
Art of Computer Programming,</i> Volume 2: <i>Seminumerical 
Algorithms</i>, section 3.2.1.

@param   bits random bits
@return  the next pseudorandom value from this random number generator's sequence.
@since   JDK1.1"
      end

      attribute 186779 "BITS_PER_BYTE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 186907 "BYTES_PER_INT"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 337307 "nextBytes"
	public explicit_return_type "void"
	nparams 1
	  param in name "bytes" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates random bytes and places them into a user-supplied 
byte array.  The number of random bytes produced is equal to 
the length of the byte array.

@param bytes  the non-null byte array in which to put the 
              random bytes.
@since   JDK1.1"
      end

      operation 337435 "nextInt"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next pseudorandom, uniformly distributed <code>int</code>
value from this random number generator's sequence. The general 
contract of <tt>nextInt</tt> is that one <tt>int</tt> value is 
pseudorandomly generated and returned. All 2<font size=\"-1\"><sup>32
</sup></font> possible <tt>int</tt> values are produced with 
(approximately) equal probability. The method <tt>nextInt</tt> is 
implemented by class <tt>Random</tt> as follows:
<blockquote><pre>
public int nextInt() {  return next(32); }</pre></blockquote>

@return  the next pseudorandom, uniformly distributed <code>int</code>
         value from this random number generator's sequence."
      end

      operation 337563 "nextInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom, uniformly distributed <tt>int</tt> value
between 0 (inclusive) and the specified value (exclusive), drawn from
this random number generator's sequence.  The general contract of
<tt>nextInt</tt> is that one <tt>int</tt> value in the specified range
is pseudorandomly generated and returned.  All <tt>n</tt> possible
<tt>int</tt> values are produced with (approximately) equal
probability.  The method <tt>nextInt(int n)</tt> is implemented by
class <tt>Random</tt> as follows:
<blockquote><pre>
public int nextInt(int n) {
    if (n<=0)
		throw new IllegalArgumentException(\"n must be positive\");

    if ((n & -n) == n)  // i.e., n is a power of 2
        return (int)((n * (long)next(31)) >> 31);

    int bits, val;
    do {
        bits = next(31);
        val = bits % n;
    } while(bits - val + (n-1) < 0);
    return val;
}
</pre></blockquote>
<p>
The hedge \"approximately\" is used in the foregoing description only 
because the next method is only approximately an unbiased source of
independently chosen bits.  If it were a perfect source of randomly 
chosen bits, then the algorithm shown would choose <tt>int</tt> 
values from the stated range with perfect uniformity.
<p>
The algorithm is slightly tricky.  It rejects values that would result
in an uneven distribution (due to the fact that 2^31 is not divisible
by n). The probability of a value being rejected depends on n.  The
worst case is n=2^30+1, for which the probability of a reject is 1/2,
and the expected number of iterations before the loop terminates is 2.
<p>
The algorithm treats the case where n is a power of two specially: it
returns the correct number of high-order bits from the underlying
pseudo-random number generator.  In the absence of special treatment,
the correct number of <i>low-order</i> bits would be returned.  Linear
congruential pseudo-random number generators such as the one
implemented by this class are known to have short periods in the
sequence of values of their low-order bits.  Thus, this special case
greatly increases the length of the sequence of values returned by
successive calls to this method if n is a small power of two.

@param n the bound on the random number to be returned.  Must be
	      positive.
@return  a pseudorandom, uniformly distributed <tt>int</tt>
         value between 0 (inclusive) and n (exclusive).
@exception IllegalArgumentException n is not positive.
@since 1.2"
      end

      operation 337691 "nextLong"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next pseudorandom, uniformly distributed <code>long</code>
value from this random number generator's sequence. The general 
contract of <tt>nextLong</tt> is that one long value is pseudorandomly 
generated and returned. All 2<font size=\"-1\"><sup>64</sup></font> 
possible <tt>long</tt> values are produced with (approximately) equal 
probability. The method <tt>nextLong</tt> is implemented by class 
<tt>Random</tt> as follows:
<blockquote><pre>
public long nextLong() {
      return ((long)next(32) << 32) + next(32);
}</pre></blockquote>

@return  the next pseudorandom, uniformly distributed <code>long</code>
         value from this random number generator's sequence."
      end

      operation 337819 "nextBoolean"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next pseudorandom, uniformly distributed
<code>boolean</code> value from this random number generator's
sequence. The general contract of <tt>nextBoolean</tt> is that one
<tt>boolean</tt> value is pseudorandomly generated and returned.  The
values <code>true</code> and <code>false</code> are produced with
(approximately) equal probability. The method <tt>nextBoolean</tt> is
implemented by class <tt>Random</tt> as follows:
<blockquote><pre>
public boolean nextBoolean() {return next(1) != 0;}
</pre></blockquote>
@return  the next pseudorandom, uniformly distributed
         <code>boolean</code> value from this random number generator's
		sequence.
@since 1.2"
      end

      operation 337947 "nextFloat"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next pseudorandom, uniformly distributed <code>float</code>
value between <code>0.0</code> and <code>1.0</code> from this random
number generator's sequence. <p>
The general contract of <tt>nextFloat</tt> is that one <tt>float</tt> 
value, chosen (approximately) uniformly from the range <tt>0.0f</tt> 
(inclusive) to <tt>1.0f</tt> (exclusive), is pseudorandomly
generated and returned. All 2<font size=\"-1\"><sup>24</sup></font> 
possible <tt>float</tt> values of the form 
<i>m&nbsp;x&nbsp</i>2<font size=\"-1\"><sup>-24</sup></font>, where 
<i>m</i> is a positive integer less than 2<font size=\"-1\"><sup>24</sup>
</font>, are produced with (approximately) equal probability. The 
method <tt>nextFloat</tt> is implemented by class <tt>Random</tt> as 
follows:
<blockquote><pre>
public float nextFloat() {
     return next(24) / ((float)(1 << 24));
}</pre></blockquote>
The hedge \"approximately\" is used in the foregoing description only 
because the next method is only approximately an unbiased source of 
independently chosen bits. If it were a perfect source or randomly 
chosen bits, then the algorithm shown would choose <tt>float</tt> 
values from the stated range with perfect uniformity.<p>
[In early versions of Java, the result was incorrectly calculated as:
<blockquote><pre>
return next(30) / ((float)(1 << 30));</pre></blockquote>
This might seem to be equivalent, if not better, but in fact it 
introduced a slight nonuniformity because of the bias in the rounding 
of floating-point numbers: it was slightly more likely that the 
low-order bit of the significand would be 0 than that it would be 1.] 

@return  the next pseudorandom, uniformly distributed <code>float</code>
         value between <code>0.0</code> and <code>1.0</code> from this
         random number generator's sequence."
      end

      operation 338075 "nextDouble"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next pseudorandom, uniformly distributed 
<code>double</code> value between <code>0.0</code> and
<code>1.0</code> from this random number generator's sequence. <p>
The general contract of <tt>nextDouble</tt> is that one 
<tt>double</tt> value, chosen (approximately) uniformly from the 
range <tt>0.0d</tt> (inclusive) to <tt>1.0d</tt> (exclusive), is 
pseudorandomly generated and returned. All 
2<font size=\"-1\"><sup>53</sup></font> possible <tt>float</tt> 
values of the form <i>m&nbsp;x&nbsp;</i>2<font size=\"-1\"><sup>-53</sup>
</font>, where <i>m</i> is a positive integer less than 
2<font size=\"-1\"><sup>53</sup></font>, are produced with 
(approximately) equal probability. The method <tt>nextDouble</tt> is 
implemented by class <tt>Random</tt> as follows:
<blockquote><pre>
public double nextDouble() {
      return (((long)next(26) << 27) + next(27))
          / (double)(1L << 53);
}</pre></blockquote><p>
The hedge \"approximately\" is used in the foregoing description only 
because the <tt>next</tt> method is only approximately an unbiased 
source of independently chosen bits. If it were a perfect source or 
randomly chosen bits, then the algorithm shown would choose 
<tt>double</tt> values from the stated range with perfect uniformity. 
<p>[In early versions of Java, the result was incorrectly calculated as:
<blockquote><pre>
 return (((long)next(27) << 27) + next(27))
     / (double)(1L << 54);</pre></blockquote>
This might seem to be equivalent, if not better, but in fact it 
introduced a large nonuniformity because of the bias in the rounding 
of floating-point numbers: it was three times as likely that the 
low-order bit of the significand would be 0 than that it would be
1! This nonuniformity probably doesn't matter much in practice, but 
we strive for perfection.] 

@return  the next pseudorandom, uniformly distributed 
         <code>double</code> value between <code>0.0</code> and
         <code>1.0</code> from this random number generator's sequence."
      end

      attribute 187035 "nextNextGaussian"
	private explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 187163 "haveNextNextGaussian"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 338203 "nextGaussian"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next pseudorandom, Gaussian (\"normally\") distributed
<code>double</code> value with mean <code>0.0</code> and standard
deviation <code>1.0</code> from this random number generator's sequence.
<p>
The general contract of <tt>nextGaussian</tt> is that one 
<tt>double</tt> value, chosen from (approximately) the usual 
normal distribution with mean <tt>0.0</tt> and standard deviation 
<tt>1.0</tt>, is pseudorandomly generated and returned. The method 
<tt>nextGaussian</tt> is implemented by class <tt>Random</tt> as follows:
<blockquote><pre>
synchronized public double nextGaussian() {
   if (haveNextNextGaussian) {
           haveNextNextGaussian = false;
           return nextNextGaussian;
   } else {
           double v1, v2, s;
           do { 
                   v1 = 2 * nextDouble() - 1;   // between -1.0 and 1.0
                   v2 = 2 * nextDouble() - 1;   // between -1.0 and 1.0
                   s = v1 * v1 + v2 * v2;
           } while (s >= 1 || s == 0);
           double multiplier = Math.sqrt(-2 * Math.log(s)/s);
           nextNextGaussian = v2 * multiplier;
           haveNextNextGaussian = true;
           return v1 * multiplier;
   }
}</pre></blockquote>
This uses the <i>polar method</i> of G. E. P. Box, M. E. Muller, and 
G. Marsaglia, as described by Donald E. Knuth in <i>The Art of 
Computer Programming</i>, Volume 2: <i>Seminumerical Algorithms</i>, 
section 3.4.1, subsection C, algorithm P. Note that it generates two
independent values at the cost of only one call to <tt>Math.log</tt> 
and one call to <tt>Math.sqrt</tt>. 

@return  the next pseudorandom, Gaussian (\"normally\") distributed
         <code>double</code> value with mean <code>0.0</code> and
         standard deviation <code>1.0</code> from this random number
         generator's sequence."
      end

      attribute 187291 "serialPersistentFields"
	class_attribute const_attribute private explicit_type "ObjectStreamField"
	multiplicity "[]"
	init_value "=  {
        new ObjectStreamField(\"seed\", Long.TYPE),
        new ObjectStreamField(\"nextNextGaussian\", Double.TYPE),
        new ObjectStreamField(\"haveNextNextGaussian\", Boolean.TYPE)
        }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Serializable fields for Random.

@serialField    seed long;
             seed for random computations
@serialField    nextNextGaussian double;
             next Gaussian to be returned
@serialField      haveNextNextGaussian boolean
             nextNextGaussian is valid
"
      end

      operation 338331 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectInputStream"
	nexceptions 2
	  explicit_exception "java.io.IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the <tt>Random</tt> instance from a stream (that is,
deserialize it). The seed is read in as long for
historical reasons, but it is converted to an AtomicLong."
      end

      operation 338459 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "ObjectOutputStream"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the <tt>Random</tt> instance to a stream.
The seed of a Random is serialized as a long for
historical reasons.
"
      end
    end

    class 139931 "SortedSet"
      visibility public stereotype "interface"
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 136731 // Set
        rank 0 explicit_value "E"
      actual class class_ref 136731 // Set
        rank 1 explicit_value ""
      actual class class_ref 136731 // Set
        rank 2 explicit_value ""
      actual class class_ref 136731 // Set
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A set that further guarantees that its iterator will traverse the set in
ascending element order, sorted according to the <i>natural ordering</i> of
its elements (see Comparable), or by a Comparator provided at sorted set
creation time.  Several additional operations are provided to take
advantage of the ordering.  (This interface is the set analogue of
SortedMap.)<p>

All elements inserted into an sorted set must implement the Comparable
interface (or be accepted by the specified Comparator).  Furthermore, all
such elements must be <i>mutually comparable</i>: <tt>e1.compareTo(e2)</tt>
(or <tt>comparator.compare(e1, e2)</tt>) must not throw a
<tt>ClassCastException</tt> for any elements <tt>e1</tt> and <tt>e2</tt> in
the sorted set.  Attempts to violate this restriction will cause the
offending method or constructor invocation to throw a
<tt>ClassCastException</tt>.<p>

Note that the ordering maintained by a sorted set (whether or not an
explicit comparator is provided) must be <i>consistent with equals</i> if
the sorted set is to correctly implement the <tt>Set</tt> interface.  (See
the <tt>Comparable</tt> interface or <tt>Comparator</tt> interface for a
precise definition of <i>consistent with equals</i>.)  This is so because
the <tt>Set</tt> interface is defined in terms of the <tt>equals</tt>
operation, but a sorted set performs all element comparisons using its
<tt>compareTo</tt> (or <tt>compare</tt>) method, so two elements that are
deemed equal by this method are, from the standpoint of the sorted set,
equal.  The behavior of a sorted set <i>is</i> well-defined even if its
ordering is inconsistent with equals; it just fails to obey the general
contract of the <tt>Set</tt> interface.<p>

All general-purpose sorted set implementation classes should provide four
\"standard\" constructors: 1) A void (no arguments) constructor, which
creates an empty sorted set sorted according to the <i>natural order</i> of
its elements.  2) A constructor with a single argument of type
<tt>Comparator</tt>, which creates an empty sorted set sorted according to
the specified comparator.  3) A constructor with a single argument of type
<tt>Collection</tt>, which creates a new sorted set with the same elements
as its argument, sorted according to the elements' natural ordering.  4) A
constructor with a single argument of type <tt>SortedSet</tt>, which
creates a new sorted set with the same elements and the same ordering as
the input sorted set.  There is no way to enforce this recommendation (as
interfaces cannot contain constructors) but the JDK implementation (the
<tt>TreeSet</tt> class) complies.<p>

This interface is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@version 1.24, 06/28/04
@see Set
@see TreeSet
@see SortedMap
@see Collection
@see Comparable
@see Comparator
@see java.lang.ClassCastException
@since 1.2"
      classrelation 138267 // <realization>
	relation 138267 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 138267 // <realization>
	  b parent class_ref 136731 // Set
      end

      operation 202267 "comparator"
	public return_type class_ref 138139 // Comparator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the comparator associated with this sorted set, or
<tt>null</tt> if it uses its elements' natural ordering.

@return the comparator associated with this sorted set, or
	       <tt>null</tt> if it uses its elements' natural ordering."
      end

      operation 202395 "subSet"
	public return_type class_ref 139931 // SortedSet
	nparams 2
	  param inout name "fromElement" explicit_type "E"
	  param inout name "toElement" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this sorted set whose elements range
from <tt>fromElement</tt>, inclusive, to <tt>toElement</tt>, exclusive.
(If <tt>fromElement</tt> and <tt>toElement</tt> are equal, the returned
sorted set is empty.)  The returned sorted set is backed by this sorted
set, so changes in the returned sorted set are reflected in this sorted
set, and vice-versa.  The returned sorted set supports all optional set
operations that this sorted set supports.<p>

The sorted set returned by this method will throw an
<tt>IllegalArgumentException</tt> if the user attempts to insert a
element outside the specified range.<p>

Note: this method always returns a <i>half-open range</i> (which
includes its low endpoint but not its high endpoint).  If you need a
<i>closed range</i> (which includes both endpoints), and the element
type allows for calculation of the successor a given value, merely
request the subrange from <tt>lowEndpoint</tt> to
<tt>successor(highEndpoint)</tt>.  For example, suppose that <tt>s</tt>
is a sorted set of strings.  The following idiom obtains a view
containing all of the strings in <tt>s</tt> from <tt>low</tt> to
<tt>high</tt>, inclusive: <pre>
SortedSet sub = s.subSet(low, high+\"\\0\");
</pre>

A similar technique can be used to generate an <i>open range</i> (which
contains neither endpoint).  The following idiom obtains a view
containing all of the Strings in <tt>s</tt> from <tt>low</tt> to
<tt>high</tt>, exclusive: <pre>
SortedSet sub = s.subSet(low+\"\\0\", high);
</pre>

@param fromElement low endpoint (inclusive) of the subSet.
@param toElement high endpoint (exclusive) of the subSet.
@return a view of the specified range within this sorted set.

@throws ClassCastException if <tt>fromElement</tt> and
        <tt>toElement</tt> cannot be compared to one another using this
        set's comparator (or, if the set has no comparator, using
        natural ordering).  Implementations may, but are not required
	       to, throw this exception if <tt>fromElement</tt> or
        <tt>toElement</tt> cannot be compared to elements currently in
        the set.
@throws IllegalArgumentException if <tt>fromElement</tt> is greater than
        <tt>toElement</tt>; or if this set is itself a subSet, headSet,
        or tailSet, and <tt>fromElement</tt> or <tt>toElement</tt> are
        not within the specified range of the subSet, headSet, or
        tailSet.
@throws NullPointerException if <tt>fromElement</tt> or
	       <tt>toElement</tt> is <tt>null</tt> and this sorted set does
	       not tolerate <tt>null</tt> elements."
      end

      operation 202523 "headSet"
	public return_type class_ref 139931 // SortedSet
	nparams 1
	  param inout name "toElement" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this sorted set whose elements are
strictly less than <tt>toElement</tt>.  The returned sorted set is
backed by this sorted set, so changes in the returned sorted set are
reflected in this sorted set, and vice-versa.  The returned sorted set
supports all optional set operations.<p>

The sorted set returned by this method will throw an
<tt>IllegalArgumentException</tt> if the user attempts to insert a
element outside the specified range.<p>

Note: this method always returns a view that does not contain its
(high) endpoint.  If you need a view that does contain this endpoint,
and the element type allows for calculation of the successor a given
value, merely request a headSet bounded by
<tt>successor(highEndpoint)</tt>.  For example, suppose that <tt>s</tt>
is a sorted set of strings.  The following idiom obtains a view
containing all of the strings in <tt>s</tt> that are less than or equal
to <tt>high</tt>:
	    <pre>    SortedSet head = s.headSet(high+\"\\0\");</pre>

@param toElement high endpoint (exclusive) of the headSet.
@return a view of the specified initial range of this sorted set.
@throws ClassCastException if <tt>toElement</tt> is not compatible
        with this set's comparator (or, if the set has no comparator,
        if <tt>toElement</tt> does not implement <tt>Comparable</tt>).
        Implementations may, but are not required to, throw this
	       exception if <tt>toElement</tt> cannot be compared to elements
        currently in the set.
@throws NullPointerException if <tt>toElement</tt> is <tt>null</tt> and
	       this sorted set does not tolerate <tt>null</tt> elements.
@throws IllegalArgumentException if this set is itself a subSet,
        headSet, or tailSet, and <tt>toElement</tt> is not within the
        specified range of the subSet, headSet, or tailSet."
      end

      operation 202651 "tailSet"
	public return_type class_ref 139931 // SortedSet
	nparams 1
	  param inout name "fromElement" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this sorted set whose elements are
greater than or equal to <tt>fromElement</tt>.  The returned sorted set
is backed by this sorted set, so changes in the returned sorted set are
reflected in this sorted set, and vice-versa.  The returned sorted set
supports all optional set operations.<p>

The sorted set returned by this method will throw an
<tt>IllegalArgumentException</tt> if the user attempts to insert a
element outside the specified range.<p>

Note: this method always returns a view that contains its (low)
endpoint.  If you need a view that does not contain this endpoint, and
the element type allows for calculation of the successor a given value,
merely request a tailSet bounded by <tt>successor(lowEndpoint)</tt>.
For example, suppose that <tt>s</tt> is a sorted set of strings.  The
following idiom obtains a view containing all of the strings in
<tt>s</tt> that are strictly greater than <tt>low</tt>:

	    <pre>    SortedSet tail = s.tailSet(low+\"\\0\");</pre>

@param fromElement low endpoint (inclusive) of the tailSet.
@return a view of the specified final range of this sorted set.
@throws ClassCastException if <tt>fromElement</tt> is not compatible
        with this set's comparator (or, if the set has no comparator,
        if <tt>fromElement</tt> does not implement <tt>Comparable</tt>).
        Implementations may, but are not required to, throw this
	       exception if <tt>fromElement</tt> cannot be compared to elements
        currently in the set.
@throws NullPointerException if <tt>fromElement</tt> is <tt>null</tt>
	       and this sorted set does not tolerate <tt>null</tt> elements.
@throws IllegalArgumentException if this set is itself a subSet,
        headSet, or tailSet, and <tt>fromElement</tt> is not within the
        specified range of the subSet, headSet, or tailSet."
      end

      operation 202779 "first"
	public explicit_return_type "E"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first (lowest) element currently in this sorted set.

@return the first (lowest) element currently in this sorted set.
@throws    NoSuchElementException sorted set is empty."
      end

      operation 202907 "last"
	public explicit_return_type "E"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the last (highest) element currently in this sorted set.

@return the last (highest) element currently in this sorted set.
@throws    NoSuchElementException sorted set is empty."
      end
    end

    class 140827 "SortedMap"
      visibility public stereotype "interface"
      nformals 8
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 8
      actual class class_ref 136603 // Map
        rank 0 explicit_value "K"
      actual class class_ref 136603 // Map
        rank 1 explicit_value "V"
      actual class class_ref 136603 // Map
        rank 2 explicit_value ""
      actual class class_ref 136603 // Map
        rank 3 explicit_value ""
      actual class class_ref 136603 // Map
        rank 4 explicit_value ""
      actual class class_ref 136603 // Map
        rank 5 explicit_value ""
      actual class class_ref 136603 // Map
        rank 6 explicit_value ""
      actual class class_ref 136603 // Map
        rank 7 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A map that further guarantees that it will be in ascending key order,
sorted according to the <i>natural ordering</i> of its keys (see the
<tt>Comparable</tt> interface), or by a comparator provided at sorted map
creation time.  This order is reflected when iterating over the sorted
map's collection views (returned by the <tt>entrySet</tt>, <tt>keySet</tt>
and <tt>values</tt> methods).  Several additional operations are provided
to take advantage of the ordering.  (This interface is the map analogue of
the <tt>SortedSet</tt> interface.)<p>

All keys inserted into a sorted map must implement the <tt>Comparable</tt>
interface (or be accepted by the specified comparator).  Furthermore, all
such keys must be <i>mutually comparable</i>: <tt>k1.compareTo(k2)</tt> (or
<tt>comparator.compare(k1, k2)</tt>) must not throw a
<tt>ClassCastException</tt> for any elements <tt>k1</tt> and <tt>k2</tt> in
the sorted map.  Attempts to violate this restriction will cause the
offending method or constructor invocation to throw a
<tt>ClassCastException</tt>.<p>

Note that the ordering maintained by a sorted map (whether or not an
explicit comparator is provided) must be <i>consistent with equals</i> if
the sorted map is to correctly implement the <tt>Map</tt> interface.  (See
the <tt>Comparable</tt> interface or <tt>Comparator</tt> interface for a
precise definition of <i>consistent with equals</i>.)  This is so because
the <tt>Map</tt> interface is defined in terms of the <tt>equals</tt>
operation, but a sorted map performs all key comparisons using its
<tt>compareTo</tt> (or <tt>compare</tt>) method, so two keys that are
deemed equal by this method are, from the standpoint of the sorted map,
equal.  The behavior of a tree map <i>is</i> well-defined even if its
ordering is inconsistent with equals; it just fails to obey the general
contract of the <tt>Map</tt> interface.<p>

All general-purpose sorted map implementation classes should provide four
\"standard\" constructors: 1) A void (no arguments) constructor, which
creates an empty sorted map sorted according to the <i>natural order</i> of
its keys.  2) A constructor with a single argument of type
<tt>Comparator</tt>, which creates an empty sorted map sorted according to
the specified comparator.  3) A constructor with a single argument of type
<tt>Map</tt>, which creates a new map with the same key-value mappings as
its argument, sorted according to the keys' natural ordering.  4) A
constructor with a single argument of type sorted map, which creates a new
sorted map with the same key-value mappings and the same ordering as the
input sorted map.  There is no way to enforce this recommendation (as
interfaces cannot contain constructors) but the JDK implementation
(TreeMap) complies.<p>

This interface is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@version 1.21, 06/28/04
@see Map
@see TreeMap
@see SortedSet
@see Comparator
@see Comparable
@see Collection
@see ClassCastException
@since 1.2"
      classrelation 140699 // <realization>
	relation 140699 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 140699 // <realization>
	  b parent class_ref 136603 // Map
      end

      operation 210331 "comparator"
	public return_type class_ref 138139 // Comparator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the comparator associated with this sorted map, or
<tt>null</tt> if it uses its keys' natural ordering.

@return the comparator associated with this sorted map, or
	       <tt>null</tt> if it uses its keys' natural ordering."
      end

      operation 210459 "subMap"
	public return_type class_ref 140827 // SortedMap
	nparams 2
	  param inout name "fromKey" explicit_type "K"
	  param inout name "toKey" explicit_type "K"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this sorted map whose keys range from
<tt>fromKey</tt>, inclusive, to <tt>toKey</tt>, exclusive.  (If
<tt>fromKey</tt> and <tt>toKey</tt> are equal, the returned sorted map
is empty.)  The returned sorted map is backed by this sorted map, so
changes in the returned sorted map are reflected in this sorted map,
and vice-versa.  The returned Map supports all optional map operations
that this sorted map supports.<p>

The map returned by this method will throw an
<tt>IllegalArgumentException</tt> if the user attempts to insert a key
outside the specified range.<p>

Note: this method always returns a <i>half-open range</i> (which
includes its low endpoint but not its high endpoint).  If you need a
<i>closed range</i> (which includes both endpoints), and the key type
allows for calculation of the successor a given key, merely request the
subrange from <tt>lowEndpoint</tt> to <tt>successor(highEndpoint)</tt>.
For example, suppose that <tt>m</tt> is a map whose keys are strings.
The following idiom obtains a view containing all of the key-value
mappings in <tt>m</tt> whose keys are between <tt>low</tt> and
<tt>high</tt>, inclusive:

	    <pre>    Map sub = m.subMap(low, high+\"\\0\");</pre>

A similarly technique can be used to generate an <i>open range</i>
(which contains neither endpoint).  The following idiom obtains a
view containing  all of the key-value mappings in <tt>m</tt> whose keys
are between <tt>low</tt> and <tt>high</tt>, exclusive:

	    <pre>    Map sub = m.subMap(low+\"\\0\", high);</pre>

@param fromKey low endpoint (inclusive) of the subMap.
@param toKey high endpoint (exclusive) of the subMap.
@return a view of the specified range within this sorted map.

@throws ClassCastException if <tt>fromKey</tt> and <tt>toKey</tt>
        cannot be compared to one another using this map's comparator
        (or, if the map has no comparator, using natural ordering).
        Implementations may, but are not required to, throw this
	       exception if <tt>fromKey</tt> or <tt>toKey</tt>
        cannot be compared to keys currently in the map.
@throws IllegalArgumentException if <tt>fromKey</tt> is greater than
        <tt>toKey</tt>; or if this map is itself a subMap, headMap,
        or tailMap, and <tt>fromKey</tt> or <tt>toKey</tt> are not
        within the specified range of the subMap, headMap, or tailMap.
@throws NullPointerException if <tt>fromKey</tt> or <tt>toKey</tt> is
	       <tt>null</tt> and this sorted map does not tolerate
	       <tt>null</tt> keys."
      end

      operation 210587 "headMap"
	public return_type class_ref 140827 // SortedMap
	nparams 1
	  param inout name "toKey" explicit_type "K"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this sorted map whose keys are
strictly less than toKey.  The returned sorted map is backed by this
sorted map, so changes in the returned sorted map are reflected in this
sorted map, and vice-versa.  The returned map supports all optional map
operations that this sorted map supports.<p>

The map returned by this method will throw an IllegalArgumentException
if the user attempts to insert a key outside the specified range.<p>

Note: this method always returns a view that does not contain its
(high) endpoint.  If you need a view that does contain this endpoint,
and the key type allows for calculation of the successor a given
key, merely request a headMap bounded by successor(highEndpoint).
For example, suppose that suppose that <tt>m</tt> is a map whose keys
are strings.  The following idiom obtains a view containing all of the
key-value mappings in <tt>m</tt> whose keys are less than or equal to
<tt>high</tt>:

	    <pre>    Map head = m.headMap(high+\"\\0\");</pre>

@param toKey high endpoint (exclusive) of the subMap.
@return a view of the specified initial range of this sorted map.
@throws ClassCastException if <tt>toKey</tt> is not compatible
        with this map's comparator (or, if the map has no comparator,
        if <tt>toKey</tt> does not implement <tt>Comparable</tt>).
        Implementations may, but are not required to, throw this
	       exception if <tt>toKey</tt> cannot be compared to keys
        currently in the map.
@throws IllegalArgumentException if this map is itself a subMap,
        headMap, or tailMap, and <tt>toKey</tt> is not within the
        specified range of the subMap, headMap, or tailMap.
@throws NullPointerException if <tt>toKey</tt> is <tt>null</tt> and
	       this sorted map does not tolerate <tt>null</tt> keys."
      end

      operation 210715 "tailMap"
	public return_type class_ref 140827 // SortedMap
	nparams 1
	  param inout name "fromKey" explicit_type "K"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this sorted map whose keys are greater
than or equal to <tt>fromKey</tt>.  The returned sorted map is backed
by this sorted map, so changes in the returned sorted map are reflected
in this sorted map, and vice-versa.  The returned map supports all
optional map operations that this sorted map supports.<p>

The map returned by this method will throw an
<tt>IllegalArgumentException</tt> if the user attempts to insert a key
outside the specified range.<p>

Note: this method always returns a view that contains its (low)
endpoint.  If you need a view that does not contain this endpoint, and
the element type allows for calculation of the successor a given value,
merely request a tailMap bounded by <tt>successor(lowEndpoint)</tt>.
For example, suppose that suppose that <tt>m</tt> is a map whose keys
are strings.  The following idiom obtains a view containing all of the
key-value mappings in <tt>m</tt> whose keys are strictly greater than
<tt>low</tt>:

	    <pre>    Map tail = m.tailMap(low+\"\\0\");</pre>

@param fromKey low endpoint (inclusive) of the tailMap.
@return a view of the specified final range of this sorted map.
@throws ClassCastException if <tt>fromKey</tt> is not compatible
        with this map's comparator (or, if the map has no comparator,
        if <tt>fromKey</tt> does not implement <tt>Comparable</tt>).
        Implementations may, but are not required to, throw this
	       exception if <tt>fromKey</tt> cannot be compared to keys
        currently in the map.
@throws IllegalArgumentException if this map is itself a subMap,
        headMap, or tailMap, and <tt>fromKey</tt> is not within the
        specified range of the subMap, headMap, or tailMap.
@throws NullPointerException if <tt>fromKey</tt> is <tt>null</tt> and
	       this sorted map does not tolerate <tt>null</tt> keys."
      end

      operation 210843 "firstKey"
	public explicit_return_type "K"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first (lowest) key currently in this sorted map.

@return the first (lowest) key currently in this sorted map.
@throws    NoSuchElementException if this map is empty."
      end

      operation 210971 "lastKey"
	public explicit_return_type "K"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the last (highest) key currently in this sorted map.

@return the last (highest) key currently in this sorted map.
@throws     NoSuchElementException if this map is empty."
      end
    end

    class 144411 "Enumeration"
      visibility public stereotype "interface"
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that implements the Enumeration interface generates a
series of elements, one at a time. Successive calls to the
<code>nextElement</code> method return successive elements of the
series.
<p>
For example, to print all elements of a vector <i>v</i>:
<blockquote><pre>
    for (Enumeration e = v.elements() ; e.hasMoreElements() ;) {
        System.out.println(e.nextElement());<br>
    }
</pre></blockquote>
<p>
Methods are provided to enumerate through the elements of a
vector, the keys of a hashtable, and the values in a hashtable.
Enumerations are also used to specify the input streams to a
<code>SequenceInputStream</code>.
<p>
NOTE: The functionality of this interface is duplicated by the Iterator
interface.  In addition, Iterator adds an optional remove operation, and
has shorter method names.  New implementations should consider using
Iterator in preference to Enumeration.

@see     java.util.Iterator
@see     java.io.SequenceInputStream
@see     java.util.Enumeration#nextElement()
@see     java.util.Hashtable
@see     java.util.Hashtable#elements()
@see     java.util.Hashtable#keys()
@see     java.util.Vector
@see     java.util.Vector#elements()

@author  Lee Boynton
@version 1.22, 12/19/03
@since   JDK1.0"
      operation 252827 "hasMoreElements"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this enumeration contains more elements.

@return  <code>true</code> if and only if this enumeration object
          contains at least one more element to provide;
         <code>false</code> otherwise."
      end

      operation 252955 "nextElement"
	public explicit_return_type "E"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next element of this enumeration if this enumeration
object has at least one more element to provide.

@return     the next element of this enumeration.
@exception  NoSuchElementException  if no more elements exist."
      end
    end

    class 144539 "ConcurrentModificationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception may be thrown by methods that have detected concurrent
modification of an object when such modification is not permissible.
<p>
For example, it is not generally permissible for one thread to modify a Collection
while another thread is iterating over it.  In general, the results of the
iteration are undefined under these circumstances.  Some Iterator
implementations (including those of all the general purpose collection implementations
provided by the JRE) may choose to throw this exception if this behavior is
detected.  Iterators that do this are known as <i>fail-fast</i> iterators,
as they fail quickly and cleanly, rather that risking arbitrary,
non-deterministic behavior at an undetermined time in the future.
<p>
Note that this exception does not always indicate that an object has
been concurrently modified by a <i>different</i> thread.  If a single
thread issues a sequence of method invocations that violates the
contract of an object, the object may throw this exception.  For
example, if a thread modifies a collection directly while it is
iterating over the collection with a fail-fast iterator, the iterator
will throw this exception.

<p>Note that fail-fast behavior cannot be guaranteed as it is, generally
speaking, impossible to make any hard guarantees in the presence of
unsynchronized concurrent modification.  Fail-fast operations
throw <tt>ConcurrentModificationException</tt> on a best-effort basis. 
Therefore, it would be wrong to write a program that depended on this
exception for its correctness: <i><tt>ConcurrentModificationException</tt>
should be used only to detect bugs.</i>

@author  Josh Bloch
@version 1.18, 06/22/04
@see	    Collection
@see     Iterator
@see     ListIterator
@see	    Vector
@see	    LinkedList
@see	    HashSet
@see	    Hashtable
@see	    TreeMap
@see	    AbstractList
@since   1.2"
      operation 243739 "ConcurrentModificationException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ConcurrentModificationException with no
detail message."
      end

      operation 243867 "ConcurrentModificationException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>ConcurrentModificationException</tt> with the
specified detail message.

@param message the detail message pertaining to this exception."
      end
    end

    class 144795 "Currency"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Represents a currency. Currencies are identified by their ISO 4217 currency
codes. See the
<a href=\"http://www.bsi-global.com/iso4217currency\">
ISO 4217 maintenance agency</a> for more information, including a table of
currency codes.
<p>
The class is designed so that there's never more than one
<code>Currency</code> instance for any given currency. Therefore, there's
no public constructor. You obtain a <code>Currency</code> instance using
the <code>getInstance</code> methods.

@since 1.4"
      classrelation 151451 // <realization>
	relation 151451 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 151451 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 151195 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -158308464356906721L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 151323 "currencyCode"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "ISO 4217 currency code for this currency.

@serial
"
      end

      attribute 151451 "defaultFractionDigits"
	const_attribute private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Default fraction digits for this currency.
Set from currency data tables.
"
      end

      classrelation 151579 // instances (<unidirectional association>)
	relation 151579 --->
	  a role_name "instances" init_value "=  new HashMap(7)" class_relation private
	    comment " class data: instance map
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 151579 // instances (<unidirectional association>)
	  b parent class_ref 144923 // HashMap
      end

      attribute 151579 "mainTable"
	class_attribute package explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Class data: currency data obtained from java.util.CurrencyData.
 Purpose:
 - determine valid country codes
 - determine valid currency codes
 - map country codes to currency codes
 - obtain default fraction digits for currency codes

 sc = special case; dfd = default fraction digits
 Simple countries are those where the country code is a prefix of the
 currency code, and there are no known plans to change the currency.

 table formats:
 - mainTable:
   - maps country code to 8-bit char
   - 26*26 entries, corresponding to [A-Z]*[A-Z]
   - \\u007F -> not valid country
   - bit 7 - 1: special case, bits 0-4 indicate which one
             0: simple country, bits 0-4 indicate final char of currency code
   - bits 5-6: fraction digits for simple countries, 0 for special cases
   - bits 0-4: final char for currency code for simple country, or ID of special case
 - special case IDs:
   - 0: country has no currency
   - other: index into sc* arrays + 1
 - scCutOverTimes: cut-over time in millis as returned by
   System.currentTimeMillis for special case countries that are changing
   currencies; Long.MAX_VALUE for countries that are not changing currencies
 - scOldCurrencies: old currencies for special case countries
 - scNewCurrencies: new currencies for special case countries that are
   changing currencies; null for others
 - scOldCurrenciesDFD: default fraction digits for old currencies
 - scNewCurrenciesDFD: default fraction digits for new currencies, 0 for
   countries that are not changing currencies
 - otherCurrencies: concatenation of all currency codes that are not the
   main currency of a simple country, separated by \"-\"
 - otherCurrenciesDFD: decimal format digits for currencies in otherCurrencies, same order"
      end

      attribute 151707 "scCutOverTimes"
	class_attribute package explicit_type "long"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 151835 "scOldCurrencies"
	class_attribute package explicit_type "String"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 151963 "scNewCurrencies"
	class_attribute package explicit_type "String"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 152091 "scOldCurrenciesDFD"
	class_attribute package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 152219 "scNewCurrenciesDFD"
	class_attribute package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 152347 "otherCurrencies"
	class_attribute package explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 152475 "otherCurrenciesDFD"
	class_attribute package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 152603 "A_TO_Z"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  ('Z' - 'A') + 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " handy constants - must match definitions in GenerateCurrencyData
 number of characters from A to Z"
      end

      attribute 152731 "INVALID_COUNTRY_ENTRY"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x007F"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " entry for invalid country codes"
      end

      attribute 152859 "COUNTRY_WITHOUT_CURRENCY_ENTRY"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x0080"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " entry for countries without currency"
      end

      attribute 152987 "SIMPLE_CASE_COUNTRY_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x0000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mask for simple case country entries"
      end

      attribute 153115 "SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x001F"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mask for simple case country entry final character"
      end

      attribute 153243 "SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x0060"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mask for simple case country entry default currency digits"
      end

      attribute 153371 "SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " shift count for simple case country entry default currency digits"
      end

      attribute 153499 "SPECIAL_CASE_COUNTRY_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x0080"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mask for special case country entries"
      end

      attribute 153627 "SPECIAL_CASE_COUNTRY_INDEX_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x001F"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mask for special case country index"
      end

      attribute 153755 "SPECIAL_CASE_COUNTRY_INDEX_DELTA"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " delta from entry index component in main table to index into special case tables"
      end

      attribute 153883 "COUNTRY_TYPE_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  SIMPLE_CASE_COUNTRY_MASK | SPECIAL_CASE_COUNTRY_MASK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mask for distinguishing simple and special case countries"
      end

      extra_member 129179 "initialization"
	
	cpp "" ""
	java "  static {
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                try {
                    Class data = Class.forName(\"java.util.CurrencyData\");
                    mainTable = (String) data.getDeclaredField(\"mainTable\").get(data);
                    scCutOverTimes = (long[]) data.getDeclaredField(\"scCutOverTimes\").get(data);
                    scOldCurrencies = (String[]) data.getDeclaredField(\"scOldCurrencies\").get(data);
                    scNewCurrencies = (String[]) data.getDeclaredField(\"scNewCurrencies\").get(data);
                    scOldCurrenciesDFD = (int[]) data.getDeclaredField(\"scOldCurrenciesDFD\").get(data);
                    scNewCurrenciesDFD = (int[]) data.getDeclaredField(\"scNewCurrenciesDFD\").get(data);
                    otherCurrencies = (String) data.getDeclaredField(\"otherCurrencies\").get(data);
                    otherCurrenciesDFD = (int[]) data.getDeclaredField(\"otherCurrenciesDFD\").get(data);
                } catch (ClassNotFoundException e) {
                    throw new InternalError();
                } catch (NoSuchFieldException e) {
                    throw new InternalError();
                } catch (IllegalAccessException e) {
                    throw new InternalError();
                }
                return null;
            }
        });
    }"
	php ""
	python ""
	idl ""
      end

      operation 243995 "Currency"
	private explicit_return_type ""
	nparams 2
	  param in name "currencyCode" explicit_type "String"
	  param in name "defaultFractionDigits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>Currency</code> instance. The constructor is private
so that we can insure that there's never more than one instance for a
given currency."
      end

      operation 244123 "getInstance"
	class_operation public return_type class_ref 144795 // Currency
	nparams 1
	  param in name "currencyCode" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Currency</code> instance for the given currency code.

@param currencyCode the ISO 4217 code of the currency
@return the <code>Currency</code> instance for the given currency code
@exception NullPointerException if <code>currencyCode</code> is null
@exception IllegalArgumentException if <code>currencyCode</code> is not
a supported ISO 4217 code."
      end

      operation 244251 "getInstance"
	class_operation private return_type class_ref 144795 // Currency
	nparams 2
	  param in name "currencyCode" explicit_type "String"
	  param in name "defaultFractionDigits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 244379 "getInstance"
	class_operation public return_type class_ref 144795 // Currency
	nparams 1
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Currency</code> instance for the country of the
given locale. The language and variant components of the locale
are ignored. The result may vary over time, as countries change their
currencies. For example, for the original member countries of the
European Monetary Union, the method returns the old national currencies
until December 31, 2001, and the Euro from January 1, 2002, local time
of the respective countries.
<p>
The method returns <code>null</code> for territories that don't
have a currency, such as Antarctica.

@param locale the locale for whose country a <code>Currency</code>
instance is needed
@return the <code>Currency</code> instance for the country of the given
locale, or null
@exception NullPointerException if <code>locale</code> or its country
code is null
@exception IllegalArgumentException if the country of the given locale
is not a supported ISO 3166 country code."
      end

      operation 244507 "getCurrencyCode"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the ISO 4217 currency code of this currency.

@return the ISO 4217 currency code of this currency."
      end

      operation 244635 "getSymbol"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the symbol of this currency for the default locale.
For example, for the US Dollar, the symbol is \"$\" if the default
locale is the US, while for other locales it may be \"US$\". If no
symbol can be determined, the ISO 4217 currency code is returned.

@return the symbol of this currency for the default locale"
      end

      operation 244763 "getSymbol"
	public explicit_return_type "String"
	nparams 1
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the symbol of this currency for the specified locale.
For example, for the US Dollar, the symbol is \"$\" if the specified
locale is the US, while for other locales it may be \"US$\". If no
symbol can be determined, the ISO 4217 currency code is returned.

@param locale the locale for which a display name for this currency is
needed
@return the symbol of this currency for the specified locale
@exception NullPointerException if <code>locale</code> is null"
      end

      operation 244891 "getDefaultFractionDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the default number of fraction digits used with this currency.
For example, the default number of fraction digits for the Euro is 2,
while for the Japanese Yen it's 0.
In the case of pseudo-currencies, such as IMF Special Drawing Rights,
-1 is returned.

@return the default number of fraction digits used with this currency"
      end

      operation 245019 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ISO 4217 currency code of this currency.

@return the ISO 4217 currency code of this currency"
      end

      operation 245147 "readResolve"
	private explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolves instances being deserialized to a single instance per currency."
      end

      operation 245275 "getMainTableEntry"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "char1" explicit_type "char"
	  param in name "char2" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the main table entry for the country whose country code consists
of char1 and char2."
      end
    end

    class 144923 "HashMap"
      visibility public 
      nformals 8
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 16
      actual class class_ref 136475 // AbstractMap
        rank 0 explicit_value "K"
      actual class class_ref 136475 // AbstractMap
        rank 1 explicit_value "V"
      actual class class_ref 136475 // AbstractMap
        rank 2 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 3 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 4 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 5 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 6 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 7 explicit_value ""
      actual class class_ref 136603 // Map
        rank 0 explicit_value "K"
      actual class class_ref 136603 // Map
        rank 1 explicit_value "V"
      actual class class_ref 136603 // Map
        rank 2 explicit_value ""
      actual class class_ref 136603 // Map
        rank 3 explicit_value ""
      actual class class_ref 136603 // Map
        rank 4 explicit_value ""
      actual class class_ref 136603 // Map
        rank 5 explicit_value ""
      actual class class_ref 136603 // Map
        rank 6 explicit_value ""
      actual class class_ref 136603 // Map
        rank 7 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Hash table based implementation of the <tt>Map</tt> interface.  This
implementation provides all of the optional map operations, and permits
<tt>null</tt> values and the <tt>null</tt> key.  (The <tt>HashMap</tt>
class is roughly equivalent to <tt>Hashtable</tt>, except that it is
unsynchronized and permits nulls.)  This class makes no guarantees as to
the order of the map; in particular, it does not guarantee that the order
will remain constant over time.

<p>This implementation provides constant-time performance for the basic
operations (<tt>get</tt> and <tt>put</tt>), assuming the hash function
disperses the elements properly among the buckets.  Iteration over
collection views requires time proportional to the \"capacity\" of the
<tt>HashMap</tt> instance (the number of buckets) plus its size (the number
of key-value mappings).  Thus, it's very important not to set the initial
capacity too high (or the load factor too low) if iteration performance is
important.

<p>An instance of <tt>HashMap</tt> has two parameters that affect its
performance: <i>initial capacity</i> and <i>load factor</i>.  The
<i>capacity</i> is the number of buckets in the hash table, and the initial
capacity is simply the capacity at the time the hash table is created.  The
<i>load factor</i> is a measure of how full the hash table is allowed to
get before its capacity is automatically increased.  When the number of
entries in the hash table exceeds the product of the load factor and the
current capacity, the capacity is roughly doubled by calling the
<tt>rehash</tt> method.

<p>As a general rule, the default load factor (.75) offers a good tradeoff
between time and space costs.  Higher values decrease the space overhead
but increase the lookup cost (reflected in most of the operations of the
<tt>HashMap</tt> class, including <tt>get</tt> and <tt>put</tt>).  The
expected number of entries in the map and its load factor should be taken
into account when setting its initial capacity, so as to minimize the
number of <tt>rehash</tt> operations.  If the initial capacity is greater
than the maximum number of entries divided by the load factor, no
<tt>rehash</tt> operations will ever occur.

<p>If many mappings are to be stored in a <tt>HashMap</tt> instance,
creating it with a sufficiently large capacity will allow the mappings to
be stored more efficiently than letting it perform automatic rehashing as
needed to grow the table.

<p><b>Note that this implementation is not synchronized.</b> If multiple
threads access this map concurrently, and at least one of the threads
modifies the map structurally, it <i>must</i> be synchronized externally.
(A structural modification is any operation that adds or deletes one or
more mappings; merely changing the value associated with a key that an
instance already contains is not a structural modification.)  This is
typically accomplished by synchronizing on some object that naturally
encapsulates the map.  If no such object exists, the map should be
\"wrapped\" using the <tt>Collections.synchronizedMap</tt> method.  This is
best done at creation time, to prevent accidental unsynchronized access to
the map: <pre> Map m = Collections.synchronizedMap(new HashMap(...));
</pre>

<p>The iterators returned by all of this class's \"collection view methods\"
are <i>fail-fast</i>: if the map is structurally modified at any time after
the iterator is created, in any way except through the iterator's own
<tt>remove</tt> or <tt>add</tt> methods, the iterator will throw a
<tt>ConcurrentModificationException</tt>.  Thus, in the face of concurrent
modification, the iterator fails quickly and cleanly, rather than risking
arbitrary, non-deterministic behavior at an undetermined time in the
future.

<p>Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw <tt>ConcurrentModificationException</tt> on a best-effort basis. 
Therefore, it would be wrong to write a program that depended on this
exception for its correctness: <i>the fail-fast behavior of iterators
should be used only to detect bugs.</i>

<p>This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Doug Lea
@author  Josh Bloch
@author  Arthur van Hoff
@author  Neal Gafter
@version 1.65, 03/03/05
@see     Object#hashCode()
@see     Collection
@see	    Map
@see	    TreeMap
@see	    Hashtable
@since   1.2"
      classrelation 157467 // <realization>
	relation 157467 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 157467 // <realization>
	  b parent class_ref 136475 // AbstractMap
      end

      classrelation 157595 // <realization>
	relation 157595 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 157595 // <realization>
	  b parent class_ref 136603 // Map
      end

      classrelation 157851 // <realization>
	relation 157851 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 157851 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 172955 "DEFAULT_INITIAL_CAPACITY"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The default initial capacity - MUST be a power of two.
"
      end

      attribute 173083 "MAXIMUM_CAPACITY"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  1 << 30"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum capacity, used if a higher value is implicitly specified
by either of the constructors with arguments.
MUST be a power of two <= 1<<30.
"
      end

      attribute 173211 "DEFAULT_LOAD_FACTOR"
	class_attribute const_attribute package explicit_type "float"
	init_value "=  0.75f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The load factor used when none specified in constructor.
"
      end

      classrelation 157979 // table (<unidirectional association>)
	relation 157979 --->
	  a role_name "table" multiplicity "[]" package
	    comment "
The table, resized as necessary. Length MUST Always be a power of two.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 157979 // table (<unidirectional association>)
	  b parent class_ref 136859 // Entry
      end

      attribute 173339 "size"
	package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of key-value mappings contained in this identity hash map.
"
      end

      attribute 173467 "threshold"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The next size value at which to resize (capacity * load factor).
@serial
"
      end

      attribute 173595 "loadFactor"
	const_attribute package explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The load factor for the hash table.

@serial
"
      end

      attribute 173723 "modCount"
	volatile package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of times this HashMap has been structurally modified
Structural modifications are those that change the number of mappings in
the HashMap or otherwise modify its internal structure (e.g.,
rehash).  This field is used to make iterators on Collection-views of
the HashMap fail-fast.  (See ConcurrentModificationException).
"
      end

      operation 285339 "HashMap"
	public explicit_return_type ""
	nparams 2
	  param in name "initialCapacity" explicit_type "int"
	  param in name "loadFactor" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty <tt>HashMap</tt> with the specified initial
capacity and load factor.

@param  initialCapacity The initial capacity.
@param  loadFactor      The load factor.
@throws IllegalArgumentException if the initial capacity is negative
        or the load factor is nonpositive."
      end

      operation 285467 "HashMap"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty <tt>HashMap</tt> with the specified initial
capacity and the default load factor (0.75).

@param  initialCapacity the initial capacity.
@throws IllegalArgumentException if the initial capacity is negative."
      end

      operation 285595 "HashMap"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty <tt>HashMap</tt> with the default initial capacity
(16) and the default load factor (0.75)."
      end

      operation 285723 "HashMap"
	public explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <tt>HashMap</tt> with the same mappings as the
specified <tt>Map</tt>.  The <tt>HashMap</tt> is created with
default load factor (0.75) and an initial capacity sufficient to
hold the mappings in the specified <tt>Map</tt>.

@param   m the map whose mappings are to be placed in this map.
@throws  NullPointerException if the specified map is null."
      end

      operation 285851 "init"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " internal utilities

Initialization hook for subclasses. This method is called
in all constructors and pseudo-constructors (clone, readObject)
after HashMap has been initialized but before any entries have
been inserted.  (In the absence of this method, readObject would
require explicit knowledge of subclasses.)"
      end

      attribute 173851 "NULL_KEY"
	class_attribute const_attribute package explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value representing null keys inside tables.
"
      end

      operation 285979 "maskNull"
	class_operation package explicit_return_type "T"
	nparams 1
	  param inout name "key" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns internal representation for key. Use NULL_KEY if key is null."
      end

      operation 286107 "unmaskNull"
	class_operation package explicit_return_type "T"
	nparams 1
	  param inout name "key" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns key represented by specified internal representation."
      end

      attribute 173979 "useNewHash"
	class_attribute const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Whether to prefer the old supplemental hash function, for
compatibility with broken applications that rely on the
internal hashing order.

Set to true only by hotspot when invoked via
-XX:+UseNewHashFunction or -XX:+AggressiveOpts
"
      end

      extra_member 129307 "initialization"
	
	cpp "" ""
	java "  static { useNewHash = false; }"
	php ""
	python ""
	idl ""
      end

      operation 286235 "oldHash"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 286363 "newHash"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 286491 "hash"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies a supplemental hash function to a given hashCode, which
defends against poor quality hash functions.  This is critical
because HashMap uses power-of-two length hash tables, that
otherwise encounter collisions for hashCodes that do not differ
in lower bits."
      end

      operation 286619 "hash"
	class_operation package explicit_return_type "int"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 286747 "eq"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param inout name "x" explicit_type "Object"
	  param inout name "y" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check for equality of non-null reference x and possibly-null y. "
      end

      operation 286875 "indexFor"
	class_operation package explicit_return_type "int"
	nparams 2
	  param in name "h" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns index for hash code h. "
      end

      operation 287003 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of key-value mappings in this map.

@return the number of key-value mappings in this map."
      end

      operation 287131 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains no key-value mappings.

@return <tt>true</tt> if this map contains no key-value mappings."
      end

      operation 287259 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which the specified key is mapped in this identity
hash map, or <tt>null</tt> if the map contains no mapping for this key.
A return value of <tt>null</tt> does not <i>necessarily</i> indicate
that the map contains no mapping for the key; it is also possible that
the map explicitly maps the key to <tt>null</tt>. The
<tt>containsKey</tt> method may be used to distinguish these two cases.

@param   key the key whose associated value is to be returned.
@return  the value to which this map maps the specified key, or
         <tt>null</tt> if the map contains no mapping for this key.
@see #put(Object, Object)"
      end

      operation 287387 "getForNullKey"
	private explicit_return_type "V"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 287515 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains a mapping for the
specified key.

@param   key   The key whose presence in this map is to be tested
@return <tt>true</tt> if this map contains a mapping for the specified
key."
      end

      operation 287643 "getEntry"
	package return_type class_ref 136859 // Entry
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the entry associated with the specified key in the
HashMap.  Returns null if the HashMap contains no mapping
for this key."
      end

      operation 287771 "put"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates the specified value with the specified key in this map.
If the map previously contained a mapping for this key, the old
value is replaced.

@param key key with which the specified value is to be associated.
@param value value to be associated with the specified key.
@return previous value associated with specified key, or <tt>null</tt>
	       if there was no mapping for key.  A <tt>null</tt> return can
	       also indicate that the HashMap previously associated
	       <tt>null</tt> with the specified key."
      end

      operation 287899 "putForNullKey"
	private explicit_return_type "V"
	nparams 1
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 288027 "putForCreate"
	private explicit_return_type "void"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is used instead of put by constructors and
pseudoconstructors (clone, readObject).  It does not resize the table,
check for comodification, etc.  It calls createEntry rather than
addEntry."
      end

      operation 288155 "putAllForCreate"
	package explicit_return_type "void"
	nparams 1
	  param inout name "m" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 288283 "resize"
	package explicit_return_type "void"
	nparams 1
	  param in name "newCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Rehashes the contents of this map into a new array with a
larger capacity.  This method is called automatically when the
number of keys in this map reaches its threshold.

If current capacity is MAXIMUM_CAPACITY, this method does not
resize the map, but sets threshold to Integer.MAX_VALUE.
This has the effect of preventing future calls.

@param newCapacity the new capacity, MUST be a power of two;
       must be greater than current capacity unless current
       capacity is MAXIMUM_CAPACITY (in which case value
       is irrelevant)."
      end

      operation 288411 "transfer"
	package explicit_return_type "void"
	nparams 1
	  param inout name "newTable" type class_ref 136859 // Entry
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfer all entries from current table to newTable."
      end

      operation 288539 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "m" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies all of the mappings from the specified map to this map
These mappings will replace any mappings that
this map had for any of the keys currently in the specified map.

@param m mappings to be stored in this map.
@throws NullPointerException if the specified map is null."
      end

      operation 288667 "remove"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the mapping for this key from this map if present.

@param  key key whose mapping is to be removed from the map.
@return previous value associated with specified key, or <tt>null</tt>
	       if there was no mapping for key.  A <tt>null</tt> return can
	       also indicate that the map previously associated <tt>null</tt>
	       with the specified key."
      end

      operation 288795 "removeEntryForKey"
	package return_type class_ref 136859 // Entry
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and returns the entry associated with the specified key
in the HashMap.  Returns null if the HashMap contains no mapping
for this key."
      end

      operation 288923 "removeMapping"
	package return_type class_ref 136859 // Entry
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Special version of remove for EntrySet."
      end

      operation 289051 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all mappings from this map."
      end

      operation 289179 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map maps one or more keys to the
specified value.

@param value value whose presence in this map is to be tested.
@return <tt>true</tt> if this map maps one or more keys to the
        specified value."
      end

      operation 289307 "containsNullValue"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Special-case code for containsValue with null argument"
      end

      operation 289435 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and
values themselves are not cloned.

@return a shallow copy of this map."
      end

      class 152731 "Entry"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end
    end

    class 145051 "CurrencyData"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 154011 "mainTable"
	class_attribute const_attribute package explicit_type "String"
	init_value "=  \"\\u007f\\u007f\\u007f\\u0081CM\\u0082\\u007f\\u0082\\u007f\\u007fKCF@\\u007f\\u0080R\\u0083\\u0081C\\u007fF\\u0081\\u007f\\u0084\" +
                                    \"LC\\u007fS\\u0081\\u0085Mc\\u0005\\u0085\\u007f\\u007fCCA\\u007f\\u007fKCM\\u007f\\u0086O\\u007f\\u0011C\" +
                                    \"C\\u007f\\u0087E\\u007f\\u0088\\u0088E\\u0085\\u007f\\u0089\\u000f\\u0088XO\\u007f\\u007fBC\\u007fOD\\u007f\\u0087OJ\" +
                                    \"\\u007f\\u007f\\u007f\\u007f\\u0081\\u007f\\u007f\\u007f\\u007f\\u0005J\\u007f\\u0082\\u007fO\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007fC\" +
                                    \"\\u007f\\u007f\\u0083\\u007fJ\\u007fO\\u008a\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007fM\\u0081A\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\" +
                                    \"\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u0081CO\\u007f\\u0083\\u007f\\u008b\\u007f\\u007f\\u0081\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\" +
                                    \"\\u0088O\\u007f\\u0082K\\u0081\\u007f\\u008cO\\u007f\\u007f\\u008bC\\u0005\\u007f\\u0081\\u0088\\u0081\\u008dP\\u0083\\u007f\\u0085\\u007fC\\u007f\" +
                                    \"\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007fC\\u007f\\u0087K\\u007f\\u007f\\u007fJ\\u007fFE\\u007f\\u007f\\u007f\\u007f\\u007f\" +
                                    \"\\u007f\\u007f\\u007fQ\\u0081\\u007f\\u007f\\u007f\\u007f\\u007f\\u007fR\\u007fQ\\u0083\\u007fcQ\\n\\u0081\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\" +
                                    \"\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007fC\\u007fc\\u0018\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\" +
                                    \"\\u007f\\u007f\\u007f\\u007fR\\u007fRQ\\u0087\\u007f\\u007f\\u007f\\u0005\\u0082\\u007fV\\u007f\\u0016\\u007f\\u007f\\u007f\\u007fc\\u007fCS\" +
                                    \"JO\\u0082\\u007f\\u007f\\u007f\\u007f\\u007f\\u008e\\u007fQ\\u007f\\u007f\\u007f\\u007f\\u007f\\u007fCKK\\u0081K\\u007f\\u007fc\\u007f\" +
                                    \"C\\u007f\\u0081K\\u007f\\u007f@\\u0083\\u007f\\u007fC\\u0085JSO\\u0083\\u0081N\\u0082KQQJMQ\\u008f\" +
                                    \"C\\u007f\\u0090\\u007f\\u0085\\u0087M\\u007fN\\u007f\\u007f\\u0081\\u007f\\u007fJQ\\u007f\\u0087\\u007f\\u007f\\u0089\\u007f\\u007f\\u007f\\u007fC\" +
                                    \"\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007fq\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\" +
                                    \"A\\u007f\\u007f\\u007fM\\u0090JO\\u007f\\u007fQM\\u0081\\u0089\\u007f\\u007f\\u007f\\u0083\\u0091\\u0081\\u007f\\u007f\\u0083\\u007f\\u0006\\u007f\" +
                                    \"Q\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\" +
                                    \"\\u007f\\u007f\\u007f\\u007f\\u0081\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u0092\\u007f\\u007f\\u007f\\u007f\\u007fA\\u007f\\u0005\\u007f\\u007f\\u007f\" +
                                    \"QCQFJ\\u007fCO\\u0081\\u0086JK\\u0081\\u0085R\\u007f\\u007fC\\u007fC\\u007fB\\u007f\\u007fOK\" +
                                    \"\\u007f\\u007f\\u0083\\u0088\\u007f\\u0081\\u0085A\\u007fR\\u0089\\u0083LcO\\u007f\\u007f\\u0093\\u007fC\\u007f\\u0087C\\u007f\\u007fR\" +
                                    \"G\\u007f\\u007f\\u007f\\u007f\\u007fW\\u007f\\u007f\\u007f\\u007f\\u007f\\u0083\\u007f\\u007f\\u007f\\u007f\\u007fC\\u007f\\u007f\\u007f\\u007f\\u007fTR\" +
                                    \"\\u0081\\u007f\\u0082\\u007f\\u0094\\u007f\\u0083\\u007f\\u0083\\u007f\\u007f\\u007f\\u007fC\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u0015\\u007f\\u007f\\u007f\\u007f\\u007f\" +
                                    \"\\u007f\\u007f\\u007f\\u007f\\u007f\\u0090\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007fS\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\" +
                                    \"\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\" +
                                    \"\\u007f\\u007f\\u007f\\u007fQ\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u0081\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\" +
                                    \"Q\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007fJ\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007f\\u007fC\\u007f\\u007f\\u007f\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 154139 "scCutOverTimes"
	class_attribute const_attribute package explicit_type "long"
	multiplicity "[]"
	init_value "=  { 9223372036854775807L, 9223372036854775807L, 9223372036854775807L, 1136059200000L, 9223372036854775807L, 9223372036854775807L, 9223372036854775807L, 9223372036854775807L, 9223372036854775807L, 9223372036854775807L, 9223372036854775807L, 1183248000000L, 9223372036854775807L, 9223372036854775807L, 1151704800000L, 9223372036854775807L, 9223372036854775807L, 1120165200000L, 1104530400000L, 1199160000000L, }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 154267 "scOldCurrencies"
	class_attribute const_attribute package explicit_type "String"
	multiplicity "[]"
	init_value "=  { \"EUR\", \"XCD\", \"USD\", \"AZM\", \"XOF\", \"NOK\", \"AUD\", \"XAF\", \"NZD\", \"MAD\", \"DKK\", \"GHC\", \"GBP\", \"CHF\", \"MZM\", \"XPF\", \"ILS\", \"ROL\", \"TRL\", \"VEB\", }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 154395 "scNewCurrencies"
	class_attribute const_attribute package explicit_type "String"
	multiplicity "[]"
	init_value "=  { null, null, null, \"AZN\", null, null, null, null, null, null, null, \"GHS\", null, null, \"MZN\", null, null, \"RON\", \"TRY\", \"VEF\", }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 154523 "scOldCurrenciesDFD"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  { 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 154651 "scNewCurrenciesDFD"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  { 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 2, 2, 2, }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 154779 "otherCurrencies"
	class_attribute const_attribute package explicit_type "String"
	init_value "=  \"ADP-AFA-ATS-AYM-AZM-AZN-BEF-BGL-BOV-BYB-CLF-DEM-ESP-EUR-FIM-FRF-GHC-GHP-GHS-GRD-GWP-IEP-ITL-LUF-MGF-MXV-MZM-MZN-NLG-PTE-ROL-RON-RUR-SDD-SIT-SRG-TPE-TRL-TRY-USN-USS-VEB-VEF-XAF-XAG-XAU-XBA-XBB-XBC-XBD-XCD-XDR-XFO-XFU-XOF-XPD-XPF-XPT-XTS-XXX-YUM\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 154907 "otherCurrenciesDFD"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  { 0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 0, -1, 0, -1, -1, -1, 2, }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 145179 "Dictionary"
      abstract visibility public 
      nformals 8
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Dictionary</code> class is the abstract parent of any 
class, such as <code>Hashtable</code>, which maps keys to values. 
Every key and every value is an object. In any one <tt>Dictionary</tt> 
object, every key is associated with at most one value. Given a 
<tt>Dictionary</tt> and a key, the associated element can be looked up. 
Any non-<code>null</code> object can be used as a key and as a value.
<p>
As a rule, the <code>equals</code> method should be used by 
implementations of this class to decide if two keys are the same. 
<p>
<strong>NOTE: This class is obsolete.  New implementations should
implement the Map interface, rather than extending this class.</strong>

@author  unascribed
@version 1.23, 01/12/04
@see	    java.util.Map
@see     java.lang.Object#equals(java.lang.Object)
@see     java.lang.Object#hashCode()
@see     java.util.Hashtable
@since   JDK1.0"
      operation 251163 "Dictionary"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sole constructor.  (For invocation by subclass constructors, typically
implicit.)"
      end

      operation 251291 "size"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of entries (distinct keys) in this dictionary.

@return  the number of keys in this dictionary."
      end

      operation 251419 "isEmpty"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this dictionary maps no keys to value. The general contract 
for the <tt>isEmpty</tt> method is that the result is true if and only 
if this dictionary contains no entries. 

@return  <code>true</code> if this dictionary maps no keys to values;
         <code>false</code> otherwise."
      end

      operation 251547 "keys"
	abstract public return_type class_ref 144411 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the keys in this dictionary. The general 
contract for the keys method is that an <tt>Enumeration</tt> object 
is returned that will generate all the keys for which this dictionary 
contains entries. 

@return  an enumeration of the keys in this dictionary.
@see     java.util.Dictionary#elements()
@see     java.util.Enumeration"
      end

      operation 251675 "elements"
	abstract public return_type class_ref 144411 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the values in this dictionary. The general 
contract for the <tt>elements</tt> method is that an 
<tt>Enumeration</tt> is returned that will generate all the elements 
contained in entries in this dictionary.

@return  an enumeration of the values in this dictionary.
@see     java.util.Dictionary#keys()
@see     java.util.Enumeration"
      end

      operation 251803 "get"
	abstract public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which the key is mapped in this dictionary. 
The general contract for the <tt>isEmpty</tt> method is that if this 
dictionary contains an entry for the specified key, the associated 
value is returned; otherwise, <tt>null</tt> is returned. 

@return  the value to which the key is mapped in this dictionary;
@param   key   a key in this dictionary.
         <code>null</code> if the key is not mapped to any value in
         this dictionary.
@exception NullPointerException if the <tt>key</tt> is <tt>null</tt>.
@see     java.util.Dictionary#put(java.lang.Object, java.lang.Object)"
      end

      operation 251931 "put"
	abstract public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Maps the specified <code>key</code> to the specified 
<code>value</code> in this dictionary. Neither the key nor the 
value can be <code>null</code>.
<p>
If this dictionary already contains an entry for the specified 
<tt>key</tt>, the value already in this dictionary for that 
<tt>key</tt> is returned, after modifying the entry to contain the
 new element. <p>If this dictionary does not already have an entry 
 for the specified <tt>key</tt>, an entry is created for the 
 specified <tt>key</tt> and <tt>value</tt>, and <tt>null</tt> is 
 returned.
<p>
The <code>value</code> can be retrieved by calling the 
<code>get</code> method with a <code>key</code> that is equal to 
the original <code>key</code>. 

@param      key     the hashtable key.
@param      value   the value.
@return     the previous value to which the <code>key</code> was mapped
            in this dictionary, or <code>null</code> if the key did not
            have a previous mapping.
@exception  NullPointerException  if the <code>key</code> or
              <code>value</code> is <code>null</code>.
@see        java.lang.Object#equals(java.lang.Object)
@see        java.util.Dictionary#get(java.lang.Object)"
      end

      operation 252059 "remove"
	abstract public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the <code>key</code> (and its corresponding 
<code>value</code>) from this dictionary. This method does nothing 
if the <code>key</code> is not in this dictionary. 

@param   key   the key that needs to be removed.
@return  the value to which the <code>key</code> had been mapped in this
         dictionary, or <code>null</code> if the key did not have a
         mapping.
@exception NullPointerException if <tt>key</tt> is <tt>null</tt>."
      end
    end

    class 145307 "DuplicateFormatFlagsException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when duplicate flags are provided in the format
specifier.  

<p> Unless otherwise specified, passing a <tt>null</tt> argument to any
method or constructor in this class will cause a {@link
NullPointerException} to be thrown.

@version 	1.2, 12/19/03
@since 1.5"
      classrelation 152219 // <generalisation>
	relation 152219 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 152219 // <generalisation>
	  b parent class_ref 145435 // IllegalFormatException
      end

      attribute 156187 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  18890531L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 156315 "flags"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 252315 "DuplicateFormatFlagsException"
	public explicit_return_type ""
	nparams 1
	  param in name "f" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class with the specified flags.

@param  f
        The set of format flags which contain a duplicate flag."
      end

      operation 252443 "getFlags"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of flags which contains a duplicate flag.

@return  The flags"
      end

      operation 252571 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 145435 "IllegalFormatException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when a format string contains an illegal syntax
or a format specifier that is incompatible with the given arguments.  Only
explicit subtypes of this exception which correspond to specific errors
should be instantiated.

@version 	1.3, 04/21/04
@since 1.5"
      attribute 156059 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  18830826L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 252187 "IllegalFormatException"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " package-private to prevent explicit instantiation"
      end
    end

    class 145691 "EmptyStackException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown by methods in the <code>Stack</code> class to indicate 
that the stack is empty. 

@author  Jonathan Payne
@version 1.20, 12/19/03
@see     java.util.Stack
@since   JDK1.0"
      operation 252699 "EmptyStackException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>EmptyStackException</code> with <tt>null</tt> 
as its error message string."
      end
    end

    class 145819 "EnumMap"
      visibility public 
      nformals 8
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 8
      actual class class_ref 136475 // AbstractMap
        rank 0 explicit_value "K"
      actual class class_ref 136475 // AbstractMap
        rank 1 explicit_value "V"
      actual class class_ref 136475 // AbstractMap
        rank 2 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 3 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 4 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 5 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 6 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 7 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized {@link Map} implementation for use with enum type keys.  All
of the keys in an enum map must come from a single enum type that is
specified, explicitly or implicitly, when the map is created.  Enum maps
are represented internally as arrays.  This representation is extremely
compact and efficient.

<p>Enum maps are maintained in the <i>natural order</i> of their keys
(the order in which the enum constants are declared).  This is reflected
in the iterators returned by the collections views ({@link #keySet()},
{@link #entrySet()}, and {@link #values()}).

<p>Iterators returned by the collection views are <i>weakly consistent</i>:
they will never throw {@link ConcurrentModificationException} and they may
or may not show the effects of any modifications to the map that occur while
the iteration is in progress.

<p>Null keys are not permitted.  Attempts to insert a null key will
throw {@link NullPointerException}.  Attempts to test for the
presence of a null key or to remove one will, however, function properly.
Null values are permitted.

<P>Like most collection implementations <tt>EnumMap</tt> is not
synchronized. If multiple threads access an enum map concurrently, and at
least one of the threads modifies the map, it should be synchronized
externally.  This is typically accomplished by synchronizing on some
object that naturally encapsulates the enum map.  If no such object exists,
the map should be \"wrapped\" using the {@link Collections#synchronizedMap}
method.  This is best done at creation time, to prevent accidental
unsynchronized access:

<pre>
    Map&lt;EnumKey, V&gt; m = Collections.synchronizedMap(new EnumMap(...));
</pre>

<p>Implementation note: All basic operations execute in constant time.
They are likely (though not guaranteed) to be faster than their
{@link HashMap} counterparts.

<p>This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author Josh Bloch
@version 1.11, 09/02/05
@see EnumSet
@since 1.5"
      classrelation 152475 // <realization>
	relation 152475 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 152475 // <realization>
	  b parent class_ref 136475 // AbstractMap
      end

      classrelation 152603 // <realization>
	relation 152603 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 152603 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 156443 "keyType"
	const_attribute private explicit_type "K"
	stereotype "Class"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <tt>Class</tt> object for the enum type of all the keys of this map.

@serial
"
      end

      attribute 156571 "keyUniverse"
	private explicit_type "K"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "All of the values comprising K.  (Cached for performance.)
"
      end

      attribute 156699 "vals"
	private explicit_type "Object"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Array representation of this map.  The ith element is the value
to which universe[i] is currently mapped, or null if it isn't
mapped to anything, or NULL if it's mapped to null.
"
      end

      attribute 156827 "size"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of mappings in this map.
"
      end

      attribute 156955 "NULL"
	class_attribute const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Distinguished non-null value for representing null values.
"
      end

      operation 253083 "maskNull"
	private explicit_return_type "Object"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 253211 "unmaskNull"
	private explicit_return_type "V"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 157083 "ZERO_LENGTH_ENUM_ARRAY"
	class_attribute private explicit_type "Enum"
	multiplicity "[]"
	init_value "=  new Enum[0]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 253339 "EnumMap"
	public explicit_return_type ""
	nparams 1
	  param inout name "keyType" explicit_type "Class<K>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty enum map with the specified key type.

@param keyType the class object of the key type for this enum map
@throws NullPointerException if <tt>keyType</tt> is null"
      end

      operation 253467 "EnumMap"
	public explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 145819 // EnumMap
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an enum map with the same key type as the specified enum
map, initially containing the same mappings (if any).

@param m the enum map from which to initialize this enum map
@throws NullPointerException if <tt>m</tt> is null"
      end

      operation 253595 "EnumMap"
	public explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an enum map initialized from the specified map.  If the
specified map is an <tt>EnumMap</tt> instance, this constructor behaves
identically to {@link #EnumMap(EnumMap)}.  Otherwise, the specified map
must contain at least one mapping (in order to determine the new
enum map's key type).

@param m the map from which to initialize this enum map
@throws IllegalArgumentException if <tt>m</tt> is not an
    <tt>EnumMap</tt> instance and contains no mappings
@throws NullPointerException if <tt>m</tt> is null"
      end

      operation 253723 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query Operations

Returns the number of key-value mappings in this map.

@return the number of key-value mappings in this map"
      end

      operation 253851 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map maps one or more keys to the
specified value.

@param value the value whose presence in this map is to be tested
@return <tt>true</tt> if this map maps one or more keys to this value"
      end

      operation 253979 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains a mapping for the specified
key.

@param key the key whose presence in this map is to be tested
@return <tt>true</tt> if this map contains a mapping for the specified
           key"
      end

      operation 254107 "containsMapping"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "key" explicit_type "Object"
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 254235 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which this map maps the specified key, or null
if this map contains no mapping for the specified key.

@param key the key whose associated value is to be returned
@return the value to which this map maps the specified key, or null
    if this map contains no mapping for the specified key"
      end

      operation 254363 "put"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modification Operations

Associates the specified value with the specified key in this map.
If the map previously contained a mapping for this key, the old
value is replaced.

@param key the key with which the specified value is to be associated
@param value the value to be associated with the specified key

@return the previous value associated with specified key, or
    <tt>null</tt> if there was no mapping for key.  (A <tt>null</tt>
    return can also indicate that the map previously associated
    <tt>null</tt> with the specified key.)
@throws NullPointerException if the specified key is null"
      end

      operation 254491 "remove"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the mapping for this key from this map if present.

@param key the key whose mapping is to be removed from the map
@return the previous value associated with specified key, or
    <tt>null</tt> if there was no entry for key.  (A <tt>null</tt>
    return can also indicate that the map previously associated
    <tt>null</tt> with the specified key.)"
      end

      operation 254619 "removeMapping"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "key" explicit_type "Object"
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 254747 "isValidKey"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if key is of the proper type to be a key in this
enum map."
      end

      operation 254875 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "m" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bulk Operations

Copies all of the mappings from the specified map to this map.
These mappings will replace any mappings that this map had for
any of the keys currently in the specified map.

@param m the mappings to be stored in this map
@throws NullPointerException the specified map is null, or if
    one or more keys in the specified map are null"
      end

      operation 255003 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all mappings from this map."
      end

      classrelation 152859 // entrySet (<unidirectional association>)
	relation 152859 --->
	  a role_name "entrySet" init_value "=  null" private
	    comment " Views

This field is initialized to contain an instance of the entry set
view the first time this view is requested.  The view is stateless,
so there's no reason to create more than one.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	    classrelation_ref 152859 // entrySet (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      operation 255131 "keySet"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Set} view of the keys contained in this map.
The returned set obeys the general contract outlined in
{@link Map#keySet()}.  The set's iterator will return the keys
in their natural order (the order in which the enum constants
are declared).

@return a set view of the keys contained in this enum map"
      end

      class 145947 "KeySet"
	visibility private 
	nactuals 4
	actual class class_ref 137499 // AbstractSet
	  rank 0 explicit_value "K"
	actual class class_ref 137499 // AbstractSet
	  rank 1 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 2 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 152987 // <realization>
	  relation 152987 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 152987 // <realization>
	    b parent class_ref 137499 // AbstractSet
	end

	operation 255259 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 255387 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 255515 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 255643 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 255771 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 255899 "values"
	public return_type class_ref 135067 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Collection} view of the values contained in this map.
The returned collection obeys the general contract outlined in
{@link Map#values()}.  The collection's iterator will return the
values in the order their corresponding keys appear in map,
which is their natural order (the order in which the enum constants
are declared).

@return a collection view of the values contained in this map"
      end

      class 146075 "Values"
	visibility private 
	nactuals 4
	actual class class_ref 134939 // AbstractCollection
	  rank 0 explicit_value "V"
	actual class class_ref 134939 // AbstractCollection
	  rank 1 explicit_value ""
	actual class class_ref 134939 // AbstractCollection
	  rank 2 explicit_value ""
	actual class class_ref 134939 // AbstractCollection
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 153115 // <realization>
	  relation 153115 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 153115 // <realization>
	    b parent class_ref 134939 // AbstractCollection
	end

	operation 256027 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 256155 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 256283 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 256411 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 256539 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 256667 "entrySet"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Set} view of the mappings contained in this map.
The returned set obeys the general contract outlined in
{@link Map#keySet()}.  The set's iterator will return the
mappings in the order their keys appear in map, which is their
natural order (the order in which the enum constants are declared).

@return a set view of the mappings contained in this enum map"
      end

      class 146203 "EntrySet"
	visibility private 
	nactuals 4
	actual class class_ref 137499 // AbstractSet
	  rank 0 explicit_value "Map.Entry<K,V>"
	actual class class_ref 137499 // AbstractSet
	  rank 1 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 2 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 153243 // <realization>
	  relation 153243 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 153243 // <realization>
	    b parent class_ref 137499 // AbstractSet
	end

	operation 256795 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 256923 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 257051 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 257179 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 257307 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 257435 "toArray"
	  public explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 257563 "toArray"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 257691 "fillEntryArray"
	  private explicit_return_type "Object"
	  nparams 1
	    param inout name "a" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 146331 "EnumMapIterator"
	abstract visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "T"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 153371 // <realization>
	  relation 153371 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 153371 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	attribute 157211 "index"
	  package explicit_type "int"
	  init_value "=  0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Lower bound on index of next element to return"
	end

	attribute 157339 "lastReturnedIndex"
	  package explicit_type "int"
	  init_value "=  -1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Index of last returned element, or -1 if none"
	end

	operation 257819 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 257947 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 258075 "checkLastReturnedIndex"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 146459 "KeyIterator"
	visibility private 
	nactuals 9
	actual class class_ref 145819 // EnumMap
	  rank 0 explicit_value "K"
	actual class class_ref 145819 // EnumMap
	  rank 1 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 2 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 3 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 4 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 5 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 6 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 7 explicit_value ""
	actual class class_ref 146331 // EnumMapIterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 153499 // <realization>
	  relation 153499 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 153499 // <realization>
	    b parent class_ref 146331 // EnumMapIterator
	end

	operation 258203 "next"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 146587 "ValueIterator"
	visibility private 
	nactuals 9
	actual class class_ref 145819 // EnumMap
	  rank 0 explicit_value "V"
	actual class class_ref 145819 // EnumMap
	  rank 1 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 2 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 3 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 4 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 5 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 6 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 7 explicit_value ""
	actual class class_ref 146331 // EnumMapIterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 153627 // <realization>
	  relation 153627 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 153627 // <realization>
	    b parent class_ref 146331 // EnumMapIterator
	end

	operation 258331 "next"
	  public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 146715 "EntryIterator"
	visibility private 
	nactuals 21
	actual class class_ref 145819 // EnumMap
	  rank 0 explicit_value "Map.Entry<K,V>"
	actual class class_ref 145819 // EnumMap
	  rank 1 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 2 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 3 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 4 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 5 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 6 explicit_value ""
	actual class class_ref 145819 // EnumMap
	  rank 7 explicit_value ""
	actual class class_ref 146331 // EnumMapIterator
	  rank 0 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 0 explicit_value "K"
	actual class class_ref 136603 // Map
	  rank 1 explicit_value "V"
	actual class class_ref 136603 // Map
	  rank 2 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 3 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 4 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 5 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 6 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 7 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 0 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 1 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 2 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 153755 // <realization>
	  relation 153755 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 153755 // <realization>
	    b parent class_ref 146331 // EnumMapIterator
	end

	classrelation 153883 // <realization>
	  relation 153883 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 153883 // <realization>
	    b parent class_ref 136859 // Entry
	end

	operation 258459 "next"
	  public return_type class_ref 136859 // Entry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 258587 "getKey"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 258715 "getValue"
	  public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 258843 "setValue"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 258971 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 259099 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 259227 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 259355 "checkLastReturnedIndexForEntryUse"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 259483 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison and hashing

Compares the specified object with this map for equality.  Returns
<tt>true</tt> if the given object is also a map and the two maps
represent the same mappings, as specified in the {@link
Map#equals(Object)} contract.

@param o the object to be compared for equality with this map
@return <tt>true</tt> if the specified object is equal to this map"
      end

      operation 259611 "clone"
	public return_type class_ref 145819 // EnumMap
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K, V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow copy of this enum map.  (The values themselves
are not cloned.

@return a shallow copy of this enum map"
      end

      operation 259739 "typeCheck"
	private explicit_return_type "void"
	nparams 1
	  param inout name "key" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws an exception if e is not of the correct type for this enum set."
      end

      attribute 157467 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  458661240069192865L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 259867 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectOutputStream"
	nexceptions 1
	  explicit_exception "java.io.IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state of the <tt>EnumMap</tt> instance to a stream (i.e.,
serialize it).

@serialData The <i>size</i> of the enum map (the number of key-value
            mappings) is emitted (int), followed by the key (Object)
            and value (Object) for each key-value mapping represented
            by the enum map."
      end

      operation 259995 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectInputStream"
	nexceptions 2
	  explicit_exception "java.io.IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the <tt>EnumMap</tt> instance from a stream (i.e.,
deserialize it)."
      end
    end

    class 146843 "EnumSet"
      abstract visibility public 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 137499 // AbstractSet
        rank 0 explicit_value "E"
      actual class class_ref 137499 // AbstractSet
        rank 1 explicit_value ""
      actual class class_ref 137499 // AbstractSet
        rank 2 explicit_value ""
      actual class class_ref 137499 // AbstractSet
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized {@link Set} implementation for use with enum types.  All of
the elements in an enum set must come from a single enum type that is
specified, explicitly or implicitly, when the set is created.  Enum sets
are represented internally as bit vectors.  This representation is
extremely compact and efficient. The space and time performance of this
class should be good enough to allow its use as a high-quality, typesafe
alternative to traditional <tt>int</tt>-based \"bit flags.\"  Even bulk
operations (such as <tt>containsAll</tt> and <tt>retainAll</tt>) should
run very quickly if the specified collection is also an enum set.

<p>The iterator returned by the <tt>iterator</tt>method traverses the
elements in their <i>natural order</i> (the order in which the enum
constants are declared).  The returned iterator is <i>weakly
consistent</i>: it will never throw {@link ConcurrentModificationException}
and it may or may not show the effects of any modifications to the set that
occur while the iteration is in progress.

<p>Null elements are not permitted.  Attempts to insert a null element
will throw {@link NullPointerException}.  Attempts to test for the
presence of a null element or to remove one will, however, function
properly.

<P>Like most collection implementations <tt>EnumSet</tt> is not
synchronized.  If multiple threads access an enum set concurrently, and at
least one of the threads modifies the set, it should be synchronized
externally.  This is typically accomplished by synchronizing on some
object that naturally encapsulates the enum set.  If no such object exists,
the set should be \"wrapped\" using the {@link Collections#synchronizedSet}
method.  This is best done at creation time, to prevent accidental
unsynchronized access:

<pre>
Set&lt;MyEnum&gt; s = Collections.synchronizedSet(EnumSet.noneOf(Foo.class));
</pre>

<p>Implementation note: All basic operations execute in constant time.
They are likely (though not guaranteed) to be much faster than their
{@link HashSet} counterparts.  Even bulk operations, such as {@link
#addAll} and  {@link #removeAll} execute in constant time if the
parameter is another <tt>EnumSet</tt> instance.

<p>This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author Josh Bloch
@version 1.10, 05/28/04
@since 1.5
@see EnumMap
@serial exclude"
      classrelation 154011 // <realization>
	relation 154011 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 154011 // <realization>
	  b parent class_ref 137499 // AbstractSet
      end

      classrelation 154267 // <realization>
	relation 154267 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 154267 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 157595 "elementType"
	const_attribute package explicit_type "E"
	stereotype "Class"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The class of all the elements of this set.
"
      end

      attribute 157723 "universe"
	const_attribute package explicit_type "Enum"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "All of the values comprising T.  (Cached for performance.)
"
      end

      attribute 157851 "ZERO_LENGTH_ENUM_ARRAY"
	class_attribute private explicit_type "Enum"
	multiplicity "[]"
	init_value "=  new Enum[0]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 260123 "EnumSet"
	package explicit_return_type ""
	nparams 2
	  param inout name "elementType" explicit_type "Class<E>"
	  param inout name "universe" explicit_type "Enum"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 260251 "noneOf"
	class_operation public return_type class_ref 146843 // EnumSet
	nparams 1
	  param inout name "elementType" explicit_type "Class<E>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E extends Enum<E>> ${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty enum set with the specified element type.

@param elementType the class object of the element type for this enum
    set
@throws NullPointerException if <tt>elementType</tt> is null"
      end

      operation 260379 "allOf"
	class_operation public return_type class_ref 146843 // EnumSet
	nparams 1
	  param inout name "elementType" explicit_type "Class<E>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E extends Enum<E>> ${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an enum set containing all of the elements in the specified
element type.

@param elementType the class object of the element type for this enum
    set
@throws NullPointerException if <tt>elementType</tt> is null"
      end

      operation 260507 "addAll"
	abstract package explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds all of the elements from the appropriate enum type to this enum
set, which is empty prior to the call."
      end

      operation 260635 "copyOf"
	class_operation public return_type class_ref 146843 // EnumSet
	nparams 1
	  param inout name "s" type class_ref 146843 // EnumSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E extends Enum<E>> ${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an enum set with the same element type as the specified enum
set, initially containing the same elements (if any).

@param s the enum set from which to initialize this enum set
@throws NullPointerException if <tt>s</tt> is null"
      end

      operation 260763 "copyOf"
	class_operation public return_type class_ref 146843 // EnumSet
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E extends Enum<E>> ${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an enum set initialized from the specified collection.  If
the specified collection is an <tt>EnumSet</tt> instance, this static
factory method behaves identically to {@link #copyOf(EnumSet)}.
Otherwise, the specified collection must contain at least one element
(in order to determine the new enum set's element type).

@param c the collection from which to initialize this enum set
@throws IllegalArgumentException if <tt>c</tt> is not an
    <tt>EnumSet</tt> instance and contains no elements
@throws NullPointerException if <tt>c</tt> is null"
      end

      operation 260891 "complementOf"
	class_operation public return_type class_ref 146843 // EnumSet
	nparams 1
	  param inout name "s" type class_ref 146843 // EnumSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E extends Enum<E>> ${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an enum set with the same element type as the specified enum
set, initially containing all the elements of this type that are
<i>not</i> contained in the specified set.

@param s the enum set from whose complement to initialize this enum set
@throws NullPointerException if <tt>s</tt> is null"
      end

      operation 261019 "of"
	class_operation public return_type class_ref 146843 // EnumSet
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E extends Enum<E>> ${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an enum set initially containing the specified element.

Overloadings of this method exist to initialize an enum set with
one through five elements.  A sixth overloading is provided that
uses the varargs feature.  This overloading may be used to create an
an enum set initially containing an arbitrary number of elements, but
is likely to run slower than the overloadings that do not use varargs.

@param e the element that this set is to contain initially
@throws NullPointerException if <tt>e</tt> is null
@return an enum set initially containing the specified element"
      end

      operation 261147 "of"
	class_operation public return_type class_ref 146843 // EnumSet
	nparams 2
	  param inout name "e1" explicit_type "E"
	  param inout name "e2" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E extends Enum<E>> ${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an enum set initially containing the specified elements.

Overloadings of this method exist to initialize an enum set with
one through five elements.  A sixth overloading is provided that
uses the varargs feature.  This overloading may be used to create an
an enum set initially containing an arbitrary number of elements, but
is likely to run slower than the overloadings that do not use varargs.

@param e1 an element that this set is to contain initially
@param e2 another element that this set is to contain initially
@throws NullPointerException if any parameters are null
@return an enum set initially containing the specified elements"
      end

      operation 261275 "of"
	class_operation public return_type class_ref 146843 // EnumSet
	nparams 3
	  param inout name "e1" explicit_type "E"
	  param inout name "e2" explicit_type "E"
	  param inout name "e3" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E extends Enum<E>> ${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an enum set initially containing the specified elements.

Overloadings of this method exist to initialize an enum set with
one through five elements.  A sixth overloading is provided that
uses the varargs feature.  This overloading may be used to create an
an enum set initially containing an arbitrary number of elements, but
is likely to run slower than the overloadings that do not use varargs.

@param e1 an element that this set is to contain initially
@param e2 another element that this set is to contain initially
@param e3 another element that this set is to contain initially
@throws NullPointerException if any parameters are null
@return an enum set initially containing the specified elements"
      end

      operation 261403 "of"
	class_operation public return_type class_ref 146843 // EnumSet
	nparams 4
	  param inout name "e1" explicit_type "E"
	  param inout name "e2" explicit_type "E"
	  param inout name "e3" explicit_type "E"
	  param inout name "e4" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E extends Enum<E>> ${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an enum set initially containing the specified elements.

Overloadings of this method exist to initialize an enum set with
one through five elements.  A sixth overloading is provided that
uses the varargs feature.  This overloading may be used to create an
an enum set initially containing an arbitrary number of elements, but
is likely to run slower than the overloadings that do not use varargs.

@param e1 an element that this set is to contain initially
@param e2 another element that this set is to contain initially
@param e3 another element that this set is to contain initially
@param e4 another element that this set is to contain initially
@throws NullPointerException if any parameters are null
@return an enum set initially containing the specified elements"
      end

      operation 261531 "of"
	class_operation public return_type class_ref 146843 // EnumSet
	nparams 5
	  param inout name "e1" explicit_type "E"
	  param inout name "e2" explicit_type "E"
	  param inout name "e3" explicit_type "E"
	  param inout name "e4" explicit_type "E"
	  param inout name "e5" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E extends Enum<E>> ${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an enum set initially containing the specified elements.

Overloadings of this method exist to initialize an enum set with
one through five elements.  A sixth overloading is provided that
uses the varargs feature.  This overloading may be used to create an
an enum set initially containing an arbitrary number of elements, but
is likely to run slower than the overloadings that do not use varargs.

@param e1 an element that this set is to contain initially
@param e2 another element that this set is to contain initially
@param e3 another element that this set is to contain initially
@param e4 another element that this set is to contain initially
@param e5 another element that this set is to contain initially
@throws NullPointerException if any parameters are null
@return an enum set initially containing the specified elements"
      end

      operation 261659 "of"
	class_operation public return_type class_ref 146843 // EnumSet
	nparams 2
	  param inout name "first" explicit_type "E"
	  param inout name "" explicit_type "E...rest"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E extends Enum<E>> ${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an enum set initially containing the specified elements.
This factory, whose parameter list uses the varargs feature, may
be used to create an enum set initially containing an arbitrary
number of elements, but it is likely to run slower than the overloadings
that do not use varargs.

@param first an element that the set is to contain initially
@param rest the remaining elements the set is to contain initially
@throws NullPointerException if any of the specified elements are null,
    or if <tt>rest</tt> is null
@return an enum set initially containing the specified elements"
      end

      operation 261787 "range"
	class_operation public return_type class_ref 146843 // EnumSet
	nparams 2
	  param inout name "from" explicit_type "E"
	  param inout name "to" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E extends Enum<E>> ${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an enum set initially containing all of the elements in the
range defined by the two specified endpoints.  The returned set will
contain the endpoints themselves, which may be identical but must not
be out of order.

@param from the first element in the range
@param to the last element in the range
@throws NullPointerException if <tt>first</tt> or <tt>last</tt> are
    null
@throws IllegalArgumentException if <tt>first.compareTo(last) &gt; 0</tt>
@return an enum set initially containing all of the elements in the
    range defined by the two specified endpoints"
      end

      operation 261915 "addRange"
	abstract package explicit_return_type "void"
	nparams 2
	  param inout name "from" explicit_type "E"
	  param inout name "to" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified range to this enum set, which is empty prior
to the call."
      end

      operation 262043 "clone"
	public return_type class_ref 146843 // EnumSet
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this set.

@return a copy of this set."
      end

      operation 262171 "complement"
	abstract package explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Complements the contents of this enum set."
      end

      operation 262299 "typeCheck"
	package explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws an exception if e is not of the correct type for this enum set."
      end

      class 146971 "SerializationProxy"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 154395 // <realization>
	  relation 154395 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 154395 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 157979 "elementType"
	  const_attribute private explicit_type "E"
	  stereotype "Class"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The element type of this enum set.

@serial
"
	end

	attribute 158107 "elements"
	  const_attribute private explicit_type "Enum"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The elements contained in this enum set.

@serial
"
	end

	operation 262427 "SerializationProxy"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "set" type class_ref 146843 // EnumSet
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 262555 "readResolve"
	  private explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 158235 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  362491234563181265L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 262683 "writeReplace"
	package explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 147099 "EventListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A tagging interface that all event listener interfaces must extend.
@since JDK1.1"
    end

    class 147227 "EventListenerProxy"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An abstract wrapper class for an EventListener class which associates a set
of additional parameters with the listener. Subclasses must provide the
storage and accessor methods for the additional arguments or parameters.

Subclasses of EventListenerProxy may be returned by getListeners() methods
as a way of associating named properties with their listeners.

For example, a Bean which supports named properties would have a two
argument method signature for adding a PropertyChangeListener for a
property:

    public void addPropertyChangeListener(String propertyName,
                                 PropertyChangeListener listener);

If the Bean also implemented the zero argument get listener method:

    public PropertyChangeListener[] getPropertyChangeListeners();

then the array may contain inner PropertyChangeListeners which are also 
PropertyChangeListenerProxy objects.

If the calling method is interested in retrieving the named property then it
would have to test the element to see if it is a proxy class.

@since 1.4"
      classrelation 154523 // <realization>
	relation 154523 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 154523 // <realization>
	  b parent class_ref 147099 // EventListener
      end

      classrelation 154651 // listener (<unidirectional association>)
	relation 154651 --->
	  a role_name "listener" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 154651 // listener (<unidirectional association>)
	  b parent class_ref 147099 // EventListener
      end

      operation 262811 "EventListenerProxy"
	public explicit_return_type ""
	nparams 1
	  param inout name "listener" type class_ref 147099 // EventListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param listener The listener object."
      end

      operation 262939 "getListener"
	public return_type class_ref 147099 // EventListener
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The listener associated with this proxy."
      end
    end

    class 147355 "EventObject"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>
The root class from which all event state objects shall be derived.
<p>
All Events are constructed with a reference to the object, the \"source\",
that is logically deemed to be the object upon which the Event in question
initially occurred upon.

@since JDK1.1"
      classrelation 154779 // <realization>
	relation 154779 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 154779 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 158363 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  5516075349620653480L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 158491 "source"
	protected explicit_type "Object"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The object on which the Event initially occurred.
"
      end

      operation 263067 "EventObject"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a prototypical Event.

@param    source    The object on which the Event initially occurred.
@exception  IllegalArgumentException  if source is null."
      end

      operation 263195 "getSource"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The object on which the Event initially occurred.

@return   The object on which the Event initially occurred."
      end

      operation 263323 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String representation of this EventObject.

@return  A a String representation of this EventObject."
      end
    end

    class 147483 "FormatFlagsConversionMismatchException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when a conversion and flag are incompatible.

<p> Unless otherwise specified, passing a <tt>null</tt> argument to any
method or constructor in this class will cause a {@link
NullPointerException} to be thrown.

@version 	1.2, 12/19/03
@since 1.5"
      classrelation 154907 // <generalisation>
	relation 154907 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 154907 // <generalisation>
	  b parent class_ref 145435 // IllegalFormatException
      end

      attribute 158619 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  19120414L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 158747 "f"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 158875 "c"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 263451 "FormatFlagsConversionMismatchException"
	public explicit_return_type ""
	nparams 2
	  param in name "f" explicit_type "String"
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class with the specified flag
and conversion.

@param  f
        The flag

@param  c
        The conversion"
      end

      operation 263579 "getFlags"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the incompatible flag.

@return  The flag"
      end

      operation 263707 "getConversion"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the incompatible conversion.

@return  The conversion"
      end

      operation 263835 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 147611 "Formattable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <tt>Formattable</tt> interface must be implemented by any class that
needs to perform custom formatting using the <tt>'s'</tt> conversion
specifier of {@link java.util.Formatter}.  This interface allows basic
control for formatting arbitrary objects.

For example, the following class prints out different representations of a
stock's name depending on the flags and length constraints:

<blockquote><pre>
  import java.nio.CharBuffer;
  import java.util.Formatter;
  import java.util.Formattable;
  import java.util.Locale;
  import static java.util.FormattableFlags.*;

 ...

  public class StockName implements Formattable {
      private String symbol, companyName, frenchCompanyName;
      public StockName(String symbol, String companyName,
                       String frenchCompanyName) {
          ...
      }

      ...

      public void formatTo(Formatter fmt, int f, int width, int precision) {
          StringBuilder sb = new StringBuilder();

          // decide form of name 
          String name = companyName;
          if (fmt.locale().equals(Locale.FRANCE))
              name = frenchCompanyName;
          boolean alternate = (f & ALTERNATE) == ALTERNATE;
          boolean usesymbol = alternate || (precision != -1 && precision < 10);
          String out = (usesymbol ? symbol : name);

          // apply precision
          if (precision == -1 || out.length() < precision) {
              // write it all
              sb.append(out);
          } else {
              sb.append(out.substring(0, precision - 1)).append('*');
          }

          // apply width and justification
          int len = sb.length(); 
          if (len < width)
              for (int i = 0; i < width - len; i++)
                  if ((f & LEFT_JUSTIFY) == LEFT_JUSTIFY)
                      sb.append(' ');
                  else
                      sb.insert(0, ' ');

          fmt.format(sb.toString());
      }

      public String toString() {
          return String.format(\"%s - %s\", symbol, companyName);
      }
  }
</pre></blockquote>

<p> When used in conjunction with the {@link java.util.Formatter}, the above
class produces the following output for various format strings.

<blockquote><pre>
  Formatter fmt = new Formatter();
  StockName sn = new StockName(\"HUGE\", \"Huge Fruit, Inc.\",
                               \"Fruit Titanesque, Inc.\");
  fmt.format(\"%s\", sn);                   //   -> \"Huge Fruit, Inc.\"
  fmt.format(\"%s\", sn.toString());        //   -> \"HUGE - Huge Fruit, Inc.\"
  fmt.format(\"%#s\", sn);                  //   -> \"HUGE\"
  fmt.format(\"%-10.8s\", sn);              //   -> \"HUGE      \"
  fmt.format(\"%.12s\", sn);                //   -> \"Huge Fruit,*\"
  fmt.format(Locale.FRANCE, \"%25s\", sn);  //   -> \"   Fruit Titanesque, Inc.\" 
</pre></blockquote>

<p> Formattables are not necessarily safe for multithreaded access.  Thread
safety is optional and may be enforced by classes that extend and implement
this interface. 

<p> Unless otherwise specified, passing a <tt>null</tt> argument to
any method in this interface will cause a {@link
NullPointerException} to be thrown.

@version 	1.3, 04/21/04
@since  1.5"
      operation 263963 "formatTo"
	public explicit_return_type "void"
	nparams 4
	  param inout name "formatter" type class_ref 147739 // Formatter
	  param in name "flags" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "precision" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats the object using the provided {@link Formatter formatter}.

@param  formatter
        The {@link Formatter formatter}.  Implementing classes may call
        {@link Formatter#out() formatter.out()} or {@link
        Formatter#locale() formatter.locale()} to obtain the {@link
        Appendable} or {@link Locale} used by this
        <tt>formatter</tt> respectively. 

@param  flags
        The flags modify the output format.  The value is interpreted as
        a bitmask.  Any combination of the following flags may be set:
        {@link FormattableFlags#LEFT_JUSTIFY}, {@link
        FormattableFlags#UPPERCASE}, and {@link
        FormattableFlags#ALTERNATE}.  If no flags are set, the default
        formatting of the implementing class will apply.

@param  width
        The minimum number of characters to be written to the output.
        If the length of the converted value is less than the
        <tt>width</tt> then the output will be padded by
        <tt>'&nbsp;&nbsp;'</tt> until the total number of characters
        equals width.  The padding is at the beginning by default.  If
        the {@link FormattableFlags#LEFT_JUSTIFY} flag is set then the
        padding will be at the end.  If <tt>width</tt> is <tt>-1</tt>
        then there is no minimum.

@param  precision
        The maximum number of characters to be written to the output.
        The precision is applied before the width, thus the output will
        be truncated to <tt>precision</tt> characters even if the
        <tt>width</tt> is greater than the <tt>precision</tt>.  If
        <tt>precision</tt> is <tt>-1</tt> then there is no explicit
        limit on the number of characters.

@throws  IllegalFormatException
         If any of the parameters are invalid.  For specification of all
         possible formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification."
      end
    end

    class 147739 "Formatter"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interpreter for printf-style format strings.  This class provides support
for layout justification and alignment, common formats for numeric, string,
and date/time data, and locale-specific output.  Common Java types such as
<tt>byte</tt>, {@link java.math.BigDecimal BigDecimal}, and {@link Calendar}
are supported.  Limited formatting customization for arbitrary user types is
provided through the {@link Formattable} interface.

<p> Formatters are not necessarily safe for multithreaded access.  Thread
safety is optional and is the responsibility of users of methods in this
class.

<p> Formatted printing for the Java language is heavily inspired by C's
<tt>printf</tt>.  Although the format strings are similar to C, some
customizations have been made to accommodate the Java language and exploit
some of its features.  Also, Java formatting is more strict than C's; for
example, if a conversion is incompatible with a flag, an exception will be
thrown.  In C inapplicable flags are silently ignored.  The format strings
are thus intended to be recognizable to C programmers but not necessarily
completely compatible with those in C.

<p> Examples of expected usage:

<blockquote><pre>
  StringBuilder sb = new StringBuilder();
  // Send all output to the Appendable object sb
  Formatter formatter = new Formatter(sb, Locale.US);

  // Explicit argument indices may be used to re-order output.
  formatter.format(\"%4$2s %3$2s %2$2s %1$2s\", \"a\", \"b\", \"c\", \"d\")
  // -> \" d  c  b  a\"

  // Optional locale as the first argument can be used to get
  // locale-specific formatting of numbers.  The precision and width can be
  // given to round and align the value.
  formatter.format(Locale.FRANCE, \"e = %+10.4f\", Math.E);
  // -> \"e =    +2,7183\"

  // The '(' numeric flag may be used to format negative numbers with
  // parentheses rather than a minus sign.  Group separators are
  // automatically inserted.
  formatter.format(\"Amount gained or lost since last statement: $ %(,.2f\",
                   balanceDelta);
  // -> \"Amount gained or lost since last statement: $ (6,217.58)\"
</pre></blockquote>

<p> Convenience methods for common formatting requests exist as illustrated
by the following invocations:

<blockquote><pre>
  // Writes a formatted string to System.out.
  System.out.format(\"Local time: %tT\", Calendar.getInstance());
  // -> \"Local time: 13:34:18\"

  // Writes formatted output to System.err.
  System.err.printf(\"Unable to open file '%1$s': %2$s\",
                    fileName, exception.getMessage());
  // -> \"Unable to open file 'food': No such file or directory\"
</pre></blockquote>

<p> Like C's <tt>sprintf(3)</tt>, Strings may be formatted using the static
method {@link String#format(String,Object...) String.format}:

<blockquote><pre>
  // Format a string containing a date.
  import java.util.Calendar;
  import java.util.GregorianCalendar;
  import static java.util.Calendar.*;

  Calendar c = new GregorianCalendar(1995, MAY, 23);
  String s = String.format(\"Duke's Birthday: %1$tm %1$te,%1$tY\", c);
  // -> s == \"Duke's Birthday: May 23, 1995\"
</pre></blockquote>

<a name=\"org\"><h3> Organization </h3></a>

<p> This specification is divided into two sections.  The first section, <a
href=\"#summary\">Summary</a>, covers the basic formatting concepts.  This
section is intended for users who want to get started quickly and are
familiar with formatted printing in other programming languages.  The second
section, <a href=\"#detail\">Details</a>, covers the specific implementation
details.  It is intended for users who want more precise specification of
formatting behavior.

<a name=\"summary\"><h3> Summary </h3></a>

<p> This section is intended to provide a brief overview of formatting
concepts.  For precise behavioral details, refer to the <a
href=\"#detail\">Details</a> section.

<a name=\"syntax\"><h4> Format String Syntax </h4></a>

<p> Every method which produces formatted output requires a <i>format
string</i> and an <i>argument list</i>.  The format string is a {@link
String} which may contain fixed text and one or more embedded <i>format
specifiers</i>.  Consider the following example:

<blockquote><pre>
  Calendar c = ...;
  String s = String.format(\"Duke's Birthday: %1$tm %1$te,%1$tY\", c);
</pre></blockquote>

This format string is the first argument to the <tt>format</tt> method.  It
contains three format specifiers \"<tt>%1$tm</tt>\", \"<tt>%1$te</tt>\", and
\"<tt>%1$tY</tt>\" which indicate how the arguments should be processed and
where they should be inserted in the text.  The remaining portions of the
format string are fixed text including <tt>\"Dukes Birthday: \"</tt> and any
other spaces or punctuation.

The argument list consists of all arguments passed to the method after the
format string.  In the above example, the argument list is of size one and
consists of the new {@link java.util.Calendar Calendar} object.

<ul>

<li> The format specifiers for general, character, and numeric types have
the following syntax:

<blockquote><pre>
  %[argument_index$][flags][width][.precision]conversion
</pre></blockquote>

<p> The optional <i>argument_index</i> is a decimal integer indicating the
position of the argument in the argument list.  The first argument is
referenced by \"<tt>1$</tt>\", the second by \"<tt>2$</tt>\", etc.

<p> The optional <i>flags</i> is a set of characters that modify the output
format.  The set of valid flags depends on the conversion.

<p> The optional <i>width</i> is a non-negative decimal integer indicating
the minimum number of characters to be written to the output.

<p> The optional <i>precision</i> is a non-negative decimal integer usually
used to restrict the number of characters.  The specific behavior depends on
the conversion.

<p> The required <i>conversion</i> is a character indicating how the
argument should be formatted.  The set of valid conversions for a given
argument depends on the argument's data type.

<li> The format specifiers for types which are used to represents dates and
times have the following syntax:

<blockquote><pre>
  %[argument_index$][flags][width]conversion
</pre></blockquote>

<p> The optional <i>argument_index</i>, <i>flags</i> and <i>width</i> are
defined as above.

<p> The required <i>conversion</i> is a two character sequence.  The first
character is <tt>'t'</tt> or <tt>'T'</tt>.  The second character indicates
the format to be used.  These characters are similar to but not completely
identical to those defined by GNU <tt>date</tt> and POSIX
<tt>strftime(3c)</tt>.

<li> The format specifiers which do not correspond to arguments have the
following syntax:

<blockquote><pre>
  %[flags][width]conversion
</pre></blockquote>

<p> The optional <i>flags</i> and <i>width</i> is defined as above.

<p> The required <i>conversion</i> is a character indicating content to be
inserted in the output.

</ul>

<h4> Conversions </h4>

<p> Conversions are divided into the following categories:

<ol>

<li> <b>General</b> - may be applied to any argument
type

<li> <b>Character</b> - may be applied to basic types which represent
Unicode characters: <tt>char</tt>, {@link Character}, <tt>byte</tt>, {@link
Byte}, <tt>short</tt>, and {@link Short}. This conversion may also be
applied to the types <tt>int</tt> and {@link Integer} when {@link
Character#isValidCodePoint} returns <tt>true</tt>

<li> <b>Numeric</b>

<ol>

<li> <b>Integral</b> - may be applied to Java integral types: <tt>byte</tt>,
{@link Byte}, <tt>short</tt>, {@link Short}, <tt>int</tt> and {@link
Integer}, <tt>long</tt>, {@link Long}, and {@link java.math.BigInteger
BigInteger}

<li><b>Floating Point</b> - may be applied to Java floating-point types:
<tt>float</tt>, {@link Float}, <tt>double</tt>, {@link Double}, and {@link
java.math.BigDecimal BigDecimal}

</ol>

<li> <b>Date/Time</b> - may be applied to Java types which are capable of
encoding a date or time: <tt>long</tt>, {@link Long}, {@link Calendar}, and
{@link Date}.

<li> <b>Percent</b> - produces a literal <tt>'%'</tt>
(<tt>'&#92;u0025'</tt>)

<li> <b>Line Separator</b> - produces the platform-specific line separator

</ol>

<p> The following table summarizes the supported conversions.  Conversions
denoted by an upper-case character (i.e. <tt>'B'</tt>, <tt>'H'</tt>,
<tt>'S'</tt>, <tt>'C'</tt>, <tt>'X'</tt>, <tt>'E'</tt>, <tt>'G'</tt>,
<tt>'A'</tt>, and <tt>'T'</tt>) are the same as those for the corresponding
lower-case conversion characters except that the result is converted to
upper case according to the rules of the prevailing {@link java.util.Locale
Locale}.  The result is equivalent to the following invocation of {@link
String#toUpperCase()}

<pre>
   out.toUpperCase() </pre>

<table cellpadding=5 summary=\"genConv\">

<tr><th valign=\"bottom\"> Conversion
    <th valign=\"bottom\"> Argument Category
    <th valign=\"bottom\"> Description

<tr><td valign=\"top\"> <tt>'b'</tt>, <tt>'B'</tt>
    <td valign=\"top\"> general
    <td> If the argument <i>arg</i> is <tt>null</tt>, then the result is
    \"<tt>false</tt>\".  If <i>arg</i> is a <tt>boolean</tt> or {@link
    Boolean}, then the result is the string returned by {@link
    String#valueOf(boolean) String.valueOf()}.  Otherwise, the result is
    \"true\".

<tr><td valign=\"top\"> <tt>'h'</tt>, <tt>'H'</tt>
    <td valign=\"top\"> general
    <td> If the argument <i>arg</i> is <tt>null</tt>, then the result is
    \"<tt>null</tt>\".  Otherwise, the result is obtained by invoking
    <tt>Integer.toHexString(arg.hashCode())</tt>.

<tr><td valign=\"top\"> <tt>'s'</tt>, <tt>'S'</tt>
    <td valign=\"top\"> general
    <td> If the argument <i>arg</i> is <tt>null</tt>, then the result is
    \"<tt>null</tt>\".  If <i>arg</i> implements {@link Formattable}, then
    {@link Formattable#formatTo arg.formatTo} is invoked. Otherwise, the
    result is obtained by invoking <tt>arg.toString()</tt>.

<tr><td valign=\"top\"><tt>'c'</tt>, <tt>'C'</tt>
    <td valign=\"top\"> character
    <td> The result is a Unicode character

<tr><td valign=\"top\"><tt>'d'</tt>
    <td valign=\"top\"> integral
    <td> The result is formatted as a decimal integer

<tr><td valign=\"top\"><tt>'o'</tt>
    <td valign=\"top\"> integral
    <td> The result is formatted as an octal integer

<tr><td valign=\"top\"><tt>'x'</tt>, <tt>'X'</tt>
    <td valign=\"top\"> integral
    <td> The result is formatted as a hexadecimal integer

<tr><td valign=\"top\"><tt>'e'</tt>, <tt>'E'</tt>
    <td valign=\"top\"> floating point
    <td> The result is formatted as a decimal number in computerized
    scientific notation

<tr><td valign=\"top\"><tt>'f'</tt>
    <td valign=\"top\"> floating point
    <td> The result is formatted as a decimal number

<tr><td valign=\"top\"><tt>'g'</tt>, <tt>'G'</tt>
    <td valign=\"top\"> floating point
    <td> The result is formatted using computerized scientific notation or
    decimal format, depending on the precision and the value after rounding.

<tr><td valign=\"top\"><tt>'a'</tt>, <tt>'A'</tt>
    <td valign=\"top\"> floating point
    <td> The result is formatted as a hexadecimal floating-point number with
    a significand and an exponent

<tr><td valign=\"top\"><tt>'t'</tt>, <tt>'T'</tt>
    <td valign=\"top\"> date/time
    <td> Prefix for date and time conversion characters.  See <a
    href=\"#dt\">Date/Time Conversions</a>.

<tr><td valign=\"top\"><tt>'%'</tt>
    <td valign=\"top\"> percent
    <td> The result is a literal <tt>'%'</tt> (<tt>'&#92;u0025'</tt>)

<tr><td valign=\"top\"><tt>'n'</tt>
    <td valign=\"top\"> line separator
    <td> The result is the platform-specific line separator

</table>

<p> Any characters not explicitly defined as conversions are illegal and are
reserved for future extensions.

<a name=\"dt\"><h4> Date/Time Conversions </h4></a>

<p> The following date and time conversion suffix characters are defined for
the <tt>'t'</tt> and <tt>'T'</tt> conversions.  The types are similar to but
not completely identical to those defined by GNU <tt>date</tt> and POSIX
<tt>strftime(3c)</tt>.  Additional conversion types are provided to access
Java-specific functionality (e.g. <tt>'L'</tt> for milliseconds within the
second).

<p> The following conversion characters are used for formatting times:

<table cellpadding=5 summary=\"time\">

<tr><td valign=\"top\"> <tt>'H'</tt>
    <td> Hour of the day for the 24-hour clock, formatted as two digits with
    a leading zero as necessary i.e. <tt>00 - 23</tt>.

<tr><td valign=\"top\"><tt>'I'</tt>
    <td> Hour for the 12-hour clock, formatted as two digits with a leading
    zero as necessary, i.e.  <tt>01 - 12</tt>.

<tr><td valign=\"top\"><tt>'k'</tt>
    <td> Hour of the day for the 24-hour clock, i.e. <tt>0 - 23</tt>.

<tr><td valign=\"top\"><tt>'l'</tt>
    <td> Hour for the 12-hour clock, i.e. <tt>1 - 12</tt>.

<tr><td valign=\"top\"><tt>'M'</tt>
    <td> Minute within the hour formatted as two digits with a leading zero
    as necessary, i.e.  <tt>00 - 59</tt>.

<tr><td valign=\"top\"><tt>'S'</tt>
    <td> Seconds within the minute, formatted as two digits with a leading
    zero as necessary, i.e. <tt>00 - 60</tt> (\"<tt>60</tt>\" is a special
    value required to support leap seconds).

<tr><td valign=\"top\"><tt>'L'</tt>
    <td> Millisecond within the second formatted as three digits with
    leading zeros as necessary, i.e. <tt>000 - 999</tt>.

<tr><td valign=\"top\"><tt>'N'</tt>
    <td> Nanosecond within the second, formatted as nine digits with leading
    zeros as necessary, i.e. <tt>000000000 - 999999999</tt>.

<tr><td valign=\"top\"><tt>'p'</tt>
    <td> Locale-specific {@linkplain
    java.text.DateFormatSymbols#getAmPmStrings morning or afternoon} marker
    in lower case, e.g.\"<tt>am</tt>\" or \"<tt>pm</tt>\". Use of the conversion
    prefix <tt>'T'</tt> forces this output to upper case.

<tr><td valign=\"top\"><tt>'z'</tt>
    <td> <a href=\"http://www.ietf.org/rfc/rfc0822.txt\">RFC&nbsp;822</a>
    style numeric time zone offset from GMT, e.g. <tt>-0800</tt>.

<tr><td valign=\"top\"><tt>'Z'</tt>
    <td> A string representing the abbreviation for the time zone.  The
    Formatter's locale will supersede the locale of the argument (if any).

<tr><td valign=\"top\"><tt>'s'</tt>
    <td> Seconds since the beginning of the epoch starting at 1 January 1970
    <tt>00:00:00</tt> UTC, i.e. <tt>Long.MIN_VALUE/1000</tt> to
    <tt>Long.MAX_VALUE/1000</tt>.

<tr><td valign=\"top\"><tt>'Q'</tt>
    <td> Milliseconds since the beginning of the epoch starting at 1 January
    1970 <tt>00:00:00</tt> UTC, i.e. <tt>Long.MIN_VALUE</tt> to
    <tt>Long.MAX_VALUE</tt>.

</table>

<p> The following conversion characters are used for formatting dates:

<table cellpadding=5 summary=\"date\">

<tr><td valign=\"top\"><tt>'B'</tt>
    <td> Locale-specific {@linkplain java.text.DateFormatSymbols#getMonths
    full month name}, e.g. <tt>\"January\"</tt>, <tt>\"February\"</tt>.

<tr><td valign=\"top\"><tt>'b'</tt>
    <td> Locale-specific {@linkplain
    java.text.DateFormatSymbols#getShortMonths abbreviated month name},
    e.g. <tt>\"Jan\"</tt>, <tt>\"Feb\"</tt>.

<tr><td valign=\"top\"><tt>'h'</tt>
    <td> Same as <tt>'b'</tt>.

<tr><td valign=\"top\"><tt>'A'</tt>
    <td> Locale-specific full name of the {@linkplain
    java.text.DateFormatSymbols#getWeekdays day of the week},
    e.g. <tt>\"Sunday\"</tt>, <tt>\"Monday\"</tt>

<tr><td valign=\"top\"><tt>'a'</tt>
    <td> Locale-specific short name of the {@linkplain
    java.text.DateFormatSymbols#getShortWeekdays day of the week},
    e.g. <tt>\"Sun\"</tt>, <tt>\"Mon\"</tt>

<tr><td valign=\"top\"><tt>'C'</tt>
    <td> Four-digit year divided by <tt>100</tt>, formatted as two digits
    with leading zero as necessary, i.e. <tt>00 - 99</tt>

<tr><td valign=\"top\"><tt>'Y'</tt>
    <td> Year, formatted as at least four digits with leading zeros as
    necessary, e.g. <tt>0092</tt> equals <tt>92</tt> CE for the Gregorian
    calendar.

<tr><td valign=\"top\"><tt>'y'</tt>
    <td> Last two digits of the year, formatted with leading zeros as
    necessary, i.e. <tt>00 - 99</tt>.

<tr><td valign=\"top\"><tt>'j'</tt>
    <td> Day of year, formatted as three digits with leading zeros as
    necessary, e.g. <tt>001 - 366</tt> for the Gregorian calendar.

<tr><td valign=\"top\"><tt>'m'</tt>
    <td> Month, formatted as two digits with leading zeros as necessary,
    i.e. <tt>01 - 13</tt>.

<tr><td valign=\"top\"><tt>'d'</tt>
    <td> Day of month, formatted as two digits with leading zeros as
    necessary, i.e. <tt>01 - 31</tt>

<tr><td valign=\"top\"><tt>'e'</tt>
    <td> Day of month, formatted as two digits, i.e. <tt>1 - 31</tt>.

</table>

<p> The following conversion characters are used for formatting common
date/time compositions.

<table cellpadding=5 summary=\"composites\">

<tr><td valign=\"top\"><tt>'R'</tt>
    <td> Time formatted for the 24-hour clock as <tt>\"%tH:%tM\"</tt>

<tr><td valign=\"top\"><tt>'T'</tt>
    <td> Time formatted for the 24-hour clock as <tt>\"%tH:%tM:%tS\"</tt>.

<tr><td valign=\"top\"><tt>'r'</tt>
    <td> Time formatted for the 12-hour clock as <tt>\"%tI:%tM:%tS %Tp\"</tt>.
    The location of the morning or afternoon marker (<tt>'%Tp'</tt>) may be
    locale-dependent.

<tr><td valign=\"top\"><tt>'D'</tt>
    <td> Date formatted as <tt>\"%tm/%td/%ty\"</tt>.

<tr><td valign=\"top\"><tt>'F'</tt>
    <td> <a href=\"http://www.w3.org/TR/NOTE-datetime\">ISO&nbsp;8601</a>
    complete date formatted as <tt>\"%tY-%tm-%td\"</tt>.

<tr><td valign=\"top\"><tt>'c'</tt>
    <td> Date and time formatted as <tt>\"%ta %tb %td %tT %tZ %tY\"</tt>,
    e.g. <tt>\"Sun Jul 20 16:17:00 EDT 1969\"</tt>.

</table>

<p> Any characters not explicitly defined as date/time conversion suffixes
are illegal and are reserved for future extensions.

<h4> Flags </h4>

<p> The following table summarizes the supported flags.  <i>y</i> means the
flag is supported for the indicated argument types.

<table cellpadding=5 summary=\"genConv\">

<tr><th valign=\"bottom\"> Flag <th valign=\"bottom\"> General
    <th valign=\"bottom\"> Character <th valign=\"bottom\"> Integral
    <th valign=\"bottom\"> Floating Point
    <th valign=\"bottom\"> Date/Time
    <th valign=\"bottom\"> Description

<tr><td> '-' <td align=\"center\" valign=\"top\"> y
    <td align=\"center\" valign=\"top\"> y
    <td align=\"center\" valign=\"top\"> y
    <td align=\"center\" valign=\"top\"> y
    <td align=\"center\" valign=\"top\"> y
    <td> The result will be left-justified.

<tr><td> '#' <td align=\"center\" valign=\"top\"> y<sup>1</sup>
    <td align=\"center\" valign=\"top\"> -
    <td align=\"center\" valign=\"top\"> y<sup>3</sup>
    <td align=\"center\" valign=\"top\"> y
    <td align=\"center\" valign=\"top\"> -
    <td> The result should use a conversion-dependent alternate form

<tr><td> '+' <td align=\"center\" valign=\"top\"> -
    <td align=\"center\" valign=\"top\"> -
    <td align=\"center\" valign=\"top\"> y<sup>4</sup>
    <td align=\"center\" valign=\"top\"> y
    <td align=\"center\" valign=\"top\"> -
    <td> The result will always include a sign

<tr><td> '&nbsp;&nbsp;' <td align=\"center\" valign=\"top\"> -
    <td align=\"center\" valign=\"top\"> -
    <td align=\"center\" valign=\"top\"> y<sup>4</sup>
    <td align=\"center\" valign=\"top\"> y
    <td align=\"center\" valign=\"top\"> -
    <td> The result will include a leading space for positive values

<tr><td> '0' <td align=\"center\" valign=\"top\"> -
    <td align=\"center\" valign=\"top\"> -
    <td align=\"center\" valign=\"top\"> y
    <td align=\"center\" valign=\"top\"> y
    <td align=\"center\" valign=\"top\"> -
    <td> The result will be zero-padded

<tr><td> ',' <td align=\"center\" valign=\"top\"> -
    <td align=\"center\" valign=\"top\"> -
    <td align=\"center\" valign=\"top\"> y<sup>2</sup>
    <td align=\"center\" valign=\"top\"> y<sup>5</sup>
    <td align=\"center\" valign=\"top\"> -
    <td> The result will include locale-specific {@linkplain
    java.text.DecimalFormatSymbols#getGroupingSeparator grouping separators}

<tr><td> '(' <td align=\"center\" valign=\"top\"> -
    <td align=\"center\" valign=\"top\"> -
    <td align=\"center\" valign=\"top\"> y<sup>4</sup>
    <td align=\"center\" valign=\"top\"> y<sup>5</sup>
    <td align=\"center\"> -
    <td> The result will enclose negative numbers in parentheses

</table>

<p> <sup>1</sup> Depends on the definition of {@link Formattable}.

<p> <sup>2</sup> For <tt>'d'</tt> conversion only.

<p> <sup>3</sup> For <tt>'o'</tt>, <tt>'x'</tt>, and <tt>'X'</tt>
conversions only.

<p> <sup>4</sup> For <tt>'d'</tt>, <tt>'o'</tt>, <tt>'x'</tt>, and
<tt>'X'</tt> conversions applied to {@link java.math.BigInteger BigInteger}
or <tt>'d'</tt> applied to <tt>byte</tt>, {@link Byte}, <tt>short</tt>, {@link
Short}, <tt>int</tt> and {@link Integer}, <tt>long</tt>, and {@link Long}.

<p> <sup>5</sup> For <tt>'e'</tt>, <tt>'E'</tt>, <tt>'f'</tt>,
<tt>'g'</tt>, and <tt>'G'</tt> conversions only.

<p> Any characters not explicitly defined as flags are illegal and are
reserved for future extensions.

<h4> Width </h4>

<p> The width is the minimum number of characters to be written to the
output.  For the line separator conversion, width is not applicable; if it
is provided, an exception will be thrown.

<h4> Precision </h4>

<p> For general argument types, the precision is the maximum number of
characters to be written to the output.

<p> For the floating-point conversions <tt>'e'</tt>, <tt>'E'</tt>, and
<tt>'f'</tt> the precision is the number of digits after the decimal
separator.  If the conversion is <tt>'g'</tt> or <tt>'G'</tt>, then the
precision is the total number of digits in the resulting magnitude after
rounding.  If the conversion is <tt>'a'</tt> or <tt>'A'</tt>, then the
precision must not be specified.

<p> For character, integral, and date/time argument types and the percent
and line separator conversions, the precision is not applicable; if a
precision is provided, an exception will be thrown.

<h4> Argument Index </h4>

<p> The argument index is a decimal integer indicating the position of the
argument in the argument list.  The first argument is referenced by
\"<tt>1$</tt>\", the second by \"<tt>2$</tt>\", etc.

<p> Another way to reference arguments by position is to use the
<tt>'<'</tt> (<tt>'&#92;u003c'</tt>) flag, which causes the argument for the
previous format specifier to be re-used.  For example, the following two
statements would produce identical strings:

<blockquote><pre>
  Calendar c = ...;
  String s1 = String.format(\"Duke's Birthday: %1$tm %1$te,%1$tY\", c);

  String s2 = String.format(\"Duke's Birthday: %1$tm %<$te,%<$tY\", c);
</pre></blockquote>

<hr>
<a name=\"detail\"><h3> Details </h3></a>

<p> This section is intended to provide behavioral details for formatting,
including conditions and exceptions, supported data types, localization, and
interactions between flags, conversions, and data types.  For an overview of
formatting concepts, refer to the <a href=\"#summary\">Summary</a>

<p> Any characters not explicitly defined as conversions, date/time
conversion suffixes, or flags are illegal and are reserved for
future extensions.  Use of such a character in a format string will
cause an {@link UnknownFormatConversionException} or {@link
UnknownFormatFlagsException} to be thrown.

<p> If the format specifier contains a width or precision with an invalid
value or which is otherwise unsupported, then a {@link
IllegalFormatWidthException} or {@link IllegalFormatPrecisionException}
respectively will be thrown.

<p> If a format specifier contains a conversion character that is not
applicable to the corresponding argument, then an {@link
IllegalFormatConversionException} will be thrown.

<p> All specified exceptions may be thrown by any of the <tt>format</tt>
methods of <tt>Formatter</tt> as well as by any <tt>format</tt> convenience
methods such as {@link String#format(String,Object...) String.format} and
{@link java.io.PrintStream#printf(String,Object...) PrintStream.printf}.

<p> Conversions denoted by an upper-case character (i.e. <tt>'B'</tt>,
<tt>'H'</tt>, <tt>'S'</tt>, <tt>'C'</tt>, <tt>'X'</tt>, <tt>'E'</tt>,
<tt>'G'</tt>, <tt>'A'</tt>, and <tt>'T'</tt>) are the same as those for the
corresponding lower-case conversion characters except that the result is
converted to upper case according to the rules of the prevailing {@link
java.util.Locale Locale}.  The result is equivalent to the following
invocation of {@link String#toUpperCase()}

<pre>
   out.toUpperCase() </pre>

<a name=\"dgen\"><h4> General </h4></a>

<p> The following general conversions may be applied to any argument type:

<table cellpadding=5 summary=\"dgConv\">

<tr><td valign=\"top\"> <tt>'b'</tt>
    <td valign=\"top\"> <tt>'&#92;u0062'</tt>
    <td> Produces either \"<tt>true</tt>\" or \"<tt>false</tt>\" as returned by
    {@link Boolean#toString(boolean)}.

    <p> If the argument is <tt>null</tt>, then the result is
    \"<tt>false</tt>\".  If the argument is a <tt>boolean</tt> or {@link
    Boolean}, then the result is the string returned by {@link
    String#valueOf(boolean) String.valueOf()}.  Otherwise, the result is
    \"<tt>true</tt>\".

    <p> If the <tt>'#'</tt> flag is given, then a {@link
    FormatFlagsConversionMismatchException} will be thrown.

<tr><td valign=\"top\"> <tt>'B'</tt>
    <td valign=\"top\"> <tt>'&#92;u0042'</tt>
    <td> The upper-case variant of <tt>'b'</tt>.

<tr><td valign=\"top\"> <tt>'h'</tt>
    <td valign=\"top\"> <tt>'&#92;u0068'</tt>
    <td> Produces a string representing the hash code value of the object.

    <p> If the argument, <i>arg</i> is <tt>null</tt>, then the
    result is \"<tt>null</tt>\".  Otherwise, the result is obtained
    by invoking <tt>Integer.toHexString(arg.hashCode())</tt>.

    <p> If the <tt>'#'</tt> flag is given, then a {@link
    FormatFlagsConversionMismatchException} will be thrown.

<tr><td valign=\"top\"> <tt>'H'</tt>
    <td valign=\"top\"> <tt>'&#92;u0048'</tt>
    <td> The upper-case variant of <tt>'h'</tt>.

<tr><td valign=\"top\"> <tt>'s'</tt>
    <td valign=\"top\"> <tt>'&#92;u0073'</tt>
    <td> Produces a string.

    <p> If the argument is <tt>null</tt>, then the result is
    \"<tt>null</tt>\".  If the argument implements {@link Formattable}, then
    its {@link Formattable#formatTo formatTo} method is invoked.
    Otherwise, the result is obtained by invoking the argument's
    <tt>toString()</tt> method.

    <p> If the <tt>'#'</tt> flag is given and the argument is not a {@link
    Formattable} , then a {@link FormatFlagsConversionMismatchException}
    will be thrown.

<tr><td valign=\"top\"> <tt>'S'</tt>
    <td valign=\"top\"> <tt>'&#92;u0053'</tt>
    <td> The upper-case variant of <tt>'s'</tt>.

</table>

<p> The following flags apply to general conversions:

<a name=\"dFlags\"><table cellpadding=5 summary=\"dFlags\"></a>

<tr><td valign=\"top\"> <tt>'-'</tt>
    <td valign=\"top\"> <tt>'&#92;u002d'</tt>
    <td> Left justifies the output.  Spaces (<tt>'&#92;u0020'</tt>) will be
    added at the end of the converted value as required to fill the minimum
    width of the field.  If the width is not provided, then a {@link
    MissingFormatWidthException} will be thrown.  If this flag is not given
    then the output will be right-justified.

<tr><td valign=\"top\"> <tt>'#'</tt>
    <td valign=\"top\"> <tt>'&#92;u0023'</tt>
    <td> Requires the output use an alternate form.  The definition of the
    form is specified by the conversion.

</table>

<a name=\"genWidth\"></a>

<p> The width is the minimum number of characters to be written to the
output.  If the length of the converted value is less than the width then
the output will be padded by <tt>'&nbsp;&nbsp;'</tt> (<tt>&#92;u0020'</tt>)
until the total number of characters equals the width.  The padding is on
the left by default.  If the <tt>'-'</tt> flag is given, then the padding
will be on the right.  If the width is not specified then there is no
minimum.

<p> The precision is the maximum number of characters to be written to the
output.  The precision is applied before the width, thus the output will be
truncated to <tt>precision</tt> characters even if the width is greater than
the precision.  If the precision is not specified then there is no explicit
limit on the number of characters.

<a name=\"dchar\"><h4> Character </h4></a>

This conversion may be applied to <tt>char</tt>, {@link Character},
<tt>byte</tt>, {@link Byte}, <tt>short</tt>, and {@link Short}. This
conversion may also be applied to the types <tt>int</tt> and {@link Integer}
when {@link Character#isValidCodePoint} returns <tt>true</tt>.  If it
returns <tt>false</tt> then an {@link IllegalFormatCodePointException} will
be thrown.

<table cellpadding=5 summary=\"charConv\">

<tr><td valign=\"top\"> <tt>'c'</tt>
    <td valign=\"top\"> <tt>'&#92;u0063'</tt>
    <td> Formats the argument as a Unicode character as described in <a
    href=\"../lang/Character.html#unicode\">Unicode Character
    Representation</a>.  This may be more than one 16-bit <tt>char</tt> in
    the case where the argument represents a supplementary character.

    <p> If the <tt>'#'</tt> flag is given, then a {@link
    FormatFlagsConversionMismatchException} will be thrown.

<tr><td valign=\"top\"> <tt>'C'</tt>
    <td valign=\"top\"> <tt>'&#92;u0043'</tt>
    <td> The upper-case variant of <tt>'c'</tt>.

</table>

<p> The <tt>'-'</tt> flag defined for <a href=\"#dFlags\">General
conversions</a> applies.  If the <tt>'#'</tt> flag is given, then a {@link
FormatFlagsConversionMismatchException} will be thrown.

<p> The width is defined as for <a href=\"#genWidth\">General conversions</a>.

<p> The precision is not applicable.  If the precision is specified then an
{@link IllegalFormatPrecisionException} will be thrown.

<a name=\"dnum\"><h4> Numeric </h4></a>

<p> Numeric conversions are divided into the following categories:

<ol>

<li> <a href=\"#dnint\"><b>Byte, Short, Integer, and Long</b></a>

<li> <a href=\"#dnbint\"><b>BigInteger</b></a>

<li> <a href=\"#dndec\"><b>Float and Double</b></a>

<li> <a href=\"#dndec\"><b>BigDecimal</b></a>

</ol>

<p> Numeric types will be formatted according to the following algorithm:

<p><b><a name=\"l10n algorithm\"> Number Localization Algorithm<a></b>

<p> After digits are obtained for the integer part, fractional part, and
exponent (as appropriate for the data type), the following transformation
is applied:

<ol>

<li> Each digit character <i>d</i> in the string is replaced by a
locale-specific digit computed relative to the current locale's
{@linkplain java.text.DecimalFormatSymbols#getZeroDigit() zero digit}
<i>z</i>; that is <i>d&nbsp;-&nbsp;</i> <tt>'0'</tt>
<i>&nbsp;+&nbsp;z</i>.

<li> If a decimal separator is present, a locale-specific {@linkplain
java.text.DecimalFormatSymbols#getDecimalSeparator decimal separator} is
substituted.

<li> <a name=\"l10n group\"></a> If the <tt>','</tt> (<tt>'&#92;u002c'</tt>)
flag is given, then the locale-specific {@linkplain
java.text.DecimalFormatSymbols#getGroupingSeparator grouping separator} is
inserted by scanning the integer part of the string from least significant
to most significant digits and inserting a separator at intervals defined by
the locale's {@linkplain java.text.DecimalFormat#getGroupingSize() grouping
size}.

<li> If the <tt>'0'</tt> flag is given, then the locale-specific {@linkplain
java.text.DecimalFormatSymbols#getZeroDigit() zero digits} are inserted
after the sign character, if any, and before the first non-zero digit, until
the length of the string is equal to the requested field width.

<li> If the value is negative and the <tt>'('</tt> flag is given, then a
<tt>'('</tt> (<tt>'&#92;u0028'</tt>) is prepended and a <tt>')'</tt>
(<tt>'&#92;u0029'</tt>) is appended.

<li> If the value is negative (or floating-point negative zero) and
<tt>'('</tt> flag is not given, then a <tt>'-'</tt> (<tt>'&#92;u002d'</tt>)
is prepended.

<li> If the <tt>'+'</tt> flag is given and the value is positive or zero (or
floating-point positive zero), then a <tt>'+'</tt> (<tt>'&#92;u002b'</tt>)
will be prepended.

</ol>

<p> If the value is NaN or positive infinity the literal strings \"NaN\" or
\"Infinity\" respectively, will be output.  If the value is negative infinity,
then the output will be \"(Infinity)\" if the <tt>'('</tt> flag is given
otherwise the output will be \"-Infinity\".  These values are not localized.

<p><a name=\"dnint\"><b> Byte, Short, Integer, and Long </b></a>

<p> The following conversions may be applied to <tt>byte</tt>, {@link Byte},
<tt>short</tt>, {@link Short}, <tt>int</tt> and {@link Integer},
<tt>long</tt>, and {@link Long}.

<table cellpadding=5 summary=\"IntConv\">

<tr><td valign=\"top\"> <tt>'d'</tt>
    <td valign=\"top\"> <tt>'&#92;u0054'</tt>
    <td> Formats the argument as a decimal integer. The <a
    href=\"#l10n algorithm\">localization algorithm</a> is applied.

    <p> If the <tt>'0'</tt> flag is given and the value is negative, then
    the zero padding will occur after the sign.

    <p> If the <tt>'#'</tt> flag is given then a {@link
    FormatFlagsConversionMismatchException} will be thrown.

<tr><td valign=\"top\"> <tt>'o'</tt>
    <td valign=\"top\"> <tt>'&#92;u006f'</tt>
    <td> Formats the argument as an integer in base eight.  No localization
    is applied.

    <p> If <i>x</i> is negative then the result will be an unsigned value
    generated by adding 2<sup>n</sup> to the value where <tt>n</tt> is the
    number of bits in the type as returned by the static <tt>SIZE</tt> field
    in the {@linkplain Byte#SIZE Byte}, {@linkplain Short#SIZE Short},
    {@linkplain Integer#SIZE Integer}, or {@linkplain Long#SIZE Long}
    classes as appropriate.

    <p> If the <tt>'#'</tt> flag is given then the output will always begin
    with the radix indicator <tt>'0'</tt>.

    <p> If the <tt>'0'</tt> flag is given then the output will be padded
    with leading zeros to the field width following any indication of sign.

    <p> If <tt>'('</tt>, <tt>'+'</tt>, '&nbsp&nbsp;', or <tt>','</tt> flags
    are given then a {@link FormatFlagsConversionMismatchException} will be
    thrown.

<tr><td valign=\"top\"> <tt>'x'</tt>
    <td valign=\"top\"> <tt>'&#92;u0078'</tt>
    <td> Formats the argument as an integer in base sixteen. No
    localization is applied.

    <p> If <i>x</i> is negative then the result will be an unsigned value
    generated by adding 2<sup>n</sup> to the value where <tt>n</tt> is the
    number of bits in the type as returned by the static <tt>SIZE</tt> field
    in the {@linkplain Byte#SIZE Byte}, {@linkplain Short#SIZE Short},
    {@linkplain Integer#SIZE Integer}, or {@linkplain Long#SIZE Long}
    classes as appropriate.

    <p> If the <tt>'#'</tt> flag is given then the output will always begin
    with the radix indicator <tt>\"0x\"</tt>.

    <p> If the <tt>'0'</tt> flag is given then the output will be padded to
    the field width with leading zeros after the radix indicator or sign (if
    present).

    <p> If <tt>'('</tt>, <tt>'&nbsp;&nbsp;'</tt>, <tt>'+'</tt>, or
    <tt>','</tt> flags are given then a {@link
    FormatFlagsConversionMismatchException} will be thrown.

<tr><td valign=\"top\"> <tt>'X'</tt>
    <td valign=\"top\"> <tt>'&#92;u0058'</tt>
    <td> The upper-case variant of <tt>'x'</tt>.  The entire string
    representing the number will be converted to {@linkplain
    String#toUpperCase upper case} including the <tt>'x'</tt> (if any) and
    all hexadecimal digits <tt>'a'</tt> - <tt>'f'</tt>
    (<tt>'&#92;u0061'</tt> -  <tt>'&#92;u0066'</tt>).

</table>

<p> If the conversion is <tt>'o'</tt>, <tt>'x'</tt>, or <tt>'X'</tt> and
both the <tt>'#'</tt> and the <tt>'0'</tt> flags are given, then result will
contain the radix indicator (<tt>'0'</tt> for octal and <tt>\"0x\"</tt> or
<tt>\"0X\"</tt> for hexadecimal), some number of zeros (based on the width),
and the value.

<p> If the <tt>'-'</tt> flag is not given, then the space padding will occur
before the sign.

<p> The following flags apply to numeric integral conversions:

<table cellpadding=5 summary=\"intFlags\"><a name=\"intFlags\"></a>

<tr><td valign=\"top\"> <tt>'+'</tt>
    <td valign=\"top\"> <tt>'&#92;u002b'</tt>
    <td> Requires the output to include a positive sign for all positive
    numbers.  If this flag is not given then only negative values will
    include a sign.

    <p> If both the <tt>'+'</tt> and <tt>'&nbsp;&nbsp;'</tt> flags are given
    then an {@link IllegalFormatFlagsException} will be thrown.

<tr><td valign=\"top\"> <tt>'&nbsp;&nbsp;'</tt>
    <td valign=\"top\"> <tt>'&#92;u0020'</tt>
    <td> Requires the output to include a single extra space
    (<tt>'&#92;u0020'</tt>) for non-negative values.

    <p> If both the <tt>'+'</tt> and <tt>'&nbsp;&nbsp;'</tt> flags are given
    then an {@link IllegalFormatFlagsException} will be thrown.

<tr><td valign=\"top\"> <tt>'0'</tt>
    <td valign=\"top\"> <tt>'&#92;u0030'</tt>
    <td> Requires the output to be padded with leading {@linkplain
    java.text.DecimalFormatSymbols#getZeroDigit zeros} to the minimum field
    width following any sign or radix indicator except when converting NaN
    or infinity.  If the width is not provided, then a {@link
    MissingFormatWidthException} will be thrown.

    <p> If both the <tt>'-'</tt> and <tt>'0'</tt> flags are given then an
    {@link IllegalFormatFlagsException} will be thrown.

<tr><td valign=\"top\"> <tt>','</tt>
    <td valign=\"top\"> <tt>'&#92;u002c'</tt>
    <td> Requires the output to include the locale-specific {@linkplain
    java.text.DecimalFormatSymbols#getGroupingSeparator group separators} as
    described in the <a href=\"#l10n group\">\"group\" section</a> of the
    localization algorithm.

<tr><td valign=\"top\"> <tt>'('</tt>
    <td valign=\"top\"> <tt>'&#92;u0028'</tt>
    <td> Requires the output to prepend a <tt>'('</tt>
    (<tt>'&#92;u0028'</tt>) and append a <tt>')'</tt>
    (<tt>'&#92;u0029'</tt>) to negative values.

</table>

<a name=\"intdFlags\"></a><p> If no flags are given the default formatting is
as follows:

<ul>

<li> The output is right-justified within the <tt>width</tt>

<li> Negative numbers begin with a <tt>'-'</tt> (<tt>'&#92;u002d'</tt>)

<li> Positive numbers and zero do not include a sign or extra leading
space

<li> No grouping separators are included

</ul>

<a name=\"intWidth\"></a><p> The width is the minimum number of characters to
be written to the output.  This includes any signs, digits, grouping
separators, radix indicator, and parentheses.  If the length of the
converted value is less than the width then the output will be padded by
spaces (<tt>'&#92;u0020'</tt>) until the total number of characters equals
width.  The padding is on the left by default.  If <tt>'-'</tt> flag is
given then the padding will be on the right.  If width is not specified then
there is no minimum.

<p> The precision is not applicable.  If precision is specified then an
{@link IllegalFormatPrecisionException} will be thrown.

<p><a name=\"dnbint\"><b> BigInteger </b></a>

<p> The following conversions may be applied to {@link
java.math.BigInteger}.

<table cellpadding=5 summary=\"BIntConv\">

<tr><td valign=\"top\"> <tt>'d'</tt>
    <td valign=\"top\"> <tt>'&#92;u0054'</tt>
    <td> Requires the output to be formatted as a decimal integer. The <a
    href=\"#l10n algorithm\">localization algorithm</a> is applied.

    <p> If the <tt>'#'</tt> flag is given {@link
    FormatFlagsConversionMismatchException} will be thrown.

<tr><td valign=\"top\"> <tt>'o'</tt>
    <td valign=\"top\"> <tt>'&#92;u006f'</tt>
    <td> Requires the output to be formatted as an integer in base eight.
    No localization is applied.

    <p> If <i>x</i> is negative then the result will be a signed value
    beginning with <tt>'-'</tt> (<tt>'&#92;u002d'</tt>).  Signed output is
    allowed for this type because unlike the primitive types it is not
    possible to create an unsigned equivalent without assuming an explicit
    data-type size.

    <p> If <i>x</i> is positive or zero and the <tt>'+'</tt> flag is given
    then the result will begin with <tt>'+'</tt> (<tt>'&#92;u002b'</tt>).

    <p> If the <tt>'#'</tt> flag is given then the output will always begin
    with <tt>'0'</tt> prefix.

    <p> If the <tt>'0'</tt> flag is given then the output will be padded
    with leading zeros to the field width following any indication of sign.

    <p> If the <tt>','</tt> flag is given then a {@link
    FormatFlagsConversionMismatchException} will be thrown.

<tr><td valign=\"top\"> <tt>'x'</tt>
    <td valign=\"top\"> <tt>'&#92;u0078'</tt>
    <td> Requires the output to be formatted as an integer in base
    sixteen.  No localization is applied.

    <p> If <i>x</i> is negative then the result will be a signed value
    beginning with <tt>'-'</tt> (<tt>'&#92;u002d'</tt>).  Signed output is
    allowed for this type because unlike the primitive types it is not
    possible to create an unsigned equivalent without assuming an explicit
    data-type size.

    <p> If <i>x</i> is positive or zero and the <tt>'+'</tt> flag is given
    then the result will begin with <tt>'+'</tt> (<tt>'&#92;u002b'</tt>).

    <p> If the <tt>'#'</tt> flag is given then the output will always begin
    with the radix indicator <tt>\"0x\"</tt>.

    <p> If the <tt>'0'</tt> flag is given then the output will be padded to
    the field width with leading zeros after the radix indicator or sign (if
    present).

    <p> If the <tt>','</tt> flag is given then a {@link
    FormatFlagsConversionMismatchException} will be thrown.

<tr><td valign=\"top\"> <tt>'X'</tt>
    <td valign=\"top\"> <tt>'&#92;u0058'</tt>
    <td> The upper-case variant of <tt>'x'</tt>.  The entire string
    representing the number will be converted to {@linkplain
    String#toUpperCase upper case} including the <tt>'x'</tt> (if any) and
    all hexadecimal digits <tt>'a'</tt> - <tt>'f'</tt>
    (<tt>'&#92;u0061'</tt> - <tt>'&#92;u0066'</tt>).

</table>

<p> If the conversion is <tt>'o'</tt>, <tt>'x'</tt>, or <tt>'X'</tt> and
both the <tt>'#'</tt> and the <tt>'0'</tt> flags are given, then result will
contain the base indicator (<tt>'0'</tt> for octal and <tt>\"0x\"</tt> or
<tt>\"0X\"</tt> for hexadecimal), some number of zeros (based on the width),
and the value.

<p> If the <tt>'0'</tt> flag is given and the value is negative, then the
zero padding will occur after the sign.

<p> If the <tt>'-'</tt> flag is not given, then the space padding will occur
before the sign.

<p> All <a href=\"#intFlags\">flags</a> defined for Byte, Short, Integer, and
Long apply.  The <a href=\"#intdFlags\">default behavior</a> when no flags are
given is the same as for Byte, Short, Integer, and Long.

<p> The specification of <a href=\"#intWidth\">width</a> is the same as
defined for Byte, Short, Integer, and Long.

<p> The precision is not applicable.  If precision is specified then an
{@link IllegalFormatPrecisionException} will be thrown.

<p><a name=\"dndec\"><b> Float and Double</b><a>

<p> The following conversions may be applied to <tt>float</tt>, {@link
Float}, <tt>double</tt> and {@link Double}.

<table cellpadding=5 summary=\"floatConv\">

<tr><td valign=\"top\"> <tt>'e'</tt>
    <td valign=\"top\"> <tt>'&#92;u0065'</tt>
    <td> Requires the output to be formatted using <a
    name=\"scientific\">computerized scientific notation</a>.  The <a
    href=\"#l10n algorithm\">localization algorithm</a> is applied.

    <p> The formatting of the magnitude <i>m</i> depends upon its value.

    <p> If <i>m</i> is NaN or infinite, the literal strings \"NaN\" or
    \"Infinity\", respectively, will be output.  These values are not
    localized.

    <p> If <i>m</i> is positive-zero or negative-zero, then the exponent
    will be <tt>\"+00\"</tt>.

    <p> Otherwise, the result is a string that represents the sign and
    magnitude (absolute value) of the argument.  The formatting of the sign
    is described in the <a href=\"#l10n algorithm\">localization
    algorithm</a>. The formatting of the magnitude <i>m</i> depends upon its
    value.

    <p> Let <i>n</i> be the unique integer such that 10<sup><i>n</i></sup>
    &lt;= <i>m</i> &lt; 10<sup><i>n</i>+1</sup>; then let <i>a</i> be the
    mathematically exact quotient of <i>m</i> and 10<sup><i>n</i></sup> so
    that 1 &lt;= <i>a</i> &lt; 10. The magnitude is then represented as the
    integer part of <i>a</i>, as a single decimal digit, followed by the
    decimal separator followed by decimal digits representing the fractional
    part of <i>a</i>, followed by the exponent symbol <tt>'e'</tt>
    (<tt>'&#92;u0065'</tt>), followed by the sign of the exponent, followed
    by a representation of <i>n</i> as a decimal integer, as produced by the
    method {@link Long#toString(long, int)}, and zero-padded to include at
    least two digits.

    <p> The number of digits in the result for the fractional part of
    <i>m</i> or <i>a</i> is equal to the precision.  If the precision is not
    specified then the default value is <tt>6</tt>. If the precision is less
    than the number of digits which would appear after the decimal point in
    the string returned by {@link Float#toString(float)} or {@link
    Double#toString(double)} respectively, then the value will be rounded
    using the {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up
    algorithm}.  Otherwise, zeros may be appended to reach the precision.
    For a canonical representation of the value, use {@link
    Float#toString(float)} or {@link Double#toString(double)} as
    appropriate.

    <p>If the <tt>','</tt> flag is given, then an {@link
    FormatFlagsConversionMismatchException} will be thrown.

<tr><td valign=\"top\"> <tt>'E'</tt>
    <td valign=\"top\"> <tt>'&#92;u0045'</tt>
    <td> The upper-case variant of <tt>'e'</tt>.  The exponent symbol
    will be <tt>'E'</tt> (<tt>'&#92;u0045'</tt>).

<tr><td valign=\"top\"> <tt>'g'</tt>
    <td valign=\"top\"> <tt>'&#92;u0067'</tt>
    <td> Requires the output to be formatted in general scientific notation
    as described below. The <a href=\"#l10n algorithm\">localization
    algorithm</a> is applied.

    <p> After rounding for the precision, the formatting of the resulting
    magnitude <i>m</i> depends on its value.

    <p> If <i>m</i> is greater than or equal to 10<sup>-4</sup> but less
    than 10<sup>precision</sup> then it is represented in <i><a
    href=\"#decimal\">decimal format</a></i>.

    <p> If <i>m</i> is less than 10<sup>-4<sup> or greater than or equal to
    10<sup>precision</sup>, then it is represented in <i><a
    href=\"#scientific\">computerized scientific notation</a></i>.

    <p> The total number of significant digits in <i>m</i> is equal to the
    precision.  If the precision is not specified, then the default value is
    <tt>6</tt>.  If the precision is <tt>0</tt>, then it is taken to be
    <tt>1</tt>.

    <p> If the <tt>'#'</tt> flag is given then an {@link
    FormatFlagsConversionMismatchException} will be thrown.

<tr><td valign=\"top\"> <tt>'G'</tt>
    <td valign=\"top\"> <tt>'&#92;u0047'</tt>
    <td> The upper-case variant of <tt>'g'</tt>.

<tr><td valign=\"top\"> <tt>'f'</tt>
    <td valign=\"top\"> <tt>'&#92;u0066'</tt>
    <td> Requires the output to be formatted using <a name=\"decimal\">decimal
    format</a>.  The <a href=\"#l10n algorithm\">localization algorithm</a> is
    applied.

    <p> The result is a string that represents the sign and magnitude
    (absolute value) of the argument.  The formatting of the sign is
    described in the <a href=\"#l10n algorithm\">localization
    algorithm</a>. The formatting of the magnitude <i>m</i> depends upon its
    value.

    <p> If <i>m</i> NaN or infinite, the literal strings \"NaN\" or
    \"Infinity\", respectively, will be output.  These values are not
    localized.

    <p> The magnitude is formatted as the integer part of <i>m</i>, with no
    leading zeroes, followed by the decimal separator followed by one or
    more decimal digits representing the fractional part of <i>m</i>.

    <p> The number of digits in the result for the fractional part of
    <i>m</i> or <i>a</i> is equal to the precision.  If the precision is not
    specified then the default value is <tt>6</tt>. If the precision is less
    than the number of digits which would appear after the decimal point in
    the string returned by {@link Float#toString(float)} or {@link
    Double#toString(double)} respectively, then the value will be rounded
    using the {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up
    algorithm}.  Otherwise, zeros may be appended to reach the precision.
    For a canonical representation of the value,use {@link
    Float#toString(float)} or {@link Double#toString(double)} as
    appropriate.

<tr><td valign=\"top\"> <tt>'a'</tt>
    <td valign=\"top\"> <tt>'&#92;u0061'</tt>
    <td> Requires the output to be formatted in hexadecimal exponential
    form.  No localization is applied.

    <p> The result is a string that represents the sign and magnitude
    (absolute value) of the argument <i>x</i>.

    <p> If <i>x</i> is negative or a negative-zero value then the result
    will begin with <tt>'-'</tt> (<tt>'&#92;u002d'</tt>).

    <p> If <i>x</i> is positive or a positive-zero value and the
    <tt>'+'</tt> flag is given then the result will begin with <tt>'+'</tt>
    (<tt>'&#92;u002b'</tt>).

    <p> The formatting of the magnitude <i>m</i> depends upon its value.

    <ul>

    <li> If the value is NaN or infinite, the literal strings \"NaN\" or
    \"Infinity\", respectively, will be output.

    <li> If <i>m</i> is zero then it is represented by the string
    <tt>\"0x0.0p0\"</tt>.

    <li> If <i>m</i> is a <tt>double</tt> value with a normalized
    representation then substrings are used to represent the significand and
    exponent fields.  The significand is represented by the characters
    <tt>\"0x1.\"</tt> followed by the hexadecimal representation of the rest
    of the significand as a fraction.  The exponent is represented by
    <tt>'p'</tt> (<tt>'&#92;u0070'</tt>) followed by a decimal string of the
    unbiased exponent as if produced by invoking {@link
    Integer#toString(int) Integer.toString} on the exponent value.

    <li> If <i>m</i> is a <tt>double</tt> value with a subnormal
    representation then the significand is represented by the characters
    <tt>'0x0.'</tt> followed by the hexadecimal representation of the rest
    of the significand as a fraction.  The exponent is represented by
    <tt>'p-1022'</tt>.  Note that there must be at least one nonzero digit
    in a subnormal significand.

    </ul>

    <p> If the <tt>'('</tt> or <tt>','</tt> flags are given, then a {@link
    FormatFlagsConversionMismatchException} will be thrown.

<tr><td valign=\"top\"> <tt>'A'</tt>
    <td valign=\"top\"> <tt>'&#92;u0041'</tt>
    <td> The upper-case variant of <tt>'a'</tt>.  The entire string
    representing the number will be converted to upper case including the
    <tt>'x'</tt> (<tt>'&#92;u0078'</tt>) and <tt>'p'</tt>
    (<tt>'&#92;u0070'</tt> and all hexadecimal digits <tt>'a'</tt> -
    <tt>'f'</tt> (<tt>'&#92;u0061'</tt> - <tt>'&#92;u0066'</tt>).

</table>

<p> All <a href=\"#intFlags\">flags</a> defined for Byte, Short, Integer, and
Long apply.

<p> If the <tt>'#'</tt> flag is given, then the decimal separator will
always be present.

<a name=\"floatdFlags\"></a><p> If no flags are given the default formatting
is as follows:

<ul>

<li> The output is right-justified within the <tt>width</tt>

<li> Negative numbers begin with a <tt>'-'</tt>

<li> Positive numbers and positive zero do not include a sign or extra
leading space

<li> No grouping separators are included

<li> The decimal separator will only appear if a digit follows it

</ul>

<a name=\"floatDWidth\"></a><p> The width is the minimum number of characters
to be written to the output.  This includes any signs, digits, grouping
separators, decimal separators, exponential symbol, radix indicator,
parentheses, and strings representing infinity and NaN as applicable.  If
the length of the converted value is less than the width then the output
will be padded by spaces (<tt>'&#92;u0020'</tt>) until the total number of
characters equals width.  The padding is on the left by default.  If the
<tt>'-'</tt> flag is given then the padding will be on the right.  If width
is not specified then there is no minimum.

<a name=\"floatDPrec\"></a><p> If the conversion is <tt>'e'</tt>,
<tt>'E'</tt> or <tt>'f'</tt>, then the precision is the number of digits
after the decimal separator.  If the precision is not specified, then it is
assumed to be <tt>6</tt>.

<p> If the conversion is <tt>'g'</tt> or <tt>'G'</tt>, then the precision is
the total number of significant digits in the resulting magnitude after
rounding.  If the precision is not specified, then the default value is
<tt>6</tt>.  If the precision is <tt>0</tt>, then it is taken to be
<tt>1</tt>.

<p> If the conversion is <tt>'a'</tt> or <tt>'A'</tt>, then the precision
is the number of hexadecimal digits after the decimal separator.  If the
precision is not provided, then all of the digits as returned by {@link
Double#toHexString(double)} will be output.

<p><a name=\"dndec\"><b> BigDecimal </b><a>

<p> The following conversions may be applied {@link java.math.BigDecimal
BigDecimal}.

<table cellpadding=5 summary=\"floatConv\">

<tr><td valign=\"top\"> <tt>'e'</tt>
    <td valign=\"top\"> <tt>'&#92;u0065'</tt>
    <td> Requires the output to be formatted using <a
    name=\"scientific\">computerized scientific notation</a>.  The <a
    href=\"#l10n algorithm\">localization algorithm</a> is applied.

    <p> The formatting of the magnitude <i>m</i> depends upon its value.

    <p> If <i>m</i> is positive-zero or negative-zero, then the exponent
    will be <tt>\"+00\"</tt>.

    <p> Otherwise, the result is a string that represents the sign and
    magnitude (absolute value) of the argument.  The formatting of the sign
    is described in the <a href=\"#l10n algorithm\">localization
    algorithm</a>. The formatting of the magnitude <i>m</i> depends upon its
    value.

    <p> Let <i>n</i> be the unique integer such that 10<sup><i>n</i></sup>
    &lt;= <i>m</i> &lt; 10<sup><i>n</i>+1</sup>; then let <i>a</i> be the
    mathematically exact quotient of <i>m</i> and 10<sup><i>n</i></sup> so
    that 1 &lt;= <i>a</i> &lt; 10. The magnitude is then represented as the
    integer part of <i>a</i>, as a single decimal digit, followed by the
    decimal separator followed by decimal digits representing the fractional
    part of <i>a</i>, followed by the exponent symbol <tt>'e'</tt>
    (<tt>'&#92;u0065'</tt>), followed by the sign of the exponent, followed
    by a representation of <i>n</i> as a decimal integer, as produced by the
    method {@link Long#toString(long, int)}, and zero-padded to include at
    least two digits.

    <p> The number of digits in the result for the fractional part of
    <i>m</i> or <i>a</i> is equal to the precision.  If the precision is not
    specified then the default value is <tt>6</tt>.  If the precision is
    less than the number of digits which would appear after the decimal
    point in the string returned by {@link Float#toString(float)} or {@link
    Double#toString(double)} respectively, then the value will be rounded
    using the {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up
    algorithm}.  Otherwise, zeros may be appended to reach the precision.
    For a canonical representation of the value, use {@link
    BigDecimal#toString()}.

    <p> If the <tt>','</tt> flag is given, then an {@link
    FormatFlagsConversionMismatchException} will be thrown.

<tr><td valign=\"top\"> <tt>'E'</tt>
    <td valign=\"top\"> <tt>'&#92;u0045'</tt>
    <td> The upper-case variant of <tt>'e'</tt>.  The exponent symbol
    will be <tt>'E'</tt> (<tt>'&#92;u0045'</tt>).

<tr><td valign=\"top\"> <tt>'g'</tt>
    <td valign=\"top\"> <tt>'&#92;u0067'</tt>
    <td> Requires the output to be formatted in general scientific notation
    as described below. The <a href=\"#l10n algorithm\">localization
    algorithm</a> is applied.

    <p> After rounding for the precision, the formatting of the resulting
    magnitude <i>m</i> depends on its value.

    <p> If <i>m</i> is greater than or equal to 10<sup>-4</sup> but less
    than 10<sup>precision</sup> then it is represented in <i><a
    href=\"#decimal\">decimal format</a></i>.

    <p> If <i>m</i> is less than 10<sup>-4</sup> or greater than or equal to
    10<sup>precision</sup>, then it is represented in <i><a
    href=\"#scientific\">computerized scientific notation</a></i>.

    <p> The total number of significant digits in <i>m</i> is equal to the
    precision.  If the precision is not specified, then the default value is
    <tt>6</tt>.  If the precision is <tt>0</tt>, then it is taken to be
    <tt>1</tt>.

    <p> If the <tt>'#'</tt> flag is given then an {@link
    FormatFlagsConversionMismatchException} will be thrown.

<tr><td valign=\"top\"> <tt>'G'</tt>
    <td valign=\"top\"> <tt>'&#92;u0047'</tt>
    <td> The upper-case variant of <tt>'g'</tt>.

<tr><td valign=\"top\"> <tt>'f'</tt>
    <td valign=\"top\"> <tt>'&#92;u0066'</tt>
    <td> Requires the output to be formatted using <a name=\"decimal\">decimal
    format</a>.  The <a href=\"#l10n algorithm\">localization algorithm</a> is
    applied.

    <p> The result is a string that represents the sign and magnitude
    (absolute value) of the argument.  The formatting of the sign is
    described in the <a href=\"#l10n algorithm\">localization
    algorithm</a>. The formatting of the magnitude <i>m</i> depends upon its
    value.

    <p> The magnitude is formatted as the integer part of <i>m</i>, with no
    leading zeroes, followed by the decimal separator followed by one or
    more decimal digits representing the fractional part of <i>m</i>.

    <p> The number of digits in the result for the fractional part of
    <i>m</i> or <i>a</i> is equal to the precision.  If the precision is not
    specified then the default value is <tt>6</tt>.  If the precision is
    less than the number of digits which would appear after the decimal
    point in the string returned by {@link Float#toString(float)} or {@link
    Double#toString(double)} respectively, then the value will be rounded
    using the {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up
    algorithm}.  Otherwise, zeros may be appended to reach the precision.
    For a canonical representation of the value, use {@link
    BigDecimal#toString()}.

</table>

<p> All <a href=\"#intFlags\">flags</a> defined for Byte, Short, Integer, and
Long apply.

<p> If the <tt>'#'</tt> flag is given, then the decimal separator will
always be present.

<p> The <a href=\"#floatdFlags\">default behavior</a> when no flags are
given is the same as for Float and Double.

<p> The specification of <a href=\"#floatDWidth\">width</a> and <a
href=\"#floatDPrec\">precision</a> is the same as defined for Float and
Double.

<a name=\"ddt\"><h4> Date/Time </h4></a>

<p> This conversion may be applied to <tt>long</tt>, {@link Long}, {@link
Calendar}, and {@link Date}.

<table cellpadding=5 summary=\"DTConv\">

<tr><td valign=\"top\"> <tt>'t'</tt>
    <td valign=\"top\"> <tt>'&#92;u0074'</tt>
    <td> Prefix for date and time conversion characters.
<tr><td valign=\"top\"> <tt>'T'</tt>
    <td valign=\"top\"> <tt>'&#92;u0054'</tt>
    <td> The upper-case variant of <tt>'t'</tt>.

</table>

<p> The following date and time conversion character suffixes are defined
for the <tt>'t'</tt> and <tt>'T'</tt> conversions.  The types are similar to
but not completely identical to those defined by GNU <tt>date</tt> and
POSIX <tt>strftime(3c)</tt>.  Additional conversion types are provided to
access Java-specific functionality (e.g. <tt>'L'</tt> for milliseconds
within the second).

<p> The following conversion characters are used for formatting times:

<table cellpadding=5 summary=\"time\">

<tr><td valign=\"top\"> <tt>'H'</tt>
    <td valign=\"top\"> <tt>'&#92;u0048'</tt>
    <td> Hour of the day for the 24-hour clock, formatted as two digits with
    a leading zero as necessary i.e. <tt>00 - 23</tt>. <tt>00</tt>
    corresponds to midnight.

<tr><td valign=\"top\"><tt>'I'</tt>
    <td valign=\"top\"> <tt>'&#92;u0049'</tt>
    <td> Hour for the 12-hour clock, formatted as two digits with a leading
    zero as necessary, i.e.  <tt>01 - 12</tt>.  <tt>01</tt> corresponds to
    one o'clock (either morning or afternoon).

<tr><td valign=\"top\"><tt>'k'</tt>
    <td valign=\"top\"> <tt>'&#92;u006b'</tt>
    <td> Hour of the day for the 24-hour clock, i.e. <tt>0 - 23</tt>.
    <tt>0</tt> corresponds to midnight.

<tr><td valign=\"top\"><tt>'l'</tt>
    <td valign=\"top\"> <tt>'&#92;u006c'</tt>
    <td> Hour for the 12-hour clock, i.e. <tt>1 - 12</tt>.  <tt>1</tt>
    corresponds to one o'clock (either morning or afternoon).

<tr><td valign=\"top\"><tt>'M'</tt>
    <td valign=\"top\"> <tt>'&#92;u004d'</tt>
    <td> Minute within the hour formatted as two digits with a leading zero
    as necessary, i.e.  <tt>00 - 59</tt>.

<tr><td valign=\"top\"><tt>'S'</tt>
    <td valign=\"top\"> <tt>'&#92;u0053'</tt>
    <td> Seconds within the minute, formatted as two digits with a leading
    zero as necessary, i.e. <tt>00 - 60</tt> (\"<tt>60</tt>\" is a special
    value required to support leap seconds).

<tr><td valign=\"top\"><tt>'L'</tt>
    <td valign=\"top\"> <tt>'&#92;u004c'</tt>
    <td> Millisecond within the second formatted as three digits with
    leading zeros as necessary, i.e. <tt>000 - 999</tt>.

<tr><td valign=\"top\"><tt>'N'</tt>
    <td valign=\"top\"> <tt>'&#92;u004e'</tt>
    <td> Nanosecond within the second, formatted as nine digits with leading
    zeros as necessary, i.e. <tt>000000000 - 999999999</tt>.  The precision
    of this value is limited by the resolution of the underlying operating
    system or hardware.

<tr><td valign=\"top\"><tt>'p'</tt>
    <td valign=\"top\"> <tt>'&#92;u0070'</tt>
    <td> Locale-specific {@linkplain
    java.text.DateFormatSymbols#getAmPmStrings morning or afternoon} marker
    in lower case, e.g.\"<tt>am</tt>\" or \"<tt>pm</tt>\".  Use of the
    conversion prefix <tt>'T'</tt> forces this output to upper case.  (Note
    that <tt>'p'</tt> produces lower-case output.  This is different from
    GNU <tt>date</tt> and POSIX <tt>strftime(3c)</tt> which produce
    upper-case output.)

<tr><td valign=\"top\"><tt>'z'</tt>
    <td valign=\"top\"> <tt>'&#92;u007a'</tt>
    <td> <a href=\"http://www.ietf.org/rfc/rfc0822.txt\">RFC&nbsp;822</a>
    style numeric time zone offset from GMT, e.g. <tt>-0800</tt>.

<tr><td valign=\"top\"><tt>'Z'</tt>
    <td valign=\"top\"> <tt>'&#92;u005a'</tt>
    <td> A string representing the abbreviation for the time zone.

<tr><td valign=\"top\"><tt>'s'</tt>
    <td valign=\"top\"> <tt>'&#92;u0073'</tt>
    <td> Seconds since the beginning of the epoch starting at 1 January 1970
    <tt>00:00:00</tt> UTC, i.e. <tt>Long.MIN_VALUE/1000</tt> to
    <tt>Long.MAX_VALUE/1000</tt>.

<tr><td valign=\"top\"><tt>'Q'</tt>
    <td valign=\"top\"> <tt>'&#92;u004f'</tt>
    <td> Milliseconds since the beginning of the epoch starting at 1 January
    1970 <tt>00:00:00</tt> UTC, i.e. <tt>Long.MIN_VALUE</tt> to
    <tt>Long.MAX_VALUE</tt>. The precision of this value is limited by
    the resolution of the underlying operating system or hardware.

</table>

<p> The following conversion characters are used for formatting dates:

<table cellpadding=5 summary=\"date\">

<tr><td valign=\"top\"><tt>'B'</tt>
    <td valign=\"top\"> <tt>'&#92;u0042'</tt>
    <td> Locale-specific {@linkplain java.text.DateFormatSymbols#getMonths
    full month name}, e.g. <tt>\"January\"</tt>, <tt>\"February\"</tt>.

<tr><td valign=\"top\"><tt>'b'</tt>
    <td valign=\"top\"> <tt>'&#92;u0062'</tt>
    <td> Locale-specific {@linkplain
    java.text.DateFormatSymbols#getShortMonths abbreviated month name},
    e.g. <tt>\"Jan\"</tt>, <tt>\"Feb\"</tt>.

<tr><td valign=\"top\"><tt>'h'</tt>
    <td valign=\"top\"> <tt>'&#92;u0068'</tt>
    <td> Same as <tt>'b'</tt>.

<tr><td valign=\"top\"><tt>'A'</tt>
    <td valign=\"top\"> <tt>'&#92;u0041'</tt>
    <td> Locale-specific full name of the {@linkplain
    java.text.DateFormatSymbols#getWeekdays day of the week},
    e.g. <tt>\"Sunday\"</tt>, <tt>\"Monday\"</tt>

<tr><td valign=\"top\"><tt>'a'</tt>
    <td valign=\"top\"> <tt>'&#92;u0061'</tt>
    <td> Locale-specific short name of the {@linkplain
    java.text.DateFormatSymbols#getShortWeekdays day of the week},
    e.g. <tt>\"Sun\"</tt>, <tt>\"Mon\"</tt>

<tr><td valign=\"top\"><tt>'C'</tt>
    <td valign=\"top\"> <tt>'&#92;u0043'</tt>
    <td> Four-digit year divided by <tt>100</tt>, formatted as two digits
    with leading zero as necessary, i.e. <tt>00 - 99</tt>

<tr><td valign=\"top\"><tt>'Y'</tt>
    <td valign=\"top\"> <tt>'&#92;u0059'</tt> <td> Year, formatted to at least
    four digits with leading zeros as necessary, e.g. <tt>0092</tt> equals
    <tt>92</tt> CE for the Gregorian calendar.

<tr><td valign=\"top\"><tt>'y'</tt>
    <td valign=\"top\"> <tt>'&#92;u0079'</tt>
    <td> Last two digits of the year, formatted with leading zeros as
    necessary, i.e. <tt>00 - 99</tt>.

<tr><td valign=\"top\"><tt>'j'</tt>
    <td valign=\"top\"> <tt>'&#92;u006a'</tt>
    <td> Day of year, formatted as three digits with leading zeros as
    necessary, e.g. <tt>001 - 366</tt> for the Gregorian calendar.
    <tt>001</tt> corresponds to the first day of the year.

<tr><td valign=\"top\"><tt>'m'</tt>
    <td valign=\"top\"> <tt>'&#92;u006d'</tt>
    <td> Month, formatted as two digits with leading zeros as necessary,
    i.e. <tt>01 - 13</tt>, where \"<tt>01</tt>\" is the first month of the
    year and (\"<tt>13</tt>\" is a special value required to support lunar
    calendars).

<tr><td valign=\"top\"><tt>'d'</tt>
    <td valign=\"top\"> <tt>'&#92;u0064'</tt>
    <td> Day of month, formatted as two digits with leading zeros as
    necessary, i.e. <tt>01 - 31</tt>, where \"<tt>01</tt>\" is the first day
    of the month.

<tr><td valign=\"top\"><tt>'e'</tt>
    <td valign=\"top\"> <tt>'&#92;u0065'</tt>
    <td> Day of month, formatted as two digits, i.e. <tt>1 - 31</tt> where
    \"<tt>1</tt>\" is the first day of the month.

</table>

<p> The following conversion characters are used for formatting common
date/time compositions.

<table cellpadding=5 summary=\"composites\">

<tr><td valign=\"top\"><tt>'R'</tt>
    <td valign=\"top\"> <tt>'&#92;u0052'</tt>
    <td> Time formatted for the 24-hour clock as <tt>\"%tH:%tM\"</tt>

<tr><td valign=\"top\"><tt>'T'</tt>
    <td valign=\"top\"> <tt>'&#92;u0054'</tt>
    <td> Time formatted for the 24-hour clock as <tt>\"%tH:%tM:%tS\"</tt>.

<tr><td valign=\"top\"><tt>'r'</tt>
    <td valign=\"top\"> <tt>'&#92;u0072'</tt>
    <td> Time formatted for the 12-hour clock as <tt>\"%tI:%tM:%tS
    %Tp\"</tt>.  The location of the morning or afternoon marker
    (<tt>'%Tp'</tt>) may be locale-dependent.

<tr><td valign=\"top\"><tt>'D'</tt>
    <td valign=\"top\"> <tt>'&#92;u0044'</tt>
    <td> Date formatted as <tt>\"%tm/%td/%ty\"</tt>.

<tr><td valign=\"top\"><tt>'F'</tt>
    <td valign=\"top\"> <tt>'&#92;u0046'</tt>
    <td> <a href=\"http://www.w3.org/TR/NOTE-datetime\">ISO&nbsp;8601</a>
    complete date formatted as <tt>\"%tY-%tm-%td\"</tt>.

<tr><td valign=\"top\"><tt>'c'</tt>
    <td valign=\"top\"> <tt>'&#92;u0063'</tt>
    <td> Date and time formatted as <tt>\"%ta %tb %td %tT %tZ %tY\"</tt>,
    e.g. <tt>\"Sun Jul 20 16:17:00 EDT 1969\"</tt>.

</table>

<p> The <tt>'-'</tt> flag defined for <a href=\"#dFlags\">General
conversions</a> applies.  If the <tt>'#'</tt> flag is given, then a {@link
FormatFlagsConversionMismatchException} will be thrown.

<a name=\"dtWidth\"></a><p> The width is the minimum number of characters to
be written to the output.  If the length of the converted value is less than
the <tt>width</tt> then the output will be padded by spaces
(<tt>'&#92;u0020'</tt>) until the total number of characters equals width.
The padding is on the left by default.  If the <tt>'-'</tt> flag is given
then the padding will be on the right.  If width is not specified then there
is no minimum.

<p> The precision is not applicable.  If the precision is specified then an
{@link IllegalFormatPrecisionException} will be thrown.

<a name=\"dper\"><h4> Percent </h4></a>

<p> The conversion does not correspond to any argument.

<table cellpadding=5 summary=\"DTConv\">

<tr><td valign=\"top\"><tt>'%'</tt>
    <td> The result is a literal <tt>'%'</tt> (<tt>'&#92;u0025'</tt>)

<a name=\"dtWidth\"></a><p> The width is the minimum number of characters to
be written to the output including the <tt>'%'</tt>.  If the length of the
converted value is less than the <tt>width</tt> then the output will be
padded by spaces (<tt>'&#92;u0020'</tt>) until the total number of
characters equals width.  The padding is on the left.  If width is not
specified then just the <tt>'%'</tt> is output.

<p> The <tt>'-'</tt> flag defined for <a href=\"#dFlags\">General
conversions</a> applies.  If any other flags are provided, then a
{@link FormatFlagsConversionMismatchException} will be thrown.

<p> The precision is not applicable.  If the precision is specified an
{@link IllegalFormatPrecisionException} will be thrown.

</table>

<a name=\"dls\"><h4> Line Separator </h4></a>

<p> The conversion does not correspond to any argument.

<table cellpadding=5 summary=\"DTConv\">

<tr><td valign=\"top\"><tt>'n'</tt>
    <td> the platform-specific line separator as returned by {@link
    System#getProperty System.getProperty(\"line.separator\")}.

</table>

<p> Flags, width, and precision are not applicable.  If any are provided an
{@link IllegalFormatFlagsException}, {@link IllegalFormatWidthException},
and {@link IllegalFormatPrecisionException}, respectively will be thrown.

<a name=\"dpos\"><h4> Argument Index </h4></a>

<p> Format specifiers can reference arguments in three ways:

<ul>

<li> <i>Explicit indexing</i> is used when the format specifier contains an
argument index.  The argument index is a decimal integer indicating the
position of the argument in the argument list.  The first argument is
referenced by \"<tt>1$</tt>\", the second by \"<tt>2$</tt>\", etc.  An argument
may be referenced more than once.

<p> For example:

<blockquote><pre>
  formatter.format(\"%4$s %3$s %2$s %1$s %4$s %3$s %2$s %1$s\",
                   \"a\", \"b\", \"c\", \"d\")
  // -> \"d c b a d c b a\"
</pre></blockquote>

<li> <i>Relative indexing</i> is used when the format specifier contains a
<tt>'<'</tt> (<tt>'&#92;u003c'</tt>) flag which causes the argument for the
previous format specifier to be re-used.  If there is no previous argument,
then a {@link MissingFormatArgumentException} is thrown.

<blockquote><pre>
   formatter.format(\"%s %s %&lt;s %&lt;s\", \"a\", \"b\", \"c\", \"d\")
   // -> \"a b b b\"
   // \"c\" and \"d\" are ignored because they are not referenced
</pre></blockquote>

<li> <i>Ordinary indexing</i> is used when the format specifier contains
neither an argument index nor a <tt>'<'</tt> flag.  Each format specifier
which uses ordinary indexing is assigned a sequential implicit index into
argument list which is independent of the indices used by explicit or
relative indexing.

<blockquote><pre>
  formatter.format(\"%s %s %s %s\", \"a\", \"b\", \"c\", \"d\")
  // -> \"a b c d\"
</pre></blockquote>

</ul>

<p> It is possible to have a format string which uses all forms of indexing,
for example:

<blockquote><pre>
  formatter.format(\"%2$s %s %&lt;s %s\", \"a\", \"b\", \"c\", \"d\")
  // -> \"b a a b\"
  // \"c\" and \"d\" are ignored because they are not referenced
</pre></blockquote>

<p> The maximum number of arguments is limited by the maximum dimension of a
Java array as defined by the <a
href=\"http://java.sun.com/docs/books/vmspec/\">Java Virtual Machine
Specification</a>.  If the argument index is does not correspond to an
available argument, then a {@link MissingFormatArgumentException} is thrown.

<p> If there are more arguments than format specifiers, the extra arguments
are ignored.

<p> Unless otherwise specified, passing a <tt>null</tt> argument to any
method or constructor in this class will cause a {@link
NullPointerException} to be thrown.

@author  Iris Garcia
@version 	1.16, 01/04/05
@since 1.5"
      attribute 159387 "a"
	private explicit_type "Appendable"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 155291 // l (<unidirectional association>)
	relation 155291 --->
	  a role_name "l" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 155291 // l (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      attribute 159515 "lastException"
	private explicit_type "IOException"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 159643 "zero"
	private explicit_type "char"
	init_value "=  '0'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 159771 "scaleUp"
	class_attribute private explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 159899 "MAX_FD_CHARS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  30"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " 1 (sign) + 19 (max # sig digits) + 1 ('.') + 1 ('e') + 1 (sign)
 + 3 (max # exp digits) + 4 (error) = 30"
      end

      operation 264219 "init"
	private explicit_return_type "void"
	nparams 2
	  param inout name "a" explicit_type "Appendable"
	  param inout name "l" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialize internal data."
      end

      operation 264347 "Formatter"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new formatter.

<p> The destination of the formatted output is a {@link StringBuilder}
which may be retrieved by invoking {@link #out out()} and whose
current content may be converted into a string by invoking {@link
#toString toString()}.  The locale used is the {@linkplain
Locale#getDefault() default locale} for this instance of the Java
virtual machine."
      end

      operation 264475 "Formatter"
	public explicit_return_type ""
	nparams 1
	  param inout name "a" explicit_type "Appendable"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new formatter with the specified destination.

<p> The locale used is the {@linkplain Locale#getDefault() default
locale} for this instance of the Java virtual machine.

@param  a
        Destination for the formatted output.  If <tt>a</tt> is
        <tt>null</tt> then a {@link StringBuilder} will be created."
      end

      operation 264603 "Formatter"
	public explicit_return_type ""
	nparams 1
	  param inout name "l" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new formatter with the specified locale.

<p> The destination of the formatted output is a {@link StringBuilder}
which may be retrieved by invoking {@link #out out()} and whose current
content may be converted into a string by invoking {@link #toString
toString()}.

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied."
      end

      operation 264731 "Formatter"
	public explicit_return_type ""
	nparams 2
	  param inout name "a" explicit_type "Appendable"
	  param inout name "l" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new formatter with the specified destination and locale.

@param  a
        Destination for the formatted output.  If <tt>a</tt> is
        <tt>null</tt> then a {@link StringBuilder} will be created.

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied."
      end

      operation 264859 "Formatter"
	public explicit_return_type ""
	nparams 1
	  param in name "fileName" explicit_type "String"
	nexceptions 1
	  explicit_exception "FileNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new formatter with the specified file name.

<p> The charset used is the {@linkplain
java.nio.charset.Charset#defaultCharset default charset} for this
instance of the Java virtual machine.

<p> The locale used is the {@linkplain Locale#getDefault() default
locale} for this instance of the Java virtual machine.

@param  fileName
        The name of the file to use as the destination of this
        formatter.  If the file exists then it will be truncated to
        zero size; otherwise, a new file will be created.  The output
        will be written to the file and is buffered.

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(fileName)} denies write
         access to the file

@throws  FileNotFoundException
         If the given file name does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file"
      end

      operation 264987 "Formatter"
	public explicit_return_type ""
	nparams 2
	  param in name "fileName" explicit_type "String"
	  param in name "csn" explicit_type "String"
	nexceptions 2
	  explicit_exception "FileNotFoundException"
	  explicit_exception "UnsupportedEncodingException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new formatter with the specified file name and charset.

<p> The locale used is the {@linkplain Locale#getDefault default
locale} for this instance of the Java virtual machine.

@param  fileName
        The name of the file to use as the destination of this
        formatter.  If the file exists then it will be truncated to
        zero size; otherwise, a new file will be created.  The output
        will be written to the file and is buffered.

@param  csn
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@throws  FileNotFoundException
         If the given file name does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(fileName)} denies write
         access to the file

@throws  UnsupportedEncodingException
         If the named charset is not supported"
      end

      operation 265115 "Formatter"
	public explicit_return_type ""
	nparams 3
	  param in name "fileName" explicit_type "String"
	  param in name "csn" explicit_type "String"
	  param inout name "l" type class_ref 138907 // Locale
	nexceptions 2
	  explicit_exception "FileNotFoundException"
	  explicit_exception "UnsupportedEncodingException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new formatter with the specified file name, charset, and
locale.

@param  fileName
        The name of the file to use as the destination of this
        formatter.  If the file exists then it will be truncated to
        zero size; otherwise, a new file will be created.  The output
        will be written to the file and is buffered.

@param  csn
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied.

@throws  FileNotFoundException
         If the given file name does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(fileName)} denies write
         access to the file

@throws  UnsupportedEncodingException
         If the named charset is not supported"
      end

      operation 265243 "Formatter"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" explicit_type "File"
	nexceptions 1
	  explicit_exception "FileNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new formatter with the specified file.

<p> The charset used is the {@linkplain
java.nio.charset.Charset#defaultCharset default charset} for this
instance of the Java virtual machine.

<p> The locale used is the {@linkplain Locale#getDefault() default
locale} for this instance of the Java virtual machine.

@param  file
        The file to use as the destination of this formatter.  If the
        file exists then it will be truncated to zero size; otherwise,
        a new file will be created.  The output will be written to the
        file and is buffered.

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(file.getPath())} denies
         write access to the file

@throws  FileNotFoundException
         If the given file object does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file"
      end

      operation 265371 "Formatter"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" explicit_type "File"
	  param in name "csn" explicit_type "String"
	nexceptions 2
	  explicit_exception "FileNotFoundException"
	  explicit_exception "UnsupportedEncodingException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new formatter with the specified file and charset.

<p> The locale used is the {@linkplain Locale#getDefault default
locale} for this instance of the Java virtual machine.

@param  file
        The file to use as the destination of this formatter.  If the
        file exists then it will be truncated to zero size; otherwise,
        a new file will be created.  The output will be written to the
        file and is buffered.

@param  csn
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@throws  FileNotFoundException
         If the given file object does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(file.getPath())} denies
         write access to the file

@throws  UnsupportedEncodingException
         If the named charset is not supported"
      end

      operation 265499 "Formatter"
	public explicit_return_type ""
	nparams 3
	  param inout name "file" explicit_type "File"
	  param in name "csn" explicit_type "String"
	  param inout name "l" type class_ref 138907 // Locale
	nexceptions 2
	  explicit_exception "FileNotFoundException"
	  explicit_exception "UnsupportedEncodingException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new formatter with the specified file, charset, and
locale.

@param  file
        The file to use as the destination of this formatter.  If the
        file exists then it will be truncated to zero size; otherwise,
        a new file will be created.  The output will be written to the
        file and is buffered.

@param  csn
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied.

@throws  FileNotFoundException
         If the given file object does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(file.getPath())} denies
         write access to the file

@throws  UnsupportedEncodingException
         If the named charset is not supported"
      end

      operation 265627 "Formatter"
	public explicit_return_type ""
	nparams 1
	  param inout name "ps" explicit_type "PrintStream"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new formatter with the specified print stream.

<p> The locale used is the {@linkplain Locale#getDefault() default
locale} for this instance of the Java virtual machine.

<p> Characters are written to the given {@link java.io.PrintStream
PrintStream} object and are therefore encoded using that object's
charset.

@param  ps
        The stream to use as the destination of this formatter."
      end

      operation 265755 "Formatter"
	public explicit_return_type ""
	nparams 1
	  param inout name "os" explicit_type "OutputStream"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new formatter with the specified output stream.

<p> The charset used is the {@linkplain
java.nio.charset.Charset#defaultCharset default charset} for this
instance of the Java virtual machine.

<p> The locale used is the {@linkplain Locale#getDefault() default
locale} for this instance of the Java virtual machine.

@param  os
        The output stream to use as the destination of this formatter.
        The output will be buffered."
      end

      operation 265883 "Formatter"
	public explicit_return_type ""
	nparams 2
	  param inout name "os" explicit_type "OutputStream"
	  param in name "csn" explicit_type "String"
	nexceptions 1
	  explicit_exception "UnsupportedEncodingException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new formatter with the specified output stream and
charset.

<p> The locale used is the {@linkplain Locale#getDefault default
locale} for this instance of the Java virtual machine.

@param  os
        The output stream to use as the destination of this formatter.
        The output will be buffered.

@param  csn
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@throws  UnsupportedEncodingException
         If the named charset is not supported"
      end

      operation 266011 "Formatter"
	public explicit_return_type ""
	nparams 3
	  param inout name "os" explicit_type "OutputStream"
	  param in name "csn" explicit_type "String"
	  param inout name "l" type class_ref 138907 // Locale
	nexceptions 1
	  explicit_exception "UnsupportedEncodingException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new formatter with the specified output stream, charset,
and locale.

@param  os
        The output stream to use as the destination of this formatter.
        The output will be buffered.

@param  csn
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied.

@throws  UnsupportedEncodingException
         If the named charset is not supported"
      end

      operation 266139 "setZero"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 266267 "locale"
	public return_type class_ref 138907 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the locale set by the construction of this formatter.

<p> The {@link #format(java.util.Locale,String,Object...) format} method
for this object which has a locale argument does not change this value.

@return  <tt>null</tt> if no localization is applied, otherwise a
         locale

@throws  FormatterClosedException
         If this formatter has been closed by invoking its {@link
         #close()} method"
      end

      operation 266395 "out"
	public explicit_return_type "Appendable"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the destination for the output.

@return  The destination for the output

@throws  FormatterClosedException
         If this formatter has been closed by invoking its {@link
         #close()} method"
      end

      operation 266523 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of invoking <tt>toString()</tt> on the destination
for the output.  For example, the following code formats text into a
{@link StringBuilder} then retrieves the resultant string:

<blockquote><pre>
  Formatter f = new Formatter();
  f.format(\"Last reboot at %tc\", lastRebootDate);
  String s = f.toString();
  // -> s == \"Last reboot at Sat Jan 01 00:00:00 PST 2000\"
</pre></blockquote>

<p> An invocation of this method behaves in exactly the same way as the
invocation

<pre>
    out().toString() </pre>

<p> Depending on the specification of <tt>toString</tt> for the {@link
Appendable}, the returned string may or may not contain the characters
written to the destination.  For instance, buffers typically return
their contents in <tt>toString()</tt>, but streams cannot since the
data is discarded.

@return  The result of invoking <tt>toString()</tt> on the destination
         for the output

@throws  FormatterClosedException
         If this formatter has been closed by invoking its {@link
         #close()} method"
      end

      operation 266651 "flush"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this formatter.  If the destination implements the {@link
java.io.Flushable} interface, its <tt>flush</tt> method will be invoked.

<p> Flushing a formatter writes any buffered output in the destination
to the underlying stream.

@throws  FormatterClosedException
         If this formatter has been closed by invoking its {@link
         #close()} method"
      end

      operation 266779 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this formatter.  If the destination implements the {@link
java.io.Closeable} interface, its <tt>close</tt> method will be invoked.

<p> Closing a formatter allows it to release resources it may be holding
(such as open files).  If the formatter is already closed, then invoking
this method has no effect.

<p> Attempting to invoke any methods except {@link #ioException()} in
this formatter after it has been closed will result in a {@link
FormatterClosedException}."
      end

      operation 266907 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 267035 "ioException"
	public explicit_return_type "IOException"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <tt>IOException</tt> last thrown by this formatter's {@link
Appendable}.

<p> If the destination's <tt>append()</tt> method never throws
<tt>IOException</tt>, then this method will always return <tt>null</tt>.

@return  The last exception thrown by the Appendable or <tt>null</tt> if
         no such exception exists."
      end

      operation 267163 "format"
	public return_type class_ref 147739 // Formatter
	nparams 2
	  param in name "format" explicit_type "String"
	  param inout name "args" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a formatted string to this object's destination using the
specified format string and arguments.  The locale used is the one
defined during the construction of this formatter.

@param  format
        A format string as described in <a href=\"#syntax\">Format string
        syntax</a>.

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        the <a href=\"http://java.sun.com/docs/books/vmspec/\">Java
        Virtual Machine Specification</a>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a href=\"#detail\">Details</a>
         section of the formatter class specification.

@throws  FormatterClosedException
         If this formatter has been closed by invoking its {@link
         #close()} method

@return  This formatter"
      end

      operation 267291 "format"
	public return_type class_ref 147739 // Formatter
	nparams 3
	  param inout name "l" type class_ref 138907 // Locale
	  param in name "format" explicit_type "String"
	  param inout name "args" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a formatted string to this object's destination using the
specified locale, format string, and arguments.

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied.  This does not change this object's locale that was
        set during construction.

@param  format
        A format string as described in <a href=\"#syntax\">Format string
        syntax</a>

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        the <a href=\"http://java.sun.com/docs/books/vmspec/\">Java
        Virtual Machine Specification</a>

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a href=\"#detail\">Details</a>
         section of the formatter class specification.

@throws  FormatterClosedException
         If this formatter has been closed by invoking its {@link
         #close()} method

@return  This formatter"
      end

      attribute 160027 "formatSpecifier"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"%(\\\\d+\\\\$)?([-#+ 0,(\\\\<]*)?(\\\\d+)?(\\\\.\\\\d+)?([tT])?([a-zA-Z%])\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " %[argument_index$][flags][width][.precision][t]conversion"
      end

      attribute 160155 "fsPattern"
	class_attribute private explicit_type "Pattern"
	init_value "=  Pattern.compile(formatSpecifier)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 148251 "FormatString"
	visibility private stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 267675 "index"
	  public explicit_return_type "int"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 267803 "print"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "arg" explicit_type "Object"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 267931 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 267419 "parse"
	private return_type class_ref 148251 // FormatString
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Look for format specifiers in the format string."
      end

      operation 267547 "checkText"
	private explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 148379 "FixedString"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 155419 // <realization>
	  relation 155419 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 155419 // <realization>
	    b parent class_ref 148251 // FormatString
	end

	attribute 160283 "s"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 268059 "FixedString"
	  package explicit_return_type ""
	  nparams 1
	    param in name "s" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 268187 "index"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 268315 "print"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "arg" explicit_type "Object"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 268443 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 148507 "BigDecimalLayoutForm"
	visibility public stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 160411 "SCIENTIFIC"
	  public type class_ref 148507 // BigDecimalLayoutForm
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 160539 "DECIMAL_FLOAT"
	  public type class_ref 148507 // BigDecimalLayoutForm
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 148635 "FormatSpecifier"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 155547 // <realization>
	  relation 155547 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 155547 // <realization>
	    b parent class_ref 148251 // FormatString
	end

	attribute 160667 "index"
	  private explicit_type "int"
	  init_value "=  -1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 155675 // f (<unidirectional association>)
	  relation 155675 --->
	    a role_name "f" init_value "=  Flags.NONE" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 155675 // f (<unidirectional association>)
	    b parent class_ref 148763 // Flags
	end

	attribute 160795 "width"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 160923 "precision"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 161051 "dt"
	  private explicit_type "boolean"
	  init_value "=  false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 161179 "c"
	  private explicit_type "char"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 155803 // formatter (<unidirectional association>)
	  relation 155803 --->
	    a role_name "formatter" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 155803 // formatter (<unidirectional association>)
	    b parent class_ref 147739 // Formatter
	end

	attribute 161307 "ls"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " cache the line separator"
	end

	operation 268571 "index"
	  private explicit_return_type "int"
	  nparams 1
	    param in name "s" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 268699 "index"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 268827 "flags"
	  private return_type class_ref 148763 // Flags
	  nparams 1
	    param in name "s" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 268955 "flags"
	  package return_type class_ref 148763 // Flags
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 269083 "width"
	  private explicit_return_type "int"
	  nparams 1
	    param in name "s" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 269211 "width"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 269339 "precision"
	  private explicit_return_type "int"
	  nparams 1
	    param in name "s" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 269467 "precision"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 269595 "conversion"
	  private explicit_return_type "char"
	  nparams 1
	    param in name "s" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 269723 "conversion"
	  private explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 269851 "FormatSpecifier"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "formatter" type class_ref 147739 // Formatter
	    param in name "sa" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 269979 "print"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "arg" explicit_type "Object"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 270107 "printInteger"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "arg" explicit_type "Object"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 270235 "printFloat"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "arg" explicit_type "Object"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 270363 "printDateTime"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "arg" explicit_type "Object"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 270491 "printCharacter"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "arg" explicit_type "Object"
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 270619 "printString"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "arg" explicit_type "Object"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 270747 "printBoolean"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "arg" explicit_type "Object"
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 270875 "printHashCode"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "arg" explicit_type "Object"
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 271003 "print"
	  private explicit_return_type "void"
	  nparams 1
	    param in name "s" explicit_type "String"
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 271131 "justify"
	  private explicit_return_type "String"
	  nparams 1
	    param in name "s" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 271259 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 271387 "checkGeneral"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 271515 "checkDateTime"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 271643 "checkCharacter"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 271771 "checkInteger"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 271899 "checkBadFlags"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "badFlags" type class_ref 148763 // Flags
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ... ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 272027 "checkFloat"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 272155 "checkNumeric"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 272283 "checkText"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 272411 "print"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "value" explicit_type "byte"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 272539 "print"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "value" explicit_type "short"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 272667 "print"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "value" explicit_type "int"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 272795 "print"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "value" explicit_type "long"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 272923 "leadingSign"
	  private explicit_return_type "StringBuilder"
	  nparams 2
	    param inout name "sb" explicit_type "StringBuilder"
	    param inout name "neg" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " neg := val < 0"
	end

	operation 273051 "trailingSign"
	  private explicit_return_type "StringBuilder"
	  nparams 2
	    param inout name "sb" explicit_type "StringBuilder"
	    param inout name "neg" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " neg := val < 0"
	end

	operation 273179 "print"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "value" explicit_type "BigInteger"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 273307 "print"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "value" explicit_type "float"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 273435 "print"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "value" explicit_type "double"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 273563 "print"
	  private explicit_return_type "void"
	  nparams 7
	    param inout name "sb" explicit_type "StringBuilder"
	    param in name "value" explicit_type "double"
	    param inout name "l" type class_ref 138907 // Locale
	    param inout name "f" type class_ref 148763 // Flags
	    param in name "c" explicit_type "char"
	    param in name "precision" explicit_type "int"
	    param inout name "neg" explicit_type "boolean"
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " !Double.isInfinite(value) && !Double.isNaN(value)"
	end

	operation 273691 "mantissa"
	  private explicit_return_type "char"
	  nparams 2
	    param in name "v" explicit_type "char"
	    param in name "len" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 273819 "exponent"
	  private explicit_return_type "char"
	  nparams 2
	    param in name "v" explicit_type "char"
	    param in name "len" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 273947 "addZeros"
	  private explicit_return_type "char"
	  nparams 2
	    param in name "v" explicit_type "char"
	    param in name "prec" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Add zeros to the requested precision."
	end

	operation 274075 "hexDouble"
	  private explicit_return_type "String"
	  nparams 2
	    param in name "d" explicit_type "double"
	    param in name "prec" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Method assumes that d > 0."
	end

	operation 274203 "print"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "value" explicit_type "BigDecimal"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 274331 "print"
	  private explicit_return_type "void"
	  nparams 7
	    param inout name "sb" explicit_type "StringBuilder"
	    param inout name "value" explicit_type "BigDecimal"
	    param inout name "l" type class_ref 138907 // Locale
	    param inout name "f" type class_ref 148763 // Flags
	    param in name "c" explicit_type "char"
	    param in name "precision" explicit_type "int"
	    param inout name "neg" explicit_type "boolean"
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " value > 0"
	end

	class 148891 "BigDecimalLayout"
	  visibility private 
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  attribute 161435 "mant"
	    private explicit_type "StringBuilder"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  attribute 161563 "exp"
	    private explicit_type "StringBuilder"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  attribute 161691 "dot"
	    private explicit_type "boolean"
	    init_value "=  false"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  operation 274459 "BigDecimalLayout"
	    public explicit_return_type ""
	    nparams 3
	      param inout name "intVal" explicit_type "BigInteger"
	      param in name "scale" explicit_type "int"
	      param inout name "form" type class_ref 148507 // BigDecimalLayoutForm
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 274587 "hasDot"
	    public explicit_return_type "boolean"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 274715 "layoutChars"
	    public explicit_return_type "char"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment " char[] with canonical string representation"
	  end

	  operation 274843 "mantissa"
	    public explicit_return_type "char"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 274971 "exponent"
	    public explicit_return_type "char"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment " The exponent will be formatted as a sign ('+' or '-') followed
 by the exponent zero-padded to include at least two digits."
	  end

	  operation 275099 "toCharArray"
	    private explicit_return_type "char"
	    nparams 1
	      param inout name "sb" explicit_type "StringBuilder"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 275227 "layout"
	    private explicit_return_type "void"
	    nparams 3
	      param inout name "intVal" explicit_type "BigInteger"
	      param in name "scale" explicit_type "int"
	      param inout name "form" type class_ref 148507 // BigDecimalLayoutForm
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	operation 275355 "adjustWidth"
	  private explicit_return_type "int"
	  nparams 3
	    param in name "width" explicit_type "int"
	    param inout name "f" type class_ref 148763 // Flags
	    param inout name "neg" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 275483 "addDot"
	  private explicit_return_type "char"
	  nparams 1
	    param in name "mant" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Add a '.' to th mantissa if required"
	end

	operation 275611 "trailingZeros"
	  private explicit_return_type "char"
	  nparams 2
	    param in name "mant" explicit_type "char"
	    param in name "nzeros" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Add trailing zeros in the case precision is greater than the number
 of available digits after the decimal separator."
	end

	operation 275739 "print"
	  private explicit_return_type "void"
	  nparams 3
	    param inout name "t" type class_ref 138523 // Calendar
	    param in name "c" explicit_type "char"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 275867 "print"
	  private explicit_return_type "Appendable"
	  nparams 4
	    param inout name "sb" explicit_type "StringBuilder"
	    param inout name "t" type class_ref 138523 // Calendar
	    param in name "c" explicit_type "char"
	    param inout name "l" type class_ref 138907 // Locale
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 275995 "failMismatch"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "f" type class_ref 148763 // Flags
	    param in name "c" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " -- Methods to support throwing exceptions --"
	end

	operation 276123 "failConversion"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "c" explicit_type "char"
	    param inout name "arg" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 276251 "getZero"
	  private explicit_return_type "char"
	  nparams 1
	    param inout name "l" type class_ref 138907 // Locale
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 276379 "localizedMagnitude"
	  private explicit_return_type "StringBuilder"
	  nparams 5
	    param inout name "sb" explicit_type "StringBuilder"
	    param in name "value" explicit_type "long"
	    param inout name "f" type class_ref 148763 // Flags
	    param in name "width" explicit_type "int"
	    param inout name "l" type class_ref 138907 // Locale
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 276507 "localizedMagnitude"
	  private explicit_return_type "StringBuilder"
	  nparams 5
	    param inout name "sb" explicit_type "StringBuilder"
	    param in name "value" explicit_type "char"
	    param inout name "f" type class_ref 148763 // Flags
	    param in name "width" explicit_type "int"
	    param inout name "l" type class_ref 138907 // Locale
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 148763 "Flags"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 161819 "flags"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 155931 // NONE (<unidirectional association>)
	  relation 155931 --->
	    a role_name "NONE" init_value "=  new Flags(0)" class_relation const_relation package
	      comment " ''"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 155931 // NONE (<unidirectional association>)
	    b parent class_ref 148763 // Flags
	end

	classrelation 156059 // LEFT_JUSTIFY (<unidirectional association>)
	  relation 156059 --->
	    a role_name "LEFT_JUSTIFY" init_value "=  new Flags(1<<0)" class_relation const_relation package
	      comment " duplicate declarations from Formattable.java
 '-'"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 156059 // LEFT_JUSTIFY (<unidirectional association>)
	    b parent class_ref 148763 // Flags
	end

	classrelation 156187 // UPPERCASE (<unidirectional association>)
	  relation 156187 --->
	    a role_name "UPPERCASE" init_value "=  new Flags(1<<1)" class_relation const_relation package
	      comment " '^'"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 156187 // UPPERCASE (<unidirectional association>)
	    b parent class_ref 148763 // Flags
	end

	classrelation 156315 // ALTERNATE (<unidirectional association>)
	  relation 156315 --->
	    a role_name "ALTERNATE" init_value "=  new Flags(1<<2)" class_relation const_relation package
	      comment " '#'"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 156315 // ALTERNATE (<unidirectional association>)
	    b parent class_ref 148763 // Flags
	end

	classrelation 156443 // PLUS (<unidirectional association>)
	  relation 156443 --->
	    a role_name "PLUS" init_value "=  new Flags(1<<3)" class_relation const_relation package
	      comment " numerics
 '+'"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 156443 // PLUS (<unidirectional association>)
	    b parent class_ref 148763 // Flags
	end

	classrelation 156571 // LEADING_SPACE (<unidirectional association>)
	  relation 156571 --->
	    a role_name "LEADING_SPACE" init_value "=  new Flags(1<<4)" class_relation const_relation package
	      comment " ' '"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 156571 // LEADING_SPACE (<unidirectional association>)
	    b parent class_ref 148763 // Flags
	end

	classrelation 156699 // ZERO_PAD (<unidirectional association>)
	  relation 156699 --->
	    a role_name "ZERO_PAD" init_value "=  new Flags(1<<5)" class_relation const_relation package
	      comment " '0'"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 156699 // ZERO_PAD (<unidirectional association>)
	    b parent class_ref 148763 // Flags
	end

	classrelation 156827 // GROUP (<unidirectional association>)
	  relation 156827 --->
	    a role_name "GROUP" init_value "=  new Flags(1<<6)" class_relation const_relation package
	      comment " ','"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 156827 // GROUP (<unidirectional association>)
	    b parent class_ref 148763 // Flags
	end

	classrelation 156955 // PARENTHESES (<unidirectional association>)
	  relation 156955 --->
	    a role_name "PARENTHESES" init_value "=  new Flags(1<<7)" class_relation const_relation package
	      comment " '('"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 156955 // PARENTHESES (<unidirectional association>)
	    b parent class_ref 148763 // Flags
	end

	classrelation 157083 // PREVIOUS (<unidirectional association>)
	  relation 157083 --->
	    a role_name "PREVIOUS" init_value "=  new Flags(1<<8)" class_relation const_relation package
	      comment " indexing
 '<'"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 157083 // PREVIOUS (<unidirectional association>)
	    b parent class_ref 148763 // Flags
	end

	operation 276635 "Flags"
	  private explicit_return_type ""
	  nparams 1
	    param in name "f" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 276763 "valueOf"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 276891 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "f" type class_ref 148763 // Flags
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 277019 "dup"
	  public return_type class_ref 148763 // Flags
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 277147 "add"
	  private return_type class_ref 148763 // Flags
	  nparams 1
	    param inout name "f" type class_ref 148763 // Flags
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 277275 "remove"
	  public return_type class_ref 148763 // Flags
	  nparams 1
	    param inout name "f" type class_ref 148763 // Flags
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 277403 "parse"
	  class_operation public return_type class_ref 148763 // Flags
	  nparams 1
	    param in name "s" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 277531 "parse"
	  class_operation private return_type class_ref 148763 // Flags
	  nparams 1
	    param in name "c" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " parse those flags which may be provided by users"
	end

	operation 277659 "toString"
	  class_operation public explicit_return_type "String"
	  nparams 1
	    param inout name "f" type class_ref 148763 // Flags
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Returns a string representation of the current <tt>Flags</tt>."
	end

	operation 277787 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 149019 "Conversion"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 161947 "DECIMAL_INTEGER"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'd'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Byte, Short, Integer, Long, BigInteger
 (and associated primitives due to autoboxing)"
	end

	attribute 162075 "OCTAL_INTEGER"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'o'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 162203 "HEXADECIMAL_INTEGER"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'x'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 162331 "HEXADECIMAL_INTEGER_UPPER"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'X'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 162459 "SCIENTIFIC"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'e'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Float, Double, BigDecimal
 (and associated primitives due to autoboxing)"
	end

	attribute 162587 "SCIENTIFIC_UPPER"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'E'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 162715 "GENERAL"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'g'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 162843 "GENERAL_UPPER"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'G'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 162971 "DECIMAL_FLOAT"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'f'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 163099 "HEXADECIMAL_FLOAT"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'a'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 163227 "HEXADECIMAL_FLOAT_UPPER"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'A'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 163355 "CHARACTER"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'c'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Character, Byte, Short, Integer
 (and associated primitives due to autoboxing)"
	end

	attribute 163483 "CHARACTER_UPPER"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'C'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 163611 "DATE_TIME"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  't'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " java.util.Date, java.util.Calendar, long"
	end

	attribute 163739 "DATE_TIME_UPPER"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'T'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 163867 "BOOLEAN"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'b'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " if (arg.TYPE != boolean) return boolean
 if (arg != null) return true; else return false;"
	end

	attribute 163995 "BOOLEAN_UPPER"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'B'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 164123 "STRING"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  's'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " if (arg instanceof Formattable) arg.formatTo()
 else arg.toString();"
	end

	attribute 164251 "STRING_UPPER"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'S'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 164379 "HASHCODE"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'h'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " arg.hashCode()"
	end

	attribute 164507 "HASHCODE_UPPER"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'H'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 164635 "LINE_SEPARATOR"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'n'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 164763 "PERCENT_SIGN"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  '%'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 277915 "isValid"
	  class_operation package explicit_return_type "boolean"
	  nparams 1
	    param in name "c" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 278043 "isGeneral"
	  class_operation package explicit_return_type "boolean"
	  nparams 1
	    param in name "c" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Returns true iff the Conversion is applicable to all objects."
	end

	operation 278171 "isInteger"
	  class_operation package explicit_return_type "boolean"
	  nparams 1
	    param in name "c" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Returns true iff the Conversion is an integer type."
	end

	operation 278299 "isFloat"
	  class_operation package explicit_return_type "boolean"
	  nparams 1
	    param in name "c" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Returns true iff the Conversion is a floating-point type."
	end

	operation 278427 "isText"
	  class_operation package explicit_return_type "boolean"
	  nparams 1
	    param in name "c" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Returns true iff the Conversion does not require an argument"
	end
      end

      class 149147 "DateTime"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 164891 "HOUR_OF_DAY_0"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'H'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (00 - 23)"
	end

	attribute 165019 "HOUR_0"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'I'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (01 - 12)"
	end

	attribute 165147 "HOUR_OF_DAY"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'k'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (0 - 23) -- like H"
	end

	attribute 165275 "HOUR"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'l'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (1 - 12) -- like I"
	end

	attribute 165403 "MINUTE"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'M'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (00 - 59)"
	end

	attribute 165531 "NANOSECOND"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'N'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (000000000 - 999999999)"
	end

	attribute 165659 "MILLISECOND"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'L'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " jdk, not in gnu (000 - 999)"
	end

	attribute 165787 "MILLISECOND_SINCE_EPOCH"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'Q'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (0 - 99...?)"
	end

	attribute 165915 "AM_PM"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'p'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (am or pm)"
	end

	attribute 166043 "SECONDS_SINCE_EPOCH"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  's'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (0 - 99...?)"
	end

	attribute 166171 "SECOND"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'S'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (00 - 60 - leap second)"
	end

	attribute 166299 "TIME"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'T'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (24 hour hh:mm:ss)"
	end

	attribute 166427 "ZONE_NUMERIC"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'z'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (-1200 - +1200) - ls minus?"
	end

	attribute 166555 "ZONE"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'Z'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (symbol)"
	end

	attribute 166683 "NAME_OF_DAY_ABBREV"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'a'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Date
 'a'"
	end

	attribute 166811 "NAME_OF_DAY"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'A'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " 'A'"
	end

	attribute 166939 "NAME_OF_MONTH_ABBREV"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'b'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " 'b'"
	end

	attribute 167067 "NAME_OF_MONTH"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'B'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " 'B'"
	end

	attribute 167195 "CENTURY"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'C'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (00 - 99)"
	end

	attribute 167323 "DAY_OF_MONTH_0"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'd'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (01 - 31)"
	end

	attribute 167451 "DAY_OF_MONTH"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'e'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (1 - 31) -- like d"
	end

	attribute 167579 "NAME_OF_MONTH_ABBREV_X"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'h'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " *    static final char ISO_WEEK_OF_YEAR_2    = 'g'; // cross %y %V
 *    static final char ISO_WEEK_OF_YEAR_4    = 'G'; // cross %Y %V
 -- same b"
	end

	attribute 167707 "DAY_OF_YEAR"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'j'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (001 - 366)"
	end

	attribute 167835 "MONTH"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'm'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (01 - 12)"
	end

	attribute 167963 "YEAR_2"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'y'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " *    static final char DAY_OF_WEEK_1         = 'u'; // (1 - 7) Monday
 *    static final char WEEK_OF_YEAR_SUNDAY   = 'U'; // (0 - 53) Sunday+
 *    static final char WEEK_OF_YEAR_MONDAY_01 = 'V'; // (01 - 53) Monday+
 *    static final char DAY_OF_WEEK_0         = 'w'; // (0 - 6) Sunday
 *    static final char WEEK_OF_YEAR_MONDAY   = 'W'; // (00 - 53) Monday
 (00 - 99)"
	end

	attribute 168091 "YEAR_4"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'Y'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (0000 - 9999)"
	end

	attribute 168219 "TIME_12_HOUR"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'r'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Composites
 (hh:mm:ss [AP]M)"
	end

	attribute 168347 "TIME_24_HOUR"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'R'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (hh:mm same as %H:%M)"
	end

	attribute 168475 "DATE_TIME"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'c'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " *    static final char LOCALE_TIME   = 'X'; // (%H:%M:%S) - parse format?"
	end

	attribute 168603 "DATE"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'D'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (Sat Nov 04 12:02:33 EST 1999)
 (mm/dd/yy)"
	end

	attribute 168731 "ISO_STANDARD_DATE"
	  class_attribute const_attribute package explicit_type "char"
	  init_value "=  'F'"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " (%Y-%m-%d)"
	end

	operation 278555 "isValid"
	  class_operation package explicit_return_type "boolean"
	  nparams 1
	    param in name "c" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " *    static final char LOCALE_DATE           = 'x'; // (mm/dd/yy)"
	end
      end
    end

    class 147867 "FormattableFlags"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "FomattableFlags are passed to the {@link Formattable#formatTo
Formattable.formatTo()} method and modify the output format for {@linkplain
Formattable Formattables}.  Implementations of {@link Formattable} are
responsible for interpreting and validating any flags.

@version 	1.1, 04/21/04
@since  1.5"
      operation 264091 "FormattableFlags"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Explicit instantiation of this class is prohibited."
      end

      attribute 159003 "LEFT_JUSTIFY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1<<0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Left-justifies the output.  Spaces (<tt>'&#92;u0020'</tt>) will be added
at the end of the converted value as required to fill the minimum width
of the field.  If this flag is not set then the output will be
right-justified.

<p> This flag corresponds to <tt>'-'</tt> (<tt>'&#92;u002d'</tt>) in
the format specifier.

 '-'"
      end

      attribute 159131 "UPPERCASE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1<<1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Converts the output to upper case according to the rules of the
{@linkplain java.util.Locale locale} given during creation of the
<tt>formatter</tt> argument of the {@link Formattable#formatTo
formatTo()} method.  The output should be equivalent the following
invocation of {@link String#toUpperCase(java.util.Locale)}

<pre>
    out.toUpperCase() </pre>

<p> This flag corresponds to <tt>'^'</tt> (<tt>'&#92;u005e'</tt>) in
the format specifier.

 '^'"
      end

      attribute 159259 "ALTERNATE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1<<2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Requires the output to use an alternate form.  The definition of the
form is specified by the <tt>Formattable</tt>.

<p> This flag corresponds to <tt>'#'</tt> (<tt>'&#92;u0023'</tt>) in
the format specifier.

 '#'"
      end
    end

    class 149275 "FormatterClosedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when the formatter has been closed.

<p> Unless otherwise specified, passing a <tt>null</tt> argument to any
method or constructor in this class will cause a {@link
NullPointerException} to be thrown.

@version 	1.2, 12/19/03
@since 1.5"
      attribute 168859 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  18111216L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 278683 "FormatterClosedException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 149531 "GregorianCalendar"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>GregorianCalendar</code> is a concrete subclass of
<code>Calendar</code> and provides the standard calendar system
used by most of the world.

<p> <code>GregorianCalendar</code> is a hybrid calendar that
supports both the Julian and Gregorian calendar systems with the
support of a single discontinuity, which corresponds by default to
the Gregorian date when the Gregorian calendar was instituted
(October 15, 1582 in some countries, later in others).  The cutover
date may be changed by the caller by calling {@link
#setGregorianChange(Date) setGregorianChange()}.

<p>
Historically, in those countries which adopted the Gregorian calendar first,
October 4, 1582 (Julian) was thus followed by October 15, 1582 (Gregorian). This calendar models
this correctly.  Before the Gregorian cutover, <code>GregorianCalendar</code>
implements the Julian calendar.  The only difference between the Gregorian
and the Julian calendar is the leap year rule. The Julian calendar specifies
leap years every four years, whereas the Gregorian calendar omits century
years which are not divisible by 400.

<p>
<code>GregorianCalendar</code> implements <em>proleptic</em> Gregorian and
Julian calendars. That is, dates are computed by extrapolating the current
rules indefinitely far backward and forward in time. As a result,
<code>GregorianCalendar</code> may be used for all years to generate
meaningful and consistent results. However, dates obtained using
<code>GregorianCalendar</code> are historically accurate only from March 1, 4
AD onward, when modern Julian calendar rules were adopted.  Before this date,
leap year rules were applied irregularly, and before 45 BC the Julian
calendar did not even exist.

<p>
Prior to the institution of the Gregorian calendar, New Year's Day was
March 25. To avoid confusion, this calendar always uses January 1. A manual
adjustment may be made if desired for dates that are prior to the Gregorian
changeover and which fall between January 1 and March 24.

<p>Values calculated for the <code>WEEK_OF_YEAR</code> field range from 1 to
53.  Week 1 for a year is the earliest seven day period starting on
<code>getFirstDayOfWeek()</code> that contains at least
<code>getMinimalDaysInFirstWeek()</code> days from that year.  It thus
depends on the values of <code>getMinimalDaysInFirstWeek()</code>,
<code>getFirstDayOfWeek()</code>, and the day of the week of January 1.
Weeks between week 1 of one year and week 1 of the following year are
numbered sequentially from 2 to 52 or 53 (as needed).

<p>For example, January 1, 1998 was a Thursday.  If
<code>getFirstDayOfWeek()</code> is <code>MONDAY</code> and
<code>getMinimalDaysInFirstWeek()</code> is 4 (these are the values
reflecting ISO 8601 and many national standards), then week 1 of 1998 starts
on December 29, 1997, and ends on January 4, 1998.  If, however,
<code>getFirstDayOfWeek()</code> is <code>SUNDAY</code>, then week 1 of 1998
starts on January 4, 1998, and ends on January 10, 1998; the first three days
of 1998 then are part of week 53 of 1997.

<p>Values calculated for the <code>WEEK_OF_MONTH</code> field range from 0
to 6.  Week 1 of a month (the days with <code>WEEK_OF_MONTH =
1</code>) is the earliest set of at least
<code>getMinimalDaysInFirstWeek()</code> contiguous days in that month,
ending on the day before <code>getFirstDayOfWeek()</code>.  Unlike
week 1 of a year, week 1 of a month may be shorter than 7 days, need
not start on <code>getFirstDayOfWeek()</code>, and will not include days of
the previous month.  Days of a month before week 1 have a
<code>WEEK_OF_MONTH</code> of 0.

<p>For example, if <code>getFirstDayOfWeek()</code> is <code>SUNDAY</code>
and <code>getMinimalDaysInFirstWeek()</code> is 4, then the first week of
January 1998 is Sunday, January 4 through Saturday, January 10.  These days
have a <code>WEEK_OF_MONTH</code> of 1.  Thursday, January 1 through
Saturday, January 3 have a <code>WEEK_OF_MONTH</code> of 0.  If
<code>getMinimalDaysInFirstWeek()</code> is changed to 3, then January 1
through January 3 have a <code>WEEK_OF_MONTH</code> of 1.

<p>The <code>clear</code> methods set calendar field(s)
undefined. <code>GregorianCalendar</code> uses the following
default value for each calendar field if its value is undefined.

<table cellpadding=\"0\" cellspacing=\"3\" border=\"0\"
	  summary=\"GregorianCalendar default field values\" 
	  style=\"text-align: left; width: 66%;\">
  <tbody>
    <tr>
      <th style=\"vertical-align: top; background-color: rgb(204, 204, 255);
	     text-align: center;\">Field<br>
      </th>
      <th style=\"vertical-align: top; background-color: rgb(204, 204, 255);
	     text-align: center;\">Default Value<br>
      </th>
    </tr>
    <tr>
      <td style=\"vertical-align: middle;\">
		<code>ERA<br></code>
	 </td>
      <td style=\"vertical-align: middle;\">
		<code>AD<br></code>
	 </td>
    </tr>
    <tr>
      <td style=\"vertical-align: middle; background-color: rgb(238, 238, 255);\">
		<code>YEAR<br></code>
	 </td>
      <td style=\"vertical-align: middle; background-color: rgb(238, 238, 255);\">
		<code>1970<br></code>
	 </td>
    </tr>
    <tr>
      <td style=\"vertical-align: middle;\">
		<code>MONTH<br></code>
	 </td>
      <td style=\"vertical-align: middle;\">
		<code>JANUARY<br></code>
	 </td>
    </tr>
    <tr>
      <td style=\"vertical-align: top; background-color: rgb(238, 238, 255);\">
		<code>DAY_OF_MONTH<br></code>
	 </td>
      <td style=\"vertical-align: top; background-color: rgb(238, 238, 255);\">
		<code>1<br></code>
	 </td>
    </tr>
    <tr>
      <td style=\"vertical-align: middle;\">
		<code>DAY_OF_WEEK<br></code>
	 </td>
      <td style=\"vertical-align: middle;\">
		<code>the first day of week<br></code>
	 </td>
    </tr>
    <tr>
      <td style=\"vertical-align: top; background-color: rgb(238, 238, 255);\">
		<code>WEEK_OF_MONTH<br></code>
      </td>
      <td style=\"vertical-align: top; background-color: rgb(238, 238, 255);\">
		<code>0<br></code>
      </td>
    </tr>
    <tr>
      <td style=\"vertical-align: top;\">
		<code>DAY_OF_WEEK_IN_MONTH<br></code>
      </td>
      <td style=\"vertical-align: top;\">
		<code>1<br></code>
      </td>
    </tr>
    <tr>
      <td style=\"vertical-align: middle; background-color: rgb(238, 238, 255);\">
		<code>AM_PM<br></code>
      </td>
      <td style=\"vertical-align: middle; background-color: rgb(238, 238, 255);\">
		<code>AM<br></code>
      </td>
    </tr>
    <tr>
      <td style=\"vertical-align: middle;\">
		<code>HOUR, HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND<br></code>
      </td>
      <td style=\"vertical-align: middle;\">
		<code>0<br></code>
      </td>
    </tr>
  </tbody>
</table>
<br>Default values are not applicable for the fields not listed above.

<p>
<strong>Example:</strong>
<blockquote>
<pre>
// get the supported ids for GMT-08:00 (Pacific Standard Time)
String[] ids = TimeZone.getAvailableIDs(-8 * 60 * 60 * 1000);
// if no ids were returned, something is wrong. get out.
if (ids.length == 0)
    System.exit(0);

 // begin output
System.out.println(\"Current Time\");

// create a Pacific Standard Time time zone
SimpleTimeZone pdt = new SimpleTimeZone(-8 * 60 * 60 * 1000, ids[0]);

// set up rules for daylight savings time
pdt.setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);
pdt.setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);

// create a GregorianCalendar with the Pacific Daylight time zone
// and the current date and time
Calendar calendar = new GregorianCalendar(pdt);
Date trialTime = new Date();
calendar.setTime(trialTime);

// print out a bunch of interesting things
System.out.println(\"ERA: \" + calendar.get(Calendar.ERA));
System.out.println(\"YEAR: \" + calendar.get(Calendar.YEAR));
System.out.println(\"MONTH: \" + calendar.get(Calendar.MONTH));
System.out.println(\"WEEK_OF_YEAR: \" + calendar.get(Calendar.WEEK_OF_YEAR));
System.out.println(\"WEEK_OF_MONTH: \" + calendar.get(Calendar.WEEK_OF_MONTH));
System.out.println(\"DATE: \" + calendar.get(Calendar.DATE));
System.out.println(\"DAY_OF_MONTH: \" + calendar.get(Calendar.DAY_OF_MONTH));
System.out.println(\"DAY_OF_YEAR: \" + calendar.get(Calendar.DAY_OF_YEAR));
System.out.println(\"DAY_OF_WEEK: \" + calendar.get(Calendar.DAY_OF_WEEK));
System.out.println(\"DAY_OF_WEEK_IN_MONTH: \"
                   + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));
System.out.println(\"AM_PM: \" + calendar.get(Calendar.AM_PM));
System.out.println(\"HOUR: \" + calendar.get(Calendar.HOUR));
System.out.println(\"HOUR_OF_DAY: \" + calendar.get(Calendar.HOUR_OF_DAY));
System.out.println(\"MINUTE: \" + calendar.get(Calendar.MINUTE));
System.out.println(\"SECOND: \" + calendar.get(Calendar.SECOND));
System.out.println(\"MILLISECOND: \" + calendar.get(Calendar.MILLISECOND));
System.out.println(\"ZONE_OFFSET: \"
                   + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000)));
System.out.println(\"DST_OFFSET: \"
                   + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000)));

System.out.println(\"Current Time, with hour reset to 3\");
calendar.clear(Calendar.HOUR_OF_DAY); // so doesn't override
calendar.set(Calendar.HOUR, 3);
System.out.println(\"ERA: \" + calendar.get(Calendar.ERA));
System.out.println(\"YEAR: \" + calendar.get(Calendar.YEAR));
System.out.println(\"MONTH: \" + calendar.get(Calendar.MONTH));
System.out.println(\"WEEK_OF_YEAR: \" + calendar.get(Calendar.WEEK_OF_YEAR));
System.out.println(\"WEEK_OF_MONTH: \" + calendar.get(Calendar.WEEK_OF_MONTH));
System.out.println(\"DATE: \" + calendar.get(Calendar.DATE));
System.out.println(\"DAY_OF_MONTH: \" + calendar.get(Calendar.DAY_OF_MONTH));
System.out.println(\"DAY_OF_YEAR: \" + calendar.get(Calendar.DAY_OF_YEAR));
System.out.println(\"DAY_OF_WEEK: \" + calendar.get(Calendar.DAY_OF_WEEK));
System.out.println(\"DAY_OF_WEEK_IN_MONTH: \"
                   + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH));
System.out.println(\"AM_PM: \" + calendar.get(Calendar.AM_PM));
System.out.println(\"HOUR: \" + calendar.get(Calendar.HOUR));
System.out.println(\"HOUR_OF_DAY: \" + calendar.get(Calendar.HOUR_OF_DAY));
System.out.println(\"MINUTE: \" + calendar.get(Calendar.MINUTE));
System.out.println(\"SECOND: \" + calendar.get(Calendar.SECOND));
System.out.println(\"MILLISECOND: \" + calendar.get(Calendar.MILLISECOND));
System.out.println(\"ZONE_OFFSET: \"
       + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); // in hours
System.out.println(\"DST_OFFSET: \"
       + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); // in hours
</pre>
</blockquote>

@see          TimeZone
@version      1.90
@author David Goldsmith, Mark Davis, Chen-Lieh Huang, Alan Liu
@since JDK1.1"
      classrelation 157339 // <generalisation>
	relation 157339 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 157339 // <generalisation>
	  b parent class_ref 138523 // Calendar
      end

      attribute 168987 "BC"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Implementation Notes

The epoch is the number of days or milliseconds from some defined
starting point. The epoch for java.util.Date is used here; that is,
milliseconds from January 1, 1970 (Gregorian), midnight UTC.  Other
epochs which are used are January 1, year 1 (Gregorian), which is day 1
of the Gregorian calendar, and December 30, year 0 (Gregorian), which is
day 1 of the Julian calendar.

We implement the proleptic Julian and Gregorian calendars.  This means we
implement the modern definition of the calendar even though the
historical usage differs.  For example, if the Gregorian change is set
to new Date(Long.MIN_VALUE), we have a pure Gregorian calendar which
labels dates preceding the invention of the Gregorian calendar in 1582 as
if the calendar existed then.

Likewise, with the Julian calendar, we assume a consistent
4-year leap year rule, even though the historical pattern of
leap years is irregular, being every 3 years from 45 BCE
through 9 BCE, then every 4 years from 8 CE onwards, with no
leap years in-between.  Thus date computations and functions
such as isLeapYear() are not intended to be historically
accurate.

////////////////
 Class Variables
////////////////

Value of the <code>ERA</code> field indicating
the period before the common era (before Christ), also known as BCE.
The sequence of years at the transition from <code>BC</code> to <code>AD</code> is
..., 2 BC, 1 BC, 1 AD, 2 AD,...

@see #ERA
"
      end

      attribute 169115 "BCE"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #ERA} field indicating
the period before the common era, the same value as {@link #BC}.

@see #CE
"
      end

      attribute 169243 "AD"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the <code>ERA</code> field indicating
the common era (Anno Domini), also known as CE.
The sequence of years at the transition from <code>BC</code> to <code>AD</code> is
..., 2 BC, 1 BC, 1 AD, 2 AD,...

@see #ERA
"
      end

      attribute 169371 "CE"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value of the {@link #ERA} field indicating
the common era, the same value as {@link #AD}.

@see #BCE
"
      end

      attribute 169499 "EPOCH_OFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  719163"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Fixed date of January 1, 1970 (Gregorian)"
      end

      attribute 169627 "EPOCH_YEAR"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1970"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 169755 "MONTH_LENGTH"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  {31,28,31,30,31,30,31,31,30,31,30,31}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " 0-based"
      end

      attribute 169883 "LEAP_MONTH_LENGTH"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  {31,29,31,30,31,30,31,31,30,31,30,31}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " 0-based"
      end

      attribute 170011 "ONE_SECOND"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Useful millisecond constants.  Although ONE_DAY and ONE_WEEK can fit
 into ints, they must be longs in order to prevent arithmetic overflow
 when performing (bug 4173516)."
      end

      attribute 170139 "ONE_MINUTE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  60*ONE_SECOND"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 170267 "ONE_HOUR"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  60*ONE_MINUTE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 170395 "ONE_DAY"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  24*ONE_HOUR"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 170523 "ONE_WEEK"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7*ONE_DAY"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 170651 "MIN_VALUES"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  {
        BCE,		// ERA
	1,		// YEAR
	JANUARY,	// MONTH
	1,		// WEEK_OF_YEAR
	0,		// WEEK_OF_MONTH
	1,		// DAY_OF_MONTH
	1,		// DAY_OF_YEAR
	SUNDAY,		// DAY_OF_WEEK
	1,		// DAY_OF_WEEK_IN_MONTH
	AM,		// AM_PM
	0,		// HOUR
	0,		// HOUR_OF_DAY
	0,		// MINUTE
	0,		// SECOND
	0,		// MILLISECOND
	-13*ONE_HOUR,	// ZONE_OFFSET (UNIX compatibility)
	0		// DST_OFFSET
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<pre>
                           Greatest       Least 
Field name        Minimum   Minimum     Maximum     Maximum
----------        -------   -------     -------     -------
ERA                     0         0           1           1
YEAR                    1         1   292269054   292278994
MONTH                   0         0          11          11
WEEK_OF_YEAR            1         1          52*         53
WEEK_OF_MONTH           0         0           4*          6
DAY_OF_MONTH            1         1          28*         31
DAY_OF_YEAR             1         1         365*        366
DAY_OF_WEEK             1         1           7           7
DAY_OF_WEEK_IN_MONTH   -1        -1           4*          6
AM_PM                   0         0           1           1
HOUR                    0         0          11          11
HOUR_OF_DAY             0         0          23          23
MINUTE                  0         0          59          59
SECOND                  0         0          59          59
MILLISECOND             0         0         999         999
ZONE_OFFSET        -13:00    -13:00       14:00       14:00
DST_OFFSET           0:00      0:00        0:20        2:00
</pre>
*: depends on the Gregorian change date
"
      end

      attribute 170779 "LEAST_MAX_VALUES"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  {
        CE,		// ERA
	292269054,	// YEAR
	DECEMBER,	// MONTH
	52,		// WEEK_OF_YEAR
	4,		// WEEK_OF_MONTH
	28,		// DAY_OF_MONTH
	365,		// DAY_OF_YEAR
	SATURDAY,	// DAY_OF_WEEK
	4,		// DAY_OF_WEEK_IN
	PM,		// AM_PM
	11,		// HOUR
	23,		// HOUR_OF_DAY
	59,		// MINUTE
	59,		// SECOND
	999,		// MILLISECOND
	14*ONE_HOUR,	// ZONE_OFFSET
	20*ONE_MINUTE	// DST_OFFSET (historical least maximum)
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 170907 "MAX_VALUES"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  {
        CE,		// ERA
	292278994,	// YEAR
	DECEMBER,	// MONTH
	53,		// WEEK_OF_YEAR
	6,		// WEEK_OF_MONTH
	31,		// DAY_OF_MONTH
	366,		// DAY_OF_YEAR
	SATURDAY,	// DAY_OF_WEEK
	6,		// DAY_OF_WEEK_IN
	PM,		// AM_PM
	11,		// HOUR
	23,		// HOUR_OF_DAY
	59,		// MINUTE
	59,		// SECOND
	999,		// MILLISECOND
	14*ONE_HOUR,	// ZONE_OFFSET
	2*ONE_HOUR	// DST_OFFSET (double summer time)
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 171035 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -8125100834729963327L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Proclaim serialization compatibility with JDK 1.1"
      end

      attribute 171163 "gcal"
	class_attribute const_attribute private explicit_type "Gregorian"
	init_value "= 
				CalendarSystem.getGregorianCalendar()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Reference to the sun.util.calendar.Gregorian instance (singleton)."
      end

      attribute 171291 "jcal"
	class_attribute private explicit_type "JulianCalendar"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Reference to the JulianCalendar instance (singleton), set as needed. See
 getJulianCalendarSystem()."
      end

      attribute 171419 "jeras"
	class_attribute private explicit_type "Era"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " JulianCalendar eras. See getJulianCalendarSystem()."
      end

      attribute 171547 "DEFAULT_GREGORIAN_CUTOVER"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -12219292800000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The default value of gregorianCutover."
      end

      attribute 171675 "gregorianCutover"
	private explicit_type "long"
	init_value "=  DEFAULT_GREGORIAN_CUTOVER"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "///////////////////
 Instance Variables
///////////////////

The point at which the Gregorian calendar rules are used, measured in
milliseconds from the standard epoch.  Default is October 15, 1582
(Gregorian) 00:00:00 UTC or -12219292800000L.  For this value, October 4,
1582 (Julian) is followed by October 15, 1582 (Gregorian).  This
corresponds to Julian day number 2299161.
@serial
"
      end

      attribute 171803 "gregorianCutoverDate"
	private explicit_type "long"
	init_value "= 
    	(((DEFAULT_GREGORIAN_CUTOVER + 1)/ONE_DAY) - 1) + EPOCH_OFFSET"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The fixed date of the gregorianCutover.

 == 577736"
      end

      attribute 171931 "gregorianCutoverYear"
	private explicit_type "int"
	init_value "=  1582"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The normalized year of the gregorianCutover in Gregorian, with
0 representing 1 BCE, -1 representing 2 BCE, etc.
"
      end

      attribute 172059 "gregorianCutoverYearJulian"
	private explicit_type "int"
	init_value "=  1582"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The normalized year of the gregorianCutover in Julian, with 0
representing 1 BCE, -1 representing 2 BCE, etc.
"
      end

      attribute 172187 "gdate"
	private explicit_type "BaseCalendar.Date"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "gdate always has a sun.util.calendar.Gregorian.Date instance to
avoid overhead of creating it. The assumption is that most
applications will need only Gregorian calendar calculations.
"
      end

      attribute 172315 "cdate"
	private explicit_type "BaseCalendar.Date"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Reference to either gdate or a JulianCalendar.Date
instance. After calling complete(), this value is guaranteed to
be set.
"
      end

      attribute 172443 "calsys"
	private explicit_type "BaseCalendar"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The CalendarSystem used to calculate the date in cdate. After
calling complete(), this value is guaranteed to be set and
consistent with the cdate value.
"
      end

      attribute 172571 "zoneOffsets"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Temporary int[2] to get time zone offsets. zoneOffsets[0] gets
the GMT offset value and zoneOffsets[1] gets the DST saving
value.
"
      end

      attribute 172699 "originalFields"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Temporary storage for saving original fields[] values in
non-lenient mode.
"
      end

      operation 278811 "GregorianCalendar"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/////////////
 Constructors
/////////////

Constructs a default <code>GregorianCalendar</code> using the current time
in the default time zone with the default locale."
      end

      operation 278939 "GregorianCalendar"
	public explicit_return_type ""
	nparams 1
	  param inout name "zone" type class_ref 138779 // TimeZone
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>GregorianCalendar</code> based on the current time
in the given time zone with the default locale.

@param zone the given time zone."
      end

      operation 279067 "GregorianCalendar"
	public explicit_return_type ""
	nparams 1
	  param inout name "aLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>GregorianCalendar</code> based on the current time
in the default time zone with the given locale.

@param aLocale the given locale."
      end

      operation 279195 "GregorianCalendar"
	public explicit_return_type ""
	nparams 2
	  param inout name "zone" type class_ref 138779 // TimeZone
	  param inout name "aLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>GregorianCalendar</code> based on the current time
in the given time zone with the given locale.

@param zone the given time zone.
@param aLocale the given locale."
      end

      operation 279323 "GregorianCalendar"
	public explicit_return_type ""
	nparams 3
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>GregorianCalendar</code> with the given date set
in the default time zone with the default locale.

@param year the value used to set the <code>YEAR</code> calendar field in the calendar.
@param month the value used to set the <code>MONTH</code> calendar field in the calendar.
Month value is 0-based. e.g., 0 for January.
@param dayOfMonth the value used to set the <code>DAY_OF_MONTH</code> calendar field in the calendar."
      end

      operation 279451 "GregorianCalendar"
	public explicit_return_type ""
	nparams 5
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	  param in name "hourOfDay" explicit_type "int"
	  param in name "minute" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>GregorianCalendar</code> with the given date
and time set for the default time zone with the default locale.

@param year the value used to set the <code>YEAR</code> calendar field in the calendar.
@param month the value used to set the <code>MONTH</code> calendar field in the calendar.
Month value is 0-based. e.g., 0 for January.
@param dayOfMonth the value used to set the <code>DAY_OF_MONTH</code> calendar field in the calendar.
@param hourOfDay the value used to set the <code>HOUR_OF_DAY</code> calendar field
in the calendar.
@param minute the value used to set the <code>MINUTE</code> calendar field
in the calendar."
      end

      operation 279579 "GregorianCalendar"
	public explicit_return_type ""
	nparams 6
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	  param in name "hourOfDay" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a GregorianCalendar with the given date
and time set for the default time zone with the default locale.

@param year the value used to set the <code>YEAR</code> calendar field in the calendar.
@param month the value used to set the <code>MONTH</code> calendar field in the calendar.
Month value is 0-based. e.g., 0 for January.
@param dayOfMonth the value used to set the <code>DAY_OF_MONTH</code> calendar field in the calendar.
@param hourOfDay the value used to set the <code>HOUR_OF_DAY</code> calendar field
in the calendar.
@param minute the value used to set the <code>MINUTE</code> calendar field
in the calendar.
@param second the value used to set the <code>SECOND</code> calendar field
in the calendar."
      end

      operation 279707 "GregorianCalendar"
	package explicit_return_type ""
	nparams 7
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	  param in name "hourOfDay" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	  param in name "millis" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>GregorianCalendar</code> with the given date
and time set for the default time zone with the default locale.

@param year the value used to set the <code>YEAR</code> calendar field in the calendar.
@param month the value used to set the <code>MONTH</code> calendar field in the calendar.
Month value is 0-based. e.g., 0 for January.
@param dayOfMonth the value used to set the <code>DAY_OF_MONTH</code> calendar field in the calendar.
@param hourOfDay the value used to set the <code>HOUR_OF_DAY</code> calendar field
in the calendar.
@param minute the value used to set the <code>MINUTE</code> calendar field
in the calendar.
@param second the value used to set the <code>SECOND</code> calendar field
in the calendar.
@param millis the value used to set the <code>MILLISECOND</code> calendar field"
      end

      operation 279835 "setGregorianChange"
	public explicit_return_type "void"
	nparams 1
	  param inout name "date" type class_ref 139163 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "///////////////
 Public methods
///////////////

Sets the <code>GregorianCalendar</code> change date. This is the point when the switch
from Julian dates to Gregorian dates occurred. Default is October 15,
1582 (Gregorian). Previous to this, dates will be in the Julian calendar.
<p>
To obtain a pure Julian calendar, set the change date to
<code>Date(Long.MAX_VALUE)</code>.  To obtain a pure Gregorian calendar,
set the change date to <code>Date(Long.MIN_VALUE)</code>.

@param date the given Gregorian cutover date."
      end

      operation 279963 "setGregorianChange"
	private explicit_return_type "void"
	nparams 1
	  param in name "cutoverTime" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 280091 "getGregorianChange"
	public return_type class_ref 139163 // Date
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the Gregorian Calendar change date.  This is the point when the
switch from Julian dates to Gregorian dates occurred. Default is
October 15, 1582 (Gregorian). Previous to this, dates will be in the Julian
calendar.

@return the Gregorian cutover date for this <code>GregorianCalendar</code> object."
      end

      operation 280219 "isLeapYear"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the given year is a leap year. Returns <code>true</code> if
the given year is a leap year. To specify BC year numbers,
<code>1 - year number</code> must be given. For example, year BC 4 is
specified as -3.

@param year the given year.
@return <code>true</code> if the given year is a leap year; <code>false</code> otherwise."
      end

      operation 280347 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>GregorianCalendar</code> to the specified
<code>Object</code>. The result is <code>true</code> if and
only if the argument is a <code>GregorianCalendar</code> object
that represents the same time value (millisecond offset from
the <a href=\"Calendar.html#Epoch\">Epoch</a>) under the same
<code>Calendar</code> parameters and Gregorian change date as
this object.

@param obj the object to compare with.
@return <code>true</code> if this object is equal to <code>obj</code>;
<code>false</code> otherwise.
@see Calendar#compareTo(Calendar)"
      end

      operation 280475 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the hash code for this <code>GregorianCalendar</code> object."
      end

      operation 280603 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "field" explicit_type "int"
	  param in name "amount" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified (signed) amount of time to the given calendar field,
based on the calendar's rules.

<p><em>Add rule 1</em>. The value of <code>field</code>
after the call minus the value of <code>field</code> before the
call is <code>amount</code>, modulo any overflow that has occurred in
<code>field</code>. Overflow occurs when a field value exceeds its
range and, as a result, the next larger field is incremented or
decremented and the field value is adjusted back into its range.</p>

<p><em>Add rule 2</em>. If a smaller field is expected to be
invariant, but it is impossible for it to be equal to its
prior value because of changes in its minimum or maximum after
<code>field</code> is changed, then its value is adjusted to be as close
as possible to its expected value. A smaller field represents a
smaller unit of time. <code>HOUR</code> is a smaller field than
<code>DAY_OF_MONTH</code>. No adjustment is made to smaller fields
that are not expected to be invariant. The calendar system
determines what fields are expected to be invariant.</p>

@param field the calendar field.
@param amount the amount of date or time to be added to the field.
@exception IllegalArgumentException if <code>field</code> is
<code>ZONE_OFFSET</code>, <code>DST_OFFSET</code>, or unknown,
or if any calendar fields have out-of-range values in
non-lenient mode."
      end

      operation 280731 "roll"
	public explicit_return_type "void"
	nparams 2
	  param in name "field" explicit_type "int"
	  param inout name "up" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds or subtracts (up/down) a single unit of time on the given time
field without changing larger fields. 
<p>
<em>Example</em>: Consider a <code>GregorianCalendar</code>
originally set to December 31, 1999. Calling {@link #roll(int,boolean) roll(Calendar.MONTH, true)}
sets the calendar to January 31, 1999.  The <code>YEAR</code> field is unchanged
because it is a larger field than <code>MONTH</code>.</p>

@param up indicates if the value of the specified calendar field is to be
rolled up or rolled down. Use <code>true</code> if rolling up, <code>false</code> otherwise.
@exception IllegalArgumentException if <code>field</code> is
<code>ZONE_OFFSET</code>, <code>DST_OFFSET</code>, or unknown,
or if any calendar fields have out-of-range values in
non-lenient mode.
@see #add(int,int)
@see #set(int,int)"
      end

      operation 280859 "roll"
	public explicit_return_type "void"
	nparams 2
	  param in name "field" explicit_type "int"
	  param in name "amount" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a signed amount to the specified calendar field without changing larger fields.
A negative roll amount means to subtract from field without changing 
larger fields. If the specified amount is 0, this method performs nothing.

<p>This method calls {@link #complete()} before adding the
amount so that all the calendar fields are normalized. If there
is any calendar field having an out-of-range value in non-lenient mode, then an
<code>IllegalArgumentException</code> is thrown.

<p>
<em>Example</em>: Consider a <code>GregorianCalendar</code>
originally set to August 31, 1999. Calling <code>roll(Calendar.MONTH,
8)</code> sets the calendar to April 30, <strong>1999</strong>. Using a
<code>GregorianCalendar</code>, the <code>DAY_OF_MONTH</code> field cannot
be 31 in the month April. <code>DAY_OF_MONTH</code> is set to the closest possible
value, 30. The <code>YEAR</code> field maintains the value of 1999 because it
is a larger field than <code>MONTH</code>.
<p>
<em>Example</em>: Consider a <code>GregorianCalendar</code>
originally set to Sunday June 6, 1999. Calling
<code>roll(Calendar.WEEK_OF_MONTH, -1)</code> sets the calendar to
Tuesday June 1, 1999, whereas calling
<code>add(Calendar.WEEK_OF_MONTH, -1)</code> sets the calendar to
Sunday May 30, 1999. This is because the roll rule imposes an
additional constraint: The <code>MONTH</code> must not change when the
<code>WEEK_OF_MONTH</code> is rolled. Taken together with add rule 1,
the resultant date must be between Tuesday June 1 and Saturday June
5. According to add rule 2, the <code>DAY_OF_WEEK</code>, an invariant
when changing the <code>WEEK_OF_MONTH</code>, is set to Tuesday, the
closest possible value to Sunday (where Sunday is the first day of the
week).</p>

@param field the calendar field.
@param amount the signed amount to add to <code>field</code>.
@exception IllegalArgumentException if <code>field</code> is
<code>ZONE_OFFSET</code>, <code>DST_OFFSET</code>, or unknown,
or if any calendar fields have out-of-range values in
non-lenient mode.
@see #roll(int,boolean)
@see #add(int,int)
@see #set(int,int)
@since 1.2"
      end

      operation 280987 "getMinimum"
	public explicit_return_type "int"
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum value for the given calendar field of this
<code>GregorianCalendar</code> instance. The minimum value is
defined as the smallest value returned by the {@link
Calendar#get(int) get} method for any possible time value,
taking into consideration the current values of the
{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},
{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
{@link #getGregorianChange(Date) getGregorianChange} and
{@link Calendar#getTimeZone() getTimeZone} methods.

@param field the calendar field.
@return the minimum value for the given calendar field.
@see #getMaximum(int)
@see #getGreatestMinimum(int)
@see #getLeastMaximum(int)
@see #getActualMinimum(int)
@see #getActualMaximum(int)"
      end

      operation 281115 "getMaximum"
	public explicit_return_type "int"
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum value for the given calendar field of this
<code>GregorianCalendar</code> instance. The maximum value is
defined as the largest value returned by the {@link
Calendar#get(int) get} method for any possible time value,
taking into consideration the current values of the
{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},
{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
{@link #getGregorianChange(Date) getGregorianChange} and
{@link Calendar#getTimeZone() getTimeZone} methods.

@param field the calendar field.
@return the maximum value for the given calendar field.
@see #getMinimum(int)
@see #getGreatestMinimum(int)
@see #getLeastMaximum(int)
@see #getActualMinimum(int)
@see #getActualMaximum(int)"
      end

      operation 281243 "getGreatestMinimum"
	public explicit_return_type "int"
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the highest minimum value for the given calendar field
of this <code>GregorianCalendar</code> instance. The highest
minimum value is defined as the largest value returned by
{@link #getActualMinimum(int)} for any possible time value,
taking into consideration the current values of the
{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},
{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
{@link #getGregorianChange(Date) getGregorianChange} and
{@link Calendar#getTimeZone() getTimeZone} methods.

@param field the calendar field.
@return the highest minimum value for the given calendar field.
@see #getMinimum(int)
@see #getMaximum(int)
@see #getLeastMaximum(int)
@see #getActualMinimum(int)
@see #getActualMaximum(int)"
      end

      operation 281371 "getLeastMaximum"
	public explicit_return_type "int"
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lowest maximum value for the given calendar field
of this <code>GregorianCalendar</code> instance. The lowest
maximum value is defined as the smallest value returned by
{@link #getActualMaximum(int)} for any possible time value,
taking into consideration the current values of the
{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},
{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
{@link #getGregorianChange(Date) getGregorianChange} and
{@link Calendar#getTimeZone() getTimeZone} methods.

@param field the calendar field
@return the lowest maximum value for the given calendar field.
@see #getMinimum(int)
@see #getMaximum(int)
@see #getGreatestMinimum(int)
@see #getActualMinimum(int)
@see #getActualMaximum(int)"
      end

      operation 281499 "getActualMinimum"
	public explicit_return_type "int"
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum value that this calendar field could have,
taking into consideration the given time value and the current
values of the
{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},
{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
{@link #getGregorianChange(Date) getGregorianChange} and
{@link Calendar#getTimeZone() getTimeZone} methods.

<p>For example, if the Gregorian change date is January 10,
1970 and the date of this <code>GregorianCalendar</code> is
January 20, 1970, the actual minimum value of the
<code>DAY_OF_MONTH</code> field is 10 because the previous date
of January 10, 1970 is December 27, 1996 (in the Julian
calendar). Therefore, December 28, 1969 to January 9, 1970
don't exist.

@param field the calendar field
@return the minimum of the given field for the time value of
this <code>GregorianCalendar</code>
@see #getMinimum(int)
@see #getMaximum(int)
@see #getGreatestMinimum(int)
@see #getLeastMaximum(int)
@see #getActualMaximum(int)
@since 1.2"
      end

      operation 281627 "getActualMaximum"
	public explicit_return_type "int"
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum value that this calendar field could have,
taking into consideration the given time value and the current
values of the
{@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},
{@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},
{@link #getGregorianChange(Date) getGregorianChange} and
{@link Calendar#getTimeZone() getTimeZone} methods.
For example, if the date of this instance is February 1, 2004,
the actual maximum value of the <code>DAY_OF_MONTH</code> field
is 29 because 2004 is a leap year, and if the date of this
instance is February 1, 2005, it's 28.

@param field the calendar field
@return the maximum of the given field for the time value of
this <code>GregorianCalendar</code>
@see #getMinimum(int)
@see #getMaximum(int)
@see #getGreatestMinimum(int)
@see #getLeastMaximum(int)
@see #getActualMinimum(int)
@since 1.2"
      end

      operation 281755 "getYearOffsetInMillis"
	private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the millisecond offset from the beginning of this
year. This Calendar object must have been normalized."
      end

      operation 281883 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 282011 "getTimeZone"
	public return_type class_ref 138779 // TimeZone
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 282139 "setTimeZone"
	public explicit_return_type "void"
	nparams 1
	  param inout name "zone" type class_ref 138779 // TimeZone
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 172827 "cachedFixedDate"
	private explicit_type "long"
	init_value "=  Long.MIN_VALUE"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "////////////////////
 Proposed public API
////////////////////

Returns the year that corresponds to the <code>WEEK_OF_YEAR</code> field.
This may be one year before or after the Gregorian or Julian year stored
in the <code>YEAR</code> field.  For example, January 1, 1999 is considered
Friday of week 53 of 1998 (if minimal days in first week is
2 or less, and the first day of the week is Sunday).  Given
these same settings, the ISO year of January 1, 1999 is
1998.

<p>This method calls {@link Calendar#complete} before
calculating the week-based year.

@return the year corresponding to the <code>WEEK_OF_YEAR</code> field, which
may be one year before or after the <code>YEAR</code> field.
@see #YEAR
@see #WEEK_OF_YEAR


public int getWeekBasedYear() {
complete();
// TODO: Below doesn't work for gregorian cutover...
int weekOfYear = internalGet(WEEK_OF_YEAR);
int year = internalGet(YEAR);
if (internalGet(MONTH) == Calendar.JANUARY) {
if (weekOfYear >= 52) {
--year;
}
} else {
if (weekOfYear == 1) {
++year;
}
}
return year;
}

///////////////////////////
 Time => Fields computation
///////////////////////////

The fixed date corresponding to gdate. If the value is
Long.MIN_VALUE, the fixed date value is unknown. Currently,
Julian calendar dates are not cached.
"
      end

      operation 282267 "computeFields"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the time value (millisecond offset from the <a
href=\"Calendar.html#Epoch\">Epoch</a>) to calendar field values.
The time is <em>not</em>
recomputed first; to recompute the time, then the fields, call the
<code>complete</code> method.

@see Calendar#complete"
      end

      operation 282395 "computeFields"
	private explicit_return_type "int"
	nparams 2
	  param in name "fieldMask" explicit_type "int"
	  param in name "tzMask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This computeFields implements the conversion from UTC
(millisecond offset from the Epoch) to calendar
field values. fieldMask specifies which fields to change the
setting state to COMPUTED, although all fields are set to
the correct values. This is required to fix 4685354.

@param fieldMask a bit mask to specify which fields to change
the setting state.
@param tzMask a bit mask to specify which time zone offset
fields to be used for time calculations
@return a new field mask that indicates what field values have
actually been set."
      end

      operation 282523 "getWeekNumber"
	private explicit_return_type "int"
	nparams 2
	  param in name "fixedDay1" explicit_type "long"
	  param in name "fixedDate" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of weeks in a period between fixedDay1 and
fixedDate. The getFirstDayOfWeek-getMinimalDaysInFirstWeek rule
is applied to calculate the number of weeks.

@param fixedDay1 the fixed date of the first day of the period
@param fixedDate the fixed date of the last day of the period
@return the number of weeks of the given period"
      end

      operation 282651 "computeTime"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts calendar field values to the time value (millisecond
offset from the <a href=\"Calendar.html#Epoch\">Epoch</a>).

@exception IllegalArgumentException if any calendar fields are invalid."
      end

      operation 282779 "getFixedDate"
	private explicit_return_type "long"
	nparams 3
	  param inout name "cal" explicit_type "BaseCalendar"
	  param in name "year" explicit_type "int"
	  param in name "fieldMask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the fixed date under either the Gregorian or the
Julian calendar, using the given year and the specified calendar fields.

@param cal the CalendarSystem to be used for the date calculation
@param year the normalized year number, with 0 indicating the
year 1 BCE, -1 indicating 2 BCE, etc.
@param fieldMask the calendar fields to be used for the date calculation
@return the fixed date
@see Calendar#selectFields"
      end

      operation 282907 "getNormalizedCalendar"
	private return_type class_ref 149531 // GregorianCalendar
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this object if it's normalized (all fields and time are
in sync). Otherwise, a cloned object is returned after calling
complete() in lenient mode."
      end

      operation 283035 "getJulianCalendarSystem"
	class_operation private explicit_return_type "BaseCalendar"
	nparams 0
	
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Julian calendar system instance (singleton). 'jcal'
and 'jeras' are set upon the return."
      end

      operation 283163 "getCutoverCalendarSystem"
	private explicit_return_type "BaseCalendar"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the calendar system for dates before the cutover date
in the cutover year. If the cutover date is January 1, the
method returns Gregorian. Otherwise, Julian."
      end

      operation 283291 "isCutoverYear"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "normalizedYear" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified year (normalized) is the Gregorian
cutover year. This object must have been normalized."
      end

      operation 283419 "getFixedDateJan1"
	private explicit_return_type "long"
	nparams 2
	  param inout name "date" explicit_type "BaseCalendar.Date"
	  param in name "fixedDate" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the fixed date of the first day of the year (usually
January 1) before the specified date.

@param date the date for which the first day of the year is
calculated. The date has to be in the cut-over year (Gregorian
or Julian).
@param fixedDate the fixed date representation of the date"
      end

      operation 283547 "getFixedDateMonth1"
	private explicit_return_type "long"
	nparams 2
	  param inout name "date" explicit_type "BaseCalendar.Date"
	  param in name "fixedDate" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the fixed date of the first date of the month (usually
the 1st of the month) before the specified date.

@param date the date for which the first day of the month is
calculated. The date has to be in the cut-over year (Gregorian
or Julian).
@param fixedDate the fixed date representation of the date"
      end

      operation 283675 "getCalendarDate"
	private explicit_return_type "BaseCalendar.Date"
	nparams 1
	  param in name "fd" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a CalendarDate produced from the specified fixed date.

@param fd the fixed date"
      end

      operation 283803 "getGregorianCutoverDate"
	private explicit_return_type "BaseCalendar.Date"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Gregorian cutover date as a BaseCalendar.Date. The
date is a Gregorian date."
      end

      operation 283931 "getLastJulianDate"
	private explicit_return_type "BaseCalendar.Date"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the day before the Gregorian cutover date as a
BaseCalendar.Date. The date is a Julian date."
      end

      operation 284059 "monthLength"
	private explicit_return_type "int"
	nparams 2
	  param in name "month" explicit_type "int"
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the specified month in the specified
year. The year number must be normalized.

@see #isLeapYear(int)"
      end

      operation 284187 "monthLength"
	private explicit_return_type "int"
	nparams 1
	  param in name "month" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the specified month in the year provided
by internalGet(YEAR).

@see #isLeapYear(int)"
      end

      operation 284315 "actualMonthLength"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 284443 "yearLength"
	private explicit_return_type "int"
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length (in days) of the specified year. The year
must be normalized."
      end

      operation 284571 "yearLength"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length (in days) of the year provided by
internalGet(YEAR)."
      end

      operation 284699 "pinDayOfMonth"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "After adjustments such as add(MONTH), add(YEAR), we don't want the
month to jump around.  E.g., we don't want Jan 31 + 1 month to go to Mar
3, we want it to go to Feb 28.  Adjustments which might run into this
problem call this method to retain the proper month."
      end

      operation 284827 "getCurrentFixedDate"
	private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the fixed date value of this object. The time value and
calendar fields must be in synch."
      end

      operation 284955 "getRolledValue"
	class_operation private explicit_return_type "int"
	nparams 4
	  param in name "value" explicit_type "int"
	  param in name "amount" explicit_type "int"
	  param in name "min" explicit_type "int"
	  param in name "max" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the new value after 'roll'ing the specified value and amount."
      end

      operation 285083 "internalGetEra"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ERA.  We need a special method for this because the
default ERA is CE, but a zero (unset) ERA is BCE."
      end

      operation 285211 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" explicit_type "ObjectInputStream"
	nexceptions 2
	  explicit_exception "IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates internal state."
      end
    end

    class 149659 "HashSet"
      visibility public 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 8
      actual class class_ref 137499 // AbstractSet
        rank 0 explicit_value "E"
      actual class class_ref 137499 // AbstractSet
        rank 1 explicit_value ""
      actual class class_ref 137499 // AbstractSet
        rank 2 explicit_value ""
      actual class class_ref 137499 // AbstractSet
        rank 3 explicit_value ""
      actual class class_ref 136731 // Set
        rank 0 explicit_value "E"
      actual class class_ref 136731 // Set
        rank 1 explicit_value ""
      actual class class_ref 136731 // Set
        rank 2 explicit_value ""
      actual class class_ref 136731 // Set
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class implements the <tt>Set</tt> interface, backed by a hash table
(actually a <tt>HashMap</tt> instance).  It makes no guarantees as to the
iteration order of the set; in particular, it does not guarantee that the
order will remain constant over time.  This class permits the <tt>null</tt>
element.<p>

This class offers constant time performance for the basic operations
(<tt>add</tt>, <tt>remove</tt>, <tt>contains</tt> and <tt>size</tt>),
assuming the hash function disperses the elements properly among the
buckets.  Iterating over this set requires time proportional to the sum of
the <tt>HashSet</tt> instance's size (the number of elements) plus the
\"capacity\" of the backing <tt>HashMap</tt> instance (the number of
buckets).  Thus, it's very important not to set the initial capacity too
high (or the load factor too low) if iteration performance is important.<p>

<b>Note that this implementation is not synchronized.</b> If multiple
threads access a set concurrently, and at least one of the threads modifies
the set, it <i>must</i> be synchronized externally.  This is typically
accomplished by synchronizing on some object that naturally encapsulates
the set.  If no such object exists, the set should be \"wrapped\" using the
<tt>Collections.synchronizedSet</tt> method.  This is best done at creation
time, to prevent accidental unsynchronized access to the <tt>HashSet</tt>
instance:

<pre>
    Set s = Collections.synchronizedSet(new HashSet(...));
</pre><p>

The iterators returned by this class's <tt>iterator</tt> method are
<i>fail-fast</i>: if the set is modified at any time after the iterator is
created, in any way except through the iterator's own <tt>remove</tt>
method, the Iterator throws a <tt>ConcurrentModificationException</tt>.
Thus, in the face of concurrent modification, the iterator fails quickly
and cleanly, rather than risking arbitrary, non-deterministic behavior at
an undetermined time in the future.

<p>Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw <tt>ConcurrentModificationException</tt> on a best-effort basis. 
Therefore, it would be wrong to write a program that depended on this
exception for its correctness: <i>the fail-fast behavior of iterators
should be used only to detect bugs.</i><p>

This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@author  Neal Gafter
@version 1.33, 12/19/03
@see	    Collection
@see	    Set
@see	    TreeSet
@see	    Collections#synchronizedSet(Set)
@see	    HashMap
@since   1.2"
      classrelation 158107 // <realization>
	relation 158107 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 158107 // <realization>
	  b parent class_ref 137499 // AbstractSet
      end

      classrelation 158235 // <realization>
	relation 158235 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 158235 // <realization>
	  b parent class_ref 136731 // Set
      end

      classrelation 158491 // <realization>
	relation 158491 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 158491 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 174107 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -5024744406713321676L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 158619 // map (<unidirectional association>)
	relation 158619 --->
	  a role_name "map" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E,Object> ${name}${value};
"
	    classrelation_ref 158619 // map (<unidirectional association>)
	  b parent class_ref 144923 // HashMap
      end

      attribute 174235 "PRESENT"
	class_attribute const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Dummy value to associate with an Object in the backing Map"
      end

      operation 289563 "HashSet"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty set; the backing <tt>HashMap</tt> instance has
default initial capacity (16) and load factor (0.75)."
      end

      operation 289691 "HashSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new set containing the elements in the specified
collection.  The <tt>HashMap</tt> is created with default load factor
(0.75) and an initial capacity sufficient to contain the elements in
the specified collection.

@param c the collection whose elements are to be placed into this set.
@throws NullPointerException   if the specified collection is null."
      end

      operation 289819 "HashSet"
	public explicit_return_type ""
	nparams 2
	  param in name "initialCapacity" explicit_type "int"
	  param in name "loadFactor" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty set; the backing <tt>HashMap</tt> instance has
the specified initial capacity and the specified load factor.

@param      initialCapacity   the initial capacity of the hash map.
@param      loadFactor        the load factor of the hash map.
@throws     IllegalArgumentException if the initial capacity is less
            than zero, or if the load factor is nonpositive."
      end

      operation 289947 "HashSet"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty set; the backing <tt>HashMap</tt> instance has
the specified initial capacity and default load factor, which is
<tt>0.75</tt>.

@param      initialCapacity   the initial capacity of the hash table.
@throws     IllegalArgumentException if the initial capacity is less
            than zero."
      end

      operation 290075 "HashSet"
	package explicit_return_type ""
	nparams 3
	  param in name "initialCapacity" explicit_type "int"
	  param in name "loadFactor" explicit_type "float"
	  param inout name "dummy" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty linked hash set.  (This package private
constructor is only used by LinkedHashSet.) The backing 
HashMap instance is a LinkedHashMap with the specified initial
capacity and the specified load factor.

@param      initialCapacity   the initial capacity of the hash map.
@param      loadFactor        the load factor of the hash map.
@param      dummy             ignored (distinguishes this
            constructor from other int, float constructor.)
@throws     IllegalArgumentException if the initial capacity is less
            than zero, or if the load factor is nonpositive."
      end

      operation 290203 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this set.  The elements
are returned in no particular order.

@return an Iterator over the elements in this set.
@see ConcurrentModificationException"
      end

      operation 290331 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this set (its cardinality).

@return the number of elements in this set (its cardinality)."
      end

      operation 290459 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this set contains no elements.

@return <tt>true</tt> if this set contains no elements."
      end

      operation 290587 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this set contains the specified element.

@param o element whose presence in this set is to be tested.
@return <tt>true</tt> if this set contains the specified element."
      end

      operation 290715 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to this set if it is not already
present.

@param o element to be added to this set.
@return <tt>true</tt> if the set did not already contain the specified
element."
      end

      operation 290843 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified element from this set if it is present.

@param o object to be removed from this set, if present.
@return <tt>true</tt> if the set contained the specified element."
      end

      operation 290971 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this set."
      end

      operation 291099 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow copy of this <tt>HashSet</tt> instance: the elements
themselves are not cloned.

@return a shallow copy of this set."
      end

      operation 291227 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectOutputStream"
	nexceptions 1
	  explicit_exception "java.io.IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state of this <tt>HashSet</tt> instance to a stream (that is,
serialize this set).

@serialData The capacity of the backing <tt>HashMap</tt> instance
		   (int), and its load factor (float) are emitted, followed by
		   the size of the set (the number of elements it contains)
		   (int), followed by all of its elements (each an Object) in
            no particular order."
      end

      operation 291355 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectInputStream"
	nexceptions 2
	  explicit_exception "java.io.IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the <tt>HashSet</tt> instance from a stream (that is,
deserialize it)."
      end
    end

    class 150171 "IdentityHashMap"
      visibility public 
      nformals 8
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 16
      actual class class_ref 136475 // AbstractMap
        rank 0 explicit_value "K"
      actual class class_ref 136475 // AbstractMap
        rank 1 explicit_value "V"
      actual class class_ref 136475 // AbstractMap
        rank 2 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 3 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 4 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 5 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 6 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 7 explicit_value ""
      actual class class_ref 136603 // Map
        rank 0 explicit_value "K"
      actual class class_ref 136603 // Map
        rank 1 explicit_value "V"
      actual class class_ref 136603 // Map
        rank 2 explicit_value ""
      actual class class_ref 136603 // Map
        rank 3 explicit_value ""
      actual class class_ref 136603 // Map
        rank 4 explicit_value ""
      actual class class_ref 136603 // Map
        rank 5 explicit_value ""
      actual class class_ref 136603 // Map
        rank 6 explicit_value ""
      actual class class_ref 136603 // Map
        rank 7 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class implements the <tt>Map</tt> interface with a hash table, using
reference-equality in place of object-equality when comparing keys (and
values).  In other words, in an <tt>IdentityHashMap</tt>, two keys
<tt>k1</tt> and <tt>k2</tt> are considered equal if and only if
<tt>(k1==k2)</tt>.  (In normal <tt>Map</tt> implementations (like
<tt>HashMap</tt>) two keys <tt>k1</tt> and <tt>k2</tt> are considered equal
if and only if <tt>(k1==null ? k2==null : k1.equals(k2))</tt>.)

<p><b>This class is <i>not</i> a general-purpose <tt>Map</tt>
implementation!  While this class implements the <tt>Map</tt> interface, it
intentionally violates <tt>Map's</tt> general contract, which mandates the
use of the <tt>equals</tt> method when comparing objects.  This class is
designed for use only in the rare cases wherein reference-equality
semantics are required.</b>

<p>A typical use of this class is <i>topology-preserving object graph
transformations</i>, such as serialization or deep-copying.  To perform such
a transformation, a program must maintain a \"node table\" that keeps track
of all the object references that have already been processed.  The node
table must not equate distinct objects even if they happen to be equal.
Another typical use of this class is to maintain <i>proxy objects</i>.  For
example, a debugging facility might wish to maintain a proxy object for
each object in the program being debugged.

<p>This class provides all of the optional map operations, and permits
<tt>null</tt> values and the <tt>null</tt> key.  This class makes no
guarantees as to the order of the map; in particular, it does not guarantee
that the order will remain constant over time.

<p>This class provides constant-time performance for the basic
operations (<tt>get</tt> and <tt>put</tt>), assuming the system
identity hash function ({@link System#identityHashCode(Object)})
disperses elements properly among the buckets.

<p>This class has one tuning parameter (which affects performance but not
semantics): <i>expected maximum size</i>.  This parameter is the maximum
number of key-value mappings that the map is expected to hold.  Internally,
this parameter is used to determine the number of buckets initially
comprising the hash table.  The precise relationship between the expected
maximum size and the number of buckets is unspecified.

<p>If the size of the map (the number of key-value mappings) sufficiently
exceeds the expected maximum size, the number of buckets is increased
Increasing the number of buckets (\"rehashing\") may be fairly expensive, so
it pays to create identity hash maps with a sufficiently large expected
maximum size.  On the other hand, iteration over collection views requires
time proportional to the number of buckets in the hash table, so it
pays not to set the expected maximum size too high if you are especially
concerned with iteration performance or memory usage.

<p><b>Note that this implementation is not synchronized.</b> If multiple
threads access this map concurrently, and at least one of the threads
modifies the map structurally, it <i>must</i> be synchronized externally.
(A structural modification is any operation that adds or deletes one or
more mappings; merely changing the value associated with a key that an
instance already contains is not a structural modification.)  This is
typically accomplished by synchronizing on some object that naturally
encapsulates the map.  If no such object exists, the map should be
\"wrapped\" using the <tt>Collections.synchronizedMap</tt> method.  This is
best done at creation time, to prevent accidental unsynchronized access to
the map: <pre>
    Map m = Collections.synchronizedMap(new HashMap(...));
</pre>

<p>The iterators returned by all of this class's \"collection view methods\"
are <i>fail-fast</i>: if the map is structurally modified at any time after
the iterator is created, in any way except through the iterator's own
<tt>remove</tt> or <tt>add</tt> methods, the iterator will throw a
<tt>ConcurrentModificationException</tt>.  Thus, in the face of concurrent
modification, the iterator fails quickly and cleanly, rather than risking
arbitrary, non-deterministic behavior at an undetermined time in the
future.

<p>Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw <tt>ConcurrentModificationException</tt> on a best-effort basis.
Therefore, it would be wrong to write a program that depended on this
exception for its correctness: <i>fail-fast iterators should be used only
to detect bugs.</i>

<p>Implementation note: This is a simple <i>linear-probe</i> hash table,
as described for example in texts by Sedgewick and Knuth.  The array
alternates holding keys and values.  (This has better locality for large
tables than does using separate arrays.)  For many JRE implementations
and operation mixes, this class will yield better performance than
{@link HashMap} (which uses <i>chaining</i> rather than linear-probing).

<p>This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@see     System#identityHashCode(Object)
@see     Object#hashCode()
@see     Collection
@see	    Map
@see	    HashMap
@see	    TreeMap
@author  Doug Lea and Josh Bloch
@since   1.4"
      classrelation 160155 // <realization>
	relation 160155 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 160155 // <realization>
	  b parent class_ref 136475 // AbstractMap
      end

      classrelation 160283 // <realization>
	relation 160283 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 160283 // <realization>
	  b parent class_ref 136603 // Map
      end

      classrelation 160411 // <realization>
	relation 160411 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 160411 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 175003 "DEFAULT_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The initial capacity used by the no-args constructor.
MUST be a power of two.  The value 32 corresponds to the
(specified) expected maximum size of 21, given a load factor
of 2/3.
"
      end

      attribute 175131 "MINIMUM_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum capacity, used if a lower value is implicitly specified
by either of the constructors with arguments.  The value 4 corresponds
to an expected maximum size of 2, given a load factor of 2/3.
MUST be a power of two.
"
      end

      attribute 175259 "MAXIMUM_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1 << 29"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum capacity, used if a higher value is implicitly specified
by either of the constructors with arguments.
MUST be a power of two <= 1<<29.
"
      end

      attribute 175387 "table"
	private explicit_type "Object"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The table, resized as necessary. Length MUST always be a power of two.
"
      end

      attribute 175515 "size"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of key-value mappings contained in this identity hash map.

@serial
"
      end

      attribute 175643 "modCount"
	volatile private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of modifications, to support fast-fail iterators
"
      end

      attribute 175771 "threshold"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The next size value at which to resize (capacity * load factor).
"
      end

      attribute 175899 "NULL_KEY"
	class_attribute const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Value representing null keys inside tables.
"
      end

      operation 297115 "maskNull"
	class_operation private explicit_return_type "Object"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Use NULL_KEY for key if it is null."
      end

      operation 297243 "unmaskNull"
	class_operation private explicit_return_type "Object"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return internal representation of null key back to caller as null"
      end

      operation 297371 "IdentityHashMap"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty identity hash map with a default expected
maximum size (21)."
      end

      operation 297499 "IdentityHashMap"
	public explicit_return_type ""
	nparams 1
	  param in name "expectedMaxSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty map with the specified expected maximum size.
Putting more than the expected number of key-value mappings into
the map may cause the internal data structure to grow, which may be
somewhat time-consuming.

@param expectedMaxSize the expected maximum size of the map.
@throws IllegalArgumentException if <tt>expectedMaxSize</tt> is negative"
      end

      operation 297627 "capacity"
	private explicit_return_type "int"
	nparams 1
	  param in name "expectedMaxSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the appropriate capacity for the specified expected maximum
size.  Returns the smallest power of two between MINIMUM_CAPACITY
and MAXIMUM_CAPACITY, inclusive, that is greater than
(3 * expectedMaxSize)/2, if such a number exists.  Otherwise
returns MAXIMUM_CAPACITY.  If (3 * expectedMaxSize)/2 is negative, it
is assumed that overflow has occurred, and MAXIMUM_CAPACITY is returned."
      end

      operation 297755 "init"
	private explicit_return_type "void"
	nparams 1
	  param in name "initCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize object to be an empty map with the specified initial
capacity, which is assumed to be a power of two between
MINIMUM_CAPACITY and MAXIMUM_CAPACITY inclusive."
      end

      operation 297883 "IdentityHashMap"
	public explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new identity hash map containing the keys-value mappings
in the specified map.

@param m the map whose mappings are to be placed into this map.
@throws NullPointerException if the specified map is null."
      end

      operation 298011 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of key-value mappings in this identity hash map.

@return the number of key-value mappings in this map."
      end

      operation 298139 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this identity hash map contains no key-value
mappings.

@return <tt>true</tt> if this identity hash map contains no key-value
        mappings."
      end

      operation 298267 "hash"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "x" explicit_type "Object"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return index for Object x."
      end

      operation 298395 "nextKeyIndex"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Circularly traverse table of size len."
      end

      operation 298523 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which the specified key is mapped in this identity
hash map, or <tt>null</tt> if the map contains no mapping for
this key.  A return value of <tt>null</tt> does not <i>necessarily</i>
indicate that the map contains no mapping for the key; it is also
possible that the map explicitly maps the key to <tt>null</tt>. The
<tt>containsKey</tt> method may be used to distinguish these two
cases.

@param   key the key whose associated value is to be returned.
@return  the value to which this map maps the specified key, or
         <tt>null</tt> if the map contains no mapping for this key.
@see #put(Object, Object)"
      end

      operation 298651 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the specified object reference is a key in this identity
hash map.

@param   key   possible key.
@return  <code>true</code> if the specified object reference is a key
         in this map.
@see     #containsValue(Object)"
      end

      operation 298779 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the specified object reference is a value in this identity
hash map.

@param value value whose presence in this map is to be tested.
@return <tt>true</tt> if this map maps one or more keys to the
        specified object reference.
@see     #containsKey(Object)"
      end

      operation 298907 "containsMapping"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "key" explicit_type "Object"
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the specified key-value mapping is in the map.

@param   key   possible key.
@param   value possible value.
@return  <code>true</code> if and only if the specified key-value
         mapping is in map."
      end

      operation 299035 "put"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates the specified value with the specified key in this identity
hash map.  If the map previously contained a mapping for this key, the
old value is replaced.

@param key the key with which the specified value is to be associated.
@param value the value to be associated with the specified key.
@return the previous value associated with <tt>key</tt>, or
	       <tt>null</tt> if there was no mapping for <tt>key</tt>.  (A
        <tt>null</tt> return can also indicate that the map previously
        associated <tt>null</tt> with the specified key.)
@see     Object#equals(Object)
@see     #get(Object)
@see     #containsKey(Object)"
      end

      operation 299163 "resize"
	private explicit_return_type "void"
	nparams 1
	  param in name "newCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resize the table to hold given capacity.

@param newCapacity the new capacity, must be a power of two."
      end

      operation 299291 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies all of the mappings from the specified map to this map
These mappings will replace any mappings that
this map had for any of the keys currently in the specified map.<p>

@param t mappings to be stored in this map.
@throws NullPointerException if the specified map is null."
      end

      operation 299419 "remove"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the mapping for this key from this map if present.

@param key key whose mapping is to be removed from the map.
@return previous value associated with specified key, or <tt>null</tt>
	       if there was no entry for key.  (A <tt>null</tt> return can
	       also indicate that the map previously associated <tt>null</tt>
	       with the specified key.)"
      end

      operation 299547 "removeMapping"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "key" explicit_type "Object"
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified key-value mapping from the map if it is present.

@param   key   possible key.
@param   value possible value.
@return  <code>true</code> if and only if the specified key-value
         mapping was in map."
      end

      operation 299675 "closeDeletion"
	private explicit_return_type "void"
	nparams 1
	  param in name "d" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Rehash all possibly-colliding entries following a
deletion. This preserves the linear-probe
collision properties required by get, put, etc.

@param d the index of a newly empty deleted slot"
      end

      operation 299803 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all mappings from this map."
      end

      operation 299931 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified object with this map for equality.  Returns
<tt>true</tt> if the given object is also a map and the two maps
represent identical object-reference mappings.  More formally, this
map is equal to another map <tt>m</tt> if and only if
map <tt>this.entrySet().equals(m.entrySet())</tt>.

<p><b>Owing to the reference-equality-based semantics of this map it is
possible that the symmetry and transitivity requirements of the
<tt>Object.equals</tt> contract may be violated if this map is compared
to a normal map.  However, the <tt>Object.equals</tt> contract is
guaranteed to hold among <tt>IdentityHashMap</tt> instances.</b>

@param  o object to be compared for equality with this map.
@return <tt>true</tt> if the specified object is equal to this map.
@see Object#equals(Object)"
      end

      operation 300059 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this map.  The hash code of a map
is defined to be the sum of the hashcode of each entry in the map's
entrySet view.  This ensures that <tt>t1.equals(t2)</tt> implies
that <tt>t1.hashCode()==t2.hashCode()</tt> for any two
<tt>IdentityHashMap</tt> instances <tt>t1</tt> and <tt>t2</tt>, as
required by the general contract of {@link Object#hashCode()}.

<p><b>Owing to the reference-equality-based semantics of the
<tt>Map.Entry</tt> instances in the set returned by this map's
<tt>entrySet</tt> method, it is possible that the contractual
requirement of <tt>Object.hashCode</tt> mentioned in the previous
paragraph will be violated if one of the two objects being compared is
an <tt>IdentityHashMap</tt> instance and the other is a normal map.</b>

@return the hash code value for this map.
@see Object#hashCode()
@see Object#equals(Object)
@see #equals(Object)"
      end

      operation 300187 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow copy of this identity hash map: the keys and values
themselves are not cloned.

@return a shallow copy of this map."
      end

      class 150299 "IdentityHashMapIterator"
	abstract visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "T"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 160667 // <realization>
	  relation 160667 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 160667 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	attribute 176027 "index"
	  package explicit_type "int"
	  init_value "=  (size != 0 ? 0 : table.length)"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " current slot."
	end

	attribute 176155 "expectedModCount"
	  package explicit_type "int"
	  init_value "=  modCount"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " to support fast-fail"
	end

	attribute 176283 "lastReturnedIndex"
	  package explicit_type "int"
	  init_value "=  -1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " to allow remove()"
	end

	attribute 176411 "indexValid"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " To avoid unnecessary next computation"
	end

	attribute 176539 "traversalTable"
	  package explicit_type "Object"
	  multiplicity "[]"
	  init_value "=  table"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " reference to main table or copy"
	end

	operation 300315 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 300443 "nextIndex"
	  protected explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 300571 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 150427 "KeyIterator"
	visibility private 
	nactuals 9
	actual class class_ref 150171 // IdentityHashMap
	  rank 0 explicit_value "K"
	actual class class_ref 150171 // IdentityHashMap
	  rank 1 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 2 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 3 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 4 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 5 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 6 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 7 explicit_value ""
	actual class class_ref 150299 // IdentityHashMapIterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 160795 // <realization>
	  relation 160795 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 160795 // <realization>
	    b parent class_ref 150299 // IdentityHashMapIterator
	end

	operation 300699 "next"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 150555 "ValueIterator"
	visibility private 
	nactuals 9
	actual class class_ref 150171 // IdentityHashMap
	  rank 0 explicit_value "V"
	actual class class_ref 150171 // IdentityHashMap
	  rank 1 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 2 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 3 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 4 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 5 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 6 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 7 explicit_value ""
	actual class class_ref 150299 // IdentityHashMapIterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 160923 // <realization>
	  relation 160923 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 160923 // <realization>
	    b parent class_ref 150299 // IdentityHashMapIterator
	end

	operation 300827 "next"
	  public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 150683 "EntryIterator"
	visibility private 
	nactuals 21
	actual class class_ref 150171 // IdentityHashMap
	  rank 0 explicit_value "Map.Entry<K,V>"
	actual class class_ref 150171 // IdentityHashMap
	  rank 1 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 2 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 3 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 4 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 5 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 6 explicit_value ""
	actual class class_ref 150171 // IdentityHashMap
	  rank 7 explicit_value ""
	actual class class_ref 150299 // IdentityHashMapIterator
	  rank 0 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 0 explicit_value "K"
	actual class class_ref 136603 // Map
	  rank 1 explicit_value "V"
	actual class class_ref 136603 // Map
	  rank 2 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 3 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 4 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 5 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 6 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 7 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 0 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 1 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 2 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 161051 // <realization>
	  relation 161051 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 161051 // <realization>
	    b parent class_ref 150299 // IdentityHashMapIterator
	end

	classrelation 161179 // <realization>
	  relation 161179 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 161179 // <realization>
	    b parent class_ref 136859 // Entry
	end

	operation 300955 "next"
	  public return_type class_ref 136859 // Entry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 301083 "getKey"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 301211 "getValue"
	  public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 301339 "setValue"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 301467 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 301595 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 301723 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 161307 // entrySet (<unidirectional association>)
	relation 161307 --->
	  a role_name "entrySet" init_value "=  null" private
	    comment " Views

This field is initialized to contain an instance of the entry set
view the first time this view is requested.  The view is stateless,
so there's no reason to create more than one.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	    classrelation_ref 161307 // entrySet (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      operation 301851 "keySet"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an identity-based set view of the keys contained in this map.
The set is backed by the map, so changes to the map are reflected in
the set, and vice-versa.  If the map is modified while an iteration
over the set is in progress, the results of the iteration are
undefined.  The set supports element removal, which removes the
corresponding mapping from the map, via the <tt>Iterator.remove</tt>,
<tt>Set.remove</tt>, <tt>removeAll</tt> <tt>retainAll</tt>, and
<tt>clear</tt> methods.  It does not support the <tt>add</tt> or
<tt>addAll</tt> methods.

<p><b>While the object returned by this method implements the
<tt>Set</tt> interface, it does <i>not</i> obey <tt>Set's</tt> general
contract.  Like its backing map, the set returned by this method
defines element equality as reference-equality rather than
object-equality.  This affects the behavior of its <tt>contains</tt>,
<tt>remove</tt>, <tt>containsAll</tt>, <tt>equals</tt>, and
<tt>hashCode</tt> methods.</b>

<p>The <tt>equals</tt> method of the returned set returns <tt>true</tt>
only if the specified object is a set containing exactly the same
object references as the returned set.  The symmetry and transitivity
requirements of the <tt>Object.equals</tt> contract may be violated if
the set returned by this method is compared to a normal set.  However,
the <tt>Object.equals</tt> contract is guaranteed to hold among sets
returned by this method.</b>

<p>The <tt>hashCode</tt> method of the returned set returns the sum of
the <i>identity hashcodes</i> of the elements in the set, rather than
the sum of their hashcodes.  This is mandated by the change in the
semantics of the <tt>equals</tt> method, in order to enforce the
general contract of the <tt>Object.hashCode</tt> method among sets
returned by this method.

@return an identity-based set view of the keys contained in this map.
@see Object#equals(Object)
@see System#identityHashCode(Object)"
      end

      class 150811 "KeySet"
	visibility private 
	nactuals 4
	actual class class_ref 137499 // AbstractSet
	  rank 0 explicit_value "K"
	actual class class_ref 137499 // AbstractSet
	  rank 1 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 2 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 161435 // <realization>
	  relation 161435 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 161435 // <realization>
	    b parent class_ref 137499 // AbstractSet
	end

	operation 301979 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 302107 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 302235 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 302363 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 302491 "removeAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "c" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Must revert from AbstractSet's impl to AbstractCollection's, as
the former contains an optimization that results in incorrect
behavior when c is a smaller \"normal\" (non-identity-based) Set."
	end

	operation 302619 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 302747 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 302875 "values"
	public return_type class_ref 135067 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns a collection view of the values contained in this map.  The
collection is backed by the map, so changes to the map are reflected in
the collection, and vice-versa.  If the map is modified while an
iteration over the collection is in progress, the results of the
iteration are undefined.  The collection supports element removal,
which removes the corresponding mapping from the map, via the
<tt>Iterator.remove</tt>, <tt>Collection.remove</tt>,
<tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> methods.
It does not support the <tt>add</tt> or <tt>addAll</tt> methods.

<p><b>While the object returned by this method implements the
<tt>Collection</tt> interface, it does <i>not</i> obey
<tt>Collection's</tt> general contract.  Like its backing map,
the collection returned by this method defines element equality as
reference-equality rather than object-equality.  This affects the
behavior of its <tt>contains</tt>, <tt>remove</tt> and
<tt>containsAll</tt> methods.</b>

@return a collection view of the values contained in this map."
      end

      class 150939 "Values"
	visibility private 
	nactuals 4
	actual class class_ref 134939 // AbstractCollection
	  rank 0 explicit_value "V"
	actual class class_ref 134939 // AbstractCollection
	  rank 1 explicit_value ""
	actual class class_ref 134939 // AbstractCollection
	  rank 2 explicit_value ""
	actual class class_ref 134939 // AbstractCollection
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 161563 // <realization>
	  relation 161563 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 161563 // <realization>
	    b parent class_ref 134939 // AbstractCollection
	end

	operation 303003 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 303131 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 303259 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 303387 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 303515 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 303643 "entrySet"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a set view of the mappings contained in this map.  Each element
in the returned set is a reference-equality-based <tt>Map.Entry</tt>.
The set is backed by the map, so changes to the map are reflected in
the set, and vice-versa.  If the map is modified while an iteration
over the set is in progress, the results of the iteration are
undefined.  The set supports element removal, which removes the
corresponding mapping from the map, via the <tt>Iterator.remove</tt>,
<tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and
<tt>clear</tt> methods.  It does not support the <tt>add</tt> or
<tt>addAll</tt> methods.

<p>Like the backing map, the <tt>Map.Entry</tt> objects in the set
returned by this method define key and value equality as
reference-equality rather than object-equality.  This affects the
behavior of the <tt>equals</tt> and <tt>hashCode</tt> methods of these
<tt>Map.Entry</tt> objects.  A reference-equality based <tt>Map.Entry
e</tt> is equal to an object <tt>o</tt> if and only if <tt>o</tt> is a
<tt>Map.Entry</tt> and <tt>e.getKey()==o.getKey() &&
e.getValue()==o.getValue()</tt>.  To accommodate these equals
semantics, the <tt>hashCode</tt> method returns
<tt>System.identityHashCode(e.getKey()) ^
System.identityHashCode(e.getValue())</tt>.

<p><b>Owing to the reference-equality-based semantics of the
<tt>Map.Entry</tt> instances in the set returned by this method,
it is possible that the symmetry and transitivity requirements of
the {@link Object#equals(Object)} contract may be violated if any of
the entries in the set is compared to a normal map entry, or if
the set returned by this method is compared to a set of normal map
entries (such as would be returned by a call to this method on a normal
map).  However, the <tt>Object.equals</tt> contract is guaranteed to
hold among identity-based map entries, and among sets of such entries.
</b>

@return a set view of the identity-mappings contained in this map."
      end

      class 151067 "EntrySet"
	visibility private 
	nactuals 4
	actual class class_ref 137499 // AbstractSet
	  rank 0 explicit_value "Map.Entry<K,V>"
	actual class class_ref 137499 // AbstractSet
	  rank 1 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 2 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 161691 // <realization>
	  relation 161691 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 161691 // <realization>
	    b parent class_ref 137499 // AbstractSet
	end

	operation 303771 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 303899 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 304027 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 304155 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 304283 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 304411 "removeAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "c" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Must revert from AbstractSet's impl to AbstractCollection's, as
the former contains an optimization that results in incorrect
behavior when c is a smaller \"normal\" (non-identity-based) Set."
	end

	operation 304539 "toArray"
	  public explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 304667 "toArray"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 176667 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  8188218128353913216L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 304795 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectOutputStream"
	nexceptions 1
	  explicit_exception "java.io.IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state of the <tt>IdentityHashMap</tt> instance to a stream
(i.e., serialize it).

@serialData The <i>size</i> of the HashMap (the number of key-value
	        mappings) (<tt>int</tt>), followed by the key (Object) and
         value (Object) for each key-value mapping represented by the
         IdentityHashMap.  The key-value mappings are emitted in no
         particular order."
      end

      operation 304923 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectInputStream"
	nexceptions 2
	  explicit_exception "java.io.IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the <tt>IdentityHashMap</tt> instance from a stream (i.e.,
deserialize it)."
      end

      operation 305051 "putForCreate"
	private explicit_return_type "void"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The put method for readObject.  It does not resize the table,
update modcount, etc."
      end
    end

    class 151195 "IllegalFormatCodePointException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when a character with an invalid Unicode code
point as defined by {@link Character#isValidCodePoint} is passed to the
{@link Formatter}.

<p> Unless otherwise specified, passing a <tt>null</tt> argument to any
method or constructor in this class will cause a {@link
NullPointerException} to be thrown.

@version 	1.2, 12/19/03
@since 1.5"
      classrelation 161819 // <generalisation>
	relation 161819 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 161819 // <generalisation>
	  b parent class_ref 145435 // IllegalFormatException
      end

      attribute 176795 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  19080630L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 176923 "c"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 305179 "IllegalFormatCodePointException"
	public explicit_return_type ""
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class with the specified illegal code
point as defined by {@link Character#isValidCodePoint}.

@param  c
        The illegal Unicode code point"
      end

      operation 305307 "getCodePoint"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the illegal code point as defined by {@link
Character#isValidCodePoint}.

@return  The illegal Unicode code point"
      end

      operation 305435 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 151323 "IllegalFormatConversionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when the argument corresponding to the format
specifier is of an incompatible type.

<p> Unless otherwise specified, passing a <tt>null</tt> argument to any
method or constructor in this class will cause a {@link
NullPointerException} to be thrown.

@version 	1.3, 05/05/04
@since 1.5"
      classrelation 161947 // <generalisation>
	relation 161947 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 161947 // <generalisation>
	  b parent class_ref 145435 // IllegalFormatException
      end

      attribute 177051 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  17000126L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 177179 "c"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 177307 "arg"
	private explicit_type "Class"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 305563 "IllegalFormatConversionException"
	public explicit_return_type ""
	nparams 2
	  param in name "c" explicit_type "char"
	  param inout name "arg" explicit_type "Class<?>"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class with the mismatched conversion and
the corresponding argument class.

@param  c
        Inapplicable conversion

@param  arg
        Class of the mismatched argument"
      end

      operation 305691 "getConversion"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the inapplicable conversion.

@return  The inapplicable conversion"
      end

      operation 305819 "getArgumentClass"
	public explicit_return_type "Class<?>"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class of the mismatched argument.

@return   The class of the mismatched argument"
      end

      operation 305947 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " javadoc inherited from Throwable.java"
      end
    end

    class 151451 "IllegalFormatFlagsException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when an illegal combination flags is given.

<p> Unless otherwise specified, passing a <tt>null</tt> argument to any
method or constructor in this class will cause a {@link
NullPointerException} to be thrown.

@version 	1.2, 12/19/03
@since 1.5"
      classrelation 162075 // <generalisation>
	relation 162075 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 162075 // <generalisation>
	  b parent class_ref 145435 // IllegalFormatException
      end

      attribute 177435 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  790824L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 177563 "flags"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 306075 "IllegalFormatFlagsException"
	public explicit_return_type ""
	nparams 1
	  param in name "f" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class with the specified flags.

@param  f
        The set of format flags which contain an illegal combination"
      end

      operation 306203 "getFlags"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of flags which contains an illegal combination.

@return  The flags"
      end

      operation 306331 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 151579 "IllegalFormatPrecisionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when the precision is a negative value other than
<tt>-1</tt>, the conversion does not support a precision, or the value is
otherwise unsupported.

@version 	1.4, 06/07/04
@since 1.5"
      classrelation 162203 // <generalisation>
	relation 162203 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 162203 // <generalisation>
	  b parent class_ref 145435 // IllegalFormatException
      end

      attribute 177691 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  18711008L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 177819 "p"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 306459 "IllegalFormatPrecisionException"
	public explicit_return_type ""
	nparams 1
	  param in name "p" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class with the specified precision.

@param  p
        The precision"
      end

      operation 306587 "getPrecision"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the precision

@return  The precision"
      end

      operation 306715 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 151707 "IllegalFormatWidthException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when the format width is a negative value other
than <tt>-1</tt> or is otherwise unsupported.

@version 	1.4, 06/07/04
@since 1.5"
      classrelation 162331 // <generalisation>
	relation 162331 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 162331 // <generalisation>
	  b parent class_ref 145435 // IllegalFormatException
      end

      attribute 177947 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  16660902L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 178075 "w"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 306843 "IllegalFormatWidthException"
	public explicit_return_type ""
	nparams 1
	  param in name "w" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class with the specified width.

@param  w
        The width"
      end

      operation 306971 "getWidth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the width

@return  The width"
      end

      operation 307099 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 151835 "InputMismatchException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown by a <code>Scanner</code> to indicate that the token
retrieved does not match the pattern for the expected type, or
that the token is out of range for the expected type.

@author  unascribed
@version 1.3 12/19/03
@see     java.util.Scanner
@since   1.5"
      classrelation 162587 // <generalisation>
	relation 162587 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 162587 // <generalisation>
	  b parent class_ref 151963 // NoSuchElementException
      end

      operation 307483 "InputMismatchException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>InputMismatchException</code> with <tt>null</tt> 
as its error message string."
      end

      operation 307611 "InputMismatchException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>InputMismatchException</code>, saving a reference 
to the error message string <tt>s</tt> for later retrieval by the 
<tt>getMessage</tt> method.

@param   s   the detail message."
      end
    end

    class 151963 "NoSuchElementException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown by the <code>nextElement</code> method of an 
<code>Enumeration</code> to indicate that there are no more 
elements in the enumeration. 

@author  unascribed
@version 1.21, 12/19/03
@see     java.util.Enumeration
@see     java.util.Enumeration#nextElement()
@since   JDK1.0"
      operation 307227 "NoSuchElementException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NoSuchElementException</code> with <tt>null</tt> 
as its error message string."
      end

      operation 307355 "NoSuchElementException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NoSuchElementException</code>, saving a reference 
to the error message string <tt>s</tt> for later retrieval by the 
<tt>getMessage</tt> method.

@param   s   the detail message."
      end
    end

    class 152091 "InvalidPropertiesFormatException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown to indicate that an operation could not complete because
the input did not conform to the appropriate XML document type
for a collection of properties, as per the {@link Properties} 
specification.<p>

Note, that although InvalidPropertiesFormatException inherits Serializable
interface from Exception, it is not intended to be Serializable. Appropriate
serialization methods are implemented to throw NotSerializableException.

@version 1.3 03/12/19
@see     Properties
@since   1.5
@serial exclude"
      operation 307739 "InvalidPropertiesFormatException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" explicit_type "Throwable"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an InvalidPropertiesFormatException with the specified
cause.

@param  cause the cause (which is saved for later retrieval by the
        {@link Throwable#getCause()} method)."
      end

      operation 307867 "InvalidPropertiesFormatException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an InvalidPropertiesFormatException with the specified
detail message.

@param   message   the detail message. The detail message is saved for 
         later retrieval by the {@link Throwable#getMessage()} method."
      end

      operation 307995 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "java.io.ObjectOutputStream"
	nexceptions 1
	  explicit_exception "NotSerializableException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws NotSerializableException, since InvalidPropertiesFormatException
objects are not intended to be serializable."
      end

      operation 308123 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" explicit_type "java.io.ObjectInputStream"
	nexceptions 1
	  explicit_exception "NotSerializableException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws NotSerializableException, since InvalidPropertiesFormatException
objects are not intended to be serializable."
      end
    end

    class 152347 "JumboEnumSet"
      visibility package 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 146843 // EnumSet
        rank 0 explicit_value "E"
      actual class class_ref 146843 // EnumSet
        rank 1 explicit_value ""
      actual class class_ref 146843 // EnumSet
        rank 2 explicit_value ""
      actual class class_ref 146843 // EnumSet
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Private implementation class for EnumSet, for \"jumbo\" enum types
(i.e., those with more than 64 elements).

@author Josh Bloch
@since 1.5
@serial exclude"
      classrelation 162843 // <realization>
	relation 162843 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 162843 // <realization>
	  b parent class_ref 146843 // EnumSet
      end

      attribute 178203 "elements"
	private explicit_type "long"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit vector representation of this set.  The ith bit of the jth
element of this array represents the  presence of universe[64*j +i]
in this set.
"
      end

      attribute 178331 "size"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Redundant - maintained for performance"
      end

      operation 308251 "JumboEnumSet"
	package explicit_return_type ""
	nparams 2
	  param inout name "elementType" explicit_type "Class<E>"
	  param inout name "universe" explicit_type "Enum"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 308379 "addRange"
	package explicit_return_type "void"
	nparams 2
	  param inout name "from" explicit_type "E"
	  param inout name "to" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 308507 "addAll"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 308635 "complement"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 308763 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements contained in this set.  The
iterator traverses the elements in their <i>natural order</i> (which is
the order in which the enum constants are declared). The returned
Iterator is a \"weakly consistent\" iterator that will never throw {@link
ConcurrentModificationException}.

@return an iterator over the elements contained in this set"
      end

      class 152475 "EnumSetIterator"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "E"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 162971 // <realization>
	  relation 162971 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 162971 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	attribute 178459 "unseen"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "A bit vector representing the elements in the current \"word\"
of the set not yet returned by this iterator.
"
	end

	attribute 178587 "unseenIndex"
	  package explicit_type "int"
	  init_value "=  0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The index corresponding to unseen in the elements array.
"
	end

	attribute 178715 "lastReturned"
	  package explicit_type "long"
	  init_value "=  0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The bit representing the last element returned by this iterator
but not removed, or zero if no such element exists.
"
	end

	attribute 178843 "lastReturnedIndex"
	  package explicit_type "int"
	  init_value "=  0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The index corresponding to lastReturned in the elements array.
"
	end

	operation 308891 "EnumSetIterator"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 309019 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 309147 "next"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 309275 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 309403 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this set.

@return the number of elements in this set"
      end

      operation 309531 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this set contains no elements.

@return <tt>true</tt> if this set contains no elements"
      end

      operation 309659 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this set contains the specified element.

@param e element to be checked for containment in this collection
@return <tt>true</tt> if this set contains the specified element"
      end

      operation 309787 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modification Operations

Adds the specified element to this set if it is not already present.

@param e element to be added to this set
@return <tt>true</tt> if the set changed as a result of the call

@throws NullPointerException if <tt>e</tt> is null"
      end

      operation 309915 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified element from this set if it is present.

@param e element to be removed from this set, if present
@return <tt>true</tt> if the set contained the specified element"
      end

      operation 310043 "containsAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bulk Operations

Returns <tt>true</tt> if this set contains all of the elements
in the specified collection.

@param c collection to be checked for containment in this set
@return <tt>true</tt> if this set contains all of the elements
       in the specified collection
@throws NullPointerException if the specified collection is null"
      end

      operation 310171 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds all of the elements in the specified collection to this set.

@param c collection whose elements are to be added to this set
@return <tt>true</tt> if this set changed as a result of the call
@throws NullPointerException if the specified collection or any of
    its elements are null"
      end

      operation 310299 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this set all of its elements that are contained in
the specified collection.

@param c elements to be removed from this set
@return <tt>true</tt> if this set changed as a result of the call
@throws NullPointerException if the specified collection is null"
      end

      operation 310427 "retainAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retains only the elements in this set that are contained in the
specified collection.

@param c elements to be retained in this set
@return <tt>true</tt> if this set changed as a result of the call
@throws NullPointerException if the specified collection is null"
      end

      operation 310555 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this set."
      end

      operation 310683 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified object with this set for equality.  Returns
<tt>true</tt> if the given object is also a set, the two sets have
the same size, and every member of the given set is contained in
this set.

@param e object to be compared for equality with this set
@return <tt>true</tt> if the specified object is equal to this set"
      end

      operation 310811 "recalculateSize"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Recalculates the size of the set.  Returns true if it's changed."
      end

      operation 310939 "clone"
	public return_type class_ref 146843 // EnumSet
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 152603 "LinkedHashMap"
      visibility public 
      nformals 8
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 16
      actual class class_ref 144923 // HashMap
        rank 0 explicit_value "K"
      actual class class_ref 144923 // HashMap
        rank 1 explicit_value "V"
      actual class class_ref 144923 // HashMap
        rank 2 explicit_value ""
      actual class class_ref 144923 // HashMap
        rank 3 explicit_value ""
      actual class class_ref 144923 // HashMap
        rank 4 explicit_value ""
      actual class class_ref 144923 // HashMap
        rank 5 explicit_value ""
      actual class class_ref 144923 // HashMap
        rank 6 explicit_value ""
      actual class class_ref 144923 // HashMap
        rank 7 explicit_value ""
      actual class class_ref 136603 // Map
        rank 0 explicit_value "K"
      actual class class_ref 136603 // Map
        rank 1 explicit_value "V"
      actual class class_ref 136603 // Map
        rank 2 explicit_value ""
      actual class class_ref 136603 // Map
        rank 3 explicit_value ""
      actual class class_ref 136603 // Map
        rank 4 explicit_value ""
      actual class class_ref 136603 // Map
        rank 5 explicit_value ""
      actual class class_ref 136603 // Map
        rank 6 explicit_value ""
      actual class class_ref 136603 // Map
        rank 7 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>Hash table and linked list implementation of the <tt>Map</tt> interface,
with predictable iteration order.  This implementation differs from
<tt>HashMap</tt> in that it maintains a doubly-linked list running through
all of its entries.  This linked list defines the iteration ordering,
which is normally the order in which keys were inserted into the map
(<i>insertion-order</i>).  Note that insertion order is not affected
if a key is <i>re-inserted</i> into the map.  (A key <tt>k</tt> is
reinserted into a map <tt>m</tt> if <tt>m.put(k, v)</tt> is invoked when
<tt>m.containsKey(k)</tt> would return <tt>true</tt> immediately prior to
the invocation.)

<p>This implementation spares its clients from the unspecified, generally
chaotic ordering provided by {@link HashMap} (and {@link Hashtable}),
without incurring the increased cost associated with {@link TreeMap}.  It
can be used to produce a copy of a map that has the same order as the
original, regardless of the original map's implementation:
<pre>
    void foo(Map m) {
        Map copy = new LinkedHashMap(m);
        ...
    }
</pre>
This technique is particularly useful if a module takes a map on input,
copies it, and later returns results whose order is determined by that of
the copy.  (Clients generally appreciate having things returned in the same
order they were presented.)

<p>A special {@link #LinkedHashMap(int,float,boolean) constructor} is
provided to create a linked hash map whose order of iteration is the order
in which its entries were last accessed, from least-recently accessed to
most-recently (<i>access-order</i>).  This kind of map is well-suited to
building LRU caches.  Invoking the <tt>put</tt> or <tt>get</tt> method
results in an access to the corresponding entry (assuming it exists after
the invocation completes).  The <tt>putAll</tt> method generates one entry
access for each mapping in the specified map, in the order that key-value
mappings are provided by the specified map's entry set iterator.  <i>No
other methods generate entry accesses.</i> In particular, operations on
collection-views do <i>not</i> affect the order of iteration of the backing
map.

<p>The {@link #removeEldestEntry(Map.Entry)} method may be overridden to 
impose a policy for removing stale mappings automatically when new mappings
are added to the map.

<p>This class provides all of the optional <tt>Map</tt> operations, and
permits null elements.  Like <tt>HashMap</tt>, it provides constant-time
performance for the basic operations (<tt>add</tt>, <tt>contains</tt> and
<tt>remove</tt>), assuming the hash function disperses elements
properly among the buckets.  Performance is likely to be just slightly
below that of <tt>HashMap</tt>, due to the added expense of maintaining the
linked list, with one exception: Iteration over the collection-views
of a <tt>LinkedHashMap</tt> requires time proportional to the <i>size</i>
of the map, regardless of its capacity.  Iteration over a <tt>HashMap</tt>
is likely to be more expensive, requiring time proportional to its
<i>capacity</i>.

<p>A linked hash map has two parameters that affect its performance:
<i>initial capacity</i> and <i>load factor</i>.  They are defined precisely
as for <tt>HashMap</tt>.  Note, however, that the penalty for choosing an
excessively high value for initial capacity is less severe for this class
than for <tt>HashMap</tt>, as iteration times for this class are unaffected
by capacity.

<p><strong>Note that this implementation is not synchronized.</strong> If
multiple threads access a linked hash map concurrently, and at least
one of the threads modifies the map structurally, it <em>must</em> be
synchronized externally.  This is typically accomplished by synchronizing
on some object that naturally encapsulates the map.  If no such object
exists, the map should be \"wrapped\" using the
<tt>Collections.synchronizedMap</tt>method.  This is best done at creation
time, to prevent accidental unsynchronized access:
<pre>
   Map m = Collections.synchronizedMap(new LinkedHashMap(...));
</pre>
A structural modification is any operation that adds or deletes one or more
mappings or, in the case of access-ordered linked hash maps, affects
iteration order.  In insertion-ordered linked hash maps, merely changing
the value associated with a key that is already contained in the map is not
a structural modification.  <strong>In access-ordered linked hash maps,
merely querying the map with <tt>get</tt> is a structural
modification.</strong>)

<p>The iterators returned by the <tt>iterator</tt> methods of the
collections returned by all of this class's collection view methods are
<em>fail-fast</em>: if the map is structurally modified at any time after
the iterator is created, in any way except through the iterator's own
remove method, the iterator will throw a
<tt>ConcurrentModificationException</tt>.  Thus, in the face of concurrent
modification, the Iterator fails quickly and cleanly, rather than risking
arbitrary, non-deterministic behavior at an undetermined time in the
future.

<p>Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw <tt>ConcurrentModificationException</tt> on a best-effort basis. 
Therefore, it would be wrong to write a program that depended on this
exception for its correctness:   <i>the fail-fast behavior of iterators
should be used only to detect bugs.</i>

<p>This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@version 1.18, 02/19/04
@see     Object#hashCode()
@see     Collection
@see     Map
@see     HashMap
@see     TreeMap
@see     Hashtable
@since   JDK1.4"
      classrelation 163099 // <realization>
	relation 163099 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 163099 // <realization>
	  b parent class_ref 144923 // HashMap
      end

      classrelation 163227 // <realization>
	relation 163227 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 163227 // <realization>
	  b parent class_ref 136603 // Map
      end

      attribute 178971 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  3801124242820219131L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 163355 // header (<unidirectional association>)
	relation 163355 --->
	  a role_name "header" private
	    comment "
The head of the doubly linked list.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	    classrelation_ref 163355 // header (<unidirectional association>)
	  b parent class_ref 136859 // Entry
      end

      attribute 179099 "accessOrder"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The iteration ordering method for this linked hash map: <tt>true</tt>
for access-order, <tt>false</tt> for insertion-order.

@serial
"
      end

      operation 311067 "LinkedHashMap"
	public explicit_return_type ""
	nparams 2
	  param in name "initialCapacity" explicit_type "int"
	  param in name "loadFactor" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty insertion-ordered <tt>LinkedHashMap</tt> instance
with the specified initial capacity and load factor.

@param  initialCapacity the initial capacity.
@param  loadFactor      the load factor.
@throws IllegalArgumentException if the initial capacity is negative
        or the load factor is nonpositive."
      end

      operation 311195 "LinkedHashMap"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty insertion-ordered <tt>LinkedHashMap</tt> instance
with the specified initial capacity and a default load factor (0.75). 

@param  initialCapacity the initial capacity.
@throws IllegalArgumentException if the initial capacity is negative."
      end

      operation 311323 "LinkedHashMap"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty insertion-ordered <tt>LinkedHashMap</tt> instance
with a default capacity (16) and load factor (0.75)."
      end

      operation 311451 "LinkedHashMap"
	public explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an insertion-ordered <tt>LinkedHashMap</tt> instance with
the same mappings as the specified map.  The <tt>LinkedHashMap</tt>
instance is created with a a default load factor (0.75) and an initial
capacity sufficient to hold the mappings in the specified map.

@param  m the map whose mappings are to be placed in this map.
@throws NullPointerException if the specified map is null."
      end

      operation 311579 "LinkedHashMap"
	public explicit_return_type ""
	nparams 3
	  param in name "initialCapacity" explicit_type "int"
	  param in name "loadFactor" explicit_type "float"
	  param inout name "accessOrder" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty <tt>LinkedHashMap</tt> instance with the
specified initial capacity, load factor and ordering mode.

@param  initialCapacity the initial capacity.
@param  loadFactor      the load factor.
@param  accessOrder     the ordering mode - <tt>true</tt> for
        access-order, <tt>false</tt> for insertion-order.
@throws IllegalArgumentException if the initial capacity is negative
        or the load factor is nonpositive."
      end

      operation 311707 "init"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by superclass constructors and pseudoconstructors (clone,
readObject) before any entries are inserted into the map.  Initializes
the chain."
      end

      operation 311835 "transfer"
	package explicit_return_type "void"
	nparams 1
	  param inout name "newTable" type class_ref 152731 // Entry
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfer all entries to new table array.  This method is called
by superclass resize.  It is overridden for performance, as it is
faster to iterate using our linked list."
      end

      operation 311963 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map maps one or more keys to the
specified value.

@param value value whose presence in this map is to be tested.
@return <tt>true</tt> if this map maps one or more keys to the
        specified value."
      end

      operation 312091 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which this map maps the specified key.  Returns
<tt>null</tt> if the map contains no mapping for this key.  A return
value of <tt>null</tt> does not <i>necessarily</i> indicate that the
map contains no mapping for the key; it's also possible that the map
explicitly maps the key to <tt>null</tt>.  The <tt>containsKey</tt>
operation may be used to distinguish these two cases.

@return the value to which this map maps the specified key.
@param key key whose associated value is to be returned."
      end

      operation 312219 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all mappings from this map."
      end
    end

    class 152859 "LinkedHashSet"
      visibility public 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 8
      actual class class_ref 149659 // HashSet
        rank 0 explicit_value "E"
      actual class class_ref 149659 // HashSet
        rank 1 explicit_value ""
      actual class class_ref 149659 // HashSet
        rank 2 explicit_value ""
      actual class class_ref 149659 // HashSet
        rank 3 explicit_value ""
      actual class class_ref 136731 // Set
        rank 0 explicit_value "E"
      actual class class_ref 136731 // Set
        rank 1 explicit_value ""
      actual class class_ref 136731 // Set
        rank 2 explicit_value ""
      actual class class_ref 136731 // Set
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>Hash table and linked list implementation of the <tt>Set</tt> interface,
with predictable iteration order.  This implementation differs from
<tt>HashSet</tt> in that it maintains a doubly-linked list running through
all of its entries.  This linked list defines the iteration ordering,
which is the order in which elements were inserted into the set
(<i>insertion-order</i>).  Note that insertion order is <i>not</i> affected
if an element is <i>re-inserted</i> into the set.  (An element <tt>e</tt>
is reinserted into a set <tt>s</tt> if <tt>s.add(e)</tt> is invoked when
<tt>s.contains(e)</tt> would return <tt>true</tt> immediately prior to
the invocation.)

<p>This implementation spares its clients from the unspecified, generally
chaotic ordering provided by {@link HashSet}, without incurring the
increased cost associated with {@link TreeSet}.  It can be used to
produce a copy of a set that has the same order as the original, regardless
of the original set's implementation:
<pre>
    void foo(Set m) {
        Set copy = new LinkedHashSet(m);
        ...
    }
</pre>
This technique is particularly useful if a module takes a set on input,
copies it, and later returns results whose order is determined by that of
the copy.  (Clients generally appreciate having things returned in the same
order they were presented.)

<p>This class provides all of the optional <tt>Set</tt> operations, and
permits null elements.  Like <tt>HashSet</tt>, it provides constant-time
performance for the basic operations (<tt>add</tt>, <tt>contains</tt> and
<tt>remove</tt>), assuming the hash function disperses elements
properly among the buckets.  Performance is likely to be just slightly
below that of <tt>HashSet</tt>, due to the added expense of maintaining the
linked list, with one exception: Iteration over a <tt>LinkedHashSet</tt>
requires time proportional to the <i>size</i> of the set, regardless of
its capacity.  Iteration over a <tt>HashSet</tt> is likely to be more
expensive, requiring time proportional to its <i>capacity</i>.

<p>A linked hash set has two parameters that affect its performance:
<i>initial capacity</i> and <i>load factor</i>.  They are defined precisely
as for <tt>HashSet</tt>.  Note, however, that the penalty for choosing an
excessively high value for initial capacity is less severe for this class
than for <tt>HashSet</tt>, as iteration times for this class are unaffected
by capacity.

<p><strong>Note that this implementation is not synchronized.</strong> If
multiple threads access a linked hash set concurrently, and at least one of
the threads modifies the set, it <em>must</em> be synchronized externally.
This is typically accomplished by synchronizing on some object that
naturally encapsulates the set.  If no such object exists, the set should
be \"wrapped\" using the <tt>Collections.synchronizedSet</tt>method.  This is
best done at creation time, to prevent accidental unsynchronized access:
<pre>
    Set s = Collections.synchronizedSet(new LinkedHashSet(...));
</pre>

<p>The iterators returned by the this class's <tt>iterator</tt> method are
<em>fail-fast</em>: if the set is modified at any time after the iterator
is created, in any way except through the iterator's own remove method, the
iterator will throw a <tt>ConcurrentModificationException</tt>.  Thus, in
the face of concurrent modification, the Iterator fails quickly and
cleanly, rather than risking arbitrary, non-deterministic behavior at an
undetermined time in the future.

<p>Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw <tt>ConcurrentModificationException</tt> on a best-effort basis. 
Therefore, it would be wrong to write a program that depended on this
exception for its correctness:   <i>the fail-fast behavior of iterators
should be used only to detect bugs.</i>

<p>This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@version 1.14 04/02/19
@see     Object#hashCode()
@see     Collection
@see     Set
@see     HashSet
@see     TreeSet
@see     Hashtable
@since   1.4"
      classrelation 163483 // <realization>
	relation 163483 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 163483 // <realization>
	  b parent class_ref 149659 // HashSet
      end

      classrelation 163611 // <realization>
	relation 163611 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 163611 // <realization>
	  b parent class_ref 136731 // Set
      end

      classrelation 163867 // <realization>
	relation 163867 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 163867 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 179227 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -2851667679971038690L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 312347 "LinkedHashSet"
	public explicit_return_type ""
	nparams 2
	  param in name "initialCapacity" explicit_type "int"
	  param in name "loadFactor" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty linked hash set with the specified initial
capacity and load factor. 

@param      initialCapacity the initial capacity of the linked hash set
@param      loadFactor      the load factor of the linked hash set.
@throws     IllegalArgumentException  if the initial capacity is less
              than zero, or if the load factor is nonpositive."
      end

      operation 312475 "LinkedHashSet"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty linked hash set with the specified initial
capacity and the default load factor (0.75).

@param   initialCapacity   the initial capacity of the LinkedHashSet.
@throws  IllegalArgumentException if the initial capacity is less
             than zero."
      end

      operation 312603 "LinkedHashSet"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty linked hash set with the default initial
capacity (16) and load factor (0.75)."
      end

      operation 312731 "LinkedHashSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new linked hash set with the same elements as the
specified collection.  The linked hash set is created with an initial
capacity sufficient to hold the elements in the specified collection
and the default load factor (0.75).

@param c  the collection whose elements are to be placed into 
          this set.
@throws NullPointerException if the specified collection is null."
      end
    end

    class 152987 "LinkedList"
      visibility public 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 12
      actual class class_ref 137371 // AbstractSequentialList
        rank 0 explicit_value "E"
      actual class class_ref 137371 // AbstractSequentialList
        rank 1 explicit_value ""
      actual class class_ref 137371 // AbstractSequentialList
        rank 2 explicit_value ""
      actual class class_ref 137371 // AbstractSequentialList
        rank 3 explicit_value ""
      actual class class_ref 135579 // List
        rank 0 explicit_value "E"
      actual class class_ref 135579 // List
        rank 1 explicit_value ""
      actual class class_ref 135579 // List
        rank 2 explicit_value ""
      actual class class_ref 135579 // List
        rank 3 explicit_value ""
      actual class class_ref 137243 // Queue
        rank 0 explicit_value "E"
      actual class class_ref 137243 // Queue
        rank 1 explicit_value ""
      actual class class_ref 137243 // Queue
        rank 2 explicit_value ""
      actual class class_ref 137243 // Queue
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Linked list implementation of the <tt>List</tt> interface.  Implements all
optional list operations, and permits all elements (including
<tt>null</tt>).  In addition to implementing the <tt>List</tt> interface,
the <tt>LinkedList</tt> class provides uniformly named methods to
<tt>get</tt>, <tt>remove</tt> and <tt>insert</tt> an element at the
beginning and end of the list.  These operations allow linked lists to be
used as a stack, queue, or double-ended queue (deque).<p>

The class implements the <tt>Queue</tt> interface, providing
first-in-first-out queue operations for <tt>add</tt>,
<tt>poll</tt>, etc. Other stack and deque operations could be
easily recast in terms of the standard list operations.  They're
included here primarily for convenience, though they may run
slightly faster than the equivalent List operations.<p>

All of the operations perform as could be expected for a doubly-linked
list.  Operations that index into the list will traverse the list from
the beginning or the end, whichever is closer to the specified index.<p>

<b>Note that this implementation is not synchronized.</b> If multiple
threads access a list concurrently, and at least one of the threads
modifies the list structurally, it <i>must</i> be synchronized
externally.  (A structural modification is any operation that adds or
deletes one or more elements; merely setting the value of an element is not
a structural modification.)  This is typically accomplished by
synchronizing on some object that naturally encapsulates the list.  If no
such object exists, the list should be \"wrapped\" using the
Collections.synchronizedList method.  This is best done at creation time,
to prevent accidental unsynchronized access to the list: <pre>
    List list = Collections.synchronizedList(new LinkedList(...));
</pre><p>

The iterators returned by the this class's <tt>iterator</tt> and
<tt>listIterator</tt> methods are <i>fail-fast</i>: if the list is
structurally modified at any time after the iterator is created, in any way
except through the Iterator's own <tt>remove</tt> or <tt>add</tt> methods,
the iterator will throw a <tt>ConcurrentModificationException</tt>.  Thus,
in the face of concurrent modification, the iterator fails quickly and
cleanly, rather than risking arbitrary, non-deterministic behavior at an
undetermined time in the future.

<p>Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw <tt>ConcurrentModificationException</tt> on a best-effort basis.
Therefore, it would be wrong to write a program that depended on this
exception for its correctness:   <i>the fail-fast behavior of iterators
should be used only to detect bugs.</i><p>

This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@version 1.61, 02/19/04
@see	    List
@see	    ArrayList
@see	    Vector
@see	    Collections#synchronizedList(List)
@since 1.2
@param <E> the type of elements held in this collection"
      classrelation 163995 // <realization>
	relation 163995 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 163995 // <realization>
	  b parent class_ref 137371 // AbstractSequentialList
      end

      classrelation 164123 // <realization>
	relation 164123 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 164123 // <realization>
	  b parent class_ref 135579 // List
      end

      classrelation 164251 // <realization>
	relation 164251 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 164251 // <realization>
	  b parent class_ref 137243 // Queue
      end

      classrelation 164507 // <realization>
	relation 164507 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 164507 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      class 153115 "Entry"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 164635 // header (<unidirectional association>)
	relation 164635 --->
	  a role_name "header" init_value "=  new Entry<E>(null, null, null)" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 164635 // header (<unidirectional association>)
	  b parent class_ref 153115 // Entry
      end

      attribute 179355 "size"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 312859 "LinkedList"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty list."
      end

      operation 312987 "LinkedList"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a list containing the elements of the specified
collection, in the order they are returned by the collection's
iterator.

@param  c the collection whose elements are to be placed into this list.
@throws NullPointerException if the specified collection is null."
      end

      operation 313115 "getFirst"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first element in this list.

@return the first element in this list.
@throws    NoSuchElementException if this list is empty."
      end

      operation 313243 "getLast"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the last element in this list.

@return the last element in this list.
@throws    NoSuchElementException if this list is empty."
      end

      operation 313371 "removeFirst"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and returns the first element from this list.

@return the first element from this list.
@throws    NoSuchElementException if this list is empty."
      end

      operation 313499 "removeLast"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and returns the last element from this list.

@return the last element from this list.
@throws    NoSuchElementException if this list is empty."
      end

      operation 313627 "addFirst"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the given element at the beginning of this list.

@param o the element to be inserted at the beginning of this list."
      end

      operation 313755 "addLast"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the given element to the end of this list.  (Identical in
function to the <tt>add</tt> method; included only for consistency.)

@param o the element to be inserted at the end of this list."
      end

      operation 313883 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this list contains the specified element.
More formally, returns <tt>true</tt> if and only if this list contains
at least one element <tt>e</tt> such that <tt>(o==null ? e==null
: o.equals(e))</tt>.

@param o element whose presence in this list is to be tested.
@return <tt>true</tt> if this list contains the specified element."
      end

      operation 314011 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this list.

@return the number of elements in this list."
      end

      operation 314139 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified element to the end of this list.

@param o element to be appended to this list.
@return <tt>true</tt> (as per the general contract of
<tt>Collection.add</tt>)."
      end

      operation 314267 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the first occurrence of the specified element in this list.  If
the list does not contain the element, it is unchanged.  More formally,
removes the element with the lowest index <tt>i</tt> such that
<tt>(o==null ? get(i)==null : o.equals(get(i)))</tt> (if such an
element exists).

@param o element to be removed from this list, if present.
@return <tt>true</tt> if the list contained the specified element."
      end

      operation 314395 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all of the elements in the specified collection to the end of
this list, in the order that they are returned by the specified
collection's iterator.  The behavior of this operation is undefined if
the specified collection is modified while the operation is in
progress.  (This implies that the behavior of this call is undefined if
the specified Collection is this list, and this list is nonempty.)

@param c the elements to be inserted into this list.
@return <tt>true</tt> if this list changed as a result of the call.
@throws NullPointerException if the specified collection is null."
      end

      operation 314523 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts all of the elements in the specified collection into this
list, starting at the specified position.  Shifts the element
currently at that position (if any) and any subsequent elements to
the right (increases their indices).  The new elements will appear
in the list in the order that they are returned by the
specified collection's iterator.

@param index index at which to insert first element
		    from the specified collection.
@param c elements to be inserted into this list.
@return <tt>true</tt> if this list changed as a result of the call.
@throws IndexOutOfBoundsException if the specified index is out of
           range (<tt>index &lt; 0 || index &gt; size()</tt>).
@throws NullPointerException if the specified collection is null."
      end

      operation 314651 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this list."
      end

      operation 314779 "get"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Positional Access Operations

Returns the element at the specified position in this list.

@param index index of element to return.
@return the element at the specified position in this list.

@throws IndexOutOfBoundsException if the specified index is out of
range (<tt>index &lt; 0 || index &gt;= size()</tt>)."
      end

      operation 314907 "set"
	public explicit_return_type "E"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the element at the specified position in this list with the
specified element.

@param index index of element to replace.
@param element element to be stored at the specified position.
@return the element previously at the specified position.
@throws IndexOutOfBoundsException if the specified index is out of
		  range (<tt>index &lt; 0 || index &gt;= size()</tt>)."
      end

      operation 315035 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the specified position in this list.
Shifts the element currently at that position (if any) and any
subsequent elements to the right (adds one to their indices).

@param index index at which the specified element is to be inserted.
@param element element to be inserted.

@throws IndexOutOfBoundsException if the specified index is out of
		  range (<tt>index &lt; 0 || index &gt; size()</tt>)."
      end

      operation 315163 "remove"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the element at the specified position in this list.  Shifts any
subsequent elements to the left (subtracts one from their indices).
Returns the element that was removed from the list.

@param index the index of the element to removed.
@return the element previously at the specified position.

@throws IndexOutOfBoundsException if the specified index is out of
		  range (<tt>index &lt; 0 || index &gt;= size()</tt>)."
      end

      operation 315291 "entry"
	private return_type class_ref 153115 // Entry
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the indexed entry."
      end

      operation 315419 "indexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Search Operations

Returns the index in this list of the first occurrence of the
specified element, or -1 if the List does not contain this
element.  More formally, returns the lowest index i such that
<tt>(o==null ? get(i)==null : o.equals(get(i)))</tt>, or -1 if
there is no such index.

@param o element to search for.
@return the index in this list of the first occurrence of the
	       specified element, or -1 if the list does not contain this
	       element."
      end

      operation 315547 "lastIndexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index in this list of the last occurrence of the
specified element, or -1 if the list does not contain this
element.  More formally, returns the highest index i such that
<tt>(o==null ? get(i)==null : o.equals(get(i)))</tt>, or -1 if
there is no such index.

@param o element to search for.
@return the index in this list of the last occurrence of the
	       specified element, or -1 if the list does not contain this
	       element."
      end

      operation 315675 "peek"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Queue operations.

Retrieves, but does not remove, the head (first element) of this list.
@return the head of this queue, or <tt>null</tt> if this queue is empty.
@since 1.5"
      end

      operation 315803 "element"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves, but does not remove, the head (first element) of this list.
@return the head of this queue.
@throws NoSuchElementException if this queue is empty.
@since 1.5"
      end

      operation 315931 "poll"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head (first element) of this list.
@return the head of this queue, or <tt>null</tt> if this queue is empty.
@since 1.5"
      end

      operation 316059 "remove"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head (first element) of this list.
@return the head of this queue.
@throws NoSuchElementException if this queue is empty.
@since 1.5"
      end

      operation 316187 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element as the tail (last element) of this list.

@param o the element to add.
@return <tt>true</tt> (as per the general contract of
<tt>Queue.offer</tt>)
@since 1.5"
      end

      operation 316315 "listIterator"
	public return_type class_ref 135707 // ListIterator
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list-iterator of the elements in this list (in proper
sequence), starting at the specified position in the list.
Obeys the general contract of <tt>List.listIterator(int)</tt>.<p>

The list-iterator is <i>fail-fast</i>: if the list is structurally
modified at any time after the Iterator is created, in any way except
through the list-iterator's own <tt>remove</tt> or <tt>add</tt>
methods, the list-iterator will throw a
<tt>ConcurrentModificationException</tt>.  Thus, in the face of
concurrent modification, the iterator fails quickly and cleanly, rather
than risking arbitrary, non-deterministic behavior at an undetermined
time in the future.

@param index index of first element to be returned from the
		    list-iterator (by a call to <tt>next</tt>).
@return a ListIterator of the elements in this list (in proper
	       sequence), starting at the specified position in the list.
@throws    IndexOutOfBoundsException if index is out of range
		  (<tt>index &lt; 0 || index &gt; size()</tt>).
@see List#listIterator(int)"
      end
    end

    class 153243 "ListResourceBundle"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>ListResourceBundle</code> is an abstract subclass of
<code>ResourceBundle</code> that manages resources for a locale
in a convenient and easy to use list. See <code>ResourceBundle</code> for
more information about resource bundles in general.

<P>
Subclasses must override <code>getContents</code> and provide an array,
where each item in the array is a pair of objects.
The first element of each pair is the key, which must be a
<code>String</code>, and the second element is the value associated with
that key.

<p>
The following <a name=\"sample\">example</a> shows two members of a resource
bundle family with the base name \"MyResources\".
\"MyResources\" is the default member of the bundle family, and
\"MyResources_fr\" is the French member.
These members are based on <code>ListResourceBundle</code>
(a related <a href=\"PropertyResourceBundle.html#sample\">example</a> shows
how you can add a bundle to this family that's based on a properties file).
The keys in this example are of the form \"s1\" etc. The actual
keys are entirely up to your choice, so long as they are the same as
the keys you use in your program to retrieve the objects from the bundle.
Keys are case-sensitive.
<blockquote>
<pre>

public class MyResources extends ListResourceBundle {
    protected Object[][] getContents() {
        return new Object[][] = {
        // LOCALIZE THIS
            {\"s1\", \"The disk \\\"{1}\\\" contains {0}.\"},  // MessageFormat pattern
            {\"s2\", \"1\"},                               // location of {0} in pattern
            {\"s3\", \"My Disk\"},                         // sample disk name
            {\"s4\", \"no files\"},                        // first ChoiceFormat choice
            {\"s5\", \"one file\"},                        // second ChoiceFormat choice
            {\"s6\", \"{0,number} files\"},                // third ChoiceFormat choice
            {\"s7\", \"3 Mar 96\"},                        // sample date
            {\"s8\", new Dimension(1,5)}                 // real object, not just string
        // END OF MATERIAL TO LOCALIZE
        };
    }
}

public class MyResources_fr extends ListResourceBundle {
    protected Object[][] getContents() {
        return new Object[][] = {
        // LOCALIZE THIS
            {\"s1\", \"Le disque \\\"{1}\\\" {0}.\"},          // MessageFormat pattern
            {\"s2\", \"1\"},                               // location of {0} in pattern
            {\"s3\", \"Mon disque\"},                      // sample disk name
            {\"s4\", \"ne contient pas de fichiers\"},     // first ChoiceFormat choice
            {\"s5\", \"contient un fichier\"},             // second ChoiceFormat choice
            {\"s6\", \"contient {0,number} fichiers\"},    // third ChoiceFormat choice
            {\"s7\", \"3 mars 1996\"},                     // sample date
            {\"s8\", new Dimension(1,3)}                 // real object, not just string
        // END OF MATERIAL TO LOCALIZE
        };
    }
}
</pre>
</blockquote>
@see ResourceBundle
@see PropertyResourceBundle
@since JDK1.1"
      classrelation 165915 // <generalisation>
	relation 165915 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 165915 // <generalisation>
	  b parent class_ref 153371 // ResourceBundle
      end

      operation 320283 "ListResourceBundle"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sole constructor.  (For invocation by subclass constructors, typically
implicit.)"
      end

      operation 320411 "handleGetObject"
	public explicit_return_type "Object"
	nparams 1
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Implements java.util.ResourceBundle.handleGetObject; inherits javadoc specification."
      end

      operation 320539 "getKeys"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implementation of ResourceBundle.getKeys."
      end

      operation 320667 "getContents"
	abstract protected explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See class description."
      end

      operation 320795 "loadLookup"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ==================privates====================

We lazily load the lookup hashtable.  This function does the
loading."
      end

      classrelation 166043 // lookup (<unidirectional association>)
	relation 166043 --->
	  a role_name "lookup" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 166043 // lookup (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end
    end

    class 153371 "ResourceBundle"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
Resource bundles contain locale-specific objects.
When your program needs a locale-specific resource,
a <code>String</code> for example, your program can load it
from the resource bundle that is appropriate for the
current user's locale. In this way, you can write
program code that is largely independent of the user's
locale isolating most, if not all, of the locale-specific
information in resource bundles.

<p>
This allows you to write programs that can:
<UL type=SQUARE>
<LI> be easily localized, or translated, into different languages
<LI> handle multiple locales at once
<LI> be easily modified later to support even more locales
</UL>

<P>
Resource bundles belong to families whose members share a common base 
name, but whose names also have additional components that identify 
their locales. For example, the base name of a family of resource 
bundles might be \"MyResources\". The family should have a default 
resource bundle which simply has the same name as its family - 
\"MyResources\" - and will be used as the bundle of last resort if a
specific locale is not supported. The family can then provide as
many locale-specific members as needed, for example a German one
named \"MyResources_de\".

<P>
Each resource bundle in a family contains the same items, but the items have
been translated for the locale represented by that resource bundle.
For example, both \"MyResources\" and \"MyResources_de\" may have a
<code>String</code> that's used on a button for canceling operations.
In \"MyResources\" the <code>String</code> may contain \"Cancel\" and in
\"MyResources_de\" it may contain \"Abbrechen\".

<P>
If there are different resources for different countries, you
can make specializations: for example, \"MyResources_de_CH\" contains objects for
the German language (de) in Switzerland (CH). If you want to only
modify some of the resources
in the specialization, you can do so.

<P>
When your program needs a locale-specific object, it loads
the <code>ResourceBundle</code> class using the
{@link #getBundle(java.lang.String, java.util.Locale) getBundle}
method:
<blockquote>
<pre>
ResourceBundle myResources =
     ResourceBundle.getBundle(\"MyResources\", currentLocale);
</pre>
</blockquote>

<P>
Resource bundles contain key/value pairs. The keys uniquely
identify a locale-specific object in the bundle. Here's an
example of a <code>ListResourceBundle</code> that contains
two key/value pairs:
<blockquote>
<pre>
public class MyResources extends ListResourceBundle {
    protected Object[][] getContents() {
        return new Object[][] = {
        // LOCALIZE THIS
            {\"OkKey\", \"OK\"},
            {\"CancelKey\", \"Cancel\"},
        // END OF MATERIAL TO LOCALIZE
        };
    }
}
</pre>
</blockquote>
Keys are always <code>String</code>s.
In this example, the keys are \"OkKey\" and \"CancelKey\".
In the above example, the values
are also <code>String</code>s--\"OK\" and \"Cancel\"--but
they don't have to be. The values can be any type of object.

<P>
You retrieve an object from resource bundle using the appropriate
getter method. Because \"OkKey\" and \"CancelKey\"
are both strings, you would use <code>getString</code> to retrieve them:
<blockquote>
<pre>
button1 = new Button(myResources.getString(\"OkKey\"));
button2 = new Button(myResources.getString(\"CancelKey\"));
</pre>
</blockquote>
The getter methods all require the key as an argument and return
the object if found. If the object is not found, the getter method
throws a <code>MissingResourceException</code>.

<P>
Besides <code>getString</code>, ResourceBundle also provides
a method for getting string arrays, <code>getStringArray</code>,
as well as a generic <code>getObject</code> method for any other
type of object. When using <code>getObject</code>, you'll
have to cast the result to the appropriate type. For example:
<blockquote>
<pre>
int[] myIntegers = (int[]) myResources.getObject(\"intList\");
</pre>
</blockquote>

<P>
The Java 2 platform provides two subclasses of <code>ResourceBundle</code>,
<code>ListResourceBundle</code> and <code>PropertyResourceBundle</code>,
that provide a fairly simple way to create resources.
As you saw briefly in a previous example, <code>ListResourceBundle</code>
manages its resource as a List of key/value pairs.
<code>PropertyResourceBundle</code> uses a properties file to manage
its resources.

<p>
If <code>ListResourceBundle</code> or <code>PropertyResourceBundle</code>
do not suit your needs, you can write your own <code>ResourceBundle</code>
subclass.  Your subclasses must override two methods: <code>handleGetObject</code>
and <code>getKeys()</code>.

<P>
The following is a very simple example of a <code>ResourceBundle</code>
subclass, MyResources, that manages two resources (for a larger number of
resources you would probably use a <code>Hashtable</code>).
Notice that you don't need to supply a value if 
a \"parent-level\" <code>ResourceBundle</code> handles the same
key with the same value (as for the okKey below).
<p><strong>Example:</strong>
<blockquote>
<pre>
// default (English language, United States)
public class MyResources extends ResourceBundle {
    public Object handleGetObject(String key) {
        if (key.equals(\"okKey\")) return \"Ok\";
        if (key.equals(\"cancelKey\")) return \"Cancel\";
        return null;
    }
}

// German language
public class MyResources_de extends MyResources {
    public Object handleGetObject(String key) {
        // don't need okKey, since parent level handles it.
        if (key.equals(\"cancelKey\")) return \"Abbrechen\";
        return null;
    }
}
</pre>
</blockquote>
You do not have to restrict yourself to using a single family of
<code>ResourceBundle</code>s. For example, you could have a set of bundles for
exception messages, <code>ExceptionResources</code>
(<code>ExceptionResources_fr</code>, <code>ExceptionResources_de</code>, ...),
and one for widgets, <code>WidgetResource</code> (<code>WidgetResources_fr</code>,
<code>WidgetResources_de</code>, ...); breaking up the resources however you like.

@see ListResourceBundle
@see PropertyResourceBundle
@see MissingResourceException
@since JDK1.1"
      class 153499 "ResourceCacheKey"
	visibility private 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 165403 // loaderRef (<unidirectional association>)
	  relation 165403 --->
	    a role_name "loaderRef" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 165403 // loaderRef (<unidirectional association>)
	    b parent class_ref 153627 // LoaderReference
	end

	attribute 180251 "searchName"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 165531 // defaultLocale (<unidirectional association>)
	  relation 165531 --->
	    a role_name "defaultLocale" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 165531 // defaultLocale (<unidirectional association>)
	    b parent class_ref 138907 // Locale
	end

	attribute 180379 "hashCodeCache"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 317595 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "other" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 317723 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 317851 "clone"
	  public explicit_return_type "Object"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 317979 "setKeyValues"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "loader" explicit_type "ClassLoader"
	    param in name "searchName" explicit_type "String"
	    param inout name "defaultLocale" type class_ref 138907 // Locale
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 318107 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 164763 // cacheKey (<unidirectional association>)
	relation 164763 --->
	  a role_name "cacheKey" init_value "=  new ResourceCacheKey()" class_relation const_relation private
	    comment "
Static key used for resource lookups. Concurrent
access to this object is controlled by synchronizing cacheList,
not cacheKey.  A static object is used to do cache lookups
for performance reasons - the assumption being that synchronization
has a lower overhead than object allocation and subsequent
garbage collection.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 164763 // cacheKey (<unidirectional association>)
	  b parent class_ref 153499 // ResourceCacheKey
      end

      attribute 179483 "INITIAL_CACHE_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  25"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " initial size of the bundle cache "
      end

      attribute 179611 "CACHE_LOAD_FACTOR"
	class_attribute const_attribute private explicit_type "float"
	init_value "=  (float)1.0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " capacity of cache consumed before it should grow "
      end

      attribute 179739 "MAX_BUNDLES_SEARCHED"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Maximum length of one branch of the resource search path tree.
Used in getBundle.
"
      end

      classrelation 164891 // underConstruction (<unidirectional association>)
	relation 164891 --->
	  a role_name "underConstruction" init_value "=  new Hashtable(MAX_BUNDLES_SEARCHED, CACHE_LOAD_FACTOR)" class_relation const_relation private
	    comment "
This Hashtable is used to keep multiple threads from loading the
same bundle concurrently.  The table entries are (cacheKey, thread)
where cacheKey is the key for the bundle that is under construction
and thread is the thread that is constructing the bundle.
This list is manipulated in findBundle and putBundleInCache.
Synchronization of this object is done through cacheList, not on
this object.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 164891 // underConstruction (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end

      attribute 179867 "NOT_FOUND"
	class_attribute const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " constant indicating that no resource bundle was found "
      end

      attribute 179995 "cacheList"
	class_attribute private explicit_type "SoftCache"
	init_value "=  new SoftCache(INITIAL_CACHE_SIZE, CACHE_LOAD_FACTOR)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The cache is a map from cache keys (with bundle base name,
locale, and class loader) to either a resource bundle
(if one has been found) or NOT_FOUND (if no bundle has
been found).
The cache is a SoftCache, allowing bundles to be
removed from the cache if they are no longer
needed.  This will also allow the cache keys
to be reclaimed along with the ClassLoaders
they reference.
This variable would be better named \"cache\", but we keep the old
name for compatibility with some workarounds for bug 4212439.
"
      end

      attribute 180123 "referenceQueue"
	class_attribute private explicit_type "ReferenceQueue"
	init_value "=  new ReferenceQueue()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Queue for reference objects referring to class loaders.
"
      end

      classrelation 165019 // parent (<unidirectional association>)
	relation 165019 --->
	  a role_name "parent" init_value "=  null" protected
	    comment "
The parent bundle of this bundle.
The parent bundle is searched by {@link #getObject getObject}
when this bundle does not contain a particular resource.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 165019 // parent (<unidirectional association>)
	  b parent class_ref 153371 // ResourceBundle
      end

      classrelation 165147 // locale (<unidirectional association>)
	relation 165147 --->
	  a role_name "locale" init_value "=  null" private
	    comment "
The locale for this bundle.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 165147 // locale (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      operation 316443 "ResourceBundle"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sole constructor.  (For invocation by subclass constructors, typically
implicit.)"
      end

      operation 316571 "getString"
	public explicit_return_type "String"
	nparams 1
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a string for the given key from this resource bundle or one of its parents.
Calling this method is equivalent to calling
<blockquote>
<code>(String) {@link #getObject(java.lang.String) getObject}(key)</code>.
</blockquote>

@param key the key for the desired string
@exception NullPointerException if <code>key</code> is <code>null</code>
@exception MissingResourceException if no object for the given key can be found
@exception ClassCastException if the object found for the given key is not a string
@return the string for the given key"
      end

      operation 316699 "getStringArray"
	public explicit_return_type "String"
	nparams 1
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a string array for the given key from this resource bundle or one of its parents.
Calling this method is equivalent to calling
<blockquote>
<code>(String[]) {@link #getObject(java.lang.String) getObject}(key)</code>.
</blockquote>

@param key the key for the desired string array
@exception NullPointerException if <code>key</code> is <code>null</code>
@exception MissingResourceException if no object for the given key can be found
@exception ClassCastException if the object found for the given key is not a string array
@return the string array for the given key"
      end

      operation 316827 "getObject"
	public explicit_return_type "Object"
	nparams 1
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an object for the given key from this resource bundle or one of its parents.
This method first tries to obtain the object from this resource bundle using
{@link #handleGetObject(java.lang.String) handleGetObject}.
If not successful, and the parent resource bundle is not null,
it calls the parent's <code>getObject</code> method.
If still not successful, it throws a MissingResourceException.

@param key the key for the desired object
@exception NullPointerException if <code>key</code> is <code>null</code>
@exception MissingResourceException if no object for the given key can be found
@return the object for the given key"
      end

      operation 316955 "getLocale"
	public return_type class_ref 138907 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the locale of this resource bundle. This method can be used after a
call to getBundle() to determine whether the resource bundle returned really
corresponds to the requested locale or is a fallback.

@return the locale of this resource bundle"
      end

      operation 317083 "setLocale"
	private explicit_return_type "void"
	nparams 2
	  param in name "baseName" explicit_type "String"
	  param in name "bundleName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the locale for this bundle.  This is the locale that this
bundle actually represents and does not depend on how the
bundle was found by getBundle.  Ex. if the user was looking
for fr_FR and getBundle found en_US, the bundle's locale would
be en_US, NOT fr_FR
@param baseName the bundle's base name
@param bundleName the complete bundle name including locale
extension."
      end

      operation 317211 "getLoader"
	class_operation private explicit_return_type "ClassLoader"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Automatic determination of the ClassLoader to be used to load
resources on behalf of the client.  N.B. The client is getLoader's
caller's caller."
      end

      operation 317339 "getClassContext"
	class_operation private explicit_return_type "Class"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 317467 "setParent"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "parent" type class_ref 153371 // ResourceBundle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the parent bundle of this bundle.
The parent bundle is searched by {@link #getObject getObject}
when this bundle does not contain a particular resource.

@param parent this bundle's parent bundle."
      end

      class 153627 "LoaderReference"
	visibility private 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 165787 // cacheKey (<unidirectional association>)
	  relation 165787 --->
	    a role_name "cacheKey" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 165787 // cacheKey (<unidirectional association>)
	    b parent class_ref 153499 // ResourceCacheKey
	end

	operation 318235 "LoaderReference"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "referent" explicit_type "Object"
	    param inout name "q" explicit_type "ReferenceQueue"
	    param inout name "key" type class_ref 153499 // ResourceCacheKey
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 318363 "getCacheKey"
	  package return_type class_ref 153499 // ResourceCacheKey
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 318491 "getBundle"
	class_operation public return_type class_ref 153371 // ResourceBundle
	nparams 1
	  param in name "baseName" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a resource bundle using the specified base name, the default locale,
and the caller's class loader. Calling this method is equivalent to calling
<blockquote>
<code>getBundle(baseName, Locale.getDefault(), this.getClass().getClassLoader())</code>,
</blockquote>
except that <code>getClassLoader()</code> is run with the security
privileges of <code>ResourceBundle</code>.
See {@link #getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader) getBundle}
for a complete description of the search and instantiation strategy.

@param baseName the base name of the resource bundle, a fully qualified class name
@exception java.lang.NullPointerException
    if <code>baseName</code> is <code>null</code>
@exception MissingResourceException
    if no resource bundle for the specified base name can be found
@return a resource bundle for the given base name and the default locale"
      end

      operation 318619 "getBundle"
	class_operation public return_type class_ref 153371 // ResourceBundle
	nparams 2
	  param in name "baseName" explicit_type "String"
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a resource bundle using the specified base name and locale,
and the caller's class loader. Calling this method is equivalent to calling
<blockquote>
<code>getBundle(baseName, locale, this.getClass().getClassLoader())</code>,
</blockquote>
except that <code>getClassLoader()</code> is run with the security
privileges of <code>ResourceBundle</code>.
See {@link #getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader) getBundle}
for a complete description of the search and instantiation strategy.

@param baseName the base name of the resource bundle, a fully qualified class name
@param locale the locale for which a resource bundle is desired
@exception java.lang.NullPointerException
    if <code>baseName</code> or <code>locale</code> is <code>null</code>
@exception MissingResourceException
    if no resource bundle for the specified base name can be found
@return a resource bundle for the given base name and locale"
      end

      operation 318747 "getBundle"
	class_operation public return_type class_ref 153371 // ResourceBundle
	nparams 3
	  param in name "baseName" explicit_type "String"
	  param inout name "locale" type class_ref 138907 // Locale
	  param inout name "loader" explicit_type "ClassLoader"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a resource bundle using the specified base name, locale, and class loader.

<p>
Conceptually, <code>getBundle</code> uses the following strategy for locating and instantiating
resource bundles:
<p>
<code>getBundle</code> uses the base name, the specified locale, and the default
locale (obtained from {@link java.util.Locale#getDefault() Locale.getDefault})
to generate a sequence of <em>candidate bundle names</em>.
If the specified locale's language, country, and variant are all empty
strings, then the base name is the only candidate bundle name.
Otherwise, the following sequence is generated from the attribute
values of the specified locale (language1, country1, and variant1)
and of the default locale (language2, country2, and variant2):
<ul>
<li> baseName + \"_\" + language1 + \"_\" + country1 + \"_\" + variant1
<li> baseName + \"_\" + language1 + \"_\" + country1
<li> baseName + \"_\" + language1
<li> baseName + \"_\" + language2 + \"_\" + country2 + \"_\" + variant2
<li> baseName + \"_\" + language2 + \"_\" + country2
<li> baseName + \"_\" + language2
<li> baseName
</ul>
<p>
Candidate bundle names where the final component is an empty string are omitted.
For example, if country1 is an empty string, the second candidate bundle name is omitted.

<p>
<code>getBundle</code> then iterates over the candidate bundle names to find the first
one for which it can <em>instantiate</em> an actual resource bundle. For each candidate
bundle name, it attempts to create a resource bundle:
<ul>
<li>
First, it attempts to load a class using the candidate bundle name.
If such a class can be found and loaded using the specified class loader, is assignment
compatible with ResourceBundle, is accessible from ResourceBundle, and can be instantiated,
<code>getBundle</code> creates a new instance of this class and uses it as the <em>result
resource bundle</em>.
<li>
Otherwise, <code>getBundle</code> attempts to locate a property resource file.
It generates a path name from the candidate bundle name by replacing all \".\" characters
with \"/\" and appending the string \".properties\".
It attempts to find a \"resource\" with this name using
{@link java.lang.ClassLoader#getResource(java.lang.String) ClassLoader.getResource}.
(Note that a \"resource\" in the sense of <code>getResource</code> has nothing to do with
the contents of a resource bundle, it is just a container of data, such as a file.)
If it finds a \"resource\", it attempts to create a new
{@link PropertyResourceBundle} instance from its contents.
If successful, this instance becomes the <em>result resource bundle</em>.
</ul>

<p>
If no result resource bundle has been found, a <code>MissingResourceException</code>
is thrown.

<p>
Once a result resource bundle has been found, its parent chain is instantiated.
<code>getBundle</code> iterates over the candidate bundle names that can be
obtained by successively removing variant, country, and language
(each time with the preceding \"_\") from the bundle name of the result resource bundle.
As above, candidate bundle names where the final component is an empty string are omitted.
With each of the candidate bundle names it attempts to instantiate a resource bundle, as
described above.
Whenever it succeeds, it calls the previously instantiated resource
bundle's {@link #setParent(java.util.ResourceBundle) setParent} method
with the new resource bundle, unless the previously instantiated resource
bundle already has a non-null parent.

<p>
Implementations of <code>getBundle</code> may cache instantiated resource bundles
and return the same resource bundle instance multiple times. They may also
vary the sequence in which resource bundles are instantiated as long as the
selection of the result resource bundle and its parent chain are compatible with
the description above.

<p>
The <code>baseName</code> argument should be a fully qualified class name. However, for
compatibility with earlier versions, Sun's Java 2 runtime environments do not verify this,
and so it is possible to access <code>PropertyResourceBundle</code>s by specifying a
path name (using \"/\") instead of a fully qualified class name (using \".\").

<p>
<strong>Example:</strong> The following class and property files are provided:
MyResources.class, MyResources_fr_CH.properties, MyResources_fr_CH.class,
MyResources_fr.properties, MyResources_en.properties, MyResources_es_ES.class.
The contents of all files are valid (that is, public non-abstract subclasses of ResourceBundle for
the \".class\" files, syntactically correct \".properties\" files).
The default locale is <code>Locale(\"en\", \"GB\")</code>.
<p>
Calling <code>getBundle</code> with the shown locale argument values instantiates
resource bundles from the following sources:
<ul>
<li>Locale(\"fr\", \"CH\"): result MyResources_fr_CH.class, parent MyResources_fr.properties, parent MyResources.class
<li>Locale(\"fr\", \"FR\"): result MyResources_fr.properties, parent MyResources.class
<li>Locale(\"de\", \"DE\"): result MyResources_en.properties, parent MyResources.class
<li>Locale(\"en\", \"US\"): result MyResources_en.properties, parent MyResources.class
<li>Locale(\"es\", \"ES\"): result MyResources_es_ES.class, parent MyResources.class
</ul>
The file MyResources_fr_CH.properties is never used because it is hidden by
MyResources_fr_CH.class.

<p>

@param baseName the base name of the resource bundle, a fully qualified class name
@param locale the locale for which a resource bundle is desired
@param loader the class loader from which to load the resource bundle
@exception java.lang.NullPointerException
    if <code>baseName</code>, <code>locale</code>, or <code>loader</code> is <code>null</code>
@exception MissingResourceException
    if no resource bundle for the specified base name can be found
@return a resource bundle for the given base name and locale
@since 1.2"
      end

      operation 318875 "getBundleImpl"
	class_operation private return_type class_ref 153371 // ResourceBundle
	nparams 3
	  param in name "baseName" explicit_type "String"
	  param inout name "locale" type class_ref 138907 // Locale
	  param inout name "loader" explicit_type "ClassLoader"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 319003 "propagate"
	class_operation private explicit_return_type "Object"
	nparams 5
	  param inout name "loader" explicit_type "ClassLoader"
	  param inout name "names" type class_ref 153883 // Vector
	  param inout name "bundlesFound" type class_ref 153883 // Vector
	  param inout name "defaultLocale" type class_ref 138907 // Locale
	  param inout name "parent" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "propagate bundles from the root down the specified branch of the search tree.
@param loader the class loader for the bundles
@param names the names of the bundles along search path
@param bundlesFound the bundles corresponding to the names (some may be null)
@param defaultLocale the default locale at the time getBundle was called
@param parent the parent of the first bundle in the path (the root bundle)
@return the value of the last bundle along the path"
      end

      operation 319131 "throwMissingResourceException"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "baseName" explicit_type "String"
	  param inout name "locale" type class_ref 138907 // Locale
	nexceptions 1
	  exception class_ref 154011 // MissingResourceException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Throw a MissingResourceException with proper message "
      end

      operation 319259 "cleanUpConstructionList"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove any entries this thread may have in the construction list.
This is done as cleanup in the case where a bundle can't be
constructed."
      end

      operation 319387 "findBundle"
	class_operation private explicit_return_type "Object"
	nparams 5
	  param inout name "loader" explicit_type "ClassLoader"
	  param in name "bundleName" explicit_type "String"
	  param inout name "defaultLocale" type class_ref 138907 // Locale
	  param in name "baseName" explicit_type "String"
	  param inout name "parent" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find a bundle in the cache or load it via the loader or a property file.
If the bundle isn't found, an entry is put in the constructionCache
and null is returned.  If null is returned, the caller must define the bundle
by calling putBundleInCache.  This routine also propagates NOT_FOUND values
from parent to child bundles when the parent is NOT_FOUND.
@param loader the loader to use when loading a bundle
@param bundleName the complete bundle name including locale extension
@param defaultLocale the default locale at the time getBundle was called
@param parent the parent of the resource bundle being loaded.  null if
the bundle is a root bundle
@return the bundle or null if the bundle could not be found in the cache
or loaded."
      end

      operation 319515 "calculateBundleNames"
	class_operation private return_type class_ref 153883 // Vector
	nparams 2
	  param in name "baseName" explicit_type "String"
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate the bundles along the search path from the base bundle to the
bundle specified by baseName and locale.
@param baseName the base bundle name
@param locale the locale
@param names the vector used to return the names of the bundles along
the search path.
"
      end

      operation 319643 "findBundleInCache"
	class_operation private explicit_return_type "Object"
	nparams 3
	  param inout name "loader" explicit_type "ClassLoader"
	  param in name "bundleName" explicit_type "String"
	  param inout name "defaultLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find a bundle in the cache.
@param loader the class loader that is responsible for loading the bundle.
@param bundleName the complete name of the bundle including locale extension.
     ex. sun.text.resources.LocaleElements_fr_BE
@param defaultLocale the default locale at the time getBundle was called
@return the cached bundle.  null if the bundle is not in the cache."
      end

      operation 319771 "putBundleInCache"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "loader" explicit_type "ClassLoader"
	  param in name "bundleName" explicit_type "String"
	  param inout name "defaultLocale" type class_ref 138907 // Locale
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put a new bundle in the cache and notify waiting threads that a new
bundle has been put in the cache.
@param defaultLocale the default locale at the time getBundle was called"
      end

      operation 319899 "loadBundle"
	class_operation private explicit_return_type "Object"
	nparams 3
	  param in name "loader" explicit_type "ClassLoader"
	  param in name "bundleName" explicit_type "String"
	  param inout name "defaultLocale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load a bundle through either the specified ClassLoader or from a \".properties\" file
and return the loaded bundle.
@param loader the ClassLoader to use to load the bundle.  If null, the system
     ClassLoader is used.
@param bundleName the name of the resource to load.  The name should be complete
     including a qualified class name followed by the locale extension.
     ex. sun.text.resources.LocaleElements_fr_BE
@param defaultLocale the default locale at the time getBundle was called
@return the bundle or null if none could be found."
      end

      operation 320027 "handleGetObject"
	abstract protected explicit_return_type "Object"
	nparams 1
	  param in name "key" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an object for the given key from this resource bundle.
Returns null if this resource bundle does not contain an
object for the given key.

@param key the key for the desired object
@exception NullPointerException if <code>key</code> is <code>null</code>
@return the object for the given key, or null"
      end

      operation 320155 "getKeys"
	abstract public return_type class_ref 144411 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the keys.
"
      end
    end

    class 153883 "Vector"
      visibility public 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 8
      actual class class_ref 135451 // AbstractList
        rank 0 explicit_value "E"
      actual class class_ref 135451 // AbstractList
        rank 1 explicit_value ""
      actual class class_ref 135451 // AbstractList
        rank 2 explicit_value ""
      actual class class_ref 135451 // AbstractList
        rank 3 explicit_value ""
      actual class class_ref 135579 // List
        rank 0 explicit_value "E"
      actual class class_ref 135579 // List
        rank 1 explicit_value ""
      actual class class_ref 135579 // List
        rank 2 explicit_value ""
      actual class class_ref 135579 // List
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Vector</code> class implements a growable array of 
objects. Like an array, it contains components that can be 
accessed using an integer index. However, the size of a 
<code>Vector</code> can grow or shrink as needed to accommodate 
adding and removing items after the <code>Vector</code> has been created.<p>

Each vector tries to optimize storage management by maintaining a 
<code>capacity</code> and a <code>capacityIncrement</code>. The 
<code>capacity</code> is always at least as large as the vector 
size; it is usually larger because as components are added to the 
vector, the vector's storage increases in chunks the size of 
<code>capacityIncrement</code>. An application can increase the 
capacity of a vector before inserting a large number of 
components; this reduces the amount of incremental reallocation. <p>

As of the Java 2 platform v1.2, this class has been retrofitted to
implement List, so that it becomes a part of Java's collection framework.
Unlike the new collection implementations, Vector is synchronized.<p>

The Iterators returned by Vector's iterator and listIterator
methods are <em>fail-fast</em>: if the Vector is structurally modified
at any time after the Iterator is created, in any way except through the
Iterator's own remove or add methods, the Iterator will throw a
ConcurrentModificationException.  Thus, in the face of concurrent
modification, the Iterator fails quickly and cleanly, rather than risking
arbitrary, non-deterministic behavior at an undetermined time in the future.
The Enumerations returned by Vector's elements method are <em>not</em>
fail-fast.

<p>Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw <tt>ConcurrentModificationException</tt> on a best-effort basis. 
Therefore, it would be wrong to write a program that depended on this
exception for its correctness:  <i>the fail-fast behavior of iterators
should be used only to detect bugs.</i><p>

This class is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Lee Boynton
@author  Jonathan Payne
@version 1.96, 02/19/04
@see Collection
@see List
@see ArrayList
@see LinkedList
@since   JDK1.0"
      classrelation 173595 // <realization>
	relation 173595 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 173595 // <realization>
	  b parent class_ref 135451 // AbstractList
      end

      classrelation 173723 // <realization>
	relation 173723 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 173723 // <realization>
	  b parent class_ref 135579 // List
      end

      classrelation 173851 // <realization>
	relation 173851 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 173851 // <realization>
	  b parent class_ref 136347 // RandomAccess
      end

      classrelation 174107 // <realization>
	relation 174107 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 174107 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 198811 "elementData"
	protected explicit_type "Object"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The array buffer into which the components of the vector are
stored. The capacity of the vector is the length of this array buffer, 
and is at least large enough to contain all the vector's elements.<p>

Any array elements following the last element in the Vector are null.

@serial
"
      end

      attribute 198939 "elementCount"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of valid components in this <tt>Vector</tt> object. 
Components <tt>elementData[0]</tt> through 
<tt>elementData[elementCount-1]</tt> are the actual items.

@serial
"
      end

      attribute 199067 "capacityIncrement"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The amount by which the capacity of the vector is automatically 
incremented when its size becomes greater than its capacity.  If 
the capacity increment is less than or equal to zero, the capacity
of the vector is doubled each time it needs to grow.

@serial
"
      end

      attribute 199195 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -2767605614048989439L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.0.2 for interoperability "
      end

      operation 362395 "Vector"
	public explicit_return_type ""
	nparams 2
	  param in name "initialCapacity" explicit_type "int"
	  param in name "capacityIncrement" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty vector with the specified initial capacity and
capacity increment. 

@param   initialCapacity     the initial capacity of the vector.
@param   capacityIncrement   the amount by which the capacity is
                             increased when the vector overflows.
@exception IllegalArgumentException if the specified initial capacity
              is negative"
      end

      operation 362523 "Vector"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty vector with the specified initial capacity and 
with its capacity increment equal to zero.

@param   initialCapacity   the initial capacity of the vector.
@exception IllegalArgumentException if the specified initial capacity
              is negative"
      end

      operation 362651 "Vector"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty vector so that its internal data array 
has size <tt>10</tt> and its standard capacity increment is 
zero. "
      end

      operation 362779 "Vector"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a vector containing the elements of the specified
collection, in the order they are returned by the collection's
iterator.

@param c the collection whose elements are to be placed into this
      vector.
@throws NullPointerException if the specified collection is null.
@since   1.2"
      end

      operation 362907 "copyInto"
	public explicit_return_type "void"
	nparams 1
	  param inout name "anArray" explicit_type "Object"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies the components of this vector into the specified array. The 
item at index <tt>k</tt> in this vector is copied into component 
<tt>k</tt> of <tt>anArray</tt>. The array must be big enough to hold 
all the objects in this vector, else an 
<tt>IndexOutOfBoundsException</tt> is thrown.

@param   anArray   the array into which the components get copied.
@throws  NullPointerException if the given array is null."
      end

      operation 363035 "trimToSize"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Trims the capacity of this vector to be the vector's current 
size. If the capacity of this vector is larger than its current 
size, then the capacity is changed to equal the size by replacing 
its internal data array, kept in the field <tt>elementData</tt>, 
with a smaller one. An application can use this operation to 
minimize the storage of a vector. "
      end

      operation 363163 "ensureCapacity"
	public explicit_return_type "void"
	nparams 1
	  param in name "minCapacity" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increases the capacity of this vector, if necessary, to ensure 
that it can hold at least the number of components specified by 
the minimum capacity argument.

<p>If the current capacity of this vector is less than
<tt>minCapacity</tt>, then its capacity is increased by replacing its
internal data array, kept in the field <tt>elementData</tt>, with a
larger one.  The size of the new data array will be the old size plus
<tt>capacityIncrement</tt>, unless the value of
<tt>capacityIncrement</tt> is less than or equal to zero, in which case
the new capacity will be twice the old capacity; but if this new size
is still smaller than <tt>minCapacity</tt>, then the new capacity will
be <tt>minCapacity</tt>.

@param minCapacity the desired minimum capacity."
      end

      operation 363291 "ensureCapacityHelper"
	private explicit_return_type "void"
	nparams 1
	  param in name "minCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This implements the unsynchronized semantics of ensureCapacity.
Synchronized methods in this class can internally call this 
method for ensuring capacity without incurring the cost of an 
extra synchronization.

@see java.util.Vector#ensureCapacity(int)"
      end

      operation 363419 "setSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "newSize" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the size of this vector. If the new size is greater than the 
current size, new <code>null</code> items are added to the end of 
the vector. If the new size is less than the current size, all 
components at index <code>newSize</code> and greater are discarded.

@param   newSize   the new size of this vector.
@throws  ArrayIndexOutOfBoundsException if new size is negative."
      end

      operation 363547 "capacity"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current capacity of this vector.

@return  the current capacity (the length of its internal 
         data array, kept in the field <tt>elementData</tt> 
         of this vector)."
      end

      operation 363675 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of components in this vector.

@return  the number of components in this vector."
      end

      operation 363803 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this vector has no components.

@return  <code>true</code> if and only if this vector has 
         no components, that is, its size is zero;
         <code>false</code> otherwise."
      end

      operation 363931 "elements"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the components of this vector. The 
returned <tt>Enumeration</tt> object will generate all items in 
this vector. The first item generated is the item at index <tt>0</tt>, 
then the item at index <tt>1</tt>, and so on. 

@return  an enumeration of the components of this vector.
@see     Enumeration
@see     Iterator"
      end

      operation 364059 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "elem" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the specified object is a component in this vector.

@param   elem   an object.
@return  <code>true</code> if and only if the specified object 
is the same as a component in this vector, as determined by the 
<tt>equals</tt> method; <code>false</code> otherwise."
      end

      operation 364187 "indexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "elem" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches for the first occurence of the given argument, testing 
for equality using the <code>equals</code> method. 

@param   elem   an object.
@return  the index of the first occurrence of the argument in this
         vector, that is, the smallest value <tt>k</tt> such that 
         <tt>elem.equals(elementData[k])</tt> is <tt>true</tt>; 
         returns <code>-1</code> if the object is not found.
@see     Object#equals(Object)"
      end

      operation 364315 "indexOf"
	public explicit_return_type "int"
	nparams 2
	  param inout name "elem" explicit_type "Object"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches for the first occurence of the given argument, beginning 
the search at <code>index</code>, and testing for equality using 
the <code>equals</code> method. 

@param   elem    an object.
@param   index   the non-negative index to start searching from.
@return  the index of the first occurrence of the object argument in
         this vector at position <code>index</code> or later in the
         vector, that is, the smallest value <tt>k</tt> such that 
         <tt>elem.equals(elementData[k]) && (k &gt;= index)</tt> is 
         <tt>true</tt>; returns <code>-1</code> if the object is not 
         found. (Returns <code>-1</code> if <tt>index</tt> &gt;= the
         current size of this <tt>Vector</tt>.)
@exception  IndexOutOfBoundsException  if <tt>index</tt> is negative.
@see     Object#equals(Object)"
      end

      operation 364443 "lastIndexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "elem" explicit_type "Object"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the last occurrence of the specified object in
this vector.

@param   elem   the desired component.
@return  the index of the last occurrence of the specified object in
         this vector, that is, the largest value <tt>k</tt> such that 
         <tt>elem.equals(elementData[k])</tt> is <tt>true</tt>; 
         returns <code>-1</code> if the object is not found."
      end

      operation 364571 "lastIndexOf"
	public explicit_return_type "int"
	nparams 2
	  param inout name "elem" explicit_type "Object"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches backwards for the specified object, starting from the 
specified index, and returns an index to it. 

@param  elem    the desired component.
@param  index   the index to start searching from.
@return the index of the last occurrence of the specified object in this
         vector at position less than or equal to <code>index</code> in
         the vector, that is, the largest value <tt>k</tt> such that 
         <tt>elem.equals(elementData[k]) && (k &lt;= index)</tt> is 
         <tt>true</tt>; <code>-1</code> if the object is not found.
         (Returns <code>-1</code> if <tt>index</tt> is negative.)
@exception  IndexOutOfBoundsException  if <tt>index</tt> is greater
            than or equal to the current size of this vector."
      end

      operation 364699 "elementAt"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the component at the specified index.<p>

This method is identical in functionality to the get method
(which is part of the List interface).

@param      index   an index into this vector.
@return     the component at the specified index.
@exception  ArrayIndexOutOfBoundsException  if the <tt>index</tt> 
            is negative or not less than the current size of this 
            <tt>Vector</tt> object.
            given.
@see	   #get(int)
@see	   List"
      end

      operation 364827 "firstElement"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first component (the item at index <tt>0</tt>) of 
this vector.

@return     the first component of this vector.
@exception  NoSuchElementException  if this vector has no components."
      end

      operation 364955 "lastElement"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the last component of the vector.

@return  the last component of the vector, i.e., the component at index
         <code>size()&nbsp;-&nbsp;1</code>.
@exception  NoSuchElementException  if this vector is empty."
      end

      operation 365083 "setElementAt"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "E"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the component at the specified <code>index</code> of this 
vector to be the specified object. The previous component at that 
position is discarded.<p>

The index must be a value greater than or equal to <code>0</code> 
and less than the current size of the vector. <p>

This method is identical in functionality to the set method
(which is part of the List interface). Note that the set method reverses
the order of the parameters, to more closely match array usage.  Note
also that the set method returns the old value that was stored at the
specified position.

@param      obj     what the component is to be set to.
@param      index   the specified index.
@exception  ArrayIndexOutOfBoundsException  if the index was invalid.
@see        #size()
@see        List
@see	   #set(int, java.lang.Object)"
      end

      operation 365211 "removeElementAt"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes the component at the specified index. Each component in 
this vector with an index greater or equal to the specified 
<code>index</code> is shifted downward to have an index one 
smaller than the value it had previously. The size of this vector 
is decreased by <tt>1</tt>.<p>

The index must be a value greater than or equal to <code>0</code> 
and less than the current size of the vector. <p>

This method is identical in functionality to the remove method
(which is part of the List interface).  Note that the remove method
returns the old value that was stored at the specified position.

@param      index   the index of the object to remove.
@exception  ArrayIndexOutOfBoundsException  if the index was invalid.
@see        #size()
@see	   #remove(int)
@see	   List"
      end

      operation 365339 "insertElementAt"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "E"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified object as a component in this vector at the 
specified <code>index</code>. Each component in this vector with 
an index greater or equal to the specified <code>index</code> is 
shifted upward to have an index one greater than the value it had 
previously. <p>

The index must be a value greater than or equal to <code>0</code> 
and less than or equal to the current size of the vector. (If the
index is equal to the current size of the vector, the new element
is appended to the Vector.)<p>

This method is identical in functionality to the add(Object, int) method
(which is part of the List interface). Note that the add method reverses
the order of the parameters, to more closely match array usage.

@param      obj     the component to insert.
@param      index   where to insert the new component.
@exception  ArrayIndexOutOfBoundsException  if the index was invalid.
@see        #size()
@see	   #add(int, Object)
@see	   List"
      end

      operation 365467 "addElement"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" explicit_type "E"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified component to the end of this vector, 
increasing its size by one. The capacity of this vector is 
increased if its size becomes greater than its capacity. <p>

This method is identical in functionality to the add(Object) method
(which is part of the List interface).

@param   obj   the component to be added.
@see	   #add(Object)
@see	   List"
      end

      operation 365595 "removeElement"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the first (lowest-indexed) occurrence of the argument 
from this vector. If the object is found in this vector, each 
component in the vector with an index greater or equal to the 
object's index is shifted downward to have an index one smaller 
than the value it had previously.<p>

This method is identical in functionality to the remove(Object) 
method (which is part of the List interface).

@param   obj   the component to be removed.
@return  <code>true</code> if the argument was a component of this
         vector; <code>false</code> otherwise.
@see	List#remove(Object)
@see	List"
      end

      operation 365723 "removeAllElements"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all components from this vector and sets its size to zero.<p>

This method is identical in functionality to the clear method
(which is part of the List interface).

@see	#clear
@see	List"
      end

      operation 365851 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a clone of this vector. The copy will contain a
reference to a clone of the internal data array, not a reference 
to the original internal data array of this <tt>Vector</tt> object. 

@return  a clone of this vector."
      end

      operation 365979 "toArray"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this Vector
in the correct order.

@since 1.2"
      end

      operation 366107 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this Vector in the
correct order; the runtime type of the returned array is that of the
specified array.  If the Vector fits in the specified array, it is
returned therein.  Otherwise, a new array is allocated with the runtime
type of the specified array and the size of this Vector.<p>

If the Vector fits in the specified array with room to spare
(i.e., the array has more elements than the Vector),
the element in the array immediately following the end of the
Vector is set to null.  This is useful in determining the length
of the Vector <em>only</em> if the caller knows that the Vector
does not contain any null elements.

@param a the array into which the elements of the Vector are to
		be stored, if it is big enough; otherwise, a new array of the
		same runtime type is allocated for this purpose.
@return an array containing the elements of the Vector.
@exception ArrayStoreException the runtime type of a is not a supertype
of the runtime type of every element in this Vector.
@throws NullPointerException if the given array is null.
@since 1.2"
      end

      operation 366235 "get"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Positional Access Operations

Returns the element at the specified position in this Vector.

@param index index of element to return.
@return object at the specified index
@exception ArrayIndexOutOfBoundsException index is out of range (index
		  &lt; 0 || index &gt;= size()).
@since 1.2"
      end

      operation 366363 "set"
	public explicit_return_type "E"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the element at the specified position in this Vector with the
specified element.

@param index index of element to replace.
@param element element to be stored at the specified position.
@return the element previously at the specified position.
@exception ArrayIndexOutOfBoundsException index out of range
		  (index &lt; 0 || index &gt;= size()).
@since 1.2"
      end

      operation 366491 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified element to the end of this Vector.

@param o element to be appended to this Vector.
@return true (as per the general contract of Collection.add).
@since 1.2"
      end

      operation 366619 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the first occurrence of the specified element in this Vector
If the Vector does not contain the element, it is unchanged.  More
formally, removes the element with the lowest index i such that
<code>(o==null ? get(i)==null : o.equals(get(i)))</code> (if such
an element exists).

@param o element to be removed from this Vector, if present.
@return true if the Vector contained the specified element.
@since 1.2"
      end

      operation 366747 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the specified position in this Vector.
Shifts the element currently at that position (if any) and any
subsequent elements to the right (adds one to their indices).

@param index index at which the specified element is to be inserted.
@param element element to be inserted.
@exception ArrayIndexOutOfBoundsException index is out of range
		  (index &lt; 0 || index &gt; size()).
@since 1.2"
      end

      operation 366875 "remove"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the element at the specified position in this Vector.
shifts any subsequent elements to the left (subtracts one from their
indices).  Returns the element that was removed from the Vector.

@exception ArrayIndexOutOfBoundsException index out of range (index
		  &lt; 0 || index &gt;= size()).
@param index the index of the element to removed.
@return element that was removed
@since 1.2"
      end

      operation 367003 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this Vector.  The Vector will
be empty after this call returns (unless it throws an exception).

@since 1.2"
      end

      operation 367131 "containsAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bulk Operations

Returns true if this Vector contains all of the elements in the
specified Collection.

@param   c a collection whose elements will be tested for containment
         in this Vector
@return true if this Vector contains all of the elements in the
	       specified collection.
@throws NullPointerException if the specified collection is null."
      end

      operation 367259 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all of the elements in the specified Collection to the end of
this Vector, in the order that they are returned by the specified
Collection's Iterator.  The behavior of this operation is undefined if
the specified Collection is modified while the operation is in progress.
(This implies that the behavior of this call is undefined if the
specified Collection is this Vector, and this Vector is nonempty.)

@param c elements to be inserted into this Vector.
@return <tt>true</tt> if this Vector changed as a result of the call.
@throws NullPointerException if the specified collection is null.
@since 1.2"
      end

      operation 367387 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this Vector all of its elements that are contained in the
specified Collection.

@param c a collection of elements to be removed from the Vector
@return true if this Vector changed as a result of the call.
@throws NullPointerException if the specified collection is null.
@since 1.2"
      end

      operation 367515 "retainAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retains only the elements in this Vector that are contained in the
specified Collection.  In other words, removes from this Vector all
of its elements that are not contained in the specified Collection. 

@param c a collection of elements to be retained in this Vector
         (all other elements are removed)
@return true if this Vector changed as a result of the call.
@throws NullPointerException if the specified collection is null.
@since 1.2"
      end

      operation 367643 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts all of the elements in the specified Collection into this
Vector at the specified position.  Shifts the element currently at
that position (if any) and any subsequent elements to the right
(increases their indices).  The new elements will appear in the Vector  
in the order that they are returned by the specified Collection's
iterator.

@param index index at which to insert first element
		    from the specified collection.
@param c elements to be inserted into this Vector.
@return <tt>true</tt> if this Vector changed as a result of the call.
@exception ArrayIndexOutOfBoundsException index out of range (index
		  &lt; 0 || index &gt; size()).
@throws NullPointerException if the specified collection is null.
@since 1.2"
      end

      operation 367771 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified Object with this Vector for equality.  Returns
true if and only if the specified Object is also a List, both Lists
have the same size, and all corresponding pairs of elements in the two
Lists are <em>equal</em>.  (Two elements <code>e1</code> and
<code>e2</code> are <em>equal</em> if <code>(e1==null ? e2==null :
e1.equals(e2))</code>.)  In other words, two Lists are defined to be
equal if they contain the same elements in the same order.

@param o the Object to be compared for equality with this Vector.
@return true if the specified Object is equal to this Vector"
      end

      operation 367899 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this Vector."
      end

      operation 368027 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this Vector, containing
the String representation of each element."
      end

      operation 368155 "subList"
	public return_type class_ref 135579 // List
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this List between fromIndex,
inclusive, and toIndex, exclusive.  (If fromIndex and ToIndex are
equal, the returned List is empty.)  The returned List is backed by this
List, so changes in the returned List are reflected in this List, and
vice-versa.  The returned List supports all of the optional List
operations supported by this List.<p>

This method eliminates the need for explicit range operations (of
the sort that commonly exist for arrays).   Any operation that expects
a List can be used as a range operation by operating on a subList view
instead of a whole List.  For example, the following idiom
removes a range of elements from a List:
<pre>
	    list.subList(from, to).clear();
</pre>
Similar idioms may be constructed for indexOf and lastIndexOf,
and all of the algorithms in the Collections class can be applied to
a subList.<p>

The semantics of the List returned by this method become undefined if
the backing list (i.e., this List) is <i>structurally modified</i> in
any way other than via the returned List.  (Structural modifications are
those that change the size of the List, or otherwise perturb it in such
a fashion that iterations in progress may yield incorrect results.)

@param fromIndex low endpoint (inclusive) of the subList.
@param toIndex high endpoint (exclusive) of the subList.
@return a view of the specified range within this List.
@throws IndexOutOfBoundsException endpoint index value out of range
        <code>(fromIndex &lt; 0 || toIndex &gt; size)</code>
@throws IllegalArgumentException endpoint indices out of order
	       <code>(fromIndex &gt; toIndex)</code>"
      end

      operation 368283 "removeRange"
	protected explicit_return_type "void"
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this List all of the elements whose index is between
fromIndex, inclusive and toIndex, exclusive.  Shifts any succeeding
elements to the left (reduces their index).
This call shortens the ArrayList by (toIndex - fromIndex) elements.  (If
toIndex==fromIndex, this operation has no effect.)

@param fromIndex index of first element to be removed.
@param toIndex index after last element to be removed."
      end

      operation 368411 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectOutputStream"
	nexceptions 1
	  explicit_exception "java.io.IOException"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state of the <tt>Vector</tt> instance to a stream (that
is, serialize it).  This method is present merely for synchronization.
It just calls the default readObject method."
      end
    end

    class 154011 "MissingResourceException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that a resource is missing.
@see java.lang.Exception
@see ResourceBundle
@version     1.16, 12/19/03
@author      Mark Davis
@since       JDK1.1"
      operation 325915 "MissingResourceException"
	public explicit_return_type ""
	nparams 3
	  param in name "s" explicit_type "String"
	  param in name "className" explicit_type "String"
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a MissingResourceException with the specified information.
A detail message is a String that describes this particular exception.
@param s the detail message
@param className the name of the resource class
@param key the key for the missing resource."
      end

      operation 326043 "getClassName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets parameter passed by constructor.

@return the name of the resource class"
      end

      operation 326171 "getKey"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets parameter passed by constructor.

@return the key for the missing resource"
      end

      attribute 182299 "className"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "============ privates ============

The class name of the resource bundle requested by the user.
@serial
"
      end

      attribute 182427 "key"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The name of the specific resource requested by the user.
@serial
"
      end
    end

    class 154139 "MissingFormatArgumentException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when there is a format specifier which does not
have a corresponding argument or if an argument index refers to an argument
that does not exist.

<p> Unless otherwise specified, passing a <tt>null</tt> argument to any
method or constructor in this class will cause a {@link
NullPointerException} to be thrown.

@version 	1.2, 12/19/03
@since 1.5"
      classrelation 169243 // <generalisation>
	relation 169243 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 169243 // <generalisation>
	  b parent class_ref 145435 // IllegalFormatException
      end

      attribute 181787 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  19190115L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 181915 "s"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 325147 "MissingFormatArgumentException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class with the unmatched format
specifier.

@param  s
        Format specifier which does not have a corresponding argument"
      end

      operation 325275 "getFormatSpecifier"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unmatched format specifier.

@return  The unmatched format specifier"
      end

      operation 325403 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 154267 "MissingFormatWidthException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when the format width is required.

<p> Unless otherwise specified, passing a <tt>null</tt> argument to anyg
method or constructor in this class will cause a {@link
NullPointerException} to be thrown.

@version 	1.2, 12/19/03
@since 1.5"
      classrelation 169371 // <generalisation>
	relation 169371 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 169371 // <generalisation>
	  b parent class_ref 145435 // IllegalFormatException
      end

      attribute 182043 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  15560123L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 182171 "s"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 325531 "MissingFormatWidthException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class with the specified format
specifier. 

@param  s
        The format specifier which does not have a width"
      end

      operation 325659 "getFormatSpecifier"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the format specifier which does not have a width.

@return  The format specifier which does not have a width"
      end

      operation 325787 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 154395 "Observable"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents an observable object, or \"data\"
in the model-view paradigm. It can be subclassed to represent an 
object that the application wants to have observed. 
<p>
An observable object can have one or more observers. An observer 
may be any object that implements interface <tt>Observer</tt>. After an 
observable instance changes, an application calling the 
<code>Observable</code>'s <code>notifyObservers</code> method  
causes all of its observers to be notified of the change by a call 
to their <code>update</code> method. 
<p>
The order in which notifications will be delivered is unspecified.  
The default implementation provided in the Observable class will
notify Observers in the order in which they registered interest, but 
subclasses may change this order, use no guaranteed order, deliver 
notifications on separate threads, or may guarantee that their
subclass follows this order, as they choose.
<p>
Note that this notification mechanism is has nothing to do with threads 
and is completely separate from the <tt>wait</tt> and <tt>notify</tt> 
mechanism of class <tt>Object</tt>.
<p>
When an observable object is newly created, its set of observers is 
empty. Two observers are considered the same if and only if the 
<tt>equals</tt> method returns true for them.

@author  Chris Warth
@version 1.38, 01/12/04
@see     java.util.Observable#notifyObservers()
@see     java.util.Observable#notifyObservers(java.lang.Object)
@see     java.util.Observer
@see     java.util.Observer#update(java.util.Observable, java.lang.Object)
@since   JDK1.0"
      attribute 182555 "changed"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 169627 // obs (<unidirectional association>)
	relation 169627 --->
	  a role_name "obs" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 169627 // obs (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      operation 326299 "Observable"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Construct an Observable with zero Observers. "
      end

      operation 326427 "addObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 154523 // Observer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an observer to the set of observers for this object, provided 
that it is not the same as some observer already in the set. 
The order in which notifications will be delivered to multiple 
observers is not specified. See the class comment.

@param   o   an observer to be added.
@throws NullPointerException   if the parameter o is null."
      end

      operation 326555 "deleteObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 154523 // Observer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes an observer from the set of observers of this object. 
Passing <CODE>null</CODE> to this method will have no effect.
@param   o   the observer to be deleted."
      end

      operation 326683 "notifyObservers"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If this object has changed, as indicated by the 
<code>hasChanged</code> method, then notify all of its observers 
and then call the <code>clearChanged</code> method to 
indicate that this object has no longer changed. 
<p>
Each observer has its <code>update</code> method called with two
arguments: this observable object and <code>null</code>. In other 
words, this method is equivalent to:
<blockquote><tt>
notifyObservers(null)</tt></blockquote>

@see     java.util.Observable#clearChanged()
@see     java.util.Observable#hasChanged()
@see     java.util.Observer#update(java.util.Observable, java.lang.Object)"
      end

      operation 326811 "notifyObservers"
	public explicit_return_type "void"
	nparams 1
	  param inout name "arg" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If this object has changed, as indicated by the 
<code>hasChanged</code> method, then notify all of its observers 
and then call the <code>clearChanged</code> method to indicate 
that this object has no longer changed. 
<p>
Each observer has its <code>update</code> method called with two
arguments: this observable object and the <code>arg</code> argument.

@param   arg   any object.
@see     java.util.Observable#clearChanged()
@see     java.util.Observable#hasChanged()
@see     java.util.Observer#update(java.util.Observable, java.lang.Object)"
      end

      operation 326939 "deleteObservers"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears the observer list so that this object no longer has any observers."
      end

      operation 327067 "setChanged"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks this <tt>Observable</tt> object as having been changed; the 
<tt>hasChanged</tt> method will now return <tt>true</tt>."
      end

      operation 327195 "clearChanged"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates that this object has no longer changed, or that it has 
already notified all of its observers of its most recent change, 
so that the <tt>hasChanged</tt> method will now return <tt>false</tt>. 
This method is called automatically by the 
<code>notifyObservers</code> methods. 

@see     java.util.Observable#notifyObservers()
@see     java.util.Observable#notifyObservers(java.lang.Object)"
      end

      operation 327323 "hasChanged"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this object has changed. 

@return  <code>true</code> if and only if the <code>setChanged</code> 
         method has been called more recently than the 
         <code>clearChanged</code> method on this object; 
         <code>false</code> otherwise.
@see     java.util.Observable#clearChanged()
@see     java.util.Observable#setChanged()"
      end

      operation 327451 "countObservers"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of observers of this <tt>Observable</tt> object.

@return  the number of observers of this object."
      end
    end

    class 154523 "Observer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class can implement the <code>Observer</code> interface when it
wants to be informed of changes in observable objects.

@author  Chris Warth
@version 1.19, 12/19/03
@see     java.util.Observable
@since   JDK1.0"
      operation 327579 "update"
	public explicit_return_type "void"
	nparams 2
	  param inout name "o" type class_ref 154395 // Observable
	  param inout name "arg" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called whenever the observed object is changed. An
application calls an <tt>Observable</tt> object's
<code>notifyObservers</code> method to have all the object's
observers notified of the change.

@param   o     the observable object.
@param   arg   an argument passed to the <code>notifyObservers</code>
                method."
      end
    end

    class 154651 "PriorityQueue"
      visibility public 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 137115 // AbstractQueue
        rank 0 explicit_value "E"
      actual class class_ref 137115 // AbstractQueue
        rank 1 explicit_value ""
      actual class class_ref 137115 // AbstractQueue
        rank 2 explicit_value ""
      actual class class_ref 137115 // AbstractQueue
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An unbounded priority {@linkplain Queue queue} based on a priority
heap.  This queue orders elements according to an order specified
at construction time, which is specified either according to their
<i>natural order</i> (see {@link Comparable}), or according to a
{@link java.util.Comparator}, depending on which constructor is
used. A priority queue does not permit <tt>null</tt> elements.
A priority queue relying on natural ordering also does not
permit insertion of non-comparable objects (doing so may result
in <tt>ClassCastException</tt>). 

<p>The <em>head</em> of this queue is the <em>least</em> element
with respect to the specified ordering.  If multiple elements are
tied for least value, the head is one of those elements -- ties are
broken arbitrarily.  The queue retrieval operations <tt>poll</tt>,
<tt>remove</tt>, <tt>peek</tt>, and <tt>element</tt> access the
element at the head of the queue.

<p>A priority queue is unbounded, but has an internal
<i>capacity</i> governing the size of an array used to store the
elements on the queue.  It is always at least as large as the queue
size.  As elements are added to a priority queue, its capacity
grows automatically.  The details of the growth policy are not
specified.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces. 
The
Iterator provided in method {@link #iterator()} is <em>not</em>
guaranteed to traverse the elements of the PriorityQueue in any
particular order. If you need ordered traversal, consider using
<tt>Arrays.sort(pq.toArray())</tt>.

<p> <strong>Note that this implementation is not synchronized.</strong>
Multiple threads should not access a <tt>PriorityQueue</tt>
instance concurrently if any of the threads modifies the list
structurally. Instead, use the thread-safe {@link
java.util.concurrent.PriorityBlockingQueue} class.


<p>Implementation note: this implementation provides O(log(n)) time
for the insertion methods (<tt>offer</tt>, <tt>poll</tt>,
<tt>remove()</tt> and <tt>add</tt>) methods; linear time for the
<tt>remove(Object)</tt> and <tt>contains(Object)</tt> methods; and
constant time for the retrieval methods (<tt>peek</tt>,
<tt>element</tt>, and <tt>size</tt>).

<p>This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.
@since 1.5
@version 1.6, 06/11/04
@author Josh Bloch
@param <E> the type of elements held in this collection"
      classrelation 169755 // <realization>
	relation 169755 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 169755 // <realization>
	  b parent class_ref 137115 // AbstractQueue
      end

      classrelation 169883 // <realization>
	relation 169883 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 169883 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 182683 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -7720805057305804111L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 182811 "DEFAULT_INITIAL_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 182939 "queue"
	private explicit_type "Object"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Priority queue represented as a balanced binary heap: the two children
of queue[n] are queue[2*n] and queue[2*n + 1].  The priority queue is
ordered by comparator, or by the elements' natural ordering, if
comparator is null:  For each node n in the heap and each descendant d
of n, n <= d.

The element with the lowest value is in queue[1], assuming the queue is
nonempty.  (A one-based array is used in preference to the traditional
zero-based array to simplify parent and child calculations.)

queue.length must be >= 2, even if size == 0.
"
      end

      attribute 183067 "size"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of elements in the priority queue.
"
      end

      classrelation 170011 // comparator (<unidirectional association>)
	relation 170011 --->
	  a role_name "comparator" const_relation private
	    comment "
The comparator, or null if priority queue uses elements'
natural ordering.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super E> ${name}${value};
"
	    classrelation_ref 170011 // comparator (<unidirectional association>)
	  b parent class_ref 138139 // Comparator
      end

      attribute 183195 "modCount"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of times this priority queue has been
<i>structurally modified</i>.  See AbstractList for gory details.
"
      end

      operation 327707 "PriorityQueue"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>PriorityQueue</tt> with the default initial capacity
(11) that orders its elements according to their natural
ordering (using <tt>Comparable</tt>)."
      end

      operation 327835 "PriorityQueue"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>PriorityQueue</tt> with the specified initial capacity
that orders its elements according to their natural ordering
(using <tt>Comparable</tt>).

@param initialCapacity the initial capacity for this priority queue.
@throws IllegalArgumentException if <tt>initialCapacity</tt> is less
than 1"
      end

      operation 327963 "PriorityQueue"
	public explicit_return_type ""
	nparams 2
	  param in name "initialCapacity" explicit_type "int"
	  param inout name "comparator" type class_ref 138139 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>PriorityQueue</tt> with the specified initial capacity
that orders its elements according to the specified comparator.

@param initialCapacity the initial capacity for this priority queue.
@param comparator the comparator used to order this priority queue.
If <tt>null</tt> then the order depends on the elements' natural
ordering.
@throws IllegalArgumentException if <tt>initialCapacity</tt> is less
than 1"
      end

      operation 328091 "initializeArray"
	private explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Common code to initialize underlying queue array across
constructors below."
      end

      operation 328219 "fillFromSorted"
	private explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initially fill elements of the queue array under the 
knowledge that it is sorted or is another PQ, in which
case we can just place the elements in the order presented."
      end

      operation 328347 "fillFromUnsorted"
	private explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initially fill elements of the queue array that is not to our knowledge
sorted, so we must rearrange the elements to guarantee the heap
invariant."
      end

      operation 328475 "PriorityQueue"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>PriorityQueue</tt> containing the elements in the
specified collection.  The priority queue has an initial
capacity of 110% of the size of the specified collection or 1
if the collection is empty.  If the specified collection is an
instance of a {@link java.util.SortedSet} or is another
<tt>PriorityQueue</tt>, the priority queue will be sorted
according to the same comparator, or according to its elements'
natural order if the collection is sorted according to its
elements' natural order.  Otherwise, the priority queue is
ordered according to its elements' natural order.

@param c the collection whose elements are to be placed
       into this priority queue.
@throws ClassCastException if elements of the specified collection
        cannot be compared to one another according to the priority
        queue's ordering.
@throws NullPointerException if <tt>c</tt> or any element within it
is <tt>null</tt>"
      end

      operation 328603 "PriorityQueue"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 154651 // PriorityQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>PriorityQueue</tt> containing the elements in the
specified collection.  The priority queue has an initial
capacity of 110% of the size of the specified collection or 1
if the collection is empty.  This priority queue will be sorted
according to the same comparator as the given collection, or
according to its elements' natural order if the collection is
sorted according to its elements' natural order.

@param c the collection whose elements are to be placed
       into this priority queue.
@throws ClassCastException if elements of the specified collection
        cannot be compared to one another according to the priority
        queue's ordering.
@throws NullPointerException if <tt>c</tt> or any element within it
is <tt>null</tt>"
      end

      operation 328731 "PriorityQueue"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 139931 // SortedSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>PriorityQueue</tt> containing the elements in the
specified collection.  The priority queue has an initial
capacity of 110% of the size of the specified collection or 1
if the collection is empty.  This priority queue will be sorted
according to the same comparator as the given collection, or
according to its elements' natural order if the collection is
sorted according to its elements' natural order.

@param c the collection whose elements are to be placed
       into this priority queue.
@throws ClassCastException if elements of the specified collection
        cannot be compared to one another according to the priority
        queue's ordering.
@throws NullPointerException if <tt>c</tt> or any element within it
is <tt>null</tt>"
      end

      operation 328859 "grow"
	private explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resize array, if necessary, to be able to hold given index"
      end

      operation 328987 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this priority queue.

@return <tt>true</tt>
@throws ClassCastException if the specified element cannot be compared
with elements currently in the priority queue according
to the priority queue's ordering.
@throws NullPointerException if the specified element is <tt>null</tt>."
      end

      operation 329115 "peek"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 329243 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Collection Methods - the first two override to update docs

Adds the specified element to this queue.
@return <tt>true</tt> (as per the general contract of
<tt>Collection.add</tt>).

@throws NullPointerException if the specified element is <tt>null</tt>.
@throws ClassCastException if the specified element cannot be compared
with elements currently in the priority queue according
to the priority queue's ordering."
      end

      operation 329371 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this
queue, if it is present."
      end

      operation 329499 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue. The iterator
does not return the elements in any particular order.

@return an iterator over the elements in this queue."
      end

      class 154779 "Itr"
	visibility private 
	nactuals 4
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "E"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 170139 // <realization>
	  relation 170139 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 170139 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	attribute 183323 "cursor"
	  private explicit_type "int"
	  init_value "=  1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Index (into queue array) of element to be returned by
subsequent call to next.
"
	end

	attribute 183451 "lastRet"
	  private explicit_type "int"
	  init_value "=  0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Index of element returned by most recent call to next,
unless that element came from the forgetMeNot list.
Reset to 0 if element is deleted by a call to remove.
"
	end

	attribute 183579 "expectedModCount"
	  private explicit_type "int"
	  init_value "=  modCount"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The modCount value that the iterator believes that the backing
List should have.  If this expectation is violated, the iterator
has detected concurrent modification.
"
	end

	classrelation 170267 // forgetMeNot (<unidirectional association>)
	  relation 170267 --->
	    a role_name "forgetMeNot" init_value "=  null" private
	      comment "
A list of elements that were moved from the unvisited portion of
the heap into the visited portion as a result of \"unlucky\" element
removals during the iteration.  (Unlucky element removals are those
that require a fixup instead of a fixdown.)  We must visit all of
the elements in this list to complete the iteration.  We do this
after we've completed the \"normal\" iteration.

We expect that most iterations, even those involving removals,
will not use need to store elements in this field.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 170267 // forgetMeNot (<unidirectional association>)
	    b parent class_ref 137627 // ArrayList
	end

	attribute 183707 "lastRetElt"
	  private explicit_type "Object"
	  init_value "=  null"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Element returned by the most recent call to next iff that
element was drawn from the forgetMeNot list.
"
	end

	operation 329627 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 329755 "next"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 329883 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 330011 "checkForComodification"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 330139 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 330267 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all elements from the priority queue.
The queue will be empty after this call returns."
      end

      operation 330395 "poll"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 330523 "removeAt"
	private explicit_return_type "E"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and returns the ith element from queue.  (Recall that queue
is one-based, so 1 <= i <= size.)

Normally this method leaves the elements at positions from 1 up to i-1,
inclusive, untouched.  Under these circumstances, it returns null.
Occasionally, in order to maintain the heap invariant, it must move
the last element of the list to some index in the range [2, i-1],
and move the element previously at position (i/2) to position i.
Under these circumstances, this method returns the element that was
previously at the end of the list and is now at some position between
2 and i-1 inclusive."
      end

      operation 330651 "fixUp"
	private explicit_return_type "void"
	nparams 1
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Establishes the heap invariant (described above) assuming the heap
satisfies the invariant except possibly for the leaf-node indexed by k
(which may have a nextExecutionTime less than its parent's).

This method functions by \"promoting\" queue[k] up the hierarchy
(by swapping it with its parent) repeatedly until queue[k]
is greater than or equal to its parent."
      end

      operation 330779 "fixDown"
	private explicit_return_type "void"
	nparams 1
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Establishes the heap invariant (described above) in the subtree
rooted at k, which is assumed to satisfy the heap invariant except
possibly for node k itself (which may be greater than its children).

This method functions by \"demoting\" queue[k] down the hierarchy
(by swapping it with its smaller child) repeatedly until queue[k]
is less than or equal to its children."
      end

      operation 330907 "heapify"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Establishes the heap invariant (described above) in the entire tree,
assuming nothing about the order of the elements prior to the call."
      end

      operation 331035 "comparator"
	public return_type class_ref 138139 // Comparator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the comparator used to order this collection, or <tt>null</tt>
if this collection is sorted according to its elements natural ordering
(using <tt>Comparable</tt>).

@return the comparator used to order this collection, or <tt>null</tt>
if this collection is sorted according to its elements natural ordering."
      end

      operation 331163 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectOutputStream"
	nexceptions 1
	  explicit_exception "java.io.IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state of the instance to a stream (that
is, serialize it).

@serialData The length of the array backing the instance is
emitted (int), followed by all of its elements (each an
<tt>Object</tt>) in the proper order.
@param s the stream"
      end

      operation 331291 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectInputStream"
	nexceptions 2
	  explicit_exception "java.io.IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the <tt>ArrayList</tt> instance from a stream (that is,
deserialize it).
@param s the stream"
      end
    end

    class 154907 "Properties"
      visibility public 
      nactuals 8
      actual class class_ref 139035 // Hashtable
        rank 0 explicit_value "any"
      actual class class_ref 139035 // Hashtable
        rank 1 explicit_value "any"
      actual class class_ref 139035 // Hashtable
        rank 2 explicit_value ""
      actual class class_ref 139035 // Hashtable
        rank 3 explicit_value ""
      actual class class_ref 139035 // Hashtable
        rank 4 explicit_value ""
      actual class class_ref 139035 // Hashtable
        rank 5 explicit_value ""
      actual class class_ref 139035 // Hashtable
        rank 6 explicit_value ""
      actual class class_ref 139035 // Hashtable
        rank 7 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Properties</code> class represents a persistent set of
properties. The <code>Properties</code> can be saved to a stream
or loaded from a stream. Each key and its corresponding value in
the property list is a string.
<p>
A property list can contain another property list as its
\"defaults\"; this second property list is searched if
the property key is not found in the original property list.
<p>
Because <code>Properties</code> inherits from <code>Hashtable</code>, the
<code>put</code> and <code>putAll</code> methods can be applied to a
<code>Properties</code> object.  Their use is strongly discouraged as they
allow the caller to insert entries whose keys or values are not
<code>Strings</code>.  The <code>setProperty</code> method should be used
instead.  If the <code>store</code> or <code>save</code> method is called
on a \"compromised\" <code>Properties</code> object that contains a
non-<code>String</code> key or value, the call will fail.
<p>
<a name=\"encoding\"></a>
<p> The {@link #load load} and {@link #store store} methods load and store
properties in a simple line-oriented format specified below.  This format
uses the ISO 8859-1 character encoding.  Characters that cannot be directly
represented in this encoding can be written using
<a href=\"http://java.sun.com/docs/books/jls/html/3.doc.html#100850\">Unicode escapes</a>
; only a single 'u' character is allowed in an escape
sequence. The native2ascii tool can be used to convert property files to and
from other character encodings.
<p>
<p> The {@link #loadFromXML(InputStream)} and {@link
#storeToXML(OutputStream, String, String)} methods load and store properties
in a simple XML format.  By default the UTF-8 character encoding is used,
however a specific encoding may be specified if required.  An XML properties
document has the following DOCTYPE declaration:

<pre>
&lt;!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\"&gt;
</pre>
Note that the system URI (http://java.sun.com/dtd/properties.dtd) is
<i>not</i> accessed when exporting or importing properties; it merely
serves as a string to uniquely identify the DTD, which is:
<pre>
   &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;

   &lt;!-- DTD for properties --&gt;

   &lt;!ELEMENT properties ( comment?, entry* ) &gt;

   &lt;!ATTLIST properties version CDATA #FIXED \"1.0\"&gt;

   &lt;!ELEMENT comment (#PCDATA) &gt;

   &lt;!ELEMENT entry (#PCDATA) &gt;

   &lt;!ATTLIST entry key CDATA #REQUIRED&gt;
</pre>

@see <a href=\"../../../tooldocs/solaris/native2ascii.html\">native2ascii tool for Solaris</a>
@see <a href=\"../../../tooldocs/windows/native2ascii.html\">native2ascii tool for Windows</a>

@author  Arthur van Hoff
@author  Michael McCloskey
@version 1.84, 05/18/04
@since   JDK1.0"
      classrelation 170395 // <realization>
	relation 170395 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 170395 // <realization>
	  b parent class_ref 139035 // Hashtable
      end

      attribute 183835 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  4112578634029874840L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "use serialVersionUID from JDK 1.1.X for interoperability
"
      end

      classrelation 170523 // defaults (<unidirectional association>)
	relation 170523 --->
	  a role_name "defaults" protected
	    comment "
A property list that contains default values for any keys not
found in this property list.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 170523 // defaults (<unidirectional association>)
	  b parent class_ref 154907 // Properties
      end

      operation 331419 "Properties"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty property list with no default values."
      end

      operation 331547 "Properties"
	public explicit_return_type ""
	nparams 1
	  param inout name "defaults" type class_ref 154907 // Properties
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty property list with the specified defaults.

@param   defaults   the defaults."
      end

      operation 331675 "setProperty"
	public explicit_return_type "Object"
	nparams 2
	  param in name "key" explicit_type "String"
	  param in name "value" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calls the <tt>Hashtable</tt> method <code>put</code>. Provided for
parallelism with the <tt>getProperty</tt> method. Enforces use of
strings for property keys and values. The value returned is the
result of the <tt>Hashtable</tt> call to <code>put</code>.

@param key the key to be placed into this property list.
@param value the value corresponding to <tt>key</tt>.
@return     the previous value of the specified key in this property
            list, or <code>null</code> if it did not have one.
@see #getProperty
@since    1.2"
      end

      operation 331803 "load"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inStream" explicit_type "InputStream"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a property list (key and element pairs) from the input
stream.  The stream is assumed to be using the ISO 8859-1
character encoding; that is each byte is one Latin1 character.
Characters not in Latin1, and certain special characters, can
be represented in keys and elements using escape sequences
similar to those used for character and string literals (see <a
href=\"http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#100850\">&sect;3.3</a>
and <a
href=\"http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#101089\">&sect;3.10.6</a>
of the <i>Java Language Specification</i>).

The differences from the character escape sequences used for
characters and strings are:

<ul>
<li> Octal escapes are not recognized.

<li> The character sequence <code>\\b</code> does <i>not</i>
represent a backspace character.

<li> The method does not treat a backslash character,
<code>\\</code>, before a non-valid escape character as an
error; the backslash is silently dropped.  For example, in a
Java string the sequence <code>\"\\z\"</code> would cause a
compile time error.  In contrast, this method silently drops
the backslash.  Therefore, this method treats the two character
sequence <code>\"\\b\"</code> as equivalent to the single
character <code>'b'</code>.

<li> Escapes are not necessary for single and double quotes;
however, by the rule above, single and double quote characters
preceded by a backslash still yield single and double quote
characters, respectively.

</ul>

An <code>IllegalArgumentException</code> is thrown if a
malformed Unicode escape appears in the input.

<p>
This method processes input in terms of lines.  A natural line
of input is terminated either by a set of line terminator
characters (<code>\\n</code> or <code>\\r</code> or
<code>\\r\\n</code>) or by the end of the file.  A natural line
may be either a blank line, a comment line, or hold some part
of a key-element pair.  The logical line holding all the data
for a key-element pair may be spread out across several adjacent
natural lines by escaping the line terminator sequence with a
backslash character, <code>\\</code>.  Note that a comment line
cannot be extended in this manner; every natural line that is a
comment must have its own comment indicator, as described
below.  If a logical line is continued over several natural
lines, the continuation lines receive further processing, also
described below.  Lines are read from the input stream until
end of file is reached.

<p>
A natural line that contains only white space characters is
considered blank and is ignored.  A comment line has an ASCII
<code>'#'</code> or <code>'!'</code> as its first non-white
space character; comment lines are also ignored and do not
encode key-element information.  In addition to line
terminators, this method considers the characters space
(<code>' '</code>, <code>'&#92;u0020'</code>), tab
(<code>'\\t'</code>, <code>'&#92;u0009'</code>), and form feed
(<code>'\\f'</code>, <code>'&#92;u000C'</code>) to be white
space.

<p>
If a logical line is spread across several natural lines, the
backslash escaping the line terminator sequence, the line
terminator sequence, and any white space at the start the
following line have no affect on the key or element values.
The remainder of the discussion of key and element parsing will
assume all the characters constituting the key and element
appear on a single natural line after line continuation
characters have been removed.  Note that it is <i>not</i>
sufficient to only examine the character preceding a line
terminator sequence to see if the line terminator is
escaped; there must be an odd number of contiguous backslashes
for the line terminator to be escaped.  Since the input is
processed from left to right, a non-zero even number of
2<i>n</i> contiguous backslashes before a line terminator (or
elsewhere) encodes <i>n</i> backslashes after escape
processing.

<p>
The key contains all of the characters in the line starting
with the first non-white space character and up to, but not
including, the first unescaped <code>'='</code>,
<code>':'</code>, or white space character other than a line
terminator. All of these key termination characters may be
included in the key by escaping them with a preceding backslash
character; for example,<p>

<code>\\:\\=</code><p>

would be the two-character key <code>\":=\"</code>.  Line
terminator characters can be included using <code>\\r</code> and
<code>\\n</code> escape sequences.  Any white space after the
key is skipped; if the first non-white space character after
the key is <code>'='</code> or <code>':'</code>, then it is
ignored and any white space characters after it are also
skipped.  All remaining characters on the line become part of
the associated element string; if there are no remaining
characters, the element is the empty string
<code>&quot;&quot;</code>.  Once the raw character sequences
constituting the key and element are identified, escape
processing is performed as described above.

<p>
As an example, each of the following three lines specifies the key
<code>\"Truth\"</code> and the associated element value
<code>\"Beauty\"</code>:
<p>
<pre>
Truth = Beauty
	Truth:Beauty
Truth			:Beauty
</pre>
As another example, the following three lines specify a single
property:
<p>
<pre>
fruits                           apple, banana, pear, \\
                                 cantaloupe, watermelon, \\
                                 kiwi, mango
</pre>
The key is <code>\"fruits\"</code> and the associated element is:
<p>
<pre>\"apple, banana, pear, cantaloupe, watermelon, kiwi, mango\"</pre>
Note that a space appears before each <code>\\</code> so that a space
will appear after each comma in the final result; the <code>\\</code>,
line terminator, and leading white space on the continuation line are
merely discarded and are <i>not</i> replaced by one or more other
characters.
<p>
As a third example, the line:
<p>
<pre>cheeses
</pre>
specifies that the key is <code>\"cheeses\"</code> and the associated
element is the empty string <code>\"\"</code>.<p>

@param      inStream   the input stream.
@exception  IOException  if an error occurred when reading from the
              input stream.
@throws	   IllegalArgumentException if the input stream contains a
		   malformed Unicode escape sequence."
      end

      class 155035 "LineReader"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 331931 "LineReader"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "inStream" explicit_type "InputStream"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 183963 "inBuf"
	  package explicit_type "byte"
	  multiplicity "[]"
	  init_value "=  new byte[8192]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 184091 "lineBuf"
	  package explicit_type "char"
	  multiplicity "[]"
	  init_value "=  new char[1024]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 184219 "inLimit"
	  package explicit_type "int"
	  init_value "=  0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 184347 "inOff"
	  package explicit_type "int"
	  init_value "=  0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 184475 "inStream"
	  package explicit_type "InputStream"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 332059 "readLine"
	  package explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    explicit_exception "IOException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 332187 "loadConvert"
	private explicit_return_type "String"
	nparams 4
	  param in name "in" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "convtBuf" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts encoded &#92;uxxxx to unicode chars
and changes special saved chars to their original forms"
      end

      operation 332315 "saveConvert"
	private explicit_return_type "String"
	nparams 2
	  param in name "theString" explicit_type "String"
	  param inout name "escapeSpace" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts unicodes to encoded &#92;uxxxx and escapes
special characters with a preceding slash"
      end

      operation 332443 "save"
	public explicit_return_type "void"
	nparams 2
	  param inout name "out" explicit_type "OutputStream"
	  param in name "comments" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Calls the <code>store(OutputStream out, String comments)</code> method
and suppresses IOExceptions that were thrown.

@deprecated This method does not throw an IOException if an I/O error
occurs while saving the property list.  The preferred way to save a
properties list is via the <code>store(OutputStream out, 
String comments)</code> method or the 
<code>storeToXML(OutputStream os, String comment)</code> method.

@param   out      an output stream.
@param   comments   a description of the property list.
@exception  ClassCastException  if this <code>Properties</code> object
            contains any keys or values that are not 
            <code>Strings</code>."
      end

      operation 332571 "store"
	public explicit_return_type "void"
	nparams 2
	  param inout name "out" explicit_type "OutputStream"
	  param in name "comments" explicit_type "String"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes this property list (key and element pairs) in this
<code>Properties</code> table to the output stream in a format suitable
for loading into a <code>Properties</code> table using the
{@link #load(InputStream) load} method.
The stream is written using the ISO 8859-1 character encoding.
<p>
Properties from the defaults table of this <code>Properties</code>
table (if any) are <i>not</i> written out by this method.
<p>
If the comments argument is not null, then an ASCII <code>#</code>
character, the comments string, and a line separator are first written
to the output stream. Thus, the <code>comments</code> can serve as an
identifying comment.
<p>
Next, a comment line is always written, consisting of an ASCII
<code>#</code> character, the current date and time (as if produced
by the <code>toString</code> method of <code>Date</code> for the
current time), and a line separator as generated by the Writer.
<p>
Then every entry in this <code>Properties</code> table is
written out, one per line. For each entry the key string is
written, then an ASCII <code>=</code>, then the associated
element string. Each character of the key and element strings
is examined to see whether it should be rendered as an escape
sequence. The ASCII characters <code>\\</code>, tab, form feed,
newline, and carriage return are written as <code>\\\\</code>,
<code>\\t</code>, <code>\\f</code> <code>\\n</code>, and
<code>\\r</code>, respectively. Characters less than
<code>&#92;u0020</code> and characters greater than
<code>&#92;u007E</code> are written as
<code>&#92;u</code><i>xxxx</i> for the appropriate hexadecimal
value <i>xxxx</i>.  For the key, all space characters are
written with a preceding <code>\\</code> character.  For the
element, leading space characters, but not embedded or trailing
space characters, are written with a preceding <code>\\</code>
character. The key and element characters <code>#</code>,
<code>!</code>, <code>=</code>, and <code>:</code> are written
with a preceding backslash to ensure that they are properly loaded.
<p>
After the entries have been written, the output stream is flushed.  The
output stream remains open after this method returns.

@param   out      an output stream.
@param   comments   a description of the property list.
@exception  IOException if writing this property list to the specified
            output stream throws an <tt>IOException</tt>.
@exception  ClassCastException  if this <code>Properties</code> object
            contains any keys or values that are not <code>Strings</code>.
@exception  NullPointerException  if <code>out</code> is null.
@since 1.2"
      end

      operation 332699 "writeln"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "bw" explicit_type "BufferedWriter"
	  param in name "s" explicit_type "String"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 332827 "loadFromXML"
	public explicit_return_type "void"
	nparams 1
	  param inout name "in" explicit_type "InputStream"
	nexceptions 2
	  explicit_exception "IOException"
	  exception class_ref 152091 // InvalidPropertiesFormatException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads all of the properties represented by the XML document on the
specified input stream into this properties table.

<p>The XML document must have the following DOCTYPE declaration:
<pre>
&lt;!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\"&gt;
</pre>
Furthermore, the document must satisfy the properties DTD described
above.

<p>The specified stream remains open after this method returns.

@param in the input stream from which to read the XML document.
@throws IOException if reading from the specified input stream
        results in an <tt>IOException</tt>.
@throws InvalidPropertiesFormatException Data on input stream does not
        constitute a valid XML document with the mandated document type.
@throws NullPointerException if <code>in</code> is null.
@see    #storeToXML(OutputStream, String, String)
@since 1.5"
      end

      operation 332955 "storeToXML"
	public explicit_return_type "void"
	nparams 2
	  param inout name "os" explicit_type "OutputStream"
	  param in name "comment" explicit_type "String"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emits an XML document representing all of the properties contained
in this table.

<p> An invocation of this method of the form <tt>props.storeToXML(os,
comment)</tt> behaves in exactly the same way as the invocation
<tt>props.storeToXML(os, comment, \"UTF-8\");</tt>.

@param os the output stream on which to emit the XML document.
@param comment a description of the property list, or <code>null</code>
       if no comment is desired.
@throws IOException if writing to the specified output stream
        results in an <tt>IOException</tt>.
@throws NullPointerException if <code>os</code> is null.
@see    #loadFromXML(InputStream)
@since 1.5"
      end

      operation 333083 "storeToXML"
	public explicit_return_type "void"
	nparams 3
	  param inout name "os" explicit_type "OutputStream"
	  param in name "comment" explicit_type "String"
	  param in name "encoding" explicit_type "String"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emits an XML document representing all of the properties contained
in this table, using the specified encoding.

<p>The XML document will have the following DOCTYPE declaration:
<pre>
&lt;!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\"&gt;
</pre>

<p>If the specified comment is <code>null</code> then no comment
will be stored in the document.

<p>The specified stream remains open after this method returns.

@param os the output stream on which to emit the XML document.
@param comment a description of the property list, or <code>null</code>
       if no comment is desired.
@throws IOException if writing to the specified output stream
        results in an <tt>IOException</tt>.
@throws NullPointerException if <code>os</code> is <code>null</code>,
        or if <code>encoding</code> is <code>null</code>.
@see    #loadFromXML(InputStream)
@since 1.5"
      end

      operation 333211 "getProperty"
	public explicit_return_type "String"
	nparams 1
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches for the property with the specified key in this property list.
If the key is not found in this property list, the default property list,
and its defaults, recursively, are then checked. The method returns
<code>null</code> if the property is not found.

@param   key   the property key.
@return  the value in this property list with the specified key value.
@see     #setProperty
@see     #defaults"
      end

      operation 333339 "getProperty"
	public explicit_return_type "String"
	nparams 2
	  param in name "key" explicit_type "String"
	  param in name "defaultValue" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches for the property with the specified key in this property list.
If the key is not found in this property list, the default property list,
and its defaults, recursively, are then checked. The method returns the
default value argument if the property is not found.

@param   key            the hashtable key.
@param   defaultValue   a default value.

@return  the value in this property list with the specified key value.
@see     #setProperty
@see     #defaults"
      end

      operation 333467 "propertyNames"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of all the keys in this property list,
including distinct keys in the default property list if a key
of the same name has not already been found from the main
properties list.

@return  an enumeration of all the keys in this property list, including
         the keys in the default property list.
@see     java.util.Enumeration
@see     java.util.Properties#defaults"
      end

      operation 333595 "list"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "PrintStream"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints this property list out to the specified output stream.
This method is useful for debugging.

@param   out   an output stream."
      end

      operation 333723 "list"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "PrintWriter"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints this property list out to the specified output stream.
This method is useful for debugging.

@param   out   an output stream.
@since   JDK1.1


Rather than use an anonymous inner class to share common code, this
method is duplicated in order to ensure that a non-1.1 compiler can
compile this file."
      end

      operation 333851 "enumerate"
	private explicit_return_type "void"
	nparams 1
	  param inout name "h" type class_ref 139035 // Hashtable
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enumerates all key/value pairs in the specified hashtable.
@param h the hashtable"
      end

      operation 333979 "toHex"
	class_operation private explicit_return_type "char"
	nparams 1
	  param in name "nibble" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a nibble to a hex character
@param	nibble	the nibble to convert."
      end

      attribute 184603 "hexDigit"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "[]"
	init_value "=  {
	'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " A table of hex digits "
      end
    end

    class 155163 "PropertyPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is for property permissions.

<P>
The name is the name of the property (\"java.home\",
\"os.name\", etc). The naming
convention follows the  hierarchical property naming convention.
Also, an asterisk
may appear at the end of the name, following a \".\", or by itself, to
signify a wildcard match. For example: \"java.*\" or \"*\" is valid,
\"*java\" or \"a*b\" is not valid.
<P>
<P>
The actions to be granted are passed to the constructor in a string containing
a list of zero or more comma-separated keywords. The possible keywords are
\"read\" and \"write\". Their meaning is defined as follows:
<P>
<DL>
   <DT> read
   <DD> read permission. Allows <code>System.getProperty</code> to
        be called.
   <DT> write
   <DD> write permission. Allows <code>System.setProperty</code> to
        be called.
</DL>
<P>
The actions string is converted to lowercase before processing.
<P>
Care should be taken before granting code permission to access
certain system properties.  For example, granting permission to
access the \"java.home\" system property gives potentially malevolent
code sensitive information about the system environment (the Java
installation directory).  Also, granting permission to access
the \"user.name\" and \"user.home\" system properties gives potentially
malevolent code sensitive information about the user environment
(the user's account name and home directory).

@see java.security.BasicPermission
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager

@version 1.33 03/12/19

@author Roland Schemers
@since 1.2

@serial exclude"
      attribute 184731 "READ"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Read action.
"
      end

      attribute 184859 "WRITE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Write action.
"
      end

      attribute 184987 "ALL"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  READ|WRITE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "All actions (read,write);
"
      end

      attribute 185115 "NONE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "No actions.
"
      end

      attribute 185243 "mask"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The actions mask.

"
      end

      attribute 185371 "actions"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The actions string.

@serial 

 Left null as long as possible, then"
      end

      operation 334107 "init"
	private explicit_return_type "void"
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " created and re-used in the getAction function.

initialize a PropertyPermission object. Common to all constructors.
Also called during de-serialization.

@param mask the actions mask to use.
"
      end

      operation 334235 "PropertyPermission"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "actions" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PropertyPermission object with the specified name.
The name is the name of the system property, and
<i>actions</i> contains a comma-separated list of the
desired actions granted on the property. Possible actions are
\"read\" and \"write\".

@param name the name of the PropertyPermission.
@param actions the actions string."
      end

      operation 334363 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" explicit_type "Permission"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this PropertyPermission object \"implies\" the specified
permission.
<P>
More specifically, this method returns true if:<p>
<ul>
<li> <i>p</i> is an instanceof PropertyPermission,<p>
<li> <i>p</i>'s actions are a subset of this
object's actions, and <p>
<li> <i>p</i>'s name is implied by this object's
     name. For example, \"java.*\" implies \"java.home\".
</ul>
@param p the permission to check against.

@return true if the specified permission is implied by this object,
false if not."
      end

      operation 334491 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks two PropertyPermission objects for equality. Checks that <i>obj</i> is
a PropertyPermission, and has the same name and actions as this object.
<P>
@param obj the object we are testing for equality with this object.
@return true if obj is a PropertyPermission, and has the same name and
actions as this PropertyPermission object."
      end

      operation 334619 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this object.
The hash code used is the hash code of this permissions name, that is,
<code>getName().hashCode()</code>, where <code>getName</code> is
from the Permission superclass.

@return a hash code value for this object."
      end

      operation 334747 "getMask"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "actions" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts an actions String to an actions mask.

@param action the action string.
@return the actions mask."
      end

      operation 334875 "getActions"
	class_operation package explicit_return_type "String"
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the canonical string representation of the actions.
Always returns present actions in the following order:
read, write.

@return the canonical string representation of the actions."
      end

      operation 335003 "getActions"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the \"canonical string representation\" of the actions.
That is, this method always returns present actions in the following order:
read, write. For example, if this PropertyPermission object
allows both write and read actions, a call to <code>getActions</code>
will return the string \"read,write\".

@return the canonical string representation of the actions."
      end

      operation 335131 "getMask"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the current action mask.
Used by the PropertyPermissionCollection

@return the actions mask."
      end

      operation 335259 "newPermissionCollection"
	public explicit_return_type "PermissionCollection"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new PermissionCollection object for storing
PropertyPermission objects.
<p>

@return a new PermissionCollection object suitable for storing
PropertyPermissions."
      end

      attribute 185499 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  885438825399942851L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 335387 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectOutputStream"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "WriteObject is called to save the state of the PropertyPermission
to a stream. The actions are serialized, and the superclass
takes care of the name."
      end

      operation 335515 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectInputStream"
	nexceptions 2
	  explicit_exception "IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "readObject is called to restore the state of the PropertyPermission from
a stream."
      end
    end

    class 155419 "PropertyPermissionCollection"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A PropertyPermissionCollection stores a set of PropertyPermission
permissions.

@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection

@version 1.33, 12/19/03

@author Roland Schemers

@serial include"
      classrelation 170907 // <realization>
	relation 170907 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 170907 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 171035 // perms (<unidirectional association>)
	relation 171035 --->
	  a role_name "perms" private
	    comment "
Key is property name; value is PropertyPermission.
Not serialized; see serialization section at end of class.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 171035 // perms (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      attribute 185627 "all_allowed"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Boolean saying if \"*\" is in the collection.

@see #serialPersistentFields

 No sync access; OK for this to be stale."
      end

      operation 335643 "PropertyPermissionCollection"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an empty PropertyPermissions object.
"
      end

      operation 335771 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "permission" explicit_type "Permission"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a permission to the PropertyPermissions. The key for the hash is
the name.

@param permission the Permission object to add.

@exception IllegalArgumentException - if the permission is not a
                                      PropertyPermission

@exception SecurityException - if this PropertyPermissionCollection
                               object has been marked readonly"
      end

      operation 335899 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" explicit_type "Permission"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check and see if this set of permissions implies the permissions
expressed in \"permission\".

@param p the Permission object to compare

@return true if \"permission\" is a proper subset of a permission in
the set, false if not."
      end

      operation 336027 "elements"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of all the PropertyPermission objects in the
container.

@return an enumeration of all the PropertyPermission objects."
      end

      attribute 185755 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7015263904581634791L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 185883 "serialPersistentFields"
	class_attribute const_attribute private explicit_type "ObjectStreamField"
	multiplicity "[]"
	init_value "=  {
        new ObjectStreamField(\"permissions\", Hashtable.class),
	new ObjectStreamField(\"all_allowed\", Boolean.TYPE),
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Need to maintain serialization interoperability with earlier releases,
 which had the serializable field:

 Table of permissions.

 @serial

 private Hashtable permissions;

@serialField permissions java.util.Hashtable
    A table of the PropertyPermissions.
@serialField all_allowed boolean
    boolean saying if \"*\" is in the collection.
"
      end

      operation 336155 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "ObjectOutputStream"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@serialData Default fields.


Writes the contents of the perms field out as a Hashtable for
serialization compatibility with earlier releases. all_allowed
unchanged."
      end

      operation 336283 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" explicit_type "ObjectInputStream"
	nexceptions 2
	  explicit_exception "IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a Hashtable of PropertyPermissions and saves them in the 
perms field. Reads in all_allowed."
      end
    end

    class 155675 "PropertyResourceBundle"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>PropertyResourceBundle</code> is a concrete subclass of
<code>ResourceBundle</code> that manages resources for a locale
using a set of static strings from a property file. See
{@link ResourceBundle ResourceBundle} for more information about resource
bundles. See {@link Properties Properties} for more information
about properties files, in particular the
<a href=\"Properties.html#encoding\">information on character encodings</a>.

<p>
Unlike other types of resource bundle, you don't subclass
<code>PropertyResourceBundle</code>.  Instead, you supply properties
files containing the resource data.  <code>ResourceBundle.getBundle</code>
will automatically look for the appropriate properties file and create a
<code>PropertyResourceBundle</code> that refers to it. See
{@link ResourceBundle#getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader) ResourceBundle.getBundle}
for a complete description of the search and instantiation strategy.

<p>
The following <a name=\"sample\">example</a> shows a member of a resource
bundle family with the base name \"MyResources\".
The text defines the bundle \"MyResources_de\",
the German member of the bundle family.
This member is based on <code>PropertyResourceBundle</code>, and the text
therefore is the content of the file \"MyResources_de.properties\"
(a related <a href=\"ListResourceBundle.html#sample\">example</a> shows
how you can add bundles to this family that are implemented as subclasses
of <code>ListResourceBundle</code>).
The keys in this example are of the form \"s1\" etc. The actual
keys are entirely up to your choice, so long as they are the same as
the keys you use in your program to retrieve the objects from the bundle.
Keys are case-sensitive.
<blockquote>
<pre>
# MessageFormat pattern
s1=Die Platte \\\"{1}\\\" enth&auml;lt {0}.

# location of {0} in pattern
s2=1

# sample disk name
s3=Meine Platte

# first ChoiceFormat choice
s4=keine Dateien

# second ChoiceFormat choice
s5=eine Datei

# third ChoiceFormat choice
s6={0,number} Dateien

# sample date
s7=3. M&auml;rz 1996
</pre>
</blockquote>

@see ResourceBundle
@see ListResourceBundle
@see Properties
@since JDK1.1"
      classrelation 171163 // <generalisation>
	relation 171163 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 171163 // <generalisation>
	  b parent class_ref 153371 // ResourceBundle
      end

      operation 336411 "PropertyResourceBundle"
	public explicit_return_type ""
	nparams 1
	  param inout name "stream" explicit_type "InputStream"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a property resource bundle.
@param stream property file to read from."
      end

      operation 336539 "handleGetObject"
	public explicit_return_type "Object"
	nparams 1
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Implements java.util.ResourceBundle.handleGetObject; inherits javadoc specification."
      end

      operation 336667 "getKeys"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implementation of ResourceBundle.getKeys."
      end

      classrelation 171291 // lookup (<unidirectional association>)
	relation 171291 --->
	  a role_name "lookup" private
	    comment " ==================privates====================
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 171291 // lookup (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end
    end

    class 155803 "RegularEnumSet"
      visibility package 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 146843 // EnumSet
        rank 0 explicit_value "E"
      actual class class_ref 146843 // EnumSet
        rank 1 explicit_value ""
      actual class class_ref 146843 // EnumSet
        rank 2 explicit_value ""
      actual class class_ref 146843 // EnumSet
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Private implementation class for EnumSet, for \"regular sized\" enum types
(i.e., those with 64 or fewer enum constants).

@author Josh Bloch
@since 1.5
@serial exclude"
      classrelation 171547 // <realization>
	relation 171547 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 171547 // <realization>
	  b parent class_ref 146843 // EnumSet
      end

      attribute 187419 "elements"
	private explicit_type "long"
	init_value "=  0L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit vector representation of this set.  The 2^k bit indicates the
presence of universe[k] in this set.
"
      end

      operation 338587 "RegularEnumSet"
	package explicit_return_type ""
	nparams 2
	  param inout name "elementType" explicit_type "Class<E>"
	  param inout name "universe" explicit_type "Enum"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 338715 "addRange"
	package explicit_return_type "void"
	nparams 2
	  param inout name "from" explicit_type "E"
	  param inout name "to" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 338843 "addAll"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 338971 "complement"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 339099 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements contained in this set.  The
iterator traverses the elements in their <i>natural order</i> (which is
the order in which the enum constants are declared). The returned
Iterator is a \"snapshot\" iterator that will never throw {@link
ConcurrentModificationException}; the elements are traversed as they
existed when this call was invoked.

@return an iterator over the elements contained in this set"
      end

      class 155931 "EnumSetIterator"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "E"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 171675 // <realization>
	  relation 171675 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 171675 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	attribute 187547 "unseen"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "A bit vector representing the elements in the set not yet
returned by this iterator.
"
	end

	attribute 187675 "lastReturned"
	  package explicit_type "long"
	  init_value "=  0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The bit representing the last element returned by this iterator
but not removed, or zero if no such element exists.
"
	end

	operation 339227 "EnumSetIterator"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 339355 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 339483 "next"
	  public explicit_return_type "E"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 339611 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 339739 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this set.

@return the number of elements in this set"
      end

      operation 339867 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this set contains no elements.

@return <tt>true</tt> if this set contains no elements"
      end

      operation 339995 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this set contains the specified element.

@param e element to be checked for containment in this collection
@return <tt>true</tt> if this set contains the specified element"
      end

      operation 340123 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modification Operations

Adds the specified element to this set if it is not already present.

@param e element to be added to this set
@return <tt>true</tt> if the set changed as a result of the call

@throws NullPointerException if <tt>e</tt> is null"
      end

      operation 340251 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified element from this set if it is present.

@param e element to be removed from this set, if present
@return <tt>true</tt> if the set contained the specified element"
      end

      operation 340379 "containsAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bulk Operations

Returns <tt>true</tt> if this set contains all of the elements
in the specified collection.

@param c collection to be checked for containment in this set
@return <tt>true</tt> if this set contains all of the elements
       in the specified collection
@throws NullPointerException if the specified collection is null"
      end

      operation 340507 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds all of the elements in the specified collection to this set.

@param c collection whose elements are to be added to this set
@return <tt>true</tt> if this set changed as a result of the call
@throws NullPointerException if the specified collection or any
    of its elements are null"
      end

      operation 340635 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this set all of its elements that are contained in
the specified collection.

@param c elements to be removed from this set
@return <tt>true</tt> if this set changed as a result of the call
@throws NullPointerException if the specified collection is null"
      end

      operation 340763 "retainAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retains only the elements in this set that are contained in the
specified collection.

@param c elements to be retained in this set
@return <tt>true</tt> if this set changed as a result of the call
@throws NullPointerException if the specified collection is null"
      end

      operation 340891 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this set."
      end

      operation 341019 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified object with this set for equality.  Returns
<tt>true</tt> if the given object is also a set, the two sets have
the same size, and every member of the given set is contained in
this set.

@param e object to be compared for equality with this set
@return <tt>true</tt> if the specified object is equal to this set"
      end
    end

    class 156059 "ResourceBundleEnumeration"
      visibility package 
      nactuals 4
      actual class class_ref 144411 // Enumeration
        rank 0 explicit_value "string"
      actual class class_ref 144411 // Enumeration
        rank 1 explicit_value ""
      actual class class_ref 144411 // Enumeration
        rank 2 explicit_value ""
      actual class class_ref 144411 // Enumeration
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Implements an Enumeration that combines elements from a Set and
an Enumeration. Used by ListResourceBundle and PropertyResourceBundle."
      classrelation 171803 // <realization>
	relation 171803 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 171803 // <realization>
	  b parent class_ref 144411 // Enumeration
      end

      classrelation 171931 // set (<unidirectional association>)
	relation 171931 --->
	  a role_name "set" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 171931 // set (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      classrelation 172059 // iterator (<unidirectional association>)
	relation 172059 --->
	  a role_name "iterator" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 172059 // iterator (<unidirectional association>)
	  b parent class_ref 135323 // Iterator
      end

      classrelation 172187 // enumeration (<unidirectional association>)
	relation 172187 --->
	  a role_name "enumeration" package
	    comment " may remain null"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 172187 // enumeration (<unidirectional association>)
	  b parent class_ref 144411 // Enumeration
      end

      operation 341147 "ResourceBundleEnumeration"
	package explicit_return_type ""
	nparams 2
	  param inout name "set" type class_ref 136731 // Set
	  param inout name "enumeration" type class_ref 144411 // Enumeration
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<String> ${p0}, ${t1}<String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a resource bundle enumeration.
@param set an set providing some elements of the enumeration
@param enumeration an enumeration providing more elements of the enumeration.
       enumeration may be null."
      end

      attribute 187803 "next"
	package explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 341275 "hasMoreElements"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 341403 "nextElement"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 156187 "Scanner"
      visibility public 
      nactuals 4
      actual class class_ref 135323 // Iterator
        rank 0 explicit_value "string"
      actual class class_ref 135323 // Iterator
        rank 1 explicit_value ""
      actual class class_ref 135323 // Iterator
        rank 2 explicit_value ""
      actual class class_ref 135323 // Iterator
        rank 3 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A simple text scanner which can parse primitive types and strings using
regular expressions.

<p>A <code>Scanner</code> breaks its input into tokens using a 
delimiter pattern, which by default matches whitespace. The resulting 
tokens may then be converted into values of different types using the 
various <tt>next</tt> methods.

<p>For example, this code allows a user to read a number from 
<tt>System.in</tt>:
<blockquote><pre>
    Scanner sc = new Scanner(System.in);
    int i = sc.nextInt();
</pre></blockquote>

<p>As another example, this code allows <code>long</code> types to be
assigned from entries in a file <code>myNumbers</code>:
<blockquote><pre>
     Scanner sc = new Scanner(new File(\"myNumbers\"));
     while (sc.hasNextLong()) {
         long aLong = sc.nextLong();
     }</pre></blockquote>

<p>The scanner can also use delimiters other than whitespace. This 
example reads several items in from a string:
<blockquote><pre>
    String input = \"1 fish 2 fish red fish blue fish\";
    Scanner s = new Scanner(input).useDelimiter(\"\\\\s*fish\\\\s*\");
    System.out.println(s.nextInt());
    System.out.println(s.nextInt());
    System.out.println(s.next());
    System.out.println(s.next());
    s.close(); </pre></blockquote>
<p>
prints the following output:
<blockquote><pre>
    1
    2
    red
    blue </pre></blockquote>

<p>The same output can be generated with this code, which uses a regular
expression to parse all four tokens at once:
<blockquote><pre>
    String input = \"1 fish 2 fish red fish blue fish\";
    Scanner s = new Scanner(input);
    s.findInLine(\"(\\\\d+) fish (\\\\d+) fish (\\\\w+) fish (\\\\w+)\");
    MatchResult result = s.match();
    for (int i=1; i<=result.groupCount(); i++)
        System.out.println(result.group(i);
    s.close(); </pre></blockquote>

<p>The default whitespace delimiter used by a scanner is as
recognized by {@link java.lang.Character}.{@link
java.lang.Character#isWhitespace(char) isWhitespace}. 

<p>A scanning operation may block waiting for input.

<p>The {@link #next} and {@link #hasNext} methods and their 
primitive-type companion methods (such as {@link #nextInt} and 
{@link #hasNextInt}) first skip any input that matches the delimiter
pattern, and then attempt to return the next token. Both <tt>hasNext</tt>
and <tt>next</tt> methods may block waiting for further input.  Whether a
<tt>hasNext</tt> method blocks has no connection to whether or not its
associated <tt>next</tt> method will block.

<p> The {@link #findInLine}, {@link #findWithinHorizon}, and {@link #skip}
methods operate independently of the delimiter pattern. These methods will 
attempt to match the specified pattern with no regard to delimiters in the 
input and thus can be used in special circumstances where delimiters are 
not relevant. These methods may block waiting for more input.

<p>When a scanner throws an {@link InputMismatchException}, the scanner
will not pass the token that caused the exception, so that it may be
retrieved or skipped via some other method.

<p>Depending upon the type of delimiting pattern, empty tokens may be
returned. For example, the pattern <tt>\"\\\\s+\"</tt> will return no empty 
tokens since it matches multiple instances of the delimiter. The delimiting 
pattern <tt>\"\\\\s\"</tt> could return empty tokens since it only passes one 
space at a time.

<p> A scanner can read text from any object which implements the {@link
java.lang.Readable} interface.  If an invocation of the underlying
readable's {@link java.lang.Readable#read} method throws an {@link
java.io.IOException} then the scanner assumes that the end of the input
has been reached.  The most recent <tt>IOException</tt> thrown by the
underlying readable can be retrieved via the {@link #ioException} method.

<p>When a <code>Scanner</code> is closed, it will close its input source
if the source implements the {@link java.io.Closeable} interface.

<p>A <code>Scanner</code> is not safe for multithreaded use without
external synchronization.

<p>Unless otherwise mentioned, passing a <code>null</code> parameter into
any method of a <code>Scanner</code> will cause a
<code>NullPointerException</code> to be thrown.

<p>A scanner will default to interpreting numbers as decimal unless a
different radix has been set by using the {@link #useRadix} method.

<a name=\"localized-numbers\">
<h4> Localized numbers </h4>

<p> An instance of this class is capable of scanning numbers in the standard
formats as well as in the formats of the scanner's locale. A scanner's 
initial locale is the value returned by the {@link
java.util.Locale#getDefault} method; it may be changed via the {@link
#useLocale} method.

<p>The localized formats are defined in terms of the following parameters, 
which for a particular locale are taken from that locale's {@link
java.text.DecimalFormat DecimalFormat} object, <tt>df</tt>, and its and
{@link java.text.DecimalFormatSymbols DecimalFormatSymbols} object,
<tt>dfs</tt>.

<blockquote><table>
<tr><td valign=\"top\"><i>LocalGroupSeparator&nbsp;&nbsp;</i></td>
    <td valign=\"top\">The character used to separate thousands groups,
                     <i>i.e.,</i>&nbsp;<tt>dfs.</tt>{@link
                     java.text.DecimalFormatSymbols#getGroupingSeparator
                     getGroupingSeparator()}</td></tr>
<tr><td valign=\"top\"><i>LocalDecimalSeparator&nbsp;&nbsp;</i></td>
    <td valign=\"top\">The character used for the decimal point,
                     <i>i.e.,</i>&nbsp;<tt>dfs.</tt>{@link
                     java.text.DecimalFormatSymbols#getDecimalSeparator
                     getDecimalSeparator()}</td></tr>
<tr><td valign=\"top\"><i>LocalPositivePrefix&nbsp;&nbsp;</i></td>
    <td valign=\"top\">The string that appears before a positive number (may
                     be empty), <i>i.e.,</i>&nbsp;<tt>df.</tt>{@link
                     java.text.DecimalFormat#getPositivePrefix
                     getPositivePrefix()}</td></tr>
<tr><td valign=\"top\"><i>LocalPositiveSuffix&nbsp;&nbsp;</i></td>
    <td valign=\"top\">The string that appears after a positive number (may be
                     empty), <i>i.e.,</i>&nbsp;<tt>df.</tt>{@link
                     java.text.DecimalFormat#getPositiveSuffix
                     getPositiveSuffix()}</td></tr>
<tr><td valign=\"top\"><i>LocalNegativePrefix&nbsp;&nbsp;</i></td>
    <td valign=\"top\">The string that appears before a negative number (may
                     be empty), <i>i.e.,</i>&nbsp;<tt>df.</tt>{@link
                     java.text.DecimalFormat#getNegativePrefix
                     getNegativePrefix()}</td></tr>
<tr><td valign=\"top\"><i>LocalNegativeSuffix&nbsp;&nbsp;</i></td>
    <td valign=\"top\">The string that appears after a negative number (may be
                     empty), <i>i.e.,</i>&nbsp;<tt>df.</tt>{@link
                     java.text.DecimalFormat#getNegativeSuffix
                     getNegativeSuffix()}</td></tr>
<tr><td valign=\"top\"><i>LocalNaN&nbsp;&nbsp;</i></td>
    <td valign=\"top\">The string that represents not-a-number for
                     floating-point values,
                     <i>i.e.,</i>&nbsp;<tt>dfs.</tt>{@link
                     java.text.DecimalFormatSymbols#getInfinity
                     getInfinity()}</td></tr>
<tr><td valign=\"top\"><i>LocalInfinity&nbsp;&nbsp;</i></td>
    <td valign=\"top\">The string that represents infinity for floating-point
                     values, <i>i.e.,</i>&nbsp;<tt>dfs.</tt>{@link
                     java.text.DecimalFormatSymbols#getInfinity
                     getInfinity()}</td></tr>
</table></blockquote>

<a name=\"number-syntax\">
<h4> Number syntax </h4>

<p> The strings that can be parsed as numbers by an instance of this class
are specified in terms of the following regular-expression grammar, where
Rmax is the highest digit in the radix being used (for example, Rmax is 9
in base 10).

<p>
<table cellspacing=0 cellpadding=0 align=center>

  <tr><td valign=top align=right><i>NonASCIIDigit</i>&nbsp;&nbsp;::</td>
      <td valign=top>= A non-ASCII character c for which
           {@link java.lang.Character#isDigit Character.isDigit}<tt>(c)</tt>
                       returns&nbsp;true</td></tr>

  <tr><td>&nbsp;</td></tr>

  <tr><td align=right><i>Non0Digit</i>&nbsp;&nbsp;::</td>
  <td><tt>= [1-</tt><i>Rmax</i><tt>] | </tt><i>NonASCIIDigit</i></td></tr>

  <tr><td>&nbsp;</td></tr>

  <tr><td align=right><i>Digit</i>&nbsp;&nbsp;::</td>
  <td><tt>= [0-</tt><i>Rmax</i><tt>] | </tt><i>NonASCIIDigit</i></td></tr>

  <tr><td>&nbsp;</td></tr>

  <tr><td valign=top align=right><i>GroupedNumeral</i>&nbsp;&nbsp;::</td>
      <td valign=top>
        <table cellpadding=0 cellspacing=0>
          <tr><td><tt>= (&nbsp;</tt></td>
              <td><i>Non0Digit</i><tt>
                  </tt><i>Digit</i><tt>?
                  </tt><i>Digit</i><tt>?</tt></td></tr>
          <tr><td></td>
              <td><tt>(&nbsp;</tt><i>LocalGroupSeparator</i><tt>
                        </tt><i>Digit</i><tt>
                        </tt><i>Digit</i><tt>
                        </tt><i>Digit</i><tt> )+ )</tt></td></tr>
        </table></td></tr>

  <tr><td>&nbsp;</td></tr>

  <tr><td align=right><i>Numeral</i>&nbsp;&nbsp;::</td>
      <td><tt>= ( ( </tt><i>Digit</i><tt>+ )
              | </tt><i>GroupedNumeral</i><tt> )</tt></td></tr>

  <tr><td>&nbsp;</td></tr>

  <tr><td valign=top align=right>
        <a name=\"Integer-regex\"><i>Integer</i>&nbsp;&nbsp;::</td>
      <td valign=top><tt>= ( [-+]? ( </tt><i>Numeral</i><tt>
                              ) )</tt></td></tr>
  <tr><td></td>
      <td><tt>| </tt><i>LocalPositivePrefix</i><tt> </tt><i>Numeral</i><tt>
                     </tt><i>LocalPositiveSuffix</i></td></tr>
  <tr><td></td>
      <td><tt>| </tt><i>LocalNegativePrefix</i><tt> </tt><i>Numeral</i><tt>
                </tt><i>LocalNegativeSuffix</i></td></tr>

  <tr><td>&nbsp;</td></tr>

  <tr><td align=right><i>DecimalNumeral</i>&nbsp;&nbsp;::</td>
      <td><tt>= </tt><i>Numeral</i></td></tr>
  <tr><td></td>
      <td><tt>| </tt><i>Numeral</i><tt>
                </tt><i>LocalDecimalSeparator</i><tt>
                </tt><i>Digit</i><tt>*</tt></td></tr>
  <tr><td></td>
      <td><tt>| </tt><i>LocalDecimalSeparator</i><tt>
                </tt><i>Digit</i><tt>+</tt></td></tr>

  <tr><td>&nbsp;</td></tr>

  <tr><td align=right><i>Exponent</i>&nbsp;&nbsp;::</td>
      <td><tt>= ( [eE] [+-]? </tt><i>Digit</i><tt>+ )</tt></td></tr>

  <tr><td>&nbsp;</td></tr>

  <tr><td align=right>
        <a name=\"Decimal-regex\"><i>Decimal</i>&nbsp;&nbsp;::</td>
      <td><tt>= ( [-+]? </tt><i>DecimalNumeral</i><tt>
                        </tt><i>Exponent</i><tt>? )</tt></td></tr>
  <tr><td></td>
      <td><tt>| </tt><i>LocalPositivePrefix</i><tt>
                </tt><i>DecimalNumeral</i><tt>
                </tt><i>LocalPositiveSuffix</i>
                </tt><i>Exponent</i><tt>?</td></tr>
  <tr><td></td>
      <td><tt>| </tt><i>LocalNegativePrefix</i><tt>
                </tt><i>DecimalNumeral</i><tt>
                </tt><i>LocalNegativeSuffix</i>
                </tt><i>Exponent</i><tt>?</td></tr>

  <tr><td>&nbsp;</td></tr>

  <tr><td align=right><i>HexFloat</i>&nbsp;&nbsp;::</td>
      <td><tt>= [-+]? 0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+
                ([pP][-+]?[0-9]+)?</tt></td></tr>

  <tr><td>&nbsp;</td></tr>

  <tr><td align=right><i>NonNumber</i>&nbsp;&nbsp;::</td>
      <td valign=top><tt>= NaN
                         | </tt><i>LocalNan</i><tt>
                         | Infinity
                         | </tt><i>LocalInfinity</i></td></tr>

  <tr><td>&nbsp;</td></tr>

  <tr><td align=right><i>SignedNonNumber</i>&nbsp;&nbsp;::</td>
      <td><tt>= ( [-+]? </tt><i>NonNumber</i><tt> )</tt></td></tr>
  <tr><td></td>
      <td><tt>| </tt><i>LocalPositivePrefix</i><tt>
                </tt><i>NonNumber</i><tt>
                </tt><i>LocalPositiveSuffix</i></td></tr>
  <tr><td></td>
      <td><tt>| </tt><i>LocalNegativePrefix</i><tt>
                </tt><i>NonNumber</i><tt>
                </tt><i>LocalNegativeSuffix</i></td></tr>

  <tr><td>&nbsp;</td></tr>

  <tr><td valign=top align=right>
        <a name=\"Float-regex\"><i>Float</i>&nbsp;&nbsp;::</td>
      <td valign=top><tt>= </tt><i>Decimal</i><tt></td></tr>
      <tr><td></td>
          <td><tt>| </tt><i>HexFloat</i><tt></td></tr>
      <tr><td></td>
          <td><tt>| </tt><i>SignedNonNumber</i><tt></td></tr>

</table>
</center>

<p> Whitespace is not significant in the above regular expressions.

@version 1.15, 07/15/04 
@since   1.5"
      classrelation 172315 // <realization>
	relation 172315 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 172315 // <realization>
	  b parent class_ref 135323 // Iterator
      end

      attribute 187931 "buf"
	private explicit_type "CharBuffer"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Internal buffer used to hold input"
      end

      attribute 188059 "BUFFER_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1024"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Size of internal character buffer
 change to 1024;"
      end

      attribute 188187 "position"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The index into the buffer currently held by the Scanner"
      end

      attribute 188315 "matcher"
	private explicit_type "Matcher"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Internal matcher used for finding delimiters"
      end

      attribute 188443 "delimPattern"
	private explicit_type "Pattern"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Pattern used to delimit tokens"
      end

      attribute 188571 "hasNextPattern"
	private explicit_type "Pattern"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Pattern found in last hasNext operation"
      end

      attribute 188699 "hasNextPosition"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Position after last hasNext operation"
      end

      attribute 188827 "hasNextResult"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Result after last hasNext operation"
      end

      attribute 188955 "source"
	private explicit_type "Readable"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The input source"
      end

      attribute 189083 "sourceClosed"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Boolean is true if source is done"
      end

      attribute 189211 "needInput"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Boolean indicating more input is required"
      end

      attribute 189339 "skipped"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Boolean indicating if a delim has been skipped this operation"
      end

      attribute 189467 "savedScannerPosition"
	private explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " A store of a position that the scanner may fall back to"
      end

      attribute 189595 "typeCache"
	private explicit_type "Object"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " A cache of the last primitive type scanned"
      end

      attribute 189723 "matchValid"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Boolean indicating if a match result is available"
      end

      attribute 189851 "closed"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Boolean indicating if this scanner has been closed"
      end

      attribute 189979 "radix"
	private explicit_type "int"
	init_value "=  10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The current radix used by this scanner"
      end

      attribute 190107 "defaultRadix"
	private explicit_type "int"
	init_value "=  10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The default radix for this scanner"
      end

      classrelation 172443 // locale (<unidirectional association>)
	relation 172443 --->
	  a role_name "locale" init_value "=  null" private
	    comment " The locale used by this scanner
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 172443 // locale (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      attribute 190235 "patternCache"
	private explicit_type "String,Pattern"
	init_value "=  
    new LRUCache<String,Pattern>(7) {
        protected Pattern create(String s) {
            return Pattern.compile(s);
        }
        protected boolean hasName(Pattern p, String s) {
            return p.pattern().equals(s);
        }
    }"
	stereotype "LRUCache"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " A cache of the last few recently used Patterns"
      end

      attribute 190363 "lastException"
	private explicit_type "IOException"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " A holder of the last IOException encountered"
      end

      attribute 190491 "WHITESPACE_PATTERN"
	class_attribute private explicit_type "Pattern"
	init_value "=  Pattern.compile(
                                                \"\\\\p{javaWhitespace}+\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " A pattern for java whitespace"
      end

      attribute 190619 "FIND_ANY_PATTERN"
	class_attribute private explicit_type "Pattern"
	init_value "=  Pattern.compile(\"(?s).*\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " A pattern for any token"
      end

      attribute 190747 "NON_ASCII_DIGIT"
	class_attribute private explicit_type "Pattern"
	init_value "=  Pattern.compile(
        \"[\\\\p{javaDigit}&&[^0-9]]\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " A pattern for non-ASCII digits"
      end

      attribute 190875 "groupSeparator"
	private explicit_type "String"
	init_value "=  \"\\\\,\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Fields and methods to support scanning primitive types

Locale dependent values used to scan numbers
"
      end

      attribute 191003 "decimalSeparator"
	private explicit_type "String"
	init_value "=  \"\\\\.\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 191131 "nanString"
	private explicit_type "String"
	init_value "=  \"NaN\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 191259 "infinityString"
	private explicit_type "String"
	init_value "=  \"Infinity\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 191387 "positivePrefix"
	private explicit_type "String"
	init_value "=  \"\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 191515 "negativePrefix"
	private explicit_type "String"
	init_value "=  \"\\\\-\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 191643 "positiveSuffix"
	private explicit_type "String"
	init_value "=  \"\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 191771 "negativeSuffix"
	private explicit_type "String"
	init_value "=  \"\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 191899 "boolPattern"
	class_attribute volatile private explicit_type "Pattern"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Fields and an accessor method to match booleans
"
      end

      attribute 192027 "BOOLEAN_PATTERN"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"true|false\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 341531 "boolPattern"
	class_operation private explicit_return_type "Pattern"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 192155 "integerPattern"
	private explicit_type "Pattern"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Fields and methods to match bytes, shorts, ints, and longs
"
      end

      attribute 192283 "digits"
	private explicit_type "String"
	init_value "=  \"0123456789abcdefghijklmnopqrstuvwxyz\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 192411 "non0Digit"
	private explicit_type "String"
	init_value "=  \"[\\\\p{javaDigit}&&[^0]]\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 192539 "SIMPLE_GROUP_INDEX"
	private explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 341659 "buildIntegerPatternString"
	private explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 341787 "integerPattern"
	private explicit_return_type "Pattern"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 192667 "separatorPattern"
	class_attribute volatile private explicit_type "Pattern"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Fields and an accessor method to match line separators
"
      end

      attribute 192795 "LINE_SEPARATOR_PATTERN"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  
                                           \"\\r\\n|[\\n\\r\\u2028\\u2029\\u0085]\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 341915 "separatorPattern"
	class_operation private explicit_return_type "Pattern"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 192923 "floatPattern"
	private explicit_type "Pattern"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Fields and methods to match floats and doubles
"
      end

      attribute 193051 "decimalPattern"
	private explicit_type "Pattern"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 342043 "buildFloatAndDecimalPattern"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 342171 "floatPattern"
	private explicit_return_type "Pattern"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 342299 "decimalPattern"
	private explicit_return_type "Pattern"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 342427 "Scanner"
	private explicit_return_type ""
	nparams 2
	  param inout name "source" explicit_type "Readable"
	  param inout name "pattern" explicit_type "Pattern"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors

Constructs a <code>Scanner</code> that returns values scanned
from the specified source delimited by the specified pattern.

@param  source A character source implementing the Readable interface
@param pattern A delimiting pattern
@return A scanner with the specified source and pattern"
      end

      operation 342555 "Scanner"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" explicit_type "Readable"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>Scanner</code> that produces values scanned
from the specified source.

@param  source A character source implementing the {@link Readable}
        interface"
      end

      operation 342683 "Scanner"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" explicit_type "InputStream"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>Scanner</code> that produces values scanned
from the specified input stream. Bytes from the stream are converted 
into characters using the underlying platform's
{@linkplain java.nio.charset.Charset#defaultCharset default charset}.

@param  source An input stream to be scanned"
      end

      operation 342811 "Scanner"
	public explicit_return_type ""
	nparams 2
	  param inout name "source" explicit_type "InputStream"
	  param in name "charsetName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>Scanner</code> that produces values scanned
from the specified input stream. Bytes from the stream are converted 
into characters using the specified charset.

@param  source An input stream to be scanned
@param charsetName The encoding type used to convert bytes from the
       stream into characters to be scanned
@throws IllegalArgumentException if the specified character set
        does not exist"
      end

      operation 342939 "makeReadable"
	class_operation private explicit_return_type "Readable"
	nparams 2
	  param inout name "source" explicit_type "InputStream"
	  param in name "charsetName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 343067 "Scanner"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" explicit_type "File"
	nexceptions 1
	  explicit_exception "FileNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>Scanner</code> that produces values scanned
from the specified file. Bytes from the file are converted into 
characters using the underlying platform's
{@linkplain java.nio.charset.Charset#defaultCharset default charset}.

@param  source A file to be scanned
@throws FileNotFoundException if source is not found"
      end

      operation 343195 "Scanner"
	public explicit_return_type ""
	nparams 2
	  param inout name "source" explicit_type "File"
	  param in name "charsetName" explicit_type "String"
	nexceptions 1
	  explicit_exception "FileNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>Scanner</code> that produces values scanned
from the specified file. Bytes from the file are converted into 
characters using the specified charset.

@param  source A file to be scanned
@param charsetName The encoding type used to convert bytes from the file
       into characters to be scanned
@throws FileNotFoundException if source is not found
@throws IllegalArgumentException if the specified encoding is 
        not found"
      end

      operation 343323 "Scanner"
	public explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>Scanner</code> that produces values scanned
from the specified string.

@param  source A string to scan"
      end

      operation 343451 "Scanner"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" explicit_type "ReadableByteChannel"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>Scanner</code> that produces values scanned
from the specified channel. Bytes from the source are converted into 
characters using the underlying platform's
{@linkplain java.nio.charset.Charset#defaultCharset default charset}.

@param  source A channel to scan"
      end

      operation 343579 "makeReadable"
	class_operation private explicit_return_type "Readable"
	nparams 1
	  param inout name "source" explicit_type "ReadableByteChannel"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 343707 "Scanner"
	public explicit_return_type ""
	nparams 2
	  param inout name "source" explicit_type "ReadableByteChannel"
	  param in name "charsetName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>Scanner</code> that produces values scanned
from the specified channel. Bytes from the source are converted into 
characters using the specified charset.

@param  source A channel to scan
@param charsetName The encoding type used to convert bytes from the
       channel into characters to be scanned
@throws IllegalArgumentException if the specified character set
        does not exist"
      end

      operation 343835 "makeReadable"
	class_operation private explicit_return_type "Readable"
	nparams 2
	  param inout name "source" explicit_type "ReadableByteChannel"
	  param in name "charsetName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 343963 "saveState"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private primitives used to support scanning"
      end

      operation 344091 "revertState"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 344219 "revertState"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 344347 "cacheResult"
	private explicit_return_type "void"
	nparams 1
	  param inout name "p" explicit_type "Pattern"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 344475 "clearCaches"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Clears both regular cache and type cache"
      end

      operation 344603 "getCachedResult"
	private explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Also clears the both the regular cache and the type cache"
      end

      operation 344731 "useTypeCache"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Also clears the both the regular cache and the type cache"
      end

      operation 344859 "readInput"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Tries to read more input. May block."
      end

      operation 344987 "makeSpace"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " After this method is called there will either be an exception
 or else there will be space in the buffer"
      end

      operation 345115 "translateSavedIndexes"
	private explicit_return_type "void"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " When a buffer compaction/reallocation occurs the saved indexes must
 be modified appropriately"
      end

      operation 345243 "throwFor"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If we are at the end of input then NoSuchElement;
 If there is still input left then InputMismatch"
      end

      operation 345371 "hasTokenInBuffer"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns true if a complete token or partial token is in the buffer.
 It is not necessary to find a complete token since a partial token
 means that there will be another token with or without more input."
      end

      operation 345499 "getCompleteTokenInBuffer"
	private explicit_return_type "String"
	nparams 1
	  param inout name "pattern" explicit_type "Pattern"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a \"complete token\" that matches the specified pattern 

A token is complete if surrounded by delims; a partial token
is prefixed by delims but not postfixed by them

The position is advanced to the end of that complete token

Pattern == null means accept any token at all

Triple return: 
1. valid string means it was found
2. null with needInput=false means we won't ever find it
3. null with needInput=true means try again after readInput"
      end

      operation 345627 "findPatternInBuffer"
	private explicit_return_type "String"
	nparams 2
	  param inout name "pattern" explicit_type "Pattern"
	  param in name "horizon" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Finds the specified pattern in the buffer up to horizon.
 Returns a match for the specified input pattern."
      end

      operation 345755 "matchPatternInBuffer"
	private explicit_return_type "String"
	nparams 1
	  param inout name "pattern" explicit_type "Pattern"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a match for the specified input pattern anchored at
 the current position"
      end

      operation 345883 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Throws if the scanner is closed"
      end

      operation 346011 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Public methods

Closes this scanner.

<p> If this scanner has not yet been closed then if its underlying
{@linkplain java.lang.Readable readable} also implements the {@link
java.io.Closeable} interface then the readable's <tt>close</tt> method
will be invoked.  If this scanner is already closed then invoking this
method will have no effect.

<p>Attempting to perform search operations after a scanner has
been closed will result in an {@link IllegalStateException}.
"
      end

      operation 346139 "ioException"
	public explicit_return_type "IOException"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>IOException</code> last thrown by this
<code>Scanner</code>'s underlying <code>Readable</code>. This method
returns <code>null</code> if no such exception exists.

@return the last exception thrown by this scanner's readable"
      end

      operation 346267 "delimiter"
	public explicit_return_type "Pattern"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Pattern</code> this <code>Scanner</code> is currently
using to match delimiters.

@return this scanner's delimiting pattern."
      end

      operation 346395 "useDelimiter"
	public return_type class_ref 156187 // Scanner
	nparams 1
	  param inout name "pattern" explicit_type "Pattern"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this scanner's delimiting pattern to the specified pattern.

@param pattern A delimiting pattern
@return this scanner"
      end

      operation 346523 "useDelimiter"
	public return_type class_ref 156187 // Scanner
	nparams 1
	  param in name "pattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this scanner's delimiting pattern to a pattern constructed from
the specified <code>String</code>.

<p> An invocation of this method of the form 
<tt>useDelimiter(pattern)</tt> behaves in exactly the same way as the
invocation <tt>hasDelimiter(Pattern.compile(pattern))</tt>.

@param pattern A string specifying a delimiting pattern
@return this scanner"
      end

      operation 346651 "locale"
	public return_type class_ref 138907 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this scanner's locale.

<p>A scanner's locale affects many elements of its default
primitive matching regular expressions; see 
<a href= \"#localized-numbers\">localized numbers</a> above.

@return this scanner's locale"
      end

      operation 346779 "useLocale"
	public return_type class_ref 156187 // Scanner
	nparams 1
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this scanner's locale to the specified locale.

<p>A scanner's locale affects many elements of its default
primitive matching regular expressions; see 
<a href= \"#localized-numbers\">localized numbers</a> above.

@param locale A string specifying the locale to use
@return this scanner"
      end

      operation 346907 "radix"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this scanner's default radix.

<p>A scanner's radix affects elements of its default
number matching regular expressions; see 
<a href= \"#localized-numbers\">localized numbers</a> above.

@return the default radix of this scanner"
      end

      operation 347035 "useRadix"
	public return_type class_ref 156187 // Scanner
	nparams 1
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this scanner's default radix to the specified radix.

<p>A scanner's radix affects elements of its default
number matching regular expressions; see 
<a href= \"#localized-numbers\">localized numbers</a> above.

<p>If the radix is less than <code>Character.MIN_RADIX</code>
or greater than <code>Character.MAX_RADIX</code>, then an
<code>IllegalArgumentException</code> is thrown.

@param radix The radix to use when scanning numbers
@return this scanner
@throws IllegalArgumentException if radix is out of range"
      end

      operation 347163 "setRadix"
	private explicit_return_type "void"
	nparams 1
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The next operation should occur in the specified radix but
 the default is left untouched."
      end

      operation 347291 "match"
	public explicit_return_type "MatchResult"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the match result of the last scanning operation performed
by this scanner. This method throws <code>IllegalStateException</code>
if no match has been performed, or if the last match was
not successful.

<p>The various <code>next</code>methods of <code>Scanner</code>
make a match result available if they complete without throwing an
exception. For instance, after an invocation of the {@link #nextInt}
method that returned an int, this method returns a 
<code>MatchResult</code> for the search of the
<a href=\"#Integer-regex\"><i>Integer</i></a> regular expression
defined above. Similarly the {@link #findInLine}, 
{@link #findWithinHorizon}, and {@link #skip} methods will make a
match available if they succeed.

@return a match result for the last match operation
@throws IllegalStateException  If no match result is available"
      end

      operation 347419 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the string representation of this <code>Scanner</code>. The
string representation of a <code>Scanner</code> contains information
that may be useful for debugging. The exact format is unspecified.

@return  The string representation of this scanner"
      end

      operation 347547 "hasNext"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this scanner has another token in its input.
This method may block while waiting for input to scan.
The scanner does not advance past any input.

@return true if and only if this scanner has another token
@throws IllegalStateException if this scanner is closed
@see java.util.Iterator"
      end

      operation 347675 "next"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds and returns the next complete token from this scanner.
A complete token is preceded and followed by input that matches
the delimiter pattern. This method may block while waiting for input 
to scan, even if a previous invocation of {@link #hasNext} returned 
<code>true</code>.

@return the next token
@throws NoSuchElementException if no more tokens are available
@throws IllegalStateException if this scanner is closed
@see java.util.Iterator"
      end

      operation 347803 "remove"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The remove operation is not supported by this implementation of
<code>Iterator</code>.

@throws UnsupportedOperationException if this method is invoked.
@see java.util.Iterator"
      end

      operation 347931 "hasNext"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "pattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the next token matches the pattern constructed from the 
specified string. The scanner does not advance past any input.

<p> An invocation of this method of the form <tt>hasNext(pattern)</tt>
behaves in exactly the same way as the invocation 
<tt>hasNext(Pattern.compile(pattern))</tt>.

@param pattern a string specifying the pattern to scan
@return true if and only if this scanner has another token matching
        the specified pattern
@throws IllegalStateException if this scanner is closed"
      end

      operation 348059 "next"
	public explicit_return_type "String"
	nparams 1
	  param in name "pattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next token if it matches the pattern constructed from the 
specified string.  If the match is successful, the scanner advances 
past the input that matched the pattern.

<p> An invocation of this method of the form <tt>next(pattern)</tt>
behaves in exactly the same way as the invocation 
<tt>next(Pattern.compile(pattern))</tt>.

@param pattern a string specifying the pattern to scan
@return the next token
@throws NoSuchElementException if no such tokens are available
@throws IllegalStateException if this scanner is closed"
      end

      operation 348187 "hasNext"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "pattern" explicit_type "Pattern"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the next complete token matches the specified pattern.
A complete token is prefixed and postfixed by input that matches
the delimiter pattern. This method may block while waiting for input.
The scanner does not advance past any input.

@param pattern the pattern to scan for
@return true if and only if this scanner has another token matching
        the specified pattern
@throws IllegalStateException if this scanner is closed"
      end

      operation 348315 "next"
	public explicit_return_type "String"
	nparams 1
	  param inout name "pattern" explicit_type "Pattern"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next token if it matches the specified pattern. This 
method may block while waiting for input to scan, even if a previous
invocation of {@link #hasNext(Pattern)} returned <code>true</code>. 
If the match is successful, the scanner advances past the input that 
matched the pattern.

@param pattern the pattern to scan for
@return the next token
@throws NoSuchElementException if no more tokens are available
@throws IllegalStateException if this scanner is closed"
      end

      operation 348443 "hasNextLine"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if there is another line in the input of this scanner.
This method may block while waiting for input. The scanner does not 
advance past any input.

@return true if and only if this scanner has another line of input
@throws IllegalStateException if this scanner is closed"
      end

      operation 348571 "nextLine"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Advances this scanner past the current line and returns the input
that was skipped.

This method returns the rest of the current line, excluding any line
separator at the end. The position is set to the beginning of the next 
line.

<p>Since this method continues to search through the input looking
for a line separator, it may buffer all of the input searching for
the line to skip if no line separators are present.

@return the line that was skipped
@throws NoSuchElementException if no line was found
@throws IllegalStateException if this scanner is closed"
      end

      operation 348699 "findInLine"
	public explicit_return_type "String"
	nparams 1
	  param in name "pattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Public methods that ignore delimiters

Attempts to find the next occurrence of a pattern constructed from the
specified string, ignoring delimiters.

<p>An invocation of this method of the form <tt>findInLine(pattern)</tt>
behaves in exactly the same way as the invocation 
<tt>findInLine(Pattern.compile(pattern))</tt>.

@param pattern a string specifying the pattern to search for
@return the text that matched the specified pattern
@throws IllegalStateException if this scanner is closed"
      end

      operation 348827 "findInLine"
	public explicit_return_type "String"
	nparams 1
	  param inout name "pattern" explicit_type "Pattern"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to find the next occurrence of the specified pattern ignoring
delimiters. If the pattern is found before the next line separator, the
scanner advances past the input that matched and returns the string that
matched the pattern.
If no such pattern is detected in the input up to the next line
separator, then <code>null</code> is returned and the scanner's 
position is unchanged. This method may block waiting for input that 
matches the pattern.

<p>Since this method continues to search through the input looking
for the specified pattern, it may buffer all of the input searching for
the desired token if no line separators are present.

@param pattern the pattern to scan for
@return the text that matched the specified pattern
@throws IllegalStateException if this scanner is closed"
      end

      operation 348955 "findWithinHorizon"
	public explicit_return_type "String"
	nparams 2
	  param in name "pattern" explicit_type "String"
	  param in name "horizon" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to find the next occurrence of a pattern constructed from the
specified string, ignoring delimiters.

<p>An invocation of this method of the form 
<tt>findWithinHorizon(pattern)</tt> behaves in exactly the same way as 
the invocation 
<tt>findWithinHorizon(Pattern.compile(pattern, horizon))</tt>.

@param pattern a string specifying the pattern to search for
@return the text that matched the specified pattern
@throws IllegalStateException if this scanner is closed
@throws IllegalArgumentException if horizon is negative"
      end

      operation 349083 "findWithinHorizon"
	public explicit_return_type "String"
	nparams 2
	  param inout name "pattern" explicit_type "Pattern"
	  param in name "horizon" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to find the next occurrence of the specified pattern.

<p>This method searches through the input up to the specified
search horizon, ignoring delimiters. If the pattern is found the 
scanner advances past the input that matched and returns the string 
that matched the pattern. If no such pattern is detected then the 
null is returned and the scanner's position remains unchanged. This 
method may block waiting for input that matches the pattern.

<p>A scanner will never search more than <code>horizon</code> code
points beyond its current position. Note that a match may be clipped
by the horizon; that is, an arbitrary match result may have been 
different if the horizon had been larger. The scanner treats the
horizon as a transparent, non-anchoring bound (see {@link 
Matcher#useTransparentBounds} and {@link Matcher#useAnchoringBounds}).

<p>If horizon is <code>0</code>, then the horizon is ignored and
this method continues to search through the input looking for the 
specified pattern without bound. In this case it may buffer all of
the input searching for the pattern.

<p>If horizon is negative, then an IllegalArgumentException is
thrown.

@param pattern the pattern to scan for
@return the text that matched the specified pattern
@throws IllegalStateException if this scanner is closed
@throws IllegalArgumentException if horizon is negative"
      end

      operation 349211 "skip"
	public return_type class_ref 156187 // Scanner
	nparams 1
	  param inout name "pattern" explicit_type "Pattern"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips input that matches the specified pattern, ignoring delimiters.
This method will skip input if an anchored match of the specified
pattern succeeds.

<p>If a match to the specified pattern is not found at the
current position, then no input is skipped and a 
<tt>NoSuchElementException</tt> is thrown.

<p>Since this method seeks to match the specified pattern starting at
the scanner's current position, patterns that can match a lot of
input (\".*\", for example) may cause the scanner to buffer a large
amount of input.

<p>Note that it is possible to skip something without risking a
<code>NoSuchElementException</code> by using a pattern that can
match nothing, e.g., <code>sc.skip(\"[ \\t]*\")</code>.

@param pattern a string specifying the pattern to skip over
@return this scanner
@throws NoSuchElementException if the specified pattern is not found
@throws IllegalStateException if this scanner is closed"
      end

      operation 349339 "skip"
	public return_type class_ref 156187 // Scanner
	nparams 1
	  param in name "pattern" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips input that matches a pattern constructed from the specified
string.

<p> An invocation of this method of the form <tt>skip(pattern)</tt>
behaves in exactly the same way as the invocation 
<tt>skip(Pattern.compile(pattern))</tt>.

@param pattern a string specifying the pattern to skip over
@return this scanner
@throws IllegalStateException if this scanner is closed"
      end

      operation 349467 "hasNextBoolean"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convenience methods for scanning primitives

Returns true if the next token in this scanner's input can be
interpreted as a boolean value using a case insensitive pattern 
created from the string \"true|false\".  The scanner does not
advance past the input that matched.

@return true if and only if this scanner's next token is a valid
        boolean value
@throws IllegalStateException if this scanner is closed"
      end

      operation 349595 "nextBoolean"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the next token of the input into a boolean value and returns
that value. This method will throw <code>InputMismatchException</code>
if the next token cannot be translated into a valid boolean value.
If the match is successful, the scanner advances past the input that 
matched.

@return the boolean scanned from the input
@throws InputMismatchException if the next token is not a valid boolean
@throws NoSuchElementException if input is exhausted
@throws IllegalStateException if this scanner is closed"
      end

      operation 349723 "hasNextByte"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the next token in this scanner's input can be
interpreted as a byte value in the default radix using the 
{@link #nextByte} method. The scanner does not advance past any input.

@return true if and only if this scanner's next token is a valid
        byte value
@throws IllegalStateException if this scanner is closed"
      end

      operation 349851 "hasNextByte"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the next token in this scanner's input can be
interpreted as a byte value in the specified radix using the 
{@link #nextByte} method. The scanner does not advance past any input.

@param radix the radix used to interpret the token as a byte value
@return true if and only if this scanner's next token is a valid
        byte value
@throws IllegalStateException if this scanner is closed"
      end

      operation 349979 "nextByte"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the next token of the input as a <tt>byte</tt>.

<p> An invocation of this method of the form 
<tt>nextByte()</tt> behaves in exactly the same way as the
invocation <tt>nextByte(radix)</tt>, where <code>radix</code>
is the default radix of this scanner.

@return the <tt>byte</tt> scanned from the input
@throws InputMismatchException
        if the next token does not match the <i>Integer</i>
        regular expression, or is out of range
@throws NoSuchElementException if input is exhausted
@throws IllegalStateException if this scanner is closed"
      end

      operation 350107 "nextByte"
	public explicit_return_type "byte"
	nparams 1
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the next token of the input as a <tt>byte</tt>.
This method will throw <code>InputMismatchException</code>
if the next token cannot be translated into a valid byte value as
described below. If the translation is successful, the scanner advances
past the input that matched.

<p> If the next token matches the <a
href=\"#Integer-regex\"><i>Integer</i></a> regular expression defined 
above then the token is converted into a <tt>byte</tt> value as if by
removing all locale specific prefixes, group separators, and locale
specific suffixes, then mapping non-ASCII digits into ASCII
digits via {@link Character#digit Character.digit}, prepending a
negative sign (-) if the locale specific negative prefixes and suffixes
were present, and passing the resulting string to
{@link Byte#parseByte(String, int) Byte.parseByte} with the
specified radix.

@param radix the radix used to interpret the token as a byte value
@return the <tt>byte</tt> scanned from the input
@throws InputMismatchException
        if the next token does not match the <i>Integer</i>
        regular expression, or is out of range
@throws NoSuchElementException if input is exhausted
@throws IllegalStateException if this scanner is closed"
      end

      operation 350235 "hasNextShort"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the next token in this scanner's input can be
interpreted as a short value in the default radix using the 
{@link #nextShort} method. The scanner does not advance past any input.

@return true if and only if this scanner's next token is a valid
        short value in the default radix
@throws IllegalStateException if this scanner is closed"
      end

      operation 350363 "hasNextShort"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the next token in this scanner's input can be
interpreted as a short value in the specified radix using the 
{@link #nextShort} method. The scanner does not advance past any input.

@param radix the radix used to interpret the token as a short value
@return true if and only if this scanner's next token is a valid
        short value in the specified radix
@throws IllegalStateException if this scanner is closed"
      end

      operation 350491 "nextShort"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the next token of the input as a <tt>short</tt>.

<p> An invocation of this method of the form 
<tt>nextShort()</tt> behaves in exactly the same way as the
invocation <tt>nextShort(radix)</tt>, where <code>radix</code>
is the default radix of this scanner.

@return the <tt>short</tt> scanned from the input
@throws InputMismatchException
        if the next token does not match the <i>Integer</i>
        regular expression, or is out of range
@throws NoSuchElementException if input is exhausted
@throws IllegalStateException if this scanner is closed"
      end

      operation 350619 "nextShort"
	public explicit_return_type "short"
	nparams 1
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the next token of the input as a <tt>short</tt>.
This method will throw <code>InputMismatchException</code>
if the next token cannot be translated into a valid short value as
described below. If the translation is successful, the scanner advances
past the input that matched.

<p> If the next token matches the <a
href=\"#Integer-regex\"><i>Integer</i></a> regular expression defined 
above then the token is converted into a <tt>short</tt> value as if by
removing all locale specific prefixes, group separators, and locale
specific suffixes, then mapping non-ASCII digits into ASCII
digits via {@link Character#digit Character.digit}, prepending a
negative sign (-) if the locale specific negative prefixes and suffixes
were present, and passing the resulting string to
{@link Short#parseShort(String, int) Short.parseShort} with the 
specified radix.

@param radix the radix used to interpret the token as a short value
@return the <tt>short</tt> scanned from the input
@throws InputMismatchException
        if the next token does not match the <i>Integer</i>
        regular expression, or is out of range
@throws NoSuchElementException if input is exhausted
@throws IllegalStateException if this scanner is closed"
      end

      operation 350747 "hasNextInt"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the next token in this scanner's input can be
interpreted as an int value in the default radix using the 
{@link #nextInt} method. The scanner does not advance past any input.

@return true if and only if this scanner's next token is a valid
        int value
@throws IllegalStateException if this scanner is closed"
      end

      operation 350875 "hasNextInt"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the next token in this scanner's input can be
interpreted as an int value in the specified radix using the 
{@link #nextInt} method. The scanner does not advance past any input.

@param radix the radix used to interpret the token as an int value
@return true if and only if this scanner's next token is a valid
        int value
@throws IllegalStateException if this scanner is closed"
      end

      operation 351003 "processIntegerToken"
	private explicit_return_type "String"
	nparams 1
	  param in name "token" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The integer token must be stripped of prefixes, group separators,
and suffixes, non ascii digits must be converted into ascii digits
before parse will accept it."
      end

      operation 351131 "nextInt"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the next token of the input as an <tt>int</tt>.

<p> An invocation of this method of the form 
<tt>nextInt()</tt> behaves in exactly the same way as the
invocation <tt>nextInt(radix)</tt>, where <code>radix</code>
is the default radix of this scanner.

@return the <tt>int</tt> scanned from the input
@throws InputMismatchException
        if the next token does not match the <i>Integer</i>
        regular expression, or is out of range
@throws NoSuchElementException if input is exhausted
@throws IllegalStateException if this scanner is closed"
      end

      operation 351259 "nextInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the next token of the input as an <tt>int</tt>.
This method will throw <code>InputMismatchException</code>
if the next token cannot be translated into a valid int value as
described below. If the translation is successful, the scanner advances
past the input that matched.

<p> If the next token matches the <a
href=\"#Integer-regex\"><i>Integer</i></a> regular expression defined 
above then the token is converted into an <tt>int</tt> value as if by
removing all locale specific prefixes, group separators, and locale
specific suffixes, then mapping non-ASCII digits into ASCII
digits via {@link Character#digit Character.digit}, prepending a
negative sign (-) if the locale specific negative prefixes and suffixes
were present, and passing the resulting string to
{@link Integer#parseInt(String, int) Integer.parseInt} with the
specified radix.

@param radix the radix used to interpret the token as an int value
@return the <tt>int</tt> scanned from the input
@throws InputMismatchException
        if the next token does not match the <i>Integer</i>
        regular expression, or is out of range
@throws NoSuchElementException if input is exhausted
@throws IllegalStateException if this scanner is closed"
      end

      operation 351387 "hasNextLong"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the next token in this scanner's input can be
interpreted as a long value in the default radix using the 
{@link #nextLong} method. The scanner does not advance past any input.

@return true if and only if this scanner's next token is a valid
        long value
@throws IllegalStateException if this scanner is closed"
      end

      operation 351515 "hasNextLong"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the next token in this scanner's input can be
interpreted as a long value in the specified radix using the 
{@link #nextLong} method. The scanner does not advance past any input.

@param radix the radix used to interpret the token as a long value
@return true if and only if this scanner's next token is a valid
        long value
@throws IllegalStateException if this scanner is closed"
      end

      operation 351643 "nextLong"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the next token of the input as a <tt>long</tt>.

<p> An invocation of this method of the form 
<tt>nextLong()</tt> behaves in exactly the same way as the
invocation <tt>nextLong(radix)</tt>, where <code>radix</code>
is the default radix of this scanner.

@return the <tt>long</tt> scanned from the input
@throws InputMismatchException
        if the next token does not match the <i>Integer</i>
        regular expression, or is out of range
@throws NoSuchElementException if input is exhausted
@throws IllegalStateException if this scanner is closed"
      end

      operation 351771 "nextLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the next token of the input as a <tt>long</tt>.
This method will throw <code>InputMismatchException</code>
if the next token cannot be translated into a valid long value as
described below. If the translation is successful, the scanner advances
past the input that matched.

<p> If the next token matches the <a
href=\"#Integer-regex\"><i>Integer</i></a> regular expression defined 
above then the token is converted into an <tt>long</tt> value as if by
removing all locale specific prefixes, group separators, and locale
specific suffixes, then mapping non-ASCII digits into ASCII
digits via {@link Character#digit Character.digit}, prepending a
negative sign (-) if the locale specific negative prefixes and suffixes
were present, and passing the resulting string to
{@link Long#parseLong(String, int) Long.parseLong} with the
specified radix.

@param radix the radix used to interpret the token as an int value
@return the <tt>long</tt> scanned from the input
@throws InputMismatchException
        if the next token does not match the <i>Integer</i>
        regular expression, or is out of range
@throws NoSuchElementException if input is exhausted
@throws IllegalStateException if this scanner is closed"
      end

      operation 351899 "processFloatToken"
	private explicit_return_type "String"
	nparams 1
	  param in name "token" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The float token must be stripped of prefixes, group separators,
and suffixes, non ascii digits must be converted into ascii digits
before parseFloat will accept it.

If there are non-ascii digits in the token these digits must
be processed before the token is passed to parseFloat."
      end

      operation 352027 "hasNextFloat"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the next token in this scanner's input can be
interpreted as a float value using the {@link #nextFloat} 
method. The scanner does not advance past any input.

@return true if and only if this scanner's next token is a valid
        float value
@throws IllegalStateException if this scanner is closed"
      end

      operation 352155 "nextFloat"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the next token of the input as a <tt>float</tt>.
This method will throw <code>InputMismatchException</code>
if the next token cannot be translated into a valid float value as
described below. If the translation is successful, the scanner advances
past the input that matched.

<p> If the next token matches the <a
href=\"#Float-regex\"><i>Float</i></a> regular expression defined above
then the token is converted into a <tt>float</tt> value as if by
removing all locale specific prefixes, group separators, and locale
specific suffixes, then mapping non-ASCII digits into ASCII
digits via {@link Character#digit Character.digit}, prepending a
negative sign (-) if the locale specific negative prefixes and suffixes
were present, and passing the resulting string to
{@link Float#parseFloat Float.parseFloat}. If the token matches
the localized NaN or infinity strings, then either \"Nan\" or \"Infinity\"
is passed to {@link Float#parseFloat(String) Float.parseFloat} as 
appropriate.

@return the <tt>float</tt> scanned from the input
@throws InputMismatchException
        if the next token does not match the <i>Float</i>
        regular expression, or is out of range
@throws NoSuchElementException if input is exhausted
@throws IllegalStateException if this scanner is closed"
      end

      operation 352283 "hasNextDouble"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the next token in this scanner's input can be
interpreted as a double value using the {@link #nextDouble} 
method. The scanner does not advance past any input.

@return true if and only if this scanner's next token is a valid
        double value
@throws IllegalStateException if this scanner is closed"
      end

      operation 352411 "nextDouble"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the next token of the input as a <tt>double</tt>.
This method will throw <code>InputMismatchException</code>
if the next token cannot be translated into a valid double value.
If the translation is successful, the scanner advances past the input 
that matched.

<p> If the next token matches the <a
href=\"#Float-regex\"><i>Float</i></a> regular expression defined above
then the token is converted into a <tt>double</tt> value as if by
removing all locale specific prefixes, group separators, and locale
specific suffixes, then mapping non-ASCII digits into ASCII
digits via {@link Character#digit Character.digit}, prepending a
negative sign (-) if the locale specific negative prefixes and suffixes
were present, and passing the resulting string to
{@link Double#parseDouble Double.parseDouble}. If the token matches
the localized NaN or infinity strings, then either \"Nan\" or \"Infinity\"
is passed to {@link Double#parseDouble(String) Double.parseDouble} as 
appropriate.

@return the <tt>double</tt> scanned from the input
@throws InputMismatchException
        if the next token does not match the <i>Float</i>
        regular expression, or is out of range
@throws NoSuchElementException if the input is exhausted
@throws IllegalStateException if this scanner is closed"
      end

      operation 352539 "hasNextBigInteger"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convenience methods for scanning multi precision numbers

Returns true if the next token in this scanner's input can be
interpreted as a <code>BigInteger</code> in the default radix using the 
{@link #nextBigInteger} method. The scanner does not advance past any 
input.

@return true if and only if this scanner's next token is a valid
        <code>BigInteger</code>
@throws IllegalStateException if this scanner is closed"
      end

      operation 352667 "hasNextBigInteger"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the next token in this scanner's input can be
interpreted as a <code>BigInteger</code> in the specified radix using 
the {@link #nextBigInteger} method. The scanner does not advance past 
any input.

@param radix the radix used to interpret the token as an integer
@return true if and only if this scanner's next token is a valid
        <code>BigInteger</code>
@throws IllegalStateException if this scanner is closed"
      end

      operation 352795 "nextBigInteger"
	public explicit_return_type "BigInteger"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the next token of the input as a {@link java.math.BigInteger
BigInteger}.

<p> An invocation of this method of the form 
<tt>nextBigInteger()</tt> behaves in exactly the same way as the
invocation <tt>nextBigInteger(radix)</tt>, where <code>radix</code>
is the default radix of this scanner.

@return the <tt>BigInteger</tt> scanned from the input
@throws InputMismatchException
        if the next token does not match the <i>Integer</i>
        regular expression, or is out of range
@throws NoSuchElementException if the input is exhausted
@throws IllegalStateException if this scanner is closed"
      end

      operation 352923 "nextBigInteger"
	public explicit_return_type "BigInteger"
	nparams 1
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the next token of the input as a {@link java.math.BigInteger
BigInteger}.

<p> If the next token matches the <a
href=\"#Integer-regex\"><i>Integer</i></a> regular expression defined
above then the token is converted into a <tt>BigInteger</tt> value as if
by removing all group separators, mapping non-ASCII digits into ASCII
digits via the {@link Character#digit Character.digit}, and passing the
resulting string to the {@link
java.math.BigInteger#BigInteger(java.lang.String) 
BigInteger(String, int)} constructor with the specified radix.

@param radix the radix used to interpret the token
@return the <tt>BigInteger</tt> scanned from the input
@throws InputMismatchException
        if the next token does not match the <i>Integer</i>
        regular expression, or is out of range
@throws NoSuchElementException if the input is exhausted
@throws IllegalStateException if this scanner is closed"
      end

      operation 353051 "hasNextBigDecimal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the next token in this scanner's input can be
interpreted as a <code>BigDecimal</code> using the 
{@link #nextBigDecimal} method. The scanner does not advance past any 
input.

@return true if and only if this scanner's next token is a valid
        <code>BigDecimal</code>
@throws IllegalStateException if this scanner is closed"
      end

      operation 353179 "nextBigDecimal"
	public explicit_return_type "BigDecimal"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the next token of the input as a {@link java.math.BigDecimal
BigDecimal}.

<p> If the next token matches the <a
href=\"#Decimal-regex\"><i>Decimal</i></a> regular expression defined
above then the token is converted into a <tt>BigDecimal</tt> value as if
by removing all group separators, mapping non-ASCII digits into ASCII
digits via the {@link Character#digit Character.digit}, and passing the
resulting string to the {@link
java.math.BigDecimal#BigDecimal(java.lang.String) BigDecimal(String)}
constructor.

@return the <tt>BigDecimal</tt> scanned from the input
@throws InputMismatchException
        if the next token does not match the <i>Decimal</i>
        regular expression, or is out of range
@throws NoSuchElementException if the input is exhausted
@throws IllegalStateException if this scanner is closed"
      end
    end

    class 156315 "SimpleTimeZone"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>SimpleTimeZone</code> is a concrete subclass of <code>TimeZone</code>
that represents a time zone for use with a Gregorian calendar.
The class holds an offset from GMT, called <em>raw offset</em>, and start
and end rules for a daylight saving time schedule.  Since it only holds
single values for each, it cannot handle historical changes in the offset
from GMT and the daylight saving schedule, except that the {@link
#setStartYear setStartYear} method can specify the year when the daylight
saving time schedule starts in effect.
<p>
To construct a <code>SimpleTimeZone</code> with a daylight saving time
schedule, the schedule can be described with a set of rules,
<em>start-rule</em> and <em>end-rule</em>. A day when daylight saving time
starts or ends is specified by a combination of <em>month</em>,
<em>day-of-month</em>, and <em>day-of-week</em> values. The <em>month</em>
value is represented by a Calendar {@link Calendar#MONTH MONTH} field
value, such as {@link Calendar#MARCH}. The <em>day-of-week</em> value is
represented by a Calendar {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} value,
such as {@link Calendar#SUNDAY SUNDAY}. The meanings of value combinations
are as follows.

<ul>
<li><b>Exact day of month</b><br>
To specify an exact day of month, set the <em>month</em> and
<em>day-of-month</em> to an exact value, and <em>day-of-week</em> to zero. For
example, to specify March 1, set the <em>month</em> to {@link Calendar#MARCH
MARCH}, <em>day-of-month</em> to 1, and <em>day-of-week</em> to 0.</li>

<li><b>Day of week on or after day of month</b><br>
To specify a day of week on or after an exact day of month, set the
<em>month</em> to an exact month value, <em>day-of-month</em> to the day on
or after which the rule is applied, and <em>day-of-week</em> to a negative {@link
Calendar#DAY_OF_WEEK DAY_OF_WEEK} field value. For example, to specify the
second Sunday of April, set <em>month</em> to {@link Calendar#APRIL APRIL},
<em>day-of-month</em> to 8, and <em>day-of-week</em> to <code>-</code>{@link
Calendar#SUNDAY SUNDAY}.</li>

<li><b>Day of week on or before day of month</b><br>
To specify a day of the week on or before an exact day of the month, set
<em>day-of-month</em> and <em>day-of-week</em> to a negative value. For
example, to specify the last Wednesday on or before the 21st of March, set
<em>month</em> to {@link Calendar#MARCH MARCH}, <em>day-of-month</em> is -21
and <em>day-of-week</em> is <code>-</code>{@link Calendar#WEDNESDAY WEDNESDAY}. </li>

<li><b>Last day-of-week of month</b><br>
To specify, the last day-of-week of the month, set <em>day-of-week</em> to a
{@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} value and <em>day-of-month</em> to
-1. For example, to specify the last Sunday of October, set <em>month</em>
to {@link Calendar#OCTOBER OCTOBER}, <em>day-of-week</em> to {@link
Calendar#SUNDAY SUNDAY} and <em>day-of-month</em> to -1.  </li>

</ul>
The time of the day at which daylight saving time starts or ends is
specified by a millisecond value within the day. There are three kinds of
<em>mode</em>s to specify the time: {@link #WALL_TIME}, {@link
#STANDARD_TIME} and {@link #UTC_TIME}. For example, if daylight
saving time ends
at 2:00 am in the wall clock time, it can be specified by 7200000
milliseconds in the {@link #WALL_TIME} mode. In this case, the wall clock time
for an <em>end-rule</em> means the same thing as the daylight time.
<p>
The following are examples of parameters for constructing time zone objects.
<pre><code>
     // Base GMT offset: -8:00
     // DST starts:      at 2:00am in standard time
     //                  on the first Sunday in April
     // DST ends:        at 2:00am in daylight time
     //                  on the last Sunday in October
     // Save:            1 hour
     SimpleTimeZone(-28800000,
                    \"America/Los_Angeles\",
                    Calendar.APRIL, 1, -Calendar.SUNDAY,
                    7200000,
                    Calendar.OCTOBER, -1, Calendar.SUNDAY,
                    7200000,
                    3600000)

     // Base GMT offset: +1:00
     // DST starts:      at 1:00am in UTC time
     //                  on the last Sunday in March
     // DST ends:        at 1:00am in UTC time
     //                  on the last Sunday in October
     // Save:            1 hour
     SimpleTimeZone(3600000,
                    \"Europe/Paris\",
                    Calendar.MARCH, -1, Calendar.SUNDAY,
                    3600000, SimpleTimeZone.UTC_TIME,
                    Calendar.OCTOBER, -1, Calendar.SUNDAY,
                    3600000, SimpleTimeZone.UTC_TIME,
                    3600000)
</code></pre>
These parameter rules are also applicable to the set rule methods, such as
<code>setStartRule</code>.

@since 1.1
@see      Calendar
@see      GregorianCalendar
@see      TimeZone
@version  1.49 01/12/04
@author   David Goldsmith, Mark Davis, Chen-Lieh Huang, Alan Liu"
      classrelation 173467 // <generalisation>
	relation 173467 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 173467 // <generalisation>
	  b parent class_ref 138779 // TimeZone
      end

      operation 357275 "SimpleTimeZone"
	public explicit_return_type ""
	nparams 2
	  param in name "rawOffset" explicit_type "int"
	  param in name "ID" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a SimpleTimeZone with the given base time zone offset from GMT
and time zone ID with no daylight saving time schedule.

@param rawOffset  The base time zone offset in milliseconds to GMT.
@param ID         The time zone name that is given to this instance."
      end

      operation 357403 "SimpleTimeZone"
	public explicit_return_type ""
	nparams 10
	  param in name "rawOffset" explicit_type "int"
	  param in name "ID" explicit_type "String"
	  param in name "startMonth" explicit_type "int"
	  param in name "startDay" explicit_type "int"
	  param in name "startDayOfWeek" explicit_type "int"
	  param in name "startTime" explicit_type "int"
	  param in name "endMonth" explicit_type "int"
	  param in name "endDay" explicit_type "int"
	  param in name "endDayOfWeek" explicit_type "int"
	  param in name "endTime" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a SimpleTimeZone with the given base time zone offset from
GMT, time zone ID, and rules for starting and ending the daylight
time.
Both <code>startTime</code> and <code>endTime</code> are specified to be
represented in the wall clock time. The amount of daylight saving is
assumed to be 3600000 milliseconds (i.e., one hour). This constructor is
equivalent to:
<pre><code>
    SimpleTimeZone(rawOffset,
                   ID,
                   startMonth,
                   startDay,
                   startDayOfWeek,
                   startTime,
                   SimpleTimeZone.{@link #WALL_TIME},
                   endMonth,
                   endDay,
                   endDayOfWeek,
                   endTime,
                   SimpleTimeZone.{@link #WALL_TIME},
                   3600000)
</code></pre>

@param rawOffset       The given base time zone offset from GMT.
@param ID              The time zone ID which is given to this object.
@param startMonth      The daylight saving time starting month. Month is
                       a {@link Calendar#MONTH MONTH} field value (0-based. e.g., 0
                       for January).
@param startDay        The day of the month on which the daylight saving time starts.
                       See the class description for the special cases of this parameter.
@param startDayOfWeek  The daylight saving time starting day-of-week.
                       See the class description for the special cases of this parameter.
@param startTime       The daylight saving time starting time in local wall clock
                       time (in milliseconds within the day), which is local
                       standard time in this case.
@param endMonth        The daylight saving time ending month. Month is
                       a {@link Calendar#MONTH MONTH} field
                       value (0-based. e.g., 9 for October).
@param endDay          The day of the month on which the daylight saving time ends.
                       See the class description for the special cases of this parameter.
@param endDayOfWeek    The daylight saving time ending day-of-week.
                       See the class description for the special cases of this parameter.
@param endTime         The daylight saving ending time in local wall clock time,
                       (in milliseconds within the day) which is local daylight
                       time in this case.
@exception IllegalArgumentException if the month, day, dayOfWeek, or time
parameters are out of range for the start or end rule"
      end

      operation 357531 "SimpleTimeZone"
	public explicit_return_type ""
	nparams 11
	  param in name "rawOffset" explicit_type "int"
	  param in name "ID" explicit_type "String"
	  param in name "startMonth" explicit_type "int"
	  param in name "startDay" explicit_type "int"
	  param in name "startDayOfWeek" explicit_type "int"
	  param in name "startTime" explicit_type "int"
	  param in name "endMonth" explicit_type "int"
	  param in name "endDay" explicit_type "int"
	  param in name "endDayOfWeek" explicit_type "int"
	  param in name "endTime" explicit_type "int"
	  param in name "dstSavings" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a SimpleTimeZone with the given base time zone offset from
GMT, time zone ID, and rules for starting and ending the daylight
time.
Both <code>startTime</code> and <code>endTime</code> are assumed to be
represented in the wall clock time. This constructor is equivalent to:
<pre><code>
    SimpleTimeZone(rawOffset,
                   ID,
                   startMonth,
                   startDay,
                   startDayOfWeek,
                   startTime,
                   SimpleTimeZone.{@link #WALL_TIME},
                   endMonth,
                   endDay,
                   endDayOfWeek,
                   endTime,
                   SimpleTimeZone.{@link #WALL_TIME},
                   dstSavings)
</code></pre>

@param rawOffset       The given base time zone offset from GMT.
@param ID              The time zone ID which is given to this object.
@param startMonth      The daylight saving time starting month. Month is
                       a {@link Calendar#MONTH MONTH} field
                       value (0-based. e.g., 0 for January).
@param startDay        The day of the month on which the daylight saving time starts.
                       See the class description for the special cases of this parameter.
@param startDayOfWeek  The daylight saving time starting day-of-week.
                       See the class description for the special cases of this parameter.
@param startTime       The daylight saving time starting time in local wall clock
                       time, which is local standard time in this case.
@param endMonth        The daylight saving time ending month. Month is
                       a {@link Calendar#MONTH MONTH} field
                       value (0-based. e.g., 9 for October).
@param endDay          The day of the month on which the daylight saving time ends.
                       See the class description for the special cases of this parameter.
@param endDayOfWeek    The daylight saving time ending day-of-week.
                       See the class description for the special cases of this parameter.
@param endTime         The daylight saving ending time in local wall clock time,
                       which is local daylight time in this case.
@param dstSavings      The amount of time in milliseconds saved during
                       daylight saving time.
@exception IllegalArgumentException if the month, day, dayOfWeek, or time
parameters are out of range for the start or end rule
@since 1.2"
      end

      operation 357659 "SimpleTimeZone"
	public explicit_return_type ""
	nparams 13
	  param in name "rawOffset" explicit_type "int"
	  param in name "ID" explicit_type "String"
	  param in name "startMonth" explicit_type "int"
	  param in name "startDay" explicit_type "int"
	  param in name "startDayOfWeek" explicit_type "int"
	  param in name "startTime" explicit_type "int"
	  param in name "startTimeMode" explicit_type "int"
	  param in name "endMonth" explicit_type "int"
	  param in name "endDay" explicit_type "int"
	  param in name "endDayOfWeek" explicit_type "int"
	  param in name "endTime" explicit_type "int"
	  param in name "endTimeMode" explicit_type "int"
	  param in name "dstSavings" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}, ${t12} ${p12}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a SimpleTimeZone with the given base time zone offset from
GMT, time zone ID, and rules for starting and ending the daylight
time.
This constructor takes the full set of the start and end rules
parameters, including modes of <code>startTime</code> and
<code>endTime</code>. The mode specifies either {@link #WALL_TIME wall
time} or {@link #STANDARD_TIME standard time} or {@link #UTC_TIME UTC
time}.

@param rawOffset       The given base time zone offset from GMT.
@param ID              The time zone ID which is given to this object.
@param startMonth      The daylight saving time starting month. Month is
                       a {@link Calendar#MONTH MONTH} field
                       value (0-based. e.g., 0 for January).
@param startDay        The day of the month on which the daylight saving time starts.
                       See the class description for the special cases of this parameter.
@param startDayOfWeek  The daylight saving time starting day-of-week.
                       See the class description for the special cases of this parameter.
@param startTime       The daylight saving time starting time in the time mode
                       specified by <code>startTimeMode</code>.
@param startTimeMode   The mode of the start time specified by startTime.
@param endMonth        The daylight saving time ending month. Month is
                       a {@link Calendar#MONTH MONTH} field
                       value (0-based. e.g., 9 for October).
@param endDay          The day of the month on which the daylight saving time ends.
                       See the class description for the special cases of this parameter.
@param endDayOfWeek    The daylight saving time ending day-of-week.
                       See the class description for the special cases of this parameter.
@param endTime         The daylight saving ending time in time time mode
                       specified by <code>endTimeMode</code>.
@param endTimeMode     The mode of the end time specified by endTime
@param dstSavings      The amount of time in milliseconds saved during
                       daylight saving time.

@exception IllegalArgumentException if the month, day, dayOfWeek, time more, or
time parameters are out of range for the start or end rule, or if a time mode
value is invalid.

@see #WALL_TIME
@see #STANDARD_TIME
@see #UTC_TIME

@since 1.4"
      end

      operation 357787 "setStartYear"
	public explicit_return_type "void"
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the daylight saving time starting year.

@param year  The daylight saving starting year."
      end

      operation 357915 "setStartRule"
	public explicit_return_type "void"
	nparams 4
	  param in name "startMonth" explicit_type "int"
	  param in name "startDay" explicit_type "int"
	  param in name "startDayOfWeek" explicit_type "int"
	  param in name "startTime" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the daylight saving time start rule. For example, if daylight saving
time starts on the first Sunday in April at 2 am in local wall clock
time, you can set the start rule by calling:
<pre><code>setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2*60*60*1000);</code></pre>

@param startMonth      The daylight saving time starting month. Month is
                       a {@link Calendar#MONTH MONTH} field
                       value (0-based. e.g., 0 for January).
@param startDay        The day of the month on which the daylight saving time starts.
                       See the class description for the special cases of this parameter.
@param startDayOfWeek  The daylight saving time starting day-of-week.
                       See the class description for the special cases of this parameter.
@param startTime       The daylight saving time starting time in local wall clock
                       time, which is local standard time in this case.
@exception IllegalArgumentException if the <code>startMonth</code>, <code>startDay</code>,
<code>startDayOfWeek</code>, or <code>startTime</code> parameters are out of range"
      end

      operation 358043 "setStartRule"
	public explicit_return_type "void"
	nparams 3
	  param in name "startMonth" explicit_type "int"
	  param in name "startDay" explicit_type "int"
	  param in name "startTime" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the daylight saving time start rule to a fixed date within a month.
This method is equivalent to:
<pre><code>setStartRule(startMonth, startDay, 0, startTime)</code></pre>

@param startMonth      The daylight saving time starting month. Month is
                       a {@link Calendar#MONTH MONTH} field
                       value (0-based. e.g., 0 for January).
@param startDay        The day of the month on which the daylight saving time starts.
@param startTime       The daylight saving time starting time in local wall clock
                       time, which is local standard time in this case.
                       See the class description for the special cases of this parameter.
@exception IllegalArgumentException if the <code>startMonth</code>,
<code>startDayOfMonth</code>, or <code>startTime</code> parameters are out of range
@since 1.2"
      end

      operation 358171 "setStartRule"
	public explicit_return_type "void"
	nparams 5
	  param in name "startMonth" explicit_type "int"
	  param in name "startDay" explicit_type "int"
	  param in name "startDayOfWeek" explicit_type "int"
	  param in name "startTime" explicit_type "int"
	  param inout name "after" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the daylight saving time start rule to a weekday before or after the given date within
a month, e.g., the first Monday on or after the 8th.

@param startMonth      The daylight saving time starting month. Month is
                       a {@link Calendar#MONTH MONTH} field
                       value (0-based. e.g., 0 for January).
@param startDay        The day of the month on which the daylight saving time starts.
@param startDayOfWeek  The daylight saving time starting day-of-week.
@param startTime       The daylight saving time starting time in local wall clock
                       time, which is local standard time in this case.
@param after           If true, this rule selects the first <code>dayOfWeek</code> on or
                       <em>after</em> <code>dayOfMonth</code>.  If false, this rule
                       selects the last <code>dayOfWeek</code> on or <em>before</em>
                       <code>dayOfMonth</code>.
@exception IllegalArgumentException if the <code>startMonth</code>, <code>startDay</code>,
<code>startDayOfWeek</code>, or <code>startTime</code> parameters are out of range
@since 1.2"
      end

      operation 358299 "setEndRule"
	public explicit_return_type "void"
	nparams 4
	  param in name "endMonth" explicit_type "int"
	  param in name "endDay" explicit_type "int"
	  param in name "endDayOfWeek" explicit_type "int"
	  param in name "endTime" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the daylight saving time end rule. For example, if daylight saving time
ends on the last Sunday in October at 2 am in wall clock time,
you can set the end rule by calling:
<code>setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2*60*60*1000);</code>

@param endMonth        The daylight saving time ending month. Month is
                       a {@link Calendar#MONTH MONTH} field
                       value (0-based. e.g., 9 for October).
@param endDay          The day of the month on which the daylight saving time ends.
                       See the class description for the special cases of this parameter.
@param endDayOfWeek    The daylight saving time ending day-of-week.
                       See the class description for the special cases of this parameter.
@param endTime         The daylight saving ending time in local wall clock time,
                       (in milliseconds within the day) which is local daylight
                       time in this case.
@exception IllegalArgumentException if the <code>endMonth</code>, <code>endDay</code>,
<code>endDayOfWeek</code>, or <code>endTime</code> parameters are out of range"
      end

      operation 358427 "setEndRule"
	public explicit_return_type "void"
	nparams 3
	  param in name "endMonth" explicit_type "int"
	  param in name "endDay" explicit_type "int"
	  param in name "endTime" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the daylight saving time end rule to a fixed date within a month.
This method is equivalent to:
<pre><code>setEndRule(endMonth, endDay, 0, endTime)</code></pre>

@param endMonth        The daylight saving time ending month. Month is
                       a {@link Calendar#MONTH MONTH} field
                       value (0-based. e.g., 9 for October).
@param endDay          The day of the month on which the daylight saving time ends.
@param endTime         The daylight saving ending time in local wall clock time,
                       (in milliseconds within the day) which is local daylight
                       time in this case.
@exception IllegalArgumentException the <code>endMonth</code>, <code>endDay</code>,
or <code>endTime</code> parameters are out of range
@since 1.2"
      end

      operation 358555 "setEndRule"
	public explicit_return_type "void"
	nparams 5
	  param in name "endMonth" explicit_type "int"
	  param in name "endDay" explicit_type "int"
	  param in name "endDayOfWeek" explicit_type "int"
	  param in name "endTime" explicit_type "int"
	  param inout name "after" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the daylight saving time end rule to a weekday before or after the given date within
a month, e.g., the first Monday on or after the 8th.

@param endMonth        The daylight saving time ending month. Month is
                       a {@link Calendar#MONTH MONTH} field
                       value (0-based. e.g., 9 for October).
@param endDay          The day of the month on which the daylight saving time ends.
@param endDayOfWeek    The daylight saving time ending day-of-week.
@param endTime         The daylight saving ending time in local wall clock time,
                       (in milliseconds within the day) which is local daylight
                       time in this case.
@param after           If true, this rule selects the first <code>endDayOfWeek</code> on
                       or <em>after</em> <code>endDay</code>.  If false, this rule
                       selects the last <code>endDayOfWeek</code> on or before
                       <code>endDay</code> of the month.
@exception IllegalArgumentException the <code>endMonth</code>, <code>endDay</code>,
<code>endDayOfWeek</code>, or <code>endTime</code> parameters are out of range
@since 1.2"
      end

      operation 358683 "getOffset"
	public explicit_return_type "int"
	nparams 1
	  param in name "date" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the offset of this time zone from UTC at the given
time. If daylight saving time is in effect at the given time,
the offset value is adjusted with the amount of daylight
saving.

@param date the time at which the time zone offset is found
@return the amount of time in milliseconds to add to UTC to get
local time.
@since 1.4"
      end

      operation 358811 "getOffsets"
	package explicit_return_type "int"
	nparams 2
	  param in name "date" explicit_type "long"
	  param in name "offsets" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see TimeZone#getOffsets"
      end

      operation 358939 "getOffset"
	public explicit_return_type "int"
	nparams 6
	  param in name "era" explicit_type "int"
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "day" explicit_type "int"
	  param in name "dayOfWeek" explicit_type "int"
	  param in name "millis" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the difference in milliseconds between local time and
UTC, taking into account both the raw offset and the effect of
daylight saving, for the specified date and time.  This method
assumes that the start and end month are distinct.  It also
uses a default {@link GregorianCalendar} object as its
underlying calendar, such as for determining leap years.  Do
not use the result of this method with a calendar other than a
default <code>GregorianCalendar</code>.

<p><em>Note:  In general, clients should use
<code>Calendar.get(ZONE_OFFSET) + Calendar.get(DST_OFFSET)</code>
instead of calling this method.</em>

@param era       The era of the given date.
@param year      The year in the given date.
@param month     The month in the given date. Month is 0-based. e.g.,
                 0 for January.
@param day       The day-in-month of the given date.
@param dayOfWeek The day-of-week of the given date.
@param millis    The milliseconds in day in <em>standard</em> local time.
@return          The milliseconds to add to UTC to get local time.
@exception       IllegalArgumentException the <code>era</code>,
			<code>month</code>, <code>day</code>, <code>dayOfWeek</code>,
			or <code>millis</code> parameters are out of range"
      end

      operation 359067 "getOffset"
	private explicit_return_type "int"
	nparams 4
	  param inout name "cal" explicit_type "BaseCalendar"
	  param inout name "cdate" explicit_type "BaseCalendar.Date"
	  param in name "year" explicit_type "int"
	  param in name "time" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 359195 "getStart"
	private explicit_return_type "long"
	nparams 3
	  param inout name "cal" explicit_type "BaseCalendar"
	  param inout name "cdate" explicit_type "BaseCalendar.Date"
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 359323 "getEnd"
	private explicit_return_type "long"
	nparams 3
	  param inout name "cal" explicit_type "BaseCalendar"
	  param inout name "cdate" explicit_type "BaseCalendar.Date"
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 359451 "getTransition"
	private explicit_return_type "long"
	nparams 8
	  param inout name "cal" explicit_type "BaseCalendar"
	  param inout name "cdate" explicit_type "BaseCalendar.Date"
	  param in name "mode" explicit_type "int"
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	  param in name "dayOfWeek" explicit_type "int"
	  param in name "timeOfDay" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 359579 "getRawOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the GMT offset for this time zone.
@return the GMT offset value in milliseconds
@see #setRawOffset"
      end

      operation 359707 "setRawOffset"
	public explicit_return_type "void"
	nparams 1
	  param in name "offsetMillis" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the base time zone offset to GMT.
This is the offset to add to UTC to get local time.
@see #getRawOffset"
      end

      operation 359835 "setDSTSavings"
	public explicit_return_type "void"
	nparams 1
	  param in name "millisSavedDuringDST" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the amount of time in milliseconds that the clock is advanced
during daylight saving time.
@param millisSavedDuringDST the number of milliseconds the time is
advanced with respect to standard time when the daylight saving time rules
are in effect. A positive number, typically one hour (3600000).
@see #getDSTSavings
@since 1.2"
      end

      operation 359963 "getDSTSavings"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the amount of time in milliseconds that the clock is
advanced during daylight saving time.

@return the number of milliseconds the time is advanced with
respect to standard time when the daylight saving rules are in
effect, or 0 (zero) if this time zone doesn't observe daylight
saving time.

@see #setDSTSavings
@since 1.2"
      end

      operation 360091 "useDaylightTime"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Queries if this time zone uses daylight saving time.
@return true if this time zone uses daylight saving time;
false otherwise."
      end

      operation 360219 "inDaylightTime"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "date" type class_ref 139163 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Queries if the given date is in daylight saving time.
@return true if daylight saving time is in effective at the
given date; false otherwise."
      end

      operation 360347 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a clone of this <code>SimpleTimeZone</code> instance.
@return a clone of this instance."
      end

      operation 360475 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the hash code for the SimpleDateFormat object.
@return the hash code for this object"
      end

      operation 360603 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the equality of two <code>SimpleTimeZone</code> objects.

@param obj  The <code>SimpleTimeZone</code> object to be compared with.
@return     True if the given <code>obj</code> is the same as this
		   <code>SimpleTimeZone</code> object; false otherwise."
      end

      operation 360731 "hasSameRules"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 138779 // TimeZone
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this zone has the same rules and offset as another zone.
@param other the TimeZone object to be compared with
@return <code>true</code> if the given zone is a SimpleTimeZone and has the
same rules and offset as this one
@since 1.2"
      end

      operation 360859 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this time zone.
@return a string representation of this time zone."
      end

      attribute 194331 "startMonth"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " =======================privates===============================

The month in which daylight saving time starts.  This value must be
between <code>Calendar.JANUARY</code> and
<code>Calendar.DECEMBER</code> inclusive.  This value must not equal
<code>endMonth</code>.
<p>If <code>useDaylight</code> is false, this value is ignored.
@serial
"
      end

      attribute 194459 "startDay"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This field has two possible interpretations:
<dl>
<dt><code>startMode == DOW_IN_MONTH</code></dt>
<dd>
<code>startDay</code> indicates the day of the month of
<code>startMonth</code> on which daylight
saving time starts, from 1 to 28, 30, or 31, depending on the
<code>startMonth</code>.
</dd>
<dt><code>startMode != DOW_IN_MONTH</code></dt>
<dd>
<code>startDay</code> indicates which <code>startDayOfWeek</code> in th
month <code>startMonth</code> daylight
saving time starts on.  For example, a value of +1 and a
<code>startDayOfWeek</code> of <code>Calendar.SUNDAY</code> indicates the
first Sunday of <code>startMonth</code>.  Likewise, +2 would indicate the
second Sunday, and -1 the last Sunday.  A value of 0 is illegal.
</dd>
</ul>
<p>If <code>useDaylight</code> is false, this value is ignored.
@serial
"
      end

      attribute 194587 "startDayOfWeek"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The day of the week on which daylight saving time starts.  This value
must be between <code>Calendar.SUNDAY</code> and
<code>Calendar.SATURDAY</code> inclusive.
<p>If <code>useDaylight</code> is false or
<code>startMode == DAY_OF_MONTH</code>, this value is ignored.
@serial
"
      end

      attribute 194715 "startTime"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The time in milliseconds after midnight at which daylight saving
time starts.  This value is expressed as wall time, standard time,
or UTC time, depending on the setting of <code>startTimeMode</code>.
<p>If <code>useDaylight</code> is false, this value is ignored.
@serial
"
      end

      attribute 194843 "startTimeMode"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The format of startTime, either WALL_TIME, STANDARD_TIME, or UTC_TIME.
@serial
@since 1.3
"
      end

      attribute 194971 "endMonth"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The month in which daylight saving time ends.  This value must be
between <code>Calendar.JANUARY</code> and
<code>Calendar.UNDECIMBER</code>.  This value must not equal
<code>startMonth</code>.
<p>If <code>useDaylight</code> is false, this value is ignored.
@serial
"
      end

      attribute 195099 "endDay"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This field has two possible interpretations:
<dl>
<dt><code>endMode == DOW_IN_MONTH</code></dt>
<dd>
<code>endDay</code> indicates the day of the month of
<code>endMonth</code> on which daylight
saving time ends, from 1 to 28, 30, or 31, depending on the
<code>endMonth</code>.
</dd>
<dt><code>endMode != DOW_IN_MONTH</code></dt>
<dd>
<code>endDay</code> indicates which <code>endDayOfWeek</code> in th
month <code>endMonth</code> daylight
saving time ends on.  For example, a value of +1 and a
<code>endDayOfWeek</code> of <code>Calendar.SUNDAY</code> indicates the
first Sunday of <code>endMonth</code>.  Likewise, +2 would indicate the
second Sunday, and -1 the last Sunday.  A value of 0 is illegal.
</dd>
</ul>
<p>If <code>useDaylight</code> is false, this value is ignored.
@serial
"
      end

      attribute 195227 "endDayOfWeek"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The day of the week on which daylight saving time ends.  This value
must be between <code>Calendar.SUNDAY</code> and
<code>Calendar.SATURDAY</code> inclusive.
<p>If <code>useDaylight</code> is false or
<code>endMode == DAY_OF_MONTH</code>, this value is ignored.
@serial
"
      end

      attribute 195355 "endTime"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The time in milliseconds after midnight at which daylight saving
time ends.  This value is expressed as wall time, standard time,
or UTC time, depending on the setting of <code>endTimeMode</code>.
<p>If <code>useDaylight</code> is false, this value is ignored.
@serial
"
      end

      attribute 195483 "endTimeMode"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The format of endTime, either <code>WALL_TIME</code>,
<code>STANDARD_TIME</code>, or <code>UTC_TIME</code>.
@serial
@since 1.3
"
      end

      attribute 195611 "startYear"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The year in which daylight saving time is first observed.  This is an {@link GregorianCalendar#AD AD}
value.  If this value is less than 1 then daylight saving time is observed
for all <code>AD</code> years.
<p>If <code>useDaylight</code> is false, this value is ignored.
@serial
"
      end

      attribute 195739 "rawOffset"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The offset in milliseconds between this zone and GMT.  Negative offsets
are to the west of Greenwich.  To obtain local <em>standard</em> time,
add the offset to GMT time.  To obtain local wall time it may also be
necessary to add <code>dstSavings</code>.
@serial
"
      end

      attribute 195867 "useDaylight"
	private explicit_type "boolean"
	init_value "= false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A boolean value which is true if and only if this zone uses daylight
saving time.  If this value is false, several other fields are ignored.
@serial

 indicate if this time zone uses DST"
      end

      attribute 195995 "millisPerHour"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  60*60*1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 196123 "millisPerDay"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  24*millisPerHour"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 196251 "monthLength"
	const_attribute private explicit_type "byte"
	multiplicity "[]"
	init_value "=  staticMonthLength"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This field was serialized in JDK 1.1, so we have to keep it that way
to maintain serialization compatibility. However, there's no need to
recreate the array each time we create a new time zone.
@serial An array of bytes containing the values {31, 28, 31, 30, 31, 30,
31, 31, 30, 31, 30, 31}.  This is ignored as of the Java 2 platform v1.2, however, it must
be streamed out for compatibility with JDK 1.1.
"
      end

      attribute 196379 "staticMonthLength"
	class_attribute const_attribute private explicit_type "byte"
	multiplicity "[]"
	init_value "=  {31,28,31,30,31,30,31,31,30,31,30,31}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 196507 "staticLeapMonthLength"
	class_attribute const_attribute private explicit_type "byte"
	multiplicity "[]"
	init_value "=  {31,29,31,30,31,30,31,31,30,31,30,31}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 196635 "startMode"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Variables specifying the mode of the start rule.  Takes the following
values:
<dl>
<dt><code>DOM_MODE</code></dt>
<dd>
Exact day of week; e.g., March 1.
</dd>
<dt><code>DOW_IN_MONTH_MODE</code></dt>    
<dd>
Day of week in month; e.g., last Sunday in March.
</dd>
<dt><code>DOW_GE_DOM_MODE</code></dt>
<dd>
Day of week after day of month; e.g., Sunday on or after March 15.
</dd>
<dt><code>DOW_LE_DOM_MODE</code></dt>
<dd>
Day of week before day of month; e.g., Sunday on or before March 15.
</dd>
</dl>
The setting of this field affects the interpretation of the
<code>startDay</code> field.
<p>If <code>useDaylight</code> is false, this value is ignored.
@serial
@since 1.1.4
"
      end

      attribute 196763 "endMode"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Variables specifying the mode of the end rule.  Takes the following
values:
<dl>
<dt><code>DOM_MODE</code></dt>
<dd>
Exact day of week; e.g., March 1.
</dd>
<dt><code>DOW_IN_MONTH_MODE</code></dt>    
<dd>
Day of week in month; e.g., last Sunday in March.
</dd>
<dt><code>DOW_GE_DOM_MODE</code></dt>
<dd>
Day of week after day of month; e.g., Sunday on or after March 15.
</dd>
<dt><code>DOW_LE_DOM_MODE</code></dt>
<dd>
Day of week before day of month; e.g., Sunday on or before March 15.
</dd>
</dl>
The setting of this field affects the interpretation of the
<code>endDay</code> field.
<p>If <code>useDaylight</code> is false, this value is ignored.
@serial
@since 1.1.4
"
      end

      attribute 196891 "dstSavings"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A positive value indicating the amount of time saved during DST in
milliseconds.
Typically one hour (3600000); sometimes 30 minutes (1800000).
<p>If <code>useDaylight</code> is false, this value is ignored.
@serial
@since 1.1.4
"
      end

      attribute 197019 "gcal"
	class_attribute const_attribute private explicit_type "Gregorian"
	init_value "=  CalendarSystem.getGregorianCalendar()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 197147 "cacheYear"
	private explicit_type "long"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Cache values representing a single period of daylight saving
time. When the cache values are valid, cacheStart is the start
time (inclusive) of daylight saving time and cacheEnd is the
end time (exclusive).

cacheYear has a year value if both cacheStart and cacheEnd are
in the same year. cacheYear is set to startYear - 1 if
cacheStart and cacheEnd are in different years. cacheStart is 0
if the cache values are void. cacheYear is a long to support
Integer.MIN_VALUE - 1 (JCK requirement).
"
      end

      attribute 197275 "cacheStart"
	private explicit_type "long"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 197403 "cacheEnd"
	private explicit_type "long"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 197531 "DOM_MODE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constants specifying values of startMode and endMode.

 Exact day of month, \"Mar 1\""
      end

      attribute 197659 "DOW_IN_MONTH_MODE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Day of week in month, \"lastSun\""
      end

      attribute 197787 "DOW_GE_DOM_MODE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Day of week after day of month, \"Sun>=15\""
      end

      attribute 197915 "DOW_LE_DOM_MODE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Day of week before day of month, \"Sun<=21\""
      end

      attribute 198043 "WALL_TIME"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for a mode of start or end time specified as wall clock
time.  Wall clock time is standard time for the onset rule, and
daylight time for the end rule.
@since 1.4

 Zero for backward compatibility"
      end

      attribute 198171 "STANDARD_TIME"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for a mode of start or end time specified as standard time.
@since 1.4
"
      end

      attribute 198299 "UTC_TIME"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for a mode of start or end time specified as UTC. European
Union rules are specified as UTC time, for example.
@since 1.4
"
      end

      attribute 198427 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -403250971215465050L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Proclaim compatibility with 1.1"
      end

      attribute 198555 "currentSerialVersion"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the internal serial version which says which version was written
 - 0 (default) for version up to JDK 1.1.3
 - 1 for version from JDK 1.1.4, which includes 3 new fields
 - 2 for JDK 1.3, which includes 2 new fields"
      end

      attribute 198683 "serialVersionOnStream"
	private explicit_type "int"
	init_value "=  currentSerialVersion"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The version of the serialized data on the stream.  Possible values:
<dl>
<dt><b>0</b> or not present on stream</dt>
<dd>
JDK 1.1.3 or earlier.
</dd>
<dt><b>1</b></dt>
<dd>
JDK 1.1.4 or later.  Includes three new fields: <code>startMode</code>,
<code>endMode</code>, and <code>dstSavings</code>.
</dd>
<dt><b>2</b></dt>
<dd>
JDK 1.3 or later.  Includes two new fields: <code>startTimeMode</code>
and <code>endTimeMode</code>.
</dd>
</dl>
When streaming out this class, the most recent format
and the highest allowable <code>serialVersionOnStream</code>
is written.
@serial
@since 1.1.4
"
      end

      operation 360987 "invalidateCache"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 361115 "decodeRules"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------------------------------------------------------------------
 Rule representation

 We represent the following flavors of rules:
       5        the fifth of the month
       lastSun  the last Sunday in the month
       lastMon  the last Monday in the month
       Sun>=8   first Sunday on or after the eighth
       Sun<=25  last Sunday on or before the 25th
 This is further complicated by the fact that we need to remain
 backward compatible with the 1.1 FCS.  Finally, we need to minimize
 API changes.  In order to satisfy these requirements, we support
 three representation systems, and we translate between them.

 INTERNAL REPRESENTATION
 This is the format SimpleTimeZone objects take after construction or
 streaming in is complete.  Rules are represented directly, using an
 unencoded format.  We will discuss the start rule only below; the end
 rule is analogous.
   startMode      Takes on enumerated values DAY_OF_MONTH,
                  DOW_IN_MONTH, DOW_AFTER_DOM, or DOW_BEFORE_DOM.
   startDay       The day of the month, or for DOW_IN_MONTH mode, a
                  value indicating which DOW, such as +1 for first,
                  +2 for second, -1 for last, etc.
   startDayOfWeek The day of the week.  Ignored for DAY_OF_MONTH.

 ENCODED REPRESENTATION
 This is the format accepted by the constructor and by setStartRule()
 and setEndRule().  It uses various combinations of positive, negative,
 and zero values to encode the different rules.  This representation
 allows us to specify all the different rule flavors without altering
 the API.
   MODE              startMonth    startDay    startDayOfWeek
   DOW_IN_MONTH_MODE >=0           !=0         >0
   DOM_MODE          >=0           >0          ==0
   DOW_GE_DOM_MODE   >=0           >0          <0
   DOW_LE_DOM_MODE   >=0           <0          <0
   (no DST)          don't care    ==0         don't care

 STREAMED REPRESENTATION
 We must retain binary compatibility with the 1.1 FCS.  The 1.1 code only
 handles DOW_IN_MONTH_MODE and non-DST mode, the latter indicated by the
 flag useDaylight.  When we stream an object out, we translate into an
 approximate DOW_IN_MONTH_MODE representation so the object can be parsed
 and used by 1.1 code.  Following that, we write out the full
 representation separately so that contemporary code can recognize and
 parse it.  The full representation is written in a \"packed\" format,
 consisting of a version number, a length, and an array of bytes.  Future
 versions of this class may specify different versions.  If they wish to
 include additional data, they should do so by storing them after the
 packed representation below.
----------------------------------------------------------------------

Given a set of encoded rules in startDay and startDayOfMonth, decode
them and set the startMode appropriately.  Do the same for endDay and
endDayOfMonth.  Upon entry, the day of week variables may be zero or
negative, in order to indicate special modes.  The day of month
variables may also be negative.  Upon exit, the mode variables will be
set, and the day of week and day of month variables will be positive.
This method also recognizes a startDay or endDay of zero as indicating
no DST."
      end

      operation 361243 "decodeStartRule"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decode the start rule and validate the parameters.  The parameters are
expected to be in encoded form, which represents the various rule modes
by negating or zeroing certain values.  Representation formats are:
<p>
<pre>
           DOW_IN_MONTH  DOM    DOW>=DOM  DOW<=DOM  no DST
           ------------  -----  --------  --------  ----------
month       0..11        same    same      same     don't care
day        -5..5         1..31   1..31    -1..-31   0
dayOfWeek   1..7         0      -1..-7    -1..-7    don't care
time        0..ONEDAY    same    same      same     don't care
</pre>
The range for month does not include UNDECIMBER since this class is
really specific to GregorianCalendar, which does not use that month.
The range for time includes ONEDAY (vs. ending at ONEDAY-1) because the
end rule is an exclusive limit point.  That is, the range of times that
are in DST include those >= the start and < the end.  For this reason,
it should be possible to specify an end of ONEDAY in order to include the
entire day.  Although this is equivalent to time 0 of the following day,
it's not always possible to specify that, for example, on December 31.
While arguably the start range should still be 0..ONEDAY-1, we keep
the start and end ranges the same for consistency."
      end

      operation 361371 "decodeEndRule"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decode the end rule and validate the parameters.  This method is exactly
analogous to decodeStartRule().
@see decodeStartRule"
      end

      operation 361499 "makeRulesCompatible"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make rules compatible to 1.1 FCS code.  Since 1.1 FCS code only understands
day-of-week-in-month rules, we must modify other modes of rules to their
approximate equivalent in 1.1 FCS terms.  This method is used when streaming
out objects of this class.  After it is called, the rules will be modified,
with a possible loss of information.  startMode and endMode will NOT be
altered, even though semantically they should be set to DOW_IN_MONTH_MODE,
since the rule modification is only intended to be temporary."
      end

      operation 361627 "packRules"
	private explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pack the start and end rules into an array of bytes.  Only pack
data which is not preserved by makeRulesCompatible."
      end

      operation 361755 "unpackRules"
	private explicit_return_type "void"
	nparams 1
	  param in name "rules" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an array of bytes produced by packRules, interpret them
as the start and end rules."
      end

      operation 361883 "packTimes"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pack the start and end times into an array of bytes.  This is required
as of serial version 2."
      end

      operation 362011 "unpackTimes"
	private explicit_return_type "void"
	nparams 1
	  param in name "times" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unpack the start and end times from an array of bytes.  This is required
as of serial version 2."
      end

      operation 362139 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" explicit_type "ObjectOutputStream"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state of this object to a stream (i.e., serialize it).

@serialData We write out two formats, a JDK 1.1 compatible format, using
<code>DOW_IN_MONTH_MODE</code> rules, in the required section, followed
by the full rules, in packed format, in the optional section.  The
optional section will be ignored by JDK 1.1 code upon stream in.
<p> Contents of the optional section: The length of a byte array is
emitted (int); this is 4 as of this release. The byte array of the given
length is emitted. The contents of the byte array are the true values of
the fields <code>startDay</code>, <code>startDayOfWeek</code>,
<code>endDay</code>, and <code>endDayOfWeek</code>.  The values of these
fields in the required section are approximate values suited to the rule
mode <code>DOW_IN_MONTH_MODE</code>, which is the only mode recognized by
JDK 1.1."
      end

      operation 362267 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" explicit_type "ObjectInputStream"
	nexceptions 2
	  explicit_exception "IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute this object from a stream (i.e., deserialize it).

We handle both JDK 1.1
binary formats and full formats with a packed byte array."
      end
    end

    class 156571 "Stack"
      visibility public 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 153883 // Vector
        rank 0 explicit_value "E"
      actual class class_ref 153883 // Vector
        rank 1 explicit_value ""
      actual class class_ref 153883 // Vector
        rank 2 explicit_value ""
      actual class class_ref 153883 // Vector
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Stack</code> class represents a last-in-first-out 
(LIFO) stack of objects. It extends class <tt>Vector</tt> with five 
operations that allow a vector to be treated as a stack. The usual 
<tt>push</tt> and <tt>pop</tt> operations are provided, as well as a
method to <tt>peek</tt> at the top item on the stack, a method to test 
for whether the stack is <tt>empty</tt>, and a method to <tt>search</tt> 
the stack for an item and discover how far it is from the top.
<p>
When a stack is first created, it contains no items. 

@author  Jonathan Payne
@version 1.28, 12/19/03
@since   JDK1.0"
      classrelation 174235 // <realization>
	relation 174235 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 174235 // <realization>
	  b parent class_ref 153883 // Vector
      end

      operation 368539 "Stack"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty Stack."
      end

      operation 368667 "push"
	public explicit_return_type "E"
	nparams 1
	  param inout name "item" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes an item onto the top of this stack. This has exactly 
the same effect as:
<blockquote><pre>
addElement(item)</pre></blockquote>

@param   item   the item to be pushed onto this stack.
@return  the <code>item</code> argument.
@see     java.util.Vector#addElement"
      end

      operation 368795 "pop"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the object at the top of this stack and returns that 
object as the value of this function. 

@return     The object at the top of this stack (the last item 
            of the <tt>Vector</tt> object).
@exception  EmptyStackException  if this stack is empty."
      end

      operation 368923 "peek"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Looks at the object at the top of this stack without removing it 
from the stack. 

@return     the object at the top of this stack (the last item 
            of the <tt>Vector</tt> object). 
@exception  EmptyStackException  if this stack is empty."
      end

      operation 369051 "empty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this stack is empty.

@return  <code>true</code> if and only if this stack contains 
         no items; <code>false</code> otherwise."
      end

      operation 369179 "search"
	public explicit_return_type "int"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the 1-based position where an object is on this stack. 
If the object <tt>o</tt> occurs as an item in this stack, this 
method returns the distance from the top of the stack of the 
occurrence nearest the top of the stack; the topmost item on the 
stack is considered to be at distance <tt>1</tt>. The <tt>equals</tt> 
method is used to compare <tt>o</tt> to the 
items in this stack.

@param   o   the desired object.
@return  the 1-based position from the top of the stack where 
         the object is located; the return value <code>-1</code>
         indicates that the object is not on the stack."
      end

      attribute 199323 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  1224463164541339165L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.0.2 for interoperability "
      end
    end

    class 156699 "StringTokenizer"
      visibility public 
      nactuals 4
      actual class class_ref 144411 // Enumeration
        rank 0 explicit_value "any"
      actual class class_ref 144411 // Enumeration
        rank 1 explicit_value ""
      actual class class_ref 144411 // Enumeration
        rank 2 explicit_value ""
      actual class class_ref 144411 // Enumeration
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The string tokenizer class allows an application to break a 
string into tokens. The tokenization method is much simpler than 
the one used by the <code>StreamTokenizer</code> class. The 
<code>StringTokenizer</code> methods do not distinguish among 
identifiers, numbers, and quoted strings, nor do they recognize 
and skip comments. 
<p>
The set of delimiters (the characters that separate tokens) may 
be specified either at creation time or on a per-token basis. 
<p>
An instance of <code>StringTokenizer</code> behaves in one of two 
ways, depending on whether it was created with the 
<code>returnDelims</code> flag having the value <code>true</code> 
or <code>false</code>: 
<ul>
<li>If the flag is <code>false</code>, delimiter characters serve to 
    separate tokens. A token is a maximal sequence of consecutive 
    characters that are not delimiters. 
<li>If the flag is <code>true</code>, delimiter characters are themselves 
    considered to be tokens. A token is thus either one delimiter 
    character, or a maximal sequence of consecutive characters that are 
    not delimiters.
</ul><p>
A <tt>StringTokenizer</tt> object internally maintains a current 
position within the string to be tokenized. Some operations advance this 
current position past the characters processed.<p>
A token is returned by taking a substring of the string that was used to 
create the <tt>StringTokenizer</tt> object.
<p>
The following is one example of the use of the tokenizer. The code:
<blockquote><pre>
    StringTokenizer st = new StringTokenizer(\"this is a test\");
    while (st.hasMoreTokens()) {
        System.out.println(st.nextToken());
    }
</pre></blockquote>
<p>
prints the following output:
<blockquote><pre>
    this
    is
    a
    test
</pre></blockquote>

<p>
<tt>StringTokenizer</tt> is a legacy class that is retained for
compatibility reasons although its use is discouraged in new code. It is
recommended that anyone seeking this functionality use the <tt>split</tt>
method of <tt>String</tt> or the java.util.regex package instead.
<p>
The following example illustrates how the <tt>String.split</tt>
method can be used to break up a string into its basic tokens:
<blockquote><pre>
    String[] result = \"this is a test\".split(\"\\\\s\");
    for (int x=0; x&lt;result.length; x++)
        System.out.println(result[x]);
</pre></blockquote>
<p>
prints the following output:
<blockquote><pre>
    this
    is
    a
    test
</pre></blockquote>

@author  unascribed
@version 1.34, 05/05/04
@see     java.io.StreamTokenizer
@since   JDK1.0"
      classrelation 174363 // <realization>
	relation 174363 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 174363 // <realization>
	  b parent class_ref 144411 // Enumeration
      end

      attribute 199451 "currentPosition"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 199579 "newPosition"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 199707 "maxPosition"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 199835 "str"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 199963 "delimiters"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 200091 "retDelims"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 200219 "delimsChanged"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 200347 "maxDelimCodePoint"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "maxDelimCodePoint stores the value of the delimiter character with the
highest value. It is used to optimize the detection of delimiter
characters.

It is unlikely to provide any optimization benefit in the
hasSurrogates case because most string characters will be
smaller than the limit, but we keep it so that the two code
paths remain similar.
"
      end

      attribute 200475 "hasSurrogates"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If delimiters include any surrogates (including surrogate
pairs), hasSurrogates is true and the tokenizer uses the
different code path. This is because String.indexOf(int)
doesn't handle unpaired surrogates as a single character.
"
      end

      attribute 200603 "delimiterCodePoints"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "When hasSurrogates is true, delimiters are converted to code
points and isDelimiter(int) is used to determine if the given
codepoint is a delimiter.
"
      end

      operation 369307 "setMaxDelimCodePoint"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set maxDelimCodePoint to the highest char in the delimiter set."
      end

      operation 369435 "StringTokenizer"
	public explicit_return_type ""
	nparams 3
	  param in name "str" explicit_type "String"
	  param in name "delim" explicit_type "String"
	  param inout name "returnDelims" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string tokenizer for the specified string. All  
characters in the <code>delim</code> argument are the delimiters 
for separating tokens. 
<p>
If the <code>returnDelims</code> flag is <code>true</code>, then 
the delimiter characters are also returned as tokens. Each 
delimiter is returned as a string of length one. If the flag is 
<code>false</code>, the delimiter characters are skipped and only 
serve as separators between tokens. 
<p>
Note that if <tt>delim</tt> is <tt>null</tt>, this constructor does
not throw an exception. However, trying to invoke other methods on the
resulting <tt>StringTokenizer</tt> may result in a 
<tt>NullPointerException</tt>.

@param   str            a string to be parsed.
@param   delim          the delimiters.
@param   returnDelims   flag indicating whether to return the delimiters
                        as tokens.
@exception NullPointerException if str is <CODE>null</CODE>"
      end

      operation 369563 "StringTokenizer"
	public explicit_return_type ""
	nparams 2
	  param in name "str" explicit_type "String"
	  param in name "delim" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string tokenizer for the specified string. The 
characters in the <code>delim</code> argument are the delimiters 
for separating tokens. Delimiter characters themselves will not 
be treated as tokens.
<p>
Note that if <tt>delim</tt> is <tt>null</tt>, this constructor does
not throw an exception. However, trying to invoke other methods on the
resulting <tt>StringTokenizer</tt> may result in a
<tt>NullPointerException</tt>.

@param   str     a string to be parsed.
@param   delim   the delimiters.
@exception NullPointerException if str is <CODE>null</CODE>"
      end

      operation 369691 "StringTokenizer"
	public explicit_return_type ""
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string tokenizer for the specified string. The 
tokenizer uses the default delimiter set, which is 
<code>\"&nbsp;&#92;t&#92;n&#92;r&#92;f\"</code>: the space character, 
the tab character, the newline character, the carriage-return character,
and the form-feed character. Delimiter characters themselves will 
not be treated as tokens.

@param   str   a string to be parsed.
@exception NullPointerException if str is <CODE>null</CODE> "
      end

      operation 369819 "skipDelimiters"
	private explicit_return_type "int"
	nparams 1
	  param in name "startPos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips delimiters starting from the specified position. If retDelims
is false, returns the index of the first non-delimiter character at or
after startPos. If retDelims is true, startPos is returned."
      end

      operation 369947 "scanToken"
	private explicit_return_type "int"
	nparams 1
	  param in name "startPos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips ahead from startPos and returns the index of the next delimiter
character encountered, or maxPosition if no such delimiter is found."
      end

      operation 370075 "isDelimiter"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 370203 "hasMoreTokens"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if there are more tokens available from this tokenizer's string. 
If this method returns <tt>true</tt>, then a subsequent call to 
<tt>nextToken</tt> with no argument will successfully return a token.

@return  <code>true</code> if and only if there is at least one token 
         in the string after the current position; <code>false</code> 
         otherwise."
      end

      operation 370331 "nextToken"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next token from this string tokenizer.

@return     the next token from this string tokenizer.
@exception  NoSuchElementException  if there are no more tokens in this
              tokenizer's string."
      end

      operation 370459 "nextToken"
	public explicit_return_type "String"
	nparams 1
	  param in name "delim" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next token in this string tokenizer's string. First, 
the set of characters considered to be delimiters by this 
<tt>StringTokenizer</tt> object is changed to be the characters in 
the string <tt>delim</tt>. Then the next token in the string
after the current position is returned. The current position is 
advanced beyond the recognized token.  The new delimiter set 
remains the default after this call. 

@param      delim   the new delimiters.
@return     the next token, after switching to the new delimiter set.
@exception  NoSuchElementException  if there are no more tokens in this
              tokenizer's string.
@exception NullPointerException if delim is <CODE>null</CODE>"
      end

      operation 370587 "hasMoreElements"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the same value as the <code>hasMoreTokens</code>
method. It exists so that this class can implement the
<code>Enumeration</code> interface. 

@return  <code>true</code> if there are more tokens;
         <code>false</code> otherwise.
@see     java.util.Enumeration
@see     java.util.StringTokenizer#hasMoreTokens()"
      end

      operation 370715 "nextElement"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the same value as the <code>nextToken</code> method,
except that its declared return value is <code>Object</code> rather than
<code>String</code>. It exists so that this class can implement the
<code>Enumeration</code> interface. 

@return     the next token in the string.
@exception  NoSuchElementException  if there are no more tokens in this
              tokenizer's string.
@see        java.util.Enumeration
@see        java.util.StringTokenizer#nextToken()"
      end

      operation 370843 "countTokens"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the number of times that this tokenizer's 
<code>nextToken</code> method can be called before it generates an 
exception. The current position is not advanced.

@return  the number of tokens remaining in the string using the current
         delimiter set.
@see     java.util.StringTokenizer#nextToken()"
      end
    end

    class 156827 "Timer"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A facility for threads to schedule tasks for future execution in a
background thread.  Tasks may be scheduled for one-time execution, or for
repeated execution at regular intervals.

<p>Corresponding to each <tt>Timer</tt> object is a single background
thread that is used to execute all of the timer's tasks, sequentially.
Timer tasks should complete quickly.  If a timer task takes excessive time
to complete, it \"hogs\" the timer's task execution thread.  This can, in
turn, delay the execution of subsequent tasks, which may \"bunch up\" and
execute in rapid succession when (and if) the offending task finally
completes.

<p>After the last live reference to a <tt>Timer</tt> object goes away
<i>and</i> all outstanding tasks have completed execution, the timer's task
execution thread terminates gracefully (and becomes subject to garbage
collection).  However, this can take arbitrarily long to occur.  By
default, the task execution thread does not run as a <i>daemon thread</i>,
so it is capable of keeping an application from terminating.  If a caller
wants to terminate a timer's task execution thread rapidly, the caller
should invoke the timer's <tt>cancel</tt> method.

<p>If the timer's task execution thread terminates unexpectedly, for
example, because its <tt>stop</tt> method is invoked, any further
attempt to schedule a task on the timer will result in an
<tt>IllegalStateException</tt>, as if the timer's <tt>cancel</tt>
method had been invoked.

<p>This class is thread-safe: multiple threads can share a single
<tt>Timer</tt> object without the need for external synchronization.

<p>This class does <i>not</i> offer real-time guarantees: it schedules
tasks using the <tt>Object.wait(long)</tt> method.

<p>Implementation note: This class scales to large numbers of concurrently
scheduled tasks (thousands should present no problem).  Internally,
it uses a binary heap to represent its task queue, so the cost to schedule
a task is O(log n), where n is the number of concurrently scheduled tasks.

<p>Implementation note: All constructors start a timer thread.

@author  Josh Bloch
@version 1.17, 04/12/04
@see     TimerTask
@see     Object#wait(long)
@since   1.3"
      classrelation 174491 // queue (<unidirectional association>)
	relation 174491 --->
	  a role_name "queue" init_value "=  new TaskQueue()" private
	    comment "
The timer task queue.  This data structure is shared with the timer
thread.  The timer produces tasks, via its various schedule calls,
and the timer thread consumes, executing timer tasks as appropriate,
and removing them from the queue when they're obsolete.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 174491 // queue (<unidirectional association>)
	  b parent class_ref 156955 // TaskQueue
      end

      classrelation 174619 // thread (<unidirectional association>)
	relation 174619 --->
	  a role_name "thread" init_value "=  new TimerThread(queue)" private
	    comment "
The timer thread.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 174619 // thread (<unidirectional association>)
	  b parent class_ref 157083 // TimerThread
      end

      attribute 200731 "threadReaper"
	private explicit_type "Object"
	init_value "=  new Object() {
        protected void finalize() throws Throwable {
            synchronized(queue) {
                thread.newTasksMayBeScheduled = false;
                queue.notify(); // In case queue is empty.
            }
        }
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This object causes the timer's task execution thread to exit
gracefully when there are no live references to the Timer object and no
tasks in the timer queue.  It is used in preference to a finalizer on
Timer as such a finalizer would be susceptible to a subclass's
finalizer forgetting to call it.
"
      end

      attribute 200859 "nextSerialNumber"
	class_attribute private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This ID is used to generate thread names.  (It could be replaced
by an AtomicInteger as soon as they become available.)
"
      end

      operation 370971 "serialNumber"
	class_operation private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 371099 "Timer"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new timer.  The associated thread does <i>not</i> run as
a daemon.

@see Thread
@see #cancel()"
      end

      operation 371227 "Timer"
	public explicit_return_type ""
	nparams 1
	  param inout name "isDaemon" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new timer whose associated thread may be specified to 
run as a daemon.  A daemon thread is called for if the timer will
be used to schedule repeating \"maintenance activities\", which must
be performed as long as the application is running, but should not
prolong the lifetime of the application.

@param isDaemon true if the associated thread should run as a daemon.

@see Thread
@see #cancel()"
      end

      operation 371355 "Timer"
	public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new timer whose associated thread has the specified name.
The associated thread does <i>not</i> run as a daemon.

@param name the name of the associated thread
@throws NullPointerException if name is null
@see Thread#getName()
@see Thread#isDaemon()
@since 1.5"
      end

      operation 371483 "Timer"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "isDaemon" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new timer whose associated thread has the specified name,
and may be specified to run as a daemon.

@param name the name of the associated thread
@param isDaemon true if the associated thread should run as a daemon
@throws NullPointerException if name is null
@see Thread#getName()
@see Thread#isDaemon()
@since 1.5"
      end

      operation 371611 "schedule"
	public explicit_return_type "void"
	nparams 2
	  param inout name "task" type class_ref 157211 // TimerTask
	  param in name "delay" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Schedules the specified task for execution after the specified delay.

@param task  task to be scheduled.
@param delay delay in milliseconds before task is to be executed.
@throws IllegalArgumentException if <tt>delay</tt> is negative, or
        <tt>delay + System.currentTimeMillis()</tt> is negative.
@throws IllegalStateException if task was already scheduled or
        cancelled, or timer was cancelled."
      end

      operation 371739 "schedule"
	public explicit_return_type "void"
	nparams 2
	  param inout name "task" type class_ref 157211 // TimerTask
	  param inout name "time" type class_ref 139163 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Schedules the specified task for execution at the specified time.  If
the time is in the past, the task is scheduled for immediate execution.

@param task task to be scheduled.
@param time time at which task is to be executed.
@throws IllegalArgumentException if <tt>time.getTime()</tt> is negative.
@throws IllegalStateException if task was already scheduled or
        cancelled, timer was cancelled, or timer thread terminated."
      end

      operation 371867 "schedule"
	public explicit_return_type "void"
	nparams 3
	  param inout name "task" type class_ref 157211 // TimerTask
	  param in name "delay" explicit_type "long"
	  param in name "period" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Schedules the specified task for repeated <i>fixed-delay execution</i>,
beginning after the specified delay.  Subsequent executions take place
at approximately regular intervals separated by the specified period.

<p>In fixed-delay execution, each execution is scheduled relative to
the actual execution time of the previous execution.  If an execution
is delayed for any reason (such as garbage collection or other
background activity), subsequent executions will be delayed as well.
In the long run, the frequency of execution will generally be slightly
lower than the reciprocal of the specified period (assuming the system
clock underlying <tt>Object.wait(long)</tt> is accurate).

<p>Fixed-delay execution is appropriate for recurring activities
that require \"smoothness.\"  In other words, it is appropriate for
activities where it is more important to keep the frequency accurate
in the short run than in the long run.  This includes most animation
tasks, such as blinking a cursor at regular intervals.  It also includes
tasks wherein regular activity is performed in response to human
input, such as automatically repeating a character as long as a key
is held down.

@param task   task to be scheduled.
@param delay  delay in milliseconds before task is to be executed.
@param period time in milliseconds between successive task executions.
@throws IllegalArgumentException if <tt>delay</tt> is negative, or
        <tt>delay + System.currentTimeMillis()</tt> is negative.
@throws IllegalStateException if task was already scheduled or
        cancelled, timer was cancelled, or timer thread terminated."
      end

      operation 371995 "schedule"
	public explicit_return_type "void"
	nparams 3
	  param inout name "task" type class_ref 157211 // TimerTask
	  param inout name "firstTime" type class_ref 139163 // Date
	  param in name "period" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Schedules the specified task for repeated <i>fixed-delay execution</i>,
beginning at the specified time. Subsequent executions take place at
approximately regular intervals, separated by the specified period.

<p>In fixed-delay execution, each execution is scheduled relative to
the actual execution time of the previous execution.  If an execution
is delayed for any reason (such as garbage collection or other
background activity), subsequent executions will be delayed as well.
In the long run, the frequency of execution will generally be slightly
lower than the reciprocal of the specified period (assuming the system
clock underlying <tt>Object.wait(long)</tt> is accurate).

<p>Fixed-delay execution is appropriate for recurring activities
that require \"smoothness.\"  In other words, it is appropriate for
activities where it is more important to keep the frequency accurate
in the short run than in the long run.  This includes most animation
tasks, such as blinking a cursor at regular intervals.  It also includes
tasks wherein regular activity is performed in response to human
input, such as automatically repeating a character as long as a key
is held down.

@param task   task to be scheduled.
@param firstTime First time at which task is to be executed.
@param period time in milliseconds between successive task executions.
@throws IllegalArgumentException if <tt>time.getTime()</tt> is negative.
@throws IllegalStateException if task was already scheduled or
        cancelled, timer was cancelled, or timer thread terminated."
      end

      operation 372123 "scheduleAtFixedRate"
	public explicit_return_type "void"
	nparams 3
	  param inout name "task" type class_ref 157211 // TimerTask
	  param in name "delay" explicit_type "long"
	  param in name "period" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Schedules the specified task for repeated <i>fixed-rate execution</i>,
beginning after the specified delay.  Subsequent executions take place
at approximately regular intervals, separated by the specified period.

<p>In fixed-rate execution, each execution is scheduled relative to the
scheduled execution time of the initial execution.  If an execution is
delayed for any reason (such as garbage collection or other background
activity), two or more executions will occur in rapid succession to
\"catch up.\"  In the long run, the frequency of execution will be
exactly the reciprocal of the specified period (assuming the system
clock underlying <tt>Object.wait(long)</tt> is accurate).

<p>Fixed-rate execution is appropriate for recurring activities that
are sensitive to <i>absolute</i> time, such as ringing a chime every
hour on the hour, or running scheduled maintenance every day at a
particular time.  It is also appropriate for recurring activities
where the total time to perform a fixed number of executions is
important, such as a countdown timer that ticks once every second for
ten seconds.  Finally, fixed-rate execution is appropriate for
scheduling multiple repeating timer tasks that must remain synchronized
with respect to one another.

@param task   task to be scheduled.
@param delay  delay in milliseconds before task is to be executed.
@param period time in milliseconds between successive task executions.
@throws IllegalArgumentException if <tt>delay</tt> is negative, or
        <tt>delay + System.currentTimeMillis()</tt> is negative.
@throws IllegalStateException if task was already scheduled or
        cancelled, timer was cancelled, or timer thread terminated."
      end

      operation 372251 "scheduleAtFixedRate"
	public explicit_return_type "void"
	nparams 3
	  param inout name "task" type class_ref 157211 // TimerTask
	  param inout name "firstTime" type class_ref 139163 // Date
	  param in name "period" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Schedules the specified task for repeated <i>fixed-rate execution</i>,
beginning at the specified time. Subsequent executions take place at
approximately regular intervals, separated by the specified period.

<p>In fixed-rate execution, each execution is scheduled relative to the
scheduled execution time of the initial execution.  If an execution is
delayed for any reason (such as garbage collection or other background
activity), two or more executions will occur in rapid succession to
\"catch up.\"  In the long run, the frequency of execution will be
exactly the reciprocal of the specified period (assuming the system
clock underlying <tt>Object.wait(long)</tt> is accurate).

<p>Fixed-rate execution is appropriate for recurring activities that
are sensitive to <i>absolute</i> time, such as ringing a chime every
hour on the hour, or running scheduled maintenance every day at a
particular time.  It is also appropriate for recurring activities
where the total time to perform a fixed number of executions is
important, such as a countdown timer that ticks once every second for
ten seconds.  Finally, fixed-rate execution is appropriate for
scheduling multiple repeating timer tasks that must remain synchronized
with respect to one another.

@param task   task to be scheduled.
@param firstTime First time at which task is to be executed.
@param period time in milliseconds between successive task executions.
@throws IllegalArgumentException if <tt>time.getTime()</tt> is negative.
@throws IllegalStateException if task was already scheduled or
        cancelled, timer was cancelled, or timer thread terminated."
      end

      operation 372379 "sched"
	private explicit_return_type "void"
	nparams 3
	  param inout name "task" type class_ref 157211 // TimerTask
	  param in name "time" explicit_type "long"
	  param in name "period" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Schedule the specified timer task for execution at the specified
time with the specified period, in milliseconds.  If period is
positive, the task is scheduled for repeated execution; if period is
zero, the task is scheduled for one-time execution. Time is specified
in Date.getTime() format.  This method checks timer state, task state,
and initial execution time, but not period.

@throws IllegalArgumentException if <tt>time()</tt> is negative.
@throws IllegalStateException if task was already scheduled or
        cancelled, timer was cancelled, or timer thread terminated."
      end

      operation 372507 "cancel"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Terminates this timer, discarding any currently scheduled tasks.
Does not interfere with a currently executing task (if it exists).
Once a timer has been terminated, its execution thread terminates
gracefully, and no more tasks may be scheduled on it.

<p>Note that calling this method from within the run method of a
timer task that was invoked by this timer absolutely guarantees that
the ongoing task execution is the last task execution that will ever
be performed by this timer.

<p>This method may be called repeatedly; the second and subsequent 
calls have no effect."
      end

      operation 372635 "purge"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all cancelled tasks from this timer's task queue.  <i>Calling
this method has no effect on the behavior of the timer</i>, but
eliminates the references to the cancelled tasks from the queue.
If there are no external references to these tasks, they become
eligible for garbage collection.

<p>Most programs will have no need to call this method.
It is designed for use by the rare application that cancels a large
number of tasks.  Calling this method trades time for space: the
runtime of the method may be proportional to n + c log n, where n
is the number of tasks in the queue and c is the number of cancelled
tasks.

<p>Note that it is permissible to call this method from within a
a task scheduled on this timer.

@return the number of tasks removed from the queue.
@since 1.5"
      end
    end

    class 156955 "TaskQueue"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents a timer task queue: a priority queue of TimerTasks,
ordered on nextExecutionTime.  Each Timer object has one of these, which it
shares with its TimerThread.  Internally this class uses a heap, which
offers log(n) performance for the add, removeMin and rescheduleMin
operations, and constant time performance for the getMin operation."
      classrelation 175003 // queue (<unidirectional association>)
	relation 175003 --->
	  a role_name "queue" multiplicity "[]" init_value "=  new TimerTask[128]" private
	    comment "
Priority queue represented as a balanced binary heap: the two children
of queue[n] are queue[2*n] and queue[2*n+1].  The priority queue is
ordered on the nextExecutionTime field: The TimerTask with the lowest
nextExecutionTime is in queue[1] (assuming the queue is nonempty).  For
each node n in the heap, and each descendant of n, d,
n.nextExecutionTime <= d.nextExecutionTime. 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 175003 // queue (<unidirectional association>)
	  b parent class_ref 157211 // TimerTask
      end

      attribute 201115 "size"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of tasks in the priority queue.  (The tasks are stored in
queue[1] up to queue[size]).
"
      end

      operation 373147 "size"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of tasks currently on the queue."
      end

      operation 373275 "add"
	package explicit_return_type "void"
	nparams 1
	  param inout name "task" type class_ref 157211 // TimerTask
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new task to the priority queue."
      end

      operation 373403 "getMin"
	package return_type class_ref 157211 // TimerTask
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the \"head task\" of the priority queue.  (The head task is an
task with the lowest nextExecutionTime.)"
      end

      operation 373531 "get"
	package return_type class_ref 157211 // TimerTask
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the ith task in the priority queue, where i ranges from 1 (the
head task, which is returned by getMin) to the number of tasks on the
queue, inclusive."
      end

      operation 373659 "removeMin"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove the head task from the priority queue."
      end

      operation 373787 "quickRemove"
	package explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the ith element from queue without regard for maintaining
the heap invariant.  Recall that queue is one-based, so
1 <= i <= size."
      end

      operation 373915 "rescheduleMin"
	package explicit_return_type "void"
	nparams 1
	  param in name "newTime" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the nextExecutionTime associated with the head task to the 
specified value, and adjusts priority queue accordingly."
      end

      operation 374043 "isEmpty"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the priority queue contains no elements."
      end

      operation 374171 "clear"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all elements from the priority queue."
      end

      operation 374299 "fixUp"
	private explicit_return_type "void"
	nparams 1
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Establishes the heap invariant (described above) assuming the heap
satisfies the invariant except possibly for the leaf-node indexed by k
(which may have a nextExecutionTime less than its parent's).

This method functions by \"promoting\" queue[k] up the hierarchy
(by swapping it with its parent) repeatedly until queue[k]'s
nextExecutionTime is greater than or equal to that of its parent."
      end

      operation 374427 "fixDown"
	private explicit_return_type "void"
	nparams 1
	  param in name "k" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Establishes the heap invariant (described above) in the subtree
rooted at k, which is assumed to satisfy the heap invariant except
possibly for node k itself (which may have a nextExecutionTime greater
than its children's).

This method functions by \"demoting\" queue[k] down the hierarchy
(by swapping it with its smaller child) repeatedly until queue[k]'s
nextExecutionTime is less than or equal to those of its children."
      end

      operation 374555 "heapify"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Establishes the heap invariant (described above) in the entire tree,
assuming nothing about the order of the elements prior to the call."
      end
    end

    class 157083 "TimerThread"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This \"helper class\" implements the timer's task execution thread, which
waits for tasks on the timer queue, executions them when they fire,
reschedules repeating tasks, and removes cancelled tasks and spent
non-repeating tasks from the queue."
      attribute 200987 "newTasksMayBeScheduled"
	package explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This flag is set to false by the reaper to inform us that there
are no more live references to our Timer object.  Once this flag
is true and there are no more tasks in our queue, there is no
work left for us to do, so we terminate gracefully.  Note that
this field is protected by queue's monitor!
"
      end

      classrelation 174875 // queue (<unidirectional association>)
	relation 174875 --->
	  a role_name "queue" private
	    comment "
Our Timer's queue.  We store this reference in preference to
a reference to the Timer so the reference graph remains acyclic.
Otherwise, the Timer would never be garbage-collected and this
thread would never go away.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 174875 // queue (<unidirectional association>)
	  b parent class_ref 156955 // TaskQueue
      end

      operation 372763 "TimerThread"
	package explicit_return_type ""
	nparams 1
	  param inout name "queue" type class_ref 156955 // TaskQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 372891 "run"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 373019 "mainLoop"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The main timer loop.  (See class comment.)"
      end
    end

    class 157211 "TimerTask"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A task that can be scheduled for one-time or repeated execution by a Timer.

@author  Josh Bloch
@version 1.10, 02/19/04
@see	    Timer
@since   1.3"
      attribute 201243 "lock"
	const_attribute package explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This object is used to control access to the TimerTask internals.
"
      end

      attribute 201371 "state"
	package explicit_type "int"
	init_value "=  VIRGIN"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The state of this task, chosen from the constants below.
"
      end

      attribute 201499 "VIRGIN"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This task has not yet been scheduled.
"
      end

      attribute 201627 "SCHEDULED"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This task is scheduled for execution.  If it is a non-repeating task,
it has not yet been executed.
"
      end

      attribute 201755 "EXECUTED"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This non-repeating task has already executed (or is currently
executing) and has not been cancelled.
"
      end

      attribute 201883 "CANCELLED"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This task has been cancelled (with a call to TimerTask.cancel).
"
      end

      attribute 202011 "nextExecutionTime"
	package explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Next execution time for this task in the format returned by
System.currentTimeMillis, assuming this task is scheduled for execution.
For repeating tasks, this field is updated prior to each task execution.
"
      end

      attribute 202139 "period"
	package explicit_type "long"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Period in milliseconds for repeating tasks.  A positive value indicates
fixed-rate execution.  A negative value indicates fixed-delay execution.
A value of 0 indicates a non-repeating task.
"
      end

      operation 374683 "TimerTask"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new timer task."
      end

      operation 374811 "run"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The action to be performed by this timer task."
      end

      operation 374939 "cancel"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels this timer task.  If the task has been scheduled for one-time
execution and has not yet run, or has not yet been scheduled, it will
never run.  If the task has been scheduled for repeated execution, it
will never run again.  (If the task is running when this call occurs,
the task will run to completion, but will never run again.)

<p>Note that calling this method from within the <tt>run</tt> method of
a repeating timer task absolutely guarantees that the timer task will
not run again.

<p>This method may be called repeatedly; the second and subsequent 
calls have no effect.

@return true if this task is scheduled for one-time execution and has
        not yet run, or this task is scheduled for repeated execution.
        Returns false if the task was scheduled for one-time execution
        and has already run, or if the task was never scheduled, or if
        the task was already cancelled.  (Loosely speaking, this method
        returns <tt>true</tt> if it prevents one or more scheduled
        executions from taking place.)"
      end

      operation 375067 "scheduledExecutionTime"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <i>scheduled</i> execution time of the most recent
<i>actual</i> execution of this task.  (If this method is invoked
while task execution is in progress, the return value is the scheduled
execution time of the ongoing task execution.)

<p>This method is typically invoked from within a task's run method, to
determine whether the current execution of the task is sufficiently
timely to warrant performing the scheduled activity:
<pre>
  public void run() {
      if (System.currentTimeMillis() - scheduledExecutionTime() >=
          MAX_TARDINESS)
              return;  // Too late; skip this execution.
      // Perform the task
  }
</pre>
This method is typically <i>not</i> used in conjunction with
<i>fixed-delay execution</i> repeating tasks, as their scheduled
execution times are allowed to drift over time, and so are not terribly
significant.

@return the time at which the most recent execution of this task was
        scheduled to occur, in the format returned by Date.getTime().
        The return value is undefined if the task has yet to commence
        its first execution.
@see Date#getTime()"
      end
    end

    class 157595 "TooManyListenersException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>
The <code> TooManyListenersException </code> Exception is used as part of
the Java Event model to annotate and implement a unicast special case of
a multicast Event Source.
</p>
<p>
The presence of a \"throws TooManyListenersException\" clause on any given
concrete implementation of the normally multicast \"void addXyzEventListener\"
event listener registration pattern is used to annotate that interface as
implementing a unicast Listener special case, that is, that one and only
one Listener may be registered on the particular event listener source
concurrently.
</p>

@see java.util.EventObject
@see java.util.EventListener

@version 1.13 03/12/19
@author Laurence P. G. Cable
@since  JDK1.1"
      operation 375195 "TooManyListenersException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a TooManyListenersException with no detail message.
A detail message is a String that describes this particular exception."
      end

      operation 375323 "TooManyListenersException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a TooManyListenersException with the specified detail message.
A detail message is a String that describes this particular exception.
@param s the detail message"
      end
    end

    class 157851 "TreeMap"
      visibility public 
      nformals 8
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 16
      actual class class_ref 136475 // AbstractMap
        rank 0 explicit_value "K"
      actual class class_ref 136475 // AbstractMap
        rank 1 explicit_value "V"
      actual class class_ref 136475 // AbstractMap
        rank 2 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 3 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 4 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 5 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 6 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 7 explicit_value ""
      actual class class_ref 140827 // SortedMap
        rank 0 explicit_value "K"
      actual class class_ref 140827 // SortedMap
        rank 1 explicit_value "V"
      actual class class_ref 140827 // SortedMap
        rank 2 explicit_value ""
      actual class class_ref 140827 // SortedMap
        rank 3 explicit_value ""
      actual class class_ref 140827 // SortedMap
        rank 4 explicit_value ""
      actual class class_ref 140827 // SortedMap
        rank 5 explicit_value ""
      actual class class_ref 140827 // SortedMap
        rank 6 explicit_value ""
      actual class class_ref 140827 // SortedMap
        rank 7 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Red-Black tree based implementation of the <tt>SortedMap</tt> interface.
This class guarantees that the map will be in ascending key order, sorted
according to the <i>natural order</i> for the key's class (see
<tt>Comparable</tt>), or by the comparator provided at creation time,
depending on which constructor is used.<p>

This implementation provides guaranteed log(n) time cost for the
<tt>containsKey</tt>, <tt>get</tt>, <tt>put</tt> and <tt>remove</tt>
operations.  Algorithms are adaptations of those in Cormen, Leiserson, and
Rivest's <I>Introduction to Algorithms</I>.<p>

Note that the ordering maintained by a sorted map (whether or not an
explicit comparator is provided) must be <i>consistent with equals</i> if
this sorted map is to correctly implement the <tt>Map</tt> interface.  (See
<tt>Comparable</tt> or <tt>Comparator</tt> for a precise definition of
<i>consistent with equals</i>.)  This is so because the <tt>Map</tt>
interface is defined in terms of the equals operation, but a map performs
all key comparisons using its <tt>compareTo</tt> (or <tt>compare</tt>)
method, so two keys that are deemed equal by this method are, from the
standpoint of the sorted map, equal.  The behavior of a sorted map
<i>is</i> well-defined even if its ordering is inconsistent with equals; it
just fails to obey the general contract of the <tt>Map</tt> interface.<p>

<b>Note that this implementation is not synchronized.</b> If multiple
threads access a map concurrently, and at least one of the threads modifies
the map structurally, it <i>must</i> be synchronized externally.  (A
structural modification is any operation that adds or deletes one or more
mappings; merely changing the value associated with an existing key is not
a structural modification.)  This is typically accomplished by
synchronizing on some object that naturally encapsulates the map.  If no
such object exists, the map should be \"wrapped\" using the
<tt>Collections.synchronizedMap</tt> method.  This is best done at creation
time, to prevent accidental unsynchronized access to the map:
<pre>
    Map m = Collections.synchronizedMap(new TreeMap(...));
</pre><p>

The iterators returned by all of this class's \"collection view methods\" are
<i>fail-fast</i>: if the map is structurally modified at any time after the
iterator is created, in any way except through the iterator's own
<tt>remove</tt> or <tt>add</tt> methods, the iterator throws a
<tt>ConcurrentModificationException</tt>.  Thus, in the face of concurrent
modification, the iterator fails quickly and cleanly, rather than risking
arbitrary, non-deterministic behavior at an undetermined time in the
future.

<p>Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw <tt>ConcurrentModificationException</tt> on a best-effort basis.
Therefore, it would be wrong to write a program that depended on this
exception for its correctness:   <i>the fail-fast behavior of iterators
should be used only to detect bugs.</i><p>

This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch and Doug Lea
@version 1.65, 02/19/04
@see Map
@see HashMap
@see Hashtable
@see Comparable
@see Comparator
@see Collection
@see Collections#synchronizedMap(Map)
@since 1.2"
      classrelation 175387 // <realization>
	relation 175387 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 175387 // <realization>
	  b parent class_ref 136475 // AbstractMap
      end

      classrelation 175515 // <realization>
	relation 175515 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 175515 // <realization>
	  b parent class_ref 140827 // SortedMap
      end

      classrelation 175771 // <realization>
	relation 175771 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 175771 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 175899 // comparator (<unidirectional association>)
	relation 175899 --->
	  a role_name "comparator" init_value "=  null" private
	    comment "
The Comparator used to maintain order in this TreeMap, or
null if this TreeMap uses its elements natural ordering.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K> ${name}${value};
"
	    classrelation_ref 175899 // comparator (<unidirectional association>)
	  b parent class_ref 138139 // Comparator
      end

      classrelation 176027 // root (<unidirectional association>)
	relation 176027 --->
	  a role_name "root" init_value "=  null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	    classrelation_ref 176027 // root (<unidirectional association>)
	  b parent class_ref 136859 // Entry
      end

      attribute 202267 "size"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of entries in the tree
"
      end

      attribute 202395 "modCount"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of structural modifications to the tree.
"
      end

      operation 375451 "incrementSize"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 375579 "decrementSize"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 375707 "TreeMap"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty map, sorted according to the keys' natural
order.  All keys inserted into the map must implement the
<tt>Comparable</tt> interface.  Furthermore, all such keys must be
<i>mutually comparable</i>: <tt>k1.compareTo(k2)</tt> must not throw a
ClassCastException for any elements <tt>k1</tt> and <tt>k2</tt> in the
map.  If the user attempts to put a key into the map that violates this
constraint (for example, the user attempts to put a string key into a
map whose keys are integers), the <tt>put(Object key, Object
value)</tt> call will throw a <tt>ClassCastException</tt>.

@see Comparable"
      end

      operation 375835 "TreeMap"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 138139 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty map, sorted according to the given comparator.
All keys inserted into the map must be <i>mutually comparable</i> by
the given comparator: <tt>comparator.compare(k1, k2)</tt> must not
throw a <tt>ClassCastException</tt> for any keys <tt>k1</tt> and
<tt>k2</tt> in the map.  If the user attempts to put a key into the
map that violates this constraint, the <tt>put(Object key, Object
value)</tt> call will throw a <tt>ClassCastException</tt>.

@param c the comparator that will be used to sort this map.  A
       <tt>null</tt> value indicates that the keys' <i>natural
       ordering</i> should be used."
      end

      operation 375963 "TreeMap"
	public explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new map containing the same mappings as the given map,
sorted according to the keys' <i>natural order</i>.  All keys inserted
into the new map must implement the <tt>Comparable</tt> interface.
Furthermore, all such keys must be <i>mutually comparable</i>:
<tt>k1.compareTo(k2)</tt> must not throw a <tt>ClassCastException</tt>
for any elements <tt>k1</tt> and <tt>k2</tt> in the map.  This method
runs in n*log(n) time.

@param  m the map whose mappings are to be placed in this map.
@throws ClassCastException the keys in t are not Comparable, or
        are not mutually comparable.
@throws NullPointerException if the specified map is null."
      end

      operation 376091 "TreeMap"
	public explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 140827 // SortedMap
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new map containing the same mappings as the given
<tt>SortedMap</tt>, sorted according to the same ordering.  This method
runs in linear time.

@param  m the sorted map whose mappings are to be placed in this map,
        and whose comparator is to be used to sort this map.
@throws NullPointerException if the specified sorted map is null."
      end

      operation 376219 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query Operations

Returns the number of key-value mappings in this map.

@return the number of key-value mappings in this map."
      end

      operation 376347 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains a mapping for the specified
key.

@param key key whose presence in this map is to be tested.

@return <tt>true</tt> if this map contains a mapping for the
           specified key.
@throws ClassCastException if the key cannot be compared with the keys
                 currently in the map.
@throws NullPointerException key is <tt>null</tt> and this map uses
                 natural ordering, or its comparator does not tolerate
           <tt>null</tt> keys."
      end

      operation 376475 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map maps one or more keys to the
specified value.  More formally, returns <tt>true</tt> if and only if
this map contains at least one mapping to a value <tt>v</tt> such
that <tt>(value==null ? v==null : value.equals(v))</tt>.  This
operation will probably require time linear in the Map size for most
implementations of Map.

@param value value whose presence in this Map is to be tested.
@return  <tt>true</tt> if a mapping to <tt>value</tt> exists;
		<tt>false</tt> otherwise.
@since 1.2"
      end

      operation 376603 "valueSearchNull"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "n" type class_ref 136859 // Entry
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 376731 "valueSearchNonNull"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "n" type class_ref 136859 // Entry
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 376859 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which this map maps the specified key.  Returns
<tt>null</tt> if the map contains no mapping for this key.  A return
value of <tt>null</tt> does not <i>necessarily</i> indicate that the
map contains no mapping for the key; it's also possible that the map
explicitly maps the key to <tt>null</tt>.  The <tt>containsKey</tt>
operation may be used to distinguish these two cases.

@param key key whose associated value is to be returned.
@return the value to which this map maps the specified key, or
              <tt>null</tt> if the map contains no mapping for the key.
@throws    ClassCastException key cannot be compared with the keys
                 currently in the map.
@throws NullPointerException key is <tt>null</tt> and this map uses
                 natural ordering, or its comparator does not tolerate
                 <tt>null</tt> keys.

@see #containsKey(Object)"
      end

      operation 376987 "comparator"
	public return_type class_ref 138139 // Comparator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the comparator used to order this map, or <tt>null</tt> if this
map uses its keys' natural order.

@return the comparator associated with this sorted map, or
               <tt>null</tt> if it uses its keys' natural sort method."
      end

      operation 377115 "firstKey"
	public explicit_return_type "K"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first (lowest) key currently in this sorted map.

@return the first (lowest) key currently in this sorted map.
@throws    NoSuchElementException Map is empty."
      end

      operation 377243 "lastKey"
	public explicit_return_type "K"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the last (highest) key currently in this sorted map.

@return the last (highest) key currently in this sorted map.
@throws    NoSuchElementException Map is empty."
      end

      operation 377371 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "map" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies all of the mappings from the specified map to this map.  These
mappings replace any mappings that this map had for any of the keys
currently in the specified map.

@param     map mappings to be stored in this map.
@throws    ClassCastException class of a key or value in the specified
                  map prevents it from being stored in this map.

@throws NullPointerException if the given map is <tt>null</tt> or
        this map does not permit <tt>null</tt> keys and a
        key in the specified map is <tt>null</tt>."
      end

      operation 377499 "getEntry"
	private return_type class_ref 136859 // Entry
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this map's entry for the given key, or <tt>null</tt> if the map
does not contain an entry for the key.

@return this map's entry for the given key, or <tt>null</tt> if the map
               does not contain an entry for the key.
@throws ClassCastException if the key cannot be compared with the keys
                 currently in the map.
@throws NullPointerException key is <tt>null</tt> and this map uses
                 natural order, or its comparator does not tolerate *
                 <tt>null</tt> keys."
      end

      operation 377627 "getCeilEntry"
	private return_type class_ref 136859 // Entry
	nparams 1
	  param inout name "key" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the entry corresponding to the specified key; if no such entry
exists, returns the entry for the least key greater than the specified
key; if no such entry exists (i.e., the greatest key in the Tree is less
than the specified key), returns <tt>null</tt>."
      end

      operation 377755 "getPrecedingEntry"
	private return_type class_ref 136859 // Entry
	nparams 1
	  param inout name "key" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the entry for the greatest key less than the specified key; if
no such entry exists (i.e., the least key in the Tree is greater than
the specified key), returns <tt>null</tt>."
      end

      operation 377883 "key"
	class_operation private explicit_return_type "K"
	nparams 1
	  param inout name "e" type class_ref 136859 // Entry
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K> ${type} ${name}${(}${t0}<K,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the key corresponding to the specified Entry.  Throw
NoSuchElementException if the Entry is <tt>null</tt>."
      end

      operation 378011 "put"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates the specified value with the specified key in this map.
If the map previously contained a mapping for this key, the old
value is replaced.

@param key key with which the specified value is to be associated.
@param value value to be associated with the specified key.

@return previous value associated with specified key, or <tt>null</tt>
        if there was no mapping for key.  A <tt>null</tt> return can
        also indicate that the map previously associated <tt>null</tt>
        with the specified key.
@throws    ClassCastException key cannot be compared with the keys
           currently in the map.
@throws NullPointerException key is <tt>null</tt> and this map uses
        natural order, or its comparator does not tolerate
        <tt>null</tt> keys."
      end

      operation 378139 "remove"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the mapping for this key from this TreeMap if present.

@param  key key for which mapping should be removed
@return previous value associated with specified key, or <tt>null</tt>
        if there was no mapping for key.  A <tt>null</tt> return can
        also indicate that the map previously associated
        <tt>null</tt> with the specified key.

@throws    ClassCastException key cannot be compared with the keys
           currently in the map.
@throws NullPointerException key is <tt>null</tt> and this map uses
        natural order, or its comparator does not tolerate
        <tt>null</tt> keys."
      end

      operation 378267 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all mappings from this TreeMap."
      end

      operation 378395 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow copy of this <tt>TreeMap</tt> instance. (The keys and
values themselves are not cloned.)

@return a shallow copy of this Map."
      end

      classrelation 176155 // entrySet (<unidirectional association>)
	relation 176155 --->
	  a role_name "entrySet" init_value "=  null" volatile private
	    comment " Views

This field is initialized to contain an instance of the entry set
view the first time this view is requested.  The view is stateless,
so there's no reason to create more than one.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	    classrelation_ref 176155 // entrySet (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      operation 378523 "keySet"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Set view of the keys contained in this map.  The set's
iterator will return the keys in ascending order.  The map is backed by
this <tt>TreeMap</tt> instance, so changes to this map are reflected in
the Set, and vice-versa.  The Set supports element removal, which
removes the corresponding mapping from the map, via the
<tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>,
<tt>retainAll</tt>, and <tt>clear</tt> operations.  It does not support
the <tt>add</tt> or <tt>addAll</tt> operations.

@return a set view of the keys contained in this TreeMap."
      end

      operation 378651 "values"
	public return_type class_ref 135067 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a collection view of the values contained in this map.  The
collection's iterator will return the values in the order that their
corresponding keys appear in the tree.  The collection is backed by
this <tt>TreeMap</tt> instance, so changes to this map are reflected in
the collection, and vice-versa.  The collection supports element
removal, which removes the corresponding mapping from the map through
the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>,
<tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations.
It does not support the <tt>add</tt> or <tt>addAll</tt> operations.

@return a collection view of the values contained in this map."
      end

      operation 378779 "entrySet"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a set view of the mappings contained in this map.  The set's
iterator returns the mappings in ascending key order.  Each element in
the returned set is a <tt>Map.Entry</tt>.  The set is backed by this
map, so changes to this map are reflected in the set, and vice-versa.
The set supports element removal, which removes the corresponding
mapping from the TreeMap, through the <tt>Iterator.remove</tt>,
<tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and
<tt>clear</tt> operations.  It does not support the <tt>add</tt> or
<tt>addAll</tt> operations.

@return a set view of the mappings contained in this map.
@see Map.Entry"
      end

      operation 378907 "subMap"
	public return_type class_ref 140827 // SortedMap
	nparams 2
	  param inout name "fromKey" explicit_type "K"
	  param inout name "toKey" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this map whose keys range from
<tt>fromKey</tt>, inclusive, to <tt>toKey</tt>, exclusive.  (If
<tt>fromKey</tt> and <tt>toKey</tt> are equal, the returned sorted map
is empty.)  The returned sorted map is backed by this map, so changes
in the returned sorted map are reflected in this map, and vice-versa.
The returned sorted map supports all optional map operations.<p>

The sorted map returned by this method will throw an
<tt>IllegalArgumentException</tt> if the user attempts to insert a key
less than <tt>fromKey</tt> or greater than or equal to
<tt>toKey</tt>.<p>

Note: this method always returns a <i>half-open range</i> (which
includes its low endpoint but not its high endpoint).  If you need a
<i>closed range</i> (which includes both endpoints), and the key type
allows for calculation of the successor a given key, merely request the
subrange from <tt>lowEndpoint</tt> to <tt>successor(highEndpoint)</tt>.
For example, suppose that <tt>m</tt> is a sorted map whose keys are
strings.  The following idiom obtains a view containing all of the
key-value mappings in <tt>m</tt> whose keys are between <tt>low</tt>
and <tt>high</tt>, inclusive:
            <pre>    SortedMap sub = m.submap(low, high+\"\\0\");</pre>
A similar technique can be used to generate an <i>open range</i> (which
contains neither endpoint).  The following idiom obtains a view
containing all of the key-value mappings in <tt>m</tt> whose keys are
between <tt>low</tt> and <tt>high</tt>, exclusive:
            <pre>    SortedMap sub = m.subMap(low+\"\\0\", high);</pre>

@param fromKey low endpoint (inclusive) of the subMap.
@param toKey high endpoint (exclusive) of the subMap.

@return a view of the portion of this map whose keys range from
               <tt>fromKey</tt>, inclusive, to <tt>toKey</tt>, exclusive.

@throws ClassCastException if <tt>fromKey</tt> and <tt>toKey</tt>
        cannot be compared to one another using this map's comparator
        (or, if the map has no comparator, using natural ordering).
@throws IllegalArgumentException if <tt>fromKey</tt> is greater than
        <tt>toKey</tt>.
@throws NullPointerException if <tt>fromKey</tt> or <tt>toKey</tt> is
              <tt>null</tt> and this map uses natural order, or its
              comparator does not tolerate <tt>null</tt> keys."
      end

      operation 379035 "headMap"
	public return_type class_ref 140827 // SortedMap
	nparams 1
	  param inout name "toKey" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this map whose keys are strictly less
than <tt>toKey</tt>.  The returned sorted map is backed by this map, so
changes in the returned sorted map are reflected in this map, and
vice-versa.  The returned sorted map supports all optional map
operations.<p>

The sorted map returned by this method will throw an
<tt>IllegalArgumentException</tt> if the user attempts to insert a key
greater than or equal to <tt>toKey</tt>.<p>

Note: this method always returns a view that does not contain its
(high) endpoint.  If you need a view that does contain this endpoint,
and the key type allows for calculation of the successor a given key,
merely request a headMap bounded by <tt>successor(highEndpoint)</tt>.
For example, suppose that suppose that <tt>m</tt> is a sorted map whose
keys are strings.  The following idiom obtains a view containing all of
the key-value mappings in <tt>m</tt> whose keys are less than or equal
to <tt>high</tt>:
<pre>
    SortedMap head = m.headMap(high+\"\\0\");
</pre>

@param toKey high endpoint (exclusive) of the headMap.
@return a view of the portion of this map whose keys are strictly
               less than <tt>toKey</tt>.

@throws ClassCastException if <tt>toKey</tt> is not compatible
        with this map's comparator (or, if the map has no comparator,
        if <tt>toKey</tt> does not implement <tt>Comparable</tt>).
@throws IllegalArgumentException if this map is itself a subMap,
        headMap, or tailMap, and <tt>toKey</tt> is not within the
        specified range of the subMap, headMap, or tailMap.
@throws NullPointerException if <tt>toKey</tt> is <tt>null</tt> and
              this map uses natural order, or its comparator does not
              tolerate <tt>null</tt> keys."
      end

      operation 379163 "tailMap"
	public return_type class_ref 140827 // SortedMap
	nparams 1
	  param inout name "fromKey" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this map whose keys are greater than
or equal to <tt>fromKey</tt>.  The returned sorted map is backed by
this map, so changes in the returned sorted map are reflected in this
map, and vice-versa.  The returned sorted map supports all optional map
operations.<p>

The sorted map returned by this method will throw an
<tt>IllegalArgumentException</tt> if the user attempts to insert a key
less than <tt>fromKey</tt>.<p>

Note: this method always returns a view that contains its (low)
endpoint.  If you need a view that does not contain this endpoint, and
the element type allows for calculation of the successor a given value,
merely request a tailMap bounded by <tt>successor(lowEndpoint)</tt>.
For example, suppose that <tt>m</tt> is a sorted map whose keys
are strings.  The following idiom obtains a view containing
all of the key-value mappings in <tt>m</tt> whose keys are strictly
greater than <tt>low</tt>: <pre>
    SortedMap tail = m.tailMap(low+\"\\0\");
</pre>

@param fromKey low endpoint (inclusive) of the tailMap.
@return a view of the portion of this map whose keys are greater
               than or equal to <tt>fromKey</tt>.
@throws ClassCastException if <tt>fromKey</tt> is not compatible
        with this map's comparator (or, if the map has no comparator,
        if <tt>fromKey</tt> does not implement <tt>Comparable</tt>).
@throws IllegalArgumentException if this map is itself a subMap,
        headMap, or tailMap, and <tt>fromKey</tt> is not within the
        specified range of the subMap, headMap, or tailMap.
@throws NullPointerException if <tt>fromKey</tt> is <tt>null</tt> and
              this map uses natural order, or its comparator does not
              tolerate <tt>null</tt> keys."
      end

      class 157979 "SubMap"
	visibility private 
	nactuals 16
	actual class class_ref 136475 // AbstractMap
	  rank 0 explicit_value "K"
	actual class class_ref 136475 // AbstractMap
	  rank 1 explicit_value "V"
	actual class class_ref 136475 // AbstractMap
	  rank 2 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 3 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 4 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 5 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 6 explicit_value ""
	actual class class_ref 136475 // AbstractMap
	  rank 7 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 0 explicit_value "K"
	actual class class_ref 140827 // SortedMap
	  rank 1 explicit_value "V"
	actual class class_ref 140827 // SortedMap
	  rank 2 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 3 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 4 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 5 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 6 explicit_value ""
	actual class class_ref 140827 // SortedMap
	  rank 7 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 176283 // <realization>
	  relation 176283 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 176283 // <realization>
	    b parent class_ref 136475 // AbstractMap
	end

	classrelation 176411 // <realization>
	  relation 176411 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 176411 // <realization>
	    b parent class_ref 140827 // SortedMap
	end

	classrelation 176539 // <realization>
	  relation 176539 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 176539 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 202523 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  -6520786458950516097L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 202651 "fromStart"
	  private explicit_type "boolean"
	  init_value "=  false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "fromKey is significant only if fromStart is false.  Similarly,
toKey is significant only if toStart is false.
"
	end

	attribute 202779 "toEnd"
	  private explicit_type "boolean"
	  init_value "=  false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "fromKey is significant only if fromStart is false.  Similarly,
toKey is significant only if toStart is false.
"
	end

	attribute 202907 "fromKey"
	  private explicit_type "K"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 203035 "toKey"
	  private explicit_type "K"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 379291 "SubMap"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "fromKey" explicit_type "K"
	    param inout name "toKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 379419 "SubMap"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "headMap" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 379547 "SubMap"
	  package explicit_return_type ""
	  nparams 4
	    param inout name "fromStart" explicit_type "boolean"
	    param inout name "fromKey" explicit_type "K"
	    param inout name "toEnd" explicit_type "boolean"
	    param inout name "toKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 379675 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 379803 "containsKey"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 379931 "get"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "key" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 380059 "put"
	  public explicit_return_type "V"
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 380187 "comparator"
	  public return_type class_ref 138139 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 380315 "firstKey"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 380443 "lastKey"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 176667 // entrySet (<unidirectional association>)
	  relation 176667 --->
	    a role_name "entrySet" init_value "=  new EntrySetView()" private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	      classrelation_ref 176667 // entrySet (<unidirectional association>)
	    b parent class_ref 136731 // Set
	end

	operation 380571 "entrySet"
	  public return_type class_ref 136731 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	class 158107 "EntrySetView"
	  visibility private 
	  nactuals 4
	  actual class class_ref 137499 // AbstractSet
	    rank 0 explicit_value "Map.Entry<K,V>"
	  actual class class_ref 137499 // AbstractSet
	    rank 1 explicit_value ""
	  actual class class_ref 137499 // AbstractSet
	    rank 2 explicit_value ""
	  actual class class_ref 137499 // AbstractSet
	    rank 3 explicit_value ""
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 176795 // <realization>
	    relation 176795 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 176795 // <realization>
	      b parent class_ref 137499 // AbstractSet
	  end

	  attribute 203163 "size"
	    private explicit_type "int"
	    init_value "=  -1"
	    cpp_decl ""
	    transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  attribute 203291 "sizeModCount"
	    private explicit_type "int"
	    cpp_decl ""
	    transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  operation 380699 "size"
	    public explicit_return_type "int"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 380827 "isEmpty"
	    public explicit_return_type "boolean"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 380955 "contains"
	    public explicit_return_type "boolean"
	    nparams 1
	      param inout name "o" explicit_type "Object"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 381083 "remove"
	    public explicit_return_type "boolean"
	    nparams 1
	      param inout name "o" explicit_type "Object"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 381211 "iterator"
	    public return_type class_ref 135323 // Iterator
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	operation 381339 "subMap"
	  public return_type class_ref 140827 // SortedMap
	  nparams 2
	    param inout name "fromKey" explicit_type "K"
	    param inout name "toKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 381467 "headMap"
	  public return_type class_ref 140827 // SortedMap
	  nparams 1
	    param inout name "toKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 381595 "tailMap"
	  public return_type class_ref 140827 // SortedMap
	  nparams 1
	    param inout name "fromKey" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 381723 "inRange"
	  private explicit_return_type "boolean"
	  nparams 1
	    param inout name "key" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 381851 "inRange2"
	  private explicit_return_type "boolean"
	  nparams 1
	    param inout name "key" explicit_type "K"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " This form allows the high endpoint (as well as all legit keys)"
	end
      end

      class 158235 "PrivateEntryIterator"
	abstract visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 135323 // Iterator
	  rank 0 explicit_value "T"
	actual class class_ref 135323 // Iterator
	  rank 1 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 2 explicit_value ""
	actual class class_ref 135323 // Iterator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 176923 // <realization>
	  relation 176923 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 176923 // <realization>
	    b parent class_ref 135323 // Iterator
	end

	attribute 203419 "expectedModCount"
	  private explicit_type "int"
	  init_value "=  TreeMap.this.modCount"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 177051 // lastReturned (<unidirectional association>)
	  relation 177051 --->
	    a role_name "lastReturned" init_value "=  null" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 177051 // lastReturned (<unidirectional association>)
	    b parent class_ref 136859 // Entry
	end

	classrelation 177179 // next (<unidirectional association>)
	  relation 177179 --->
	    a role_name "next" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 177179 // next (<unidirectional association>)
	    b parent class_ref 136859 // Entry
	end

	operation 381979 "PrivateEntryIterator"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 382107 "PrivateEntryIterator"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "first" type class_ref 136859 // Entry
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Used by SubMapEntryIterator"
	end

	operation 382235 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 382363 "nextEntry"
	  package return_type class_ref 136859 // Entry
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 382491 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 158363 "EntryIterator"
	visibility private 
	nactuals 9
	actual class class_ref 157851 // TreeMap
	  rank 0 explicit_value "Map.Entry<K,V>"
	actual class class_ref 157851 // TreeMap
	  rank 1 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 2 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 3 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 4 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 5 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 6 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 7 explicit_value ""
	actual class class_ref 158235 // PrivateEntryIterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 177307 // <realization>
	  relation 177307 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 177307 // <realization>
	    b parent class_ref 158235 // PrivateEntryIterator
	end

	operation 382619 "next"
	  public return_type class_ref 136859 // Entry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 158491 "KeyIterator"
	visibility private 
	nactuals 9
	actual class class_ref 157851 // TreeMap
	  rank 0 explicit_value "K"
	actual class class_ref 157851 // TreeMap
	  rank 1 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 2 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 3 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 4 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 5 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 6 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 7 explicit_value ""
	actual class class_ref 158235 // PrivateEntryIterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 177435 // <realization>
	  relation 177435 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 177435 // <realization>
	    b parent class_ref 158235 // PrivateEntryIterator
	end

	operation 382747 "next"
	  public explicit_return_type "K"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 158619 "ValueIterator"
	visibility private 
	nactuals 9
	actual class class_ref 157851 // TreeMap
	  rank 0 explicit_value "V"
	actual class class_ref 157851 // TreeMap
	  rank 1 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 2 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 3 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 4 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 5 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 6 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 7 explicit_value ""
	actual class class_ref 158235 // PrivateEntryIterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 177563 // <realization>
	  relation 177563 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 177563 // <realization>
	    b parent class_ref 158235 // PrivateEntryIterator
	end

	operation 382875 "next"
	  public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 158747 "SubMapEntryIterator"
	visibility private 
	nactuals 9
	actual class class_ref 157851 // TreeMap
	  rank 0 explicit_value "Map.Entry<K,V>"
	actual class class_ref 157851 // TreeMap
	  rank 1 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 2 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 3 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 4 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 5 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 6 explicit_value ""
	actual class class_ref 157851 // TreeMap
	  rank 7 explicit_value ""
	actual class class_ref 158235 // PrivateEntryIterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 177691 // <realization>
	  relation 177691 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 177691 // <realization>
	    b parent class_ref 158235 // PrivateEntryIterator
	end

	attribute 203547 "firstExcludedKey"
	  const_attribute private explicit_type "K"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 383003 "SubMapEntryIterator"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "first" type class_ref 136859 // Entry
	    param inout name "firstExcluded" type class_ref 136859 // Entry
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 383131 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 383259 "next"
	  public return_type class_ref 136859 // Entry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 383387 "compare"
	private explicit_return_type "int"
	nparams 2
	  param inout name "k1" explicit_type "K"
	  param inout name "k2" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two keys using the correct comparison method for this TreeMap."
      end

      operation 383515 "valEquals"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "o1" explicit_type "Object"
	  param inout name "o2" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test two values  for equality.  Differs from o1.equals(o2) only in
that it copes with <tt>null</tt> o1 properly."
      end

      attribute 203675 "RED"
	class_attribute const_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 203803 "BLACK"
	class_attribute const_attribute private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 158875 "TreeSet"
      visibility public 
      nformals 4
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 8
      actual class class_ref 137499 // AbstractSet
        rank 0 explicit_value "E"
      actual class class_ref 137499 // AbstractSet
        rank 1 explicit_value ""
      actual class class_ref 137499 // AbstractSet
        rank 2 explicit_value ""
      actual class class_ref 137499 // AbstractSet
        rank 3 explicit_value ""
      actual class class_ref 139931 // SortedSet
        rank 0 explicit_value "E"
      actual class class_ref 139931 // SortedSet
        rank 1 explicit_value ""
      actual class class_ref 139931 // SortedSet
        rank 2 explicit_value ""
      actual class class_ref 139931 // SortedSet
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class implements the <tt>Set</tt> interface, backed by a
<tt>TreeMap</tt> instance.  This class guarantees that the sorted set will
be in ascending element order, sorted according to the <i>natural order</i>
of the elements (see <tt>Comparable</tt>), or by the comparator provided at
set creation time, depending on which constructor is used.<p>

This implementation provides guaranteed log(n) time cost for the basic
operations (<tt>add</tt>, <tt>remove</tt> and <tt>contains</tt>).<p>

Note that the ordering maintained by a set (whether or not an explicit
comparator is provided) must be <i>consistent with equals</i> if it is to
correctly implement the <tt>Set</tt> interface.  (See <tt>Comparable</tt>
or <tt>Comparator</tt> for a precise definition of <i>consistent with
equals</i>.)  This is so because the <tt>Set</tt> interface is defined in
terms of the <tt>equals</tt> operation, but a <tt>TreeSet</tt> instance
performs all key comparisons using its <tt>compareTo</tt> (or
<tt>compare</tt>) method, so two keys that are deemed equal by this method
are, from the standpoint of the set, equal.  The behavior of a set
<i>is</i> well-defined even if its ordering is inconsistent with equals; it
just fails to obey the general contract of the <tt>Set</tt> interface.<p>

<b>Note that this implementation is not synchronized.</b> If multiple
threads access a set concurrently, and at least one of the threads modifies
the set, it <i>must</i> be synchronized externally.  This is typically
accomplished by synchronizing on some object that naturally encapsulates
the set.  If no such object exists, the set should be \"wrapped\" using the
<tt>Collections.synchronizedSet</tt> method.  This is best done at creation
time, to prevent accidental unsynchronized access to the set: <pre>
    SortedSet s = Collections.synchronizedSortedSet(new TreeSet(...));
</pre><p>

The Iterators returned by this class's <tt>iterator</tt> method are
<i>fail-fast</i>: if the set is modified at any time after the iterator is
created, in any way except through the iterator's own <tt>remove</tt>
method, the iterator will throw a <tt>ConcurrentModificationException</tt>.
Thus, in the face of concurrent modification, the iterator fails quickly
and cleanly, rather than risking arbitrary, non-deterministic behavior at
an undetermined time in the future.

<p>Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw <tt>ConcurrentModificationException</tt> on a best-effort basis.
Therefore, it would be wrong to write a program that depended on this
exception for its correctness:   <i>the fail-fast behavior of iterators
should be used only to detect bugs.</i><p>

This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@version 1.32, 12/19/03
@see	    Collection
@see	    Set
@see	    HashSet
@see     Comparable
@see     Comparator
@see	    Collections#synchronizedSortedSet(SortedSet)
@see	    TreeMap
@since   1.2"
      classrelation 177819 // <realization>
	relation 177819 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 177819 // <realization>
	  b parent class_ref 137499 // AbstractSet
      end

      classrelation 177947 // <realization>
	relation 177947 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 177947 // <realization>
	  b parent class_ref 139931 // SortedSet
      end

      classrelation 178203 // <realization>
	relation 178203 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 178203 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 178331 // m (<unidirectional association>)
	relation 178331 --->
	  a role_name "m" private
	    comment " The backing Map"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E,Object> ${name}${value};
"
	    classrelation_ref 178331 // m (<unidirectional association>)
	  b parent class_ref 140827 // SortedMap
      end

      classrelation 178459 // keySet (<unidirectional association>)
	relation 178459 --->
	  a role_name "keySet" private
	    comment " The keySet view of the backing Map"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 178459 // keySet (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      attribute 203931 "PRESENT"
	class_attribute const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Dummy value to associate with an Object in the backing Map"
      end

      operation 383643 "TreeSet"
	private explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 140827 // SortedMap
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E,Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a set backed by the specified sorted map."
      end

      operation 383771 "TreeSet"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty set, sorted according to the elements' natural
order.  All elements inserted into the set must implement the
<tt>Comparable</tt> interface.  Furthermore, all such elements must be
<i>mutually comparable</i>: <tt>e1.compareTo(e2)</tt> must not throw a
<tt>ClassCastException</tt> for any elements <tt>e1</tt> and
<tt>e2</tt> in the set.  If the user attempts to add an element to the
set that violates this constraint (for example, the user attempts to
add a string element to a set whose elements are integers), the
<tt>add(Object)</tt> call will throw a <tt>ClassCastException</tt>.

@see Comparable"
      end

      operation 383899 "TreeSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 138139 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty set, sorted according to the specified
comparator.  All elements inserted into the set must be <i>mutually
comparable</i> by the specified comparator: <tt>comparator.compare(e1,
e2)</tt> must not throw a <tt>ClassCastException</tt> for any elements
<tt>e1</tt> and <tt>e2</tt> in the set.  If the user attempts to add
an element to the set that violates this constraint, the
<tt>add(Object)</tt> call will throw a <tt>ClassCastException</tt>.

@param c the comparator that will be used to sort this set.  A
       <tt>null</tt> value indicates that the elements' <i>natural
       ordering</i> should be used."
      end

      operation 384027 "TreeSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new set containing the elements in the specified
collection, sorted according to the elements' <i>natural order</i>.
All keys inserted into the set must implement the <tt>Comparable</tt>
interface.  Furthermore, all such keys must be <i>mutually
comparable</i>: <tt>k1.compareTo(k2)</tt> must not throw a
<tt>ClassCastException</tt> for any elements <tt>k1</tt> and
<tt>k2</tt> in the set.

@param c The elements that will comprise the new set.

@throws ClassCastException if the keys in the specified collection are
        not comparable, or are not mutually comparable.
@throws NullPointerException if the specified collection is null."
      end

      operation 384155 "TreeSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 139931 // SortedSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new set containing the same elements as the specified
sorted set, sorted according to the same ordering.

@param s sorted set whose elements will comprise the new set.
@throws NullPointerException if the specified sorted set is null."
      end

      operation 384283 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this set.  The elements
are returned in ascending order.

@return an iterator over the elements in this set."
      end

      operation 384411 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this set (its cardinality).

@return the number of elements in this set (its cardinality)."
      end

      operation 384539 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this set contains no elements.

@return <tt>true</tt> if this set contains no elements."
      end

      operation 384667 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this set contains the specified element.

@param o the object to be checked for containment in this set.
@return <tt>true</tt> if this set contains the specified element.

@throws ClassCastException if the specified object cannot be compared
		  with the elements currently in the set."
      end

      operation 384795 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to this set if it is not already present.

@param o element to be added to this set.
@return <tt>true</tt> if the set did not already contain the specified
        element.

@throws ClassCastException if the specified object cannot be compared
		  with the elements currently in the set."
      end

      operation 384923 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified element from this set if it is present.

@param o object to be removed from this set, if present.
@return <tt>true</tt> if the set contained the specified element.

@throws ClassCastException if the specified object cannot be compared
		  with the elements currently in the set."
      end

      operation 385051 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this set."
      end

      operation 385179 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135067 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds all of the elements in the specified collection to this set.

@param c elements to be added
@return <tt>true</tt> if this set changed as a result of the call.

@throws ClassCastException if the elements provided cannot be compared
		  with the elements currently in the set.
@throws NullPointerException of the specified collection is null."
      end

      operation 385307 "subSet"
	public return_type class_ref 139931 // SortedSet
	nparams 2
	  param inout name "fromElement" explicit_type "E"
	  param inout name "toElement" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this set whose elements range from
<tt>fromElement</tt>, inclusive, to <tt>toElement</tt>, exclusive.  (If
<tt>fromElement</tt> and <tt>toElement</tt> are equal, the returned
sorted set is empty.)  The returned sorted set is backed by this set,
so changes in the returned sorted set are reflected in this set, and
vice-versa.  The returned sorted set supports all optional Set
operations.<p>

The sorted set returned by this method will throw an
<tt>IllegalArgumentException</tt> if the user attempts to insert an
element outside the specified range.<p>

Note: this method always returns a <i>half-open range</i> (which
includes its low endpoint but not its high endpoint).  If you need a
<i>closed range</i> (which includes both endpoints), and the element
type allows for calculation of the successor of a specified value,
merely request the subrange from <tt>lowEndpoint</tt> to
<tt>successor(highEndpoint)</tt>.  For example, suppose that <tt>s</tt>
is a sorted set of strings.  The following idiom obtains a view
containing all of the strings in <tt>s</tt> from <tt>low</tt> to
<tt>high</tt>, inclusive: <pre>
    SortedSet sub = s.subSet(low, high+\"\\0\");
</pre>

A similar technique can be used to generate an <i>open range</i> (which
contains neither endpoint).  The following idiom obtains a view
containing all of the strings in <tt>s</tt> from <tt>low</tt> to
<tt>high</tt>, exclusive: <pre>
    SortedSet sub = s.subSet(low+\"\\0\", high);
</pre>

@param fromElement low endpoint (inclusive) of the subSet.
@param toElement high endpoint (exclusive) of the subSet.
@return a view of the portion of this set whose elements range from
	       <tt>fromElement</tt>, inclusive, to <tt>toElement</tt>,
	       exclusive.
@throws ClassCastException if <tt>fromElement</tt> and
        <tt>toElement</tt> cannot be compared to one another using
        this set's comparator (or, if the set has no comparator,
        using natural ordering).
@throws IllegalArgumentException if <tt>fromElement</tt> is greater than
        <tt>toElement</tt>.
@throws NullPointerException if <tt>fromElement</tt> or
	       <tt>toElement</tt> is <tt>null</tt> and this set uses natural
	       order, or its comparator does not tolerate <tt>null</tt>
        elements."
      end

      operation 385435 "headSet"
	public return_type class_ref 139931 // SortedSet
	nparams 1
	  param inout name "toElement" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this set whose elements are strictly
less than <tt>toElement</tt>.  The returned sorted set is backed by
this set, so changes in the returned sorted set are reflected in this
set, and vice-versa.  The returned sorted set supports all optional set
operations.<p>

The sorted set returned by this method will throw an
<tt>IllegalArgumentException</tt> if the user attempts to insert an
element greater than or equal to <tt>toElement</tt>.<p>

Note: this method always returns a view that does not contain its
(high) endpoint.  If you need a view that does contain this endpoint,
and the element type allows for calculation of the successor of a
specified value, merely request a headSet bounded by
<tt>successor(highEndpoint)</tt>.  For example, suppose that <tt>s</tt>
is a sorted set of strings.  The following idiom obtains a view
containing all of the strings in <tt>s</tt> that are less than or equal
to <tt>high</tt>: <pre> SortedSet head = s.headSet(high+\"\\0\");</pre>

@param toElement high endpoint (exclusive) of the headSet.
@return a view of the portion of this set whose elements are strictly
	       less than toElement.
@throws ClassCastException if <tt>toElement</tt> is not compatible
        with this set's comparator (or, if the set has no comparator,
        if <tt>toElement</tt> does not implement <tt>Comparable</tt>).
@throws IllegalArgumentException if this set is itself a subSet,
        headSet, or tailSet, and <tt>toElement</tt> is not within the
        specified range of the subSet, headSet, or tailSet.
@throws NullPointerException if <tt>toElement</tt> is <tt>null</tt> and
	       this set uses natural ordering, or its comparator does
        not tolerate <tt>null</tt> elements."
      end

      operation 385563 "tailSet"
	public return_type class_ref 139931 // SortedSet
	nparams 1
	  param inout name "fromElement" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a view of the portion of this set whose elements are
greater than or equal to <tt>fromElement</tt>.  The returned sorted set
is backed by this set, so changes in the returned sorted set are
reflected in this set, and vice-versa.  The returned sorted set
supports all optional set operations.<p>

The sorted set returned by this method will throw an
<tt>IllegalArgumentException</tt> if the user attempts to insert an
element less than <tt>fromElement</tt>.

Note: this method always returns a view that contains its (low)
endpoint.  If you need a view that does not contain this endpoint, and
the element type allows for calculation of the successor of a specified
value, merely request a tailSet bounded by
<tt>successor(lowEndpoint)</tt>.  For example, suppose that <tt>s</tt>
is a sorted set of strings.  The following idiom obtains a view
containing all of the strings in <tt>s</tt> that are strictly greater
than <tt>low</tt>: <pre>
    SortedSet tail = s.tailSet(low+\"\\0\");
</pre>

@param fromElement low endpoint (inclusive) of the tailSet.
@return a view of the portion of this set whose elements are
	       greater than or equal to <tt>fromElement</tt>.
@throws ClassCastException if <tt>fromElement</tt> is not compatible
        with this set's comparator (or, if the set has no comparator,
        if <tt>fromElement</tt> does not implement <tt>Comparable</tt>).
@throws IllegalArgumentException if this set is itself a subSet,
        headSet, or tailSet, and <tt>fromElement</tt> is not within the
        specified range of the subSet, headSet, or tailSet.
@throws NullPointerException if <tt>fromElement</tt> is <tt>null</tt>
	       and this set uses natural ordering, or its comparator does
        not tolerate <tt>null</tt> elements."
      end

      operation 385691 "comparator"
	public return_type class_ref 138139 // Comparator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the comparator used to order this sorted set, or <tt>null</tt>
if this tree set uses its elements natural ordering.

@return the comparator used to order this sorted set, or <tt>null</tt>
if this tree set uses its elements natural ordering."
      end

      operation 385819 "first"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first (lowest) element currently in this sorted set.

@return the first (lowest) element currently in this sorted set.
@throws    NoSuchElementException sorted set is empty."
      end

      operation 385947 "last"
	public explicit_return_type "E"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the last (highest) element currently in this sorted set.

@return the last (highest) element currently in this sorted set.
@throws    NoSuchElementException sorted set is empty."
      end

      operation 386075 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow copy of this <tt>TreeSet</tt> instance. (The elements
themselves are not cloned.)

@return a shallow copy of this set."
      end

      operation 386203 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectOutputStream"
	nexceptions 1
	  explicit_exception "java.io.IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state of the <tt>TreeSet</tt> instance to a stream (that is,
serialize it).

@serialData Emits the comparator used to order this set, or
		   <tt>null</tt> if it obeys its elements' natural ordering
		   (Object), followed by the size of the set (the number of
		   elements it contains) (int), followed by all of its
		   elements (each an Object) in order (as determined by the
		   set's Comparator, or by the elements' natural ordering if
            the set has no Comparator)."
      end

      operation 386331 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "java.io.ObjectInputStream"
	nexceptions 2
	  explicit_exception "java.io.IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the <tt>TreeSet</tt> instance from a stream (that is,
deserialize it)."
      end

      attribute 204059 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -2479143000061671589L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 159003 "UnknownFormatConversionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when an unknown conversion is given.

<p> Unless otherwise specified, passing a <tt>null</tt> argument to
any method or constructor in this class will cause a {@link
NullPointerException} to be thrown.

@version 	1.3, 06/07/04
@since 1.5"
      classrelation 178587 // <generalisation>
	relation 178587 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 178587 // <generalisation>
	  b parent class_ref 145435 // IllegalFormatException
      end

      attribute 204187 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  19060418L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 204315 "s"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 386459 "UnknownFormatConversionException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class with the unknown conversion.

@param  s
        Unknown conversion"
      end

      operation 386587 "getConversion"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unknown conversion.

@return  The unknown conversion."
      end

      operation 386715 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " javadoc inherited from Throwable.java"
      end
    end

    class 159131 "UnknownFormatFlagsException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when an unknown flag is given.

<p> Unless otherwise specified, passing a <tt>null</tt> argument to any
method or constructor in this class will cause a {@link
NullPointerException} to be thrown.

@version 	1.2, 12/19/03
@since 1.5"
      classrelation 178715 // <generalisation>
	relation 178715 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 178715 // <generalisation>
	  b parent class_ref 145435 // IllegalFormatException
      end

      attribute 204443 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  19370506L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 204571 "flags"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 386843 "UnknownFormatFlagsException"
	public explicit_return_type ""
	nparams 1
	  param in name "f" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class with the specified flags.

@param  f
        The set of format flags which contain an unknown flag"
      end

      operation 386971 "getFlags"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of flags which contains an unknown flag.

@return  The flags"
      end

      operation 387099 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " javadoc inherited from Throwable.java"
      end
    end

    class 159259 "UUID"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
A class that represents an immutable universally unique identifier (UUID). 
A UUID represents a 128-bit value.

<p>There exist different variants of these global identifiers. The methods
of this class are for manipulating the Leach-Salz variant, although the
constructors allow the creation of any variant of UUID (described below).

<p>The layout of a variant 2 (Leach-Salz) UUID is as follows:

The most significant long consists of the following unsigned fields:
<pre>
0xFFFFFFFF00000000 time_low
0x00000000FFFF0000 time_mid
0x000000000000F000 version
0x0000000000000FFF time_hi
</pre>
The least significant long consists of the following unsigned fields:
<pre>
0xC000000000000000 variant
0x3FFF000000000000 clock_seq
0x0000FFFFFFFFFFFF node
</pre>

<p>The variant field contains a value which identifies the layout of
the <tt>UUID</tt>. The bit layout described above is valid only for
a <tt>UUID</tt> with a variant value of 2, which indicates the
Leach-Salz variant.

<p>The version field holds a value that describes the type of this
<tt>UUID</tt>. There are four different basic types of UUIDs: time-based,
DCE security, name-based, and randomly generated UUIDs. These types
have a version value of 1, 2, 3 and 4, respectively.

<p>For more information including algorithms used to create <tt>UUID</tt>s,
see the Internet-Draft <a href=\"http://www.ietf.org/internet-drafts/draft-mealling-uuid-urn-03.txt\">UUIDs and GUIDs</a>
or the standards body definition at
<a href=\"http://www.iso.ch/cate/d2229.html\">ISO/IEC 11578:1996</a>.

@version 1.14, 07/12/04
@since   1.5"
      classrelation 178843 // <realization>
	relation 178843 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 178843 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 204699 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -4856846361193249489L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Explicit serialVersionUID for interoperability.
"
      end

      attribute 204827 "mostSigBits"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The most significant 64 bits of this UUID.

@serial
"
      end

      attribute 204955 "leastSigBits"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The least significant 64 bits of this UUID.

@serial
"
      end

      attribute 205083 "version"
	private explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The version number associated with this UUID. Computed on demand.
"
      end

      attribute 205211 "variant"
	private explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The variant number associated with this UUID. Computed on demand.
"
      end

      attribute 205339 "timestamp"
	volatile private explicit_type "long"
	init_value "=  -1"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The timestamp associated with this UUID. Computed on demand.
"
      end

      attribute 205467 "sequence"
	private explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The clock sequence associated with this UUID. Computed on demand.
"
      end

      attribute 205595 "node"
	private explicit_type "long"
	init_value "=  -1"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The node number associated with this UUID. Computed on demand.
"
      end

      attribute 205723 "hashCode"
	private explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The hashcode of this UUID. Computed on demand.
"
      end

      attribute 205851 "numberGenerator"
	class_attribute volatile private explicit_type "SecureRandom"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The random number generator used by this class to create random
based UUIDs.
"
      end

      operation 387227 "UUID"
	private explicit_return_type ""
	nparams 1
	  param in name "data" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors and Factories

Private constructor which uses a byte array to construct the new UUID."
      end

      operation 387355 "UUID"
	public explicit_return_type ""
	nparams 2
	  param in name "mostSigBits" explicit_type "long"
	  param in name "leastSigBits" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <tt>UUID</tt> using the specified data.
<tt>mostSigBits</tt> is used for the most significant 64 bits
of the <tt>UUID</tt> and <tt>leastSigBits</tt> becomes the
least significant 64 bits of the <tt>UUID</tt>.

@param  mostSigBits
@param  leastSigBits"
      end

      operation 387483 "randomUUID"
	class_operation public return_type class_ref 159259 // UUID
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Static factory to retrieve a type 4 (pseudo randomly generated) UUID.

The <code>UUID</code> is generated using a cryptographically strong
pseudo random number generator.

@return  a randomly generated <tt>UUID</tt>."
      end

      operation 387611 "nameUUIDFromBytes"
	class_operation public return_type class_ref 159259 // UUID
	nparams 1
	  param in name "name" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Static factory to retrieve a type 3 (name based) <tt>UUID</tt> based on
the specified byte array.

@param  name a byte array to be used to construct a <tt>UUID</tt>.
@return  a <tt>UUID</tt> generated from the specified array."
      end

      operation 387739 "fromString"
	class_operation public return_type class_ref 159259 // UUID
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>UUID</tt> from the string standard representation as
described in the {@link #toString} method.

@param  name a string that specifies a <tt>UUID</tt>.
@return  a <tt>UUID</tt> with the specified value.
@throws IllegalArgumentException if name does not conform to the
        string representation as described in {@link #toString}."
      end

      operation 387867 "getLeastSignificantBits"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Field Accessor Methods

Returns the least significant 64 bits of this UUID's 128 bit value.

@return the least significant 64 bits of this UUID's 128 bit value."
      end

      operation 387995 "getMostSignificantBits"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the most significant 64 bits of this UUID's 128 bit value.

@return the most significant 64 bits of this UUID's 128 bit value."
      end

      operation 388123 "version"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The version number associated with this <tt>UUID</tt>. The version 
number describes how this <tt>UUID</tt> was generated.

The version number has the following meaning:<p>
<ul>
<li>1    Time-based UUID
<li>2    DCE security UUID
<li>3    Name-based UUID
<li>4    Randomly generated UUID
</ul>

@return  the version number of this <tt>UUID</tt>."
      end

      operation 388251 "variant"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The variant number associated with this <tt>UUID</tt>. The variant 
number describes the layout of the <tt>UUID</tt>.

The variant number has the following meaning:<p>
<ul>
<li>0    Reserved for NCS backward compatibility
<li>2    The Leach-Salz variant (used by this class)
<li>6    Reserved, Microsoft Corporation backward compatibility
<li>7    Reserved for future definition
</ul>

@return  the variant number of this <tt>UUID</tt>."
      end

      operation 388379 "timestamp"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The timestamp value associated with this UUID.

<p>The 60 bit timestamp value is constructed from the time_low,
time_mid, and time_hi fields of this <tt>UUID</tt>. The resulting 
timestamp is measured in 100-nanosecond units since midnight, 
October 15, 1582 UTC.<p>

The timestamp value is only meaningful in a time-based UUID, which
has version type 1. If this <tt>UUID</tt> is not a time-based UUID then
this method throws UnsupportedOperationException.

@throws UnsupportedOperationException if this UUID is not a 
        version 1 UUID."
      end

      operation 388507 "clockSequence"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The clock sequence value associated with this UUID.

<p>The 14 bit clock sequence value is constructed from the clock
sequence field of this UUID. The clock sequence field is used to
guarantee temporal uniqueness in a time-based UUID.<p>

The  clockSequence value is only meaningful in a time-based UUID, which
has version type 1. If this UUID is not a time-based UUID then
this method throws UnsupportedOperationException.

@return  the clock sequence of this <tt>UUID</tt>.
@throws UnsupportedOperationException if this UUID is not a 
        version 1 UUID."
      end

      operation 388635 "node"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The node value associated with this UUID.

<p>The 48 bit node value is constructed from the node field of
this UUID. This field is intended to hold the IEEE 802 address 
of the machine that generated this UUID to guarantee spatial
uniqueness.<p>

The node value is only meaningful in a time-based UUID, which
has version type 1. If this UUID is not a time-based UUID then
this method throws UnsupportedOperationException.

@return  the node value of this <tt>UUID</tt>.
@throws UnsupportedOperationException if this UUID is not a
        version 1 UUID."
      end

      operation 388763 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Object Inherited Methods

Returns a <code>String</code> object representing this
<code>UUID</code>.

<p>The UUID string representation is as described by this BNF : 
<pre>
 UUID                   = <time_low> \"-\" <time_mid> \"-\"
                          <time_high_and_version> \"-\"
                          <variant_and_sequence> \"-\"
                          <node>
 time_low               = 4*<hexOctet>
 time_mid               = 2*<hexOctet>
 time_high_and_version  = 2*<hexOctet>
 variant_and_sequence   = 2*<hexOctet>
 node                   = 6*<hexOctet>
 hexOctet               = <hexDigit><hexDigit>
 hexDigit               =
       \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"
       | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\"
       | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\"
</pre>

@return  a string representation of this <tt>UUID</tt>."
      end

      operation 388891 "digits"
	class_operation private explicit_return_type "String"
	nparams 2
	  param in name "val" explicit_type "long"
	  param in name "digits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns val represented by the specified number of hex digits. "
      end

      operation 389019 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this <code>UUID</code>.

@return  a hash code value for this <tt>UUID</tt>. "
      end

      operation 389147 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this object to the specified object.  The result is
<tt>true</tt> if and only if the argument is not
<tt>null</tt>, is a <tt>UUID</tt> object, has the same variant,
and contains the same value, bit for bit, as this <tt>UUID</tt>.

@param   obj   the object to compare with.
@return  <code>true</code> if the objects are the same;
         <code>false</code> otherwise."
      end

      operation 389275 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "val" type class_ref 159259 // UUID
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison Operations

Compares this UUID with the specified UUID.

<p>The first of two UUIDs follows the second if the most significant
field in which the UUIDs differ is greater for the first UUID.

@param  val <tt>UUID</tt> to which this <tt>UUID</tt> is to be compared.
@return -1, 0 or 1 as this <tt>UUID</tt> is less than, equal
        to, or greater than <tt>val</tt>."
      end

      operation 389403 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" explicit_type "java.io.ObjectInputStream"
	nexceptions 2
	  explicit_exception "java.io.IOException"
	  explicit_exception "ClassNotFoundException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the <tt>UUID</tt> instance from a stream (that is,
deserialize it). This is necessary to set the transient fields
to their correct uninitialized value so they will be recomputed
on demand."
      end
    end

    class 159387 "WeakHashMap"
      visibility public 
      nformals 8
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 16
      actual class class_ref 136475 // AbstractMap
        rank 0 explicit_value "K"
      actual class class_ref 136475 // AbstractMap
        rank 1 explicit_value "V"
      actual class class_ref 136475 // AbstractMap
        rank 2 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 3 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 4 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 5 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 6 explicit_value ""
      actual class class_ref 136475 // AbstractMap
        rank 7 explicit_value ""
      actual class class_ref 136603 // Map
        rank 0 explicit_value "K"
      actual class class_ref 136603 // Map
        rank 1 explicit_value "V"
      actual class class_ref 136603 // Map
        rank 2 explicit_value ""
      actual class class_ref 136603 // Map
        rank 3 explicit_value ""
      actual class class_ref 136603 // Map
        rank 4 explicit_value ""
      actual class class_ref 136603 // Map
        rank 5 explicit_value ""
      actual class class_ref 136603 // Map
        rank 6 explicit_value ""
      actual class class_ref 136603 // Map
        rank 7 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A hashtable-based <tt>Map</tt> implementation with <em>weak keys</em>.
An entry in a <tt>WeakHashMap</tt> will automatically be removed when
its key is no longer in ordinary use.  More precisely, the presence of a
mapping for a given key will not prevent the key from being discarded by the
garbage collector, that is, made finalizable, finalized, and then reclaimed.
When a key has been discarded its entry is effectively removed from the map,
so this class behaves somewhat differently than other <tt>Map</tt>
implementations.

<p> Both null values and the null key are supported. This class has
performance characteristics similar to those of the <tt>HashMap</tt>
class, and has the same efficiency parameters of <em>initial capacity</em>
and <em>load factor</em>.

<p> Like most collection classes, this class is not synchronized.  A
synchronized <tt>WeakHashMap</tt> may be constructed using the
<tt>Collections.synchronizedMap</tt> method.

<p> This class is intended primarily for use with key objects whose
<tt>equals</tt> methods test for object identity using the
<tt>==</tt> operator.  Once such a key is discarded it can never be
recreated, so it is impossible to do a lookup of that key in a
<tt>WeakHashMap</tt> at some later time and be surprised that its entry
has been removed.  This class will work perfectly well with key objects
whose <tt>equals</tt> methods are not based upon object identity, such
as <tt>String</tt> instances.  With such recreatable key objects,
however, the automatic removal of <tt>WeakHashMap</tt> entries whose
keys have been discarded may prove to be confusing.

<p> The behavior of the <tt>WeakHashMap</tt> class depends in part upon
the actions of the garbage collector, so several familiar (though not
required) <tt>Map</tt> invariants do not hold for this class.  Because
the garbage collector may discard keys at any time, a
<tt>WeakHashMap</tt> may behave as though an unknown thread is silently
removing entries.  In particular, even if you synchronize on a
<tt>WeakHashMap</tt> instance and invoke none of its mutator methods, it
is possible for the <tt>size</tt> method to return smaller values over
time, for the <tt>isEmpty</tt> method to return <tt>false</tt> and
then <tt>true</tt>, for the <tt>containsKey</tt> method to return
<tt>true</tt> and later <tt>false</tt> for a given key, for the
<tt>get</tt> method to return a value for a given key but later return
<tt>null</tt>, for the <tt>put</tt> method to return
<tt>null</tt> and the <tt>remove</tt> method to return
<tt>false</tt> for a key that previously appeared to be in the map, and
for successive examinations of the key set, the value set, and the entry set
to yield successively smaller numbers of elements.

<p> Each key object in a <tt>WeakHashMap</tt> is stored indirectly as
the referent of a weak reference.  Therefore a key will automatically be
removed only after the weak references to it, both inside and outside of the
map, have been cleared by the garbage collector.

<p> <strong>Implementation note:</strong> The value objects in a
<tt>WeakHashMap</tt> are held by ordinary strong references.  Thus care
should be taken to ensure that value objects do not strongly refer to their
own keys, either directly or indirectly, since that will prevent the keys
from being discarded.  Note that a value object may refer indirectly to its
key via the <tt>WeakHashMap</tt> itself; that is, a value object may
strongly refer to some other key object whose associated value object, in
turn, strongly refers to the key of the first value object.  One way
to deal with this is to wrap values themselves within
<tt>WeakReferences</tt> before
inserting, as in: <tt>m.put(key, new WeakReference(value))</tt>,
and then unwrapping upon each <tt>get</tt>.

<p>The iterators returned by all of this class's \"collection view methods\"
are <i>fail-fast</i>: if the map is structurally modified at any time after
the iterator is created, in any way except through the iterator's own
<tt>remove</tt> or <tt>add</tt> methods, the iterator will throw a
<tt>ConcurrentModificationException</tt>.  Thus, in the face of concurrent
modification, the iterator fails quickly and cleanly, rather than risking
arbitrary, non-deterministic behavior at an undetermined time in the
future.

<p>Note that the fail-fast behavior of an iterator cannot be guaranteed
as it is, generally speaking, impossible to make any hard guarantees in the
presence of unsynchronized concurrent modification.  Fail-fast iterators
throw <tt>ConcurrentModificationException</tt> on a best-effort basis.
Therefore, it would be wrong to write a program that depended on this
exception for its correctness:  <i>the fail-fast behavior of iterators
should be used only to detect bugs.</i>

<p>This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@version	1.30, 02/19/04
@author      Doug Lea
@author      Josh Bloch
@author	Mark Reinhold
@since	1.2
@see		java.util.HashMap
@see		java.lang.ref.WeakReference"
      classrelation 179099 // <realization>
	relation 179099 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 179099 // <realization>
	  b parent class_ref 136475 // AbstractMap
      end

      classrelation 179227 // <realization>
	relation 179227 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 179227 // <realization>
	  b parent class_ref 136603 // Map
      end

      attribute 205979 "DEFAULT_INITIAL_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The default initial capacity -- MUST be a power of two.
"
      end

      attribute 206107 "MAXIMUM_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1 << 30"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum capacity, used if a higher value is implicitly specified
by either of the constructors with arguments.
MUST be a power of two <= 1<<30.
"
      end

      attribute 206235 "DEFAULT_LOAD_FACTOR"
	class_attribute const_attribute private explicit_type "float"
	init_value "=  0.75f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The load fast used when none specified in constructor.
"
      end

      classrelation 179355 // table (<unidirectional association>)
	relation 179355 --->
	  a role_name "table" multiplicity "[]" private
	    comment "
The table, resized as necessary. Length MUST Always be a power of two.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 179355 // table (<unidirectional association>)
	  b parent class_ref 136859 // Entry
      end

      attribute 206363 "size"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of key-value mappings contained in this weak hash map.
"
      end

      attribute 206491 "threshold"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The next size value at which to resize (capacity * load factor).
"
      end

      attribute 206619 "loadFactor"
	const_attribute private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The load factor for the hash table.
"
      end

      attribute 206747 "queue"
	const_attribute private explicit_type "K"
	init_value "=  new ReferenceQueue<K>()"
	stereotype "ReferenceQueue"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Reference queue for cleared WeakEntries
"
      end

      attribute 206875 "modCount"
	volatile private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of times this HashMap has been structurally modified
Structural modifications are those that change the number of mappings in
the HashMap or otherwise modify its internal structure (e.g.,
rehash).  This field is used to make iterators on Collection-views of
the HashMap fail-fast.  (See ConcurrentModificationException).
"
      end

      operation 389531 "WeakHashMap"
	public explicit_return_type ""
	nparams 2
	  param in name "initialCapacity" explicit_type "int"
	  param in name "loadFactor" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty <tt>WeakHashMap</tt> with the given initial
capacity and the given load factor.

@param  initialCapacity The initial capacity of the <tt>WeakHashMap</tt>
@param  loadFactor      The load factor of the <tt>WeakHashMap</tt>
@throws IllegalArgumentException  If the initial capacity is negative,
        or if the load factor is nonpositive."
      end

      operation 389659 "WeakHashMap"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty <tt>WeakHashMap</tt> with the given initial
capacity and the default load factor, which is <tt>0.75</tt>.

@param  initialCapacity The initial capacity of the <tt>WeakHashMap</tt>
@throws IllegalArgumentException  If the initial capacity is negative."
      end

      operation 389787 "WeakHashMap"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty <tt>WeakHashMap</tt> with the default initial
capacity (16) and the default load factor (0.75)."
      end

      operation 389915 "WeakHashMap"
	public explicit_return_type ""
	nparams 1
	  param inout name "t" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <tt>WeakHashMap</tt> with the same mappings as the
specified <tt>Map</tt>.  The <tt>WeakHashMap</tt> is created with
default load factor, which is <tt>0.75</tt> and an initial capacity
sufficient to hold the mappings in the specified <tt>Map</tt>.

@param   t the map whose mappings are to be placed in this map.
@throws  NullPointerException if the specified map is null.
@since	1.3"
      end

      attribute 207003 "NULL_KEY"
	class_attribute const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " internal utilities

Value representing null keys inside tables.
"
      end

      operation 390043 "maskNull"
	class_operation private explicit_return_type "Object"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Use NULL_KEY for key if it is null."
      end

      operation 390171 "unmaskNull"
	class_operation private explicit_return_type "K"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return internal representation of null key back to caller as null"
      end

      operation 390299 "eq"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param inout name "x" explicit_type "Object"
	  param inout name "y" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check for equality of non-null reference x and possibly-null y.  By
default uses Object.equals."
      end

      operation 390427 "indexFor"
	class_operation package explicit_return_type "int"
	nparams 2
	  param in name "h" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return index for hash code h."
      end

      operation 390555 "expungeStaleEntries"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Expunge stale entries from the table."
      end

      operation 390683 "getTable"
	private return_type class_ref 136859 // Entry
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the table after first expunging stale entries"
      end

      operation 390811 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of key-value mappings in this map.
This result is a snapshot, and may not reflect unprocessed
entries that will be removed before next attempted access
because they are no longer referenced."
      end

      operation 390939 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains no key-value mappings.
This result is a snapshot, and may not reflect unprocessed
entries that will be removed before next attempted access
because they are no longer referenced."
      end

      operation 391067 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which the specified key is mapped in this weak
hash map, or <tt>null</tt> if the map contains no mapping for
this key.  A return value of <tt>null</tt> does not <i>necessarily</i>
indicate that the map contains no mapping for the key; it is also
possible that the map explicitly maps the key to <tt>null</tt>. The
<tt>containsKey</tt> method may be used to distinguish these two
cases.

@param   key the key whose associated value is to be returned.
@return  the value to which this map maps the specified key, or
         <tt>null</tt> if the map contains no mapping for this key.
@see #put(Object, Object)"
      end

      operation 391195 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains a mapping for the
specified key.

@param   key   The key whose presence in this map is to be tested
@return  <tt>true</tt> if there is a mapping for <tt>key</tt>;
         <tt>false</tt> otherwise"
      end

      operation 391323 "getEntry"
	package return_type class_ref 136859 // Entry
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the entry associated with the specified key in the HashMap.
Returns null if the HashMap contains no mapping for this key."
      end

      operation 391451 "put"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates the specified value with the specified key in this map.
If the map previously contained a mapping for this key, the old
value is replaced.

@param key key with which the specified value is to be associated.
@param value value to be associated with the specified key.
@return previous value associated with specified key, or <tt>null</tt>
	       if there was no mapping for key.  A <tt>null</tt> return can
	       also indicate that the HashMap previously associated
	       <tt>null</tt> with the specified key."
      end

      operation 391579 "resize"
	package explicit_return_type "void"
	nparams 1
	  param in name "newCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Rehashes the contents of this map into a new array with a
larger capacity.  This method is called automatically when the
number of keys in this map reaches its threshold.

If current capacity is MAXIMUM_CAPACITY, this method does not
resize the map, but sets threshold to Integer.MAX_VALUE.
This has the effect of preventing future calls.

@param newCapacity the new capacity, MUST be a power of two;
       must be greater than current capacity unless current
       capacity is MAXIMUM_CAPACITY (in which case value
       is irrelevant)."
      end

      operation 391707 "transfer"
	private explicit_return_type "void"
	nparams 2
	  param inout name "src" type class_ref 136859 // Entry
	  param inout name "dest" type class_ref 136859 // Entry
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Transfer all entries from src to dest tables "
      end

      operation 391835 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "m" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies all of the mappings from the specified map to this map These
mappings will replace any mappings that this map had for any of the
keys currently in the specified map.<p>

@param m mappings to be stored in this map.
@throws  NullPointerException if the specified map is null."
      end

      operation 391963 "remove"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the mapping for this key from this map if present.

@param key key whose mapping is to be removed from the map.
@return previous value associated with specified key, or <tt>null</tt>
	       if there was no mapping for key.  A <tt>null</tt> return can
	       also indicate that the map previously associated <tt>null</tt>
	       with the specified key."
      end

      operation 392091 "removeMapping"
	package return_type class_ref 136859 // Entry
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Special version of remove needed by Entry set "
      end

      operation 392219 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all mappings from this map."
      end

      operation 392347 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map maps one or more keys to the
specified value.

@param value value whose presence in this map is to be tested.
@return <tt>true</tt> if this map maps one or more keys to the
        specified value."
      end

      operation 392475 "containsNullValue"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Special-case code for containsValue with null argument"
      end
    end

    class 159515 "XMLUtils"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class used to aid in Properties load and save in XML. Keeping this
code outside of Properties helps reduce the number of classes loaded
when Properties is loaded.

@version 1.9, 01/23/03
@author  Michael McCloskey
@since   1.3"
      attribute 207131 "PROPS_DTD_URI"
	class_attribute const_attribute private explicit_type "String"
	init_value "= 
    \"http://java.sun.com/dtd/properties.dtd\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " XML loading and saving methods for Properties
 The required DTD URI for exported properties"
      end

      attribute 207259 "PROPS_DTD"
	class_attribute const_attribute private explicit_type "String"
	init_value "= 
    \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\" +
    \"<!-- DTD for properties -->\"                +
    \"<!ELEMENT properties ( comment?, entry* ) >\"+
    \"<!ATTLIST properties\"                       +
        \" version CDATA #FIXED \\\"1.0\\\">\"         +
    \"<!ELEMENT comment (#PCDATA) >\"              +
    \"<!ELEMENT entry (#PCDATA) >\"                +
    \"<!ATTLIST entry \"                           +
        \" key CDATA #REQUIRED>\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 207387 "EXTERNAL_XML_VERSION"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"1.0\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Version number for the format of exported properties files.
"
      end

      operation 392603 "load"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "props" type class_ref 154907 // Properties
	  param inout name "in" explicit_type "InputStream"
	nexceptions 2
	  explicit_exception "IOException"
	  exception class_ref 152091 // InvalidPropertiesFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 392731 "getLoadingDoc"
	class_operation package explicit_return_type "Document"
	nparams 1
	  param inout name "in" explicit_type "InputStream"
	nexceptions 2
	  explicit_exception "SAXException"
	  explicit_exception "IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 392859 "importProperties"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "props" type class_ref 154907 // Properties
	  param inout name "propertiesElement" explicit_type "Element"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 392987 "save"
	class_operation package explicit_return_type "void"
	nparams 4
	  param inout name "props" type class_ref 154907 // Properties
	  param inout name "os" explicit_type "OutputStream"
	  param in name "comment" explicit_type "String"
	  param in name "encoding" explicit_type "String"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 393115 "emitDocument"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "doc" explicit_type "Document"
	  param inout name "os" explicit_type "OutputStream"
	  param in name "encoding" explicit_type "String"
	nexceptions 1
	  explicit_exception "IOException"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 159643 "Resolver"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 393243 "resolveEntity"
	  public explicit_return_type "InputSource"
	  nparams 2
	    param in name "pid" explicit_type "String"
	    param in name "sid" explicit_type "String"
	  nexceptions 1
	    explicit_exception "SAXException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 159899 "EH"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 393371 "error"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "x" explicit_type "SAXParseException"
	  nexceptions 1
	    explicit_exception "SAXException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 393499 "fatalError"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "x" explicit_type "SAXParseException"
	  nexceptions 1
	    explicit_exception "SAXException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 393627 "warning"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "x" explicit_type "SAXParseException"
	  nexceptions 1
	    explicit_exception "SAXException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end
  end

  deploymentview 129307 "util"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 131739 "Collection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 135067 // Collection
      end
      comment "@(#)Collection.java	1.49 04/06/28

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 131867 "AbstractCollection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 134939 // AbstractCollection
      end
      comment "@(#)AbstractCollection.java	1.31 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 131995 "List"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 135579 // List
      end
      comment "@(#)List.java	1.44 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 132123 "Iterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 135323 // Iterator
      end
      comment "@(#)Iterator.java	1.24 04/01/17

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 132251 "ListIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 135707 // ListIterator
      end
      comment "@(#)ListIterator.java	1.23 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 132379 "AbstractList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 135451 // AbstractList
	class_ref 136091 // SubList
	class_ref 136219 // RandomAccessSubList
      end
      comment "@(#)AbstractList.java	1.46 04/02/10

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 132507 "RandomAccess"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 136347 // RandomAccess
      end
      comment "@(#)RandomAccess.java	1.6 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 132635 "Map"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 136603 // Map
      end
      comment "@(#)Map.java	1.48 04/06/28

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 132763 "AbstractMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map.Entry;
${definition}"
      associated_classes
	class_ref 136475 // AbstractMap
      end
      comment "@(#)AbstractMap.java	1.42 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 132891 "Queue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 137243 // Queue
      end
      comment "@(#)Queue.java	1.5 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 133019 "AbstractQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 137115 // AbstractQueue
      end
      comment "@(#)AbstractQueue.java	1.6 04/01/27

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 133147 "AbstractSequentialList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 137371 // AbstractSequentialList
      end
      comment "@(#)AbstractSequentialList.java	1.33 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 133275 "Set"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 136731 // Set
      end
      comment "@(#)Set.java	1.35 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 133403 "AbstractSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 137499 // AbstractSet
      end
      comment "@(#)AbstractSet.java	1.26 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 133531 "ArrayList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 137627 // ArrayList
      end
      comment "@(#)ArrayList.java	1.50 05/09/02

Copyright 2005 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 133659 "Arrays"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.*;
${definition}"
      associated_classes
	class_ref 138011 // Arrays
      end
      comment "@(#)Arrays.java	1.59 04/04/01

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 133787 "BitSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_classes
	class_ref 138395 // BitSet
      end
      comment "@(#)BitSet.java	1.60 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 133915 "Calendar"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.security.AccessController;
import java.security.PrivilegedExceptionAction;
import java.text.DateFormat;
import sun.text.resources.LocaleData;
import sun.util.BuddhistCalendar;
import sun.util.calendar.ZoneInfo;
${definition}"
      associated_classes
	class_ref 138523 // Calendar
      end
      comment "@(#)Calendar.java	1.81 04/07/26

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996-1998 - All Rights Reserved
(C) Copyright IBM Corp. 1996-1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 134043 "SortedSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 139931 // SortedSet
      end
      comment "@(#)SortedSet.java	1.24 04/06/28

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 134171 "SortedMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 140827 // SortedMap
      end
      comment "@(#)SortedMap.java	1.21 04/06/28

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 134299 "Comparator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 138139 // Comparator
      end
      comment "@(#)Comparator.java	1.22 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 134427 "Collections"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.io.ObjectOutputStream;
import java.io.IOException;
import java.lang.reflect.Array;
${definition}"
      associated_classes
	class_ref 139291 // Collections
      end
      comment "@(#)Collections.java	1.90 05/12/17

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 134555 "ConcurrentModificationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 144539 // ConcurrentModificationException
      end
      comment "@(#)ConcurrentModificationException.java	1.18 04/06/22

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 134683 "Currency"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.security.AccessController;
import java.security.PrivilegedAction;
import sun.text.resources.LocaleData;
${definition}"
      associated_classes
	class_ref 144795 // Currency
      end
      comment "@(#)Currency.java	1.8 04/03/16

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 134811 "CurrencyData"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 145051 // CurrencyData
      end
    end

    artifact 134939 "Date"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.text.DateFormat;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.lang.ref.SoftReference;
import sun.util.calendar.BaseCalendar;
import sun.util.calendar.CalendarDate;
import sun.util.calendar.CalendarSystem;
import sun.util.calendar.CalendarUtils;
import sun.util.calendar.Era;
import sun.util.calendar.Gregorian;
import sun.util.calendar.ZoneInfo;
${definition}"
      associated_classes
	class_ref 139163 // Date
      end
      comment "@(#)Date.java	1.81 07/03/20

Copyright 2007 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 135067 "Dictionary"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 145179 // Dictionary
      end
      comment "@(#)Dictionary.java	1.23 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 135195 "IllegalFormatException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 145435 // IllegalFormatException
      end
      comment "@(#)IllegalFormatException.java	1.3 04/04/21

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 135323 "DuplicateFormatFlagsException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 145307 // DuplicateFormatFlagsException
      end
      comment "@(#)DuplicateFormatFlagsException.java	1.2 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 135451 "EmptyStackException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 145691 // EmptyStackException
      end
      comment "@(#)EmptyStackException.java	1.20 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 135579 "Enumeration"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 144411 // Enumeration
      end
      comment "@(#)Enumeration.java	1.22 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 135707 "EnumMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map.Entry;
${definition}"
      associated_classes
	class_ref 145819 // EnumMap
      end
      comment "@(#)EnumMap.java	1.11 05/09/02

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 135835 "EnumSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 146843 // EnumSet
      end
      comment "@(#)EnumSet.java	1.10 04/05/28

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 135963 "EventListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 147099 // EventListener
      end
      comment "@(#)EventListener.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 136091 "EventListenerProxy"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 147227 // EventListenerProxy
      end
      comment "@(#)EventListenerProxy.java	1.5 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 136219 "EventObject"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 147355 // EventObject
      end
      comment "@(#)EventObject.java	1.20 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 136347 "FormatFlagsConversionMismatchException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 147483 // FormatFlagsConversionMismatchException
      end
      comment "@(#)FormatFlagsConversionMismatchException.java	1.2 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 136475 "Formattable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 147611 // Formattable
      end
      comment "@(#)Formattable.java	1.3 04/04/21

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 136603 "FormattableFlags"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 147867 // FormattableFlags
      end
      comment "@(#)FormattableFlags.java	1.1 04/04/21

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 136731 "Formatter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.BufferedWriter;
import java.io.Closeable;
import java.io.IOException;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.Flushable;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.nio.charset.Charset;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import sun.misc.FpUtils;
import sun.misc.DoubleConsts;
import sun.misc.FormattedFloatingDecimal;
${definition}"
      associated_classes
	class_ref 147739 // Formatter
      end
      comment "@(#)Formatter.java	1.16 05/01/04

Copyright 2005 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 136859 "FormatterClosedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 149275 // FormatterClosedException
      end
      comment "@(#)FormatterClosedException.java	1.2 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 136987 "GregorianCalendar"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import sun.util.calendar.BaseCalendar;
import sun.util.calendar.CalendarDate;
import sun.util.calendar.CalendarSystem;
import sun.util.calendar.CalendarUtils;
import sun.util.calendar.Era;
import sun.util.calendar.Gregorian;
import sun.util.calendar.JulianCalendar;
import sun.util.calendar.ZoneInfo;
${definition}"
      associated_classes
	class_ref 149531 // GregorianCalendar
      end
      comment "@(#)GregorianCalendar.java	1.90 06/07/31

Copyright 2005 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996-1998 - All Rights Reserved
(C) Copyright IBM Corp. 1996-1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 137115 "HashSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 149659 // HashSet
      end
      comment "@(#)HashSet.java	1.33 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 137243 "IdentityHashMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_classes
	class_ref 150171 // IdentityHashMap
      end
      comment "@(#)IdentityHashMap.java	1.23 05/09/02

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 137371 "IllegalFormatCodePointException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 151195 // IllegalFormatCodePointException
      end
      comment "@(#)IllegalFormatCodePointException.java	1.2 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 137499 "IllegalFormatConversionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 151323 // IllegalFormatConversionException
      end
      comment "@(#)IllegalFormatConversionException.java	1.3 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 137627 "IllegalFormatFlagsException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 151451 // IllegalFormatFlagsException
      end
      comment "@(#)IllegalFormatFlagsException.java	1.2 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 137755 "IllegalFormatPrecisionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 151579 // IllegalFormatPrecisionException
      end
      comment "@(#)IllegalFormatPrecisionException.java	1.4 04/06/07

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 137883 "IllegalFormatWidthException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 151707 // IllegalFormatWidthException
      end
      comment "@(#)IllegalFormatWidthException.java	1.4 04/06/07

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 138011 "NoSuchElementException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 151963 // NoSuchElementException
      end
      comment "@(#)NoSuchElementException.java	1.21 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 138139 "InputMismatchException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 151835 // InputMismatchException
      end
      comment "@(#)InputMismatchException.java	1.3 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 138267 "InvalidPropertiesFormatException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.NotSerializableException;
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 152091 // InvalidPropertiesFormatException
      end
      comment "1.3 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 138395 "JumboEnumSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 152347 // JumboEnumSet
      end
      comment "@(#)JumboEnumSet.java	1.8 04/05/28

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 138523 "LinkedHashSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 152859 // LinkedHashSet
      end
      comment "@(#)LinkedHashSet.java	1.14 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 138651 "ResourceBundle"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.lang.ref.Reference;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.WeakReference;
import sun.misc.SoftCache;
${definition}"
      associated_classes
	class_ref 153371 // ResourceBundle
      end
      comment "@(#)ResourceBundle.java	1.73 05/11/04

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1999 - All Rights Reserved

The original version of this source code and documentation
is copyrighted and owned by Taligent, Inc., a wholly-owned
subsidiary of IBM. These materials are provided under terms
of a License Agreement between Taligent and Sun. This technology
is protected by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 138779 "ListResourceBundle"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 153243 // ListResourceBundle
      end
      comment "@(#)ListResourceBundle.java	1.27 05/09/01

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

The original version of this source code and documentation
is copyrighted and owned by Taligent, Inc., a wholly-owned
subsidiary of IBM. These materials are provided under terms
of a License Agreement between Taligent and Sun. This technology
is protected by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 138907 "Locale"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.security.AccessController;
import java.text.MessageFormat;
import sun.security.action.GetPropertyAction;
import sun.text.resources.LocaleData;
${definition}"
      associated_classes
	class_ref 138907 // Locale
      end
      comment "@(#)Locale.java	1.79 04/05/10

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

The original version of this source code and documentation
is copyrighted and owned by Taligent, Inc., a wholly-owned
subsidiary of IBM. These materials are provided under terms
of a License Agreement between Taligent and Sun. This technology
is protected by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 139035 "MissingFormatArgumentException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 154139 // MissingFormatArgumentException
      end
      comment "@(#)MissingFormatArgumentException.java	1.2 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 139163 "MissingFormatWidthException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 154267 // MissingFormatWidthException
      end
      comment "@(#)MissingFormatWidthException.java	1.2 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 139291 "MissingResourceException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 154011 // MissingResourceException
      end
      comment "@(#)MissingResourceException.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

The original version of this source code and documentation
is copyrighted and owned by Taligent, Inc., a wholly-owned
subsidiary of IBM. These materials are provided under terms
of a License Agreement between Taligent and Sun. This technology
is protected by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 139419 "Observable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 154395 // Observable
      end
      comment "@(#)Observable.java	1.38 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 139547 "Observer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 154523 // Observer
      end
      comment "@(#)Observer.java	1.19 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 139675 "PriorityQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 154651 // PriorityQueue
      end
      comment "@(#)PriorityQueue.java	1.6 04/06/11

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 139803 "Properties"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.BufferedWriter;
${definition}"
      associated_classes
	class_ref 154907 // Properties
      end
      comment "@(#)Properties.java	1.84 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 139931 "PropertyPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.io.IOException;
import java.security.*;
import java.util.Map;
import java.util.HashMap;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Collections;
import java.io.ObjectStreamField;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import sun.security.util.SecurityConstants;
${definition}"
      associated_classes
	class_ref 155163 // PropertyPermission
	class_ref 155419 // PropertyPermissionCollection
      end
      comment "@(#)PropertyPermission.java	1.33 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 140059 "PropertyResourceBundle"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 155675 // PropertyResourceBundle
      end
      comment "@(#)PropertyResourceBundle.java	1.27 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

The original version of this source code and documentation
is copyrighted and owned by Taligent, Inc., a wholly-owned
subsidiary of IBM. These materials are provided under terms
of a License Agreement between Taligent and Sun. This technology
is protected by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc."
    end

    artifact 140187 "Random"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.util.concurrent.atomic.AtomicLong;
${definition}"
      associated_classes
	class_ref 139547 // Random
      end
      comment "@(#)Random.java	1.43 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 140315 "RegularEnumSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 155803 // RegularEnumSet
      end
      comment "@(#)RegularEnumSet.java	1.6 04/05/28

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 140443 "ResourceBundleEnumeration"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 156059 // ResourceBundleEnumeration
      end
      comment "@(#)ResourceBundleEnumeration.java	1.5 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 140571 "Scanner"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.regex.*;
import java.io.*;
import java.math.*;
import java.nio.*;
import java.nio.channels.*;
import java.nio.charset.*;
import java.text.*;
import java.util.Locale;
import sun.io.Converters;
import sun.misc.LRUCache;
${definition}"
      associated_classes
	class_ref 156187 // Scanner
      end
      comment "@(#)Scanner.java	1.15 04/07/15

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 140699 "TimeZone"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.lang.ref.SoftReference;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.text.DateFormatSymbols;
import java.util.concurrent.ConcurrentHashMap;
import sun.security.action.GetPropertyAction;
import sun.util.calendar.ZoneInfo;
import sun.util.calendar.ZoneInfoFile;
${definition}"
      associated_classes
	class_ref 138779 // TimeZone
      end
      comment "@(#)TimeZone.java	1.70 06/01/24

Copyright 2006 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 140827 "SimpleTimeZone"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.IOException;
import sun.util.calendar.CalendarSystem;
import sun.util.calendar.CalendarUtils;
import sun.util.calendar.BaseCalendar;
import sun.util.calendar.Gregorian;
${definition}"
      associated_classes
	class_ref 156315 // SimpleTimeZone
      end
      comment "@(#)SimpleTimeZone.java	1.49 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


(C) Copyright Taligent, Inc. 1996 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.
"
    end

    artifact 140955 "Vector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 153883 // Vector
      end
      comment "@(#)Vector.java	1.96 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 141083 "Stack"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 156571 // Stack
      end
      comment "@(#)Stack.java	1.28 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 141211 "StringTokenizer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.*;
${definition}"
      associated_classes
	class_ref 156699 // StringTokenizer
      end
      comment "@(#)StringTokenizer.java	1.34 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 141339 "Timer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Date;
${definition}"
      associated_classes
	class_ref 156827 // Timer
	class_ref 157083 // TimerThread
	class_ref 156955 // TaskQueue
      end
      comment "@(#)Timer.java	1.17 04/04/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 141467 "TimerTask"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 157211 // TimerTask
      end
      comment "@(#)TimerTask.java	1.10 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 141595 "TooManyListenersException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 157595 // TooManyListenersException
      end
      comment "@(#)TooManyListenersException.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 141723 "TreeSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 158875 // TreeSet
      end
      comment "@(#)TreeSet.java	1.32 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 141851 "UnknownFormatConversionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 159003 // UnknownFormatConversionException
      end
      comment "@(#)UnknownFormatConversionException.java	1.3 04/06/07

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 141979 "UnknownFormatFlagsException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 159131 // UnknownFormatFlagsException
      end
      comment "@(#)UnknownFormatFlagsException.java	1.2 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 142107 "UUID"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
${definition}"
      associated_classes
	class_ref 159259 // UUID
      end
      comment "@(#)UUID.java	1.14 04/07/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 142235 "XMLUtils"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import org.xml.sax.*;
import org.xml.sax.helpers.*;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
${definition}"
      associated_classes
	class_ref 159515 // XMLUtils
      end
      comment "@(#)XMLUtils.java	1.5 04/06/07

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end

  package_ref 138267 // concurrent

  package_ref 142619 // logging

  package_ref 151963 // zip

  package_ref 155419 // regex

  package_ref 180123 // jar

  package_ref 181915 // prefs
end
