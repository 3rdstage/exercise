class LoadFilesThread
!!!2241051.java!!!	LoadFilesThread(inout currentDirectory : File, in fid : int)
	    super("Basic L&F File Loading Thread");
	    this.currentDirectory = currentDirectory;
	    this.fid = fid;
!!!2241179.java!!!	invokeLater(inout runnable : Runnable) : void
	    runnables.addElement(runnable);
	    SwingUtilities.invokeLater(runnable);
!!!2241307.java!!!	run() : void
	    FileSystemView fileSystem = filechooser.getFileSystemView();

	    File[] list = fileSystem.getFiles(currentDirectory, filechooser.isFileHidingEnabled());

	    Vector<File> acceptsList = new Vector<File>();

	    if (isInterrupted()) {
		return;
	    }

	    // run through the file list, add directories and selectable files to fileCache
	    for (int i = 0; i < list.length; i++) {
		if(filechooser.accept(list[i])) {
		    acceptsList.addElement(list[i]);
		}
	    }

	    if (isInterrupted()) {
		return;
	    }

	    // First sort alphabetically by filename
	    sort(acceptsList);

	    Vector newDirectories = new Vector(50);
	    Vector newFiles = new Vector();
	    // run through list grabbing directories in chunks of ten
	    for(int i = 0; i < acceptsList.size(); i++) {
		File f = (File) acceptsList.elementAt(i);
		boolean isTraversable = filechooser.isTraversable(f);
		if (isTraversable) {
		    newDirectories.addElement(f);
		} else if (!isTraversable && filechooser.isFileSelectionEnabled()) {
		    newFiles.addElement(f);
		}
		if(isInterrupted()) {
		    return;
		}
	    }

	    Vector newFileCache = new Vector(newDirectories);
	    newFileCache.addAll(newFiles);

	    int newSize = newFileCache.size();
	    int oldSize = fileCache.size();

	    if (newSize > oldSize) {
		//see if interval is added
		int start = oldSize;
		int end = newSize;
		for (int i = 0; i < oldSize; i++) {
		    if (!newFileCache.get(i).equals(fileCache.get(i))) {
			start = i;
			for (int j = i; j < newSize; j++) {
			    if (newFileCache.get(j).equals(fileCache.get(i))) {
				end = j;
				break;
			    }
			}
			break;
		    }
		}
		if (start >= 0 && end > start
		    && newFileCache.subList(end, newSize).equals(fileCache.subList(start, oldSize))) {
		    if(isInterrupted()) {
		        return;
		    }
		    invokeLater(new DoChangeContents(newFileCache.subList(start, end), start, null, 0, fid));
		    newFileCache = null;
		}
	    } else if (newSize < oldSize) {
		//see if interval is removed
		int start = -1;
		int end = -1;
		for (int i = 0; i < newSize; i++) {
		    if (!newFileCache.get(i).equals(fileCache.get(i))) {
			start = i;
			end = i + oldSize - newSize;
			break;
		    }
		}
		if (start >= 0 && end > start
		    && fileCache.subList(end, oldSize).equals(newFileCache.subList(start, newSize))) {
		    if(isInterrupted()) {
		        return;
		    }
		    invokeLater(new DoChangeContents(null, 0, new Vector(fileCache.subList(start, end)),
						     start, fid));
		    newFileCache = null;
		}
	    }
	    if (newFileCache != null && !fileCache.equals(newFileCache)) {
	        if (isInterrupted()) {
		    cancelRunnables(runnables);
	        }
		invokeLater(new DoChangeContents(newFileCache, 0, fileCache, 0, fid));
	    }
!!!2241435.java!!!	cancelRunnables(inout runnables : Vector) : void
	    for(int i = 0; i < runnables.size(); i++) {
		((DoChangeContents)runnables.elementAt(i)).cancel();
	    }
!!!2241563.java!!!	cancelRunnables() : void
            cancelRunnables(runnables);
