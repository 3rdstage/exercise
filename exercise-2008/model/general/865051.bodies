class Scrollbar
!!!6350363.java!!!	Scrollbar()
	this(VERTICAL, 0, 10, 0, 100);
!!!6350491.java!!!	Scrollbar(in orientation : int)
        this(orientation, 0, 10, 0, 100);
!!!6350619.java!!!	Scrollbar(in orientation : int, in value : int, in visible : int, in minimum : int, in maximum : int)
        GraphicsEnvironment.checkHeadless();
	switch (orientation) {
	  case HORIZONTAL:
	  case VERTICAL:
	    this.orientation = orientation;
	    break;
	  default:
	    throw new IllegalArgumentException("illegal scrollbar orientation");
	}
	setValues(value, visible, minimum, maximum);
!!!6350747.java!!!	constructComponentName() : String
        synchronized (getClass()) {
	    return base + nameCounter++;
	}
!!!6350875.java!!!	addNotify() : void
        synchronized (getTreeLock()) {
	    if (peer == null) 
	        peer = getToolkit().createScrollbar(this);
	    super.addNotify();
	}
!!!6351003.java!!!	getOrientation() : int
	return orientation;
!!!6351131.java!!!	setOrientation(in orientation : int) : void
        synchronized (getTreeLock()) {
	    if (orientation == this.orientation) {
	        return;
	    }
	    switch (orientation) {
	        case HORIZONTAL:
	        case VERTICAL:
		    this.orientation = orientation;
		    break;
	        default:
		    throw new IllegalArgumentException("illegal scrollbar orientation");
	    }
	    /* Create a new peer with the specified orientation. */
	    if (peer != null) {
		removeNotify();
		addNotify();
		invalidate();
	    }
	}
        if (accessibleContext != null) {
            accessibleContext.firePropertyChange(
                    AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
                    ((orientation == VERTICAL)
                     ? AccessibleState.HORIZONTAL : AccessibleState.VERTICAL),
                    ((orientation == VERTICAL) 
                     ? AccessibleState.VERTICAL : AccessibleState.HORIZONTAL));
        }
!!!6351259.java!!!	getValue() : int
	return value;
!!!6351387.java!!!	setValue(in newValue : int) : void
        // Use setValues so that a consistent policy relating
        // minimum, maximum, visible amount, and value is enforced.
        setValues(newValue, visibleAmount, minimum, maximum);
!!!6351515.java!!!	getMinimum() : int
	return minimum;
!!!6351643.java!!!	setMinimum(in newMinimum : int) : void
        // No checks are necessary in this method since minimum is 
        // the first variable checked in the setValues function.  

        // Use setValues so that a consistent policy relating 
        // minimum, maximum, visible amount, and value is enforced.
        setValues(value, visibleAmount, newMinimum, maximum);
!!!6351771.java!!!	getMaximum() : int
	return maximum;
!!!6351899.java!!!	setMaximum(in newMaximum : int) : void
        // minimum is checked first in setValues, so we need to 
        // enforce minimum and maximum checks here.  
        if (newMaximum == Integer.MIN_VALUE) {
            newMaximum = Integer.MIN_VALUE + 1;
        }

        if (minimum >= newMaximum) {
            minimum = newMaximum - 1;
        }

        // Use setValues so that a consistent policy relating 
        // minimum, maximum, visible amount, and value is enforced.
        setValues(value, visibleAmount, minimum, newMaximum);
!!!6352027.java!!!	getVisibleAmount() : int
	return getVisible();
!!!6352155.java!!!	getVisible() : int
	return visibleAmount;
!!!6352283.java!!!	setVisibleAmount(in newAmount : int) : void
        // Use setValues so that a consistent policy relating
        // minimum, maximum, visible amount, and value is enforced.
        setValues(value, newAmount, minimum, maximum);
!!!6352411.java!!!	setUnitIncrement(in v : int) : void
	setLineIncrement(v);
!!!6352539.java!!!	setLineIncrement(in v : int) : void
        int tmp = (v < 1) ? 1 : v; 

        if (lineIncrement == tmp) {
            return; 
        }
        lineIncrement = tmp; 

        ScrollbarPeer peer = (ScrollbarPeer)this.peer;
        if (peer != null) {
            peer.setLineIncrement(lineIncrement);
        }
!!!6352667.java!!!	getUnitIncrement() : int
	return getLineIncrement();
!!!6352795.java!!!	getLineIncrement() : int
	return lineIncrement;
!!!6352923.java!!!	setBlockIncrement(in v : int) : void
	setPageIncrement(v);
!!!6353051.java!!!	setPageIncrement(in v : int) : void
        int tmp = (v < 1) ? 1 : v; 

        if (pageIncrement == tmp) {
            return; 
        }
        pageIncrement = tmp; 

        ScrollbarPeer peer = (ScrollbarPeer)this.peer;
        if (peer != null) {
            peer.setPageIncrement(pageIncrement);
        }
!!!6353179.java!!!	getBlockIncrement() : int
	return getPageIncrement();
!!!6353307.java!!!	getPageIncrement() : int
	return pageIncrement;
!!!6353435.java!!!	setValues(in value : int, in visible : int, in minimum : int, in maximum : int) : void
        int oldValue;
        synchronized (this) {
            if (minimum == Integer.MAX_VALUE) {
                minimum = Integer.MAX_VALUE - 1;
            }
            if (maximum <= minimum) {
                maximum = minimum + 1;
            }

            long maxMinusMin = (long) maximum - (long) minimum;
            if (maxMinusMin > Integer.MAX_VALUE) {
                maxMinusMin = Integer.MAX_VALUE;
                maximum = minimum + (int) maxMinusMin;
            }
            if (visible > (int) maxMinusMin) {
                visible = (int) maxMinusMin;
            }
            if (visible < 1) {
                visible = 1;
            }

            if (value < minimum) {
                value = minimum;
            }
            if (value > maximum - visible) {
                value = maximum - visible;
            }

            oldValue = this.value;
            this.value = value;
            this.visibleAmount = visible;
            this.minimum = minimum;
            this.maximum = maximum;
            ScrollbarPeer peer = (ScrollbarPeer)this.peer;
            if (peer != null) {
                peer.setValues(value, visibleAmount, minimum, maximum);
            }
        }

        if ((oldValue != value) && (accessibleContext != null))  {
            accessibleContext.firePropertyChange(
                    AccessibleContext.ACCESSIBLE_VALUE_PROPERTY,
                    new Integer(oldValue),
                    new Integer(value));
        }
!!!6353563.java!!!	getValueIsAdjusting() : boolean
 
        return isAdjusting; 
!!!6353691.java!!!	setValueIsAdjusting(inout b : boolean) : void
	boolean oldValue;

	synchronized (this) {
	    oldValue = isAdjusting;
	    isAdjusting = b;
	}

	if ((oldValue != b) && (accessibleContext != null)) {
            accessibleContext.firePropertyChange(
                    AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
                    ((oldValue) ? AccessibleState.BUSY : null),
                    ((b) ? AccessibleState.BUSY : null));
	}
!!!6353819.java!!!	addAdjustmentListener(inout l : AdjustmentListener) : void
	if (l == null) {
	    return;
	}
	adjustmentListener = AWTEventMulticaster.add(adjustmentListener, l);
        newEventsOnly = true;
!!!6353947.java!!!	removeAdjustmentListener(inout l : AdjustmentListener) : void
	if (l == null) {
	    return;
	}
	adjustmentListener = AWTEventMulticaster.remove(adjustmentListener, l);
!!!6354075.java!!!	getAdjustmentListeners() : AdjustmentListener
        return (AdjustmentListener[])(getListeners(AdjustmentListener.class));
!!!6354203.java!!!	getListeners(inout listenerType : Class) : T
	EventListener l = null; 
	if  (listenerType == AdjustmentListener.class) { 
	    l = adjustmentListener;
	} else {
	    return super.getListeners(listenerType);
	}
	return AWTEventMulticaster.getListeners(l, listenerType);
!!!6354331.java!!!	eventEnabled(inout e : AWTEvent) : boolean
        if (e.id == AdjustmentEvent.ADJUSTMENT_VALUE_CHANGED) {
            if ((eventMask & AWTEvent.ADJUSTMENT_EVENT_MASK) != 0 ||
                adjustmentListener != null) {
                return true;
            }
            return false;
        }
        return super.eventEnabled(e);
!!!6354459.java!!!	processEvent(inout e : AWTEvent) : void
        if (e instanceof AdjustmentEvent) {
            processAdjustmentEvent((AdjustmentEvent)e);
            return;
        }
	super.processEvent(e);
!!!6354587.java!!!	processAdjustmentEvent(inout e : AdjustmentEvent) : void
        AdjustmentListener listener = adjustmentListener;
        if (listener != null) {
            listener.adjustmentValueChanged(e);
        }
!!!6354715.java!!!	paramString() : String
	return super.paramString() +
	    ",val=" + value +
	    ",vis=" + visibleAmount +
	    ",min=" + minimum +
	    ",max=" + maximum +
	    ((orientation == VERTICAL) ? ",vert" : ",horz") +
	    ",isAdjusting=" + isAdjusting;
!!!6354843.java!!!	writeObject(inout s : ObjectOutputStream) : void
      s.defaultWriteObject();

      AWTEventMulticaster.save(s, adjustmentListenerK, adjustmentListener);
      s.writeObject(null);
!!!6354971.java!!!	readObject(inout s : ObjectInputStream) : void
      GraphicsEnvironment.checkHeadless();
      s.defaultReadObject();

      Object keyOrNull;
      while(null != (keyOrNull = s.readObject())) {
	String key = ((String)keyOrNull).intern();

	if (adjustmentListenerK == key)
	  addAdjustmentListener((AdjustmentListener)(s.readObject()));

	else // skip value for unrecognized key
	  s.readObject();
      }
!!!6355099.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleAWTScrollBar();
        }
        return accessibleContext;
