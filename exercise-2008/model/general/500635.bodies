class lalr_item_set
!!!3076379.java!!!	lalr_item_set(inout other : lalr_item_set)
      not_null(other);
      _all = (Hashtable)other._all.clone();
!!!3076507.java!!!	all() : Enumeration
return _all.elements();
!!!3076635.java!!!	size() : int
return _all.size();
!!!3076763.java!!!	contains(inout itm : lalr_item) : boolean
return _all.containsKey(itm);
!!!3076891.java!!!	find(inout itm : lalr_item) : lalr_item
return (lalr_item)_all.get(itm);
!!!3077019.java!!!	is_subset_of(inout other : lalr_item_set) : boolean
      not_null(other);

      /* walk down our set and make sure every element is in the other */
      for (Enumeration e = all(); e.hasMoreElements(); )
	if (!other.contains((lalr_item)e.nextElement()))
	  return false;

      /* they were all there */
      return true;
!!!3077147.java!!!	is_superset_of(inout other : lalr_item_set) : boolean
      not_null(other);
      return other.is_subset_of(this);
!!!3077275.java!!!	add(inout itm : lalr_item) : lalr_item
      lalr_item other;

      not_null(itm); 

      /* see if an item with a matching core is already there */
      other = (lalr_item)_all.get(itm);

      /* if so, merge this lookahead into the original and leave it */
      if (other != null)
	{
	  other.lookahead().add(itm.lookahead());
	  return other;
	}
      /* otherwise we just go in the set */
      else
	{
          /* invalidate cached hashcode */
          hashcode_cache = null;

          _all.put(itm,itm);
	  return itm;
	}
!!!3077403.java!!!	remove(inout itm : lalr_item) : void
      not_null(itm); 

      /* invalidate cached hashcode */
      hashcode_cache = null;

      /* remove it from hash table implementing set */
      _all.remove(itm);
!!!3077531.java!!!	add(inout other : lalr_item_set) : void
      not_null(other);

      /* walk down the other set and do the adds individually */
      for (Enumeration e = other.all(); e.hasMoreElements(); )
	add((lalr_item)e.nextElement());
!!!3077659.java!!!	remove(inout other : lalr_item_set) : void
      not_null(other);

      /* walk down the other set and do the removes individually */
      for (Enumeration e = other.all(); e.hasMoreElements(); )
	remove((lalr_item)e.nextElement());
!!!3077787.java!!!	get_one() : lalr_item
      Enumeration the_set;
      lalr_item result;

      the_set = all();
      if (the_set.hasMoreElements())
	{
          result = (lalr_item)the_set.nextElement();
          remove(result);
	  return result;
	}
      else
	return null;
!!!3077915.java!!!	not_null(inout obj : Object) : void
      if (obj == null) 
	throw new internal_error("Null object used in set operation");
!!!3078043.java!!!	compute_closure() : void
      lalr_item_set consider;
      lalr_item     itm, new_itm, add_itm;
      non_terminal  nt;
      terminal_set  new_lookaheads;
      Enumeration   p;
      production    prod;
      boolean       need_prop;



      /* invalidate cached hashcode */
      hashcode_cache = null;

      /* each current element needs to be considered */
      consider = new lalr_item_set(this);

      /* repeat this until there is nothing else to consider */
      while (consider.size() > 0)
	{
	  /* get one item to consider */
	  itm = consider.get_one(); 

	  /* do we have a dot before a non terminal */
	  nt = itm.dot_before_nt();
	  if (nt != null)
	    {
	      /* create the lookahead set based on first after dot */
	      new_lookaheads = itm.calc_lookahead(itm.lookahead());

	      /* are we going to need to propagate our lookahead to new item */
	      need_prop = itm.lookahead_visible();

	      /* create items for each production of that non term */
	      for (p = nt.productions(); p.hasMoreElements(); )
		{
		  prod = (production)p.nextElement();

		  /* create new item with dot at start and that lookahead */
		  new_itm = new lalr_item(prod, 
					     new terminal_set(new_lookaheads));

		  /* add/merge item into the set */
		  add_itm = add(new_itm);
		  /* if propagation is needed link to that item */
		  if (need_prop)
		    itm.add_propagate(add_itm);

		  /* was this was a new item*/
		  if (add_itm == new_itm)
		    {
		      /* that may need further closure, consider it also */ 
		      consider.add(new_itm);
		    } 
		} 
	    } 
	} 
!!!3078171.java!!!	equals(inout other : lalr_item_set) : boolean
      if (other == null || other.size() != size()) return false;

      /* once we know they are the same size, then improper subset does test */
      try {
        return is_subset_of(other);
      } catch (internal_error e) {
	/* can't throw error from here (because superclass doesn't) so crash */
	e.crash();
	return false;
      }

!!!3078299.java!!!	equals(inout other : Object) : boolean
      if (!(other instanceof lalr_item_set))
	return false;
      else
	return equals((lalr_item_set)other);
!!!3078427.java!!!	hashCode() : int
      int result = 0;
      Enumeration e;
      int cnt;

      /* only compute a new one if we don't have it cached */
      if (hashcode_cache == null)
	{
          /* hash together codes from at most first 5 elements */
	  //   CSA fix! we'd *like* to hash just a few elements, but
	  //   that means equal sets will have inequal hashcodes, which
	  //   we're not allowed (by contract) to do.  So hash them all.
          for (e = all(), cnt=0 ; e.hasMoreElements() /*&& cnt<5*/; cnt++)
	    result ^= ((lalr_item)e.nextElement()).hashCode();

	  hashcode_cache = new Integer(result);
	}

      return hashcode_cache.intValue();
!!!3078555.java!!!	toString() : String
      StringBuffer result = new StringBuffer();

      result.append("{\n");
      for (Enumeration e=all(); e.hasMoreElements(); ) 
 	{
 	  result.append("  " + (lalr_item)e.nextElement() + "\n");
 	}
       result.append("}");

       return result.toString();
