class IIOMetadataFormatImpl
!!!1936155.java!!!	IIOMetadataFormatImpl(in rootName : String, in childPolicy : int)
        if (rootName == null) {
            throw new IllegalArgumentException("rootName == null!");
        }
        if (childPolicy < CHILD_POLICY_EMPTY ||
            childPolicy > CHILD_POLICY_MAX ||
            childPolicy == CHILD_POLICY_REPEAT) {
            throw new IllegalArgumentException("Invalid value for childPolicy!");
        }

        this.rootName = rootName;

        Element root = new Element();
        root.elementName = rootName;
        root.childPolicy = childPolicy;

        elementMap.put(rootName, root);
!!!1936283.java!!!	IIOMetadataFormatImpl(in rootName : String, in minChildren : int, in maxChildren : int)
        if (rootName == null) {
            throw new IllegalArgumentException("rootName == null!");
        }
        if (minChildren < 0) {
            throw new IllegalArgumentException("minChildren < 0!");
        }
        if (minChildren > maxChildren) {
            throw new IllegalArgumentException("minChildren > maxChildren!");
        }

        Element root = new Element();
        root.elementName = rootName;
        root.childPolicy = CHILD_POLICY_REPEAT;
        root.minChildren = minChildren;
        root.maxChildren = maxChildren;

        this.rootName = rootName;
        elementMap.put(rootName, root);
!!!1936411.java!!!	setResourceBaseName(in resourceBaseName : String) : void
        if (resourceBaseName == null) {
            throw new IllegalArgumentException("resourceBaseName == null!");
        }
        this.resourceBaseName = resourceBaseName;
!!!1936539.java!!!	getResourceBaseName() : String
        return resourceBaseName;
!!!1936667.java!!!	getElement(in elementName : String, inout mustAppear : boolean) : Element
        if (mustAppear && (elementName == null)) {
            throw new IllegalArgumentException("element name is null!");
        }
        Element element = (Element)elementMap.get(elementName);
        if (mustAppear && (element == null)) {
            throw new IllegalArgumentException("No such element: " +
                                               elementName);
        }
        return element;
!!!1936795.java!!!	getElement(in elementName : String) : Element
        return getElement(elementName, true);
!!!1936923.java!!!	getAttribute(in elementName : String, in attrName : String) : Attribute
        Element element = getElement(elementName);
        Attribute attr = (Attribute)element.attrMap.get(attrName);
        if (attr == null) {
            throw new IllegalArgumentException("No such attribute \"" +
                                               attrName + "\"!");
        }
        return attr;
!!!1937051.java!!!	addElement(in elementName : String, in parentName : String, in childPolicy : int) : void
        Element parent = getElement(parentName);
        if (childPolicy < CHILD_POLICY_EMPTY ||
            childPolicy > CHILD_POLICY_MAX ||
            childPolicy == CHILD_POLICY_REPEAT) {
            throw new IllegalArgumentException
                ("Invalid value for childPolicy!");
        }

        Element element = new Element();
        element.elementName = elementName;
        element.childPolicy = childPolicy;

        parent.childList.add(elementName);
        element.parentList.add(parentName);

        elementMap.put(elementName, element);
!!!1937179.java!!!	addElement(in elementName : String, in parentName : String, in minChildren : int, in maxChildren : int) : void
        Element parent = getElement(parentName);
        if (minChildren < 0) {
            throw new IllegalArgumentException("minChildren < 0!");
        }
        if (minChildren > maxChildren) {
            throw new IllegalArgumentException("minChildren > maxChildren!");
        }

        Element element = new Element();
        element.elementName = elementName;
        element.childPolicy = CHILD_POLICY_REPEAT;
        element.minChildren = minChildren;
        element.maxChildren = maxChildren;

        parent.childList.add(elementName);
        element.parentList.add(parentName);

        elementMap.put(elementName, element);
!!!1937307.java!!!	addChildElement(in elementName : String, in parentName : String) : void
        Element parent = getElement(parentName);
        Element element = getElement(elementName);
        parent.childList.add(elementName);
        element.parentList.add(parentName);
!!!1937435.java!!!	removeElement(in elementName : String) : void
        Element element = getElement(elementName, false);
        if (element != null) {            
            Iterator iter = element.parentList.iterator();
            while (iter.hasNext()) {
                String parentName = (String)iter.next();
                Element parent = getElement(parentName, false);
                if (parent != null) {
                    parent.childList.remove(elementName);
                }
            }
            elementMap.remove(elementName);
        }
!!!1937563.java!!!	addAttribute(in elementName : String, in attrName : String, in dataType : int, inout required : boolean, in defaultValue : String) : void
        Element element = getElement(elementName);
        if (attrName == null) {
            throw new IllegalArgumentException("attrName == null!");
        }
        if (dataType < DATATYPE_STRING || dataType > DATATYPE_DOUBLE) {
            throw new IllegalArgumentException("Invalid value for dataType!");
        }

        Attribute attr = new Attribute();
        attr.attrName = attrName;
        attr.valueType = VALUE_ARBITRARY;
        attr.dataType = dataType;
        attr.required = required;
        attr.defaultValue = defaultValue;

        element.attrList.add(attrName);
        element.attrMap.put(attrName, attr);
!!!1937691.java!!!	addAttribute(in elementName : String, in attrName : String, in dataType : int, inout required : boolean, in defaultValue : String, inout enumeratedValues : List) : void
        Element element = getElement(elementName);
        if (attrName == null) {
            throw new IllegalArgumentException("attrName == null!");
        }
        if (dataType < DATATYPE_STRING || dataType > DATATYPE_DOUBLE) {
            throw new IllegalArgumentException("Invalid value for dataType!");
        }
        if (enumeratedValues == null) {
            throw new IllegalArgumentException("enumeratedValues == null!");
        }
        if (enumeratedValues.size() == 0) {
            throw new IllegalArgumentException("enumeratedValues is empty!");
        }
        Iterator iter = enumeratedValues.iterator();
        while (iter.hasNext()) {
            Object o = iter.next();
            if (o == null) {
                throw new IllegalArgumentException
                    ("enumeratedValues contains a null!");
            }
            if (!(o instanceof String)) {
                throw new IllegalArgumentException
                    ("enumeratedValues contains a non-String value!");
            }
        }

        Attribute attr = new Attribute();
        attr.attrName = attrName;
        attr.valueType = VALUE_ENUMERATION;
        attr.dataType = dataType;
        attr.required = required;
        attr.defaultValue = defaultValue;
        attr.enumeratedValues = enumeratedValues;

        element.attrList.add(attrName);
        element.attrMap.put(attrName, attr);
!!!1937819.java!!!	addAttribute(in elementName : String, in attrName : String, in dataType : int, inout required : boolean, in defaultValue : String, in minValue : String, in maxValue : String, inout minInclusive : boolean, inout maxInclusive : boolean) : void
        Element element = getElement(elementName);
        if (attrName == null) {
            throw new IllegalArgumentException("attrName == null!");
        }
        if (dataType < DATATYPE_STRING || dataType > DATATYPE_DOUBLE) {
            throw new IllegalArgumentException("Invalid value for dataType!");
        }

        Attribute attr = new Attribute();
        attr.attrName = attrName;
        attr.valueType = VALUE_RANGE;
        if (minInclusive) {
            attr.valueType |= VALUE_RANGE_MIN_INCLUSIVE_MASK;
        }
        if (maxInclusive) {
            attr.valueType |= VALUE_RANGE_MAX_INCLUSIVE_MASK;
        }
        attr.dataType = dataType;
        attr.required = required;
        attr.defaultValue = defaultValue;
        attr.minValue = minValue;
        attr.maxValue = maxValue;

        element.attrList.add(attrName);
        element.attrMap.put(attrName, attr);
!!!1937947.java!!!	addAttribute(in elementName : String, in attrName : String, in dataType : int, inout required : boolean, in listMinLength : int, in listMaxLength : int) : void
        Element element = getElement(elementName);
        if (attrName == null) {
            throw new IllegalArgumentException("attrName == null!");
        }
        if (dataType < DATATYPE_STRING || dataType > DATATYPE_DOUBLE) {
            throw new IllegalArgumentException("Invalid value for dataType!");
        }
        if (listMinLength < 0 || listMinLength > listMaxLength) {
            throw new IllegalArgumentException("Invalid list bounds!");
        }

        Attribute attr = new Attribute();
        attr.attrName = attrName;
        attr.valueType = VALUE_LIST;
        attr.dataType = dataType;
        attr.required = required;
        attr.listMinLength = listMinLength;
        attr.listMaxLength = listMaxLength;

        element.attrList.add(attrName);
        element.attrMap.put(attrName, attr);
!!!1938075.java!!!	addBooleanAttribute(in elementName : String, in attrName : String, inout hasDefaultValue : boolean, inout defaultValue : boolean) : void
        List values = new ArrayList();
        values.add("TRUE");
        values.add("FALSE");
        
        String dval = null;
        if (hasDefaultValue) {
            dval = defaultValue ? "TRUE" : "FALSE";
        }
        addAttribute(elementName,
                     attrName,
                     DATATYPE_BOOLEAN,
                     true,
                     dval,
                     values);
!!!1938203.java!!!	removeAttribute(in elementName : String, in attrName : String) : void
        Element element = getElement(elementName);
        element.attrList.remove(attrName);
        element.attrMap.remove(attrName);
!!!1938331.java!!!	addObjectValue(in elementName : String, inout classType : Class, inout required : boolean, inout defaultValue : T) : void
        Element element = getElement(elementName);
        ObjectValue obj = new ObjectValue();
        obj.valueType = VALUE_ARBITRARY;
        obj.classType = classType;
        obj.defaultValue = defaultValue;

        element.objectValue = obj;
!!!1938459.java!!!	addObjectValue(in elementName : String, inout classType : Class, inout required : boolean, inout defaultValue : T, inout enumeratedValues : List) : void
        Element element = getElement(elementName);
        if (enumeratedValues == null) {
            throw new IllegalArgumentException("enumeratedValues == null!");
        }
        if (enumeratedValues.size() == 0) {
            throw new IllegalArgumentException("enumeratedValues is empty!");
        }
        Iterator iter = enumeratedValues.iterator();
        while (iter.hasNext()) {
            Object o = iter.next();
            if (o == null) {
                throw new IllegalArgumentException("enumeratedValues contains a null!");
            }
            if (!classType.isInstance(o)) {
                throw new IllegalArgumentException("enumeratedValues contains a value not of class classType!");
            }
        }

        ObjectValue obj = new ObjectValue();
        obj.valueType = VALUE_ENUMERATION;
        obj.classType = classType;
        obj.defaultValue = defaultValue;
        obj.enumeratedValues = enumeratedValues;

        element.objectValue = obj;
!!!1938587.java!!!	addObjectValue(in elementName : String, inout classType : Class, inout defaultValue : T, inout minValue : Comparable, inout maxValue : Comparable, inout minInclusive : boolean, inout maxInclusive : boolean) : void
        Element element = getElement(elementName);
        ObjectValue obj = new ObjectValue();
        obj.valueType = VALUE_RANGE;
        if (minInclusive) {
            obj.valueType |= VALUE_RANGE_MIN_INCLUSIVE_MASK;
        }
        if (maxInclusive) {
            obj.valueType |= VALUE_RANGE_MAX_INCLUSIVE_MASK;
        }
        obj.classType = classType;
        obj.defaultValue = defaultValue;
        obj.minValue = minValue;
        obj.maxValue = maxValue;

        element.objectValue = obj;
!!!1938715.java!!!	addObjectValue(in elementName : String, inout classType : Class, in arrayMinLength : int, in arrayMaxLength : int) : void
        Element element = getElement(elementName);
        ObjectValue obj = new ObjectValue();
        obj.valueType = VALUE_LIST;
        obj.classType = classType;
        obj.arrayMinLength = arrayMinLength;
        obj.arrayMaxLength = arrayMaxLength;

        element.objectValue = obj;
!!!1938843.java!!!	removeObjectValue(in elementName : String) : void
        Element element = getElement(elementName);
        element.objectValue = null;
!!!1938971.java!!!	getRootName() : String
        return rootName;
!!!1939227.java!!!	getElementMinChildren(in elementName : String) : int
        Element element = getElement(elementName);
        if (element.childPolicy != CHILD_POLICY_REPEAT) {
            throw new IllegalArgumentException("Child policy not CHILD_POLICY_REPEAT!");
        }
        return element.minChildren;
!!!1939355.java!!!	getElementMaxChildren(in elementName : String) : int
        Element element = getElement(elementName);
        if (element.childPolicy != CHILD_POLICY_REPEAT) {
            throw new IllegalArgumentException("Child policy not CHILD_POLICY_REPEAT!");
        }
        return element.maxChildren;
!!!1939483.java!!!	getResource(in key : String, inout locale : Locale) : String
        if (locale == null) {
            locale = Locale.getDefault();
        }

        /**
         * If an applet supplies an implementation of IIOMetadataFormat and
         * resource bundles, then the resource bundle will need to be
         * accessed via the applet class loader. So first try the context
         * class loader to locate the resource bundle.
         * If that throws MissingResourceException, then try the
         * system class loader.
         */
        ClassLoader loader = (ClassLoader)
            java.security.AccessController.doPrivileged(
                new java.security.PrivilegedAction() {
                   public Object run() {
                       return Thread.currentThread().getContextClassLoader();
                   }
            });

        ResourceBundle bundle = null;
        try {
            bundle = ResourceBundle.getBundle(resourceBaseName,
                                              locale, loader);
        } catch (MissingResourceException mre) {
            try {
                bundle = ResourceBundle.getBundle(resourceBaseName, locale);
            } catch (MissingResourceException mre1) {
                return null;
            }
        }

        try {
            return bundle.getString(key);
        } catch (MissingResourceException e) {
            return null;
        }
!!!1939611.java!!!	getElementDescription(in elementName : String, inout locale : Locale) : String
        Element element = getElement(elementName);
        return getResource(elementName, locale);
!!!1939739.java!!!	getChildPolicy(in elementName : String) : int
        Element element = getElement(elementName);
        return element.childPolicy;
!!!1939867.java!!!	getChildNames(in elementName : String) : String
        Element element = getElement(elementName);
        if (element.childPolicy == CHILD_POLICY_EMPTY) {
            return null;
        }
        return (String[])element.childList.toArray(new String[0]);
!!!1939995.java!!!	getAttributeNames(in elementName : String) : String
        Element element = getElement(elementName);
        List names = element.attrList;

        String[] result = new String[names.size()];
        return (String[])names.toArray(result);
!!!1940123.java!!!	getAttributeValueType(in elementName : String, in attrName : String) : int
        Attribute attr = getAttribute(elementName, attrName);
        return attr.valueType;
!!!1940251.java!!!	getAttributeDataType(in elementName : String, in attrName : String) : int
 
        Attribute attr = getAttribute(elementName, attrName);
        return attr.dataType;
!!!1940379.java!!!	isAttributeRequired(in elementName : String, in attrName : String) : boolean
        Attribute attr = getAttribute(elementName, attrName);
        return attr.required;
!!!1940507.java!!!	getAttributeDefaultValue(in elementName : String, in attrName : String) : String
        Attribute attr = getAttribute(elementName, attrName);
        return attr.defaultValue;
!!!1940635.java!!!	getAttributeEnumerations(in elementName : String, in attrName : String) : String
        Attribute attr = getAttribute(elementName, attrName);
        if (attr.valueType != VALUE_ENUMERATION) {
            throw new IllegalArgumentException
                ("Attribute not an enumeration!");
        }
        
        List values = attr.enumeratedValues;
        Iterator iter = values.iterator();
        String[] result = new String[values.size()];
        return (String[])values.toArray(result);
!!!1940763.java!!!	getAttributeMinValue(in elementName : String, in attrName : String) : String
        Attribute attr = getAttribute(elementName, attrName);
        if (attr.valueType != VALUE_RANGE &&
            attr.valueType != VALUE_RANGE_MIN_INCLUSIVE &&
            attr.valueType != VALUE_RANGE_MAX_INCLUSIVE &&
            attr.valueType != VALUE_RANGE_MIN_MAX_INCLUSIVE) {
            throw new IllegalArgumentException("Attribute not a range!");
        }

        return attr.minValue;
!!!1940891.java!!!	getAttributeMaxValue(in elementName : String, in attrName : String) : String
        Attribute attr = getAttribute(elementName, attrName);
        if (attr.valueType != VALUE_RANGE &&
            attr.valueType != VALUE_RANGE_MIN_INCLUSIVE &&
            attr.valueType != VALUE_RANGE_MAX_INCLUSIVE &&
            attr.valueType != VALUE_RANGE_MIN_MAX_INCLUSIVE) {
            throw new IllegalArgumentException("Attribute not a range!");
        }

        return attr.maxValue;
!!!1941019.java!!!	getAttributeListMinLength(in elementName : String, in attrName : String) : int
        Attribute attr = getAttribute(elementName, attrName);
        if (attr.valueType != VALUE_LIST) {
            throw new IllegalArgumentException("Attribute not a list!");
        }

        return attr.listMinLength;
!!!1941147.java!!!	getAttributeListMaxLength(in elementName : String, in attrName : String) : int
        Attribute attr = getAttribute(elementName, attrName);
        if (attr.valueType != VALUE_LIST) {
            throw new IllegalArgumentException("Attribute not a list!");
        }

        return attr.listMaxLength;
!!!1941275.java!!!	getAttributeDescription(in elementName : String, in attrName : String, inout locale : Locale) : String
        Element element = getElement(elementName);
        if (attrName == null) {
            throw new IllegalArgumentException("attrName == null!");
        }
        Attribute attr = (Attribute)element.attrMap.get(attrName);
        if (attr == null) {
            throw new IllegalArgumentException("No such attribute!");
        }

        String key = elementName + "/" + attrName;
        return getResource(key, locale);
!!!1941403.java!!!	getObjectValue(in elementName : String) : ObjectValue
        Element element = getElement(elementName);
        ObjectValue objv = (ObjectValue)element.objectValue;
        if (objv == null) {
            throw new IllegalArgumentException("No object within element " +
                                               elementName + "!");
        }
        return objv;
!!!1941531.java!!!	getObjectValueType(in elementName : String) : int
        Element element = getElement(elementName);
        ObjectValue objv = (ObjectValue)element.objectValue;
        if (objv == null) {
            return VALUE_NONE;
        }
        return objv.valueType;
!!!1941659.java!!!	getObjectClass(in elementName : String) : Class
        ObjectValue objv = getObjectValue(elementName);
        return objv.classType;
!!!1941787.java!!!	getObjectDefaultValue(in elementName : String) : Object
        ObjectValue objv = getObjectValue(elementName);
        return objv.defaultValue;
!!!1941915.java!!!	getObjectEnumerations(in elementName : String) : Object
        ObjectValue objv = getObjectValue(elementName);
        if (objv.valueType != VALUE_ENUMERATION) {
            throw new IllegalArgumentException("Not an enumeration!");
        }
        List vlist = objv.enumeratedValues;
        Object[] values = new Object[vlist.size()];
        return vlist.toArray(values);
!!!1942043.java!!!	getObjectMinValue(in elementName : String) : Comparable
        ObjectValue objv = getObjectValue(elementName);
        if ((objv.valueType & VALUE_RANGE) != VALUE_RANGE) {
            throw new IllegalArgumentException("Not a range!");
        }
        return objv.minValue;
!!!1942171.java!!!	getObjectMaxValue(in elementName : String) : Comparable
        ObjectValue objv = getObjectValue(elementName);
        if ((objv.valueType & VALUE_RANGE) != VALUE_RANGE) {
            throw new IllegalArgumentException("Not a range!");
        }
        return objv.maxValue;
!!!1942299.java!!!	getObjectArrayMinLength(in elementName : String) : int
        ObjectValue objv = getObjectValue(elementName);
        if (objv.valueType != VALUE_LIST) {
            throw new IllegalArgumentException("Not a list!");
        }
        return objv.arrayMinLength;
!!!1942427.java!!!	getObjectArrayMaxLength(in elementName : String) : int
        ObjectValue objv = getObjectValue(elementName);
        if (objv.valueType != VALUE_LIST) {
            throw new IllegalArgumentException("Not a list!");
        }
        return objv.arrayMaxLength;
!!!1942555.java!!!	createStandardFormat() : void
        if (standardFormat == null) {
            standardFormat = new StandardMetadataFormat();
        }
!!!1942683.java!!!	getStandardFormatInstance() : IIOMetadataFormat
        createStandardFormat();
        return standardFormat;
