class BasicParserConfiguration
!!!5309595.java!!!	BasicParserConfiguration()
        this(null, null);
!!!5309723.java!!!	BasicParserConfiguration(inout symbolTable : SymbolTable)
        this(symbolTable, null);
!!!5309851.java!!!	BasicParserConfiguration(inout symbolTable : SymbolTable, inout parentSettings : XMLComponentManager)
        super(parentSettings);

        // create a vector to hold all the components in use
        fComponents = new ArrayList();

        // create storage for recognized features and properties
        fRecognizedFeatures = new ArrayList();
        fRecognizedProperties = new ArrayList();

        // create table for features and properties
        fFeatures = new HashMap();
        fProperties = new HashMap();

        // add default recognized features
        final String[] recognizedFeatures = {
        	PARSER_SETTINGS,
            VALIDATION,                 
            NAMESPACES, 
            EXTERNAL_GENERAL_ENTITIES,  
            EXTERNAL_PARAMETER_ENTITIES,
        };
        addRecognizedFeatures(recognizedFeatures);
        fFeatures.put(PARSER_SETTINGS, Boolean.TRUE);
        // set state for default features
		fFeatures.put(VALIDATION, Boolean.FALSE);
		fFeatures.put(NAMESPACES, Boolean.TRUE);
		fFeatures.put(EXTERNAL_GENERAL_ENTITIES, Boolean.TRUE);
		fFeatures.put(EXTERNAL_PARAMETER_ENTITIES, Boolean.TRUE);

        // add default recognized properties
        final String[] recognizedProperties = {
            XML_STRING,     
            SYMBOL_TABLE,
            ERROR_HANDLER,  
            ENTITY_RESOLVER,
        };
        addRecognizedProperties(recognizedProperties);

        if (symbolTable == null) {
            symbolTable = new SymbolTable();
        }
        fSymbolTable = symbolTable;
        fProperties.put(SYMBOL_TABLE, fSymbolTable);

!!!5309979.java!!!	addComponent(inout component : XMLComponent) : void

        // don't add a component more than once
        if (fComponents.contains(component)) {
            return;
        }
        fComponents.add(component);

        // register component's recognized features
        String[] recognizedFeatures = component.getRecognizedFeatures();
        addRecognizedFeatures(recognizedFeatures);
        
        // register component's recognized properties
        String[] recognizedProperties = component.getRecognizedProperties();
        addRecognizedProperties(recognizedProperties);

        // set default values
        if (recognizedFeatures != null) {
            for (int i = 0; i < recognizedFeatures.length; i++) {
                String featureId = recognizedFeatures[i];
                Boolean state = component.getFeatureDefault(featureId);
                if (state != null) {
                    super.setFeature(featureId, state.booleanValue());
                }
            }
        }
        if (recognizedProperties != null) {
            for (int i = 0; i < recognizedProperties.length; i++) {
                String propertyId = recognizedProperties[i];
                Object value = component.getPropertyDefault(propertyId);
                if (value != null) {
                    super.setProperty(propertyId, value);
                }
            }
        }

!!!5310235.java!!!	setDocumentHandler(inout documentHandler : XMLDocumentHandler) : void
        fDocumentHandler = documentHandler;
        if (fLastComponent != null) {
            fLastComponent.setDocumentHandler(fDocumentHandler);
            if (fDocumentHandler !=null){
                fDocumentHandler.setDocumentSource(fLastComponent);
            }
        }
!!!5310363.java!!!	getDocumentHandler() : XMLDocumentHandler
        return fDocumentHandler;
!!!5310491.java!!!	setDTDHandler(inout dtdHandler : XMLDTDHandler) : void
        fDTDHandler = dtdHandler;
!!!5310619.java!!!	getDTDHandler() : XMLDTDHandler
        return fDTDHandler;
!!!5310747.java!!!	setDTDContentModelHandler(inout handler : XMLDTDContentModelHandler) : void
        fDTDContentModelHandler = handler;
!!!5310875.java!!!	getDTDContentModelHandler() : XMLDTDContentModelHandler
        return fDTDContentModelHandler;
!!!5311003.java!!!	setEntityResolver(inout resolver : XMLEntityResolver) : void
        // REVISIT: Should this be a property?
        fProperties.put(ENTITY_RESOLVER, resolver);
!!!5311131.java!!!	getEntityResolver() : XMLEntityResolver
        // REVISIT: Should this be a property?
        return (XMLEntityResolver)fProperties.get(ENTITY_RESOLVER);
!!!5311259.java!!!	setErrorHandler(inout errorHandler : XMLErrorHandler) : void
        // REVISIT: Should this be a property?
        fProperties.put(ERROR_HANDLER, errorHandler);
!!!5311387.java!!!	getErrorHandler() : XMLErrorHandler
        // REVISIT: Should this be a property?
        return (XMLErrorHandler)fProperties.get(ERROR_HANDLER);
!!!5311515.java!!!	setFeature(in featureId : String, inout state : boolean) : void

        // forward to every component
        int count = fComponents.size();
        for (int i = 0; i < count; i++) {
            XMLComponent c = (XMLComponent) fComponents.get(i);
            c.setFeature(featureId, state);
        }
        // save state if noone "objects"
        super.setFeature(featureId, state);

!!!5311643.java!!!	setProperty(in propertyId : String, inout value : Object) : void

        // forward to every component
        int count = fComponents.size();
        for (int i = 0; i < count; i++) {
            XMLComponent c = (XMLComponent) fComponents.get(i);
            c.setProperty(propertyId, value);
        }

        // store value if noone "objects"
        super.setProperty(propertyId, value);

!!!5311771.java!!!	setLocale(inout locale : Locale) : void
        fLocale = locale;
!!!5311899.java!!!	getLocale() : Locale
        return fLocale;
!!!5312027.java!!!	reset() : void

        // reset every component
        int count = fComponents.size();
        for (int i = 0; i < count; i++) {
            XMLComponent c = (XMLComponent) fComponents.get(i);
            c.reset(this);
        }

!!!5312155.java!!!	checkProperty(in propertyId : String) : void

        // special cases
        if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {
            final int suffixLength = propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();	
        	
            //
            // http://xml.org/sax/properties/xml-string
            // Value type: String
            // Access: read-only
            //   Get the literal string of characters associated with the
            //   current event.  If the parser recognises and supports this
            //   property but is not currently parsing text, it should return
            //   null (this is a good way to check for availability before the
            //   parse begins).
            //
            if (suffixLength == Constants.XML_STRING_PROPERTY.length() && 
                propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {
                // REVISIT - we should probably ask xml-dev for a precise
                // definition of what this is actually supposed to return, and
                // in exactly which circumstances.
                short type = XMLConfigurationException.NOT_SUPPORTED;
                throw new XMLConfigurationException(type, propertyId);
            }
        }

        // check property
        super.checkProperty(propertyId);

!!!5312283.java!!!	checkFeature(in featureId : String) : void

        //
        // Xerces Features
        //
        if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();

            //
            // special performance feature: no one by component manager is allowed to set it
            //
            if (suffixLength == Constants.PARSER_SETTINGS.length() && 
                featureId.endsWith(Constants.PARSER_SETTINGS)) {
                short type = XMLConfigurationException.NOT_SUPPORTED;
                throw new XMLConfigurationException(type, featureId);
            }
        }

        super.checkFeature(featureId);

