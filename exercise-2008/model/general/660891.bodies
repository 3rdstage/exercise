class BinOpExpr
!!!4359067.java!!!	BinOpExpr(in op : int, inout left : Expression, inout right : Expression)
	_op = op;
	(_left = left).setParent(this);
	(_right = right).setParent(this);
!!!4359195.java!!!	hasPositionCall() : boolean
	if (_left.hasPositionCall()) return true;
	if (_right.hasPositionCall()) return true;
	return false;
!!!4359323.java!!!	hasLastCall() : boolean
            return (_left.hasLastCall() || _right.hasLastCall());
!!!4359451.java!!!	setParser(inout parser : Parser) : void
	super.setParser(parser);
	_left.setParser(parser);
	_right.setParser(parser);
!!!4359579.java!!!	typeCheck(inout stable : SymbolTable) : Type
	final Type tleft = _left.typeCheck(stable); 
	final Type tright = _right.typeCheck(stable);
	final MethodType ptype = lookupPrimop(stable, Ops[_op],
					      new MethodType(Type.Void,
							     tleft, tright)); 
	if (ptype != null) {
	    final Type arg1 = (Type) ptype.argsType().elementAt(0);
	    if (!arg1.identicalTo(tleft)) {
		_left = new CastExpr(_left, arg1);
	    }
	    final Type arg2 = (Type) ptype.argsType().elementAt(1);
	    if (!arg2.identicalTo(tright)) {
		_right = new CastExpr(_right, arg1);
	    }
	    return _type = ptype.resultType();
	}
	throw new TypeCheckError(this);
!!!4359707.java!!!	translate(inout classGen : ClassGenerator, inout methodGen : MethodGenerator) : void
	final InstructionList il = methodGen.getInstructionList();

	_left.translate(classGen, methodGen);
	_right.translate(classGen, methodGen);

	switch (_op) {
	case PLUS:
	    il.append(_type.ADD());
	    break;
	case MINUS:
	    il.append(_type.SUB());
	    break;
	case TIMES:
	    il.append(_type.MUL());
	    break;
	case DIV:
	    il.append(_type.DIV());
	    break;
	case MOD:
	    il.append(_type.REM());
	    break;
	default:
	    ErrorMsg msg = new ErrorMsg(ErrorMsg.ILLEGAL_BINARY_OP_ERR, this);
	    getParser().reportError(Constants.ERROR, msg);
	}
!!!4359835.java!!!	toString() : String
	return Ops[_op] + '(' + _left + ", " + _right + ')';
