class HeapIntBufferR
!!!7462043.java!!!	HeapIntBufferR(in cap : int, in lim : int)
		// package-private







	super(cap, lim);
	this.isReadOnly = true;

!!!7462171.java!!!	HeapIntBufferR(in buf : int, in off : int, in len : int)
 // package-private







	super(buf, off, len);
	this.isReadOnly = true;

!!!7462299.java!!!	HeapIntBufferR(in buf : int, in mark : int, in pos : int, in lim : int, in cap : int, in off : int)








	super(buf, mark, pos, lim, cap, off);
	this.isReadOnly = true;

!!!7462427.java!!!	slice() : IntBuffer

	return new HeapIntBufferR(hb,
					-1,
					0,
					this.remaining(),
					this.remaining(),
					this.position() + offset);
!!!7462555.java!!!	duplicate() : IntBuffer

	return new HeapIntBufferR(hb,
					this.markValue(),
					this.position(),
					this.limit(),
					this.capacity(),
					offset);
!!!7462683.java!!!	asReadOnlyBuffer() : IntBuffer









	return duplicate();

!!!7462811.java!!!	isReadOnly() : boolean

	return true;
!!!7462939.java!!!	put(in x : int) : IntBuffer





	throw new ReadOnlyBufferException();

!!!7463067.java!!!	put(in i : int, in x : int) : IntBuffer





	throw new ReadOnlyBufferException();

!!!7463195.java!!!	put(in src : int, in offset : int, in length : int) : IntBuffer









	throw new ReadOnlyBufferException();

!!!7463323.java!!!	put(inout src : IntBuffer) : IntBuffer
























	throw new ReadOnlyBufferException();

!!!7463451.java!!!	compact() : IntBuffer







	throw new ReadOnlyBufferException();

!!!7463579.java!!!	order() : ByteOrder

	return ByteOrder.nativeOrder();
