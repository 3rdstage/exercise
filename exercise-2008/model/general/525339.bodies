class JMXPluggableAuthenticator
!!!3245851.java!!!	JMXPluggableAuthenticator(inout env : Map)

	String loginConfigName = null;
	String passwordFile = null;

	if (env != null) {
	    loginConfigName = (String) env.get(LOGIN_CONFIG_PROP); 
	    passwordFile = (String) env.get(PASSWORD_FILE_PROP); 
	}

	try {

	    if (loginConfigName != null) {
	        // use the supplied JAAS login configuration
	        loginContext = 
		    new LoginContext(loginConfigName, new JMXCallbackHandler());

	    } else {
	        // use the default JAAS login configuration (file-based)
                SecurityManager sm = System.getSecurityManager();
                if (sm != null) {
                    sm.checkPermission(
                            new AuthPermission("createLoginContext." +
                                               LOGIN_CONFIG_NAME));
                }

                final String pf = passwordFile;
                try {
                    loginContext = (LoginContext) AccessController.doPrivileged(
                        new PrivilegedExceptionAction() {
                            public Object run() throws LoginException {
                                return new LoginContext(
                                                LOGIN_CONFIG_NAME,
                                                null,
                                                new JMXCallbackHandler(),
                                                new FileLoginConfig(pf));
                            }
                        });
                } catch (PrivilegedActionException pae) {
                    throw (LoginException) pae.getException();
                }
            }

	} catch (LoginException le) {
	    authenticationFailure("authenticate", le);

	} catch (SecurityException se) {
	    authenticationFailure("authenticate", se);
	}
!!!3245979.java!!!	authenticate(inout credentials : Object) : Subject
	// Verify that credentials is of type String[].
	//
	if (!(credentials instanceof String[])) {
	    // Special case for null so we get a more informative message
	    if (credentials == null)
		authenticationFailure("authenticate", "Credentials required");

	    final String message =
		"Credentials should be String[] instead of " +
		 credentials.getClass().getName();
	    authenticationFailure("authenticate", message);
	}
	// Verify that the array contains two elements.
	//
	final String[] aCredentials = (String[]) credentials;
	if (aCredentials.length != 2) {
	    final String message =
		"Credentials should have 2 elements not " +
		aCredentials.length;
	    authenticationFailure("authenticate", message);
	}
	// Verify that username exists and the associated
	// password matches the one supplied by the client.
	//
	username = (String) aCredentials[0];
	password = (String) aCredentials[1];
	if (username == null || password == null) {
	    final String message = "Username or password is null";
	    authenticationFailure("authenticate", message);
	}

	// Perform authentication
	try {
	    loginContext.login();
	    final Subject subject = loginContext.getSubject();
            AccessController.doPrivileged(new PrivilegedAction() {
                    public Object run() {
                        subject.setReadOnly();
                        return null;
                    }
                });

	    return subject;

	} catch (LoginException le) {
	    authenticationFailure("authenticate", le);
	} 
	return null;
!!!3246107.java!!!	authenticationFailure(in method : String, in message : String) : void
	final String msg = "Authentication failed! " + message;
	final SecurityException e = new SecurityException(msg);
	logException(method, msg, e);
	throw e;
!!!3246235.java!!!	authenticationFailure(in method : String, inout exception : Exception) : void
        String msg;
        SecurityException se;
        if (exception instanceof SecurityException) {
            msg = exception.getMessage();
            se = (SecurityException) exception;
        } else {
            msg = "Authentication failed! " + exception.getMessage();
            final SecurityException e = new SecurityException(msg);
            EnvHelp.initCause(e, exception);
            se = e;
        }
        logException(method, msg, se);
        throw se;
!!!3246363.java!!!	logException(in method : String, in message : String, inout e : Exception) : void
	if (logger.traceOn()) {
	    logger.trace(method, message);
	}
	if (logger.debugOn()) {
	    logger.debug(method, e);
	}
