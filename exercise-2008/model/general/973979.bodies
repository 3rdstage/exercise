class PKIXParameters
!!!7649307.java!!!	PKIXParameters(inout trustAnchors : Set)
	setTrustAnchors(trustAnchors);
	
	this.unmodInitialPolicies = Collections.<String>emptySet();
	this.certPathCheckers = new ArrayList<PKIXCertPathChecker>();
	this.certStores = new ArrayList<CertStore>();
!!!7649435.java!!!	PKIXParameters(inout keystore : KeyStore)
	if (keystore == null)
	    throw new NullPointerException("the keystore parameter must be " +
		"non-null");
        Set<TrustAnchor> hashSet = new HashSet<TrustAnchor>();
        Enumeration aliases = keystore.aliases();
        while (aliases.hasMoreElements()) {
            String alias = (String) aliases.nextElement();
            if (keystore.isCertificateEntry(alias)) {
		Certificate cert = keystore.getCertificate(alias);
		if (cert instanceof X509Certificate)
                    hashSet.add(new TrustAnchor((X509Certificate)cert, null));
	    }
        }
  	setTrustAnchors(hashSet);
	this.unmodInitialPolicies = Collections.<String>emptySet();
	this.certPathCheckers = new ArrayList<PKIXCertPathChecker>();
	this.certStores = new ArrayList<CertStore>();
!!!7649563.java!!!	getTrustAnchors() : Set
	return this.unmodTrustAnchors;
!!!7649691.java!!!	setTrustAnchors(inout trustAnchors : Set) : void
	if (trustAnchors == null) {
	    throw new NullPointerException("the trustAnchors parameters must" +
		" be non-null");
	}
	if (trustAnchors.isEmpty()) {
	    throw new InvalidAlgorithmParameterException("the trustAnchors " +
		"parameter must be non-empty");
	}
        for (Iterator i = trustAnchors.iterator(); i.hasNext(); ) {
            if (!(i.next() instanceof TrustAnchor)) {
	        throw new ClassCastException("all elements of set must be "
	            + "of type java.security.cert.TrustAnchor");
	    }
        }
        this.unmodTrustAnchors = Collections.unmodifiableSet
		(new HashSet<TrustAnchor>(trustAnchors));
!!!7649819.java!!!	getInitialPolicies() : Set
	return this.unmodInitialPolicies;
!!!7649947.java!!!	setInitialPolicies(inout initialPolicies : Set) : void
	if (initialPolicies != null) {
	    for (Iterator i = initialPolicies.iterator(); i.hasNext();) {
	        if (!(i.next() instanceof String))
		    throw new ClassCastException("all elements of set must be "
		        + "of type java.lang.String");
	    }
	    this.unmodInitialPolicies = 
		Collections.unmodifiableSet(new HashSet<String>(initialPolicies));
	} else
	    this.unmodInitialPolicies = Collections.<String>emptySet();
!!!7650075.java!!!	setCertStores(inout stores : List) : void
        if (stores == null) {
	    this.certStores = new ArrayList<CertStore>();
        } else {
	    for (Iterator i = stores.iterator(); i.hasNext();) {
	        if (!(i.next() instanceof CertStore)) {
		    throw new ClassCastException("all elements of list must be "
		        + "of type java.security.cert.CertStore");
		}
	    }
	    this.certStores = new ArrayList<CertStore>(stores);
	}
!!!7650203.java!!!	addCertStore(inout store : CertStore) : void
	if (store != null) {
            this.certStores.add(store);
	}
!!!7650331.java!!!	getCertStores() : List
        return Collections.unmodifiableList
		(new ArrayList<CertStore>(this.certStores));
!!!7650459.java!!!	setRevocationEnabled(inout val : boolean) : void
	revocationEnabled = val;
!!!7650587.java!!!	isRevocationEnabled() : boolean
	return revocationEnabled;
!!!7650715.java!!!	setExplicitPolicyRequired(inout val : boolean) : void
	explicitPolicyRequired = val;
!!!7650843.java!!!	isExplicitPolicyRequired() : boolean
	return explicitPolicyRequired;
!!!7650971.java!!!	setPolicyMappingInhibited(inout val : boolean) : void
	policyMappingInhibited = val;
!!!7651099.java!!!	isPolicyMappingInhibited() : boolean
	return policyMappingInhibited;
!!!7651227.java!!!	setAnyPolicyInhibited(inout val : boolean) : void
	anyPolicyInhibited = val;
!!!7651355.java!!!	isAnyPolicyInhibited() : boolean
	return anyPolicyInhibited;
!!!7651483.java!!!	setPolicyQualifiersRejected(inout qualifiersRejected : boolean) : void
	policyQualifiersRejected = qualifiersRejected;
!!!7651611.java!!!	getPolicyQualifiersRejected() : boolean
	return policyQualifiersRejected;
!!!7651739.java!!!	getDate() : Date
	if (date == null)
	    return null;
	else 
	    return (Date) this.date.clone();
!!!7651867.java!!!	setDate(inout date : Date) : void
	if (date != null)
	    this.date = (Date) date.clone();
	else
	    date = null;
!!!7651995.java!!!	setCertPathCheckers(inout checkers : List) : void
	if (checkers != null) {
	    List<PKIXCertPathChecker> tmpList = 
	    		new ArrayList<PKIXCertPathChecker>();
	    for (PKIXCertPathChecker checker : checkers) {
		tmpList.add((PKIXCertPathChecker)checker.clone());
	    }
	    this.certPathCheckers = tmpList;
	} else {
	    this.certPathCheckers = new ArrayList<PKIXCertPathChecker>();
	}
!!!7652123.java!!!	getCertPathCheckers() : List
	List<PKIXCertPathChecker> tmpList = new ArrayList<PKIXCertPathChecker>();
	for (PKIXCertPathChecker ck : certPathCheckers) {
	    tmpList.add((PKIXCertPathChecker)ck.clone());
	}
	return Collections.unmodifiableList(tmpList);
!!!7652251.java!!!	addCertPathChecker(inout checker : PKIXCertPathChecker) : void
	if (checker != null) {
	    certPathCheckers.add((PKIXCertPathChecker)checker.clone());
	}
!!!7652379.java!!!	getSigProvider() : String
	return this.sigProvider;
!!!7652507.java!!!	setSigProvider(in sigProvider : String) : void
	this.sigProvider = sigProvider;
!!!7652635.java!!!	getTargetCertConstraints() : CertSelector
	if (certSelector != null) {
	    return (CertSelector) certSelector.clone();
	} else {
	    return null;
	}
!!!7652763.java!!!	setTargetCertConstraints(inout selector : CertSelector) : void
	if (selector != null)
	    certSelector = (CertSelector) selector.clone();
	else
	    certSelector = null;
!!!7652891.java!!!	clone() : Object
        try {
            Object copy = super.clone();
	    // Must clone these because addCertStore, et al. modify them
	    if (certStores != null) {
		certStores = new ArrayList<CertStore>(certStores);
	    }
	    if (certPathCheckers != null) {	
	        certPathCheckers = 
			new ArrayList<PKIXCertPathChecker>(certPathCheckers);
	    }
	    return copy;
        } catch (CloneNotSupportedException e) {
            /* Cannot happen */
            throw new InternalError(e.toString());
        }
!!!7653019.java!!!	toString() : String
	StringBuffer sb = new StringBuffer();
	sb.append("[\n");

	/* start with trusted anchor info */
	if (unmodTrustAnchors != null) {
	    sb.append("  Trust Anchors: " + unmodTrustAnchors.toString() 
		+ "\n");
	}

	/* now, append initial state information */
        if (unmodInitialPolicies != null) {
	    if (unmodInitialPolicies.isEmpty()) {
	        sb.append("  Initial Policy OIDs: any\n");
	    } else {
	        sb.append("  Initial Policy OIDs: [" 
		    + unmodInitialPolicies.toString() + "]\n");
	    }
        }

	/* now, append constraints on all certificates in the path */
        sb.append("  Validity Date: " + String.valueOf(date) + "\n");
        sb.append("  Signature Provider: " + String.valueOf(sigProvider) + "\n");
	sb.append("  Default Revocation Enabled: " + revocationEnabled + "\n");
	sb.append("  Explicit Policy Required: " + explicitPolicyRequired + "\n");
	sb.append("  Policy Mapping Inhibited: " + policyMappingInhibited + "\n");
	sb.append("  Any Policy Inhibited: " + anyPolicyInhibited + "\n");
	sb.append("  Policy Qualifiers Rejected: " + policyQualifiersRejected + "\n");
	
	/* now, append target cert requirements */
        sb.append("  Target Cert Constraints: " + String.valueOf(certSelector) + "\n");

	/* finally, append miscellaneous parameters */
	if (certPathCheckers != null)
	    sb.append("  Certification Path Checkers: [" 
		+ certPathCheckers.toString() + "]\n");
	if (certStores != null)
	    sb.append("  CertStores: [" + certStores.toString() + "]\n");
	sb.append("]");
	return sb.toString();
