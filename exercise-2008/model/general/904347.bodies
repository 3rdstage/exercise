class SecurityManager
!!!7034267.java!!!	hasAllPermission() : boolean
	try {
	    checkPermission(SecurityConstants.ALL_PERMISSION);
	    return true;
	} catch (SecurityException se) {
	    return false;
	}
!!!7034395.java!!!	getInCheck() : boolean
	return inCheck;
!!!7034523.java!!!	SecurityManager()
	synchronized(SecurityManager.class) {
 	    SecurityManager sm = System.getSecurityManager();
 	    if (sm != null) {
		// ask the currently installed security manager if we 
		// can create a new one.
 		sm.checkPermission(new RuntimePermission
				   ("createSecurityManager"));
  	    }
	    initialized = true;
	}
!!!7034779.java!!!	currentClassLoader() : ClassLoader
	ClassLoader cl = currentClassLoader0();
	if ((cl != null) && hasAllPermission())
	    cl = null;
	return cl;
!!!7035035.java!!!	currentLoadedClass() : Class
	Class c = currentLoadedClass0();
	if ((c != null) && hasAllPermission())
	    c = null;
	return c;
!!!7035291.java!!!	classLoaderDepth() : int
	int depth = classLoaderDepth0();
	if (depth != -1) {
	    if (hasAllPermission())
		depth = -1;
	    else
		depth--; // make sure we don't include ourself
	}
	return depth;
!!!7035547.java!!!	inClass(in name : String) : boolean
	return classDepth(name) >= 0;
!!!7035675.java!!!	inClassLoader() : boolean
	return currentClassLoader() != null;
!!!7035803.java!!!	getSecurityContext() : Object
	return AccessController.getContext();
!!!7035931.java!!!	checkPermission(inout perm : Permission) : void
	java.security.AccessController.checkPermission(perm);
!!!7036059.java!!!	checkPermission(inout perm : Permission, inout context : Object) : void
	if (context instanceof AccessControlContext) {
	    ((AccessControlContext)context).checkPermission(perm);
	} else {
	    throw new SecurityException();
	}
!!!7036187.java!!!	checkCreateClassLoader() : void
	checkPermission(SecurityConstants.CREATE_CLASSLOADER_PERMISSION);
!!!7036315.java!!!	getRootGroup() : ThreadGroup
	ThreadGroup root =  Thread.currentThread().getThreadGroup();
	while (root.getParent() != null) {
	    root = root.getParent();
	}
	return root;
!!!7036443.java!!!	checkAccess(inout t : Thread) : void
	if (t == null) {
	    throw new NullPointerException("thread can't be null");
	}
	if (t.getThreadGroup() == rootGroup) {
	    checkPermission(SecurityConstants.MODIFY_THREAD_PERMISSION);
	} else {
	    // just return
	}
!!!7036571.java!!!	checkAccess(inout g : ThreadGroup) : void
	if (g == null) {
	    throw new NullPointerException("thread group can't be null");
	}
	if (g == rootGroup) {
	    checkPermission(SecurityConstants.MODIFY_THREADGROUP_PERMISSION);
	} else {
	    // just return
	}
!!!7036699.java!!!	checkExit(in status : int) : void
	checkPermission(new RuntimePermission("exitVM"));
!!!7036827.java!!!	checkExec(in cmd : String) : void
	File f = new File(cmd);
	if (f.isAbsolute()) {
	    checkPermission(new FilePermission(cmd, 
		SecurityConstants.FILE_EXECUTE_ACTION));
	} else {
	    checkPermission(new FilePermission("<<ALL FILES>>", 
		SecurityConstants.FILE_EXECUTE_ACTION));
	}
!!!7036955.java!!!	checkLink(in lib : String) : void
	if (lib == null) {
	    throw new NullPointerException("library can't be null");
	}
        checkPermission(new RuntimePermission("loadLibrary."+lib));
!!!7037083.java!!!	checkRead(inout fd : FileDescriptor) : void
	if (fd == null) {
	    throw new NullPointerException("file descriptor can't be null");
	}
      	checkPermission(new RuntimePermission("readFileDescriptor"));
!!!7037211.java!!!	checkRead(in file : String) : void
	checkPermission(new FilePermission(file, 
	    SecurityConstants.FILE_READ_ACTION));
!!!7037339.java!!!	checkRead(in file : String, inout context : Object) : void
	checkPermission(
	    new FilePermission(file, SecurityConstants.FILE_READ_ACTION), 
	    context);
!!!7037467.java!!!	checkWrite(inout fd : FileDescriptor) : void
	if (fd == null) {
	    throw new NullPointerException("file descriptor can't be null");
	}
      	checkPermission(new RuntimePermission("writeFileDescriptor"));

!!!7037595.java!!!	checkWrite(in file : String) : void
	checkPermission(new FilePermission(file, 
	    SecurityConstants.FILE_WRITE_ACTION));
!!!7037723.java!!!	checkDelete(in file : String) : void
	checkPermission(new FilePermission(file, 
	    SecurityConstants.FILE_DELETE_ACTION));
!!!7037851.java!!!	checkConnect(in host : String, in port : int) : void
	if (host == null) {
	    throw new NullPointerException("host can't be null");
	}
	if (!host.startsWith("[") && host.indexOf(':') != -1) {
	    host = "[" + host + "]";
	}
	if (port == -1) {
	    checkPermission(new SocketPermission(host, 
		SecurityConstants.SOCKET_RESOLVE_ACTION));
	} else {
	    checkPermission(new SocketPermission(host+":"+port,
		SecurityConstants.SOCKET_CONNECT_ACTION));
	}
!!!7037979.java!!!	checkConnect(in host : String, in port : int, inout context : Object) : void
	if (host == null) {
	    throw new NullPointerException("host can't be null");
	}
	if (!host.startsWith("[") && host.indexOf(':') != -1) {
	    host = "[" + host + "]";
	}
	if (port == -1)
	    checkPermission(new SocketPermission(host,
		SecurityConstants.SOCKET_RESOLVE_ACTION),
		context);
	else
	    checkPermission(new SocketPermission(host+":"+port,
		SecurityConstants.SOCKET_CONNECT_ACTION),
		context);
!!!7038107.java!!!	checkListen(in port : int) : void
	if (port == 0) {
	    checkPermission(SecurityConstants.LOCAL_LISTEN_PERMISSION);
	} else {
	    checkPermission(new SocketPermission("localhost:"+port,
		SecurityConstants.SOCKET_LISTEN_ACTION));
	}
!!!7038235.java!!!	checkAccept(in host : String, in port : int) : void
	if (host == null) {
	    throw new NullPointerException("host can't be null");
	}
	if (!host.startsWith("[") && host.indexOf(':') != -1) {
	    host = "[" + host + "]";
	}
	checkPermission(new SocketPermission(host+":"+port,
	    SecurityConstants.SOCKET_ACCEPT_ACTION));
!!!7038363.java!!!	checkMulticast(inout maddr : InetAddress) : void
	String host = maddr.getHostAddress();
	if (!host.startsWith("[") && host.indexOf(':') != -1) {
	    host = "[" + host + "]";
	}
      	checkPermission(new SocketPermission(host, 
	    SecurityConstants.SOCKET_CONNECT_ACCEPT_ACTION));
!!!7038491.java!!!	checkMulticast(inout maddr : InetAddress, in ttl : byte) : void
	String host = maddr.getHostAddress();
	if (!host.startsWith("[") && host.indexOf(':') != -1) {
	    host = "[" + host + "]";
	}
      	checkPermission(new SocketPermission(host, 
	    SecurityConstants.SOCKET_CONNECT_ACCEPT_ACTION));
!!!7038619.java!!!	checkPropertiesAccess() : void
      	checkPermission(new PropertyPermission("*", 
	    SecurityConstants.PROPERTY_RW_ACTION));
!!!7038747.java!!!	checkPropertyAccess(in key : String) : void
      	checkPermission(new PropertyPermission(key, 
	    SecurityConstants.PROPERTY_READ_ACTION));
!!!7038875.java!!!	checkTopLevelWindow(inout window : Object) : boolean
	if (window == null) {
	    throw new NullPointerException("window can't be null");
	}
	try {
	    checkPermission(SecurityConstants.TOPLEVEL_WINDOW_PERMISSION);
	    return true;
	} catch (SecurityException se) {
	    // just return false
	}
	return false;
!!!7039003.java!!!	checkPrintJobAccess() : void
      	checkPermission(new RuntimePermission("queuePrintJob"));
!!!7039131.java!!!	checkSystemClipboardAccess() : void
 	checkPermission(SecurityConstants.ACCESS_CLIPBOARD_PERMISSION);
!!!7039259.java!!!	checkAwtEventQueueAccess() : void
      	checkPermission(SecurityConstants.CHECK_AWT_EVENTQUEUE_PERMISSION);
!!!7039387.java!!!	getPackages(in p : String) : String
	String packages[] = null;
	if (p != null && !p.equals("")) {
	    java.util.StringTokenizer tok =
		new java.util.StringTokenizer(p, ",");
	    int n = tok.countTokens();
	    if (n > 0) {
		packages = new String[n];
		int i = 0;
		while (tok.hasMoreElements()) {
		    String s = tok.nextToken().trim();
		    packages[i++] = s;
		}
	    }
	}

	if (packages == null)
	    packages = new String[0];
	return packages;
!!!7039515.java!!!	checkPackageAccess(in pkg : String) : void
	if (pkg == null) {
	    throw new NullPointerException("package name can't be null");
	}

	String[] pkgs;
 	synchronized (packageAccessLock) {
	    /*
	     * Do we need to update our property array?
	     */
	    if (!packageAccessValid) {
		String tmpPropertyStr =
		    (String) AccessController.doPrivileged(
			new PrivilegedAction() {
		    	    public Object run() {
				return java.security.Security.getProperty(
				    "package.access");
			    }
			}
		    );
		packageAccess = getPackages(tmpPropertyStr);
		packageAccessValid = true;
	    }

	    // Using a snapshot of packageAccess -- don't care if static field
	    // changes afterwards; array contents won't change.
	    pkgs = packageAccess;
	}

	/*
         * Traverse the list of packages, check for any matches.
	 */
	for (int i = 0; i < pkgs.length; i++) {
	    if (pkg.startsWith(pkgs[i]) || pkgs[i].equals(pkg + ".")) {
		checkPermission(
		    new RuntimePermission("accessClassInPackage."+pkg));
		break; 	// No need to continue; only need to check this once
	    }
	}
!!!7039643.java!!!	checkPackageDefinition(in pkg : String) : void
	if (pkg == null) {
	    throw new NullPointerException("package name can't be null");
	}

	String[] pkgs;
 	synchronized (packageDefinitionLock) {
	    /*
	     * Do we need to update our property array?
	     */
	    if (!packageDefinitionValid) {
		String tmpPropertyStr =
		    (String) AccessController.doPrivileged(
			new PrivilegedAction() {
		    	    public Object run() {
				return java.security.Security.getProperty(
				    "package.definition");
			    }
			}
		    );
		packageDefinition = getPackages(tmpPropertyStr);
		packageDefinitionValid = true;
	    }
	    // Using a snapshot of packageDefinition -- don't care if static
	    // field changes afterwards; array contents won't change.
	    pkgs = packageDefinition;
	}

	/*
	 * Traverse the list of packages, check for any matches.
	 */
	for (int i = 0; i < pkgs.length; i++) {
	    if (pkg.startsWith(pkgs[i]) || pkgs[i].equals(pkg + ".")) {
		checkPermission(
		    new RuntimePermission("defineClassInPackage."+pkg));
		break; // No need to continue; only need to check this once
	    }
	}
!!!7039771.java!!!	checkSetFactory() : void
      	checkPermission(new RuntimePermission("setFactory"));
!!!7039899.java!!!	checkMemberAccess(inout clazz : Class, in which : int) : void
	if (clazz == null) {
	    throw new NullPointerException("class can't be null");
	}
	if (which != Member.PUBLIC) {
	    Class stack[] = getClassContext();
	    /*
	     * stack depth of 4 should be the caller of one of the
	     * methods in java.lang.Class that invoke checkMember
	     * access. The stack should look like:
	     * 
	     * someCaller                        [3]
	     * java.lang.Class.someReflectionAPI [2]
	     * java.lang.Class.checkMemberAccess [1]
	     * SecurityManager.checkMemberAccess [0]
	     *
	     */
	    if ((stack.length<4) || 
		(stack[3].getClassLoader() != clazz.getClassLoader())) {
		checkPermission(SecurityConstants.CHECK_MEMBER_ACCESS_PERMISSION);
	    }
	}
!!!7040027.java!!!	checkSecurityAccess(in target : String) : void
	checkPermission(new SecurityPermission(target));
!!!7040283.java!!!	getThreadGroup() : ThreadGroup
	return Thread.currentThread().getThreadGroup();
