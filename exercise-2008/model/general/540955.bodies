class SnmpMib
!!!3364507.java!!!	SnmpMib()
        root= new SnmpMibOid();
!!!3364635.java!!!	getGroupOid(in groupName : String, in defaultOid : String) : String
	return defaultOid;
!!!3364763.java!!!	getGroupObjectName(in name : String, in oid : String, in defaultName : String) : ObjectName
	return new ObjectName(defaultName);
!!!3364891.java!!!	registerGroupNode(in groupName : String, in groupOid : String, inout groupObjName : ObjectName, inout node : SnmpMibNode, inout group : Object, inout server : MBeanServer) : void
	root.registerNode(groupOid,node);
	if (server != null && groupObjName != null && group != null) 
	    server.registerMBean(group,groupObjName);
!!!3365275.java!!!	get(inout req : SnmpMibRequest) : void

	// Builds the request tree: creation is not allowed, operation
	// is not atomic.

	final int reqType = SnmpDefinitions.pduGetRequestPdu;
	SnmpRequestTree handlers = getHandlers(req,false,false,reqType);

	SnmpRequestTree.Handler h = null;
	SnmpMibNode meta = null;

	if (isDebugOn()) 
	    debug("get","Processing handlers for GET... ");

	// For each sub-request stored in the request-tree, invoke the
	// get() method.
	for (Enumeration eh=handlers.getHandlers();eh.hasMoreElements();) {
	    h = (SnmpRequestTree.Handler) eh.nextElement();

	    // Gets the Meta node. It can be either a Group Meta or a 
	    // Table Meta.
	    //
	    meta = handlers.getMetaNode(h);

	    // Gets the depth of the Meta node in the OID tree
	    final int depth = handlers.getOidDepth(h);

	    for (Enumeration rqs=handlers.getSubRequests(h);
		 rqs.hasMoreElements();) {

		// Invoke the get() operation.
		meta.get((SnmpMibSubRequest)rqs.nextElement(),depth);
	    }
	}
!!!3365403.java!!!	set(inout req : SnmpMibRequest) : void

	SnmpRequestTree handlers = null;

	// Optimization: we're going to get the whole SnmpRequestTree
	// built in the "check" method, so that we don't have to rebuild 
	// it here.
	//
	if (req instanceof SnmpMibRequestImpl)
	    handlers = ((SnmpMibRequestImpl)req).getRequestTree();

	// Optimization didn't work: we have to rebuild the tree.
	//
	// Builds the request tree: creation is not allowed, operation
	// is atomic.
	//
	final int reqType = SnmpDefinitions.pduSetRequestPdu;
	if (handlers == null) handlers = getHandlers(req,false,true,reqType);
	handlers.switchCreationFlag(false);
	handlers.setPduType(reqType);

	SnmpRequestTree.Handler h = null;
	SnmpMibNode meta = null;

	if (isDebugOn()) 
	    debug("set","Processing handlers for SET... ");

	// For each sub-request stored in the request-tree, invoke the
	// get() method.
	for (Enumeration eh=handlers.getHandlers();eh.hasMoreElements();) {
	    h = (SnmpRequestTree.Handler) eh.nextElement();

	    // Gets the Meta node. It can be either a Group Meta or a 
	    // Table Meta.
	    //
	    meta = handlers.getMetaNode(h);

	    // Gets the depth of the Meta node in the OID tree
	    final int depth = handlers.getOidDepth(h);

	    for (Enumeration rqs=handlers.getSubRequests(h);
		 rqs.hasMoreElements();) {

		// Invoke the set() operation
		meta.set((SnmpMibSubRequest)rqs.nextElement(),depth);
	    }
	}
!!!3365531.java!!!	check(inout req : SnmpMibRequest) : void

	final int reqType = SnmpDefinitions.pduWalkRequest;
	// Builds the request tree: creation is allowed, operation
	// is atomic.
	SnmpRequestTree handlers = getHandlers(req,true,true,reqType);

	SnmpRequestTree.Handler h = null;
	SnmpMibNode meta = null;

	if (isDebugOn()) 
	    debug("check","Processing handlers for CHECK... ");

	// For each sub-request stored in the request-tree, invoke the
	// check() method.
	for (Enumeration eh=handlers.getHandlers();eh.hasMoreElements();) {
	    h = (SnmpRequestTree.Handler) eh.nextElement();

	    // Gets the Meta node. It can be either a Group Meta or a 
	    // Table Meta.
	    //
	    meta = handlers.getMetaNode(h);

	    // Gets the depth of the Meta node in the OID tree
	    final int depth = handlers.getOidDepth(h);

	    for (Enumeration rqs=handlers.getSubRequests(h);
		 rqs.hasMoreElements();) {

		// Invoke the check() operation
		meta.check((SnmpMibSubRequest)rqs.nextElement(),depth);
	    }
	}

	// Optimization: we're going to pass the whole SnmpRequestTree
	// to the "set" method, so that we don't have to rebuild it there.
	//
	if (req instanceof SnmpMibRequestImpl) {
	    ((SnmpMibRequestImpl)req).setRequestTree(handlers);
	}

!!!3365659.java!!!	getNext(inout req : SnmpMibRequest) : void
	// Build the request tree for the operation
	// The subrequest stored in the request tree are valid GET requests
	SnmpRequestTree handlers = getGetNextHandlers(req);

	SnmpRequestTree.Handler h = null;
	SnmpMibNode meta = null;

	if (isDebugOn()) 
	    debug("getNext","Processing handlers for GET-NEXT... ");

	// Now invoke get() for each subrequest of the request tree.
	for (Enumeration eh=handlers.getHandlers();eh.hasMoreElements();) {
	    h = (SnmpRequestTree.Handler) eh.nextElement();
	    
	    // Gets the Meta node. It can be either a Group Meta or a 
	    // Table Meta.
	    //
	    meta = handlers.getMetaNode(h);

	    // Gets the depth of the Meta node in the OID tree
	    int depth = handlers.getOidDepth(h);

	    for (Enumeration rqs=handlers.getSubRequests(h);
		 rqs.hasMoreElements();) {

		// Invoke the get() operation
		meta.get((SnmpMibSubRequest)rqs.nextElement(),depth);
	    }
	}
!!!3365787.java!!!	getBulk(inout req : SnmpMibRequest, in nonRepeat : int, in maxRepeat : int) : void
     
        getBulkWithGetNext(req, nonRepeat, maxRepeat);
!!!3365915.java!!!	getRootOid() : long
        
        if( rootOid == null) {
            Vector list= new Vector(10);

            // Ask the tree to do the job !
            //
            root.getRootOid(list);

            // Now format the result
            //
            rootOid= new long[list.size()];
            int i=0;
            for(Enumeration e= list.elements(); e.hasMoreElements(); ) {
                Integer val= (Integer) e.nextElement();
                rootOid[i++]= val.longValue();
            }
        }
        return rootOid;

!!!3366043.java!!!	getHandlers(inout req : SnmpMibRequest, inout createflag : boolean, inout atomic : boolean, in type : int) : SnmpRequestTree

	// Build an empty request tree
	SnmpRequestTree handlers = 
	    new SnmpRequestTree(req,createflag,type);

        int index=0;
        SnmpVarBind var = null;
        final int ver= req.getVersion();

	// For each varbind in the list finds its handling node.
        for (Enumeration e= req.getElements(); e.hasMoreElements(); index++) {

            var= (SnmpVarBind) e.nextElement();

            try {
		// Find the handling node for this varbind.
                root.findHandlingNode(var,var.oid.longValue(false),
				      0,handlers);
            } catch(SnmpStatusException x) {

		if (isDebugOn()) 
		    debug("getHandlers","Couldn't find a handling node for "
			  + var.oid.toString());

		// If the operation is atomic (Check/Set) or the version
		// is V1 we must generate an exception.
		//
                if (ver == SnmpDefinitions.snmpVersionOne) {

		    if (isDebugOn()) 
			debug("getHandlers","\tV1: Throwing exception");

		    // The index in the exception must correspond to the 
		    // SNMP index ...
		    //
		    final SnmpStatusException sse = 
			new SnmpStatusException(x, index + 1);
		    sse.initCause(x);
		    throw sse;
		} else if ((type == SnmpDefinitions.pduWalkRequest)   ||
			   (type == SnmpDefinitions.pduSetRequestPdu)) {
		    final int status = 
			SnmpRequestTree.mapSetException(x.getStatus(),ver);

 		    if (isDebugOn()) 
			debug("getHandlers","\tSET: Throwing exception");

		    final SnmpStatusException sse = 
			new SnmpStatusException(status, index + 1);
		    sse.initCause(x);
		    throw sse;
		} else if (atomic) {

		    // Should never come here...
 		    if (isDebugOn()) 
			debug("getHandlers","\tATOMIC: Throwing exception");

		    final SnmpStatusException sse = 
			new SnmpStatusException(x, index + 1);
		    sse.initCause(x);
		    throw sse;
		}

		final int status = 
		    SnmpRequestTree.mapGetException(x.getStatus(),ver);
		    
		if (status == SnmpStatusException.noSuchInstance) {

		    if (isDebugOn()) 
			debug("getHandlers", 
			      "\tGET: Registering noSuchInstance");

		    var.value= SnmpVarBind.noSuchInstance;

		} else if (status == SnmpStatusException.noSuchObject) {
			
		    if (isDebugOn()) 
			debug("getHandlers",
			      "\tGET: Registering noSuchObject");

			var.value= SnmpVarBind.noSuchObject;

		} else {

		    if (isDebugOn()) 
			debug("getHandlers",
			      "\tGET: Registering global error: "
			      + status);

		    final SnmpStatusException sse = 
			new SnmpStatusException(status, index + 1);
		    sse.initCause(x);
		    throw sse;
		}
	    }
        }
	return handlers;
!!!3366171.java!!!	getGetNextHandlers(inout req : SnmpMibRequest) : SnmpRequestTree

	// Creates an empty request tree, no entry creation is allowed (false)
	SnmpRequestTree handlers = new 
	    SnmpRequestTree(req,false,SnmpDefinitions.pduGetNextRequestPdu);

	// Sets the getNext flag: if version=V2, status exception are 
	// transformed in  endOfMibView
	handlers.setGetNextFlag();

	if (isDebugOn()) 
	    debug("getGetNextHandlers","Received MIB request : " + req);
	AcmChecker checker = new AcmChecker(req);
	int index=0;
        SnmpVarBind var = null;
        final int ver= req.getVersion();
	SnmpOid original = null;
	// For each varbind, finds the handling node.
	// This function has the side effect of transforming a GET-NEXT
	// request into a valid GET request, replacing the OIDs in the
	// original GET-NEXT request with the OID of the first leaf that
	// follows.
        for (Enumeration e= req.getElements(); e.hasMoreElements(); index++) {

            var = (SnmpVarBind) e.nextElement();
	    SnmpOid result = null;
            try {
		// Find the node handling the OID that follows the varbind
		// OID. `result' contains this next leaf OID.
		//ACM loop.
		if (isDebugOn()) 
		    debug("getGetNextHandlers"," Next Oid of :" + var.oid);
		result = new SnmpOid(root.findNextHandlingNode
				     (var,var.oid.longValue(false),0,
				      0,handlers, checker));
		
		if (isDebugOn()) 
		    debug("getGetNextHandlers"," is :" + result);
		// We replace the varbind original OID with the OID of the
		// leaf object we have to return.
		var.oid = result;
            } catch(SnmpStatusException x) {

		// if (isDebugOn()) 
		//    debug("getGetNextHandlers",
		//	  "Couldn't find a handling node for "
		//	  + var.oid.toString());
		
                if (ver == SnmpDefinitions.snmpVersionOne) {
		    if (isDebugOn()) 
			debug("getGetNextHandlers","\tThrowing exception" + 
			      x.toString());
		    // The index in the exception must correspond to the 
		    // SNMP index ...
		    //
                    throw new SnmpStatusException(x, index + 1);
		}
		if (isDebugOn()) 
		    debug("getGetNextHandlers","Exception : " + x.getStatus());
		
                var.setSnmpValue(SnmpVarBind.endOfMibView);
            }   
        }
	return handlers;
!!!3366299.java!!!	isDebugOn() : boolean
        return Trace.isSelected(Trace.LEVEL_DEBUG, Trace.INFO_ADAPTOR_SNMP);
!!!3366427.java!!!	debug(in func : String, in info : String) : void
        Trace.send(Trace.LEVEL_DEBUG, Trace.INFO_ADAPTOR_SNMP, 
		   "SnmpMib", func, info);
