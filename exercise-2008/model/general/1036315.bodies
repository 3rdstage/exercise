class CounterMonitor
!!!8320667.java!!!	makeDebugTag() : String
        return "CounterMonitor";
!!!8320795.java!!!	CounterMonitor()
	dbgTag = makeDebugTag();
!!!8320923.java!!!	preDeregister() : void

        // Stop the CounterMonitor.
        //
        super.preDeregister();

        if (isTraceOn()) {
            trace("preDeregister", "reset the threshold values");
        }

        // Reset values for serialization.
        //
	synchronized (this) {
	    for (int i = 0; i < elementCount; i++) {
		threshold[i] = initThreshold;
	    }
	}
!!!8321051.java!!!	start() : void
        if (isTraceOn()) {
            trace("start", "start the counter monitor");
        }

	if (isActive()) {
	    if (isTraceOn()) {
		trace("start", "the counter monitor is already activated");
	    }

	    return;
	}

	isActive = true;

	// Reset values.
	//
	for (int i = 0; i < elementCount; i++) {
	    threshold[i] = initThreshold;
	    modulusExceeded[i] = false;
	    eventAlreadyNotified[i] = false;
	    previousScanCounter[i] = null;
	}

	// Start the timer.
	//
	timer = new Timer();
	timer.schedule(new CounterAlarmClock(this), getGranularityPeriod(),
		       getGranularityPeriod());
!!!8321179.java!!!	stop() : void
        if (isTraceOn()) {
            trace("stop", "stop the counter monitor");
        }

	if (isTraceOn()) {
	    trace("stop", "the counter monitor is not started");

	    return;
	}

	isActive = false;

	// Stop the timer.
	//
	if (timer != null) {
	    timer.cancel();
	    timer = null;
	}
!!!8321307.java!!!	setGranularityPeriod(in period : long) : void
	super.setGranularityPeriod(period);

	// Reschedule timer task if timer is already running
	//
	if (isActive()) {
	    timer.cancel();
	    timer = new Timer();
	    timer.schedule(new CounterAlarmClock(this),
			   getGranularityPeriod(), getGranularityPeriod());
	}
!!!8321435.java!!!	getDerivedGauge(inout object : ObjectName) : Number
	int index = indexOf(object);
	if (index != -1)
	    return derivedGauge[index];
	else
	    return null;
!!!8321563.java!!!	getDerivedGaugeTimeStamp(inout object : ObjectName) : long
	int index = indexOf(object);
	if (index != -1)
	    return derivedGaugeTimestamp[index];
	else
	    return 0;
!!!8321691.java!!!	getThreshold(inout object : ObjectName) : Number
	int index = indexOf(object);
	if (index != -1)
	    return threshold[index];
	else
	    return null;
!!!8321819.java!!!	getInitThreshold() : Number
        return initThreshold;
!!!8321947.java!!!	setInitThreshold(inout value : Number) : void

        if (value == null) {
            throw new IllegalArgumentException("Null threshold");
        }
        if (value.longValue() < 0L) {
            throw new IllegalArgumentException("Negative threshold");
        }

	initThreshold = value;
	for (int i = 0; i < elementCount; i++) {
	    threshold[i] = value;
	    resetAlreadyNotified(i, THRESHOLD_ERROR_NOTIFIED);

            // Reset values.
            //
            modulusExceeded[i] = false;
            eventAlreadyNotified[i] = false;
        }
!!!8322075.java!!!	getDerivedGauge() : Number
        return derivedGauge[0];
!!!8322203.java!!!	getDerivedGaugeTimeStamp() : long
        return derivedGaugeTimestamp[0];
!!!8322331.java!!!	getThreshold() : Number
        return threshold[0];
!!!8322459.java!!!	setThreshold(inout value : Number) : void
	setInitThreshold(value);
!!!8322587.java!!!	getOffset() : Number
        return offset;
!!!8322715.java!!!	setOffset(inout value : Number) : void

        if (value == null) {
            throw new IllegalArgumentException("Null offset");
        }
        if (value.longValue() < 0L) {
            throw new IllegalArgumentException("Negative offset");
        }

	offset = value;
	for (int i = 0; i < elementCount; i++) {
	    resetAlreadyNotified(i, THRESHOLD_ERROR_NOTIFIED);
	}
!!!8322843.java!!!	getModulus() : Number
        return modulus;
!!!8322971.java!!!	setModulus(inout value : Number) : void

        if (value == null) {
            throw new IllegalArgumentException("Null modulus");
        }
        if (value.longValue() < 0L) {
            throw new IllegalArgumentException("Negative modulus");
        }

        modulus = value;
        for (int i = 0; i < elementCount; i++) {
	    resetAlreadyNotified(i, THRESHOLD_ERROR_NOTIFIED);

            // Reset values.
            //
            modulusExceeded[i] = false;
        }
!!!8323099.java!!!	getNotify() : boolean
        return notify;
!!!8323227.java!!!	setNotify(inout value : boolean) : void
        notify = value;
!!!8323355.java!!!	getDifferenceMode() : boolean
        return differenceMode;
!!!8323483.java!!!	setDifferenceMode(inout value : boolean) : void
        differenceMode = value;

        for (int i = 0; i < elementCount; i++) {
            // Reset values.
            //
            threshold[i] = initThreshold;
            modulusExceeded[i] = false;
            eventAlreadyNotified[i] = false;
            previousScanCounter[i] = null;
        }
!!!8323611.java!!!	getNotificationInfo() : MBeanNotificationInfo
        String[] types  = { MonitorNotification.RUNTIME_ERROR,
                            MonitorNotification.OBSERVED_OBJECT_ERROR,
                            MonitorNotification.OBSERVED_ATTRIBUTE_ERROR,
                            MonitorNotification.OBSERVED_ATTRIBUTE_TYPE_ERROR,
                            MonitorNotification.THRESHOLD_ERROR,
                            MonitorNotification.THRESHOLD_VALUE_EXCEEDED};
        MBeanNotificationInfo[] notifsInfo = {
	    new MBeanNotificationInfo(types,
				      "javax.management.monitor.MonitorNotification",
				      "Notifications sent by the CounterMonitor MBean")
	};
        return notifsInfo;
!!!8323739.java!!!	updateDerivedGauge(inout scanCounter : Object, in index : int) : boolean

        boolean is_derived_gauge_valid;

        derivedGaugeTimestamp[index] = System.currentTimeMillis();

        // The counter difference mode is used.
        //
        if (differenceMode) {

            // The previous scan counter has been initialized.
            //
            if (previousScanCounter[index] != null) {
                setDerivedGaugeWithDifference((Number)scanCounter, null, index);

                // If derived gauge is negative it means that the
                // counter has wrapped around and the value of the
                // threshold needs to be reset to its initial value.
                //
                if (derivedGauge[index].longValue() < 0L) {
                    if (modulus.longValue() > 0L) {
                        setDerivedGaugeWithDifference((Number)scanCounter,
						      (Number)modulus, index);
                    }
                    threshold[index] = initThreshold;
                    eventAlreadyNotified[index] = false;
                }
                is_derived_gauge_valid = true;
            }
            // The previous scan counter has not been initialized.
            // We cannot update the derived gauge...
            //
            else {
                is_derived_gauge_valid = false;
            }
            previousScanCounter[index] = (Number)scanCounter;
        }
        // The counter difference mode is not used.
        //
        else {
            derivedGauge[index] = (Number)scanCounter;
            is_derived_gauge_valid = true;
        }
        return is_derived_gauge_valid;
!!!8323867.java!!!	updateNotifications(in index : int) : void
	boolean sendNotif = false;
	String notifType = null;
	long timeStamp = 0;
	String msg = null;
	Object derGauge = null;
	Object trigger = null;

	synchronized(this) {
	    // Send notification if notify is true.
	    //
	    if (!eventAlreadyNotified[index]) {
		if (derivedGauge[index].longValue() >=
		    threshold[index].longValue()) {
		    if (notify) {
			sendNotif = true;
			notifType = MonitorNotification.THRESHOLD_VALUE_EXCEEDED;
			timeStamp = derivedGaugeTimestamp[index];
			msg = "";
			derGauge = derivedGauge[index];
			trigger = threshold[index];
		    }
		    if (!differenceMode) {
			eventAlreadyNotified[index] = true;
		    }
		}
	    } else {
		if (isTraceOn()) {
		    trace("updateNotifications", "the notification:" +
			  "\n\tNotification observed object = " +
			  getObservedObject(index) +
			  "\n\tNotification observed attribute = " +
			  getObservedAttribute() +
			  "\n\tNotification derived gauge = " +
			  derivedGauge[index] +
			  "\nhas already been sent");
		}
	    }
	}

	if (sendNotif) {
	    sendNotification(notifType, timeStamp, msg, derGauge, trigger, index);
	}
!!!8323995.java!!!	updateThreshold(in index : int) : void

        // Calculate the new threshold value if the threshold has been
        // exceeded and if the offset value is greater than zero.
        //
        if (derivedGauge[index].longValue() >=  threshold[index].longValue()) {

            if (offset.longValue() > 0L) {

                // Increment the threshold until its value is greater
                // than the one for the current derived gauge.
                //
                long threshold_value = threshold[index].longValue();
                while (derivedGauge[index].longValue() >= threshold_value) {
                    threshold_value += offset.longValue();
                }

                // Set threshold attribute.
                //
                switch(type[index]) {
                case INTEGER:
                    threshold[index] = new Integer((int)threshold_value);
                    break;
                case BYTE:
                    threshold[index] = new Byte((byte)threshold_value);
                    break;
                case SHORT:
                    threshold[index] = new Short((short)threshold_value);
                    break;
                case LONG:
                    threshold[index] = new Long((long)threshold_value);
                    break;
                default:
                    // Should never occur...
                    if (isDebugOn()) {
                        debug("updateThreshold", "the threshold type is invalid");
                    }
                    break;
                }

                // If the counter can wrap around when it reaches its maximum
                // and we are not dealing with counter differences then we need
                // to reset the threshold to its initial value too.
                //
                if (!differenceMode) {
                    if (modulus.longValue() > 0L) {
                        if (threshold[index].longValue() > modulus.longValue()) {
                            modulusExceeded[index] = true;
                            derivedGaugeExceeded[index] = derivedGauge[index];
                        }
                    }
                }

                // Threshold value has been modified so we can notify again.
                //
                eventAlreadyNotified[index] = false;
            }
            else {
                modulusExceeded[index] = true;
                derivedGaugeExceeded[index] = derivedGauge[index];
            }
        }
!!!8324123.java!!!	isThresholdTypeValid(in index : int) : boolean

	switch(type[index]) {
	case INTEGER:
	    return ((threshold[index] instanceof Integer) &&
		    ((offset == INTEGER_ZERO) ||
		     (offset instanceof Integer)) &&
		    ((modulus == INTEGER_ZERO) ||
		    (modulus instanceof Integer)));
	case BYTE:
	    return ((threshold[index] instanceof Byte) &&
		    ((offset == INTEGER_ZERO) ||
		     (offset instanceof Byte)) &&
		    ((modulus == INTEGER_ZERO) ||
		    (modulus instanceof Byte)));
	case SHORT:
	    return ((threshold[index] instanceof Short) &&
		    ((offset == INTEGER_ZERO) ||
		     (offset instanceof Short)) &&
		    ((modulus == INTEGER_ZERO) ||
		    (modulus instanceof Short)));
	case LONG:
	    return ((threshold[index] instanceof Long) &&
		    ((offset == INTEGER_ZERO) ||
		     (offset instanceof Long)) &&
		    ((modulus == INTEGER_ZERO) ||
		    (modulus instanceof Long)));
	default:
	    // Should never occured...
	    if (isDebugOn()) {
		debug("isThresholdTypeValid", "The threshold type is invalid");
	    }
	    return false;
	}
!!!8324251.java!!!	setDerivedGaugeWithDifference(inout scanCounter : Number, inout mod : Number, in index : int) : void
	/* We do the arithmetic using longs here even though the
	   result may end up in a smaller type.  Since
	   l == (byte)l (mod 256) for any long l,
	   (byte) ((byte)l1 + (byte)l2) == (byte) (l1 + l2),
	   and likewise for subtraction.  So it's the same as if
	   we had done the arithmetic in the smaller type.*/

	long derived =
	    scanCounter.longValue() - previousScanCounter[index].longValue();
	if (mod != null)
	    derived += modulus.longValue();

	switch (type[index]) {
	case INTEGER: derivedGauge[index] = new Integer((int) derived); break;
	case BYTE: derivedGauge[index] = new Byte((byte) derived); break;
	case SHORT: derivedGauge[index] = new Short((short) derived); break;
	case LONG: derivedGauge[index] = new Long(derived); break;
	default:
	    // Should never occur...
            if (isDebugOn()) {
                debug("setDerivedGaugeWithDifference",
		      "the threshold type is invalid");
            }
	    break;
	}
!!!8324379.java!!!	notifyAlarmClock(in index : int) : void
	long timeStamp = 0;
	String msg = null;
	Object derGauge = null;

        Object  scan_counter = null;
        String  notif_type = null;

	synchronized(this) {
            if (!isActive())
		return;

	    // Check if the observed object and observed attribute are valid.
	    //

	    // Check that neither the observed object nor the
	    // observed attribute are null.  If the observed
	    // object or observed attribute is null, this means
	    // that the monitor started before a complete
	    // initialization and nothing is done.
	    //
	    if ((getObservedObject(index) == null) ||
		(getObservedAttribute() == null)) {
		return;
	    }

	    // Check that the observed object is registered in the
	    // MBean server and that the observed attribute
	    // belongs to the observed object.
	    //
	    try {
		scan_counter = server.getAttribute(getObservedObject(index),
						   getObservedAttribute());
		if (scan_counter == null)
		    return;
	    } catch (NullPointerException np_ex) {
		if (alreadyNotified(index, RUNTIME_ERROR_NOTIFIED))
		    return;
		else {
		    notif_type = MonitorNotification.RUNTIME_ERROR;
		    setAlreadyNotified(index, RUNTIME_ERROR_NOTIFIED);
		    msg =
			"The counter monitor must be registered in " +
			"the MBean server.";
		}
	    } catch (InstanceNotFoundException inf_ex) {
		if (alreadyNotified(index, OBSERVED_OBJECT_ERROR_NOTIFIED))
		    return;
		else {
		    notif_type = MonitorNotification.OBSERVED_OBJECT_ERROR;
		    setAlreadyNotified(index, OBSERVED_OBJECT_ERROR_NOTIFIED);
		    msg =
			"The observed object must be registered in " +
			"the MBean server.";
		}
	    } catch (AttributeNotFoundException anf_ex) {
		if (alreadyNotified(index, OBSERVED_ATTRIBUTE_ERROR_NOTIFIED))
		    return;
		else {
		    notif_type = MonitorNotification.OBSERVED_ATTRIBUTE_ERROR;
		    setAlreadyNotified(index, OBSERVED_ATTRIBUTE_ERROR_NOTIFIED);
		    msg =
			"The observed attribute must be accessible in " +
			"the observed object.";
		}
	    } catch (MBeanException mb_ex) {
		if (alreadyNotified(index, RUNTIME_ERROR_NOTIFIED))
		    return;
		else {
		    notif_type = MonitorNotification.RUNTIME_ERROR;
		    setAlreadyNotified(index, RUNTIME_ERROR_NOTIFIED);
		    msg = mb_ex.getMessage();
		}
	    } catch (ReflectionException ref_ex) {
		if (alreadyNotified(index, OBSERVED_ATTRIBUTE_ERROR_NOTIFIED)) {
		    return;
		} else {
		    notif_type = MonitorNotification.OBSERVED_ATTRIBUTE_ERROR;
		    setAlreadyNotified(index, OBSERVED_ATTRIBUTE_ERROR_NOTIFIED);
		    msg = ref_ex.getMessage();
		}
	    }

	    if (msg == null) {
		// Check that the observed attribute is of type "Integer".
		//
		if (scan_counter instanceof Integer) {
		    type[index] = INTEGER;
		} else if (scan_counter instanceof Byte) {
		    type[index] = BYTE;
		} else if (scan_counter instanceof Short) {
		    type[index] = SHORT;
		} else if (scan_counter instanceof Long) {
		    type[index] = LONG;
		} else {
		    if (alreadyNotified(index,
					OBSERVED_ATTRIBUTE_TYPE_ERROR_NOTIFIED))
			return;
		    else {
			notif_type =
			    MonitorNotification.OBSERVED_ATTRIBUTE_TYPE_ERROR;
			setAlreadyNotified(index,
					   OBSERVED_ATTRIBUTE_TYPE_ERROR_NOTIFIED);
			msg =
			    "The observed attribute type must be " +
			    "an integer type.";
		    }
		}
	    }

	    if (msg == null) {
		// Check that threshold, offset and modulus have
		// values that fit in the counter's type
		//
		if (!isThresholdTypeValid(index)) {
		    if (alreadyNotified(index, THRESHOLD_ERROR_NOTIFIED))
			return;
		    else {
			notif_type = MonitorNotification.THRESHOLD_ERROR;
			setAlreadyNotified(index, THRESHOLD_ERROR_NOTIFIED);
			msg =
			    "The threshold, offset and modulus must " +
			    "be of the same type as the counter.";
		    }
		}
	    }

	    if (msg == null) {

		// Clear all already notified flags.
		//
		resetAllAlreadyNotified(index);

		// Check if counter has wrapped around.
		//
		if (modulusExceeded[index]) {
		    if (derivedGauge[index].longValue() <
			derivedGaugeExceeded[index].longValue()) {
			threshold[index] = initThreshold;
			modulusExceeded[index] = false;
			eventAlreadyNotified[index] = false;
		    }
		}

		// Update the derived gauge attributes and check the
		// validity of the new value.  The derived gauge value
		// is invalid when the differenceMode flag is set to
		// true and it is the first notification (so we
		// haven't 2 consecutive values to update the derived
		// gauge).
		//
		boolean is_derived_gauge_valid =
		    updateDerivedGauge(scan_counter, index);

		// Notify the listeners and update the threshold if
		// the updated derived gauge value is valid.
		//
		if (is_derived_gauge_valid) {
		    updateNotifications(index);
		    updateThreshold(index);
		}

	    } else {

		// msg != null, will send an error notification

		timeStamp = derivedGaugeTimestamp[index];
		derGauge = derivedGauge[index];

		// Reset values.
		//
		modulusExceeded[index] = false;
		eventAlreadyNotified[index] = false;
		previousScanCounter[index] = null;
	    }
	}

	if (msg != null) {
	    sendNotification(notif_type,
			     timeStamp,
			     msg,
			     derGauge,
			     null,
			     index);
	}
!!!8324507.java!!!	insertSpecificElementAt(in index : int) : void
        // Update threshold, derivedGauge, derivedGaugeTimestamp,
        // previousScanCounter, modulusExceeded, derivedGaugeExceeded,
        // eventAlreadyNotified and type values.

	if (index != elementCount)
	    throw new Error("Internal error: index != elementCount");

	if (elementCount >= threshold.length) {
	    threshold = expandArray(threshold);
	    derivedGauge = expandArray(derivedGauge);
	    previousScanCounter = expandArray(previousScanCounter);
	    derivedGaugeExceeded = expandArray(derivedGaugeExceeded);
	    derivedGaugeTimestamp = expandArray(derivedGaugeTimestamp);
	    modulusExceeded = expandArray(modulusExceeded);
	    eventAlreadyNotified = expandArray(eventAlreadyNotified);
	    type = expandArray(type);
	}

	threshold[index] = INTEGER_ZERO;
	derivedGauge[index] = INTEGER_ZERO;
	previousScanCounter[index] = null;
	derivedGaugeExceeded[index] = null;
	derivedGaugeTimestamp[index] = System.currentTimeMillis();
	modulusExceeded[index] = false;
	eventAlreadyNotified[index] = false;
	type[index] = INTEGER;
!!!8324635.java!!!	removeSpecificElementAt(in index : int) : void
        // Update threshold, derivedGauge, derivedGaugeTimestamp,
        // previousScanCounter, modulusExceeded, derivedGaugeExceeded,
        // eventAlreadyNotified and type values.
        //
        removeElementAt(threshold, index);
        removeElementAt(derivedGauge, index);
        removeElementAt(previousScanCounter, index);
        removeElementAt(derivedGaugeExceeded, index);
        removeElementAt(derivedGaugeTimestamp, index);
        removeElementAt(modulusExceeded, index);
        removeElementAt(eventAlreadyNotified, index);
        removeElementAt(type, index);
