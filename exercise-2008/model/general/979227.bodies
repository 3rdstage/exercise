class RSAMultiPrimePrivateCrtKeySpec
!!!7692571.java!!!	RSAMultiPrimePrivateCrtKeySpec(inout modulus : BigInteger, inout publicExponent : BigInteger, inout privateExponent : BigInteger, inout primeP : BigInteger, inout primeQ : BigInteger, inout primeExponentP : BigInteger, inout primeExponentQ : BigInteger, inout crtCoefficient : BigInteger, inout otherPrimeInfo : RSAOtherPrimeInfo)
	super(modulus, privateExponent);
	if (modulus == null) {
	    throw new NullPointerException("the modulus parameter must be " +
					    "non-null");
	}
	if (publicExponent == null) {
	    throw new NullPointerException("the publicExponent parameter " +
					    "must be non-null");
	}
	if (privateExponent == null) {
	    throw new NullPointerException("the privateExponent parameter " +
					    "must be non-null");
	}
	if (primeP == null) {
	    throw new NullPointerException("the primeP parameter " +
					    "must be non-null");
	}
	if (primeQ == null) {
	    throw new NullPointerException("the primeQ parameter " +
					    "must be non-null");
	}
	if (primeExponentP == null) {
	    throw new NullPointerException("the primeExponentP parameter " +
					    "must be non-null");
	}
	if (primeExponentQ == null) {
	    throw new NullPointerException("the primeExponentQ parameter " +
					    "must be non-null");
	}
	if (crtCoefficient == null) {
	    throw new NullPointerException("the crtCoefficient parameter " +
					    "must be non-null");
	} 
	this.publicExponent = publicExponent;
	this.primeP = primeP;
	this.primeQ = primeQ;
	this.primeExponentP = primeExponentP;
	this.primeExponentQ = primeExponentQ;
	this.crtCoefficient = crtCoefficient;
	if (otherPrimeInfo == null)  {
	    this.otherPrimeInfo = null;
	} else if (otherPrimeInfo.length == 0) {
	    throw new IllegalArgumentException("the otherPrimeInfo " +
						"parameter must not be empty");
	} else {
	    this.otherPrimeInfo = (RSAOtherPrimeInfo[])otherPrimeInfo.clone();
	}
!!!7692699.java!!!	getPublicExponent() : BigInteger
	return this.publicExponent;
!!!7692827.java!!!	getPrimeP() : BigInteger
	return this.primeP;
!!!7692955.java!!!	getPrimeQ() : BigInteger
	return this.primeQ;
!!!7693083.java!!!	getPrimeExponentP() : BigInteger
	return this.primeExponentP;
!!!7693211.java!!!	getPrimeExponentQ() : BigInteger
	return this.primeExponentQ;
!!!7693339.java!!!	getCrtCoefficient() : BigInteger
	return this.crtCoefficient;
!!!7693467.java!!!	getOtherPrimeInfo() : RSAOtherPrimeInfo
	if (otherPrimeInfo == null) return null;
	return (RSAOtherPrimeInfo[]) otherPrimeInfo.clone();
