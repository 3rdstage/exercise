class SubjectCodeSource
!!!6107163.java!!!	SubjectCodeSource(inout subject : Subject, inout principals : LinkedList, inout url : URL, inout certs : Certificate)
	super(url, certs);
	this.subject = subject;
	this.principals = (principals == null ?
		new LinkedList() :
		new LinkedList(principals));
	sysClassLoader =
		(ClassLoader)java.security.AccessController.doPrivileged
		(new java.security.PrivilegedAction() {
		public Object run() {
		    return ClassLoader.getSystemClassLoader();
		}
	});
!!!6107291.java!!!	getPrincipals() : LinkedList
	return principals;
!!!6107419.java!!!	getSubject() : Subject
	return subject;
!!!6107547.java!!!	implies(inout codesource : CodeSource) : boolean

	LinkedList subjectList = null;

	if (codesource == null ||
	    !(codesource instanceof SubjectCodeSource) ||
	    !(super.implies(codesource))) {

	    if (debug != null)
		debug.println("\tSubjectCodeSource.implies: FAILURE 1");
	    return false;
	}

	SubjectCodeSource that = (SubjectCodeSource)codesource;

	// if the principal list in the policy "implies"
	// the Subject associated with the current AccessControlContext,
	// then return true

	if (this.principals == null) {
	    if (debug != null)
		debug.println("\tSubjectCodeSource.implies: PASS 1");
	    return true;
	}

	if (that.getSubject() == null ||
	    that.getSubject().getPrincipals().size() == 0) {
	    if (debug != null)
		debug.println("\tSubjectCodeSource.implies: FAILURE 2");
	    return false;
	}

	ListIterator li = this.principals.listIterator(0);
	while (li.hasNext()) {
	    PolicyParser.PrincipalEntry pppe =
		(PolicyParser.PrincipalEntry)li.next();
	    try {

		// handle PrincipalComparators

		Class principalComparator = Class.forName(pppe.principalClass,
							true,
							sysClassLoader);
		Constructor c = principalComparator.getConstructor(PARAMS);
		PrincipalComparator pc =
			(PrincipalComparator)c.newInstance
			(new Object[] { pppe.principalName });

		if (!pc.implies(that.getSubject())) {
		    if (debug != null)
			debug.println("\tSubjectCodeSource.implies: FAILURE 3");
		    return false;
		} else {
		    if (debug != null)
			debug.println("\tSubjectCodeSource.implies: PASS 2");
		    return true;
		}
	    } catch (Exception e) {

		// no PrincipalComparator, simply compare Principals

		if (subjectList == null) {

		    if (that.getSubject() == null) {
			if (debug != null)
			    debug.println("\tSubjectCodeSource.implies: " +
					"FAILURE 4");
			return false;
		    }
		    Iterator i = that.getSubject().getPrincipals().iterator();

		    subjectList = new LinkedList();
		    while (i.hasNext()) {
			Principal p = (Principal)i.next();
			PolicyParser.PrincipalEntry spppe =
				new PolicyParser.PrincipalEntry
				(p.getClass().getName(), p.getName());
			subjectList.add(spppe);
		    }
		}
		
		if (!subjectListImpliesPrincipalEntry(subjectList, pppe)) {
		    if (debug != null)
			debug.println("\tSubjectCodeSource.implies: FAILURE 5");
		    return false;
		}
	    }
	}

	if (debug != null)
	    debug.println("\tSubjectCodeSource.implies: PASS 3");
	return true;
!!!6107675.java!!!	subjectListImpliesPrincipalEntry(inout subjectList : LinkedList, inout pppe : PrincipalEntry) : boolean

	ListIterator li = subjectList.listIterator(0);
	while (li.hasNext()) {
	    PolicyParser.PrincipalEntry listPppe = (PolicyParser.PrincipalEntry)
						li.next();

	    if (pppe.principalClass.equals
			(PolicyParser.PrincipalEntry.WILDCARD_CLASS) ||
		pppe.principalClass.equals
			(listPppe.principalClass)) {

		if (pppe.principalName.equals
			(PolicyParser.PrincipalEntry.WILDCARD_NAME) ||
		    pppe.principalName.equals
			(listPppe.principalName))
		    return true;
	    }
	}
	return false;
!!!6107803.java!!!	equals(inout obj : Object) : boolean

	if (obj == this)
	    return true;

	if (super.equals(obj) == false)
	    return false;

	if (!(obj instanceof SubjectCodeSource))
	    return false;

	SubjectCodeSource that = (SubjectCodeSource)obj;

	// the principal lists must match
	try {
	    if (this.getSubject() != that.getSubject())
		return false;
	} catch (SecurityException se) {
	    return false;
	}

	if ((this.principals == null && that.principals != null) ||
	    (this.principals != null && that.principals == null))
	    return false;
	
	if (this.principals != null && that.principals != null) {
	    if (!this.principals.containsAll(that.principals) ||
		!that.principals.containsAll(this.principals))

		return false;
	}

	return true;
!!!6107931.java!!!	hashCode() : int
	return super.hashCode();
!!!6108059.java!!!	toString() : String
	String returnMe = super.toString();
	if (getSubject() != null) {
	    if (debug != null) {
		final Subject finalSubject = getSubject();
		returnMe = returnMe + "\n" +
			java.security.AccessController.doPrivileged
				(new java.security.PrivilegedAction() {
				public Object run() {
				    return finalSubject.toString();
				}
			});
	    } else {
		returnMe = returnMe + "\n" + getSubject().toString();
	    }
	}
	if (principals != null) {
	    ListIterator li = principals.listIterator();
	    while (li.hasNext()) {
		PolicyParser.PrincipalEntry pppe =
		    (PolicyParser.PrincipalEntry)li.next();
		returnMe = returnMe + rb.getString("\n") +
			pppe.principalClass + " " +
			pppe.principalName;
	    }
	}
	return returnMe;
