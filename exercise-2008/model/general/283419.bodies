class GraphImpl
!!!1517211.java!!!	GraphImpl()
	nodeToData = new HashMap() ;
!!!1517339.java!!!	GraphImpl(inout coll : Collection)
	this() ;
	addAll( coll ) ;
!!!1517467.java!!!	add(inout obj : Object) : boolean
	if (!(obj instanceof Node))
	    throw new IllegalArgumentException( "Graphs must contain only Node instances" ) ;

	Node node = (Node)obj ;
	boolean found = nodeToData.keySet().contains( obj ) ;

	if (!found) {
	    NodeData nd = new NodeData() ;
	    nodeToData.put( node, nd ) ;
	}

	return !found ;
!!!1517595.java!!!	iterator() : Iterator
	return nodeToData.keySet().iterator() ;
!!!1517723.java!!!	size() : int
	return nodeToData.keySet().size() ;
!!!1517851.java!!!	getNodeData(inout node : Node) : NodeData
	return (NodeData)nodeToData.get( node ) ;
!!!1517979.java!!!	clearNodeData() : void
	// Clear every node
	Iterator iter = nodeToData.entrySet().iterator() ;
	while (iter.hasNext()) {
	    Map.Entry entry = (Map.Entry)iter.next() ;
	    NodeData nd = (NodeData)(entry.getValue()) ;
	    nd.clear( ) ;
	}
!!!1518235.java!!!	visitAll(inout nv : NodeVisitor) : void
	boolean done = false ;

	// Repeat the traversal until every node has been visited.  Since
	// it takes one pass to determine whether or not each node has 
	// already been visited, this loop always runs at least once.
	do {
	    done = true ;

	    // Copy entries to array to avoid concurrent modification
	    // problem with iterator if the visitor is updating the graph.
	    Map.Entry[] entries = 
		(Map.Entry[])nodeToData.entrySet().toArray( new Map.Entry[0] ) ;

	    // Visit each node in the graph that has not already been visited.
	    // If any node is visited in this pass, we must run at least one more
	    // pass.
	    for (int ctr=0; ctr<entries.length; ctr++) {
		Map.Entry current = entries[ctr] ;
		Node node = (Node)current.getKey() ;
		NodeData nd = (NodeData)current.getValue() ;

		if (!nd.isVisited()) {
		    nd.visited() ;
		    done = false ;

		    nv.visit( this, node, nd ) ;
		}
	    }
	} while (!done) ;	
!!!1518363.java!!!	markNonRoots() : void
	visitAll( 
	    new NodeVisitor() {
		public void visit( Graph graph, Node node, NodeData nd )
		{
		    Iterator iter = node.getChildren().iterator() ; // Iterator<Node>
		    while (iter.hasNext()) {
			Node child = (Node)iter.next() ;

			// Make sure the child is in the graph so it can be 
			// visited later if necessary.
			graph.add( child ) ;

			// Mark the child as a non-root, since a child is never a root.
			NodeData cnd = graph.getNodeData( child ) ;
			cnd.notRoot() ;
		    }
		}
	    } ) ;
!!!1518491.java!!!	collectRootSet() : Set
	final Set result = new HashSet() ;

	Iterator iter = nodeToData.entrySet().iterator() ;
	while (iter.hasNext()) {
	    Map.Entry entry = (Map.Entry)iter.next() ;
	    Node node = (Node)entry.getKey() ;
	    NodeData nd = (NodeData)entry.getValue() ;
	    if (nd.isRoot())
		result.add( node ) ;
	}

	return result ;
!!!1518619.java!!!	getRoots() : Set
	clearNodeData() ;
	markNonRoots() ;
	return collectRootSet() ;
