class ConvolveOp
!!!6638747.java!!!	ConvolveOp(inout kernel : Kernel, in edgeCondition : int, inout hints : RenderingHints)
        this.kernel   = kernel;
        this.edgeHint = edgeCondition;
        this.hints    = hints;
!!!6638875.java!!!	ConvolveOp(inout kernel : Kernel)
        this.kernel   = kernel;
        this.edgeHint = EDGE_ZERO_FILL;
!!!6639003.java!!!	getEdgeCondition() : int
        return edgeHint;
!!!6639131.java!!!	getKernel() : Kernel
        return (Kernel) kernel.clone();
!!!6639259.java!!!	filter(inout src : BufferedImage, inout dst : BufferedImage) : BufferedImage
        if (src == null) {
            throw new NullPointerException("src image is null");
        }
        if (src == dst) {
            throw new IllegalArgumentException("src image cannot be the "+
                                               "same as the dst image");
        }

        boolean needToConvert = false;
        ColorModel srcCM = src.getColorModel();
        ColorModel dstCM;
        BufferedImage origDst = dst;

        // Can't convolve an IndexColorModel.  Need to expand it
        if (srcCM instanceof IndexColorModel) {
            IndexColorModel icm = (IndexColorModel) srcCM;
            src = icm.convertToIntDiscrete(src.getRaster(), false);
            srcCM = src.getColorModel();
        }
        
        if (dst == null) {
            dst = createCompatibleDestImage(src, null);
            dstCM = srcCM;
            origDst = dst;
        }
        else {
            dstCM = dst.getColorModel();
            if (srcCM.getColorSpace().getType() !=
                dstCM.getColorSpace().getType())
            {
                needToConvert = true;
                dst = createCompatibleDestImage(src, null);
                dstCM = dst.getColorModel();
            }
            else if (dstCM instanceof IndexColorModel) {
                dst = createCompatibleDestImage(src, null);
                dstCM = dst.getColorModel();
            }
        }

        if (ImagingLib.filter(this, src, dst) == null) {
            throw new ImagingOpException ("Unable to convolve src image");
        }

        if (needToConvert) {
            ColorConvertOp ccop = new ColorConvertOp(hints);
            ccop.filter(dst, origDst);
        }
        else if (origDst != dst) {
            java.awt.Graphics2D g = origDst.createGraphics();
	    try {
                g.drawImage(dst, 0, 0, null);
	    } finally {
	        g.dispose();
	    }
        }

        return origDst;
!!!6639387.java!!!	filter(inout src : Raster, inout dst : WritableRaster) : WritableRaster
        if (dst == null) {
            dst = createCompatibleDestRaster(src);
        }
        else if (src == dst) {
            throw new IllegalArgumentException("src image cannot be the "+
                                               "same as the dst image");
        }
        else if (src.getNumBands() != dst.getNumBands()) {
            throw new ImagingOpException("Different number of bands in src "+
                                         " and dst Rasters");
        }
        
        if (ImagingLib.filter(this, src, dst) == null) {
            throw new ImagingOpException ("Unable to convolve src image");
        }

        return dst;
!!!6639515.java!!!	createCompatibleDestImage(inout src : BufferedImage, inout destCM : ColorModel) : BufferedImage
        BufferedImage image;
        if (destCM == null) {
            destCM = src.getColorModel();
            // Not much support for ICM
            if (destCM instanceof IndexColorModel) {
                destCM = ColorModel.getRGBdefault();
            }
        }

        int w = src.getWidth();
        int h = src.getHeight();
        image = new BufferedImage (destCM,
                                   destCM.createCompatibleWritableRaster(w, h),
                                   destCM.isAlphaPremultiplied(), null);

        return image;
!!!6639643.java!!!	createCompatibleDestRaster(inout src : Raster) : WritableRaster
        return src.createCompatibleWritableRaster();
!!!6639771.java!!!	getBounds2D(inout src : BufferedImage) : Rectangle2D
	return getBounds2D(src.getRaster());
!!!6639899.java!!!	getBounds2D(inout src : Raster) : Rectangle2D
	return src.getBounds();
!!!6640027.java!!!	getPoint2D(inout srcPt : Point2D, inout dstPt : Point2D) : Point2D
        if (dstPt == null) {
            dstPt = new Point2D.Float();
        }
	dstPt.setLocation(srcPt.getX(), srcPt.getY());

        return dstPt;
!!!6640155.java!!!	getRenderingHints() : RenderingHints
        return hints;
