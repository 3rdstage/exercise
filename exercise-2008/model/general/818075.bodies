class Variable
!!!6075547.java!!!	setIndex(in index : int) : void
  	m_index = index;
!!!6075675.java!!!	getIndex() : int
  	return m_index;
!!!6075803.java!!!	setIsGlobal(inout isGlobal : boolean) : void
  	m_isGlobal = isGlobal;
!!!6075931.java!!!	getGlobal() : boolean
  	return m_isGlobal;
!!!6076059.java!!!	fixupVariables(inout vars : Vector, in globalsSize : int) : void
    m_fixUpWasCalled = true;
    int sz = vars.size();

    for (int i = vars.size()-1; i >= 0; i--) 
    {
      QName qn = (QName)vars.elementAt(i);
      // System.out.println("qn: "+qn);
      if(qn.equals(m_qname))
      {
        
        if(i < globalsSize)
        {
          m_isGlobal = true;
          m_index = i;
        }
        else
        {
          m_index = i-globalsSize;
        }
          
        return;
      }
    }
    
    java.lang.String msg = XSLMessages.createXPATHMessage(XPATHErrorResources.ER_COULD_NOT_FIND_VAR, 
                                             new Object[]{m_qname.toString()});
                                             
    TransformerException te = new TransformerException(msg, this);
                                             
    throw new com.sun.org.apache.xml.internal.utils.WrappedRuntimeException(te);
    
!!!6076187.java!!!	setQName(inout qname : QName) : void
    m_qname = qname;
!!!6076315.java!!!	getQName() : QName
    return m_qname;
!!!6076443.java!!!	execute(inout xctxt : XPathContext) : XObject
  	return execute(xctxt, false);
!!!6076571.java!!!	execute(inout xctxt : XPathContext, inout destructiveOK : boolean) : XObject
  	com.sun.org.apache.xml.internal.utils.PrefixResolver xprefixResolver = xctxt.getNamespaceContext();

	XObject result;

    // Is the variable fetched always the same?
    // XObject result = xctxt.getVariable(m_qname);
    if(m_fixUpWasCalled)
    {    
      if(m_isGlobal)
        result = xctxt.getVarStack().getGlobalVariable(xctxt, m_index, destructiveOK);
      else
        result = xctxt.getVarStack().getLocalVariable(xctxt, m_index, destructiveOK);
    } else {  
    	result = xctxt.getVarStack().getVariableOrParam(xctxt,m_qname);
    }
    
      if (null == result)
      {
        // This should now never happen...
        warn(xctxt, XPATHErrorResources.WG_ILLEGAL_VARIABLE_REFERENCE,
             new Object[]{ m_qname.getLocalPart() });  //"VariableReference given for variable out "+
  //      (new RuntimeException()).printStackTrace();
  //      error(xctxt, XPATHErrorResources.ER_COULDNOT_GET_VAR_NAMED,
  //            new Object[]{ m_qname.getLocalPart() });  //"Could not get variable named "+varName);
        
        result = new XNodeSet(xctxt.getDTMManager());
      }
  
      return result;
//    }
//    else
//    {
//      // Hack city... big time.  This is needed to evaluate xpaths from extensions, 
//      // pending some bright light going off in my head.  Some sort of callback?
//      synchronized(this)
//      {
//      	com.sun.org.apache.xalan.internal.templates.ElemVariable vvar= getElemVariable();
//      	if(null != vvar)
//      	{
//          m_index = vvar.getIndex();
//          m_isGlobal = vvar.getIsTopLevel();
//          m_fixUpWasCalled = true;
//          return execute(xctxt);
//      	}
//      }
//      throw new javax.xml.transform.TransformerException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_VAR_NOT_RESOLVABLE, new Object[]{m_qname.toString()})); //"Variable not resolvable: "+m_qname);
//    }
!!!6076699.java!!!	isStableNumber() : boolean
    return true;
!!!6076827.java!!!	getAnalysisBits() : int
    // <<<<<<<   TIGER SPECIFIC CHANGE >>>>>>>>>
    // As we are not supporting Xalan interpretive we are taking away the functionality
    // dependent on XSLT interpretive Transformer. Only way supported is to use XSLTC 
    // and the execution path needed for supporting standard XPath API defined by 
    // JAXP 1.3 . 

    return WalkerFactory.BIT_FILTER;
!!!6076955.java!!!	callVisitors(inout owner : ExpressionOwner, inout visitor : XPathVisitor) : void
  	visitor.visitVariableRef(owner, this);
!!!6077083.java!!!	deepEquals(inout expr : Expression) : boolean
  	if(!isSameClass(expr))
  		return false;
  		
  	if(!m_qname.equals(((Variable)expr).m_qname))
  		return false;
  		
  	// We have to make sure that the qname really references 
  	// the same variable element.
        // <<<<<<<   TIGER SPECIFIC CHANGE >>>>>>>>>
        // As we are not supporting Xalan interpretive we are taking away the functionality
        // dependent on XSLT interpretive Transformer. Only way supported is to use XSLTC 
        // and the execution path needed for supporting standard XPath API defined by 
        // JAXP 1.3 . 

  	return true;
!!!6077211.java!!!	isPsuedoVarRef() : boolean
  	java.lang.String ns = m_qname.getNamespaceURI();
  	if((null != ns) && ns.equals(PSUEDOVARNAMESPACE))
  	{
  		if(m_qname.getLocalName().startsWith("#"))
  			return true;
  	}
  	return false;
