class CPESSC_Visitor
!!!3908891.java!!!	CPESSC_Visitor(inout _jc : JavaClass)
			jc = _jc;
			cp = _jc.getConstantPool();
			cplen = cp.getLength();
			
			CONST_Class = com.sun.org.apache.bcel.internal.classfile.ConstantClass.class;
			CONST_Fieldref = com.sun.org.apache.bcel.internal.classfile.ConstantFieldref.class;
			CONST_Methodref = com.sun.org.apache.bcel.internal.classfile.ConstantMethodref.class;
			CONST_InterfaceMethodref = com.sun.org.apache.bcel.internal.classfile.ConstantInterfaceMethodref.class;
			CONST_String = com.sun.org.apache.bcel.internal.classfile.ConstantString.class;
			CONST_Integer = com.sun.org.apache.bcel.internal.classfile.ConstantInteger.class;
			CONST_Float = com.sun.org.apache.bcel.internal.classfile.ConstantFloat.class;
			CONST_Long = com.sun.org.apache.bcel.internal.classfile.ConstantLong.class;
			CONST_Double = com.sun.org.apache.bcel.internal.classfile.ConstantDouble.class;
			CONST_NameAndType = com.sun.org.apache.bcel.internal.classfile.ConstantNameAndType.class;
			CONST_Utf8 = com.sun.org.apache.bcel.internal.classfile.ConstantUtf8.class;
		
			carrier = new DescendingVisitor(_jc, this);
			carrier.visit();
!!!3909019.java!!!	checkIndex(inout referrer : Node, in index : int, inout shouldbe : Class) : void
			if ((index < 0) || (index >= cplen)){
				throw new ClassConstraintException("Invalid index '"+index+"' used by '"+tostring(referrer)+"'.");
			}
			Constant c = cp.getConstant(index);
			if (! shouldbe.isInstance(c)){
				String isnot = shouldbe.toString().substring(shouldbe.toString().lastIndexOf(".")+1); //Cut all before last "."
				throw new ClassCastException("Illegal constant '"+tostring(c)+"' at index '"+index+"'. '"+tostring(referrer)+"' expects a '"+shouldbe+"'.");
			}
!!!3909147.java!!!	visitJavaClass(inout obj : JavaClass) : void
			Attribute[] atts = obj.getAttributes();
			boolean foundSourceFile = false;
			boolean foundInnerClasses = false;
			
			// Is there an InnerClass referenced?
			// This is a costly check; existing verifiers don't do it!
			boolean hasInnerClass = new InnerClassDetector(jc).innerClassReferenced();
			
			for (int i=0; i<atts.length; i++){
				if ((! (atts[i] instanceof SourceFile)) &&
				    (! (atts[i] instanceof Deprecated))     &&
				    (! (atts[i] instanceof InnerClasses)) &&
				    (! (atts[i] instanceof Synthetic))){
					addMessage("Attribute '"+tostring(atts[i])+"' as an attribute of the ClassFile structure '"+tostring(obj)+"' is unknown and will therefore be ignored.");
				}
				
				if (atts[i] instanceof SourceFile){
					if (foundSourceFile == false) foundSourceFile = true;
					else throw new ClassConstraintException("A ClassFile structure (like '"+tostring(obj)+"') may have no more than one SourceFile attribute."); //vmspec2 4.7.7
				}
			
				if (atts[i] instanceof InnerClasses){
					if (foundInnerClasses == false) foundInnerClasses = true;
					else{
						if (hasInnerClass){
							throw new ClassConstraintException("A Classfile structure (like '"+tostring(obj)+"') must have exactly one InnerClasses attribute if at least one Inner Class is referenced (which is the case). More than one InnerClasses attribute was found.");
						}
					}
					if (!hasInnerClass){
						addMessage("No referenced Inner Class found, but InnerClasses attribute '"+tostring(atts[i])+"' found. Strongly suggest removal of that attribute.");
					}
				}

			}
			if (hasInnerClass && !foundInnerClasses){
				//throw new ClassConstraintException("A Classfile structure (like '"+tostring(obj)+"') must have exactly one InnerClasses attribute if at least one Inner Class is referenced (which is the case). No InnerClasses attribute was found.");
				//vmspec2, page 125 says it would be a constraint: but existing verifiers
				//don't check it and javac doesn't satisfy it when it comes to anonymous
				//inner classes
				addMessage("A Classfile structure (like '"+tostring(obj)+"') must have exactly one InnerClasses attribute if at least one Inner Class is referenced (which is the case). No InnerClasses attribute was found.");
			}	
!!!3909275.java!!!	visitConstantClass(inout obj : ConstantClass) : void
			if (obj.getTag() != Constants.CONSTANT_Class){
				throw new ClassConstraintException("Wrong constant tag in '"+tostring(obj)+"'.");
			}
			checkIndex(obj, obj.getNameIndex(), CONST_Utf8);
		
!!!3909403.java!!!	visitConstantFieldref(inout obj : ConstantFieldref) : void
			if (obj.getTag() != Constants.CONSTANT_Fieldref){
				throw new ClassConstraintException("Wrong constant tag in '"+tostring(obj)+"'.");
			}
			checkIndex(obj, obj.getClassIndex(), CONST_Class);
			checkIndex(obj, obj.getNameAndTypeIndex(), CONST_NameAndType);
!!!3909531.java!!!	visitConstantMethodref(inout obj : ConstantMethodref) : void
			if (obj.getTag() != Constants.CONSTANT_Methodref){
				throw new ClassConstraintException("Wrong constant tag in '"+tostring(obj)+"'.");
			}
			checkIndex(obj, obj.getClassIndex(), CONST_Class);
			checkIndex(obj, obj.getNameAndTypeIndex(), CONST_NameAndType);
!!!3909659.java!!!	visitConstantInterfaceMethodref(inout obj : ConstantInterfaceMethodref) : void
			if (obj.getTag() != Constants.CONSTANT_InterfaceMethodref){
				throw new ClassConstraintException("Wrong constant tag in '"+tostring(obj)+"'.");
			}
			checkIndex(obj, obj.getClassIndex(), CONST_Class);
			checkIndex(obj, obj.getNameAndTypeIndex(), CONST_NameAndType);
!!!3909787.java!!!	visitConstantString(inout obj : ConstantString) : void
			if (obj.getTag() != Constants.CONSTANT_String){
				throw new ClassConstraintException("Wrong constant tag in '"+tostring(obj)+"'.");
			}
			checkIndex(obj, obj.getStringIndex(), CONST_Utf8);
!!!3909915.java!!!	visitConstantInteger(inout obj : ConstantInteger) : void
			if (obj.getTag() != Constants.CONSTANT_Integer){
				throw new ClassConstraintException("Wrong constant tag in '"+tostring(obj)+"'.");
			}
			// no indices to check
!!!3910043.java!!!	visitConstantFloat(inout obj : ConstantFloat) : void
			if (obj.getTag() != Constants.CONSTANT_Float){
				throw new ClassConstraintException("Wrong constant tag in '"+tostring(obj)+"'.");
			}
			//no indices to check
!!!3910171.java!!!	visitConstantLong(inout obj : ConstantLong) : void
			if (obj.getTag() != Constants.CONSTANT_Long){
				throw new ClassConstraintException("Wrong constant tag in '"+tostring(obj)+"'.");
			}
			//no indices to check
!!!3910299.java!!!	visitConstantDouble(inout obj : ConstantDouble) : void
			if (obj.getTag() != Constants.CONSTANT_Double){
				throw new ClassConstraintException("Wrong constant tag in '"+tostring(obj)+"'.");
			}
			//no indices to check
!!!3910427.java!!!	visitConstantNameAndType(inout obj : ConstantNameAndType) : void
			if (obj.getTag() != Constants.CONSTANT_NameAndType){
				throw new ClassConstraintException("Wrong constant tag in '"+tostring(obj)+"'.");
			}
			checkIndex(obj, obj.getNameIndex(), CONST_Utf8);
			//checkIndex(obj, obj.getDescriptorIndex(), CONST_Utf8); //inconsistently named in BCEL, see below.
			checkIndex(obj, obj.getSignatureIndex(), CONST_Utf8);
!!!3910555.java!!!	visitConstantUtf8(inout obj : ConstantUtf8) : void
			if (obj.getTag() != Constants.CONSTANT_Utf8){
				throw new ClassConstraintException("Wrong constant tag in '"+tostring(obj)+"'.");
			}
			//no indices to check
!!!3910683.java!!!	visitField(inout obj : Field) : void

			if (jc.isClass()){
				int maxone=0;
				if (obj.isPrivate()) maxone++;
				if (obj.isProtected()) maxone++;
				if (obj.isPublic()) maxone++;
				if (maxone > 1){
					throw new ClassConstraintException("Field '"+tostring(obj)+"' must only have at most one of its ACC_PRIVATE, ACC_PROTECTED, ACC_PUBLIC modifiers set.");
				}
			
				if (obj.isFinal() && obj.isVolatile()){
					throw new ClassConstraintException("Field '"+tostring(obj)+"' must only have at most one of its ACC_FINAL, ACC_VOLATILE modifiers set.");
				}
			}
			else{ // isInterface!
				if (!obj.isPublic()){
					throw new ClassConstraintException("Interface field '"+tostring(obj)+"' must have the ACC_PUBLIC modifier set but hasn't!");
				}
				if (!obj.isStatic()){
					throw new ClassConstraintException("Interface field '"+tostring(obj)+"' must have the ACC_STATIC modifier set but hasn't!");
				}
				if (!obj.isFinal()){
					throw new ClassConstraintException("Interface field '"+tostring(obj)+"' must have the ACC_FINAL modifier set but hasn't!");
				}
			}

			if ((obj.getAccessFlags() & ~(ACC_PUBLIC|ACC_PRIVATE|ACC_PROTECTED|ACC_STATIC|ACC_FINAL|ACC_VOLATILE|ACC_TRANSIENT)) > 0){
				addMessage("Field '"+tostring(obj)+"' has access flag(s) other than ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED, ACC_STATIC, ACC_FINAL, ACC_VOLATILE, ACC_TRANSIENT set (ignored).");
			}

			checkIndex(obj, obj.getNameIndex(), CONST_Utf8);
			
			String name = obj.getName();
			if (! validFieldName(name)){
				throw new ClassConstraintException("Field '"+tostring(obj)+"' has illegal name '"+obj.getName()+"'.");
			}

			// A descriptor is often named signature in BCEL
			checkIndex(obj, obj.getSignatureIndex(), CONST_Utf8);
			
			String sig  = ((ConstantUtf8) (cp.getConstant(obj.getSignatureIndex()))).getBytes(); // Field or Method signature(=descriptor)

			try{
				Type t = Type.getType(sig);
			}
			catch (ClassFormatError cfe){ // sometimes BCEL is a little harsh describing exceptional situations.
				throw new ClassConstraintException("Illegal descriptor (==signature) '"+sig+"' used by '"+tostring(obj)+"'.");
			}
			
			String nameanddesc = (name+sig);
			if (field_names_and_desc.contains(nameanddesc)){
				throw new ClassConstraintException("No two fields (like '"+tostring(obj)+"') are allowed have same names and descriptors!");
			}
			if (field_names.contains(name)){
				addMessage("More than one field of name '"+name+"' detected (but with different type descriptors). This is very unusual.");
			}
			field_names_and_desc.add(nameanddesc);
			field_names.add(name);
			
			Attribute[] atts = obj.getAttributes();
			for (int i=0; i<atts.length; i++){
				if ((! (atts[i] instanceof ConstantValue)) &&
				    (! (atts[i] instanceof Synthetic))     &&
				    (! (atts[i] instanceof Deprecated))){
					addMessage("Attribute '"+tostring(atts[i])+"' as an attribute of Field '"+tostring(obj)+"' is unknown and will therefore be ignored.");
				}
				if  (! (atts[i] instanceof ConstantValue)){
					addMessage("Attribute '"+tostring(atts[i])+"' as an attribute of Field '"+tostring(obj)+"' is not a ConstantValue and is therefore only of use for debuggers and such.");
				}
			}
!!!3910811.java!!!	visitMethod(inout obj : Method) : void

			checkIndex(obj, obj.getNameIndex(), CONST_Utf8);
			
			String name = obj.getName();
			if (! validMethodName(name, true)){
				throw new ClassConstraintException("Method '"+tostring(obj)+"' has illegal name '"+name+"'.");
			}

			// A descriptor is often named signature in BCEL
			checkIndex(obj, obj.getSignatureIndex(), CONST_Utf8);

			String sig  = ((ConstantUtf8) (cp.getConstant(obj.getSignatureIndex()))).getBytes(); // Method's signature(=descriptor)
	
			Type t;
			Type[] ts; // needed below the try block.
			try{
				t  = Type.getReturnType(sig);
				ts = Type.getArgumentTypes(sig);
			}
			catch (ClassFormatError cfe){
				// Well, BCEL sometimes is a little harsh describing exceptional situations.
				throw new ClassConstraintException("Illegal descriptor (==signature) '"+sig+"' used by Method '"+tostring(obj)+"'.");
			}

			// Check if referenced objects exist.
			Type act = t;
			if (act instanceof ArrayType) act = ((ArrayType) act).getBasicType();
			if (act instanceof ObjectType){
				Verifier v = VerifierFactory.getVerifier( ((ObjectType) act).getClassName() );
				VerificationResult vr = v.doPass1();
				if (vr != VerificationResult.VR_OK) {
					throw new ClassConstraintException("Method '"+tostring(obj)+"' has a return type that does not pass verification pass 1: '"+vr+"'.");
				}
			}
			
			for (int i=0; i<ts.length; i++){
				act = ts[i];
				if (act instanceof ArrayType) act = ((ArrayType) act).getBasicType();
				if (act instanceof ObjectType){
					Verifier v = VerifierFactory.getVerifier( ((ObjectType) act).getClassName() );
					VerificationResult vr = v.doPass1();
					if (vr != VerificationResult.VR_OK) {
						throw new ClassConstraintException("Method '"+tostring(obj)+"' has an argument type that does not pass verification pass 1: '"+vr+"'.");
					}
				}
			}

			// Nearly forgot this! Funny return values are allowed, but a non-empty arguments list makes a different method out of it!
			if (name.equals(STATIC_INITIALIZER_NAME) && (ts.length != 0)){
				throw new ClassConstraintException("Method '"+tostring(obj)+"' has illegal name '"+name+"'. It's name resembles the class or interface initialization method which it isn't because of its arguments (==descriptor).");
			}

			if (jc.isClass()){
				int maxone=0;
				if (obj.isPrivate()) maxone++;
				if (obj.isProtected()) maxone++;
				if (obj.isPublic()) maxone++;
				if (maxone > 1){
					throw new ClassConstraintException("Method '"+tostring(obj)+"' must only have at most one of its ACC_PRIVATE, ACC_PROTECTED, ACC_PUBLIC modifiers set.");
				}
			
				if (obj.isAbstract()){
					if (obj.isFinal()) throw new ClassConstraintException("Abstract method '"+tostring(obj)+"' must not have the ACC_FINAL modifier set.");
					if (obj.isNative()) throw new ClassConstraintException("Abstract method '"+tostring(obj)+"' must not have the ACC_NATIVE modifier set.");
					if (obj.isPrivate()) throw new ClassConstraintException("Abstract method '"+tostring(obj)+"' must not have the ACC_PRIVATE modifier set.");
					if (obj.isStatic()) throw new ClassConstraintException("Abstract method '"+tostring(obj)+"' must not have the ACC_STATIC modifier set.");
					if (obj.isStrictfp()) throw new ClassConstraintException("Abstract method '"+tostring(obj)+"' must not have the ACC_STRICT modifier set.");
					if (obj.isSynchronized()) throw new ClassConstraintException("Abstract method '"+tostring(obj)+"' must not have the ACC_SYNCHRONIZED modifier set.");
				}
			}
			else{ // isInterface!
				if (!name.equals(STATIC_INITIALIZER_NAME)){//vmspec2, p.116, 2nd paragraph
					if (!obj.isPublic()){
						throw new ClassConstraintException("Interface method '"+tostring(obj)+"' must have the ACC_PUBLIC modifier set but hasn't!");
					}
					if (!obj.isAbstract()){
						throw new ClassConstraintException("Interface method '"+tostring(obj)+"' must have the ACC_STATIC modifier set but hasn't!");
					}
					if (	obj.isPrivate() ||
								obj.isProtected() ||
								obj.isStatic() ||
								obj.isFinal() ||
								obj.isSynchronized() ||
								obj.isNative() ||
								obj.isStrictfp() ){
						throw new ClassConstraintException("Interface method '"+tostring(obj)+"' must not have any of the ACC_PRIVATE, ACC_PROTECTED, ACC_STATIC, ACC_FINAL, ACC_SYNCHRONIZED, ACC_NATIVE, ACC_ABSTRACT, ACC_STRICT modifiers set.");
					}
				}
			}

			// A specific instance initialization method... (vmspec2,Page 116).
			if (name.equals(CONSTRUCTOR_NAME)){
				//..may have at most one of ACC_PRIVATE, ACC_PROTECTED, ACC_PUBLIC set: is checked above.
				//..may also have ACC_STRICT set, but none of the other flags in table 4.5 (vmspec2, page 115)
				if (	obj.isStatic() ||
							obj.isFinal() ||
							obj.isSynchronized() ||
							obj.isNative() ||
							obj.isAbstract() ){
					throw new ClassConstraintException("Instance initialization method '"+tostring(obj)+"' must not have any of the ACC_STATIC, ACC_FINAL, ACC_SYNCHRONIZED, ACC_NATIVE, ACC_ABSTRACT modifiers set.");
				}
			}

			// Class and interface initialization methods...
			if (name.equals(STATIC_INITIALIZER_NAME)){
				if ((obj.getAccessFlags() & (~ACC_STRICT)) > 0){
					addMessage("Class or interface initialization method '"+tostring(obj)+"' has superfluous access modifier(s) set: everything but ACC_STRICT is ignored.");
				}
				if (obj.isAbstract()){
					throw new ClassConstraintException("Class or interface initialization method '"+tostring(obj)+"' must not be abstract. This contradicts the Java Language Specification, Second Edition (which omits this constraint) but is common practice of existing verifiers.");
				}
			}

			if ((obj.getAccessFlags() & ~(ACC_PUBLIC|ACC_PRIVATE|ACC_PROTECTED|ACC_STATIC|ACC_FINAL|ACC_SYNCHRONIZED|ACC_NATIVE|ACC_ABSTRACT|ACC_STRICT)) > 0){
				addMessage("Method '"+tostring(obj)+"' has access flag(s) other than ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED, ACC_STATIC, ACC_FINAL, ACC_SYNCHRONIZED, ACC_NATIVE, ACC_ABSTRACT, ACC_STRICT set (ignored).");
			}

			String nameanddesc = (name+sig);
			if (method_names_and_desc.contains(nameanddesc)){
				throw new ClassConstraintException("No two methods (like '"+tostring(obj)+"') are allowed have same names and desciptors!");
			}
			method_names_and_desc.add(nameanddesc);

			Attribute[] atts = obj.getAttributes();
			int num_code_atts = 0;
			for (int i=0; i<atts.length; i++){
				if ((! (atts[i] instanceof Code)) &&
				    (! (atts[i] instanceof ExceptionTable))     &&
				    (! (atts[i] instanceof Synthetic)) &&
				    (! (atts[i] instanceof Deprecated))){
					addMessage("Attribute '"+tostring(atts[i])+"' as an attribute of Method '"+tostring(obj)+"' is unknown and will therefore be ignored.");
				}
				if ((! (atts[i] instanceof Code)) &&
						(! (atts[i] instanceof ExceptionTable))){
					addMessage("Attribute '"+tostring(atts[i])+"' as an attribute of Method '"+tostring(obj)+"' is neither Code nor Exceptions and is therefore only of use for debuggers and such.");
				}
				if ((atts[i] instanceof Code) && (obj.isNative() || obj.isAbstract())){
					throw new ClassConstraintException("Native or abstract methods like '"+tostring(obj)+"' must not have a Code attribute like '"+tostring(atts[i])+"'."); //vmspec2 page120, 4.7.3
				}
				if (atts[i] instanceof Code) num_code_atts++;
			}
			if ( !obj.isNative() && !obj.isAbstract() && num_code_atts != 1){
				throw new ClassConstraintException("Non-native, non-abstract methods like '"+tostring(obj)+"' must have exactly one Code attribute (found: "+num_code_atts+").");
			}
!!!3910939.java!!!	visitSourceFile(inout obj : SourceFile) : void
//vmspec2 4.7.7

			// zero or one SourceFile attr per ClassFile: see visitJavaClass()

			checkIndex(obj, obj.getNameIndex(), CONST_Utf8);
			
			String name = ((ConstantUtf8) cp.getConstant(obj.getNameIndex())).getBytes();
			if (! name.equals("SourceFile")){
				throw new ClassConstraintException("The SourceFile attribute '"+tostring(obj)+"' is not correctly named 'SourceFile' but '"+name+"'.");
			}

			checkIndex(obj, obj.getSourceFileIndex(), CONST_Utf8);
			
			String sourcefilename = ((ConstantUtf8) cp.getConstant(obj.getSourceFileIndex())).getBytes(); //==obj.getSourceFileName() ?
			String sourcefilenamelc = sourcefilename.toLowerCase();

			if (	(sourcefilename.indexOf('/') != -1) ||
						(sourcefilename.indexOf('\\') != -1) ||
						(sourcefilename.indexOf(':') != -1) ||
						(sourcefilenamelc.lastIndexOf(".java") == -1)	){
				addMessage("SourceFile attribute '"+tostring(obj)+"' has a funny name: remember not to confuse certain parsers working on javap's output. Also, this name ('"+sourcefilename+"') is considered an unqualified (simple) file name only.");
			}
!!!3911067.java!!!	visitDeprecated(inout obj : Deprecated) : void
//vmspec2 4.7.10
			checkIndex(obj, obj.getNameIndex(), CONST_Utf8);

			String name = ((ConstantUtf8) cp.getConstant(obj.getNameIndex())).getBytes();
			if (! name.equals("Deprecated")){
				throw new ClassConstraintException("The Deprecated attribute '"+tostring(obj)+"' is not correctly named 'Deprecated' but '"+name+"'.");
			}
!!!3911195.java!!!	visitSynthetic(inout obj : Synthetic) : void
//vmspec2 4.7.6
			checkIndex(obj, obj.getNameIndex(), CONST_Utf8);
			String name = ((ConstantUtf8) cp.getConstant(obj.getNameIndex())).getBytes();
			if (! name.equals("Synthetic")){
				throw new ClassConstraintException("The Synthetic attribute '"+tostring(obj)+"' is not correctly named 'Synthetic' but '"+name+"'.");
			}
!!!3911323.java!!!	visitInnerClasses(inout obj : InnerClasses) : void
//vmspec2 4.7.5

			// exactly one InnerClasses attr per ClassFile if some inner class is refernced: see visitJavaClass()
		
			checkIndex(obj, obj.getNameIndex(), CONST_Utf8);

			String name = ((ConstantUtf8) cp.getConstant(obj.getNameIndex())).getBytes();
			if (! name.equals("InnerClasses")){
				throw new ClassConstraintException("The InnerClasses attribute '"+tostring(obj)+"' is not correctly named 'InnerClasses' but '"+name+"'.");
			}

			InnerClass[] ics = obj.getInnerClasses();
			
			for (int i=0; i<ics.length; i++){
				checkIndex(obj, ics[i].getInnerClassIndex(), CONST_Class);
				int outer_idx = ics[i].getOuterClassIndex();
				if (outer_idx != 0){
					checkIndex(obj, outer_idx, CONST_Class);
				}
				int innername_idx = ics[i].getInnerNameIndex();
				if (innername_idx != 0){
					checkIndex(obj, innername_idx, CONST_Utf8);
				}
				int acc = ics[i].getInnerAccessFlags();
				acc = acc & (~ (ACC_PUBLIC | ACC_PRIVATE | ACC_PROTECTED | ACC_STATIC | ACC_FINAL | ACC_INTERFACE | ACC_ABSTRACT));
				if (acc != 0){
					addMessage("Unknown access flag for inner class '"+tostring(ics[i])+"' set (InnerClasses attribute '"+tostring(obj)+"').");
				}
			}
			// Semantical consistency is not yet checked by Sun, see vmspec2 4.7.5.
			// [marked TODO in JustIce]
!!!3911451.java!!!	visitConstantValue(inout obj : ConstantValue) : void
//vmspec2 4.7.2
			// Despite its name, this really is an Attribute,
			// not a constant!
			checkIndex(obj, obj.getNameIndex(), CONST_Utf8);

			String name = ((ConstantUtf8) cp.getConstant(obj.getNameIndex())).getBytes();
			if (! name.equals("ConstantValue")){
				throw new ClassConstraintException("The ConstantValue attribute '"+tostring(obj)+"' is not correctly named 'ConstantValue' but '"+name+"'.");
			}

			Object pred = carrier.predecessor();
			if (pred instanceof Field){ //ConstantValue attributes are quite senseless if the predecessor is not a field.
				Field f = (Field) pred;
				// Field constraints have been checked before -- so we are safe using their type information.
				Type field_type = Type.getType(((ConstantUtf8) (cp.getConstant(f.getSignatureIndex()))).getBytes());

				int index = obj.getConstantValueIndex();
				if ((index < 0) || (index >= cplen)){
					throw new ClassConstraintException("Invalid index '"+index+"' used by '"+tostring(obj)+"'.");
				}
				Constant c = cp.getConstant(index);
				
				if (CONST_Long.isInstance(c) && field_type.equals(Type.LONG)){
					return;
				}
				if (CONST_Float.isInstance(c) && field_type.equals(Type.FLOAT)){
					return;
				}
				if (CONST_Double.isInstance(c) && field_type.equals(Type.DOUBLE)){
					return;
				}
				if (CONST_Integer.isInstance(c) && (field_type.equals(Type.INT) || field_type.equals(Type.SHORT) || field_type.equals(Type.CHAR) || field_type.equals(Type.BYTE) || field_type.equals(Type.BOOLEAN))){
					return;
				}
				if (CONST_String.isInstance(c) && field_type.equals(Type.STRING)){
					return;
				}
								
				throw new ClassConstraintException("Illegal type of ConstantValue '"+obj+"' embedding Constant '"+c+"'. It is referenced by field '"+tostring(f)+"' expecting a different type: '"+field_type+"'.");
			}
!!!3911579.java!!!	visitCode(inout obj : Code) : void
//vmspec2 4.7.3
			// No code attribute allowed for native or abstract methods: see visitMethod(Method).
			// Code array constraints are checked in Pass3 (3a and 3b).

			checkIndex(obj, obj.getNameIndex(), CONST_Utf8);

			String name = ((ConstantUtf8) cp.getConstant(obj.getNameIndex())).getBytes();
			if (! name.equals("Code")){
				throw new ClassConstraintException("The Code attribute '"+tostring(obj)+"' is not correctly named 'Code' but '"+name+"'.");
			}
			
			Method m = null; // satisfy compiler
			if (!(carrier.predecessor() instanceof Method)){
				addMessage("Code attribute '"+tostring(obj)+"' is not declared in a method_info structure but in '"+carrier.predecessor()+"'. Ignored.");
				return;
			}
			else{
				m = (Method) carrier.predecessor();	// we can assume this method was visited before;
																						// i.e. the data consistency was verified.
			}

			if (obj.getCode().length == 0){
				throw new ClassConstraintException("Code array of Code attribute '"+tostring(obj)+"' (method '"+m+"') must not be empty.");
			}

			//In JustIce, the check for correct offsets into the code array is delayed to Pass 3a.
			CodeException[] exc_table = obj.getExceptionTable();
			for (int i=0; i<exc_table.length; i++){
				int exc_index = exc_table[i].getCatchType();
				if (exc_index != 0){ // if 0, it catches all Throwables
					checkIndex(obj, exc_index, CONST_Class);
					ConstantClass cc = (ConstantClass) (cp.getConstant(exc_index));
					checkIndex(cc, cc.getNameIndex(), CONST_Utf8); // cannot be sure this ConstantClass has already been visited (checked)!
					String cname = ((ConstantUtf8) cp.getConstant(cc.getNameIndex())).getBytes().replace('/','.');
				
					Verifier v = VerifierFactory.getVerifier(cname);
					VerificationResult vr = v.doPass1();

					if (vr != VerificationResult.VR_OK){
						throw new ClassConstraintException("Code attribute '"+tostring(obj)+"' (method '"+m+"') has an exception_table entry '"+tostring(exc_table[i])+"' that references '"+cname+"' as an Exception but it does not pass verification pass 1: "+vr);
					}
					else{
						// We cannot safely trust any other "instanceof" mechanism. We need to transitively verify
						// the ancestor hierarchy.
						JavaClass e = Repository.lookupClass(cname);
						JavaClass t = Repository.lookupClass(Type.THROWABLE.getClassName());
						JavaClass o = Repository.lookupClass(Type.OBJECT.getClassName());
						while (e != o){
							if (e == t) break; // It's a subclass of Throwable, OKAY, leave.

							v = VerifierFactory.getVerifier(e.getSuperclassName());
							vr = v.doPass1();
							if (vr != VerificationResult.VR_OK){
								throw new ClassConstraintException("Code attribute '"+tostring(obj)+"' (method '"+m+"') has an exception_table entry '"+tostring(exc_table[i])+"' that references '"+cname+"' as an Exception but '"+e.getSuperclassName()+"' in the ancestor hierachy does not pass verification pass 1: "+vr);
							}
							else{
								e = Repository.lookupClass(e.getSuperclassName());
							}
						}
						if (e != t) throw new ClassConstraintException("Code attribute '"+tostring(obj)+"' (method '"+m+"') has an exception_table entry '"+tostring(exc_table[i])+"' that references '"+cname+"' as an Exception but it is not a subclass of '"+t.getClassName()+"'.");
					}
				}
			}
			
			// Create object for local variables information
			// This is highly unelegant due to usage of the Visitor pattern.
			// TODO: rework it.
			int method_number = -1;
			Method[] ms = Repository.lookupClass(myOwner.getClassName()).getMethods();
			for (int mn=0; mn<ms.length; mn++){
				if (m == ms[mn]){
					method_number = mn;
					break;
				}
			}
			if (method_number < 0){ // Mmmmh. Can we be sure BCEL does not sometimes instantiate new objects?
				throw new AssertionViolatedException("Could not find a known BCEL Method object in the corresponding BCEL JavaClass object.");
			}
			localVariablesInfos[method_number] = new LocalVariablesInfo(obj.getMaxLocals());
			
			int num_of_lvt_attribs = 0;
			// Now iterate through the attributes the Code attribute has.
			Attribute[] atts = obj.getAttributes();
			for (int a=0; a<atts.length; a++){
				if ((! (atts[a] instanceof LineNumberTable)) &&
				    (! (atts[a] instanceof LocalVariableTable))){
					addMessage("Attribute '"+tostring(atts[a])+"' as an attribute of Code attribute '"+tostring(obj)+"' (method '"+m+"') is unknown and will therefore be ignored.");
				}
				else{// LineNumberTable or LocalVariableTable
					addMessage("Attribute '"+tostring(atts[a])+"' as an attribute of Code attribute '"+tostring(obj)+"' (method '"+m+"') will effectively be ignored and is only useful for debuggers and such.");
				}
			
				//LocalVariableTable check (partially delayed to Pass3a).
				//Here because its easier to collect the information of the
				//(possibly more than one) LocalVariableTables belonging to
				//one certain Code attribute.
				if (atts[a] instanceof LocalVariableTable){ // checks conforming to vmspec2 4.7.9
					
					LocalVariableTable lvt = (LocalVariableTable) atts[a];

					checkIndex(lvt, lvt.getNameIndex(), CONST_Utf8);

					String lvtname = ((ConstantUtf8) cp.getConstant(lvt.getNameIndex())).getBytes();
					if (! lvtname.equals("LocalVariableTable")){
						throw new ClassConstraintException("The LocalVariableTable attribute '"+tostring(lvt)+"' is not correctly named 'LocalVariableTable' but '"+lvtname+"'.");
					}

					Code code = obj;
					int max_locals = code.getMaxLocals();

					//In JustIce, the check for correct offsets into the code array is delayed to Pass 3a.
					LocalVariable[] localvariables = lvt.getLocalVariableTable();

					for (int i=0; i<localvariables.length; i++){
						checkIndex(lvt, localvariables[i].getNameIndex(), CONST_Utf8);
						String localname = ((ConstantUtf8) cp.getConstant(localvariables[i].getNameIndex())).getBytes();
						if (!validJavaIdentifier(localname)){
							throw new ClassConstraintException("LocalVariableTable '"+tostring(lvt)+"' references a local variable by the name '"+localname+"' which is not a legal Java simple name.");
						}

						checkIndex(lvt, localvariables[i].getSignatureIndex(), CONST_Utf8);
						String localsig  = ((ConstantUtf8) (cp.getConstant(localvariables[i].getSignatureIndex()))).getBytes(); // Local signature(=descriptor)
						Type t;
						try{
							t = Type.getType(localsig);
						}
						catch (ClassFormatError cfe){ // sometimes BCEL is a little harsh describing exceptional situations.
							throw new ClassConstraintException("Illegal descriptor (==signature) '"+localsig+"' used by LocalVariable '"+tostring(localvariables[i])+"' referenced by '"+tostring(lvt)+"'.");
						}
						int localindex = localvariables[i].getIndex();
						if ( ( (t==Type.LONG || t==Type.DOUBLE)? localindex+1:localindex) >= code.getMaxLocals()){
							throw new ClassConstraintException("LocalVariableTable attribute '"+tostring(lvt)+"' references a LocalVariable '"+tostring(localvariables[i])+"' with an index that exceeds the surrounding Code attribute's max_locals value of '"+code.getMaxLocals()+"'.");
						}
						
						try{
							localVariablesInfos[method_number].add(localindex, localname, localvariables[i].getStartPC(), localvariables[i].getLength(), t);
						}
						catch(LocalVariableInfoInconsistentException lviie){
							throw new ClassConstraintException("Conflicting information in LocalVariableTable '"+tostring(lvt)+"' found in Code attribute '"+tostring(obj)+"' (method '"+tostring(m)+"'). "+lviie.getMessage());
						}
					}// for all local variables localvariables[i] in the LocalVariableTable attribute atts[a] END
					
					num_of_lvt_attribs++;
					if (num_of_lvt_attribs > obj.getMaxLocals()){
						throw new ClassConstraintException("Number of LocalVariableTable attributes of Code attribute '"+tostring(obj)+"' (method '"+tostring(m)+"') exceeds number of local variable slots '"+obj.getMaxLocals()+"' ('There may be no more than one LocalVariableTable attribute per local variable in the Code attribute.').");
					}
				}// if atts[a] instanceof LocalVariableTable END
			}// for all attributes atts[a] END
!!!3911707.java!!!	visitExceptionTable(inout obj : ExceptionTable) : void
//vmspec2 4.7.4
			// incorrectly named, it's the Exceptions attribute (vmspec2 4.7.4)
			checkIndex(obj, obj.getNameIndex(), CONST_Utf8);

			String name = ((ConstantUtf8) cp.getConstant(obj.getNameIndex())).getBytes();
			if (! name.equals("Exceptions")){
				throw new ClassConstraintException("The Exceptions attribute '"+tostring(obj)+"' is not correctly named 'Exceptions' but '"+name+"'.");
			}
			
			int[] exc_indices = obj.getExceptionIndexTable();

			for (int i=0; i<exc_indices.length; i++){
				checkIndex(obj, exc_indices[i], CONST_Class);
			
				ConstantClass cc = (ConstantClass) (cp.getConstant(exc_indices[i]));
				checkIndex(cc, cc.getNameIndex(), CONST_Utf8); // cannot be sure this ConstantClass has already been visited (checked)!
				String cname = ((ConstantUtf8) cp.getConstant(cc.getNameIndex())).getBytes().replace('/','.'); //convert internal notation on-the-fly to external notation
				
				Verifier v = VerifierFactory.getVerifier(cname);
				VerificationResult vr = v.doPass1();

				if (vr != VerificationResult.VR_OK){
					throw new ClassConstraintException("Exceptions attribute '"+tostring(obj)+"' references '"+cname+"' as an Exception but it does not pass verification pass 1: "+vr);
				}
				else{
					// We cannot safely trust any other "instanceof" mechanism. We need to transitively verify
					// the ancestor hierarchy.
					JavaClass e = Repository.lookupClass(cname);
					JavaClass t = Repository.lookupClass(Type.THROWABLE.getClassName());
					JavaClass o = Repository.lookupClass(Type.OBJECT.getClassName());
					while (e != o){
						if (e == t) break; // It's a subclass of Throwable, OKAY, leave.

						v = VerifierFactory.getVerifier(e.getSuperclassName());
						vr = v.doPass1();
						if (vr != VerificationResult.VR_OK){
							throw new ClassConstraintException("Exceptions attribute '"+tostring(obj)+"' references '"+cname+"' as an Exception but '"+e.getSuperclassName()+"' in the ancestor hierachy does not pass verification pass 1: "+vr);
						}
						else{
							e = Repository.lookupClass(e.getSuperclassName());
						}
					}
					if (e != t) throw new ClassConstraintException("Exceptions attribute '"+tostring(obj)+"' references '"+cname+"' as an Exception but it is not a subclass of '"+t.getClassName()+"'.");
				}
			}
!!!3911835.java!!!	visitLineNumberTable(inout obj : LineNumberTable) : void
//vmspec2 4.7.8
			checkIndex(obj, obj.getNameIndex(), CONST_Utf8);

			String name = ((ConstantUtf8) cp.getConstant(obj.getNameIndex())).getBytes();
			if (! name.equals("LineNumberTable")){
				throw new ClassConstraintException("The LineNumberTable attribute '"+tostring(obj)+"' is not correctly named 'LineNumberTable' but '"+name+"'.");
			}

			//In JustIce,this check is delayed to Pass 3a.
			//LineNumber[] linenumbers = obj.getLineNumberTable();
			// ...validity check...

!!!3911963.java!!!	visitLocalVariableTable(inout obj : LocalVariableTable) : void
//vmspec2 4.7.9
			//In JustIce,this check is partially delayed to Pass 3a.
			//The other part can be found in the visitCode(Code) method.
!!!3912091.java!!!	visitUnknown(inout obj : Unknown) : void
//vmspec2 4.7.1
			// Represents an unknown attribute.
			checkIndex(obj, obj.getNameIndex(), CONST_Utf8);
			
			// Maybe only misnamed? Give a (warning) message.
			addMessage("Unknown attribute '"+tostring(obj)+"'. This attribute is not known in any context!");
!!!3912219.java!!!	visitLocalVariable(inout obj : LocalVariable) : void
			// This does not represent an Attribute but is only
			// related to internal BCEL data representation.

			// see visitLocalVariableTable(LocalVariableTable)
!!!3912347.java!!!	visitCodeException(inout obj : CodeException) : void
			// Code constraints are checked in Pass3 (3a and 3b).
			// This does not represent an Attribute but is only
			// related to internal BCEL data representation.
		
			// see visitCode(Code)
!!!3912475.java!!!	visitConstantPool(inout obj : ConstantPool) : void
			// No need to. We're piggybacked by the DescendingVisitor.
			// This does not represent an Attribute but is only
			// related to internal BCEL data representation.
!!!3912603.java!!!	visitInnerClass(inout obj : InnerClass) : void
			// This does not represent an Attribute but is only
			// related to internal BCEL data representation.
!!!3912731.java!!!	visitLineNumber(inout obj : LineNumber) : void
			// This does not represent an Attribute but is only
			// related to internal BCEL data representation.

			// see visitLineNumberTable(LineNumberTable)
