class MinimalHTMLWriter
!!!9972891.java!!!	MinimalHTMLWriter(inout w : Writer, inout doc : StyledDocument)
	super(w, doc);
!!!9973019.java!!!	MinimalHTMLWriter(inout w : Writer, inout doc : StyledDocument, in pos : int, in len : int)
	super(w, doc, pos, len);
!!!9973147.java!!!	write() : void
	styleNameMapping = new Hashtable();
	writeStartTag("<html>");
	writeHeader();
	writeBody();
	writeEndTag("</html>");
!!!9973275.java!!!	writeAttributes(inout attr : AttributeSet) : void
	Enumeration attributeNames = attr.getAttributeNames();
	while (attributeNames.hasMoreElements()) {
	    Object name = attributeNames.nextElement();
	    if ((name instanceof StyleConstants.ParagraphConstants) ||
		(name instanceof StyleConstants.CharacterConstants) ||
		(name instanceof StyleConstants.FontConstants) ||
		(name instanceof StyleConstants.ColorConstants)) {
		indent();
		write(name.toString());
		write(':');
		write(css.styleConstantsValueToCSSValue
		      ((StyleConstants)name, attr.getAttribute(name)).
		      toString());
		write(';');
		write(NEWLINE);
	    }
	}
!!!9973403.java!!!	text(inout elem : Element) : void
	String contentStr = getText(elem);
	if ((contentStr.length() > 0) && 
	    (contentStr.charAt(contentStr.length()-1) == NEWLINE)) {
	    contentStr = contentStr.substring(0, contentStr.length()-1);
	}
	if (contentStr.length() > 0) {
	    write(contentStr);
	}
!!!9973531.java!!!	writeStartTag(in tag : String) : void
	indent();
	write(tag);
	write(NEWLINE);
	incrIndent();
!!!9973659.java!!!	writeEndTag(in endTag : String) : void
	decrIndent();
	indent();
	write(endTag);
	write(NEWLINE);
!!!9973787.java!!!	writeHeader() : void
	writeStartTag("<head>");
	writeStartTag("<style>");
	writeStartTag("<!--");
	writeStyles();
	writeEndTag("-->");
	writeEndTag("</style>");
	writeEndTag("</head>");
!!!9973915.java!!!	writeStyles() : void
	/*
	 *  Access to DefaultStyledDocument done to workaround
	 *  a missing API in styled document to access the
	 *  stylenames.
	 */
	DefaultStyledDocument styledDoc =  ((DefaultStyledDocument)getDocument());
	Enumeration styleNames = styledDoc.getStyleNames();

	while (styleNames.hasMoreElements()) {
	    Style s = styledDoc.getStyle((String)styleNames.nextElement());

	    /** PENDING: Once the name attribute is removed
		from the list we check check for 0. **/
	    if (s.getAttributeCount() == 1 &&
		s.isDefined(StyleConstants.NameAttribute)) {
		continue;
	    }
	    indent();
	    write("p." + addStyleName(s.getName()));
	    write(" {\n");
	    incrIndent();
	    writeAttributes(s);
	    decrIndent();
	    indent();
	    write("}\n");
	}
!!!9974043.java!!!	writeBody() : void
	ElementIterator it = getElementIterator();

	/*
	  This will be a section element for a styled document.
	  We represent this element in HTML as the body tags.
	  Therefore we ignore it.
	 */
	it.current();

	Element next = null;

	writeStartTag("<body>");

	boolean inContent = false;

	while((next = it.next()) != null) {
	    if (!inRange(next)) {
		continue;
	    }
	    if (next instanceof AbstractDocument.BranchElement) {
		if (inContent) {
		    writeEndParagraph();
		    inContent = false;
		    fontMask = 0;
		}
		writeStartParagraph(next);
	    } else if (isText(next)) {
		writeContent(next, !inContent);
		inContent = true;
	    } else {
		writeLeaf(next);
		inContent = true;
	    }
	}
	if (inContent) {
	    writeEndParagraph();
	}
	writeEndTag("</body>");
!!!9974171.java!!!	writeEndParagraph() : void
	writeEndMask(fontMask);
	if (inFontTag()) {
	    endSpanTag();
	} else {
	    write(NEWLINE);
	}
	writeEndTag("</p>");
!!!9974299.java!!!	writeStartParagraph(inout elem : Element) : void
	AttributeSet attr = elem.getAttributes();
	Object resolveAttr = attr.getAttribute(StyleConstants.ResolveAttribute);
	if (resolveAttr instanceof StyleContext.NamedStyle) {
	    writeStartTag("<p class=" + mapStyleName(((StyleContext.NamedStyle)resolveAttr).getName()) + ">");
	} else {
	    writeStartTag("<p>");
	}
!!!9974427.java!!!	writeLeaf(inout elem : Element) : void
	indent();
	if (elem.getName() == StyleConstants.IconElementName) {
	    writeImage(elem);
	} else if (elem.getName() == StyleConstants.ComponentElementName) {
	    writeComponent(elem);
	}
!!!9974811.java!!!	isText(inout elem : Element) : boolean
	return (elem.getName() == AbstractDocument.ContentElementName);
!!!9974939.java!!!	writeContent(inout elem : Element, inout needsIndenting : boolean) : void

	AttributeSet attr = elem.getAttributes();
	writeNonHTMLAttributes(attr);
	if (needsIndenting) {
	    indent();
	}
	writeHTMLTags(attr);
	text(elem);
!!!9975067.java!!!	writeHTMLTags(inout attr : AttributeSet) : void

	int oldMask = fontMask;
	setFontMask(attr);

	int endMask = 0;
	int startMask = 0;
	if ((oldMask & BOLD) != 0) {
	    if ((fontMask & BOLD) == 0) {
		endMask |= BOLD;
	    }
	} else if ((fontMask & BOLD) != 0) {
	    startMask |= BOLD;
	}

	if ((oldMask & ITALIC) != 0) {
	    if ((fontMask & ITALIC) == 0) {
		endMask |= ITALIC;
	    }
	} else if ((fontMask & ITALIC) != 0) {
	    startMask |= ITALIC;
	}

	if ((oldMask & UNDERLINE) != 0) {
	    if ((fontMask & UNDERLINE) == 0) {
		endMask |= UNDERLINE;
	    }
	} else if ((fontMask & UNDERLINE) != 0) {
	    startMask |= UNDERLINE;
	}
	writeEndMask(endMask);
	writeStartMask(startMask);
!!!9975195.java!!!	setFontMask(inout attr : AttributeSet) : void
	if (StyleConstants.isBold(attr)) {
	    fontMask |= BOLD;
	}

	if (StyleConstants.isItalic(attr)) {
	    fontMask |= ITALIC;
	}

	if (StyleConstants.isUnderline(attr)) {
	    fontMask |= UNDERLINE;
	}
!!!9975323.java!!!	writeStartMask(in mask : int) : void
	if (mask != 0) {
	    if ((mask & UNDERLINE) != 0) {
		write("<u>");
	    }
	    if ((mask & ITALIC) != 0) {
		write("<i>");
	    }
	    if ((mask & BOLD) != 0) {
		write("<b>");
	    }
	}
!!!9975451.java!!!	writeEndMask(in mask : int) : void
	if (mask != 0) {
	    if ((mask & BOLD) != 0) {
		write("</b>");
	    }
	    if ((mask & ITALIC) != 0) {
		write("</i>");
	    }
	    if ((mask & UNDERLINE) != 0) {
		write("</u>");
	    }
	}
!!!9975579.java!!!	writeNonHTMLAttributes(inout attr : AttributeSet) : void

	String style = "";
	String separator = "; ";

	if (inFontTag() && fontAttributes.isEqual(attr)) {
	    return;
	}

	boolean first = true;
	Color color = (Color)attr.getAttribute(StyleConstants.Foreground);
	if (color != null) {
	    style += "color: " + css.styleConstantsValueToCSSValue
		                    ((StyleConstants)StyleConstants.Foreground,
				     color);
	    first = false;
	}
	Integer size = (Integer)attr.getAttribute(StyleConstants.FontSize);
	if (size != null) {
	    if (!first) {
		style += separator;
	    }
	    style += "font-size: " + size.intValue() + "pt";
	    first = false;
	}

	String family = (String)attr.getAttribute(StyleConstants.FontFamily);
	if (family != null) {
	    if (!first) {
		style += separator;
	    }
	    style += "font-family: " + family;
	    first = false;
	}

	if (style.length() > 0) {
	    if (fontMask != 0) {
		writeEndMask(fontMask);
		fontMask = 0;
	    }
	    startSpanTag(style);
	    fontAttributes = attr;
	}
	else if (fontAttributes != null) {
	    writeEndMask(fontMask);
	    fontMask = 0;
	    endSpanTag();
	}
!!!9975707.java!!!	inFontTag() : boolean
	return (fontAttributes != null);
!!!9975835.java!!!	endFontTag() : void
	write(NEWLINE);
	writeEndTag("</font>");
	fontAttributes = null;
!!!9975963.java!!!	startFontTag(in style : String) : void
	boolean callIndent = false;
	if (inFontTag()) {
	    endFontTag();
	    callIndent = true;
	}
	writeStartTag("<font style=\"" + style + "\">");
	if (callIndent) {
	    indent();
	}
!!!9976091.java!!!	startSpanTag(in style : String) : void
	boolean callIndent = false;
	if (inFontTag()) {
	    endSpanTag();
	    callIndent = true;
	}
	writeStartTag("<span style=\"" + style + "\">");
	if (callIndent) {
	    indent();
	}
!!!9976219.java!!!	endSpanTag() : void
	write(NEWLINE);
	writeEndTag("</span>");
	fontAttributes = null;
!!!9976347.java!!!	addStyleName(in style : String) : String
	if (styleNameMapping == null) {
	    return style;
	}
	StringBuffer sb = null;
	for (int counter = style.length() - 1; counter >= 0; counter--) {
	    if (!isValidCharacter(style.charAt(counter))) {
		if (sb == null) {
		    sb = new StringBuffer(style);
		}
		sb.setCharAt(counter, 'a');
	    }
	}
	String mappedName = (sb != null) ? sb.toString() : style;
	while (styleNameMapping.get(mappedName) != null) {
	    mappedName = mappedName + 'x';
	}
	styleNameMapping.put(style, mappedName);
	return mappedName;
!!!9976475.java!!!	mapStyleName(in style : String) : String
	if (styleNameMapping == null) {
	    return style;
	}
	String retValue = (String)styleNameMapping.get(style);
	return (retValue == null) ? style : retValue;
!!!9976603.java!!!	isValidCharacter(in character : char) : boolean
	return ((character >= 'a' && character <= 'z') ||
		(character >= 'A' && character <= 'Z'));
