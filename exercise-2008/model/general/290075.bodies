class PresentationManagerImpl
!!!1556763.java!!!	PresentationManagerImpl(inout useDynamicStubs : boolean)
	this.useDynamicStubs = useDynamicStubs ;
	wrapper = ORBUtilSystemException.get( 
	    CORBALogDomains.RPC_PRESENTATION ) ;

	// XXX these should probably be WeakHashMaps.
	classToClassData = new HashMap() ;
	methodToDMM = new HashMap() ;
!!!1556891.java!!!	getDynamicMethodMarshaller(inout method : Method) : DynamicMethodMarshaller
	if (method == null)
	    return null ;

	DynamicMethodMarshaller result = 
	    (DynamicMethodMarshaller)methodToDMM.get( method ) ;
	if (result == null) {
	    result = new DynamicMethodMarshallerImpl( method ) ;
	    methodToDMM.put( method, result ) ;
	}

	return result ;
!!!1557019.java!!!	getClassData(inout cls : Class) : ClassData
	ClassData result = (ClassData)classToClassData.get( cls ) ;
	if (result == null) {
	    result = new ClassDataImpl( cls ) ;
	    classToClassData.put( cls, result ) ;
	}

	return result ;
!!!1557915.java!!!	getStubFactoryFactory(inout isDynamic : boolean) : StubFactoryFactory
	if (isDynamic)
	    return dynamicStubFactoryFactory ;
	else
	    return staticStubFactoryFactory ;
!!!1558043.java!!!	setStubFactoryFactory(inout isDynamic : boolean, inout sff : StubFactoryFactory) : void
	if (isDynamic)
	    dynamicStubFactoryFactory = sff ;
	else
	    staticStubFactoryFactory = sff ;
!!!1558171.java!!!	getTie() : Tie
	return dynamicStubFactoryFactory.getTie( null ) ;
!!!1558299.java!!!	useDynamicStubs() : boolean
	return useDynamicStubs ;
!!!1558427.java!!!	getRootSet(inout target : Class, inout root : NodeImpl, inout gr : Graph) : Set
	Set rootSet = null ;

	if (target.isInterface()) {
	    gr.add( root ) ;
	    rootSet = gr.getRoots() ; // rootSet just contains root here
	} else {
	    // Use this class and its superclasses (not Object) as initial roots
	    Class superclass = target ;
	    Set initialRootSet = new HashSet() ;
	    while ((superclass != null) && !superclass.equals( Object.class )) {
		Node node = new NodeImpl( superclass ) ;
		gr.add( node ) ;
		initialRootSet.add( node ) ;
		superclass = superclass.getSuperclass() ;
	    }

	    // Expand all nodes into the graph
	    gr.getRoots() ; 

	    // remove the roots and find roots again
	    gr.removeAll( initialRootSet ) ;
	    rootSet = gr.getRoots() ;    
	}

	return rootSet ;
!!!1558555.java!!!	getInterfaces(inout roots : Set) : Class
	Class[] classes = new Class[ roots.size() ] ;
	Iterator iter = roots.iterator() ;
	int ctr = 0 ;
	while (iter.hasNext()) {
	    NodeImpl node = (NodeImpl)iter.next() ;
	    classes[ctr++] = node.getInterface() ;
	}

	return classes ;
!!!1558683.java!!!	makeTypeIds(inout root : NodeImpl, inout gr : Graph, inout rootSet : Set) : String
	Set nonRootSet = new HashSet( gr ) ;
	nonRootSet.removeAll( rootSet ) ;

	// List<String> for the typeids
	List result = new ArrayList() ;

	if (rootSet.size() > 1) {
	    // If the rootSet has more than one element, we must
	    // put the type id of the implementation class first.
	    // Root represents the implementation class here.
	    result.add( root.getTypeId() ) ;
	}

	addNodes( result, rootSet ) ;
	addNodes( result, nonRootSet ) ;

	return (String[])result.toArray( new String[result.size()] ) ;
!!!1558811.java!!!	addNodes(inout resultList : List, inout nodeSet : Set) : void
	Iterator iter = nodeSet.iterator() ;
	while (iter.hasNext()) {
	    NodeImpl node = (NodeImpl)iter.next() ;
	    String typeId = node.getTypeId() ;
	    resultList.add( typeId ) ;
	}
