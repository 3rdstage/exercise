class ServicePermission
!!!8671387.java!!!	ServicePermission(in servicePrincipal : String, in action : String)
	super(servicePrincipal);
	init(servicePrincipal, getMask(action));
!!!8671515.java!!!	init(in servicePrincipal : String, in mask : int) : void

	if (servicePrincipal == null) 
		throw new NullPointerException("service principal can't be null");

	if ((mask & ALL) != mask) 
	    throw new IllegalArgumentException("invalid actions mask");

	this.mask = mask;
!!!8671643.java!!!	implies(inout p : Permission) : boolean
	if (!(p instanceof ServicePermission))
	    return false;

	ServicePermission that = (ServicePermission) p;

	return ((this.mask & that.mask) == that.mask) &&
	    impliesIgnoreMask(that);
!!!8671771.java!!!	impliesIgnoreMask(inout p : ServicePermission) : boolean
	return ((this.getName().equals("*")) ||
		this.getName().equals(p.getName()));
!!!8671899.java!!!	equals(inout obj : Object) : boolean
	if (obj == this)
	    return true;

	if (! (obj instanceof ServicePermission))
	    return false;

	ServicePermission that = (ServicePermission) obj;
	return ((this.mask & that.mask) == that.mask) && 
	    this.getName().equals(that.getName());
		

!!!8672027.java!!!	hashCode() : int
	return (getName().hashCode() ^ mask);
!!!8672155.java!!!	getActions(in mask : int) : String
	StringBuilder sb = new StringBuilder();
        boolean comma = false;

	if ((mask & INITIATE) == INITIATE) {
	    if (comma) sb.append(',');
    	    else comma = true;
	    sb.append("initiate");
	}

	if ((mask & ACCEPT) == ACCEPT) {
	    if (comma) sb.append(',');
    	    else comma = true;
	    sb.append("accept");
	}

	return sb.toString();
!!!8672283.java!!!	getActions() : String
	if (actions == null)
	    actions = getActions(this.mask);

	return actions;
!!!8672411.java!!!	newPermissionCollection() : PermissionCollection
	return new KrbServicePermissionCollection();
!!!8672539.java!!!	getMask() : int
	return mask;
!!!8672667.java!!!	getMask(in action : String) : int

	if (action == null) {
	    throw new NullPointerException("action can't be null");
	}

	if (action.equals("")) {
	    throw new IllegalArgumentException("action can't be empty");
	}

	int mask = NONE;

	if (action == null) {
	    return mask;
	}

	char[] a = action.toCharArray();

	int i = a.length - 1;
	if (i < 0)
	    return mask;

	while (i != -1) {
	    char c;

	    // skip whitespace
	    while ((i!=-1) && ((c = a[i]) == ' ' ||
			       c == '\r' ||
			       c == '\n' ||
			       c == '\f' ||
			       c == '\t'))
		i--;

	    // check for the known strings
	    int matchlen;

	    if (i >= 7 && (a[i-7] == 'i' || a[i-7] == 'I') &&
			  (a[i-6] == 'n' || a[i-6] == 'N') &&
			  (a[i-5] == 'i' || a[i-5] == 'I') &&
			  (a[i-4] == 't' || a[i-4] == 'T') &&
			  (a[i-3] == 'i' || a[i-3] == 'I') &&
			  (a[i-2] == 'a' || a[i-2] == 'A') &&
			  (a[i-1] == 't' || a[i-1] == 'T') &&
			  (a[i] == 'e' || a[i] == 'E'))
	    {
		matchlen = 8;
		mask |= INITIATE;

	    } else if (i >= 5 && (a[i-5] == 'a' || a[i-5] == 'A') &&
				 (a[i-4] == 'c' || a[i-4] == 'C') &&
				 (a[i-3] == 'c' || a[i-3] == 'C') &&
				 (a[i-2] == 'e' || a[i-2] == 'E') &&
				 (a[i-1] == 'p' || a[i-1] == 'P') &&
				 (a[i] == 't' || a[i] == 'T'))
	    {
		matchlen = 6;
		mask |= ACCEPT;

	    } else {
		// parse error
		throw new IllegalArgumentException(
			"invalid permission: " + action);
	    }

	    // make sure we didn't just match the tail of a word
	    // like "ackbarfaccept".  Also, skip to the comma.
	    boolean seencomma = false;
	    while (i >= matchlen && !seencomma) {
		switch(a[i-matchlen]) {
		case ',':
		    seencomma = true;
		    /*FALLTHROUGH*/
		case ' ': case '\r': case '\n':
		case '\f': case '\t':
		    break;
		default:
		    throw new IllegalArgumentException(
			    "invalid permission: " + action);
		}
		i--;
	    }

	    // point i at the location of the comma minus one (or -1).
	    i -= matchlen;
	}

	return mask;
!!!8672795.java!!!	writeObject(inout s : ObjectOutputStream) : void
	// Write out the actions. The superclass takes care of the name
	// call getActions to make sure actions field is initialized
	if (actions == null)
	    getActions();
	s.defaultWriteObject();
!!!8672923.java!!!	readObject(inout s : ObjectInputStream) : void
	// Read in the action, then initialize the rest
	s.defaultReadObject();
	init(getName(),getMask(actions));
