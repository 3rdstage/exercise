class ClassLoader
!!!3257499.java!!!	addClass(inout c : Class) : void
        classes.addElement(c);
!!!3257627.java!!!	ClassLoader(inout parent : ClassLoader)
	SecurityManager security = System.getSecurityManager();
	if (security != null) {
	    security.checkCreateClassLoader();
	}
	this.parent = parent;
	initialized = true;
!!!3257755.java!!!	ClassLoader()
	SecurityManager security = System.getSecurityManager();
	if (security != null) {
	    security.checkCreateClassLoader();
	}
	this.parent = getSystemClassLoader();
	initialized = true;
!!!3257883.java!!!	loadClass(in name : String) : Class
	return loadClass(name, false);
!!!3258011.java!!!	loadClass(in name : String, inout resolve : boolean) : Class
	// First, check if the class has already been loaded
	Class c = findLoadedClass(name);
	if (c == null) {
	    try {
		if (parent != null) {
		    c = parent.loadClass(name, false);
		} else {
		    c = findBootstrapClass0(name);
		}
	    } catch (ClassNotFoundException e) {
	        // If still not found, then invoke findClass in order
	        // to find the class.
	        c = findClass(name);
	    }
	}
	if (resolve) {
	    resolveClass(c);
	}
	return c;
!!!3258139.java!!!	loadClassInternal(in name : String) : Class
	return loadClass(name);
!!!3258267.java!!!	checkPackageAccess(inout cls : Class, inout pd : ProtectionDomain) : void
	final SecurityManager sm = System.getSecurityManager();
	if (sm != null) {
	    final String name = cls.getName();
            final int i = name.lastIndexOf('.');
	    if (i != -1) {
                AccessController.doPrivileged(new PrivilegedAction() {
                    public Object run() {
		        sm.checkPackageAccess(name.substring(0, i));
		        return null;
                    }
                }, new AccessControlContext(new ProtectionDomain[] {pd}));
	    }
	}
	domains.add(pd);
!!!3258395.java!!!	findClass(in name : String) : Class
	throw new ClassNotFoundException(name);
!!!3258523.java!!!	defineClass(in b : byte, in off : int, in len : int) : Class
	return defineClass(null, b, off, len, null);
!!!3258651.java!!!	defineClass(in name : String, in b : byte, in off : int, in len : int) : Class
	return defineClass(name, b, off, len, null);
!!!3258779.java!!!	preDefineClass(in name : String, inout protectionDomain : ProtectionDomain) : ProtectionDomain
	if (!checkName(name))
	    throw new NoClassDefFoundError("IllegalName: " + name);

	if ((name != null) && name.startsWith("java.")) {
	    throw new SecurityException("Prohibited package name: " +
					name.substring(0, name.lastIndexOf('.')));
	}
	if (protectionDomain == null) {
	    protectionDomain = getDefaultDomain();
	}

	if (name != null)
	    checkCerts(name, protectionDomain.getCodeSource());

	return protectionDomain;
!!!3258907.java!!!	defineClassSourceLocation(inout protectionDomain : ProtectionDomain) : String
	CodeSource cs = protectionDomain.getCodeSource();
	String source = null;
	if (cs != null && cs.getLocation() != null) {
	    source = cs.getLocation().toString();
	}
	return source;
!!!3259035.java!!!	defineTransformedClass(in name : String, in b : byte, in off : int, in len : int, inout protectionDomain : ProtectionDomain, inout cfe : ClassFormatError, in source : String) : Class
        // Class format error - try to transform the bytecode and
        // define the class again
        //
        Object[] transformers = ClassFileTransformer.getTransformers();
	Class c = null;

	for (int i = 0; transformers != null && i < transformers.length; i++) {
	    try {
	      // Transform byte code using transformer
	      byte[] tb = ((ClassFileTransformer) transformers[i]).transform(b, off, len);
	      c = defineClass1(name, tb, 0, tb.length, protectionDomain, source);
	      break;
	    } catch (ClassFormatError cfe2)	{
	      // If ClassFormatError occurs, try next transformer
	    }
	}

	// Rethrow original ClassFormatError if unable to transform
	// bytecode to well-formed
	//
	if (c == null)
	    throw cfe;

	return c;
!!!3259163.java!!!	postDefineClass(inout c : Class, inout protectionDomain : ProtectionDomain) : void
	if (protectionDomain.getCodeSource() != null) {
	    java.security.cert.Certificate certs[] =
		protectionDomain.getCodeSource().getCertificates();
	    if (certs != null)
		setSigners(c, certs);
	}
!!!3259291.java!!!	defineClass(in name : String, in b : byte, in off : int, in len : int, inout protectionDomain : ProtectionDomain) : Class
	check();
	protectionDomain = preDefineClass(name, protectionDomain);

	Class c = null;
        String source = defineClassSourceLocation(protectionDomain);

	try {
	    c = defineClass1(name, b, off, len, protectionDomain, source);
	} catch (ClassFormatError cfe) {
	    c = defineTransformedClass(name, b, off, len, protectionDomain, cfe, source);
	}

	postDefineClass(c, protectionDomain);
	return c;
!!!3259419.java!!!	defineClass(in name : String, inout b : ByteBuffer, inout protectionDomain : ProtectionDomain) : Class
	check();

	int len = b.remaining();

	// Use byte[] if not a direct ByteBufer:
	if (!b.isDirect()) {
	    if (b.hasArray()) {
		return defineClass(name, b.array(),
				   b.position() + b.arrayOffset(), len,
				   protectionDomain);
	    } else {
		// no array, or read-only array
		byte[] tb = new byte[len];
		b.get(tb);  // get bytes out of byte buffer.
		return defineClass(name, tb, 0, len, protectionDomain);
	    }
	}

        protectionDomain = preDefineClass(name, protectionDomain);

	Class c = null;
	String source = defineClassSourceLocation(protectionDomain);

	try {
	    c = defineClass2(name, b, b.position(), len, protectionDomain, source);
	} catch (ClassFormatError cfe) {
	    byte[] tb = new byte[len];
	    b.get(tb);  // get bytes out of byte buffer.
	    c = defineTransformedClass(name, tb, 0, len, protectionDomain, cfe, source);
	}

	postDefineClass(c, protectionDomain);
	return c;
!!!3259931.java!!!	checkName(in name : String) : boolean
	if ((name == null) || (name.length() == 0))
   	    return true;
	if ((name.indexOf('/') != -1)
	    || (!VM.allowArraySyntax() && (name.charAt(0) == '[')))
   	    return false;
 	return true;
!!!3260059.java!!!	checkCerts(in name : String, inout cs : CodeSource) : void
	int i = name.lastIndexOf('.');
	String pname = (i == -1) ? "" : name.substring(0, i);
	java.security.cert.Certificate[] pcerts =
	    (java.security.cert.Certificate[]) package2certs.get(pname);
        if (pcerts == null) {
	    // first class in this package gets to define which
	    // certificates must be the same for all other classes
	    // in this package
	    if (cs != null) {
		pcerts = cs.getCertificates();
	    }
	    if (pcerts == null) {
		if (nocerts == null)
		    nocerts = new java.security.cert.Certificate[0];
		pcerts = nocerts;
	    }
	    package2certs.put(pname, pcerts);
	} else {
	    java.security.cert.Certificate[] certs = null;
	    if (cs != null) {
		certs = cs.getCertificates();
	    }

	    if (!compareCerts(pcerts, certs)) {
		throw new SecurityException("class \""+ name +
					    "\"'s signer information does not match signer information of other classes in the same package");
	    }
	}
!!!3260187.java!!!	compareCerts(inout pcerts : Certificate, inout certs : Certificate) : boolean
	// certs can be null, indicating no certs.
	if ((certs == null) || (certs.length == 0)) {
	    return pcerts.length == 0;
	}

	// the length must be the same at this point
	if (certs.length != pcerts.length)
	    return false;

	// go through and make sure all the certs in one array
	// are in the other and vice-versa.
	boolean match;
	for (int i = 0; i < certs.length; i++) {
	    match = false;
	    for (int j = 0; j < pcerts.length; j++) {
		if (certs[i].equals(pcerts[j])) {
		    match = true;
		    break;
		}
	    }
	    if (!match) return false;
	}

	// now do the same for pcerts
	for (int i = 0; i < pcerts.length; i++) {
	    match = false;
	    for (int j = 0; j < certs.length; j++) {
		if (pcerts[i].equals(certs[j])) {
		    match = true;
		    break;
		}
	    }
	    if (!match) return false;
	}

	return true;
!!!3260315.java!!!	resolveClass(inout c : Class) : void
	check();
	resolveClass0(c);
!!!3260571.java!!!	findSystemClass(in name : String) : Class
	check();
	ClassLoader system = getSystemClassLoader();
	if (system == null) {
	    if (!checkName(name))
		throw new ClassNotFoundException(name);
	    return findBootstrapClass(name);
	}
	return system.loadClass(name);
!!!3260699.java!!!	findBootstrapClass0(in name : String) : Class
	check();
	if (!checkName(name))
	    throw new ClassNotFoundException(name);
	return findBootstrapClass(name);
!!!3260955.java!!!	check() : void
	if (!initialized) {
	    throw new SecurityException("ClassLoader object not initialized");
	}
!!!3261083.java!!!	findLoadedClass(in name : String) : Class
	check();
	if (!checkName(name))
	    return null;
	return findLoadedClass0(name);
!!!3261339.java!!!	setSigners(inout c : Class, inout signers : Object) : void
        check();
	c.setSigners(signers);
!!!3261467.java!!!	getResource(in name : String) : URL
	URL url;
	if (parent != null) {
	    url = parent.getResource(name);
	} else {
	    url = getBootstrapResource(name);
	}
	if (url == null) {
	    url = findResource(name);
	}
	return url;
!!!3261595.java!!!	getResources(in name : String) : Enumeration
	Enumeration[] tmp = new Enumeration[2];
	if (parent != null) {
	    tmp[0] = parent.getResources(name);
	} else {
	    tmp[0] = getBootstrapResources(name);
	}
	tmp[1] = findResources(name);

	return new CompoundEnumeration(tmp);
!!!3261723.java!!!	findResource(in name : String) : URL
	return null;
!!!3261851.java!!!	findResources(in name : String) : Enumeration
	return new CompoundEnumeration(new Enumeration[0]);
!!!3261979.java!!!	getSystemResource(in name : String) : URL
	ClassLoader system = getSystemClassLoader();
	if (system == null) {
	    return getBootstrapResource(name);
	}
	return system.getResource(name);
!!!3262107.java!!!	getSystemResources(in name : String) : Enumeration
	ClassLoader system = getSystemClassLoader();
	if (system == null) {
	    return getBootstrapResources(name);
	}
	return system.getResources(name);
!!!3262235.java!!!	getBootstrapResource(in name : String) : URL
	URLClassPath ucp = getBootstrapClassPath();
	Resource res = ucp.getResource(name);
	return res != null ? res.getURL() : null;
!!!3262363.java!!!	getBootstrapResources(in name : String) : Enumeration
	final Enumeration e = getBootstrapClassPath().getResources(name);
	return new Enumeration () {
	    public Object nextElement() {
		return ((Resource)e.nextElement()).getURL();
	    }
	    public boolean hasMoreElements() {
		return e.hasMoreElements();
	    }
	};
!!!3262491.java!!!	getBootstrapClassPath() : URLClassPath
	if (bootstrapClassPath == null) {
	    bootstrapClassPath = sun.misc.Launcher.getBootstrapClassPath();
	}
	return bootstrapClassPath;
!!!3262619.java!!!	getResourceAsStream(in name : String) : InputStream
	URL url = getResource(name);
	try {
	    return url != null ? url.openStream() : null;
	} catch (IOException e) {
	    return null;
	}
!!!3262747.java!!!	getSystemResourceAsStream(in name : String) : InputStream
        URL url = getSystemResource(name);
        try {
            return url != null ? url.openStream() : null;
        } catch (IOException e) {
            return null;
        }
!!!3262875.java!!!	getParent() : ClassLoader
	if (parent == null)
	    return null;
	SecurityManager sm = System.getSecurityManager();
	if (sm != null) {
	    ClassLoader ccl = getCallerClassLoader();
	    if (ccl != null && !isAncestor(ccl)) {
		sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);
	    }
	}
	return parent;
!!!3263003.java!!!	getSystemClassLoader() : ClassLoader
	initSystemClassLoader();
	if (scl == null) {
	    return null;
	}
	SecurityManager sm = System.getSecurityManager();
	if (sm != null) {
	    ClassLoader ccl = getCallerClassLoader();
	    if (ccl != null && ccl != scl && !scl.isAncestor(ccl)) {
		sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);
	    }
	}
	return scl;
!!!3263131.java!!!	initSystemClassLoader() : void
	if (!sclSet) {
	    if (scl != null)
		throw new IllegalStateException("recursive invocation");
            sun.misc.Launcher l = sun.misc.Launcher.getLauncher();
	    if (l != null) {
		Throwable oops = null;
		scl = l.getClassLoader();
	        try {
		    PrivilegedExceptionAction a;
		    a = new SystemClassLoaderAction(scl);
                    scl = (ClassLoader) AccessController.doPrivileged(a);
	        } catch (PrivilegedActionException pae) {
		    oops = pae.getCause();
	            if (oops instanceof InvocationTargetException) {
		        oops = oops.getCause();
		    }
	        }
		if (oops != null) {
		    if (oops instanceof Error) {
			throw (Error) oops;
		    } else {
		        // wrap the exception
		        throw new Error(oops);
		    }
		}
	    }
	    sclSet = true;
	}
!!!3263259.java!!!	isAncestor(inout cl : ClassLoader) : boolean
	ClassLoader acl = this;
	do {
	    acl = acl.parent;
	    if (cl == acl) {
		return true;
	    }
	} while (acl != null);
	return false;
!!!3263387.java!!!	getCallerClassLoader() : ClassLoader
        // NOTE use of more generic Reflection.getCallerClass()
        Class caller = Reflection.getCallerClass(3);
        // This can be null if the VM is requesting it
        if (caller == null) {
            return null;
        }
        // Circumvent security check since this is package-private
        return caller.getClassLoader0();
!!!3263515.java!!!	definePackage(in name : String, in specTitle : String, in specVersion : String, in specVendor : String, in implTitle : String, in implVersion : String, in implVendor : String, inout sealBase : URL) : Package
	synchronized (packages) {
	    Package pkg = getPackage(name);
	    if (pkg != null) {
		throw new IllegalArgumentException(name);
	    }
	    pkg = new Package(name, specTitle, specVersion, specVendor,
			      implTitle, implVersion, implVendor,
			      sealBase, this);
	    packages.put(name, pkg);
	    return pkg;
	}
!!!3263643.java!!!	getPackage(in name : String) : Package
	synchronized (packages) {
	    Package pkg = (Package)packages.get(name);
	    if (pkg == null) {
		if (parent != null) {
		    pkg = parent.getPackage(name);
		} else {
		    pkg = Package.getSystemPackage(name);
		}
		if (pkg != null) {
		    packages.put(name, pkg);
		}
	    }
	    return pkg;
	}
!!!3263771.java!!!	getPackages() : Package
	Map map;
	synchronized (packages) {
	    map = (Map)packages.clone();
	}
	Package[] pkgs;
	if (parent != null) {
	    pkgs = parent.getPackages();
	} else {
	    pkgs = Package.getSystemPackages();
	}
	if (pkgs != null) {
	    for (int i = 0; i < pkgs.length; i++) {
                String pkgName = pkgs[i].getName();
                if (map.get(pkgName) == null) {
                    map.put(pkgName, pkgs[i]);
                }
	    }
	}
	return (Package[])map.values().toArray(new Package[map.size()]);
!!!3263899.java!!!	findLibrary(in libname : String) : String
        return null;
!!!3264795.java!!!	getDefaultDomain() : ProtectionDomain
	if (defaultDomain == null) {
	    CodeSource cs =
		new CodeSource(null, (java.security.cert.Certificate[]) null);
	    defaultDomain = new ProtectionDomain(cs, null, this, null);
	}
	return defaultDomain;
!!!3264923.java!!!	initializePath(in propname : String) : String
        String ldpath = System.getProperty(propname, "");
	String ps = File.pathSeparator;
	int ldlen = ldpath.length();
	int i, j, n;
	// Count the separators in the path
	i = ldpath.indexOf(ps);
	n = 0;
	while (i >= 0) {
	    n++;
	    i = ldpath.indexOf(ps, i + 1);
	}

	// allocate the array of paths - n :'s = n + 1 path elements
	String[] paths = new String[n + 1];

	// Fill the array with paths from the ldpath
	n = i = 0;
	j = ldpath.indexOf(ps);
	while (j >= 0) {
	    if (j - i > 0) {
	        paths[n++] = ldpath.substring(i, j);
	    } else if (j - i == 0) {
	        paths[n++] = ".";
	    }
	    i = j + 1;
	    j = ldpath.indexOf(ps, i);
	}
	paths[n] = ldpath.substring(i, ldlen);
	return paths;
!!!3265051.java!!!	loadLibrary(inout fromClass : Class, in name : String, inout isAbsolute : boolean) : void
        ClassLoader loader =
	    (fromClass == null) ? null : fromClass.getClassLoader();
        if (sys_paths == null) {
	    usr_paths = initializePath("java.library.path");
	    sys_paths = initializePath("sun.boot.library.path");
        }
        if (isAbsolute) {
	    if (loadLibrary0(fromClass, new File(name))) {
	        return;
	    }
	    throw new UnsatisfiedLinkError("Can't load library: " + name);
	}
	if (loader != null) {
	    String libfilename = loader.findLibrary(name);
	    if (libfilename != null) {
	        File libfile = new File(libfilename);
	        if (!libfile.isAbsolute()) {
		    throw new UnsatisfiedLinkError(
    "ClassLoader.findLibrary failed to return an absolute path: " + libfilename);
		}
		if (loadLibrary0(fromClass, libfile)) {
		    return;
		}
		throw new UnsatisfiedLinkError("Can't load " + libfilename);
	    }
	}
	for (int i = 0 ; i < sys_paths.length ; i++) {
	    File libfile = new File(sys_paths[i], System.mapLibraryName(name));
	    if (loadLibrary0(fromClass, libfile)) {
	        return;
	    }
	}
	if (loader != null) {
	    for (int i = 0 ; i < usr_paths.length ; i++) {
	        File libfile = new File(usr_paths[i],
					System.mapLibraryName(name));
		if (loadLibrary0(fromClass, libfile)) {
		    return;
		}
	    }
	}
	// Oops, it failed
        throw new UnsatisfiedLinkError("no " + name + " in java.library.path");
!!!3265179.java!!!	loadLibrary0(inout fromClass : Class, in file : File) : boolean
	Boolean exists = (Boolean)
	    AccessController.doPrivileged(new PrivilegedAction() {
		public Object run() {
		    return new Boolean(file.exists());
		}
	    });
	if (!exists.booleanValue()) {
	    return false;
	}
        String name;
	try {
	    name = file.getCanonicalPath();
	} catch (IOException e) {
	    return false;
	}
        ClassLoader loader =
	    (fromClass == null) ? null : fromClass.getClassLoader();
        Vector libs =
	    loader != null ? loader.nativeLibraries : systemNativeLibraries;
	synchronized (libs) {
	    int size = libs.size();
	    for (int i = 0; i < size; i++) {
	        NativeLibrary lib = (NativeLibrary)libs.elementAt(i);
		if (name.equals(lib.name)) {
		    return true;
		}
	    }

	    synchronized (loadedLibraryNames) {
	        if (loadedLibraryNames.contains(name)) {
		    throw new UnsatisfiedLinkError
		        ("Native Library " +
			 name +
			 " already loaded in another classloader");
		}
		/* If the library is being loaded (must be by the same thread,
		 * because Runtime.load and Runtime.loadLibrary are
		 * synchronous). The reason is can occur is that the JNI_OnLoad
		 * function can cause another loadLibrary invocation.
		 *
		 * Thus we can use a static stack to hold the list of libraries
		 * we are loading.
		 *
		 * If there is a pending load operation for the library, we
		 * immediately return success; otherwise, we raise
		 * UnsatisfiedLinkError.
		 */
		int n = nativeLibraryContext.size();
		for (int i = 0; i < n; i++) {
		    NativeLibrary lib = (NativeLibrary)
		        nativeLibraryContext.elementAt(i);
		    if (name.equals(lib.name)) {
		        if (loader == lib.fromClass.getClassLoader()) {
			    return true;
			} else {
			    throw new UnsatisfiedLinkError
			        ("Native Library " +
				 name +
				 " is being loaded in another classloader");
			}
		    }
		}
		NativeLibrary lib = new NativeLibrary(fromClass, name);
		nativeLibraryContext.push(lib);
		try {
		    lib.load(name);
		} finally {
		    nativeLibraryContext.pop();
		}
		if (lib.handle != 0) {
		    loadedLibraryNames.addElement(name);
		    libs.addElement(lib);
		    return true;
		}
		return false;
	    }
	}
!!!3265307.java!!!	findNative(inout loader : ClassLoader, in name : String) : long
        Vector libs =
	    loader != null ? loader.nativeLibraries : systemNativeLibraries;
	synchronized (libs) {
	    int size = libs.size();
	    for (int i = 0; i < size; i++) {
	        NativeLibrary lib = (NativeLibrary)libs.elementAt(i);
		long entry = lib.find(name);
		if (entry != 0)
		    return entry;
	    }
	}
	return 0;
!!!3265435.java!!!	setDefaultAssertionStatus(inout enabled : boolean) : void
        if (classAssertionStatus == null)
            initializeJavaAssertionMaps();

        defaultAssertionStatus = enabled;
!!!3265563.java!!!	setPackageAssertionStatus(in packageName : String, inout enabled : boolean) : void
        if (packageAssertionStatus == null)
            initializeJavaAssertionMaps();

        packageAssertionStatus.put(packageName, Boolean.valueOf(enabled));
!!!3265691.java!!!	setClassAssertionStatus(in className : String, inout enabled : boolean) : void
        if (classAssertionStatus == null)
            initializeJavaAssertionMaps();

        classAssertionStatus.put(className, Boolean.valueOf(enabled));
!!!3265819.java!!!	clearAssertionStatus() : void
        /*
         * Whether or not "Java assertion maps" are initialized, set
         * them to empty maps, effectively ignoring any present settings.
         */
        classAssertionStatus = new HashMap();
        packageAssertionStatus = new HashMap();

        defaultAssertionStatus = false;
!!!3265947.java!!!	desiredAssertionStatus(in className : String) : boolean
        Boolean result;

        // assert classAssertionStatus   != null;
        // assert packageAssertionStatus != null;

        // Check for a class entry
        result = (Boolean)classAssertionStatus.get(className);
        if (result != null)
            return result.booleanValue();

        // Check for most specific package entry
        int dotIndex = className.lastIndexOf(".");
        if (dotIndex < 0) { // default package
            result = (Boolean)packageAssertionStatus.get(null);
            if (result != null)
                return result.booleanValue();
        }
        while(dotIndex > 0) {
            className = className.substring(0, dotIndex);
            result = (Boolean)packageAssertionStatus.get(className);
            if (result != null)
                return result.booleanValue();
            dotIndex = className.lastIndexOf(".", dotIndex-1);
        }

        // Return the classloader default
        return defaultAssertionStatus;
!!!3266075.java!!!	initializeJavaAssertionMaps() : void
        // assert Thread.holdsLock(this);

        classAssertionStatus = new HashMap();
        packageAssertionStatus = new HashMap();
        AssertionStatusDirectives directives = retrieveDirectives();

        for(int i = 0; i < directives.classes.length; i++)
            classAssertionStatus.put(directives.classes[i],
                              Boolean.valueOf(directives.classEnabled[i]));

        for(int i = 0; i < directives.packages.length; i++)
            packageAssertionStatus.put(directives.packages[i],
                              Boolean.valueOf(directives.packageEnabled[i]));

        defaultAssertionStatus = directives.deflt;
