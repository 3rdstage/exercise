class Sasl
!!!8684059.java!!!	Sasl()
 
!!!8684187.java!!!	createSaslClient(in mechanisms : String, in authorizationId : String, in protocol : String, in serverName : String, inout props : Map, inout cbh : CallbackHandler) : SaslClient
        
        SaslClient mech = null;
	SaslClientFactory fac;
	String className;
	String mechName;

	for (int i = 0; i < mechanisms.length; i++) {
	    if ((mechName=mechanisms[i]) == null) {
		throw new NullPointerException(
		    "Mechanism name cannot be null");
	    } else if (mechName.length() == 0) {
		continue;
	    }
	    String mechFilter = "SaslClientFactory." + mechName;
	    Provider[] provs = Security.getProviders(mechFilter);
	    for (int j = 0; provs != null && j < provs.length; j++) {
		className = provs[j].getProperty(mechFilter);
		if (className == null) {
		    // Case is ignored
		    continue;
		}

		fac = (SaslClientFactory) loadFactory(provs[j], className);
		if (fac != null) {
		    mech = fac.createSaslClient(
			new String[]{mechanisms[i]}, authorizationId, 
			protocol, serverName, props, cbh);
		    if (mech != null) {
			return mech;
		    }
		}
	    }
	}

	return null;
!!!8684315.java!!!	loadFactory(inout p : Provider, in className : String) : Object
	try {
	    /*  
	     * Load the implementation class with the same class loader
	     * that was used to load the provider.
	     * In order to get the class loader of a class, the
	     * caller's class loader must be the same as or an ancestor of
	     * the class loader being returned. Otherwise, the caller must
	     * have "getClassLoader" permission, or a SecurityException
	     * will be thrown.
	     */
	    ClassLoader cl = p.getClass().getClassLoader();
	    Class implClass;
	    implClass = Class.forName(className, true, cl);
	    return implClass.newInstance();
	} catch (ClassNotFoundException e) {
	    throw new SaslException("Cannot load class " + className, e);
	} catch (InstantiationException e) {
	    throw new SaslException("Cannot instantiate class " + className, e);
	} catch (IllegalAccessException e) {
	    throw new SaslException("Cannot access class " + className, e);
	} catch (SecurityException e) {
	    throw new SaslException("Cannot access class " + className, e);
	}
!!!8684443.java!!!	createSaslServer(in mechanism : String, in protocol : String, in serverName : String, inout props : Map, inout cbh : CallbackHandler) : SaslServer

        SaslServer mech = null;
	SaslServerFactory fac;
	String className;

	if (mechanism == null) {
	    throw new NullPointerException("Mechanism name cannot be null");
	} else if (mechanism.length() == 0) {
	    return null;
	}

	String mechFilter = "SaslServerFactory." + mechanism;
	Provider[] provs = Security.getProviders(mechFilter);
	for (int j = 0; provs != null && j < provs.length; j++) {
	    className = provs[j].getProperty(mechFilter);
	    if (className == null) {
		throw new SaslException("Provider does not support " +
		    mechFilter);
	    }
	    fac = (SaslServerFactory) loadFactory(provs[j], className);
	    if (fac != null) {
		mech = fac.createSaslServer(
		    mechanism, protocol, serverName, props, cbh);
		if (mech != null) {
		    return mech;
		}
	    }
	}

	return null;
!!!8684571.java!!!	getSaslClientFactories() : Enumeration
	Set facs = getFactories("SaslClientFactory");
	final Iterator iter = facs.iterator();
	return new Enumeration<SaslClientFactory>() {
	    public boolean hasMoreElements() {
		return iter.hasNext();
	    }
	    public SaslClientFactory nextElement() {
		return (SaslClientFactory)iter.next();
	    }
	};
!!!8684699.java!!!	getSaslServerFactories() : Enumeration
	Set facs = getFactories("SaslServerFactory");
	final Iterator iter = facs.iterator();
	return new Enumeration<SaslServerFactory>() {
	    public boolean hasMoreElements() {
		return iter.hasNext();
	    }
	    public SaslServerFactory nextElement() {
		return (SaslServerFactory)iter.next();
	    }
	};
!!!8684827.java!!!	getFactories(in serviceName : String) : Set
	HashSet result = new HashSet();

	if ((serviceName == null) || (serviceName.length() == 0) ||
	    (serviceName.endsWith("."))) {
	    return result;
	}


	Provider[] providers = Security.getProviders();
	HashSet classes = new HashSet();
	Object fac;

	for (int i = 0; i < providers.length; i++) {
	    classes.clear();

	    // Check the keys for each provider.
	    for (Enumeration e = providers[i].keys(); e.hasMoreElements(); ) {
		String currentKey = (String)e.nextElement();
		if (currentKey.startsWith(serviceName)) {
		    // We should skip the currentKey if it contains a 
		    // whitespace. The reason is: such an entry in the
		    // provider property contains attributes for the
		    // implementation of an algorithm. We are only interested
		    // in entries which lead to the implementation
		    // classes.
		    if (currentKey.indexOf(" ") < 0) {
			String className = providers[i].getProperty(currentKey);
			if (!classes.contains(className)) {
			    classes.add(className);
			    try {
				fac = loadFactory(providers[i], className);
				if (fac != null) {
				    result.add(fac);
				} 
			    }catch (Exception ignore) {
			    }
			}
		    }
		}
	    }
	}
	return Collections.unmodifiableSet(result);
