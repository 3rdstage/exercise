class EventDispatchThread
!!!6233243.java!!!	EventDispatchThread(inout group : ThreadGroup, in name : String, inout queue : EventQueue)
        super(group, name);
        theQueue = queue;
!!!6233371.java!!!	stopDispatchingImpl(inout wait : boolean) : void
        // Note: We stop dispatching via a flag rather than using
        // Thread.interrupt() because we can't guarantee that the wait()
        // we interrupt will be EventQueue.getNextEvent()'s.  -fredx 8-11-98

        StopDispatchEvent stopEvent = new StopDispatchEvent();

        // wait for the dispatcher to complete
        if (Thread.currentThread() != this) {

            // fix 4122683, 4128923
            // Post an empty event to ensure getNextEvent is unblocked
            //
            // We have to use postEventPrivate instead of postEvent because
            // EventQueue.pop calls EventDispatchThread.stopDispatching.
            // Calling SunToolkit.flushPendingEvents in this case could
            // lead to deadlock.
            theQueue.postEventPrivate(stopEvent);
                
            if (wait) {
                try {
                    join();
                } catch(InterruptedException e) {
                }
            }
        } else {
            stopEvent.dispatch();
        }
        synchronized (theQueue) {
            if (theQueue.getDispatchThread() == this) {
                theQueue.detachDispatchThread();
            }
        }
!!!6233499.java!!!	stopDispatching() : void
        stopDispatchingImpl(true);
!!!6233627.java!!!	stopDispatchingLater() : void
        stopDispatchingImpl(false);
!!!6234011.java!!!	run() : void
	try {
	    pumpEvents(new Conditional() {
		public boolean evaluate() {
		    return true;
		}
	    });	    
	} finally {
	    /*
	     * This synchronized block is to secure that the event dispatch 
	     * thread won't die in the middle of posting a new event to the
	     * associated event queue. It is important because we notify
	     * that the event dispatch thread is busy after posting a new event
	     * to its queue, so the EventQueue.dispatchThread reference must
	     * be valid at that point.
	     */
	    synchronized (theQueue) {
                if (theQueue.getDispatchThread() == this) {
                    theQueue.detachDispatchThread();
                }
                /*
                 * Event dispatch thread dies in case of an uncaught exception. 
                 * A new event dispatch thread for this queue will be started
                 * only if a new event is posted to it. In case if no more
                 * events are posted after this thread died all events that 
                 * currently are in the queue will never be dispatched.
                 */
                /*
                 * Fix for 4648733. Check both the associated java event
                 * queue and the PostEventQueue.
                 */
                if (theQueue.peekEvent() != null || 
                    !SunToolkit.isPostEventQueueEmpty()) { 
                    theQueue.initDispatchThread();
                }
		AWTAutoShutdown.getInstance().notifyThreadFree(this);
	    }
	}
!!!6234139.java!!!	pumpEvents(inout cond : Conditional) : void
	pumpEvents(ANY_EVENT, cond);
!!!6234267.java!!!	pumpEventsForHierarchy(inout cond : Conditional, inout modalComponent : Component) : void
        pumpEventsForHierarchy(ANY_EVENT, cond, modalComponent);
!!!6234395.java!!!	pumpEvents(in id : int, inout cond : Conditional) : void
        pumpEventsForHierarchy(id, cond, null);
!!!6234523.java!!!	pumpEventsForHierarchy(in id : int, inout cond : Conditional, inout modalComponent : Component) : void
        while (doDispatch && cond.evaluate()) {
            if (isInterrupted() || !pumpOneEventForHierarchy(id, modalComponent)) {
                doDispatch = false;
            }
        }
!!!6234651.java!!!	checkMouseEventForModalJInternalFrame(inout me : MouseEvent, inout modalComp : Component) : boolean
        // Check if the MouseEvent is targeted to the HW parent of the
        // LW component, if so, then return true. The job of distinguishing
        // between the LW components is done by the LW dispatcher.
        if (modalComp instanceof javax.swing.JInternalFrame) {
            Container c;
            synchronized (modalComp.getTreeLock()) {
                c = ((Container)modalComp).getHeavyweightContainer();
            }
            if (me.getSource() == c) 
                return true;
        }
        return false;
!!!6234779.java!!!	pumpOneEventForHierarchy(in id : int, inout modalComponent : Component) : boolean
        try {
            AWTEvent event;
            boolean eventOK;
            do {
	        event = (id == ANY_EVENT)
		    ? theQueue.getNextEvent()
		    : theQueue.getNextEvent(id);

                eventOK = true;
                if (modalComponent != null) {
                    /*
                     * filter out MouseEvent and ActionEvent that's outside
                     * the modalComponent hierarchy.
                     * KeyEvent is handled by using enqueueKeyEvent
                     * in Dialog.show
                     */
                    int eventID = event.getID();
                    if (((eventID >= MouseEvent.MOUSE_FIRST &&
                            eventID <= MouseEvent.MOUSE_LAST) &&
                            !(checkMouseEventForModalJInternalFrame((MouseEvent)
                                event, modalComponent))) || 
                            (eventID >= ActionEvent.ACTION_FIRST &&
                            eventID <= ActionEvent.ACTION_LAST) ||
                            eventID == WindowEvent.WINDOW_CLOSING) {
                        Object o = event.getSource();
                        if (o instanceof sun.awt.ModalExclude) {
                            // Exclude this object from modality and
                            // continue to pump it's events.
                        } else if (o instanceof Component) {
                            Component c = (Component) o;
                            boolean modalExcluded = false;
                            if (modalComponent instanceof Container) {
                                while (c != modalComponent && c != null) {
                                    if ((c instanceof Window) &&
                                        (sun.awt.SunToolkit.isModalExcluded((Window)c))) {
                                            // Exclude this window and all its children from
                                            //  modality and continue to pump it's events.
                                        modalExcluded = true;
                                        break;
                                    }
                                    c = c.getParent();
                                }
                            }
                            if (!modalExcluded && (c != modalComponent)) {
                                eventOK = false;
                            }
                        }
                    }
                }
                eventOK = eventOK && SunDragSourceContextPeer.checkEvent(event);
                if (!eventOK) {
                    event.consume();
                }
            } while (eventOK == false);
                      
	    if ( dbg.on ) dbg.println("Dispatching: "+event);

            theQueue.dispatchEvent(event);
            return true;
        } catch (ThreadDeath death) {
            return false;

        } catch (InterruptedException interruptedException) {
            return false; // AppContext.dispose() interrupts all
                          // Threads in the AppContext

	    // Can get and throw only unchecked exceptions
        } catch (RuntimeException e) {
            processException(e, modalComponent != null);
        } catch (Error e) {
            processException(e, modalComponent != null);
        }
        return true;
!!!6234907.java!!!	processException(inout e : Throwable, inout isModal : boolean) : void
        if (!handleException(e)) {
            // See bug ID 4499199.
            // If we are in a modal dialog, we cannot throw
            // an exception for the ThreadGroup to handle (as added
            // in RFE 4063022).  If we did, the message pump of
            // the modal dialog would be interrupted.
            // We instead choose to handle the exception ourselves.
            // It may be useful to add either a runtime flag or API
            // later if someone would like to instead dispose the
            // dialog and allow the thread group to handle it.
            if (isModal) {
                System.err.println(
                    "Exception occurred during event dispatching:");
                e.printStackTrace();
            } else if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else if (e instanceof Error) {
                throw (Error)e;
            }
        }
!!!6235035.java!!!	handleException(inout thrown : Throwable) : boolean

        try {

            if (handlerClassName == NO_HANDLER) {
                return false;   /* Already tried, and failed */
            }

            /* Look up the class name */
            if (handlerClassName == null) {
                handlerClassName = ((String) AccessController.doPrivileged(
                    new GetPropertyAction(handlerPropName)));
                if (handlerClassName == null) {
                    handlerClassName = NO_HANDLER; /* Do not try this again */
                    return false;
                }
            }

            /* Load the class, instantiate it, and find its handle method */
            Method m;
            Object h;
            try {
                ClassLoader cl = Thread.currentThread().getContextClassLoader();
                Class c = Class.forName(handlerClassName, true, cl);
                m = c.getMethod("handle", new Class[] { Throwable.class });
                h = c.newInstance();
            } catch (Throwable x) {
                handlerClassName = NO_HANDLER; /* Do not try this again */
                return false;
            }

            /* Finally, invoke the handler */
            m.invoke(h, new Object[] { thrown });

        } catch (Throwable x) {
            return false;
        }

        return true;
!!!6235163.java!!!	isDispatching(inout eq : EventQueue) : boolean
	return theQueue.equals(eq);
!!!6235291.java!!!	getEventQueue() : EventQueue
 return theQueue;
