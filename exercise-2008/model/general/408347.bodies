class BasicComboPopup
!!!2413083.java!!!	show() : void
	setListSelection(comboBox.getSelectedIndex());

	Point location = getPopupLocation();
        show( comboBox, location.x, location.y );
!!!2413211.java!!!	hide() : void
        MenuSelectionManager manager = MenuSelectionManager.defaultManager();
        MenuElement [] selection = manager.getSelectedPath();
        for ( int i = 0 ; i < selection.length ; i++ ) {
            if ( selection[i] == this ) {
                manager.clearSelectedPath();
                break;
            }
        }
        if (selection.length > 0) {
            comboBox.repaint();
        }
!!!2413339.java!!!	getList() : JList
        return list;
!!!2413467.java!!!	getMouseListener() : MouseListener
	if (mouseListener == null) {
	    mouseListener = createMouseListener();
	}
        return mouseListener;
!!!2413595.java!!!	getMouseMotionListener() : MouseMotionListener
	if (mouseMotionListener == null) {
	    mouseMotionListener = createMouseMotionListener();
	}
        return mouseMotionListener;
!!!2413723.java!!!	getKeyListener() : KeyListener
	if (keyListener == null) {
	    keyListener = createKeyListener();
	}
	return keyListener;
!!!2413851.java!!!	uninstallingUI() : void
	if (propertyChangeListener != null) {
	    comboBox.removePropertyChangeListener( propertyChangeListener );
	}
	if (itemListener != null) {
	    comboBox.removeItemListener( itemListener );
	}
	uninstallComboBoxModelListeners(comboBox.getModel());
        uninstallKeyboardActions();
	uninstallListListeners();
	// We do this, otherwise the listener the ui installs on
	// the model (the combobox model in this case) will keep a
	// reference to the list, causing the list (and us) to never get gced.
	list.setModel(EmptyListModel);
!!!2413979.java!!!	uninstallComboBoxModelListeners(inout model : ComboBoxModel) : void
	if (model != null && listDataListener != null) {
	    model.removeListDataListener(listDataListener);
	}
!!!2414107.java!!!	uninstallKeyboardActions() : void
        // XXX - shouldn't call this method
//        comboBox.unregisterKeyboardAction( KeyStroke.getKeyStroke( KeyEvent.VK_ENTER, 0 ) );
!!!2414235.java!!!	BasicComboPopup(inout combo : JComboBox)
        super();
        setName("ComboPopup.popup");
        comboBox = combo;

        setLightWeightPopupEnabled( comboBox.isLightWeightPopupEnabled() );

	// UI construction of the popup. 
        list = createList();
        list.setName("ComboBox.list");
	configureList();
        scroller = createScroller();
        scroller.setName("ComboBox.scrollPane");
        configureScroller();
        configurePopup();

	installComboBoxListeners();
        installKeyboardActions();
!!!2414363.java!!!	firePopupMenuWillBecomeVisible() : void
	super.firePopupMenuWillBecomeVisible();
	comboBox.firePopupMenuWillBecomeVisible();
!!!2414491.java!!!	firePopupMenuWillBecomeInvisible() : void
	super.firePopupMenuWillBecomeInvisible();
	comboBox.firePopupMenuWillBecomeInvisible();
!!!2414619.java!!!	firePopupMenuCanceled() : void
	super.firePopupMenuCanceled();
	comboBox.firePopupMenuCanceled();
!!!2414747.java!!!	createMouseListener() : MouseListener
        return getHandler();
!!!2414875.java!!!	createMouseMotionListener() : MouseMotionListener
        return getHandler();
!!!2415003.java!!!	createKeyListener() : KeyListener
	return null;
!!!2415131.java!!!	createListSelectionListener() : ListSelectionListener
        return null;
!!!2415259.java!!!	createListDataListener() : ListDataListener
        return null;
!!!2415387.java!!!	createListMouseListener() : MouseListener
        return getHandler();
!!!2415515.java!!!	createListMouseMotionListener() : MouseMotionListener
        return getHandler();
!!!2415643.java!!!	createPropertyChangeListener() : PropertyChangeListener
        return getHandler();
!!!2415771.java!!!	createItemListener() : ItemListener
        return getHandler();
!!!2415899.java!!!	getHandler() : Handler
        if (handler == null) {
            handler = new Handler();
        }
        return handler;
!!!2416027.java!!!	createList() : JList
	return new JList( comboBox.getModel() ) {
            public void processMouseEvent(MouseEvent e)  {
                if (e.isControlDown())  {
                    // Fix for 4234053. Filter out the Control Key from the list. 
                    // ie., don't allow CTRL key deselection.
                    e = new MouseEvent((Component)e.getSource(), e.getID(), e.getWhen(), 
                                   e.getModifiers() ^ InputEvent.CTRL_MASK,
                                   e.getX(), e.getY(), e.getClickCount(), e.isPopupTrigger());
                }
                super.processMouseEvent(e);
            }
        };
!!!2416155.java!!!	configureList() : void
        list.setFont( comboBox.getFont() );
        list.setForeground( comboBox.getForeground() );
        list.setBackground( comboBox.getBackground() );
        list.setSelectionForeground( UIManager.getColor( "ComboBox.selectionForeground" ) );
        list.setSelectionBackground( UIManager.getColor( "ComboBox.selectionBackground" ) );
        list.setBorder( null );
        list.setCellRenderer( comboBox.getRenderer() );
        list.setFocusable( false );
        list.setSelectionMode( ListSelectionModel.SINGLE_SELECTION );
        setListSelection( comboBox.getSelectedIndex() );
        installListListeners();
!!!2416283.java!!!	installListListeners() : void
        if ((listMouseListener = createListMouseListener()) != null) {
	    list.addMouseListener( listMouseListener );
	}
	if ((listMouseMotionListener = createListMouseMotionListener()) != null) {
	    list.addMouseMotionListener( listMouseMotionListener );
	}
	if ((listSelectionListener = createListSelectionListener()) != null) {
	    list.addListSelectionListener( listSelectionListener );
	}
!!!2416411.java!!!	uninstallListListeners() : void
	if (listMouseListener != null) {
	    list.removeMouseListener(listMouseListener);
	    listMouseListener = null;
	}
	if (listMouseMotionListener != null) {
	    list.removeMouseMotionListener(listMouseMotionListener);
	    listMouseMotionListener = null;
	}
	if (listSelectionListener != null) {
	    list.removeListSelectionListener(listSelectionListener);
	    listSelectionListener = null;
	}
        handler = null;
!!!2416539.java!!!	createScroller() : JScrollPane
        JScrollPane sp = new JScrollPane( list, 
				ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
				ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER );
        sp.setHorizontalScrollBar(null);
        return sp;
!!!2416667.java!!!	configureScroller() : void
        scroller.setFocusable( false );
        scroller.getVerticalScrollBar().setFocusable( false );
        scroller.setBorder( null );
!!!2416795.java!!!	configurePopup() : void
        setLayout( new BoxLayout( this, BoxLayout.Y_AXIS ) );
        setBorderPainted( true );
        setBorder(LIST_BORDER);
        setOpaque( false );
        add( scroller );
        setDoubleBuffered( true );
        setFocusable( false );
!!!2416923.java!!!	installComboBoxListeners() : void
        if ((propertyChangeListener = createPropertyChangeListener()) != null) {
	    comboBox.addPropertyChangeListener(propertyChangeListener);
	}
	if ((itemListener = createItemListener()) != null) {
	    comboBox.addItemListener(itemListener);
	}
	installComboBoxModelListeners(comboBox.getModel());
!!!2417051.java!!!	installComboBoxModelListeners(inout model : ComboBoxModel) : void
	if (model != null && (listDataListener = createListDataListener()) != null) {
	    model.addListDataListener(listDataListener);
	}
!!!2417179.java!!!	installKeyboardActions() : void
        
        /* XXX - shouldn't call this method. take it out for testing.
        ActionListener action = new ActionListener() {
            public void actionPerformed(ActionEvent e){
            }
        };

        comboBox.registerKeyboardAction( action,
                                         KeyStroke.getKeyStroke( KeyEvent.VK_ENTER, 0 ),
                                         JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT ); */
        
!!!2420635.java!!!	isFocusTraversable() : boolean
        return false;
!!!2420763.java!!!	startAutoScrolling(in direction : int) : void
        // XXX - should be a private method within InvocationMouseMotionHandler
        // if possible.
        if ( isAutoScrolling ) {
            autoscrollTimer.stop();
        }

        isAutoScrolling = true;

        if ( direction == SCROLL_UP ) {
            scrollDirection = SCROLL_UP;
            Point convertedPoint = SwingUtilities.convertPoint( scroller, new Point( 1, 1 ), list );
            int top = list.locationToIndex( convertedPoint );
            list.setSelectedIndex( top );

            autoscrollTimer = new Timer( 100, new AutoScrollActionHandler(
                                             SCROLL_UP) );
        }
        else if ( direction == SCROLL_DOWN ) {
            scrollDirection = SCROLL_DOWN;
            Dimension size = scroller.getSize();
            Point convertedPoint = SwingUtilities.convertPoint( scroller,
                                                                new Point( 1, (size.height - 1) - 2 ),
                                                                list );
            int bottom = list.locationToIndex( convertedPoint );
            list.setSelectedIndex( bottom );

            autoscrollTimer = new Timer(100, new AutoScrollActionHandler(
                                            SCROLL_DOWN));
        }
        autoscrollTimer.start();
!!!2420891.java!!!	stopAutoScrolling() : void
        isAutoScrolling = false;

        if ( autoscrollTimer != null ) {
            autoscrollTimer.stop();
            autoscrollTimer = null;
        }
!!!2421019.java!!!	autoScrollUp() : void
        int index = list.getSelectedIndex();
        if ( index > 0 ) {
            list.setSelectedIndex( index - 1 );
            list.ensureIndexIsVisible( index - 1 );
        }
!!!2421147.java!!!	autoScrollDown() : void
        int index = list.getSelectedIndex();
        int lastItem = list.getModel().getSize() - 1;
        if ( index < lastItem ) {
            list.setSelectedIndex( index + 1 );
            list.ensureIndexIsVisible( index + 1 );
        }
!!!2421275.java!!!	getAccessibleContext() : AccessibleContext
        AccessibleContext context = super.getAccessibleContext();
        context.setAccessibleParent(comboBox);
        return context;
!!!2421403.java!!!	delegateFocus(inout e : MouseEvent) : void
        if ( comboBox.isEditable() ) {
            Component comp = comboBox.getEditor().getEditorComponent();
            if ((!(comp instanceof JComponent)) || ((JComponent)comp).isRequestFocusEnabled()) {
                comp.requestFocus();
            }
        }
        else if (comboBox.isRequestFocusEnabled()) {
            comboBox.requestFocus();
        }
!!!2421531.java!!!	togglePopup() : void
        if ( isVisible() ) {
            hide();
        }
        else {
            show();
        }
!!!2421659.java!!!	setListSelection(in selectedIndex : int) : void
        if ( selectedIndex == -1 ) {
            list.clearSelection();
        }
        else {
            list.setSelectedIndex( selectedIndex );
	    list.ensureIndexIsVisible( selectedIndex );
        }
!!!2421787.java!!!	convertMouseEvent(inout e : MouseEvent) : MouseEvent
        Point convertedPoint = SwingUtilities.convertPoint( (Component)e.getSource(),
                                                            e.getPoint(), list );
        MouseEvent newEvent = new MouseEvent( (Component)e.getSource(),
                                              e.getID(),
                                              e.getWhen(),
                                              e.getModifiers(),
                                              convertedPoint.x,
                                              convertedPoint.y,
                                              e.getClickCount(),
                                              e.isPopupTrigger() );
        return newEvent;
!!!2421915.java!!!	getPopupHeightForRowCount(in maxRowCount : int) : int
	// Set the cached value of the minimum row count
        int minRowCount = Math.min( maxRowCount, comboBox.getItemCount() );
        int height = 0;
        ListCellRenderer renderer = list.getCellRenderer();
        Object value = null;

        for ( int i = 0; i < minRowCount; ++i ) {
            value = list.getModel().getElementAt( i );
            Component c = renderer.getListCellRendererComponent( list, value, i, false, false );
            height += c.getPreferredSize().height;
        }

        return height == 0 ? 100 : height;
!!!2422043.java!!!	computePopupBounds(in px : int, in py : int, in pw : int, in ph : int) : Rectangle
	Toolkit toolkit = Toolkit.getDefaultToolkit();
        Rectangle screenBounds;

	// Calculate the desktop dimensions relative to the combo box.
        GraphicsConfiguration gc = comboBox.getGraphicsConfiguration();
        Point p = new Point();
        SwingUtilities.convertPointFromScreen(p, comboBox);
        if (gc != null) {
	    Insets screenInsets = toolkit.getScreenInsets(gc);
            screenBounds = gc.getBounds();
	    screenBounds.width -= (screenInsets.left + screenInsets.right);
	    screenBounds.height -= (screenInsets.top + screenInsets.bottom);
            screenBounds.x += (p.x + screenInsets.left);
            screenBounds.y += (p.y + screenInsets.top);
        }
        else {
            screenBounds = new Rectangle(p, toolkit.getScreenSize());
        }

        Rectangle rect = new Rectangle(px,py,pw,ph);
        if (py+ph > screenBounds.y+screenBounds.height
	    && ph < screenBounds.height) {
	    rect.y = -rect.height;
	}
	return rect;
!!!2422171.java!!!	getPopupLocation() : Point
	Dimension popupSize = comboBox.getSize();
	Insets insets = getInsets();

	// reduce the width of the scrollpane by the insets so that the popup
	// is the same width as the combo box.
	popupSize.setSize(popupSize.width - (insets.right + insets.left), 
			  getPopupHeightForRowCount( comboBox.getMaximumRowCount()));
	Rectangle popupBounds = computePopupBounds( 0, comboBox.getBounds().height,
                                                    popupSize.width, popupSize.height);
	Dimension scrollSize = popupBounds.getSize();
	Point popupLocation = popupBounds.getLocation();
	    
	scroller.setMaximumSize( scrollSize );
	scroller.setPreferredSize( scrollSize );
	scroller.setMinimumSize( scrollSize );
	
	list.revalidate();

	return popupLocation;
!!!2422299.java!!!	updateListBoxSelectionForEvent(inout anEvent : MouseEvent, inout shouldScroll : boolean) : void
	// XXX - only seems to be called from this class. shouldScroll flag is
	// never true
        Point location = anEvent.getPoint();
        if ( list == null )
            return;
        int index = list.locationToIndex(location);
        if ( index == -1 ) {
            if ( location.y < 0 )
                index = 0;
            else
                index = comboBox.getModel().getSize() - 1;
        }
        if ( list.getSelectedIndex() != index ) {
            list.setSelectedIndex(index);
            if ( shouldScroll )
                list.ensureIndexIsVisible(index);
        }
