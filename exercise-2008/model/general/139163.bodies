class Date
!!!245403.java!!!	Date()
        this(System.currentTimeMillis());
!!!245531.java!!!	Date(in date : long)
        fastTime = date;
!!!245659.java!!!	Date(in year : int, in month : int, in date : int)
        this(year, month, date, 0, 0, 0);
!!!245787.java!!!	Date(in year : int, in month : int, in date : int, in hrs : int, in min : int)
        this(year, month, date, hrs, min, 0);
!!!245915.java!!!	Date(in year : int, in month : int, in date : int, in hrs : int, in min : int, in sec : int)
	int y = year + 1900;
	// month is 0-based. So we have to normalize month to support Long.MAX_VALUE.
	if (month >= 12) {
	    y += month / 12;
	    month %= 12;
	} else if (month < 0) {
	    y += CalendarUtils.floorDivide(month, 12);
	    month = CalendarUtils.mod(month, 12);
	}
	BaseCalendar cal = getCalendarSystem(y);
        cdate = (BaseCalendar.Date) cal.newCalendarDate(TimeZone.getDefaultRef());
	cdate.setNormalizedDate(y, month + 1, date).setTimeOfDay(hrs, min, sec, 0);
	getTimeImpl();
	cdate = null;
!!!246043.java!!!	Date(in s : String)
        this(parse(s));
!!!246171.java!!!	clone() : Object
        Date d = null;
        try {
            d = (Date)super.clone();
	    if (cdate != null) {
		d.cdate = (BaseCalendar.Date) cdate.clone();
	    }
        } catch (CloneNotSupportedException e) {} // Won't happen
        return d;
!!!246299.java!!!	UTC(in year : int, in month : int, in date : int, in hrs : int, in min : int, in sec : int) : long
	int y = year + 1900;
	// month is 0-based. So we have to normalize month to support Long.MAX_VALUE.
	if (month >= 12) {
	    y += month / 12;
	    month %= 12;
	} else if (month < 0) {
	    y += CalendarUtils.floorDivide(month, 12);
	    month = CalendarUtils.mod(month, 12);
	}
	int m = month + 1;
	BaseCalendar cal = getCalendarSystem(y);
        BaseCalendar.Date udate = (BaseCalendar.Date) cal.newCalendarDate(null);
	udate.setNormalizedDate(y, m, date).setTimeOfDay(hrs, min, sec, 0);

        // Use a Date instance to perform normalization. Its fastTime
        // is the UTC value after the normalization.
        Date d = new Date(0);
        d.normalize(udate);
        return d.fastTime;
!!!246427.java!!!	parse(in s : String) : long
        int year = Integer.MIN_VALUE;
        int mon = -1;
        int mday = -1;
        int hour = -1;
        int min = -1;
        int sec = -1;
        int millis = -1;
        int c = -1;
        int i = 0;
        int n = -1;
        int wst = -1;
        int tzoffset = -1;
        int prevc = 0;
    syntax:
        {
            if (s == null)
                break syntax;
            int limit = s.length();
            while (i < limit) {
                c = s.charAt(i);
                i++;
                if (c <= ' ' || c == ',')
                    continue;
                if (c == '(') { // skip comments
                    int depth = 1;
                    while (i < limit) {
                        c = s.charAt(i);
                        i++;
                        if (c == '(') depth++;
                        else if (c == ')')
                            if (--depth <= 0)
                                break;
                    }
                    continue;
                }
                if ('0' <= c && c <= '9') {
                    n = c - '0';
                    while (i < limit && '0' <= (c = s.charAt(i)) && c <= '9') {
                        n = n * 10 + c - '0';
                        i++;
                    }
                    if (prevc == '+' || prevc == '-' && year != Integer.MIN_VALUE) {
                        // timezone offset
                        if (n < 24)
                            n = n * 60; // EG. "GMT-3"
                        else
                            n = n % 100 + n / 100 * 60; // eg "GMT-0430"
                        if (prevc == '+')   // plus means east of GMT
                            n = -n;
                        if (tzoffset != 0 && tzoffset != -1)
                            break syntax;
                        tzoffset = n;
                    } else if (n >= 70)
                        if (year != Integer.MIN_VALUE)
                            break syntax;
                        else if (c <= ' ' || c == ',' || c == '/' || i >= limit)
                            // year = n < 1900 ? n : n - 1900;
                            year = n;
                        else
                            break syntax;
                    else if (c == ':')
                        if (hour < 0)
                            hour = (byte) n;
                        else if (min < 0)
                            min = (byte) n;
                        else
                            break syntax;
                    else if (c == '/')
                        if (mon < 0)
                            mon = (byte) (n - 1);
                        else if (mday < 0)
                            mday = (byte) n;
                        else
                            break syntax;
                    else if (i < limit && c != ',' && c > ' ' && c != '-')
                        break syntax;
                    else if (hour >= 0 && min < 0)
                        min = (byte) n;
                    else if (min >= 0 && sec < 0)
                        sec = (byte) n;
                    else if (mday < 0)
                        mday = (byte) n;
                    // Handle two-digit years < 70 (70-99 handled above).
                    else if (year == Integer.MIN_VALUE && mon >= 0 && mday >= 0)
                        year = n;
                    else
                        break syntax;
                    prevc = 0;
                } else if (c == '/' || c == ':' || c == '+' || c == '-')
                    prevc = c;
                else {
                    int st = i - 1;
                    while (i < limit) {
                        c = s.charAt(i);
                        if (!('A' <= c && c <= 'Z' || 'a' <= c && c <= 'z'))
                            break;
                        i++;
                    }
                    if (i <= st + 1)
                        break syntax;
                    int k;
                    for (k = wtb.length; --k >= 0;)
                        if (wtb[k].regionMatches(true, 0, s, st, i - st)) {
                            int action = ttb[k];
                            if (action != 0) {
                                if (action == 1) {  // pm
                                    if (hour > 12 || hour < 1)
                                        break syntax;
                                    else if (hour < 12)
                                        hour += 12;
                                } else if (action == 14) {  // am
                                    if (hour > 12 || hour < 1)
                                        break syntax;
                                    else if (hour == 12)
                                        hour = 0;
                                } else if (action <= 13) {  // month!
                                    if (mon < 0)
                                        mon = (byte) (action - 2);
                                    else
                                        break syntax;
                                } else {
                                    tzoffset = action - 10000;
                                }
                            }
                            break;
                        }
                    if (k < 0)
                        break syntax;
                    prevc = 0;
                }
            }
            if (year == Integer.MIN_VALUE || mon < 0 || mday < 0)
                break syntax;
            // Parse 2-digit years within the correct default century.
            if (year < 100) {
		synchronized (Date.class) {
		    if (defaultCenturyStart == 0) {
			defaultCenturyStart = gcal.getCalendarDate().getYear() - 80;
		    }
		}
                year += (defaultCenturyStart / 100) * 100;
                if (year < defaultCenturyStart) year += 100;
            }
            if (sec < 0)
                sec = 0;
            if (min < 0)
                min = 0;
            if (hour < 0)
                hour = 0;
	    BaseCalendar cal = getCalendarSystem(year);
            if (tzoffset == -1)  { // no time zone specified, have to use local
		BaseCalendar.Date ldate = (BaseCalendar.Date) cal.newCalendarDate(TimeZone.getDefaultRef());
		ldate.setDate(year, mon + 1, mday);
		ldate.setTimeOfDay(hour, min, sec, 0);
                return cal.getTime(ldate);
	    }
	    BaseCalendar.Date udate = (BaseCalendar.Date) cal.newCalendarDate(null); // no time zone
	    udate.setDate(year, mon + 1, mday);
	    udate.setTimeOfDay(hour, min, sec, 0);
            return cal.getTime(udate) + tzoffset * (60 * 1000);
        }
        // syntax error
        throw new IllegalArgumentException();
!!!246555.java!!!	getYear() : int
        return normalize().getYear() - 1900;
!!!246683.java!!!	setYear(in year : int) : void
	getCalendarDate().setNormalizedYear(year + 1900);
!!!246811.java!!!	getMonth() : int
	return normalize().getMonth() - 1; // adjust 1-based to 0-based
!!!246939.java!!!	setMonth(in month : int) : void
	int y = 0;
	if (month >= 12) {
	    y = month / 12;
	    month %= 12;
	} else if (month < 0) {
	    y = CalendarUtils.floorDivide(month, 12);
	    month = CalendarUtils.mod(month, 12);
	}
        BaseCalendar.Date d = getCalendarDate();
	if (y != 0) {
	    d.setNormalizedYear(d.getNormalizedYear() + y);
	}
	d.setMonth(month + 1); // adjust 0-based to 1-based month numbering
!!!247067.java!!!	getDate() : int
	return normalize().getDayOfMonth();
!!!247195.java!!!	setDate(in date : int) : void
        getCalendarDate().setDayOfMonth(date);
!!!247323.java!!!	getDay() : int
	return normalize().getDayOfWeek() - gcal.SUNDAY;
!!!247451.java!!!	getHours() : int
	return normalize().getHours();
!!!247579.java!!!	setHours(in hours : int) : void
        getCalendarDate().setHours(hours);
!!!247707.java!!!	getMinutes() : int
	return normalize().getMinutes();
!!!247835.java!!!	setMinutes(in minutes : int) : void
        getCalendarDate().setMinutes(minutes);
!!!247963.java!!!	getSeconds() : int
	return normalize().getSeconds();
!!!248091.java!!!	setSeconds(in seconds : int) : void
        getCalendarDate().setSeconds(seconds);
!!!248219.java!!!	getTime() : long
        return getTimeImpl();
!!!248347.java!!!	getTimeImpl() : long
	if (cdate != null && !cdate.isNormalized()) {
	    normalize();
	}
	return fastTime;
!!!248475.java!!!	setTime(in time : long) : void
	fastTime = time;
	cdate = null;
!!!248603.java!!!	before(inout when : Date) : boolean
        return getMillisOf(this) < getMillisOf(when);
!!!248731.java!!!	after(inout when : Date) : boolean
        return getMillisOf(this) > getMillisOf(when);
!!!248859.java!!!	equals(inout obj : Object) : boolean
        return obj instanceof Date && getTime() == ((Date) obj).getTime();
!!!248987.java!!!	getMillisOf(inout date : Date) : long
	if (date.cdate == null) {
	    return date.fastTime;
	}
	BaseCalendar.Date d = (BaseCalendar.Date) date.cdate.clone();
	return gcal.getTime(d);
!!!249115.java!!!	compareTo(inout anotherDate : Date) : int
	long thisTime = getMillisOf(this);
	long anotherTime = getMillisOf(anotherDate);
	return (thisTime<anotherTime ? -1 : (thisTime==anotherTime ? 0 : 1));
!!!249243.java!!!	hashCode() : int
        long ht = this.getTime();
        return (int) ht ^ (int) (ht >> 32);
!!!249371.java!!!	toString() : String
	// "EEE MMM dd HH:mm:ss zzz yyyy";
	BaseCalendar.Date date = normalize();
	StringBuilder sb = new StringBuilder(28);
	int index = date.getDayOfWeek();
	if (index == gcal.SUNDAY) {
	    index = 8;
	}
	convertToAbbr(sb, wtb[index]).append(' ');			  // EEE
	convertToAbbr(sb, wtb[date.getMonth() - 1 + 2 + 7]).append(' ');  // MMM
	CalendarUtils.sprintf0d(sb, date.getDayOfMonth(), 2).append(' '); // dd

	CalendarUtils.sprintf0d(sb, date.getHours(), 2).append(':');   // HH
	CalendarUtils.sprintf0d(sb, date.getMinutes(), 2).append(':'); // mm
	CalendarUtils.sprintf0d(sb, date.getSeconds(), 2).append(' '); // ss
	TimeZone zi = date.getZone();
	if (zi != null) {
	    sb.append(zi.getDisplayName(date.isDaylightTime(), zi.SHORT, Locale.US)); // zzz
	} else {
	    sb.append("GMT");
	}
	sb.append(' ').append(date.getYear());  // yyyy
	return sb.toString();
!!!249499.java!!!	convertToAbbr(inout sb : StringBuilder, in name : String) : StringBuilder
	sb.append(Character.toUpperCase(name.charAt(0)));
	sb.append(name.charAt(1)).append(name.charAt(2));
	return sb;
!!!249627.java!!!	toLocaleString() : String
	DateFormat formatter = DateFormat.getDateTimeInstance();
	return formatter.format(this);
!!!249755.java!!!	toGMTString() : String
	// d MMM yyyy HH:mm:ss 'GMT'
	long t = getTime();
	BaseCalendar cal = getCalendarSystem(t);
	BaseCalendar.Date date =
	    (BaseCalendar.Date) cal.getCalendarDate(getTime(), (TimeZone)null);
	StringBuilder sb = new StringBuilder(32);
	CalendarUtils.sprintf0d(sb, date.getDayOfMonth(), 1).append(' '); // d
	convertToAbbr(sb, wtb[date.getMonth() - 1 + 2 + 7]).append(' ');  // MMM
	sb.append(date.getYear()).append(' ');                            // yyyy
	CalendarUtils.sprintf0d(sb, date.getHours(), 2).append(':');      // HH
	CalendarUtils.sprintf0d(sb, date.getMinutes(), 2).append(':');    // mm
	CalendarUtils.sprintf0d(sb, date.getSeconds(), 2);                // ss
	sb.append(" GMT");                                                // ' GMT'
	return sb.toString();
!!!249883.java!!!	getTimezoneOffset() : int
	int zoneOffset;
        if (cdate == null) {
	    TimeZone tz = TimeZone.getDefaultRef();
	    if (tz instanceof ZoneInfo) {
		zoneOffset = ((ZoneInfo)tz).getOffsets(fastTime, null);
	    } else {
		zoneOffset = tz.getOffset(fastTime);
	    }
	} else {
	    normalize();
	    zoneOffset = cdate.getZoneOffset();
	}
	return -zoneOffset/60000;  // convert to minutes
!!!250011.java!!!	getCalendarDate() : BaseCalendar.Date
	if (cdate == null) {
	    BaseCalendar cal = getCalendarSystem(fastTime);
	    cdate = (BaseCalendar.Date) cal.getCalendarDate(fastTime,
							    TimeZone.getDefaultRef());
	}
	return cdate;
!!!250139.java!!!	normalize() : BaseCalendar.Date
        if (cdate == null) {
            BaseCalendar cal = getCalendarSystem(fastTime);
            cdate = (BaseCalendar.Date) cal.getCalendarDate(fastTime,
                                                            TimeZone.getDefaultRef());
            return cdate;
        }
  
        // Normalize cdate with the TimeZone in cdate first. This is
        // required for the compatible behavior.
        if (!cdate.isNormalized()) {
            cdate = normalize(cdate);
        }
  
        // If the default TimeZone has changed, then recalculate the
        // fields with the new TimeZone.
        TimeZone tz = TimeZone.getDefaultRef();
        if (tz != cdate.getZone()) {
            cdate.setZone(tz);
            CalendarSystem cal = getCalendarSystem(cdate);
            cal.getCalendarDate(fastTime, cdate);
        }
        return cdate;
!!!250267.java!!!	normalize(inout date : BaseCalendar.Date) : BaseCalendar.Date
        int y = date.getNormalizedYear();
        int m = date.getMonth();
        int d = date.getDayOfMonth();
        int hh = date.getHours();
        int mm = date.getMinutes();
        int ss = date.getSeconds();
        int ms = date.getMillis();
        TimeZone tz = date.getZone();

	// If the specified year can't be handled using a long value
	// in milliseconds, GregorianCalendar is used for full
	// compatibility with underflow and overflow. This is required
	// by some JCK tests. The limits are based max year values -
	// years that can be represented by max values of d, hh, mm,
	// ss and ms. Also, let GregorianCalendar handle the default
	// cutover year so that we don't need to worry about the
	// transition here.
	if (y == 1582 || y > 280000000 || y < -280000000) {
	    if (tz == null) {
		tz = TimeZone.getTimeZone("GMT");
	    }
	    GregorianCalendar gc = new GregorianCalendar(tz);
	    gc.clear();
	    gc.set(gc.MILLISECOND, ms);
	    gc.set(y, m-1, d, hh, mm, ss);
            fastTime = gc.getTimeInMillis();
            BaseCalendar cal = getCalendarSystem(fastTime);
            date = (BaseCalendar.Date) cal.getCalendarDate(fastTime, tz);
            return date;
        }
  
        BaseCalendar cal = getCalendarSystem(y);
        if (cal != getCalendarSystem(date)) {
            date = (BaseCalendar.Date) cal.newCalendarDate(tz);
            date.setNormalizedDate(y, m, d).setTimeOfDay(hh, mm, ss, ms);
        }
        // Perform the GregorianCalendar-style normalization.
        fastTime = cal.getTime(date);
  
        // In case the normalized date requires the other calendar
        // system, we need to recalculate it using the other one.
        BaseCalendar ncal = getCalendarSystem(fastTime);
        if (ncal != cal) {
            date = (BaseCalendar.Date) ncal.newCalendarDate(tz);
            date.setNormalizedDate(y, m, d).setTimeOfDay(hh, mm, ss, ms);
            fastTime = ncal.getTime(date);
        }
        return date;
!!!250395.java!!!	getCalendarSystem(in year : int) : BaseCalendar
	if (year >= 1582) {
	    return gcal;
	}
	return getJulianCalendar();
!!!250523.java!!!	getCalendarSystem(in t : long) : BaseCalendar
	if (t >= GregorianCalendar.DEFAULT_GREGORIAN_CUTOVER) {
	    return gcal;
	}
	return getJulianCalendar();
!!!250651.java!!!	getCalendarSystem(inout cdate : BaseCalendar.Date) : BaseCalendar
	if (jcal == null) {
	    return gcal;
	}
	if (cdate.getEra() != null) {
	    return jcal;
	}
	return gcal;
!!!250779.java!!!	getJulianCalendar() : BaseCalendar
	if (jcal == null) {
	    jcal = (BaseCalendar) CalendarSystem.forName("julian");
	}
	return jcal;
!!!250907.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.writeLong(getTimeImpl());
!!!251035.java!!!	readObject(inout s : ObjectInputStream) : void
        fastTime = s.readLong();
