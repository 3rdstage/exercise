format 66
"management" // src::java::lang::management
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/lang/management"
  java_package "java.lang.management"
  classview 175131 "management"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 921115 "ClassLoadingMXBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The management interface for the class loading system of 
the Java virtual machine. 

<p> A Java virtual machine has a single instance of the implementation
class of this interface.  This instance implementing this interface is 
an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>
that can be obtained by calling
the {@link ManagementFactory#getClassLoadingMXBean} method or
from the {@link ManagementFactory#getPlatformMBeanServer
platform <tt>MBeanServer</tt>} method.

<p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for 
the class loading system within an <tt>MBeanServer</tt> is:
<blockquote>
{@link ManagementFactory#CLASS_LOADING_MXBEAN_NAME 
       <tt>java.lang:type=ClassLoading</tt>}
</blockquote>

@see <a href=\"../../../javax/management/package-summary.html\">
     JMX Specification.</a>
@see <a href=\"package-summary.html#examples\">
     Ways to Access MXBeans</a>

@author  Mandy Chung
@version 1.11, 04/20/04
@since   1.5 "
      operation 7094811 "getTotalLoadedClassCount"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the total number of classes that have been loaded since
the Java virtual machine has started execution.

@return the total number of classes loaded.
"
      end

      operation 7094939 "getLoadedClassCount"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of classes that are currently loaded in the 
Java virtual machine.

@return the number of currently loaded classes."
      end

      operation 7095067 "getUnloadedClassCount"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the total number of classes unloaded since the Java virtual machine
has started execution.

@return the total number of unloaded classes."
      end

      operation 7095195 "isVerbose"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the verbose output for the class loading system is enabled.

@return <tt>true</tt> if the verbose output for the class loading
system is enabled; <tt>false</tt> otherwise."
      end

      operation 7095323 "setVerbose"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables or disables the verbose output for the class loading 
system.  The verbose output information and the output stream
to which the verbose information is emitted are implementation
dependent.  Typically, a Java virtual machine implementation 
prints a message each time a class file is loaded. 

<p>This method can be called by multiple threads concurrently.
Each invocation of this method enables or disables the verbose
output globally.

@param value <tt>true</tt> to enable the verbose output;
             <tt>false</tt> to disable.

@exception  java.lang.SecurityException if a security manager 
            exists and the caller does not have 
            ManagementPermission(\"control\")."
      end
    end

    class 921243 "CompilationMXBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The management interface for the compilation system of
the Java virtual machine.

<p> A Java virtual machine has a single instance of the implementation
class of this interface.  This instance implementing this interface is
an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>
that can be obtained by calling
the {@link ManagementFactory#getCompilationMXBean} method or
from the {@link ManagementFactory#getPlatformMBeanServer
platform <tt>MBeanServer</tt>} method.

<p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for
the compilation system within an MBeanServer is:
<blockquote>
 {@link ManagementFactory#COMPILATION_MXBEAN_NAME 
        <tt>java.lang:type=Compilation</tt>}
</blockquote>

@see <a href=\"../../../javax/management/package-summary.html\">
     JMX Specification.</a>
@see <a href=\"package-summary.html#examples\">
     Ways to Access MXBeans</a>

@author  Mandy Chung
@version 1.10, 04/20/04 
@since   1.5"
      operation 7095451 "getName"
	public return_type class_ref 179611 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the Just-in-time (JIT) compiler. 

@return the name of the JIT compiler."
      end

      operation 7095579 "isCompilationTimeMonitoringSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the Java virtual machine supports the monitoring of
compilation time. 

@return <tt>true</tt> if the monitoring of compilation time is  
supported ; <tt>false</tt> otherwise."
      end

      operation 7095707 "getTotalCompilationTime"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the approximate accumlated elapsed time (in milliseconds) 
spent in compilation.
If multiple threads are used for compilation, this value is 
summation of the approximate time that each thread spent in compilation.

<p>This method is optionally supported by the platform.
A Java virtual machine implementation may not support the compilation 
time monitoring. The {@link #isCompilationTimeMonitoringSupported} 
method can be used to determine if the Java virtual machine 
supports this operation.

<p> This value does not indicate the level of performance of 
the Java virtual machine and is not intended for performance comparisons
of different virtual machine implementations.
The implementations may have different definitions and different 
measurements of the compilation time.

@return Compilation time in milliseconds
@throws java.lang.UnsupportedOperationException if the Java 
virtual machine does not support
this operation.
"
      end
    end

    class 921371 "GarbageCollectorMXBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The management interface for the garbage collection of
the Java virtual machine.  Garbage collection is the process 
that the Java virtual machine uses to find and reclaim unreachable 
objects to free up memory space.  A garbage collector is one type of
{@link MemoryManagerMXBean memory manager}.

<p> A Java virtual machine may have one or more instances of 
the implementation class of this interface.  
An instance implementing this interface is
an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>
that can be obtained by calling
the {@link ManagementFactory#getGarbageCollectorMXBeans} method or
from the {@link ManagementFactory#getPlatformMBeanServer
platform <tt>MBeanServer</tt>} method.

<p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for
a garbage collector within an MBeanServer is:
<blockquote>
  {@link ManagementFactory#GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE
   <tt>java.lang:type=GarbageCollector</tt>}<tt>,name=</tt><i>collector's name</i>
</blockquote>

A platform usually includes additional platform-dependent information 
specific to a garbage collection algorithm for monitoring.

@see MemoryMXBean

@see <a href=\"../../../javax/management/package-summary.html\">
     JMX Specification.</a>
@see <a href=\"package-summary.html#examples\">
     Ways to Access MXBeans</a>

@author  Mandy Chung
@version 1.9, 04/20/04 
@since   1.5"
      classrelation 1795227 // <generalisation>
	relation 1795227 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1795227 // <generalisation>
	  b parent class_ref 921499 // MemoryManagerMXBean
      end

      operation 7096219 "getCollectionCount"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the total number of collections that have occurred.
This method returns <tt>-1</tt> if the collection count is undefined for 
this collector.

@return the total number of collections that have occurred."
      end

      operation 7096347 "getCollectionTime"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the approximate accumulated collection elapsed time 
in milliseconds.  This method returns <tt>-1</tt> if the collection 
elapsed time is undefined for this collector.
<p>
The Java virtual machine implementation may use a high resolution
timer to measure the elapsed time.  This method may return the
same value even if the collection count has been incremented
if the collection elapsed time is very short.

@return the approximate accumulated collection elapsed time 
in milliseconds."
      end
    end

    class 921499 "MemoryManagerMXBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The management interface for a memory manager.
A memory manager manages one or more memory pools of the 
Java virtual machine.

<p> A Java virtual machine has one or more memory managers.
An instance implementing this interface is
an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>
that can be obtained by calling
the {@link ManagementFactory#getMemoryManagerMXBeans} method or
from the {@link ManagementFactory#getPlatformMBeanServer
platform <tt>MBeanServer</tt>} method.

<p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for
a memory manager within an MBeanServer is:
<blockquote>
  {@link ManagementFactory#MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE
   <tt>java.lang:type=MemoryManager</tt>}<tt>,name=</tt><i>manager's name</i>
</blockquote>

@see MemoryMXBean

@see <a href=\"../../../javax/management/package-summary.html\">
     JMX Specification.</a>
@see <a href=\"package-summary.html#examples\">
     Ways to Access MXBeans</a>

@author  Mandy Chung
@version 1.10, 04/20/04 
@since   1.5"
      operation 7095835 "getName"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name representing this memory manager.

@return the name of this memory manager."
      end

      operation 7095963 "isValid"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this memory manager is valid in the Java virtual
machine.  A memory manager becomes invalid once the Java virtual
machine removes it from the memory system.

@return <tt>true</tt> if the memory manager is valid in the 
              Java virtual machine;
        <tt>false</tt> otherwise."
      end

      operation 7096091 "getMemoryPoolNames"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of memory pools that this memory manager manages.

@return an array of <tt>String</tt> objects, each is 
the name of a memory pool that this memory manager manages."
      end
    end

    class 921627 "ManagementFactory"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <tt>ManagementFactory</tt> class is a factory class for getting 
managed beans for the Java platform.
This class consists of static methods each of which returns
one or more <a href=\"#MXBean\">platform MXBean(s)</a> representing  
the management interface of a component of the Java virtual
machine.  

<p>
An application can access a platform MXBean in the following ways:
<ul>
<li><i>Direct access to an MXBean interface</i>
    <ol type=\"a\">
    <li>Get the MXBean instance through the static factory method
        and access the MXBean locally of the running
        virtual machine.
        </li>
    <li>Construct an MXBean proxy instance that forwards the 
        method calls to a given {@link MBeanServer MBeanServer} by calling
        {@link #newPlatformMXBeanProxy newPlatfromMXBeanProxy}.
        A proxy is typically constructed to remotely access
        an MXBean of another running virtual machine.
        </li> 
    </ol></li>
<li><i>Indirect access to an MXBean interface via MBeanServer</i>
    <ol type=\"a\">
    <li>Go through the {@link #getPlatformMBeanServer 
        platform MBeanServer} to access MXBeans locally or 
        a specific <tt>MBeanServerConnection</tt> to access
        MXBeans remotely.
        The attributes and operations of an MXBean use only 
        <em>JMX open types</em> which include basic 
        data types, {@link CompositeData CompositeData},
        and {@link TabularData TabularData} defined in
        {@link javax.management.openmbean.OpenType OpenType}.
        The mapping is specified below.
       </li>
    </ol></li>
</ul>

<h4><a name=\"MXBean\">Platform MXBeans</a></h4>
A platform MXBean is a <i>managed bean</i> that conforms to
the JMX Instrumentation Specification and only uses
a set of basic data types described below.
A JMX management application and the platform <tt>MBeanServer</tt>
can interoperate without requiring classes for MXBean specific
data types.  
The data types being transmitted between the JMX connector 
server and the connector client are 
{@link javax.management.openmbean.OpenType open types}
and this allows interoperation across versions. 
<p>
The platform MXBean interfaces use only the following data types:
<ul>
  <li>Primitive types such as <tt>int</tt>, <tt>long</tt>, 
      <tt>boolean</tt>, etc</li>
  <li>Wrapper classes for primitive types such as 
      {@link java.lang.Integer Integer}, {@link java.lang.Long Long},
      {@link java.lang.Boolean Boolean}, etc and 
      {@link java.lang.String String}</li>
  <li>{@link java.lang.Enum Enum} classes</li> 
  <li>Classes that define only getter methods and define a static
      <tt>from</tt> method with a {@link CompositeData CompositeData} 
      argument to convert from an input <tt>CompositeData</tt> to 
      an instance of that class
      </li> 
  <li>{@link java.util.List List&lt;E&gt;} 
      where <tt>E</tt> is a primitive type, a wrapper class, 
      an enum class, or a class supporting conversion from a 
      <tt>CompositeData</tt> to its class
      </li> 
  <li>{@link java.util.Map Map&lt;K,V&gt;}
      where <tt>K</tt> and <tt>V</tt> are 
      a primitive type, a wrapper class, 
      an enum class, or a class supporting conversion from a 
      <tt>CompositeData</tt> to its class
      </li> 
</ul> 

<p>
When an attribute or operation of a platform MXBean
is accessed via an <tt>MBeanServer</tt>, the data types are mapped
as follows:
<ul>
  <li>A primitive type or a wrapper class is mapped
      to the same type.
      </li>
  <li>An {@link Enum} is mapped to
      <tt>String</tt> whose value is the name of the enum constant.
  <li>A class that defines only getter methods and a static
      <tt>from</tt> method with a {@link CompositeData CompositeData} 
      argument is mapped to
      {@link javax.management.openmbean.CompositeData CompositeData}.
      </li>
  <li><tt>Map&lt;K,V&gt;</tt> is mapped to
      {@link TabularData TabularData}
      whose row type is a {@link CompositeType CompositeType} with
      two items whose names are <i>\"key\"</i> and <i>\"value\"</i> 
      and the item types are 
      the corresponding mapped type of <tt>K</tt> and <tt>V</tt> 
      respectively and the <i>\"key\"</i> is the index.
      </li>
  <li><tt>List&lt;E&gt;</tt> is mapped to an array with the mapped 
      type of <tt>E</tt> as the element type.
      </li>
  <li>An array of element type <tt>E</tt> is mapped to
      an array of the same dimenions with the mapped type of <tt>E</tt> 
      as the element type.</li>
</ul> 

The {@link javax.management.MBeanInfo MBeanInfo} 
for a platform MXBean
describes the data types of the attributes and operations
as primitive or open types mapped as specified above. 

<p>
For example, the {@link MemoryMXBean}
interface has the following <i>getter</i> and <i>setter</i> methods:

<blockquote><pre>
public MemoryUsage getHeapMemoryUsage();
public boolean isVerbose();
public void setVerbose(boolean value);
</pre></blockquote>

These attributes in the <tt>MBeanInfo</tt> 
of the <tt>MemoryMXBean</tt> have the following names and types:

<blockquote>
<table border>
<tr>
  <th>Attribute Name</th>
  <th>Type</th>
  </tr>
<tr>
  <td><tt>HeapMemoryUsage</tt></td>
  <td>{@link MemoryUsage#from 
             CompositeData representing MemoryUsage}</td>
</tr>
<tr>
  <td><tt>Verbose</tt></td>
  <td><tt>boolean</tt></td>
</tr>
</table>
</blockquote>

<p>
<b>Implementation Note:</b><p>
The mapping specified above could be done in the implementation
of each platform MXBean.  One good implementation choice is to
implement a MXBean as a {@link javax.management.DynamicMBean dynamic
MBean}.


<h4><a name=\"MXBeanNames\">MXBean Names</a></h4>
Each platform MXBean for a Java virtual machine has a unique
{@link javax.management.ObjectName ObjectName} for 
registration in the platform <tt>MBeanServer</tt>. 
A Java virtual machine has a single instance of the following management
interfaces:

<blockquote>
<table border>
<tr>
<th>Management Interface</th>
<th>ObjectName</th>
</tr>
<tr>
<td> {@link ClassLoadingMXBean} </td>
<td> {@link #CLASS_LOADING_MXBEAN_NAME
            <tt>java.lang:type=ClassLoading</tt>}</td>
</tr>
<tr>
<td> {@link MemoryMXBean} </td>
<td> {@link #MEMORY_MXBEAN_NAME
            <tt>java.lang:type=Memory</tt>}</td>
</tr>
<tr>
<td> {@link ThreadMXBean} </td>
<td> {@link #THREAD_MXBEAN_NAME
            <tt>java.lang:type=Threading</tt>}</td>
</tr>
<tr>
<td> {@link RuntimeMXBean} </td>
<td> {@link #RUNTIME_MXBEAN_NAME
            <tt>java.lang:type=Runtime</tt>}</td>
</tr>
<tr>
<td> {@link OperatingSystemMXBean} </td>
<td> {@link #OPERATING_SYSTEM_MXBEAN_NAME
            <tt>java.lang:type=OperatingSystem</tt>}</td>
</tr>
</table>
</blockquote>

<p>
A Java virtual machine has zero or a single instance of 
the following management interfaces.

<blockquote>
<table border>
<tr>
<th>Management Interface</th>
<th>ObjectName</th>
</tr>
<tr>
<td> {@link CompilationMXBean} </td>
<td> {@link #COMPILATION_MXBEAN_NAME
            <tt>java.lang:type=Compilation</tt>}</td>
</tr>
</table>
</blockquote>

<p>
A Java virtual machine may have one or more instances of the following
management interfaces. 
<blockquote>
<table border>
<tr>
<th>Management Interface</th>
<th>ObjectName</th>
</tr>
<tr>
<td> {@link GarbageCollectorMXBean} </td>
<td> {@link #GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE
   <tt>java.lang:type=GarbageCollector</tt>}<tt>,name=</tt><i>collector's name</i></td>
</tr>
<tr>
<td> {@link MemoryManagerMXBean} </td>
<td> {@link #MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE
   <tt>java.lang:type=MemoryManager</tt>}<tt>,name=</tt><i>manager's name</i></td>
</tr>
<tr>
<td> {@link MemoryPoolMXBean} </td>
<td> {@link #MEMORY_POOL_MXBEAN_DOMAIN_TYPE
   <tt>java.lang:type=MemoryPool</tt>}<tt>,name=</tt><i>pool's name</i></td>
</tr>
</table>
</blockquote>

@see <a href=\"../../../javax/management/package-summary.html\">
     JMX Specification.</a>
@see <a href=\"package-summary.html#examples\">
     Ways to Access Management Metrics</a>
@see java.util.logging.LoggingMXBean

@author  Mandy Chung
@version 1.19, 05/17/04 
@since   1.5"
      operation 7096475 "ManagementFactory"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A class with only static fields and methods."
      end

      attribute 2743579 "CLASS_LOADING_MXBEAN_NAME"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  
        \"java.lang:type=ClassLoading\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "String representation of the
<tt>ObjectName</tt> for the {@link ClassLoadingMXBean}.
"
      end

      attribute 2743707 "COMPILATION_MXBEAN_NAME"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  
        \"java.lang:type=Compilation\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "String representation of the
<tt>ObjectName</tt> for the {@link CompilationMXBean}.
"
      end

      attribute 2743835 "MEMORY_MXBEAN_NAME"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  
        \"java.lang:type=Memory\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "String representation of the
<tt>ObjectName</tt> for the {@link MemoryMXBean}.
"
      end

      attribute 2743963 "OPERATING_SYSTEM_MXBEAN_NAME"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  
        \"java.lang:type=OperatingSystem\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "String representation of the
<tt>ObjectName</tt> for the {@link OperatingSystemMXBean}.
"
      end

      attribute 2744091 "RUNTIME_MXBEAN_NAME"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  
        \"java.lang:type=Runtime\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "String representation of the
<tt>ObjectName</tt> for the {@link RuntimeMXBean}.
"
      end

      attribute 2744219 "THREAD_MXBEAN_NAME"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  
        \"java.lang:type=Threading\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "String representation of the
<tt>ObjectName</tt> for the {@link ThreadMXBean}.
"
      end

      attribute 2744347 "GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  
        \"java.lang:type=GarbageCollector\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The domain name and the type key property in 
the <tt>ObjectName</tt> for a {@link GarbageCollectorMXBean}.
The unique <tt>ObjectName</tt> for a <tt>GarbageCollectorMXBean</tt>
can be formed by appending this string with 
\"<tt>,name=</tt><i>collector's name</i>\".
"
      end

      attribute 2744475 "MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  
        \"java.lang:type=MemoryManager\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The domain name and the type key property in 
the <tt>ObjectName</tt> for a {@link MemoryManagerMXBean}. 
The unique <tt>ObjectName</tt> for a <tt>MemoryManagerMXBean</tt>
can be formed by appending this string with
\"<tt>,name=</tt><i>manager's name</i>\".
"
      end

      attribute 2744603 "MEMORY_POOL_MXBEAN_DOMAIN_TYPE"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  
        \"java.lang:type=MemoryPool\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The domain name and the type key property in 
the <tt>ObjectName</tt> for a {@link MemoryPoolMXBean}. 
The unique <tt>ObjectName</tt> for a <tt>MemoryPoolMXBean</tt>
can be formed by appending this string with
<tt>,name=</tt><i>pool's name</i>.
"
      end

      operation 7096603 "getClassLoadingMXBean"
	class_operation public return_type class_ref 921115 // ClassLoadingMXBean
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the managed bean for the class loading system of 
the Java virtual machine.

@return a {@link ClassLoadingMXBean} object for 
the Java virtual machine."
      end

      operation 7096731 "getMemoryMXBean"
	class_operation public return_type class_ref 921755 // MemoryMXBean
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the managed bean for the memory system of 
the Java virtual machine.

@return a {@link MemoryMXBean} object for the Java virtual machine."
      end

      operation 7096859 "getThreadMXBean"
	class_operation public return_type class_ref 921883 // ThreadMXBean
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the managed bean for the thread system of 
the Java virtual machine.

@return a {@link ThreadMXBean} object for the Java virtual machine."
      end

      operation 7096987 "getRuntimeMXBean"
	class_operation public return_type class_ref 922011 // RuntimeMXBean
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the managed bean for the runtime system of 
the Java virtual machine.

@return a {@link RuntimeMXBean} object for the Java virtual machine.
"
      end

      operation 7097115 "getCompilationMXBean"
	class_operation public return_type class_ref 921243 // CompilationMXBean
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the managed bean for the compilation system of 
the Java virtual machine.  This method returns <tt>null</tt>
if the Java virtual machine has no compilation system.

@return a {@link CompilationMXBean} object for the Java virtual 
  machine or <tt>null</tt> if the Java virtual machine has 
  no compilation system. "
      end

      operation 7097243 "getOperatingSystemMXBean"
	class_operation public return_type class_ref 922139 // OperatingSystemMXBean
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the managed bean for the operating system on which
the Java virtual machine is running.

@return an {@link OperatingSystemMXBean} object for 
the Java virtual machine."
      end

      operation 7097371 "getMemoryPoolMXBeans"
	class_operation public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<MemoryPoolMXBean> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of {@link MemoryPoolMXBean} objects in the 
Java virtual machine.
The Java virtual machine can have one or more memory pools.
It may add or remove memory pools during execution.

@return a list of <tt>MemoryPoolMXBean</tt> objects.
"
      end

      operation 7097499 "getMemoryManagerMXBeans"
	class_operation public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<MemoryManagerMXBean> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of {@link MemoryManagerMXBean} objects 
in the Java virtual machine. 
The Java virtual machine can have one or more memory managers.
It may add or remove memory managers during execution.

@return a list of <tt>MemoryManagerMXBean</tt> objects.
"
      end

      operation 7097627 "getGarbageCollectorMXBeans"
	class_operation public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<GarbageCollectorMXBean> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of {@link GarbageCollectorMXBean} objects 
in the Java virtual machine.
The Java virtual machine may have one or more
<tt>GarbageCollectorMXBean</tt> objects.
It may add or remove <tt>GarbageCollectorMXBean</tt> 
during execution.

@return a list of <tt>GarbageCollectorMXBean</tt> objects.
"
      end

      classrelation 1795355 // platformMBeanServer (<unidirectional association>)
	relation 1795355 --->
	  a role_name "platformMBeanServer" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1795355 // platformMBeanServer (<unidirectional association>)
	  b parent class_ref 513179 // MBeanServer
      end

      operation 7097755 "getPlatformMBeanServer"
	class_operation public return_type class_ref 513179 // MBeanServer
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the platform {@link javax.management.MBeanServer MBeanServer}.
On the first call to this method, it first creates the platform 
<tt>MBeanServer</tt> by calling the 
{@link MBeanServerFactory#createMBeanServer} 
method and registers the platform MXBeans in this platform
<tt>MBeanServer</tt> using the <a href=\"#MXBeanNames\">MXBean names</a>
defined in the class description.
This method, in subsequent calls, will simply return the 
initially created platform <tt>MBeanServer</tt>.
<p>
MXBeans that get created and destroyed dynamically, for example, 
memory {@link MemoryPoolMXBean pools} and 
{@link MemoryManagerMXBean managers},
will automatically be registered and deregistered into the platform
<tt>MBeanServer</tt>.
<p>
If the system property <tt>javax.management.builder.initial</tt>
is set, the platform <tt>MBeanServer</tt> creation will be done
by the specified {@link javax.management.MBeanServerBuilder}.
<p>
It is recommended that this platform MBeanServer also be used
to register other application managed beans 
besides the platform MXBeans. 
This will allow all MBeans to be published through the same 
<tt>MBeanServer</tt> and hence allow for easier network publishing
and discovery.
Name conflicts with the platform MXBeans should be avoided.

@return the platform <tt>MBeanServer</tt>; the platform
        MXBeans are registered into the platform <tt>MBeanServer</tt>
        at the first time this method is called.

@exception SecurityException if there is a security manager 
and the caller does not have the permission required by 
{@link javax.management.MBeanServerFactory#createMBeanServer}.

@see javax.management.MBeanServerFactory
@see javax.management.MBeanServerFactory#createMBeanServer"
      end

      operation 7097883 "newPlatformMXBeanProxy"
	class_operation public explicit_return_type "T"
	nparams 3
	  param inout name "connection" type class_ref 510619 // MBeanServerConnection
	  param in name "mxbeanName" explicit_type "String"
	  param inout name "mxbeanInterface" type class_ref 164635 // Class
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a proxy for a platform MXBean interface of a 
given <a href=\"#MXBeanNames\">MXBean name</a>
that forwards its method calls through the given 
<tt>MBeanServerConnection</tt>.

<p>This method is equivalent to:
<blockquote>
{@link java.lang.reflect.Proxy#newProxyInstance 
       Proxy.newProxyInstance}<tt>(mxbeanInterface.getClassLoader(), 
       new Class[] { mxbeanInterface }, handler)</tt>
</blockquote>

where <tt>handler</tt> is an {@link java.lang.reflect.InvocationHandler
InvocationHandler} to which method invocations to the MXBean interface
are dispatched. This <tt>handler</tt> converts an input parameter
from an MXBean data type to its mapped open type before forwarding 
to the <tt>MBeanServer</tt> and converts a return value from
an MXBean method call through the <tt>MBeanServer</tt>
from an open type to the corresponding return type declared in 
the MXBean interface.

<p>
If the MXBean is a notification emitter (i.e.,
it implements {@link NotificationEmitter NotificationEmitter}),
both the <tt>mxbeanInterface</tt> and <tt>NotificationEmitter</tt>
will be implemented by this proxy.

<p>
<b>Notes:</b>
<ol>
<li>Using an MXBean proxy is a convenience remote access to
a platform MXBean of a running virtual machine.  All method 
calls to the MXBean proxy are forwarded to an 
<tt>MBeanServerConnection</tt> where 
{@link java.io.IOException IOException} may be thrown
when the communication problem occurs with the connector server.
An application remotely accesses the platform MXBeans using 
proxy should prepare to catch <tt>IOException</tt> as if 
accessing with the <tt>MBeanServerConnector</tt> interface.</li>

<li>When a client application is designed to remotely access MXBeans
for a running virtual machine whose version is different than
the version on which the application is running, 
it should prepare to catch 
{@link java.io.InvalidObjectException InvalidObjectException}
which is thrown when an MXBean proxy receives a name of an 
enum constant which is missing in the enum class loaded in
the client application. </li>

<li>{@link javax.management.MBeanServerInvocationHandler
MBeanServerInvocationHandler} or its
{@link javax.management.MBeanServerInvocationHandler#newProxyInstance
newProxyInstance} method cannot be used to create 
a proxy for a platform MXBean. The proxy object created
by <tt>MBeanServerInvocationHandler</tt> does not handle
the properties of the platform MXBeans described in
the <a href=\"#MXBean\">class specification</a>.
</li>
</ol>

@param connection the <tt>MBeanServerConnection</tt> to forward to.
@param mxbeanName the name of a platform MXBean within
<tt>connection</tt> to forward to. <tt>mxbeanName</tt> must be
in the format of {@link ObjectName ObjectName}. 
@param mxbeanInterface the MXBean interface to be implemented
by the proxy.

@throws IllegalArgumentException if 
<ul>
<li><tt>mxbeanName</tt> is not with a valid 
    {@link ObjectName ObjectName} format, or</li>
<li>the named MXBean in the <tt>connection</tt> is
    not a MXBean provided by the platform, or</li>
<li>the named MXBean is not registered in the 
    <tt>MBeanServerConnection</tt>, or</li>
<li>the named MXBean is not an instance of the given 
    <tt>mxbeanInterface</tt></li>
</ul>

@throws java.io.IOException if a communication problem 
occurred when accessing the <tt>MBeanServerConnection</tt>."
      end

      attribute 2744731 "NOTIF_EMITTER"
	class_attribute const_attribute private explicit_type "String"
	init_value "= 
        \"javax.management.NotificationEmitter\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 921755 "MemoryMXBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The management interface for the memory system of
the Java virtual machine.

<p> A Java virtual machine has a single instance of the implementation
class of this interface.  This instance implementing this interface is
an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>
that can be obtained by calling
the {@link ManagementFactory#getMemoryMXBean} method or
from the {@link ManagementFactory#getPlatformMBeanServer
platform <tt>MBeanServer</tt>} method.

<p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for
the memory system within an MBeanServer is:
<blockquote>
   {@link ManagementFactory#MEMORY_MXBEAN_NAME 
          <tt>java.lang:type=Memory</tt>}
</blockquote>

<h4> Memory </h4>
The memory system of the Java virtual machine manages 
the following kinds of memory:

<h4> 1. Heap </h4>
The Java virtual machine has a <i>heap</i> that is the runtime
data area from which memory for all class instances and arrays 
are allocated.  It is created at the Java virtual machine start-up.
Heap memory for objects is reclaimed by an automatic memory management
system which is known as a <i>garbage collector</i>.

<p>The heap may be of a fixed size or may be expanded and shrunk.
The memory for the heap does not need to be contiguous.

<h4> 2. Non-Heap Memory</h4>
The Java virtual machine manages memory other than the heap
(referred as <i>non-heap memory</i>).

<p> The Java virtual machine has a <i>method area</i> that is shared
among all threads.
The method area belongs to non-heap memory.  It stores per-class structures
such as a runtime constant pool, field and method data, and the code for
methods and constructors.  It is created at the Java virtual machine
start-up.

<p> The method area is logically part of the heap but a Java virtual
machine implementation may choose not to either garbage collect
or compact it.  Similar to the heap, the method area may be of a
fixed size or may be expanded and shrunk.  The memory for the
method area does not need to be contiguous.

<p>In addition to the method area, a Java virtual machine
implementation may require memory for internal processing or 
optimization which also belongs to non-heap memory.
For example, the JIT compiler requires memory for storing the native
machine code translated from the Java virtual machine code for
high performance.

<h4>Memory Pools and Memory Managers</h4>
{@link MemoryPoolMXBean Memory pools} and 
{@link MemoryManagerMXBean memory managers} are the abstract entities
that monitor and manage the memory system
of the Java virtual machine.

<p>A memory pool represents a memory area that the Java virtual machine 
manages.  The Java virtual machine has at least one memory pool
and it may create or remove memory pools during execution.  
A memory pool can belong to either the heap or the non-heap memory. 

<p>A memory manager is responsible for managing one or more memory pools.
The garbage collector is one type of memory manager responsible 
for reclaiming memory occupied by unreachable objects.  A Java virtual
machine may have one or more memory managers.   It may
add or remove memory managers during execution.
A memory pool can be managed by more than one memory manager.

<h4>Memory Usage Monitoring</h4>

Memory usage is a very important monitoring attribute for the memory system.
The memory usage, for example, could indicate:
<ul>
  <li>the memory usage of an application,</li>
  <li>the workload being imposed on the automatic memory management system,</li>
  <li>potential memory leakage.</li>
</ul>

<p>
The memory usage can be monitored in three ways:
<ul>
  <li>Polling</li>
  <li>Usage Threshold Notification</li>
  <li>Collection Usage Threshold Notification</li>
</ul>

Details are specified in the {@link MemoryPoolMXBean} interface.

<p>The memory usage monitoring mechanism is intended for load-balancing
or workload distribution use.  For example, an application would stop
receiving any new workload when its memory usage exceeds a
certain threshold. It is not intended for an application to detect
and recover from a low memory condition.

<h4>Notifications</h4>

<p>This <tt>MemoryMXBean</tt> is a 
{@link javax.management.NotificationEmitter NotificationEmitter}
that emits two types of memory {@link javax.management.Notification 
notifications} if any one of the memory pools
supports a <a href=\"MemoryPoolMXBean.html#UsageThreshold\">usage threshold</a>
or a <a href=\"MemoryPoolMXBean.html#CollectionThreshold\">collection usage
threshold</a> which can be determined by calling the
{@link MemoryPoolMXBean#isUsageThresholdSupported} and
{@link MemoryPoolMXBean#isCollectionUsageThresholdSupported} methods. 
<ul>
  <li>{@link MemoryNotificationInfo#MEMORY_THRESHOLD_EXCEEDED
      usage threshold exceeded notification} - for notifying that
      the memory usage of a memory pool is increased and has reached
      or exceeded its
      <a href=\"MemoryPoolMXBean.html#UsageThreshold\"> usage threshold</a> value.
      </li>
  <li>{@link MemoryNotificationInfo#MEMORY_COLLECTION_THRESHOLD_EXCEEDED
      collection usage threshold exceeded notification} - for notifying that
      the memory usage of a memory pool is greater than or equal to its
      <a href=\"MemoryPoolMXBean.html#CollectionThreshold\">
      collection usage threshold</a> after the Java virtual machine
      has expended effort in recycling unused objects in that
      memory pool.</li>
</ul>

<p>
The notification emitted is a {@link javax.management.Notification}
instance whose {@link javax.management.Notification#setUserData 
user data} is set to a {@link CompositeData CompositeData} 
that represents a {@link MemoryNotificationInfo} object
containing information about the memory pool when the notification
was constructed. The <tt>CompositeData</tt> contains the attributes
as described in {@link MemoryNotificationInfo#from 
MemoryNotificationInfo}.

<hr>
<h4>NotificationEmitter</h4>
The <tt>MemoryMXBean</tt> object returned by
{@link ManagementFactory#getMemoryMXBean} implements
the {@link javax.management.NotificationEmitter NotificationEmitter}
interface that allows a listener to be registered within the
<tt>MemoryMXBean</tt> as a notification listener.  

Below is an example code that registers a <tt>MyListener</tt> to handle 
notification emitted by the <tt>MemoryMXBean</tt>. 

<blockquote><pre>
class MyListener implements javax.management.NotificationListener {
    public void handleNotification(Notification notif, Object handback) {
        // handle notification
        ....
    }
}

MemoryMXBean mbean = ManagementFactory.getMemoryMXBean();
NotificationEmitter emitter = (NotificationEmitter) mbean;
MyListener listener = new MyListener();
emitter.addNotificationListener(listener, null, null);
</pre></blockquote>

@see <a href=\"../../../javax/management/package-summary.html\">
     JMX Specification.</a>
@see <a href=\"package-summary.html#examples\">
     Ways to Access MXBeans</a>

@author  Mandy Chung
@version 1.16, 03/08/06 
@since   1.5"
      operation 7098267 "getObjectPendingFinalizationCount"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the approximate number of objects for which 
finalization is pending.

@return the approximate number objects for which finalization
is pending."
      end

      operation 7098395 "getHeapMemoryUsage"
	public return_type class_ref 922523 // MemoryUsage
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current memory usage of the heap that
is used for object allocation.  The heap consists 
of one or more memory pools.  The <tt>used</tt>
and <tt>committed</tt> size of the returned memory
usage is the sum of those values of all heap memory pools
whereas the <tt>init</tt> and <tt>max</tt> size of the
returned memory usage represents the setting of the heap
memory which may not be the sum of those of all heap
memory pools.
<p>
The amount of used memory in the returned memory usage
is the amount of memory occupied by both live objects
and garbage objects that have not been collected, if any.

<p>
<b>MBeanServer access</b>:<br>
The mapped type of <tt>MemoryUsage</tt> is
<tt>CompositeData</tt> with attributes as specified in 
{@link MemoryUsage#from MemoryUsage}.

@return a {@link MemoryUsage} object representing 
the heap memory usage."
      end

      operation 7098523 "getNonHeapMemoryUsage"
	public return_type class_ref 922523 // MemoryUsage
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current memory usage of non-heap memory that
is used by the Java virtual machine.
The non-heap memory consists of one or more memory pools.  
The <tt>used</tt> and <tt>committed</tt> size of the 
returned memory usage is the sum of those values of 
all non-heap memory pools whereas the <tt>init</tt> 
and <tt>max</tt> size of the returned memory usage 
represents the setting of the non-heap
memory which may not be the sum of those of all non-heap
memory pools.

<p>
<b>MBeanServer access</b>:<br>
The mapped type of <tt>MemoryUsage</tt> is
<tt>CompositeData</tt> with attributes as specified in 
{@link MemoryUsage#from MemoryUsage}.

@return a {@link MemoryUsage} object representing 
the non-heap memory usage."
      end

      operation 7098651 "isVerbose"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if verbose output for the memory system is enabled.

@return <tt>true</tt> if verbose output for the memory 
system is enabled; <tt>false</tt> otherwise."
      end

      operation 7098779 "setVerbose"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables or disables verbose output for the memory
system.  The verbose output information and the output stream
to which the verbose information is emitted are implementation
dependent.  Typically, a Java virtual machine implementation
prints a message whenever it frees memory at garbage collection. 

<p>
Each invocation of this method enables or disables verbose
output globally.

@param value <tt>true</tt> to enable verbose output;
             <tt>false</tt> to disable.

@exception  java.lang.SecurityException if a security manager
            exists and the caller does not have
            ManagementPermission(\"control\")."
      end

      operation 7098907 "gc"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs the garbage collector.  
The call <code>gc()</code> is effectively equivalent to the
call:
<blockquote><pre>
System.gc()
</pre></blockquote>

@see     java.lang.System#gc()"
      end
    end

    class 921883 "ThreadMXBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The management interface for the thread system of
the Java virtual machine.

<p> A Java virtual machine has a single instance of the implementation
class of this interface.  This instance implementing this interface is
an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>
that can be obtained by calling
the {@link ManagementFactory#getThreadMXBean} method or
from the {@link ManagementFactory#getPlatformMBeanServer
platform <tt>MBeanServer</tt>} method.

<p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for
the thread system within an MBeanServer is:
<blockquote>
   {@link ManagementFactory#THREAD_MXBEAN_NAME 
          <tt>java.lang:type=Threading</tt>}
</blockquote>

<h4>Thread ID</h4>
Thread ID is a positive long value returned by calling the
{@link java.lang.Thread#getId} method for a thread.
The thread ID is unique during its lifetime.  When a thread 
is terminated, this thread ID may be reused.

<p> Some methods in this interface take a thread ID or an array
of thread IDs as the input parameter and return per-thread information.

<h4>Thread CPU time</h4>
A Java virtual machine implementation may support measuring
the CPU time for the current thread, for any thread, or for no threads.

<p>
The {@link #isThreadCpuTimeSupported} method can be used to determine
if a Java virtual machine supports measuring of the CPU time for any 
thread.  The {@link #isCurrentThreadCpuTimeSupported} method can 
be used to determine if a Java virtual machine supports measuring of 
the CPU time for the current  thread.
A Java virtual machine implementation that supports CPU time measurement 
for any thread will also support that for the current thread.

<p> The CPU time provided by this interface has nanosecond precision
but not necessarily nanosecond accuracy.

<p>
A Java virtual machine may disable CPU time measurement
by default.
The {@link #isThreadCpuTimeEnabled} and {@link #setThreadCpuTimeEnabled}
methods can be used to test if CPU time measurement is enabled
and to enable/disable this support respectively.
Enabling thread CPU measurement could be expensive in some
Java virtual machine implementations.

<h4>Thread Contention Monitoring</h4>
Some Java virtual machines may support thread contention monitoring.
The {@link #isThreadContentionMonitoringSupported} method can be used to 
determine if a Java virtual machine supports thread contention monitoring.

The thread contention monitoring is disabled by default.  The 
{@link #setThreadContentionMonitoringEnabled} method can be used to enable
thread contention monitoring.

@see <a href=\"../../../javax/management/package-summary.html\">
     JMX Specification.</a>
@see <a href=\"package-summary.html#examples\">
     Ways to Access MXBeans</a>

@author  Mandy Chung
@version 1.14, 04/29/04
@since   1.5"
      operation 7108123 "getThreadCount"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current number of live threads including both 
daemon and non-daemon threads.

@return the current number of live threads."
      end

      operation 7108251 "getPeakThreadCount"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the peak live thread count since the Java virtual machine 
started or peak was reset.

@return the peak live thread count."
      end

      operation 7108379 "getTotalStartedThreadCount"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the total number of threads created and also started 
since the Java virtual machine started.

@return the total number of threads started."
      end

      operation 7108507 "getDaemonThreadCount"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current number of live daemon threads.

@return the current number of live daemon threads."
      end

      operation 7108635 "getAllThreadIds"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all live thread IDs. 
Some threads included in the returned array
may have been terminated when this method returns.

@return an array of <tt>long</tt>, each is a thread ID.

@throws java.lang.SecurityException if a security manager
        exists and the caller does not have
        ManagementPermission(\"monitor\")."
      end

      operation 7108763 "getThreadInfo"
	public return_type class_ref 923035 // ThreadInfo
	nparams 1
	  param in name "id" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the thread info for a thread of the specified
<tt>id</tt> with no stack trace. This method is equivalent to calling:
<blockquote>
  {@link #getThreadInfo(long, int) getThreadInfo(id, 0);}
</blockquote>

<p>
This method returns a <tt>ThreadInfo</tt> object representing
the thread information for the thread of the specified ID.
The stack trace in the returned <tt>ThreadInfo</tt> object will
be an empty array of <tt>StackTraceElement</tt>.

If a thread of the given ID is not alive or does not exist,
this method will return <tt>null</tt>.  A thread is alive if 
it has been started and has not yet died.

<p>
<b>MBeanServer access</b>:<br>
The mapped type of <tt>ThreadInfo</tt> is
<tt>CompositeData</tt> with attributes as specified in
{@link ThreadInfo#from ThreadInfo}.

@param id the thread ID of the thread. Must be positive. 

@return a {@link ThreadInfo} object for the thread of the given ID 
with no stack trace;
<tt>null</tt> if the thread of the given ID is not alive or
it does not exist.

@throws IllegalArgumentException if <tt>id &lt= 0</tt>.
@throws java.lang.SecurityException if a security manager
        exists and the caller does not have
        ManagementPermission(\"monitor\")."
      end

      operation 7108891 "getThreadInfo"
	public return_type class_ref 923035 // ThreadInfo
	nparams 1
	  param in name "ids" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the thread info for each thread 
whose ID is in the input array <tt>ids</tt> with no
stack trace. This method is equivalent to calling:
<blockquote><pre>
  {@link #getThreadInfo(long[], int) getThreadInfo}(ids, 0);
</pre></blockquote>

<p>
This method returns an array of the <tt>ThreadInfo</tt> objects.
The stack trace in each <tt>ThreadInfo</tt> object will
be an empty array of <tt>StackTraceElement</tt>.

If a thread of a given ID is not alive or does not exist,
the corresponding element in the returned array will
contain <tt>null</tt>.  A thread is alive if 
it has been started and has not yet died.

<p>
<b>MBeanServer access</b>:<br>
The mapped type of <tt>ThreadInfo</tt> is
<tt>CompositeData</tt> with attributes as specified in
{@link ThreadInfo#from ThreadInfo}.

@param ids an array of thread IDs 
@return an array of the {@link ThreadInfo} objects, each containing
information about a thread whose ID is in the corresponding
element of the input array of IDs. 

@throws IllegalArgumentException if any element in the input array 
     <tt>ids</tt> is <tt>&lt= 0</tt>.
@throws java.lang.SecurityException if a security manager
        exists and the caller does not have
        ManagementPermission(\"monitor\")."
      end

      operation 7109019 "getThreadInfo"
	public return_type class_ref 923035 // ThreadInfo
	nparams 2
	  param in name "id" explicit_type "long"
	  param in name "maxDepth" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a thread info for a thread of 
the specified <tt>id</tt>.
The <tt>maxDepth</tt> parameter indicates the maximum number of 
<tt>StackTraceElement</tt> to be retrieved from the stack trace.
If <tt>maxDepth == Integer.MAX_VALUE</tt>, the entire stack trace of 
the thread will be dumped. 
If <tt>maxDepth == 0</tt>, no stack trace of the thread 
will be dumped. 
<p>
When the Java virtual machine has no stack trace information 
about a thread or <tt>maxDepth == 0</tt>, 
the stack trace in the 
<tt>ThreadInfo</tt> object will be an empty array of 
<tt>StackTraceElement</tt>.

<p>
If a thread of the given ID is not alive or does not exist, 
this method will return <tt>null</tt>.  A thread is alive if 
it has been started and has not yet died.

<p>
<b>MBeanServer access</b>:<br>
The mapped type of <tt>ThreadInfo</tt> is
<tt>CompositeData</tt> with attributes as specified in
{@link ThreadInfo#from ThreadInfo}.

@param id the thread ID of the thread. Must be positive. 
@param maxDepth the maximum number of entries in the stack trace 
to be dumped. <tt>Integer.MAX_VALUE</tt> could be used to request
the entire stack to be dumped.

@return a {@link ThreadInfo} of the thread of the given ID.
<tt>null</tt> if the thread of the given ID is not alive or
it does not exist.

@throws IllegalArgumentException if <tt>id &lt= 0</tt>.
@throws IllegalArgumentException if <tt>maxDepth is negative</tt>.
@throws java.lang.SecurityException if a security manager
        exists and the caller does not have
        ManagementPermission(\"monitor\").
"
      end

      operation 7109147 "getThreadInfo"
	public return_type class_ref 923035 // ThreadInfo
	nparams 2
	  param in name "ids" explicit_type "long"
	  param in name "maxDepth" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the thread info for each thread 
whose ID is in the input array <tt>ids</tt>.
The <tt>maxDepth</tt> parameter indicates the maximum number of 
<tt>StackTraceElement</tt> to be retrieved from the stack trace.
If <tt>maxDepth == Integer.MAX_VALUE</tt>, the entire stack trace of 
the thread will be dumped. 
If <tt>maxDepth == 0</tt>, no stack trace of the thread 
will be dumped.
<p>
When the Java virtual machine has no stack trace information 
about a thread or <tt>maxDepth == 0</tt>, 
the stack trace in the
<tt>ThreadInfo</tt> object will be an empty array of 
<tt>StackTraceElement</tt>.
<p>
This method returns an array of the <tt>ThreadInfo</tt> objects,
each is the thread information about the thread with the same index
as in the <tt>ids</tt> array.
If a thread of the given ID is not alive or does not exist,
<tt>null</tt> will be set in the corresponding element 
in the returned array.  A thread is alive if 
it has been started and has not yet died.

<p>
<b>MBeanServer access</b>:<br>
The mapped type of <tt>ThreadInfo</tt> is
<tt>CompositeData</tt> with attributes as specified in
{@link ThreadInfo#from ThreadInfo}.

@param ids an array of thread IDs 
@param maxDepth the maximum number of entries in the stack trace 
to be dumped. <tt>Integer.MAX_VALUE</tt> could be used to request
the entire stack to be dumped.

@return an array of the {@link ThreadInfo} objects, each containing
information about a thread whose ID is in the corresponding
element of the input array of IDs. 

@throws IllegalArgumentException if <tt>maxDepth is negative</tt>.
@throws IllegalArgumentException if any element in the input array 
     <tt>ids</tt> is <tt>&lt= 0</tt>.
@throws java.lang.SecurityException if a security manager
        exists and the caller does not have
        ManagementPermission(\"monitor\").
"
      end

      operation 7109275 "isThreadContentionMonitoringSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the Java virtual machine supports thread contention monitoring.

@return
  <tt>true</tt>
    if the Java virtual machine supports thread contention monitoring;
  <tt>false</tt> otherwise."
      end

      operation 7109403 "isThreadContentionMonitoringEnabled"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if thread contention monitoring is enabled.

@return <tt>true</tt> if thread contention monitoring is enabled;
        <tt>false</tt> otherwise.

@throws java.lang.UnsupportedOperationException if the Java virtual 
machine does not support thread contention monitoring.

@see #isThreadContentionMonitoringSupported"
      end

      operation 7109531 "setThreadContentionMonitoringEnabled"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables or disables thread contention monitoring.
Thread contention monitoring is disabled by default.

@param enable <tt>true</tt> to enable;
              <tt>false</tt> to disable.

@throws java.lang.UnsupportedOperationException if the Java 
virtual machine does not support thread contention monitoring.

@throws java.lang.SecurityException if a security manager
        exists and the caller does not have
        ManagementPermission(\"control\").

@see #isThreadContentionMonitoringSupported"
      end

      operation 7109659 "getCurrentThreadCpuTime"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the total CPU time for the current thread in nanoseconds.
The returned value is of nanoseconds precison but
not necessarily nanoseconds accuracy.
If the implementation distinguishes between user mode time and system 
mode time, the returned CPU time is the amount of time that 
the current thread has executed in user mode or system mode.

<p>
This is a convenient method for local management use and is 
equivalent to calling:
<blockquote><pre>
  {@link #getThreadCpuTime getThreadCpuTime}(Thread.currentThread().getId());
</pre></blockquote>

@return the total CPU time for the current thread if CPU time
measurement is enabled; <tt>-1</tt> otherwise.

@throws java.lang.UnsupportedOperationException if the Java 
virtual machine does not support CPU time measurement for
the current thread.

@see #getCurrentThreadUserTime
@see #isCurrentThreadCpuTimeSupported
@see #isThreadCpuTimeEnabled
@see #setThreadCpuTimeEnabled"
      end

      operation 7109787 "getCurrentThreadUserTime"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the CPU time that the current thread has executed 
in user mode in nanoseconds.
The returned value is of nanoseconds precison but
not necessarily nanoseconds accuracy.

<p>
This is a convenient method for local management use and is 
equivalent to calling:
<blockquote><pre>
  {@link #getThreadUserTime getThreadUserTime}(Thread.currentThread().getId());
</pre></blockquote>

@return the user-level CPU time for the current thread if CPU time
measurement is enabled; <tt>-1</tt> otherwise.

@throws java.lang.UnsupportedOperationException if the Java 
virtual machine does not support CPU time measurement for
the current thread.

@see #getCurrentThreadCpuTime
@see #isCurrentThreadCpuTimeSupported
@see #isThreadCpuTimeEnabled
@see #setThreadCpuTimeEnabled"
      end

      operation 7109915 "getThreadCpuTime"
	public explicit_return_type "long"
	nparams 1
	  param in name "id" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the total CPU time for a thread of the specified ID in nanoseconds.
The returned value is of nanoseconds precision but
not necessarily nanoseconds accuracy.
If the implementation distinguishes between user mode time and system 
mode time, the returned CPU time is the amount of time that 
the thread has executed in user mode or system mode.

<p>
If the thread of the specified ID is not alive or does not exist,
this method returns <tt>-1</tt>. If CPU time measurement
is disabled, this method returns <tt>-1</tt>.
A thread is alive if it has been started and has not yet died.
<p>
If CPU time measurement is enabled after the thread has started,
the Java virtual machine implementation may choose any time up to
and including the time that the capability is enabled as the point
where CPU time measurement starts.

@param id the thread ID of a thread
@return the total CPU time for a thread of the specified ID
if the thread of the specified ID exists, the thread is alive,
and CPU time measurement is enabled;
<tt>-1</tt> otherwise.

@throws IllegalArgumentException if <tt>id &lt= 0 </tt>.
@throws java.lang.UnsupportedOperationException if the Java 
virtual machine does not support CPU time measurement for 
other threads.

@see #getThreadUserTime
@see #isThreadCpuTimeSupported
@see #isThreadCpuTimeEnabled
@see #setThreadCpuTimeEnabled"
      end

      operation 7110043 "getThreadUserTime"
	public explicit_return_type "long"
	nparams 1
	  param in name "id" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the CPU time that a thread of the specified ID 
has executed in user mode in nanoseconds.
The returned value is of nanoseconds precision but
not necessarily nanoseconds accuracy.

<p>
If the thread of the specified ID is not alive or does not exist,
this method returns <tt>-1</tt>. If CPU time measurement
is disabled, this method returns <tt>-1</tt>.
A thread is alive if it has been started and has not yet died.
<p>
If CPU time measurement is enabled after the thread has started,
the Java virtual machine implementation may choose any time up to
and including the time that the capability is enabled as the point
where CPU time measurement starts.

@param id the thread ID of a thread
@return the user-level CPU time for a thread of the specified ID
if the thread of the specified ID exists, the thread is alive,
and CPU time measurement is enabled;
<tt>-1</tt> otherwise.

@throws IllegalArgumentException if <tt>id &lt= 0 </tt>.
@throws java.lang.UnsupportedOperationException if the Java 
virtual machine does not support CPU time measurement for 
other threads.

@see #getThreadCpuTime
@see #isThreadCpuTimeSupported
@see #isThreadCpuTimeEnabled
@see #setThreadCpuTimeEnabled"
      end

      operation 7110171 "isThreadCpuTimeSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the Java virtual machine implementation supports CPU time
measurement for any thread.
A Java virtual machine implementation that supports CPU time
measurement for any thread will also support CPU time
measurement for the current thread.  

@return
  <tt>true</tt>
    if the Java virtual machine supports CPU time 
    measurement for any thread;
  <tt>false</tt> otherwise."
      end

      operation 7110299 "isCurrentThreadCpuTimeSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the Java virtual machine supports CPU time
measurement for the current thread.
This method returns <tt>true</tt> if {@link #isThreadCpuTimeSupported}
returns <tt>true</tt>.

@return
  <tt>true</tt>
    if the Java virtual machine supports CPU time 
    measurement for current thread;
  <tt>false</tt> otherwise."
      end

      operation 7110427 "isThreadCpuTimeEnabled"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if thread CPU time measurement is enabled.

@return <tt>true</tt> if thread CPU time measurement is enabled;
        <tt>false</tt> otherwise.

@throws java.lang.UnsupportedOperationException if the Java virtual 
machine does not support CPU time measurement for other threads
nor for the current thread.

@see #isThreadCpuTimeSupported
@see #isCurrentThreadCpuTimeSupported"
      end

      operation 7110555 "setThreadCpuTimeEnabled"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables or disables thread CPU time measurement.  The default
is platform dependent.

@param enable <tt>true</tt> to enable;
              <tt>false</tt> to disable.

@throws java.lang.UnsupportedOperationException if the Java 
virtual machine does not support CPU time measurement for
any threads nor for the current thread.

@throws java.lang.SecurityException if a security manager
        exists and the caller does not have
        ManagementPermission(\"control\").

@see #isThreadCpuTimeSupported
@see #isCurrentThreadCpuTimeSupported"
      end

      operation 7110683 "findMonitorDeadlockedThreads"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds cycles of threads that are in deadlock waiting to acquire
object monitors. That is, threads that are blocked waiting to enter a
synchronization block or waiting to reenter a synchronization block
after an {@link Object#wait Object.wait} call, 
where each thread owns one monitor while
trying to obtain another monitor already held by another thread
in a cycle.
<p>
More formally, a thread is <em>monitor deadlocked</em> if it is
part of a cycle in the relation \"is waiting for an object monitor
owned by\".  In the simplest case, thread A is blocked waiting
for a monitor owned by thread B, and thread B is blocked waiting
for a monitor owned by thread A.
<p>
This method is designed for troubleshooting use, but not for
synchronization control.  It might be an expensive operation.

@return an array of IDs of the threads that are monitor
deadlocked, if any; <tt>null</tt> otherwise.

@throws java.lang.SecurityException if a security manager
        exists and the caller does not have
        ManagementPermission(\"monitor\")."
      end

      operation 7110811 "resetPeakThreadCount"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the peak thread count to the current number of
live threads.

@throws java.lang.SecurityException if a security manager
        exists and the caller does not have
        ManagementPermission(\"control\").

@see #getPeakThreadCount
@see #getThreadCount"
      end
    end

    class 922011 "RuntimeMXBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The management interface for the runtime system of
the Java virtual machine.

<p> A Java virtual machine has a single instance of the implementation
class of this interface.  This instance implementing this interface is
an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>
that can be obtained by calling
the {@link ManagementFactory#getRuntimeMXBean} method or
from the {@link ManagementFactory#getPlatformMBeanServer
platform <tt>MBeanServer</tt>} method.

<p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for
the runtime system within an MBeanServer is:
<blockquote>
   {@link ManagementFactory#RUNTIME_MXBEAN_NAME 
          <tt>java.lang:type=Runtime</tt>}
</blockquote>

<p> This interface defines several convenient methods for accessing 
system properties about the Java virtual machine.  

@see <a href=\"../../../javax/management/package-summary.html\">
     JMX Specification.</a>
@see <a href=\"package-summary.html#examples\">
     Ways to Access MXBeans</a>

@author  Mandy Chung
@version 1.13, 04/20/04 
@since   1.5"
      operation 7103899 "getName"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name representing the running Java virtual machine.
The returned name string can be any arbitrary string and  
a Java virtual machine implementation can choose 
to embed platform-specific useful information in the 
returned name string.  Each running virtual machine could have
a different name.

@return the name representing the running Java virtual machine."
      end

      operation 7104027 "getVmName"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java virtual machine implementation name. 
This method is equivalent to {@link System#getProperty 
System.getProperty(\"java.vm.name\")}.

@return the Java virtual machine implementation name.

@throws  java.lang.SecurityException 
    if a security manager exists and its 
    <code>checkPropertiesAccess</code> method doesn't allow access
    to this system property.
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty"
      end

      operation 7104155 "getVmVendor"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java virtual machine implementation vendor. 
This method is equivalent to {@link System#getProperty 
System.getProperty(\"java.vm.vendor\")}.

@return the Java virtual machine implementation vendor.

@throws  java.lang.SecurityException 
    if a security manager exists and its 
    <code>checkPropertiesAccess</code> method doesn't allow access
    to this system property.
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty"
      end

      operation 7104283 "getVmVersion"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java virtual machine implementation version. 
This method is equivalent to {@link System#getProperty 
System.getProperty(\"java.vm.version\")}.

@return the Java virtual machine implementation version.

@throws  java.lang.SecurityException 
    if a security manager exists and its 
    <code>checkPropertiesAccess</code> method doesn't allow access
    to this system property.
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty"
      end

      operation 7104411 "getSpecName"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java virtual machine specification name. 
This method is equivalent to {@link System#getProperty 
System.getProperty(\"java.vm.specification.name\")}.

@return the Java virtual machine specification name.

@throws  java.lang.SecurityException 
    if a security manager exists and its 
    <code>checkPropertiesAccess</code> method doesn't allow access
    to this system property.
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty"
      end

      operation 7104539 "getSpecVendor"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java virtual machine specification vendor. 
This method is equivalent to {@link System#getProperty 
System.getProperty(\"java.vm.specification.vendor\")}.

@return the Java virtual machine specification vendor.

@throws  java.lang.SecurityException 
    if a security manager exists and its 
    <code>checkPropertiesAccess</code> method doesn't allow access
    to this system property.
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty"
      end

      operation 7104667 "getSpecVersion"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java virtual machine specification version. 
This method is equivalent to {@link System#getProperty 
System.getProperty(\"java.vm.specification.version\")}.

@return the Java virtual machine specification version.

@throws  java.lang.SecurityException 
    if a security manager exists and its 
    <code>checkPropertiesAccess</code> method doesn't allow access
    to this system property.
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty"
      end

      operation 7104795 "getManagementSpecVersion"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the version of the specification for the management interface
implemented by the running Java virtual machine.

@return the version of the specification for the management interface
implemented by the running Java virtual machine."
      end

      operation 7104923 "getClassPath"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java class path that is used by the system class loader 
to search for class files.
This method is equivalent to {@link System#getProperty 
System.getProperty(\"java.class.path\")}.

<p> Multiple paths in the Java class path are separated by the 
path separator character of the platform of the Java virtual machine
being monitored.

@return the Java class path.

@throws  java.lang.SecurityException 
    if a security manager exists and its 
    <code>checkPropertiesAccess</code> method doesn't allow access
    to this system property.
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty"
      end

      operation 7105051 "getLibraryPath"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java library path. 
This method is equivalent to {@link System#getProperty 
System.getProperty(\"java.library.path\")}.

<p> Multiple paths in the Java library path are separated by the 
path separator character of the platform of the Java virtual machine
being monitored.

@return the Java library path.

@throws  java.lang.SecurityException 
    if a security manager exists and its 
    <code>checkPropertiesAccess</code> method doesn't allow access
    to this system property.
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty"
      end

      operation 7105179 "isBootClassPathSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the Java virtual machine supports the boot class path
mechanism used by the bootstrap class loader to search for class 
files.

@return <tt>true</tt> if the Java virtual machine supports the 
class path mechanism; <tt>false</tt> otherwise."
      end

      operation 7105307 "getBootClassPath"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the boot class path that is used by the bootstrap class loader 
to search for class files.

<p> Multiple paths in the boot class path are separated by the 
path separator character of the platform on which the Java 
virtual machine is running.

<p>A Java virtual machine implementation may not support 
the boot class path mechanism for the bootstrap class loader 
to search for class files.
The {@link #isBootClassPathSupported} method can be used
to determine if the Java virtual machine supports this method.

@return the boot class path.

@throws java.lang.UnsupportedOperationException 
    if the Java virtual machine does not support this operation.

@throws  java.lang.SecurityException 
    if a security manager exists and the caller does not have
    ManagementPermission(\"monitor\")."
      end

      operation 7105435 "getInputArguments"
	public return_type class_ref 135579 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the input arguments passed to the Java virtual machine
which does not include the arguments to the <tt>main</tt> method.
This method returns an empty list if there is no input argument
to the Java virtual machine.
<p>
Some Java virtual machine implementations may take input arguments 
from multiple different sources: for examples, arguments passed from 
the application that launches the Java virtual machine such as
the 'java' command, environment variables, configuration files, etc.
<p>
Typically, not all command-line options to the 'java' command 
are passed to the Java virtual machine.  
Thus, the returned input arguments may not
include all command-line options.

<p>
<b>MBeanServer access</b>:<br>
The mapped type of <tt>List<String></tt> is <tt>String[]</tt>.

@return a list of <tt>String</tt> objects; each element 
is an argument passed to the Java virtual machine.

@throws  java.lang.SecurityException 
    if a security manager exists and the caller does not have
    ManagementPermission(\"monitor\")."
      end

      operation 7105563 "getUptime"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the uptime of the Java virtual machine in milliseconds.

@return uptime of the Java virtual machine in milliseconds."
      end

      operation 7105691 "getStartTime"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the start time of the Java virtual machine in milliseconds.
This method returns the approximate time when the Java virtual 
machine started. 

@return start time of the Java virtual machine in milliseconds.
"
      end

      operation 7105819 "getSystemProperties"
	public return_type class_ref 136603 // Map
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a map of names and values of all system properties.
This method calls {@link System#getProperties} to get all
system properties.  Properties whose name or value is not
a <tt>String</tt> are omitted.

<p>
<b>MBeanServer access</b>:<br>
The mapped type of <tt>Map<String,String></tt> is
{@link javax.management.openmbean.TabularData TabularData}
with two items in each row as follows:
<blockquote>
<table border>
<tr>
  <th>Item Name</th>
  <th>Item Type</th>
  </tr>
<tr>
  <td><tt>key</tt></td>
  <td><tt>String</tt></td>
  </tr>
<tr>
  <td><tt>value</tt></td>
  <td><tt>String</tt></td>
  </tr>
</table>
</blockquote>

@return a map of names and values of all system properties.

@throws  java.lang.SecurityException
    if a security manager exists and its
    <code>checkPropertiesAccess</code> method doesn't allow access
    to the system properties."
      end
    end

    class 922139 "OperatingSystemMXBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The management interface for the operating system on which
the Java virtual machine is running.

<p> A Java virtual machine has a single instance of the implementation
class of this interface.  This instance implementing this interface is
an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>
that can be obtained by calling
the {@link ManagementFactory#getOperatingSystemMXBean} method or
from the {@link ManagementFactory#getPlatformMBeanServer
platform <tt>MBeanServer</tt>} method.

<p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for
the operating system within an MBeanServer is:
<blockquote>
   {@link ManagementFactory#OPERATING_SYSTEM_MXBEAN_NAME
     <tt>java.lang:type=OperatingSystem</tt>}
</blockquote>

<p> This interface defines several convenient methods for accessing 
system properties about the operating system on which the Java 
virtual machine is running.

@see <a href=\"../../../javax/management/package-summary.html\">
     JMX Specification.</a>
@see <a href=\"package-summary.html#examples\">
     Ways to Access MXBeans</a>

@author  Mandy Chung
@version 1.9, 04/20/04 
@since   1.5"
      operation 7103387 "getName"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the operating system name. 
This method is equivalent to <tt>System.getProperty(\"os.name\")</tt>.

@return the operating system name.

@throws  java.lang.SecurityException
    if a security manager exists and its
    <code>checkPropertiesAccess</code> method doesn't allow access
    to this system property.
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty"
      end

      operation 7103515 "getArch"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the operating system architecture. 
This method is equivalent to <tt>System.getProperty(\"os.arch\")</tt>.

@return the operating system architecture.

@throws  java.lang.SecurityException
    if a security manager exists and its
    <code>checkPropertiesAccess</code> method doesn't allow access
    to this system property.
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty"
      end

      operation 7103643 "getVersion"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the operating system version. 
This method is equivalent to <tt>System.getProperty(\"os.version\")</tt>.

@return the operating system version.

@throws  java.lang.SecurityException
    if a security manager exists and its
    <code>checkPropertiesAccess</code> method doesn't allow access
    to this system property.
@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see java.lang.System#getProperty"
      end

      operation 7103771 "getAvailableProcessors"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of processors available to the Java virtual machine.
This method is equivalent to the {@link Runtime#availableProcessors()}
method.
<p> This value may change during a particular invocation of
the virtual machine.

@return  the number of processors available to the virtual
         machine; never smaller than one."
      end
    end

    class 922267 "MemoryPoolMXBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The management interface for a memory pool.  A memory pool
represents the memory resource managed by the Java virtual machine
and is managed by one or more {@link MemoryManagerMXBean memory managers}.

<p> A Java virtual machine has one or more instances of the 
implementation class of this interface.  An instance 
implementing this interface is 
an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>
that can be obtained by calling
the {@link ManagementFactory#getMemoryPoolMXBeans} method or
from the {@link ManagementFactory#getPlatformMBeanServer
platform <tt>MBeanServer</tt>} method.

<p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for
a memory pool within an <tt>MBeanServer</tt> is:
<blockquote>
   {@link ManagementFactory#MEMORY_POOL_MXBEAN_DOMAIN_TYPE
   <tt>java.lang:type=MemoryPool</tt>}<tt>,name=</tt><i>pool's name</i>
</blockquote>

<h4>Memory Type</h4>
<p>The Java virtual machine has a heap for object allocation and also
maintains non-heap memory for the method area and the Java virtual 
machine execution.  The Java virtual machine can have one or more
memory pools.  Each memory pool represents a memory area
of one of the following types:
<ul>
  <li>{@link MemoryType#HEAP heap}</li> 
  <li>{@link MemoryType#NON_HEAP non-heap}</li> 
</ul>

<h4>Memory Usage Monitoring</h4>

A memory pool has the following attributes:
<ul>
  <li><a href=\"#Usage\">Memory usage</a></li>
  <li><a href=\"#PeakUsage\">Peak memory usage</a></li>
  <li><a href=\"#UsageThreshold\">Usage Threshold</a></li>
  <li><a href=\"#CollectionThreshold\">Collection Usage Threshold</a>
      (only supported by some <em>garbage-collected</em> memory pools)</li>
</ul>

<h4><a name=\"Usage\">1. Memory Usage</a></h4>

The {@link #getUsage} method provides an estimate
of the current usage of a memory pool.
For a garbage-collected memory pool, the amount of used memory 
includes the memory occupied by all objects in the pool 
including both <em>reachable</em> and <em>unreachable</em> objects. 

<p>In general, this method is a lightweight operation for getting
an approximate memory usage.  For some memory pools, for example, 
when objects are not packed contiguously, this method may be
an expensive operation that requires some computation to determine 
the current memory usage.  An implementation should document when
this is the case.

<h4><a name=\"PeakUsage\">2. Peak Memory Usage</a></h4>

The Java virtual machine maintains the peak memory usage of a memory
pool since the virtual machine was started or the peak was reset.
The peak memory usage is returned by the {@link #getPeakUsage} method
and reset by calling the {@link #resetPeakUsage} method.

<h4><a name=\"UsageThreshold\">3. Usage Threshold</a></h4>

Each memory pool has a manageable attribute 
called the <i>usage threshold</i> which has a default value supplied
by the Java virtual machine.  The default value is platform-dependent.
The usage threshold can be set via the
{@link #setUsageThreshold setUsageThreshold} method.
If the threshold is set to a positive value, the usage threshold crossing
checking is enabled in this memory pool. 
If the usage threshold is set to zero, usage 
threshold crossing checking on this memory pool is disabled.
The {@link MemoryPoolMXBean#isUsageThresholdSupported} method can 
be used to determine if this functionality is supported.
<p>
A Java virtual machine performs usage threshold crossing checking on a
memory pool basis at its best appropriate time, typically, 
at garbage collection time.
Each memory pool maintains a {@link #getUsageThresholdCount 
usage threshold count} that will get incremented 
every time when the Java virtual machine 
detects that the memory pool usage is crossing the threshold.
<p>
This manageable usage threshold attribute is designed for monitoring the
increasing trend of memory usage with low overhead.
Usage threshold may not be appropriate for some memory pools. 
For example, a generational garbage collector, a common garbage collection
algorithm used in many Java virtual machine implementations,
manages two or more generations segregating objects by age.
Most of the objects are allocated in 
the <em>youngest generation</em> (say a nursery memory pool).  
The nursery memory pool is designed to be filled up and 
collecting the nursery memory pool will free most of its memory space
since it is expected to contain mostly short-lived objects
and mostly are unreachable at garbage collection time.
In this case, it is more appropriate for the nursery memory pool
not to support a usage threshold.  In addition,
if the cost of an object allocation 
in one memory pool is very low (for example, just atomic pointer exchange),
the Java virtual machine would probably not support the usage threshold
for that memory pool since the overhead in comparing the usage with 
the threshold is higher than the cost of object allocation.

<p>
The memory usage of the system can be monitored using 
<a href=\"#Polling\">polling</a> or 
<a href=\"#ThresholdNotification\">threshold notification</a> mechanisms.

<ol type=\"a\">
  <li><a name=\"Polling\"><b>Polling</b></a>
      <p>
      An application can continuously monitor its memory usage
      by calling either the {@link #getUsage} method for all
      memory pools or the {@link #isUsageThresholdExceeded} method
      for those memory pools that support a usage threshold.
      Below is example code that has a thread delicated for
      task distribution and processing.  At every interval, 
      it will determine if it should receive and process new tasks based 
      on its memory usage.  If the memory usage exceeds its usage threshold,
      it will redistribute all outstanding tasks to other VMs and
      stop receiving new tasks until the memory usage returns
      below its usage threshold.

      <pre>  
      // Assume the usage threshold is supported for this pool.
      // Set the threshold to myThreshold above which no new tasks
      // should be taken.
      pool.setUsageThreshold(myThreshold);
      ....

      boolean lowMemory = false;
      while (true) {
         if (pool.isUsageThresholdExceeded()) {
             // potential low memory, so redistribute tasks to other VMs
             lowMemory = true;
             redistributeTasks();
             // stop receiving new tasks
             stopReceivingTasks();
         } else {
             if (lowMemory) {
                 // resume receiving tasks
                 lowMemory = false;
                 resumeReceivingTasks();
             } 
             // processing outstanding task
             ...
         }
         // sleep for sometime
         try {
             Thread.sleep(sometime);
         } catch (InterruptedException e) {
             ...
         }
      }
      </pre>  

<hr>
      The above example does not differentiate the case where 
      the memory usage has temporarily dropped below the usage threshold
      from the case where the memory usage remains above the threshould
      between two iterations.  The usage threshold count returned by
      the {@link #getUsageThresholdCount} method
      can be used to determine
      if the memory usage has returned below the threshold
      between two polls.
      <p>
      Below shows another example that takes some action if a 
      memory pool is under low memory and ignores the memory usage
      changes during the action processing time. 

      <pre>
      // Assume the usage threshold is supported for this pool.
      // Set the threshold to myThreshold which determines if 
      // the application will take some action under low memory condition.
      pool.setUsageThreshold(myThreshold);

      int prevCrossingCount = 0;
      while (true) {
          // A busy loop to detect when the memory usage  
          // has exceeded the threshold.
          while (!pool.isUsageThresholdExceeded() || 
                 pool.getUsageThresholdCount() == prevCrossingCount) {
              try {
                  Thread.sleep(sometime)
              } catch (InterruptException e) {
                  ....
              }
          }

          // Do some processing such as check for memory usage
          // and issue a warning
          ....

          // Gets the current threshold count. The busy loop will then
          // ignore any crossing of threshold happens during the processing.
          prevCrossingCount = pool.getUsageThresholdCount();
      }
      </pre><hr>
  </li>
  <li><a name=\"ThresholdNotification\"><b>Usage Threshold Notifications</b></a>
      <p>
      Usage threshold notification will be emitted by {@link MemoryMXBean}.
      When the Java virtual machine detects that the memory usage of
      a memory pool has reached or exceeded the usage threshold
      the virtual machine will trigger the <tt>MemoryMXBean</tt> to emit an
      {@link MemoryNotificationInfo#MEMORY_THRESHOLD_EXCEEDED
      usage threshold exceeded notification}.
      Another usage threshold exceeded notification will not be 
      generated until the usage has fallen below the threshold and 
      then exceeded it again.
      <p>
      Below is an example code implementing the same logic as the
      first example above but using the usage threshold notification 
      mechanism to detect low memory conditions instead of polling.
      In this example code, upon receiving notification, the notification
      listener notifies another thread to perform the actual action
      such as to redistribute outstanding tasks, stop receiving tasks,
      or resume receiving tasks.
      The <tt>handleNotification</tt> method should be designed to
      do a very minimal amount of work and return without delay to avoid 
      causing delay in delivering subsequent notifications.  Time-consuming
      actions should be performed by a separate thread.
      The notification listener may be invoked by multiple threads 
      concurrently; so the tasks performed by the listener
      should be properly synchronized. 

      <pre>  
      class MyListener implements javax.management.NotificationListener {
           public void handleNotification(Notification notification, Object handback)  {
               String notifType = notification.getType();
               if (notifType.equals(MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED)) {
                   // potential low memory, notify another thread
                   // to redistribute outstanding tasks to other VMs
                   // and stop receiving new tasks.
                   lowMemory = true;
                   notifyAnotherThread(lowMemory);
               }
           }
      }

      // Register MyListener with MemoryMXBean  
      MemoryMXBean mbean = ManagementFactory.getMemoryMXBean();
      NotificationEmitter emitter = (NotificationEmitter) mbean;
      MyListener listener = new MyListener();
      emitter.addNotificationListener(listener, null, null);

      // Assume this pool supports a usage threshold.
      // Set the threshold to myThreshold above which no new tasks
      // should be taken.
      pool.setUsageThreshold(myThreshold);
      
      // Usage threshold detection is enabled and notification will be 
      // handled by MyListener.  Continue for other processing.
      ....

      </pre>  
<hr>
      <p>
      There is no guarantee about when the <tt>MemoryMXBean</tt> will emit
      a threshold notification and when the notification will be delivered.
      When a notification listener is invoked, the memory usage of 
      the memory pool may have crossed the usage threshold more
      than once.
      The {@link MemoryNotificationInfo#getCount} method returns the number
      of times that the memory usage has crossed the usage threshold
      at the point in time when the notification was constructed.
      It can be compared with the current usage threshold count returned
      by the {@link #getUsageThresholdCount} method to determine if 
      such situation has occurred.
  </li>
</ol>

<h4><a name=\"CollectionThreshold\">4. Collection Usage Threshold</a></h4>

Collection usage threshold is a manageable attribute only applicable
to some garbage-collected memory pools.
After a Java virtual machine has expended effort in reclaiming memory
space by recycling unused objects in a memory pool at garbage collection
time, some number of bytes in the memory pools that are garbaged 
collected will still be in use.  The collection usage threshold 
allows a value to be set for this number of bytes such
that if the threshold is exceeded, 
a {@link MemoryNotificationInfo#MEMORY_THRESHOLD_EXCEEDED
collection usage threshold exceeded notification}
will be emitted by the {@link MemoryMXBean}. 
In addition, the {@link #getCollectionUsageThresholdCount
collection usage threshold count} will then be incremented.

<p>
The {@link MemoryPoolMXBean#isCollectionUsageThresholdSupported} method can 
be used to determine if this functionality is supported.

<p>
A Java virtual machine performs collection usage threshold checking
on a memory pool basis.  This checking is enabled if the collection
usage threshold is set to a positive value.
If the collection usage threshold is set to zero, this checking 
is disabled on this memory pool.  Default value is zero.
The Java virtual machine performs the collection usage threshold 
checking at garbage collection time.

<p>
Some garbage-collected memory pools may
choose not to support the collection usage threshold.  For example,
a memory pool is only managed by a continuous concurrent garbage
collector.  Objects can be allocated in this memory pool by some thread
while the unused objects are reclaimed by the concurrent garbage
collector simultaneously.  Unless there is a well-defined 
garbage collection time which is the best appropriate time
to check the memory usage, the collection usage threshold should not
be supported.

<p>
The collection usage threshold is designed for monitoring the memory usage 
after the Java virtual machine has expended effort in reclaiming 
memory space.  The collection usage could also be monitored 
by the polling and threshold notification mechanism 
described above for the <a href=\"#UsageThreshold\">usage threshold</a>
in a similar fashion.

@see <a href=\"../../../javax/management/package-summary.html\">
     JMX Specification.</a>
@see <a href=\"package-summary.html#examples\">
     Ways to Access MXBeans</a>

@author  Mandy Chung
@version 1.21, 03/08/06 
@since   1.5"
      operation 7099803 "getName"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name representing this memory pool.

@return the name of this memory pool."
      end

      operation 7099931 "getType"
	public return_type class_ref 922907 // MemoryType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of this memory pool.

<p>
<b>MBeanServer access</b>:<br>
The mapped type of <tt>MemoryType</tt> is <tt>String</tt>
and the value is the name of the <tt>MemoryType</tt>.

@return the type of this memory pool."
      end

      operation 7100059 "getUsage"
	public return_type class_ref 922523 // MemoryUsage
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the memory usage of this memory pool.
This method returns <tt>null</tt>
if this memory pool is not valid (i.e. no longer exists).

<p>
This method requests the Java virtual machine to make
a best-effort estimate of the current memory usage of this
memory pool. For some memory pools, this method may be an
expensive operation that requires some computation to determine
the estimate.  An implementation should document when
this is the case.

<p>This method is designed for use in monitoring system
memory usage and detecting low memory condition.

<p>
<b>MBeanServer access</b>:<br>
The mapped type of <tt>MemoryUsage</tt> is
<tt>CompositeData</tt> with attributes as specified in
{@link MemoryUsage#from MemoryUsage}.

@return a {@link MemoryUsage} object; or <tt>null</tt> if 
this pool not valid."
      end

      operation 7100187 "getPeakUsage"
	public return_type class_ref 922523 // MemoryUsage
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the peak memory usage of this memory pool since the
Java virtual machine was started or since the peak was reset.
This method returns <tt>null</tt>
if this memory pool is not valid (i.e. no longer exists).

<p>
<b>MBeanServer access</b>:<br>
The mapped type of <tt>MemoryUsage</tt> is
<tt>CompositeData</tt> with attributes as specified in
{@link MemoryUsage#from MemoryUsage}.

@return a {@link MemoryUsage} object representing the peak
memory usage; or <tt>null</tt> if this pool is not valid.
"
      end

      operation 7100315 "resetPeakUsage"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the peak memory usage statistic of this memory pool
to the current memory usage.

@throws java.lang.SecurityException if a security manager
        exists and the caller does not have
        ManagementPermission(\"control\")."
      end

      operation 7100443 "isValid"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this memory pool is valid in the Java virtual
machine.  A memory pool becomes invalid once the Java virtual
machine removes it from the memory system.

@return <tt>true</tt> if the memory pool is valid in the running 
             Java virtual machine;
        <tt>false</tt> otherwise."
      end

      operation 7100571 "getMemoryManagerNames"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of memory managers that manages this memory pool.
Each memory pool will be managed by at least one memory manager.

@return an array of <tt>String</tt> objects, each is the name of
a memory manager managing this memory pool."
      end

      operation 7100699 "getUsageThreshold"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the usage threshold value of this memory pool in bytes.
Each memory pool has a platform-dependent default threshold value.
The current usage threshold can be changed via the
{@link #setUsageThreshold setUsageThreshold} method.

@return the usage threshold value of this memory pool in bytes.

@throws UnsupportedOperationException if this memory pool
        does not support a usage threshold.

@see #isUsageThresholdSupported"
      end

      operation 7100827 "setUsageThreshold"
	public explicit_return_type "void"
	nparams 1
	  param in name "threshold" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the threshold of this memory pool to the given <tt>threshold</tt>
value if this memory pool supports the usage threshold. 
The usage threshold crossing checking is enabled in this memory pool 
if the threshold is set to a positive value.
The usage threshold crossing checking is disabled
if it is set to zero. 

@param threshold the new threshold value in bytes. Must be non-negative.

@throws IllegalArgumentException if <tt>threshold</tt> is negative
        or greater than the maximum amount of memory for
        this memory pool if defined.

@throws UnsupportedOperationException if this memory pool
        does not support a usage threshold.

@throws java.lang.SecurityException if a security manager
        exists and the caller does not have
        ManagementPermission(\"control\").

@see #isUsageThresholdSupported
@see <a href=\"#UsageThreshold\">Usage threshold</a>"
      end

      operation 7100955 "isUsageThresholdExceeded"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the memory usage of this memory pool
reaches or exceeds its usage threshold value.

@return <tt>true</tt> if the memory usage of
this memory pool reaches or exceeds the threshold value;
<tt>false</tt> otherwise.

@throws UnsupportedOperationException if this memory pool
        does not support a usage threshold."
      end

      operation 7101083 "getUsageThresholdCount"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of times that the memory usage has crossed
the usage threshold.

@return the number of times that the memory usage 
has crossed its usage threshold value.

@throws UnsupportedOperationException if this memory pool
does not support a usage threshold."
      end

      operation 7101211 "isUsageThresholdSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this memory pool supports usage threshold.

@return <tt>true</tt> if this memory pool supports usage threshold; 
<tt>false</tt> otherwise."
      end

      operation 7101339 "getCollectionUsageThreshold"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the collection usage threshold value of this memory pool 
in bytes.  The default value is zero. The collection usage 
threshold can be changed via the 
{@link #setCollectionUsageThreshold setCollectionUsageThreshold} method.

@return the collection usage threshold of this memory pool in bytes.

@throws UnsupportedOperationException if this memory pool
        does not support a collection usage threshold.

@see #isCollectionUsageThresholdSupported"
      end

      operation 7101467 "setCollectionUsageThreshold"
	public explicit_return_type "void"
	nparams 1
	  param in name "threhsold" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the collection usage threshold of this memory pool to 
the given <tt>threshold</tt> value. 
When this threshold is set to positive, the Java virtual machine
will check the memory usage at its best appropriate time after it has 
expended effort in recycling unused objects in this memory pool.
<p>
The collection usage threshold crossing checking is enabled 
in this memory pool if the threshold is set to a positive value.
The collection usage threshold crossing checking is disabled
if it is set to zero. 

@param threhsold the new collection usage threshold value in bytes.
             Must be non-negative.

@throws IllegalArgumentException if <tt>threshold</tt> is negative
        or greater than the maximum amount of memory for 
        this memory pool if defined.

@throws UnsupportedOperationException if this memory pool
        does not support a collection usage threshold.

@throws java.lang.SecurityException if a security manager
        exists and the caller does not have
        ManagementPermission(\"control\").

@see #isCollectionUsageThresholdSupported
@see <a href=\"#CollectionThreshold\">Collection usage threshold</a>"
      end

      operation 7101595 "isCollectionUsageThresholdExceeded"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the memory usage of this memory pool after
the most recent collection on which the Java virtual
machine has expended effort has reached or
exceeded its collection usage threshold. 
This method does not request the Java virtual
machine to perform any garbage collection other than its normal
automatic memory management.

@return <tt>true</tt> if the memory usage of this memory pool 
reaches or exceeds the collection usage threshold value
in the most recent collection;
<tt>false</tt> otherwise.

@throws UnsupportedOperationException if this memory pool
        does not support a usage threshold."
      end

      operation 7101723 "getCollectionUsageThresholdCount"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of times that the Java virtual machine
has detected that the memory usage has reached or 
exceeded the collection usage threshold.

@return the number of times that the memory 
usage has reached or exceeded the collection usage threshold.

@throws UnsupportedOperationException if this memory pool
        does not support a collection usage threshold.

@see #isCollectionUsageThresholdSupported"
      end

      operation 7101851 "getCollectionUsage"
	public return_type class_ref 922523 // MemoryUsage
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the memory usage after the Java virtual machine  
most recently expended effort in recycling unused objects
in this memory pool.
This method does not request the Java virtual
machine to perform any garbage collection other than its normal
automatic memory management.
This method returns <tt>null</tt> if the Java virtual
machine does not support this method.

<p>
<b>MBeanServer access</b>:<br>
The mapped type of <tt>MemoryUsage</tt> is
<tt>CompositeData</tt> with attributes as specified in
{@link MemoryUsage#from MemoryUsage}.

@return a {@link MemoryUsage} representing the memory usage of
this memory pool after the Java virtual machine most recently 
expended effort in recycling unused objects;
<tt>null</tt> if this method is not supported."
      end

      operation 7101979 "isCollectionUsageThresholdSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this memory pool supports a collection usage threshold.

@return <tt>true</tt> if this memory pool supports the
collection usage threshold; <tt>false</tt> otherwise."
      end
    end

    class 922395 "ManagementPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The permission which the SecurityManager will check when code
that is running with a SecurityManager calls methods defined
in the management interface for the Java platform.
<P>
The following table
provides a summary description of what the permission allows,
and discusses the risks of granting code the permission.
<P>

<table border=1 cellpadding=5 summary=\"Table shows permission target name, wh
at the permission allows, and associated risks\">
<tr>
<th>Permission Target Name</th>
<th>What the Permission Allows</th>
<th>Risks of Allowing this Permission</th>
</tr>

<tr>
  <td>control</td>
  <td>Ability to control the runtime characteristics of the Java virtual
      machine, for example, setting the -verbose:gc and -verbose:class flag,
      setting the threshold of a memory pool, and enabling and disabling
      the thread contention monitoring support. 
  </td>
  <td>This allows an attacker to control the runtime characteristics
      of the Java virtual machine and cause the system to misbehave.
  </td>
</tr>
<tr>
  <td>monitor</td>
  <td>Ability to retrieve runtime information about 
      the Java virtual machine such as thread
      stack trace, a list of all loaded class names, and input arguments
      to the Java virtual machine.</td>
  <td>This allows malicious code to monitor runtime information and
      uncover vulnerabilities.</td>
</tr>

</table>

<p>
Programmers do not normally create ManagementPermission objects directly.
Instead they are created by the security policy code based on reading
the security policy file.

@author  Mandy Chung
@version 1.3, 12/19/03 
@since   1.5

@see java.security.BasicPermission
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager
"
      classrelation 1795483 // <generalisation>
	relation 1795483 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1795483 // <generalisation>
	  b parent class_ref 285083 // BasicPermission
      end

      operation 7098011 "ManagementPermission"
	public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ManagementPermission with the specified name.

@param name Permission name. Must be either \"monitor\" or \"control\".
@throws IllegalArgumentException if the name argument is invalid."
      end

      operation 7098139 "ManagementPermission"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "actions" explicit_type "String"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ManagementPermission object.

@param name Permission name. Must be either \"monitor\" or \"control\".
@param actions Must be either null or the empty string.
@throws IllegalArgumentException if arguments are invalid."
      end
    end

    class 922523 "MemoryUsage"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <tt>MemoryUsage</tt> object represents a snapshot of memory usage.
Instances of the <tt>MemoryUsage</tt> class are usually constructed
by methods that are used to obtain memory usage
information about individual memory pool of the Java virtual machine or
the heap or non-heap memory of the Java virtual machine as a whole.

<p> A <tt>MemoryUsage</tt> object contains four values:
<ul>
<table>
<tr>
<td valign=top> <tt>init</tt> </td>
<td valign=top> represents the initial amount of memory (in bytes) that
     the Java virtual machine requests from the operating system
     for memory management during startup.  The Java virtual machine
     may request additional memory from the operating system and
     may also release memory to the system over time.
     The value of <tt>init</tt> may be undefined.
</td>
</tr>
<tr>
<td valign=top> <tt>used</tt> </td>
<td valign=top> represents the amount of memory currently used (in bytes).
</td>
</tr>
<tr>
<td valign=top> <tt>committed</tt> </td>
<td valign=top> represents the amount of memory (in bytes) that is
     guaranteed to be available for use by the Java virtual machine.
     The amount of committed memory may change over time (increase
     or decrease).  The Java virtual machine may release memory to
     the system and <tt>committed</tt> could be less than <tt>init</tt>.
     <tt>committed</tt> will always be greater than
     or equal to <tt>used</tt>.
</td>
</tr>
<tr>
<td valign=top> <tt>max</tt> </td>
<td valign=top> represents the maximum amount of memory (in bytes)
     that can be used for memory management. Its value may be undefined.
     The maximum amount of memory may change over time if defined.
     The amount of used and committed memory will always be less than 
     or equal to <tt>max</tt> if <tt>max</tt> is defined.
     A memory allocation may fail if it attempts to increase the
     used memory such that <tt>used &gt committed</tt> even
     if <tt>used &lt= max</tt> would still be true (for example,
     when the system is low on virtual memory).
</td>
</tr>
</table>
</ul>

Below is a picture showing an example of a memory pool:
<p>
<pre>
       +----------------------------------------------+
       +////////////////           |                  +
       +////////////////           |                  +
       +----------------------------------------------+

       |--------|
          init
       |---------------|
              used
       |---------------------------|
                 committed 
       |----------------------------------------------|
                           max 
</pre>

<h4>MXBean Mapping</h4>
<tt>MemoryUsage</tt> is mapped to a {@link CompositeData CompositeData}
with attributes as specified in the {@link #from from} method. 

@author   Mandy Chung
@version 1.16, 05/25/04
@since   1.5"
      attribute 2745883 "init"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2746011 "used"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2746139 "committed"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2746267 "max"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7102363 "MemoryUsage"
	public explicit_return_type ""
	nparams 4
	  param in name "init" explicit_type "long"
	  param in name "used" explicit_type "long"
	  param in name "committed" explicit_type "long"
	  param in name "max" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>MemoryUsage</tt> object.

@param init      the initial amount of memory in bytes that
                 the Java virtual machine allocates;
                 or <tt>-1</tt> if undefined.
@param used      the amount of used memory in bytes.
@param committed the amount of committed memory in bytes.
@param max       the maximum amount of memory in bytes that
                 can be used; or <tt>-1</tt> if undefined.

@throws IllegalArgumentException if
<ul>
<li> the value of <tt>init</tt> or <tt>max</tt> is negative
     but not <tt>-1</tt>; or</li>
<li> the value of <tt>used</tt> or <tt>committed</tt> is negative;
     or</li>
<li> <tt>used</tt> is greater than the value of <tt>committed</tt>;
     or</li>
<li> <tt>committed</tt> is greater than the value of <tt>max</tt> 
     <tt>max</tt> if defined.</li>
</ul>"
      end

      operation 7102491 "MemoryUsage"
	private explicit_return_type ""
	nparams 1
	  param inout name "cd" type class_ref 922779 // CompositeData
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>MemoryUsage</tt> object from a 
{@link CompositeData CompositeData}.  "
      end

      operation 7102619 "getInit"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the amount of memory in bytes that the Java virtual machine
initially requests from the operating system for memory management.
This method returns <tt>-1</tt> if the initial memory size is undefined.

@return the initial size of memory in bytes;
<tt>-1</tt> if undefined."
      end

      operation 7102747 "getUsed"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the amount of used memory in bytes.

@return the amount of used memory in bytes.
"
      end

      operation 7102875 "getCommitted"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the amount of memory in bytes that is committed for
the Java virtual machine to use.  This amount of memory is
guaranteed for the Java virtual machine to use. 

@return the amount of committed memory in bytes.
"
      end

      operation 7103003 "getMax"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum amount of memory in bytes that can be 
used for memory management.  This method returns <tt>-1</tt> 
if the maximum memory size is undefined.

<p> This amount of memory is not guaranteed to be available 
for memory management if it is greater than the amount of 
committed memory.  The Java virtual machine may fail to allocate 
memory even if the amount of used memory does not exceed this 
maximum size.

@return the maximum amount of memory in bytes; 
<tt>-1</tt> if undefined."
      end

      operation 7103131 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a descriptive representation of this memory usage."
      end

      operation 7103259 "from"
	class_operation public return_type class_ref 922523 // MemoryUsage
	nparams 1
	  param inout name "cd" type class_ref 922779 // CompositeData
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>MemoryUsage</tt> object represented by the
given <tt>CompositeData</tt>. The given <tt>CompositeData</tt>
must contain the following attributes:
<p>
<blockquote>
<table border>
<tr>
  <th align=left>Attribute Name</th>
  <th align=left>Type</th>
</tr>
<tr>
  <td>init</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
<tr>
  <td>used</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
<tr>
  <td>committed</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
<tr>
  <td>max</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
</table>
</blockquote>

@param cd <tt>CompositeData</tt> representing a <tt>MemoryUsage</tt>

@throws IllegalArgumentException if <tt>cd</tt> does not
  represent a <tt>MemoryUsage</tt> with the attributes described
  above.

@return a <tt>MemoryUsage</tt> object represented by <tt>cd</tt>
        if <tt>cd</tt> is not <tt>null</tt>;
        <tt>null</tt> otherwise."
      end
    end

    class 922651 "MemoryNotificationInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The information about a memory notification.

<p>
A memory notification is emitted by {@link MemoryMXBean} 
when the Java virtual machine detects that the memory usage 
of a memory pool is exceeding a threshold value. 
The notification emitted will contain the memory notification
information about the detected condition:
<ul>
  <li>The name of the memory pool.</li>
  <li>The memory usage of the memory pool when the notification 
      was constructed.</li>
  <li>The number of times that the memory usage has crossed 
      a threshold when the notification was constructed.
      For usage threshold notifications, this count will be the 
      {@link MemoryPoolMXBean#getUsageThresholdCount usage threshold
      count}.  For collection threshold notifications, 
      this count will be the
      {@link MemoryPoolMXBean#getCollectionUsageThresholdCount
      collection usage threshold count}.
      </li>
</ul>

<p>
A {@link CompositeData CompositeData} representing 
the <tt>MemoryNotificationInfo</tt> object 
is stored in the
{@link javax.management.Notification#setUserData user data} 
of a {@link javax.management.Notification notification}.
The {@link #from from} method is provided to convert from 
a <tt>CompositeData</tt> to a <tt>MemoryNotificationInfo</tt> 
object. For example:

<blockquote><pre>
     Notification notif;

     // receive the notification emitted by MemoryMXBean and set to notif
     ...
           
     String notifType = notif.getType();
     if (notifType.equals(MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED) ||
         notifType.equals(MemoryNotificationInfo.MEMORY_COLLECTION_THRESHOLD_EXCEEDED)) {
         // retrieve the memory notification information
         CompositeData cd = (CompositeData) notif.getUserData();
         MemoryNotificationInfo info = MemoryNotificationInfo.from(cd);
         ....
     }  
</pre></blockquote>

<p>
The types of notifications emitted by <tt>MemoryMXBean</tt> are:
<ul> 
  <li>A {@link #MEMORY_THRESHOLD_EXCEEDED 
      usage threshold exceeded notification}.
      <br>This notification will be emitted when
      the memory usage of a memory pool is increased and has reached 
      or exceeded its 
      <a href=\"MemoryPoolMXBean.html#UsageThreshold\"> usage threshold</a> value.
      Subsequent crossing of the usage threshold value does not cause
      further notification until the memory usage has returned
      to become less than the usage threshold value.
      <p></li>
  <li>A {@link #MEMORY_COLLECTION_THRESHOLD_EXCEEDED
      collection usage threshold exceeded notification}.
      <br>This notification will be emitted when
      the memory usage of a memory pool is greater than or equal to its
      <a href=\"MemoryPoolMXBean.html#CollectionThreshold\">
      collection usage threshold</a> after the Java virtual machine
      has expended effort in recycling unused objects in that
      memory pool.</li> 
</ul>

@author  Mandy Chung
@version 1.8, 03/08/06
@since   1.5
"
      attribute 2744859 "poolName"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1795611 // usage (<unidirectional association>)
	relation 1795611 --->
	  a role_name "usage" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1795611 // usage (<unidirectional association>)
	  b parent class_ref 922523 // MemoryUsage
      end

      attribute 2744987 "count"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2745115 "MEMORY_THRESHOLD_EXCEEDED"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  
        \"java.management.memory.threshold.exceeded\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Notification type denoting that 
the memory usage of a memory pool has
reached or exceeded its
<a href=\"MemoryPoolMXBean.html#UsageThreshold\"> usage threshold</a> value.
This notification is emitted by {@link MemoryMXBean}.
Subsequent crossing of the usage threshold value does not cause
further notification until the memory usage has returned
to become less than the usage threshold value.
The value of this notification type is 
<tt>java.management.memory.threshold.exceeded</tt>.
"
      end

      attribute 2745243 "MEMORY_COLLECTION_THRESHOLD_EXCEEDED"
	class_attribute const_attribute public explicit_type "String"
	init_value "= 
        \"java.management.memory.collection.threshold.exceeded\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Notification type denoting that 
the memory usage of a memory pool is greater than or equal to its
<a href=\"MemoryPoolMXBean.html#CollectionThreshold\">
collection usage threshold</a> after the Java virtual machine
has expended effort in recycling unused objects in that
memory pool. 
This notification is emitted by {@link MemoryMXBean}.
The value of this notification type is 
<tt>java.management.memory.collection.threshold.exceeded</tt>.
"
      end

      operation 7099035 "MemoryNotificationInfo"
	public explicit_return_type ""
	nparams 3
	  param in name "poolName" explicit_type "String"
	  param inout name "usage" type class_ref 922523 // MemoryUsage
	  param in name "count" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>MemoryNotificationInfo</tt> object.

@param poolName The name of the memory pool which triggers this notification.
@param usage Memory usage of the memory pool.
@param count The threshold crossing count."
      end

      operation 7099163 "MemoryNotificationInfo"
	package explicit_return_type ""
	nparams 1
	  param inout name "cd" type class_ref 922779 // CompositeData
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7099291 "getPoolName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the memory pool that triggers this notification.
The memory pool usage has crossed a threshold.

@return the name of the memory pool that triggers this notification."
      end

      operation 7099419 "getUsage"
	public return_type class_ref 922523 // MemoryUsage
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the memory usage of the memory pool
when this notification was constructed.

@return the memory usage of the memory pool  
when this notification was constructed."
      end

      operation 7099547 "getCount"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of times that the memory usage has crossed 
a threshold when the notification was constructed.
For usage threshold notifications, this count will be the 
{@link MemoryPoolMXBean#getUsageThresholdCount threshold
count}.  For collection threshold notifications, 
this count will be the
{@link MemoryPoolMXBean#getCollectionUsageThresholdCount
collection usage threshold count}.

@return the number of times that the memory usage has crossed 
a threshold when the notification was constructed."
      end

      operation 7099675 "from"
	class_operation public return_type class_ref 922651 // MemoryNotificationInfo
	nparams 1
	  param inout name "cd" type class_ref 922779 // CompositeData
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>MemoryNotificationInfo</tt> object represented by the
given <tt>CompositeData</tt>.
The given <tt>CompositeData</tt> must contain
the following attributes:
<blockquote>
<table border>
<tr>
  <th align=left>Attribute Name</th>
  <th align=left>Type</th>
</tr>
<tr>
  <td>poolName</td>
  <td><tt>java.lang.String</tt></td>
</tr>
<tr>
  <td>usage</td>
  <td><tt>javax.management.openmbean.CompositeData</tt></td>
</tr>
<tr>
  <td>count</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
</table>
</blockquote>

@param cd <tt>CompositeData</tt> representing a
          <tt>MemoryNotificationInfo</tt>

@throws IllegalArgumentException if <tt>cd</tt> does not
  represent a <tt>MemoryNotificationInfo</tt> object.

@return a <tt>MemoryNotificationInfo</tt> object represented 
        by <tt>cd</tt> if <tt>cd</tt> is not <tt>null</tt>;
        <tt>null</tt> otherwise."
      end
    end

    class 922907 "MemoryType"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Types of {@link MemoryPoolMXBean memory pools}.

@author  Mandy Chung
@version 1.7, 04/18/04
@since   1.5"
      attribute 2745371 "HEAP"
	public type class_ref 922907 // MemoryType
	cpp_decl ""
	java_decl "  ${@}${name}(\"Heap memory\"),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Heap memory type.
<p>
The Java virtual machine has a <i>heap</i>
that is the runtime data area from which
memory for all class instances and arrays are allocated.  "
      end

      attribute 2745499 "NON_HEAP"
	public type class_ref 922907 // MemoryType
	cpp_decl ""
	java_decl "  ${@}${name}(\"Non-heap memory\"),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Non-heap memory type.
<p>
The Java virtual machine manages memory other than the heap
(referred as <i>non-heap memory</i>).  The non-heap memory includes
the <i>method area</i> and memory required for the internal 
processing or optimization for the Java virtual machine. 
It stores per-class structures such as a runtime 
constant pool, field and method data, and the code for
methods and constructors.  "
      end

      attribute 2745627 "description"
	const_attribute private explicit_type "String"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7102107 "MemoryType"
	private explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7102235 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of this <tt>MemoryType</tt>.
@return the string representation of this <tt>MemoryType</tt>."
      end

      attribute 2745755 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  6992337162326171013L"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 923035 "ThreadInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thread information. <tt>ThreadInfo</tt> contains the information 
about a thread including:
<h4>General thread information</h4>
<ul>
  <li>Thread ID.</li>
  <li>Name of the thread.</li>
</ul>

<h4>Execution information</h4>
<ul>
  <li>Thread state.</tt>
  <li>The object upon which the thread is blocked waiting to enter 
      a synchronization block or waiting to be notified in
      a {@link Object#wait Object.wait} call.</li>
  <li>The ID of the thread that owns the object
      that the thread is blocked.</li>
  <li>Stack trace of the thread.</li>
</ul>

<h4>Synchronization statistics</h4>
<ul>
  <li>The number of times that the thread has blocked for 
      synchronization or waited for notification.</li>
  <li>The accumulated elapsed time that the thread has blocked
      for synchronization or waited for notification
      since thread contention monitoring
      was enabled. Some Java virtual machine implementation 
      may not support this.  The 
      {@link ThreadMXBean#isThreadContentionMonitoringSupported()}
      method can be used to determine if a Java virtual machine
      supports this.</li>
</ul>

<p>This thread information class is designed for use in monitoring of
the system, not for synchronization control.

<h4>MXBean Mapping</h4>
<tt>ThreadInfo</tt> is mapped to a {@link CompositeData CompositeData}
with attributes as specified in 
the {@link #from from} method.

@see ThreadMXBean#isThreadContentionMonitoringSupported

@author  Mandy Chung
@version 1.16, 04/18/04 
@since   1.5"
      attribute 2746395 "threadName"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2746523 "threadId"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2746651 "blockedTime"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2746779 "blockedCount"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2746907 "waitedTime"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2747035 "waitedCount"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2747163 "lockName"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2747291 "lockOwnerId"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2747419 "lockOwnerName"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2747547 "inNative"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2747675 "suspended"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1795739 // threadState (<unidirectional association>)
	relation 1795739 --->
	  a role_name "threadState" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1795739 // threadState (<unidirectional association>)
	  b parent class_ref 164763 // State
      end

      classrelation 1795867 // stackTrace (<unidirectional association>)
	relation 1795867 --->
	  a role_name "stackTrace" multiplicity "[]" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1795867 // stackTrace (<unidirectional association>)
	  b parent class_ref 164379 // StackTraceElement
      end

      operation 7105947 "ThreadInfo"
	private explicit_return_type ""
	nparams 9
	  param inout name "t" type class_ref 163227 // Thread
	  param in name "state" explicit_type "int"
	  param inout name "lockObj" explicit_type "Object"
	  param inout name "lockOwner" type class_ref 163227 // Thread
	  param in name "blockedCount" explicit_type "long"
	  param in name "blockedTime" explicit_type "long"
	  param in name "waitedCount" explicit_type "long"
	  param in name "waitedTime" explicit_type "long"
	  param inout name "stackTrace" type class_ref 164379 // StackTraceElement
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8}[] ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor of ThreadInfo created by the JVM

@param t             Thread 
@param state         Thread state 
@param lockObj       Object on which the thread is blocked 
                     to enter or waiting 
@param lockOwner     the thread holding the lock 
@param blockedCount  Number of times blocked to enter a lock
@param blockedTime   Approx time blocked to enter a lock
@param waitedCount   Number of times waited on a lock
@param waitedTime    Approx time waited on a lock
@param stackTrace    Thread stack trace"
      end

      operation 7106075 "ThreadInfo"
	private explicit_return_type ""
	nparams 1
	  param inout name "cd" type class_ref 922779 // CompositeData
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>ThreadInfo</tt> object from a
{@link CompositeData CompositeData}.  "
      end

      operation 7106203 "getThreadId"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ID of the thread associated with this <tt>ThreadInfo</tt>.  

@return the ID of the associated thread."
      end

      operation 7106331 "getThreadName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the thread associated with this <tt>ThreadInfo</tt>.

@return the name of the associated thread."
      end

      operation 7106459 "getThreadState"
	public return_type class_ref 164763 // State
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the state of the thread associated with this <tt>ThreadInfo</tt>.

@return <tt>Thread.State</tt> of the associated thread."
      end

      operation 7106587 "getBlockedTime"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the approximate accumulated elapsed time (in milliseconds)
that the thread associated with this <tt>ThreadInfo</tt> 
has blocked to enter or reenter a monitor
since thread contention monitoring is enabled.
I.e. the total accumulated time the thread has been in the
{@link java.lang.Thread.State#BLOCKED BLOCKED} state since thread
contention monitoring was last enabled.
This method returns <tt>-1</tt> if thread contention monitoring
is disabled.

<p>The Java virtual machine may measure the time with a high
resolution timer.  This statistic is reset when
the thread contention monitoring is reenabled.

@return the approximate accumulated elapsed time in milliseconds
that a thread entered the <tt>BLOCKED</tt> state;
<tt>-1</tt> if thread contention monitoring is disabled.

@throws java.lang.UnsupportedOperationException if the Java 
virtual machine does not support this operation.

@see ThreadMXBean#isThreadContentionMonitoringSupported
@see ThreadMXBean#setThreadContentionMonitoringEnabled"
      end

      operation 7106715 "getBlockedCount"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the total number of times that 
the thread associated with this <tt>ThreadInfo</tt> 
blocked to enter or reenter a monitor. 
I.e. the number of times a thread has been in the
{@link java.lang.Thread.State#BLOCKED BLOCKED} state. 

@return the total number of times that the thread 
entered the <tt>BLOCKED</tt> state."
      end

      operation 7106843 "getWaitedTime"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the approximate accumulated elapsed time (in milliseconds)
that the thread associated with this <tt>ThreadInfo</tt> 
has waited for notification
since thread contention monitoring is enabled.
I.e. the total accumulated time the thread has been in the
{@link java.lang.Thread.State#WAITING WAITING}
or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state
since thread contention monitoring is enabled.
This method returns <tt>-1</tt> if thread contention monitoring
is disabled.

<p>The Java virtual machine may measure the time with a high
resolution timer.  This statistic is reset when
the thread contention monitoring is reenabled.

@return the approximate accumulated elapsed time in milliseconds 
that a thread has been in the <tt>WAITING</tt> or
<tt>TIMED_WAITING</tt> state;
<tt>-1</tt> if thread contention monitoring is disabled.

@throws java.lang.UnsupportedOperationException if the Java 
virtual machine does not support this operation.

@see ThreadMXBean#isThreadContentionMonitoringSupported
@see ThreadMXBean#setThreadContentionMonitoringEnabled"
      end

      operation 7106971 "getWaitedCount"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the total number of times that 
the thread associated with this <tt>ThreadInfo</tt> 
waited for notification.
I.e. the number of times that a thread has been
in the {@link java.lang.Thread.State#WAITING WAITING}
or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state.

@return the total number of times that the thread 
was in the <tt>WAITING</tt> or <tt>TIMED_WAITING</tt> state."
      end

      operation 7107099 "getLockName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the monitor lock that
the thread associated with this <tt>ThreadInfo</tt> 
is blocked to enter or waiting to be notified through 
the {@link Object#wait Object.wait} method.  
The returned string representation of a monitor lock consists of
the name of the class of which the object is an instance, the
at-sign character `@', and the unsigned hexadecimal representation 
of the <em>identity</em> hash code of the object. 
The returned string may not 
be unique depending on the implementation of the 
{@link System#identityHashCode} method.
This method returns a string equals to the value of: 
<blockquote>
<pre>
lock.getClass().getName() + '@' + Integer.toHexString(System.identityHashCode(lock))
</pre></blockquote>
where <tt>lock</tt> is the monitor lock object.

<p>If the thread is not blocking to enter on any monitor object,
or is not waiting on a monitor object for notification in a 
<tt>Object.wait</tt> call, 
this method returns <tt>null</tt>. 

@return the string representation of the monitor lock that 
the thread is blocking to enter or waiting to be notified through  
the <tt>Object.wait</tt> method if any;
<tt>null</tt> otherwise.
"
      end

      operation 7107227 "getLockOwnerId"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ID of the thread which holds the monitor lock of an object 
on which the thread associated with this <tt>ThreadInfo</tt>
is blocking.
This method will return <tt>-1</tt> if this thread is not blocked
or waiting on any monitor, or if the monitor lock is not held
by any thread.

@return the thread ID of the owner thread of the monitor lock of the
object this thread is blocking on;
<tt>-1</tt> if this thread is not blocked
or waiting on any monitor, or if the monitor lock is not held
by any thread.

@see #getLockName"
      end

      operation 7107355 "getLockOwnerName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the thread which holds the monitor lock of an object 
on which the thread associated with this <tt>ThreadInfo</tt>
is blocking.
This method will return <tt>null</tt> if this thread is not blocked
or waiting on any monitor, or if the monitor lock is not held
by any thread.

@return the name of the thread that holds the monitor lock of the object
this thread is blocking on;
<tt>null</tt> if this thread is not blocked
or waiting on any monitor, or if the monitor lock is not held
by any thread.

@see #getLockName"
      end

      operation 7107483 "getStackTrace"
	public return_type class_ref 164379 // StackTraceElement
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the stack trace of the thread 
associated with this <tt>ThreadInfo</tt>.
If no stack trace was requested for this thread info, this method
will return a zero-length array.
If the returned array is of non-zero length then the first element of
the array represents the top of the stack, which is the most recent
method invocation in the sequence.  The last element of the array
represents the bottom of the stack, which is the least recent method
invocation in the sequence.

<p>Some Java virtual machines may, under some circumstances, omit one
or more stack frames from the stack trace.  In the extreme case,
a virtual machine that has no stack trace information concerning
the thread associated with this <tt>ThreadInfo</tt> 
is permitted to return a zero-length array from this method.

@return an array of <tt>StackTraceElement</tt> objects of the thread."
      end

      operation 7107611 "isSuspended"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the thread associated with this <tt>ThreadInfo</tt>
is suspended.  This method returns <tt>true</tt> if
{@link Thread#suspend} has been called.

@return <tt>true</tt> if the thread is suspended;
        <tt>false</tt> otherwise."
      end

      operation 7107739 "isInNative"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the thread associated with this <tt>ThreadInfo</tt>
is executing native code via the Java Native Interface (JNI).
The JNI native code does not include
the virtual machine support code or the compiled native
code generated by the virtual machine.

@return <tt>true</tt> if the thread is executing native code;
        <tt>false</tt> otherwise."
      end

      operation 7107867 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this thread info.

@return a string representation of this thread info."
      end

      operation 7107995 "from"
	class_operation public return_type class_ref 923035 // ThreadInfo
	nparams 1
	  param inout name "cd" type class_ref 922779 // CompositeData
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>ThreadInfo</tt> object represented by the
given <tt>CompositeData</tt>.
The given <tt>CompositeData</tt> must contain the following attributes:
<blockquote>
<table border>
<tr>
  <th align=left>Attribute Name</th>
  <th align=left>Type</th>
</tr>
<tr>
  <td>threadId</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
<tr>
  <td>threadName</td>
  <td><tt>java.lang.String</tt></td>
</tr>
<tr>
  <td>threadState</td>
  <td><tt>java.lang.String</tt></td>
</tr>
<tr>
  <td>suspended</td>
  <td><tt>java.lang.Boolean</tt></td>
</tr>
<tr>
  <td>inNative</td>
  <td><tt>java.lang.Boolean</tt></td>
</tr>
<tr>
  <td>blockedCount</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
<tr>
  <td>blockedTime</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
<tr>
  <td>waitedCount</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
<tr>
  <td>waitedTime</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
<tr>
  <td>lockName</td>
  <td><tt>java.lang.String</tt></td>
</tr>
<tr>
  <td>lockOwnerId</td>
  <td><tt>java.lang.Long</tt></td>
</tr>
<tr>
  <td>lockOwnerName</td>
  <td><tt>java.lang.String</tt></td>
</tr>
<tr>
  <td>stackTrace</td>
  <td><tt>javax.management.openmbean.CompositeData[]</tt>
      <p>
      Each element is a <tt>CompositeData</tt> representing
      StackTraceElement containing the following attributes:
      <blockquote>
      <table cellspacing=1 cellpadding=0>
      <tr>
        <th align=left>Attribute Name</th>
        <th align=left>Type</th>
      </tr>
      <tr>
        <td>className</td>
        <td><tt>java.lang.String</tt></td>
      </tr>
      <tr>
        <td>methodName</td>
        <td><tt>java.lang.String</tt></td>
      </tr>
      <tr>
        <td>fileName</td>
        <td><tt>java.lang.String</tt></td>
      </tr>
      <tr>
        <td>lineNumber</td>
        <td><tt>java.lang.Integer</tt></td>
      </tr>
      <tr>
        <td>nativeMethod</td>
        <td><tt>java.lang.Boolean</tt></td>
      </tr>
      </table>
      </blockquote>
  </td>
</tr>
</table>
</blockquote>

@param cd <tt>CompositeData</tt> representing a <tt>ThreadInfo</tt>

@throws IllegalArgumentException if <tt>cd</tt> does not
  represent a <tt>ThreadInfo</tt> with the attributes described
  above.

@return a <tt>ThreadInfo</tt> object represented
        by <tt>cd</tt> if <tt>cd</tt> is not <tt>null</tt>;
        <tt>null</tt> otherwise."
      end

      classrelation 1795995 // NO_STACK_TRACE (<unidirectional association>)
	relation 1795995 --->
	  a role_name "NO_STACK_TRACE" multiplicity "[]" init_value "= 
        new StackTraceElement[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1795995 // NO_STACK_TRACE (<unidirectional association>)
	  b parent class_ref 164379 // StackTraceElement
      end
    end
  end

  deploymentview 166811 "management"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 691739 "ClassLoadingMXBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 921115 // ClassLoadingMXBean
      end
      comment "@(#)ClassLoadingMXBean.java	1.11 04/04/20

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 691867 "CompilationMXBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 921243 // CompilationMXBean
      end
      comment "@(#)CompilationMXBean.java	1.10 04/04/20

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 691995 "MemoryManagerMXBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 921499 // MemoryManagerMXBean
      end
      comment "@(#)MemoryManagerMXBean.java	1.10 04/04/20

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 692123 "GarbageCollectorMXBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 921371 // GarbageCollectorMXBean
      end
      comment "@(#)GarbageCollectorMXBean.java	1.9 04/04/20

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 692251 "ManagementFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.NotificationEmitter;
import javax.management.MBeanServer;
import javax.management.MBeanServerFactory;
import javax.management.MBeanServerConnection;
import javax.management.MBeanServerPermission;
import javax.management.ObjectName;
import javax.management.InstanceNotFoundException;
import javax.management.MalformedObjectNameException;
import javax.management.openmbean.CompositeData;
import javax.management.openmbean.CompositeType;
import javax.management.openmbean.TabularData;
import java.util.List;
import java.lang.reflect.Proxy;
import java.lang.reflect.InvocationHandler;
import java.security.AccessController;
import java.security.Permission;
import java.security.PrivilegedAction;
import sun.management.PlatformMXBeanInvocationHandler;
${definition}"
      associated_classes
	class_ref 921627 // ManagementFactory
      end
      comment "@(#)ManagementFactory.java	1.19 04/05/17

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 692379 "ManagementPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 922395 // ManagementPermission
      end
      comment "@(#)ManagementPermission.java	1.3 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 692507 "MemoryMXBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.openmbean.CompositeData;
${definition}"
      associated_classes
	class_ref 921755 // MemoryMXBean
      end
      comment "@(#)MemoryMXBean.java	1.16 06/03/08

Copyright 2006 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 692635 "MemoryNotificationInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.openmbean.CompositeData;
import sun.management.MemoryNotifInfoCompositeData;
${definition}"
      associated_classes
	class_ref 922651 // MemoryNotificationInfo
      end
      comment "@(#)MemoryNotificationInfo.java	1.8 06/03/08

Copyright 2006 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 692763 "MemoryPoolMXBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 922267 // MemoryPoolMXBean
      end
      comment "@(#)MemoryPoolMXBean.java	1.21 06/03/08

Copyright 2006 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 692891 "MemoryType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 922907 // MemoryType
      end
      comment "@(#)MemoryType.java	1.7 04/04/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 693019 "MemoryUsage"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.openmbean.CompositeData;
import sun.management.MemoryUsageCompositeData;
${definition}"
      associated_classes
	class_ref 922523 // MemoryUsage
      end
      comment "@(#)MemoryUsage.java	1.16 04/05/25

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 693147 "OperatingSystemMXBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 922139 // OperatingSystemMXBean
      end
      comment "@(#)OperatingSystemMXBean.java	1.9 04/04/20

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 693275 "RuntimeMXBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 922011 // RuntimeMXBean
      end
      comment "@(#)RuntimeMXBean.java	1.13 04/04/20

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 693403 "ThreadInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.openmbean.CompositeData;
import sun.management.ThreadInfoCompositeData;
${definition}"
      associated_classes
	class_ref 923035 // ThreadInfo
      end
      comment "@(#)ThreadInfo.java	1.16 04/04/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 693531 "ThreadMXBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 921883 // ThreadMXBean
      end
      comment "@(#)ThreadMXBean.java	1.14 04/04/29 

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
