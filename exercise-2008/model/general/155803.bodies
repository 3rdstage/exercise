class RegularEnumSet
!!!338587.java!!!	RegularEnumSet(inout elementType : Class<E>, inout universe : Enum)
        super(elementType, universe);
!!!338715.java!!!	addRange(inout from : E, inout to : E) : void
        elements = (-1L >>>  (from.ordinal() - to.ordinal() - 1)) << from.ordinal();
!!!338843.java!!!	addAll() : void
        if (universe.length != 0)
            elements = -1L >>> -universe.length;
!!!338971.java!!!	complement() : void
        if (universe.length != 0) {
            elements = ~elements;
            elements &= -1L >>> -universe.length;  // Mask unused bits
        }
!!!339099.java!!!	iterator() : Iterator
        return new EnumSetIterator<E>();
!!!339739.java!!!	size() : int
        return Long.bitCount(elements);
!!!339867.java!!!	isEmpty() : boolean
        return elements == 0;
!!!339995.java!!!	contains(inout e : Object) : boolean
        if (e == null)
            return false;
        Class eClass = e.getClass();
        if (eClass != elementType && eClass.getSuperclass() != elementType)
            return false;

        return (elements & (1L << ((Enum)e).ordinal())) != 0;
!!!340123.java!!!	add(inout e : E) : boolean
        typeCheck(e);

        long oldElements = elements;
        elements |= (1L << ((Enum)e).ordinal());
        return elements != oldElements;
!!!340251.java!!!	remove(inout e : Object) : boolean
        if (e == null)
            return false;
        Class eClass = e.getClass();
        if (eClass != elementType && eClass.getSuperclass() != elementType)
            return false;

        long oldElements = elements;
        elements &= ~(1L << ((Enum)e).ordinal());
        return elements != oldElements;
!!!340379.java!!!	containsAll(inout c : Collection) : boolean
        if (!(c instanceof RegularEnumSet))
            return super.containsAll(c);

        RegularEnumSet es = (RegularEnumSet)c;
        if (es.elementType != elementType)
            return es.isEmpty();

        return (es.elements & ~elements) == 0;
!!!340507.java!!!	addAll(inout c : Collection) : boolean
        if (!(c instanceof RegularEnumSet))
            return super.addAll(c);

        RegularEnumSet es = (RegularEnumSet)c;
        if (es.elementType != elementType) {
            if (es.isEmpty())
                return false;
            else
                throw new ClassCastException(
                    es.elementType + " != " + elementType);
        }

        long oldElements = elements;
        elements |= es.elements;
        return elements != oldElements;
!!!340635.java!!!	removeAll(inout c : Collection) : boolean
        if (!(c instanceof RegularEnumSet))
            return super.removeAll(c);

        RegularEnumSet es = (RegularEnumSet)c;
        if (es.elementType != elementType)
            return false;

        long oldElements = elements;
        elements &= ~es.elements;
        return elements != oldElements;
!!!340763.java!!!	retainAll(inout c : Collection) : boolean
        if (!(c instanceof RegularEnumSet))
            return super.retainAll(c);

        RegularEnumSet es = (RegularEnumSet)c;
        if (es.elementType != elementType) {
            elements = 0;
            return true;
        }

        long oldElements = elements;
        elements &= es.elements;
        return elements != oldElements;
!!!340891.java!!!	clear() : void
        elements = 0;
!!!341019.java!!!	equals(inout o : Object) : boolean
        if (!(o instanceof RegularEnumSet))
            return super.equals(o);

        RegularEnumSet es = (RegularEnumSet)o;
        if (es.elementType != elementType)
            return elements == 0 && es.elements == 0;
        return es.elements == elements;
