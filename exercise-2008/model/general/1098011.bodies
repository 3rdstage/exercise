class SerialClob
!!!8811931.java!!!	SerialClob(in ch : char)
                        
        // %%% JMB. Agreed. Add code here to throw a SQLException if no 
        // support is available for locatorsUpdateCopy=false
        // Serializing locators is not supported.
        
        len = ch.length;        
        buf = new char[(int)len];                
        for (int i = 0; i < len ; i++){
           buf[i] = ch[i];
        }                                
        origLen = len;
!!!8812059.java!!!	SerialClob(inout clob : Clob)
         
        
        if (clob == null) {
            throw new SQLException("Cannot instantiate a SerialClob " +
                "object with a null Clob object");
        }                            
        len = clob.length(); 
        this.clob = clob;
        buf = new char[(int)len];
        int read = 0;
        int offset = 0;
        
        BufferedReader reader;
        
        if (clob.getCharacterStream() == null ||  clob.getAsciiStream() == null) {
            throw new SQLException("Invalid Clob object. Calls to getCharacterStream " +
                "or getAsciiStream return null which cannot be serialized.");
        }
        
        try {
	    reader = new BufferedReader(clob.getCharacterStream());
            
            do {
                read = reader.read(buf, offset, (int)(len - offset));
                offset += read;
            } while (read > 0);        
            
        } catch (java.io.IOException ex) {
            throw new SerialException("SerialClob: " + ex.getMessage());
        }
                
        origLen = len;
!!!8812187.java!!!	length() : long
        return len;
!!!8812315.java!!!	getCharacterStream() : Reader
        return (java.io.Reader) new CharArrayReader(buf);
!!!8812443.java!!!	getAsciiStream() : InputStream
       if (this.clob != null) {
             return this.clob.getAsciiStream();
         } else {
             throw new SerialException("Unsupported operation. SerialClob cannot " +
                "return a the CLOB value as an ascii stream, unless instantiated " +
                "with a fully implemented Clob object.");
         }       
!!!8812571.java!!!	getSubString(in pos : long, in length : int) : String
        
       
        if (pos < 1 || pos > this.length()) {
            throw new SerialException("Invalid position in BLOB object set");
        }
        
        if ((pos-1) + length > this.length()) {
            throw new SerialException("Invalid position and substring length");
        }
        
        try {
            return new String(buf, (int)pos - 1, length);
            
        } catch (StringIndexOutOfBoundsException e) {
            throw new SerialException("StringIndexOutOfBoundsException: " +
                e.getMessage());
        }
            
!!!8812699.java!!!	position(in searchStr : String, in start : long) : long
              
        if (start < 1 || start > len) {
            return -1;
        }                 
            
        char pattern[] = searchStr.toCharArray();

        int pos = (int)start-1;
        int i = 0;        
        long patlen = pattern.length;                
        
        while (pos < len) {     
            if (pattern[i] == buf[pos]) {                
                if (i + 1 == patlen) {
                    return (pos + 1) - (patlen - 1);
                }               
                i++; pos++; // increment pos, and i

            } else if (pattern[i] != buf[pos]) {
                pos++; // increment pos only
            }                                    
        }        
        return -1; // not found            
!!!8812827.java!!!	position(inout searchStr : Clob, in start : long) : long
            
        char cPattern[] = null;
        try {
            java.io.Reader r = searchStr.getCharacterStream();         
            cPattern = new char[(int)searchStr.length()];
            r.read(cPattern);
        } catch (IOException e) {
            throw new SerialException("Error streaming Clob search data");
        }
        return position(new String(cPattern), start);   
!!!8812955.java!!!	setString(in pos : long, in str : String) : int
        
        return (setString(pos, str, 0, str.length()));
!!!8813083.java!!!	setString(in pos : long, in str : String, in offset : int, in length : int) : int
        
        String temp = str.substring(offset);
        char cPattern[] = temp.toCharArray(); 
        
        if (offset < 0 || offset > str.length()) {
            throw new SerialException("Invalid offset in byte array set");
        }            
        
        if (pos < 1 || pos > this.length()) {
            throw new SerialException("Invalid position in BLOB object set");
        }
                    
        if ((long)(length) > origLen) {
	    throw new SerialException("Buffer is not sufficient to hold the value");
	}    
        
        if ((length + offset) > str.length()) {  
            // need check to ensure length + offset !> bytes.length
            throw new SerialException("Invalid OffSet. Cannot have combined offset " +
                " and length that is greater that the Blob buffer");            
        }                                       
        
        int i = 0;
        pos--;  //values in the array are at position one less
        while ( i < length || (offset + i +1) < (str.length() - offset ) ) {
            this.buf[(int)pos + i ] = cPattern[offset + i ]; 
            i++;
        }
        return i;                
!!!8813211.java!!!	setAsciiStream(in pos : long) : OutputStream
     
         if (this.clob.setAsciiStream(pos) != null) {
             return this.clob.setAsciiStream(pos);
         } else {                  
             throw new SerialException("Unsupported operation. SerialClob cannot " +
                "return a writable ascii stream\n unless instantiated with a Clob object " +
                "that has a setAsciiStream() implementation");
         }         
!!!8813339.java!!!	setCharacterStream(in pos : long) : Writer
 
        if (this.clob.setCharacterStream(pos) != null) {
            return this.clob.setCharacterStream(pos);
        } else {
            throw new SerialException("Unsupported operation. SerialClob cannot " +
                "return a writable character stream\n unless instantiated with a Clob object " +
                "that has a setCharacterStream implementation");
        }
!!!8813467.java!!!	truncate(in length : long) : void
        
         if (length > len) {
            throw new SerialException
               ("Length more than what can be truncated");
         } else {      
              len = length;
              // re-size the buffer 
              
              if (len == 0) {
                  buf = new char[] {};
              } else {
                buf = (this.getSubString(1, (int)len)).toCharArray();
              }
              
         }  
