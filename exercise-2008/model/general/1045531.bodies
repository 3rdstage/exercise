class RMIServerImpl
!!!8436635.java!!!	RMIServerImpl(inout env : Map)
        this.env = (env == null) ? Collections.EMPTY_MAP : env;
!!!8436763.java!!!	setRMIConnectorServer(inout connServer : RMIConnectorServer) : void
	this.connServer = connServer;
!!!8437147.java!!!	setDefaultClassLoader(inout cl : ClassLoader) : void
        this.cl = cl;
!!!8437275.java!!!	getDefaultClassLoader() : ClassLoader
        return cl;
!!!8437403.java!!!	setMBeanServer(inout mbs : MBeanServer) : void
        this.mbeanServer = mbs;
!!!8437531.java!!!	getMBeanServer() : MBeanServer
        return mbeanServer;
!!!8437659.java!!!	getVersion() : String
        // Expected format is: "protocol-version implementation-name"
        try {
            return "1.0 java_runtime_" +
                    System.getProperty("java.runtime.version");
        } catch (SecurityException e) {
            return "1.0 ";
        }
!!!8437787.java!!!	newClient(inout credentials : Object) : RMIConnection
        return doNewClient(credentials);
!!!8437915.java!!!	doNewClient(inout credentials : Object) : RMIConnection
	final boolean tracing = logger.traceOn();

	if (tracing) logger.trace("newClient","making new client");

	if (getMBeanServer() == null)
	    throw new IllegalStateException("Not attached to an MBean server");

        Subject subject = null;
        JMXAuthenticator authenticator =
            (JMXAuthenticator) env.get(JMXConnectorServer.AUTHENTICATOR);
	if (authenticator == null) {
	    /*
	     * Create the JAAS-based authenticator only if authentication
	     * has been enabled
	     */
	    if (env.get("jmx.remote.x.password.file") != null ||
		env.get("jmx.remote.x.login.config") != null) {
		authenticator = new JMXPluggableAuthenticator(env);
	    }
	}
        if (authenticator != null) {
	    if (tracing) logger.trace("newClient","got authenticator: " +
			       authenticator.getClass().getName());
	    try {
		subject = authenticator.authenticate(credentials);
	    } catch (SecurityException e) {
		logger.trace("newClient", "Authentication failed: " + e);
		throw e;
	    }
        }

	if (tracing) {
	    if (subject != null) 
		logger.trace("newClient","subject is not null");
	    else logger.trace("newClient","no subject");
	}

	final String connectionId = makeConnectionId(getProtocol(), subject);

	if (tracing) 
	    logger.trace("newClient","making new connection: " + connectionId);

        RMIConnection client = makeClient(connectionId, subject);

	connServer.connectionOpened(connectionId, "Connection opened", null);

        dropDeadReferences();
        WeakReference wr = new WeakReference(client);
        synchronized (clientList) {
            clientList.add(wr);
        }

	if (tracing) 
	    logger.trace("newClient","new connection done: " + connectionId );

        return client;
!!!8438427.java!!!	clientClosed(inout client : RMIConnection) : void
	final boolean debug = logger.debugOn();

	if (debug) logger.trace("clientClosed","client="+client);

	if (client == null)
	    throw new NullPointerException("Null client");

        synchronized (clientList) {
            dropDeadReferences();
            for (Iterator it = clientList.iterator(); it.hasNext(); ) {
                WeakReference wr = (WeakReference) it.next();
                if (wr.get() == client) {
                    it.remove();
                    break;
                }
            }
            /* It is not a bug for this loop not to find the client.  In
               our close() method, we remove a client from the list before
               calling its close() method.  */
        }

	if (debug) logger.trace("clientClosed", "closing client.");
        closeClient(client);

	if (debug) logger.trace("clientClosed", "sending notif");
	connServer.connectionClosed(client.getConnectionId(),
				    "Client connection closed", null);

	if (debug) logger.trace("clientClosed","done");
!!!8438555.java!!!	close() : void
	final boolean tracing = logger.traceOn();
	final boolean debug   = logger.debugOn();
	
	if (tracing) logger.trace("close","closing");

        IOException ioException = null;
        try {
	    if (debug)   logger.debug("close","closing Server");
            closeServer();
        } catch (IOException e) {
	    if (tracing) logger.trace("close","Failed to close server: " + e);
	    if (debug)   logger.debug("close",e);
            ioException = e;
        }

	if (debug)   logger.debug("close","closing Clients");
        // Loop to close all clients
        while (true) {
            synchronized (clientList) {
		if (debug) logger.debug("close","droping dead references");
                dropDeadReferences();

		if (debug) logger.debug("close","client count: "+clientList.size());
                if (clientList.size() == 0) 
                    break;
                /* Loop until we find a non-null client.  Because we called
                   dropDeadReferences(), this will usually be the first
                   element of the list, but a garbage collection could have
                   happened in between.  */
                for (Iterator it = clientList.iterator(); it.hasNext(); ) {
                    WeakReference wr = (WeakReference) it.next();
                    RMIConnection client = (RMIConnection) wr.get();
                    it.remove();
                    if (client != null) {
                        try {
                            client.close();
                        } catch (IOException e) {
			    if (tracing) 
				logger.trace("close","Failed to close client: " + e);
			    if (debug) logger.debug("close",e);
                            if (ioException == null)
                                ioException = e;
                        }
                        break;
                    }
                }
            }
        }

	if(notifBuffer != null)
	    notifBuffer.dispose();
	
        if (ioException != null) {
	    if (tracing) logger.trace("close","close failed.");
            throw ioException;
	}

	if (tracing) logger.trace("close","closed.");
!!!8438811.java!!!	makeConnectionId(in protocol : String, inout subject : Subject) : String
        connectionIdNumber++;

	String clientHost = "";
	try {
	    clientHost = RemoteServer.getClientHost();
	} catch (ServerNotActiveException e) {
	    logger.trace("makeConnectionId", "getClientHost", e);
	}

	StringBuffer buf = new StringBuffer();
	buf.append(protocol).append(":");
	if (clientHost.length() > 0)
	    buf.append("//").append(clientHost);
	buf.append(" ");
	if (subject != null) {
	    Set principals = subject.getPrincipals();
	    String sep = "";
	    for (Iterator it = principals.iterator(); it.hasNext(); ) {
		Principal p = (Principal) it.next();
		String name = p.getName().replace(' ', '_').replace(';', ':');
		buf.append(sep).append(name);
		sep = ";";
	    }
	}
	buf.append(" ").append(connectionIdNumber);
	if (logger.traceOn()) 
	    logger.trace("newConnectionId","connectionId="+buf);
        return buf.toString();
!!!8438939.java!!!	dropDeadReferences() : void
        synchronized (clientList) {
            for (Iterator it = clientList.iterator(); it.hasNext(); ) {
                WeakReference wr = (WeakReference) it.next();
                if (wr.get() == null)
                    it.remove();
            }
        }
!!!8439067.java!!!	getNotifBuffer() : NotificationBuffer
	//Notification buffer is lazily created when the first client connects
	if(notifBuffer == null)
	    notifBuffer = 
		ArrayNotificationBuffer.getNotificationBuffer(mbeanServer,
							      env);
	return notifBuffer;
