class Info
!!!2109211.java!!!	setFunction(in function : String) : void
            this.function = function.intern();
!!!2109339.java!!!	setDetail(in detail : String) : void
            this.detail = detail.intern();
!!!2109467.java!!!	getFunction() : String
            return function;
!!!2109595.java!!!	getImage() : Image
            image = getImage(image);
            return (Image)image;
!!!2109723.java!!!	isRecolorable() : boolean
            return recolorable;
!!!2109851.java!!!	getColorizeColor() : Color
            return colorizeColor;
!!!2109979.java!!!	isBkgMask() : boolean
            return useAsBkgMask;
!!!2110107.java!!!	getImageInsets() : Insets
            return fileInsets;
!!!2110235.java!!!	getStretch() : boolean
            return stretch;
!!!2110363.java!!!	getDetail() : String
            return detail;
!!!2110491.java!!!	getComponentState() : int
            return componentState;
!!!2110619.java!!!	getShadow() : int
            return shadow;
!!!2110747.java!!!	getGapSide() : int
            return gapSide;
!!!2110875.java!!!	getGapImage() : Image
            gapImage = getImage(gapImage);
            return (Image)gapImage;
!!!2111003.java!!!	getGapInsets() : Insets
            return gapInsets;
!!!2111131.java!!!	getGapStartImage() : Image
            gapStartImage = getImage(gapStartImage);
            return (Image)gapStartImage;
!!!2111259.java!!!	getGapStartInsets() : Insets
            return gapStartInsets;
!!!2111387.java!!!	getGapEndImage() : Image
            gapEndImage = getImage(gapEndImage);
            return (Image)gapEndImage;
!!!2111515.java!!!	getGapEndInsets() : Insets
            return gapEndInsets;
!!!2111643.java!!!	getOverlayImage() : Image
            overlayImage = getImage(overlayImage);
            return (Image)overlayImage;
!!!2111771.java!!!	getOverlayInsets() : Insets
            return overlayInsets;
!!!2111899.java!!!	getOverlayStretch() : boolean
            return overlayStretch;
!!!2112027.java!!!	getOverlayRecolorable() : boolean
            return overlayRecolorable;
!!!2112155.java!!!	getOverlayColorizeColor() : Color
            return overlayColorizeColor;
!!!2112283.java!!!	getArrowDirection() : int
            return arrowDirection;
!!!2112411.java!!!	getOrientation() : int
            return orientation;
!!!2112539.java!!!	getImage(in o : Object) : Image
            if (o == null || o instanceof Image) {
                return (Image)o;
            }

            ImageIcon ii = (ImageIcon)AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    return new ImageIcon((String)o);
                }
            });

            if (ii.getIconWidth() > 0 && ii.getIconHeight() > 0) {
                return ii.getImage();
            }
            
            return null;
!!!2112667.java!!!	getMatchCount(in detail : String, in componentState : int, in shadow : int, in orientation : int, in gapSide : int, in arrowDirection : int, in parentType : String) : int
            int matchCount = 0;

            if (this.componentState != UNDEFINED) {
                if (componentState != UNDEFINED &&
                             this.componentState != componentState) {
                    return -1;
                }
                matchCount++;
            }
            if (this.shadow != UNDEFINED) {
                if (shadow != UNDEFINED && this.shadow != shadow) {
                    return -1;
                }
                matchCount++;
            }
            if (this.arrowDirection != UNDEFINED) {
                if (arrowDirection != UNDEFINED &&
                        this.arrowDirection != arrowDirection) {
                    return -1;
                }
                matchCount++;
            }
            if (this.orientation != UNDEFINED) {
                if (orientation != UNDEFINED &&
                                   this.orientation != orientation) {
                    return -1;
                }
                matchCount++;
            }
            if (this.gapSide != UNDEFINED) {
                if (gapSide != UNDEFINED && this.gapSide != gapSide) {
                    return -1;
                }
                matchCount++;
            }
            if (this.detail != null) {
                if (this.detail != detail) {
                    return -1;
                }
                matchCount++;
            }
            if (this.parentTypeList != null) {
                boolean found = false;

                String type;
                Iterator itr = parentTypeList.iterator();
                while (itr.hasNext() && !found) {
                    type = (String)itr.next();
                    // NOTE: Maybe we should compare all lowercase.
                    if (type == parentType) {
                        found = true;
                    }
                }
                if (!found) {
                    return -1;
                }
                matchCount++;
            }
            return matchCount;
!!!2112795.java!!!	matches(inout info : Info) : boolean
            return (info.function == function && info.detail == detail &&
                    info.componentState == componentState &&
                    info.shadow == shadow && info.gapSide == gapSide &&
                    info.arrowDirection == arrowDirection &&
                    info.orientation == orientation);
!!!2112923.java!!!	toString() : String
            StringBuffer buf = new StringBuffer();

            buf.append("IMAGE:\n");

            if (function != null) {
                buf.append("    function=").append(function).append('\n');
            }

            if (detail != null) {
                buf.append("    detail=").append(detail).append('\n');
            }

            if (gapSide != UNDEFINED) {
                buf.append("    gapSide=");
                buf.append(getSideName(gapSide)).append('\n');
            }

            if (orientation != UNDEFINED) {
                buf.append("    orientation=");
                buf.append(getOrientName(orientation)).append('\n');
            }

            if (componentState != UNDEFINED) {
                buf.append("    componentState=");
                buf.append(getStateName(componentState, "UNDEFINED")).append('\n');
            }

            if (shadow != UNDEFINED) {
                buf.append("    shadow=");
                buf.append(getShadowName(shadow)).append('\n');
            }

            if (arrowDirection != UNDEFINED) {
                buf.append("    arrowDirection=");
                buf.append(getArrowDirectionName(arrowDirection)).append('\n');
            }

            if (parentTypeList != null) {
                buf.append("    parent_type={");
                for (Iterator iter = parentTypeList.iterator();
                        iter.hasNext(); ) {
                    buf.append(iter.next()).append(", ");
                }
                buf.deleteCharAt(buf.length() - 1).deleteCharAt(buf.length() - 1);
                buf.append("}\n");
            }

            if (useAsBkgMask != false) {
                buf.append("    use_as_bkg_mask=").append(useAsBkgMask).append('\n');
            }

            if (image != null) {
                buf.append("    image=").append(image).append('\n');
            }

            if (fileInsets != null) {
                buf.append("    fileInsets=").append(fileInsets).append('\n');
            }

            if (stretch != false) {
                buf.append("    stretch=").append(stretch).append('\n');
            }

            if (recolorable != false) {
                buf.append("    recolorable=").append(recolorable).append('\n');
            }

            if (colorizeColor != null) {
                buf.append("    colorize_color=");
                buf.append(getColorStringWithAlpha(colorizeColor)).append('\n');
            }

            if (overlayImage != null) {
                buf.append("    overlayImage=").append(overlayImage).append('\n');
            }

            if (overlayInsets != null) {
                buf.append("    overlayInsets=").append(overlayInsets).append('\n');
            }

            if (overlayStretch != false) {
                buf.append("    overlayStretch=").append(overlayStretch).append('\n');
            }

            if (overlayRecolorable != false) {
                buf.append("    overlay_recolorable=").append(overlayRecolorable).append('\n');
            }

            if (overlayColorizeColor != null) {
                buf.append("    overlay_colorize_color=");
                buf.append(getColorStringWithAlpha(overlayColorizeColor)).append('\n');
            }

            if (gapStartImage != null) {
                buf.append("    gapStartImage=").append(gapStartImage).append('\n');
            }

            if (gapStartInsets != null) {
                buf.append("    gapStartInsets=").append(gapStartInsets).append('\n');
            }

            if (gapImage != null) {
                buf.append("    gapImage=").append(gapImage).append('\n');
            }

            if (gapInsets != null) {
                buf.append("    gapInsets=").append(gapInsets).append('\n');
            }

            if (gapEndImage != null) {
                buf.append("    gapEndImage=").append(gapEndImage).append('\n');
            }

            if (gapEndInsets != null) {
                buf.append("    gapEndInsets=").append(gapEndInsets).append('\n');
            }

            buf.deleteCharAt(buf.length() - 1);

            return buf.toString();
!!!2113051.java!!!	getSideName(in side : int) : String
            switch(side) {
                case TOP: return "TOP";
                case BOTTOM: return "BOTTOM";
                case LEFT: return "LEFT";
                case RIGHT: return "RIGHT";
                case UNDEFINED: return "UNDEFINED";
            }
            
            return "UNKNOWN";
!!!2113179.java!!!	getOrientName(in orient : int) : String
            switch(orient) {
                case HORIZONTAL: return "HORIZONTAL";
                case VERTICAL: return "VERTICAL";
                case UNDEFINED: return "UNDEFINED";
            }
            
            return "UNKNOWN";
!!!2113307.java!!!	getShadowName(in shadow : int) : String
            switch(shadow) {
                case SHADOW_IN: return "SHADOW_IN";
                case SHADOW_OUT: return "SHADOW_OUT";
                case SHADOW_ETCHED_IN: return "SHADOW_ETCHED_IN";
                case SHADOW_ETCHED_OUT: return "SHADOW_ETCHED_OUT";
                case SHADOW_NONE: return "SHADOW_NONE";
                case UNDEFINED: return "UNDEFINED";
            }
            
            return "UNKNOWN";
!!!2113435.java!!!	getArrowDirectionName(in dir : int) : String
            switch(dir) {
                case ARROW_UP: return "ARROW_UP";
                case ARROW_DOWN: return "ARROW_DOWN";
                case ARROW_LEFT: return "ARROW_LEFT";
                case ARROW_RIGHT: return "ARROW_RIGHT";
                case UNDEFINED: return "UNDEFINED";
            }

            return "UNKNOWN";
