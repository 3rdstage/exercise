class SnmpSocket
!!!3462811.java!!!	SnmpSocket(inout rspHdlr : SnmpResponseHandler, inout addr : InetAddress, in bufferSize : int)
        super();
        
        if (isTraceOn()) {
            trace("constructor", "Creating new SNMP datagram socket");
        }
    
        // TIME BOMB HERE
        _socket = new DatagramSocket(0, addr);
        _socketPort = _socket.getLocalPort();
        responseBufSize = bufferSize;
        _buffer = new byte[responseBufSize];
        _dgramHdlr = rspHdlr;
        _sockThread = new Thread(this, "SnmpSocket");
        _sockThread.start();
!!!3462939.java!!!	sendPacket(in buff : byte, in length : int, inout addr : InetAddress, in port : int) : void
        DatagramPacket dgrmpkt;
        dgrmpkt = new DatagramPacket(buff, length, addr, port);
        sendPacket(dgrmpkt);
!!!3463067.java!!!	sendPacket(inout dgrmpkt : DatagramPacket) : void
	
        try {
            if (isValid()) {
                if (isTraceOn()) {
                    trace("sendPacket", "Sending DatagramPacket. Length = " + dgrmpkt.getLength() +
                          " through socket = " + _socket.toString());
                }
                _socket.send(dgrmpkt);
            } else
                throw new IOException("Invalid state of SNMP datagram socket.");
        } catch (IOException e) {
            if (isDebugOn()) {
                debug("sendPacket", "Io error while sending");
                debug("sendPacket", e.getMessage());
            }
            throw e;
        } 
!!!3463195.java!!!	isValid() : boolean
        return _socket != null && _sockThread != null && _sockThread.isAlive();
!!!3463323.java!!!	close() : void
        
        isClosing = true;

        if (isTraceOn()) {
            trace("close", "Closing and destroying the SNMP datagram socket -> " + toString());
        }
        
        try {
            // We send an empty datagram packet to fix bug 4293791 (it's a jdk 1.1 bug)
            //
            DatagramSocket sn = new java.net.DatagramSocket(0);
            byte[] ob = new byte[1];
            DatagramPacket pk = new DatagramPacket(ob , 1, java.net.InetAddress.getLocalHost(), _socketPort);
            sn.send(pk);
            sn.close();
        } catch (Exception e) {}
                
        // First close the datagram socket.
        // This may generates an IO exception at the run method (_socket.receive).
        //
        if (_socket != null) {
            _socket.close() ;
            _socket = null ;
        }
    
        // Then stop the thread socket.
        //
        if (_sockThread != null && _sockThread.isAlive()) {
            _sockThread.interrupt();
            try {
                // Wait until the thread die.
                //
                _sockThread.join();
            } catch (InterruptedException e) {
                // Ignore...
            }
            _sockThread = null ;
        }
!!!3463451.java!!!	run() : void
        Thread.currentThread().setPriority(8);

        while (true) {
            try {
                DatagramPacket dgrmpkt = new DatagramPacket (_buffer, _buffer.length);

                if (isTraceOn()) {
                    trace("run", "[" + Thread.currentThread().toString() + "]:" + "Blocking for receiving packet");
                }

                _socket.receive(dgrmpkt);
                
                // If the corresponding session is being destroyed, stop handling received responses.
                //
                if (isClosing)
                    break;

                if (isTraceOn()) {
                    trace("run", "[" + Thread.currentThread().toString() + "]:" + "Received a packet");
                }

                if (dgrmpkt.getLength() <= 0)
                    continue;

                if (isTraceOn()) {
                    trace("run", "[" + Thread.currentThread().toString() + "]:" + "Received a packet from : " + 
                          dgrmpkt.getAddress().toString() + ", Length = " + dgrmpkt.getLength());
                }

                handleDatagram(dgrmpkt);
                
                // We are closing the snmp socket while handling the datagram.
                //
                if (isClosing)
                    break;
			
            } catch (IOException io) {
                // If the IO exception has been generated because of closing this SNMP socket,
                // (call to _socket.close while _socket is blocked for receiving packet) simply terminate closing properly.
                //
                if (isClosing) {
                    break;
                }
                if (isDebugOn()) {
                    debug("run", io.getMessage());
                    debug("run", io);
                }
            } catch (Exception e) {
                // If the exception (NullPointerException) has been generated because of closing this SNMP socket,
                // (call to _socket = null while _socket is blocked for receiving packet) simply terminate closing properly.
                //
                if (isClosing) {
                    break;
                }
                if (isDebugOn()) {
                    debug("run", "Exception in socket thread...");
                    debug("run", e);
                }
            } catch (ThreadDeath d) {
                if (isDebugOn()) {
                    debug("run", "Socket Thread DEAD..." + toString());
                    debug("run", d);
                }
                close();
                throw d;  // rethrow dead thread.
            } catch (Error err) {
                if (isDebugOn()) {
                    debug("run", err);
                }
                handleJavaError(err);
            }
        }
!!!3463579.java!!!	finalize() : void
        close();
!!!3463707.java!!!	handleJavaError(inout thr : Throwable) : void
        if (thr instanceof OutOfMemoryError) {
            if (isDebugOn()) {
                debug("handleJavaError", thr);
            }
            Thread.currentThread().yield();
            return ;
        }
        if (_socket != null) {
            _socket.close();
            _socket = null;
        }

        if (isDebugOn()) {
            debug("handleJavaError", "Global Internal error");
        }
        Thread.currentThread().yield();
!!!3463835.java!!!	handleDatagram(inout dgrmpkt : DatagramPacket) : void
        _dgramHdlr.processDatagram(dgrmpkt);
!!!3463963.java!!!	isTraceOn() : boolean
        return Trace.isSelected(Trace.LEVEL_TRACE, Trace.INFO_ADAPTOR_SNMP);
!!!3464091.java!!!	trace(in clz : String, in func : String, in info : String) : void
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_ADAPTOR_SNMP, clz, func, info);
!!!3464219.java!!!	trace(in func : String, in info : String) : void
        trace(dbgTag, func, info);
!!!3464347.java!!!	isDebugOn() : boolean
        return Trace.isSelected(Trace.LEVEL_DEBUG, Trace.INFO_ADAPTOR_SNMP);
!!!3464475.java!!!	debug(in clz : String, in func : String, in info : String) : void
        Trace.send(Trace.LEVEL_DEBUG, Trace.INFO_ADAPTOR_SNMP, clz, func, info);
!!!3464603.java!!!	debug(in clz : String, in func : String, inout exception : Throwable) : void
        Trace.send(Trace.LEVEL_DEBUG, Trace.INFO_ADAPTOR_SNMP, clz, func, exception);
!!!3464731.java!!!	debug(in func : String, in info : String) : void
        debug(dbgTag, func, info);
!!!3464859.java!!!	debug(in func : String, inout exception : Throwable) : void
        debug(dbgTag, func, exception);
