class Polygon
!!!6337691.java!!!	Polygon()
	xpoints = new int[4];
	ypoints = new int[4];
!!!6337819.java!!!	Polygon(in xpoints : int, in ypoints : int, in npoints : int)
    	// Fix 4489009: should throw IndexOutofBoundsException instead
    	// of OutofMemoryException if npoints is huge and > {x,y}points.length
    	if (npoints > xpoints.length || npoints > ypoints.length) {
    		throw new IndexOutOfBoundsException("npoints > xpoints.length || npoints > ypoints.length");
    	}
	this.npoints = npoints;
	this.xpoints = new int[npoints];
	this.ypoints = new int[npoints];
	System.arraycopy(xpoints, 0, this.xpoints, 0, npoints);
	System.arraycopy(ypoints, 0, this.ypoints, 0, npoints);	
!!!6337947.java!!!	reset() : void
	npoints = 0;
	bounds = null;
!!!6338075.java!!!	invalidate() : void
	bounds = null;
!!!6338203.java!!!	translate(in deltaX : int, in deltaY : int) : void
	for (int i = 0; i < npoints; i++) {
	    xpoints[i] += deltaX;
	    ypoints[i] += deltaY;
	}
	if (bounds != null) {
	    bounds.translate(deltaX, deltaY);
	}
!!!6338331.java!!!	calculateBounds(in xpoints : int, in ypoints : int, in npoints : int) : void
	int boundsMinX = Integer.MAX_VALUE;
	int boundsMinY = Integer.MAX_VALUE;
	int boundsMaxX = Integer.MIN_VALUE;
	int boundsMaxY = Integer.MIN_VALUE;
	
	for (int i = 0; i < npoints; i++) {
	    int x = xpoints[i];
	    boundsMinX = Math.min(boundsMinX, x);
	    boundsMaxX = Math.max(boundsMaxX, x);
	    int y = ypoints[i];
	    boundsMinY = Math.min(boundsMinY, y);
	    boundsMaxY = Math.max(boundsMaxY, y);
	}
	bounds = new Rectangle(boundsMinX, boundsMinY,
			       boundsMaxX - boundsMinX,
			       boundsMaxY - boundsMinY);
!!!6338459.java!!!	updateBounds(in x : int, in y : int) : void
	if (x < bounds.x) {
	    bounds.width = bounds.width + (bounds.x - x);
	    bounds.x = x;
	}
	else {
	    bounds.width = Math.max(bounds.width, x - bounds.x);
	    // bounds.x = bounds.x;
	}

	if (y < bounds.y) {
	    bounds.height = bounds.height + (bounds.y - y);
	    bounds.y = y;
	}
	else {
	    bounds.height = Math.max(bounds.height, y - bounds.y);
	    // bounds.y = bounds.y;
	}
!!!6338587.java!!!	addPoint(in x : int, in y : int) : void
	if (npoints == xpoints.length) {
	    int tmp[];

	    tmp = new int[npoints * 2];
	    System.arraycopy(xpoints, 0, tmp, 0, npoints);
	    xpoints = tmp;

	    tmp = new int[npoints * 2];
	    System.arraycopy(ypoints, 0, tmp, 0, npoints);
	    ypoints = tmp;
	}
	xpoints[npoints] = x;
	ypoints[npoints] = y;
	npoints++;
	if (bounds != null) {
	    updateBounds(x, y);
	}
!!!6338715.java!!!	getBounds() : Rectangle
	return getBoundingBox();
!!!6338843.java!!!	getBoundingBox() : Rectangle
	if (npoints == 0) {
	    return new Rectangle();
	}
	if (bounds == null) {
	    calculateBounds(xpoints, ypoints, npoints);
	}
	return bounds.getBounds();
!!!6338971.java!!!	contains(inout p : Point) : boolean
	return contains(p.x, p.y);
!!!6339099.java!!!	contains(in x : int, in y : int) : boolean
	return contains((double) x, (double) y);
!!!6339227.java!!!	inside(in x : int, in y : int) : boolean
	return contains((double) x, (double) y);
!!!6339355.java!!!	getBounds2D() : Rectangle2D
	return getBounds();
!!!6339483.java!!!	contains(in x : double, in y : double) : boolean
        if (npoints <= 2 || !getBoundingBox().contains(x, y)) {
	    return false;
	}
	int hits = 0;

	int lastx = xpoints[npoints - 1];
	int lasty = ypoints[npoints - 1];
	int curx, cury;

	// Walk the edges of the polygon
	for (int i = 0; i < npoints; lastx = curx, lasty = cury, i++) {
	    curx = xpoints[i];
	    cury = ypoints[i];

	    if (cury == lasty) {
		continue;
	    }

	    int leftx;
	    if (curx < lastx) {
		if (x >= lastx) {
		    continue;
		}
		leftx = curx;
	    } else {
		if (x >= curx) {
		    continue;
		}
		leftx = lastx;
	    }

	    double test1, test2;
	    if (cury < lasty) {
		if (y < cury || y >= lasty) {
		    continue;
		}
		if (x < leftx) {
		    hits++;
		    continue;
		}
		test1 = x - curx;
		test2 = y - cury;
	    } else {
		if (y < lasty || y >= cury) {
		    continue;
		}
		if (x < leftx) {
		    hits++;
		    continue;
		}
		test1 = x - lastx;
		test2 = y - lasty;
	    }

	    if (test1 < (test2 / (lasty - cury) * (lastx - curx))) {
		hits++;
	    }
	}

	return ((hits & 1) != 0);
!!!6339611.java!!!	getCrossings(in xlo : double, in ylo : double, in xhi : double, in yhi : double) : Crossings
	Crossings cross = new Crossings.EvenOdd(xlo, ylo, xhi, yhi);
	int lastx = xpoints[npoints - 1];
	int lasty = ypoints[npoints - 1];
	int curx, cury;

	// Walk the edges of the polygon
	for (int i = 0; i < npoints; i++) {
	    curx = xpoints[i];
	    cury = ypoints[i];
	    if (cross.accumulateLine(lastx, lasty, curx, cury)) {
		return null;
	    }
	    lastx = curx;
	    lasty = cury;
	}

	return cross;
!!!6339739.java!!!	contains(inout p : Point2D) : boolean
	return contains(p.getX(), p.getY());
!!!6339867.java!!!	intersects(in x : double, in y : double, in w : double, in h : double) : boolean
	if (npoints <= 0 || !getBoundingBox().intersects(x, y, w, h)) {
	    return false;
	}

	Crossings cross = getCrossings(x, y, x+w, y+h);
	return (cross == null || !cross.isEmpty());
!!!6339995.java!!!	intersects(inout r : Rectangle2D) : boolean
	return intersects(r.getX(), r.getY(), r.getWidth(), r.getHeight());
!!!6340123.java!!!	contains(in x : double, in y : double, in w : double, in h : double) : boolean
	if (npoints <= 0 || !getBoundingBox().intersects(x, y, w, h)) {
	    return false;
	}

	Crossings cross = getCrossings(x, y, x+w, y+h);
	return (cross != null && cross.covers(y, y+h));
!!!6340251.java!!!	contains(inout r : Rectangle2D) : boolean
	return contains(r.getX(), r.getY(), r.getWidth(), r.getHeight());
!!!6340379.java!!!	getPathIterator(inout at : AffineTransform) : PathIterator
	return new PolygonPathIterator(this, at);
!!!6340507.java!!!	getPathIterator(inout at : AffineTransform, in flatness : double) : PathIterator
	return getPathIterator(at);
