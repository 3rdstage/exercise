class Integer
!!!6996635.java!!!	toString(in i : int, in radix : int) : String

        if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)
	    radix = 10;

	/* Use the faster version */
	if (radix == 10) {
	    return toString(i);
	}

	char buf[] = new char[33];
	boolean negative = (i < 0);
	int charPos = 32;

	if (!negative) {
	    i = -i;
	}

	while (i <= -radix) {
	    buf[charPos--] = digits[-(i % radix)];
	    i = i / radix;
	}
	buf[charPos] = digits[-i];

	if (negative) {
	    buf[--charPos] = '-';
	}

	return new String(buf, charPos, (33 - charPos));
!!!6996763.java!!!	toHexString(in i : int) : String
	return toUnsignedString(i, 4);
!!!6996891.java!!!	toOctalString(in i : int) : String
	return toUnsignedString(i, 3);
!!!6997019.java!!!	toBinaryString(in i : int) : String
	return toUnsignedString(i, 1);
!!!6997147.java!!!	toUnsignedString(in i : int, in shift : int) : String
	char[] buf = new char[32];
	int charPos = 32;
	int radix = 1 << shift;
	int mask = radix - 1;
	do {
	    buf[--charPos] = digits[i & mask];
	    i >>>= shift;
	} while (i != 0);

	return new String(buf, charPos, (32 - charPos));
!!!6997275.java!!!	toString(in i : int) : String
        if (i == Integer.MIN_VALUE)
            return "-2147483648";
        int size = (i < 0) ? stringSize(-i) + 1 : stringSize(i);
        char[] buf = new char[size];
        getChars(i, size, buf);
        return new String(0, size, buf);
!!!6997403.java!!!	getChars(in i : int, in index : int, in buf : char) : void
        int q, r;
        int charPos = index;
        char sign = 0;

        if (i < 0) { 
            sign = '-';
            i = -i;
        }

        // Generate two digits per iteration
        while (i >= 65536) {
            q = i / 100;
        // really: r = i - (q * 100);
            r = i - ((q << 6) + (q << 5) + (q << 2));
            i = q;
            buf [--charPos] = DigitOnes[r];
            buf [--charPos] = DigitTens[r];
        }

        // Fall thru to fast mode for smaller numbers
        // assert(i <= 65536, i);
        for (;;) { 
            q = (i * 52429) >>> (16+3);
            r = i - ((q << 3) + (q << 1));  // r = i-(q*10) ...
            buf [--charPos] = digits [r];
            i = q;
            if (i == 0) break;
        }
        if (sign != 0) {
            buf [--charPos] = sign;
        }
!!!6997531.java!!!	stringSize(in x : int) : int
        for (int i=0; ; i++)
            if (x <= sizeTable[i])
                return i+1;
!!!6997659.java!!!	parseInt(in s : String, in radix : int) : int
        if (s == null) {
            throw new NumberFormatException("null");
        }

	if (radix < Character.MIN_RADIX) {
	    throw new NumberFormatException("radix " + radix +
					    " less than Character.MIN_RADIX");
	}

	if (radix > Character.MAX_RADIX) {
	    throw new NumberFormatException("radix " + radix +
					    " greater than Character.MAX_RADIX");
	}

	int result = 0;
	boolean negative = false;
	int i = 0, max = s.length();
	int limit;
	int multmin;
	int digit;

	if (max > 0) {
	    if (s.charAt(0) == '-') {
		negative = true;
		limit = Integer.MIN_VALUE;
		i++;
	    } else {
		limit = -Integer.MAX_VALUE;
	    }
	    multmin = limit / radix;
	    if (i < max) {
		digit = Character.digit(s.charAt(i++),radix);
		if (digit < 0) {
		    throw NumberFormatException.forInputString(s);
		} else {
		    result = -digit;
		}
	    }
	    while (i < max) {
		// Accumulating negatively avoids surprises near MAX_VALUE
		digit = Character.digit(s.charAt(i++),radix);
		if (digit < 0) {
		    throw NumberFormatException.forInputString(s);
		}
		if (result < multmin) {
		    throw NumberFormatException.forInputString(s);
		}
		result *= radix;
		if (result < limit + digit) {
		    throw NumberFormatException.forInputString(s);
		}
		result -= digit;
	    }
	} else {
	    throw NumberFormatException.forInputString(s);
	}
	if (negative) {
	    if (i > 1) {
		return result;
	    } else {	/* Only got "-" */
		throw NumberFormatException.forInputString(s);
	    }
	} else {
	    return -result;
	}
!!!6997787.java!!!	parseInt(in s : String) : int
	return parseInt(s,10);
!!!6997915.java!!!	valueOf(in s : String, in radix : int) : Integer
	return new Integer(parseInt(s,radix));
!!!6998043.java!!!	valueOf(in s : String) : Integer
	return new Integer(parseInt(s, 10));
!!!6998299.java!!!	valueOf(in i : int) : Integer
	final int offset = 128;
	if (i >= -128 && i <= 127) { // must cache 
	    return IntegerCache.cache[i + offset];
	}
        return new Integer(i);
!!!6998427.java!!!	Integer(in value : int)
	this.value = value;
!!!6998555.java!!!	Integer(in s : String)
	this.value = parseInt(s, 10);
!!!6998683.java!!!	byteValue() : byte
	return (byte)value;
!!!6998811.java!!!	shortValue() : short
	return (short)value;
!!!6998939.java!!!	intValue() : int
	return value;
!!!6999067.java!!!	longValue() : long
	return (long)value;
!!!6999195.java!!!	floatValue() : float
	return (float)value;
!!!6999323.java!!!	doubleValue() : double
	return (double)value;
!!!6999451.java!!!	toString() : String
	return String.valueOf(value);
!!!6999579.java!!!	hashCode() : int
	return value;
!!!6999707.java!!!	equals(inout obj : Object) : boolean
	if (obj instanceof Integer) {
	    return value == ((Integer)obj).intValue();
	}
	return false;
!!!6999835.java!!!	getInteger(in nm : String) : Integer
	return getInteger(nm, null);
!!!6999963.java!!!	getInteger(in nm : String, in val : int) : Integer
        Integer result = getInteger(nm, null);
        return (result == null) ? new Integer(val) : result;
!!!7000091.java!!!	getInteger(in nm : String, inout val : Integer) : Integer
	String v = null;
        try {
            v = System.getProperty(nm);
        } catch (IllegalArgumentException e) {
        } catch (NullPointerException e) {
        }
	if (v != null) {
	    try {
		return Integer.decode(v);
	    } catch (NumberFormatException e) {
	    }
	}
	return val;
!!!7000219.java!!!	decode(in nm : String) : Integer
        int radix = 10;
        int index = 0;
        boolean negative = false;
        Integer result;

        // Handle minus sign, if present
        if (nm.startsWith("-")) {
            negative = true;
            index++;
        }

        // Handle radix specifier, if present
	if (nm.startsWith("0x", index) || nm.startsWith("0X", index)) {
	    index += 2;
            radix = 16;
	}
	else if (nm.startsWith("#", index)) {
	    index ++;
            radix = 16;
	}
	else if (nm.startsWith("0", index) && nm.length() > 1 + index) {
	    index ++;
            radix = 8;
	}

        if (nm.startsWith("-", index))
            throw new NumberFormatException("Negative sign in wrong position");

        try {
            result = Integer.valueOf(nm.substring(index), radix);
            result = negative ? new Integer(-result.intValue()) : result;
        } catch (NumberFormatException e) {
            // If number is Integer.MIN_VALUE, we'll end up here. The next line
            // handles this case, and causes any genuine format error to be
            // rethrown.
            String constant = negative ? new String("-" + nm.substring(index))
                                       : nm.substring(index);
            result = Integer.valueOf(constant, radix);
        }
        return result;
!!!7000347.java!!!	compareTo(inout anotherInteger : Integer) : int
	int thisVal = this.value;
	int anotherVal = anotherInteger.value;
	return (thisVal<anotherVal ? -1 : (thisVal==anotherVal ? 0 : 1));
!!!7000475.java!!!	highestOneBit(in i : int) : int
        // HD, Figure 3-1
        i |= (i >>  1);
        i |= (i >>  2);
        i |= (i >>  4);
        i |= (i >>  8);
        i |= (i >> 16);
        return i - (i >>> 1);
!!!7000603.java!!!	lowestOneBit(in i : int) : int
        // HD, Section 2-1
        return i & -i;
!!!7000731.java!!!	numberOfLeadingZeros(in i : int) : int
        // HD, Figure 5-6
        if (i == 0)
            return 32;
        int n = 1;
        if (i >>> 16 == 0) { n += 16; i <<= 16; }
        if (i >>> 24 == 0) { n +=  8; i <<=  8; }
        if (i >>> 28 == 0) { n +=  4; i <<=  4; }
        if (i >>> 30 == 0) { n +=  2; i <<=  2; }
        n -= i >>> 31;
        return n;
!!!7000859.java!!!	numberOfTrailingZeros(in i : int) : int
        // HD, Figure 5-14
	int y;
	if (i == 0) return 32;
	int n = 31;
	y = i <<16; if (y != 0) { n = n -16; i = y; }
	y = i << 8; if (y != 0) { n = n - 8; i = y; }
	y = i << 4; if (y != 0) { n = n - 4; i = y; }
	y = i << 2; if (y != 0) { n = n - 2; i = y; }
	return n - ((i << 1) >>> 31);
!!!7000987.java!!!	bitCount(in i : int) : int
        // HD, Figure 5-2
	i = i - ((i >>> 1) & 0x55555555);
	i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);
	i = (i + (i >>> 4)) & 0x0f0f0f0f;
	i = i + (i >>> 8);
	i = i + (i >>> 16);
	return i & 0x3f;
!!!7001115.java!!!	rotateLeft(in i : int, in distance : int) : int
        return (i << distance) | (i >>> -distance);
!!!7001243.java!!!	rotateRight(in i : int, in distance : int) : int
        return (i >>> distance) | (i << -distance);
!!!7001371.java!!!	reverse(in i : int) : int
        // HD, Figure 7-1
	i = (i & 0x55555555) << 1 | (i >>> 1) & 0x55555555;
	i = (i & 0x33333333) << 2 | (i >>> 2) & 0x33333333;
	i = (i & 0x0f0f0f0f) << 4 | (i >>> 4) & 0x0f0f0f0f;
	i = (i << 24) | ((i & 0xff00) << 8) |
	    ((i >>> 8) & 0xff00) | (i >>> 24);
	return i;
!!!7001499.java!!!	signum(in i : int) : int
        // HD, Section 2-7
        return (i >> 31) | (-i >>> 31);
!!!7001627.java!!!	reverseBytes(in i : int) : int
        return ((i >>> 24)           ) |
               ((i >>   8) &   0xFF00) |
               ((i <<   8) & 0xFF0000) |
               ((i << 24));
