class KeyFactory
!!!7578779.java!!!	KeyFactory(inout keyFacSpi : KeyFactorySpi, inout provider : Provider, in algorithm : String)
	this.spi = keyFacSpi;
	this.provider = provider;
	this.algorithm = algorithm;
!!!7578907.java!!!	KeyFactory(in algorithm : String)
	this.algorithm = algorithm;
	List<Service> list = GetInstance.getServices("KeyFactory", algorithm);
	serviceIterator = list.iterator();
	// fetch and instantiate initial spi
	if (nextSpi(null) == null) {
	    throw new NoSuchAlgorithmException
	    	(algorithm + " KeyFactory not available");
	}
!!!7579035.java!!!	getInstance(in algorithm : String) : KeyFactory
 
	return new KeyFactory(algorithm);
!!!7579163.java!!!	getInstance(in algorithm : String, in provider : String) : KeyFactory
	Instance instance = GetInstance.getInstance("KeyFactory", 
	    KeyFactorySpi.class, algorithm, provider);
	return new KeyFactory((KeyFactorySpi)instance.impl,
	    instance.provider, algorithm);
!!!7579291.java!!!	getInstance(in algorithm : String, inout provider : Provider) : KeyFactory
	Instance instance = GetInstance.getInstance("KeyFactory", 
	    KeyFactorySpi.class, algorithm, provider);
	return new KeyFactory((KeyFactorySpi)instance.impl,
	    instance.provider, algorithm);
!!!7579419.java!!!	getProvider() : Provider
	synchronized (lock) {
	    // disable further failover after this call
	    serviceIterator = null;
	    return provider;
	}
!!!7579547.java!!!	getAlgorithm() : String
	return this.algorithm;
!!!7579675.java!!!	nextSpi(inout oldSpi : KeyFactorySpi) : KeyFactorySpi
	synchronized (lock) {
	    // somebody else did a failover concurrently
	    // try that spi now
	    if ((oldSpi != null) && (oldSpi != spi)) {
		return spi;
	    }
	    if (serviceIterator == null) {
		return null;
	    }
	    while (serviceIterator.hasNext()) {
		Service s = serviceIterator.next();
		try {
		    Object obj = s.newInstance(null);
		    if (obj instanceof KeyFactorySpi == false) {
			continue;
		    }
		    KeyFactorySpi spi = (KeyFactorySpi)obj;
		    provider = s.getProvider();
		    this.spi = spi;
		    return spi;
		} catch (NoSuchAlgorithmException e) {
		    // ignore
		}
	    }
	    serviceIterator = null;
	    return null;
	}
!!!7579803.java!!!	generatePublic(inout keySpec : KeySpec) : PublicKey
	if (serviceIterator == null) {
	    return spi.engineGeneratePublic(keySpec);
	}
	Exception failure = null;
	KeyFactorySpi mySpi = spi;
	do {
	    try {
		return mySpi.engineGeneratePublic(keySpec);
	    } catch (Exception e) {
		if (failure == null) {
		    failure = e;
		}
		mySpi = nextSpi(mySpi);
	    }
	} while (mySpi != null);
	if (failure instanceof RuntimeException) {
	    throw (RuntimeException)failure;
	}
	if (failure instanceof InvalidKeySpecException) {
	    throw (InvalidKeySpecException)failure;
	}
	throw new InvalidKeySpecException
		("Could not generate public key", failure);
!!!7579931.java!!!	generatePrivate(inout keySpec : KeySpec) : PrivateKey
	if (serviceIterator == null) {
	    return spi.engineGeneratePrivate(keySpec);
	}
	Exception failure = null;
	KeyFactorySpi mySpi = spi;
	do {
	    try {
		return mySpi.engineGeneratePrivate(keySpec);
	    } catch (Exception e) {
		if (failure == null) {
		    failure = e;
		}
		mySpi = nextSpi(mySpi);
	    }
	} while (mySpi != null);
	if (failure instanceof RuntimeException) {
	    throw (RuntimeException)failure;
	}
	if (failure instanceof InvalidKeySpecException) {
	    throw (InvalidKeySpecException)failure;
	}
	throw new InvalidKeySpecException
		("Could not generate private key", failure);
!!!7580059.java!!!	getKeySpec(inout key : Key, inout keySpec : Class) : T
	if (serviceIterator == null) {
	    return spi.engineGetKeySpec(key, keySpec);
	}
	Exception failure = null;
	KeyFactorySpi mySpi = spi;
	do {
	    try {
		return mySpi.engineGetKeySpec(key, keySpec);
	    } catch (Exception e) {
		if (failure == null) {
		    failure = e;
		}
		mySpi = nextSpi(mySpi);
	    }
	} while (mySpi != null);
	if (failure instanceof RuntimeException) {
	    throw (RuntimeException)failure;
	}
	if (failure instanceof InvalidKeySpecException) {
	    throw (InvalidKeySpecException)failure;
	}
	throw new InvalidKeySpecException
		("Could not get key spec", failure);
!!!7580187.java!!!	translateKey(inout key : Key) : Key
	if (serviceIterator == null) {
	    return spi.engineTranslateKey(key);
	}
	Exception failure = null;
	KeyFactorySpi mySpi = spi;
	do {
	    try {
		return mySpi.engineTranslateKey(key);
	    } catch (Exception e) {
		if (failure == null) {
		    failure = e;
		}
		mySpi = nextSpi(mySpi);
	    }
	} while (mySpi != null);
	if (failure instanceof RuntimeException) {
	    throw (RuntimeException)failure;
	}
	if (failure instanceof InvalidKeyException) {
	    throw (InvalidKeyException)failure;
	}
	throw new InvalidKeyException
		("Could not translate key", failure);
