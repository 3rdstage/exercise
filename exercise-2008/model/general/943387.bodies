class HeapFloatBufferR
!!!7458075.java!!!	HeapFloatBufferR(in cap : int, in lim : int)
		// package-private







	super(cap, lim);
	this.isReadOnly = true;

!!!7458203.java!!!	HeapFloatBufferR(in buf : float, in off : int, in len : int)
 // package-private







	super(buf, off, len);
	this.isReadOnly = true;

!!!7458331.java!!!	HeapFloatBufferR(in buf : float, in mark : int, in pos : int, in lim : int, in cap : int, in off : int)








	super(buf, mark, pos, lim, cap, off);
	this.isReadOnly = true;

!!!7458459.java!!!	slice() : FloatBuffer

	return new HeapFloatBufferR(hb,
					-1,
					0,
					this.remaining(),
					this.remaining(),
					this.position() + offset);
!!!7458587.java!!!	duplicate() : FloatBuffer

	return new HeapFloatBufferR(hb,
					this.markValue(),
					this.position(),
					this.limit(),
					this.capacity(),
					offset);
!!!7458715.java!!!	asReadOnlyBuffer() : FloatBuffer









	return duplicate();

!!!7458843.java!!!	isReadOnly() : boolean

	return true;
!!!7458971.java!!!	put(in x : float) : FloatBuffer





	throw new ReadOnlyBufferException();

!!!7459099.java!!!	put(in i : int, in x : float) : FloatBuffer





	throw new ReadOnlyBufferException();

!!!7459227.java!!!	put(in src : float, in offset : int, in length : int) : FloatBuffer









	throw new ReadOnlyBufferException();

!!!7459355.java!!!	put(inout src : FloatBuffer) : FloatBuffer
























	throw new ReadOnlyBufferException();

!!!7459483.java!!!	compact() : FloatBuffer







	throw new ReadOnlyBufferException();

!!!7459611.java!!!	order() : ByteOrder

	return ByteOrder.nativeOrder();
