class LineNumberInputStream
!!!6864027.java!!!	LineNumberInputStream(inout in : InputStream)
	super(in);
!!!6864155.java!!!	read() : int
	int c = pushBack;

	if (c != -1) {
	    pushBack = -1;
	} else {
	    c = in.read();
	}

	switch (c) {
	  case '\r':
	    pushBack = in.read();
	    if (pushBack == '\n') {
		pushBack = -1;
	    }
	  case '\n':
	    lineNumber++;
	    return '\n';
	}
	return c;
!!!6864283.java!!!	read(in b : byte, in off : int, in len : int) : int
	if (b == null) {
	    throw new NullPointerException();
	} else if ((off < 0) || (off > b.length) || (len < 0) ||
		   ((off + len) > b.length) || ((off + len) < 0)) {
	    throw new IndexOutOfBoundsException();
	} else if (len == 0) {
	    return 0;
	}

	int c = read();
	if (c == -1) {
	    return -1;
	}
	b[off] = (byte)c;

	int i = 1;
	try {
	    for (; i < len ; i++) {
		c = read();
		if (c == -1) {
		    break;
		}
		if (b != null) {
		    b[off + i] = (byte)c;
		}
	    }
	} catch (IOException ee) {
	}
	return i;
!!!6864411.java!!!	skip(in n : long) : long
	int chunk = 2048;             
	long remaining = n;
	byte data[];
	int nr;

	if (n <= 0) {
	    return 0;
	}
	
	data = new byte[chunk];
	while (remaining > 0) {
	    nr = read(data, 0, (int) Math.min(chunk, remaining));
	    if (nr < 0) {
		break;
	    }
	    remaining -= nr;
	}
	
	return n - remaining;
!!!6864539.java!!!	setLineNumber(in lineNumber : int) : void
	this.lineNumber = lineNumber;
!!!6864667.java!!!	getLineNumber() : int
	return lineNumber;
!!!6864795.java!!!	available() : int
	return (pushBack == -1) ? super.available()/2 : super.available()/2 + 1;
!!!6864923.java!!!	mark(in readlimit : int) : void
	markLineNumber = lineNumber;
        markPushBack   = pushBack;
	in.mark(readlimit);
!!!6865051.java!!!	reset() : void
	lineNumber = markLineNumber;
        pushBack   = markPushBack;
	in.reset();
