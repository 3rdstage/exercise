class Bound
!!!8136859.java!!!	Bound(in n : int)
            type = n;
!!!8136987.java!!!	check(inout matcher : Matcher, in i : int, inout seq : CharSequence) : int
            int ch;
            boolean left = false;
            int startIndex = matcher.from;
            int endIndex = matcher.to;
            if (matcher.transparentBounds) {
                startIndex = 0;
                endIndex = matcher.getTextLength();
            }
            if (i > startIndex) {
                ch = Character.codePointBefore(seq, i);
                left = (ch == '_' || Character.isLetterOrDigit(ch) ||
                    ((Character.getType(ch) == Character.NON_SPACING_MARK)
                     && hasBaseCharacter(matcher, i-1, seq)));
            }
            boolean right = false;
            if (i < endIndex) {
                ch = Character.codePointAt(seq, i);
                right = (ch == '_' || Character.isLetterOrDigit(ch) ||
                    ((Character.getType(ch) == Character.NON_SPACING_MARK)
                     && hasBaseCharacter(matcher, i, seq)));
            } else {
                // Tried to access char past the end
                matcher.hitEnd = true;
                // The addition of another char could wreck a boundary
                matcher.requireEnd = true;
            }
            return ((left ^ right) ? (right ? LEFT : RIGHT) : NONE);
!!!8137115.java!!!	match(inout matcher : Matcher, in i : int, inout seq : CharSequence) : boolean
            return (check(matcher, i, seq) & type) > 0
                && next.match(matcher, i, seq);
