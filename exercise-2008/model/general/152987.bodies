class LinkedList
!!!312859.java!!!	LinkedList()
        header.next = header.previous = header;
!!!312987.java!!!	LinkedList(inout c : Collection)
	 this();
	 addAll(c);
!!!313115.java!!!	getFirst() : E
	if (size==0)
	    throw new NoSuchElementException();

	return header.next.element;
!!!313243.java!!!	getLast() : E
	if (size==0)
	    throw new NoSuchElementException();

	return header.previous.element;
!!!313371.java!!!	removeFirst() : E
	return remove(header.next);
!!!313499.java!!!	removeLast() : E
	return remove(header.previous);
!!!313627.java!!!	addFirst(inout o : E) : void
	addBefore(o, header.next);
!!!313755.java!!!	addLast(inout o : E) : void
	addBefore(o, header);
!!!313883.java!!!	contains(inout o : Object) : boolean
        return indexOf(o) != -1;
!!!314011.java!!!	size() : int
	return size;
!!!314139.java!!!	add(inout o : E) : boolean
	addBefore(o, header);
        return true;
!!!314267.java!!!	remove(inout o : Object) : boolean
        if (o==null) {
            for (Entry<E> e = header.next; e != header; e = e.next) {
                if (e.element==null) {
                    remove(e);
                    return true;
                }
            }
        } else {
            for (Entry<E> e = header.next; e != header; e = e.next) {
                if (o.equals(e.element)) {
                    remove(e);
                    return true;
                }
            }
        }
        return false;
!!!314395.java!!!	addAll(inout c : Collection) : boolean
        return addAll(size, c);
!!!314523.java!!!	addAll(in index : int, inout c : Collection) : boolean
        if (index < 0 || index > size)
            throw new IndexOutOfBoundsException("Index: "+index+
                                                ", Size: "+size);
        Object[] a = c.toArray();
        int numNew = a.length;
        if (numNew==0)
            return false;
	modCount++;

        Entry<E> successor = (index==size ? header : entry(index));
        Entry<E> predecessor = successor.previous;
	for (int i=0; i<numNew; i++) {
            Entry<E> e = new Entry<E>((E)a[i], successor, predecessor);
            predecessor.next = e;
            predecessor = e;
        }
        successor.previous = predecessor;

        size += numNew;
        return true;
!!!314651.java!!!	clear() : void
        Entry<E> e = header.next;
        while (e != header) {
            Entry<E> next = e.next;
            e.next = e.previous = null;
            e.element = null;
            e = next;
        }
        header.next = header.previous = header;
        size = 0;
	modCount++;
!!!314779.java!!!	get(in index : int) : E
        return entry(index).element;
!!!314907.java!!!	set(in index : int, inout element : E) : E
        Entry<E> e = entry(index);
        E oldVal = e.element;
        e.element = element;
        return oldVal;
!!!315035.java!!!	add(in index : int, inout element : E) : void
        addBefore(element, (index==size ? header : entry(index)));
!!!315163.java!!!	remove(in index : int) : E
        return remove(entry(index));
!!!315291.java!!!	entry(in index : int) : Entry
        if (index < 0 || index >= size)
            throw new IndexOutOfBoundsException("Index: "+index+
                                                ", Size: "+size);
        Entry<E> e = header;
        if (index < (size >> 1)) {
            for (int i = 0; i <= index; i++)
                e = e.next;
        } else {
            for (int i = size; i > index; i--)
                e = e.previous;
        }
        return e;
!!!315419.java!!!	indexOf(inout o : Object) : int
        int index = 0;
        if (o==null) {
            for (Entry e = header.next; e != header; e = e.next) {
                if (e.element==null)
                    return index;
                index++;
            }
        } else {
            for (Entry e = header.next; e != header; e = e.next) {
                if (o.equals(e.element))
                    return index;
                index++;
            }
        }
        return -1;
!!!315547.java!!!	lastIndexOf(inout o : Object) : int
        int index = size;
        if (o==null) {
            for (Entry e = header.previous; e != header; e = e.previous) {
                index--;
                if (e.element==null)
                    return index;
            }
        } else {
            for (Entry e = header.previous; e != header; e = e.previous) {
                index--;
                if (o.equals(e.element))
                    return index;
            }
        }
        return -1;
!!!315675.java!!!	peek() : E
        if (size==0)
            return null;
        return getFirst();
!!!315803.java!!!	element() : E
        return getFirst();
!!!315931.java!!!	poll() : E
        if (size==0)
            return null;
        return removeFirst();
!!!316059.java!!!	remove() : E
        return removeFirst();
!!!316187.java!!!	offer(inout o : E) : boolean
        return add(o);
!!!316315.java!!!	listIterator(in index : int) : ListIterator
	return new ListItr(index);
