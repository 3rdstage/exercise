class RowIterator
!!!9991835.java!!!	updateAdjustments() : void
	    int axis = Y_AXIS;
	    if (multiRowCells) {
		// adjust requirements of multi-row cells
		int n = getRowCount();
		adjustments = new int[n];
		for (int i = 0; i < n; i++) {
		    RowView rv = getRow(i);
		    if (rv.multiRowCells == true) {
			int ncells = rv.getViewCount();
			for (int j = 0; j < ncells; j++) {
			    View v = rv.getView(j);
			    int nrows = getRowsOccupied(v);
			    if (nrows > 1) {
				int spanNeeded = (int) v.getPreferredSpan(axis);
				adjustMultiRowSpan(spanNeeded, nrows, i);
			    }
			}
		    }
		}
	    } else {
		adjustments = null;
	    }
!!!9991963.java!!!	adjustMultiRowSpan(in spanNeeded : int, in nrows : int, in rowIndex : int) : void
	    if ((rowIndex + nrows) > getCount()) {
		// rows are missing (could be a bad rowspan specification)
		// or not all the rows have arrived.  Do the best we can with
		// the current set of rows.
		nrows = getCount() - rowIndex;
		if (nrows < 1) {
		    return;
		}
	    }
	    int span = 0;
	    for (int i = 0; i < nrows; i++) {
		RowView rv = getRow(rowIndex + i);
		span += rv.getPreferredSpan(Y_AXIS);
	    }
	    if (spanNeeded > span) {
		int adjust = (spanNeeded - span);
		int rowAdjust = adjust / nrows;
		int firstAdjust = rowAdjust + (adjust - (rowAdjust * nrows));
		RowView rv = getRow(rowIndex);
                adjustments[rowIndex] = Math.max(adjustments[rowIndex],
                                                 firstAdjust);
		for (int i = 1; i < nrows; i++) {
                    adjustments[rowIndex + i] = Math.max(
                        adjustments[rowIndex + i], rowAdjust);
		}
	    }
!!!9992091.java!!!	setLayoutArrays(in offsets : int, in spans : int) : void
	    this.offsets = offsets;
	    this.spans = spans;
!!!9992219.java!!!	setOffset(in offs : int) : void
	    RowView rv = getRow(row);
	    if (rv != null) {
		offsets[rv.viewIndex] = offs;
	    }
!!!9992347.java!!!	getOffset() : int
	    RowView rv = getRow(row);
	    if (rv != null) {
		return offsets[rv.viewIndex];
	    }
	    return 0;
!!!9992475.java!!!	setSpan(in span : int) : void
	    RowView rv = getRow(row);
	    if (rv != null) {
		spans[rv.viewIndex] = span;
	    }
!!!9992603.java!!!	getSpan() : int
	    RowView rv = getRow(row);
	    if (rv != null) {
		return spans[rv.viewIndex];
	    }
	    return 0;
!!!9992731.java!!!	getCount() : int
	    return rows.size();
!!!9992859.java!!!	setIndex(in i : int) : void
	    row = i;
!!!9992987.java!!!	getMinimumSpan(in parentSpan : float) : float
	    return getPreferredSpan(parentSpan);
!!!9993115.java!!!	getPreferredSpan(in parentSpan : float) : float
	    RowView rv = getRow(row);
	    if (rv != null) {
		int adjust = (adjustments != null) ? adjustments[row] : 0;
		return rv.getPreferredSpan(TableView.this.getAxis()) + adjust;
	    }
	    return 0;
!!!9993243.java!!!	getMaximumSpan(in parentSpan : float) : float
	    return getPreferredSpan(parentSpan);
!!!9993371.java!!!	getBorderWidth() : float
	    return borderWidth;        
!!!9993499.java!!!	getLeadingCollapseSpan() : float
	    return cellSpacing;
!!!9993627.java!!!	getTrailingCollapseSpan() : float
	    return cellSpacing;
!!!9993755.java!!!	getAdjustmentWeight() : int
	    return 0;
