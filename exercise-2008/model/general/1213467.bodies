class TreeStateNode
!!!10065435.java!!!	TreeStateNode(inout value : Object)
	    super(value);
!!!10065563.java!!!	setParent(inout parent : MutableTreeNode) : void
	    super.setParent(parent);
	    if(parent != null) {
		path = ((TreeStateNode)parent).getTreePath().
		                       pathByAddingChild(getUserObject());
		addMapping(this);
	    }
!!!10065691.java!!!	remove(in childIndex : int) : void
	    TreeStateNode     node = (TreeStateNode)getChildAt(childIndex);

	    node.removeFromMapping();
	    super.remove(childIndex);
!!!10065819.java!!!	setUserObject(inout o : Object) : void
	    super.setUserObject(o);
	    if(path != null) {
		TreeStateNode      parent = (TreeStateNode)getParent();

		if(parent != null)
		    resetChildrenPaths(parent.getTreePath());
		else
		    resetChildrenPaths(null);
	    }
!!!10065947.java!!!	children() : Enumeration
	    if (!this.isExpanded()) {
		return DefaultMutableTreeNode.EMPTY_ENUMERATION;
	    } else {
		return super.children();
	    }
!!!10066075.java!!!	isLeaf() : boolean
	    return getModel().isLeaf(this.getValue());
!!!10066203.java!!!	getNodeBounds(inout placeIn : Rectangle) : Rectangle
	    if(placeIn == null)
		placeIn = new Rectangle(getXOrigin(), getYOrigin(),
					getPreferredWidth(),
					getPreferredHeight());
	    else {
		placeIn.x = getXOrigin();
		placeIn.y = getYOrigin();
		placeIn.width = getPreferredWidth();
		placeIn.height = getPreferredHeight();
	    }
	    return placeIn;
!!!10066331.java!!!	getXOrigin() : int
	    if(!hasValidSize())
		updatePreferredSize(getRow());
	    return xOrigin;
!!!10066459.java!!!	getYOrigin() : int
	    if(isFixedRowHeight()) {
		int      aRow = getRow();

		if(aRow == -1)
		    return -1;
		return getRowHeight() * aRow;
	    }
	    return yOrigin;
!!!10066587.java!!!	getPreferredHeight() : int
	    if(isFixedRowHeight())
		return getRowHeight();
	    else if(!hasValidSize())
		updatePreferredSize(getRow());
	    return preferredHeight;
!!!10066715.java!!!	getPreferredWidth() : int
	    if(!hasValidSize())
		updatePreferredSize(getRow());
	    return preferredWidth;
!!!10066843.java!!!	hasValidSize() : boolean
	    return (preferredHeight != 0);
!!!10066971.java!!!	getRow() : int
	    return visibleNodes.indexOf(this);
!!!10067099.java!!!	hasBeenExpanded() : boolean
	    return hasBeenExpanded;
!!!10067227.java!!!	isExpanded() : boolean
	    return expanded;
!!!10067355.java!!!	getLastVisibleNode() : TreeStateNode
	    TreeStateNode                node = this;

	    while(node.isExpanded() && node.getChildCount() > 0)
		node = (TreeStateNode)node.getLastChild();
	    return node;
!!!10067483.java!!!	isVisible() : boolean
	    if(this == root)
		return true;

	    TreeStateNode        parent = (TreeStateNode)getParent();

	    return (parent != null && parent.isExpanded() &&
		    parent.isVisible());
!!!10067611.java!!!	getModelChildCount() : int
	    if(hasBeenExpanded)
		return super.getChildCount();
	    return getModel().getChildCount(getValue());
!!!10067739.java!!!	getVisibleChildCount() : int
	    int               childCount = 0;

	    if(isExpanded()) {
		int         maxCounter = getChildCount();

		childCount += maxCounter;
		for(int counter = 0; counter < maxCounter; counter++)
		    childCount += ((TreeStateNode)getChildAt(counter)).
			            getVisibleChildCount();
	    }
	    return childCount;
!!!10067867.java!!!	toggleExpanded() : void
	    if (isExpanded()) {
		collapse();
	    } else {
		expand();
	    }
!!!10067995.java!!!	makeVisible() : void
	    TreeStateNode       parent = (TreeStateNode)getParent();

	    if(parent != null)
		parent.expandParentAndReceiver();
!!!10068123.java!!!	expand() : void
	    expand(true);
!!!10068251.java!!!	collapse() : void
	    collapse(true);
!!!10068379.java!!!	getValue() : Object
	    return getUserObject();
!!!10068507.java!!!	getTreePath() : TreePath
	    return path;
!!!10068635.java!!!	resetChildrenPaths(inout parentPath : TreePath) : void
	    removeMapping(this);
	    if(parentPath == null)
		path = new TreePath(getUserObject());
	    else
		path = parentPath.pathByAddingChild(getUserObject());
	    addMapping(this);
	    for(int counter = getChildCount() - 1; counter >= 0; counter--)
		((TreeStateNode)getChildAt(counter)).resetChildrenPaths(path);
!!!10068763.java!!!	setYOrigin(in newYOrigin : int) : void
	    yOrigin = newYOrigin;
!!!10068891.java!!!	shiftYOriginBy(in offset : int) : void
	    yOrigin += offset;
!!!10069019.java!!!	updatePreferredSize() : void
	    updatePreferredSize(getRow());
!!!10069147.java!!!	updatePreferredSize(in index : int) : void
	    Rectangle       bounds = getNodeDimensions(this.getUserObject(),
						       index, getLevel(),
						       isExpanded(),
						       boundsBuffer);

	    if(bounds == null) {
		xOrigin = 0;
		preferredWidth = preferredHeight = 0;
		updateNodeSizes = true;
	    }
	    else if(bounds.height == 0) {
		xOrigin = 0;
		preferredWidth = preferredHeight = 0;
		updateNodeSizes = true;
	    }
	    else {
		xOrigin = bounds.x;
		preferredWidth = bounds.width;
		if(isFixedRowHeight())
		    preferredHeight = getRowHeight();
		else
		    preferredHeight = bounds.height;
	    }
!!!10069275.java!!!	markSizeInvalid() : void
	    preferredHeight = 0;
!!!10069403.java!!!	deepMarkSizeInvalid() : void
	    markSizeInvalid();
	    for(int counter = getChildCount() - 1; counter >= 0; counter--)
		((TreeStateNode)getChildAt(counter)).deepMarkSizeInvalid();
!!!10069531.java!!!	getLoadedChildren(inout createIfNeeded : boolean) : Enumeration
	    if(!createIfNeeded || hasBeenExpanded)
		return super.children();

	    TreeStateNode   newNode;
	    Object          realNode = getValue();
	    TreeModel       treeModel = getModel();
	    int             count = treeModel.getChildCount(realNode);

	    hasBeenExpanded = true;

	    int    childRow = getRow();

	    if(childRow == -1) {
		for (int i = 0; i < count; i++) {
		    newNode = createNodeForValue
			(treeModel.getChild(realNode, i));
		    this.add(newNode);
		    newNode.updatePreferredSize(-1);
		}
	    }
	    else {
		childRow++;
		for (int i = 0; i < count; i++) {
		    newNode = createNodeForValue
			(treeModel.getChild(realNode, i));
		    this.add(newNode);
		    newNode.updatePreferredSize(childRow++);
		}
	    }
	    return super.children();
!!!10069787.java!!!	expandParentAndReceiver() : void
	    TreeStateNode       parent = (TreeStateNode)getParent();

	    if(parent != null)
		parent.expandParentAndReceiver();
	    expand();
!!!10069915.java!!!	expand(inout adjustTree : boolean) : void
	    if (!isExpanded() && !isLeaf()) {
		boolean         isFixed = isFixedRowHeight();
		int             startHeight = getPreferredHeight();
		int             originalRow = getRow();

		expanded = true;
		updatePreferredSize(originalRow);

		if (!hasBeenExpanded) {
		    TreeStateNode  newNode;
		    Object         realNode = getValue();
		    TreeModel      treeModel = getModel();
		    int            count = treeModel.getChildCount(realNode);

		    hasBeenExpanded = true;
		    if(originalRow == -1) {
			for (int i = 0; i < count; i++) {
			    newNode = createNodeForValue(treeModel.getChild
							    (realNode, i));
			    this.add(newNode);
			    newNode.updatePreferredSize(-1);
			}
		    }
		    else {
			int offset = originalRow + 1;
			for (int i = 0; i < count; i++) {
			    newNode = createNodeForValue(treeModel.getChild
						       (realNode, i));
			    this.add(newNode);
			    newNode.updatePreferredSize(offset);
			}
		    }
		}

		int i = originalRow;
		Enumeration cursor = preorderEnumeration();
		cursor.nextElement(); // don't add me, I'm already in

		int newYOrigin;

		if(isFixed)
		    newYOrigin = 0;
		else if(this == root && !isRootVisible())
		    newYOrigin = 0;
		else
		    newYOrigin = getYOrigin() + this.getPreferredHeight();
		TreeStateNode   aNode;
		if(!isFixed) {
		    while (cursor.hasMoreElements()) {
			aNode = (TreeStateNode)cursor.nextElement();
			if(!updateNodeSizes && !aNode.hasValidSize())
			    aNode.updatePreferredSize(i + 1);
			aNode.setYOrigin(newYOrigin);
			newYOrigin += aNode.getPreferredHeight();
			visibleNodes.insertElementAt(aNode, ++i);
		    }
		}
		else {
		    while (cursor.hasMoreElements()) {
			aNode = (TreeStateNode)cursor.nextElement();
			visibleNodes.insertElementAt(aNode, ++i);
		    }
		}

		if(adjustTree && (originalRow != i ||
				  getPreferredHeight() != startHeight)) {
		    // Adjust the Y origin of any nodes following this row.
		    if(!isFixed && ++i < getRowCount()) {
			int              counter;
			int              heightDiff = newYOrigin -
			    (getYOrigin() + getPreferredHeight()) +
			    (getPreferredHeight() - startHeight);

			for(counter = visibleNodes.size() - 1;counter >= i;
			    counter--)
			    ((TreeStateNode)visibleNodes.elementAt(counter)).
				shiftYOriginBy(heightDiff);
		    }
		    didAdjustTree();
		    visibleNodesChanged();
		}

		// Update the rows in the selection
		if(treeSelectionModel != null) {
		    treeSelectionModel.resetRowSelection();
		}
	    }
!!!10070043.java!!!	collapse(inout adjustTree : boolean) : void
	    if (isExpanded()) {
		Enumeration cursor = preorderEnumeration();
		cursor.nextElement(); // don't remove me, I'm still visible
		int rowsDeleted = 0;
		boolean isFixed = isFixedRowHeight();
		int lastYEnd;
		if(isFixed)
		    lastYEnd = 0;
		else
		    lastYEnd = getPreferredHeight() + getYOrigin();
		int startHeight = getPreferredHeight();
		int startYEnd = lastYEnd;
		int myRow = getRow();

		if(!isFixed) {
		    while(cursor.hasMoreElements()) {
			TreeStateNode node = (TreeStateNode)cursor.
			    nextElement();
			if (node.isVisible()) {
			    rowsDeleted++;
			    //visibleNodes.removeElement(node);
			    lastYEnd = node.getYOrigin() +
				node.getPreferredHeight();
			}
		    }
		}
		else {
		    while(cursor.hasMoreElements()) {
			TreeStateNode node = (TreeStateNode)cursor.
			    nextElement();
			if (node.isVisible()) {
			    rowsDeleted++;
			    //visibleNodes.removeElement(node);
			}
		    }
		}

		// Clean up the visible nodes.
		for (int counter = rowsDeleted + myRow; counter > myRow;
		     counter--) {
		    visibleNodes.removeElementAt(counter);
		}

		expanded = false;

		if(myRow == -1)
		    markSizeInvalid();
		else if (adjustTree)
		    updatePreferredSize(myRow);

		if(myRow != -1 && adjustTree &&
		   (rowsDeleted > 0 || startHeight != getPreferredHeight())) {
		    // Adjust the Y origin of any rows following this one.
		    startYEnd += (getPreferredHeight() - startHeight);
		    if(!isFixed && (myRow + 1) < getRowCount() &&
		       startYEnd != lastYEnd) {
			int                 counter, maxCounter, shiftAmount;

			shiftAmount = startYEnd - lastYEnd;
			for(counter = myRow + 1, maxCounter =
				visibleNodes.size();
			    counter < maxCounter;counter++)
			    ((TreeStateNode)visibleNodes.elementAt(counter))
				.shiftYOriginBy(shiftAmount);
		    }
		    didAdjustTree();
		    visibleNodesChanged();
		}
 		if(treeSelectionModel != null && rowsDeleted > 0 &&
 		   myRow != -1) {
		    treeSelectionModel.resetRowSelection();
		}
	    }
!!!10070171.java!!!	removeFromMapping() : void
	    if(path != null) {
		removeMapping(this);
		for(int counter = getChildCount() - 1; counter >= 0; counter--)
		    ((TreeStateNode)getChildAt(counter)).removeFromMapping();
	    }
