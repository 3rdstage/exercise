class FairSync
!!!8000155.java!!!	tryAcquire(in acquires : int) : boolean
 
            // mask out readlocks if called from condition methods
            acquires = exclusiveCount(acquires);
            Thread current = Thread.currentThread();
            Thread first;
            int c = getState();
            int w = exclusiveCount(c);
            if (w + acquires >= SHARED_UNIT)
                throw new Error("Maximum lock count exceeded");
            if ((w == 0 || current != owner) &&
                (c != 0 || 
                 ((first = getFirstQueuedThread()) != null && 
                  first != current)))
                return false;
            if (!compareAndSetState(c, c + acquires)) 
                return false;
            owner = current;
            return true;
!!!8000283.java!!!	tryAcquireShared(in acquires : int) : int
            Thread current = Thread.currentThread();
            for (;;) {
                int c = getState();
                if (exclusiveCount(c) != 0) {
                    if (owner != current)
                        return -1;
                } else {
		    Thread first = getFirstQueuedThread();
		    if (first != null && first != current)
			return -1;
		}
                int nextc = c + (acquires << SHARED_SHIFT);
                if (nextc < c)
                    throw new Error("Maximum lock count exceeded");
                if (compareAndSetState(c, nextc))
                    return 1;
                // Recheck count if lost CAS
            }
!!!8000411.java!!!	wlock() : void
 // no fast path
            acquire(1);
