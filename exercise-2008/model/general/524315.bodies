class JMXConnectorServer
!!!8402075.java!!!	JMXConnectorServer()
	this(null);
!!!8402203.java!!!	JMXConnectorServer(inout mbeanServer : MBeanServer)
	this.mbeanServer = mbeanServer;
!!!8402331.java!!!	getMBeanServer() : MBeanServer
	return mbeanServer;
!!!8402459.java!!!	setMBeanServerForwarder(inout mbsf : MBeanServerForwarder) : void
	if (mbsf == null) 
	    throw new IllegalArgumentException("Invalid null argument: mbsf");

        if (mbeanServer !=  null) mbsf.setMBeanServer(mbeanServer);
        mbeanServer = mbsf;
!!!8402587.java!!!	getConnectionIds() : String
	synchronized (connectionIds) {
	    return (String[])
		connectionIds.toArray(new String[connectionIds.size()]);
	}
!!!8402715.java!!!	toJMXConnector(inout env : Map) : JMXConnector
	if (!isActive()) throw new 
	    IllegalStateException("Connector is not active");
	JMXServiceURL addr = getAddress();
	return JMXConnectorFactory.newJMXConnector(addr, env);
!!!8402843.java!!!	getNotificationInfo() : MBeanNotificationInfo
	final String[] types = {
	    JMXConnectionNotification.OPENED,
	    JMXConnectionNotification.CLOSED,
	    JMXConnectionNotification.FAILED,
	};
	final String className = JMXConnectionNotification.class.getName();
	final String description =
	    "A client connection has been opened or closed";
	return new MBeanNotificationInfo[] {
	    new MBeanNotificationInfo(types, className, description),
	};
!!!8402971.java!!!	connectionOpened(in connectionId : String, in message : String, inout userData : Object) : void

	if (connectionId == null)
	    throw new NullPointerException("Illegal null argument");

	synchronized (connectionIds) {
	    connectionIds.add(connectionId);
	}

	sendNotification(JMXConnectionNotification.OPENED, connectionId,
			 message, userData);
!!!8403099.java!!!	connectionClosed(in connectionId : String, in message : String, inout userData : Object) : void

	if (connectionId == null)
	    throw new NullPointerException("Illegal null argument");

	synchronized (connectionIds) {
	    connectionIds.remove(connectionId);
	}

	sendNotification(JMXConnectionNotification.CLOSED, connectionId,
			 message, userData);
!!!8403227.java!!!	connectionFailed(in connectionId : String, in message : String, inout userData : Object) : void

	if (connectionId == null)
	    throw new NullPointerException("Illegal null argument");

	synchronized (connectionIds) {
	    connectionIds.remove(connectionId);
	}

	sendNotification(JMXConnectionNotification.FAILED, connectionId,
			 message, userData);
!!!8403355.java!!!	sendNotification(in type : String, in connectionId : String, in message : String, inout userData : Object) : void
	Notification notif =
	    new JMXConnectionNotification(type,
					  getNotificationSource(),
					  connectionId,
					  nextSequenceNumber(),
					  message,
					  userData);
	sendNotification(notif);
!!!8403483.java!!!	getNotificationSource() : Object
	if (myName != null)
	    return myName;
	else
	    return this;
!!!8403611.java!!!	nextSequenceNumber() : long
	synchronized (sequenceNumberLock) {
	    return sequenceNumber++;
	}
!!!8403739.java!!!	preRegister(inout mbs : MBeanServer, inout name : ObjectName) : ObjectName
	if (mbs == null || name == null)
	    throw new NullPointerException("Null MBeanServer or ObjectName");
	if (mbeanServer == null) {
	    mbeanServer = mbs;
	    myName = name;
	}
	return name;
!!!8403867.java!!!	postRegister(inout registrationDone : Boolean) : void
	// do nothing
!!!8403995.java!!!	preDeregister() : void
	if (myName != null && isActive()) {
	    stop();
	    myName = null; // just in case stop is buggy and doesn't stop
	}
!!!8404123.java!!!	postDeregister() : void
	myName = null;
