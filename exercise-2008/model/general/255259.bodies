class CondVar
!!!1509787.java!!!	releaseMutex() : int
	int count = 1 ;

	if (remutex_!=null) 
	    count = remutex_.releaseAll() ;
	else
	    mutex_.release() ;

	return count ;
!!!1509915.java!!!	acquireMutex(in count : int) : void
	if (remutex_!=null)
	    remutex_.acquireAll( count ) ;
	else
	    mutex_.acquire() ;
!!!1510043.java!!!	CondVar(inout mutex : Sync, inout debug : boolean)
    debug_ = debug ;
    mutex_ = mutex;
    if (mutex instanceof ReentrantMutex)
	remutex_ = (ReentrantMutex)mutex;
    else 
	remutex_ = null;
!!!1510171.java!!!	CondVar(inout mutex : Sync)
      this( mutex, false ) ;
!!!1510299.java!!!	await() : void
	int count = 0 ;
	if (Thread.interrupted()) 
	    throw new InterruptedException();

	try {
	    if (debug_)
		ORBUtility.dprintTrace( this, "await enter" ) ;

	    synchronized(this) {
		count = releaseMutex() ;
		try {
		    wait(); 
		} catch (InterruptedException ex) {
		    notify();
		    throw ex;
		}
	    }
	} finally { 
	    // Must ignore interrupt on re-acquire
	    boolean interrupted = false;
	    for (;;) {
		try {
		    acquireMutex( count );
		    break;
		} catch (InterruptedException ex) {
		    interrupted = true;
		}
	    }

	    if (interrupted) {
		Thread.currentThread().interrupt();
	    }

	    if (debug_)
		ORBUtility.dprintTrace( this, "await exit" ) ;
	}
!!!1510427.java!!!	timedwait(in msecs : long) : boolean

	if (Thread.interrupted()) 
	    throw new InterruptedException();

	boolean success = false;
	int count = 0;

	try {
	    if (debug_)
		ORBUtility.dprintTrace( this, "timedwait enter" ) ;

	    synchronized(this) {
		count = releaseMutex() ;
		try {
		    if (msecs > 0) {
			long start = System.currentTimeMillis();
			wait(msecs); 
			success = System.currentTimeMillis() - start <= msecs;
		    }
		} catch (InterruptedException ex) {
		    notify();
		    throw ex;
		}
	    }
	} finally {
	    // Must ignore interrupt on re-acquire
	    boolean interrupted = false;
	    for (;;) {
		try {
		    acquireMutex( count ) ;
		    break;
		} catch (InterruptedException ex) {
		    interrupted = true;
		}
	    }

	    if (interrupted) {
		Thread.currentThread().interrupt();
	    }

	    if (debug_)
		ORBUtility.dprintTrace( this, "timedwait exit" ) ;
	}
	return success;
!!!1510555.java!!!	signal() : void
	notify();
!!!1510683.java!!!	broadcast() : void
	notifyAll();
