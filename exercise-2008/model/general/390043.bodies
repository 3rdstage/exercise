class GTKIconFactory
!!!2251931.java!!!	getTreeExpandedIcon() : SynthIcon
        if (expandedIcon == null) {
            expandedIcon =
                new SynthExpanderIcon("paintTreeExpandedIcon");
        }
        return expandedIcon;
!!!2252059.java!!!	paintTreeExpandedIcon(inout context : SynthContext, inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        ((GTKStyle)context.getStyle()).getEngine(context).paintExpander(
               context, g, GTKLookAndFeel.synthStateToGTKState(
               context.getRegion(), context.getComponentState()),
               GTKConstants.EXPANDER_EXPANDED, "treeview", x, y, w, h);
!!!2252187.java!!!	getTreeCollapsedIcon() : SynthIcon
        if (collapsedIcon == null) {
            collapsedIcon =
                new SynthExpanderIcon("paintTreeCollapsedIcon");
        }
        return collapsedIcon;
!!!2252315.java!!!	paintTreeCollapsedIcon(inout context : SynthContext, inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        ((GTKStyle)context.getStyle()).getEngine(context).paintExpander(
               context, g, GTKLookAndFeel.synthStateToGTKState(
               context.getRegion(), context.getComponentState()),
               GTKConstants.EXPANDER_COLLAPSED, "treeview", x, y, w, h);
!!!2252443.java!!!	getRadioButtonIcon() : SynthIcon
        if (radioButtonIcon == null) {
            radioButtonIcon = new DelegatingIcon("paintRadioButtonIcon",
                                                 13, 13);
        }
        return radioButtonIcon;
!!!2252571.java!!!	paintRadioButtonIcon(inout context : SynthContext, inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        GTKStyle style = (GTKStyle)context.getStyle();
        int state = context.getComponentState();
        int gtkState = GTKLookAndFeel.synthStateToGTKState(context.getRegion(),
                                                           state);
        int shadowType = GTKConstants.SHADOW_OUT;
        // RadioButton painting appears to be special cased to pass
        // SELECTED into the engine even though text colors are PRESSED.
        if ((state & SynthConstants.SELECTED) != 0) {
            gtkState = SynthConstants.SELECTED;
        }
        if (gtkState == SynthConstants.SELECTED) {
            shadowType = GTKConstants.SHADOW_IN;
        }
        ((GTKStyle)context.getStyle()).getEngine(
                context).paintOption(context, g, gtkState, shadowType,
                    "radiobutton", x, y, w, h);
!!!2252699.java!!!	getCheckBoxIcon() : SynthIcon
        if (checkBoxIcon == null) {
            checkBoxIcon = new DelegatingIcon("paintCheckBoxIcon", 13, 13);
        }
        return checkBoxIcon;
!!!2252827.java!!!	paintCheckBoxIcon(inout context : SynthContext, inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        GTKStyle style = (GTKStyle)context.getStyle();
        int state = context.getComponentState();
        int shadowType = GTKConstants.SHADOW_OUT;
        if (((JCheckBox)context.getComponent()).isSelected()) {
            shadowType = GTKConstants.SHADOW_IN;
        }
        ((GTKStyle)context.getStyle()).getEngine(
                context).paintCheck(context, g,
                GTKLookAndFeel.synthStateToGTKState(context.getRegion(),
                context.getComponentState()), shadowType, "checkbutton",
                x, y, w, h);
!!!2252955.java!!!	getMenuArrowIcon() : SynthIcon
        if (menuArrowIcon == null) {
            menuArrowIcon = new DelegatingIcon("paintMenuArrowIcon", 13, 13);
        }
        return menuArrowIcon;
!!!2253083.java!!!	paintMenuArrowIcon(inout context : SynthContext, inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        GTKStyle style = (GTKStyle)context.getStyle();
        int gtkState = GTKLookAndFeel.synthStateToGTKState(
                context.getRegion(), context.getComponentState());
        int shadow = GTKConstants.SHADOW_OUT;
        if (gtkState == SynthConstants.MOUSE_OVER) {
            shadow = GTKConstants.SHADOW_IN;
        }
        int arrowDir;
        if (context.getComponent().getComponentOrientation().isLeftToRight()) {
            arrowDir = GTKConstants.ARROW_RIGHT;
        }
        else {
            arrowDir = GTKConstants.ARROW_LEFT;
        }
        style.getEngine(context).paintArrow(context, g, gtkState,
             shadow, arrowDir, "menuitem", x + 3, y + 3, 7, 7);
!!!2253211.java!!!	getMenuItemArrowIcon() : SynthIcon
        if (menuItemArrowIcon == null) {
            menuItemArrowIcon = new DelegatingIcon("paintMenuItemArrowIcon",
                                                   13, 13);
        }
        return menuItemArrowIcon;
!!!2253339.java!!!	paintMenuItemArrowIcon(inout context : SynthContext, inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        // Don't paint anything.  We are just reserving space so we align the
        // menu items correctly.
!!!2253467.java!!!	getCheckBoxMenuItemArrowIcon() : SynthIcon
        if (checkBoxMenuItemArrowIcon == null) {
            checkBoxMenuItemArrowIcon = new DelegatingIcon(
                "paintCheckBoxMenuItemArrowIcon", 13, 13);
        }
        return checkBoxMenuItemArrowIcon;
!!!2253595.java!!!	paintCheckBoxMenuItemArrowIcon(inout context : SynthContext, inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        // Don't paint anything.  We are just reserving space so we align the
        // menu items correctly.
!!!2253723.java!!!	getCheckBoxMenuItemCheckIcon() : SynthIcon
        if (checkBoxMenuItemCheckIcon == null) {
            checkBoxMenuItemCheckIcon = new DelegatingIcon(
                "paintCheckBoxMenuItemCheckIcon", 13, 13);
        }
        return checkBoxMenuItemCheckIcon;
!!!2253851.java!!!	paintCheckBoxMenuItemCheckIcon(inout context : SynthContext, inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        GTKStyle style = (GTKStyle)context.getStyle();
        int state = context.getComponentState();
        int shadowType = GTKConstants.SHADOW_OUT;
        int gtkState = GTKLookAndFeel.synthStateToGTKState(
                                      context.getRegion(), state);
        if ((state & SynthConstants.MOUSE_OVER) != 0) {
            gtkState = SynthConstants.MOUSE_OVER;
        }
        if ((state & SynthConstants.SELECTED) != 0) {
            shadowType = GTKConstants.SHADOW_IN;
        }
        style.getEngine(context).paintCheck(context, g, gtkState,
                    shadowType, "check", x, y, w, h);
!!!2253979.java!!!	getRadioButtonMenuItemArrowIcon() : SynthIcon
        if (radioButtonMenuItemArrowIcon == null) {
            radioButtonMenuItemArrowIcon = new DelegatingIcon(
                "paintRadioButtonMenuItemArrowIcon", 13, 13);
        }
        return radioButtonMenuItemArrowIcon;
!!!2254107.java!!!	paintRadioButtonMenuItemArrowIcon(inout context : SynthContext, inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        // Don't paint anything.  We are just reserving space so we align the
        // menu items correctly.
!!!2254235.java!!!	getRadioButtonMenuItemCheckIcon() : SynthIcon
        if (radioButtonMenuItemCheckIcon == null) {
            radioButtonMenuItemCheckIcon = new DelegatingIcon(
                "paintRadioButtonMenuItemCheckIcon", 13, 13);
        }
        return radioButtonMenuItemCheckIcon;
!!!2254363.java!!!	paintRadioButtonMenuItemCheckIcon(inout context : SynthContext, inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        GTKStyle style = (GTKStyle)context.getStyle();
        int state = context.getComponentState();
        int gtkState = GTKLookAndFeel.synthStateToGTKState(
                                      context.getRegion(), state);
        if ((state & SynthConstants.MOUSE_OVER) != 0) {
            gtkState = SynthConstants.MOUSE_OVER;
        }
        int shadowType = GTKConstants.SHADOW_OUT;
        if ((state & SynthConstants.SELECTED) != 0) {
            shadowType = GTKConstants.SHADOW_IN;
        }
        ((GTKStyle)context.getStyle()).getEngine(
                context).paintOption(context, g, gtkState, shadowType,
                    "option", x, y, w, h);
!!!2254491.java!!!	getToolBarHandleIcon() : SynthIcon
        return new ToolBarHandleIcon();
!!!2254619.java!!!	paintToolBarHandleIcon(inout context : SynthContext, inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        int orientation =
            ((JToolBar)context.getComponent()).getOrientation() ==
                JToolBar.HORIZONTAL ?
                    GTKConstants.HORIZONTAL : GTKConstants.VERTICAL;
        GTKStyle style = (GTKStyle)context.getStyle();
        int gtkState = GTKLookAndFeel.synthStateToGTKState(
                context.getRegion(), context.getComponentState());
        style.getEngine(context).paintHandle(context, g, gtkState,
                    GTKConstants.SHADOW_OUT, "handlebox", x, y, w, h,
                    orientation);
