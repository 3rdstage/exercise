class PageAttributes
!!!6328731.java!!!	PageAttributes()
        setColor(ColorType.MONOCHROME);
	setMediaToDefault();
	setOrientationRequestedToDefault();
	setOrigin(OriginType.PHYSICAL);
	setPrintQualityToDefault();
	setPrinterResolutionToDefault();
!!!6328859.java!!!	PageAttributes(inout obj : PageAttributes)
        set(obj);
!!!6328987.java!!!	PageAttributes(inout color : ColorType, inout media : MediaType, inout orientationRequested : OrientationRequestedType, inout origin : OriginType, inout printQuality : PrintQualityType, in printerResolution : int)
        setColor(color);
	setMedia(media);
	setOrientationRequested(orientationRequested);
	setOrigin(origin);
	setPrintQuality(printQuality);
	setPrinterResolution(printerResolution);
!!!6329115.java!!!	clone() : Object
        try {
	    return super.clone();
	} catch (CloneNotSupportedException e) {
	    // Since we implement Cloneable, this should never happen
	    throw new InternalError();
	}
!!!6329243.java!!!	set(inout obj : PageAttributes) : void
        color = obj.color;
	media = obj.media;
	orientationRequested = obj.orientationRequested;
	origin = obj.origin;
	printQuality = obj.printQuality;
	// okay because we never modify the contents of printerResolution
	printerResolution = obj.printerResolution;
!!!6329371.java!!!	getColor() : ColorType
        return color;
!!!6329499.java!!!	setColor(inout color : ColorType) : void
        if (color == null) {
	    throw new IllegalArgumentException("Invalid value for attribute "+
					       "color");
	}
        this.color = color;
!!!6329627.java!!!	getMedia() : MediaType
        return media;
!!!6329755.java!!!	setMedia(inout media : MediaType) : void
        if (media == null) {
	    throw new IllegalArgumentException("Invalid value for attribute "+
					       "media");
	}
        this.media = media;
!!!6329883.java!!!	setMediaToDefault() : void
	String defaultCountry = Locale.getDefault().getCountry();
	if (defaultCountry != null &&
	    (defaultCountry.equals(Locale.US.getCountry()) ||
	     defaultCountry.equals(Locale.CANADA.getCountry()))) {
	    setMedia(MediaType.NA_LETTER);
	} else {
	    setMedia(MediaType.ISO_A4);
	}
!!!6330011.java!!!	getOrientationRequested() : OrientationRequestedType
        return orientationRequested;
!!!6330139.java!!!	setOrientationRequested(inout orientationRequested : OrientationRequestedType) : void
        if (orientationRequested == null) {
	    throw new IllegalArgumentException("Invalid value for attribute "+
					       "orientationRequested");
	}
        this.orientationRequested = orientationRequested;
!!!6330267.java!!!	setOrientationRequested(in orientationRequested : int) : void
        switch (orientationRequested) {
	  case 3:
	    setOrientationRequested(OrientationRequestedType.PORTRAIT);
	    break;
	  case 4:
	    setOrientationRequested(OrientationRequestedType.LANDSCAPE);
	    break;
	  default:
	    // This will throw an IllegalArgumentException
	    setOrientationRequested(null);
	    break;
	}
!!!6330395.java!!!	setOrientationRequestedToDefault() : void
        setOrientationRequested(OrientationRequestedType.PORTRAIT);
!!!6330523.java!!!	getOrigin() : OriginType
        return origin;
!!!6330651.java!!!	setOrigin(inout origin : OriginType) : void
        if (origin == null) {
	    throw new IllegalArgumentException("Invalid value for attribute "+
					       "origin");
	}
        this.origin = origin;
!!!6330779.java!!!	getPrintQuality() : PrintQualityType
        return printQuality;
!!!6330907.java!!!	setPrintQuality(inout printQuality : PrintQualityType) : void
        if (printQuality == null) {
	    throw new IllegalArgumentException("Invalid value for attribute "+
					       "printQuality");
	}
        this.printQuality = printQuality;
!!!6331035.java!!!	setPrintQuality(in printQuality : int) : void
        switch (printQuality) {
	  case 3:
	    setPrintQuality(PrintQualityType.DRAFT);
	    break;
	  case 4:
	    setPrintQuality(PrintQualityType.NORMAL);
	    break;
	  case 5:
	    setPrintQuality(PrintQualityType.HIGH);
	    break;
	  default:
	    // This will throw an IllegalArgumentException
	    setPrintQuality(null);
	    break;
	}
!!!6331163.java!!!	setPrintQualityToDefault() : void
        setPrintQuality(PrintQualityType.NORMAL);
!!!6331291.java!!!	getPrinterResolution() : int
        // Return a copy because otherwise client code could circumvent the
        // the checks made in setPrinterResolution by modifying the
        // returned array.
        int[] copy = new int[3];
	copy[0] = printerResolution[0];
	copy[1] = printerResolution[1];
	copy[2] = printerResolution[2];
        return copy;
!!!6331419.java!!!	setPrinterResolution(in printerResolution : int) : void
        if (printerResolution == null ||
	    printerResolution.length != 3 ||
	    printerResolution[0] <= 0 ||
	    printerResolution[1] <= 0 ||
	    (printerResolution[2] != 3 && printerResolution[2] != 4)) {
	    throw new IllegalArgumentException("Invalid value for attribute "+
					       "printerResolution");
	}
        // Store a copy because otherwise client code could circumvent the
        // the checks made above by holding a reference to the array and
	// modifying it after calling setPrinterResolution.
	int[] copy = new int[3];
	copy[0] = printerResolution[0];
	copy[1] = printerResolution[1];
	copy[2] = printerResolution[2];
	this.printerResolution = copy;
!!!6331547.java!!!	setPrinterResolution(in printerResolution : int) : void
        setPrinterResolution(new int[] { printerResolution, printerResolution,
					 3 } );
!!!6331675.java!!!	setPrinterResolutionToDefault() : void
        setPrinterResolution(72);
!!!6331803.java!!!	equals(inout obj : Object) : boolean
        if (!(obj instanceof PageAttributes)) {
	    return false;
	}

	PageAttributes rhs = (PageAttributes)obj;

	return (color == rhs.color &&
		media == rhs.media &&
		orientationRequested == rhs.orientationRequested &&
		origin == rhs.origin &&
		printQuality == rhs.printQuality &&
		printerResolution[0] == rhs.printerResolution[0] &&
		printerResolution[1] == rhs.printerResolution[1] &&
		printerResolution[2] == rhs.printerResolution[2]);
!!!6331931.java!!!	hashCode() : int
        return (color.hashCode() << 31 ^
		media.hashCode() << 24 ^
		orientationRequested.hashCode() << 23 ^
		origin.hashCode() << 22 ^
		printQuality.hashCode() << 20 ^
		printerResolution[2] >> 2 << 19 ^
		printerResolution[1] << 10 ^
		printerResolution[0]);
!!!6332059.java!!!	toString() : String
        // int[] printerResolution = getPrinterResolution();
        return "color=" + getColor() + ",media=" + getMedia() +
	    ",orientation-requested=" + getOrientationRequested() +
	    ",origin=" + getOrigin() + ",print-quality=" + getPrintQuality() +
	    ",printer-resolution=[" + printerResolution[0] + "," +
	    printerResolution[1] + "," + printerResolution[2] + "]";
