format 66
"logging" // src::java::util::logging
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/util/logging"
  java_package "java.util.logging"
  classview 142235 "logging"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 241563 "Logger"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A Logger object is used to log messages for a specific
system or application component.  Loggers are normally named,
using a hierarchical dot-separated namespace.  Logger names
can be arbitrary strings, but they should normally be based on
the package name or class name of the logged component, such
as java.net or javax.swing.  In addition it is possible to create
\"anonymous\" Loggers that are not stored in the Logger namespace.
<p>
Logger objects may be obtained by calls on one of the getLogger
factory methods.  These will either create a new Logger or
return a suitable existing Logger.
<p>
Logging messages will be forwarded to registered Handler
objects, which can forward the messages to a variety of
destinations, including consoles, files, OS logs, etc.
<p>
Each Logger keeps track of a \"parent\" Logger, which is its
nearest existing ancestor in the Logger namespace.
<p>
Each Logger has a \"Level\" associated with it.  This reflects
a minimum Level that this logger cares about.  If a Logger's
level is set to <tt>null</tt>, then its effective level is inherited
from its parent, which may in turn obtain it recursively from its
parent, and so on up the tree.
<p>
The log level can be configured based on the properties from the
logging configuration file, as described in the description
of the LogManager class.  However it may also be dynamically changed
by calls on the Logger.setLevel method.  If a logger's level is
changed the change may also affect child loggers, since any child
logger that has <tt>null</tt> as its level will inherit its
effective level from its parent.
<p>
On each logging call the Logger initially performs a cheap
check of the request level (e.g. SEVERE or FINE) against the
effective log level of the logger.  If the request level is
lower than the log level, the logging call returns immediately.
<p>
After passing this initial (cheap) test, the Logger will allocate
a LogRecord to describe the logging message.  It will then call a 
Filter (if present) to do a more detailed check on whether the
record should be published.  If that passes it will then publish
the LogRecord to its output Handlers.  By default, loggers also
publish to their parent's Handlers, recursively up the tree.
<p>
Each Logger may have a ResourceBundle name associated with it.
The named bundle will be used for localizing logging messages.
If a Logger does not have its own ResourceBundle name, then
it will inherit the ResourceBundle name from its parent,
recursively up the tree.
<p>
Most of the logger output methods take a \"msg\" argument.  This
msg argument may be either a raw value or a localization key.
During formatting, if the logger has (or inherits) a localization
ResourceBundle and if the ResourceBundle has a mapping for the msg
string, then the msg string is replaced by the localized value.
Otherwise the original msg string is used.  Typically, formatters use
java.text.MessageFormat style formatting to format parameters, so
for example a format string \"{0} {1}\" would format two parameters
as strings.
<p>
When mapping ResourceBundle names to ResourceBundles, the Logger
will first try to use the Thread's ContextClassLoader.  If that
is null it will try the SystemClassLoader instead.  As a temporary
transition feature in the initial implementation, if the Logger is
unable to locate a ResourceBundle from the ContextClassLoader or
SystemClassLoader the Logger will also search up the class stack
and use successive calling ClassLoaders to try to locate a ResourceBundle.
(This call stack search is to allow containers to transition to
using ContextClassLoaders and is likely to be removed in future
versions.)
<p>
Formatting (including localization) is the responsibility of
the output Handler, which will typically call a Formatter.
<p>
Note that formatting need not occur synchronously.  It may be delayed
until a LogRecord is actually written to an external sink.
<p>
The logging methods are grouped in five main categories:
<ul>
<li><p>
    There are a set of \"log\" methods that take a log level, a message
    string, and optionally some parameters to the message string.
<li><p>
    There are a set of \"logp\" methods (for \"log precise\") that are
    like the \"log\" methods, but also take an explicit source class name
    and method name.
<li><p>
    There are a set of \"logrb\" method (for \"log with resource bundle\")
    that are like the \"logp\" method, but also take an explicit resource
    bundle name for use in localizing the log message.
<li><p>
    There are convenience methods for tracing method entries (the
    \"entering\" methods), method returns (the \"exiting\" methods) and
    throwing exceptions (the \"throwing\" methods).
<li><p>
    Finally, there are a set of convenience methods for use in the
    very simplest cases, when a developer simply wants to log a
    simple string at a given log level.  These methods are named
    after the standard Level names (\"severe\", \"warning\", \"info\", etc.)
    and take a single argument, a message string.
</ul>
<p>
For the methods that do not take an explicit source name and
method name, the Logging framework will make a \"best effort\"
to determine which class and method called into the logging method.
However, it is important to realize that this automatically inferred
information may only be approximate (or may even be quite wrong!).
Virtual machines are allowed to do extensive optimizations when
JITing and may entirely remove stack frames, making it impossible
to reliably locate the calling class and method.
<P>
All methods on Logger are multi-thread safe.
<p>
<b>Subclassing Information:</b> Note that a LogManager class may
provide its own implementation of named Loggers for any point in
the namespace.  Therefore, any subclasses of Logger (unless they
are implemented in conjunction with a new LogManager class) should
take care to obtain a Logger instance from the LogManager class and
should delegate operations such as \"isLoggable\" and \"log(LogRecord)\"
to that instance.  Note that in order to intercept all logging
output, subclasses need only override the log(LogRecord) method.
All the other logging methods are implemented as calls on this
log(LogRecord) method.

@version 1.46, 04/12/06
@since 1.4"
      classrelation 1967643 // emptyHandlers (<unidirectional association>)
	relation 1967643 --->
	  a role_name "emptyHandlers" multiplicity "[]" init_value "=  new Handler[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1967643 // emptyHandlers (<unidirectional association>)
	  b parent class_ref 1006491 // Handler
      end

      attribute 2965147 "offValue"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  Level.OFF.intValue()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1967771 // manager (<unidirectional association>)
	relation 1967771 --->
	  a role_name "manager" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1967771 // manager (<unidirectional association>)
	  b parent class_ref 939035 // LogManager
      end

      attribute 2965275 "name"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1967899 // handlers (<unidirectional association>)
	relation 1967899 --->
	  a role_name "handlers" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1967899 // handlers (<unidirectional association>)
	  b parent class_ref 137627 // ArrayList
      end

      attribute 2965403 "resourceBundleName"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2965531 "useParentHandlers"
	private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1968027 // filter (<unidirectional association>)
	relation 1968027 --->
	  a role_name "filter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1968027 // filter (<unidirectional association>)
	  b parent class_ref 1006619 // Filter
      end

      attribute 2965659 "anonymous"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1968155 // catalog (<unidirectional association>)
	relation 1968155 --->
	  a role_name "catalog" private
	    comment " Cached resource bundle"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1968155 // catalog (<unidirectional association>)
	  b parent class_ref 153371 // ResourceBundle
      end

      attribute 2965787 "catalogName"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " name associated with catalog"
      end

      classrelation 1968283 // catalogLocale (<unidirectional association>)
	relation 1968283 --->
	  a role_name "catalogLocale" private
	    comment " locale associated with catalog"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1968283 // catalogLocale (<unidirectional association>)
	  b parent class_ref 138907 // Locale
      end

      attribute 2965915 "treeLock"
	class_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The fields relating to parent-child relationships and levels
 are managed under a separate lock, the treeLock."
      end

      classrelation 1968411 // parent (<unidirectional association>)
	relation 1968411 --->
	  a role_name "parent" private
	    comment " We keep weak references from parents to children, but strong
 references from children to parents.
 our nearest parent."
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1968411 // parent (<unidirectional association>)
	  b parent class_ref 241563 // Logger
      end

      classrelation 1968539 // kids (<unidirectional association>)
	relation 1968539 --->
	  a role_name "kids" private
	    comment " WeakReferences to loggers that have us as parent"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1968539 // kids (<unidirectional association>)
	  b parent class_ref 137627 // ArrayList
      end

      classrelation 1968667 // levelObject (<unidirectional association>)
	relation 1968667 --->
	  a role_name "levelObject" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1968667 // levelObject (<unidirectional association>)
	  b parent class_ref 241691 // Level
      end

      attribute 2966043 "levelValue"
	volatile private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " current effective level value"
      end

      classrelation 1968795 // global (<unidirectional association>)
	relation 1968795 --->
	  a role_name "global" init_value "=  new Logger(\"global\")" class_relation const_relation public
	    comment "
The \"global\" Logger object is provided as a convenience to developers
who are making casual use of the Logging package.  Developers
who are making serious use of the logging package (for example
in products) should create and use their own Logger objects,
with appropriate names, so that logging can be controlled on a
suitable per-Logger granularity.
<p>
The global logger is initialized by calling Logger.getLogger(\"global\").

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1968795 // global (<unidirectional association>)
	  b parent class_ref 241563 // Logger
      end

      operation 8047387 "Logger"
	protected explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "resourceBundleName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected method to construct a logger for a named subsystem.
<p>
The logger will be initially configured with a null Level
and with useParentHandlers true.

@param	name	A name for the logger.  This should
				be a dot-separated name and should normally
				be based on the package name or class name
				of the subsystem, such as java.net
				or javax.swing.  It may be null for anonymous Loggers.
@param 	resourceBundleName  name of ResourceBundle to be used for localizing
				messages for this logger.  May be null if none
				of the messages require localization.
@throws MissingResourceException if the ResourceBundleName is non-null and
		   no corresponding resource can be found."
      end

      operation 8047515 "Logger"
	private explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This constructor is used only to create the global Logger.
 It is needed to break a cyclic dependence between the LogManager
 and Logger static initializers causing deadlocks."
      end

      operation 8047643 "setLogManager"
	package explicit_return_type "void"
	nparams 1
	  param inout name "manager" type class_ref 939035 // LogManager
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " It is called from the LogManager.<clinit> to complete
 initialization of the global Logger."
      end

      operation 8047771 "checkAccess"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8047899 "getLogger"
	class_operation public return_type class_ref 241563 // Logger
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find or create a logger for a named subsystem.  If a logger has
already been created with the given name it is returned.  Otherwise
a new logger is created.
<p>
If a new logger is created its log level will be configured
based on the LogManager configuration and it will configured
to also send logging output to its parent's handlers.  It will
be registered in the LogManager global namespace.

@param	name		A name for the logger.  This should
				be a dot-separated name and should normally
				be based on the package name or class name
				of the subsystem, such as java.net
				or javax.swing
@return a suitable Logger
@throws NullPointerException if the name is null."
      end

      operation 8048027 "getLogger"
	class_operation public return_type class_ref 241563 // Logger
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "resourceBundleName" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find or create a logger for a named subsystem.  If a logger has 
already been created with the given name it is returned.  Otherwise
a new logger is created.
<p>
If a new logger is created its log level will be configured
based on the LogManager and it will configured to also send logging
output to its parent loggers Handlers.  It will be registered in
the LogManager global namespace.
<p>
If the named Logger already exists and does not yet have a
localization resource bundle then the given resource bundle 
name is used.  If the named Logger already exists and has
a different resource bundle name then an IllegalArgumentException
is thrown.
<p>
@param	name	A name for the logger.  This should
				be a dot-separated name and should normally
				be based on the package name or class name
				of the subsystem, such as java.net
				or javax.swing
@param 	resourceBundleName  name of ResourceBundle to be used for localizing
				messages for this logger. May be <CODE>null</CODE> if none of 
				the messages require localization.
@return a suitable Logger
@throws MissingResourceException if the named ResourceBundle cannot be found.
@throws IllegalArgumentException if the Logger already exists and uses
		   a different resource bundle name.
@throws NullPointerException if the name is null."
      end

      operation 8048155 "getAnonymousLogger"
	class_operation public return_type class_ref 241563 // Logger
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an anonymous Logger.  The newly created Logger is not
registered in the LogManager namespace.  There will be no
access checks on updates to the logger.
<p>
This factory method is primarily intended for use from applets.
Because the resulting Logger is anonymous it can be kept private
by the creating class.  This removes the need for normal security
checks, which in turn allows untrusted applet code to update
the control state of the Logger.  For example an applet can do
a setLevel or an addHandler on an anonymous Logger.
<p>
Even although the new logger is anonymous, it is configured
to have the root logger (\"\") as its parent.  This means that
by default it inherits its effective level and handlers
from the root logger.
<p>

@return a newly created private Logger"
      end

      operation 8048283 "getAnonymousLogger"
	class_operation public return_type class_ref 241563 // Logger
	nparams 1
	  param in name "resourceBundleName" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an anonymous Logger.  The newly created Logger is not
registered in the LogManager namespace.  There will be no
access checks on updates to the logger.
<p>
This factory method is primarily intended for use from applets.
Because the resulting Logger is anonymous it can be kept private
by the creating class.  This removes the need for normal security
checks, which in turn allows untrusted applet code to update
the control state of the Logger.  For example an applet can do
a setLevel or an addHandler on an anonymous Logger.
<p>
Even although the new logger is anonymous, it is configured
to have the root logger (\"\") as its parent.  This means that
by default it inherits its effective level and handlers
from the root logger.
<p>
@param 	resourceBundleName  name of ResourceBundle to be used for localizing
				messages for this logger.
         May be null if none of the messages require localization.
@return a newly created private Logger
@throws MissingResourceException if the named ResourceBundle cannot be found."
      end

      operation 8048411 "getResourceBundle"
	public return_type class_ref 153371 // ResourceBundle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the localization resource bundle for this
logger for the current default locale.  Note that if
the result is null, then the Logger will use a resource 
bundle inherited from its parent.

@return localization bundle (may be null)"
      end

      operation 8048539 "getResourceBundleName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the localization resource bundle name for this
logger.  Note that if the result is null, then the Logger
will use a resource bundle name inherited from its parent.

@return localization bundle name (may be null)"
      end

      operation 8048667 "setFilter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newFilter" type class_ref 1006619 // Filter
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a filter to control output on this Logger.
<P>
After passing the initial \"level\" check, the Logger will
call this Filter to check if a log record should really
be published.

@param   newFilter  a filter object (may be null)
@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\")."
      end

      operation 8048795 "getFilter"
	public return_type class_ref 1006619 // Filter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current filter for this Logger.

@return  a filter object (may be null)"
      end

      operation 8048923 "log"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 241819 // LogRecord
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a LogRecord.
<p>
All the other logging methods in this class call through
this method to actually perform any logging.  Subclasses can
override this single method to capture all log activity.

@param record the LogRecord to be published"
      end

      operation 8049051 "doLog"
	private explicit_return_type "void"
	nparams 1
	  param inout name "lr" type class_ref 241819 // LogRecord
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " private support method for logging.
 We fill in the logger name, resource bundle name, and
 resource bundle and then call \"void log(LogRecord)\"."
      end

      operation 8049179 "log"
	public explicit_return_type "void"
	nparams 2
	  param inout name "level" type class_ref 241691 // Level
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Start of convenience methods WITHOUT className and methodName
================================================================

Log a message, with no arguments.
<p>
If the logger is currently enabled for the given message 
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param	level	One of the message level identifiers, e.g. SEVERE
@param   msg	The string message (or a key in the message catalog)"
      end

      operation 8049307 "log"
	public explicit_return_type "void"
	nparams 3
	  param inout name "level" type class_ref 241691 // Level
	  param in name "msg" explicit_type "String"
	  param inout name "param1" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, with one object parameter.
<p>
If the logger is currently enabled for the given message 
level then a corresponding LogRecord is created and forwarded 
to all the registered output Handler objects.
<p>
@param	level   One of the message level identifiers, e.g. SEVERE
@param   msg	The string message (or a key in the message catalog)
@param   param1	parameter to the message"
      end

      operation 8049435 "log"
	public explicit_return_type "void"
	nparams 3
	  param inout name "level" type class_ref 241691 // Level
	  param in name "msg" explicit_type "String"
	  param inout name "params" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, with an array of object arguments.
<p>
If the logger is currently enabled for the given message 
level then a corresponding LogRecord is created and forwarded 
to all the registered output Handler objects.
<p>
@param	level   One of the message level identifiers, e.g. SEVERE
@param   msg	The string message (or a key in the message catalog)
@param   params	array of parameters to the message"
      end

      operation 8049563 "log"
	public explicit_return_type "void"
	nparams 3
	  param inout name "level" type class_ref 241691 // Level
	  param in name "msg" explicit_type "String"
	  param inout name "thrown" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, with associated Throwable information.
<p>
If the logger is currently enabled for the given message 
level then the given arguments are stored in a LogRecord
which is forwarded to all registered output handlers.
<p>
Note that the thrown argument is stored in the LogRecord thrown
property, rather than the LogRecord parameters property.  Thus is it
processed specially by output Formatters and is not treated
as a formatting parameter to the LogRecord message property.
<p>
@param	level   One of the message level identifiers, e.g. SEVERE
@param   msg	The string message (or a key in the message catalog)
@param   thrown  Throwable associated with log message."
      end

      operation 8049691 "logp"
	public explicit_return_type "void"
	nparams 4
	  param inout name "level" type class_ref 241691 // Level
	  param in name "sourceClass" explicit_type "String"
	  param in name "sourceMethod" explicit_type "String"
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Start of convenience methods WITH className and methodName
================================================================

Log a message, specifying source class and method,
with no arguments.
<p>
If the logger is currently enabled for the given message 
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param	level	One of the message level identifiers, e.g. SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   msg	The string message (or a key in the message catalog)"
      end

      operation 8049819 "logp"
	public explicit_return_type "void"
	nparams 5
	  param inout name "level" type class_ref 241691 // Level
	  param in name "sourceClass" explicit_type "String"
	  param in name "sourceMethod" explicit_type "String"
	  param in name "msg" explicit_type "String"
	  param inout name "param1" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, specifying source class and method,
with a single object parameter to the log message.
<p>
If the logger is currently enabled for the given message 
level then a corresponding LogRecord is created and forwarded 
to all the registered output Handler objects.
<p>
@param	level   One of the message level identifiers, e.g. SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   msg	 The string message (or a key in the message catalog)
@param   param1    Parameter to the log message."
      end

      operation 8049947 "logp"
	public explicit_return_type "void"
	nparams 5
	  param inout name "level" type class_ref 241691 // Level
	  param in name "sourceClass" explicit_type "String"
	  param in name "sourceMethod" explicit_type "String"
	  param in name "msg" explicit_type "String"
	  param inout name "params" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, specifying source class and method,
with an array of object arguments.
<p>
If the logger is currently enabled for the given message 
level then a corresponding LogRecord is created and forwarded 
to all the registered output Handler objects.
<p>
@param	level   One of the message level identifiers, e.g. SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   msg	The string message (or a key in the message catalog)
@param   params	Array of parameters to the message"
      end

      operation 8050075 "logp"
	public explicit_return_type "void"
	nparams 5
	  param inout name "level" type class_ref 241691 // Level
	  param in name "sourceClass" explicit_type "String"
	  param in name "sourceMethod" explicit_type "String"
	  param in name "msg" explicit_type "String"
	  param inout name "thrown" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, specifying source class and method,
with associated Throwable information.
<p>
If the logger is currently enabled for the given message 
level then the given arguments are stored in a LogRecord
which is forwarded to all registered output handlers.
<p>
Note that the thrown argument is stored in the LogRecord thrown
property, rather than the LogRecord parameters property.  Thus is it
processed specially by output Formatters and is not treated
as a formatting parameter to the LogRecord message property.
<p>
@param	level   One of the message level identifiers, e.g. SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   msg	The string message (or a key in the message catalog)
@param   thrown  Throwable associated with log message."
      end

      operation 8050203 "doLog"
	private explicit_return_type "void"
	nparams 2
	  param inout name "lr" type class_ref 241819 // LogRecord
	  param in name "rbname" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "=========================================================================
 Start of convenience methods WITH className, methodName and bundle name.
=========================================================================
 Private support method for logging for \"logrb\" methods.
 We fill in the logger name, resource bundle name, and
 resource bundle and then call \"void log(LogRecord)\"."
      end

      operation 8050331 "logrb"
	public explicit_return_type "void"
	nparams 5
	  param inout name "level" type class_ref 241691 // Level
	  param in name "sourceClass" explicit_type "String"
	  param in name "sourceMethod" explicit_type "String"
	  param in name "bundleName" explicit_type "String"
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, specifying source class, method, and resource bundle name
with no arguments.
<p>
If the logger is currently enabled for the given message 
level then the given message is forwarded to all the
registered output Handler objects.
<p>
The msg string is localized using the named resource bundle.  If the
resource bundle name is null, or an empty String or invalid
then the msg string is not localized.
<p>
@param	level	One of the message level identifiers, e.g. SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   bundleName     name of resource bundle to localize msg, 
                        can be null
@param   msg	The string message (or a key in the message catalog)"
      end

      operation 8050459 "logrb"
	public explicit_return_type "void"
	nparams 6
	  param inout name "level" type class_ref 241691 // Level
	  param in name "sourceClass" explicit_type "String"
	  param in name "sourceMethod" explicit_type "String"
	  param in name "bundleName" explicit_type "String"
	  param in name "msg" explicit_type "String"
	  param inout name "param1" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, specifying source class, method, and resource bundle name,
with a single object parameter to the log message.
<p>
If the logger is currently enabled for the given message 
level then a corresponding LogRecord is created and forwarded 
to all the registered output Handler objects.
<p>
The msg string is localized using the named resource bundle.  If the
resource bundle name is null, or an empty String or invalid
then the msg string is not localized.
<p>
@param	level   One of the message level identifiers, e.g. SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   bundleName     name of resource bundle to localize msg,
                        can be null
@param   msg	 The string message (or a key in the message catalog)
@param   param1    Parameter to the log message."
      end

      operation 8050587 "logrb"
	public explicit_return_type "void"
	nparams 6
	  param inout name "level" type class_ref 241691 // Level
	  param in name "sourceClass" explicit_type "String"
	  param in name "sourceMethod" explicit_type "String"
	  param in name "bundleName" explicit_type "String"
	  param in name "msg" explicit_type "String"
	  param inout name "params" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, specifying source class, method, and resource bundle name,
with an array of object arguments.
<p>
If the logger is currently enabled for the given message 
level then a corresponding LogRecord is created and forwarded 
to all the registered output Handler objects.
<p>
The msg string is localized using the named resource bundle.  If the
resource bundle name is null, or an empty String or invalid
then the msg string is not localized.
<p>
@param	level   One of the message level identifiers, e.g. SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   bundleName     name of resource bundle to localize msg,
                        can be null.
@param   msg	The string message (or a key in the message catalog)
@param   params	Array of parameters to the message"
      end

      operation 8050715 "logrb"
	public explicit_return_type "void"
	nparams 6
	  param inout name "level" type class_ref 241691 // Level
	  param in name "sourceClass" explicit_type "String"
	  param in name "sourceMethod" explicit_type "String"
	  param in name "bundleName" explicit_type "String"
	  param in name "msg" explicit_type "String"
	  param inout name "thrown" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, specifying source class, method, and resource bundle name,
with associated Throwable information.
<p>
If the logger is currently enabled for the given message 
level then the given arguments are stored in a LogRecord
which is forwarded to all registered output handlers.
<p>
The msg string is localized using the named resource bundle.  If the
resource bundle name is null, or an empty String or invalid
then the msg string is not localized.
<p>
Note that the thrown argument is stored in the LogRecord thrown
property, rather than the LogRecord parameters property.  Thus is it
processed specially by output Formatters and is not treated
as a formatting parameter to the LogRecord message property.
<p>
@param	level   One of the message level identifiers, e.g. SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   bundleName     name of resource bundle to localize msg,
                        can be null
@param   msg	The string message (or a key in the message catalog)
@param   thrown  Throwable associated with log message."
      end

      operation 8050843 "entering"
	public explicit_return_type "void"
	nparams 2
	  param in name "sourceClass" explicit_type "String"
	  param in name "sourceMethod" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "======================================================================
 Start of convenience methods for logging method entries and returns.
======================================================================

Log a method entry.
<p>
This is a convenience method that can be used to log entry
to a method.  A LogRecord with message \"ENTRY\", log level
FINER, and the given sourceMethod and sourceClass is logged.
<p>
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that is being entered"
      end

      operation 8050971 "entering"
	public explicit_return_type "void"
	nparams 3
	  param in name "sourceClass" explicit_type "String"
	  param in name "sourceMethod" explicit_type "String"
	  param inout name "param1" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a method entry, with one parameter.
<p>
This is a convenience method that can be used to log entry
to a method.  A LogRecord with message \"ENTRY {0}\", log level
FINER, and the given sourceMethod, sourceClass, and parameter
is logged.
<p>
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that is being entered
@param   param1	       parameter to the method being entered"
      end

      operation 8051099 "entering"
	public explicit_return_type "void"
	nparams 3
	  param in name "sourceClass" explicit_type "String"
	  param in name "sourceMethod" explicit_type "String"
	  param inout name "params" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a method entry, with an array of parameters.
<p>
This is a convenience method that can be used to log entry
to a method.  A LogRecord with message \"ENTRY\" (followed by a 
format {N} indicator for each entry in the parameter array), 
log level FINER, and the given sourceMethod, sourceClass, and 
parameters is logged.
<p>
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that is being entered
@param   params	       array of parameters to the method being entered"
      end

      operation 8051227 "exiting"
	public explicit_return_type "void"
	nparams 2
	  param in name "sourceClass" explicit_type "String"
	  param in name "sourceMethod" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a method return.
<p>
This is a convenience method that can be used to log returning
from a method.  A LogRecord with message \"RETURN\", log level
FINER, and the given sourceMethod and sourceClass is logged.
<p>
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of the method "
      end

      operation 8051355 "exiting"
	public explicit_return_type "void"
	nparams 3
	  param in name "sourceClass" explicit_type "String"
	  param in name "sourceMethod" explicit_type "String"
	  param inout name "result" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a method return, with result object.
<p>
This is a convenience method that can be used to log returning
from a method.  A LogRecord with message \"RETURN {0}\", log level
FINER, and the gives sourceMethod, sourceClass, and result
object is logged.
<p>
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of the method 
@param   result  Object that is being returned"
      end

      operation 8051483 "throwing"
	public explicit_return_type "void"
	nparams 3
	  param in name "sourceClass" explicit_type "String"
	  param in name "sourceMethod" explicit_type "String"
	  param inout name "thrown" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log throwing an exception.
<p>
This is a convenience method to log that a method is
terminating by throwing an exception.  The logging is done 
using the FINER level.
<p>
If the logger is currently enabled for the given message 
level then the given arguments are stored in a LogRecord
which is forwarded to all registered output handlers.  The
LogRecord's message is set to \"THROW\".
<p>
Note that the thrown argument is stored in the LogRecord thrown
property, rather than the LogRecord parameters property.  Thus is it
processed specially by output Formatters and is not treated
as a formatting parameter to the LogRecord message property.
<p>
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod  name of the method.
@param   thrown  The Throwable that is being thrown."
      end

      operation 8051611 "severe"
	public explicit_return_type "void"
	nparams 1
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "=======================================================================
 Start of simple convenience methods using level names as method names
=======================================================================

Log a SEVERE message.
<p>
If the logger is currently enabled for the SEVERE message 
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   msg	The string message (or a key in the message catalog)"
      end

      operation 8051739 "warning"
	public explicit_return_type "void"
	nparams 1
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a WARNING message.
<p>
If the logger is currently enabled for the WARNING message 
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   msg	The string message (or a key in the message catalog)"
      end

      operation 8051867 "info"
	public explicit_return_type "void"
	nparams 1
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log an INFO message.
<p>
If the logger is currently enabled for the INFO message 
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   msg	The string message (or a key in the message catalog)"
      end

      operation 8051995 "config"
	public explicit_return_type "void"
	nparams 1
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a CONFIG message.
<p>
If the logger is currently enabled for the CONFIG message 
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   msg	The string message (or a key in the message catalog)"
      end

      operation 8052123 "fine"
	public explicit_return_type "void"
	nparams 1
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a FINE message.
<p>
If the logger is currently enabled for the FINE message 
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   msg	The string message (or a key in the message catalog)"
      end

      operation 8052251 "finer"
	public explicit_return_type "void"
	nparams 1
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a FINER message.
<p>
If the logger is currently enabled for the FINER message 
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   msg	The string message (or a key in the message catalog)"
      end

      operation 8052379 "finest"
	public explicit_return_type "void"
	nparams 1
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a FINEST message.
<p>
If the logger is currently enabled for the FINEST message 
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   msg	The string message (or a key in the message catalog)"
      end

      operation 8052507 "setLevel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newLevel" type class_ref 241691 // Level
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 End of convenience methods 
================================================================

Set the log level specifying which message levels will be
logged by this logger.  Message levels lower than this
value will be discarded.  The level value Level.OFF
can be used to turn off logging.
<p>
If the new level is null, it means that this node should
inherit its level from its nearest ancestor with a specific
(non-null) level value.

@param newLevel   the new value for the log level (may be null)
@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\")."
      end

      operation 8052635 "getLevel"
	public return_type class_ref 241691 // Level
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the log Level that has been specified for this Logger.
The result may be null, which means that this logger's
effective level will be inherited from its parent.

@return	this Logger's level"
      end

      operation 8052763 "isLoggable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "level" type class_ref 241691 // Level
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if a message of the given level would actually be logged
by this logger.  This check is based on the Loggers effective level,
which may be inherited from its parent.

@param	level	a message logging level
@return	true if the given message level is currently being logged."
      end

      operation 8052891 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the name for this logger.
@return logger name.  Will be null for anonymous Loggers."
      end

      operation 8053019 "addHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 1006491 // Handler
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a log Handler to receive logging messages.
<p>
By default, Loggers also send their output to their parent logger.
Typically the root Logger is configured with a set of Handlers
that essentially act as default handlers for all loggers.

@param	handler	a logging Handler
@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\")."
      end

      operation 8053147 "removeHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 1006491 // Handler
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a log Handler.
<P>
Returns silently if the given Handler is not found or is null

@param	handler	a logging Handler
@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\")."
      end

      operation 8053275 "getHandlers"
	public return_type class_ref 1006491 // Handler
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the Handlers associated with this logger.
<p>
@return  an array of all registered Handlers"
      end

      operation 8053403 "setUseParentHandlers"
	public explicit_return_type "void"
	nparams 1
	  param inout name "useParentHandlers" explicit_type "boolean"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specify whether or not this logger should send its output
to it's parent Logger.  This means that any LogRecords will
also be written to the parent's Handlers, and potentially
to its parent, recursively up the namespace.

@param useParentHandlers   true if output is to be sent to the
		logger's parent.
@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\")."
      end

      operation 8053531 "getUseParentHandlers"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Discover whether or not this logger is sending its output
to its parent logger.

@return  true if output is to be sent to the logger's parent"
      end

      operation 8053659 "findResourceBundle"
	private return_type class_ref 153371 // ResourceBundle
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private utility method to map a resource bundle name to an
 actual resource bundle, using a simple one-entry cache.
 Returns null for a null name.
 May also return null if we can't find the resource bundle and
 there is no suitable previous cached value."
      end

      operation 8053787 "setupResourceInfo"
	private explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private utility method to initialize our one entry
 resource bundle cache.
 Note: for consistency reasons, we are careful to check
 that a suitable ResourceBundle exists before setting the
 ResourceBundleName."
      end

      operation 8053915 "getParent"
	public return_type class_ref 241563 // Logger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the parent for this Logger.
<p>
This method returns the nearest extant parent in the namespace.
Thus if a Logger is called \"a.b.c.d\", and a Logger called \"a.b\"
has been created but no logger \"a.b.c\" exists, then a call of
getParent on the Logger \"a.b.c.d\" will return the Logger \"a.b\".
<p>
The result will be null if it is called on the root Logger
in the namespace.

@return nearest existing parent Logger "
      end

      operation 8054043 "setParent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parent" type class_ref 241563 // Logger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the parent for this Logger.  This method is used by
the LogManager to update a Logger when the namespace changes.
<p>
It should not be called from application code.
<p>
@param  parent   the new parent logger
@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\")."
      end

      operation 8054171 "doSetParent"
	private explicit_return_type "void"
	nparams 1
	  param inout name "newParent" type class_ref 241563 // Logger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to do the work for parenting a child
 Logger onto a parent logger."
      end

      operation 8054299 "updateEffectiveLevel"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Recalculate the effective level for this node and
 recursively for our children."
      end

      operation 8054427 "getEffectiveResourceBundleName"
	private explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to get the potentially inherited
 resource bundle name for this Logger.
 May return null"
      end
    end

    class 241691 "Level"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The Level class defines a set of standard logging levels that
can be used to control logging output.  The logging Level objects
are ordered and are specified by ordered integers.  Enabling logging
at a given level also enables logging at all higher levels.
<p>
Clients should normally use the predefined Level constants such
as Level.SEVERE.
<p>
The levels in descending order are:
<ul>
<li>SEVERE (highest value)
<li>WARNING
<li>INFO
<li>CONFIG
<li>FINE
<li>FINER
<li>FINEST  (lowest value)
</ul>
In addition there is a level OFF that can be used to turn
off logging, and a level ALL that can be used to enable
logging of all messages.
<p>
It is possible for third parties to define additional logging
levels by subclassing Level.  In such cases subclasses should
take care to chose unique integer level values and to ensure that 
they maintain the Object uniqueness property across serialization
by defining a suitable readResolve method.

@version 1.19, 02/25/04
@since 1.4"
      classrelation 1966235 // <realization>
	relation 1966235 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1966235 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 1966363 // known (<unidirectional association>)
	relation 1966363 --->
	  a role_name "known" init_value "=  new java.util.ArrayList()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1966363 // known (<unidirectional association>)
	  b parent class_ref 137627 // ArrayList
      end

      attribute 2964507 "defaultBundle"
	class_attribute private explicit_type "String"
	init_value "=  \"sun.util.logging.resources.logging\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2964635 "name"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial  The non-localized name of the level.
"
      end

      attribute 2964763 "value"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial  The integer value of the level.
"
      end

      attribute 2964891 "resourceBundleName"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial The resource bundle name to be used in localizing the level name.
"
      end

      classrelation 1966491 // OFF (<unidirectional association>)
	relation 1966491 --->
	  a role_name "OFF" init_value "=  new Level(\"OFF\",Integer.MAX_VALUE, defaultBundle)" class_relation const_relation public
	    comment "
OFF is a special level that can be used to turn off logging.
This level is initialized to <CODE>Integer.MAX_VALUE</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1966491 // OFF (<unidirectional association>)
	  b parent class_ref 241691 // Level
      end

      classrelation 1966619 // SEVERE (<unidirectional association>)
	relation 1966619 --->
	  a role_name "SEVERE" init_value "=  new Level(\"SEVERE\",1000, defaultBundle)" class_relation const_relation public
	    comment "
SEVERE is a message level indicating a serious failure.
<p>
In general SEVERE messages should describe events that are
of considerable importance and which will prevent normal
program execution.   They should be reasonably intelligible
to end users and to system administrators.
This level is initialized to <CODE>1000</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1966619 // SEVERE (<unidirectional association>)
	  b parent class_ref 241691 // Level
      end

      classrelation 1966747 // WARNING (<unidirectional association>)
	relation 1966747 --->
	  a role_name "WARNING" init_value "=  new Level(\"WARNING\", 900, defaultBundle)" class_relation const_relation public
	    comment "
WARNING is a message level indicating a potential problem.
<p>
In general WARNING messages should describe events that will
be of interest to end users or system managers, or which
indicate potential problems.
This level is initialized to <CODE>900</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1966747 // WARNING (<unidirectional association>)
	  b parent class_ref 241691 // Level
      end

      classrelation 1966875 // INFO (<unidirectional association>)
	relation 1966875 --->
	  a role_name "INFO" init_value "=  new Level(\"INFO\", 800, defaultBundle)" class_relation const_relation public
	    comment "
INFO is a message level for informational messages.
<p>
Typically INFO messages will be written to the console
or its equivalent.  So the INFO level should only be 
used for reasonably significant messages that will
make sense to end users and system admins.
This level is initialized to <CODE>800</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1966875 // INFO (<unidirectional association>)
	  b parent class_ref 241691 // Level
      end

      classrelation 1967003 // CONFIG (<unidirectional association>)
	relation 1967003 --->
	  a role_name "CONFIG" init_value "=  new Level(\"CONFIG\", 700, defaultBundle)" class_relation const_relation public
	    comment "
CONFIG is a message level for static configuration messages.
<p>
CONFIG messages are intended to provide a variety of static
configuration information, to assist in debugging problems
that may be associated with particular configurations.
For example, CONFIG message might include the CPU type,
the graphics depth, the GUI look-and-feel, etc.
This level is initialized to <CODE>700</CODE>. 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1967003 // CONFIG (<unidirectional association>)
	  b parent class_ref 241691 // Level
      end

      classrelation 1967131 // FINE (<unidirectional association>)
	relation 1967131 --->
	  a role_name "FINE" init_value "=  new Level(\"FINE\", 500, defaultBundle)" class_relation const_relation public
	    comment "
FINE is a message level providing tracing information.
<p>
All of FINE, FINER, and FINEST are intended for relatively
detailed tracing.  The exact meaning of the three levels will
vary between subsystems, but in general, FINEST should be used
for the most voluminous detailed output, FINER for somewhat
less detailed output, and FINE for the  lowest volume (and
most important) messages.
<p>
In general the FINE level should be used for information
that will be broadly interesting to developers who do not have
a specialized interest in the specific subsystem.
<p>
FINE messages might include things like minor (recoverable)
failures.  Issues indicating potential performance problems
are also worth logging as FINE.
This level is initialized to <CODE>500</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1967131 // FINE (<unidirectional association>)
	  b parent class_ref 241691 // Level
      end

      classrelation 1967259 // FINER (<unidirectional association>)
	relation 1967259 --->
	  a role_name "FINER" init_value "=  new Level(\"FINER\", 400, defaultBundle)" class_relation const_relation public
	    comment "
FINER indicates a fairly detailed tracing message.
By default logging calls for entering, returning, or throwing
an exception are traced at this level.
This level is initialized to <CODE>400</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1967259 // FINER (<unidirectional association>)
	  b parent class_ref 241691 // Level
      end

      classrelation 1967387 // FINEST (<unidirectional association>)
	relation 1967387 --->
	  a role_name "FINEST" init_value "=  new Level(\"FINEST\", 300, defaultBundle)" class_relation const_relation public
	    comment "
FINEST indicates a highly detailed tracing message.
This level is initialized to <CODE>300</CODE>. 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1967387 // FINEST (<unidirectional association>)
	  b parent class_ref 241691 // Level
      end

      classrelation 1967515 // ALL (<unidirectional association>)
	relation 1967515 --->
	  a role_name "ALL" init_value "=  new Level(\"ALL\", Integer.MIN_VALUE, defaultBundle)" class_relation const_relation public
	    comment "
ALL indicates that all messages should be logged.
This level is initialized to <CODE>Integer.MIN_VALUE</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1967515 // ALL (<unidirectional association>)
	  b parent class_ref 241691 // Level
      end

      operation 8045979 "Level"
	protected explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a named Level with a given integer value.
<p>
Note that this constructor is \"protected\" to allow subclassing.
In general clients of logging should use one of the constant Level
objects such as SEVERE or FINEST.  However, if clients need to
add new logging levels, they may subclass Level and define new
constants.
@param name  the name of the Level, for example \"SEVERE\".
@param value an integer value for the level.
@throws NullPointerException if the name is null"
      end

      operation 8046107 "Level"
	protected explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "String"
	  param in name "value" explicit_type "int"
	  param in name "resourceBundleName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a named Level with a given integer value and a
given localization resource name.
<p>
@param name  the name of the Level, for example \"SEVERE\".
@param value an integer value for the level.
@param resourceBundleName name of a resource bundle to use in
   localizing the given name. If the resourceBundleName is null 
   or an empty string, it is ignored. 
@throws NullPointerException if the name is null"
      end

      operation 8046235 "getResourceBundleName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the level's localization resource bundle name, or
null if no localization bundle is defined.

@return localization resource bundle name"
      end

      operation 8046363 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the non-localized string name of the Level.

@return non-localized name"
      end

      operation 8046491 "getLocalizedName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the localized string name of the Level, for
the current default locale. 
<p>
If no localization information is available, the
non-localized name is returned.

@return localized name"
      end

      operation 8046619 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return the non-localized name of the Level, for example \"INFO\"."
      end

      operation 8046747 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the integer value for this level.  This integer value
can be used for efficient ordering comparisons between
Level objects.
@return the integer value for this level."
      end

      attribute 2965019 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -8176160795706313070L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8046875 "readResolve"
	private explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Serialization magic to prevent \"doppelgangers\".
 This is a performance optimization."
      end

      operation 8047003 "parse"
	class_operation public return_type class_ref 241691 // Level
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse a level name string into a Level.
<p>
The argument string may consist of either a level name
or an integer value.
<p>
For example:
<ul>
<li>	\"SEVERE\"
<li>	\"1000\"
</ul>
@param  name   string to be parsed
@throws NullPointerException if the name is null
@throws IllegalArgumentException if the value is not valid. 
Valid values are integers between <CODE>Integer.MIN_VALUE</CODE> 
and <CODE>Integer.MAX_VALUE</CODE>, and all known level names. 
Known names are the levels defined by this class (i.e. <CODE>FINE</CODE>,
<CODE>FINER</CODE>, <CODE>FINEST</CODE>), or created by this class with
appropriate package access, or new levels defined or created
by subclasses.

@return The parsed value. Passing an integer that corresponds to a known name
(eg 700) will return the associated name (eg <CODE>CONFIG</CODE>).
Passing an integer that does not (eg 1) will return a new level name
initialized to that value."
      end

      operation 8047131 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ox" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare two objects for value equality.
@return true if and only if the two objects have the same level value."
      end

      operation 8047259 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate a hashcode.
@return a hashcode based on the level value"
      end
    end

    class 241819 "LogRecord"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "LogRecord objects are used to pass logging requests between
the logging framework and individual log Handlers.
<p>
When a LogRecord is passed into the logging framework it 
logically belongs to the framework and should no longer be
used or updated by the client application.
<p>
Note that if the client application has not specified an
explicit source method name and source class name, then the
LogRecord class will infer them automatically when they are
first accessed (due to a call on getSourceMethodName or
getSourceClassName) by analyzing the call stack.  Therefore,
if a logging Handler wants to pass off a LogRecord to another
thread, or to transmit it over RMI, and if it wishes to subsequently
obtain method name or class name information it should call
one of getSourceClassName or getSourceMethodName to force
the values to be filled in.
<p>
<b> Serialization notes:</b>
<ul>
<li>The LogRecord class is serializable.

<li> Because objects in the parameters array may not be serializable,
during serialization all objects in the parameters array are
written as the corresponding Strings (using Object.toString).

<li> The ResourceBundle is not transmitted as part of the serialized
form, but the resource bundle name is, and the recipient object's
readObject method will attempt to locate a suitable resource bundle.

</ul>

@version 1.23, 01/12/04
@since 1.4"
      classrelation 1971355 // <realization>
	relation 1971355 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1971355 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2966939 "globalSequenceNumber"
	class_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2967067 "nextThreadId"
	class_attribute private explicit_type "int"
	init_value "= 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1971483 // threadIds (<unidirectional association>)
	relation 1971483 --->
	  a role_name "threadIds" init_value "=  new ThreadLocal()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1971483 // threadIds (<unidirectional association>)
	  b parent class_ref 163867 // ThreadLocal
      end

      classrelation 1971611 // level (<unidirectional association>)
	relation 1971611 --->
	  a role_name "level" private
	    comment "
@serial Logging message level

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1971611 // level (<unidirectional association>)
	  b parent class_ref 241691 // Level
      end

      attribute 2967195 "sequenceNumber"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Sequence number
"
      end

      attribute 2967323 "sourceClassName"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Class that issued logging call
"
      end

      attribute 2967451 "sourceMethodName"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Method that issued logging call
"
      end

      attribute 2967579 "message"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Non-localized raw message text
"
      end

      attribute 2967707 "threadID"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Thread ID for thread that issued logging call.
"
      end

      attribute 2967835 "millis"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Event time in milliseconds since 1970
"
      end

      classrelation 1971739 // thrown (<unidirectional association>)
	relation 1971739 --->
	  a role_name "thrown" private
	    comment "
@serial The Throwable (if any) associated with log message

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1971739 // thrown (<unidirectional association>)
	  b parent class_ref 164251 // Throwable
      end

      attribute 2967963 "loggerName"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Name of the source Logger.
"
      end

      attribute 2968091 "resourceBundleName"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial Resource bundle name to localized log message.
"
      end

      attribute 2968219 "needToInferCaller"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2968347 "parameters"
	private explicit_type "Object"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1971867 // resourceBundle (<unidirectional association>)
	relation 1971867 --->
	  a role_name "resourceBundle" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1971867 // resourceBundle (<unidirectional association>)
	  b parent class_ref 153371 // ResourceBundle
      end

      operation 8060315 "LogRecord"
	public explicit_return_type ""
	nparams 2
	  param inout name "level" type class_ref 241691 // Level
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a LogRecord with the given level and message values.
<p>
The sequence property will be initialized with a new unique value.
These sequence values are allocated in increasing order within a VM.
<p>
The millis property will be initialized to the current time.
<p>
The thread ID property will be initialized with a unique ID for
the current thread.
<p>
All other properties will be initialized to \"null\". 

@param level  a logging level value
@param msg  the raw non-localized logging message (may be null)"
      end

      operation 8060443 "getLoggerName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the source Logger name's

@return source logger name (may be null)"
      end

      operation 8060571 "setLoggerName"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the source Logger name.

@param name   the source logger name (may be null)"
      end

      operation 8060699 "getResourceBundle"
	public return_type class_ref 153371 // ResourceBundle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the localization resource bundle
<p>
This is the ResourceBundle that should be used to localize
the message string before formatting it.  The result may
be null if the message is not localizable, or if no suitable
ResourceBundle is available."
      end

      operation 8060827 "setResourceBundle"
	public explicit_return_type "void"
	nparams 1
	  param inout name "bundle" type class_ref 153371 // ResourceBundle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the localization resource bundle.

@param bundle  localization bundle (may be null)"
      end

      operation 8060955 "getResourceBundleName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the localization resource bundle name
<p>
This is the name for the ResourceBundle that should be
used to localize the message string before formatting it.
The result may be null if the message is not localizable."
      end

      operation 8061083 "setResourceBundleName"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the localization resource bundle name.

@param name  localization bundle name (may be null)"
      end

      operation 8061211 "getLevel"
	public return_type class_ref 241691 // Level
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the logging message level, for example Level.SEVERE.
@return the logging message level"
      end

      operation 8061339 "setLevel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "level" type class_ref 241691 // Level
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the logging message level, for example Level.SEVERE.
@param level the logging message level"
      end

      operation 8061467 "getSequenceNumber"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the sequence number.
<p>
Sequence numbers are normally assigned in the LogRecord
constructor, which assigns unique sequence numbers to
each new LogRecord in increasing order.
@return the sequence number"
      end

      operation 8061595 "setSequenceNumber"
	public explicit_return_type "void"
	nparams 1
	  param in name "seq" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the sequence number.
<p>
Sequence numbers are normally assigned in the LogRecord constructor,
so it should not normally be necessary to use this method."
      end

      operation 8061723 "getSourceClassName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the  name of the class that (allegedly) issued the logging request.
<p>
Note that this sourceClassName is not verified and may be spoofed.
This information may either have been provided as part of the
logging call, or it may have been inferred automatically by the
logging framework.  In the latter case, the information may only
be approximate and may in fact describe an earlier call on the
stack frame.
<p>
May be null if no information could be obtained.

@return the source class name"
      end

      operation 8061851 "setSourceClassName"
	public explicit_return_type "void"
	nparams 1
	  param in name "sourceClassName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the name of the class that (allegedly) issued the logging request.

@param sourceClassName the source class name (may be null)"
      end

      operation 8061979 "getSourceMethodName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the  name of the method that (allegedly) issued the logging request.
<p>
Note that this sourceMethodName is not verified and may be spoofed.
This information may either have been provided as part of the
logging call, or it may have been inferred automatically by the
logging framework.  In the latter case, the information may only
be approximate and may in fact describe an earlier call on the
stack frame.
<p>
May be null if no information could be obtained.

@return the source method name"
      end

      operation 8062107 "setSourceMethodName"
	public explicit_return_type "void"
	nparams 1
	  param in name "sourceMethodName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the name of the method that (allegedly) issued the logging request.

@param sourceMethodName the source method name (may be null)"
      end

      operation 8062235 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the \"raw\" log message, before localization or formatting.
<p>
May be null, which is equivalent to the empty string \"\".
<p>
This message may be either the final text or a localization key.
<p>
During formatting, if the source logger has a localization
ResourceBundle and if that ResourceBundle has an entry for
this message string, then the message string is replaced
with the localized value.

@return the raw message string"
      end

      operation 8062363 "setMessage"
	public explicit_return_type "void"
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the \"raw\" log message, before localization or formatting.

@param message the raw message string (may be null)"
      end

      operation 8062491 "getParameters"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the parameters to the log message.

@return the log message parameters.  May be null if
			there are no parameters."
      end

      operation 8062619 "setParameters"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parameters" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the parameters to the log message.

@param parameters the log message parameters. (may be null)"
      end

      operation 8062747 "getThreadID"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an identifier for the thread where the message originated.
<p>
This is a thread identifier within the Java VM and may or
may not map to any operating system ID.

@return thread ID"
      end

      operation 8062875 "setThreadID"
	public explicit_return_type "void"
	nparams 1
	  param in name "threadID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set an identifier for the thread where the message originated.
@param threadID 	the thread ID"
      end

      operation 8063003 "getMillis"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get event time in milliseconds since 1970.

@return event time in millis since 1970"
      end

      operation 8063131 "setMillis"
	public explicit_return_type "void"
	nparams 1
	  param in name "millis" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set event time.

@param millis event time in millis since 1970"
      end

      operation 8063259 "getThrown"
	public return_type class_ref 164251 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get any throwable associated with the log record.
<p>
If the event involved an exception, this will be the
exception object. Otherwise null.

@return a throwable"
      end

      operation 8063387 "setThrown"
	public explicit_return_type "void"
	nparams 1
	  param inout name "thrown" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a throwable associated with the log event.

@param thrown  a throwable (may be null)"
      end

      attribute 2968475 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  5372048053134512534L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8063515 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@serialData Default fields, followed by a two byte version number
(major byte, followed by minor byte), followed by information on
the log record parameter array.  If there is no parameter array, 
then -1 is written.  If there is a parameter array (possible of zero
length) then the array length is written as an integer, followed
by String values for each parameter.  If a parameter is null, then
a null String is written.  Otherwise the output of Object.toString()
is written."
      end

      operation 8063643 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8063771 "inferCaller"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to infer the caller's class and method names"
      end
    end

    class 939035 "LogManager"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "There is a single global LogManager object that is used to
maintain a set of shared state about Loggers and log services.
<p>
This LogManager object:
<ul>
<li> Manages a hierarchical namespace of Logger objects.  All
     named Loggers are stored in this namespace.
<li> Manages a set of logging control properties.  These are
     simple key-value pairs that can be used by Handlers and
     other logging objects to configure themselves.
</ul>
<p>
The global LogManager object can be retrieved using LogManager.getLogManager().
The LogManager object is created during class initialization and
cannot subsequently be changed.
<p>
At startup the LogManager class is located using the 
java.util.logging.manager system property.
<p>
By default, the LogManager reads its initial configuration from 
a properties file \"lib/logging.properties\" in the JRE directory.
If you edit that property file you can change the default logging
configuration for all uses of that JRE.
<p>
In addition, the LogManager uses two optional system properties that
allow more control over reading the initial configuration:
<ul>
<li>\"java.util.logging.config.class\"
<li>\"java.util.logging.config.file\"
</ul>
These two properties may be set via the Preferences API, or as
command line property definitions to the \"java\" command, or as
system property definitions passed to JNI_CreateJavaVM.
<p>
If the \"java.util.logging.config.class\" property is set, then the
property value is treated as a class name.  The given class will be
loaded, an object will be instantiated, and that object's constructor
is responsible for reading in the initial configuration.  (That object
may use other system properties to control its configuration.)  The
alternate configuration class can use <tt>readConfiguration(InputStream)</tt>
to define properties in the LogManager.
<p>
If \"java.util.logging.config.class\" property is <b>not</b> set,
then the \"java.util.logging.config.file\" system property can be used
to specify a properties file (in java.util.Properties format). The
initial logging configuration will be read from this file.
<p>
If neither of these properties is defined then, as described
above, the LogManager will read its initial configuration from 
a properties file \"lib/logging.properties\" in the JRE directory.
<p>
The properties for loggers and Handlers will have names starting
with the dot-separated name for the handler or logger.
<p>
The global logging properties may include:
<ul>
<li>A property \"handlers\".  This defines a whitespace separated
list of class names for handler classes to load and register as
handlers on the root Logger (the Logger named \"\").  Each class
name must be for a Handler class which has a default constructor.
Note that these Handlers may be created lazily, when they are
first used.

<li>A property \"&lt;logger&gt;.handlers\". This defines a whitespace or
comma separated list of class names for handlers classes to
load and register as handlers to the specified logger. Each class
name must be for a Handler class which has a default constructor.
Note that these Handlers may be created lazily, when they are
first used.

<li>A property \"&lt;logger&gt;.useParentHandlers\". This defines a boolean
value. By default every logger calls its parent in addition to
handling the logging message itself, this often result in messages
being handled by the root logger as well. When setting this property
to false a Handler needs to be configured for this logger otherwise
no logging messages are delivered.

<li>A property \"config\".  This property is intended to allow
arbitrary configuration code to be run.  The property defines a
whitespace separated list of class names.  A new instance will be
created for each named class.  The default constructor of each class
may execute arbitrary code to update the logging configuration, such as
setting logger levels, adding handlers, adding filters, etc.
</ul>
<p>
Note that all classes loaded during LogManager configuration are
first searched on the system class path before any user class path.  
That includes the LogManager class, any config classes, and any 
handler classes.
<p>
Loggers are organized into a naming hierarchy based on their
dot separated names.  Thus \"a.b.c\" is a child of \"a.b\", but
\"a.b1\" and a.b2\" are peers.
<p>
All properties whose names end with \".level\" are assumed to define
log levels for Loggers.  Thus \"foo.level\" defines a log level for
the logger called \"foo\" and (recursively) for any of its children
in the naming hierarchy.  Log Levels are applied in the order they 
are defined in the properties file.  Thus level settings for child
nodes in the tree should come after settings for their parents.
The property name \".level\" can be used to set the level for the
root of the tree.
<p> 
All methods on the LogManager object are multi-thread safe.

@version 1.48, 01/08/07
@since 1.4"
      class 939163 "Cleaner"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1970459 // <generalisation>
	  relation 1970459 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1970459 // <generalisation>
	    b parent class_ref 163227 // Thread
	end

	operation 8055835 "run"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1969435 // manager (<unidirectional association>)
	relation 1969435 --->
	  a role_name "manager" class_relation private
	    comment " The global LogManager object
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1969435 // manager (<unidirectional association>)
	  b parent class_ref 939035 // LogManager
      end

      classrelation 1969563 // emptyHandlers (<unidirectional association>)
	relation 1969563 --->
	  a role_name "emptyHandlers" multiplicity "[]" init_value "=  { }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1969563 // emptyHandlers (<unidirectional association>)
	  b parent class_ref 1006491 // Handler
      end

      classrelation 1969691 // props (<unidirectional association>)
	relation 1969691 --->
	  a role_name "props" init_value "=  new Properties()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1969691 // props (<unidirectional association>)
	  b parent class_ref 154907 // Properties
      end

      classrelation 1969819 // changes (<unidirectional association>)
	relation 1969819 --->
	  a role_name "changes" init_value "=  new PropertyChangeSupport(LogManager.class)" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1969819 // changes (<unidirectional association>)
	  b parent class_ref 372379 // PropertyChangeSupport
      end

      classrelation 1969947 // defaultLevel (<unidirectional association>)
	relation 1969947 --->
	  a role_name "defaultLevel" init_value "=  Level.INFO" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1969947 // defaultLevel (<unidirectional association>)
	  b parent class_ref 241691 // Level
      end

      classrelation 1970075 // loggers (<unidirectional association>)
	relation 1970075 --->
	  a role_name "loggers" init_value "=  new Hashtable<String,Logger>()" private
	    comment " Table of known loggers.  Maps names to Loggers.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,Logger> ${name}${value};
"
	    classrelation_ref 1970075 // loggers (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end

      class 1007899 "LogNode"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1970715 // children (<unidirectional association>)
	  relation 1970715 --->
	    a role_name "children" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object,Object> ${name}${value};
"
	      classrelation_ref 1970715 // children (<unidirectional association>)
	    b parent class_ref 144923 // HashMap
	end

	classrelation 1970843 // logger (<unidirectional association>)
	  relation 1970843 --->
	    a role_name "logger" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1970843 // logger (<unidirectional association>)
	    b parent class_ref 241563 // Logger
	end

	classrelation 1970971 // parent (<unidirectional association>)
	  relation 1970971 --->
	    a role_name "parent" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1970971 // parent (<unidirectional association>)
	    b parent class_ref 1007899 // LogNode
	end

	operation 8059163 "LogNode"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "parent" type class_ref 1007899 // LogNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8059291 "walkAndSetParent"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "parent" type class_ref 241563 // Logger
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Recursive method to walk the tree below a node and set
 a new parent logger."
	end
      end

      classrelation 1970203 // root (<unidirectional association>)
	relation 1970203 --->
	  a role_name "root" init_value "=  new LogNode(null)" private
	    comment " Tree of known loggers
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1970203 // root (<unidirectional association>)
	  b parent class_ref 1007899 // LogNode
      end

      classrelation 1970331 // rootLogger (<unidirectional association>)
	relation 1970331 --->
	  a role_name "rootLogger" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1970331 // rootLogger (<unidirectional association>)
	  b parent class_ref 241563 // Logger
      end

      attribute 2966427 "readPrimordialConfiguration"
	volatile private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Have we done the primordial reading of the configuration file?
 (Must be done after a suitable amount of java.lang.System
 initialization has been done)"
      end

      attribute 2966555 "initializedGlobalHandlers"
	private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Have we initialized global (root) handlers yet?
 This gets set to false in readConfiguration"
      end

      attribute 2966683 "deathImminent"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " True if JVM death is imminent and the exit hook has been called."
      end

      extra_member 166939 "initialization"
	
	cpp "" ""
	java "  static {
	AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    String cname = null;
                    try {
                        cname = System.getProperty(\"java.util.logging.manager\");
                        if (cname != null) {
			    try {
                                Class clz = ClassLoader.getSystemClassLoader().loadClass(cname);
                                manager = (LogManager) clz.newInstance();
			    } catch (ClassNotFoundException ex) {
			        Class clz = Thread.currentThread().getContextClassLoader().loadClass(cname);
			        manager = (LogManager) clz.newInstance();
			    }
                        }
                    } catch (Exception ex) {
                        System.err.println(\"Could not load Logmanager \\\"\" + cname + \"\\\"\");
                        ex.printStackTrace();
                    }
                    if (manager == null) {
                        manager = new LogManager();
                    }

                    // Create and retain Logger for the root of the namespace.
                    manager.rootLogger = manager.new RootLogger();
                    manager.addLogger(manager.rootLogger);

                    // Adding the global Logger. Doing so in the Logger.<clinit>
                    // would deadlock with the LogManager.<clinit>.
                    Logger.global.setLogManager(manager);
                    manager.addLogger(Logger.global);

                    // We don't call readConfiguration() here, as we may be running
                    // very early in the JVM startup sequence.  Instead readConfiguration
                    // will be called lazily in getLogManager().
                    return null;
                }
            });
    }"
	php ""
	python ""
	idl ""
      end

      operation 8055963 "LogManager"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected constructor.  This is protected so that container applications
(such as J2EE containers) can subclass the object.  It is non-public as
it is intended that there only be one LogManager object, whose value is
retrieved by calling Logmanager.getLogManager."
      end

      operation 8056091 "getLogManager"
	class_operation public return_type class_ref 939035 // LogManager
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the global LogManager object."
      end

      operation 8056219 "readPrimordialConfiguration"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8056347 "addPropertyChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "l" type class_ref 367771 // PropertyChangeListener
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an event listener to be invoked when the logging
properties are re-read. Adding multiple instances of
the same event Listener results in multiple entries
in the property event listener table.

@param l  event listener
@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\").
@exception NullPointerException if the PropertyChangeListener is null."
      end

      operation 8056475 "removePropertyChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "l" type class_ref 367771 // PropertyChangeListener
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an event listener for property change events.
If the same listener instance has been added to the listener table
through multiple invocations of <CODE>addPropertyChangeListener</CODE>,
then an equivalent number of 
<CODE>removePropertyChangeListener</CODE> invocations are required to remove
all instances of that listener from the listener table.
<P>
Returns silently if the given listener is not found.

@param l  event listener (can be null)
@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\")."
      end

      operation 8056603 "addLogger"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "logger" type class_ref 241563 // Logger
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a named logger.  This does nothing and returns false if a logger
with the same name is already registered.
<p>
The Logger factory methods call this method to register each
newly created Logger.
<p>
The application should retain its own reference to the Logger 
object to avoid it being garbage collected.  The LogManager
may only retain a weak reference.

@param   logger the new logger.
@return  true if the argument logger was registered successfully,
         false if a logger of that name already exists.
@exception NullPointerException if the logger name is null."
      end

      operation 8056731 "doSetLevel"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "logger" type class_ref 241563 // Logger
	  param in name "level" type class_ref 241691 // Level
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to set a level on a logger.
 If necessary, we raise privilege before doing the call."
      end

      operation 8056859 "doSetParent"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "logger" type class_ref 241563 // Logger
	  param in name "parent" type class_ref 241563 // Logger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to set a parent on a logger.
 If necessary, we raise privilege before doing the setParent call."
      end

      operation 8056987 "findNode"
	private return_type class_ref 1007899 // LogNode
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Find a node in our tree of logger nodes.
 If necessary, create it."
      end

      operation 8057115 "getLogger"
	public return_type class_ref 241563 // Logger
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method to find a named logger.
<p>
Note that since untrusted code may create loggers with
arbitrary names this method should not be relied on to
find Loggers for security sensitive logging.
<p>
@param name name of the logger 
@return  matching logger or null if none is found"
      end

      operation 8057243 "getLoggerNames"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an enumeration of known logger names.
<p>
Note:  Loggers may be added dynamically as new classes are loaded.
This method only reports on the loggers that are currently registered.
<p>
@return  enumeration of logger name strings"
      end

      operation 8057371 "readConfiguration"
	public explicit_return_type "void"
	nparams 0
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reinitialize the logging properties and reread the logging configuration.
<p>
The same rules are used for locating the configuration properties
as are used at startup.  So normally the logging properties will
be re-read from the same file that was used at startup.
<P>
Any log level definitions in the new configuration file will be 
applied using Logger.setLevel(), if the target Logger exists.
<p>
A PropertyChangeEvent will be fired after the properties are read.

@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\").
@exception  IOException if there are IO problems reading the configuration."
      end

      operation 8057499 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the logging configuration.
<p>
For all named loggers, the reset operation removes and closes
all Handlers and (except for the root logger) sets the level
to null.  The root logger's level is set to Level.INFO.

@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\")."
      end

      operation 8057627 "resetLogger"
	private explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to reset an individual target logger."
      end

      operation 8057755 "parseClassNames"
	private explicit_return_type "String"
	nparams 1
	  param in name "propertyName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " get a list of whitespace separated classnames from a property."
      end

      operation 8057883 "readConfiguration"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ins" type class_ref 179099 // InputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reinitialize the logging properties and reread the logging configuration
from the given stream, which should be in java.util.Properties format.
A PropertyChangeEvent will be fired after the properties are read.
<p>
Any log level definitions in the new configuration file will be 
applied using Logger.setLevel(), if the target Logger exists.

@param ins	stream to read properties from
@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\").
@exception  IOException if there are problems reading from the stream."
      end

      operation 8058011 "getProperty"
	public explicit_return_type "String"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the value of a logging property.
The method returns null if the property is not found.
@param name	property name
@return		property value"
      end

      operation 8058139 "getStringProperty"
	package explicit_return_type "String"
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "defaultValue" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package private method to get a String property.
 If the property is not defined we return the given
 default value."
      end

      operation 8058267 "getIntProperty"
	package explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "defaultValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package private method to get an integer property.
 If the property is not defined or cannot be parsed
 we return the given default value."
      end

      operation 8058395 "getBooleanProperty"
	package explicit_return_type "boolean"
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "defaultValue" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package private method to get a boolean property.
 If the property is not defined or cannot be parsed
 we return the given default value."
      end

      operation 8058523 "getLevelProperty"
	package return_type class_ref 241691 // Level
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "defaultValue" type class_ref 241691 // Level
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package private method to get a Level property.
 If the property is not defined or cannot be parsed
 we return the given default value."
      end

      operation 8058651 "getFilterProperty"
	package return_type class_ref 1006619 // Filter
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "defaultValue" type class_ref 1006619 // Filter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package private method to get a filter property.
 We return an instance of the class named by the \"name\" 
 property. If the property is not defined or has problems
 we return the defaultValue."
      end

      operation 8058779 "getFormatterProperty"
	package return_type class_ref 1006747 // Formatter
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "defaultValue" type class_ref 1006747 // Formatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package private method to get a formatter property.
 We return an instance of the class named by the \"name\" 
 property. If the property is not defined or has problems
 we return the defaultValue."
      end

      operation 8058907 "initializeGlobalHandlers"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to load the global handlers.
 We do the real work lazily, when the global handlers
 are first used."
      end

      classrelation 1970587 // ourPermission (<unidirectional association>)
	relation 1970587 --->
	  a role_name "ourPermission" init_value "=  new LoggingPermission(\"control\", null)" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1970587 // ourPermission (<unidirectional association>)
	  b parent class_ref 285211 // Permission
      end

      operation 8059035 "checkAccess"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check that the current context is trusted to modify the logging
configuration.  This requires LoggingPermission(\"control\").
<p>
If the check fails we throw a SecurityException, otherwise
we return normally.

@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\")."
      end

      class 1008027 "RootLogger"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1971099 // <generalisation>
	  relation 1971099 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1971099 // <generalisation>
	    b parent class_ref 241563 // Logger
	end

	operation 8059419 "RootLogger"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8059547 "log"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "record" type class_ref 241819 // LogRecord
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8059675 "addHandler"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "h" type class_ref 1006491 // Handler
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8059803 "removeHandler"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "h" type class_ref 1006491 // Handler
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8059931 "getHandlers"
	  public return_type class_ref 1006491 // Handler
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 8060059 "setLevelsOnExistingLoggers"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to be called when the configuration has
 changed to apply any level settings to any pre-existing loggers."
      end

      classrelation 1971227 // loggingMXBean (<unidirectional association>)
	relation 1971227 --->
	  a role_name "loggingMXBean" init_value "=  null" class_relation private
	    comment " Management Support
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1971227 // loggingMXBean (<unidirectional association>)
	  b parent class_ref 1007643 // LoggingMXBean
      end

      attribute 2966811 "LOGGING_MXBEAN_NAME"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  \"java.util.logging:type=Logging\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "String representation of the
{@link javax.management.ObjectName} for {@link LoggingMXBean}.
"
      end

      operation 8060187 "getLoggingMXBean"
	class_operation public return_type class_ref 1007643 // LoggingMXBean
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>LoggingMXBean</tt> for managing loggers. 
The <tt>LoggingMXBean</tt> can also obtained from the 
{@link java.lang.management.ManagementFactory#getPlatformMBeanServer
platform <tt>MBeanServer</tt>} method.

@return a {@link LoggingMXBean} object.

@see java.lang.management.ManagementFactory"
      end
    end

    class 1006235 "ConsoleHandler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This <tt>Handler</tt> publishes log records to <tt>System.err</tt>.
By default the <tt>SimpleFormatter</tt> is used to generate brief summaries.
<p>
<b>Configuration:</b>
By default each <tt>ConsoleHandler</tt> is initialized using the following
<tt>LogManager</tt> configuration properties.  If properties are not defined
(or have invalid values) then the specified default values are used.
<ul>
<li>   java.util.logging.ConsoleHandler.level 
	  specifies the default level for the <tt>Handler</tt>
	  (defaults to <tt>Level.INFO</tt>).
<li>   java.util.logging.ConsoleHandler.filter
	  specifies the name of a <tt>Filter</tt> class to use
	  (defaults to no <tt>Filter</tt>).
<li>   java.util.logging.ConsoleHandler.formatter
	  specifies the name of a <tt>Formatter</tt> class to use
 	  (defaults to <tt>java.util.logging.SimpleFormatter</tt>).
<li>   java.util.logging.ConsoleHandler.encoding 
	  the name of the character set encoding to use (defaults to
	  the default platform encoding).
</ul>
<p>
@version 1.12, 12/19/03
@since 1.4"
      classrelation 1964955 // <generalisation>
	relation 1964955 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1964955 // <generalisation>
	  b parent class_ref 1006363 // StreamHandler
      end

      operation 8042011 "configure"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to configure a ConsoleHandler from LogManager
 properties and/or default values as specified in the class
 javadoc."
      end

      operation 8042139 "ConsoleHandler"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a <tt>ConsoleHandler</tt> for <tt>System.err</tt>.
<p>
The <tt>ConsoleHandler</tt> is configured based on
<tt>LogManager</tt> properties (or their default values).
"
      end

      operation 8042267 "publish"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 241819 // LogRecord
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Publish a <tt>LogRecord</tt>.
<p>
The logging request was made initially to a <tt>Logger</tt> object,
which initialized the <tt>LogRecord</tt> and forwarded it here.
<p>
@param  record  description of the log event. A null record is
                silently ignored and is not published"
      end

      operation 8042395 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Override <tt>StreamHandler.close</tt> to do a flush but not
to close the output stream.  That is, we do <b>not</b>
close <tt>System.err</tt>."
      end
    end

    class 1006363 "StreamHandler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Stream based logging <tt>Handler</tt>.
<p>
This is primarily intended as a base class or support class to
be used in implementing other logging <tt>Handlers</tt>.
<p>
<tt>LogRecords</tt> are published to a given <tt>java.io.OutputStream</tt>.
<p>
<b>Configuration:</b>
By default each <tt>StreamHandler</tt> is initialized using the following
<tt>LogManager</tt> configuration properties.  If properties are not defined
(or have invalid values) then the specified default values are used.
<ul>
<li>   java.util.logging.StreamHandler.level
	  specifies the default level for the <tt>Handler</tt>
	  (defaults to <tt>Level.INFO</tt>).
<li>   java.util.logging.StreamHandler.filter
	  specifies the name of a <tt>Filter</tt> class to use
	   (defaults to no <tt>Filter</tt>).
<li>   java.util.logging.StreamHandler.formatter 
	  specifies the name of a <tt>Formatter</tt> class to use
 	  (defaults to <tt>java.util.logging.SimpleFormatter</tt>).
<li>   java.util.logging.StreamHandler.encoding 
	  the name of the character set encoding to use (defaults to
	  the default platform encoding).
</ul>

@version 1.18, 12/19/03
@since 1.4"
      classrelation 1964443 // <generalisation>
	relation 1964443 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1964443 // <generalisation>
	  b parent class_ref 1006491 // Handler
      end

      classrelation 1964571 // manager (<unidirectional association>)
	relation 1964571 --->
	  a role_name "manager" init_value "=  LogManager.getLogManager()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1964571 // manager (<unidirectional association>)
	  b parent class_ref 939035 // LogManager
      end

      classrelation 1964699 // output (<unidirectional association>)
	relation 1964699 --->
	  a role_name "output" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1964699 // output (<unidirectional association>)
	  b parent class_ref 183835 // OutputStream
      end

      attribute 2962587 "doneHeader"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1964827 // writer (<unidirectional association>)
	relation 1964827 --->
	  a role_name "writer" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1964827 // writer (<unidirectional association>)
	  b parent class_ref 446619 // Writer
      end

      operation 8040731 "configure"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to configure a StreamHandler from LogManager
 properties and/or default values as specified in the class
 javadoc."
      end

      operation 8040859 "StreamHandler"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a <tt>StreamHandler</tt>, with no current output stream."
      end

      operation 8040987 "StreamHandler"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 183835 // OutputStream
	  param inout name "formatter" type class_ref 1006747 // Formatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a <tt>StreamHandler</tt> with a given <tt>Formatter</tt>
and output stream.
<p>
@param out         the target output stream
@param formatter   Formatter to be used to format output"
      end

      operation 8041115 "setOutputStream"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 183835 // OutputStream
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Change the output stream.
<P>
If there is a current output stream then the <tt>Formatter</tt>'s 
tail string is written and the stream is flushed and closed.
Then the output stream is replaced with the new output stream.

@param out   New output stream.  May not be null.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>."
      end

      operation 8041243 "setEncoding"
	public explicit_return_type "void"
	nparams 1
	  param in name "encoding" explicit_type "String"
	nexceptions 2
	  exception class_ref 203419 // SecurityException
	  exception class_ref 205723 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set (or change) the character encoding used by this <tt>Handler</tt>.
<p>
The encoding should be set before any <tt>LogRecords</tt> are written
to the <tt>Handler</tt>.

@param encoding  The name of a supported character encoding.
	      May be null, to indicate the default platform encoding.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
@exception  UnsupportedEncodingException if the named encoding is
		not supported."
      end

      operation 8041371 "publish"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 241819 // LogRecord
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format and publish a <tt>LogRecord</tt>.
<p>
The <tt>StreamHandler</tt> first checks if there is an <tt>OutputStream</tt>
and if the given <tt>LogRecord</tt> has at least the required log level.
If not it silently returns.  If so, it calls any associated
<tt>Filter</tt> to check if the record should be published.  If so,
it calls its <tt>Formatter</tt> to format the record and then writes 
the result to the current output stream.
<p>
If this is the first <tt>LogRecord</tt> to be written to a given
<tt>OutputStream</tt>, the <tt>Formatter</tt>'s \"head\" string is 
written to the stream before the <tt>LogRecord</tt> is written.

@param  record  description of the log event. A null record is
                silently ignored and is not published"
      end

      operation 8041499 "isLoggable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "record" type class_ref 241819 // LogRecord
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if this <tt>Handler</tt> would actually log a given <tt>LogRecord</tt>.
<p>
This method checks if the <tt>LogRecord</tt> has an appropriate level and 
whether it satisfies any <tt>Filter</tt>.  It will also return false if
no output stream has been assigned yet or the LogRecord is Null.
<p>
@param record  a <tt>LogRecord</tt>
@return true if the <tt>LogRecord</tt> would be logged.
"
      end

      operation 8041627 "flush"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush any buffered messages."
      end

      operation 8041755 "flushAndClose"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8041883 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the current output stream.
<p>
The <tt>Formatter</tt>'s \"tail\" string is written to the stream before it
is closed.  In addition, if the <tt>Formatter</tt>'s \"head\" string has not
yet been written to the stream, it will be written before the
\"tail\" string.

@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\").
@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\")."
      end
    end

    class 1006491 "Handler"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <tt>Handler</tt> object takes log messages from a <tt>Logger</tt> and
exports them.  It might for example, write them to a console
or write them to a file, or send them to a network logging service,
or forward them to an OS log, or whatever.
<p>
A <tt>Handler</tt> can be disabled by doing a <tt>setLevel(Level.OFF)</tt>
and can  be re-enabled by doing a <tt>setLevel</tt> with an appropriate level.
<p>
<tt>Handler</tt> classes typically use <tt>LogManager</tt> properties to set
default values for the <tt>Handler</tt>'s <tt>Filter</tt>, <tt>Formatter</tt>,
and <tt>Level</tt>.  See the specific documentation for each concrete
<tt>Handler</tt> class.


@version 1.17, 01/12/04
@since 1.4"
      attribute 2962203 "offValue"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  Level.OFF.intValue()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1963803 // manager (<unidirectional association>)
	relation 1963803 --->
	  a role_name "manager" init_value "=  LogManager.getLogManager()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1963803 // manager (<unidirectional association>)
	  b parent class_ref 939035 // LogManager
      end

      classrelation 1963931 // filter (<unidirectional association>)
	relation 1963931 --->
	  a role_name "filter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1963931 // filter (<unidirectional association>)
	  b parent class_ref 1006619 // Filter
      end

      classrelation 1964059 // formatter (<unidirectional association>)
	relation 1964059 --->
	  a role_name "formatter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1964059 // formatter (<unidirectional association>)
	  b parent class_ref 1006747 // Formatter
      end

      classrelation 1964187 // logLevel (<unidirectional association>)
	relation 1964187 --->
	  a role_name "logLevel" init_value "=  Level.ALL" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1964187 // logLevel (<unidirectional association>)
	  b parent class_ref 241691 // Level
      end

      classrelation 1964315 // errorManager (<unidirectional association>)
	relation 1964315 --->
	  a role_name "errorManager" init_value "=  new ErrorManager()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1964315 // errorManager (<unidirectional association>)
	  b parent class_ref 1006875 // ErrorManager
      end

      attribute 2962331 "encoding"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2962459 "sealed"
	package explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Package private support for security checking.  When sealed
 is true, we access check updates to the class."
      end

      operation 8038555 "Handler"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.  The resulting <tt>Handler</tt> has a log
level of <tt>Level.ALL</tt>, no <tt>Formatter</tt>, and no 
<tt>Filter</tt>.  A default <tt>ErrorManager</tt> instance is installed
as the <tt>ErrorManager</tt>."
      end

      operation 8038683 "publish"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 241819 // LogRecord
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Publish a <tt>LogRecord</tt>.
<p>
The logging request was made initially to a <tt>Logger</tt> object,
which initialized the <tt>LogRecord</tt> and forwarded it here.
<p>
The <tt>Handler</tt>  is responsible for formatting the message, when and
if necessary.  The formatting should include localization.

@param  record  description of the log event. A null record is
                silently ignored and is not published"
      end

      operation 8038811 "flush"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush any buffered output."
      end

      operation 8038939 "close"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the <tt>Handler</tt> and free all associated resources.
<p>
The close method will perform a <tt>flush</tt> and then close the
<tt>Handler</tt>.   After close has been called this <tt>Handler</tt>
should no longer be used.  Method calls may either be silently
ignored or may throw runtime exceptions.

@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>."
      end

      operation 8039067 "setFormatter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newFormatter" type class_ref 1006747 // Formatter
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a <tt>Formatter</tt>.  This <tt>Formatter</tt> will be used 
to format <tt>LogRecords</tt> for this <tt>Handler</tt>.
<p>
Some <tt>Handlers</tt> may not use <tt>Formatters</tt>, in 
which case the <tt>Formatter</tt> will be remembered, but not used.
<p>
@param newFormatter the <tt>Formatter</tt> to use (may not be null)
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>."
      end

      operation 8039195 "getFormatter"
	public return_type class_ref 1006747 // Formatter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the <tt>Formatter</tt> for this <tt>Handler</tt>.
@return the <tt>Formatter</tt> (may be null)."
      end

      operation 8039323 "setEncoding"
	public explicit_return_type "void"
	nparams 1
	  param in name "encoding" explicit_type "String"
	nexceptions 2
	  exception class_ref 203419 // SecurityException
	  exception class_ref 205723 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the character encoding used by this <tt>Handler</tt>.
<p>
The encoding should be set before any <tt>LogRecords</tt> are written
to the <tt>Handler</tt>.

@param encoding  The name of a supported character encoding.
	      May be null, to indicate the default platform encoding.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
@exception  UnsupportedEncodingException if the named encoding is
		not supported."
      end

      operation 8039451 "getEncoding"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the character encoding for this <tt>Handler</tt>.

@return  The encoding name.  May be null, which indicates the
	    	default encoding should be used."
      end

      operation 8039579 "setFilter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newFilter" type class_ref 1006619 // Filter
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a <tt>Filter</tt> to control output on this <tt>Handler</tt>.
<P>
For each call of <tt>publish</tt> the <tt>Handler</tt> will call
this <tt>Filter</tt> (if it is non-null) to check if the
<tt>LogRecord</tt> should be published or discarded.

@param   newFilter  a <tt>Filter</tt> object (may be null)
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>."
      end

      operation 8039707 "getFilter"
	public return_type class_ref 1006619 // Filter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current <tt>Filter</tt> for this <tt>Handler</tt>.

@return  a </tt>Filter</tt> object (may be null)"
      end

      operation 8039835 "setErrorManager"
	public explicit_return_type "void"
	nparams 1
	  param inout name "em" type class_ref 1006875 // ErrorManager
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Define an ErrorManager for this Handler.
<p>
The ErrorManager's \"error\" method will be invoked if any
errors occur while using this Handler.

@param em  the new ErrorManager
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>."
      end

      operation 8039963 "getErrorManager"
	public return_type class_ref 1006875 // ErrorManager
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the ErrorManager for this Handler.

@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>."
      end

      operation 8040091 "reportError"
	protected explicit_return_type "void"
	nparams 3
	  param in name "msg" explicit_type "String"
	  param inout name "ex" type class_ref 165403 // Exception
	  param in name "code" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected convenience method to report an error to this Handler's
ErrorManager.  Note that this method retrieves and uses the ErrorManager
without doing a security check.  It can therefore be used in
environments where the caller may be non-privileged.

@param msg    a descriptive string (may be null)
@param ex     an exception (may be null)
@param code   an error code defined in ErrorManager"
      end

      operation 8040219 "setLevel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newLevel" type class_ref 241691 // Level
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the log level specifying which message levels will be
logged by this <tt>Handler</tt>.  Message levels lower than this
value will be discarded. 
<p>
The intention is to allow developers to turn on voluminous
logging, but to limit the messages that are sent to certain
<tt>Handlers</tt>.

@param newLevel   the new value for the log level
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>."
      end

      operation 8040347 "getLevel"
	public return_type class_ref 241691 // Level
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the log level specifying which messages will be
logged by this <tt>Handler</tt>.  Message levels lower
than this level will be discarded.
@return	the level of messages being logged."
      end

      operation 8040475 "isLoggable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "record" type class_ref 241819 // LogRecord
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if this <tt>Handler</tt> would actually log a given <tt>LogRecord</tt>.
<p>
This method checks if the <tt>LogRecord</tt> has an appropriate 
<tt>Level</tt> and  whether it satisfies any <tt>Filter</tt>.  It also
may make other <tt>Handler</tt> specific checks that might prevent a
handler from logging the <tt>LogRecord</tt>. It will return false if 
the <tt>LogRecord</tt> is Null.
<p>
@param record  a <tt>LogRecord</tt>
@return true if the <tt>LogRecord</tt> would be logged.
"
      end

      operation 8040603 "checkAccess"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package-private support method for security checks.
 If \"sealed\" is true, we check that the caller has
 appropriate security privileges to update Handler
 state and if not throw a SecurityException."
      end
    end

    class 1006619 "Filter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A Filter can be used to provide fine grain control over
what is logged, beyond the control provided by log levels.
<p>
Each Logger and each Handler can have a filter associated with it.
The Logger or Handler will call the isLoggable method to check
if a given LogRecord should be published.  If isLoggable returns
false, the LogRecord will be discarded.

@version 1.5, 12/19/03
@since 1.4"
      operation 8045211 "isLoggable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "record" type class_ref 241819 // LogRecord
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if a given log record should be published.
@param record  a LogRecord
@return true if the log record should be published."
      end
    end

    class 1006747 "Formatter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A Formatter provides support for formatting LogRecords.
<p>
Typically each logging Handler will have a Formatter associated
with it.  The Formatter takes a LogRecord and converts it to
a string.
<p>
Some formatters (such as the XMLFormatter) need to wrap head
and tail strings around a set of formatted records. The getHeader
and getTail methods can be used to obtain these strings.

@version 1.16, 12/19/03
@since 1.4"
      operation 8045339 "Formatter"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new formatter."
      end

      operation 8045467 "format"
	abstract public explicit_return_type "String"
	nparams 1
	  param inout name "record" type class_ref 241819 // LogRecord
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format the given log record and return the formatted string. 
<p>
The resulting formatted String will normally include a
localized and formated version of the LogRecord's message field.
The Formatter.formatMessage convenience method can (optionally)
be used to localize and format the message field.

@param record the log record to be formatted.
@return the formatted log record"
      end

      operation 8045595 "getHead"
	public explicit_return_type "String"
	nparams 1
	  param inout name "h" type class_ref 1006491 // Handler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the header string for a set of formatted records.
<p>  
This base class returns an empty string, but this may be
overriden by subclasses.

@param   h  The target handler (can be null)
@return  header string"
      end

      operation 8045723 "getTail"
	public explicit_return_type "String"
	nparams 1
	  param inout name "h" type class_ref 1006491 // Handler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the tail string for a set of formatted records.
<p>  
This base class returns an empty string, but this may be
overriden by subclasses.

@param   h  The target handler (can be null)
@return  tail string"
      end

      operation 8045851 "formatMessage"
	public explicit_return_type "String"
	nparams 1
	  param inout name "record" type class_ref 241819 // LogRecord
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Localize and format the message string from a log record.  This
method is provided as a convenience for Formatter subclasses to
use when they are performing formatting.
<p>
The message string is first localized to a format string using
the record's ResourceBundle.  (If there is no ResourceBundle,
or if the message key is not found, then the key is used as the
format string.)  The format String uses java.text style
formatting.
<ul>
<li>If there are no parameters, no formatter is used.
<li>Otherwise, if the string contains \"{0\" then
    java.text.MessageFormat  is used to format the string.
<li>Otherwise no formatting is performed. 
</ul> 
<p>

@param  record  the log record containing the raw message
@return   a localized and formatted message"
      end
    end

    class 1006875 "ErrorManager"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "ErrorManager objects can be attached to Handlers to process
any error that occur on a Handler during Logging.
<p>
When processing logging output, if a Handler encounters problems
then rather than throwing an Exception back to the issuer of
the logging call (who is unlikely to be interested) the Handler
should call its associated ErrorManager."
      attribute 2962715 "reported"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2962843 "GENERIC_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "We declare standard error codes for important categories of errors.


GENERIC_FAILURE is used for failure that don't fit
into one of the other categories.
"
      end

      attribute 2962971 "WRITE_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "WRITE_FAILURE is used when a write to an output stream fails.
"
      end

      attribute 2963099 "FLUSH_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "FLUSH_FAILURE is used when a flush to an output stream fails.
"
      end

      attribute 2963227 "CLOSE_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "CLOSE_FAILURE is used when a close of an output stream fails.
"
      end

      attribute 2963355 "OPEN_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "OPEN_FAILURE is used when an open of an output stream fails.
"
      end

      attribute 2963483 "FORMAT_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "FORMAT_FAILURE is used when formatting fails for any reason.
"
      end

      operation 8042523 "error"
	public explicit_return_type "void"
	nparams 3
	  param in name "msg" explicit_type "String"
	  param inout name "ex" type class_ref 165403 // Exception
	  param in name "code" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The error method is called when a Handler failure occurs.
<p>
This method may be overriden in subclasses.  The default
behavior in this base class is that the first call is
reported to System.err, and subsequent calls are ignored.

@param msg    a descriptive string (may be null)
@param ex     an exception (may be null)
@param code   an error code defined in ErrorManager"
      end
    end

    class 1007003 "FileHandler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Simple file logging <tt>Handler</tt>.
<p>
The <tt>FileHandler</tt> can either write to a specified file,
or it can write to a rotating set of files.  
<p>
For a rotating set of files, as each file reaches a given size
limit, it is closed, rotated out, and a new file opened.
Successively older files are named by adding \"0\", \"1\", \"2\", 
etc into the base filename.
<p>
By default buffering is enabled in the IO libraries but each log
record is flushed out when it is complete. 
<p>
By default the <tt>XMLFormatter</tt> class is used for formatting.
<p>
<b>Configuration:</b>
By default each <tt>FileHandler</tt> is initialized using the following
<tt>LogManager</tt> configuration properties.  If properties are not defined
(or have invalid values) then the specified default values are used.
<ul>
<li>   java.util.logging.FileHandler.level 
	  specifies the default level for the <tt>Handler</tt>
	  (defaults to <tt>Level.ALL</tt>).
<li>   java.util.logging.FileHandler.filter 
	  specifies the name of a <tt>Filter</tt> class to use
	  (defaults to no <tt>Filter</tt>).
<li>   java.util.logging.FileHandler.formatter 
	  specifies the name of a </tt>Formatter</tt> class to use
       (defaults to <tt>java.util.logging.XMLFormatter</tt>)
<li>   java.util.logging.FileHandler.encoding 
	  the name of the character set encoding to use (defaults to
	  the default platform encoding).
<li>   java.util.logging.FileHandler.limit 
	  specifies an approximate maximum amount to write (in bytes)
	  to any one file.  If this is zero, then there is no limit.
	  (Defaults to no limit).
<li>   java.util.logging.FileHandler.count 
	  specifies how many output files to cycle through (defaults to 1).
<li>   java.util.logging.FileHandler.pattern 
	  specifies a pattern for generating the output file name.  See
       below for details. (Defaults to \"%h/java%u.log\").
<li>   java.util.logging.FileHandler.append
	  specifies whether the FileHandler should append onto
       any existing files (defaults to false).
</ul>
<p>
<p>
A pattern consists of a string that includes the following special
components that will be replaced at runtime:
<ul>
<li>    \"/\"    the local pathname separator 
<li>     \"%t\"   the system temporary directory
<li>     \"%h\"   the value of the \"user.home\" system property
<li>     \"%g\"   the generation number to distinguish rotated logs
<li>     \"%u\"   a unique number to resolve conflicts
<li>     \"%%\"   translates to a single percent sign \"%\"
</ul>
If no \"%g\" field has been specified and the file count is greater
than one, then the generation number will be added to the end of
the generated filename, after a dot.
<p> 
Thus for example a pattern of \"%t/java%g.log\" with a count of 2
would typically cause log files to be written on Solaris to 
/var/tmp/java0.log and /var/tmp/java1.log whereas on Windows 95 they
would be typically written to C:\\TEMP\\java0.log and C:\\TEMP\\java1.log
<p> 
Generation numbers follow the sequence 0, 1, 2, etc.
<p>
Normally the \"%u\" unique field is set to 0.  However, if the <tt>FileHandler</tt>
tries to open the filename and finds the file is currently in use by
another process it will increment the unique number field and try
again.  This will be repeated until <tt>FileHandler</tt> finds a file name that
is  not currently in use. If there is a conflict and no \"%u\" field has
been specified, it will be added at the end of the filename after a dot.
(This will be after any automatically added generation number.)
<p>
Thus if three processes were all trying to log to fred%u.%g.txt then 
they  might end up using fred0.0.txt, fred1.0.txt, fred2.0.txt as
the first file in their rotating sequences.
<p>
Note that the use of unique ids to avoid conflicts is only guaranteed
to work reliably when using a local disk file system.

@version 1.34, 04/05/04
@since 1.4"
      classrelation 1965083 // <generalisation>
	relation 1965083 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1965083 // <generalisation>
	  b parent class_ref 1006363 // StreamHandler
      end

      class 1007131 "MeteredStream"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1965723 // <generalisation>
	  relation 1965723 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1965723 // <generalisation>
	    b parent class_ref 183835 // OutputStream
	end

	classrelation 1965851 // out (<unidirectional association>)
	  relation 1965851 --->
	    a role_name "out" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1965851 // out (<unidirectional association>)
	    b parent class_ref 183835 // OutputStream
	end

	attribute 2964379 "written"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 8042651 "MeteredStream"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "out" type class_ref 183835 // OutputStream
	    param in name "written" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8042779 "write"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "b" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8042907 "write"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "buff" explicit_type "byte"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8043035 "write"
	  public explicit_return_type "void"
	  nparams 3
	    param in name "buff" explicit_type "byte"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8043163 "flush"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8043291 "close"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1965211 // meter (<unidirectional association>)
	relation 1965211 --->
	  a role_name "meter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1965211 // meter (<unidirectional association>)
	  b parent class_ref 1007131 // MeteredStream
      end

      attribute 2963611 "append"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2963739 "limit"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " zero => no limit."
      end

      attribute 2963867 "count"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2963995 "pattern"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2964123 "lockFileName"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1965339 // lockStream (<unidirectional association>)
	relation 1965339 --->
	  a role_name "lockStream" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1965339 // lockStream (<unidirectional association>)
	  b parent class_ref 904859 // FileOutputStream
      end

      classrelation 1965467 // files (<unidirectional association>)
	relation 1965467 --->
	  a role_name "files" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1965467 // files (<unidirectional association>)
	  b parent class_ref 165147 // File
      end

      attribute 2964251 "MAX_LOCKS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1965595 // locks (<unidirectional association>)
	relation 1965595 --->
	  a role_name "locks" init_value "=  new java.util.HashMap()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1965595 // locks (<unidirectional association>)
	  b parent class_ref 144923 // HashMap
      end

      operation 8043419 "open"
	private explicit_return_type "void"
	nparams 2
	  param inout name "fname" type class_ref 165147 // File
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8043547 "configure"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to configure a FileHandler from LogManager
 properties and/or default values as specified in the class
 javadoc."
      end

      operation 8043675 "FileHandler"
	public explicit_return_type ""
	nparams 0
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a default <tt>FileHandler</tt>.  This will be configured
entirely from <tt>LogManager</tt> properties (or their default values).
<p>
@exception  IOException if there are IO problems opening the files.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\"))</tt>.
@exception  NullPointerException if pattern property is an empty String."
      end

      operation 8043803 "FileHandler"
	public explicit_return_type ""
	nparams 1
	  param in name "pattern" explicit_type "String"
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize a <tt>FileHandler</tt> to write to the given filename.
<p>
The <tt>FileHandler</tt> is configured based on <tt>LogManager</tt>
properties (or their default values) except that the given pattern 
argument is used as the filename pattern, the file limit is
set to no limit, and the file count is set to one.
<p>
There is no limit on the amount of data that may be written,
so use this with care.

@param pattern  the name of the output file
@exception  IOException if there are IO problems opening the files.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
@exception  IllegalArgumentException if pattern is an empty string"
      end

      operation 8043931 "FileHandler"
	public explicit_return_type ""
	nparams 2
	  param in name "pattern" explicit_type "String"
	  param inout name "append" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize a <tt>FileHandler</tt> to write to the given filename,
with optional append.
<p>
The <tt>FileHandler</tt> is configured based on <tt>LogManager</tt>
properties (or their default values) except that the given pattern 
argument is used as the filename pattern, the file limit is
set to no limit, the file count is set to one, and the append
mode is set to the given <tt>append</tt> argument.
<p>
There is no limit on the amount of data that may be written,
so use this with care.

@param pattern  the name of the output file
@param append  specifies append mode
@exception  IOException if there are IO problems opening the files.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
@exception  IllegalArgumentException if pattern is an empty string"
      end

      operation 8044059 "FileHandler"
	public explicit_return_type ""
	nparams 3
	  param in name "pattern" explicit_type "String"
	  param in name "limit" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize a <tt>FileHandler</tt> to write to a set of files.  When
(approximately) the given limit has been written to one file,
another file will be opened.  The output will cycle through a set
of count files.
<p>
The <tt>FileHandler</tt> is configured based on <tt>LogManager</tt>
properties (or their default values) except that the given pattern 
argument is used as the filename pattern, the file limit is
set to the limit argument, and the file count is set to the
given count argument.
<p>
The count must be at least 1.

@param pattern  the pattern for naming the output file
@param limit  the maximum number of bytes to write to any one file
@param count  the number of files to use
@exception  IOException if there are IO problems opening the files.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
@exception IllegalArgumentException if limit < 0, or count < 1.
@exception  IllegalArgumentException if pattern is an empty string"
      end

      operation 8044187 "FileHandler"
	public explicit_return_type ""
	nparams 4
	  param in name "pattern" explicit_type "String"
	  param in name "limit" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param inout name "append" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize a <tt>FileHandler</tt> to write to a set of files
with optional append.  When (approximately) the given limit has
been written to one file, another file will be opened.  The
output will cycle through a set of count files.
<p>
The <tt>FileHandler</tt> is configured based on <tt>LogManager</tt>
properties (or their default values) except that the given pattern 
argument is used as the filename pattern, the file limit is
set to the limit argument, and the file count is set to the
given count argument, and the append mode is set to the given
<tt>append</tt> argument.
<p>
The count must be at least 1.

@param pattern  the pattern for naming the output file
@param limit  the maximum number of bytes to write to any one file
@param count  the number of files to use
@param append  specifies append mode
@exception  IOException if there are IO problems opening the files.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
@exception IllegalArgumentException if limit < 0, or count < 1.
@exception  IllegalArgumentException if pattern is an empty string
"
      end

      operation 8044315 "openFiles"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to open the set of output files, based on the
 configured instance variables."
      end

      operation 8044443 "generate"
	private return_type class_ref 165147 // File
	nparams 3
	  param in name "pattern" explicit_type "String"
	  param in name "generation" explicit_type "int"
	  param in name "unique" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Generate a filename from a pattern."
      end

      operation 8044571 "rotate"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Rotate the set of output files"
      end

      operation 8044699 "publish"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 241819 // LogRecord
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format and publish a <tt>LogRecord</tt>.

@param  record  description of the log event. A null record is
                silently ignored and is not published"
      end

      operation 8044827 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close all the files.

@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>."
      end

      class 1007259 "InitializationErrorManager"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1965979 // <generalisation>
	  relation 1965979 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1965979 // <generalisation>
	    b parent class_ref 1006875 // ErrorManager
	end

	classrelation 1966107 // lastException (<unidirectional association>)
	  relation 1966107 --->
	    a role_name "lastException" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1966107 // lastException (<unidirectional association>)
	    b parent class_ref 165403 // Exception
	end

	operation 8044955 "error"
	  public explicit_return_type "void"
	  nparams 3
	    param in name "msg" explicit_type "String"
	    param inout name "ex" type class_ref 165403 // Exception
	    param in name "code" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 8045083 "isSetUID"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private native method to check if we are in a set UID program."
      end
    end

    class 1007387 "Logging"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Logging is the implementation class of LoggingMXBean.

The <tt>LoggingMXBean</tt> interface provides a standard
method for management access to the individual
java.util.Logger objects available at runtime.

@author Ron Mann
@author Mandy Chung
@version 1.5, 04/18/04
@since 1.5

@see javax.management
@see java.util.Logger
@see java.util.LogManager"
      classrelation 1969051 // <realization>
	relation 1969051 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1969051 // <realization>
	  b parent class_ref 1007643 // LoggingMXBean
      end

      classrelation 1969179 // logManager (<unidirectional association>)
	relation 1969179 --->
	  a role_name "logManager" init_value "=  LogManager.getLogManager()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1969179 // logManager (<unidirectional association>)
	  b parent class_ref 939035 // LogManager
      end

      operation 8055067 "Logging"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Contructor of Logging which is the implementation class
 of LoggingMXBean."
      end

      operation 8055195 "getLoggerNames"
	public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2966171 "EMPTY_STRING"
	class_attribute private explicit_type "String"
	init_value "=  \"\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8055323 "getLoggerLevel"
	public explicit_return_type "String"
	nparams 1
	  param in name "loggerName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8055451 "setLoggerLevel"
	public explicit_return_type "void"
	nparams 2
	  param in name "loggerName" explicit_type "String"
	  param in name "levelName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8055579 "getParentLoggerName"
	public explicit_return_type "String"
	nparams 1
	  param in name "loggerName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1007643 "LoggingMXBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The management interface for the logging facility.

<p>There is a single global instance of the <tt>LoggingMXBean</tt>.
This instance is an 
<a href=\"ManagementFactory.html#MXBean\">MXBean</a>
can be obtained by calling
the {@link LogManager#getLoggingMXBean} method or from the 
{@link java.lang.management.ManagementFactory#getPlatformMBeanServer
platform <tt>MBeanServer</tt>} method.

<p>The {@link javax.management.ObjectName ObjectName} for uniquely 
identifying the <tt>LoggingMXBean</tt> within an MBeanServer is:
<blockquote>
   {@link LogManager#LOGGING_MXBEAN_NAME
          <tt>java.util.logging:type=Logging</tt>}
</blockquote>

@see java.lang.management.ManagementFactory

@author  Ron Mann 
@author  Mandy Chung
@version 1.7, 04/20/04
@since   1.5
"
      operation 8054555 "getLoggerNames"
	public return_type class_ref 135579 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of currently registered loggers. This method
calls {@link LogManager#getLoggerNames} and returns a list 
of the logger names.

@return A list of <tt>String</tt> each of which is a
        currently registered <tt>Logger</tt> name."
      end

      operation 8054683 "getLoggerLevel"
	public explicit_return_type "String"
	nparams 1
	  param in name "loggerName" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the log level associated with the specified logger.
If the specified logger does not exist, <tt>null</tt> 
is returned. 
This method first finds the logger of the given name and 
then returns the name of the log level by calling:
<blockquote>
  {@link Logger#getLevel Logger.getLevel()}.{@link Level#getName getName()};
</blockquote>
 
<p>
If the <tt>Level</tt> of the specified logger is <tt>null</tt>, 
which means that this logger's effective level is inherited 
from its parent, an empty string will be returned.

@param loggerName The name of the <tt>Logger</tt> to be retrieved.

@return The name of the log level of the specified logger; or
        an empty string if the log level of the specified logger
        is <tt>null</tt>.  If the specified logger does not
        exist, <tt>null</tt> is returned.

@see Logger#getLevel"
      end

      operation 8054811 "setLoggerLevel"
	public explicit_return_type "void"
	nparams 2
	  param in name "loggerName" explicit_type "String"
	  param in name "levelName" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the specified logger to the specified new level.
If the <tt>levelName</tt> is not <tt>null</tt>, the level
of the specified logger is set to the parsed <tt>Level</tt>
matching the <tt>levelName</tt>.
If the <tt>levelName</tt> is <tt>null</tt>, the level
of the specified logger is set to <tt>null</tt> and
the effective level of the logger is inherited from 
its nearest ancestor with a specific (non-null) level value.

@param loggerName The name of the <tt>Logger</tt> to be set.
                  Must be non-null.
@param levelName The name of the level to set the specified logger to, 
                or <tt>null</tt> if to set the level to inherit
                from its nearest ancestor.

@throws IllegalArgumentException if the specified logger 
does not exist, or <tt>levelName</tt> is not a valid level name.

@throws SecurityException if a security manager exists and if
the caller does not have LoggingPermission(\"control\").

@see Logger#setLevel"
      end

      operation 8054939 "getParentLoggerName"
	public explicit_return_type "String"
	nparams 1
	  param in name "loggerName" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the parent for the specified logger.
If the specified logger does not exist, <tt>null</tt> is returned. 
If the specified logger is the root <tt>Logger</tt> in the namespace,
the result will be an empty string.

@param loggerName The name of a <tt>Logger</tt>.

@return the name of the nearest existing parent logger;
        an empty string if the specified logger is the root logger.
        If the specified logger does not exist, <tt>null</tt> 
        is returned. "
      end
    end

    class 1007771 "LoggingPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The permission which the SecurityManager will check when code
that is running with a SecurityManager calls one of the logging
control methods (such as Logger.setLevel).
<p>
Currently there is only one named LoggingPermission.  This is \"control\"
and it grants the ability to control the logging configuration, for
example by adding or removing Handlers, by adding or removing Filters,
or by changing logging levels.
<p>
Programmers do not normally create LoggingPermission objects directly.
Instead they are created by the security policy code based on reading
the security policy file.


@version 1.9, 12/19/03
@since 1.4
@see java.security.BasicPermission
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager
"
      classrelation 1969307 // <generalisation>
	relation 1969307 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1969307 // <generalisation>
	  b parent class_ref 285083 // BasicPermission
      end

      attribute 2966299 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  63564341580231582L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8055707 "LoggingPermission"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "actions" explicit_type "String"
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new LoggingPermission object.

@param name Permission name.  Must be \"control\".
@param actions Must be either null or the empty string.
@throws IllegalArgumentException if arguments are invalid"
      end
    end

    class 1008155 "MemoryHandler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<tt>Handler</tt> that buffers requests in a circular buffer in memory.
<p>
Normally this <tt>Handler</tt> simply stores incoming <tt>LogRecords</tt>
into its memory buffer and discards earlier records.  This buffering
is very cheap and avoids formatting costs.  On certain trigger
conditions, the <tt>MemoryHandler</tt> will push out its current buffer
contents to a target <tt>Handler</tt>, which will typically publish
them to the outside world.
<p>
There are three main models for triggering a push of the buffer:
<ul>
<li>
An incoming <tt>LogRecord</tt> has a type that is greater than
a pre-defined level, the <tt>pushLevel</tt>.
<li>
An external class calls the <tt>push</tt> method explicitly. 
<li>
A subclass overrides the <tt>log</tt> method and scans each incoming
<tt>LogRecord</tt> and calls <tt>push</tt> if a record matches some
desired criteria.
</ul>
<p>
<b>Configuration:</b>
By default each <tt>MemoryHandler</tt> is initialized using the following
LogManager configuration properties.  If properties are not defined
(or have invalid values) then the specified default values are used.
If no default value is defined then a RuntimeException is thrown.
<ul>
<li>   java.util.logging.MemoryHandler.level 
	  specifies the level for the <tt>Handler</tt>
       (defaults to <tt>Level.ALL</tt>).
<li>   java.util.logging.MemoryHandler.filter
	  specifies the name of a <tt>Filter</tt> class to use
	  (defaults to no <tt>Filter</tt>).
<li>   java.util.logging.MemoryHandler.size 
	  defines the buffer size (defaults to 1000).
<li>   java.util.logging.MemoryHandler.push
	  defines the <tt>pushLevel</tt> (defaults to <tt>level.SEVERE</tt>). 
<li>   java.util.logging.MemoryHandler.target
	  specifies the name of the target <tt>Handler </tt> class.
	  (no default).
</ul>

@version 1.24, 12/19/03
@since 1.4"
      classrelation 1971995 // <generalisation>
	relation 1971995 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1971995 // <generalisation>
	  b parent class_ref 1006491 // Handler
      end

      attribute 2968603 "DEFAULT_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1972123 // pushLevel (<unidirectional association>)
	relation 1972123 --->
	  a role_name "pushLevel" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1972123 // pushLevel (<unidirectional association>)
	  b parent class_ref 241691 // Level
      end

      attribute 2968731 "size"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1972251 // target (<unidirectional association>)
	relation 1972251 --->
	  a role_name "target" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1972251 // target (<unidirectional association>)
	  b parent class_ref 1006491 // Handler
      end

      classrelation 1972379 // buffer (<unidirectional association>)
	relation 1972379 --->
	  a role_name "buffer" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1972379 // buffer (<unidirectional association>)
	  b parent class_ref 241819 // LogRecord
      end

      attribute 2968859 "start"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2968987 "count"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8063899 "configure"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to configure a ConsoleHandler from LogManager
 properties and/or default values as specified in the class
 javadoc."
      end

      operation 8064027 "MemoryHandler"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a <tt>MemoryHandler</tt> and configure it based on
<tt>LogManager</tt> configuration properties."
      end

      operation 8064155 "init"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialize.  Size is a count of LogRecords."
      end

      operation 8064283 "MemoryHandler"
	public explicit_return_type ""
	nparams 3
	  param inout name "target" type class_ref 1006491 // Handler
	  param in name "size" explicit_type "int"
	  param inout name "pushLevel" type class_ref 241691 // Level
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a <tt>MemoryHandler</tt>.
<p>
The <tt>MemoryHandler</tt> is configured based on <tt>LogManager</tt>
properties (or their default values) except that the given <tt>pushLevel</tt>
argument and buffer size argument are used.
    
@param target  the Handler to which to publish output.
@param size    the number of log records to buffer (must be greater than zero)
@param pushLevel  message level to push on

@throws IllegalArgumentException is size is <= 0"
      end

      operation 8064411 "publish"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 241819 // LogRecord
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Store a <tt>LogRecord</tt> in an internal buffer.
<p>
If there is a <tt>Filter</tt>, its <tt>isLoggable</tt>
method is called to check if the given log record is loggable.
If not we return.  Otherwise the given record is copied into
an internal circular buffer.  Then the record's level property is
compared with the <tt>pushLevel</tt>. If the given level is
greater than or equal to the <tt>pushLevel</tt> then <tt>push</tt>
is called to write all buffered records to the target output
<tt>Handler</tt>.

@param  record  description of the log event. A null record is
                silently ignored and is not published"
      end

      operation 8064539 "push"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Push any buffered output to the target <tt>Handler</tt>.
<p>
The buffer is then cleared."
      end

      operation 8064667 "flush"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes a flush on the target <tt>Handler</tt>.
<p>
Note that the current contents of the <tt>MemoryHandler</tt>
buffer are <b>not</b> written out.  That requires a \"push\"."
      end

      operation 8064795 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the <tt>Handler</tt> and free all associated resources.
This will also close the target <tt>Handler</tt>.

@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>."
      end

      operation 8064923 "setPushLevel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newLevel" type class_ref 241691 // Level
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the <tt>pushLevel</tt>.  After a <tt>LogRecord</tt> is copied 
into our internal buffer, if its level is greater than or equal to
the <tt>pushLevel</tt>, then <tt>push</tt> will be called.

@param newLevel the new value of the <tt>pushLevel</tt>
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>."
      end

      operation 8065051 "getPushLevel"
	public return_type class_ref 241691 // Level
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the <tt>pushLevel</tt>.

@return the value of the <tt>pushLevel</tt>"
      end

      operation 8065179 "isLoggable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "record" type class_ref 241819 // LogRecord
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if this <tt>Handler</tt> would actually log a given 
<tt>LogRecord</tt> into its internal buffer.
<p>
This method checks if the <tt>LogRecord</tt> has an appropriate level and 
whether it satisfies any <tt>Filter</tt>.  However it does <b>not</b>
check whether the <tt>LogRecord</tt> would result in a \"push\" of the
buffer contents. It will return false if the <tt>LogRecord</tt> is Null.
<p>
@param record  a <tt>LogRecord</tt>
@return true if the <tt>LogRecord</tt> would be logged.
"
      end
    end

    class 1008283 "SimpleFormatter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Print a brief summary of the LogRecord in a human readable
format.  The summary will typically be 1 or 2 lines.

@version 1.14, 12/19/03
@since 1.4"
      classrelation 1972507 // <generalisation>
	relation 1972507 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1972507 // <generalisation>
	  b parent class_ref 1006747 // Formatter
      end

      classrelation 1972635 // dat (<unidirectional association>)
	relation 1972635 --->
	  a role_name "dat" init_value "=  new Date()" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1972635 // dat (<unidirectional association>)
	  b parent class_ref 139163 // Date
      end

      attribute 2969115 "format"
	class_attribute const_attribute private explicit_type "String"
	init_value "=  \"{0,date} {0,time}\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1972763 // formatter (<unidirectional association>)
	relation 1972763 --->
	  a role_name "formatter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1972763 // formatter (<unidirectional association>)
	  b parent class_ref 987291 // MessageFormat
      end

      attribute 2969243 "args"
	private explicit_type "Object"
	multiplicity "[]"
	init_value "=  new Object[1]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2969371 "lineSeparator"
	private explicit_type "String"
	init_value "=  (String) java.security.AccessController.doPrivileged(
               new sun.security.action.GetPropertyAction(\"line.separator\"))"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Line separator string.  This is the value of the line.separator
 property at the moment that the SimpleFormatter was created."
      end

      operation 8065307 "format"
	public explicit_return_type "String"
	nparams 1
	  param inout name "record" type class_ref 241819 // LogRecord
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format the given LogRecord.
@param record the log record to be formatted.
@return a formatted log record"
      end
    end

    class 1008411 "SocketHandler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Simple network logging <tt>Handler</tt>.
<p>
<tt>LogRecords</tt> are published to a network stream connection.  By default
the <tt>XMLFormatter</tt> class is used for formatting.
<p>
<b>Configuration:</b>
By default each <tt>SocketHandler</tt> is initialized using the following
<tt>LogManager</tt> configuration properties.  If properties are not defined
(or have invalid values) then the specified default values are used.
<ul>
<li>   java.util.logging.SocketHandler.level
	  specifies the default level for the <tt>Handler</tt>
	  (defaults to <tt>Level.ALL</tt>).
<li>   java.util.logging.SocketHandler.filter
	  specifies the name of a <tt>Filter</tt> class to use
	  (defaults to no <tt>Filter</tt>).
<li>   java.util.logging.SocketHandler.formatter
	  specifies the name of a <tt>Formatter</tt> class to use 
	  (defaults to <tt>java.util.logging.XMLFormatter</tt>).
<li>   java.util.logging.SocketHandler.encoding 
	  the name of the character set encoding to use (defaults to
	  the default platform encoding).
<li>   java.util.logging.SocketHandler.host
	  specifies the target host name to connect to (no default).
<li>   java.util.logging.SocketHandler.port
	  specifies the target TCP port to use (no default).
</ul>
<p>
The output IO stream is buffered, but is flushed after each
<tt>LogRecord</tt> is written.

@version 1.18, 12/19/03
@since 1.4"
      classrelation 1972891 // <generalisation>
	relation 1972891 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1972891 // <generalisation>
	  b parent class_ref 1006363 // StreamHandler
      end

      classrelation 1973019 // sock (<unidirectional association>)
	relation 1973019 --->
	  a role_name "sock" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1973019 // sock (<unidirectional association>)
	  b parent class_ref 235419 // Socket
      end

      attribute 2969499 "host"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2969627 "port"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2969755 "portProperty"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8065435 "configure"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to configure a SocketHandler from LogManager
 properties and/or default values as specified in the class
 javadoc."
      end

      operation 8065563 "SocketHandler"
	public explicit_return_type ""
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a <tt>SocketHandler</tt>, using only <tt>LogManager</tt> properties
(or their defaults).
@throws IllegalArgumentException if the host or port are invalid or
		are not specified as LogManager properties.
@throws IOException if we are unable to connect to the target
	       host and port."
      end

      operation 8065691 "SocketHandler"
	public explicit_return_type ""
	nparams 2
	  param in name "host" explicit_type "String"
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a <tt>SocketHandler</tt> using a specified host and port.

The <tt>SocketHandler</tt> is configured based on <tt>LogManager</tt> 
properties (or their default values) except that the given target host
and port arguments are used. If the host argument is empty, but not
null String then the localhost is used.

@param host target host.
@param port target port.

@throws IllegalArgumentException if the host or port are invalid.
@throws IOException if we are unable to connect to the target
	       host and port."
      end

      operation 8065819 "connect"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8065947 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close this output stream.

@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>."
      end

      operation 8066075 "publish"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 241819 // LogRecord
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format and publish a <tt>LogRecord</tt>.

@param  record  description of the log event. A null record is
                silently ignored and is not published"
      end
    end

    class 1008539 "XMLFormatter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Format a LogRecord into a standard XML format.
<p>
The DTD specification is provided as Appendix A to the
Java Logging APIs specification.
<p>
The XMLFormatter can be used with arbitrary character encodings,
but it is recommended that it normally be used with UTF-8.  The
character encoding can be set on the output Handler.

@version 1.24, 01/12/04
@since 1.4"
      classrelation 1973147 // <generalisation>
	relation 1973147 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1973147 // <generalisation>
	  b parent class_ref 1006747 // Formatter
      end

      classrelation 1973275 // manager (<unidirectional association>)
	relation 1973275 --->
	  a role_name "manager" init_value "=  LogManager.getLogManager()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1973275 // manager (<unidirectional association>)
	  b parent class_ref 939035 // LogManager
      end

      operation 8066203 "a2"
	private explicit_return_type "void"
	nparams 2
	  param inout name "sb" type class_ref 198171 // StringBuffer
	  param in name "x" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Append a two digit number."
      end

      operation 8066331 "appendISO8601"
	private explicit_return_type "void"
	nparams 2
	  param inout name "sb" type class_ref 198171 // StringBuffer
	  param in name "millis" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Append the time and date in ISO 8601 format"
      end

      operation 8066459 "escape"
	private explicit_return_type "void"
	nparams 2
	  param inout name "sb" type class_ref 198171 // StringBuffer
	  param in name "text" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Append to the given StringBuffer an escaped version of the
 given text string where XML special characters have been escaped.
 For a null string we append \"<null>\""
      end

      operation 8066587 "format"
	public explicit_return_type "String"
	nparams 1
	  param inout name "record" type class_ref 241819 // LogRecord
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format the given message to XML.
@param record the log record to be formatted.
@return a formatted log record"
      end

      operation 8066715 "getHead"
	public explicit_return_type "String"
	nparams 1
	  param inout name "h" type class_ref 1006491 // Handler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the header string for a set of XML formatted records.

@param   h  The target handler (can be null)
@return  a valid XML string"
      end

      operation 8066843 "getTail"
	public explicit_return_type "String"
	nparams 1
	  param inout name "h" type class_ref 1006491 // Handler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the tail string for a set of XML formatted records.

@param   h  The target handler (can be null)
@return  a valid XML string"
      end
    end
  end

  deploymentview 169371 "logging"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 766107 "Handler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1006491 // Handler
      end
      comment "@(#)Handler.java	1.17 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 766235 "StreamHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_classes
	class_ref 1006363 // StreamHandler
      end
      comment "@(#)StreamHandler.java	1.18 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 766363 "ConsoleHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.net.*;
${definition}"
      associated_classes
	class_ref 1006235 // ConsoleHandler
      end
      comment "@(#)ConsoleHandler.java	1.12 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 766491 "ErrorManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1006875 // ErrorManager
      end
      comment "@(#)ErrorManager.java	1.8 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 766619 "FileHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.security.*;
${definition}"
      associated_classes
	class_ref 1007003 // FileHandler
      end
      comment "@(#)FileHandler.java	1.34 04/04/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 766747 "Filter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1006619 // Filter
      end
      comment "@(#)Filter.java	1.5 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 766875 "Formatter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1006747 // Formatter
      end
      comment "@(#)Formatter.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 767003 "Level"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ResourceBundle;
${definition}"
      associated_classes
	class_ref 241691 // Level
      end
      comment "@(#)Level.java	1.19 04/02/25

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 767131 "Logger"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.security.*;
import java.lang.ref.WeakReference;
${definition}"
      associated_classes
	class_ref 241563 // Logger
      end
      comment "@(#)Logger.java	1.46 06/04/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 767259 "LoggingMXBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1007643 // LoggingMXBean
      end
      comment "@(#)LoggingMXBean.java	1.7 04/04/20

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 767387 "Logging"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.util.List;
import java.util.ArrayList;
import sun.management.MXBeanSupport;
${definition}"
      associated_classes
	class_ref 1007387 // Logging
      end
      comment "@(#)Logging.java	1.5 04/04/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 767515 "LoggingPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
${definition}"
      associated_classes
	class_ref 1007771 // LoggingPermission
      end
      comment "@(#)LoggingPermission.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 767643 "LogManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.util.*;
import java.security.*;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.net.URL;
import sun.security.action.GetPropertyAction;
${definition}"
      associated_classes
	class_ref 939035 // LogManager
      end
      comment "@(#)LogManager.java	1.48 07/01/08

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 767771 "LogRecord"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.io.*;
${definition}"
      associated_classes
	class_ref 241819 // LogRecord
      end
      comment "@(#)LogRecord.java	1.23 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 767899 "MemoryHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1008155 // MemoryHandler
      end
      comment "@(#)MemoryHandler.java	1.24 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 768027 "SimpleFormatter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.text.*;
import java.util.Date;
${definition}"
      associated_classes
	class_ref 1008283 // SimpleFormatter
      end
      comment "@(#)SimpleFormatter.java	1.14 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 768155 "SocketHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.net.*;
${definition}"
      associated_classes
	class_ref 1008411 // SocketHandler
      end
      comment "@(#)SocketHandler.java	1.18 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 768283 "XMLFormatter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.nio.charset.Charset;
import java.util.*;
${definition}"
      associated_classes
	class_ref 1008539 // XMLFormatter
      end
      comment "@(#)XMLFormatter.java	1.24 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
