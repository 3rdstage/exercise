class JDKBridge
!!!1682075.java!!!	getLocalCodebase() : String
        return localCodebase;
!!!1682203.java!!!	useCodebaseOnly() : boolean
        return useCodebaseOnly;
!!!1682331.java!!!	loadClass(in className : String, in remoteCodebase : String, inout loader : ClassLoader) : Class
        
        if (loader == null) {
            return loadClassM(className,remoteCodebase,useCodebaseOnly);
        } else {
            try {
                return loadClassM(className,remoteCodebase,useCodebaseOnly);
            } catch (ClassNotFoundException e) {
                return loader.loadClass(className);
            }
        }
!!!1682459.java!!!	loadClass(in className : String, in remoteCodebase : String) : Class
        return loadClass(className,remoteCodebase,null);
!!!1682587.java!!!	loadClass(in className : String) : Class
        return loadClass(className,null,null);
!!!1682715.java!!!	main(in args : String) : void
        System.out.println("1.2 VM");
        
	/*       
		 // If on 1.2, use a policy with all permissions.
		 System.setSecurityManager (new javax.rmi.download.SecurityManager());
		 String targetClass = "[[Lrmic.Typedef;";
		 System.out.println("localCodebase =  "+localCodebase);
		 System.out.println("Trying to load "+targetClass);
		 try {
		 Class clz = loadClass(targetClass,null,localCodebase);
		 System.out.println("Loaded: "+clz);
		 } catch (ClassNotFoundException e) {
		 System.out.println("Caught "+e);
		 }
	*/
!!!1682843.java!!!	setCodebaseProperties() : void
        String prop = (String)AccessController.doPrivileged(
            new GetPropertyAction(LOCAL_CODEBASE_KEY)
        );
        if (prop != null && prop.trim().length() > 0) {
            localCodebase = prop;
        }

        prop = (String)AccessController.doPrivileged(
            new GetPropertyAction(USE_CODEBASE_ONLY_KEY)
        );
        if (prop != null && prop.trim().length() > 0) {
            useCodebaseOnly = Boolean.valueOf(prop).booleanValue();
        }
!!!1682971.java!!!	setLocalCodebase(in codebase : String) : void
        localCodebase = codebase;    
!!!1683099.java!!!	loadClassM(in className : String, in remoteCodebase : String, inout useCodebaseOnly : boolean) : Class

        try {
            return JDKClassLoader.loadClass(null,className);
        } catch (ClassNotFoundException e) {}
        try {
            if (!useCodebaseOnly && remoteCodebase != null) {
                return RMIClassLoader.loadClass(remoteCodebase,
                                                className);
            } else {
                return RMIClassLoader.loadClass(className);
            }
        } catch (MalformedURLException e) {
            className = className + ": " + e.toString();
        }

        throw new ClassNotFoundException(className);
