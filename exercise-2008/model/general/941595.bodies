class DirectLongBufferS
!!!7421083.java!!!	viewedBuffer() : Object

        return viewedBuffer;
!!!7421211.java!!!	cleaner() : Cleaner
 return null;
!!!7421339.java!!!	DirectLongBufferS(inout db : DirectBuffer, in mark : int, in pos : int, in lim : int, in cap : int, in off : int)


	super(mark, pos, lim, cap);
	address = db.address() + off;
	viewedBuffer = db;






!!!7421467.java!!!	slice() : LongBuffer

	int pos = this.position();
	int lim = this.limit();
	assert (pos <= lim);
	int rem = (pos <= lim ? lim - pos : 0);
	int off = (pos << 3);
        assert (off >= 0);
	return new DirectLongBufferS(this, -1, 0, rem, rem, off);
!!!7421595.java!!!	duplicate() : LongBuffer

	return new DirectLongBufferS(this,
					      this.markValue(),
					      this.position(),
					      this.limit(),
					      this.capacity(),
					      0);
!!!7421723.java!!!	asReadOnlyBuffer() : LongBuffer


	return new DirectLongBufferRS(this,
					   this.markValue(),
					   this.position(),
					   this.limit(),
					   this.capacity(),
					   0);



!!!7421851.java!!!	address() : long

	return address;
!!!7421979.java!!!	ix(in i : int) : long

        return address + (i << 3);
!!!7422107.java!!!	get() : long

	return (Bits.swap(unsafe.getLong(ix(nextGetIndex()))));
!!!7422235.java!!!	get(in i : int) : long

	return (Bits.swap(unsafe.getLong(ix(checkIndex(i)))));
!!!7422363.java!!!	get(in dst : long, in offset : int, in length : int) : LongBuffer


	if ((length << 3) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD) {
	    checkBounds(offset, length, dst.length);
	    int pos = position();
	    int lim = limit();
	    assert (pos <= lim);
	    int rem = (pos <= lim ? lim - pos : 0);
	    if (length > rem)
		throw new BufferUnderflowException();

	    if (order() != ByteOrder.nativeOrder())
		Bits.copyToLongArray(ix(pos), dst,
					  offset << 3,
					  length << 3);
	    else
		Bits.copyToByteArray(ix(pos), dst,
				     offset << 3,
				     length << 3);
	    position(pos + length);
	} else {
	    super.get(dst, offset, length);
	}
	return this;



!!!7422491.java!!!	put(in x : long) : LongBuffer


	unsafe.putLong(ix(nextPutIndex()), Bits.swap((x)));
	return this;



!!!7422619.java!!!	put(in i : int, in x : long) : LongBuffer


	unsafe.putLong(ix(checkIndex(i)), Bits.swap((x)));
	return this;



!!!7422747.java!!!	put(inout src : LongBuffer) : LongBuffer


	if (src instanceof DirectLongBufferS) {
	    if (src == this)
		throw new IllegalArgumentException();
	    DirectLongBufferS sb = (DirectLongBufferS)src;

	    int spos = sb.position();
	    int slim = sb.limit();
	    assert (spos <= slim);
	    int srem = (spos <= slim ? slim - spos : 0);

	    int pos = position();
	    int lim = limit();
	    assert (pos <= lim);
	    int rem = (pos <= lim ? lim - pos : 0);

	    if (srem > rem)
		throw new BufferOverflowException();
 	    unsafe.copyMemory(sb.ix(spos), ix(pos), srem << 3);
 	    sb.position(spos + srem);
 	    position(pos + srem);
	} else if (!src.isDirect()) {

	    int spos = src.position();
	    int slim = src.limit();
	    assert (spos <= slim);
	    int srem = (spos <= slim ? slim - spos : 0);

	    put(src.hb, src.offset + spos, srem);
	    src.position(spos + srem);

	} else {
	    super.put(src);
	}
	return this;



!!!7422875.java!!!	put(in src : long, in offset : int, in length : int) : LongBuffer


	if ((length << 3) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD) {
	    checkBounds(offset, length, src.length);
	    int pos = position();
	    int lim = limit();
	    assert (pos <= lim);
	    int rem = (pos <= lim ? lim - pos : 0);
	    if (length > rem)
		throw new BufferOverflowException();

	    if (order() != ByteOrder.nativeOrder()) 
		Bits.copyFromLongArray(src, offset << 3,
					    ix(pos), length << 3);
	    else
		Bits.copyFromByteArray(src, offset << 3,
				       ix(pos), length << 3);
	    position(pos + length);
	} else {
	    super.put(src, offset, length);
	}
	return this;



!!!7423003.java!!!	compact() : LongBuffer


	int pos = position();
	int lim = limit();
	assert (pos <= lim);
	int rem = (pos <= lim ? lim - pos : 0);

 	unsafe.copyMemory(ix(pos), ix(0), rem << 3);
 	position(rem);
	limit(capacity());
	return this;



!!!7423131.java!!!	isDirect() : boolean

	return true;
!!!7423259.java!!!	isReadOnly() : boolean

	return false;
!!!7423387.java!!!	order() : ByteOrder


	return ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN)
		? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);





