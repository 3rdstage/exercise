class XSNamedMap4Types
!!!5360923.java!!!	XSNamedMap4Types(in namespace : String, inout map : SymbolHash, in type : short)
        super(namespace, map);
        fType = type;
!!!5361051.java!!!	XSNamedMap4Types(in namespaces : String, inout maps : SymbolHash, in num : int, in type : short)
        super(namespaces, maps, num);
        fType = type;
!!!5361179.java!!!	getLength() : int
        if (fLength == -1) {
            // first get the number of components for all types
            int length = 0;
            for (int i = 0; i < fNSNum; i++)
                length += fMaps[i].getLength();
            // then copy all types to an temporary array
            int pos = 0;
            XSObject[] array = new XSObject[length];
            for (int i = 0; i < fNSNum; i++) {
                pos += fMaps[i].getValues(array, pos);
            }
            // then copy either simple or complex types to fArray,
            // depending on which kind is required
            fLength = 0;
            fArray = new XSObject[length];
            XSTypeDefinition type;
            for (int i = 0; i < length; i++) {
                type = (XSTypeDefinition)array[i];
                if (type.getTypeCategory() == fType) {
                    fArray[fLength++] = type;
                }
            }
        }
        return fLength;
!!!5361307.java!!!	itemByName(in namespace : String, in localName : String) : XSObject
        if (namespace != null)
            namespace = namespace.intern();
        for (int i = 0; i < fNSNum; i++) {
            if (namespace == fNamespaces[i]) {
                XSTypeDefinition type = (XSTypeDefinition)fMaps[i].get(localName);
                // only return it if it mataches the required type
                if (type.getTypeCategory() == fType)
                    return type;
                return null;
            }
        }
        return null;
!!!5361435.java!!!	item(in index : int) : XSObject
        if (fArray == null) {
            getLength();
        }
        if (index < 0 || index >= fLength)
            return null;
        return fArray[index];
