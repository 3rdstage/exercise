class TextComponent
!!!6365211.java!!!	TextComponent(in text : String)
        GraphicsEnvironment.checkHeadless();
	this.text = (text != null) ? text : "";
	setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
	checkSystemClipboardAccess();
!!!6365339.java!!!	enableInputMethodsIfNecessary() : void
	if (checkForEnableIM) {
            checkForEnableIM = false;
    	    try {
                Toolkit toolkit = Toolkit.getDefaultToolkit();
                boolean shouldEnable = false;            
                if (toolkit instanceof InputMethodSupport) {
                    shouldEnable = ((InputMethodSupport)toolkit)
                      .enableInputMethodsForTextComponent();
                }
                enableInputMethods(shouldEnable);
            } catch (Exception e) {
                // if something bad happens, just don't enable input methods
	    }
        }
!!!6365467.java!!!	enableInputMethods(inout enable : boolean) : void
        checkForEnableIM = false;
        super.enableInputMethods(enable);
!!!6365595.java!!!	areInputMethodsEnabled() : boolean
        // moved from the constructor above to here and addNotify below, 
        // this call will initialize the toolkit if not already initialized.
        if (checkForEnableIM) {
            enableInputMethodsIfNecessary(); 
        }

        // TextComponent handles key events without touching the eventMask or
        // having a key listener, so just check whether the flag is set
        return (eventMask & AWTEvent.INPUT_METHODS_ENABLED_MASK) != 0;
!!!6365723.java!!!	getInputMethodRequests() : InputMethodRequests
        TextComponentPeer peer = (TextComponentPeer)this.peer;
        if (peer != null) return peer.getInputMethodRequests();
        else return null;
!!!6365851.java!!!	addNotify() : void
        super.addNotify();
        enableInputMethodsIfNecessary();
!!!6365979.java!!!	removeNotify() : void
        synchronized (getTreeLock()) {
	    TextComponentPeer peer = (TextComponentPeer)this.peer;
	    if (peer != null) {
	        text = peer.getText();
		selectionStart = peer.getSelectionStart();
		selectionEnd = peer.getSelectionEnd();
	    }
	    super.removeNotify();
	}
!!!6366107.java!!!	setText(in t : String) : void
	text = (t != null) ? t : "";
	TextComponentPeer peer = (TextComponentPeer)this.peer;
	if (peer != null) {
	    peer.setText(text);
	}
!!!6366235.java!!!	getText() : String
	TextComponentPeer peer = (TextComponentPeer)this.peer;
	if (peer != null) {
	    text = peer.getText();
	}
	return text;
!!!6366363.java!!!	getSelectedText() : String
	return getText().substring(getSelectionStart(), getSelectionEnd());
!!!6366491.java!!!	isEditable() : boolean
	return editable;
!!!6366619.java!!!	setEditable(inout b : boolean) : void
        if (editable == b) {
            return;
        }

	editable = b;
	TextComponentPeer peer = (TextComponentPeer)this.peer;
	if (peer != null) {
	    peer.setEditable(b);
	}
!!!6366747.java!!!	getBackground() : Color
        if (!editable && !backgroundSetByClientCode) {
            return SystemColor.control;
        }

        return super.getBackground();
!!!6366875.java!!!	setBackground(inout c : Color) : void
        backgroundSetByClientCode = true;
        super.setBackground(c);
!!!6367003.java!!!	getSelectionStart() : int
	TextComponentPeer peer = (TextComponentPeer)this.peer;
	if (peer != null) {
	    selectionStart = peer.getSelectionStart();
	}
	return selectionStart;
!!!6367131.java!!!	setSelectionStart(in selectionStart : int) : void
	/* Route through select method to enforce consistent policy
    	 * between selectionStart and selectionEnd.
    	 */
	select(selectionStart, getSelectionEnd());
!!!6367259.java!!!	getSelectionEnd() : int
	TextComponentPeer peer = (TextComponentPeer)this.peer;
	if (peer != null) {
	    selectionEnd = peer.getSelectionEnd();
	}
	return selectionEnd;
!!!6367387.java!!!	setSelectionEnd(in selectionEnd : int) : void
	/* Route through select method to enforce consistent policy
    	 * between selectionStart and selectionEnd.
    	 */
	select(getSelectionStart(), selectionEnd);
!!!6367515.java!!!	select(in selectionStart : int, in selectionEnd : int) : void
	String text = getText();
	if (selectionStart < 0) {
	    selectionStart = 0;
	}
	if (selectionStart > text.length()) {
	    selectionStart = text.length();
	}
	if (selectionEnd > text.length()) {
	    selectionEnd = text.length();
	}
	if (selectionEnd < selectionStart) {
	    selectionEnd = selectionStart;
	}

	this.selectionStart = selectionStart;
	this.selectionEnd = selectionEnd;

	TextComponentPeer peer = (TextComponentPeer)this.peer;
	if (peer != null) {
	    peer.select(selectionStart, selectionEnd);
	}
!!!6367643.java!!!	selectAll() : void
	String text = getText();
	this.selectionStart = 0;
	this.selectionEnd = getText().length();

	TextComponentPeer peer = (TextComponentPeer)this.peer;
	if (peer != null) {
	    peer.select(selectionStart, selectionEnd);
	}
!!!6367771.java!!!	setCaretPosition(in position : int) : void
	if (position < 0) {
	    throw new IllegalArgumentException("position less than zero.");
	}

	int maxposition = getText().length();
	if (position > maxposition) {
	    position = maxposition;
	}

	TextComponentPeer peer = (TextComponentPeer)this.peer;
	if (peer != null) {
	    peer.setCaretPosition(position);
	} else {
	    select(position, position);
	}
!!!6367899.java!!!	getCaretPosition() : int
        TextComponentPeer peer = (TextComponentPeer)this.peer;
	int position = 0;

	if (peer != null) {
	    position = peer.getCaretPosition();
	} else {
	    position = selectionStart;
	}
	return position;
!!!6368027.java!!!	addTextListener(inout l : TextListener) : void
	if (l == null) {
	    return;
	}
	textListener = AWTEventMulticaster.add(textListener, l);
        newEventsOnly = true;
!!!6368155.java!!!	removeTextListener(inout l : TextListener) : void
	if (l == null) {
	    return;
	}
	textListener = AWTEventMulticaster.remove(textListener, l);
!!!6368283.java!!!	getTextListeners() : TextListener
        return (TextListener[])(getListeners(TextListener.class));
!!!6368411.java!!!	getListeners(inout listenerType : Class) : T
	EventListener l = null; 
	if  (listenerType == TextListener.class) { 
	    l = textListener;
	} else {
	    return super.getListeners(listenerType);
	}
	return AWTEventMulticaster.getListeners(l, listenerType);
!!!6368539.java!!!	eventEnabled(inout e : AWTEvent) : boolean
        if (e.id == TextEvent.TEXT_VALUE_CHANGED) {
            if ((eventMask & AWTEvent.TEXT_EVENT_MASK) != 0 ||
                textListener != null) {
                return true;
            } 
            return false;
        }
        return super.eventEnabled(e);
!!!6368667.java!!!	processEvent(inout e : AWTEvent) : void
        if (e instanceof TextEvent) {
            processTextEvent((TextEvent)e);
            return;
        }
	super.processEvent(e);
!!!6368795.java!!!	processTextEvent(inout e : TextEvent) : void
        TextListener listener = textListener;
        if (listener != null) {
            int id = e.getID();
	    switch (id) {
	    case TextEvent.TEXT_VALUE_CHANGED:
		listener.textValueChanged(e);
		break;
	    }
        }
!!!6368923.java!!!	paramString() : String
	String str = super.paramString() + ",text=" + getText();
	if (editable) {
	    str += ",editable";
	}
	return str + ",selection=" + getSelectionStart() + "-" + getSelectionEnd();
!!!6369051.java!!!	checkSystemClipboardAccess() : void
        canAccessClipboard = true;
	SecurityManager sm = System.getSecurityManager();
	if (sm != null) {
	    try {
	        sm.checkSystemClipboardAccess();
	    }
	    catch (SecurityException e) {
	        canAccessClipboard = false;
	    }
	}
!!!6369179.java!!!	writeObject(inout s : ObjectOutputStream) : void
        // Serialization support.  Since the value of the fields
        // selectionStart, selectionEnd, and text aren't necessarily
        // up to date, we sync them up with the peer before serializing.
        TextComponentPeer peer = (TextComponentPeer)this.peer;
        if (peer != null) {
            text = peer.getText();
            selectionStart = peer.getSelectionStart();
            selectionEnd = peer.getSelectionEnd();
        }

        s.defaultWriteObject();

        AWTEventMulticaster.save(s, textListenerK, textListener);
        s.writeObject(null);
!!!6369307.java!!!	readObject(inout s : ObjectInputStream) : void
        GraphicsEnvironment.checkHeadless();
        s.defaultReadObject();

        // Make sure the state we just read in for text, 
        // selectionStart and selectionEnd has legal values
	this.text = (text != null) ? text : "";
        select(selectionStart, selectionEnd);

        Object keyOrNull;
        while(null != (keyOrNull = s.readObject())) {
	    String key = ((String)keyOrNull).intern();

	    if (textListenerK == key) {
	        addTextListener((TextListener)(s.readObject()));
            } else { 
                // skip value for unrecognized key
	        s.readObject();
            }
        }
	enableInputMethodsIfNecessary();
	checkSystemClipboardAccess();
!!!6369435.java!!!	getIndexAtPoint(inout p : Point) : int
	return -1;
/* To be fully implemented in a future release
	if (peer == null) {
	    return -1;
	}
	TextComponentPeer peer = (TextComponentPeer)this.peer;
	return peer.getIndexAtPoint(p.x, p.y);
*/
!!!6369563.java!!!	getCharacterBounds(in i : int) : Rectangle
        return null;
/* To be fully implemented in a future release
	if (peer == null) {
	    return null;
	}
	TextComponentPeer peer = (TextComponentPeer)this.peer;
	return peer.getCharacterBounds(i);
*/
!!!6369691.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleAWTTextComponent();
        }
        return accessibleContext;
