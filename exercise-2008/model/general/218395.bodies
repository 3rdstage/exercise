class Constructor
!!!7118875.java!!!	getFactory() : GenericsFactory
	// create scope and factory
	return CoreReflectionFactory.make(this, ConstructorScope.make(this)); 
!!!7119003.java!!!	getGenericInfo() : ConstructorRepository
	// lazily initialize repository if necessary
	if (genericInfo == null) {
	    // create and cache generic info repository
	    genericInfo = 
		ConstructorRepository.make(getSignature(), 
					   getFactory());
	}
	return genericInfo; //return cached repository
!!!7119131.java!!!	Constructor(inout declaringClass : Class, inout parameterTypes : Class, inout checkedExceptions : Class, in modifiers : int, in slot : int, in signature : String, in annotations : byte, in parameterAnnotations : byte)
        this.clazz = declaringClass;
        this.parameterTypes = parameterTypes;
        this.exceptionTypes = checkedExceptions;
        this.modifiers = modifiers;
        this.slot = slot;
        this.signature = signature;
        this.annotations = annotations;
        this.parameterAnnotations = parameterAnnotations;
!!!7119259.java!!!	copy() : Constructor
        // This routine enables sharing of ConstructorAccessor objects
        // among Constructor objects which refer to the same underlying
        // method in the VM. (All of this contortion is only necessary
        // because of the "accessibility" bit in AccessibleObject,
        // which implicitly requires that new java.lang.reflect
        // objects be fabricated for each reflective call on Class
        // objects.)
        Constructor<T> res = new Constructor<T>(clazz,
						parameterTypes,
						exceptionTypes, modifiers, slot,
                                                signature,
                                                annotations,
                                                parameterAnnotations);
        res.root = this;
        // Might as well eagerly propagate this if already present
        res.constructorAccessor = constructorAccessor;
        return res;
!!!7119387.java!!!	getDeclaringClass() : Class
	return clazz;
!!!7119515.java!!!	getName() : String
	return getDeclaringClass().getName();
!!!7119643.java!!!	getModifiers() : int
	return modifiers;
!!!7119771.java!!!	getTypeParameters() : TypeVariable
      if (getSignature() != null) {
	return (TypeVariable<Constructor<T>>[])getGenericInfo().getTypeParameters();
      } else
          return (TypeVariable<Constructor<T>>[])new TypeVariable[0];
!!!7119899.java!!!	getParameterTypes() : Class
	return (Class<?>[]) parameterTypes.clone();
!!!7120027.java!!!	getGenericParameterTypes() : Type
	if (getSignature() != null)
	    return getGenericInfo().getParameterTypes();
	else
	    return getParameterTypes();
!!!7120155.java!!!	getExceptionTypes() : Class
	return (Class<?>[])exceptionTypes.clone();
!!!7120283.java!!!	getGenericExceptionTypes() : Type
	  Type[] result;
	  if (getSignature() != null && 
	      ( (result = getGenericInfo().getExceptionTypes()).length > 0  ))
	      return result;
	  else
	      return getExceptionTypes();
!!!7120411.java!!!	equals(inout obj : Object) : boolean
	if (obj != null && obj instanceof Constructor) {
	    Constructor other = (Constructor)obj;
	    if (getDeclaringClass() == other.getDeclaringClass()) {
		/* Avoid unnecessary cloning */
		Class[] params1 = parameterTypes;
		Class[] params2 = other.parameterTypes;
		if (params1.length == params2.length) {
		    for (int i = 0; i < params1.length; i++) {
			if (params1[i] != params2[i])
			    return false;
		    }
		    return true;
		}
	    }
	}
	return false;
!!!7120539.java!!!	hashCode() : int
	return getDeclaringClass().getName().hashCode();
!!!7120667.java!!!	toString() : String
	try {
	    StringBuffer sb = new StringBuffer();
	    int mod = getModifiers();
	    if (mod != 0) {
		sb.append(Modifier.toString(mod) + " ");
	    }
	    sb.append(Field.getTypeName(getDeclaringClass()));
	    sb.append("(");
	    Class[] params = parameterTypes; // avoid clone
	    for (int j = 0; j < params.length; j++) {
		sb.append(Field.getTypeName(params[j]));
		if (j < (params.length - 1))
		    sb.append(",");
	    }
	    sb.append(")");
	    Class[] exceptions = exceptionTypes; // avoid clone
	    if (exceptions.length > 0) {
		sb.append(" throws ");
		for (int k = 0; k < exceptions.length; k++) {
		    sb.append(exceptions[k].getName());
		    if (k < (exceptions.length - 1))
			sb.append(",");
		}
	    }
	    return sb.toString();
	} catch (Exception e) {
	    return "<" + e + ">";
	}
!!!7120795.java!!!	toGenericString() : String
	try {
	    StringBuilder sb = new StringBuilder();
	    int mod = getModifiers();
	    if (mod != 0) {
		sb.append(Modifier.toString(mod) + " ");
	    }
	    Type[] typeparms = getTypeParameters();
	    if (typeparms.length > 0) {
		boolean first = true;
		sb.append("<");
		for(Type typeparm: typeparms) {
		    if (!first)
			sb.append(",");
		    if (typeparm instanceof Class)
			sb.append(((Class)typeparm).getName());
		    else
			sb.append(typeparm.toString());
		    first = false;
		}
		sb.append("> ");
	    }
	    sb.append(Field.getTypeName(getDeclaringClass()));
	    sb.append("(");
	    Type[] params = getGenericParameterTypes();
	    for (int j = 0; j < params.length; j++) {
		sb.append((params[j] instanceof Class)?
			  Field.getTypeName((Class)params[j]):
			  (params[j].toString()) );
		if (j < (params.length - 1))
		    sb.append(",");
	    }
	    sb.append(")");
	    Type[] exceptions = getGenericExceptionTypes();
	    if (exceptions.length > 0) {
		sb.append(" throws ");
		for (int k = 0; k < exceptions.length; k++) {
		    sb.append((exceptions[k] instanceof Class)?
			      ((Class)exceptions[k]).getName():
			      exceptions[k].toString());
		    if (k < (exceptions.length - 1))
			sb.append(",");
		}
	    }
	    return sb.toString();
	} catch (Exception e) {
	    return "<" + e + ">";
	}
!!!7120923.java!!!	newInstance(inout initargs : Object) : T
        if (!override) {
            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {
                Class caller = Reflection.getCallerClass(2);
                if (securityCheckCache != caller) {
                    Reflection.ensureMemberAccess(caller, clazz, null, modifiers);
                    securityCheckCache = caller;
                }
            }
        }
	if ((clazz.getModifiers() & Modifier.ENUM) != 0) 
	    throw new IllegalArgumentException("Cannot reflectively create enum objects");
        if (constructorAccessor == null) acquireConstructorAccessor();
        return (T) constructorAccessor.newInstance(initargs);
!!!7121051.java!!!	isVarArgs() : boolean
        return (getModifiers() & Modifier.VARARGS) != 0;
!!!7121179.java!!!	isSynthetic() : boolean
        return Modifier.isSynthetic(getModifiers());
!!!7121307.java!!!	acquireConstructorAccessor() : void
        // First check to see if one has been created yet, and take it
        // if so.
        ConstructorAccessor tmp = null;
        if (root != null) tmp = root.getConstructorAccessor();
        if (tmp != null) {
            constructorAccessor = tmp;
            return;
        }
        // Otherwise fabricate one and propagate it up to the root
        tmp = reflectionFactory.newConstructorAccessor(this);
        setConstructorAccessor(tmp);
!!!7121435.java!!!	getConstructorAccessor() : ConstructorAccessor
        return constructorAccessor;
!!!7121563.java!!!	setConstructorAccessor(inout accessor : ConstructorAccessor) : void
        constructorAccessor = accessor;
        // Propagate up
        if (root != null) {
            root.setConstructorAccessor(accessor);
        }
!!!7121691.java!!!	getSlot() : int
        return slot;
!!!7121819.java!!!	getSignature() : String
	    return signature;
!!!7121947.java!!!	getRawAnnotations() : byte
        return annotations;
!!!7122075.java!!!	getRawParameterAnnotations() : byte
        return parameterAnnotations;
!!!7122203.java!!!	getAnnotation(inout annotationClass : Class) : T
        if (annotationClass == null)
            throw new NullPointerException();

        return (T) declaredAnnotations().get(annotationClass);
!!!7122331.java!!!	getDeclaredAnnotations() : Annotation
        return declaredAnnotations().values().toArray(EMPTY_ANNOTATION_ARRAY);
!!!7122459.java!!!	declaredAnnotations() : Map
        if (declaredAnnotations == null) {
            declaredAnnotations = AnnotationParser.parseAnnotations(
                annotations, sun.misc.SharedSecrets.getJavaLangAccess().
                getConstantPool(getDeclaringClass()),
                getDeclaringClass());
        }
        return declaredAnnotations;
!!!7122587.java!!!	getParameterAnnotations() : Annotation
        int numParameters = parameterTypes.length;
        if (parameterAnnotations == null)
            return new Annotation[numParameters][0];

        Annotation[][] result = AnnotationParser.parseParameterAnnotations(
            parameterAnnotations,
            sun.misc.SharedSecrets.getJavaLangAccess().
                getConstantPool(getDeclaringClass()),
            getDeclaringClass());
        if (result.length != numParameters)
            throw new java.lang.annotation.AnnotationFormatError(
                "Parameter annotations don't match number of parameters");
        return result;
