format 66
"spi" // src::javax::sound::midi::spi
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "javax/sound/midi/spi"
  java_package "javax.sound.midi.spi"
  classview 178587 "spi"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 1089051 "MidiDeviceProvider"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>MidiDeviceProvider</code> is a factory or provider for a particular 
type of MIDI device.
This mechanism allows the implementation to determine
how resources are managed in the creation and management of
a device.

@version 1.19 03/12/19
@author Kara Kytle"
      operation 8717851 "isDeviceSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "info" type class_ref 1087771 // Info
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the device provider supports the device represented by
the specified device info object.
@param info an info object that describes the device for which support is queried
@return <code>true</code> if the specified device is supported, 
otherwise <code>false</code>"
      end

      operation 8717979 "getDeviceInfo"
	abstract public return_type class_ref 1087771 // Info
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of info objects representing the device
or devices provided by this <code>MidiDeviceProvider</code>.
@return set of device info objects"
      end

      operation 8718107 "getDevice"
	abstract public return_type class_ref 1087643 // MidiDevice
	nparams 1
	  param inout name "info" type class_ref 1087771 // Info
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of the device represented by the info object.
@param info an info object that describes the desired device
@return device instance
@throws IllegalArgumentException if the info object specified does not
match the info object for a device supported by this <code>MidiDeviceProvider</code>."
      end
    end

    class 1089819 "MidiFileReader"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>MidiFileReader</code> supplies MIDI file-reading services.  Classes implementing this
interface can parse the format information from one or more types of
MIDI file, and can produce a <code>Sequence</code> object from files of these types.

@author Kara Kytle
@version 1.13 03/12/19
@since 1.3"
      operation 8718235 "getMidiFileFormat"
	abstract public return_type class_ref 1088411 // MidiFileFormat
	nparams 1
	  param inout name "stream" type class_ref 179099 // InputStream
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the MIDI file format of the input stream provided.  The stream must
point to valid MIDI file data.  In general, MIDI file readers may 
need to read some data from the stream before determining whether they
support it.  These parsers must
be able to mark the stream, read enough data to determine whether they 
support the stream, and, if not, reset the stream's read pointer to its original 
position.  If the input stream does not support this, this method may fail
with an <code>IOException</code>. 
@param stream the input stream from which file format information should be
extracted
@return a <code>MidiFileFormat</code> object describing the MIDI file format
@throws InvalidMidiDataException if the stream does not point to valid MIDI
file data recognized by the system
@throws IOException if an I/O exception occurs
@see InputStream#markSupported
@see InputStream#mark"
      end

      operation 8718363 "getMidiFileFormat"
	abstract public return_type class_ref 1088411 // MidiFileFormat
	nparams 1
	  param inout name "url" type class_ref 269467 // URL
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the MIDI file format of the URL provided.  The URL must
point to valid MIDI file data.
@param url the URL from which file format information should be
extracted
@return a <code>MidiFileFormat</code> object describing the MIDI file format
@throws InvalidMidiDataException if the URL does not point to valid MIDI
file data recognized by the system
@throws IOException if an I/O exception occurs"
      end

      operation 8718491 "getMidiFileFormat"
	abstract public return_type class_ref 1088411 // MidiFileFormat
	nparams 1
	  param inout name "file" type class_ref 165147 // File
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the MIDI file format of the <code>File</code> provided.  
The <code>File</code> must point to valid MIDI file data.
@param file the <code>File</code> from which file format information should be
extracted
@return a <code>MidiFileFormat</code> object describing the MIDI file format
@throws InvalidMidiDataException if the <code>File</code> does not point to valid MIDI
file data recognized by the system
@throws IOException if an I/O exception occurs"
      end

      operation 8718619 "getSequence"
	abstract public return_type class_ref 1088923 // Sequence
	nparams 1
	  param inout name "stream" type class_ref 179099 // InputStream
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a MIDI sequence from the input stream provided.  The stream must
point to valid MIDI file data.  In general, MIDI file readers may 
need to read some data from the stream before determining whether they
support it.  These parsers must
be able to mark the stream, read enough data to determine whether they 
support the stream, and, if not, reset the stream's read pointer to its original 
position.  If the input stream does not support this, this method may fail
with an IOException. 
@param stream the input stream from which the <code>Sequence</code> should be
constructed
@return a <code>Sequence</code> object based on the MIDI file data contained
in the input stream.
@throws InvalidMidiDataException if the stream does not point to valid MIDI
file data recognized by the system
@throws IOException if an I/O exception occurs
@see InputStream#markSupported
@see InputStream#mark"
      end

      operation 8718747 "getSequence"
	abstract public return_type class_ref 1088923 // Sequence
	nparams 1
	  param inout name "url" type class_ref 269467 // URL
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a MIDI sequence from the URL provided.  The URL must
point to valid MIDI file data.
@param url the URL for which the <code>Sequence</code> should be
constructed
@return a <code>Sequence</code> object based on the MIDI file data pointed
to by the URL
@throws InvalidMidiDataException if the URL does not point to valid MIDI
file data recognized by the system
@throws IOException if an I/O exception occurs"
      end

      operation 8718875 "getSequence"
	abstract public return_type class_ref 1088923 // Sequence
	nparams 1
	  param inout name "file" type class_ref 165147 // File
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a MIDI sequence from the <code>File</code> provided.  The <code>File</code> must
point to valid MIDI file data.
@param file the <code>File</code> from which the <code>Sequence</code> should be
constructed
@return a <code>Sequence</code> object based on the MIDI file data pointed
to by the <code>File</code>
@throws InvalidMidiDataException if the <code>File</code> does not point to valid MIDI
file data recognized by the system
@throws IOException if an I/O exception occurs"
      end
    end

    class 1089947 "MidiFileWriter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>MidiFileWriter</code> supplies MIDI file-writing services.  Classes 
that implement this interface can write one or more types of MIDI file from 
a <code>{@link Sequence}</code> object.

@author Kara Kytle
@version 1.17, 03/12/19
@since 1.3"
      operation 8719003 "getMidiFileTypes"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of MIDI file types for which file writing support is 
provided by this file writer.
@return array of file types.  If no file types are supported, 
an array of length 0 is returned."
      end

      operation 8719131 "getMidiFileTypes"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "sequence" type class_ref 1088923 // Sequence
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the file types that this file writer can write from the
sequence specified.
@param sequence the sequence for which MIDI file type support
is queried
@return array of file types.  If no file types are supported, 
returns an array of length 0."
      end

      operation 8719259 "isFileTypeSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "fileType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether file writing support for the specified MIDI file type 
is provided by this file writer.
@param fileType the file type for which write capabilities are queried
@return <code>true</code> if the file type is supported, 
otherwise <code>false</code>"
      end

      operation 8719387 "isFileTypeSupported"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "fileType" explicit_type "int"
	  param inout name "sequence" type class_ref 1088923 // Sequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether a MIDI file of the file type specified can be written
from the sequence indicated.
@param fileType the file type for which write capabilities are queried
@param sequence  the sequence for which file writing support is queried
@return <code>true</code> if the file type is supported for this sequence, 
otherwise <code>false</code>"
      end

      operation 8719515 "write"
	abstract public explicit_return_type "int"
	nparams 3
	  param inout name "in" type class_ref 1088923 // Sequence
	  param in name "fileType" explicit_type "int"
	  param inout name "out" type class_ref 183835 // OutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a stream of bytes representing a MIDI file of the file type
indicated to the output stream provided. 
@param in sequence containing MIDI data to be written to the file
@param fileType type of the file to be written to the output stream
@param out stream to which the file data should be written
@return the number of bytes written to the output stream
@throws IOException if an I/O exception occurs
@throws IllegalArgumentException if the file type is not supported by
this file writer
@see #isFileTypeSupported(int, Sequence)
@see	#getMidiFileTypes(Sequence)"
      end

      operation 8719643 "write"
	abstract public explicit_return_type "int"
	nparams 3
	  param inout name "in" type class_ref 1088923 // Sequence
	  param in name "fileType" explicit_type "int"
	  param inout name "out" type class_ref 165147 // File
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a stream of bytes representing a MIDI file of the file type
indicated to the external file provided.
@param in sequence containing MIDI data to be written to the external file
@param fileType type of the file to be written to the external file
@param out external file to which the file data should be written
@return the number of bytes written to the file
@throws IOException if an I/O exception occurs
@throws IllegalArgumentException if the file type is not supported by
this file writer
@see #isFileTypeSupported(int, Sequence)
@see	#getMidiFileTypes(Sequence)"
      end
    end

    class 1090075 "SoundbankReader"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>SoundbankReader</code> supplies soundbank file-reading services.
Concrete subclasses of <code>SoundbankReader</code> parse a given
soundbank file, producing a {@link javax.sound.midi.Soundbank}
object that can be loaded into a {@link javax.sound.midi.Synthesizer}.

@since 1.3
@version 1.18 03/12/19
@author Kara Kytle"
      operation 8719771 "getSoundbank"
	abstract public return_type class_ref 1086747 // Soundbank
	nparams 1
	  param inout name "url" type class_ref 269467 // URL
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a soundbank object from the URL provided.
@param url URL representing the soundbank.
@return soundbank object
@throws InvalidMidiDataException if the URL does not point to
valid MIDI soundbank data recognized by this soundbank reader
@throws IOException if an I/O error occurs"
      end

      operation 8719899 "getSoundbank"
	abstract public return_type class_ref 1086747 // Soundbank
	nparams 1
	  param inout name "stream" type class_ref 179099 // InputStream
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a soundbank object from the <code>InputStream</code> provided.
@param stream <code>InputStream</code> representing the soundbank
@return soundbank object
@throws InvalidMidiDataException if the stream does not point to
valid MIDI soundbank data recognized by this soundbank reader
@throws IOException if an I/O error occurs"
      end

      operation 8720027 "getSoundbank"
	abstract public return_type class_ref 1086747 // Soundbank
	nparams 1
	  param inout name "file" type class_ref 165147 // File
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a soundbank object from the <code>File</code> provided.
@param file the <code>File</code> representing the soundbank
@return soundbank object
@throws InvalidMidiDataException if the file does not point to
valid MIDI soundbank data recognized by this soundbank reader
@throws IOException if an I/O error occurs"
      end
    end
  end

  deploymentview 172443 "spi"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 838171 "MidiDeviceProvider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.sound.midi.MidiDevice;
import javax.sound.midi.MidiUnavailableException;
${definition}"
      associated_classes
	class_ref 1089051 // MidiDeviceProvider
      end
      comment "@(#)MidiDeviceProvider.java	1.19 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 838299 "MidiFileReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.InputStream;
import java.io.IOException;
import java.net.URL;
import javax.sound.midi.MidiFileFormat;
import javax.sound.midi.Sequence;
import javax.sound.midi.InvalidMidiDataException;
${definition}"
      associated_classes
	class_ref 1089819 // MidiFileReader
      end
      comment "@(#)MidiFileReader.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 838427 "MidiFileWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import javax.sound.midi.Sequence;
import javax.sound.midi.MidiFileFormat;
${definition}"
      associated_classes
	class_ref 1089947 // MidiFileWriter
      end
      comment "@(#)MidiFileWriter.java	1.17 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 838555 "SoundbankReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
import java.io.File;
import java.net.URL;
import javax.sound.midi.Soundbank;
import javax.sound.midi.InvalidMidiDataException;
${definition}"
      associated_classes
	class_ref 1090075 // SoundbankReader
      end
      comment "@(#)SoundbankReader.java	1.18 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
