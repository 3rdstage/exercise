class Flags
!!!276635.java!!!	Flags(in f : int)
	    flags = f;
!!!276763.java!!!	valueOf() : int
	    return flags;
!!!276891.java!!!	contains(inout f : Flags) : boolean
	    return (flags & f.valueOf()) == f.valueOf();
!!!277019.java!!!	dup() : Flags
	    return new Flags(flags);
!!!277147.java!!!	add(inout f : Flags) : Flags
	    flags |= f.valueOf();
	    return this;
!!!277275.java!!!	remove(inout f : Flags) : Flags
	    flags &= ~f.valueOf();
	    return this;
!!!277403.java!!!	parse(in s : String) : Flags
 	    char[] ca = s.toCharArray();
	    Flags f = new Flags(0);
 	    for (int i = 0; i < ca.length; i++) {
 		Flags v = parse(ca[i]);
		if (f.contains(v))
 		    throw new DuplicateFormatFlagsException(v.toString());
		f.add(v);
 	    }
	    return f;
!!!277531.java!!!	parse(in c : char) : Flags
	    switch (c) {
	    case '-': return LEFT_JUSTIFY;
	    case '#': return ALTERNATE;
	    case '+': return PLUS;
	    case ' ': return LEADING_SPACE;
	    case '0': return ZERO_PAD;
	    case ',': return GROUP;
	    case '(': return PARENTHESES;
	    case '<': return PREVIOUS;
	    default:
		throw new UnknownFormatFlagsException(String.valueOf(c));
	    }
!!!277659.java!!!	toString(inout f : Flags) : String
	    return f.toString();
!!!277787.java!!!	toString() : String
  	    StringBuilder sb = new StringBuilder();
	    if (contains(LEFT_JUSTIFY))  sb.append('-');
	    if (contains(UPPERCASE))     sb.append('^');
	    if (contains(ALTERNATE))     sb.append('#');
	    if (contains(PLUS))          sb.append('+');
	    if (contains(LEADING_SPACE)) sb.append(' ');
	    if (contains(ZERO_PAD))      sb.append('0');
	    if (contains(GROUP))         sb.append(',');
	    if (contains(PARENTHESES))   sb.append('(');
	    if (contains(PREVIOUS))      sb.append('<');
	    return sb.toString();
