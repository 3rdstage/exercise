format 66
"channels" // src::java::nio::channels
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/nio/channels"
  java_package "java.nio.channels"
  classview 141723 "channels"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 236699 "SelectableChannel"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A channel that can be multiplexed via a {@link Selector}.

<p> In order to be used with a selector, an instance of this class must
first be <i>registered</i> via the {@link #register(Selector,int,Object)
register} method.  This method returns a new {@link SelectionKey} object
that represents the channel's registration with the selector.

<p> Once registered with a selector, a channel remains registered until it
is <i>deregistered</i>.  This involves deallocating whatever resources were
allocated to the channel by the selector.

<p> A channel cannot be deregistered directly; instead, the key representing
its registration must be <i>cancelled</i>.  Cancelling a key requests that
the channel be deregistered during the selector's next selection operation.
A key may be cancelled explicitly by invoking its {@link
SelectionKey#cancel() cancel} method.  All of a channel's keys are cancelled
implicitly when the channel is closed, whether by invoking its {@link
Channel#close close} method or by interrupting a thread blocked in an I/O
operation upon the channel.

<p> If the selector itself is closed then the channel will be deregistered,
and the key representing its registration will be invalidated, without
further delay.

<p> A channel may be registered at most once with any particular selector.

<p> Whether or not a channel is registered with one or more selectors may be
determined by invoking the {@link #isRegistered isRegistered} method.

<p> Selectable channels are safe for use by multiple concurrent
threads. </p>


<a name=\"bm\">
<h4>Blocking mode</h4>

A selectable channel is either in <i>blocking</i> mode or in
<i>non-blocking</i> mode.  In blocking mode, every I/O operation invoked
upon the channel will block until it completes.  In non-blocking mode an I/O
operation will never block and may transfer fewer bytes than were requested
or possibly no bytes at all.  The blocking mode of a selectable channel may
be determined by invoking its {@link #isBlocking isBlocking} method.

<p> Newly-created selectable channels are always in blocking mode.
Non-blocking mode is most useful in conjunction with selector-based
multiplexing.  A channel must be placed into non-blocking mode before being
registered with a selector, and may not be returned to blocking mode until
it has been deregistered.


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.34, 03/12/19
@since 1.4

@see SelectionKey
@see Selector"
      classrelation 1842075 // <generalisation>
	relation 1842075 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1842075 // <generalisation>
	  b parent class_ref 945819 // AbstractInterruptibleChannel
      end

      classrelation 1842203 // <realization>
	relation 1842203 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1842203 // <realization>
	  b parent class_ref 918171 // Channel
      end

      operation 7478299 "SelectableChannel"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class."
      end

      operation 7478427 "provider"
	abstract public return_type class_ref 946715 // SelectorProvider
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider that created this channel.

@return  The provider that created this channel"
      end

      operation 7478555 "validOps"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <a href=\"SelectionKey.html#opsets\">operation set</a>
identifying this channel's supported operations.  The bits that are set
in this integer value denote exactly the operations that are valid for
this channel.  This method always returns the same value for a given
concrete channel class. </p>

@return  The valid-operation set"
      end

      operation 7478683 "isRegistered"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Internal state:
   keySet, may be empty but is never null, typ. a tiny array
   boolean isRegistered, protected by key set
   regLock, lock object to prevent duplicate registrations
   boolean isBlocking, protected by regLock

Tells whether or not this channel is currently registered with any
selectors.  A newly-created channel is not registered.

<p> Due to the inherent delay between key cancellation and channel
deregistration, a channel may remain registered for some time after all
of its keys have been cancelled.  A channel may also remain registered
for some time after it is closed.  </p>

@return <tt>true</tt> if, and only if, this channel is registered"
      end

      operation 7478811 "keyFor"
	abstract public return_type class_ref 236827 // SelectionKey
	nparams 1
	  param inout name "sel" type class_ref 303387 // Selector
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " sync(keySet) { return isRegistered; }

Retrieves the key representing the channel's registration with the given
selector.  </p>

@return  The key returned when this channel was last registered with the
         given selector, or <tt>null</tt> if this channel is not
         currently registered with that selector"
      end

      operation 7478939 "register"
	abstract public return_type class_ref 236827 // SelectionKey
	nparams 3
	  param inout name "sel" type class_ref 303387 // Selector
	  param in name "ops" explicit_type "int"
	  param inout name "att" explicit_type "Object"
	nexceptions 1
	  exception class_ref 944923 // ClosedChannelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " sync(keySet) { return findKey(sel); }

Registers this channel with the given selector, returning a selection
key.

<p> If this channel is currently registered with the given selector then
the selection key representing that registration is returned.  The key's
interest set will have been changed to <tt>ops</tt>, as if by invoking
the {@link SelectionKey#interestOps(int) interestOps(int)} method.  If
the <tt>att</tt> argument is not <tt>null</tt> then the key's attachment
will have been set to that value.  A {@link CancelledKeyException} will
be thrown if the key has already been cancelled.

<p> Otherwise this channel has not yet been registered with the given
selector, so it is registered and the resulting new key is returned.
The key's initial interest set will be <tt>ops</tt> and its attachment
will be <tt>att</tt>.

<p> This method may be invoked at any time.  If this method is invoked
while another invocation of this method or of the {@link
#configureBlocking(boolean) configureBlocking} method is in progress
then it will first block until the other operation is complete.  This
method will then synchronize on the selector's key set and therefore may
block if invoked concurrently with another registration or selection
operation involving the same selector. </p>

<p> If this channel is closed while this operation is in progress then
the key returned by this method will have been cancelled and will
therefore be invalid. </p>

@param  sel
        The selector with which this channel is to be registered

@param  ops
        The interest set for the resulting key

@param  att
        The attachment for the resulting key; may be <tt>null</tt>

@throws  ClosedChannelException
         If this channel is closed

@throws  IllegalBlockingModeException
         If this channel is in blocking mode

@throws  IllegalSelectorException
         If this channel was not created by the same provider
         as the given selector

@throws  CancelledKeyException
         If this channel is currently registered with the given selector
         but the corresponding key has already been cancelled

@throws  IllegalArgumentException
         If a bit in the <tt>ops</tt> set does not correspond to an
         operation that is supported by this channel, that is, if
         <tt>set & ~validOps() != 0</tt>

@return  A key representing the registration of this channel with
         the given selector"
      end

      operation 7479067 "register"
	public return_type class_ref 236827 // SelectionKey
	nparams 2
	  param inout name "sel" type class_ref 303387 // Selector
	  param in name "ops" explicit_type "int"
	nexceptions 1
	  exception class_ref 944923 // ClosedChannelException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " sync(regLock) {
   sync(keySet) { look for selector }
   if (channel found) { set interest ops -- may block in selector;
                        return key; }
   create new key -- may block somewhere in selector;
   sync(keySet) { add key; }
   attach(attachment);
   return key;
 }

Registers this channel with the given selector, returning a selection
key.

<p> An invocation of this convenience method of the form

<blockquote><tt>sc.register(sel, ops)</tt></blockquote>

behaves in exactly the same way as the invocation

<blockquote><tt>sc.{@link
#register(java.nio.channels.Selector,int,java.lang.Object)
register}(sel, ops, null)</tt></blockquote>

@param  sel
        The selector with which this channel is to be registered

@param  ops
        The interest set for the resulting key

@throws  ClosedChannelException
         If this channel is closed

@throws  IllegalBlockingModeException
         If this channel is in blocking mode

@throws  IllegalSelectorException
         If this channel was not created by the same provider
         as the given selector

@throws  CancelledKeyException
         If this channel is currently registered with the given selector
         but the corresponding key has already been cancelled

@throws  IllegalArgumentException
         If a bit in <tt>ops</tt> does not correspond to an operation
         that is supported by this channel, that is, if <tt>set &
         ~validOps() != 0</tt>

@return  A key representing the registration of this channel with
         the given selector"
      end

      operation 7479195 "configureBlocking"
	abstract public return_type class_ref 236699 // SelectableChannel
	nparams 1
	  param inout name "block" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adjusts this channel's blocking mode.

<p> If this channel is registered with one or more selectors then an
attempt to place it into blocking mode will cause an {@link
IllegalBlockingModeException} to be thrown.

<p> This method may be invoked at any time.  The new blocking mode will
only affect I/O operations that are initiated after this method returns.
For some implementations this may require blocking until all pending I/O
operations are complete.

<p> If this method is invoked while another invocation of this method or
of the {@link #register(Selector, int) register} method is in progress
then it will first block until the other operation is complete. </p>

@param  block  If <tt>true</tt> then this channel will be placed in
               blocking mode; if <tt>false</tt> then it will be placed
               non-blocking mode

@return  This selectable channel

@throws  ClosedChannelException
         If this channel is closed

@throws  IllegalBlockingModeException
         If <tt>block</tt> is <tt>true</tt> and this channel is
         registered with one or more selectors

@throws IOException
        If an I/O error occurs"
      end

      operation 7479323 "isBlocking"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " sync(regLock) {
   sync(keySet) { throw IBME if block && isRegistered; }
   change mode;
 }

Tells whether or not every I/O operation on this channel will block
until it completes.  A newly-created channel is always in blocking mode.

<p> If this channel is closed then the value returned by this method is
not specified. </p>

@return <tt>true</tt> if, and only if, this channel is in blocking mode"
      end

      operation 7479451 "blockingLock"
	abstract public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the object upon which the {@link #configureBlocking
configureBlocking} and {@link #register register} methods synchronize.
This is often useful in the implementation of adaptors that require a
specific blocking mode to be maintained for a short period of time.
</p>

@return  The blocking-mode lock object"
      end
    end

    class 236827 "SelectionKey"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A token representing the registration of a {@link SelectableChannel} with a
{@link Selector}.

<p> A selection key is created each time a channel is registered with a
selector.  A key remains valid until it is <i>cancelled</i> by invoking its
{@link #cancel cancel} method, by closing its channel, or by closing its
selector.  Cancelling a key does not immediately remove it from its
selector; it is instead added to the selector's <a
href=\"Selector.html#ks\"><i>cancelled-key set</i></a> for removal during the
next selection operation.  The validity of a key may be tested by invoking
its {@link #isValid isValid} method.

<a name=\"opsets\">

<p> A selection key contains two <i>operation sets</i> represented as
integer values.  Each bit of an operation set denotes a category of
selectable operations that are supported by the key's channel.

<ul>

  <li><p> The <i>interest set</i> determines which operation categories will
  be tested for readiness the next time one of the selector's selection
  methods is invoked.  The interest set is initialized with the value given
  when the key is created; it may later be changed via the {@link
  #interestOps(int)} method. </p></li>

  <li><p> The <i>ready set</i> identifies the operation categories for which
  the key's channel has been detected to be ready by the key's selector.
  The ready set is initialized to zero when the key is created; it may later
  be updated by the selector during a selection operation, but it cannot be
  updated directly. </p></li>

</ul>

<p> That a selection key's ready set indicates that its channel is ready for
some operation category is a hint, but not a guarantee, that an operation in
such a category may be performed by a thread without causing the thread to
block.  A ready set is most likely to be accurate immediately after the
completion of a selection operation.  It is likely to be made inaccurate by
external events and by I/O operations that are invoked upon the
corresponding channel.

<p> This class defines all known operation-set bits, but precisely which
bits are supported by a given channel depends upon the type of the channel.
Each subclass of {@link SelectableChannel} defines an {@link
SelectableChannel#validOps() validOps()} method which returns a set
identifying just those operations that are supported by the channel.  An
attempt to set or test an operation-set bit that is not supported by a key's
channel will result in an appropriate run-time exception.

<p> It is often necessary to associate some application-specific data with a
selection key, for example an object that represents the state of a
higher-level protocol and handles readiness notifications in order to
implement that protocol.  Selection keys therefore support the
<i>attachment</i> of a single arbitrary object to a key.  An object can be
attached via the {@link #attach attach} method and then later retrieved via
the {@link #attachment attachment} method.

<p> Selection keys are safe for use by multiple concurrent threads.  The
operations of reading and writing the interest set will, in general, be
synchronized with certain operations of the selector.  Exactly how this
synchronization is performed is implementation-dependent: In a naive
implementation, reading or writing the interest set may block indefinitely
if a selection operation is already in progress; in a high-performance
implementation, reading or writing the interest set may block briefly, if at
all.  In any case, a selection operation will always use the interest-set
value that was current at the moment that the operation began.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.24, 03/12/19
@since 1.4

@see SelectableChannel
@see Selector"
      operation 7490203 "SelectionKey"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end

      operation 7490331 "channel"
	abstract public return_type class_ref 236699 // SelectableChannel
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Channel and selector operations --

Returns the channel for which this key was created.  This method will
continue to return the channel even after the key is cancelled.  </p>

@return  This key's channel"
      end

      operation 7490459 "selector"
	abstract public return_type class_ref 303387 // Selector
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the selector for which this key was created.  This method will
continue to return the selector even after the key is cancelled.  </p>

@return  This key's selector"
      end

      operation 7490587 "isValid"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this key is valid.

<p> A key is valid upon creation and remains so until it is cancelled,
its channel is closed, or its selector is closed.  </p>

@return  <tt>true</tt> if, and only if, this key is valid"
      end

      operation 7490715 "cancel"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests that the registration of this key's channel with its selector
be cancelled.  Upon return the key will be invalid and will have been
added to its selector's cancelled-key set.  The key will be removed from
all of the selector's key sets during the next selection operation.

<p> If this key has already been cancelled then invoking this method has
no effect.  Once cancelled, a key remains forever invalid. </p>

<p> This method may be invoked at any time.  It synchronizes on the
selector's cancelled-key set, and therefore may block briefly if invoked
concurrently with a cancellation or selection operation involving the
same selector.  </p>"
      end

      operation 7490843 "interestOps"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Operation-set accessors --

Retrieves this key's interest set.

<p> It is guaranteed that the returned set will only contain operation
bits that are valid for this key's channel.

<p> This method may be invoked at any time.  Whether or not it blocks,
and for how long, is implementation-dependent.  </p>

@return  This key's interest set

@throws  CancelledKeyException
         If this key has been cancelled"
      end

      operation 7490971 "interestOps"
	abstract public return_type class_ref 236827 // SelectionKey
	nparams 1
	  param in name "ops" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this key's interest set to the given value.

<p> This method may be invoked at any time.  Whether or not it blocks,
and for how long, is implementation-dependent.  </p>

@param  ops  The new interest set

@return  This selection key

@throws  IllegalArgumentException
         If a bit in the set does not correspond to an operation that
         is supported by this key's channel, that is, if
         <tt>set & ~(channel().validOps()) != 0</tt>

@throws  CancelledKeyException
         If this key has been cancelled"
      end

      operation 7491099 "readyOps"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this key's ready-operation set.

<p> It is guaranteed that the returned set will only contain operation
bits that are valid for this key's channel.  </p>

@return  This key's ready-operation set

@throws  CancelledKeyException
         If this key has been cancelled"
      end

      attribute 2818331 "OP_READ"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1 << 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " -- Operation bits and bit-testing convenience methods --

Operation-set bit for read operations.

<p> Suppose that a selection key's interest set contains
<tt>OP_READ</tt> at the start of a <a
href=\"Selector.html#selop\">selection operation</a>.  If the selector
detects that the corresponding channel is ready for reading, has reached
end-of-stream, has been remotely shut down for further reading, or has
an error pending, then it will add <tt>OP_READ</tt> to the key's
ready-operation set and add the key to its selected-key&nbsp;set.  </p>
"
      end

      attribute 2818459 "OP_WRITE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1 << 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Operation-set bit for write operations.  </p>

<p> Suppose that a selection key's interest set contains
<tt>OP_WRITE</tt> at the start of a <a
href=\"Selector.html#selop\">selection operation</a>.  If the selector
detects that the corresponding channel is ready for writing, has been
remotely shut down for further writing, or has an error pending, then it
will add <tt>OP_WRITE</tt> to the key's ready set and add the key to its
selected-key&nbsp;set.  </p>
"
      end

      attribute 2818587 "OP_CONNECT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1 << 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Operation-set bit for socket-connect operations.  </p>

<p> Suppose that a selection key's interest set contains
<tt>OP_CONNECT</tt> at the start of a <a
href=\"Selector.html#selop\">selection operation</a>.  If the selector
detects that the corresponding socket channel is ready to complete its
connection sequence, or has an error pending, then it will add
<tt>OP_CONNECT</tt> to the key's ready set and add the key to its
selected-key&nbsp;set.  </p>
"
      end

      attribute 2818715 "OP_ACCEPT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1 << 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Operation-set bit for socket-accept operations.  </p>

<p> Suppose that a selection key's interest set contains
<tt>OP_ACCEPT</tt> at the start of a <a
href=\"Selector.html#selop\">selection operation</a>.  If the selector
detects that the corresponding server-socket channel is ready to accept
another connection, or has an error pending, then it will add
<tt>OP_ACCEPT</tt> to the key's ready set and add the key to its
selected-key&nbsp;set.  </p>
"
      end

      operation 7491227 "isReadable"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether this key's channel is ready for reading.

<p> An invocation of this method of the form <tt>k.isReadable()</tt>
behaves in exactly the same way as the expression

<blockquote><pre>
k.readyOps()&nbsp;&amp;&nbsp;OP_READ&nbsp;!=&nbsp;0</pre></blockquote>

<p> If this key's channel does not support read operations then this
method always returns <tt>false</tt>.  </p>

@return  <tt>true</tt> if, and only if,
         <tt>readyOps()</tt>&nbsp;<tt>&</tt>&nbsp;<tt>OP_READ</tt> is
         nonzero

@throws  CancelledKeyException
         If this key has been cancelled"
      end

      operation 7491355 "isWritable"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether this key's channel is ready for writing.

<p> An invocation of this method of the form <tt>k.isWritable()</tt>
behaves in exactly the same way as the expression

<blockquote><pre>
k.readyOps()&nbsp;&amp;&nbsp;OP_WRITE&nbsp;!=&nbsp;0</pre></blockquote>

<p> If this key's channel does not support write operations then this
method always returns <tt>false</tt>.  </p>

@return  <tt>true</tt> if, and only if,
         <tt>readyOps()</tt>&nbsp;<tt>&</tt>&nbsp;<tt>OP_WRITE</tt>
         is nonzero

@throws  CancelledKeyException
         If this key has been cancelled"
      end

      operation 7491483 "isConnectable"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether this key's channel has either finished, or failed to
finish, its socket-connection operation.

<p> An invocation of this method of the form <tt>k.isConnectable()</tt>
behaves in exactly the same way as the expression

<blockquote><pre>
k.readyOps()&nbsp;&amp;&nbsp;OP_CONNECT&nbsp;!=&nbsp;0</pre></blockquote>

<p> If this key's channel does not support socket-connect operations
then this method always returns <tt>false</tt>.  </p>

@return  <tt>true</tt> if, and only if,
         <tt>readyOps()</tt>&nbsp;<tt>&</tt>&nbsp;<tt>OP_CONNECT</tt>
         is nonzero

@throws  CancelledKeyException
         If this key has been cancelled"
      end

      operation 7491611 "isAcceptable"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether this key's channel is ready to accept a new socket
connection.

<p> An invocation of this method of the form <tt>k.isAcceptable()</tt>
behaves in exactly the same way as the expression

<blockquote><pre>
k.readyOps()&nbsp;&amp;&nbsp;OP_ACCEPT&nbsp;!=&nbsp;0</pre></blockquote>

<p> If this key's channel does not support socket-accept operations then
this method always returns <tt>false</tt>.  </p>

@return  <tt>true</tt> if, and only if,
         <tt>readyOps()</tt>&nbsp;<tt>&</tt>&nbsp;<tt>OP_ACCEPT</tt>
         is nonzero

@throws  CancelledKeyException
         If this key has been cancelled"
      end

      attribute 2818843 "attachment"
	volatile private explicit_type "Object"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " -- Attachments --"
      end

      operation 7491739 "attach"
	public explicit_return_type "Object"
	nparams 1
	  param inout name "ob" explicit_type "Object"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attaches the given object to this key.

<p> An attached object may later be retrieved via the {@link #attachment
attachment} method.  Only one object may be attached at a time; invoking
this method causes any previous attachment to be discarded.  The current
attachment may be discarded by attaching <tt>null</tt>.  </p>

@param  ob
        The object to be attached; may be <tt>null</tt>

@return  The previously-attached object, if any,
         otherwise <tt>null</tt>"
      end

      operation 7491867 "attachment"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the current attachment.  </p>

@return  The object currently attached to this key,
         or <tt>null</tt> if there is no attachment"
      end
    end

    class 237979 "ServerSocketChannel"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A selectable channel for stream-oriented listening sockets.

<p> Server-socket channels are not a complete abstraction of listening
network sockets.  Binding and the manipulation of socket options must be
done through an associated {@link java.net.ServerSocket} object obtained by
invoking the {@link #socket() socket} method.  It is not possible to create
a channel for an arbitrary, pre-existing server socket, nor is it possible
to specify the {@link java.net.SocketImpl} object to be used by a server
socket associated with a server-socket channel.

<p> A server-socket channel is created by invoking the {@link #open() open}
method of this class.  A newly-created server-socket channel is open but not
yet bound.  An attempt to invoke the {@link #accept() accept} method of an
unbound server-socket channel will cause a {@link NotYetBoundException} to
be thrown.  A server-socket channel can be bound by invoking one of the
{@link java.net.ServerSocket#bind(java.net.SocketAddress,int) bind} methods
of an associated server socket.

<p> Server-socket channels are safe for use by multiple concurrent threads.
</p>


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.24, 03/12/19
@since 1.4"
      classrelation 1846427 // <generalisation>
	relation 1846427 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1846427 // <generalisation>
	  b parent class_ref 946587 // AbstractSelectableChannel
      end

      operation 7493403 "ServerSocketChannel"
	protected explicit_return_type ""
	nparams 1
	  param inout name "provider" type class_ref 946715 // SelectorProvider
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class."
      end

      operation 7493531 "open"
	class_operation public return_type class_ref 237979 // ServerSocketChannel
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a server-socket channel.

<p> The new channel is created by invoking the {@link
java.nio.channels.spi.SelectorProvider#openServerSocketChannel
openServerSocketChannel} method of the system-wide default {@link
java.nio.channels.spi.SelectorProvider} object.

<p> The new channel's socket is initially unbound; it must be bound to a
specific address via one of its socket's {@link
java.net.ServerSocket#bind(SocketAddress) bind} methods before
connections can be accepted.  </p>

@return  A new socket channel

@throws  IOException
         If an I/O error occurs"
      end

      operation 7493659 "validOps"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an operation set identifying this channel's supported
operations.

<p> Server-socket channels only support the accepting of new
connections, so this method returns {@link SelectionKey#OP_ACCEPT}.
</p>

@return  The valid-operation set"
      end

      operation 7493787 "socket"
	abstract public return_type class_ref 235163 // ServerSocket
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- ServerSocket-specific operations --

Retrieves a server socket associated with this channel.

<p> The returned object will not declare any public methods that are not
declared in the {@link java.net.ServerSocket} class.  </p>

@return  A server socket associated with this channel"
      end

      operation 7493915 "accept"
	abstract public return_type class_ref 238747 // SocketChannel
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accepts a connection made to this channel's socket.

<p> If this channel is in non-blocking mode then this method will
immediately return <tt>null</tt> if there are no pending connections.
Otherwise it will block indefinitely until a new connection is available
or an I/O error occurs.

<p> The socket channel returned by this method, if any, will be in
blocking mode regardless of the blocking mode of this channel.

<p> This method performs exactly the same security checks as the {@link
java.net.ServerSocket#accept accept} method of the {@link
java.net.ServerSocket} class.  That is, if a security manager has been
installed then for each new connection this method verifies that the
address and port number of the connection's remote endpoint are
permitted by the security manager's {@link
java.lang.SecurityManager#checkAccept checkAccept} method.  </p>

@return  The socket channel for the new connection,
         or <tt>null</tt> if this channel is in non-blocking mode
         and no connection is available to be accepted

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel
         while the accept operation is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread
         while the accept operation is in progress, thereby
         closing the channel and setting the current thread's
         interrupt status

@throws  NotYetBoundException
         If this channel's socket has not yet been bound

@throws  SecurityException
         If a security manager has been installed
         and it does not permit access to the remote endpoint
         of the new connection

@throws  IOException
         If some other I/O error occurs"
      end
    end

    class 238747 "SocketChannel"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A selectable channel for stream-oriented connecting sockets.

<p> Socket channels are not a complete abstraction of connecting network
sockets.  Binding, shutdown, and the manipulation of socket options must be
done through an associated {@link java.net.Socket} object obtained by
invoking the {@link #socket() socket} method.  It is not possible to create
a channel for an arbitrary, pre-existing socket, nor is it possible to
specify the {@link java.net.SocketImpl} object to be used by a socket
associated with a socket channel.

<p> A socket channel is created by invoking one of the {@link #open open}
methods of this class.  A newly-created socket channel is open but not yet
connected.  An attempt to invoke an I/O operation upon an unconnected
channel will cause a {@link NotYetConnectedException} to be thrown.  A
socket channel can be connected by invoking its {@link #connect connect}
method; once connected, a socket channel remains connected until it is
closed.  Whether or not a socket channel is connected may be determined by
invoking its {@link #isConnected isConnected} method.

<p> Socket channels support <i>non-blocking connection:</i>&nbsp;A socket
channel may be created and the process of establishing the link to the
remote socket may be initiated via the {@link #connect connect} method for
later completion by the {@link #finishConnect finishConnect} method.
Whether or not a connection operation is in progress may be determined by
invoking the {@link #isConnectionPending isConnectionPending} method.

<p> The input and output sides of a socket channel may independently be
<i>shut down</i> without actually closing the channel.  Shutting down the
input side of a channel by invoking the {@link java.net.Socket#shutdownInput
shutdownInput} method of an associated socket object will cause further
reads on the channel to return <tt>-1</tt>, the end-of-stream indication.
Shutting down the output side of the channel by invoking the {@link
java.net.Socket#shutdownOutput shutdownOutput} method of an associated
socket object will cause further writes on the channel to throw a {@link
ClosedChannelException}.

<p> Socket channels support <i>asynchronous shutdown,</i> which is similar
to the asynchronous close operation specified in the {@link Channel} class.
If the input side of a socket is shut down by one thread while another
thread is blocked in a read operation on the socket's channel, then the read
operation in the blocked thread will complete without reading any bytes and
will return <tt>-1</tt>.  If the output side of a socket is shut down by one
thread while another thread is blocked in a write operation on the socket's
channel, then the blocked thread will receive an {@link
AsynchronousCloseException}.

<p> Socket channels are safe for use by multiple concurrent threads.  They
support concurrent reading and writing, though at most one thread may be
reading and at most one thread may be writing at any given time.  The {@link
#connect connect} and {@link #finishConnect finishConnect} methods are
mutually synchronized against each other, and an attempt to initiate a read
or write operation while an invocation of one of these methods is in
progress will block until that invocation is complete.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.33, 03/12/19
@since 1.4"
      classrelation 1846555 // <generalisation>
	relation 1846555 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1846555 // <generalisation>
	  b parent class_ref 946587 // AbstractSelectableChannel
      end

      classrelation 1846683 // <realization>
	relation 1846683 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1846683 // <realization>
	  b parent class_ref 945051 // ByteChannel
      end

      classrelation 1846811 // <realization>
	relation 1846811 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1846811 // <realization>
	  b parent class_ref 946843 // ScatteringByteChannel
      end

      classrelation 1846939 // <realization>
	relation 1846939 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1846939 // <realization>
	  b parent class_ref 946971 // GatheringByteChannel
      end

      operation 7494043 "SocketChannel"
	protected explicit_return_type ""
	nparams 1
	  param inout name "provider" type class_ref 946715 // SelectorProvider
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class."
      end

      operation 7494171 "open"
	class_operation public return_type class_ref 238747 // SocketChannel
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a socket channel.

<p> The new channel is created by invoking the {@link
java.nio.channels.spi.SelectorProvider#openSocketChannel
openSocketChannel} method of the system-wide default {@link
java.nio.channels.spi.SelectorProvider} object.  </p>

@return  A new socket channel

@throws  IOException
         If an I/O error occurs"
      end

      operation 7494299 "open"
	class_operation public return_type class_ref 238747 // SocketChannel
	nparams 1
	  param inout name "remote" type class_ref 927387 // SocketAddress
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a socket channel and connects it to a remote address.

<p> This convenience method works as if by invoking the {@link #open()}
method, invoking the {@link #connect(SocketAddress) connect} method upon
the resulting socket channel, passing it <tt>remote</tt>, and then
returning that channel.  </p>

@param  remote
        The remote address to which the new channel is to be connected

@throws  AsynchronousCloseException
         If another thread closes this channel
         while the connect operation is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread
         while the connect operation is in progress, thereby
         closing the channel and setting the current thread's
         interrupt status

@throws  UnresolvedAddressException
         If the given remote address is not fully resolved

@throws  UnsupportedAddressTypeException
         If the type of the given remote address is not supported

@throws  SecurityException
         If a security manager has been installed
         and it does not permit access to the given remote endpoint

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7494427 "validOps"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an operation set identifying this channel's supported
operations.

<p> Socket channels support connecting, reading, and writing, so this
method returns <tt>(</tt>{@link SelectionKey#OP_CONNECT}
<tt>|</tt>&nbsp;{@link SelectionKey#OP_READ} <tt>|</tt>&nbsp;{@link
SelectionKey#OP_WRITE}<tt>)</tt>.  </p>

@return  The valid-operation set"
      end

      operation 7494555 "socket"
	abstract public return_type class_ref 235419 // Socket
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Socket-specific operations --

Retrieves a socket associated with this channel.

<p> The returned object will not declare any public methods that are not
declared in the {@link java.net.Socket} class.  </p>

@return  A socket associated with this channel"
      end

      operation 7494683 "isConnected"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this channel's network socket is connected.  </p>

@return  <tt>true</tt> if, and only if, this channel's network socket
         is connected"
      end

      operation 7494811 "isConnectionPending"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not a connection operation is in progress on this
channel.  </p>

@return  <tt>true</tt> if, and only if, a connection operation has been
         initiated on this channel but not yet completed by invoking the
         {@link #finishConnect finishConnect} method"
      end

      operation 7494939 "connect"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "remote" type class_ref 927387 // SocketAddress
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this channel's socket.

<p> If this channel is in non-blocking mode then an invocation of this
method initiates a non-blocking connection operation.  If the connection
is established immediately, as can happen with a local connection, then
this method returns <tt>true</tt>.  Otherwise this method returns
<tt>false</tt> and the connection operation must later be completed by
invoking the {@link #finishConnect finishConnect} method.

<p> If this channel is in blocking mode then an invocation of this
method will block until the connection is established or an I/O error
occurs.

<p> This method performs exactly the same security checks as the {@link
java.net.Socket} class.  That is, if a security manager has been
installed then this method verifies that its {@link
java.lang.SecurityManager#checkConnect checkConnect} method permits
connecting to the address and port number of the given remote endpoint.

<p> This method may be invoked at any time.  If a read or write
operation upon this channel is invoked while an invocation of this
method is in progress then that operation will first block until this
invocation is complete.  If a connection attempt is initiated but fails,
that is, if an invocation of this method throws a checked exception,
then the channel will be closed.  </p>

@param  remote
        The remote address to which this channel is to be connected

@return  <tt>true</tt> if a connection was established,
         <tt>false</tt> if this channel is in non-blocking mode
         and the connection operation is in progress

@throws  AlreadyConnectedException
         If this channel is already connected

@throws  ConnectionPendingException
         If a non-blocking connection operation is already in progress
         on this channel

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel
         while the connect operation is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread
         while the connect operation is in progress, thereby
         closing the channel and setting the current thread's
         interrupt status

@throws  UnresolvedAddressException
         If the given remote address is not fully resolved

@throws  UnsupportedAddressTypeException
         If the type of the given remote address is not supported

@throws  SecurityException
         If a security manager has been installed
         and it does not permit access to the given remote endpoint

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7495067 "finishConnect"
	abstract public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finishes the process of connecting a socket channel.

<p> A non-blocking connection operation is initiated by placing a socket
channel in non-blocking mode and then invoking its {@link #connect
connect} method.  Once the connection is established, or the attempt has
failed, the socket channel will become connectable and this method may
be invoked to complete the connection sequence.  If the connection
operation failed then invoking this method will cause an appropriate
{@link java.io.IOException} to be thrown.

<p> If this channel is already connected then this method will not block
and will immediately return <tt>true</tt>.  If this channel is in
non-blocking mode then this method will return <tt>false</tt> if the
connection process is not yet complete.  If this channel is in blocking
mode then this method will block until the connection either completes
or fails, and will always either return <tt>true</tt> or throw a checked
exception describing the failure.

<p> This method may be invoked at any time.  If a read or write
operation upon this channel is invoked while an invocation of this
method is in progress then that operation will first block until this
invocation is complete.  If a connection attempt fails, that is, if an
invocation of this method throws a checked exception, then the channel
will be closed.  </p>

@return  <tt>true</tt> if, and only if, this channel's socket is now
         connected

@throws  NoConnectionPendingException
         If this channel is not connected and a connection operation
         has not been initiated

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel
         while the connect operation is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread
         while the connect operation is in progress, thereby
         closing the channel and setting the current thread's
         interrupt status

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7495195 "read"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "dst" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- ByteChannel operations --

@throws  NotYetConnectedException
         If this channel is not yet connected"
      end

      operation 7495323 "read"
	abstract public explicit_return_type "long"
	nparams 3
	  param inout name "dsts" type class_ref 182427 // ByteBuffer
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws  NotYetConnectedException
         If this channel is not yet connected"
      end

      operation 7495451 "read"
	public explicit_return_type "long"
	nparams 1
	  param inout name "dsts" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws  NotYetConnectedException
         If this channel is not yet connected"
      end

      operation 7495579 "write"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "src" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws  NotYetConnectedException
         If this channel is not yet connected"
      end

      operation 7495707 "write"
	abstract public explicit_return_type "long"
	nparams 3
	  param inout name "srcs" type class_ref 182427 // ByteBuffer
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws  NotYetConnectedException
         If this channel is not yet connected"
      end

      operation 7495835 "write"
	public explicit_return_type "long"
	nparams 1
	  param inout name "srcs" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws  NotYetConnectedException
         If this channel is not yet connected"
      end
    end

    class 303387 "Selector"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A multiplexor of {@link SelectableChannel} objects.

<p> A selector may be created by invoking the {@link #open open} method of
this class, which will use the system's default {@link
java.nio.channels.spi.SelectorProvider </code>selector provider<code>} to
create a new selector.  A selector may also be created by invoking the
{@link java.nio.channels.spi.SelectorProvider#openSelector openSelector}
method of a custom selector provider.  A selector remains open until it is
closed via its {@link #close close} method.

<a name=\"ks\">

<p> A selectable channel's registration with a selector is represented by a
{@link SelectionKey} object.  A selector maintains three sets of selection
keys:

<ul>

  <li><p> The <i>key set</i> contains the keys representing the current
  channel registrations of this selector.  This set is returned by the
  {@link #keys() keys} method. </p></li>

  <li><p> The <i>selected-key set</i> is the set of keys such that each
  key's channel was detected to be ready for at least one of the operations
  identified in the key's interest set during a prior selection operation.
  This set is returned by the {@link #selectedKeys() selectedKeys} method.
  The selected-key set is always a subset of the key set. </p></li>

  <li><p> The <i>cancelled-key</i> set is the set of keys that have been
  cancelled but whose channels have not yet been deregistered.  This set is
  not directly accessible.  The cancelled-key set is always a subset of the
  key set. </p></li>

</ul>

<p> All three sets are empty in a newly-created selector.

<p> A key is added to a selector's key set as a side effect of registering a
channel via the channel's {@link SelectableChannel#register(Selector,int)
register} method.  Cancelled keys are removed from the key set during
selection operations.  The key set itself is not directly modifiable.

<p> A key is added to its selector's cancelled-key set when it is cancelled,
whether by closing its channel or by invoking its {@link SelectionKey#cancel
cancel} method.  Cancelling a key will cause its channel to be deregistered
during the next selection operation, at which time the key will removed from
all of the selector's key sets.

<a name=\"sks\"><p> Keys are added to the selected-key set by selection
operations.  A key may be removed directly from the selected-key set by
invoking the set's {@link java.util.Set#remove(java.lang.Object) remove}
method or by invoking the {@link java.util.Iterator#remove() remove} method
of an {@link java.util.Iterator </code>iterator<code>} obtained from the
set.  Keys are never removed from the selected-key set in any other way;
they are not, in particular, removed as a side effect of selection
operations.  Keys may not be added directly to the selected-key set. </p>


<a name=\"selop\">
<h4>Selection</h4>

<p> During each selection operation, keys may be added to and removed from a
selector's selected-key set and may be removed from its key and
cancelled-key sets.  Selection is performed by the {@link #select()}, {@link
#select(long)}, and {@link #selectNow()} methods, and involves three steps:
</p>

<ol>

  <li><p> Each key in the cancelled-key set is removed from each key set of
  which it is a member, and its channel is deregistered.  This step leaves
  the cancelled-key set empty. </p></li>

  <li><p> The underlying operating system is queried for an update as to the
  readiness of each remaining channel to perform any of the operations
  identified by its key's interest set as of the moment that the selection
  operation began.  For a channel that is ready for at least one such
  operation, one of the following two actions is performed: </p>

  <ol type=a>

    <li><p> If the channel's key is not already in the selected-key set then
    it is added to that set and its ready-operation set is modified to
    identify exactly those operations for which the channel is now reported
    to be ready.  Any readiness information previously recorded in the ready
    set is discarded.  </p></li>

    <li><p> Otherwise the channel's key is already in the selected-key set,
    so its ready-operation set is modified to identify any new operations
    for which the channel is reported to be ready.  Any readiness
    information previously recorded in the ready set is preserved; in other
    words, the ready set returned by the underlying system is
    bitwise-disjoined into the key's current ready set. </p></li>

  </ol></li>

  If all of the keys in the key set at the start of this step have empty
  interest sets then neither the selected-key set nor any of the keys'
  ready-operation sets will be updated.

  <li><p> If any keys were added to the cancelled-key set while step (2) was
  in progress then they are processed as in step (1). </p></li>

</ol>

<p> Whether or not a selection operation blocks to wait for one or more
channels to become ready, and if so for how long, is the only essential
difference between the three selection methods. </p>


<h4>Concurrency</h4>

<p> Selectors are themselves safe for use by multiple concurrent threads;
their key sets, however, are not.

<p> The selection operations synchronize on the selector itself, on the key
set, and on the selected-key set, in that order.  They also synchronize on
the cancelled-key set during steps (1) and (3) above.

<p> Changes made to the interest sets of a selector's keys while a
selection operation is in progress have no effect upon that operation; they
will be seen by the next selection operation.

<p> Keys may be cancelled and channels may be closed at any time.  Hence the
presence of a key in one or more of a selector's key sets does not imply
that the key is valid or that its channel is open.  Application code should
be careful to synchronize and check these conditions as necessary if there
is any possibility that another thread will cancel a key or close a channel.

<p> A thread blocked in one of the {@link #select()} or {@link
#select(long)} methods may be interrupted by some other thread in one of
three ways:

<ul>

  <li><p> By invoking the selector's {@link #wakeup wakeup} method,
  </p></li>

  <li><p> By invoking the selector's {@link #close close} method, or
  </p></li>

  <li><p> By invoking the blocked thread's {@link
  java.lang.Thread#interrupt() interrupt} method, in which case its
  interrupt status will be set and the selector's {@link #wakeup wakeup}
  method will be invoked. </p></li>

</ul>

<p> The {@link #close close} method synchronizes on the selector and all
three key sets in the same order as in a selection operation.

<a name=\"ksc\">

<p> A selector's key and selected-key sets are not, in general, safe for use
by multiple concurrent threads.  If such a thread might modify one of these
sets directly then access should be controlled by synchronizing on the set
itself.  The iterators returned by these sets' {@link
java.util.Set#iterator() iterator} methods are <i>fail-fast:</i> If the set
is modified after the iterator is created, in any way except by invoking the
iterator's own {@link java.util.Iterator#remove() remove} method, then a
{@link java.util.ConcurrentModificationException} will be thrown. </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.37, 04/05/05
@since 1.4

@see SelectableChannel
@see SelectionKey"
      operation 7491995 "Selector"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class."
      end

      operation 7492123 "open"
	class_operation public return_type class_ref 303387 // Selector
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a selector.

<p> The new selector is created by invoking the {@link
java.nio.channels.spi.SelectorProvider#openSelector openSelector} method
of the system-wide default {@link
java.nio.channels.spi.SelectorProvider} object.  </p>

@return  A new selector

@throws  IOException
         If an I/O error occurs"
      end

      operation 7492251 "isOpen"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this selector is open.  </p>

@return <tt>true</tt> if, and only if, this selector is open"
      end

      operation 7492379 "provider"
	abstract public return_type class_ref 946715 // SelectorProvider
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider that created this channel.  </p>

@return  The provider that created this channel"
      end

      operation 7492507 "keys"
	abstract public return_type class_ref 136731 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SelectionKey> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this selector's key set.

<p> The key set is not directly modifiable.  A key is removed only after
it has been cancelled and its channel has been deregistered.  Any
attempt to modify the key set will cause an {@link
UnsupportedOperationException} to be thrown.

<p> The key set is <a href=\"#ksc\">not thread-safe</a>. </p>

@return  This selector's key set

@throws  ClosedSelectorException
         If this selector is closed"
      end

      operation 7492635 "selectedKeys"
	abstract public return_type class_ref 136731 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SelectionKey> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this selector's selected-key set.

<p> Keys may be removed from, but not directly added to, the
selected-key set.  Any attempt to add an object to the key set will
cause an {@link UnsupportedOperationException} to be thrown.

<p> The selected-key set is <a href=\"#ksc\">not thread-safe</a>. </p>

@return  This selector's selected-key set

@throws  ClosedSelectorException
         If this selector is closed"
      end

      operation 7492763 "selectNow"
	abstract public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Selects a set of keys whose corresponding channels are ready for I/O
operations.

<p> This method performs a non-blocking <a href=\"#selop\">selection
operation</a>.  If no channels have become selectable since the previous
selection operation then this method immediately returns zero.

<p> Invoking this method clears the effect of any previous invocations
of the {@link #wakeup wakeup} method.  </p>

@return  The number of keys, possibly zero, whose ready-operation sets
         were updated by the selection operation

@throws  IOException
         If an I/O error occurs

@throws  ClosedSelectorException
         If this selector is closed"
      end

      operation 7492891 "select"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "timeout" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Selects a set of keys whose corresponding channels are ready for I/O
operations.

<p> This method performs a blocking <a href=\"#selop\">selection
operation</a>.  It returns only after at least one channel is selected,
this selector's {@link #wakeup wakeup} method is invoked, the current
thread is interrupted, or the given timeout period expires, whichever
comes first.

<p> This method does not offer real-time guarantees: It schedules the
timeout as if by invoking the {@link Object#wait(long)} method. </p>

@param  timeout  If positive, block for up to <tt>timeout</tt>
                 milliseconds, more or less, while waiting for a
                 channel to become ready; if zero, block indefinitely;
                 must not be negative

@return  The number of keys, possibly zero,
         whose ready-operation sets were updated

@throws  IOException
         If an I/O error occurs

@throws  ClosedSelectorException
         If this selector is closed

@throws  IllegalArgumentException
         If the value of the timeout argument is negative"
      end

      operation 7493019 "select"
	abstract public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Selects a set of keys whose corresponding channels are ready for I/O
operations.

<p> This method performs a blocking <a href=\"#selop\">selection
operation</a>.  It returns only after at least one channel is selected,
this selector's {@link #wakeup wakeup} method is invoked, or the current
thread is interrupted, whichever comes first.  </p>

@return  The number of keys, possibly zero,
         whose ready-operation sets were updated

@throws  IOException
         If an I/O error occurs

@throws  ClosedSelectorException
         If this selector is closed"
      end

      operation 7493147 "wakeup"
	abstract public return_type class_ref 303387 // Selector
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes the first selection operation that has not yet returned to return
immediately.

<p> If another thread is currently blocked in an invocation of the
{@link #select()} or {@link #select(long)} methods then that invocation
will return immediately.  If no selection operation is currently in
progress then the next invocation of one of these methods will return
immediately unless the {@link #selectNow()} method is invoked in the
meantime.  In any case the value returned by that invocation may be
non-zero.  Subsequent invocations of the {@link #select()} or {@link
#select(long)} methods will block as usual unless this method is invoked
again in the meantime.

<p> Invoking this method more than once between two successive selection
operations has the same effect as invoking it just once.  </p>

@return  This selector"
      end

      operation 7493275 "close"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this selector.

<p> If a thread is currently blocked in one of this selector's selection
methods then it is interrupted as if by invoking the selector's {@link
#wakeup wakeup} method.

<p> Any uncancelled keys still associated with this selector are
invalidated, their channels are deregistered, and any other resources
associated with this selector are released.

<p> If this selector is already closed then invoking this method has no
effect.

<p> After a selector is closed, any further attempt to use it, except by
invoking this method or the {@link #wakeup wakeup} method, will cause a
{@link ClosedSelectorException} to be thrown. </p>

@throws  IOException
         If an I/O error occurs"
      end
    end

    class 904731 "FileChannel"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A channel for reading, writing, mapping, and manipulating a file.

<p> A file channel has a current <i>position</i> within its file which can
be both {@link #position() </code>queried<code>} and {@link #position(long)
</code>modified<code>}.  The file itself contains a variable-length sequence
of bytes that can be read and written and whose current {@link #size
</code><i>size</i><code>} can be queried.  The size of the file increases
when bytes are written beyond its current size; the size of the file
decreases when it is {@link #truncate </code><i>truncated</i><code>}.  The
file may also have some associated <i>metadata</i> such as access
permissions, content type, and last-modification time; this class does not
define methods for metadata access.

<p> In addition to the familiar read, write, and close operations of byte
channels, this class defines the following file-specific operations: </p>

<ul>

  <li><p> Bytes may be {@link #read(ByteBuffer, long) </code>read<code>} or
  {@link #write(ByteBuffer, long) </code>written<code>} at an absolute
  position in a file in a way that does not affect the channel's current
  position.  </p></li>

  <li><p> A region of a file may be {@link #map </code>mapped<code>}
  directly into memory; for large files this is often much more efficient
  than invoking the usual <tt>read</tt> or <tt>write</tt> methods.
  </p></li>

  <li><p> Updates made to a file may be {@link #force </code>forced
  out<code>} to the underlying storage device, ensuring that data are not
  lost in the event of a system crash.  </p></li>

  <li><p> Bytes can be transferred from a file {@link #transferTo </code>to
  some other channel<code>}, and {@link #transferFrom </code>vice
  versa<code>}, in a way that can be optimized by many operating systems
  into a very fast transfer directly to or from the filesystem cache.
  </p></li>

  <li><p> A region of a file may be {@link FileLock </code>locked<code>}
  against access by other programs.  </p></li>

</ul>

<p> File channels are safe for use by multiple concurrent threads.  The
{@link Channel#close close} method may be invoked at any time, as specified
by the {@link Channel} interface.  Only one operation that involves the
channel's position or can change its file's size may be in progress at any
given time; attempts to initiate a second such operation while the first is
still in progress will block until the first operation completes.  Other
operations, in particular those that take an explicit position, may proceed
concurrently; whether they in fact do so is dependent upon the underlying
implementation and is therefore unspecified.

<p> The view of a file provided by an instance of this class is guaranteed
to be consistent with other views of the same file provided by other
instances in the same program.  The view provided by an instance of this
class may or may not, however, be consistent with the views seen by other
concurrently-running programs due to caching performed by the underlying
operating system and delays induced by network-filesystem protocols.  This
is true regardless of the language in which these other programs are
written, and whether they are running on the same machine or on some other
machine.  The exact nature of any such inconsistencies are system-dependent
and are therefore unspecified.

<p> This class does not define methods for opening existing files or for
creating new ones; such methods may be added in a future release.  In this
release a file channel can be obtained from an existing {@link
java.io.FileInputStream#getChannel FileInputStream}, {@link
java.io.FileOutputStream#getChannel FileOutputStream}, or {@link
java.io.RandomAccessFile#getChannel RandomAccessFile} object by invoking
that object's <tt>getChannel</tt> method, which returns a file channel that
is connected to the same underlying file.

<p> The state of a file channel is intimately connected to that of the
object whose <tt>getChannel</tt> method returned the channel.  Changing the
channel's position, whether explicitly or by reading or writing bytes, will
change the file position of the originating object, and vice versa.
Changing the file's length via the file channel will change the length seen
via the originating object, and vice versa.  Changing the file's content by
writing bytes will change the content seen by the originating object, and
vice versa.

<a name=\"open-mode\"><p> At various points this class specifies that an
instance that is \"open for reading,\" \"open for writing,\" or \"open for
reading and writing\" is required.  A channel obtained via the {@link
java.io.FileInputStream#getChannel getChannel} method of a {@link
java.io.FileInputStream} instance will be open for reading.  A channel
obtained via the {@link java.io.FileOutputStream#getChannel getChannel}
method of a {@link java.io.FileOutputStream} instance will be open for
writing.  Finally, a channel obtained via the {@link
java.io.RandomAccessFile#getChannel getChannel} method of a {@link
java.io.RandomAccessFile} instance will be open for reading if the instance
was created with mode <tt>\"r\"</tt> and will be open for reading and writing
if the instance was created with mode <tt>\"rw\"</tt>.

<a name=\"append-mode\"><p> A file channel that is open for writing may be in
<i>append mode</i>, for example if it was obtained from a file-output stream
that was created by invoking the {@link
java.io.FileOutputStream#FileOutputStream(java.io.File,boolean)
FileOutputStream(File,boolean)} constructor and passing <tt>true</tt> for
the second parameter.  In this mode each invocation of a relative write
operation first advances the position to the end of the file and then writes
the requested data.  Whether the advancement of the position and the writing
of the data are done in a single atomic operation is system-dependent and
therefore unspecified.


@see java.io.FileInputStream#getChannel()
@see java.io.FileOutputStream#getChannel()
@see java.io.RandomAccessFile#getChannel()

@author Mark Reinhold
@author Mike McCloskey
@author JSR-51 Expert Group
@version 1.40, 04/01/12
@since 1.4"
      classrelation 1843483 // <generalisation>
	relation 1843483 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1843483 // <generalisation>
	  b parent class_ref 945819 // AbstractInterruptibleChannel
      end

      classrelation 1843611 // <realization>
	relation 1843611 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1843611 // <realization>
	  b parent class_ref 945051 // ByteChannel
      end

      classrelation 1843739 // <realization>
	relation 1843739 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1843739 // <realization>
	  b parent class_ref 946971 // GatheringByteChannel
      end

      classrelation 1843867 // <realization>
	relation 1843867 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1843867 // <realization>
	  b parent class_ref 946843 // ScatteringByteChannel
      end

      operation 7483931 "FileChannel"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class."
      end

      operation 7484059 "read"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "dst" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Channel operations --

Reads a sequence of bytes from this channel into the given buffer.

<p> Bytes are read starting at this channel's current file position, and
then the file position is updated with the number of bytes actually
read.  Otherwise this method behaves exactly as specified in the {@link
ReadableByteChannel} interface. </p>"
      end

      operation 7484187 "read"
	abstract public explicit_return_type "long"
	nparams 3
	  param inout name "dsts" type class_ref 182427 // ByteBuffer
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a sequence of bytes from this channel into a subsequence of the
given buffers.

<p> Bytes are read starting at this channel's current file position, and
then the file position is updated with the number of bytes actually
read.  Otherwise this method behaves exactly as specified in the {@link
ScatteringByteChannel} interface.  </p>"
      end

      operation 7484315 "read"
	public explicit_return_type "long"
	nparams 1
	  param inout name "dsts" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a sequence of bytes from this channel into the given buffers.

<p> Bytes are read starting at this channel's current file position, and
then the file position is updated with the number of bytes actually
read.  Otherwise this method behaves exactly as specified in the {@link
ScatteringByteChannel} interface.  </p>"
      end

      operation 7484443 "write"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "src" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of bytes to this channel from the given buffer.

<p> Bytes are written starting at this channel's current file position
unless the channel is in append mode, in which case the position is
first advanced to the end of the file.  The file is grown, if necessary,
to accommodate the written bytes, and then the file position is updated
with the number of bytes actually written.  Otherwise this method
behaves exactly as specified by the {@link WritableByteChannel}
interface. </p>"
      end

      operation 7484571 "write"
	abstract public explicit_return_type "long"
	nparams 3
	  param inout name "srcs" type class_ref 182427 // ByteBuffer
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of bytes to this channel from a subsequence of the
given buffers.

<p> Bytes are written starting at this channel's current file position
unless the channel is in append mode, in which case the position is
first advanced to the end of the file.  The file is grown, if necessary,
to accommodate the written bytes, and then the file position is updated
with the number of bytes actually written.  Otherwise this method
behaves exactly as specified in the {@link GatheringByteChannel}
interface.  </p>"
      end

      operation 7484699 "write"
	public explicit_return_type "long"
	nparams 1
	  param inout name "srcs" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of bytes to this channel from the given buffers.

<p> Bytes are written starting at this channel's current file position
unless the channel is in append mode, in which case the position is
first advanced to the end of the file.  The file is grown, if necessary,
to accommodate the written bytes, and then the file position is updated
with the number of bytes actually written.  Otherwise this method
behaves exactly as specified in the {@link GatheringByteChannel}
interface.  </p>"
      end

      operation 7484827 "position"
	abstract public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Other operations --

Returns this channel's file position.  </p>

@return  This channel's file position,
         a non-negative integer counting the number of bytes
         from the beginning of the file to the current position

@throws  ClosedChannelException
         If this channel is closed

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7484955 "position"
	abstract public return_type class_ref 904731 // FileChannel
	nparams 1
	  param in name "newPosition" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this channel's file position.

<p> Setting the position to a value that is greater than the file's
current size is legal but does not change the size of the file.  A later
attempt to read bytes at such a position will immediately return an
end-of-file indication.  A later attempt to write bytes at such a
position will cause the file to be grown to accommodate the new bytes;
the values of any bytes between the previous end-of-file and the
newly-written bytes are unspecified.  </p>

@param  newPosition
        The new position, a non-negative integer counting
        the number of bytes from the beginning of the file

@return  This file channel

@throws  ClosedChannelException
         If this channel is closed

@throws  IllegalArgumentException
         If the new position is negative

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7485083 "size"
	abstract public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current size of this channel's file. </p>

@return  The current size of this channel's file,
         measured in bytes

@throws  ClosedChannelException
         If this channel is closed

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7485211 "truncate"
	abstract public return_type class_ref 904731 // FileChannel
	nparams 1
	  param in name "size" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Truncates this channel's file to the given size.

<p> If the given size is less than the file's current size then the file
is truncated, discarding any bytes beyond the new end of the file.  If
the given size is greater than or equal to the file's current size then
the file is not modified.  In either case, if this channel's file
position is greater than the given size then it is set to that size.
</p>

@param  size
        The new size, a non-negative byte count

@return  This file channel

@throws  NonWritableChannelException
         If this channel was not opened for writing

@throws  ClosedChannelException
         If this channel is closed

@throws  IllegalArgumentException
         If the new size is negative

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7485339 "force"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "metaData" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forces any updates to this channel's file to be written to the storage
device that contains it.

<p> If this channel's file resides on a local storage device then when
this method returns it is guaranteed that all changes made to the file
since this channel was created, or since this method was last invoked,
will have been written to that device.  This is useful for ensuring that
critical information is not lost in the event of a system crash.

<p> If the file does not reside on a local device then no such guarantee
is made.

<p> The <tt>metaData</tt> parameter can be used to limit the number of
I/O operations that this method is required to perform.  Passing
<tt>false</tt> for this parameter indicates that only updates to the
file's content need be written to storage; passing <tt>true</tt>
indicates that updates to both the file's content and metadata must be
written, which generally requires at least one more I/O operation.
Whether this parameter actually has any effect is dependent upon the
underlying operating system and is therefore unspecified.

<p> Invoking this method may cause an I/O operation to occur even if the
channel was only opened for reading.  Some operating systems, for
example, maintain a last-access time as part of a file's metadata, and
this time is updated whenever the file is read.  Whether or not this is
actually done is system-dependent and is therefore unspecified.

<p> This method is only guaranteed to force changes that were made to
this channel's file via the methods defined in this class.  It may or
may not force changes that were made by modifying the content of a
{@link MappedByteBuffer </code>mapped byte buffer<code>} obtained by
invoking the {@link #map map} method.  Invoking the {@link
MappedByteBuffer#force force} method of the mapped byte buffer will
force changes made to the buffer's content to be written.  </p>

@param   metaData
         If <tt>true</tt> then this method is required to force changes
         to both the file's content and metadata to be written to
         storage; otherwise, it need only force content changes to be
         written

@throws  ClosedChannelException
         If this channel is closed

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7485467 "transferTo"
	abstract public explicit_return_type "long"
	nparams 3
	  param in name "position" explicit_type "long"
	  param in name "count" explicit_type "long"
	  param inout name "target" type class_ref 945307 // WritableByteChannel
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfers bytes from this channel's file to the given writable byte
channel.

<p> An attempt is made to read up to <tt>count</tt> bytes starting at
the given <tt>position</tt> in this channel's file and write them to the
target channel.  An invocation of this method may or may not transfer
all of the requested bytes; whether or not it does so depends upon the
natures and states of the channels.  Fewer than the requested number of
bytes are transferred if this channel's file contains fewer than
<tt>count</tt> bytes starting at the given <tt>position</tt>, or if the
target channel is non-blocking and it has fewer than <tt>count</tt>
bytes free in its output buffer.

<p> This method does not modify this channel's position.  If the given
position is greater than the file's current size then no bytes are
transferred.  If the target channel has a position then bytes are
written starting at that position and then the position is incremented
by the number of bytes written.

<p> This method is potentially much more efficient than a simple loop
that reads from this channel and writes to the target channel.  Many
operating systems can transfer bytes directly from the filesystem cache
to the target channel without actually copying them.  </p>

@param  position
        The position within the file at which the transfer is to begin;
        must be non-negative

@param  count
        The maximum number of bytes to be transferred; must be
        non-negative

@param  target
        The target channel

@return  The number of bytes, possibly zero,
         that were actually transferred

@throws IllegalArgumentException
        If the preconditions on the parameters do not hold

@throws  NonReadableChannelException
         If this channel was not opened for reading

@throws  NonWritableChannelException
         If the target channel was not opened for writing

@throws  ClosedChannelException
         If either this channel or the target channel is closed

@throws  AsynchronousCloseException
         If another thread closes either channel
         while the transfer is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread while the
         transfer is in progress, thereby closing both channels and
         setting the current thread's interrupt status

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7485595 "transferFrom"
	abstract public explicit_return_type "long"
	nparams 3
	  param inout name "src" type class_ref 945179 // ReadableByteChannel
	  param in name "position" explicit_type "long"
	  param in name "count" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfers bytes into this channel's file from the given readable byte
channel.

<p> An attempt is made to read up to <tt>count</tt> bytes from the
source channel and write them to this channel's file starting at the
given <tt>position</tt>.  An invocation of this method may or may not
transfer all of the requested bytes; whether or not it does so depends
upon the natures and states of the channels.  Fewer than the requested
number of bytes will be transferred if the source channel has fewer than
<tt>count</tt> bytes remaining, or if the source channel is non-blocking
and has fewer than <tt>count</tt> bytes immediately available in its
input buffer.

<p> This method does not modify this channel's position.  If the given
position is greater than the file's current size then no bytes are
transferred.  If the source channel has a position then bytes are read
starting at that position and then the position is incremented by the
number of bytes read.

<p> This method is potentially much more efficient than a simple loop
that reads from the source channel and writes to this channel.  Many
operating systems can transfer bytes directly from the source channel
into the filesystem cache without actually copying them.  </p>

@param  src
        The source channel

@param  position
        The position within the file at which the transfer is to begin;
        must be non-negative

@param  count
        The maximum number of bytes to be transferred; must be
        non-negative

@return  The number of bytes, possibly zero,
         that were actually transferred

@throws IllegalArgumentException
        If the preconditions on the parameters do not hold

@throws  NonReadableChannelException
         If the source channel was not opened for reading

@throws  NonWritableChannelException
         If this channel was not opened for writing

@throws  ClosedChannelException
         If either this channel or the source channel is closed

@throws  AsynchronousCloseException
         If another thread closes either channel
         while the transfer is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread while the
         transfer is in progress, thereby closing both channels and
         setting the current thread's interrupt status

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7485723 "read"
	abstract public explicit_return_type "int"
	nparams 2
	  param inout name "dst" type class_ref 182427 // ByteBuffer
	  param in name "position" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a sequence of bytes from this channel into the given buffer,
starting at the given file position.

<p> This method works in the same manner as the {@link
#read(ByteBuffer)} method, except that bytes are read starting at the
given file position rather than at the channel's current position.  This
method does not modify this channel's position.  If the given position
is greater than the file's current size then no bytes are read.  </p>

@param  dst
        The buffer into which bytes are to be transferred

@param  position
        The file position at which the transfer is to begin;
        must be non-negative

@return  The number of bytes read, possibly zero, or <tt>-1</tt> if the
         given position is greater than or equal to the file's current
         size

@throws  IllegalArgumentException
         If the position is negative

@throws  NonReadableChannelException
         If this channel was not opened for reading

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel
         while the read operation is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread
         while the read operation is in progress, thereby
         closing the channel and setting the current thread's
         interrupt status

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7485851 "write"
	abstract public explicit_return_type "int"
	nparams 2
	  param inout name "src" type class_ref 182427 // ByteBuffer
	  param in name "position" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of bytes to this channel from the given buffer,
starting at the given file position.

<p> This method works in the same manner as the {@link
#write(ByteBuffer)} method, except that bytes are written starting at
the given file position rather than at the channel's current position.
This method does not modify this channel's position.  If the given
position is greater than the file's current size then the file will be
grown to accommodate the new bytes; the values of any bytes between the
previous end-of-file and the newly-written bytes are unspecified.  </p>

@param  src
        The buffer from which bytes are to be transferred

@param  position
        The file position at which the transfer is to begin;
        must be non-negative

@return  The number of bytes written, possibly zero

@throws  IllegalArgumentException
         If the position is negative

@throws  NonWritableChannelException
         If this channel was not opened for writing

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel
         while the write operation is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread
         while the write operation is in progress, thereby
         closing the channel and setting the current thread's
         interrupt status

@throws  IOException
         If some other I/O error occurs"
      end

      class 947099 "MapMode"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1843995 // READ_ONLY (<unidirectional association>)
	  relation 1843995 --->
	    a role_name "READ_ONLY" init_value "=  new MapMode(\"READ_ONLY\")" class_relation const_relation public
	      comment "
Mode for a read-only mapping.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1843995 // READ_ONLY (<unidirectional association>)
	    b parent class_ref 947099 // MapMode
	end

	classrelation 1844123 // READ_WRITE (<unidirectional association>)
	  relation 1844123 --->
	    a role_name "READ_WRITE" init_value "=  new MapMode(\"READ_WRITE\")" class_relation const_relation public
	      comment "
Mode for a read/write mapping.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1844123 // READ_WRITE (<unidirectional association>)
	    b parent class_ref 947099 // MapMode
	end

	classrelation 1844251 // PRIVATE (<unidirectional association>)
	  relation 1844251 --->
	    a role_name "PRIVATE" init_value "=  new MapMode(\"PRIVATE\")" class_relation const_relation public
	      comment "
Mode for a private (copy-on-write) mapping.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1844251 // PRIVATE (<unidirectional association>)
	    b parent class_ref 947099 // MapMode
	end

	attribute 2817819 "name"
	  const_attribute private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7485979 "MapMode"
	  private explicit_return_type ""
	  nparams 1
	    param in name "name" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7486107 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a string describing this file-mapping mode.

@return  A descriptive string"
	end
      end

      operation 7486235 "map"
	abstract public return_type class_ref 938651 // MappedByteBuffer
	nparams 3
	  param inout name "mode" type class_ref 947099 // MapMode
	  param in name "position" explicit_type "long"
	  param in name "size" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Maps a region of this channel's file directly into memory.

<p> A region of a file may be mapped into memory in one of three modes:
</p>

<ul type=disc>

  <li><p> <i>Read-only:</i> Any attempt to modify the resulting buffer
  will cause a {@link java.nio.ReadOnlyBufferException} to be thrown.
  ({@link MapMode#READ_ONLY MapMode.READ_ONLY}) </p></li>

  <li><p> <i>Read/write:</i> Changes made to the resulting buffer will
  eventually be propagated to the file; they may or may not be made
  visible to other programs that have mapped the same file.  ({@link
  MapMode#READ_WRITE MapMode.READ_WRITE}) </p></li>

  <li><p> <i>Private:</i> Changes made to the resulting buffer will not
  be propagated to the file and will not be visible to other programs
  that have mapped the same file; instead, they will cause private
  copies of the modified portions of the buffer to be created.  ({@link
  MapMode#PRIVATE MapMode.PRIVATE}) </p></li>

</ul>

<p> For a read-only mapping, this channel must have been opened for
reading; for a read/write or private mapping, this channel must have
been opened for both reading and writing.

<p> The {@link MappedByteBuffer </code>mapped byte buffer<code>}
returned by this method will have a position of zero and a limit and
capacity of <tt>size</tt>; its mark will be undefined.  The buffer and
the mapping that it represents will remain valid until the buffer itself
is garbage-collected.

<p> A mapping, once established, is not dependent upon the file channel
that was used to create it.  Closing the channel, in particular, has no
effect upon the validity of the mapping.

<p> Many of the details of memory-mapped files are inherently dependent
upon the underlying operating system and are therefore unspecified.  The
behavior of this method when the requested region is not completely
contained within this channel's file is unspecified.  Whether changes
made to the content or size of the underlying file, by this program or
another, are propagated to the buffer is unspecified.  The rate at which
changes to the buffer are propagated to the file is unspecified.

<p> For most operating systems, mapping a file into memory is more
expensive than reading or writing a few tens of kilobytes of data via
the usual {@link #read read} and {@link #write write} methods.  From the
standpoint of performance it is generally only worth mapping relatively
large files into memory.  </p>

@param  mode
        One of the constants {@link MapMode#READ_ONLY READ_ONLY}, {@link
        MapMode#READ_WRITE READ_WRITE}, or {@link MapMode#PRIVATE
        PRIVATE} defined in the {@link MapMode} class, according to
        whether the file is to be mapped read-only, read/write, or
        privately (copy-on-write), respectively

@param  position
        The position within the file at which the mapped region
        is to start; must be non-negative

@param  size
        The size of the region to be mapped; must be non-negative and
        no greater than {@link java.lang.Integer#MAX_VALUE}

@throws NonReadableChannelException
        If the <tt>mode</tt> is {@link MapMode#READ_ONLY READ_ONLY} but
        this channel was not opened for reading

@throws NonWritableChannelException
        If the <tt>mode</tt> is {@link MapMode#READ_WRITE READ_WRITE} or
        {@link MapMode#PRIVATE PRIVATE} but this channel was not opened
        for both reading and writing

@throws IllegalArgumentException
        If the preconditions on the parameters do not hold

@throws IOException
        If some other I/O error occurs

@see java.nio.channels.FileChannel.MapMode
@see java.nio.MappedByteBuffer"
      end

      operation 7486363 "lock"
	abstract public return_type class_ref 947227 // FileLock
	nparams 3
	  param in name "position" explicit_type "long"
	  param in name "size" explicit_type "long"
	  param inout name "shared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Locks --

Acquires a lock on the given region of this channel's file.

<p> An invocation of this method will block until the region can be
locked, this channel is closed, or the invoking thread is interrupted,
whichever comes first.

<p> If this channel is closed by another thread during an invocation of
this method then an {@link AsynchronousCloseException} will be thrown.

<p> If the invoking thread is interrupted while waiting to acquire the
lock then its interrupt status will be set and a {@link
FileLockInterruptionException} will be thrown.  If the invoker's
interrupt status is set when this method is invoked then that exception
will be thrown immediately; the thread's interrupt status will not be
changed.

<p> The region specified by the <tt>position</tt> and <tt>size</tt>
parameters need not be contained within, or even overlap, the actual
underlying file.  Lock regions are fixed in size; if a locked region
initially contains the end of the file and the file grows beyond the
region then the new portion of the file will not be covered by the lock.
If a file is expected to grow in size and a lock on the entire file is
required then a region starting at zero, and no smaller than the
expected maximum size of the file, should be locked.  The zero-argument
{@link #lock()} method simply locks a region of size {@link
Long#MAX_VALUE}.

<p> Some operating systems do not support shared locks, in which case a
request for a shared lock is automatically converted into a request for
an exclusive lock.  Whether the newly-acquired lock is shared or
exclusive may be tested by invoking the resulting lock object's {@link
FileLock#isShared() isShared} method.

<p> File locks are held on behalf of the entire Java virtual machine.
They are not suitable for controlling access to a file by multiple
threads within the same virtual machine.  </p>

@param  position
        The position at which the locked region is to start; must be
        non-negative

@param  size
        The size of the locked region; must be non-negative, and the sum
        <tt>position</tt>&nbsp;+&nbsp;<tt>size</tt> must be non-negative

@param  shared
        <tt>true</tt> to request a shared lock, in which case this
        channel must be open for reading (and possibly writing);
        <tt>false</tt> to request an exclusive lock, in which case this
        channel must be open for writing (and possibly reading)

@return  A lock object representing the newly-acquired lock

@throws  IllegalArgumentException
         If the preconditions on the parameters do not hold

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel while the invoking
         thread is blocked in this method

@throws  FileLockInterruptionException
         If the invoking thread is interrupted while blocked in this
         method

@throws  OverlappingFileLockException
         If a lock that overlaps the requested region is already held by
         this Java virtual machine, or if another thread is already
         blocked in this method and is attempting to lock an overlapping
         region

@throws  NonReadableChannelException
         If <tt>shared</tt> is <tt>true</tt> this channel was not
         opened for reading

@throws  NonWritableChannelException
         If <tt>shared</tt> is <tt>false</tt> but this channel was not
         opened for writing

@throws  IOException
         If some other I/O error occurs

@see     #lock()
@see     #tryLock()
@see     #tryLock(long,long,boolean)"
      end

      operation 7486491 "lock"
	public return_type class_ref 947227 // FileLock
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires an exclusive lock on this channel's file.

<p> An invocation of this method of the form <tt>fc.lock()</tt> behaves
in exactly the same way as the invocation

<pre>
    fc.{@link #lock(long,long,boolean) lock}(0L, Long.MAX_VALUE, false) </pre>

@return  A lock object representing the newly-acquired lock

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel while the invoking
         thread is blocked in this method

@throws  FileLockInterruptionException
         If the invoking thread is interrupted while blocked in this
         method

@throws  OverlappingFileLockException
         If a lock that overlaps the requested region is already held by
         this Java virtual machine, or if another thread is already
         blocked in this method and is attempting to lock an overlapping
         region of the same file

@throws  NonReadableChannelException
         If <tt>shared</tt> is <tt>true</tt> this channel was not
         opened for reading

@throws  NonWritableChannelException
         If <tt>shared</tt> is <tt>false</tt> but this channel was not
         opened for writing

@throws  IOException
         If some other I/O error occurs

@see     #lock(long,long,boolean)
@see     #tryLock()
@see     #tryLock(long,long,boolean)"
      end

      operation 7486619 "tryLock"
	abstract public return_type class_ref 947227 // FileLock
	nparams 3
	  param in name "position" explicit_type "long"
	  param in name "size" explicit_type "long"
	  param inout name "shared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to acquire a lock on the given region of this channel's file.

<p> This method does not block.  An invocation of this always returns
immediately, either having acquired a lock on the requested region or
having failed to do so.  If it fails to acquire a lock because an
overlapping lock is held by another program then it returns
<tt>null</tt>.  If it fails to acquire a lock for any other reason then
an appropriate exception is thrown.

<p> The region specified by the <tt>position</tt> and <tt>size</tt>
parameters need not be contained within, or even overlap, the actual
underlying file.  Lock regions are fixed in size; if a locked region
initially contains the end of the file and the file grows beyond the
region then the new portion of the file will not be covered by the lock.
If a file is expected to grow in size and a lock on the entire file is
required then a region starting at zero, and no smaller than the
expected maximum size of the file, should be locked.  The zero-argument
{@link #tryLock()} method simply locks a region of size {@link
Long#MAX_VALUE}.

<p> Some operating systems do not support shared locks, in which case a
request for a shared lock is automatically converted into a request for
an exclusive lock.  Whether the newly-acquired lock is shared or
exclusive may be tested by invoking the resulting lock object's {@link
FileLock#isShared() isShared} method.

<p> File locks are held on behalf of the entire Java virtual machine.
They are not suitable for controlling access to a file by multiple
threads within the same virtual machine.  </p>

@param  position
        The position at which the locked region is to start; must be
        non-negative

@param  size
        The size of the locked region; must be non-negative, and the sum
        <tt>position</tt>&nbsp;+&nbsp;<tt>size</tt> must be non-negative

@param  shared
        <tt>true</tt> to request a shared lock,
        <tt>false</tt> to request an exclusive lock

@return  A lock object representing the newly-acquired lock,
         or <tt>null</tt> if the lock could not be acquired
         because another program holds an overlapping lock

@throws  IllegalArgumentException
         If the preconditions on the parameters do not hold

@throws  ClosedChannelException
         If this channel is closed

@throws  OverlappingFileLockException
         If a lock that overlaps the requested region is already held by
         this Java virtual machine, or if another thread is already
         blocked in this method and is attempting to lock an overlapping
         region of the same file

@throws  IOException
         If some other I/O error occurs

@see     #lock()
@see     #lock(long,long,boolean)
@see     #tryLock()"
      end

      operation 7486747 "tryLock"
	public return_type class_ref 947227 // FileLock
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to acquire an exclusive lock on this channel's file.

<p> An invocation of this method of the form <tt>fc.tryLock()</tt>
behaves in exactly the same way as the invocation

<pre>
    fc.{@link #tryLock(long,long,boolean) tryLock}(0L, Long.MAX_VALUE, false) </pre>

@return  A lock object representing the newly-acquired lock,
         or <tt>null</tt> if the lock could not be acquired
         because another program holds an overlapping lock

@throws  ClosedChannelException
         If this channel is closed

@throws  OverlappingFileLockException
         If a lock that overlaps the requested region is already held by
         this Java virtual machine, or if another thread is already
         blocked in this method and is attempting to lock an overlapping
         region

@throws  IOException
         If some other I/O error occurs

@see     #lock()
@see     #lock(long,long,boolean)
@see     #tryLock(long,long,boolean)"
      end
    end

    class 918171 "Channel"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A nexus for I/O operations.

<p> A channel represents an open connection to an entity such as a hardware
device, a file, a network socket, or a program component that is capable of
performing one or more distinct I/O operations, for example reading or
writing.

<p> A channel is either open or closed.  A channel is open upon creation,
and once closed it remains closed.  Once a channel is closed, any attempt to
invoke an I/O operation upon it will cause a {@link ClosedChannelException}
to be thrown.  Whether or not a channel is open may be tested by invoking
its {@link #isOpen isOpen} method.

<p> Channels are, in general, intended to be safe for multithreaded access
as described in the specifications of the interfaces and classes that extend
and implement this interface.


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.18, 03/12/19
@since 1.4"
      classrelation 1839771 // <generalisation>
	relation 1839771 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1839771 // <generalisation>
	  b parent class_ref 179227 // Closeable
      end

      operation 7474203 "isOpen"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this channel is open.  </p>

@return <tt>true</tt> if, and only if, this channel is open"
      end

      operation 7474331 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this channel.

<p> After a channel is closed, any further attempt to invoke I/O
operations upon it will cause a {@link ClosedChannelException} to be
thrown.

<p> If this channel is already closed then invoking this method has no
effect.

<p> This method may be invoked at any time.  If some other thread has
already invoked it, however, then another invocation will block until
the first invocation is complete, after which it will return without
effect. </p>

@throws  IOException  If an I/O error occurs"
      end
    end

    class 927643 "DatagramChannel"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A selectable channel for datagram-oriented sockets.


<p> Datagram channels are not a complete abstraction of network datagram
sockets.  Binding and the manipulation of socket options must be done
through an associated {@link java.net.DatagramSocket} object obtained by
invoking the {@link #socket() socket} method.  It is not possible to create
a channel for an arbitrary, pre-existing datagram socket, nor is it possible
to specify the {@link java.net.DatagramSocketImpl} object to be used by a
datagram socket associated with a datagram channel.

<p> A datagram channel is created by invoking the {@link #open open} method
of this class.  A newly-created datagram channel is open but not connected.
A datagram channel need not be connected in order for the {@link #send send}
and {@link #receive receive} methods to be used.  A datagram channel may be
connected, by invoking its {@link #connect connect} method, in order to
avoid the overhead of the security checks are otherwise performed as part of
every send and receive operation.  A datagram channel must be connected in
order to use the {@link #read(java.nio.ByteBuffer) read} and {@link
#write(java.nio.ByteBuffer) write} methods, since those methods do not
accept or return socket addresses.

<p> Once connected, a datagram channel remains connected until it is
disconnected or closed.  Whether or not a datagram channel is connected may
be determined by invoking its {@link #isConnected isConnected} method.

<p> Datagram channels are safe for use by multiple concurrent threads.  They
support concurrent reading and writing, though at most one thread may be
reading and at most one thread may be writing at any given time.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.32, 03/12/19
@since 1.4"
      classrelation 1842715 // <generalisation>
	relation 1842715 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1842715 // <generalisation>
	  b parent class_ref 946587 // AbstractSelectableChannel
      end

      classrelation 1842843 // <realization>
	relation 1842843 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1842843 // <realization>
	  b parent class_ref 945051 // ByteChannel
      end

      classrelation 1843099 // <realization>
	relation 1843099 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1843099 // <realization>
	  b parent class_ref 946843 // ScatteringByteChannel
      end

      classrelation 1843355 // <realization>
	relation 1843355 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1843355 // <realization>
	  b parent class_ref 946971 // GatheringByteChannel
      end

      operation 7482011 "DatagramChannel"
	protected explicit_return_type ""
	nparams 1
	  param inout name "provider" type class_ref 946715 // SelectorProvider
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class."
      end

      operation 7482139 "open"
	class_operation public return_type class_ref 927643 // DatagramChannel
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a datagram channel.

<p> The new channel is created by invoking the {@link
java.nio.channels.spi.SelectorProvider#openDatagramChannel()
openDatagramChannel} method of the system-wide default {@link
java.nio.channels.spi.SelectorProvider} object.  The channel will not be
connected.  </p>

@return  A new datagram channel

@throws  IOException
         If an I/O error occurs"
      end

      operation 7482267 "validOps"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an operation set identifying this channel's supported
operations.

<p> Datagram channels support reading and writing, so this method
returns <tt>(</tt>{@link SelectionKey#OP_READ} <tt>|</tt>&nbsp;{@link
SelectionKey#OP_WRITE}<tt>)</tt>.  </p>

@return  The valid-operation set"
      end

      operation 7482395 "socket"
	abstract public return_type class_ref 544411 // DatagramSocket
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Socket-specific operations --

Retrieves a datagram socket associated with this channel.

<p> The returned object will not declare any public methods that are not
declared in the {@link java.net.DatagramSocket} class.  </p>

@return  A datagram socket associated with this channel"
      end

      operation 7482523 "isConnected"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this channel's socket is connected.  </p>

@return  <tt>true</tt> if, and only if, this channel's socket
         is connected"
      end

      operation 7482651 "connect"
	abstract public return_type class_ref 927643 // DatagramChannel
	nparams 1
	  param inout name "remote" type class_ref 927387 // SocketAddress
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this channel's socket.

<p> The channel's socket is configured so that it only receives
datagrams from, and sends datagrams to, the given remote <i>peer</i>
address.  Once connected, datagrams may not be received from or sent to
any other address.  A datagram socket remains connected until it is
explicitly disconnected or until it is closed.

<p> This method performs exactly the same security checks as the {@link
java.net.DatagramSocket#connect connect} method of the {@link
java.net.DatagramSocket} class.  That is, if a security manager has been
installed then this method verifies that its {@link
java.lang.SecurityManager#checkAccept checkAccept} and {@link
java.lang.SecurityManager#checkConnect checkConnect} methods permit
datagrams to be received from and sent to, respectively, the given
remote address.

<p> This method may be invoked at any time.  It will not have any effect 
on read or write operations that are already in progress at the moment
that it is invoked.  </p>

@param  remote
        The remote address to which this channel is to be connected

@return  This datagram channel

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel
         while the connect operation is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread
         while the connect operation is in progress, thereby
         closing the channel and setting the current thread's
         interrupt status

@throws  SecurityException
         If a security manager has been installed
         and it does not permit access to the given remote address

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7482779 "disconnect"
	abstract public return_type class_ref 927643 // DatagramChannel
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disconnects this channel's socket.

<p> The channel's socket is configured so that it can receive datagrams
from, and sends datagrams to, any remote address so long as the security 
manager, if installed, permits it.

<p> This method may be invoked at any time.  It will not have any effect 
on read or write operations that are already in progress at the moment
that it is invoked.

<p> If this channel's socket is not connected, or if the channel is
closed, then invoking this method has no effect.  </p>

@return  This datagram channel

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7482907 "receive"
	abstract public return_type class_ref 927387 // SocketAddress
	nparams 1
	  param inout name "dst" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receives a datagram via this channel.

<p> If a datagram is immediately available, or if this channel is in
blocking mode and one eventually becomes available, then the datagram is
copied into the given byte buffer and its source address is returned.
If this channel is in non-blocking mode and a datagram is not
immediately available then this method immediately returns
<tt>null</tt>.

<p> The datagram is transferred into the given byte buffer starting at
its current position, as if by a regular {@link
ReadableByteChannel#read(java.nio.ByteBuffer) read} operation.  If there
are fewer bytes remaining in the buffer than are required to hold the
datagram then the remainder of the datagram is silently discarded.

<p> This method performs exactly the same security checks as the {@link
java.net.DatagramSocket#receive receive} method of the {@link
java.net.DatagramSocket} class.  That is, if the socket is not connected
to a specific remote address and a security manager has been installed
then for each datagram received this method verifies that the source's
address and port number are permitted by the security manager's {@link
java.lang.SecurityManager#checkAccept checkAccept} method.  The overhead
of this security check can be avoided by first connecting the socket via 
the {@link #connect connect} method.

<p> This method may be invoked at any time.  If another thread has
already initiated a read operation upon this channel, however, then an
invocation of this method will block until the first operation is
complete. </p>

@param  dst
        The buffer into which the datagram is to be transferred

@return  The datagram's source address,
         or <tt>null</tt> if this channel is in non-blocking mode
         and no datagram was immediately available

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel
         while the read operation is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread
         while the read operation is in progress, thereby
         closing the channel and setting the current thread's
         interrupt status

@throws  SecurityException
         If a security manager has been installed
         and it does not permit datagrams to be accepted
         from the datagram's sender

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7483035 "send"
	abstract public explicit_return_type "int"
	nparams 2
	  param inout name "src" type class_ref 182427 // ByteBuffer
	  param inout name "target" type class_ref 927387 // SocketAddress
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a datagram via this channel.

<p> If this channel is in non-blocking mode and there is sufficient room
in the underlying output buffer, or if this channel is in blocking mode
and sufficient room becomes available, then the remaining bytes in the
given buffer are transmitted as a single datagram to the given target
address.

<p> The datagram is transferred from the byte buffer as if by a regular
{@link WritableByteChannel#write(java.nio.ByteBuffer) write} operation.

<p> This method performs exactly the same security checks as the {@link
java.net.DatagramSocket#send send} method of the {@link
java.net.DatagramSocket} class.  That is, if the socket is not connected
to a specific remote address and a security manager has been installed
then for each datagram sent this method verifies that the target address
and port number are permitted by the security manager's {@link
java.lang.SecurityManager#checkConnect checkConnect} method.  The
overhead of this security check can be avoided by first connecting the
socket via the {@link #connect connect} method.

<p> This method may be invoked at any time.  If another thread has
already initiated a write operation upon this channel, however, then an
invocation of this method will block until the first operation is
complete. </p>

@param  src
        The buffer containing the datagram to be sent

@param  target
        The address to which the datagram is to be sent

@return   The number of bytes sent, which will be either the number
          of bytes that were remaining in the source buffer when this
          method was invoked or, if this channel is non-blocking, may be
          zero if there was insufficient room for the datagram in the
          underlying output buffer

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel
         while the read operation is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread
         while the read operation is in progress, thereby
         closing the channel and setting the current thread's
         interrupt status

@throws  SecurityException
         If a security manager has been installed
         and it does not permit datagrams to be sent
         to the given address

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7483163 "read"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "dst" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- ByteChannel operations --

Reads a datagram from this channel.

<p> This method may only be invoked if this channel's socket is
connected, and it only accepts datagrams from the socket's peer.  If
there are more bytes in the datagram than remain in the given buffer
then the remainder of the datagram is silently discarded.  Otherwise
this method behaves exactly as specified in the {@link
ReadableByteChannel} interface.  </p>

@throws  NotYetConnectedException
         If this channel's socket is not connected"
      end

      operation 7483291 "read"
	abstract public explicit_return_type "long"
	nparams 3
	  param inout name "dsts" type class_ref 182427 // ByteBuffer
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a datagram from this channel.

<p> This method may only be invoked if this channel's socket is
connected, and it only accepts datagrams from the socket's peer.  If
there are more bytes in the datagram than remain in the given buffers
then the remainder of the datagram is silently discarded.  Otherwise
this method behaves exactly as specified in the {@link
ScatteringByteChannel} interface.  </p>

@throws  NotYetConnectedException
         If this channel's socket is not connected"
      end

      operation 7483419 "read"
	public explicit_return_type "long"
	nparams 1
	  param inout name "dsts" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a datagram from this channel.

<p> This method may only be invoked if this channel's socket is
connected, and it only accepts datagrams from the socket's peer.  If
there are more bytes in the datagram than remain in the given buffers
then the remainder of the datagram is silently discarded.  Otherwise
this method behaves exactly as specified in the {@link
ScatteringByteChannel} interface.  </p>

@throws  NotYetConnectedException
         If this channel's socket is not connected"
      end

      operation 7483547 "write"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "src" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a datagram to this channel.

<p> This method may only be invoked if this channel's socket is
connected, in which case it sends datagrams directly to the socket's
peer.  Otherwise it behaves exactly as specified in the {@link
WritableByteChannel} interface.  </p>

@throws  NotYetConnectedException
         If this channel's socket is not connected"
      end

      operation 7483675 "write"
	abstract public explicit_return_type "long"
	nparams 3
	  param inout name "srcs" type class_ref 182427 // ByteBuffer
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a datagram to this channel.

<p> This method may only be invoked if this channel's socket is
connected, in which case it sends datagrams directly to the socket's
peer.  Otherwise it behaves exactly as specified in the {@link
GatheringByteChannel} interface.  </p>

@return   The number of bytes sent, which will be either the number
          of bytes that were remaining in the source buffer when this
          method was invoked or, if this channel is non-blocking, may be
          zero if there was insufficient room for the datagram in the
          underlying output buffer

@throws  NotYetConnectedException
         If this channel's socket is not connected"
      end

      operation 7483803 "write"
	public explicit_return_type "long"
	nparams 1
	  param inout name "srcs" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a datagram to this channel.

<p> This method may only be invoked if this channel's socket is
connected, in which case it sends datagrams directly to the socket's
peer.  Otherwise it behaves exactly as specified in the {@link
GatheringByteChannel} interface.  </p>

@return   The number of bytes sent, which will be either the number
          of bytes that were remaining in the source buffer when this
          method was invoked or, if this channel is non-blocking, may be
          zero if there was insufficient room for the datagram in the
          underlying output buffer

@throws  NotYetConnectedException
         If this channel's socket is not connected"
      end
    end

    class 944667 "AlreadyConnectedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when an attempt is made to connect a {@link
SocketChannel} that is already connected.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1839387 // <generalisation>
	relation 1839387 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1839387 // <generalisation>
	  b parent class_ref 282779 // IllegalStateException
      end

      operation 7473819 "AlreadyConnectedException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 944795 "AsynchronousCloseException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Checked exception received by a thread when another thread closes the
channel or the part of the channel upon which it is blocked in an I/O
operation.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1839643 // <generalisation>
	relation 1839643 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1839643 // <generalisation>
	  b parent class_ref 944923 // ClosedChannelException
      end

      operation 7474075 "AsynchronousCloseException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 944923 "ClosedChannelException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Checked exception thrown when an attempt is made to invoke or complete an
I/O operation upon channel that is closed, or at least closed to that
operation.  That this exception is thrown does not necessarily imply that
the channel is completely closed.  A socket channel whose write half has
been shut down, for example, may still be open for reading.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1839515 // <generalisation>
	relation 1839515 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1839515 // <generalisation>
	  b parent class_ref 179355 // IOException
      end

      operation 7473947 "ClosedChannelException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 945051 "ByteChannel"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A channel that can read and write bytes.  This interface simply unifies
{@link ReadableByteChannel} and {@link WritableByteChannel}; it does not
specify any new operations.

@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.10, 03/12/19
@since 1.4"
      classrelation 1840027 // <generalisation>
	relation 1840027 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1840027 // <generalisation>
	  b parent class_ref 945179 // ReadableByteChannel
      end

      classrelation 1840283 // <generalisation>
	relation 1840283 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1840283 // <generalisation>
	  b parent class_ref 945307 // WritableByteChannel
      end
    end

    class 945179 "ReadableByteChannel"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A channel that can read bytes.

<p> Only one read operation upon a readable channel may be in progress at
any given time.  If one thread initiates a read operation upon a channel
then any other thread that attempts to initiate another read operation will
block until the first operation is complete.  Whether or not other kinds of
I/O operations may proceed concurrently with a read operation depends upon
the type of the channel. </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.16, 03/12/19
@since 1.4"
      classrelation 1839899 // <generalisation>
	relation 1839899 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1839899 // <generalisation>
	  b parent class_ref 918171 // Channel
      end

      operation 7474459 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "dst" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a sequence of bytes from this channel into the given buffer.

<p> An attempt is made to read up to <i>r</i> bytes from the channel,
where <i>r</i> is the number of bytes remaining in the buffer, that is,
<tt>dst.remaining()</tt>, at the moment this method is invoked.

<p> Suppose that a byte sequence of length <i>n</i> is read, where
<tt>0</tt>&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>.
This byte sequence will be transferred into the buffer so that the first
byte in the sequence is at index <i>p</i> and the last byte is at index
<i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>&nbsp;<tt>-</tt>&nbsp;<tt>1</tt>,
where <i>p</i> is the buffer's position at the moment this method is
invoked.  Upon return the buffer's position will be equal to
<i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>; its limit will not have changed.

<p> A read operation might not fill the buffer, and in fact it might not
read any bytes at all.  Whether or not it does so depends upon the
nature and state of the channel.  A socket channel in non-blocking mode,
for example, cannot read any more bytes than are immediately available
from the socket's input buffer; similarly, a file channel cannot read
any more bytes than remain in the file.  It is guaranteed, however, that
if a channel is in blocking mode and there is at least one byte
remaining in the buffer then this method will block until at least one
byte is read.

<p> This method may be invoked at any time.  If another thread has
already initiated a read operation upon this channel, however, then an
invocation of this method will block until the first operation is
complete. </p>

@param  dst
        The buffer into which bytes are to be transferred

@return  The number of bytes read, possibly zero, or <tt>-1</tt> if the
         channel has reached end-of-stream

@throws  NonReadableChannelException
         If this channel was not opened for reading

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel
         while the read operation is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread
         while the read operation is in progress, thereby
         closing the channel and setting the current thread's
         interrupt status

@throws  IOException
         If some other I/O error occurs"
      end
    end

    class 945307 "WritableByteChannel"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A channel that can write bytes.

<p> Only one write operation upon a writable channel may be in progress at
any given time.  If one thread initiates a write operation upon a channel
then any other thread that attempts to initiate another write operation will
block until the first operation is complete.  Whether or not other kinds of
I/O operations may proceed concurrently with a write operation depends upon
the type of the channel. </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.15, 03/12/19
@since 1.4"
      classrelation 1840155 // <generalisation>
	relation 1840155 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1840155 // <generalisation>
	  b parent class_ref 918171 // Channel
      end

      operation 7474587 "write"
	public explicit_return_type "int"
	nparams 1
	  param inout name "src" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of bytes to this channel from the given buffer.

<p> An attempt is made to write up to <i>r</i> bytes to the channel,
where <i>r</i> is the number of bytes remaining in the buffer, that is,
<tt>dst.remaining()</tt>, at the moment this method is invoked.

<p> Suppose that a byte sequence of length <i>n</i> is written, where
<tt>0</tt>&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>.
This byte sequence will be transferred from the buffer starting at index
<i>p</i>, where <i>p</i> is the buffer's position at the moment this
method is invoked; the index of the last byte written will be
<i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>&nbsp;<tt>-</tt>&nbsp;<tt>1</tt>.
Upon return the buffer's position will be equal to
<i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>; its limit will not have changed.

<p> Unless otherwise specified, a write operation will return only after
writing all of the <i>r</i> requested bytes.  Some types of channels,
depending upon their state, may write only some of the bytes or possibly
none at all.  A socket channel in non-blocking mode, for example, cannot
write any more bytes than are free in the socket's output buffer.

<p> This method may be invoked at any time.  If another thread has
already initiated a write operation upon this channel, however, then an
invocation of this method will block until the first operation is
complete. </p>

@param  src
        The buffer from which bytes are to be retrieved

@return The number of bytes written, possibly zero

@throws  NonWritableChannelException
         If this channel was not opened for writing

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel
         while the write operation is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread
         while the write operation is in progress, thereby
         closing the channel and setting the current thread's
         interrupt status

@throws  IOException
         If some other I/O error occurs"
      end
    end

    class 945435 "CancelledKeyException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when an attempt is made to use
a selection key that is no longer valid.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1840411 // <generalisation>
	relation 1840411 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1840411 // <generalisation>
	  b parent class_ref 282779 // IllegalStateException
      end

      operation 7474715 "CancelledKeyException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 945563 "Channels"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Utility methods for channels and streams.

<p> This class defines static methods that support the interoperation of the
stream classes of the <tt>{@link java.io}</tt> package with the channel
classes of this package.  </p>


@author Mark Reinhold
@author Mike McCloskey
@author JSR-51 Expert Group
@version 1.23, 03/12/19
@since 1.4"
      operation 7474843 "Channels"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7474971 "write"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "ch" type class_ref 945307 // WritableByteChannel
	  param inout name "bb" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " No instantiation"
      end

      operation 7475099 "newInputStream"
	class_operation public return_type class_ref 179099 // InputStream
	nparams 1
	  param inout name "ch" type class_ref 945179 // ReadableByteChannel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Byte streams from channels --

Constructs a stream that reads bytes from the given channel.

<p> The <tt>read</tt> methods of the resulting stream will throw an
{@link IllegalBlockingModeException} if invoked while the underlying
channel is in non-blocking mode.  The stream will not be buffered, and
it will not support the {@link InputStream#mark mark} or {@link
InputStream#reset reset} methods.  The stream will be safe for access by
multiple concurrent threads.  Closing the stream will in turn cause the
channel to be closed.  </p>

@param  ch
        The channel from which bytes will be read

@return  A new input stream"
      end

      operation 7475227 "newOutputStream"
	class_operation public return_type class_ref 183835 // OutputStream
	nparams 1
	  param in name "ch" type class_ref 945307 // WritableByteChannel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a stream that writes bytes to the given channel.

<p> The <tt>write</tt> methods of the resulting stream will throw an
{@link IllegalBlockingModeException} if invoked while the underlying
channel is in non-blocking mode.  The stream will not be buffered.  The
stream will be safe for access by multiple concurrent threads.  Closing
the stream will in turn cause the channel to be closed.  </p>

@param  ch
        The channel to which bytes will be written

@return  A new output stream"
      end

      operation 7475355 "newChannel"
	class_operation public return_type class_ref 945179 // ReadableByteChannel
	nparams 1
	  param in name "in" type class_ref 179099 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Channels from streams --

Constructs a channel that reads bytes from the given stream.

<p> The resulting channel will not be buffered; it will simply redirect
its I/O operations to the given stream.  Closing the channel will in
turn cause the stream to be closed.  </p>

@param  in
        The stream from which bytes are to be read

@return  A new readable byte channel"
      end

      class 945691 "ReadableByteChannelImpl"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1840923 // <generalisation>
	  relation 1840923 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1840923 // <generalisation>
	    b parent class_ref 945819 // AbstractInterruptibleChannel
	end

	classrelation 1841051 // <realization>
	  relation 1841051 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1841051 // <realization>
	    b parent class_ref 945179 // ReadableByteChannel
	end

	classrelation 1841179 // in (<unidirectional association>)
	  relation 1841179 --->
	    a role_name "in" package
	      comment " Not really interruptible
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1841179 // in (<unidirectional association>)
	    b parent class_ref 179099 // InputStream
	end

	attribute 2816283 "TRANSFER_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value "=  8192"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2816411 "buf"
	  private explicit_type "byte"
	  multiplicity "[]"
	  init_value "=  new byte[0]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2816539 "open"
	  private explicit_type "boolean"
	  init_value "=  true"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2816667 "readLock"
	  private explicit_type "Object"
	  init_value "=  new Object()"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7476507 "ReadableByteChannelImpl"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "in" type class_ref 179099 // InputStream
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7476635 "read"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "dst" type class_ref 182427 // ByteBuffer
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7476763 "implCloseChannel"
	  protected explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7476891 "newChannel"
	class_operation public return_type class_ref 945307 // WritableByteChannel
	nparams 1
	  param in name "out" type class_ref 183835 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a channel that writes bytes to the given stream.

<p> The resulting channel will not be buffered; it will simply redirect
its I/O operations to the given stream.  Closing the channel will in
turn cause the stream to be closed.  </p>

@param  out
        The stream to which bytes are to be written

@return  A new writable byte channel"
      end

      class 946075 "WritableByteChannelImpl"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1841307 // <generalisation>
	  relation 1841307 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1841307 // <generalisation>
	    b parent class_ref 945819 // AbstractInterruptibleChannel
	end

	classrelation 1841435 // <realization>
	  relation 1841435 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1841435 // <realization>
	    b parent class_ref 945307 // WritableByteChannel
	end

	classrelation 1841563 // out (<unidirectional association>)
	  relation 1841563 --->
	    a role_name "out" package
	      comment " Not really interruptible
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1841563 // out (<unidirectional association>)
	    b parent class_ref 183835 // OutputStream
	end

	attribute 2816795 "TRANSFER_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value "=  8192"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2816923 "buf"
	  private explicit_type "byte"
	  multiplicity "[]"
	  init_value "=  new byte[0]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2817051 "open"
	  private explicit_type "boolean"
	  init_value "=  true"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2817179 "writeLock"
	  private explicit_type "Object"
	  init_value "=  new Object()"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7477019 "WritableByteChannelImpl"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "out" type class_ref 183835 // OutputStream
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7477147 "write"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "src" type class_ref 182427 // ByteBuffer
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7477275 "implCloseChannel"
	  protected explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7477403 "newReader"
	class_operation public return_type class_ref 364827 // Reader
	nparams 3
	  param inout name "ch" type class_ref 945179 // ReadableByteChannel
	  param inout name "dec" type class_ref 199707 // CharsetDecoder
	  param in name "minBufferCap" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Character streams from channels --

Constructs a reader that decodes bytes from the given channel using the
given decoder.

<p> The resulting stream will contain an internal input buffer of at
least <tt>minBufferCap</tt> bytes.  The stream's <tt>read</tt> methods
will, as needed, fill the buffer by reading bytes from the underlying
channel; if the channel is in non-blocking mode when bytes are to be
read then an {@link IllegalBlockingModeException} will be thrown.  The
resulting stream will not otherwise be buffered, and it will not support
the {@link Reader#mark mark} or {@link Reader#reset reset} methods.
Closing the stream will in turn cause the channel to be closed.  </p>

@param  ch
        The channel from which bytes will be read

@param  dec
        The charset decoder to be used

@param  minBufferCap
        The minimum capacity of the internal byte buffer,
        or <tt>-1</tt> if an implementation-dependent
        default capacity is to be used

@return  A new reader"
      end

      operation 7477531 "newReader"
	class_operation public return_type class_ref 364827 // Reader
	nparams 2
	  param inout name "ch" type class_ref 945179 // ReadableByteChannel
	  param in name "csName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a reader that decodes bytes from the given channel according
to the named charset.

<p> An invocation of this method of the form

<blockquote><pre>
Channels.newReader(ch, csname)</pre></blockquote>

behaves in exactly the same way as the expression

<blockquote><pre>
Channels.newReader(ch,
                   Charset.forName(csName)
                       .newDecoder(),
                   -1);</pre></blockquote>

@param  ch
        The channel from which bytes will be read

@param  csName
        The name of the charset to be used

@return  A new reader

@throws  UnsupportedCharsetException
         If no support for the named charset is available
         in this instance of the Java virtual machine"
      end

      operation 7477659 "newWriter"
	class_operation public return_type class_ref 446619 // Writer
	nparams 3
	  param in name "ch" type class_ref 945307 // WritableByteChannel
	  param in name "enc" type class_ref 199835 // CharsetEncoder
	  param in name "minBufferCap" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a writer that encodes characters using the given encoder and
writes the resulting bytes to the given channel.

<p> The resulting stream will contain an internal output buffer of at
least <tt>minBufferCap</tt> bytes.  The stream's <tt>write</tt> methods
will, as needed, flush the buffer by writing bytes to the underlying
channel; if the channel is in non-blocking mode when bytes are to be
written then an {@link IllegalBlockingModeException} will be thrown.
The resulting stream will not otherwise be buffered.  Closing the stream
will in turn cause the channel to be closed.  </p>

@param  ch
        The channel to which bytes will be written

@param  enc
        The charset encoder to be used

@param  minBufferCap
        The minimum capacity of the internal byte buffer,
        or <tt>-1</tt> if an implementation-dependent
        default capacity is to be used

@return  A new writer"
      end

      operation 7477787 "newWriter"
	class_operation public return_type class_ref 446619 // Writer
	nparams 2
	  param inout name "ch" type class_ref 945307 // WritableByteChannel
	  param in name "csName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a writer that encodes characters according to the named
charset and writes the resulting bytes to the given channel.

<p> An invocation of this method of the form

<blockquote><pre>
Channels.newWriter(ch, csname)</pre></blockquote>

behaves in exactly the same way as the expression

<blockquote><pre>
Channels.newWriter(ch,
                   Charset.forName(csName)
                       .newEncoder(),
                   -1);</pre></blockquote>

@param  ch
        The channel to which bytes will be written

@param  csName
        The name of the charset to be used

@return  A new writer

@throws  UnsupportedCharsetException
         If no support for the named charset is available
         in this instance of the Java virtual machine"
      end
    end

    class 945947 "InterruptibleChannel"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A channel that can be asynchronously closed and interrupted.

<p> A channel that implements this interface is <i>asynchronously
closeable:</i> If a thread is blocked in an I/O operation on an
interruptible channel then another thread may invoke the channel's {@link
#close close} method.  This will cause the blocked thread to receive an
{@link AsynchronousCloseException}.

<p> A channel that implements this interface is also <i>interruptible:</i>
If a thread is blocked in an I/O operation on an interruptible channel then
another thread may invoke the blocked thread's {@link Thread#interrupt()
interrupt} method.  This will cause the channel to be closed, the blocked
thread to receive a {@link ClosedByInterruptException}, and the blocked
thread's interrupt status to be set.

<p> If a thread's interrupt status is already set and it invokes a blocking
I/O operation upon a channel then the channel will be closed and the thread
will immediately receive a {@link ClosedByInterruptException}; its interrupt
status will remain set.

<p> A channel supports asynchronous closing and interruption if, and only
if, it implements this interface.  This can be tested at runtime, if
necessary, via the <tt>instanceof</tt> operator.


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.5, 03/12/19
@since 1.4"
      classrelation 1840667 // <generalisation>
	relation 1840667 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1840667 // <generalisation>
	  b parent class_ref 918171 // Channel
      end

      operation 7475483 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this channel.

<p> Any thread currently blocked in an I/O operation upon this channel
will receive an {@link AsynchronousCloseException}.

<p> This method otherwise behaves exactly as specified by the {@link
Channel#close Channel} interface.  </p>

@throws  IOException  If an I/O error occurs"
      end
    end

    class 946203 "ClosedByInterruptException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Checked exception received by a thread when another thread interrupts it
while it is blocked in an I/O operation upon a channel.  Before this
exception is thrown the channel will have been closed and the interrupt
status of the previously-blocked thread will have been set.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1841691 // <generalisation>
	relation 1841691 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1841691 // <generalisation>
	  b parent class_ref 944795 // AsynchronousCloseException
      end

      operation 7477915 "ClosedByInterruptException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 946331 "ClosedSelectorException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when an attempt is made to invoke an I/O
operation upon a closed selector.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1841819 // <generalisation>
	relation 1841819 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1841819 // <generalisation>
	  b parent class_ref 282779 // IllegalStateException
      end

      operation 7478043 "ClosedSelectorException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 946459 "ConnectionPendingException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when an attempt is made to connect a {@link
SocketChannel} for which a non-blocking connection operation is already in
progress.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1841947 // <generalisation>
	relation 1841947 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1841947 // <generalisation>
	  b parent class_ref 282779 // IllegalStateException
      end

      operation 7478171 "ConnectionPendingException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 946843 "ScatteringByteChannel"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A channel that can read bytes into a sequence of buffers.

<p> A <i>scattering</i> read operation reads, in a single invocation, a
sequence of bytes into one or more of a given sequence of buffers.
Scattering reads are often useful when implementing network protocols or
file formats that, for example, group data into segments consisting of one
or more fixed-length headers followed by a variable-length body.  Similar
<i>gathering</i> write operations are defined in the {@link
GatheringByteChannel} interface.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.13, 03/12/19
@since 1.4"
      classrelation 1842971 // <generalisation>
	relation 1842971 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1842971 // <generalisation>
	  b parent class_ref 945179 // ReadableByteChannel
      end

      operation 7481499 "read"
	public explicit_return_type "long"
	nparams 3
	  param inout name "dsts" type class_ref 182427 // ByteBuffer
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a sequence of bytes from this channel into a subsequence of the
given buffers.

<p> An invocation of this method attempts to read up to <i>r</i> bytes
from this channel, where <i>r</i> is the total number of bytes remaining
the specified subsequence of the given buffer array, that is,

<blockquote><pre>
dsts[offset].remaining()
    + dsts[offset+1].remaining()
    + ... + dsts[offset+length-1].remaining()</pre></blockquote>

at the moment that this method is invoked.

<p> Suppose that a byte sequence of length <i>n</i> is read, where
<tt>0</tt>&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>.
Up to the first <tt>dsts[offset].remaining()</tt> bytes of this sequence
are transferred into buffer <tt>dsts[offset]</tt>, up to the next
<tt>dsts[offset+1].remaining()</tt> bytes are transferred into buffer
<tt>dsts[offset+1]</tt>, and so forth, until the entire byte sequence
is transferred into the given buffers.  As many bytes as possible are
transferred into each buffer, hence the final position of each updated
buffer, except the last updated buffer, is guaranteed to be equal to
that buffer's limit.

<p> This method may be invoked at any time.  If another thread has
already initiated a read operation upon this channel, however, then an
invocation of this method will block until the first operation is
complete. </p>

@param  dsts
        The buffers into which bytes are to be transferred

@param  offset
        The offset within the buffer array of the first buffer into
        which bytes are to be transferred; must be non-negative and no
        larger than <tt>dsts.length</tt>

@param  length
        The maximum number of buffers to be accessed; must be
        non-negative and no larger than
        <tt>dsts.length</tt>&nbsp;-&nbsp;<tt>offset</tt>

@return The number of bytes read, possibly zero,
        or <tt>-1</tt> if the channel has reached end-of-stream

@throws  IndexOutOfBoundsException
         If the preconditions on the <tt>offset</tt> and <tt>length</tt>
         parameters do not hold

@throws  NonReadableChannelException
         If this channel was not opened for reading

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel
         while the read operation is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread
         while the read operation is in progress, thereby
         closing the channel and setting the current thread's
         interrupt status

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7481627 "read"
	public explicit_return_type "long"
	nparams 1
	  param inout name "dsts" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a sequence of bytes from this channel into the given buffers.

<p> An invocation of this method of the form <tt>c.read(dsts)</tt>
behaves in exactly the same manner as the invocation

<blockquote><pre>
c.read(dsts, 0, srcs.length);</pre></blockquote>

@param  dsts
        The buffers into which bytes are to be transferred

@return The number of bytes read, possibly zero,
        or <tt>-1</tt> if the channel has reached end-of-stream

@throws  NonReadableChannelException
         If this channel was not opened for reading

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel
         while the read operation is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread
         while the read operation is in progress, thereby
         closing the channel and setting the current thread's
         interrupt status

@throws  IOException
         If some other I/O error occurs"
      end
    end

    class 946971 "GatheringByteChannel"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A channel that can write bytes from a sequence of buffers.

<p> A <i>gathering</i> write operation writes, in a single invocation, a
sequence of bytes from one or more of a given sequence of buffers.
Gathering writes are often useful when implementing network protocols or
file formats that, for example, group data into segments consisting of one
or more fixed-length headers followed by a variable-length body.  Similar
<i>scattering</i> read operations are defined in the {@link
ScatteringByteChannel} interface.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.12, 03/12/19
@since 1.4"
      classrelation 1843227 // <generalisation>
	relation 1843227 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1843227 // <generalisation>
	  b parent class_ref 945307 // WritableByteChannel
      end

      operation 7481755 "write"
	public explicit_return_type "long"
	nparams 3
	  param inout name "srcs" type class_ref 182427 // ByteBuffer
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of bytes to this channel from a subsequence of the
given buffers.

<p> An attempt is made to write up to <i>r</i> bytes to this channel,
where <i>r</i> is the total number of bytes remaining in the specified
subsequence of the given buffer array, that is,

<blockquote><pre>
srcs[offset].remaining()
    + srcs[offset+1].remaining()
    + ... + srcs[offset+length-1].remaining()</pre></blockquote>

at the moment that this method is invoked.

<p> Suppose that a byte sequence of length <i>n</i> is written, where
<tt>0</tt>&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>.
Up to the first <tt>srcs[offset].remaining()</tt> bytes of this sequence
are written from buffer <tt>srcs[offset]</tt>, up to the next
<tt>srcs[offset+1].remaining()</tt> bytes are written from buffer
<tt>srcs[offset+1]</tt>, and so forth, until the entire byte sequence is
written.  As many bytes as possible are written from each buffer, hence
the final position of each updated buffer, except the last updated
buffer, is guaranteed to be equal to that buffer's limit.

<p> Unless otherwise specified, a write operation will return only after
writing all of the <i>r</i> requested bytes.  Some types of channels,
depending upon their state, may write only some of the bytes or possibly
none at all.  A socket channel in non-blocking mode, for example, cannot
write any more bytes than are free in the socket's output buffer.

<p> This method may be invoked at any time.  If another thread has
already initiated a write operation upon this channel, however, then an
invocation of this method will block until the first operation is
complete. </p>

@param  srcs
        The buffers from which bytes are to be retrieved

@param  offset
        The offset within the buffer array of the first buffer from
        which bytes are to be retrieved; must be non-negative and no
        larger than <tt>srcs.length</tt>

@param  length
        The maximum number of buffers to be accessed; must be
        non-negative and no larger than
        <tt>srcs.length</tt>&nbsp;-&nbsp;<tt>offset</tt>

@return  The number of bytes written, possibly zero

@throws  IndexOutOfBoundsException
         If the preconditions on the <tt>offset</tt> and <tt>length</tt>
         parameters do not hold

@throws  NonWritableChannelException
         If this channel was not opened for writing

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel
         while the write operation is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread
         while the write operation is in progress, thereby
         closing the channel and setting the current thread's
         interrupt status

@throws  IOException
         If some other I/O error occurs"
      end

      operation 7481883 "write"
	public explicit_return_type "long"
	nparams 1
	  param inout name "srcs" type class_ref 182427 // ByteBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of bytes to this channel from the given buffers.

<p> An invocation of this method of the form <tt>c.write(srcs)</tt>
behaves in exactly the same manner as the invocation

<blockquote><pre>
c.write(srcs, 0, srcs.length);</pre></blockquote>

@param  srcs
        The buffers from which bytes are to be retrieved

@return  The number of bytes written, possibly zero

@throws  NonWritableChannelException
         If this channel was not opened for writing

@throws  ClosedChannelException
         If this channel is closed

@throws  AsynchronousCloseException
         If another thread closes this channel
         while the write operation is in progress

@throws  ClosedByInterruptException
         If another thread interrupts the current thread
         while the write operation is in progress, thereby
         closing the channel and setting the current thread's
         interrupt status

@throws  IOException
         If some other I/O error occurs"
      end
    end

    class 947227 "FileLock"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A token representing a lock on a region of a file.

<p> A file-lock object is created each time a lock is acquired on a file via
one of the {@link FileChannel#lock(long,long,boolean) lock} or {@link
FileChannel#tryLock(long,long,boolean) tryLock} methods of the {@link
FileChannel} class.

<p> A file-lock object is initially valid.  It remains valid until the lock
is released by invoking the {@link #release release} method, by closing the
channel that was used to acquire it, or by the termination of the Java
virtual machine, whichever comes first.  The validity of a lock may be
tested by invoking its {@link #isValid isValid} method.

<p> A file lock is either <i>exclusive</i> or <i>shared</i>.  A shared lock
prevents other concurrently-running programs from acquiring an overlapping
exclusive lock, but does allow them to acquire overlapping shared locks.  An
exclusive lock prevents other programs from acquiring an overlapping lock of
either type.  Once it is released, a lock has no further effect on the locks
that may be acquired by other programs.

<p> Whether a lock is exclusive or shared may be determined by invoking its
{@link #isShared isShared} method.  Some platforms do not support shared
locks, in which case a request for a shared lock is automatically converted
into a request for an exclusive lock.

<p> The locks held on a particular file by a single Java virtual machine do
not overlap.  The {@link #overlaps overlaps} method may be used to test
whether a candidate lock range overlaps an existing lock.

<p> A file-lock object records the file channel upon whose file the lock is
held, the type and validity of the lock, and the position and size of the
locked region.  Only the validity of a lock is subject to change over time;
all other aspects of a lock's state are immutable.

<p> File locks are held on behalf of the entire Java virtual machine.
They are not suitable for controlling access to a file by multiple
threads within the same virtual machine.

<p> File-lock objects are safe for use by multiple concurrent threads.


<a name=\"pdep\">
<h4> Platform dependencies </h4>

<p> This file-locking API is intended to map directly to the native locking
facility of the underlying operating system.  Thus the locks held on a file
should be visible to all programs that have access to the file, regardless
of the language in which those programs are written.

<p> Whether or not a lock actually prevents another program from accessing
the content of the locked region is system-dependent and therefore
unspecified.  The native file-locking facilities of some systems are merely
<i>advisory</i>, meaning that programs must cooperatively observe a known
locking protocol in order to guarantee data integrity.  On other systems
native file locks are <i>mandatory</i>, meaning that if one program locks a
region of a file then other programs are actually prevented from accessing
that region in a way that would violate the lock.  On yet other systems,
whether native file locks are advisory or mandatory is configurable on a
per-file basis.  To ensure consistent and correct behavior across platforms,
it is strongly recommended that the locks provided by this API be used as if
they were advisory locks.

<p> On some systems, acquiring a mandatory lock on a region of a file
prevents that region from being {@link java.nio.channels.FileChannel#map
</code>mapped into memory<code>}, and vice versa.  Programs that combine
locking and mapping should be prepared for this combination to fail.

<p> On some systems, closing a channel releases all locks held by the Java
virtual machine on the underlying file regardless of whether the locks were
acquired via that channel or via another channel open on the same file.  It
is strongly recommended that, within a program, a unique channel be used to
acquire all locks on any given file.

<p> Some network filesystems permit file locking to be used with
memory-mapped files only when the locked regions are page-aligned and a
whole multiple of the underlying hardware's page size.  Some network
filesystems do not implement file locks on regions that extend past a
certain position, often 2<sup>30</sup> or 2<sup>31</sup>.  In general, great
care should be taken when locking files that reside on network filesystems.


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.8, 03/12/19
@since 1.4"
      classrelation 1844379 // channel (<unidirectional association>)
	relation 1844379 --->
	  a role_name "channel" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1844379 // channel (<unidirectional association>)
	  b parent class_ref 904731 // FileChannel
      end

      attribute 2817947 "position"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2818075 "size"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2818203 "shared"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7486875 "FileLock"
	protected explicit_return_type ""
	nparams 4
	  param inout name "channel" type class_ref 904731 // FileChannel
	  param in name "position" explicit_type "long"
	  param in name "size" explicit_type "long"
	  param inout name "shared" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class.  </p>

@param  channel
        The file channel upon whose file this lock is held

@param  position
        The position within the file at which the locked region starts;
        must be non-negative

@param  size
        The size of the locked region; must be non-negative, and the sum
        <tt>position</tt>&nbsp;+&nbsp;<tt>size</tt> must be non-negative

@param  shared
        <tt>true</tt> if this lock is shared,
        <tt>false</tt> if it is exclusive

@throws IllegalArgumentException
        If the preconditions on the parameters do not hold"
      end

      operation 7487003 "channel"
	public return_type class_ref 904731 // FileChannel
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the file channel upon whose file this lock is held.  </p>

@return  The file channel"
      end

      operation 7487131 "position"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the position within the file of the first byte of the locked
region.

<p> A locked region need not be contained within, or even overlap, the
actual underlying file, so the value returned by this method may exceed
the file's current size.  </p>

@return  The position"
      end

      operation 7487259 "size"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of the locked region in bytes.

<p> A locked region need not be contained within, or even overlap, the
actual underlying file, so the value returned by this method may exceed
the file's current size.  </p>

@return  The size of the locked region"
      end

      operation 7487387 "isShared"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this lock is shared.  </p>

@return <tt>true</tt> if lock is shared,
        <tt>false</tt> if it is exclusive"
      end

      operation 7487515 "overlaps"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "position" explicit_type "long"
	  param in name "size" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this lock overlaps the given lock range.  </p>

@return  <tt>true</tt> if, and only if, this lock and the given lock
         range overlap by at least one byte"
      end

      operation 7487643 "isValid"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this lock is valid.

<p> A lock object remains valid until it is released or the associated
file channel is closed, whichever comes first.  </p>

@return  <tt>true</tt> if, and only if, this lock is valid"
      end

      operation 7487771 "release"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases this lock.

<p> If this lock object is valid then invoking this method releases the
lock and renders the object invalid.  If this lock object is invalid
then invoking this method has no effect.  </p>

@throws  ClosedChannelException
         If the channel that was used to acquire this lock
         is no longer open

@throws  IOException
         If an I/O error occurs"
      end

      operation 7487899 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing the range, type, and validity of this lock.

@return  A descriptive string"
      end
    end

    class 947355 "FileLockInterruptionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Checked exception received by a thread when another thread interrupts it
while it is waiting to acquire a file lock.  Before this exception is thrown
the interrupt status of the previously-blocked thread will have been set.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1844507 // <generalisation>
	relation 1844507 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1844507 // <generalisation>
	  b parent class_ref 179355 // IOException
      end

      operation 7488027 "FileLockInterruptionException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 947483 "IllegalBlockingModeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when a blocking-mode-specific operation
is invoked upon a channel in the incorrect blocking mode.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1844635 // <generalisation>
	relation 1844635 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1844635 // <generalisation>
	  b parent class_ref 282779 // IllegalStateException
      end

      operation 7488155 "IllegalBlockingModeException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 947611 "IllegalSelectorException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when an attempt is made to register a channel
with a selector that was not created by the provider that created the
channel.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1844763 // <generalisation>
	relation 1844763 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1844763 // <generalisation>
	  b parent class_ref 216859 // IllegalArgumentException
      end

      operation 7488283 "IllegalSelectorException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 947739 "NoConnectionPendingException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when the {@link SocketChannel#finishConnect
finishConnect} method of a {@link SocketChannel} is invoked without first
successfully invoking its {@link SocketChannel#connect connect} method.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1844891 // <generalisation>
	relation 1844891 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1844891 // <generalisation>
	  b parent class_ref 282779 // IllegalStateException
      end

      operation 7488411 "NoConnectionPendingException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 947867 "NonReadableChannelException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when an attempt is made to read
from a channel that was not originally opened for reading.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1845019 // <generalisation>
	relation 1845019 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1845019 // <generalisation>
	  b parent class_ref 282779 // IllegalStateException
      end

      operation 7488539 "NonReadableChannelException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 947995 "NonWritableChannelException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when an attempt is made to write
to a channel that was not originally opened for writing.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1845147 // <generalisation>
	relation 1845147 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1845147 // <generalisation>
	  b parent class_ref 282779 // IllegalStateException
      end

      operation 7488667 "NonWritableChannelException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 948123 "NotYetBoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when an attempt is made to invoke an I/O
operation upon a server socket channel that is not yet bound.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1845275 // <generalisation>
	relation 1845275 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1845275 // <generalisation>
	  b parent class_ref 282779 // IllegalStateException
      end

      operation 7488795 "NotYetBoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 948251 "NotYetConnectedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when an attempt is made to invoke an I/O
operation upon a socket channel that is not yet connected.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1845403 // <generalisation>
	relation 1845403 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1845403 // <generalisation>
	  b parent class_ref 282779 // IllegalStateException
      end

      operation 7488923 "NotYetConnectedException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 948379 "OverlappingFileLockException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when an attempt is made to acquire a lock on a
region of a file that overlaps a region already locked by the same Java
virtual machine, or when another thread is already waiting to lock an
overlapping region of the same file.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1845531 // <generalisation>
	relation 1845531 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1845531 // <generalisation>
	  b parent class_ref 282779 // IllegalStateException
      end

      operation 7489051 "OverlappingFileLockException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 948507 "Pipe"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A pair of channels that implements a unidirectional pipe.

<p> A pipe consists of a pair of channels: A writable {@link
Pipe.SinkChannel </code>sink<code>} channel and a readable {@link
Pipe.SourceChannel </code>source<code>} channel.  Once some bytes are
written to the sink channel they can be read from source channel in exactly
the order in which they were written.

<p> Whether or not a thread writing bytes to a pipe will block until another
thread reads those bytes, or some previously-written bytes, from the pipe is
system-dependent and therefore unspecified.  Many pipe implementations will
buffer up to a certain number of bytes between the sink and source channels,
but such buffering should not be assumed.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@version 1.20, 03/12/19
@since 1.4"
      class 948635 "SourceChannel"
	abstract visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1845659 // <generalisation>
	  relation 1845659 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1845659 // <generalisation>
	    b parent class_ref 946587 // AbstractSelectableChannel
	end

	classrelation 1845787 // <realization>
	  relation 1845787 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1845787 // <realization>
	    b parent class_ref 945179 // ReadableByteChannel
	end

	classrelation 1845915 // <realization>
	  relation 1845915 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1845915 // <realization>
	    b parent class_ref 946843 // ScatteringByteChannel
	end

	operation 7489179 "SourceChannel"
	  protected explicit_return_type ""
	  nparams 1
	    param inout name "provider" type class_ref 946715 // SelectorProvider
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new instance of this class."
	end

	operation 7489307 "validOps"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns an operation set identifying this channel's supported
operations.

<p> Pipe-source channels only support reading, so this method
returns {@link SelectionKey#OP_READ}.  </p>

@return  The valid-operation set"
	end
      end

      class 948763 "SinkChannel"
	abstract visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1846043 // <generalisation>
	  relation 1846043 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1846043 // <generalisation>
	    b parent class_ref 946587 // AbstractSelectableChannel
	end

	classrelation 1846171 // <realization>
	  relation 1846171 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1846171 // <realization>
	    b parent class_ref 945307 // WritableByteChannel
	end

	classrelation 1846299 // <realization>
	  relation 1846299 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1846299 // <realization>
	    b parent class_ref 946971 // GatheringByteChannel
	end

	operation 7489435 "SinkChannel"
	  protected explicit_return_type ""
	  nparams 1
	    param inout name "provider" type class_ref 946715 // SelectorProvider
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Initializes a new instance of this class."
	end

	operation 7489563 "validOps"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns an operation set identifying this channel's supported
operations.

<p> Pipe-sink channels only support writing, so this method returns
{@link SelectionKey#OP_WRITE}.  </p>

@return  The valid-operation set"
	end
      end

      operation 7489691 "Pipe"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class."
      end

      operation 7489819 "source"
	abstract public return_type class_ref 948635 // SourceChannel
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this pipe's source channel.  </p>

@return  This pipe's source channel"
      end

      operation 7489947 "sink"
	abstract public return_type class_ref 948763 // SinkChannel
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this pipe's sink channel.  </p>

@return  This pipe's sink channel"
      end

      operation 7490075 "open"
	class_operation public return_type class_ref 948507 // Pipe
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a pipe.

<p> The new pipe is created by invoking the {@link
java.nio.channels.spi.SelectorProvider#openPipe openPipe} method of the
system-wide default {@link java.nio.channels.spi.SelectorProvider}
object.  </p>

@return  A new pipe

@throws  IOException
         If an I/O error occurs"
      end
    end

    class 948891 "UnresolvedAddressException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when an attempt is made to invoke a network
operation upon an unresolved socket address.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1847067 // <generalisation>
	relation 1847067 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1847067 // <generalisation>
	  b parent class_ref 216859 // IllegalArgumentException
      end

      operation 7495963 "UnresolvedAddressException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end

    class 949019 "UnsupportedAddressTypeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unchecked exception thrown when an attempt is made to bind or connect
to a socket address of a type that is not supported.

@version 1.9, 01/11/19
@since 1.4"
      classrelation 1847195 // <generalisation>
	relation 1847195 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1847195 // <generalisation>
	  b parent class_ref 216859 // IllegalArgumentException
      end

      operation 7496091 "UnsupportedAddressTypeException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class."
      end
    end
  end

  deploymentview 167323 "channels"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 715675 "AlreadyConnectedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 944667 // AlreadyConnectedException
      end
      comment "@(#)AlreadyConnectedException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 715803 "ClosedChannelException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 944923 // ClosedChannelException
      end
      comment "@(#)ClosedChannelException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 715931 "AsynchronousCloseException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 944795 // AsynchronousCloseException
      end
      comment "@(#)AsynchronousCloseException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 716059 "Channel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.Closeable;
${definition}"
      associated_classes
	class_ref 918171 // Channel
      end
      comment "@(#)Channel.java	1.18 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 716187 "ReadableByteChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.ByteBuffer;
${definition}"
      associated_classes
	class_ref 945179 // ReadableByteChannel
      end
      comment "@(#)ReadableByteChannel.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 716315 "WritableByteChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.ByteBuffer;
${definition}"
      associated_classes
	class_ref 945307 // WritableByteChannel
      end
      comment "@(#)WritableByteChannel.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 716443 "ByteChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 945051 // ByteChannel
      end
      comment "@(#)ByteChannel.java	1.10 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 716571 "CancelledKeyException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 945435 // CancelledKeyException
      end
      comment "@(#)CancelledKeyException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 716699 "InterruptibleChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 945947 // InterruptibleChannel
      end
      comment "Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


@(#)InterruptibleChannel.java	1.5 03/12/19"
    end

    artifact 716955 "Channels"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.CoderResult;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.channels.spi.AbstractInterruptibleChannel;
import sun.nio.ch.ChannelInputStream;
import sun.nio.cs.StreamDecoder;
import sun.nio.cs.StreamEncoder;
${definition}"
      associated_classes
	class_ref 945563 // Channels
      end
      comment "@(#)Channels.java	1.23 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 717083 "ClosedByInterruptException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 946203 // ClosedByInterruptException
      end
      comment "@(#)ClosedByInterruptException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 717211 "ClosedSelectorException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 946331 // ClosedSelectorException
      end
      comment "@(#)ClosedSelectorException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 717339 "ConnectionPendingException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 946459 // ConnectionPendingException
      end
      comment "@(#)ConnectionPendingException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 717467 "SelectableChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.channels.spi.AbstractInterruptibleChannel;
import java.nio.channels.spi.SelectorProvider;
${definition}"
      associated_classes
	class_ref 236699 // SelectableChannel
      end
      comment "@(#)SelectableChannel.java	1.34 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 717723 "ScatteringByteChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.ByteBuffer;
${definition}"
      associated_classes
	class_ref 946843 // ScatteringByteChannel
      end
      comment "@(#)ScatteringByteChannel.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 717851 "GatheringByteChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.ByteBuffer;
${definition}"
      associated_classes
	class_ref 946971 // GatheringByteChannel
      end
      comment "@(#)GatheringByteChannel.java	1.12 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 717979 "DatagramChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.net.DatagramSocket;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.spi.*;
${definition}"
      associated_classes
	class_ref 927643 // DatagramChannel
      end
      comment "@(#)DatagramChannel.java	1.32 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 718107 "FileChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.nio.ByteBuffer;
import java.nio.MappedByteBuffer;
import java.nio.channels.spi.AbstractInterruptibleChannel;
${definition}"
      associated_classes
	class_ref 904731 // FileChannel
      end
      comment "@(#)FileChannel.java	1.40 04/01/12

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 718235 "FileLock"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 947227 // FileLock
      end
      comment "@(#)FileLock.java	1.8 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 718363 "FileLockInterruptionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 947355 // FileLockInterruptionException
      end
      comment "@(#)FileLockInterruptionException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 718491 "IllegalBlockingModeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 947483 // IllegalBlockingModeException
      end
      comment "@(#)IllegalBlockingModeException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 718619 "IllegalSelectorException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 947611 // IllegalSelectorException
      end
      comment "@(#)IllegalSelectorException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 718747 "NoConnectionPendingException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 947739 // NoConnectionPendingException
      end
      comment "@(#)NoConnectionPendingException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 718875 "NonReadableChannelException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 947867 // NonReadableChannelException
      end
      comment "@(#)NonReadableChannelException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 719003 "NonWritableChannelException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 947995 // NonWritableChannelException
      end
      comment "@(#)NonWritableChannelException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 719131 "NotYetBoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 948123 // NotYetBoundException
      end
      comment "@(#)NotYetBoundException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 719259 "NotYetConnectedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 948251 // NotYetConnectedException
      end
      comment "@(#)NotYetConnectedException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 719387 "OverlappingFileLockException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 948379 // OverlappingFileLockException
      end
      comment "@(#)OverlappingFileLockException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 719515 "Pipe"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.channels.spi.*;
${definition}"
      associated_classes
	class_ref 948507 // Pipe
      end
      comment "@(#)Pipe.java	1.20 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 719643 "SelectionKey"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 236827 // SelectionKey
      end
      comment "@(#)SelectionKey.java	1.24 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 719771 "Selector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.channels.spi.SelectorProvider;
import java.util.Set;
${definition}"
      associated_classes
	class_ref 303387 // Selector
      end
      comment "@(#)Selector.java	1.37 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 719899 "ServerSocketChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.net.ServerSocket;
import java.net.SocketAddress;
import java.nio.channels.spi.*;
${definition}"
      associated_classes
	class_ref 237979 // ServerSocketChannel
      end
      comment "@(#)ServerSocketChannel.java	1.24 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 720027 "SocketChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.net.Socket;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.spi.*;
${definition}"
      associated_classes
	class_ref 238747 // SocketChannel
      end
      comment "@(#)SocketChannel.java	1.33 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 720155 "UnresolvedAddressException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 948891 // UnresolvedAddressException
      end
      comment "@(#)UnresolvedAddressException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 720283 "UnsupportedAddressTypeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 949019 // UnsupportedAddressTypeException
      end
      comment "@(#)UnsupportedAddressTypeException.java	1.9 01/11/19

Copyright 2000 by Sun Microsystems, Inc.  All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.  
Use is subject to license terms.

 -- This file was mechanically generated: Do not edit! -- //"
    end
  end

  package_ref 180763 // spi
end
