class TextAccessibleContext
!!!9900827.java!!!	TextAccessibleContext(inout elementInfo : ElementInfo)
		super(elementInfo);
!!!9900955.java!!!	getAccessibleText() : AccessibleText
		return this;
!!!9901083.java!!!	getAccessibleName() : String
		if (model != null) {
		    return (String)model.getProperty(Document.TitleProperty);
		} else {
		    return null;
		}
!!!9901211.java!!!	getAccessibleDescription() : String
		return editor.getContentType();
!!!9901339.java!!!	getAccessibleRole() : AccessibleRole
		return AccessibleRole.TEXT;
!!!9901467.java!!!	getIndexAtPoint(inout p : Point) : int
		View v = getView();
		if (v != null) {
		    return v.viewToModel(p.x, p.y, getBounds());
		} else {
		    return -1;
		}
!!!9901595.java!!!	getCharacterBounds(in i : int) : Rectangle
		try {
		    return editor.getUI().modelToView(editor, i);
		} catch (BadLocationException e) {
		    return null;
		}
!!!9901723.java!!!	getCharCount() : int
		if (validateIfNecessary()) {
		    Element elem = elementInfo.getElement();
		    return elem.getEndOffset() - elem.getStartOffset();
		}
		return 0;
!!!9901851.java!!!	getCaretPosition() : int
		View v = getView();
		if (v == null) {
		    return -1;
		}
		Container c = v.getContainer();
		if (c == null) {
		    return -1;
		}
		if (c instanceof JTextComponent) {
		    return ((JTextComponent)c).getCaretPosition();
		} else {
		    return -1;
		}
!!!9901979.java!!!	getAtIndex(in part : int, in index : int) : String
		return getAtIndex(part, index, 0);
!!!9902107.java!!!	getAfterIndex(in part : int, in index : int) : String
		return getAtIndex(part, index, 1);
!!!9902235.java!!!	getBeforeIndex(in part : int, in index : int) : String
		return getAtIndex(part, index, -1);
!!!9902363.java!!!	getAtIndex(in part : int, in index : int, in direction : int) : String
		if (model instanceof AbstractDocument) {
		    ((AbstractDocument)model).readLock();
		}
		try {
		    if (index < 0 || index >= model.getLength()) {
			return null;
		    }
		    switch (part) {
		    case AccessibleText.CHARACTER:
			if (index + direction < model.getLength() &&
			    index + direction >= 0) {
			    return model.getText(index + direction, 1);
			}
			break;
			
			
		    case AccessibleText.WORD:
		    case AccessibleText.SENTENCE:
			IndexedSegment seg = getSegmentAt(part, index);
			if (seg != null) {
			    if (direction != 0) {
				int next;
				
				
				if (direction < 0) {
				    next = seg.modelOffset - 1;
				}
				else {
				    next = seg.modelOffset + direction * seg.count;
				}
				if (next >= 0 && next <= model.getLength()) {
				    seg = getSegmentAt(part, next);
				}
				else {
				    seg = null;
				}
			    }
			    if (seg != null) {
				return new String(seg.array, seg.offset,
                                                  seg.count);
			    }
			}
			break;
			
		    default:
			break;
		    }
		} catch (BadLocationException e) {
		} finally {
		    if (model instanceof AbstractDocument) {
			((AbstractDocument)model).readUnlock();
		    }
		}
		return null;
!!!9902491.java!!!	getParagraphElement(in index : int) : Element
		if (model instanceof PlainDocument ) {
		    PlainDocument sdoc = (PlainDocument)model;
		    return sdoc.getParagraphElement(index);
		} else if (model instanceof StyledDocument) {
		    StyledDocument sdoc = (StyledDocument)model;
		    return sdoc.getParagraphElement(index);
		} else {
		    Element para = null;
		    for (para = model.getDefaultRootElement(); ! para.isLeaf(); ) {
			int pos = para.getElementIndex(index);
			para = para.getElement(pos);
		    }
		    if (para == null) {
			return null;
		    }
		    return para.getParentElement();
		}
!!!9902619.java!!!	getParagraphElementText(in index : int) : IndexedSegment
		Element para = getParagraphElement(index);
		
		
		if (para != null) {
		    IndexedSegment segment = new IndexedSegment();
		    try {
			int length = para.getEndOffset() - para.getStartOffset();
			model.getText(para.getStartOffset(), length, segment);
		    } catch (BadLocationException e) {
			return null;
		    }
		    segment.modelOffset = para.getStartOffset();
		    return segment;
		}
		return null;
!!!9902747.java!!!	getSegmentAt(in part : int, in index : int) : IndexedSegment

		IndexedSegment seg = getParagraphElementText(index);
		if (seg == null) {
		    return null;
		}
		BreakIterator iterator;
		switch (part) {
		case AccessibleText.WORD:
		    iterator = BreakIterator.getWordInstance(getLocale());
		    break;
		case AccessibleText.SENTENCE:
		    iterator = BreakIterator.getSentenceInstance(getLocale());
		    break;
		default:
		    return null;
		}
		seg.first();
		iterator.setText(seg);
		int end = iterator.following(index - seg.modelOffset + seg.offset);
		if (end == BreakIterator.DONE) {
		    return null;
		}
		if (end > seg.offset + seg.count) {
		    return null;
		}
		int begin = iterator.previous();
		if (begin == BreakIterator.DONE ||
		    begin >= seg.offset + seg.count) {
		    return null;
		}
		seg.modelOffset = seg.modelOffset + begin - seg.offset;
		seg.offset = begin;
		seg.count = end - begin;
		return seg;
!!!9902875.java!!!	getCharacterAttribute(in i : int) : AttributeSet
		if (model instanceof StyledDocument) {
		    StyledDocument doc = (StyledDocument)model;
		    Element elem = doc.getCharacterElement(i);
		    if (elem != null) {
			return elem.getAttributes();
		    }
		}
		return null;
!!!9903003.java!!!	getSelectionStart() : int
		return editor.getSelectionStart();
!!!9903131.java!!!	getSelectionEnd() : int
		return editor.getSelectionEnd();
!!!9903259.java!!!	getSelectedText() : String
		return editor.getSelectedText();
!!!9903387.java!!!	getText(in offset : int, in length : int) : String
		
		if (model != null && model instanceof StyledDocument) {
		    StyledDocument doc = (StyledDocument)model;
		    return model.getText(offset, length);
		} else {
		    return null;
		}
