class non_terminal
!!!3087643.java!!!	non_terminal(in nm : String, in tp : String)
      /* super class does most of the work */
      super(nm, tp);

      /* add to set of all non terminals and check for duplicates */
      Object conflict = _all.put(nm,this);
      if (conflict != null)
	// can't throw an exception here because these are used in static
	// initializers, so we crash instead
	// was: 
	// throw new internal_error("Duplicate non-terminal ("+nm+") created");
	(new internal_error("Duplicate non-terminal ("+nm+") created")).crash();

      /* assign a unique index */
      _index = next_index++;

      /* add to by_index set */
      _all_by_index.put(new Integer(_index), this);
!!!3087771.java!!!	non_terminal(in nm : String)
      this(nm, null);
!!!3087899.java!!!	all() : Enumeration
return _all.elements();
!!!3088027.java!!!	find(in with_name : String) : non_terminal
      if (with_name == null)
        return null;
      else 
        return (non_terminal)_all.get(with_name);
!!!3088155.java!!!	find(in indx : int) : non_terminal
      Integer the_indx = new Integer(indx);

      return (non_terminal)_all_by_index.get(the_indx);
!!!3088283.java!!!	number() : int
return _all.size();
!!!3088411.java!!!	create_new(in prefix : String) : non_terminal
      if (prefix == null) prefix = "NT$";
      return new non_terminal(prefix + next_nt++);
!!!3088539.java!!!	create_new() : non_terminal
 
      return create_new(null); 
!!!3088667.java!!!	compute_nullability() : void
      boolean      change = true;
      non_terminal nt;
      Enumeration  e;
      production   prod;

      /* repeat this process until there is no change */
      while (change)
	{
	  /* look for a new change */
	  change = false;

	  /* consider each non-terminal */
	  for (e=all(); e.hasMoreElements(); )
	    {
	      nt = (non_terminal)e.nextElement();

	      /* only look at things that aren't already marked nullable */
	      if (!nt.nullable())
		{
		  if (nt.looks_nullable())
		    {
		      nt._nullable = true;
		      change = true;
		    }
		}
	    }
	}
      
      /* do one last pass over the productions to finalize all of them */
      for (e=production.all(); e.hasMoreElements(); )
	{
	  prod = (production)e.nextElement();
	  prod.set_nullable(prod.check_nullable());
	}
!!!3088795.java!!!	compute_first_sets() : void
      boolean      change = true;
      Enumeration  n;
      Enumeration  p;
      non_terminal nt;
      production   prod;
      terminal_set prod_first;

      /* repeat this process until we have no change */
      while (change)
	{
	  /* look for a new change */
	  change = false;

	  /* consider each non-terminal */
	  for (n = all(); n.hasMoreElements(); )
	    {
	      nt = (non_terminal)n.nextElement();

	      /* consider every production of that non terminal */
	      for (p = nt.productions(); p.hasMoreElements(); )
		{
		  prod = (production)p.nextElement();

		  /* get the updated first of that production */
		  prod_first = prod.check_first_set();

		  /* if this going to add anything, add it */
		  if (!prod_first.is_subset_of(nt._first_set))
		    {
		      change = true;
		      nt._first_set.add(prod_first);
		    }
		}
	    }
	}
!!!3088923.java!!!	productions() : Enumeration
return _productions.elements();
!!!3089051.java!!!	num_productions() : int
return _productions.size();
!!!3089179.java!!!	add_production(inout prod : production) : void
      /* catch improper productions */
      if (prod == null || prod.lhs() == null || prod.lhs().the_symbol() != this)
	throw new internal_error(
	  "Attempt to add invalid production to non terminal production table");

      /* add it to the table, keyed with itself */
      _productions.put(prod,prod);
!!!3089307.java!!!	nullable() : boolean
return _nullable;
!!!3089435.java!!!	first_set() : terminal_set
return _first_set;
!!!3089563.java!!!	is_non_term() : boolean
      return true;
!!!3089691.java!!!	looks_nullable() : boolean
      /* look and see if any of the productions now look nullable */
      for (Enumeration e = productions(); e.hasMoreElements(); )
	/* if the production can go to empty, we are nullable */
	if (((production)e.nextElement()).check_nullable())
	  return true;

      /* none of the productions can go to empty, so we are not nullable */
      return false;
!!!3089819.java!!!	toString() : String
      return super.toString() + "[" + index() + "]" + (nullable() ? "*" : "");
