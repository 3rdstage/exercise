class WrappedLine
!!!9888283.java!!!	WrappedLine(inout elem : Element)
            super(elem);
!!!9888411.java!!!	calculateLineCount() : int
            int nlines = 0;
            int p1 = getEndOffset();
            for (int p0 = getStartOffset(); p0 < p1; ) {
                nlines += 1;
		int p = calculateBreakPosition(p0, p1);
		p0 = (p == p0) ? ++p : p; // this is the fix of #4410243
					   // we check on situation when
					   // width is too small and
					   // break position is calculated
					   // incorrect
            }
            return nlines;
!!!9888539.java!!!	getPreferredSpan(in axis : int) : float
            switch (axis) {
            case View.X_AXIS:
                float width = getWidth();
                if (width == Integer.MAX_VALUE) {
                    // We have been initially set to MAX_VALUE, but we don't
                    // want this as our preferred.
                    return 100f;
                }
                return width;
            case View.Y_AXIS:
		if (nlines == 0 || widthChanging) {
		    nlines = calculateLineCount();
		}
                int h = nlines * metrics.getHeight();
                return h;
            default:
                throw new IllegalArgumentException("Invalid axis: " + axis);
            }
!!!9888667.java!!!	paint(inout g : Graphics, inout a : Shape) : void
            Rectangle alloc = (Rectangle) a;
            int y = alloc.y + metrics.getAscent();
            int x = alloc.x;

	    JTextComponent host = (JTextComponent)getContainer();
	    Highlighter h = host.getHighlighter();
	    LayeredHighlighter dh = (h instanceof LayeredHighlighter) ?
		                     (LayeredHighlighter)h : null;
            int p1 = getEndOffset();
            for (int p0 = getStartOffset(); p0 < p1; ) {
		int p = calculateBreakPosition(p0, p1);
		if (dh != null) {
 		    if (p == p1) {
 			dh.paintLayeredHighlights(g, p0, p - 1, a, host, this);
 		    }
 		    else {
 			dh.paintLayeredHighlights(g, p0, p, a, host, this);
 		    }
		}
                drawLine(p0, p, g, x, y);
                
                p0 = (p == p0) ? p1 : p;
                y += metrics.getHeight();
            }
!!!9888795.java!!!	modelToView(in pos : int, inout a : Shape, inout b : Bias) : Shape
	    Rectangle alloc = a.getBounds();
            alloc.height = metrics.getHeight();
            alloc.width = 1;
            
            int p1 = getEndOffset();
	    int p0 = getStartOffset();
	    int testP = (b == Position.Bias.Forward) ? pos :
		        Math.max(p0, pos - 1);
            while (p0 < p1) {
		int p = calculateBreakPosition(p0, p1);
                if ((pos >= p0) && (testP < p)) {
                    // it's in this line
                    Segment segment = SegmentCache.getSharedSegment();
                    loadText(segment, p0, pos);
                    alloc.x += Utilities.getTabbedTextWidth(segment, metrics, 
                                                            alloc.x, 
                                                            WrappedPlainView.this, p0);
                    SegmentCache.releaseSharedSegment(segment);
                    return alloc;
                }
		if (p == p1 && pos == p1) {
		    // Wants end.
		    if (pos > p0) {
                        Segment segment = SegmentCache.getSharedSegment();
			loadText(segment, p0, pos);
			alloc.x += Utilities.getTabbedTextWidth(segment,
					     metrics, alloc.x, 
					     WrappedPlainView.this, p0);
                        SegmentCache.releaseSharedSegment(segment);
		    }
                    return alloc;
		}
                p0 = (p == p0) ? p1 : p;
                alloc.y += alloc.height;
            }
            throw new BadLocationException(null, pos);
!!!9888923.java!!!	viewToModel(in fx : float, in fy : float, inout a : Shape, inout bias : Bias) : int
	    // PENDING(prinz) implement bias properly
	    bias[0] = Position.Bias.Forward;

	    Rectangle alloc = (Rectangle) a;
	    Document doc = getDocument();
	    int x = (int) fx;
	    int y = (int) fy;
	    if (y < alloc.y) {
		// above the area covered by this icon, so the the position
		// is assumed to be the start of the coverage for this view.
		return getStartOffset();
	    } else if (y > alloc.y + alloc.height) {
		// below the area covered by this icon, so the the position
		// is assumed to be the end of the coverage for this view.
		return getEndOffset() - 1;
	    } else {
		// positioned within the coverage of this view vertically,
		// so we figure out which line the point corresponds to.
		// if the line is greater than the number of lines contained, then
		// simply use the last line as it represents the last possible place
		// we can position to.
		alloc.height = metrics.getHeight();
		int p1 = getEndOffset();
		for (int p0 = getStartOffset(); p0 < p1; ) {
		    int p = calculateBreakPosition(p0, p1);
		    if ((y >= alloc.y) && (y < (alloc.y + alloc.height))) {
			// it's in this line
			if (x < alloc.x) {
			    // point is to the left of the line
			    return p0;
			} else if (x > alloc.x + alloc.width) {
			    // point is to the right of the line
			    return p - 1;
			} else {
			    // Determine the offset into the text
                            Segment segment = SegmentCache.getSharedSegment();
                            loadText(segment, p0, p1);
			    int n = Utilities.getTabbedTextOffset(segment, metrics, 
								    alloc.x, x, 
								    WrappedPlainView.this, p0);
                            SegmentCache.releaseSharedSegment(segment);
			    return Math.min(p0 + n, p1 - 1);
			}
		    }
		    
		    p0 = (p == p0) ? p1 : p;
		    alloc.y += alloc.height;
		}
		return getEndOffset() - 1;
	    }
!!!9889051.java!!!	insertUpdate(inout e : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
	    int n = calculateLineCount();
	    if (this.nlines != n) {
		this.nlines = n;
		WrappedPlainView.this.preferenceChanged(this, false, true);
		// have to repaint any views after the receiver.
		getContainer().repaint();
	    }
	    else if (a != null) {
                Component c = getContainer();
                Rectangle alloc = (Rectangle) a;
                c.repaint(alloc.x, alloc.y, alloc.width, alloc.height);
            }
!!!9889179.java!!!	removeUpdate(inout e : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
	    int n = calculateLineCount();
	    if (this.nlines != n) {
		// have to repaint any views after the receiver.
		this.nlines = n;
		WrappedPlainView.this.preferenceChanged(this, false, true);
		getContainer().repaint();
	    }
	    else if (a != null) {
                Component c = getContainer();
                Rectangle alloc = (Rectangle) a;
                c.repaint(alloc.x, alloc.y, alloc.width, alloc.height);
            }
