class WindowsComboBoxUI
!!!2935579.java!!!	createUI(inout c : JComponent) : ComponentUI
        return new WindowsComboBoxUI();
!!!2935707.java!!!	installUI(inout c : JComponent) : void
        super.installUI( c );
        isRollover = false;
        comboBox.setRequestFocusEnabled( true );
        if (XPStyle.getXP() != null && arrowButton != null) {
            //we can not do it in installListeners because arrowButton
            //is initialized after installListeners is invoked 
            comboBox.addMouseListener(rolloverListener);
            arrowButton.addMouseListener(rolloverListener);
        }
!!!2935835.java!!!	uninstallUI(inout c : JComponent) : void
        if (XPStyle.getXP() != null) {
            comboBox.removeMouseListener(rolloverListener);
            arrowButton.removeMouseListener(rolloverListener);
        }
        super.uninstallUI( c );
!!!2935963.java!!!	installListeners() : void
   
        super.installListeners();
        XPStyle xp = XPStyle.getXP();
        //button glyph for LTR and RTL combobox might differ
        if (xp != null
              && xp.isSkinDefined(comboBox, Part.CP_DROPDOWNBUTTONRIGHT)) {
            comboBox.addPropertyChangeListener("componentOrientation", 
                                               componentOrientationListener);
        }
!!!2936091.java!!!	uninstallListeners() : void
 
        super.uninstallListeners(); 
        comboBox.removePropertyChangeListener("componentOrientation",
                                              componentOrientationListener);
!!!2936219.java!!!	configureEditor() : void
        super.configureEditor();
        if (XPStyle.getXP() != null) {
            editor.addMouseListener(rolloverListener);
        }
!!!2936347.java!!!	unconfigureEditor() : void
        super.unconfigureEditor();
        if (XPStyle.getXP() != null) {
            editor.removeMouseListener(rolloverListener);
        }
!!!2936475.java!!!	paint(inout g : Graphics, inout c : JComponent) : void
        if (XPStyle.getXP() != null) {
            paintXPComboBoxBackground(g, c);
        }
        super.paint(g, c);
!!!2936603.java!!!	getXPComboBoxState(inout c : JComponent) : State
        State state = State.NORMAL;
        if (!c.isEnabled()) {
            state = State.DISABLED;
        } else if (isPopupVisible(comboBox)) {
            state = State.PRESSED;
        } else if (isRollover) {
            state = State.HOT;
        }
        return state;
!!!2936731.java!!!	paintXPComboBoxBackground(inout g : Graphics, inout c : JComponent) : void
        XPStyle xp = XPStyle.getXP();
        State state = getXPComboBoxState(c);
        Skin skin = null;
        if (! comboBox.isEditable()
              && xp.isSkinDefined(c, Part.CP_READONLY)) {
            skin = xp.getSkin(c, Part.CP_READONLY);
        }
        if (skin == null) {
            skin = xp.getSkin(c, Part.CP_COMBOBOX);
        }
        skin.paintSkin(g, 0, 0, c.getWidth(), c.getHeight(), state);
!!!2936859.java!!!	paintCurrentValue(inout g : Graphics, inout bounds : Rectangle, inout hasFocus : boolean) : void
        XPStyle xp = XPStyle.getXP();
        if (xp != null) {
	    bounds.x += 2;
	    bounds.y += 2;
	    bounds.width -= 3;
	    bounds.height -= 4;
	} else {
	    bounds.x += 1;
	    bounds.y += 1;
	    bounds.width -= 2;
	    bounds.height -= 2;
	}
        if (! comboBox.isEditable()  
            && xp != null 
            && xp.isSkinDefined(comboBox, Part.CP_READONLY)) { 
            // On vista for READNLY ComboBox  
            // color for currentValue is the same as for any other item 
             
            // mostly copied from javax.swing.plaf.basic.BasicComboBoxUI.paintCurrentValue 
            ListCellRenderer renderer = comboBox.getRenderer(); 
            Component c; 
            if ( hasFocus && !isPopupVisible(comboBox) ) { 
                c = renderer.getListCellRendererComponent(  
                        listBox, 
                        comboBox.getSelectedItem(), 
                        -1, 
                        true, 
                        false ); 
            } else { 
                c = renderer.getListCellRendererComponent(  
                        listBox, 
                        comboBox.getSelectedItem(), 
                        -1, 
                        false, 
                        false ); 
            } 
            c.setFont(comboBox.getFont()); 
            if ( comboBox.isEnabled() ) { 
                c.setForeground(comboBox.getForeground()); 
                c.setBackground(comboBox.getBackground()); 
            } else { 
                c.setForeground(DefaultLookup.getColor( 
                         comboBox, this, "ComboBox.disabledForeground", null)); 
                c.setBackground(DefaultLookup.getColor( 
                         comboBox, this, "ComboBox.disabledBackground", null)); 
            } 
            boolean shouldValidate = false; 
            if (c instanceof JPanel)  { 
                shouldValidate = true; 
            } 
            currentValuePane.paintComponent(g, c, comboBox, bounds.x, bounds.y, 
                                   bounds.width, bounds.height, shouldValidate); 
             
        } else { 
            super.paintCurrentValue(g, bounds, hasFocus); 
        } 
!!!2936987.java!!!	paintCurrentValueBackground(inout g : Graphics, inout bounds : Rectangle, inout hasFocus : boolean) : void
 
        if (XPStyle.getXP() == null) { 
            super.paintCurrentValueBackground(g, bounds, hasFocus); 
        } 
!!!2937115.java!!!	getPreferredSize(inout c : JComponent) : Dimension
        Dimension d = super.getPreferredSize(c);
        d.width += 4;
        d.height += 2;
        if (XPStyle.getXP() != null) {
            d.height += 2;
        }
        return d;
!!!2937243.java!!!	createLayoutManager() : LayoutManager
        return new BasicComboBoxUI.ComboBoxLayoutManager() {
	    public void layoutContainer(Container parent) {
		super.layoutContainer(parent);

		if (XPStyle.getXP() != null && arrowButton != null) {
		    Dimension d = parent.getSize();
		    Insets insets = getInsets();
		    int buttonWidth = arrowButton.getPreferredSize().width;
		    arrowButton.setBounds(WindowsUtils.isLeftToRight((JComboBox)parent)
					  ? (d.width - insets.right - buttonWidth)
					  : insets.left,
					  insets.top,
					  buttonWidth, d.height - insets.top - insets.bottom);
		}
	    }
	};
!!!2937371.java!!!	installKeyboardActions() : void
        super.installKeyboardActions();
!!!2937499.java!!!	createPopup() : ComboPopup
        return super.createPopup();
!!!2937627.java!!!	createEditor() : ComboBoxEditor
	return new WindowsComboBoxEditor();
!!!2937755.java!!!	createRenderer() : ListCellRenderer
        XPStyle xp = XPStyle.getXP();
        if (xp != null && xp.isSkinDefined(comboBox, Part.CP_READONLY)) {
            return new WindowsComboBoxRenderer();
        } else {
            return super.createRenderer();
        }
!!!2937883.java!!!	createArrowButton() : JButton
	if (XPStyle.getXP() != null) {
	    return new XPComboBoxButton();
	} else {
	    return super.createArrowButton();
	}
