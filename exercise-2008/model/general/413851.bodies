class AccessibleAbstractButton
!!!2443931.java!!!	getAccessibleName() : String
            if (accessibleName != null) {
                return accessibleName;
            } else {
                if (AbstractButton.this.getText() == null) {
                    return super.getAccessibleName();
                } else {
                    return AbstractButton.this.getText();
                }
            }
!!!2444059.java!!!	getAccessibleIcon() : AccessibleIcon
            Icon defaultIcon = getIcon();

            if (defaultIcon instanceof Accessible) {
                AccessibleContext ac = 
                    ((Accessible)defaultIcon).getAccessibleContext();
                if (ac != null && ac instanceof AccessibleIcon) {
                    return new AccessibleIcon[] { (AccessibleIcon)ac };
                }
            }
            return null;
!!!2444187.java!!!	getAccessibleStateSet() : AccessibleStateSet
        AccessibleStateSet states = super.getAccessibleStateSet();
            if (getModel().isArmed()) {
                states.add(AccessibleState.ARMED);
            }
            if (isFocusOwner()) {
                states.add(AccessibleState.FOCUSED);
            }
            if (getModel().isPressed()) {
                states.add(AccessibleState.PRESSED);
            }
            if (isSelected()) {
                states.add(AccessibleState.CHECKED);
            }
            return states;
!!!2444315.java!!!	getAccessibleRelationSet() : AccessibleRelationSet

	    // Check where the AccessibleContext's relation
	    // set already contains a MEMBER_OF relation.
	    AccessibleRelationSet relationSet 
		= super.getAccessibleRelationSet();

	    if (!relationSet.contains(AccessibleRelation.MEMBER_OF)) {
		// get the members of the button group if one exists
		ButtonModel model = getModel();
		if (model != null && model instanceof DefaultButtonModel) {
		    ButtonGroup group = ((DefaultButtonModel)model).getGroup();
		    if (group != null) {
			// set the target of the MEMBER_OF relation to be
        		// the members of the button group.
			int len = group.getButtonCount();
			Object [] target = new Object[len];
			Enumeration elem = group.getElements();
			for (int i = 0; i < len; i++) {
			    if (elem.hasMoreElements()) {
				target[i] = elem.nextElement();
			    }
			}
			AccessibleRelation relation = 
			    new AccessibleRelation(AccessibleRelation.MEMBER_OF);
			relation.setTarget(target);
			relationSet.add(relation);
		    }
		}
	    }
	    return relationSet;
!!!2444443.java!!!	getAccessibleAction() : AccessibleAction
            return this;
!!!2444571.java!!!	getAccessibleValue() : AccessibleValue
            return this;
!!!2444699.java!!!	getAccessibleActionCount() : int
            return 1;
!!!2444827.java!!!	getAccessibleActionDescription(in i : int) : String
            if (i == 0) {
                return UIManager.getString("AbstractButton.clickText");
            } else {
                return null;
            }
!!!2444955.java!!!	doAccessibleAction(in i : int) : boolean
            if (i == 0) {
                doClick();
                return true;
            } else {
                return false;
            }
!!!2445083.java!!!	getCurrentAccessibleValue() : Number
            if (isSelected()) {
                return new Integer(1);
            } else {
                return new Integer(0);
            }
!!!2445211.java!!!	setCurrentAccessibleValue(inout n : Number) : boolean
	    // TIGER - 4422535 
	    if (n == null) {
		return false;
	    }
	    int i = n.intValue();
	    if (i == 0) {
		setSelected(false);
	    } else {
		setSelected(true);
	    }
	    return true;
!!!2445339.java!!!	getMinimumAccessibleValue() : Number
            return new Integer(0);
!!!2445467.java!!!	getMaximumAccessibleValue() : Number
            return new Integer(1);
!!!2445595.java!!!	getAccessibleText() : AccessibleText
	    View view = (View)AbstractButton.this.getClientProperty("html");
	    if (view != null) {
		return this;
	    } else {
		return null;
	    }
!!!2445723.java!!!	getIndexAtPoint(inout p : Point) : int
	    View view = (View) AbstractButton.this.getClientProperty("html");
	    if (view != null) {
		Rectangle r = getTextRectangle();
		if (r == null) {
		    return -1;
		}
		Rectangle2D.Float shape = 
		    new Rectangle2D.Float(r.x, r.y, r.width, r.height);
		Position.Bias bias[] = new Position.Bias[1];
		return view.viewToModel(p.x, p.y, shape, bias);
	    } else {
		return -1;
	    }
!!!2445851.java!!!	getCharacterBounds(in i : int) : Rectangle
	    View view = (View) AbstractButton.this.getClientProperty("html");
	    if (view != null) {
		Rectangle r = getTextRectangle();
		if (r == null) {
		    return null;
		}
		Rectangle2D.Float shape = 
		    new Rectangle2D.Float(r.x, r.y, r.width, r.height);
		try {
		    Shape charShape = 
			view.modelToView(i, shape, Position.Bias.Forward);
		    return charShape.getBounds();
		} catch (BadLocationException e) {
		    return null;
		}
	    } else {
		return null;
	    }
!!!2445979.java!!!	getCharCount() : int
	    View view = (View) AbstractButton.this.getClientProperty("html");
	    if (view != null) {
		Document d = view.getDocument();
		if (d instanceof StyledDocument) {
		    StyledDocument doc = (StyledDocument)d;
		    return doc.getLength();
		}
	    }
	    return accessibleContext.getAccessibleName().length();
!!!2446107.java!!!	getCaretPosition() : int
	    // There is no caret.
	    return -1;
!!!2446235.java!!!	getAtIndex(in part : int, in index : int) : String
            if (index < 0 || index >= getCharCount()) {
                return null;
            }
            switch (part) {
            case AccessibleText.CHARACTER:
                try {
                    return getText(index, 1);
                } catch (BadLocationException e) {
                    return null;
                }
            case AccessibleText.WORD:
                try {
                    String s = getText(0, getCharCount());
                    BreakIterator words = BreakIterator.getWordInstance(getLocale());
                    words.setText(s);
                    int end = words.following(index);
                    return s.substring(words.previous(), end);
                } catch (BadLocationException e) {
                    return null;
                }
            case AccessibleText.SENTENCE:
                try {
                    String s = getText(0, getCharCount());
                    BreakIterator sentence = 
			BreakIterator.getSentenceInstance(getLocale());
                    sentence.setText(s);
                    int end = sentence.following(index);
                    return s.substring(sentence.previous(), end);
                } catch (BadLocationException e) {
                    return null;
                }
            default:
                return null;
            }
!!!2446363.java!!!	getAfterIndex(in part : int, in index : int) : String
            if (index < 0 || index >= getCharCount()) {
                return null;
            }
            switch (part) {
            case AccessibleText.CHARACTER:
		if (index+1 >= getCharCount()) {
		   return null;
		}
                try {
                    return getText(index+1, 1);
                } catch (BadLocationException e) {
                    return null;
                }
            case AccessibleText.WORD:
                try {
                    String s = getText(0, getCharCount());
                    BreakIterator words = BreakIterator.getWordInstance(getLocale());
                    words.setText(s);
                    int start = words.following(index);
		    if (start == BreakIterator.DONE || start >= s.length()) {
			return null;
		    }
		    int end = words.following(start);
		    if (end == BreakIterator.DONE || end >= s.length()) {
			return null;
		    }
                    return s.substring(start, end);
                } catch (BadLocationException e) {
                    return null;
                }
            case AccessibleText.SENTENCE:
                try {
                    String s = getText(0, getCharCount());
                    BreakIterator sentence = 
			BreakIterator.getSentenceInstance(getLocale());
                    sentence.setText(s);
                    int start = sentence.following(index);
		    if (start == BreakIterator.DONE || start >= s.length()) {
			return null;
		    }
		    int end = sentence.following(start);
		    if (end == BreakIterator.DONE || end >= s.length()) {
			return null;
		    }
                    return s.substring(start, end);
                } catch (BadLocationException e) {
                    return null;
                }
            default:
                return null;
            }
!!!2446491.java!!!	getBeforeIndex(in part : int, in index : int) : String
            if (index < 0 || index > getCharCount()-1) {
                return null;
            }
            switch (part) {
            case AccessibleText.CHARACTER:
		if (index == 0) {
		    return null;
		}
                try {
                    return getText(index-1, 1);
                } catch (BadLocationException e) {
                    return null;
                }
            case AccessibleText.WORD:
                try {
                    String s = getText(0, getCharCount());
                    BreakIterator words = BreakIterator.getWordInstance(getLocale());
                    words.setText(s);
                    int end = words.following(index);
                    end = words.previous();
		    int start = words.previous();
		    if (start == BreakIterator.DONE) {
			return null;
		    }
                    return s.substring(start, end);
                } catch (BadLocationException e) {
                    return null;
                }
            case AccessibleText.SENTENCE:
                try {
                    String s = getText(0, getCharCount());
                    BreakIterator sentence = 
			BreakIterator.getSentenceInstance(getLocale());
                    sentence.setText(s);
                    int end = sentence.following(index);
                    end = sentence.previous();
		    int start = sentence.previous();
		    if (start == BreakIterator.DONE) {
			return null;
		    }
                    return s.substring(start, end);
                } catch (BadLocationException e) {
                    return null;
                }
            default:
                return null;
            }
!!!2446619.java!!!	getCharacterAttribute(in i : int) : AttributeSet
	    View view = (View) AbstractButton.this.getClientProperty("html");
	    if (view != null) {
		Document d = view.getDocument();
		if (d instanceof StyledDocument) {
		    StyledDocument doc = (StyledDocument)d;
		    Element elem = doc.getCharacterElement(i);
		    if (elem != null) {
			return elem.getAttributes();
		    }
		}
	    }
	    return null;
!!!2446747.java!!!	getSelectionStart() : int
	    // Text cannot be selected.
	    return -1;
!!!2446875.java!!!	getSelectionEnd() : int
	    // Text cannot be selected.
	    return -1;
!!!2447003.java!!!	getSelectedText() : String
	    // Text cannot be selected.
	    return null;
!!!2447131.java!!!	getText(in offset : int, in length : int) : String

	    View view = (View) AbstractButton.this.getClientProperty("html");
	    if (view != null) {
		Document d = view.getDocument();
		if (d instanceof StyledDocument) {
		    StyledDocument doc = (StyledDocument)d;
		    return doc.getText(offset, length);
		}
	    }
	    return null;
!!!2447259.java!!!	getTextRectangle() : Rectangle
	    
	    String text = AbstractButton.this.getText();
	    Icon icon = (AbstractButton.this.isEnabled()) ? AbstractButton.this.getIcon() : AbstractButton.this.getDisabledIcon();
	    
	    if ((icon == null) && (text == null)) {
		return null;
	    }

	    Rectangle paintIconR = new Rectangle();
	    Rectangle paintTextR = new Rectangle();
	    Rectangle paintViewR = new Rectangle();
	    Insets paintViewInsets = new Insets(0, 0, 0, 0);

	    paintViewInsets = AbstractButton.this.getInsets(paintViewInsets);
	    paintViewR.x = paintViewInsets.left;
	    paintViewR.y = paintViewInsets.top;
	    paintViewR.width = AbstractButton.this.getWidth() - (paintViewInsets.left + paintViewInsets.right);
	    paintViewR.height = AbstractButton.this.getHeight() - (paintViewInsets.top + paintViewInsets.bottom);
	    
	    Graphics g = AbstractButton.this.getGraphics();
	    if (g == null) {
		return null;
	    }
	    String clippedText = SwingUtilities.layoutCompoundLabel(
	        (JComponent)AbstractButton.this,
		g.getFontMetrics(),
		text,
		icon,
		AbstractButton.this.getVerticalAlignment(),
		AbstractButton.this.getHorizontalAlignment(),
		AbstractButton.this.getVerticalTextPosition(),
		AbstractButton.this.getHorizontalTextPosition(),
		paintViewR,
		paintIconR,
		paintTextR,
		0);

	    return paintTextR;
!!!2447387.java!!!	getAccessibleExtendedComponent() : AccessibleExtendedComponent
	    return this;
!!!2447515.java!!!	getToolTipText() : String
	    return AbstractButton.this.getToolTipText();
!!!2447643.java!!!	getTitledBorderText() : String
	    return super.getTitledBorderText();
!!!2447771.java!!!	getAccessibleKeyBinding() : AccessibleKeyBinding
	    int mnemonic = AbstractButton.this.getMnemonic();
	    if (mnemonic == 0) {
		return null;
	    }
	    return new ButtonKeyBinding(mnemonic);
