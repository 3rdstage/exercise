class GenericEditor
!!!9134363.java!!!	GenericEditor()
            super(new JTextField());
            getComponent().setName("Table.editor");
!!!9134491.java!!!	stopCellEditing() : boolean
	    String s = (String)super.getCellEditorValue();
	    // Here we are dealing with the case where a user
	    // has deleted the string value in a cell, possibly
	    // after a failed validation. Return null, so that
	    // they have the option to replace the value with
	    // null or use escape to restore the original.
	    // For Strings, return "" for backward compatibility.
	    if ("".equals(s)) {
		if (constructor.getDeclaringClass() == String.class) {
		    value = s;
		}
		super.stopCellEditing();
	    }

	    try {
		value = constructor.newInstance(new Object[]{s});
	    }
	    catch (Exception e) {
		((JComponent)getComponent()).setBorder(new LineBorder(Color.red));
		return false;
	    }
	    return super.stopCellEditing();
!!!9134619.java!!!	getTableCellEditorComponent(inout table : JTable, inout value : Object, inout isSelected : boolean, in row : int, in column : int) : Component
	    this.value = null;
            ((JComponent)getComponent()).setBorder(new LineBorder(Color.black));
	    try {
		Class type = table.getColumnClass(column);
		// Since our obligation is to produce a value which is
		// assignable for the required type it is OK to use the
		// String constructor for columns which are declared
		// to contain Objects. A String is an Object.
		if (type == Object.class) {
		    type = String.class;
		}
		constructor = type.getConstructor(argTypes);
	    }
	    catch (Exception e) {
		return null;
	    }
	    return super.getTableCellEditorComponent(table, value, isSelected, row, column);
!!!9134747.java!!!	getCellEditorValue() : Object
	    return value;
