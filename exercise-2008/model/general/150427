format 66
"event" // src::javax::imageio::event
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "javax/imageio/event"
  java_package "javax.imageio.event"
  classview 149147 "event"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 341275 "IIOReadWarningListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface used by <code>ImageReader</code> implementations to
notify callers of their image and thumbnail reading methods of
warnings (non-fatal errors).  Fatal errors cause the relevant
read method to throw an <code>IIOException</code>.

<p> Localization is handled by associating a <code>Locale</code>
with each <code>IIOReadWarningListener</code> as it is registered
with an <code>ImageReader</code>.  It is up to the
<code>ImageReader</code> to provide localized messages.

@see javax.imageio.ImageReader#addIIOReadWarningListener
@see javax.imageio.ImageReader#removeIIOReadWarningListener

@version 0.5"
      classrelation 2012059 // <generalisation>
	relation 2012059 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2012059 // <generalisation>
	  b parent class_ref 147099 // EventListener
      end

      operation 8186011 "warningOccurred"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 341019 // ImageReader
	  param in name "warning" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports the occurence of a non-fatal error in decoding.  Decoding
will continue following the call to this method.  The application
may choose to display a dialog, print the warning to the console,
ignore the warning, or take any other action it chooses.

@param source the <code>ImageReader</code> object calling this method.
@param warning a <code>String</code> containing the warning."
      end
    end

    class 341403 "IIOReadProgressListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface used by <code>ImageReader</code> implementations to
notify callers of their image and thumbnail reading methods of
progress.

<p> This interface receives general indications of decoding
progress (via the <code>imageProgress</code> and
<code>thumbnailProgress</code> methods), and events indicating when
an entire image has been updated (via the
<code>imageStarted</code>, <code>imageComplete</code>,
<code>thumbnailStarted</code> and <code>thumbnailComplete</code>
methods).  Applications that wish to be informed of pixel updates
as they happen (for example, during progressive decoding), should
provide an <code>IIOReadUpdateListener</code>.

@see IIOReadUpdateListener
@see javax.imageio.ImageReader#addIIOReadProgressListener
@see javax.imageio.ImageReader#removeIIOReadProgressListener

@version 0.5"
      classrelation 496411 // <generalisation>
	relation 496411 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 496411 // <generalisation>
	  b parent class_ref 147099 // EventListener
      end

      operation 1905307 "sequenceStarted"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 341019 // ImageReader
	  param in name "minIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a sequence of read operations is beginning.
<code>ImageReader</code> implementations are required to call
this method exactly once from their
<code>readAll(Iterator)</code> method.

@param source the <code>ImageReader</code> object calling this method.
@param minIndex the index of the first image to be read."
      end

      operation 1905435 "sequenceComplete"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 341019 // ImageReader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a sequence of read operationshas completed.
<code>ImageReader</code> implementations are required to call
this method exactly once from their
<code>readAll(Iterator)</code> method.

@param source the <code>ImageReader</code> object calling this method."
      end

      operation 1905563 "imageStarted"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 341019 // ImageReader
	  param in name "imageIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that an image read operation is beginning.  All
<code>ImageReader</code> implementations are required to call
this method exactly once when beginning an image read
operation.

@param source the <code>ImageReader</code> object calling this method.
@param imageIndex the index of the image being read within its
containing input file or stream."
      end

      operation 1905691 "imageProgress"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 341019 // ImageReader
	  param in name "percentageDone" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports the approximate degree of completion of the current
<code>read</code> call of the associated
<code>ImageReader</code>.

<p> The degree of completion is expressed as a percentage
varying from <code>0.0F</code> to <code>100.0F</code>.  The
percentage should ideally be calculated in terms of the
remaining time to completion, but it is usually more practical
to use a more well-defined metric such as pixels decoded or
portion of input stream consumed.  In any case, a sequence of
calls to this method during a given read operation should
supply a monotonically increasing sequence of percentage
values.  It is not necessary to supply the exact values
<code>0</code> and <code>100</code>, as these may be inferred
by the callee from other methods.

<p> Each particular <code>ImageReader</code> implementation may
call this method at whatever frequency it desires.  A rule of
thumb is to call it around each 5 percent mark.

@param source the <code>ImageReader</code> object calling this method.
@param percentageDone the approximate percentage of decoding that
has been completed."
      end

      operation 1905819 "imageComplete"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 341019 // ImageReader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that the current image read operation has completed.
All <code>ImageReader</code> implementations are required to
call this method exactly once upon completion of each image
read operation.

@param source the <code>ImageReader</code> object calling this
method."
      end

      operation 1905947 "thumbnailStarted"
	public explicit_return_type "void"
	nparams 3
	  param inout name "source" type class_ref 341019 // ImageReader
	  param in name "imageIndex" explicit_type "int"
	  param in name "thumbnailIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a thumbnail read operation is beginning.  All
<code>ImageReader</code> implementations are required to call
this method exactly once when beginning a thumbnail read
operation.

@param source the <code>ImageReader</code> object calling this method.
@param imageIndex the index of the image being read within its
containing input file or stream.
@param thumbnailIndex the index of the thumbnail being read."
      end

      operation 1906075 "thumbnailProgress"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 341019 // ImageReader
	  param in name "percentageDone" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports the approximate degree of completion of the current
<code>getThumbnail</code> call within the associated
<code>ImageReader</code>.  The semantics are identical to those
of <code>imageProgress</code>.

@param source the <code>ImageReader</code> object calling this method.
@param percentageDone the approximate percentage of decoding that
has been completed."
      end

      operation 1906203 "thumbnailComplete"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 341019 // ImageReader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a thumbnail read operation has completed.  All
<code>ImageReader</code> implementations are required to call
this method exactly once upon completion of each thumbnail read
operation.

@param source the <code>ImageReader</code> object calling this
method."
      end

      operation 1906331 "readAborted"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 341019 // ImageReader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a read has been aborted via the reader's
<code>abort</code> method.  No further notifications will be
given.

@param source the <code>ImageReader</code> object calling this
method."
      end
    end

    class 341531 "IIOReadUpdateListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface used by <code>ImageReader</code> implementations to
notify callers of their image and thumbnail reading methods of
pixel updates.

@see javax.imageio.ImageReader#addIIOReadUpdateListener
@see javax.imageio.ImageReader#removeIIOReadUpdateListener

@version 0.5"
      classrelation 2011931 // <generalisation>
	relation 2011931 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2011931 // <generalisation>
	  b parent class_ref 147099 // EventListener
      end

      operation 8185243 "passStarted"
	public explicit_return_type "void"
	nparams 10
	  param inout name "source" type class_ref 341019 // ImageReader
	  param inout name "theImage" type class_ref 339611 // BufferedImage
	  param in name "pass" explicit_type "int"
	  param in name "minPass" explicit_type "int"
	  param in name "maxPass" explicit_type "int"
	  param in name "minX" explicit_type "int"
	  param in name "minY" explicit_type "int"
	  param in name "periodX" explicit_type "int"
	  param in name "periodY" explicit_type "int"
	  param in name "bands" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9}[] ${p9}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that the current read operation is about to begin a
progressive pass.  Readers of formats that support progressive
encoding should use this to notify clients when each pass is
completed when reading a progressively encoded image.

<p> An estimate of the area that will be updated by the pass is
indicated by the <code>minX</code>, <code>minY</code>,
<code>width</code>, and <code>height</code> parameters.  If the
pass is interlaced, that is, it only updates selected rows or
columns, the <code>periodX</code> and <code>periodY</code>
parameters will indicate the degree of subsampling.  The set of
bands that may be affected is indicated by the value of
<code>bands</code>.

@param source the <code>ImageReader</code> object calling this
method.
@param theImage the <code>BufferedImage</code> being updated.
@param pass the numer of the pass that is about to begin,
starting with 0.
@param minPass the index of the first pass that will be decoded.
@param maxPass the index of the last pass that will be decoded.
@param minX the X coordinate of the leftmost updated column
of pixels.
@param minY the Y coordinate of the uppermost updated row
of pixels.
@param periodX the horizontal spacing between updated pixels;
a value of 1 means no gaps.
@param periodY the vertical spacing between updated pixels;
a value of 1 means no gaps.
@param bands an array of <code>int</code>s indicating the the
set bands that may be updated."
      end

      operation 8185371 "imageUpdate"
	public explicit_return_type "void"
	nparams 9
	  param inout name "source" type class_ref 341019 // ImageReader
	  param inout name "theImage" type class_ref 339611 // BufferedImage
	  param in name "minX" explicit_type "int"
	  param in name "minY" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "periodX" explicit_type "int"
	  param in name "periodY" explicit_type "int"
	  param in name "bands" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8}[] ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a given region of the image has been updated.
The application might choose to redisplay the specified area,
for example, in order to provide a progressive display effect,
or perform other incremental processing.

<p> Note that different image format readers may produce
decoded pixels in a variety of different orders.  Many readers
will produce pixels in a simple top-to-bottom,
left-to-right-order, but others may use multiple passes of
interlacing, tiling, etc.  The sequence of updates may even
differ from call to call depending on network speeds, for
example.  A call to this method does not guarantee that all the
specified pixels have actually been updated, only that some
activity has taken place within some subregion of the one
specified.

<p> The particular <code>ImageReader</code> implementation may
choose how often to provide updates.  Each update specifies
that a given region of the image has been updated since the
last update.  A region is described by its spatial bounding box
(<code>minX</code>, <code>minY</code>, <code>width</code>, and
<code>height</code>); X and Y subsampling factors
(<code>periodX</code> and <code>periodY</code>); and a set of
updated bands (<code>bands</code>).  For example, the update:

<pre>
minX = 10
minY = 20
width = 3
height = 4
periodX = 2
periodY = 3
bands = { 1, 3 }
</pre>

would indicate that bands 1 and 3 of the following pixels were
updated:

<pre>
(10, 20) (12, 20) (14, 20)
(10, 23) (12, 23) (14, 23)
(10, 26) (12, 26) (14, 26)
(10, 29) (12, 29) (14, 29)
</pre>

@param source the <code>ImageReader</code> object calling this method.
@param theImage the <code>BufferedImage</code> being updated.
@param minX the X coordinate of the leftmost updated column
of pixels.
@param minY the Y coordinate of the uppermost updated row
of pixels.
@param width the number of updated pixels horizontally.
@param height the number of updated pixels vertically.
@param periodX the horizontal spacing between updated pixels;
a value of 1 means no gaps.
@param periodY the vertical spacing between updated pixels;
a value of 1 means no gaps.
@param bands an array of <code>int</code>s indicating which
bands are being updated."
      end

      operation 8185499 "passComplete"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 341019 // ImageReader
	  param inout name "theImage" type class_ref 339611 // BufferedImage
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that the current read operation has completed a
progressive pass.  Readers of formats that support
progressive encoding should use this to notify clients when
each pass is completed when reading a progressively
encoded image.

@param source the <code>ImageReader</code> object calling this
method.
@param theImage the <code>BufferedImage</code> being updated.

@see javax.imageio.ImageReadParam#setSourceProgressivePasses(int, int)"
      end

      operation 8185627 "thumbnailPassStarted"
	public explicit_return_type "void"
	nparams 10
	  param inout name "source" type class_ref 341019 // ImageReader
	  param inout name "theThumbnail" type class_ref 339611 // BufferedImage
	  param in name "pass" explicit_type "int"
	  param in name "minPass" explicit_type "int"
	  param in name "maxPass" explicit_type "int"
	  param in name "minX" explicit_type "int"
	  param in name "minY" explicit_type "int"
	  param in name "periodX" explicit_type "int"
	  param in name "periodY" explicit_type "int"
	  param in name "bands" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9}[] ${p9}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that the current thumbnail read operation is about to
begin a progressive pass.  Readers of formats that support
progressive encoding should use this to notify clients when
each pass is completed when reading a progressively encoded
thumbnail image.

@param source the <code>ImageReader</code> object calling this
method.
@param theThumbnail the <code>BufferedImage</code> thumbnail
being updated.
@param pass the numer of the pass that is about to begin,
starting with 0.
@param minPass the index of the first pass that will be decoded.
@param maxPass the index of the last pass that will be decoded.
@param minX the X coordinate of the leftmost updated column
of pixels.
@param minY the Y coordinate of the uppermost updated row
of pixels.
@param periodX the horizontal spacing between updated pixels;
a value of 1 means no gaps.
@param periodY the vertical spacing between updated pixels;
a value of 1 means no gaps.
@param bands an array of <code>int</code>s indicating the the
set bands that may be updated.

@see #passStarted"
      end

      operation 8185755 "thumbnailUpdate"
	public explicit_return_type "void"
	nparams 9
	  param inout name "source" type class_ref 341019 // ImageReader
	  param inout name "theThumbnail" type class_ref 339611 // BufferedImage
	  param in name "minX" explicit_type "int"
	  param in name "minY" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "periodX" explicit_type "int"
	  param in name "periodY" explicit_type "int"
	  param in name "bands" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8}[] ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a given region of a thumbnail image has been updated.
The application might choose to redisplay the specified area,
for example, in order to provide a progressive display effect,
or perform other incremental processing.

@param source the <code>ImageReader</code> object calling this method.
@param theThumbnail the <code>BufferedImage</code> thumbnail
being updated.
@param minX the X coordinate of the leftmost updated column
of pixels.
@param minY the Y coordinate of the uppermost updated row
of pixels.
@param width the number of updated pixels horizontally.
@param height the number of updated pixels vertically.
@param periodX the horizontal spacing between updated pixels;
a value of 1 means no gaps.
@param periodY the vertical spacing between updated pixels;
a value of 1 means no gaps.
@param bands an array of <code>int</code>s indicating which
bands are being updated.

@see #imageUpdate"
      end

      operation 8185883 "thumbnailPassComplete"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 341019 // ImageReader
	  param inout name "theThumbnail" type class_ref 339611 // BufferedImage
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that the current thumbnail read operation has completed
a progressive pass.  Readers of formats that support
progressive encoding should use this to notify clients when
each pass is completed when reading a progressively encoded
thumbnail image.

@param source the <code>ImageReader</code> object calling this
method.
@param theThumbnail the <code>BufferedImage</code> thumbnail
being updated.

@see #passComplete"
      end
    end

    class 344475 "IIOWriteWarningListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface used by <code>ImageWriter</code> implementations to
notify callers of their image and thumbnail reading methods of
warnings (non-fatal errors).  Fatal errors cause the relevant
read method to throw an <code>IIOException</code>.

<p> Localization is handled by associating a <code>Locale</code>
with each <code>IIOWriteWarningListener</code> as it is registered
with an <code>ImageWriter</code>.  It is up to the
<code>ImageWriter</code> to provide localized messages.

@see javax.imageio.ImageWriter#addIIOWriteWarningListener
@see javax.imageio.ImageWriter#removeIIOWriteWarningListener

@version 0.5"
      classrelation 2012187 // <generalisation>
	relation 2012187 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2012187 // <generalisation>
	  b parent class_ref 147099 // EventListener
      end

      operation 8186139 "warningOccurred"
	public explicit_return_type "void"
	nparams 3
	  param inout name "source" type class_ref 343963 // ImageWriter
	  param in name "imageIndex" explicit_type "int"
	  param in name "warning" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports the occurence of a non-fatal error in encoding.  Encoding
will continue following the call to this method.  The application
may choose to display a dialog, print the warning to the console,
ignore the warning, or take any other action it chooses.

@param source the <code>ImageWriter</code> object calling this method.
@param imageIndex the index, starting with 0, of the image
generating the warning.
@param warning a <code>String</code> containing the warning."
      end
    end

    class 344603 "IIOWriteProgressListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface used by <code>ImageWriter</code> implementations to notify
callers of their image writing methods of progress.

@see javax.imageio.ImageWriter#write

@version 0.5"
      classrelation 498971 // <generalisation>
	relation 498971 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 498971 // <generalisation>
	  b parent class_ref 147099 // EventListener
      end

      operation 1923227 "imageStarted"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 343963 // ImageWriter
	  param in name "imageIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that an image write operation is beginning.  All
<code>ImageWriter</code> implementations are required to call
this method exactly once when beginning an image write
operation.

@param source the <code>ImageWriter</code> object calling this
method.
@param imageIndex the index of the image being written within
its containing input file or stream."
      end

      operation 1923355 "imageProgress"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 343963 // ImageWriter
	  param in name "percentageDone" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports the approximate degree of completion of the current
<code>write</code> call within the associated
<code>ImageWriter</code>.

<p> The degree of completion is expressed as an index
indicating which image is being written, and a percentage
varying from <code>0.0F</code> to <code>100.0F</code>
indicating how much of the current image has been output.  The
percentage should ideally be calculated in terms of the
remaining time to completion, but it is usually more practical
to use a more well-defined metric such as pixels decoded or
portion of input stream consumed.  In any case, a sequence of
calls to this method during a given read operation should
supply a monotonically increasing sequence of percentage
values.  It is not necessary to supply the exact values
<code>0</code> and <code>100</code>, as these may be inferred
by the callee from other methods.

<p> Each particular <code>ImageWriter</code> implementation may
call this method at whatever frequency it desires.  A rule of
thumb is to call it around each 5 percent mark.

@param source the <code>ImageWriter</code> object calling this method.
@param percentageDone the approximate percentage of decoding that
has been completed."
      end

      operation 1923483 "imageComplete"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 343963 // ImageWriter
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that the image write operation has completed.  All
<code>ImageWriter</code> implementations are required to call
this method exactly once upon completion of each image write
operation.

@param source the <code>ImageWriter</code> object calling this method."
      end

      operation 1923611 "thumbnailStarted"
	public explicit_return_type "void"
	nparams 3
	  param inout name "source" type class_ref 343963 // ImageWriter
	  param in name "imageIndex" explicit_type "int"
	  param in name "thumbnailIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a thumbnail write operation is beginning.  All
<code>ImageWriter</code> implementations are required to call
this method exactly once when beginning a thumbnail write
operation.

@param source the <code>ImageWrite</code> object calling this method.
@param imageIndex the index of the image being written within its
containing input file or stream.
@param thumbnailIndex the index of the thumbnail being written."
      end

      operation 1923739 "thumbnailProgress"
	public explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 343963 // ImageWriter
	  param in name "percentageDone" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports the approximate degree of completion of the current
thumbnail write within the associated <code>ImageWriter</code>.
The semantics are identical to those of
<code>imageProgress</code>.

@param source the <code>ImageWriter</code> object calling this
method.
@param percentageDone the approximate percentage of decoding that
has been completed."
      end

      operation 1923867 "thumbnailComplete"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 343963 // ImageWriter
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a thumbnail write operation has completed.  All
<code>ImageWriter</code> implementations are required to call
this method exactly once upon completion of each thumbnail
write operation.

@param source the <code>ImageWriter</code> object calling this
method."
      end

      operation 1923995 "writeAborted"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 343963 // ImageWriter
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports that a write has been aborted via the writer's
<code>abort</code> method.  No further notifications will be
given.

@param source the <code>ImageWriter</code> object calling this
method."
      end
    end
  end

  deploymentview 142363 "event"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 271899 "IIOReadProgressListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
import java.util.Locale;
import javax.imageio.ImageReader;
${definition}"
      associated_classes
	class_ref 341403 // IIOReadProgressListener
      end
      comment "@(#)IIOReadProgressListener.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 273051 "IIOWriteProgressListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
import javax.imageio.ImageWriter;
${definition}"
      associated_classes
	class_ref 344603 // IIOWriteProgressListener
      end
      comment "@(#)IIOWriteProgressListener.java	1.18 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 775067 "IIOReadUpdateListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.image.BufferedImage;
import java.util.EventListener;
import javax.imageio.ImageReader;
${definition}"
      associated_classes
	class_ref 341531 // IIOReadUpdateListener
      end
      comment "@(#)IIOReadUpdateListener.java	1.19 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 775195 "IIOReadWarningListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
import javax.imageio.ImageReader;
${definition}"
      associated_classes
	class_ref 341275 // IIOReadWarningListener
      end
      comment "@(#)IIOReadWarningListener.java	1.21 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 775323 "IIOWriteWarningListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
import javax.imageio.ImageWriter;
${definition}"
      associated_classes
	class_ref 344475 // IIOWriteWarningListener
      end
      comment "@(#)IIOWriteWarningListener.java	1.19 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
