class NodeSetDTM
!!!5902747.java!!!	NodeSetDTM(inout dtmManager : DTMManager)
    super();
    m_manager = dtmManager;
!!!5902875.java!!!	NodeSetDTM(in blocksize : int, in dummy : int, inout dtmManager : DTMManager)
    super(blocksize);
    m_manager = dtmManager;
!!!5903003.java!!!	NodeSetDTM(inout nodelist : NodeSetDTM)

    super();
    m_manager = nodelist.getDTMManager();
    m_root = nodelist.getRoot();

    addNodes((DTMIterator) nodelist);
!!!5903131.java!!!	NodeSetDTM(inout ni : DTMIterator)

    super();

    m_manager = ni.getDTMManager();
    m_root = ni.getRoot();
    addNodes(ni);
!!!5903259.java!!!	NodeSetDTM(inout iterator : NodeIterator, inout xctxt : XPathContext)

    super();

    Node node;
    m_manager = xctxt.getDTMManager();

    while (null != (node = iterator.nextNode()))
    {
      int handle = xctxt.getDTMHandleFromNode(node);
      addNodeInDocOrder(handle, xctxt);
    }
!!!5903387.java!!!	NodeSetDTM(inout nodeList : NodeList, inout xctxt : XPathContext)

    super();

    m_manager = xctxt.getDTMManager();

    int n = nodeList.getLength();
    for (int i = 0; i < n; i++) 
    {
      Node node = nodeList.item(i);
      int handle = xctxt.getDTMHandleFromNode(node);
      // Do not reorder or strip duplicate nodes from the given DOM nodelist
      addNode(handle); // addNodeInDocOrder(handle, xctxt);  
    } 
!!!5903515.java!!!	NodeSetDTM(in node : int, inout dtmManager : DTMManager)

    super();
    m_manager = dtmManager;

    addNode(node);
!!!5903643.java!!!	setEnvironment(inout environment : Object) : void
    // no-op
!!!5903771.java!!!	getRoot() : int
    if(DTM.NULL == m_root)
    {
      if(size() > 0)
        return item(0);
      else
        return DTM.NULL;
    }
    else
      return m_root;
!!!5903899.java!!!	setRoot(in context : int, inout environment : Object) : void
    // no-op, I guess...  (-sb)
!!!5904027.java!!!	clone() : Object

    NodeSetDTM clone = (NodeSetDTM) super.clone();

    return clone;
!!!5904155.java!!!	cloneWithReset() : DTMIterator

    NodeSetDTM clone = (NodeSetDTM) clone();

    clone.reset();

    return clone;
!!!5904283.java!!!	reset() : void
    m_next = 0;
!!!5904411.java!!!	getWhatToShow() : int
    return DTMFilter.SHOW_ALL & ~DTMFilter.SHOW_ENTITY_REFERENCE;
!!!5904539.java!!!	getFilter() : DTMFilter
    return null;
!!!5904667.java!!!	getExpandEntityReferences() : boolean
    return true;
!!!5904795.java!!!	getDTM(in nodeHandle : int) : DTM
    
    return m_manager.getDTM(nodeHandle);
!!!5904923.java!!!	getDTMManager() : DTMManager
    
    return m_manager;
!!!5905051.java!!!	nextNode() : int

    if ((m_next) < this.size())
    {
      int next = this.elementAt(m_next);

      m_next++;

      return next;
    }
    else
      return DTM.NULL;
!!!5905179.java!!!	previousNode() : int

    if (!m_cacheNodes)
      throw new RuntimeException(
        XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_ITERATE, null)); //"This NodeSetDTM can not iterate to a previous node!");

    if ((m_next - 1) > 0)
    {
      m_next--;

      return this.elementAt(m_next);
    }
    else
      return DTM.NULL;
!!!5905435.java!!!	allowDetachToRelease(inout allowRelease : boolean) : void
    // no action for right now.
!!!5905563.java!!!	isFresh() : boolean
    return (m_next == 0);
!!!5905691.java!!!	runTo(in index : int) : void

    if (!m_cacheNodes)
      throw new RuntimeException(
        XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_INDEX, null)); //"This NodeSetDTM can not do indexing or counting functions!");

    if ((index >= 0) && (m_next < m_firstFree))
      m_next = index;
    else
      m_next = m_firstFree - 1;
!!!5905819.java!!!	item(in index : int) : int

    runTo(index);

    return this.elementAt(index);
!!!5905947.java!!!	getLength() : int

    runTo(-1);

    return this.size();
!!!5906075.java!!!	addNode(in n : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    this.addElement(n);
!!!5906203.java!!!	insertNode(in n : int, in pos : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    insertElementAt(n, pos);
!!!5906331.java!!!	removeNode(in n : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    this.removeElement(n);
!!!5906459.java!!!	addNodes(inout iterator : DTMIterator) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    if (null != iterator)  // defensive to fix a bug that Sanjiva reported.
    {
      int obj;

      while (DTM.NULL != (obj = iterator.nextNode()))
      {
        addElement(obj);
      }
    }

    // checkDups();
!!!5906587.java!!!	addNodesInDocOrder(inout iterator : DTMIterator, inout support : XPathContext) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    int node;

    while (DTM.NULL != (node = iterator.nextNode()))
    {
      addNodeInDocOrder(node, support);
    }
!!!5906715.java!!!	addNodeInDocOrder(in node : int, inout test : boolean, inout support : XPathContext) : int

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    int insertIndex = -1;

    if (test)
    {

      // This needs to do a binary search, but a binary search 
      // is somewhat tough because the sequence test involves 
      // two nodes.
      int size = size(), i;

      for (i = size - 1; i >= 0; i--)
      {
        int child = elementAt(i);

        if (child == node)
        {
          i = -2;  // Duplicate, suppress insert

          break;
        }

        DTM dtm = support.getDTM(node);
        if (!dtm.isNodeAfter(node, child))
        {
          break;
        }
      }

      if (i != -2)
      {
        insertIndex = i + 1;

        insertElementAt(node, insertIndex);
      }
    }
    else
    {
      insertIndex = this.size();

      boolean foundit = false;

      for (int i = 0; i < insertIndex; i++)
      {
        if (i == node)
        {
          foundit = true;

          break;
        }
      }

      if (!foundit)
        addElement(node);
    }

    // checkDups();
    return insertIndex;
!!!5906843.java!!!	addNodeInDocOrder(in node : int, inout support : XPathContext) : int

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    return addNodeInDocOrder(node, true, support);
!!!5906971.java!!!	size() : int
    return super.size();
!!!5907099.java!!!	addElement(in value : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    super.addElement(value);
!!!5907227.java!!!	insertElementAt(in value : int, in at : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    super.insertElementAt(value, at);
!!!5907355.java!!!	appendNodes(inout nodes : NodeVector) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    super.appendNodes(nodes);
!!!5907483.java!!!	removeAllElements() : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    super.removeAllElements();
!!!5907611.java!!!	removeElement(in s : int) : boolean

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    return super.removeElement(s);
!!!5907739.java!!!	removeElementAt(in i : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    super.removeElementAt(i);
!!!5907867.java!!!	setElementAt(in node : int, in index : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    super.setElementAt(node, index);
!!!5907995.java!!!	setItem(in node : int, in index : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    super.setElementAt(node, index);
!!!5908123.java!!!	elementAt(in i : int) : int

    runTo(i);

    return super.elementAt(i);
!!!5908251.java!!!	contains(in s : int) : boolean

    runTo(-1);

    return super.contains(s);
!!!5908379.java!!!	indexOf(in elem : int, in index : int) : int

    runTo(-1);

    return super.indexOf(elem, index);
!!!5908507.java!!!	indexOf(in elem : int) : int

    runTo(-1);

    return super.indexOf(elem);
!!!5908635.java!!!	getCurrentPos() : int
    return m_next;
!!!5908763.java!!!	setCurrentPos(in i : int) : void

    if (!m_cacheNodes)
      throw new RuntimeException(
        XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_INDEX, null)); //"This NodeSetDTM can not do indexing or counting functions!");

    m_next = i;
!!!5908891.java!!!	getCurrentNode() : int

    if (!m_cacheNodes)
      throw new RuntimeException(
        "This NodeSetDTM can not do indexing or counting functions!");

    int saved = m_next;
    // because nextNode always increments
    // But watch out for copy29, where the root iterator didn't
    // have nextNode called on it.
    int current = (m_next > 0) ? m_next-1 : m_next; 
    int n = (current < m_firstFree) ? elementAt(current) : DTM.NULL;
    m_next = saved; // HACK: I think this is a bit of a hack.  -sb
    return n;
!!!5909019.java!!!	getShouldCacheNodes() : boolean
    return m_cacheNodes;
!!!5909147.java!!!	setShouldCacheNodes(inout b : boolean) : void

    if (!isFresh())
      throw new RuntimeException(
        XSLMessages.createXPATHMessage(XPATHErrorResources.ER_CANNOT_CALL_SETSHOULDCACHENODE, null)); //"Can not call setShouldCacheNodes after nextNode has been called!");

    m_cacheNodes = b;
    m_mutable = true;
!!!5909275.java!!!	isMutable() : boolean
    return m_mutable;
!!!5909403.java!!!	getLast() : int
    return m_last;
!!!5909531.java!!!	setLast(in last : int) : void
    m_last = last;
!!!5909659.java!!!	isDocOrdered() : boolean
    return true;
!!!5909787.java!!!	getAxis() : int
    return -1;
