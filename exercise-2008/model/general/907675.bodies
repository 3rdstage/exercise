class PushbackInputStream
!!!6896923.java!!!	ensureOpen() : void
	if (in == null)
	    throw new IOException("Stream closed");
!!!6897051.java!!!	PushbackInputStream(inout in : InputStream, in size : int)
	super(in);
        if (size <= 0) {
            throw new IllegalArgumentException("size <= 0");
        }
	this.buf = new byte[size];
	this.pos = size;
!!!6897179.java!!!	PushbackInputStream(inout in : InputStream)
	this(in, 1);
!!!6897307.java!!!	read() : int
        ensureOpen();
	if (pos < buf.length) {
	    return buf[pos++] & 0xff;
	}
	return super.read();
!!!6897435.java!!!	read(in b : byte, in off : int, in len : int) : int
        ensureOpen();
        if ((off < 0) || (off > b.length) || (len < 0) ||
            ((off + len) > b.length) || ((off + len) < 0)) {
            throw new IndexOutOfBoundsException();
        }

	if (len == 0) {
	    return 0;
	}

	int avail = buf.length - pos;
	if (avail > 0) {
	    if (len < avail) {
		avail = len;
	    }
	    System.arraycopy(buf, pos, b, off, avail);
	    pos += avail;
	    off += avail;
	    len -= avail;
	}
	if (len > 0) {
	    len = super.read(b, off, len);
	    if (len == -1) {
		return avail == 0 ? -1 : avail;
	    }
	    return avail + len;
	}
	return avail;
!!!6897563.java!!!	unread(in b : int) : void
        ensureOpen();
	if (pos == 0) {
	    throw new IOException("Push back buffer is full");
	}
	buf[--pos] = (byte)b;
!!!6897691.java!!!	unread(in b : byte, in off : int, in len : int) : void
        ensureOpen();
	if (len > pos) {
	    throw new IOException("Push back buffer is full");
	}
	pos -= len;
	System.arraycopy(b, off, buf, pos, len);
!!!6897819.java!!!	unread(in b : byte) : void
	unread(b, 0, b.length);
!!!6897947.java!!!	available() : int
        ensureOpen();
	return (buf.length - pos) + super.available();
!!!6898075.java!!!	skip(in n : long) : long
        ensureOpen();
	if (n <= 0) {
	    return 0;
	}

	long pskip = buf.length - pos;
	if (pskip > 0) {
	    if (n < pskip) {
		pskip = n;
	    }
	    pos += pskip;
	    n -= pskip;
	}
	if (n > 0) {
	    pskip += super.skip(n);
	}
	return pskip;
!!!6898203.java!!!	markSupported() : boolean
	return false;
!!!6898459.java!!!	reset() : void
        throw new IOException("mark/reset not supported");
!!!6898587.java!!!	close() : void
        if (in == null)
            return;
        in.close();
        in = null;
        buf = null;
