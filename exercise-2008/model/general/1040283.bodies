class SimpleType
!!!8355867.java!!!	SimpleType(in className : String)
	
	// Check and construct state defined by parent.
	//
	super(className, className, className);
!!!8355995.java!!!	isValue(inout obj : Object) : boolean

	// if obj is null, return false
	//
	if (obj == null) {
	    return false;
	}

	// Test if obj's class name is the same as for this instance
	//
	return this.getClassName().equals(obj.getClass().getName());
!!!8356123.java!!!	equals(inout obj : Object) : boolean

	/* If it weren't for readReplace(), we could replace this method
	   with just:
	   return (this == obj);
	*/

	if (!(obj instanceof SimpleType))
	    return false;

	SimpleType other = (SimpleType) obj;

	// Test if other's className field is the same as for this instance
	//
	return this.getClassName().equals(other.getClassName());
!!!8356251.java!!!	hashCode() : int

	// Calculate the hash code value if it has not yet been done (ie 1st call to hashCode())
	//
	if (myHashCode == null) {
	    myHashCode = new Integer(this.getClassName().hashCode());
	}
	
	// return always the same hash code for this instance (immutable)
	//
	return myHashCode.intValue();
!!!8356379.java!!!	toString() : String

	// Calculate the string representation if it has not yet been done (ie 1st call to toString())
	//
	if (myToString == null) {
	    myToString = this.getClass().getName()+ "(name="+ getTypeName() +")";
	}

	// return always the same string representation for this instance (immutable)
	//
	return myToString;
!!!8356507.java!!!	readResolve() : Object
	final SimpleType canonical = (SimpleType) canonicalTypes.get(this);
	if (canonical == null) {
	    // Should not happen
	    throw new InvalidObjectException("Invalid SimpleType: " + this);
	}
	return canonical;
