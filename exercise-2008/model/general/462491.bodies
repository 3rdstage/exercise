class JTabbedPane
!!!9096731.java!!!	JTabbedPane()
        this(TOP, WRAP_TAB_LAYOUT);
!!!9096859.java!!!	JTabbedPane(in tabPlacement : int)
	this(tabPlacement, WRAP_TAB_LAYOUT);
!!!9096987.java!!!	JTabbedPane(in tabPlacement : int, in tabLayoutPolicy : int)
        setTabPlacement(tabPlacement);
	setTabLayoutPolicy(tabLayoutPolicy);
        pages = new Vector(1);
        setModel(new DefaultSingleSelectionModel());
        updateUI();
!!!9097115.java!!!	getUI() : TabbedPaneUI
        return (TabbedPaneUI)ui;
!!!9097243.java!!!	setUI(inout ui : TabbedPaneUI) : void
        super.setUI(ui);
        // disabled icons are generated by LF so they should be unset here
        for (int i = 0; i < getTabCount(); i++) {
            Icon icon = ((Page)pages.elementAt(i)).disabledIcon;
            if (icon instanceof UIResource) {
                setDisabledIconAt(i, null);
            }
        }
!!!9097371.java!!!	updateUI() : void
        setUI((TabbedPaneUI)UIManager.getUI(this));
!!!9097499.java!!!	getUIClassID() : String
        return uiClassID;
!!!9097755.java!!!	createChangeListener() : ChangeListener
        return new ModelListener();
!!!9097883.java!!!	addChangeListener(inout l : ChangeListener) : void
        listenerList.add(ChangeListener.class, l);
!!!9098011.java!!!	removeChangeListener(inout l : ChangeListener) : void
        listenerList.remove(ChangeListener.class, l);
!!!9098139.java!!!	getChangeListeners() : ChangeListener
        return (ChangeListener[])listenerList.getListeners(
                ChangeListener.class);
!!!9098267.java!!!	fireStateChanged() : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==ChangeListener.class) {
                // Lazily create the event:
                if (changeEvent == null)
                    changeEvent = new ChangeEvent(this);
                ((ChangeListener)listeners[i+1]).stateChanged(changeEvent);
            }          
        }
!!!9098395.java!!!	getModel() : SingleSelectionModel
        return model;
!!!9098523.java!!!	setModel(inout model : SingleSelectionModel) : void
        SingleSelectionModel oldModel = getModel();

        if (oldModel != null) {
            oldModel.removeChangeListener(changeListener);
            changeListener = null;
        }

        this.model = model;

        if (model != null) {
            changeListener = createChangeListener();
            model.addChangeListener(changeListener);
        }

        firePropertyChange("model", oldModel, model);
        repaint();
!!!9098651.java!!!	getTabPlacement() : int
        return tabPlacement;
!!!9098779.java!!!	setTabPlacement(in tabPlacement : int) : void
        if (tabPlacement != TOP && tabPlacement != LEFT && 
            tabPlacement != BOTTOM && tabPlacement != RIGHT) {
            throw new IllegalArgumentException("illegal tab placement: must be TOP, BOTTOM, LEFT, or RIGHT");
        }
        if (this.tabPlacement != tabPlacement) {
            int oldValue = this.tabPlacement;
            this.tabPlacement = tabPlacement;
            firePropertyChange("tabPlacement", oldValue, tabPlacement);
            revalidate();
            repaint();
        }
!!!9098907.java!!!	getTabLayoutPolicy() : int
        return tabLayoutPolicy;
!!!9099035.java!!!	setTabLayoutPolicy(in tabLayoutPolicy : int) : void
        if (tabLayoutPolicy != WRAP_TAB_LAYOUT && tabLayoutPolicy != SCROLL_TAB_LAYOUT) {
            throw new IllegalArgumentException("illegal tab layout policy: must be WRAP_TAB_LAYOUT or SCROLL_TAB_LAYOUT");
        }
        if (this.tabLayoutPolicy != tabLayoutPolicy) {
            int oldValue = this.tabLayoutPolicy;
            this.tabLayoutPolicy = tabLayoutPolicy;
            firePropertyChange("tabLayoutPolicy", oldValue, tabLayoutPolicy);
            revalidate();
            repaint();
        }
!!!9099163.java!!!	getSelectedIndex() : int
        return model.getSelectedIndex();
!!!9099291.java!!!	setSelectedIndex(in index : int) : void
	if (index != -1) {
	    checkIndex(index);
	}
	setSelectedIndexImpl(index);
!!!9099419.java!!!	setSelectedIndexImpl(in index : int) : void
        int oldIndex = model.getSelectedIndex();
        Page oldPage = null, newPage = null;
        if ((oldIndex >= 0) && (oldIndex != index)) {
            oldPage = (Page) pages.elementAt(oldIndex);
        }
        if ((index >= 0) && (oldIndex != index)) {
            newPage = (Page) pages.elementAt(index);
        }

        model.setSelectedIndex(index);

        String oldName = null;
        String newName = null;

        if (oldPage != null) {
            oldPage.firePropertyChange(
                AccessibleContext.ACCESSIBLE_STATE_PROPERTY, 
                AccessibleState.SELECTED, null);
            // TIGER - 4840667
            AccessibleContext ac = oldPage.getAccessibleContext();
            if (ac != null) {
                oldName = ac.getAccessibleName();
            }

        }
        if (newPage != null) {
            newPage.firePropertyChange(
                AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
                null, AccessibleState.SELECTED);
            // TIGER - 4840667
            AccessibleContext ac = newPage.getAccessibleContext();
            if (ac != null) {
                newName = ac.getAccessibleName();
            }

        }

        // TIGER - 4840667
        if (newName != null) {
            getAccessibleContext().firePropertyChange(
                AccessibleContext.ACCESSIBLE_NAME_PROPERTY, oldName, newName);
        }

!!!9099547.java!!!	getSelectedComponent() : Component
 
        int index = getSelectedIndex();
        if (index == -1) {
            return null;
        }
        return getComponentAt(index);
!!!9099675.java!!!	setSelectedComponent(inout c : Component) : void
        int index = indexOfComponent(c);
        if (index != -1) {
            setSelectedIndex(index);
        } else {
            throw new IllegalArgumentException("component not found in tabbed pane");
        }
!!!9099803.java!!!	insertTab(in title : String, inout icon : Icon, inout component : Component, in tip : String, in index : int) : void
	int newIndex = index;

        // If component already exists, remove corresponding
        // tab so that new tab gets added correctly
        // Note: we are allowing component=null because of compatibility,
        // but we really should throw an exception because much of the
        // rest of the JTabbedPane implementation isn't designed to deal
        // with null components for tabs.
        int removeIndex = indexOfComponent(component);
        if (component != null && removeIndex != -1) {
            removeTabAt(removeIndex);
	    if (newIndex > removeIndex) {
		newIndex--;
	    }
        }

        int selectedIndex = getSelectedIndex();

        pages.insertElementAt(new Page(this, title != null? title : "", icon, null,
                                       component, tip), newIndex);


        if (component != null) {
            addImpl(component, null, -1);
            component.setVisible(false);
        }

        if (pages.size() == 1) {
            setSelectedIndex(0);
        }

        if (selectedIndex >= newIndex) {
            setSelectedIndex(selectedIndex + 1);
        }

        if (!haveRegistered && tip != null) {
            ToolTipManager.sharedInstance().registerComponent(this);
            haveRegistered = true;
        }

        if (accessibleContext != null) {
            accessibleContext.firePropertyChange(
                    AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY, 
                    null, component);
        }
        revalidate();
        repaint();
!!!9099931.java!!!	addTab(in title : String, inout icon : Icon, inout component : Component, in tip : String) : void
        insertTab(title, icon, component, tip, pages.size()); 
!!!9100059.java!!!	addTab(in title : String, inout icon : Icon, inout component : Component) : void
        insertTab(title, icon, component, null, pages.size()); 
!!!9100187.java!!!	addTab(in title : String, inout component : Component) : void
        insertTab(title, null, component, null, pages.size()); 
!!!9100315.java!!!	add(inout component : Component) : Component
	if (!(component instanceof UIResource)) {
            addTab(component.getName(), component);
	} else {
	    super.add(component);
	}
        return component;
!!!9100443.java!!!	add(in title : String, inout component : Component) : Component
	if (!(component instanceof UIResource)) {
            addTab(title, component);
	} else {
	    super.add(title, component);
	}
        return component;
!!!9100571.java!!!	add(inout component : Component, in index : int) : Component
	if (!(component instanceof UIResource)) {
            // Container.add() interprets -1 as "append", so convert
            // the index appropriately to be handled by the vector
            insertTab(component.getName(), null, component, null, 
                      index == -1? getTabCount() : index);
	} else {
	    super.add(component, index);
	}
        return component;
!!!9100699.java!!!	add(inout component : Component, inout constraints : Object) : void
	if (!(component instanceof UIResource)) {
            if (constraints instanceof String) {
                addTab((String)constraints, component);
            } else if (constraints instanceof Icon) {
                addTab(null, (Icon)constraints, component);
            } else {
                add(component);
	    }
        } else {
	    super.add(component, constraints);
	}
!!!9100827.java!!!	add(inout component : Component, inout constraints : Object, in index : int) : void
	if (!(component instanceof UIResource)) {

            Icon icon = constraints instanceof Icon? (Icon)constraints : null;
            String title = constraints instanceof String? (String)constraints : null;
            // Container.add() interprets -1 as "append", so convert
            // the index appropriately to be handled by the vector
            insertTab(title, icon, component, null, index == -1? getTabCount() : index);
	} else {
	    super.add(component, constraints, index);
	}
!!!9100955.java!!!	removeTabAt(in index : int) : void
    
        checkIndex(index);

        // If we are removing the currently selected tab AND
        // it happens to be the last tab in the bunch, then
        // select the previous tab
        int tabCount = getTabCount();
        int selected = getSelectedIndex();
        if (selected >= (tabCount - 1)) {
            setSelectedIndexImpl(selected - 1);
        }

        Component component = getComponentAt(index);

        if (accessibleContext != null) {
            accessibleContext.firePropertyChange(
                    AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY, 
                    component, null);
        }

        pages.removeElementAt(index);

        // NOTE 4/15/2002 (joutwate):
        // This fix is implemented using client properties since there is
        // currently no IndexPropertyChangeEvent.  Once
        // IndexPropertyChangeEvents have been added this code should be
        // modified to use it.
        putClientProperty("__index_to_remove__", new Integer(index));

        // We can't assume the tab indices correspond to the 
        // container's children array indices, so make sure we
        // remove the correct child!
        if (component != null) {
	    Component components[] = getComponents();
	    for (int i = components.length; --i >= 0; ) {
		if (components[i] == component) {
                    super.remove(i);
                    component.setVisible(true);
                    break;
		}
	    }
        }

        revalidate();
        repaint();
!!!9101083.java!!!	remove(inout component : Component) : void
        int index = indexOfComponent(component);
        if (index != -1) {
            removeTabAt(index);
        } else {
	    // Container#remove(comp) invokes Container#remove(int)
	    // so make sure JTabbedPane#remove(int) isn't called here
	    Component children[] = getComponents();
	    for (int i=0; i < children.length; i++) {
		if (component == children[i]) {
		    super.remove(i);
		    break;
		}
	    }
        }
!!!9101211.java!!!	remove(in index : int) : void
        removeTabAt(index);
!!!9101339.java!!!	removeAll() : void
        setSelectedIndexImpl(-1);

        int tabCount = getTabCount();
        // We invoke removeTabAt for each tab, otherwise we may end up
        // removing Components added by the UI.
        while (tabCount-- > 0) {
            removeTabAt(tabCount);
        }
!!!9101467.java!!!	getTabCount() : int
        return pages.size();
!!!9101595.java!!!	getTabRunCount() : int
        if (ui != null) {
            return ((TabbedPaneUI)ui).getTabRunCount(this);
        }
        return 0;
!!!9101723.java!!!	getTitleAt(in index : int) : String
        return ((Page)pages.elementAt(index)).title;
!!!9101851.java!!!	getIconAt(in index : int) : Icon
        return ((Page)pages.elementAt(index)).icon;
!!!9101979.java!!!	getDisabledIconAt(in index : int) : Icon
        Page page = ((Page)pages.elementAt(index));
        if (page.disabledIcon == null) {
            page.disabledIcon = UIManager.getLookAndFeel().getDisabledIcon(this, page.icon);
        }
        return page.disabledIcon;
!!!9102107.java!!!	getToolTipTextAt(in index : int) : String
        return ((Page)pages.elementAt(index)).tip;
!!!9102235.java!!!	getBackgroundAt(in index : int) : Color
        return ((Page)pages.elementAt(index)).getBackground();
!!!9102363.java!!!	getForegroundAt(in index : int) : Color
        return ((Page)pages.elementAt(index)).getForeground();
!!!9102491.java!!!	isEnabledAt(in index : int) : boolean
        return ((Page)pages.elementAt(index)).isEnabled();
!!!9102619.java!!!	getComponentAt(in index : int) : Component
        return ((Page)pages.elementAt(index)).component;
!!!9102747.java!!!	getMnemonicAt(in tabIndex : int) : int
	checkIndex(tabIndex);

        Page page = (Page)pages.elementAt(tabIndex);
	return page.getMnemonic();
!!!9102875.java!!!	getDisplayedMnemonicIndexAt(in tabIndex : int) : int
	checkIndex(tabIndex);

        Page page = (Page)pages.elementAt(tabIndex);
	return page.getDisplayedMnemonicIndex();
!!!9103003.java!!!	getBoundsAt(in index : int) : Rectangle
	checkIndex(index);
        if (ui != null) {
            return ((TabbedPaneUI)ui).getTabBounds(this, index);
        }
        return null;
!!!9103131.java!!!	setTitleAt(in index : int, in title : String) : void
        Page page = (Page)pages.elementAt(index);
        String oldTitle =page.title;
        page.title = title;
        
	if (oldTitle != title) {
	    firePropertyChange("indexForTitle", -1, index);
	}
        page.updateDisplayedMnemonicIndex();
        if ((oldTitle != title) && (accessibleContext != null)) {
            accessibleContext.firePropertyChange(
                    AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY, 
                    oldTitle, title);
        }
        if (title == null || oldTitle == null ||
            !title.equals(oldTitle)) {
            revalidate();
            repaint();
        }
!!!9103259.java!!!	setIconAt(in index : int, inout icon : Icon) : void
        Page page = (Page)pages.elementAt(index);
        Icon oldIcon = page.icon;        
        if (icon != oldIcon) {
            page.icon = icon;
    
            /* If the default icon has really changed and we had
             * generated the disabled icon for this page, then
             * clear the disabledIcon field of the page.
             */
            if (page.disabledIcon instanceof UIResource) {
                page.disabledIcon = null;
            }
    
            // Fire the accessibility Visible data change
            if (accessibleContext != null) {
                accessibleContext.firePropertyChange(
                        AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY, 
                        oldIcon, icon);
            }
            revalidate();
            repaint();
        }
!!!9103387.java!!!	setDisabledIconAt(in index : int, inout disabledIcon : Icon) : void
        Icon oldIcon = ((Page)pages.elementAt(index)).disabledIcon;
        ((Page)pages.elementAt(index)).disabledIcon = disabledIcon;
        if (disabledIcon != oldIcon && !isEnabledAt(index)) {
            revalidate();
            repaint();
        }
!!!9103515.java!!!	setToolTipTextAt(in index : int, in toolTipText : String) : void
        String oldToolTipText =((Page)pages.elementAt(index)).tip;
        ((Page)pages.elementAt(index)).tip = toolTipText;

        if ((oldToolTipText != toolTipText) && (accessibleContext != null)) {
            accessibleContext.firePropertyChange(
                    AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY, 
                    oldToolTipText, toolTipText);
        }
        if (!haveRegistered && toolTipText != null) {
            ToolTipManager.sharedInstance().registerComponent(this);
            haveRegistered = true;
        }
!!!9103643.java!!!	setBackgroundAt(in index : int, inout background : Color) : void
        Color oldBg = ((Page)pages.elementAt(index)).background;
        ((Page)pages.elementAt(index)).setBackground(background);
        if (background == null || oldBg == null ||
            !background.equals(oldBg)) {
            Rectangle tabBounds = getBoundsAt(index);
            if (tabBounds != null) {
                repaint(tabBounds);
            }
        }
!!!9103771.java!!!	setForegroundAt(in index : int, inout foreground : Color) : void
        Color oldFg = ((Page)pages.elementAt(index)).foreground;
        ((Page)pages.elementAt(index)).setForeground(foreground);
        if (foreground == null || oldFg == null ||
            !foreground.equals(oldFg)) {
            Rectangle tabBounds = getBoundsAt(index);
            if (tabBounds != null) {
                repaint(tabBounds);
            }
        }
!!!9103899.java!!!	setEnabledAt(in index : int, inout enabled : boolean) : void
        boolean oldEnabled = ((Page)pages.elementAt(index)).isEnabled();
        ((Page)pages.elementAt(index)).setEnabled(enabled);
        if (enabled != oldEnabled) {
            revalidate();
            repaint();
        }
!!!9104027.java!!!	setComponentAt(in index : int, inout component : Component) : void
        Page page = (Page)pages.elementAt(index);
        if (component != page.component) {
            if (page.component != null) {
                // REMIND(aim): this is really silly;
                // why not if (page.component.getParent() == this) remove(component)
                synchronized(getTreeLock()) {
                    int count = getComponentCount();
                    Component children[] = getComponents();
                    for (int i = 0; i < count; i++) {
                        if (children[i] == page.component) {
                            super.remove(i);
                        }
                    }
                }
            }
            page.component = component;
            component.setVisible(getSelectedIndex() == index);
            addImpl(component, null, -1);
            
            revalidate();
        }
!!!9104155.java!!!	setDisplayedMnemonicIndexAt(in tabIndex : int, in mnemonicIndex : int) : void
	checkIndex(tabIndex);

        Page page = (Page)pages.elementAt(tabIndex);

        page.setDisplayedMnemonicIndex(mnemonicIndex);
!!!9104283.java!!!	setMnemonicAt(in tabIndex : int, in mnemonic : int) : void
	checkIndex(tabIndex);

        Page page = (Page)pages.elementAt(tabIndex);
	page.setMnemonic(mnemonic);

        firePropertyChange("mnemonicAt", null, null);
!!!9104411.java!!!	indexOfTab(in title : String) : int
        for(int i = 0; i < getTabCount(); i++) { 
            if (getTitleAt(i).equals(title == null? "" : title)) { 
                return i;
            }
        }
        return -1; 
!!!9104539.java!!!	indexOfTab(inout icon : Icon) : int
        for(int i = 0; i < getTabCount(); i++) {
            Icon tabIcon = getIconAt(i);
            if ((tabIcon != null && tabIcon.equals(icon)) ||
                (tabIcon == null && tabIcon == icon)) { 
                return i;
            }
        }
        return -1; 
!!!9104667.java!!!	indexOfComponent(inout component : Component) : int
        for(int i = 0; i < getTabCount(); i++) {
            Component c = getComponentAt(i);
            if ((c != null && c.equals(component)) ||
                (c == null && c == component)) { 
                return i;
            }
        }
        return -1; 
!!!9104795.java!!!	indexAtLocation(in x : int, in y : int) : int
        if (ui != null) {
            return ((TabbedPaneUI)ui).tabForCoordinate(this, x, y);
        }
        return -1;
!!!9104923.java!!!	getToolTipText(inout event : MouseEvent) : String
        if (ui != null) {
            int index = ((TabbedPaneUI)ui).tabForCoordinate(this, event.getX(), event.getY());

            if (index != -1) {
                return ((Page)pages.elementAt(index)).tip;
            }
        }
        return super.getToolTipText(event);
!!!9105051.java!!!	checkIndex(in index : int) : void
	if (index < 0 || index >= pages.size()) {
	    throw new IndexOutOfBoundsException("Index: "+index+", Tab count: "+pages.size());
	}
!!!9105179.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();
        if (getUIClassID().equals(uiClassID)) {
            byte count = JComponent.getWriteObjCounter(this);
            JComponent.setWriteObjCounter(this, --count);
            if (count == 0 && ui != null) {
                ui.installUI(this);
            }
        }
!!!9105307.java!!!	compWriteObjectNotify() : void
        super.compWriteObjectNotify();
        // If ToolTipText != null, then the tooltip has already been
        // unregistered by JComponent.compWriteObjectNotify()
        if (getToolTipText() == null && haveRegistered) {
            ToolTipManager.sharedInstance().unregisterComponent(this);
        }           
!!!9105435.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();
	if ((ui != null) && (getUIClassID().equals(uiClassID))) {
	    ui.installUI(this);
	}
        // If ToolTipText != null, then the tooltip has already been
        // registered by JComponent.readObject() 
        if (getToolTipText() == null && haveRegistered) {
            ToolTipManager.sharedInstance().registerComponent(this);
        }
!!!9105563.java!!!	paramString() : String
        String tabPlacementString;
        if (tabPlacement == TOP) {
            tabPlacementString = "TOP";
        } else if (tabPlacement == BOTTOM) {
            tabPlacementString = "BOTTOM";
        } else if (tabPlacement == LEFT) {
            tabPlacementString = "LEFT";
        } else if (tabPlacement == RIGHT) {
            tabPlacementString = "RIGHT";
        } else tabPlacementString = "";
        String haveRegisteredString = (haveRegistered ?
				       "true" : "false");

	return super.paramString() +
        ",haveRegistered=" + haveRegisteredString +
        ",tabPlacement=" + tabPlacementString;
!!!9105691.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJTabbedPane();
        }
        return accessibleContext;
