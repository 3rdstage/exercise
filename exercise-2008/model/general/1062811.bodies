class MimeType
!!!8558363.java!!!	MimeType(in s : String)
	parse (s);
!!!8558491.java!!!	getMimeType() : String
	return getStringValue();
!!!8558619.java!!!	getMediaType() : String
	return myPieces[0];
!!!8558747.java!!!	getMediaSubtype() : String
	return myPieces[1];
!!!8558875.java!!!	getParameterMap() : Map
	if (myParameterMap == null) {
	    myParameterMap = new ParameterMap();
	}
	return myParameterMap;
!!!8559003.java!!!	toString() : String
	return getStringValue();
!!!8559131.java!!!	hashCode() : int
	return getStringValue().hashCode();
!!!8559259.java!!!	equals(inout obj : Object) : boolean
	return(obj != null &&
	       obj instanceof MimeType &&
	       getStringValue().equals(((MimeType) obj).getStringValue()));
!!!8559387.java!!!	getStringValue() : String
	if (myStringValue == null) {
	    StringBuffer result = new StringBuffer();
	    result.append (myPieces[0]);
	    result.append ('/');
	    result.append (myPieces[1]);
	    int n = myPieces.length;
	    for (int i = 2; i < n; i += 2) {
		result.append(';');
		result.append(' ');
		result.append(myPieces[i]);
		result.append('=');
		result.append(addQuotes (myPieces[i+1]));
	    }
	    myStringValue = result.toString();
	}
	return myStringValue;
!!!8560155.java!!!	toUnicodeLowerCase(in s : String) : String
	int n = s.length();
	char[] result = new char [n];
	for (int i = 0; i < n; ++ i) {
	    result[i] = Character.toLowerCase (s.charAt (i));
	}
	return new String (result);
!!!8560283.java!!!	removeBackslashes(in s : String) : String
	int n = s.length();
	char[] result = new char [n];
	int i;
	int j = 0;
	char c;
	for (i = 0; i < n; ++ i) {
	    c = s.charAt (i);
	    if (c == '\\') {
		c = s.charAt (++ i);
	    }
	    result[j++] = c;
	}
	return new String (result, 0, j);
!!!8560411.java!!!	addQuotes(in s : String) : String
	int n = s.length();
	int i;
	char c;
	StringBuffer result = new StringBuffer (n+2);
	result.append ('\"');
	for (i = 0; i < n; ++ i) {
	    c = s.charAt (i);
	    if (c == '\"') {
		result.append ('\\');
	    }
	    result.append (c);
	}
	result.append ('\"');
	return result.toString();
!!!8560539.java!!!	parse(in s : String) : void
	// Initialize.
	if (s == null) {
	    throw new NullPointerException();
	}
	LexicalAnalyzer theLexer = new LexicalAnalyzer (s);
	int theLexemeType;
	Vector thePieces = new Vector();
	boolean mediaTypeIsText = false;
	boolean parameterNameIsCharset = false;

	// Parse media type.
	if (theLexer.getLexemeType() == TOKEN_LEXEME) {
	    String mt = toUnicodeLowerCase (theLexer.getLexeme());
	    thePieces.add (mt);
	    theLexer.nextLexeme();
	    mediaTypeIsText = mt.equals ("text");
	} else {
	    throw new IllegalArgumentException();
	}
	// Parse slash.
	if (theLexer.getLexemeType() == TSPECIAL_LEXEME &&
	      theLexer.getLexemeFirstCharacter() == '/') {
	    theLexer.nextLexeme();
	} else {
	    throw new IllegalArgumentException();
	}
	if (theLexer.getLexemeType() == TOKEN_LEXEME) {
	    thePieces.add (toUnicodeLowerCase (theLexer.getLexeme()));
	    theLexer.nextLexeme();
	} else {
	    throw new IllegalArgumentException();
	}
	// Parse zero or more parameters.
	while (theLexer.getLexemeType() == TSPECIAL_LEXEME &&
	       theLexer.getLexemeFirstCharacter() == ';') {
	    // Parse semicolon.
	    theLexer.nextLexeme();

	    // Parse parameter name.
	    if (theLexer.getLexemeType() == TOKEN_LEXEME) {
		String pn = toUnicodeLowerCase (theLexer.getLexeme());
		thePieces.add (pn);
		theLexer.nextLexeme();
		parameterNameIsCharset = pn.equals ("charset");
	    } else {
		throw new IllegalArgumentException();
	    }
	    
	    // Parse equals.
	    if (theLexer.getLexemeType() == TSPECIAL_LEXEME &&
		theLexer.getLexemeFirstCharacter() == '=') {
		theLexer.nextLexeme();
	    } else {
		throw new IllegalArgumentException();
	    }

	    // Parse parameter value.
	    if (theLexer.getLexemeType() == TOKEN_LEXEME) {
		String pv = theLexer.getLexeme();
		thePieces.add(mediaTypeIsText && parameterNameIsCharset ?
			      toUnicodeLowerCase (pv) :
			      pv);
		theLexer.nextLexeme();
	    } else if (theLexer.getLexemeType() == QUOTED_STRING_LEXEME) {
		String pv = removeBackslashes (theLexer.getLexeme());
		thePieces.add(mediaTypeIsText && parameterNameIsCharset ?
			      toUnicodeLowerCase (pv) :
			      pv);
		theLexer.nextLexeme();
	    } else {
		throw new IllegalArgumentException();
	    }
	}

	// Make sure we've consumed everything.
	if (theLexer.getLexemeType() != EOF_LEXEME) {
	    throw new IllegalArgumentException();
	}

	// Save the pieces. Parameters are not in ascending order yet.
	int n = thePieces.size();
	myPieces = (String[]) thePieces.toArray (new String [n]);

	// Sort the parameters into ascending order using an insertion sort.
	int i, j;
	String temp;
	for (i = 4; i < n; i += 2) {
	    j = 2;
	    while (j < i && myPieces[j].compareTo (myPieces[i]) <= 0) {
		j += 2;
	    }
	    while (j < i) {
		temp = myPieces[j];
		myPieces[j] = myPieces[i];
		myPieces[i] = temp;
		temp = myPieces[j+1];
		myPieces[j+1] = myPieces[i+1];
		myPieces[i+1] = temp;
		j += 2;
	    }
	}
