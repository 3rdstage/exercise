class LineView
!!!9968667.java!!!	LineView(inout elem : Element)
	super(elem);
!!!9968795.java!!!	isVisible() : boolean
	return true;
!!!9968923.java!!!	getMinimumSpan(in axis : int) : float
	return getPreferredSpan(axis);
!!!9969051.java!!!	getResizeWeight(in axis : int) : int
	switch (axis) {
	case View.X_AXIS:
	    return 1;
	case View.Y_AXIS:
	    return 0;
	default:
	    throw new IllegalArgumentException("Invalid axis: " + axis);
	}
!!!9969179.java!!!	getAlignment(in axis : int) : float
	if (axis == View.X_AXIS) {
	    return 0;
	}
	return super.getAlignment(axis);
!!!9969307.java!!!	layout(in width : int, in height : int) : void
	super.layout(Integer.MAX_VALUE - 1, height);
!!!9969435.java!!!	nextTabStop(in x : float, in tabOffset : int) : float
	// If the text isn't left justified, offset by 10 pixels!
	if (getTabSet() == null &&
	    StyleConstants.getAlignment(getAttributes()) ==
	    StyleConstants.ALIGN_LEFT) {
	    return getPreTab(x, tabOffset);
	}
	return super.nextTabStop(x, tabOffset);
!!!9969563.java!!!	getPreTab(in x : float, in tabOffset : int) : float
	Document d = getDocument();
	View v = getViewAtPosition(tabOffset, null);
	if ((d instanceof StyledDocument) && v != null) {
	    // Assume f is fixed point.
	    Font f = ((StyledDocument)d).getFont(v.getAttributes());
            Container c = getContainer();
	    FontMetrics fm = (c != null) ? c.getFontMetrics(f) :
                Toolkit.getDefaultToolkit().getFontMetrics(f);
	    int width = getCharactersPerTab() * fm.charWidth('W');
	    int tb = (int)getTabBase();
	    return (float)((((int)x - tb) / width + 1) * width + tb);
	}
	return 10.0f + x;
!!!9969691.java!!!	getCharactersPerTab() : int
	return 8;
