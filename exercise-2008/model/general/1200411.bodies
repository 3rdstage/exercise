class InlineView
!!!9919643.java!!!	InlineView(inout elem : Element)
	super(elem);
	StyleSheet sheet = getStyleSheet();
	attr = sheet.getViewAttributes(this);
!!!9919771.java!!!	insertUpdate(inout e : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
	super.insertUpdate(e, a, f);
        longestWordSpan = -1.0f;
!!!9919899.java!!!	removeUpdate(inout e : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
        super.removeUpdate(e, a, f);
        longestWordSpan = -1.0f;
!!!9920027.java!!!	changedUpdate(inout e : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
	super.changedUpdate(e, a, f);
	StyleSheet sheet = getStyleSheet();
	attr = sheet.getViewAttributes(this);
        longestWordSpan = -1.0f;
	preferenceChanged(null, true, true);
!!!9920155.java!!!	getAttributes() : AttributeSet
	return attr;
!!!9920283.java!!!	getBreakWeight(in axis : int, in pos : float, in len : float) : int
	if (nowrap) {
	    return BadBreakWeight;
	}
	return super.getBreakWeight(axis, pos, len);
!!!9920411.java!!!	breakView(in axis : int, in offset : int, in pos : float, in len : float) : View
        InlineView view = (InlineView)super.breakView(axis, offset, pos, len);
        if (view != this) {
            view.longestWordSpan = -1;
        }
        return view;
!!!9920539.java!!!	getLongestWordSpan() : float
        if (longestWordSpan < 0.0f) {
            longestWordSpan = calculateLongestWordSpan();
        }
        return longestWordSpan; 
!!!9920667.java!!!	calculateLongestWordSpan() : float
        float rv = 0f;
        Document doc = getDocument();
        //AbstractDocument.MultiByteProperty
       final Object MultiByteProperty = "multiByte";
        if (doc != null && 
              Boolean.TRUE.equals(doc.getProperty(MultiByteProperty))) {
            rv = calculateLongestWordSpanUseBreakIterator();
        } else {
            rv = calculateLongestWordSpanUseWhitespace();
        }
        return rv;
!!!9920795.java!!!	calculateLongestWordSpanUseBreakIterator() : float
        float span = 0;
        Document doc = getDocument();
        int p0 = getStartOffset();
        int p1 = getEndOffset();
        if (p1 > p0) {
            try {
                FontMetrics metrics = getFontMetrics();
                Segment segment = new Segment();
                doc.getText(p0, p1 - p0, segment);
                Container c = getContainer();
                BreakIterator line;
                if (c != null) {
                    line = BreakIterator.getLineInstance(c.getLocale());
                } else {
                    line = BreakIterator.getLineInstance();
                }
                line.setText(segment);
                int start = line.first();
                for (int end = line.next();
                     end != BreakIterator.DONE;
                     start = end, end = line.next()) {
                     if (end > start) {
                        span = Math.max(span,
                           metrics.charsWidth(segment.array, start,
                                               end - start)); 
                    }
                }
            } catch (BadLocationException ble) {
              // If the text can't be retrieved, it can't influence the size.
            }
        }
        return span;
!!!9920923.java!!!	calculateLongestWordSpanUseWhitespace() : float
       float span = 0;
       Document doc = getDocument();
       int p0 = getStartOffset();
       int p1 = getEndOffset();
       if (p1 > p0) {
           try {
               Segment segment = new Segment();
               doc.getText(p0, p1 - p0, segment);
               final int CONTENT = 0;
               final int SPACES = 1;
               int state = CONTENT;
               int start = segment.offset;
               int end = start;
               FontMetrics metrics = getFontMetrics();
               final int lastIndex = segment.offset + segment.count - 1;
               for (int i = segment.offset; i <= lastIndex; i++) {
                   boolean updateSpan = false;
                   if (Character.isWhitespace(segment.array[i])) {
                       if (state == CONTENT) {
                           //we got a word
                           updateSpan = true;
                           state = SPACES;
                       }
                   } else {
                       if (state == SPACES) {
                           //first non space
                           start = i;
                           end = start;
                           state = CONTENT;
                       } else {
                           end = i;
                       }
                      //handle last word
                       if (i == lastIndex) {
                           updateSpan = true;
                       }
                   }
                   if (updateSpan) {
                       if (end > start) {
                           span = Math.max(span,
                               metrics.charsWidth(segment.array, start, 
                                                  end - start + 1)); 
                       }
                   }

               }
           } catch (BadLocationException ble) {
               // If the text can't be retrieved, it can't influence the size.
           }
       }
       return span;
!!!9921051.java!!!	setPropertiesFromAttributes() : void
	super.setPropertiesFromAttributes();
	AttributeSet a = getAttributes();
	Object decor = a.getAttribute(CSS.Attribute.TEXT_DECORATION);
	boolean u = (decor != null) ? 
	  (decor.toString().indexOf("underline") >= 0) : false;
	setUnderline(u);
	boolean s = (decor != null) ? 
	  (decor.toString().indexOf("line-through") >= 0) : false;
	setStrikeThrough(s);
        Object vAlign = a.getAttribute(CSS.Attribute.VERTICAL_ALIGN);
	s = (vAlign != null) ? (vAlign.toString().indexOf("sup") >= 0) : false;
	setSuperscript(s);
	s = (vAlign != null) ? (vAlign.toString().indexOf("sub") >= 0) : false;
	setSubscript(s);

	Object whitespace = a.getAttribute(CSS.Attribute.WHITE_SPACE);
	if ((whitespace != null) && whitespace.equals("nowrap")) {
	    nowrap = true;
	} else {
	    nowrap = false;
	}

	HTMLDocument doc = (HTMLDocument)getDocument();
	// fetches background color from stylesheet if specified
	Color bg = doc.getBackground(a);
	if (bg != null) {
	    setBackground(bg);
	}
!!!9921179.java!!!	getStyleSheet() : StyleSheet
	HTMLDocument doc = (HTMLDocument) getDocument();
	return doc.getStyleSheet();
