format 66
"spi" // src::javax::sql::rowset::spi
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "javax/sql/rowset/spi"
  java_package "javax.sql.rowset.spi"
  classview 179099 "spi"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 1096219 "SyncProviderException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Indicates an error with the <code>SyncProvider</code> mechanism. This exception
is created by a <code>SyncProvider</code> abstract class extension if it
encounters violations in reading from or writing to the originating data source.
<P>
If it is implemented to do so, the <code>SyncProvider</code> object may also create a 
<code>SyncResolver</code> object and either initialize the <code>SyncProviderException</code> 
object with it at construction time or set it with the <code>SyncProvider</code> object at
a later time. 
<P>
The method <code>acceptChanges</code> will throw this exception after the writer
has finished checking for conflicts and has found one or more conflicts. An
application may catch a <code>SyncProviderException</code> object and call its
<code>getSyncResolver</code> method to get its <code>SyncResolver</code> object.
See the code fragment in the interface comment for 
<a href=\"SyncResolver.java\"><code>SyncResolver</code></a> for an example.
This <code>SyncResolver</code> object will mirror the <code>RowSet</code>
object that generated the exception, except that it will contain only the values
from the data source that are in conflict.  All other values in the <code>SyncResolver</code>
object will be <code>null</code>. 
<P>
The <code>SyncResolver</code> object may be used to examine and resolve 
each conflict in a row and then go to the next row with a conflict to
repeat the procedure.
<P>
A <code>SyncProviderException</code> object may or may not contain a description of the
condition causing the exception.  The inherited method <code>getMessage</code> may be
called to retrieve the description if there is one.

@author Jonathan Bruce
@see javax.sql.rowset.spi.SyncFactory
@see javax.sql.rowset.spi.SyncResolver
@see javax.sql.rowset.spi.SyncFactoryException"
      classrelation 2237595 // <generalisation>
	relation 2237595 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2237595 // <generalisation>
	  b parent class_ref 979995 // SQLException
      end

      classrelation 2237723 // syncResolver (<unidirectional association>)
	relation 2237723 --->
	  a role_name "syncResolver" init_value "=  null" private
	    comment "
The instance of <code>javax.sql.rowset.spi.SyncResolver</code> that
this <code>SyncProviderException</code> object will return when its
<code>getSyncResolver</code> method is called.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2237723 // syncResolver (<unidirectional association>)
	  b parent class_ref 1099291 // SyncResolver
      end

      operation 8828059 "SyncProviderException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SyncProviderException</code> object without a detail message."
      end

      operation 8828187 "SyncProviderException"
	public explicit_return_type ""
	nparams 1
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SyncProviderException</code> object with the specified 
detail message.

@param msg the detail message"
      end

      operation 8828315 "SyncProviderException"
	public explicit_return_type ""
	nparams 1
	  param inout name "syncResolver" type class_ref 1099291 // SyncResolver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SyncProviderException</code> object with the specified
<code>SyncResolver</code> instance.

@param syncResolver the <code>SyncResolver</code> instance used to
    to process the synchronization conflicts
@throws IllegalArgumentException if the <code>SyncResolver</code> object
    is <code>null</code>.  "
      end

      operation 8828443 "getSyncResolver"
	public return_type class_ref 1099291 // SyncResolver
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>SyncResolver</code> object that has been set for
this <code>SyncProviderException</code> object, or
if none has been set, an instance of the default <code>SyncResolver</code>
implementation included in the reference implementation.
<P>
If a <code>SyncProviderException</code> object is thrown, an application
may use this method to generate a <code>SyncResolver</code> object 
with which to resolve the conflict or conflicts that caused the
exception to be thrown. 

@return the <code>SyncResolver</code> object set for this
    <code>SyncProviderException</code> object or, if none has
    been set, an instance of the default <code>SyncResolver</code>
    implementation. In addition, the default <code>SyncResolver</code> 
    implementation is also returned if the <code>SyncResolver()</code> or
    <code>SyncResolver(String)</code> constructors are used to instantiate 
    the <code>SyncResolver</code> instance."
      end

      operation 8828571 "setSyncResolver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "syncResolver" type class_ref 1099291 // SyncResolver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>SyncResolver</code> object for this
<code>SyncProviderException</code> object to the one supplied.
If the argument supplied is <code>null</code>, a call to the method
<code>getSyncResolver</code> will return the default reference
implementation of the <code>SyncResolver</code> interface.

@param syncResolver the <code>SyncResolver</code> object to be set; 
    cannot be <code>null</code>     
@throws IllegalArgumentException if the <code>SyncResolver</code> object
    is <code>null</code>.     
@see #getSyncResolver"
      end

      attribute 3170843 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -939908523620640692L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1096347 "SyncProvider"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The synchronization mechanism that provides reader/writer capabilities for 
disconnected <code>RowSet</code> objects.
A <code>SyncProvider</code> implementation is a class that extends the
<code>SyncProvider</code> abstract class.
<P>
A <code>SyncProvider</code> implementation is
identified by a unique ID, which is its fully qualified class name.
This name must be registered with the 
<code>SyncFactory</code> SPI, thus making the implementation available to 
all <code>RowSet</code> implementations. 
The factory mechanism in the reference implementation uses this name to instantiate
the implementation, which can then provide a <code>RowSet</code> object with its
reader (a <code>javax.sql.RowSetReader</code> object) and its writer (a
<code>javax.sql.RowSetWriter</code> object).
<P>
The Jdbc <code>RowSet</code> Implementations specification provides two
reference implementations of the <code>SyncProvider</code> abstract class: 
<code>RIOptimisticProvider</code> and <code>RIXMLProvider</code>. 
The <code>RIOptimisticProvider</code> can set any <code>RowSet</code>
implementation with a <code>RowSetReader</code> object and a 
<code>RowSetWriter</code> object.  However, only the <code>RIXMLProvider</code>
implementation can set an <code>XmlReader</code> object and an
<code>XmlWriter</code> object. A <code>WebRowSet</code> object uses the
<code>XmlReader</code> object to read data in XML format to populate itself with that
data.  It uses the <code>XmlWriter</code> object to write itself to a stream or
<code>java.io.Writer</code> object in XML format. 
<P>
<h3>1.0 Naming Convention for Implementations</h3>
As a guide  to naming <code>SyncProvider</code>
implementations, the following should be noted:
<UL>
<li>The name for a <code>SyncProvider</code> implementation 
is its fully qualified class name.  
<li>It is recommended that vendors supply a
<code>SyncProvider</code> implementation in a package named <code>providers</code>.
</UL>
<p>
For instance, if a vendor named Fred, Inc. offered a 
<code>SyncProvider</code> implementation, you could have the following:
<PRE>
    Vendor name:  Fred, Inc.     
    Domain name of vendor:  com.fred
    Package name:  com.fred.providers
    SyncProvider implementation class name:  HighAvailabilityProvider

    Fully qualified class name of SyncProvider implementation:
                       com.fred.providers.HighAvailabilityProvider 
</PRE>
<P>
The following line of code uses the fully qualified name to register
this implementation with the <code>SyncFactory</code> static instance.
<PRE>
    SyncFactory.registerProvider(
                         \"com.fred.providers.HighAvailabilityProvider\");
</PRE>
<P>
The default <code>SyncProvider</code> object provided with the reference 
implementation uses the following name:
<pre>
    com.sun.rowset.providers.RIOptimisticProvider 
</pre>
<p>
A vendor can register a <code>SyncProvider</code> implementation class name 
with Sun Microsystems, Inc. by sending email to jdbc@sun.com.
Sun will maintain a database listing the 
available <code>SyncProvider</code> implementations for use with compliant
<code>RowSet</code> implementations.  This database will be similar to the
one already maintained to list available JDBC drivers.
<P>
Vendors should refer to the reference implementation synchronization
providers for additional guidance on how to implement a new 
<code>SyncProvider</code> implementation.

<h3>2.0 How a <code>RowSet</code> Object Gets Its Provider</h3>

A disconnected <code>Rowset</code> object may get access to a 
<code>SyncProvider</code> object in one of the following two ways:
<UL>
 <LI>Using a constructor<BR>
     <PRE>
      CachedRowSet crs = new CachedRowSet(
                 \"com.fred.providers.HighAvailabilitySyncProvider\"); 
     </PRE>
 <LI>Using the <code>setSyncProvider</code> method
     <PRE>
      CachedRowSet crs = new CachedRowSet(); 
      crs.setSyncProvider(\"com.fred.providers.HighAvailabilitySyncProvider\"); 
     </PRE>

</UL>
<p> 
By default, the reference implementations of the <code>RowSet</code> synchronization
providers are always available to the Java platform.
If no other pluggable synchronization providers have been correctly
registered, the <code>SyncFactory</code> will automatically generate
an instance of the default <code>SyncProvider</code> reference implementation.
Thus, in the preceding code fragment, if no implementation named
<code>com.fred.providers.HighAvailabilitySyncProvider</code> has been
registered with the <code>SyncFactory</code> instance, <i>crs</i> will be 
assigned the default provider in the reference implementation, which is
<code>com.sun.rowset.providers.RIOptimisticProvider</code>. 
<p>
<h3>3.0 Violations and Synchronization Issues</h3>
If an update between a disconnected <code>RowSet</code> object
and a data source violates 
the original query or the underlying data source constraints, this will 
result in undefined behavior for all disconnected <code>RowSet</code> implementations 
and their designated <code>SyncProvider</code> implementations. 
Not defining the behavior when such violations occur offers greater flexibility 
for a <code>SyncProvider</code>
implementation to determine its own best course of action.
<p>
A <code>SyncProvider</code> implementation 
may choose to implement a specific handler to
handle a subset of query violations.
However if an original query violation or a more general data source constraint
violation is not handled by the <code>SyncProvider</code> implementation,
all <code>SyncProvider</code>
objects must throw a <code>SyncProviderException</code>.
<p>
<h3>4.0 Updatable SQL VIEWs</h3>
It is possible for any disconnected or connected <code>RowSet</code> object to be populated 
from an SQL query that is formulated originally from an SQL <code>VIEW</code>.
While in many cases it is possible for an update to be performed to an
underlying view, such an update requires additional metadata, which may vary.
The <code>SyncProvider</code> class provides two constants to indicate whether
an implementation supports updating an SQL <code>VIEW</code>.
<ul>
<li><code><b>NONUPDATABLE_VIEW_SYNC</b></code> - Indicates that a <code>SyncProvider</code>
implementation does not support synchronization with an SQL <code>VIEW</code> as the
underlying source of data for the <code>RowSet</code> object.
<li><code><b>UPDATABLE_VIEW_SYNC</b></code> - Indicates that a 
<code>SyncProvider</code> implementation 
supports synchronization with an SQL <code>VIEW</code> as the underlying source
of data.
</ul>
<P>
The default is for a <code>RowSet</code> object not to be updatable if it was
populated with data from an SQL <code>VIEW</code>.
<P>
<h3>5.0 <code>SyncProvider</code> Constants</h3>
The <code>SyncProvider</code> class provides three sets of constants that
are used as return values or parameters for <code>SyncProvider</code> methods.
<code>SyncProvider</code> objects may be implemented to perform synchronization
between a <code>RowSet</code> object and its underlying data source with varying
degrees of of care. The first group of constants indicate how synchronization
is handled. For example, <code>GRADE_NONE</code> indicates that a 
<code>SyncProvider</code> object will not take any care to see what data is
valid and will simply write the <code>RowSet</code> data to the data source.
<code>GRADE_MODIFIED_AT_COMMIT</code> indicates that the provider will check
only modified data for validity.  Other grades check all data for validity
or set locks when data is modified or loaded.
<OL>
 <LI>Constants to indicate the synchronization grade of a 
    <code>SyncProvider</code> object
  <UL>
   <LI>SyncProvider.GRADE_NONE
   <LI>SyncProvider.GRADE_MODIFIED_AT_COMMIT
   <LI>SyncProvider.GRADE_CHECK_ALL_AT_COMMIT
   <LI>SyncProvider.GRADE_LOCK_WHEN_MODIFIED
   <LI>SyncProvider.GRADE_LOCK_WHEN_LOADED
  </UL>
 <LI>Constants to indicate what locks are set on the data source
  <UL> 
    <LI>SyncProvider.DATASOURCE_NO_LOCK
    <LI>SyncProvider.DATASOURCE_ROW_LOCK
    <LI>SyncProvider.DATASOURCE_TABLE_LOCK
    <LI>SyncProvider.DATASOURCE_DB_LOCK
  </UL> 
 <LI>Constants to indicate whether a <code>SyncProvider</code> object can
      perform updates to an SQL <code>VIEW</code> <BR>
      These constants are explained in the preceding section (4.0).
  <UL>
    <LI>SyncProvider.UPDATABLE_VIEW_SYNC
    <LI>SyncProvider.NONUPDATABLE_VIEW_SYNC
  </UL>
</OL>

@author Jonathan Bruce
@see javax.sql.rowset.spi.SyncFactory
@see javax.sql.rowset.spi.SyncFactoryException"
      operation 8824603 "SyncProvider"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a default <code>SyncProvider</code> object."
      end

      operation 8824731 "getProviderID"
	abstract public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unique identifier for this <code>SyncProvider</code> object. 

@return a <code>String</code> object with the fully qualified class name of
        this <code>SyncProvider</code> object"
      end

      operation 8824859 "getRowSetReader"
	abstract public return_type class_ref 1095323 // RowSetReader
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>javax.sql.RowSetReader</code> object, which can be used to
populate a <code>RowSet</code> object with data.

@return a <code>javax.sql.RowSetReader</code> object"
      end

      operation 8824987 "getRowSetWriter"
	abstract public return_type class_ref 1095451 // RowSetWriter
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>javax.sql.RowSetWriter</code> object, which can be
used to write a <code>RowSet</code> object's data back to the
underlying data source.

@return a <code>javax.sql.RowSetWriter</code> object "
      end

      operation 8825115 "getProviderGrade"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a constant indicating the
grade of synchronization a <code>RowSet</code> object can expect from 
this <code>SyncProvider</code> object.

@return an int that is one of the following constants:
          SyncProvider.GRADE_NONE,
          SyncProvider.GRADE_CHECK_MODIFIED_AT_COMMIT,
          SyncProvider.GRADE_CHECK_ALL_AT_COMMIT,
          SyncProvider.GRADE_LOCK_WHEN_MODIFIED,
          SyncProvider.GRADE_LOCK_WHEN_LOADED"
      end

      operation 8825243 "setDataSourceLock"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "datasource_lock" explicit_type "int"
	nexceptions 1
	  exception class_ref 1096219 // SyncProviderException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a lock on the underlying data source at the level indicated by
<i>datasource_lock</i>. This should cause the
<code>SyncProvider</code> to adjust its behavior by increasing or
decreasing the level of optimism it provides for a successful
synchronization.

@param datasource_lock one of the following constants indicating the severity 
          level of data source lock required:
<pre>
          SyncProvider.DATASOURCE_NO_LOCK,
          SyncProvider.DATASOURCE_ROW_LOCK,
          SyncProvider.DATASOURCE_TABLE_LOCK,
          SyncProvider.DATASOURCE_DB_LOCK,          
</pre>
@throws SyncProviderException if an unsupported data source locking level 
          is set.
@see #getDataSourceLock"
      end

      operation 8825371 "getDataSourceLock"
	abstract public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1096219 // SyncProviderException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current data source lock severity level active in this
<code>SyncProvider</code> implementation.

@return a constant indicating the current level of data source lock
       active in this <code>SyncProvider</code> object;
        one of the following:
<pre>
          SyncProvider.DATASOURCE_NO_LOCK,
          SyncProvider.DATASOURCE_ROW_LOCK,
          SyncProvider.DATASOURCE_TABLE_LOCK,
          SyncProvider.DATASOURCE_DB_LOCK     
</pre>
@throws SyncProviderExceptiom if an error occurs determining the data
       source locking level.
@see #setDataSourceLock     
"
      end

      operation 8825499 "supportsUpdatableView"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this <code>SyncProvider</code> implementation
can perform synchronization between a <code>RowSet</code> object
and the SQL <code>VIEW</code> in the data source from which 
the <code>RowSet</code> object got its data.

@return an <code>int</code> saying whether this <code>SyncProvider</code>
        object supports updating an SQL <code>VIEW</code>; one of the 
        following: 
           SyncProvider.UPDATABLE_VIEW_SYNC,
           SyncProvider.NONUPDATABLE_VIEW_SYNC"
      end

      operation 8825627 "getVersion"
	abstract public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the release version of this <code>SyncProvider</code> instance.

@return a <code>String</code> detailing the release version of the 
    <code>SyncProvider</code> implementation"
      end

      operation 8825755 "getVendor"
	abstract public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the vendor name of this <code>SyncProvider</code> instance
    
@return a <code>String</code> detailing the vendor name of this
    <code>SyncProvider</code> implementation"
      end

      attribute 3168795 "GRADE_NONE"
	class_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Standard description of synchronization grades that a SyncProvider
could provide.


Indicates that no synchronization with the originating data source is
provided. A <code>SyncProvider</code> 
implementation returning this grade will simply attempt to write
updates in the <code>RowSet</code> object to the underlying data
source without checking the validity of any data.

"
      end

      attribute 3168923 "GRADE_CHECK_MODIFIED_AT_COMMIT"
	class_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates a low level optimistic synchronization grade with 
respect to the originating data source.

A <code>SyncProvider</code> implementation
returning this grade will check only rows that have changed.

"
      end

      attribute 3169051 "GRADE_CHECK_ALL_AT_COMMIT"
	class_attribute public explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates a high level optimistic synchronization grade with 
respect to the originating data source.

A <code>SyncProvider</code> implementation
returning this grade will check all rows, including rows that have not
changed.
"
      end

      attribute 3169179 "GRADE_LOCK_WHEN_MODIFIED"
	class_attribute public explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates a pessimistic synchronization grade with 
respect to the originating data source.

A <code>SyncProvider</code> 
implementation returning this grade will lock the row in the originating
data source.
"
      end

      attribute 3169307 "GRADE_LOCK_WHEN_LOADED"
	class_attribute public explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates the most pessimistic synchronization grade with 
respect to the originating 
data source. A <code>SyncProvider</code>
implementation returning this grade will lock the entire view and/or
table affected by the original statement used to populate a 
<code>RowSet</code> object.
"
      end

      attribute 3169435 "DATASOURCE_NO_LOCK"
	class_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that no locks remain on the originating data source. This is the default
lock setting for all <code>SyncProvider</code> implementations unless
otherwise directed by a <code>RowSet</code> object.
"
      end

      attribute 3169563 "DATASOURCE_ROW_LOCK"
	class_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a lock is placed on the rows that are touched by the original
SQL statement used to populate the <code>RowSet</code> object
that is using this <code>SyncProvider</code> object.
"
      end

      attribute 3169691 "DATASOURCE_TABLE_LOCK"
	class_attribute public explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a lock is placed on all tables that are touched by the original
SQL statement used to populate the <code>RowSet</code> object
that is using this <code>SyncProvider</code> object.
"
      end

      attribute 3169819 "DATASOURCE_DB_LOCK"
	class_attribute public explicit_type "int"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a lock is placed on the entire data source that is the source of
data for the <code>RowSet</code> object
that is using this <code>SyncProvider</code> object.
"
      end

      attribute 3169947 "UPDATABLE_VIEW_SYNC"
	class_attribute public explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a <code>SyncProvider</code> implementation
supports synchronization between a <code>RowSet</code> object and
the SQL <code>VIEW</code> used to populate it.
"
      end

      attribute 3170075 "NONUPDATABLE_VIEW_SYNC"
	class_attribute public explicit_type "int"
	init_value "=  6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a <code>SyncProvider</code> implementation
does <B>not</B> support synchronization between a <code>RowSet</code>
object and the SQL <code>VIEW</code> used to populate it.
"
      end
    end

    class 1098907 "SyncFactory"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The Service Provider Interface (SPI) mechanism that generates <code>SyncProvider</code>
instances to be used by disconnected <code>RowSet</code> objects. 
The <code>SyncProvider</code> instances in turn provide the
<code>javax.sql.RowSetReader</code> object the <code>RowSet</code> object
needs to populate itself with data and the 
<code>javax.sql.RowSetWriter</code> object it needs to
propagate changes to its
data back to the underlying data source. 
<P>
Because the methods in the <code>SyncFactory</code> class are all static,
there is only one <code>SyncFactory</code> object
per Java VM at any one time. This ensures that there is a single source from which a
<code>RowSet</code> implementation can obtain its <code>SyncProvider</code> 
implementation. 
<p>
<h3>1.0 Overview</h3>
The <code>SyncFactory</code> class provides an internal registry of available 
synchronization provider implementations (<code>SyncProvider</code> objects). 
This registry may be queried to determine which
synchronization providers are available. 
The following line of code gets an enumeration of the providers currently registered.
<PRE>
    java.util.Enumeration e = SyncFactory.getRegisteredProviders();
</PRE>
All standard <code>RowSet</code> implementations must provide at least two providers: 
<UL>
 <LI>an optimistic provider for use with a <code>CachedRowSet</code> implementation 
    or an implementation derived from it
 <LI>an XML provider, which is used for reading and writing XML, such as with
      <code>WebRowSet</code> objects
</UL> 
Note that the JDBC RowSet Implementations include the <code>SyncProvider</code>
implemtations <code>RIOptimisticProvider</code> and <code>RIXmlProvider</code>,
which satisfy this requirement.
<P>
The <code>SyncFactory</code> class provides accessor methods to assist 
applications in determining which synchronization providers are currently
registered with the <code>SyncFactory</code>.
<p>
Other methods let <code>RowSet</code> persistence providers be
registered or de-registered with the factory mechanism. This 
allows additional synchronization provider implementations to be made 
available to <code>RowSet</code> objects at run time.       
<p>
Applications can apply a degree of filtering to determine the level of 
synchronization that a <code>SyncProvider</code> implementation offers. 
The following criteria determine whether a provider is 
made available to a <code>RowSet</code> object:
<ol>
<li>If a particular provider is specified by a <code>RowSet</code> object, and 
the <code>SyncFactory</code> does not contain a reference to this provider,
a <code>SyncFactoryException</code> is thrown stating that the synchronization 
provider could not be found.
<p>
<li>If a <code>RowSet</code> implementation is instantiated with a specified 
provider and the specified provider has been properly registered, the 
requested provider is supplied. Otherwise a <code>SyncFactoryException</code>
is thrown.
<p>
<li>If a <code>RowSet</code> object does not specify a 
<code>SyncProvider</code> implementation and no additional 
<code>SyncProvider</code> implementations are available, the reference 
implementation providers are supplied.
</ol>
<h3>2.0 Registering <code>SyncProvider</code> Implementations</h3>
<p>
Both vendors and developers can register <code>SyncProvider</code> 
implementations using one of the following mechanisms.
<ul>
<LI><B>Using the command line</B><BR>
The name of the provider is supplied on the command line, which will add 
the provider to the system properties.
For example:
<PRE> 
   -Drowset.provider.classname=com.fred.providers.HighAvailabilityProvider
</PRE> 
<li><b>Using the Standard Properties File</b><BR> 
The reference implementation is targeted 
to ship with J2SE 1.5, which will include an additional resource file 
that may be edited by hand. Here is an example of the properties file
included in the reference implementation:
<PRE>
  #Default JDBC RowSet sync providers listing
  #

  # Optimistic synchronization provider
  rowset.provider.classname.0=com.sun.rowset.providers.RIOptimisticProvider
  rowset.provider.vendor.0=Sun Microsystems Inc
  rowset.provider.version.0=1.0
  
  # XML Provider using standard XML schema
  rowset.provider.classname.1=com.sun.rowset.providers.RIXMLProvider
  rowset.provider.vendor.1=Sun Microsystems Inc.
  rowset.provider.version.1=1.0
</PRE>
The <code>SyncFactory</code> checks this file and registers the 
<code>SyncProvider</code> implementations that it contains. A
developer or vendor can add other implementations to this file.
For example, here is a possible addition:
<PRE>
    rowset.provider.classname.2=com.fred.providers.HighAvailabilityProvider
    rowset.provider.vendor.2=Fred, Inc.
    rowset.provider.version.2=1.0
</PRE>
<p>
<li><b>Using a JNDI Context</b><BR>
Available providers can be registered on a JNDI
context, and the <code>SyncFactory</code> will attempt to load 
<code>SyncProvider</code> implementations from that JNDI context.
For example, the following code fragment registers a provider implementation
on a JNDI context.  This is something a deployer would normally do. In this
example, <code>MyProvider</code> is being registered on a CosNaming
namespace, which is the namespace used by J2EE resources.
<PRE>
   import javax.naming.*;
   
   Hashtable svrEnv = new  Hashtable();
   srvEnv.put(Context.INITIAL_CONTEXT_FACTORY, \"CosNaming\");

   Context ctx = new InitialContext(svrEnv);
   com.fred.providers.MyProvider = new MyProvider();
   ctx.rebind(\"providers/MyProvider\", syncProvider);
</PRE>
</ul> 
Next, an application will register the JNDI context with the 
<code>SyncFactory</code> instance.  This allows the <code>SyncFactory</code>
to browse within the JNDI context looking for <code>SyncProvider</code>
implementations. 
<PRE>
   Hashtable appEnv = new Hashtable();
   appEnv.put(Context.INITIAL_CONTEXT_FACTORY, \"CosNaming\");
   appEnv.put(Context.PROVIDER_URL, \"iiop://hostname/providers\");
   Context ctx = new InitialContext(appEnv);

   SyncFactory.registerJNDIContext(ctx);
</PRE>
If a <code>RowSet</code> object attempts to obtain a <code>MyProvider</code>
object, the <code>SyncFactory</code> will try to locate it. First it searches
for it in the system properties, then it looks in the resource files, and
finally it checks the JNDI context that has been set. The <code>SyncFactory</code>
instance verifies that the requested provider is a valid extension of the
<code>SyncProvider</code> abstract class and then gives it to the 
<code>RowSet</code> object. In the following code fragment, a new
<code>CachedRowSet</code> object is created and initialized with
<i>env</i>, which contains the binding to <code>MyProvider</code>.
<PRE>
   Hashtable env = new Hashtable();
   env.put(SyncFactory.ROWSET_SYNC_PROVIDER, \"com.fred.providers.MyProvider\");
   CachedRowSet crs = new com.sun.rowset.CachedRowSetImpl(env); 
</PRE>
Further details on these mechanisms are available in the 
<code>javax.sql.rowset.spi</code> package specification.

@author  Jonathan Bruce
@see javax.sql.rowset.spi.SyncProvider
@see javax.sql.rowset.spi.SyncFactoryException"
      classrelation 2236571 // syncFactory (<unidirectional association>)
	relation 2236571 --->
	  a role_name "syncFactory" init_value "=  null" class_relation private
	    comment " 
The variable that represents the singleton instance
of the <code>SyncFactory</code> class.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2236571 // syncFactory (<unidirectional association>)
	  b parent class_ref 1098907 // SyncFactory
      end

      operation 8822299 "SyncFactory"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SyncFactory</code> object, which is the singleton
instance.
Having a private constructor guarantees that no more than
one <code>SyncProvider</code> object can exist at a time."
      end

      attribute 3167259 "ROWSET_SYNC_PROVIDER"
	class_attribute public explicit_type "String"
	init_value "=  
	\"rowset.provider.classname\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The standard property-id for a synchronization provider implementation
name.
"
      end

      attribute 3167387 "ROWSET_SYNC_VENDOR"
	class_attribute public explicit_type "String"
	init_value "=  
	\"rowset.provider.vendor\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The standard property-id for a synchronization provider implementation 
vendor name.
"
      end

      attribute 3167515 "ROWSET_SYNC_PROVIDER_VERSION"
	class_attribute public explicit_type "String"
	init_value "=  
	\"rowset.provider.version\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The standard property-id for a synchronization provider implementation
version tag. 
"
      end

      attribute 3167643 "ROWSET_PROPERTIES"
	class_attribute private explicit_type "String"
	init_value "=  \"rowset.properties\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The standard resource file name.
"
      end

      attribute 3167771 "default_provider"
	class_attribute private explicit_type "String"
	init_value "=  
        \"com.sun.rowset.providers.RIOptimisticProvider\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The RI Optimistic Provider.     
"
      end

      classrelation 2236699 // ic (<unidirectional association>)
	relation 2236699 --->
	  a role_name "ic" class_relation private
	    comment "
The initial JNDI context where <code>SyncProvider</code> implementations can
be stored and from which they can be invoked.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2236699 // ic (<unidirectional association>)
	  b parent class_ref 289819 // Context
      end

      classrelation 2236827 // rsLogger (<unidirectional association>)
	relation 2236827 --->
	  a role_name "rsLogger" class_relation private
	    comment "
The <code>Logger</code> object to be used by the <code>SyncFactory</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2236827 // rsLogger (<unidirectional association>)
	  b parent class_ref 241563 // Logger
      end

      classrelation 2236955 // rsLevel (<unidirectional association>)
	relation 2236955 --->
	  a role_name "rsLevel" class_relation private
	    comment "


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2236955 // rsLevel (<unidirectional association>)
	  b parent class_ref 241691 // Level
      end

      classrelation 2237083 // implementations (<unidirectional association>)
	relation 2237083 --->
	  a role_name "implementations" class_relation private
	    comment "
The registry of available <code>SyncProvider</code> implementations.
See section 2.0 of the class comment for <code>SyncFactory</code> for an
explanation of how a provider can be added to this registry.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2237083 // implementations (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end

      attribute 3167899 "logSync"
	class_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Internal sync object used to maintain the SPI as a singleton
"
      end

      classrelation 2237211 // logWriter (<unidirectional association>)
	relation 2237211 --->
	  a role_name "logWriter" init_value "=  null" class_relation private
	    comment "
Internal PrintWriter field for logging facility

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2237211 // logWriter (<unidirectional association>)
	  b parent class_ref 221595 // PrintWriter
      end

      operation 8822427 "registerProvider"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "providerID" explicit_type "String"
	nexceptions 1
	  exception class_ref 1099035 // SyncFactoryException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the the given synchronization provider to the factory register. Guidelines
are provided in the <code>SyncProvider</code> specification for the 
required naming conventions for <code>SyncProvider</code> 
implementations.
<p>
Synchronization providers bound to a JNDI context can be 
registered by binding a SyncProvider instance to a JNDI namespace.     
<ul>
<pre>
SyncProvider p = new MySyncProvider();
InitialContext ic = new InitialContext();
ic.bind (\"jdbc/rowset/MySyncProvider\", p);
</pre>
</ul>
Furthermore, an initial JNDI context should be set with the 
<code>SyncFactory</code> using the <code>setJNDIContext</code> method.
The <code>SyncFactory</code> leverages this context to search for 
available <code>SyncProvider</code> objects bound to the JNDI
context and its child nodes.
     
@param providerID A <code>String</code> object with the unique ID of the 
            synchronization provider being registered
@throws SyncFactoryException if an attempt is made to supply an empty
        or null provider name
@see #setJNDIContext"
      end

      operation 8822555 "getSyncFactory"
	class_operation public return_type class_ref 1098907 // SyncFactory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>SyncFactory</code> singleton.

@return the <code>SyncFactory</code> instance"
      end

      operation 8822683 "unregisterProvider"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "providerID" explicit_type "String"
	nexceptions 1
	  exception class_ref 1099035 // SyncFactoryException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the designated currently registered synchronization provider from the 
Factory SPI register.

@param providerID The unique-id of the synchronization provider
@throws SyncFactoryException If an attempt is made to
unregister a SyncProvider implementation that was not registered."
      end

      attribute 3168027 "colon"
	class_attribute private explicit_type "String"
	init_value "=  \":\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3168155 "strFileSep"
	class_attribute private explicit_type "String"
	init_value "=  \"/\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8822811 "initMapIfNecessary"
	class_operation private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1099035 // SyncFactoryException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 3168283 "jndiCtxEstablished"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The internal boolean switch that indicates whether a JNDI 
context has been established or not.
"
      end

      attribute 3168411 "debug"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The internal debug switch.
"
      end

      attribute 3168539 "providerImplIndex"
	class_attribute private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Internal registry count for the number of providers contained in the 
registry.
"
      end

      operation 8822939 "parseProperties"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 154907 // Properties
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal handler for all standard property parsing. Parses standard 
ROWSET properties and stores lazy references into the the internal registry. "
      end

      operation 8823067 "getPropertyNames"
	class_operation private explicit_return_type "String"
	nparams 1
	  param inout name "append" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used by the parseProperties methods to disassemble each property tuple."
      end

      operation 8823195 "getPropertyNames"
	class_operation private explicit_return_type "String"
	nparams 2
	  param inout name "append" explicit_type "boolean"
	  param in name "propertyIndex" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disassembles each property and its associated value. Also handles 
overloaded property names that contain indexes."
      end

      operation 8823323 "showImpl"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "impl" type class_ref 1099163 // ProviderImpl
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal debug method that outputs the registry contents."
      end

      operation 8823451 "getInstance"
	class_operation public return_type class_ref 1096347 // SyncProvider
	nparams 1
	  param in name "providerID" explicit_type "String"
	nexceptions 1
	  exception class_ref 1099035 // SyncFactoryException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>SyncProvider</code> instance identified by <i>providerID</i>.

@param providerID the unique identifier of the provider
@return a <code>SyncProvider</code> implementation
@throws SyncFactoryException If the SyncProvider cannot be found or 
some error was encountered when trying to invoke this provider."
      end

      operation 8823579 "getRegisteredProviders"
	class_operation public return_type class_ref 144411 // Enumeration
	nparams 0
	nexceptions 1
	  exception class_ref 1099035 // SyncFactoryException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SyncProvider> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an Enumeration of currently registered synchronization 
providers.  A <code>RowSet</code> implementation may use any provider in
the enumeration as its <code>SyncProvider</code> object.
<p>
At a minimum, the reference synchronization provider allowing 
RowSet content data to be stored using a JDBC driver should be
possible.

@return Enumeration  A enumeration of available synchronization 
providers that are registered with this Factory"
      end

      operation 8823707 "setLogger"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "logger" type class_ref 241563 // Logger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the logging object to be used by the <code>SyncProvider</code> 
implementation provided by the <code>SyncFactory</code>. All
<code>SyncProvider</code> implementations can log their events to 
this object and the application can retrieve a handle to this 
object using the <code>getLogger</code> method.

@param logger A Logger object instance"
      end

      operation 8823835 "setLogger"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "logger" type class_ref 241563 // Logger
	  param inout name "level" type class_ref 241691 // Level
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the logging object that is used by <code>SyncProvider</code>
implementations provided by the <code>SyncFactory</code> SPI. All
<code>SyncProvider</code> implementations can log their events  
to this object and the application can retrieve a handle to this
object using the <code>getLogger</code> method.

@param logger a Logger object instance
@param level a Level object instance indicating the degree of logging
required"
      end

      operation 8823963 "getLogger"
	class_operation public return_type class_ref 241563 // Logger
	nparams 0
	nexceptions 1
	  exception class_ref 1099035 // SyncFactoryException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the logging object for applications to retrieve 
synchronization events posted by SyncProvider implementations.

@throws SyncFactoryException if no logging object has been set."
      end

      operation 8824091 "setJNDIContext"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "ctx" type class_ref 289819 // Context
	nexceptions 1
	  exception class_ref 1099035 // SyncFactoryException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the initial JNDI context from which SyncProvider implementations 
can be retrieved from a JNDI namespace

@param ctx a valid JNDI context
@throws SyncFactoryException if the supplied JNDI context is null"
      end

      operation 8824219 "initJNDIContext"
	class_operation private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1099035 // SyncFactoryException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Controls JNDI context intialization.

@throws SyncFactoryException if an error occurs parsing the JNDI context"
      end

      attribute 3168667 "lazyJNDICtxRefresh"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Internal switch indicating whether the JNDI namespace should be re-read.
"
      end

      operation 8824347 "parseJNDIContext"
	class_operation private return_type class_ref 154907 // Properties
	nparams 0
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the set JNDI Context and passes bindings to the enumerateBindings
method when complete."
      end

      operation 8824475 "enumerateBindings"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "bindings" type class_ref 565659 // NamingEnumeration
	  param inout name "properties" type class_ref 154907 // Properties
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans each binding on JNDI context and determines if any binding is an 
instance of SyncProvider, if so, add this to the registry and continue to
scan the current context using a re-entrant call to this method until all
bindings have been enumerated.     "
      end
    end

    class 1099035 "SyncFactoryException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Indicates an error with <code>SyncFactory</code> mechanism. A disconnected
RowSet implementation cannot be used  without a <code>SyncProvider</code>
being successfully instantiated

@version 0.2
@author Jonathan Bruce
@see javax.sql.rowset.spi.SyncFactory
@see javax.sql.rowset.spi.SyncFactoryException"
      classrelation 2237467 // <generalisation>
	relation 2237467 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2237467 // <generalisation>
	  b parent class_ref 979995 // SQLException
      end

      operation 8827803 "SyncFactoryException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates new <code>SyncFactoryException</code> without detail message."
      end

      operation 8827931 "SyncFactoryException"
	public explicit_return_type ""
	nparams 1
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>SyncFactoryException</code> with the specified 
detail message.

@param msg the detail message."
      end

      attribute 3170715 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -4354595476433200352L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1099163 "ProviderImpl"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Internal class that defines the lazy reference construct for each registered 
SyncProvider implementation."
      classrelation 2237339 // <generalisation>
	relation 2237339 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2237339 // <generalisation>
	  b parent class_ref 1096347 // SyncProvider
      end

      attribute 3170203 "className"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3170331 "vendorName"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3170459 "ver"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3170587 "index"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8825883 "setClassname"
	public explicit_return_type "void"
	nparams 1
	  param in name "classname" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8826011 "getClassname"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8826139 "setVendor"
	public explicit_return_type "void"
	nparams 1
	  param in name "vendor" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8826267 "getVendor"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8826395 "setVersion"
	public explicit_return_type "void"
	nparams 1
	  param in name "providerVer" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8826523 "getVersion"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8826651 "setIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8826779 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8826907 "getDataSourceLock"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1096219 // SyncProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8827035 "getProviderGrade"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8827163 "getProviderID"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8827291 "getRowSetReader"
	public return_type class_ref 1095323 // RowSetReader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "public javax.sql.RowSetInternal getRowSetInternal() {  
try 
{          
return SyncFactory.getInstance(className).getRowSetInternal();
} catch(SyncFactoryException sfEx) {
// 
}
}"
      end

      operation 8827419 "getRowSetWriter"
	public return_type class_ref 1095451 // RowSetWriter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8827547 "setDataSourceLock"
	public explicit_return_type "void"
	nparams 1
	  param in name "param" explicit_type "int"
	nexceptions 1
	  exception class_ref 1096219 // SyncProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8827675 "supportsUpdatableView"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1099291 "SyncResolver"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Defines a framework that allows applications to use a manual decision tree
to decide what should be done when a synchronization conflict occurs.
Although it is not mandatory for 
applications to resolve synchronization conflicts manually, this
framework provides the means to delegate to the application when conflicts 
arise.
<p>
Note that a conflict is a situation where the <code>RowSet</code> object's original
values for a row do not match the values in the data source, which indicates that 
the data source row has been modified since the last synchronization. Note also that
a <code>RowSet</code> object's original values are the values it had just prior to the
the last synchronization, which are not necessarily its initial values.
<p>

<H2>Description of a <code>SyncResolver</code> Object</H2>

A <code>SyncResolver</code> object is a specialized <code>RowSet</code> object
that implements the <code>SyncResolver</code> interface. 
It <b>may</b> operate as either a connected <code>RowSet</code> object (an
implementation of the <code>JdbcRowSet</code> interface) or a connected
<code>RowSet</code> object (an implementation of the
<code>CachedRowSet</code> interface or one of its subinterfaces). For information
on the subinterfaces, see the 
<a href=\"../package-summary.html\"><code>javax.sql.rowset</code></a> package
description. The reference implementation for <code>SyncResolver</code> implements
the <code>CachedRowSet</code> interface, but other implementations
may choose to implement the <code>JdbcRowSet</code> interface to satisfy 
particular needs.
<P> 
After an application has attempted to synchronize a <code>RowSet</code> object with
the data source (by calling the <code>CachedRowSet</code>
method <code>acceptChanges</code>), and one or more conflicts have been found,
a rowset's <code>SyncProvider</code> object creates an instance of 
<code>SyncResolver</code>. This new <code>SyncResolver</code> object has
the same number of rows and columns as the
<code>RowSet</code> object that was attempting the synchronization. The
<code>SyncResolver</code> object contains the values from the data source that caused
the conflict(s) and <code>null</code> for all other values.
In addition, it contains information about each conflict.
<P>

<H2>Getting and Using a <code>SyncResolver</code> Object</H2>

When the method <code>acceptChanges</code> encounters conflicts, the 
<code>SyncProvider</code> object creates a <code>SyncProviderException</code> 
object and sets it with the new <code>SyncResolver</code> object. The method
<code>acceptChanges</code> will throw this exception, which
the application can then catch and use to retrieve the 
<code>SyncResolver</code> object it contains. The following code snippet uses the
<code>SyncProviderException</code> method <code>getSyncResolver</code> to get
the <code>SyncResolver</code> object <i>resolver</i>.  
<PRE>
    } catch (SyncProviderException spe) {
        SyncResolver resolver = spe.getSyncResolver();
    ...
    }
</PRE>
<P>
With <i>resolver</i> in hand, an application can use it to get the information
it contains about the conflict or conflicts.  A <code>SyncResolver</code> object
such as <i>resolver</i> keeps
track of the conflicts for each row in which there is a conflict.  It also places a
lock on the table or tables affected by the rowset's command so that no more
conflicts can occur while the current conflicts are being resolved.
<P>
The following kinds of information can be obtained from a <code>SyncResolver</code>
object: 
<P>
   <LI>What operation was being attempted when a conflict occurred<BR>
The <code>SyncProvider</code> interface defines four constants 
describing states that may occur. Three
constants describe the type of operation (update, delete, or insert) that a 
<code>RowSet</code> object was attempting to perform when a conflict was discovered,
and the fourth indicates that there is no conflict. 
These constants are the possible return values when a <code>SyncResolver</code> object
calls the method <code>getStatus</code>.
<PRE>
    int operation = resolver.getStatus();
</PRE>
<P>
   <LI>The value in the data source that caused a conflict<BR>
A conflict exists when a value that a <code>RowSet</code> object has changed
and is attempting to write to the data source
has also been changed in the data source since the last synchronization.  An
application can call the <code>SyncResolver</code> method 
<code>getConflictValue</code > to retrieve the
value in the data source that is the cause of the conflict because the values in a
<code>SyncResolver</code> object are the conflict values from the data source. 
<PRE>
    java.lang.Object conflictValue = resolver.getConflictValue(2);
</PRE>
Note that the column in <i>resolver</i> can be designated by the column number,
as is done in the preceding line of code, or by the column name.
</UL>
<P>
With the information retrieved from the methods <code>getStatus</code> and
<code>getConflictValue</code>, the application may make a determination as to
which value should be persisted in the data source. The application then calls the 
<code>SyncResolver</code> method <code>setResolvedValue</code>, which sets the value
to be persisted in the <code>RowSet</code> object and also in the data source.
<PRE>
    resolver.setResolvedValue(\"DEPT\", 8390426);
</PRE>
In the preceding line of code,
the column name designates the column in the <code>RowSet</code> object
that is to be set with the given value. The column number can also be used to 
designate the column.
<P>
An application calls the method <code>setResolvedValue</code> after it has
resolved all of the conflicts in the current conflict row and repeats this process
for each conflict row in the <code>SyncResolver</code> object.
<P>

<H2>Navigating a <code>SyncResolver</code> Object</H2>

Because a <code>SyncResolver</code> object is a <code>RowSet</code> object, an
application can use all of the <code>RowSet</code> methods for moving the cursor
to navigate a <code>SyncResolver</code> object. For example, an application can
use the <code>RowSet</code> method <code>next</code> to get to each row and then 
call the <code>SyncResolver</code> method <code>getStatus</code> to see if the row
contains a conflict.  In a row with one or more conflicts, the application can 
iterate through the columns to find any non-null values, which will be the values
from the data source that are in conflict.
<P> 
To make it easier to navigate a <code>SyncResolver</code> object, especially when 
there are large numbers of rows with no conflicts, the <code>SyncResolver</code>
interface defines the methods <code>nextConflict</code> and
<code>previousConflict</code>, which move only to rows
that contain at least one conflict value. Then an application can call the 
<code>SyncResolver</code> method <code>getConflictValue</code>, supplying it
with the column number, to get the conflict value itself. The code fragment in the
next section gives an example.

<H2>Code Example</H2>

The following code fragment demonstrates how a disconnected <code>RowSet</code>
object <i>crs</i> might attempt to synchronize itself with the
underlying data source and then resolve the conflicts. In the <code>try</code>
block, <i>crs</i> calls the method <code>acceptChanges</code>, passing it the
<code>Connection</code> object <i>con</i>.  If there are no conflicts, the
changes in <i>crs</i> are simply written to the data source.  However, if there
is a conflict, the method <code>acceptChanges</code> throws a
<code>SyncProviderException</code> object, and the 
<code>catch</code> block takes effect.  In this example, which
illustrates one of the many ways a <code>SyncResolver</code> object can be used,
the <code>SyncResolver</code> method <code>nextConflict</code> is used in a
<code>while</code> loop. The loop will end when <code>nextConflict</code> returns
<code>false</code>, which will occur when there are no more conflict rows in the
<code>SyncResolver</code> object <i>resolver</i>. In This particular code fragment,
<i>resolver</i> looks for rows that have update conflicts (rows with the status
<code>SyncResolver.UPDATE_ROW_CONFLICT</code>), and the rest of this code fragment
executes only for rows where conflicts occurred because <i>crs</i> was attempting an
update.  
<P>
After the cursor for <i>resolver</i> has moved to the next conflict row that
has an update conflict, the method <code>getRow</code> indicates the number of the 
current row, and
the cursor for the <code>CachedRowSet</code> object <i>crs</i> is moved to 
the comparable row in <i>crs</i>. By iterating
through the columns of that row in both <i>resolver</i> and <i>crs</i>, the conflicting
values can be retrieved and compared to decide which one should be persisted. In this
code fragment, the value in <i>crs</i> is the one set as the resolved value, which means
that it will be used to overwrite the conflict value in the data source.

<PRE>
    try {

        crs.acceptChanges(con);

    } catch (SyncProviderException spe) {

        SyncResolver resolver = spe.getSyncResolver();

        Object crsValue;  // value in the <code>RowSet</code> object 
        Object resolverValue:  // value in the <code>SyncResolver</code> object
        Object resolvedValue:  // value to be persisted

        while(resolver.nextConflict())  {
            if(resolver.getStatus() == SyncResolver.UPDATE_ROW_CONFLICT)  {
                int row = resolver.getRow();
                crs.absolute(row);

                int colCount = crs.getMetaData().getColumnCount();
                for(int j = 1; j <= colCount; j++) {
                    if (resolver.getConflictValue(j) != null)  {
                        crsValue = crs.getObject(j);
                        resolverValue = resolver.getConflictValue(j);
                        . . . 
                        // compare crsValue and resolverValue to determine
                        // which should be the resolved value (the value to persist)
                        resolvedValue = crsValue;

                        resolver.setResolvedValue(j, resolvedValue);
                     } 
                 } 
             }
         }
     }
</PRE>
@author  Jonathan Bruce"
      classrelation 2237851 // <generalisation>
	relation 2237851 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2237851 // <generalisation>
	  b parent class_ref 1094683 // RowSet
      end

      attribute 3170971 "UPDATE_ROW_CONFLICT"
	class_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a conflict occurred while the <code>RowSet</code> object was
attempting to update a row in the data source. 
The values in the data source row to be updated differ from the
<code>RowSet</code> object's original values for that row, which means that
the row in the data source has been updated or deleted since the last 
synchronization. 
"
      end

      attribute 3171099 "DELETE_ROW_CONFLICT"
	class_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a conflict occurred while the <code>RowSet</code> object was
attempting to delete a row in the data source.
The values in the data source row to be updated differ from the
<code>RowSet</code> object's original values for that row, which means that 
the row in the data source has been updated or deleted since the last 
synchronization. 
"
      end

      attribute 3171227 "INSERT_ROW_CONFLICT"
	class_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a conflict occurred while the <code>RowSet</code> object was
attempting to insert a row into the data source.  This means that a
row with the same primary key as the row to be inserted has been inserted
into the data source since the last synchronization.
"
      end

      attribute 3171355 "NO_ROW_CONFLICT"
	class_attribute public explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that <b>no</b> conflict occured while the <code>RowSet</code> object
was attempting to update, delete or insert a row in the data source. The values in
the <code>SyncResolver</code> will contain <code>null</code> values only as an indication
that no information in pertitent to the conflict resolution in this row.
"
      end

      operation 8828699 "getStatus"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the conflict status of the current row of this <code>SyncResolver</code>,
which indicates the operation
the <code>RowSet</code> object was attempting when the conflict occurred.

@return one of the following constants:
        <code>SyncResolver.UPDATE_ROW_CONFLICT</code>,
        <code>SyncResolver.DELETE_ROW_CONFLICT</code>, 
        <code>SyncResolver.INSERT_ROW_CONFLICT</code>, or
        <code>SyncResolver.NO_ROW_CONFLICT</code>"
      end

      operation 8828827 "getConflictValue"
	public explicit_return_type "Object"
	nparams 1
	  param in name "index" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value in the designated column in the current row of this
<code>SyncResolver</code> object, which is the value in the data source
that caused a conflict.

@param index an <code>int</code> designating the column in this row of this
       <code>SyncResolver</code> object from which to retrieve the value 
       causing a conflict
@return the value of the designated column in the current row of this
        <code>SyncResolver</code> object 
@throws SQLException if a database access error occurs     "
      end

      operation 8828955 "getConflictValue"
	public explicit_return_type "Object"
	nparams 1
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value in the designated column in the current row of this
<code>SyncResolver</code> object, which is the value in the data source
that caused a conflict.

@param columnName a <code>String</code> object designating the column in this row of this
       <code>SyncResolver</code> object from which to retrieve the value 
       causing a conflict
@return the value of the designated column in the current row of this
        <code>SyncResolver</code> object 
@throws SQLException if a database access error occurs     "
      end

      operation 8829083 "setResolvedValue"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets <i>obj</i> as the value in column <i>index</i> in the current row of the
<code>RowSet</code> object that is being synchronized. <i>obj</i>
is set as the value in the data source internally.

@param index an <code>int</code> giving the number of the column into which to
       set the value to be persisted
@param obj an <code>Object</code> that is the value to be set in the 
       <code>RowSet</code> object and persisted in the data source
@throws SQLException if a database access error occurs"
      end

      operation 8829211 "setResolvedValue"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnName" explicit_type "String"
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets <i>obj</i> as the value in column <i>columnName</i> in the current row of the
<code>RowSet</code> object that is being synchronized. <i>obj</i>
is set as the value in the data source internally.

@param columnName a <code>String</code> object giving the name of the column 
       into which to set the value to be persisted
@param obj an <code>Object</code> that is the value to be set in the 
       <code>RowSet</code> object and persisted in the data source
@throws SQLException if a database access error occurs"
      end

      operation 8829339 "nextConflict"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor down from its current position to the next row that contains
a conflict value. A <code>SyncResolver</code> object's
cursor is initially positioned before the first conflict row; the first call to the 
method <code>nextConflict</code> makes the first conflict row the current row; 
the second call makes the second conflict row the current row, and so on.
<p>
A call to the method <code>nextConflict</code> will implicitly close 
an input stream if one is open and will clear the <code>SyncResolver</code> 
object's warning chain.

@return <code>true</code> if the new current row is valid; <code>false</code>
        if there are no more rows
@throws SQLException if a database access error occurs or the result set type
    is <code>TYPE_FORWARD_ONLY</code>
"
      end

      operation 8829467 "previousConflict"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor up from its current position to the previous conflict 
row in this <code>SyncResolver</code> object.
<p>
A call to the method <code>previousConflict</code> will implicitly close 
an input stream if one is open and will clear the <code>SyncResolver</code> 
object's warning chain.

@return <code>true</code> if the cursor is on a valid row; <code>false</code>
    if it is off the result set 
@throws SQLException if a database access error occurs or the result set type
    is <code>TYPE_FORWARD_ONLY</code>"
      end
    end

    class 1099419 "TransactionalWriter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized interface that facilitates an extension of the standard
<code>SyncProvider</code> abstract class so that it has finer grained 
transaction control.
<p>
If one or more disconnected <code>RowSet</code> objects are particating 
in a global transaction, they may wish to coordinate their synchronization
commits to preserve data integrity and reduce the number of 
sychronization exceptions. If this is the case, an application should set
the <code>CachedRowSet</code> constant <code>COMMIT_ON_ACCEPT_CHANGES</code>
to <code>false</code> and use the <code>commit</code> and <code>rollback</code> 
methods defined in this interface to manage transaction boundaries."
      classrelation 2237979 // <generalisation>
	relation 2237979 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2237979 // <generalisation>
	  b parent class_ref 1095451 // RowSetWriter
      end

      operation 8829595 "commit"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes permanent all changes that have been performed by the
<code>acceptChanges</code> method since the last call to either the
<code>commit</code> or <code>rollback</code> methods.
This method should be used only when auto-commit mode has been disabled.

@throws SQLException  if a database access error occurs or the 
        <code>Connection</code> object within this <code>CachedRowSet</code> 
        object is in auto-commit mode"
      end

      operation 8829723 "rollback"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Undoes all changes made in the current transaction. This method should be
used only when auto-commit mode has been disabled.

@throws SQLException if a database access error occurs or the <code>Connection</code>
        object within this <code>CachedRowSet</code> object is in auto-commit mode"
      end

      operation 8829851 "rollback"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 982171 // Savepoint
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Undoes all changes made in the current transaction made prior to the given
<code>Savepoint</code> object.  This method should be used only when auto-commit
mode has been disabled.

@param s a <code>Savepoint</code> object marking a savepoint in the current
       transaction.  All changes made before <i>s</i> was set will be undone.
       All changes made after <i>s</i> was set will be made permanent.
@throws SQLException if a database access error occurs or the <code>Connection</code>
        object within this <code>CachedRowSet</code> object is in auto-commit mode"
      end
    end

    class 1099547 "XmlReader"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized interface that facilitates an extension of the 
<code>SyncProvider</code> abstract class for XML orientated 
synchronization providers.
<P>
<code>SyncProvider</code>  implementations that supply XML data reader
capabilities such as output XML stream capabilities can implement this
interface to provider standard <code>XmlReader</code> objects to
<code>WebRowSet</code> implementations.
<p>
An <code>XmlReader</code> object is registered as the 
XML reader for a <code>WebRowSet</code> by being assigned to the
rowset's <code>xmlReader</code> field. When the <code>WebRowSet</code>
object's <code>readXml</code> method is invoked, it in turn invokes
its XML reader's <code>readXML</code> method."
      classrelation 2238107 // <generalisation>
	relation 2238107 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2238107 // <generalisation>
	  b parent class_ref 1095323 // RowSetReader
      end

      operation 8829979 "readXML"
	public explicit_return_type "void"
	nparams 2
	  param inout name "caller" type class_ref 1096731 // WebRowSet
	  param inout name "reader" type class_ref 364827 // Reader
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads and parses the given <code>WebRowSet</code> object from the given
input stream in XML format. The <code>xmlReader</code> field of the
given <code>WebRowSet</code> object must contain this
<code>XmlReader</code> object.
<P>
If a parsing error occurs, the exception that is thrown will
include information about the location of the error in the
original XML document.

@param caller the <code>WebRowSet</code> object to be parsed, whose
       <code>xmlReader</code> field must contain a reference to
       this <code>XmlReader</code> object
@param reader the <code>java.io.Reader</code> object from which
       <code>caller</code> will be read
@throws SQLException if a database access error occurs or
           this <code>XmlReader</code> object is not the reader
           for the given rowset"
      end
    end

    class 1099675 "XmlWriter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized interface that facilitates an extension of the 
<code>SyncProvider</code> abstract class for XML orientated 
synchronization providers.
<p>
<code>SyncProvider</code>  implementations that supply XML data writer 
capabilities such as output XML stream capabilities can implement this
interface to provider standard <code>XmlWriter</code> objects to
<code>WebRowSet</code> implementations.
<P>
Writing a <code>WebRowSet</code> object includes printing the
rowset's data, metadata, and properties, all with the
appropriate XML tags."
      classrelation 2238235 // <generalisation>
	relation 2238235 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2238235 // <generalisation>
	  b parent class_ref 1095451 // RowSetWriter
      end

      operation 8830107 "writeXML"
	public explicit_return_type "void"
	nparams 2
	  param inout name "caller" type class_ref 1096731 // WebRowSet
	  param inout name "writer" type class_ref 446619 // Writer
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the given <code>WebRowSet</code> object to the specified
<code>java.io.Writer</code> output stream as an XML document.
This document includes the rowset's data, metadata, and properties
plus the appropriate XML tags.
<P>
The <code>caller</code> parameter must be a <code>WebRowSet</code>
object whose <code>XmlWriter</code> field contains a reference to
this <code>XmlWriter</code> object.

@param caller the <code>WebRowSet</code> instance to be written,
       for which this <code>XmlWriter</code> object is the writer
@param writer the <code>java.io.Writer</code> object that serves
       as the output stream for writing <code>caller</code> as
       an XML document
@throws SQLException if a database access error occurs or
           this <code>XmlWriter</code> object is not the writer
           for the given <code>WebRowSet</code> object"
      end
    end
  end

  deploymentview 173083 "spi"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 845339 "SyncFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
import java.util.Hashtable;
import java.util.Enumeration;
import java.util.Vector;
import java.util.Properties;
import java.util.Collection;
import java.util.StringTokenizer;
import java.util.logging.*;
import java.util.*;
import java.sql.*;
import javax.sql.*;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FileNotFoundException;
import javax.naming.*;
${definition}"
      associated_classes
	class_ref 1098907 // SyncFactory
	class_ref 1099163 // ProviderImpl
      end
      comment "@(#)SyncFactory.java	1.13 04/07/17
@(#)SyncFactory.java	1.11 04/06/25

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 845467 "SyncProvider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.sql.*;
${definition}"
      associated_classes
	class_ref 1096347 // SyncProvider
      end
      comment "@(#)SyncProvider.java	1.9 04/03/11

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 845595 "SyncFactoryException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
${definition}"
      associated_classes
	class_ref 1099035 // SyncFactoryException
      end
      comment "@(#)SyncFactoryException.java	1.4 04/03/11

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 845723 "SyncProviderException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
import javax.sql.rowset.*;
${definition}"
      associated_classes
	class_ref 1096219 // SyncProviderException
      end
      comment "@(#)SyncProviderException.java	1.7 04/05/29

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 845851 "SyncResolver"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.sql.RowSet;
import java.sql.SQLException;
${definition}"
      associated_classes
	class_ref 1099291 // SyncResolver
      end
      comment "@(#)SyncResolver.java	1.4 04/02/27

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 845979 "TransactionalWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
import java.io.Reader;
import javax.sql.RowSetWriter;
import javax.sql.rowset.*;
import java.sql.Savepoint;
${definition}"
      associated_classes
	class_ref 1099419 // TransactionalWriter
      end
      comment "@(#)TransactionalWriter.java	1.3 04/02/27

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 846107 "XmlReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
import java.io.Reader;
import javax.sql.RowSetReader;
import javax.sql.rowset.*;
${definition}"
      associated_classes
	class_ref 1099547 // XmlReader
      end
      comment "@(#)XmlReader.java	1.3 03/12/19 

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 846235 "XmlWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
import java.io.Writer;
import javax.sql.RowSetWriter;
import javax.sql.rowset.*;
${definition}"
      associated_classes
	class_ref 1099675 // XmlWriter
      end
      comment "@(#)XmlWriter.java	1.3 03/12/19 

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
