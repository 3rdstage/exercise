class JViewport
!!!2854427.java!!!	JViewport()
        super();
        setLayout(createLayoutManager());
	setOpaque(true);
        updateUI();
!!!2854555.java!!!	getUI() : ViewportUI
        return (ViewportUI)ui;
!!!2854683.java!!!	setUI(inout ui : ViewportUI) : void
        super.setUI(ui);
!!!2854811.java!!!	updateUI() : void
        setUI((ViewportUI)UIManager.getUI(this));
!!!2854939.java!!!	getUIClassID() : String
        return uiClassID;
!!!2855067.java!!!	addImpl(inout child : Component, inout constraints : Object, in index : int) : void
      setView(child);
!!!2855195.java!!!	remove(inout child : Component) : void
        child.removeComponentListener(viewListener);
        super.remove(child);
!!!2855323.java!!!	scrollRectToVisible(inout contentRect : Rectangle) : void
        Component view = getView();

        if (view == null) {
            return;
        } else {
	    if (!view.isValid()) {
		// If the view is not valid, validate. scrollRectToVisible
		// may fail if the view is not valid first, contentRect
		// could be bigger than invalid size.
		validateView();
	    }
            int     dx = 0, dy = 0;

            dx = positionAdjustment(getWidth(), contentRect.width, contentRect.x);
            dy = positionAdjustment(getHeight(), contentRect.height, contentRect.y);

            if (dx != 0 || dy != 0) {
                Point viewPosition = getViewPosition();
		Dimension viewSize = view.getSize();
		int startX = viewPosition.x;
		int startY = viewPosition.y;
		Dimension extent = getExtentSize();

		viewPosition.x -= dx;
		viewPosition.y -= dy;
                // Only constrain the location if the view is valid. If the
                // the view isn't valid, it typically indicates the view
                // isn't visible yet and most likely has a bogus size as will
                // we, and therefore we shouldn't constrain the scrolling
                if (view.isValid()) {
                    if (getParent().getComponentOrientation().isLeftToRight()) {
                        if (viewPosition.x + extent.width > viewSize.width) {
                            viewPosition.x = Math.max(0, viewSize.width - extent.width);
                        } else if (viewPosition.x < 0) {
                            viewPosition.x = 0;
                        }
                    } else {
                        if (extent.width > viewSize.width) {
                            viewPosition.x = viewSize.width - extent.width;
                        } else {
                            viewPosition.x = Math.max(0, Math.min(viewSize.width - extent.width, viewPosition.x));
			}
                    }
                    if (viewPosition.y + extent.height > viewSize.height) {
                        viewPosition.y = Math.max(0, viewSize.height -
                                                  extent.height);
                    }
                    else if (viewPosition.y < 0) {
                        viewPosition.y = 0;
                    }
                }
		if (viewPosition.x != startX || viewPosition.y != startY) {
		    setViewPosition(viewPosition);
		    // NOTE: How JViewport currently works with the
		    // backing store is not foolproof. The sequence of
		    // events when setViewPosition
		    // (scrollRectToVisible) is called is to reset the
		    // views bounds, which causes a repaint on the
		    // visible region and sets an ivar indicating
		    // scrolling (scrollUnderway). When
		    // JViewport.paint is invoked if scrollUnderway is
		    // true, the backing store is blitted.  This fails
		    // if between the time setViewPosition is invoked
		    // and paint is received another repaint is queued
		    // indicating part of the view is invalid. There
		    // is no way for JViewport to notice another
		    // repaint has occured and it ends up blitting
		    // what is now a dirty region and the repaint is
		    // never delivered.
		    // It just so happens JTable encounters this
		    // behavior by way of scrollRectToVisible, for
		    // this reason scrollUnderway is set to false
		    // here, which effectively disables the backing
		    // store.
		    scrollUnderway = false;
		}
            }
        }
!!!2855451.java!!!	validateView() : void
        Component validateRoot = null;

	/* Find the first JComponent ancestor of this component whose
	 * isValidateRoot() method returns true.  
	 */
        for(Component c = this; c != null; c = c.getParent()) {
	    if ((c instanceof CellRendererPane) || (c.getPeer() == null)) {
		return;
	    }
	    if ((c instanceof JComponent) &&
		(((JComponent)c).isValidateRoot())) {
		validateRoot = c;
		break;
	    }
	}

	// If no validateRoot, nothing to validate from.
	if (validateRoot == null) {
	    return;
	}

	// Make sure all ancestors are visible.
	Component root = null;
	
	for(Component c = validateRoot; c != null; c = c.getParent()) {
            // We don't check isVisible here, otherwise if the component
            // is contained in something like a JTabbedPane when the
            // component is made visible again it won't have scrolled
            // to the correct location.
	    if (c.getPeer() == null) {
		return;
	    }
	    if ((c instanceof Window) || (c instanceof Applet)) {
		root = c;
		break;
	    }
	}

	// Make sure there is a Window ancestor.
	if (root == null) {
	    return;
	}

	// Validate the root.
	validateRoot.validate();

	// And let the RepaintManager it does not have to validate from
	// validateRoot anymore.
	RepaintManager rm = RepaintManager.currentManager(this);

	if (rm != null) {
	    rm.removeInvalidComponent((JComponent)validateRoot);
	}
!!!2855579.java!!!	positionAdjustment(in parentWidth : int, in childWidth : int, in childAt : int) : int

        //   +-----+
        //   | --- |     No Change
        //   +-----+
        if (childAt >= 0 && childWidth + childAt <= parentWidth)    {
            return 0;
        }

        //   +-----+
        //  ---------   No Change
        //   +-----+
        if (childAt <= 0 && childWidth + childAt >= parentWidth) {
            return 0;
        }

        //   +-----+          +-----+
        //   |   ----    ->   | ----|
        //   +-----+          +-----+
        if (childAt > 0 && childWidth <= parentWidth)    {
            return -childAt + parentWidth - childWidth;
        }

        //   +-----+             +-----+
        //   |  --------  ->     |--------
        //   +-----+             +-----+
        if (childAt >= 0 && childWidth >= parentWidth)   {
            return -childAt;
        }

        //   +-----+          +-----+
        // ----    |     ->   |---- |
        //   +-----+          +-----+
        if (childAt <= 0 && childWidth <= parentWidth)   {
            return -childAt;
        }

        //   +-----+             +-----+
        //-------- |      ->   --------|
        //   +-----+             +-----+
        if (childAt < 0 && childWidth >= parentWidth)    {
            return -childAt + parentWidth - childWidth;
        }

        return 0;
!!!2855707.java!!!	setBorder(inout border : Border) : void
        if (border != null) {
            throw new IllegalArgumentException("JViewport.setBorder() not supported");
        }
!!!2855835.java!!!	getInsets() : Insets
        return new Insets(0, 0, 0, 0);
!!!2855963.java!!!	getInsets(inout insets : Insets) : Insets
        insets.left = insets.top = insets.right = insets.bottom = 0;
        return insets;
!!!2856091.java!!!	getBackingStoreGraphics(inout g : Graphics) : Graphics
        Graphics bsg = backingStoreImage.getGraphics();
        bsg.setColor(g.getColor());
        bsg.setFont(g.getFont());
        bsg.setClip(g.getClipBounds());
        return bsg;
!!!2856219.java!!!	paintViaBackingStore(inout g : Graphics) : void
        Graphics bsg = getBackingStoreGraphics(g);
	try {
	    super.paint(bsg);
	    g.drawImage(backingStoreImage, 0, 0, this);
	} finally {
	    bsg.dispose();
	}
!!!2856347.java!!!	paintViaBackingStore(inout g : Graphics, inout oClip : Rectangle) : void
        Graphics bsg = getBackingStoreGraphics(g);
	try {
	    super.paint(bsg);
	    g.setClip(oClip);
	    g.drawImage(backingStoreImage, 0, 0, this);
	} finally {
	    bsg.dispose();
	}
!!!2856475.java!!!	isOptimizedDrawingEnabled() : boolean
        return false;
!!!2856603.java!!!	isPaintingOrigin() : boolean
	if (scrollMode == BACKINGSTORE_SCROLL_MODE) {
	    return true;
	}
        return false;
!!!2856731.java!!!	getViewLocation() : Point
        Component view = getView();
        if (view != null) {
            return view.getLocation();
        }
        else {
            return new Point(0,0);
        }
!!!2856859.java!!!	paint(inout g : Graphics) : void
        int width = getWidth();
        int height = getHeight();

        if ((width <= 0) || (height <= 0)) {
            return;
        }

	if (repaintAll) {
	    repaintAll = false;
	    Rectangle clipB = g.getClipBounds();
	    if (clipB.width < getWidth() ||
		clipB.height < getHeight()) {
		waitingForRepaint = true;
		if (repaintTimer == null) {
		    repaintTimer = createRepaintTimer();
		}
		repaintTimer.stop();
		repaintTimer.start();
		// We really don't need to paint, a future repaint will
		// take care of it, but if we don't we get an ugly flicker.
	    }
	    else {
		if (repaintTimer != null) {
		    repaintTimer.stop();
		}
		waitingForRepaint = false;
	    }
	}
	else if (waitingForRepaint) {
	    // Need a complete repaint before resetting waitingForRepaint
	    Rectangle clipB = g.getClipBounds();
	    if (clipB.width >= getWidth() &&
		clipB.height >= getHeight()) {
		waitingForRepaint = false;
		repaintTimer.stop();
	    }
	}

        if (!backingStore || isBlitting() || getView() == null) {
            super.paint(g);
            lastPaintPosition = getViewLocation();
            return;
        }

        // If the view is smaller than the viewport and we are not opaque
	// (that is, we won't paint our background), we should set the
        // clip. Otherwise, as the bounds of the view vary, we will
        // blit garbage into the exposed areas.
        Rectangle viewBounds = getView().getBounds();
	if (!isOpaque()) {
	    g.clipRect(0, 0, viewBounds.width, viewBounds.height);
	}

        if (backingStoreImage == null) {
            // Backing store is enabled but this is the first call to paint.
            // Create the backing store, paint it and then copy to g.
	    // The backing store image will be created with the size of
	    // the viewport. We must make sure the clip region is the
	    // same size, otherwise when scrolling the backing image
	    // the region outside of the clipped region will not be painted,
	    // and result in empty areas.
	    backingStoreImage = createImage(width, height);
	    Rectangle clip = g.getClipBounds();
	    if (clip.width != width || clip.height != height) {
		if (!isOpaque()) {
		    g.setClip(0, 0, Math.min(viewBounds.width, width),
			      Math.min(viewBounds.height, height));
		}
		else {
		    g.setClip(0, 0, width, height);
		}
		paintViaBackingStore(g, clip);
	    }
	    else {
		paintViaBackingStore(g);
	    }
        }
        else {
            if (!scrollUnderway || lastPaintPosition.equals(getViewLocation())) {
                // No scrolling happened: repaint required area via backing store.
                paintViaBackingStore(g);
            } else {
                // The image was scrolled. Manipulate the backing store and flush it to g.
                Point blitFrom = new Point();
                Point blitTo = new Point();
                Dimension blitSize = new Dimension();
                Rectangle blitPaint = new Rectangle();

                Point newLocation = getViewLocation();
                int dx = newLocation.x - lastPaintPosition.x;
                int dy = newLocation.y - lastPaintPosition.y;
                boolean canBlit = computeBlit(dx, dy, blitFrom, blitTo, blitSize, blitPaint);
                if (!canBlit) {
                    // The image was either moved diagonally or
                    // moved by more than the image size: paint normally.
                    paintViaBackingStore(g);
                } else {
                    int bdx = blitTo.x - blitFrom.x;
                    int bdy = blitTo.y - blitFrom.y;

                    // Move the relevant part of the backing store.
		    Rectangle clip = g.getClipBounds();
		    // We don't want to inherit the clip region when copying
		    // bits, if it is inherited it will result in not moving
		    // all of the image resulting in garbage appearing on
		    // the screen.
		    g.setClip(0, 0, width, height);
                    Graphics bsg = getBackingStoreGraphics(g);
		    try {
		        bsg.copyArea(blitFrom.x, blitFrom.y, blitSize.width, blitSize.height, bdx, bdy);

			g.setClip(clip.x, clip.y, clip.width, clip.height);
			// Paint the rest of the view; the part that has just been exposed.
			Rectangle r = viewBounds.intersection(blitPaint);
			bsg.setClip(r);
			super.paint(bsg);

			// Copy whole of the backing store to g.
			g.drawImage(backingStoreImage, 0, 0, this);
		    } finally {
		        bsg.dispose();
		    }
                }
            }
        }
        lastPaintPosition = getViewLocation();
        scrollUnderway = false;
!!!2856987.java!!!	reshape(in x : int, in y : int, in w : int, in h : int) : void
	boolean sizeChanged = (getWidth() != w) || (getHeight() != h);
        if (sizeChanged) {
            backingStoreImage = null;
        }
        super.reshape(x, y, w, h);
	if (sizeChanged) {
	    fireStateChanged();
	}
!!!2857115.java!!!	setScrollMode(in mode : int) : void
        scrollMode = mode;
	if (mode == BACKINGSTORE_SCROLL_MODE) {
	    backingStore = true;
	} else {
	    backingStore = false;
	}
!!!2857243.java!!!	getScrollMode() : int
        return scrollMode;
!!!2857371.java!!!	isBackingStoreEnabled() : boolean
        return scrollMode == BACKINGSTORE_SCROLL_MODE;
!!!2857499.java!!!	setBackingStoreEnabled(inout enabled : boolean) : void
        if (enabled) {
	    setScrollMode(BACKINGSTORE_SCROLL_MODE);
	} else {
	    setScrollMode(BLIT_SCROLL_MODE);
	}
!!!2857627.java!!!	isBlitting() : boolean
        Component view = getView();
        return (scrollMode == BLIT_SCROLL_MODE) && 
	       (view instanceof JComponent) && ((JComponent)view).isOpaque();
!!!2857755.java!!!	getView() : Component
        try {
	    return getComponent(0);
	} catch (ArrayIndexOutOfBoundsException e) {
	    return null;
	}
!!!2857883.java!!!	setView(inout view : Component) : void

        /* Remove the viewport's existing children, if any.
         * Note that removeAll() isn't used here because it
         * doesn't call remove() (which JViewport overrides).
         */
        int n = getComponentCount();
        for(int i = n - 1; i >= 0; i--) {
            remove(getComponent(i));
        }

        isViewSizeSet = false;

        if (view != null) {
            super.addImpl(view, null, -1);
            viewListener = createViewListener();
            view.addComponentListener(viewListener);
        }

        if (hasHadValidView) {
            // Only fire a change if a view has been installed.
            fireStateChanged();
        }
        else if (view != null) {
            hasHadValidView = true;
        }

	revalidate();
	repaint();
!!!2858011.java!!!	getViewSize() : Dimension
        Component view = getView();

        if (view == null) {
            return new Dimension(0,0);
        }
        else if (isViewSizeSet) {
            return view.getSize();
        }
        else {
            return view.getPreferredSize();
        }
!!!2858139.java!!!	setViewSize(inout newSize : Dimension) : void
        Component view = getView();
        if (view != null) {
            Dimension oldSize = view.getSize();
            if (!newSize.equals(oldSize)) {
		// scrollUnderway will be true if this is invoked as the
		// result of a validate and setViewPosition was previously
		// invoked.
		scrollUnderway = false;
                view.setSize(newSize);
                isViewSizeSet = true;
                fireStateChanged();
            }
        }
!!!2858267.java!!!	getViewPosition() : Point
        Component view = getView();
        if (view != null) {
            Point p = view.getLocation();
            p.x = -p.x;
            p.y = -p.y;
            return p;
        }
        else {
            return new Point(0,0);
        }
!!!2858395.java!!!	setViewPosition(inout p : Point) : void
        Component view = getView();
        if (view == null) {
	    return;
	}
	
	int oldX, oldY, x = p.x, y = p.y;

	/* Collect the old x,y values for the views location
	 * and do the song and dance to avoid allocating 
	 * a Rectangle object if we don't have to.
	 */
	if (view instanceof JComponent) {
	    JComponent c = (JComponent)view;
	    oldX = c.getX();
	    oldY = c.getY();
	}
	else {
	    Rectangle r = view.getBounds();
	    oldX = r.x;
	    oldY = r.y;
	}

	/* The view scrolls in the opposite direction to mouse 
	 * movement.
	 */
	int newX = -x;
	int newY = -y;
	
	if ((oldX != newX) || (oldY != newY)) {
	    if (!waitingForRepaint && isBlitting() && canUseWindowBlitter()) {
		Graphics g = getGraphics();
		flushViewDirtyRegion(g);
		// This calls setBounds(), and then repaint().
                view.setLocation(newX, newY);
		// The cast to JComponent here is valid, if view is not 
		// a JComponent, isBlitting will return false.
		g.setClip(0,0,getWidth(), Math.min(getHeight(),
				 ((JComponent)view).getHeight()));
                // Repaint the complete component if the blit succeeded
                // and needsRepaintAfterBlit returns true.
		repaintAll = (windowBlitPaint(g) &&
                              needsRepaintAfterBlit());
		g.dispose();
		RepaintManager rm = RepaintManager.currentManager(this);
		rm.markCompletelyClean((JComponent)getParent());
		rm.markCompletelyClean(this);
		rm.markCompletelyClean((JComponent)view);
	    }
	    else {
		scrollUnderway = true;
		// This calls setBounds(), and then repaint().
		view.setLocation(newX, newY);
		repaintAll = false;
	    }
	    fireStateChanged();
	}
!!!2858523.java!!!	getViewRect() : Rectangle
        return new Rectangle(getViewPosition(), getExtentSize());
!!!2858651.java!!!	computeBlit(in dx : int, in dy : int, inout blitFrom : Point, inout blitTo : Point, inout blitSize : Dimension, inout blitPaint : Rectangle) : boolean
        int dxAbs = Math.abs(dx);
        int dyAbs = Math.abs(dy);
        Dimension extentSize = getExtentSize();

        if ((dx == 0) && (dy != 0) && (dyAbs < extentSize.height)) {
            if (dy < 0) {
                blitFrom.y = -dy;
                blitTo.y = 0;
                blitPaint.y = extentSize.height + dy;
            }
            else {
                blitFrom.y = 0;
                blitTo.y = dy;
                blitPaint.y = 0;
            }

            blitPaint.x = blitFrom.x = blitTo.x = 0;

            blitSize.width = extentSize.width;
            blitSize.height = extentSize.height - dyAbs;

            blitPaint.width = extentSize.width;
            blitPaint.height = dyAbs;

            return true;
        }

        else if ((dy == 0) && (dx != 0) && (dxAbs < extentSize.width)) {
            if (dx < 0) {
                blitFrom.x = -dx;
                blitTo.x = 0;
                blitPaint.x = extentSize.width + dx;
            }
            else {
                blitFrom.x = 0;
                blitTo.x = dx;
                blitPaint.x = 0;
            }

            blitPaint.y = blitFrom.y = blitTo.y = 0;

            blitSize.width = extentSize.width - dxAbs;
            blitSize.height = extentSize.height;

            blitPaint.y = 0;
            blitPaint.width = dxAbs;
            blitPaint.height = extentSize.height;

            return true;
        }

        else {
            return false;
        }
!!!2858779.java!!!	getExtentSize() : Dimension
        return getSize();
!!!2858907.java!!!	toViewCoordinates(inout size : Dimension) : Dimension
        return new Dimension(size);
!!!2859035.java!!!	toViewCoordinates(inout p : Point) : Point
        return new Point(p);
!!!2859163.java!!!	setExtentSize(inout newExtent : Dimension) : void
        Dimension oldExtent = getExtentSize();
        if (!newExtent.equals(oldExtent)) {
            setSize(newExtent);
            fireStateChanged();
        }
!!!2859419.java!!!	createViewListener() : ViewListener
        return new ViewListener();
!!!2859547.java!!!	createLayoutManager() : LayoutManager
        return ViewportLayout.SHARED_INSTANCE;
!!!2859675.java!!!	addChangeListener(inout l : ChangeListener) : void
        listenerList.add(ChangeListener.class, l);
!!!2859803.java!!!	removeChangeListener(inout l : ChangeListener) : void
        listenerList.remove(ChangeListener.class, l);
!!!2859931.java!!!	getChangeListeners() : ChangeListener
        return (ChangeListener[])listenerList.getListeners(
                ChangeListener.class);
!!!2860059.java!!!	fireStateChanged() : void
        Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length - 2; i >= 0; i -= 2) {
            if (listeners[i] == ChangeListener.class) {
                if (changeEvent == null) {
                    changeEvent = new ChangeEvent(this);
                }
                ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);
            }
        }
!!!2860187.java!!!	repaint(in tm : long, in x : int, in y : int, in w : int, in h : int) : void
        Container parent = getParent();
        if(parent != null)
            parent.repaint(tm,x+getX(),y+getY(),w,h);
        else
            super.repaint(tm,x,y,w,h);
!!!2860315.java!!!	paramString() : String
        String isViewSizeSetString = (isViewSizeSet ?
				      "true" : "false");
        String lastPaintPositionString = (lastPaintPosition != null ?
					  lastPaintPosition.toString() : "");
        String scrollUnderwayString = (scrollUnderway ?
				       "true" : "false");

        return super.paramString() +
        ",isViewSizeSet=" + isViewSizeSetString +
        ",lastPaintPosition=" + lastPaintPositionString +
        ",scrollUnderway=" + scrollUnderwayString;
!!!2860443.java!!!	firePropertyChange(in propertyName : String, inout oldValue : Object, inout newValue : Object) : void
	super.firePropertyChange(propertyName, oldValue, newValue);
	if (propertyName.equals(EnableWindowBlit)) {
	    if (newValue != null) {
	        setScrollMode(BLIT_SCROLL_MODE);
	    } else {
	        setScrollMode(SIMPLE_SCROLL_MODE);
	    }
	}
!!!2860571.java!!!	needsRepaintAfterBlit() : boolean
        // Find the first heavy weight ancestor. isObscured and
        // canDetermineObscurity are only appropriate for heavy weights.
        Component heavyParent = getParent();

	while (heavyParent != null && heavyParent.isLightweight()) {
            heavyParent = heavyParent.getParent();
        }

        if (heavyParent != null) {
            ComponentPeer peer = heavyParent.getPeer();

            if (peer != null && peer.canDetermineObscurity() &&
                                !peer.isObscured()) {
                // The peer says we aren't obscured, therefore we can assume
                // that we won't later be messaged to paint a portion that
                // we tried to blit that wasn't valid.
                // It is certainly possible that when we blited we were
                // obscured, and by the time this is invoked we aren't, but the
                // chances of that happening are pretty slim.
                return false;
            }
        }
        return true;
!!!2860699.java!!!	createRepaintTimer() : Timer
	Timer timer = new Timer(300, new ActionListener() {
	    public void actionPerformed(ActionEvent ae) {
		// waitingForRepaint will be false if a paint came down
		// with the complete clip rect, in which case we don't
		// have to cause a repaint.
		if (waitingForRepaint) {
		    repaint();
		}
	    }
	});
	timer.setRepeats(false);
	return timer;
!!!2860827.java!!!	flushViewDirtyRegion(inout g : Graphics) : void
	RepaintManager rm = RepaintManager.currentManager(this);
	JComponent view = (JComponent) getView();
	Rectangle dirty;

	dirty = rm.getDirtyRegion(view);
	if(dirty != null && dirty.width > 0 && dirty.height > 0) {
	    dirty.x += view.getX();
	    dirty.y += view.getY();
	    Rectangle clip = g.getClipBounds();
	    if (clip == null) {
		// Only happens in 1.2
		g.setClip(0, 0, getWidth(), getHeight());
	    }
	    g.clipRect(dirty.x, dirty.y, dirty.width, dirty.height);
            clip = g.getClipBounds();
            // Only paint the dirty region if it is visible.
            if (clip.width > 0 && clip.height > 0) {
                paintView(g);
            }
	}		
!!!2860955.java!!!	windowBlitPaint(inout g : Graphics) : boolean
	int width = getWidth();
        int height = getHeight();

        if ((width == 0) || (height == 0)) {
            return false;
        }
		
	boolean retValue;
	RepaintManager rm = RepaintManager.currentManager(this);
	JComponent view = (JComponent) getView();

	if (lastPaintPosition == null ||
	    lastPaintPosition.equals(getViewLocation())) {
	    paintView(g);
	    retValue = false;
	} else {
	    // The image was scrolled. Manipulate the backing store and flush
	    // it to g.
	    Point blitFrom = new Point();
	    Point blitTo = new Point();
	    Dimension blitSize = new Dimension();
	    Rectangle blitPaint = new Rectangle();

	    Point newLocation = getViewLocation();
	    int dx = newLocation.x - lastPaintPosition.x;
	    int dy = newLocation.y - lastPaintPosition.y;
	    boolean canBlit = computeBlit(dx, dy, blitFrom, blitTo, blitSize,
					  blitPaint);
	    if (!canBlit) {
		paintView(g);
		retValue = false;
	    } else {
		// Prepare the rest of the view; the part that has just been
		// exposed.
		Rectangle r = view.getBounds().intersection(blitPaint);
		r.x -= view.getX();
		r.y -= view.getY();

		// Attempt to use VolatileImage buffer for maximum performance.
		// If for any reason this fails (which should be rare), fallback to
		// plain old Image buffer.
		//
		boolean paintCompleted = false;
		Image off = null;
		if (rm.useVolatileDoubleBuffer() &&
		    (off = rm.getVolatileOffscreenBuffer(this,getWidth(),getHeight())) != null) {
		    VolatileImage vImage = (java.awt.image.VolatileImage)off;
                    GraphicsConfiguration gc = view.getGraphicsConfiguration();
		    for(int i = 0; !paintCompleted && i < RepaintManager.VOLATILE_LOOP_MAX; i++) {
		        if (vImage.validate(gc) ==
			    VolatileImage.IMAGE_INCOMPATIBLE)
			{
			    rm.resetVolatileDoubleBuffer(gc);
			    off = rm.getVolatileOffscreenBuffer(this,getWidth(),getHeight());
			    vImage = (java.awt.image.VolatileImage)off;
			}
		        blitDoubleBuffered(view, g, r.x, r.y, r.width, r.height,
				       blitFrom.x, blitFrom.y, blitTo.x, blitTo.y,
				       blitSize.width, blitSize.height, off);
				       
		        paintCompleted = !(vImage.contentsLost());
		    }
		}
		if (!paintCompleted) {
		    off = rm.getOffscreenBuffer(this, getWidth(), getHeight());
		    blitDoubleBuffered(view, g, r.x, r.y, r.width, r.height,
				       blitFrom.x, blitFrom.y, blitTo.x, blitTo.y, 
				       blitSize.width, blitSize.height, off);
		    paintCompleted = true;
		}
		retValue = true;
	    }
	}
	lastPaintPosition = getViewLocation();
	return retValue;
!!!2861083.java!!!	blitDoubleBuffered(inout view : JComponent, inout g : Graphics, in clipX : int, in clipY : int, in clipW : int, in clipH : int, in blitFromX : int, in blitFromY : int, in blitToX : int, in blitToY : int, in blitW : int, in blitH : int, inout off : Image) : void
	RepaintManager rm = RepaintManager.currentManager(this);
	boolean isDBE = rm.isDoubleBufferingEnabled();
	int bdx = blitToX - blitFromX;
	int bdy = blitToY - blitFromY;

	Graphics og = off.getGraphics();
	og.translate(-clipX,-clipY);
	og.setClip(clipX,clipY,clipW,clipH);
	rm.setDoubleBufferingEnabled(false);
	view.paint(og);
	rm.setDoubleBufferingEnabled(isDBE);

	// Move the relevant part of the backing store.
	blitWindowGraphics(blitFromX, blitFromY, blitW, blitH, bdx, bdy);
				    
	clipX += view.getX();
	clipY += view.getY();
	g.setClip(clipX,clipY,clipW,clipH);
	g.drawImage(off,clipX,clipY,null);
	og.dispose();
!!!2861211.java!!!	paintView(inout g : Graphics) : void
	Rectangle r = g.getClipBounds();
	RepaintManager rm = RepaintManager.currentManager(this);
	JComponent view = (JComponent) getView();
	r.x -= view.getX();
	r.y -= view.getY();

	// Attempt to use VolatileImage buffer for maximum performance.
	// If for any reason this fails (which should be rare), fallback to
	// plain old Image buffer.
	//
	boolean paintCompleted = false;
	Image off = null;
	if (rm.useVolatileDoubleBuffer() &&
	    (off = rm.getVolatileOffscreenBuffer(this,r.width,r.height)) != null) {
	    VolatileImage vImage = (java.awt.image.VolatileImage)off;
            GraphicsConfiguration gc = view.getGraphicsConfiguration();
	    for(int i=0; !paintCompleted && i < RepaintManager.VOLATILE_LOOP_MAX; i++) {
		if (vImage.validate(gc) ==
		    VolatileImage.IMAGE_INCOMPATIBLE)
		{
		    rm.resetVolatileDoubleBuffer(gc);
		    off = rm.getVolatileOffscreenBuffer(this,getWidth(),getHeight());
		    vImage = (java.awt.image.VolatileImage)off;
		}
	        paintViewDoubleBuffered(view, g, r.x, r.y, r.width, r.height, off);
	        paintCompleted = !(vImage.contentsLost());
	    }
	}
	if (!paintCompleted) {
	    off = rm.getOffscreenBuffer(this,r.width,r.height);
	    paintViewDoubleBuffered(view, g, r.x, r.y, r.width, r.height, off);
	    paintCompleted = true;
	}
!!!2861339.java!!!	paintViewDoubleBuffered(inout view : JComponent, inout g : Graphics, in clipX : int, in clipY : int, in clipW : int, in clipH : int, inout off : Image) : void
	RepaintManager rm = RepaintManager.currentManager(this);
	boolean isDBE = rm.isDoubleBufferingEnabled();

	Graphics og = off.getGraphics();
	if (view.getWidth() < clipW) {
	    og.setColor(getBackground());
	    og.fillRect(0,0,clipW,clipH);
	}
	og.translate(-clipX, -clipY);
	og.setClip(clipX, clipY, clipW, clipH);
	rm.setDoubleBufferingEnabled(false);
	view.paint(og);
	rm.setDoubleBufferingEnabled(isDBE);
	g.drawImage(off, clipX + view.getX(), clipY + view.getY(), null);
	og.dispose();
!!!2861467.java!!!	blitWindowGraphics(in x : int, in y : int, in w : int, in h : int, in ox : int, in oy : int) : void
	Container parent;
	for(parent = getParent() ; isLightweightComponent(parent) ;
	    parent = parent.getParent());
	Graphics wg = parent.getGraphics();
	Rectangle r = new Rectangle(x,y,w,h);
	r = SwingUtilities.convertRectangle(this, r, parent);
	wg.copyArea(r.x,r.y,r.width,r.height, ox, oy);
	wg.dispose();
!!!2861595.java!!!	canUseWindowBlitter() : boolean
	if (!isShowing() || (!(getParent() instanceof JComponent) &&
			     !(getView() instanceof JComponent))) {
	    return false;
	}
        if (isPainting()) {
            // We're in the process of painting, don't blit. If we were
            // to blit we would draw on top of what we're already drawing,
            // so bail.
            return false;
        }

        Rectangle dirtyRegion = RepaintManager.currentManager(this).
                                getDirtyRegion((JComponent)getParent());

        if (dirtyRegion != null && dirtyRegion.width > 0 &&
            dirtyRegion.height > 0) {
            // Part of the scrollpane needs to be repainted too, don't blit.
            return false;
        }

	Rectangle clip = new Rectangle(0,0,getWidth(),getHeight());
	Rectangle oldClip = new Rectangle();
	Rectangle tmp2 = null;
	Container parent;
	Component lastParent = null;
        int x, y, w, h;
		
	for(parent = this; parent != null && isLightweightComponent(parent); parent = parent.getParent()) {
            x = parent.getX();
            y = parent.getY();
            w = parent.getWidth();
            h = parent.getHeight();

	    oldClip.setBounds(clip);
	    SwingUtilities.computeIntersection(0, 0, w, h, clip);
	    if(!clip.equals(oldClip))
		return false;

	    if(lastParent != null && parent instanceof JComponent &&
	       !((JComponent)parent).isOptimizedDrawingEnabled()) {
		Component comps[] = parent.getComponents();
		int index = 0;

		for(int i = comps.length - 1 ;i >= 0; i--) {
		    if(comps[i] == lastParent) {
			index = i - 1;
			break;
		    }
		}

		while(index >= 0) {
                    tmp2 = comps[index].getBounds(tmp2);
					
		    if(tmp2.intersects(clip))
			return false;
		    index--;
		}
	    }
	    clip.x += x;
	    clip.y += y;
	    lastParent = parent;
	}
	if (parent == null) {
	    // No Window parent.
	    return false;
	}
	return true;
!!!2861723.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJViewport();
        }
        return accessibleContext;
