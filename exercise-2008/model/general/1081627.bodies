class PrivateCredentialPermission
!!!8648475.java!!!	PrivateCredentialPermission(in credentialClass : String, inout principals : Set)
	super(credentialClass);
	this.credentialClass = credentialClass;

	synchronized(principals) {
	    if (principals.size() == 0) {
		this.credOwners = EMPTY_PRINCIPALS;
	    } else {
		this.credOwners = new CredOwner[principals.size()];
		int index = 0;
		Iterator i = principals.iterator();
		while (i.hasNext()) {
		    Principal p = (Principal)i.next();
		    this.credOwners[index++] = new CredOwner
						(p.getClass().getName(),
						p.getName());
		}
	    }
	}
!!!8648603.java!!!	PrivateCredentialPermission(in name : String, in actions : String)
	super(name);

	if (!"read".equalsIgnoreCase(actions))
	    throw new IllegalArgumentException
		(ResourcesMgr.getString("actions can only be 'read'"));
	init(name);
!!!8648731.java!!!	getCredentialClass() : String
	return credentialClass;
!!!8648859.java!!!	getPrincipals() : String

	if (credOwners == null || credOwners.length == 0) {
	    return new String[0][0];
	}

	String[][] pArray = new String[credOwners.length][2];
	for (int i = 0; i < credOwners.length; i++) {
	    pArray[i][0] = credOwners[i].principalClass;
	    pArray[i][1] = credOwners[i].principalName;
	}
	return pArray;
!!!8648987.java!!!	implies(inout p : Permission) : boolean

	if (p == null || !(p instanceof PrivateCredentialPermission))
	    return false;

	PrivateCredentialPermission that = (PrivateCredentialPermission)p;

	if (!impliesCredentialClass(credentialClass, that.credentialClass))
	    return false;

	return impliesPrincipalSet(credOwners, that.credOwners);
!!!8649115.java!!!	equals(inout obj : Object) : boolean
        if (obj == this)
            return true;

        if (! (obj instanceof PrivateCredentialPermission))
            return false;

        PrivateCredentialPermission that = (PrivateCredentialPermission)obj;

	return (this.implies(that) && that.implies(this));
!!!8649243.java!!!	hashCode() : int
        return this.credentialClass.hashCode();
!!!8649371.java!!!	getActions() : String
	return "read";
!!!8649499.java!!!	newPermissionCollection() : PermissionCollection
	return null;
!!!8649627.java!!!	init(in name : String) : void

	if (name == null || name.trim().length() == 0) {
	    throw new IllegalArgumentException("invalid empty name");
	}

	ArrayList pList = new ArrayList();
	StringTokenizer tokenizer = new StringTokenizer(name, " ", true);
	String principalClass = null;
	String principalName = null;

	if (testing)
	    System.out.println("whole name = " + name);

	// get the Credential Class
	credentialClass = tokenizer.nextToken();
	if (testing)
	    System.out.println("Credential Class = " + credentialClass);

	if (tokenizer.hasMoreTokens() == false) {
	    MessageFormat form = new MessageFormat(ResourcesMgr.getString
		("permission name [name] syntax invalid: "));
	    Object[] source = {name};
	    throw new IllegalArgumentException
		(form.format(source) + ResourcesMgr.getString
			("Credential Class not followed by a " +
			"Principal Class and Name"));
	}

	while (tokenizer.hasMoreTokens()) {

	    // skip delimiter
	    tokenizer.nextToken();

	    // get the Principal Class
	    principalClass = tokenizer.nextToken();
	    if (testing)
		System.out.println("    Principal Class = " + principalClass);

	    if (tokenizer.hasMoreTokens() == false) {
		MessageFormat form = new MessageFormat(ResourcesMgr.getString
			("permission name [name] syntax invalid: "));
		Object[] source = {name};
		throw new IllegalArgumentException
			(form.format(source) + ResourcesMgr.getString
			("Principal Class not followed by a Principal Name"));
	    }

	    // skip delimiter
	    tokenizer.nextToken();

	    // get the Principal Name
	    principalName = tokenizer.nextToken();

	    if (!principalName.startsWith("\"")) {
		MessageFormat form = new MessageFormat(ResourcesMgr.getString
			("permission name [name] syntax invalid: "));
		Object[] source = {name};
		throw new IllegalArgumentException
			(form.format(source) + ResourcesMgr.getString
			("Principal Name must be surrounded by quotes"));
	    }

	    if (!principalName.endsWith("\"")) {

		// we have a name with spaces in it --
		// keep parsing until we find the end quote,
		// and keep the spaces in the name

		while (tokenizer.hasMoreTokens()) {
		    principalName = principalName + tokenizer.nextToken();
		    if (principalName.endsWith("\""))
			break;
		}

		if (!principalName.endsWith("\"")) {
		    MessageFormat form = new MessageFormat
			(ResourcesMgr.getString
			("permission name [name] syntax invalid: "));
		    Object[] source = {name};
		    throw new IllegalArgumentException
			(form.format(source) + ResourcesMgr.getString
				("Principal Name missing end quote"));
		}
	    }

	    if (testing)
		System.out.println("\tprincipalName = '" + principalName + "'");

	    principalName = principalName.substring
					(1, principalName.length() - 1);

	    if (principalClass.equals("*") &&
		!principalName.equals("*")) {
		    throw new IllegalArgumentException(ResourcesMgr.getString
			("PrivateCredentialPermission Principal Class " +
			"can not be a wildcard (*) value if Principal Name " +
			"is not a wildcard (*) value"));
	    }

	    if (testing)
		System.out.println("\tprincipalName = '" + principalName + "'");

	    pList.add(new CredOwner(principalClass, principalName));
	}

	this.credOwners = new CredOwner[pList.size()];
	pList.toArray((CredOwner[])this.credOwners);
!!!8649755.java!!!	impliesCredentialClass(in thisC : String, in thatC : String) : boolean

	// this should never happen
	if (thisC == null || thatC == null)
	    return false;

	if (testing)
	    System.out.println("credential class comparison: " +
				thisC + "/" + thatC);

	if (thisC.equals("*"))
	    return true;

	/**
	 * XXX let's not enable this for now --
	 *	if people want it, we'll enable it later
	 */
	/*
	if (thisC.endsWith("*")) {
	    String cClass = thisC.substring(0, thisC.length() - 2);
	    return thatC.startsWith(cClass);
	}
	*/

	return thisC.equals(thatC);
!!!8649883.java!!!	impliesPrincipalSet(inout thisP : CredOwner, inout thatP : CredOwner) : boolean

	// this should never happen
	if (thisP == null || thatP == null)
	    return false;

	if (thatP.length == 0)
	    return true;

	if (thisP.length == 0)
	    return false;

	for (int i = 0; i < thisP.length; i++) {
	    boolean foundMatch = false;
	    for (int j = 0; j < thatP.length; j++) {
		if (thisP[i].implies(thatP[j])) {
		    foundMatch = true;
		    break;
		}
	    }
	    if (!foundMatch) {
		return false;
	    }
	}
	return true;
!!!8650011.java!!!	readObject(inout s : ObjectInputStream) : void

        s.defaultReadObject();

        // perform new initialization from the permission name

        if (getName().indexOf(" ") == -1 && getName().indexOf("\"") == -1) {

	    // name only has a credential class specified
	    credentialClass = getName();
	    credOwners = EMPTY_PRINCIPALS;

        } else {

	    // perform regular initialization
	    init(getName());
        }
