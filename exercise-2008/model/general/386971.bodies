class JScrollPane
!!!9046555.java!!!	JScrollPane(inout view : Component, in vsbPolicy : int, in hsbPolicy : int)
	setLayout(new ScrollPaneLayout.UIResource());
        setVerticalScrollBarPolicy(vsbPolicy);
        setHorizontalScrollBarPolicy(hsbPolicy);
	setViewport(createViewport());
	setVerticalScrollBar(createVerticalScrollBar());
	setHorizontalScrollBar(createHorizontalScrollBar());
	if (view != null) {
	    setViewportView(view);
	}
	setOpaque(true);
        updateUI();

	if (!this.getComponentOrientation().isLeftToRight()) {
	    viewport.setViewPosition(new Point(Integer.MAX_VALUE, 0));
	}
!!!9046683.java!!!	JScrollPane(inout view : Component)
        this(view, VERTICAL_SCROLLBAR_AS_NEEDED, HORIZONTAL_SCROLLBAR_AS_NEEDED);
!!!9046811.java!!!	JScrollPane(in vsbPolicy : int, in hsbPolicy : int)
        this(null, vsbPolicy, hsbPolicy);
!!!9046939.java!!!	JScrollPane()
        this(null, VERTICAL_SCROLLBAR_AS_NEEDED, HORIZONTAL_SCROLLBAR_AS_NEEDED);
!!!9047067.java!!!	getUI() : ScrollPaneUI
        return (ScrollPaneUI)ui;
!!!9047195.java!!!	setUI(inout ui : ScrollPaneUI) : void
        super.setUI(ui);
!!!9047323.java!!!	updateUI() : void
        setUI((ScrollPaneUI)UIManager.getUI(this));
!!!9047451.java!!!	getUIClassID() : String
        return uiClassID;
!!!9047579.java!!!	setLayout(inout layout : LayoutManager) : void
        if (layout instanceof ScrollPaneLayout) {
            super.setLayout(layout);
            ((ScrollPaneLayout)layout).syncWithScrollPane(this);
        }
        else if (layout == null) {
            super.setLayout(layout);
        }
	else {
	    String s = "layout of JScrollPane must be a ScrollPaneLayout";
	    throw new ClassCastException(s);
	}
!!!9047707.java!!!	isValidateRoot() : boolean
        return true;
!!!9047835.java!!!	getVerticalScrollBarPolicy() : int
        return verticalScrollBarPolicy;
!!!9047963.java!!!	setVerticalScrollBarPolicy(in policy : int) : void
	switch (policy) {
	case VERTICAL_SCROLLBAR_AS_NEEDED:
	case VERTICAL_SCROLLBAR_NEVER:
	case VERTICAL_SCROLLBAR_ALWAYS:
		break;
	default:
	    throw new IllegalArgumentException("invalid verticalScrollBarPolicy");
	}
	int old = verticalScrollBarPolicy;
	verticalScrollBarPolicy = policy;
	firePropertyChange("verticalScrollBarPolicy", old, policy);
	revalidate();
	repaint();
!!!9048091.java!!!	getHorizontalScrollBarPolicy() : int
	return horizontalScrollBarPolicy;
!!!9048219.java!!!	setHorizontalScrollBarPolicy(in policy : int) : void
	switch (policy) {
	case HORIZONTAL_SCROLLBAR_AS_NEEDED:
	case HORIZONTAL_SCROLLBAR_NEVER:
	case HORIZONTAL_SCROLLBAR_ALWAYS:
		break;
	default:
	    throw new IllegalArgumentException("invalid horizontalScrollBarPolicy");
	}
	int old = horizontalScrollBarPolicy;
	horizontalScrollBarPolicy = policy;
	firePropertyChange("horizontalScrollBarPolicy", old, policy);
	revalidate();
	repaint();
!!!9048347.java!!!	getViewportBorder() : Border
        return viewportBorder;
!!!9048475.java!!!	setViewportBorder(inout viewportBorder : Border) : void
        Border oldValue = this.viewportBorder;
        this.viewportBorder = viewportBorder;
        firePropertyChange("viewportBorder", oldValue, viewportBorder);
!!!9048603.java!!!	getViewportBorderBounds() : Rectangle
	Rectangle borderR = new Rectangle(getSize());

	Insets insets = getInsets();
	borderR.x = insets.left;
	borderR.y = insets.top;
	borderR.width -= insets.left + insets.right;
	borderR.height -= insets.top + insets.bottom;

        boolean leftToRight = SwingUtilities.isLeftToRight(this);

	/* If there's a visible column header remove the space it 
	 * needs from the top of borderR.  
	 */

	JViewport colHead = getColumnHeader();
	if ((colHead != null) && (colHead.isVisible())) {
	    int colHeadHeight = colHead.getHeight();
	    borderR.y += colHeadHeight;
	    borderR.height -= colHeadHeight;
	}

	/* If there's a visible row header remove the space it needs
	 * from the left of borderR.  
	 */

	JViewport rowHead = getRowHeader();
	if ((rowHead != null) && (rowHead.isVisible())) {
	    int rowHeadWidth = rowHead.getWidth();
            if ( leftToRight ) {
	        borderR.x += rowHeadWidth;
	    }
	    borderR.width -= rowHeadWidth;
	}

	/* If there's a visible vertical scrollbar remove the space it needs
	 * from the width of borderR.  
	 */
	JScrollBar vsb = getVerticalScrollBar();
	if ((vsb != null) && (vsb.isVisible())) {
            int vsbWidth = vsb.getWidth();
            if ( !leftToRight ) {
                borderR.x += vsbWidth;
	    }
	    borderR.width -= vsbWidth;
	}

	/* If there's a visible horizontal scrollbar remove the space it needs
	 * from the height of borderR.  
	 */
	JScrollBar hsb = getHorizontalScrollBar();
	if ((hsb != null) && (hsb.isVisible())) {
	    borderR.height -= hsb.getHeight();
	}

	return borderR;
!!!9049371.java!!!	createHorizontalScrollBar() : JScrollBar
        return new ScrollBar(JScrollBar.HORIZONTAL);
!!!9049499.java!!!	getHorizontalScrollBar() : JScrollBar
        return horizontalScrollBar;
!!!9049627.java!!!	setHorizontalScrollBar(inout horizontalScrollBar : JScrollBar) : void
	JScrollBar old = getHorizontalScrollBar();
	this.horizontalScrollBar = horizontalScrollBar;
        if (horizontalScrollBar != null) {
            add(horizontalScrollBar, HORIZONTAL_SCROLLBAR);
        }
        else if (old != null) {
            remove(old);
        }
	firePropertyChange("horizontalScrollBar", old, horizontalScrollBar);

	revalidate();
	repaint();
!!!9049755.java!!!	createVerticalScrollBar() : JScrollBar
        return new ScrollBar(JScrollBar.VERTICAL);
!!!9049883.java!!!	getVerticalScrollBar() : JScrollBar
	return verticalScrollBar;
!!!9050011.java!!!	setVerticalScrollBar(inout verticalScrollBar : JScrollBar) : void
	JScrollBar old = getVerticalScrollBar();
	this.verticalScrollBar = verticalScrollBar;
	add(verticalScrollBar, VERTICAL_SCROLLBAR);
	firePropertyChange("verticalScrollBar", old, verticalScrollBar);

	revalidate();
	repaint();
!!!9050139.java!!!	createViewport() : JViewport
        return new JViewport();
!!!9050267.java!!!	getViewport() : JViewport
        return viewport;
!!!9050395.java!!!	setViewport(inout viewport : JViewport) : void
	JViewport old = getViewport();
	this.viewport = viewport;
	if (viewport != null) {
	    add(viewport, VIEWPORT);
	}
	else if (old != null) {
	    remove(old);
	}
	firePropertyChange("viewport", old, viewport);

	if (accessibleContext != null) {
	    ((AccessibleJScrollPane)accessibleContext).resetViewPort();
	}

	revalidate();
	repaint();
!!!9050523.java!!!	setViewportView(inout view : Component) : void
        if (getViewport() == null) {
            setViewport(createViewport());
        }
        getViewport().setView(view);
!!!9050651.java!!!	getRowHeader() : JViewport
        return rowHeader;
!!!9050779.java!!!	setRowHeader(inout rowHeader : JViewport) : void
	JViewport old = getRowHeader();
	this.rowHeader = rowHeader;	
	if (rowHeader != null) {
	    add(rowHeader, ROW_HEADER);
	}
	else if (old != null) {
	    remove(old);
	}
	firePropertyChange("rowHeader", old, rowHeader);
	revalidate();
	repaint();
!!!9050907.java!!!	setRowHeaderView(inout view : Component) : void
        if (getRowHeader() == null) {
            setRowHeader(createViewport());
        }
        getRowHeader().setView(view);
!!!9051035.java!!!	getColumnHeader() : JViewport
        return columnHeader;
!!!9051163.java!!!	setColumnHeader(inout columnHeader : JViewport) : void
	JViewport old = getColumnHeader();
	this.columnHeader = columnHeader;	
	if (columnHeader != null) {
	    add(columnHeader, COLUMN_HEADER);
	}
	else if (old != null) {
	    remove(old);
	}
	firePropertyChange("columnHeader", old, columnHeader);

	revalidate();
	repaint();
!!!9051291.java!!!	setColumnHeaderView(inout view : Component) : void
        if (getColumnHeader() == null) {
            setColumnHeader(createViewport());
        }
        getColumnHeader().setView(view);
!!!9051419.java!!!	getCorner(in key : String) : Component
	boolean isLeftToRight = getComponentOrientation().isLeftToRight();
	if (key.equals(LOWER_LEADING_CORNER)) {
	    key = isLeftToRight ? LOWER_LEFT_CORNER : LOWER_RIGHT_CORNER;
	} else if (key.equals(LOWER_TRAILING_CORNER)) {
	    key = isLeftToRight ? LOWER_RIGHT_CORNER : LOWER_LEFT_CORNER;
	} else if (key.equals(UPPER_LEADING_CORNER)) {
	    key = isLeftToRight ? UPPER_LEFT_CORNER : UPPER_RIGHT_CORNER;
	} else if (key.equals(UPPER_TRAILING_CORNER)) {
	    key = isLeftToRight ? UPPER_RIGHT_CORNER : UPPER_LEFT_CORNER;
	}
	if (key.equals(LOWER_LEFT_CORNER)) {
	    return lowerLeft;
	}
	else if (key.equals(LOWER_RIGHT_CORNER)) {
	    return lowerRight;
	}
	else if (key.equals(UPPER_LEFT_CORNER)) {
	    return upperLeft;
	}
	else if (key.equals(UPPER_RIGHT_CORNER)) {
	    return upperRight;
	}
	else {
	    return null;
	}
!!!9051547.java!!!	setCorner(in key : String, inout corner : Component) : void
	Component old;
	boolean isLeftToRight = getComponentOrientation().isLeftToRight();
	if (key.equals(LOWER_LEADING_CORNER)) {
	    key = isLeftToRight ? LOWER_LEFT_CORNER : LOWER_RIGHT_CORNER;
	} else if (key.equals(LOWER_TRAILING_CORNER)) {
	    key = isLeftToRight ? LOWER_RIGHT_CORNER : LOWER_LEFT_CORNER;
	} else if (key.equals(UPPER_LEADING_CORNER)) {
	    key = isLeftToRight ? UPPER_LEFT_CORNER : UPPER_RIGHT_CORNER;
	} else if (key.equals(UPPER_TRAILING_CORNER)) {
	    key = isLeftToRight ? UPPER_RIGHT_CORNER : UPPER_LEFT_CORNER;
	}
	if (key.equals(LOWER_LEFT_CORNER)) {
	    old = lowerLeft;
	    lowerLeft = corner;
	}
	else if (key.equals(LOWER_RIGHT_CORNER)) {
	    old = lowerRight;
	    lowerRight = corner;
	}
	else if (key.equals(UPPER_LEFT_CORNER)) {
	    old = upperLeft;
	    upperLeft = corner;
	}
	else if (key.equals(UPPER_RIGHT_CORNER)) {
	    old = upperRight;
	    upperRight = corner;
	}
	else {
	    throw new IllegalArgumentException("invalid corner key");
	}
	if (old != null) {
	    remove(old);
	}
	if (corner != null) {
	    add(corner, key);
	}
	firePropertyChange(key, old, corner);
	revalidate();
	repaint();
!!!9051675.java!!!	setComponentOrientation(inout co : ComponentOrientation) : void
        super.setComponentOrientation( co );
        if( verticalScrollBar != null )
            verticalScrollBar.setComponentOrientation( co );
        if( horizontalScrollBar != null )
            horizontalScrollBar.setComponentOrientation( co );
!!!9051803.java!!!	isWheelScrollingEnabled() : boolean
return wheelScrollState;
!!!9051931.java!!!	setWheelScrollingEnabled(inout handleWheel : boolean) : void
        boolean old = wheelScrollState;
        wheelScrollState = handleWheel;
        firePropertyChange("wheelScrollingEnabled", old, handleWheel);
!!!9052059.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();
        if (getUIClassID().equals(uiClassID)) {
            byte count = JComponent.getWriteObjCounter(this);
            JComponent.setWriteObjCounter(this, --count);
            if (count == 0 && ui != null) {
                ui.installUI(this);
            }
        }
!!!9052187.java!!!	paramString() : String
        String viewportBorderString = (viewportBorder != null ?
				       viewportBorder.toString() : "");
        String viewportString = (viewport != null ?
				 viewport.toString() : "");
        String verticalScrollBarPolicyString;
        if (verticalScrollBarPolicy == VERTICAL_SCROLLBAR_AS_NEEDED) {
            verticalScrollBarPolicyString = "VERTICAL_SCROLLBAR_AS_NEEDED";
        } else if (verticalScrollBarPolicy == VERTICAL_SCROLLBAR_NEVER) {
            verticalScrollBarPolicyString = "VERTICAL_SCROLLBAR_NEVER";
        } else if (verticalScrollBarPolicy == VERTICAL_SCROLLBAR_ALWAYS) {
            verticalScrollBarPolicyString = "VERTICAL_SCROLLBAR_ALWAYS";
        } else verticalScrollBarPolicyString = "";
        String horizontalScrollBarPolicyString;
        if (horizontalScrollBarPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED) {
            horizontalScrollBarPolicyString = "HORIZONTAL_SCROLLBAR_AS_NEEDED";
        } else if (horizontalScrollBarPolicy == HORIZONTAL_SCROLLBAR_NEVER) {
            horizontalScrollBarPolicyString = "HORIZONTAL_SCROLLBAR_NEVER";
        } else if (horizontalScrollBarPolicy == HORIZONTAL_SCROLLBAR_ALWAYS) {
            horizontalScrollBarPolicyString = "HORIZONTAL_SCROLLBAR_ALWAYS";
        } else horizontalScrollBarPolicyString = "";
        String horizontalScrollBarString = (horizontalScrollBar != null ?
					    horizontalScrollBar.toString()
					    : "");
        String verticalScrollBarString = (verticalScrollBar != null ?
					  verticalScrollBar.toString() : "");
        String columnHeaderString = (columnHeader != null ?
				     columnHeader.toString() : "");
        String rowHeaderString = (rowHeader != null ?
				  rowHeader.toString() : "");
        String lowerLeftString = (lowerLeft != null ?
				  lowerLeft.toString() : "");
        String lowerRightString = (lowerRight != null ?
				  lowerRight.toString() : "");
        String upperLeftString = (upperLeft != null ?
				  upperLeft.toString() : "");
        String upperRightString = (upperRight != null ?
				  upperRight.toString() : "");

        return super.paramString() +
        ",columnHeader=" + columnHeaderString +
        ",horizontalScrollBar=" + horizontalScrollBarString +
        ",horizontalScrollBarPolicy=" + horizontalScrollBarPolicyString +
        ",lowerLeft=" + lowerLeftString +
        ",lowerRight=" + lowerRightString +
        ",rowHeader=" + rowHeaderString +
        ",upperLeft=" + upperLeftString +
        ",upperRight=" + upperRightString +
        ",verticalScrollBar=" + verticalScrollBarString +
        ",verticalScrollBarPolicy=" + verticalScrollBarPolicyString +
        ",viewport=" + viewportString +
        ",viewportBorder=" + viewportBorderString;
!!!9052315.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJScrollPane();
        }
        return accessibleContext;
