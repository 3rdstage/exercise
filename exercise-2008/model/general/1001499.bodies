class AtomicReferenceFieldUpdaterImpl
!!!7994523.java!!!	AtomicReferenceFieldUpdaterImpl(inout tclass : Class, inout vclass : Class, in fieldName : String)
            Field field = null;
            Class fieldClass = null;
	    Class caller = null;
	    int modifiers = 0;
            try {
                field = tclass.getDeclaredField(fieldName);
		caller = sun.reflect.Reflection.getCallerClass(3);
		modifiers = field.getModifiers();
                sun.reflect.misc.ReflectUtil.ensureMemberAccess(
                    caller, tclass, null, modifiers); 
		sun.reflect.misc.ReflectUtil.checkPackageAccess(tclass);
                fieldClass = field.getType();
            } catch(Exception ex) {
                throw new RuntimeException(ex);
            }
            
            if (vclass != fieldClass)
                throw new ClassCastException();
            
            if (!Modifier.isVolatile(modifiers))
                throw new IllegalArgumentException("Must be volatile type");

	    this.cclass = (Modifier.isProtected(modifiers) &&
			   caller != tclass) ? caller : null;
            this.tclass = tclass;
            this.vclass = vclass;
            offset = unsafe.objectFieldOffset(field);
!!!7994651.java!!!	compareAndSet(inout obj : T, inout expect : V, inout update : V) : boolean
            if (!tclass.isInstance(obj) ||
                (update != null && !vclass.isInstance(update)))
                throw new ClassCastException();
	    if (cclass != null)
	        ensureProtectedAccess(obj);
            return unsafe.compareAndSwapObject(obj, offset, expect, update);
!!!7994779.java!!!	weakCompareAndSet(inout obj : T, inout expect : V, inout update : V) : boolean
            // same implementation as strong form for now
            if (!tclass.isInstance(obj) ||
                (update != null && !vclass.isInstance(update)))
                throw new ClassCastException();
	    if (cclass != null)
	        ensureProtectedAccess(obj);
            return unsafe.compareAndSwapObject(obj, offset, expect, update);
!!!7994907.java!!!	set(inout obj : T, inout newValue : V) : void
            if (!tclass.isInstance(obj) ||
                (newValue != null && !vclass.isInstance(newValue)))
                throw new ClassCastException();
	    if (cclass != null)
	        ensureProtectedAccess(obj);
            unsafe.putObjectVolatile(obj, offset, newValue);
!!!7995035.java!!!	get(inout obj : T) : V
            if (!tclass.isInstance(obj))
                throw new ClassCastException();
	    if (cclass != null)
	        ensureProtectedAccess(obj);
            return (V)unsafe.getObjectVolatile(obj, offset);
!!!7995163.java!!!	ensureProtectedAccess(inout obj : T) : void
	    if (cclass.isInstance(obj)) {
		return;
	    }
	    throw new RuntimeException (
                new IllegalAccessException("Class " +
		    cclass.getName() +
                    " can not access a protected member of class " +
                    tclass.getName() +
		    " using an instance of " +
                    obj.getClass().getName()
		)
	    );
