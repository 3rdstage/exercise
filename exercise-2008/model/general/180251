format 66
"instrument" // src::java::lang::instrument
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/lang/instrument"
  java_package "java.lang.instrument"
  classview 175003 "instrument"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 920475 "ClassDefinition"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Copyright 2003 Wily Technology, Inc.


This class serves as a parameter block to the <code>Instrumentation.redefineClasses</code> method.
Serves to bind the <code>Class</code> that needs redefining together with the new class file bytes.

@see     java.lang.instrument.Instrumentation#redefineClasses
@since   JDK1.5"
      classrelation 1794843 // mClass (<unidirectional association>)
	relation 1794843 --->
	  a role_name "mClass" const_relation private
	    comment "
 The class to redefine

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1794843 // mClass (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      attribute 2743451 "mClassFile"
	const_attribute private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The replacement class file bytes
"
      end

      operation 7092891 "ClassDefinition"
	public explicit_return_type ""
	nparams 2
	  param inout name "theClass" type class_ref 164635 // Class
	  param in name "theClassFile" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates a new <code>ClassDefinition</code> binding using the supplied
 class and class file bytes. Does not copy the supplied buffer, just captures a reference to it.

@param theClass the <code>Class</code> that needs redefining
@param theClassFile the new class file bytes

@throws java.lang.NullPointerException if the supplied class or array is <code>null</code>."
      end

      operation 7093019 "getDefinitionClass"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class.

@return    the <code>Class</code> object referred to."
      end

      operation 7093147 "getDefinitionClassFile"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of bytes that contains the new class file.

@return    the class file bytes."
      end
    end

    class 920603 "ClassFileTransformer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Copyright 2003 Wily Technology, Inc.


An agent provides an implementation of this interface in order
to transform class files.  
The transformation occurs before the class is defined by the JVM.
<P>
Note the term <i>class file</i> is used as defined in the chapter
<a href=\"http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#80959\">The class File Format</a>
of <i>The Java Virtual Machine Specification</i>, to mean a sequence
of bytes in class file format, whether or not they reside in a file.

@see     java.lang.instrument.Instrumentation
@see     java.lang.instrument.Instrumentation#addTransformer
@see     java.lang.instrument.Instrumentation#removeTransformer
@since   JDK1.5"
      operation 7093275 "transform"
	public explicit_return_type "byte"
	nparams 5
	  param inout name "loader" type class_ref 163611 // ClassLoader
	  param in name "className" explicit_type "String"
	  param inout name "classBeingRedefined" type class_ref 164635 // Class
	  param inout name "protectionDomain" type class_ref 526875 // ProtectionDomain
	  param in name "classfileBuffer" explicit_type "byte"
	nexceptions 1
	  exception class_ref 920731 // IllegalClassFormatException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The implementation of this method may transform the supplied class file and 
return a new replacement class file.

<P>
Once a transformer has been registered with
{@link java.lang.instrument.Instrumentation#addTransformer Instrumentation.addTransformer},
the transformer will be called for every new class definition and every class redefinition.
The request for a new class definition is made with
{@link java.lang.ClassLoader#defineClass ClassLoader.defineClass}.
The request for a class redefinition is made with
{@link java.lang.instrument.Instrumentation#redefineClasses Instrumentation.redefineClasses}
or its native equivalents.
The transformer is called during the processing of the request, before the class file bytes
have been verified or applied.

<P>
If the implementing method determines that no transformations are needed,
it should return <code>null</code>. 
Otherwise, it should create a new <code>byte[]</code> array,
copy the input <code>classfileBuffer</code> into it,
along with all desired transformations, and return the new array. 
The input <code>classfileBuffer</code> must not be modified.

<P>
In the redefine case, the transformer must support the redefinition semantics.
If a class that the transformer changed during initial definition is later redefined, the
transformer must insure that the second class output class file is a legal
redefinition of the first output class file.

<P>
If the transformer believes the <code>classFileBuffer</code> does not
represent a validly formatted class file, it should throw
an <code>IllegalClassFormatException</code>.  Subsequent transformers
will still be called and the load or redefine will still
be attempted.  Throwing an <code>IllegalClassFormatException</code> thus
has the same effect as returning null but facilitates the
logging or debugging of format corruptions.

@param loader                the defining loader of the class to be transformed,
                             may be <code>null</code> if the bootstrap loader
@param className             the name of the class in the internal form of fully
                             qualified class and interface names as defined in
                             <i>The Java Virtual Machine Specification</i>.  
                             For example, <code>\"java/util/List\"</code>.
@param classBeingRedefined   if this is a redefine, the class being redefined, 
                             otherwise <code>null</code>
@param protectionDomain      the protection domain of the class being defined or redefined
@param classfileBuffer       the input byte buffer in class file format - must not be modified

@throws IllegalClassFormatException if the input does not represent a well-formed class file
@return  a well-formed class file buffer (the result of the transform), 
or <code>null</code> if no transform is performed.
@see Instrumentation#redefineClasses"
      end
    end

    class 920731 "IllegalClassFormatException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Copyright 2003 Wily Technology, Inc.


Thrown by an implementation of
{@link java.lang.instrument.ClassFileTransformer#transform ClassFileTransformer.transform}
when its input parameters are invalid. 
This may occur either because the initial class file bytes were 
invalid or a previously applied transform corrupted the bytes.

@see     java.lang.instrument.ClassFileTransformer#transform
@since   JDK1.5"
      classrelation 1794971 // <generalisation>
	relation 1794971 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1794971 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      operation 7093403 "IllegalClassFormatException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IllegalClassFormatException</code> with no 
detail message. "
      end

      operation 7093531 "IllegalClassFormatException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IllegalClassFormatException</code> with the 
specified detail message. 

@param   s   the detail message."
      end
    end

    class 920859 "Instrumentation"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Copyright 2003 Wily Technology, Inc.


This class provides services needed to instrument Java
programming language code.
Instrumentation is the addition of byte-codes to methods for the
purpose of gathering data to be utilized by tools. 
Since the changes are purely additive, these tools do not modify
application state or behavior.
Examples of such benign tools include monitoring agents, profilers,
coverage analyzers, and event loggers.

<P>
The only way to access an instance of the <code>Instrumentation</code>
interface is for the JVM to be launched in a way that indicates
the agent class - see 
{@linkplain java.lang.instrument the package specification}.
The <code>Instrumentation</code> instance is passed
to the <code>premain</code> method of the agent class.
Once an agent acquires the <code>Instrumentation</code> instance,
the agent may call methods on the instance at any time.

@since   JDK1.5"
      operation 7093659 "addTransformer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transformer" type class_ref 920603 // ClassFileTransformer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the supplied transformer. All future class definitions
will be seen by the transformer, except definitions of classes upon which any
registered transformer is dependent. If multiple transformers are
registered, they will be called in the order added. If a transformer throws
during execution, the JVM will still call the other registered transformers in order.
The same transformer may be added more than once.
All transformers registered with <code>addTransformer</code>
will always see the class files before any external JVMTI ClassFileLoadHook event listener does.
<P>
This method is intended for use in instrumentation, as described in the
{@linkplain Instrumentation class specification}.

@param transformer          the transformer to register
@throws java.lang.NullPointerException if passed a <code>null</code> transformer"
      end

      operation 7093787 "removeTransformer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "transformer" type class_ref 920603 // ClassFileTransformer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unregisters the supplied transformer. Future class definitions will
not be shown to the transformer. Removes the most-recently-added matching
instance of the transformer. Due to the multi-threaded nature of
class loading, it is possible for a transformer to receive calls
after it has been removed. Transformers should be written defensively
to expect this situation. 

@param transformer          the transformer to unregister
@return  true if the transformer was found and removed, false if the
          transformer was not found
@throws java.lang.NullPointerException if passed a <code>null</code> transformer"
      end

      operation 7093915 "isRedefineClassesSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not the current JVM configuration supports redefinition of classes.
The ability to redefine an already loaded class is an optional capability
of a JVM.
During a single instantiation of a single JVM, multiple calls to this
method will always return the same answer.
@return  true if the current JVM configuration supports redefinition of classes,
false if not.
@see #redefineClasses"
      end

      operation 7094043 "redefineClasses"
	public explicit_return_type "void"
	nparams 1
	  param inout name "definitions" type class_ref 920475 // ClassDefinition
	nexceptions 2
	  exception class_ref 201883 // ClassNotFoundException
	  exception class_ref 920987 // UnmodifiableClassException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Redefine the supplied set of classes using the supplied class files. Operates on
a set in order to allow interlocked changes to more than one class at the same time
(a redefinition of class A can require a redefinition of class B).

<P>
If a redefined method has active stack frames, those active frames continue to
run the bytecodes of the original method. 
The redefined method will be used on new invokes.

<P>
This method does not cause any initialization except that which would occur
under the customary JVM semantics. In other words, redefining a class
does not cause its initializers to be run. The values of static variables
will remain as they were prior to the call.

<P>
Instances of the redefined class are not affected.

<P>
Registered transformers will be called before the redefine operation is applied.

<P>
The redefinition may change method bodies, the constant pool and attributes.
The redefinition must not add, remove or rename fields or methods, change the 
signatures of methods, or change inheritance.  These restrictions maybe be
lifted in future versions.

<P>
A zero-length <code>definitions</code> array is allowed, in this case, this
method does nothing.

<P>
If this method throws an exception, no classes have been redefined.
<P>
This method is intended for use in instrumentation, as described in the
{@linkplain Instrumentation class specification}.

@param definitions array of classes to redefine with corresponding definitions
@throws java.lang.ClassNotFoundException if a specified class cannot be found
@throws java.lang.instrument.UnmodifiableClassException if a specified class cannot be modified
@throws java.lang.UnsupportedOperationException if the current configuration of the JVM does not allow 
redefinition ({@link #isRedefineClassesSupported} is false) or the redefinition made unsupported changes
@throws java.lang.ClassFormatError if the data did not contain a valid class
@throws java.lang.NoClassDefFoundError if the name in the class file is not equal to the name of the class
@throws java.lang.UnsupportedClassVersionError if the class file version numbers are not supported
@throws java.lang.ClassCircularityError if the new classes contain a circularity
@throws java.lang.LinkageError if a linkage error occurs
@throws java.lang.NullPointerException if the supplied definitions array or any of its components is <code>null</code>.

@see #isRedefineClassesSupported
@see #addTransformer
@see java.lang.instrument.ClassFileTransformer"
      end

      operation 7094171 "getAllLoadedClasses"
	public return_type class_ref 164635 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all classes currently loaded by the JVM.

@return an array containing all the classes loaded by the JVM, zero-length if there are none"
      end

      operation 7094299 "getInitiatedClasses"
	public return_type class_ref 164635 // Class
	nparams 1
	  param inout name "loader" type class_ref 163611 // ClassLoader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all classes for which <code>loader</code> is an initiating loader.
If the supplied loader is <code>null</code>, classes initiated by the bootstrap class
loader are returned.

@param loader          the loader whose initiated class list will be returned
@return an array containing all the classes for which loader is an initiating loader, 
         zero-length if there are none"
      end

      operation 7094427 "getObjectSize"
	public explicit_return_type "long"
	nparams 1
	  param inout name "objectToSize" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an implementation-specific approximation of the amount of storage consumed by
the specified object. The result may include some or all of the object's overhead,
and thus is useful for comparison within an implementation but not between implementations.

The estimate may change during a single invocation of the JVM.

@param objectToSize     the object to size
@return an implementation-specific approximation of the amount of storage consumed by the specified object
@throws java.lang.NullPointerException if the supplied Object is <code>null</code>."
      end
    end

    class 920987 "UnmodifiableClassException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown by an implementation of
{@link java.lang.instrument.Instrumentation#redefineClasses Instrumentation.redefineClasses}
when one of the specified classes cannot be modified.

@see     java.lang.instrument.Instrumentation#redefineClasses
@since   JDK1.5"
      classrelation 1795099 // <generalisation>
	relation 1795099 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1795099 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      operation 7094555 "UnmodifiableClassException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>UnmodifiableClassException</code> with no 
detail message. "
      end

      operation 7094683 "UnmodifiableClassException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>UnmodifiableClassException</code> with the 
specified detail message. 

@param   s   the detail message."
      end
    end
  end

  deploymentview 166683 "instrument"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 691099 "ClassDefinition"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 920475 // ClassDefinition
      end
      comment "@(#)ClassDefinition.java	1.4 04/05/05

SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. "
    end

    artifact 691227 "ClassFileTransformer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.ProtectionDomain;
${definition}"
      associated_classes
	class_ref 920603 // ClassFileTransformer
      end
      comment "@(#)ClassFileTransformer.java	1.5 04/05/05

SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. "
    end

    artifact 691355 "IllegalClassFormatException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 920731 // IllegalClassFormatException
      end
      comment "@(#)IllegalClassFormatException.java	1.2 03/08/16

SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. "
    end

    artifact 691483 "Instrumentation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 920859 // Instrumentation
      end
      comment "@(#)Instrumentation.java	1.7 04/06/08

SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. "
    end

    artifact 691611 "UnmodifiableClassException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 920987 // UnmodifiableClassException
      end
      comment "@(#)UnmodifiableClassException.java	1.2 04/03/01

SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. "
    end
  end
end
